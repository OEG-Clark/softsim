{"home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.None.train_with_hwdb2.eval": [[21, 111], ["torch.utils.data.DataLoader", "len", "iter", "model.eval", "tqdm.tqdm", "tqdm.tqdm.close", "log_writer.write", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "dataset.data_utils_kernel_box.AlignCollate", "next", "imgs.to.to", "kernel_labels.to.to", "model", "criterion_kernel", "criterion_kernel.item", "models.loss_ctc.ctc_loss", "loss_char.item", "torch.save", "torch.save", "torch.save", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "tqdm.tqdm.display", "tqdm.tqdm.update", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.None.train_with_hwdb2.eval", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.ctc_loss"], ["def", "eval", "(", "model", ",", "evel_dataset", ",", "criterion_kernel", ",", "criterion_char", ",", "epoch", ",", "is_save", "=", "True", ")", ":", "\n", "    ", "eval_dataloader", "=", "DataLoader", "(", "dataset", "=", "evel_dataset", ",", "collate_fn", "=", "AlignCollate", "(", ")", ",", "batch_size", "=", "2", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "False", ")", "\n", "evel_steps", "=", "len", "(", "eval_dataloader", ")", "\n", "evel_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "model", ".", "eval", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "evel_steps", ")", "\n", "a_CR_correct_chars", ",", "a_AR_correct_chars", ",", "a_all_chars", "=", "0", ",", "0", ",", "0", "\n", "loss_all", "=", "0", "\n", "loss_kernel_all", "=", "0", "\n", "loss_char_all", "=", "0", "\n", "editdistence", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "evel_step", "in", "range", "(", "evel_steps", ")", ":", "\n", "            ", "imgs", ",", "kernel_labels", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", ",", "_", "=", "next", "(", "evel_iter", ")", "\n", "# torch.cuda.empty_cache()", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "kernel_labels", "=", "kernel_labels", ".", "to", "(", "device", ")", "\n", "kernels_pred", ",", "out_chars", ",", "sub_img_nums", "=", "model", "(", "imgs", ",", "text_polys", ",", "is_train", "=", "False", ")", "\n", "\n", "loss_kernel", "=", "criterion_kernel", "(", "kernels_pred", ",", "kernel_labels", ")", "\n", "loss_kernel_item", "=", "loss_kernel", ".", "item", "(", ")", "\n", "if", "(", "evel_step", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "is_print", "=", "False", "\n", "", "else", ":", "\n", "                ", "is_print", "=", "False", "\n", "", "loss_char", ",", "CR_correct_chars", ",", "AR_correct_chars", ",", "all_chars", "=", "ctc_loss", "(", "criterion_char", ",", "out_chars", ",", "label_tensors", ",", "text_lengths", ",", "\n", "sub_img_nums", ",", "\n", "char_set", ",", "is_print", ")", "\n", "\n", "a_CR_correct_chars", "+=", "CR_correct_chars", "\n", "a_AR_correct_chars", "+=", "AR_correct_chars", "\n", "a_all_chars", "+=", "all_chars", "\n", "loss_char_item", "=", "loss_char", ".", "item", "(", ")", "\n", "loss_all", "+=", "0.0", "*", "loss_kernel_item", "+", "loss_char_item", "\n", "loss_char_all", "+=", "loss_char_item", "\n", "loss_kernel_all", "+=", "loss_kernel_item", "\n", "\n", "AR", "=", "a_AR_correct_chars", "/", "(", "a_all_chars", "+", "1", ")", "\n", "CR", "=", "a_CR_correct_chars", "/", "(", "a_all_chars", "+", "1", ")", "\n", "if", "evel_step", "%", "10", "==", "0", ":", "\n", "                ", "pbar", ".", "display", "(", "\n", "'eval epoch: {} '", "\n", "'steps:{}/{} '", "\n", "'loss_char_all:{:.6f} '", "\n", "'loss_char:{:.4f} '", "\n", "'loss_kernel_all:{:.6f} '", "\n", "'loss_kernel:{:.4f} '", "\n", "'AR:{:.4f} '", "\n", "\n", "'CR:{:.4f} AR_all:{:.4f} '", "\n", "'CR_all:{:.4f}\\n'", ".", "\n", "format", "(", "epoch", ",", "\n", "evel_step", ",", "\n", "evel_steps", ",", "\n", "loss_char_all", "/", "(", "evel_step", "+", "1", ")", ",", "\n", "loss_char_item", ",", "\n", "loss_kernel_all", "/", "(", "evel_step", "+", "1", ")", ",", "\n", "loss_kernel_item", ",", "\n", "\n", "AR_correct_chars", "/", "all_chars", ",", "\n", "CR_correct_chars", "/", "all_chars", ",", "\n", "AR", ",", "\n", "CR", ")", ")", "\n", "\n", "pbar", ".", "update", "(", "10", ")", "\n", "", "", "", "pbar", ".", "close", "(", ")", "\n", "AR", "=", "a_AR_correct_chars", "/", "(", "a_all_chars", "+", "1", ")", "\n", "CR", "=", "a_CR_correct_chars", "/", "(", "a_all_chars", "+", "1", ")", "\n", "global", "max_CR", "\n", "if", "is_save", ":", "\n", "        ", "if", "CR", ">", "max_CR", ":", "\n", "            ", "max_CR", "=", "CR", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'./output/with_tcn_big_hwdb_all_t/model_c_'", "\n", "'epoch_{}_'", "\n", "'loss_char_all_{:.4f}_'", "\n", "'loss_kernel_all_{:.4f}_'", "\n", "'AR_{:.6f}_'", "\n", "'CR_{:.6f}.pth'", ".", "format", "(", "epoch", ",", "\n", "loss_char_all", "/", "(", "evel_steps", "+", "1", ")", ",", "\n", "loss_kernel_all", "/", "(", "evel_steps", "+", "1", ")", ",", "\n", "AR", ",", "\n", "CR", ")", ")", "\n", "", "", "log_writer", ".", "write", "(", "'eval epoch:{} loss_kernel:{:.4f} loss_char:{:.4f} AR:{:.4f} CR:{:.4f}\\n'", ".", "format", "(", "\n", "epoch", ",", "\n", "loss_kernel_all", "/", "(", "evel_steps", "+", "1", ")", ",", "\n", "loss_char_all", "/", "(", "evel_steps", "+", "1", ")", ",", "\n", "a_AR_correct_chars", "/", "a_all_chars", ",", "\n", "a_CR_correct_chars", "/", "a_all_chars", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.None.train_with_hwdb2.train": [[113, 203], ["torch.utils.data.DataLoader", "len", "iter", "model.train", "tqdm.tqdm", "range", "log_writer.write", "tqdm.tqdm.close", "next", "imgs.to.to", "kernel_labels.to.to", "optimizer.zero_grad", "scaler.scale().backward", "scaler.step", "scaler.update", "dataset.data_utils_kernel_box.AlignCollate", "torch.cuda.amp.autocast", "model", "criterion_kernel", "criterion_kernel.item", "models.loss_ctc.ctc_loss", "loss_char.item", "loss.item", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "tqdm.tqdm.display", "tqdm.tqdm.update", "scaler.scale"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.None.train_with_hwdb2.train", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.ctc_loss"], ["", "def", "train", "(", "model", ",", "optimizer", ",", "train_dataset", ",", "criterion_kernel", ",", "criterion_char", ",", "epoch", ")", ":", "\n", "    ", "train_dataset", ".", "epoch_count", "=", "epoch", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "collate_fn", "=", "AlignCollate", "(", ")", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "False", ")", "\n", "\n", "train_steps", "=", "len", "(", "train_dataloader", ")", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "model", ".", "train", "(", ")", "\n", "# model.PAN_layer.eval()", "\n", "pbar", "=", "tqdm", "(", "total", "=", "train_steps", ")", "\n", "a_CR_correct_chars", ",", "a_AR_correct_chars", ",", "a_all_chars", "=", "0", ",", "0", ",", "0", "\n", "loss_all", "=", "0", "\n", "loss_char_all", "=", "0", "\n", "loss_kernel_all", "=", "0", "\n", "for", "train_step", "in", "range", "(", "train_steps", ")", ":", "\n", "\n", "        ", "imgs", ",", "kernel_labels", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", ",", "_", "=", "next", "(", "train_iter", ")", "\n", "# torch.cuda.empty_cache()", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "kernel_labels", "=", "kernel_labels", ".", "to", "(", "device", ")", "\n", "with", "autocast", "(", ")", ":", "\n", "            ", "kernels_pred", ",", "out_chars", ",", "sub_img_nums", "=", "model", "(", "imgs", ",", "text_polys", ",", "is_train", "=", "True", ")", "\n", "loss_kernel", "=", "criterion_kernel", "(", "kernels_pred", ",", "kernel_labels", ")", "\n", "\n", "loss_kernel_item", "=", "loss_kernel", ".", "item", "(", ")", "\n", "\n", "if", "(", "train_step", "+", "1", ")", "%", "200", "==", "0", ":", "\n", "\n", "                ", "is_print", "=", "False", "\n", "", "else", ":", "\n", "                ", "is_print", "=", "False", "\n", "", "loss_char", ",", "CR_correct_chars", ",", "AR_correct_chars", ",", "all_chars", "=", "ctc_loss", "(", "criterion_char", ",", "out_chars", ",", "label_tensors", ",", "text_lengths", ",", "\n", "sub_img_nums", ",", "\n", "char_set", ",", "is_print", ")", "\n", "a_CR_correct_chars", "+=", "CR_correct_chars", "\n", "a_AR_correct_chars", "+=", "AR_correct_chars", "\n", "a_all_chars", "+=", "all_chars", "\n", "loss_char_item", "=", "loss_char", ".", "item", "(", ")", "\n", "loss_char_all", "+=", "loss_char_item", "\n", "loss_kernel_all", "+=", "loss_kernel_item", "\n", "\n", "if", "loss_kernel_item", ">", "0.13", ":", "\n", "                ", "loss", "=", "0.1", "*", "loss_kernel", "+", "loss_char", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_char", "\n", "\n", "", "loss_all", "+=", "loss", ".", "item", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "# nn.utils.clip_grad_norm_(model.parameters(), max_norm=20, norm_type=2)", "\n", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "# loss.backward()", "\n", "# optimizer.step()", "\n", "# pbar.set_description(str((loss_kernel.item(),loss_char.item(),loss_all/(train_step+1))))", "\n", "AR", "=", "a_AR_correct_chars", "/", "(", "a_all_chars", "+", "1", ")", "\n", "CR", "=", "a_CR_correct_chars", "/", "(", "a_all_chars", "+", "1", ")", "\n", "\n", "if", "(", "train_step", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "if", "(", "train_step", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "pbar", ".", "display", "(", "\n", "'train epoch: {} '", "\n", "'steps:{}/{} '", "\n", "'loss_char_all:{:.6f} '", "\n", "'loss_char:{:.4f} '", "\n", "'loss_kernel_all:{:.6f} '", "\n", "'loss_kernel:{:.4f} '", "\n", "'AR:{:.4f} CR:{:.4f} '", "\n", "'AR_all:{:.4f} '", "\n", "'CR_all:{:.4f}\\n'", ".", "\n", "format", "(", "epoch", ",", "\n", "train_step", ",", "train_steps", ",", "\n", "loss_char_all", "/", "(", "train_step", "+", "1", ")", ",", "\n", "loss_char_item", ",", "\n", "loss_kernel_all", "/", "(", "train_step", "+", "1", ")", ",", "\n", "loss_kernel_item", ",", "\n", "AR_correct_chars", "/", "all_chars", ",", "\n", "CR_correct_chars", "/", "all_chars", ",", "\n", "AR", ",", "\n", "CR", ")", ")", "\n", "pbar", ".", "update", "(", "10", ")", "\n", "", "", "log_writer", ".", "write", "(", "'train epoch:{} loss_kernel:{:.4f} loss_char:{:.4f} AR:{:.4f} CR:{:.4f}\\n'", ".", "format", "(", "\n", "epoch", ",", "\n", "loss_kernel_all", "/", "(", "train_steps", "+", "1", ")", ",", "\n", "loss_char_all", "/", "(", "train_steps", "+", "1", ")", ",", "\n", "a_AR_correct_chars", "/", "a_all_chars", ",", "\n", "a_CR_correct_chars", "/", "a_all_chars", ")", ")", "\n", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.None.eva_hwdb_with_gt_box.predict": [[118, 173], ["torch.no_grad", "torch.no_grad", "next", "img_tensor.to", "model", "prediction_char.log_softmax.log_softmax", "utils.pred_utils.get_pred_str", "len", "utils.pred_utils.normal_leven", "zip", "numpy.ones_like", "utils.pred_utils.get_ar_cr", "int", "isinstance", "PIL.ImageDraw.Draw", "PIL.ImageFont.truetype", "ImageDraw.Draw.text", "range", "cv2.cvtColor", "cv2.cvtColor", "cv2.imshow", "cv2.imshow", "cv2.imshow", "cv2.imshow", "cv2.waitKey", "cv2.waitKey", "numpy.int_", "cv2.polylines", "cv2.polylines", "PIL.Image.fromarray", "len", "ImageDraw.Draw.text", "ImageDraw.Draw.text", "numpy.asarray", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.cvtColor", "cv2.cvtColor", "len"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.get_pred_str", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.normal_leven", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.get_ar_cr", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize"], ["def", "predict", "(", "model", ",", "pred_iter", ",", "show", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_np", ",", "img_tensor", ",", "boxes", ",", "page_label", "=", "next", "(", "pred_iter", ")", "\n", "label_np", "=", "np", ".", "ones_like", "(", "img_np", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "boxes", "=", "boxes", "[", "0", "]", "\n", "imgs", "=", "img_tensor", ".", "to", "(", "device", ")", "\n", "# with autocast():", "\n", "kernel", ",", "out_chars", ",", "sub_img_nums", "=", "model", "(", "imgs", ",", "[", "boxes", "]", ",", "is_train", "=", "False", ")", "\n", "\n", "prediction_char", "=", "out_chars", "\n", "prediction_char", "=", "prediction_char", ".", "log_softmax", "(", "-", "1", ")", "\n", "pred_strs", "=", "get_pred_str", "(", "prediction_char", ",", "char_set", ")", "\n", "\n", "pred_str_group", "=", "pred_strs", "\n", "\n", "# CR, AR, All = get_ar_cr(''.join(pred_str_group), ''.join(page_label))", "\n", "CR", ",", "AR", ",", "All", "=", "0", ",", "0", ",", "0", "\n", "char_c", "=", "len", "(", "''", ".", "join", "(", "page_label", ")", ")", "\n", "edit_d", "=", "normal_leven", "(", "''", ".", "join", "(", "pred_str_group", ")", ",", "''", ".", "join", "(", "page_label", ")", ")", "\n", "for", "sub_p", ",", "sub_l", "in", "zip", "(", "pred_str_group", ",", "page_label", ")", ":", "\n", "            ", "sub_cr", ",", "sub_ar", ",", "sub_all", "=", "get_ar_cr", "(", "sub_p", ",", "sub_l", ")", "\n", "CR", "+=", "sub_cr", "\n", "AR", "+=", "sub_ar", "\n", "All", "+=", "sub_all", "\n", "\n", "", "if", "show", ":", "\n", "            ", "for", "box", "in", "boxes", ":", "\n", "                ", "box", "=", "np", ".", "int_", "(", "box", ")", "\n", "cv2", ".", "polylines", "(", "img_np", ",", "[", "box", "]", ",", "True", ",", "128", ",", "1", ")", "\n", "", "char_size", "=", "int", "(", "label_np", ".", "shape", "[", "1", "]", "/", "len", "(", "page_label", ")", "/", "5", ")", "\n", "if", "isinstance", "(", "label_np", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "label_np", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "label_np", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "", "draw", "=", "ImageDraw", ".", "Draw", "(", "label_np", ")", "\n", "\n", "fontText", "=", "ImageFont", ".", "truetype", "(", "'simfang.ttf'", ",", "char_size", ",", "encoding", "=", "\"utf-8\"", ")", "\n", "draw", ".", "text", "(", "(", "0", ",", "0", ")", ",", "'CR:{:.6f} AR:{:.6f}'", ".", "format", "(", "CR", "/", "All", ",", "AR", "/", "All", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "font", "=", "fontText", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_str_group", ")", ")", ":", "\n", "                ", "left", "=", "boxes", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "top", "=", "boxes", "[", "i", "]", "[", "0", "]", "[", "1", "]", "\n", "draw", ".", "text", "(", "(", "left", ",", "top", ")", ",", "'label:'", "+", "page_label", "[", "i", "]", ",", "(", "0", ",", "0", ",", "0", ")", ",", "font", "=", "fontText", ")", "\n", "draw", ".", "text", "(", "(", "left", ",", "top", "+", "char_size", ")", ",", "'preds:'", "+", "pred_str_group", "[", "i", "]", ",", "(", "0", ",", "0", ",", "0", ")", ",", "font", "=", "fontText", ")", "\n", "\n", "", "label_np", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "label_np", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "# show_np = np.hstack([img_np, label_np])", "\n", "# show_np = cv2.resize(show_np, None, fx=0.7, fy=0.7)", "\n", "if", "img_np", ".", "shape", "[", "1", "]", ">", "1600", ":", "\n", "                ", "scale", "=", "1600", "/", "img_np", ".", "shape", "[", "1", "]", "\n", "img_np", "=", "cv2", ".", "resize", "(", "img_np", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "label_np", "=", "cv2", ".", "resize", "(", "label_np", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "\n", "", "cv2", ".", "imshow", "(", "'1'", ",", "img_np", ")", "\n", "cv2", ".", "imshow", "(", "'label'", ",", "label_np", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "", "", "return", "CR", ",", "AR", ",", "All", ",", "edit_d", ",", "char_c", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.None.eval_hwdb_with_center_line.predict": [[125, 179], ["torch.no_grad", "torch.no_grad", "next", "img_tensor.to", "model", "prediction_char.log_softmax.log_softmax", "utils.pred_utils.get_pred_str", "range", "range", "len", "utils.pred_utils.normal_leven", "zip", "len", "len", "numpy.squeeze", "range", "len", "utils.pred_utils.get_ar_cr", "range", "len", "utils.pred_utils.polygon_IOU", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.get_pred_str", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.normal_leven", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.get_ar_cr", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.polygon_IOU"], ["def", "predict", "(", "model", ",", "pred_iter", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_np", ",", "img_tensor", ",", "boxes", ",", "page_label", "=", "next", "(", "pred_iter", ")", "\n", "boxes", "=", "boxes", "[", "0", "]", "\n", "imgs", "=", "img_tensor", ".", "to", "(", "device", ")", "\n", "\n", "kernel", ",", "out_chars", ",", "sub_img_nums", ",", "line_top_lefts", ",", "line_contours", "=", "model", "(", "imgs", ",", "None", ",", "is_train", "=", "False", ")", "\n", "\n", "line_contours", "=", "line_contours", "[", "0", "]", "\n", "prediction_char", "=", "out_chars", "\n", "prediction_char", "=", "prediction_char", ".", "log_softmax", "(", "-", "1", ")", "\n", "pred_strs", "=", "get_pred_str", "(", "prediction_char", ",", "char_set", ")", "\n", "\n", "pred_str_group", "=", "[", "''", "for", "_", "in", "range", "(", "len", "(", "page_label", ")", ")", "]", "\n", "not_in_char", "=", "''", "\n", "TP", "=", "0", "\n", "FP", "=", "0", "\n", "FN", "=", "0", "\n", "\n", "for", "pred_i", "in", "range", "(", "len", "(", "pred_strs", ")", ")", ":", "\n", "            ", "pred_str_poly", "=", "line_contours", "[", "pred_i", "]", "\n", "pred_str_poly", "=", "np", ".", "squeeze", "(", "pred_str_poly", ",", "1", ")", "\n", "find_flag", "=", "0", "\n", "for", "label_i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "\n", "                ", "label_box", "=", "boxes", "[", "label_i", "]", "/", "4", "\n", "pred_iou", "=", "polygon_IOU", "(", "pred_str_poly", ",", "label_box", ")", "\n", "if", "pred_iou", ">", "0.9", ":", "\n", "                    ", "pred_str_group", "[", "label_i", "]", "+=", "pred_strs", "[", "pred_i", "]", "\n", "find_flag", "=", "1", "\n", "break", "\n", "", "", "if", "find_flag", "==", "0", ":", "\n", "                ", "FP", "+=", "1", "\n", "not_in_char", "+=", "pred_strs", "[", "pred_i", "]", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "pred_str_group", ")", ")", ":", "\n", "            ", "if", "len", "(", "pred_str_group", "[", "i", "]", ")", "/", "len", "(", "page_label", "[", "i", "]", ")", ":", "\n", "                ", "TP", "+=", "1", "\n", "", "else", ":", "\n", "                ", "FN", "+=", "1", "\n", "\n", "", "", "pred_strs_s", "=", "''", ".", "join", "(", "pred_str_group", ")", "+", "not_in_char", "\n", "# CR, AR, All = get_ar_cr(pred_strs_s, ''.join(page_label))", "\n", "CR", ",", "AR", ",", "All", "=", "0", ",", "0", ",", "0", "\n", "char_c", "=", "len", "(", "''", ".", "join", "(", "page_label", ")", ")", "\n", "edit_d", "=", "normal_leven", "(", "pred_strs_s", ",", "''", ".", "join", "(", "page_label", ")", ")", "\n", "for", "sub_p", ",", "sub_l", "in", "zip", "(", "pred_str_group", ",", "page_label", ")", ":", "\n", "            ", "sub_cr", ",", "sub_ar", ",", "sub_all", "=", "get_ar_cr", "(", "sub_p", ",", "sub_l", ")", "\n", "CR", "+=", "sub_cr", "\n", "AR", "+=", "sub_ar", "\n", "All", "+=", "sub_all", "\n", "", "AR", "-=", "len", "(", "not_in_char", ")", "\n", "\n", "", "return", "CR", ",", "AR", ",", "All", ",", "edit_d", ",", "char_c", ",", "TP", ",", "FP", ",", "FN", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.get_dgrl_data.get_pred_data": [[176, 339], ["min", "cv2.cvtColor", "cv2.cvtColor", "numpy.array", "max", "img_transform().unsqueeze", "open", "numpy.fromfile", "range", "cv2.resize", "cv2.resize", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.ones", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile().reshape", "cv2.findContours", "cv2.findContours", "numpy.array", "cv2.minAreaRect", "cv2.minAreaRect", "max", "min", "sorted", "sorted", "sorted", "numpy.int0", "np.array.append", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "Label_str.replace.replace", "page_label.append", "img_transform", "chr", "chr", "chr", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "cv2.boundingRect", "cv2.boundingRect", "cv2.boxPoints", "cv2.boxPoints", "max", "struct.pack().decode", "struct.pack().decode", "numpy.fromfile", "np.array.append", "struct.pack", "struct.pack"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize"], ["def", "get_pred_data", "(", "file_paths", ",", "width", "=", "1600", ")", ":", "\n", "\n", "    ", "for", "file_path", "in", "file_paths", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "header_size", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "header", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint8'", ",", "count", "=", "header_size", "-", "4", ")", "\n", "formatcode", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", ":", "8", "]", "]", ")", "\n", "Illustration_size", "=", "header_size", "-", "36", "\n", "Illustration", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", "8", ":", "Illustration_size", "+", "8", "]", "]", ")", "\n", "Code_type", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", "Illustration_size", "+", "8", ":", "Illustration_size", "+", "28", "]", "]", ")", "\n", "Code_length", "=", "header", "[", "Illustration_size", "+", "28", "]", "+", "header", "[", "Illustration_size", "+", "29", "]", "<<", "4", "\n", "Bits_per_pixel", "=", "header", "[", "Illustration_size", "+", "30", "]", "+", "header", "[", "Illustration_size", "+", "31", "]", "<<", "4", "\n", "# print(header_size, formatcode, Illustration)", "\n", "# print(Code_type, Code_length, Bits_per_pixel)", "\n", "# print()", "\n", "Image_height", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Image_width", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Line_number", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "page_np", "=", "np", ".", "ones", "(", "(", "Image_height", "*", "4", ",", "Image_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "page_label", "=", "[", "]", "\n", "boxes", "=", "[", "]", "\n", "Y1", "=", "0", "\n", "Y2", "=", "0", "\n", "margin", "=", "0", "\n", "for", "ln", "in", "range", "(", "Line_number", ")", ":", "\n", "                ", "Char_number", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Label", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint16'", ",", "count", "=", "Char_number", ")", "\n", "# print(Label)", "\n", "Label_str", "=", "\"\"", ".", "join", "(", "[", "struct", ".", "pack", "(", "'H'", ",", "c", ")", ".", "decode", "(", "'GBK'", ",", "errors", "=", "'ignore'", ")", "for", "c", "in", "Label", "]", ")", "\n", "# print(Label_str, Char_number)", "\n", "Top_left", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "2", ")", "\n", "Top", ",", "Left", "=", "Top_left", "[", "0", "]", ",", "Top_left", "[", "1", "]", "\n", "\n", "Height", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "\n", "\n", "# Top+=ln*Image_height//Line_number//8", "\n", "Width", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Bitmap", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint8'", ",", "count", "=", "Height", "*", "Width", ")", ".", "reshape", "(", "[", "Height", ",", "Width", "]", ")", "\n", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "\n", "255", "-", "Bitmap", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "# if random.random()<0.5:", "\n", "#     Top+=random.uniform(-0.2,0.2)*Height", "\n", "#     Top = int(Top)", "\n", "all_contours", "=", "[", "]", "\n", "for", "contour", "in", "contours", ":", "\n", "                    ", "for", "points", "in", "contour", ":", "\n", "                        ", "all_contours", ".", "append", "(", "points", ")", "\n", "", "", "all_contours", "=", "np", ".", "array", "(", "all_contours", ")", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "all_contours", ")", "\n", "rect_w", "=", "max", "(", "rect", "[", "1", "]", ")", "\n", "rect_h", "=", "min", "(", "rect", "[", "1", "]", ")", "\n", "\n", "\n", "# Top-=int(ln*Image_height//Line_number//10)", "\n", "if", "rect_w", "<", "Image_width", "*", "0.25", ":", "\n", "                    ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "cv2", ".", "boundingRect", "(", "all_contours", ")", "\n", "bbox", "=", "[", "[", "x1", ",", "y1", "]", ",", "[", "x2", ",", "y1", "]", ",", "[", "x2", ",", "y2", "]", ",", "[", "x1", ",", "y2", "]", "]", "\n", "", "else", ":", "\n", "                    ", "bbox", "=", "cv2", ".", "boxPoints", "(", "rect", ")", "\n", "", "bbox", "=", "sorted", "(", "bbox", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "new_bbox", "=", "[", "]", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", ":", "2", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", "2", ":", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "bbox", "=", "[", "new_bbox", "[", "0", "]", ",", "new_bbox", "[", "3", "]", ",", "new_bbox", "[", "2", "]", ",", "new_bbox", "[", "1", "]", "]", "\n", "\n", "# left_w = random.uniform(-1, 1) * rect_h", "\n", "# right_w = random.uniform(-1, 1) * rect_h", "\n", "# bbox[0][0] += left_w", "\n", "# bbox[1][0] += right_w", "\n", "# bbox[2][0] += right_w", "\n", "# bbox[3][0] += left_w", "\n", "# top_h=random.uniform(-0.2, 0.2) * rect_h", "\n", "# bottom_h = random.uniform(-0.2, 0.2) * rect_h", "\n", "# bbox[0][1] += top_h", "\n", "# bbox[1][1] += top_h", "\n", "# bbox[2][1] += bottom_h", "\n", "# bbox[3][1] += bottom_h", "\n", "\n", "bbox", "=", "np", ".", "int0", "(", "bbox", ")", "\n", "\n", "bbox", "[", ":", ",", "0", "]", "+=", "Left", "\n", "bbox", "[", ":", ",", "1", "]", "+=", "Top", "\n", "\n", "origin_sub", "=", "page_np", "[", "Top", ":", "Top", "+", "Height", ",", "Left", ":", "Left", "+", "Width", "]", "\n", "page_np", "[", "Top", ":", "Top", "+", "Height", ",", "Left", ":", "Left", "+", "Width", "]", "=", "(", "origin_sub", ">", "Bitmap", ")", "*", "Bitmap", "+", "(", "origin_sub", "<=", "Bitmap", ")", "*", "origin_sub", "\n", "if", "ln", "==", "0", ":", "\n", "                    ", "Y1", "=", "max", "(", "Top", "-", "64", ",", "0", ")", "\n", "", "if", "ln", "==", "Line_number", "-", "1", ":", "\n", "                    ", "Y2", "=", "Top", "+", "Height", "\n", "# cv2.drawContours(page_np, [bbox], -1, 128, 2)", "\n", "# cv2.imshow('1', cv2.resize(page_np[Y1:, :],dsize=None,fx=0.5,fy=0.5))", "\n", "# cv2.waitKey()", "\n", "", "bbox", "[", ":", ",", "1", "]", "-=", "Y1", "\n", "boxes", ".", "append", "(", "bbox", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\\x00'", ",", "''", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\u3014'", ",", "'('", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\u3015'", ",", "')'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff02'", ",", "'\"'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff05'", ",", "'%'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff08'", ",", "'('", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff09'", ",", "')'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff0c'", ",", "','", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff0d'", ",", "'-'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff0e'", ",", "'.'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff0f'", ",", "'/'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff10'", ",", "'0'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff11'", ",", "'1'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff12'", ",", "'2'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff13'", ",", "'3'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff14'", ",", "'4'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff15'", ",", "'5'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff16'", ",", "'6'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff17'", ",", "'7'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff18'", ",", "'8'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff19'", ",", "'9'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff1a'", ",", "':'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff1b'", ",", "';'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff1f'", ",", "'?'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff21'", ",", "'A'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff22'", ",", "'B'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff23'", ",", "'C'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff26'", ",", "'F'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff27'", ",", "'G'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff28'", ",", "'H'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff2d'", ",", "'M'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff2e'", ",", "'N'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff2f'", ",", "'O'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff30'", ",", "'P'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff32'", ",", "'R'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff33'", ",", "'S'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff36'", ",", "'V'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff37'", ",", "'W'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff41'", ",", "'a'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff44'", ",", "'d'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff45'", ",", "'e'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff48'", ",", "'h'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff49'", ",", "'i'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff4c'", ",", "'l'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff4d'", ",", "'m'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff4e'", ",", "'n'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff4f'", ",", "'o'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff50'", ",", "'p'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff52'", ",", "'r'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff53'", ",", "'s'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff54'", ",", "'t'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff55'", ",", "'u'", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\uff59'", ",", "'y'", ")", "\n", "page_label", ".", "append", "(", "Label_str", ")", "\n", "", "", "Y2", "=", "min", "(", "Image_height", "*", "4", ",", "Y2", "+", "64", ")", "\n", "img_np", "=", "page_np", "[", "Y1", ":", "Y2", ",", ":", "]", "\n", "img_np", "=", "cv2", ".", "cvtColor", "(", "img_np", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "boxes", "=", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "float", ")", "\n", "h", ",", "w", ",", "_", "=", "img_np", ".", "shape", "\n", "short_edge", "=", "max", "(", "h", ",", "w", ")", "\n", "if", "short_edge", ">", "width", ":", "\n", "# \u4fdd\u8bc1\u77ed\u8fb9 >= inputsize", "\n", "            ", "scale", "=", "width", "/", "short_edge", "\n", "img_np", "=", "cv2", ".", "resize", "(", "img_np", ",", "dsize", "=", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "boxes", "*=", "scale", "\n", "", "img_tensor", "=", "img_transform", "(", "img_np", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "yield", "img_np", ",", "img_tensor", ",", "[", "boxes", "]", ",", "page_label", "", "", "", ""]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.remove_blank": [[143, 157], ["new_labels.append"], "function", ["None"], ["def", "remove_blank", "(", "labels", ",", "blank", "=", "0", ")", ":", "\n", "    ", "new_labels", "=", "[", "]", "\n", "\n", "# combine duplicate", "\n", "previous", "=", "None", "\n", "for", "l", "in", "labels", ":", "\n", "        ", "if", "l", "!=", "previous", ":", "\n", "            ", "new_labels", ".", "append", "(", "l", ")", "\n", "previous", "=", "l", "\n", "\n", "# remove blank", "\n", "", "", "new_labels", "=", "[", "l", "for", "l", "in", "new_labels", "if", "l", "!=", "blank", "]", "\n", "\n", "return", "new_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.get_pred_str": [[158, 176], ["torch.argmax", "torch.argmax", "range", "len", "pred_softmax.cpu().numpy.cpu().numpy", "pred_utils.remove_blank", "label_pred.append", "pred_softmax.cpu().numpy.cpu", "len"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.remove_blank"], ["", "def", "get_pred_str", "(", "prediction_char", ",", "char_set", ")", ":", "\n", "    ", "blank", "=", "0", "\n", "label_pred", "=", "[", "]", "\n", "\n", "preds_softmax", "=", "torch", ".", "argmax", "(", "prediction_char", ",", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "preds_softmax", ")", ")", ":", "\n", "        ", "pred_softmax", "=", "preds_softmax", "[", "i", "]", "\n", "pred_softmax", "=", "pred_softmax", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_s", "=", "remove_blank", "(", "pred_softmax", ")", "\n", "pred_str", "=", "''", "\n", "for", "ci", "in", "pred_s", ":", "\n", "            ", "if", "ci", "!=", "blank", "and", "ci", "<", "len", "(", "char_set", ")", ":", "\n", "                ", "pred_str", "+=", "char_set", "[", "ci", "]", "\n", "", "", "label_pred", ".", "append", "(", "pred_str", ")", "\n", "\n", "\n", "", "return", "label_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.get_ar_cr": [[178, 217], ["pred_str.replace.replace", "pred_str.replace.replace", "pred_str.replace.replace", "pred_str.replace.replace", "pred_str.replace.replace", "pred_str.replace.replace", "pred_str.replace.replace", "pred_str.replace.replace", "label_str.replace.replace", "label_str.replace.replace", "label_str.replace.replace", "label_str.replace.replace", "label_str.replace.replace", "label_str.replace.replace", "label_str.replace.replace", "label_str.replace.replace", "max", "max", "max", "difflib.SequenceMatcher().get_opcodes", "difflib.SequenceMatcher().get_opcodes", "len", "len", "len", "len", "len", "len", "difflib.SequenceMatcher", "difflib.SequenceMatcher", "max", "max", "max", "max"], "function", ["None"], ["", "def", "get_ar_cr", "(", "pred_str", ",", "label_str", ")", ":", "\n", "\n", "    ", "pred_str", "=", "pred_str", ".", "replace", "(", "'\u201d'", ",", "'\\\"'", ")", "\n", "pred_str", "=", "pred_str", ".", "replace", "(", "'\u201c'", ",", "'\\\"'", ")", "\n", "pred_str", "=", "pred_str", ".", "replace", "(", "'\u2018'", ",", "'\\''", ")", "\n", "pred_str", "=", "pred_str", ".", "replace", "(", "'\u2019'", ",", "'\\''", ")", "\n", "pred_str", "=", "pred_str", ".", "replace", "(", "'\u2014'", ",", "'-'", ")", "\n", "pred_str", "=", "pred_str", ".", "replace", "(", "'\u2015'", ",", "'-'", ")", "\n", "pred_str", "=", "pred_str", ".", "replace", "(", "'`'", ",", "'\\''", ")", "\n", "pred_str", "=", "pred_str", ".", "replace", "(", "'\uff0c'", ",", "','", ")", "\n", "\n", "label_str", "=", "label_str", ".", "replace", "(", "'\u201d'", ",", "'\\\"'", ")", "\n", "label_str", "=", "label_str", ".", "replace", "(", "'\u201c'", ",", "'\\\"'", ")", "\n", "label_str", "=", "label_str", ".", "replace", "(", "'\u2018'", ",", "'\\''", ")", "\n", "label_str", "=", "label_str", ".", "replace", "(", "'\u2019'", ",", "'\\''", ")", "\n", "label_str", "=", "label_str", ".", "replace", "(", "'\u2014'", ",", "'-'", ")", "\n", "label_str", "=", "label_str", ".", "replace", "(", "'\u2015'", ",", "'-'", ")", "\n", "label_str", "=", "label_str", ".", "replace", "(", "'`'", ",", "'\\''", ")", "\n", "label_str", "=", "label_str", ".", "replace", "(", "'\uff0c'", ",", "','", ")", "\n", "CR_correct_char", "=", "max", "(", "len", "(", "label_str", ")", ",", "len", "(", "pred_str", ")", ")", "\n", "AR_correct_char", "=", "max", "(", "len", "(", "label_str", ")", ",", "len", "(", "pred_str", ")", ")", "\n", "All_char", "=", "max", "(", "len", "(", "label_str", ")", ",", "len", "(", "pred_str", ")", ")", "\n", "\n", "for", "block", "in", "difflib", ".", "SequenceMatcher", "(", "None", ",", "label_str", ",", "pred_str", ")", ".", "get_opcodes", "(", ")", ":", "\n", "        ", "label_m", "=", "block", "[", "2", "]", "-", "block", "[", "1", "]", "\n", "pred_m", "=", "block", "[", "4", "]", "-", "block", "[", "3", "]", "\n", "if", "block", "[", "0", "]", "==", "'delete'", ":", "\n", "            ", "CR_correct_char", "-=", "max", "(", "label_m", ",", "pred_m", ")", "\n", "AR_correct_char", "-=", "max", "(", "label_m", ",", "pred_m", ")", "\n", "\n", "", "elif", "block", "[", "0", "]", "==", "'insert'", ":", "\n", "            ", "AR_correct_char", "-=", "max", "(", "label_m", ",", "pred_m", ")", "\n", "\n", "", "elif", "block", "[", "0", "]", "==", "'replace'", ":", "\n", "\n", "            ", "CR_correct_char", "-=", "label_m", "\n", "\n", "AR_correct_char", "-=", "max", "(", "pred_m", ",", "label_m", ")", "\n", "", "", "return", "CR_correct_char", ",", "AR_correct_char", ",", "All_char", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.normal_leven": [[218, 242], ["range", "range", "range", "len", "len", "len", "range", "range", "min"], "function", ["None"], ["", "def", "normal_leven", "(", "str1", ",", "str2", ")", ":", "\n", "    ", "len_str1", "=", "len", "(", "str1", ")", "+", "1", "\n", "len_str2", "=", "len", "(", "str2", ")", "+", "1", "\n", "# \u521b\u5efa\u77e9\u9635", "\n", "matrix", "=", "[", "0", "for", "n", "in", "range", "(", "len_str1", "*", "len_str2", ")", "]", "\n", "# \u77e9\u9635\u7684\u7b2c\u4e00\u884c", "\n", "for", "i", "in", "range", "(", "len_str1", ")", ":", "\n", "        ", "matrix", "[", "i", "]", "=", "i", "\n", "# \u77e9\u9635\u7684\u7b2c\u4e00\u5217", "\n", "", "for", "j", "in", "range", "(", "0", ",", "len", "(", "matrix", ")", ",", "len_str1", ")", ":", "\n", "        ", "if", "j", "%", "len_str1", "==", "0", ":", "\n", "            ", "matrix", "[", "j", "]", "=", "j", "//", "len_str1", "\n", "# \u6839\u636e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u9010\u6b65\u5f97\u5230\u7f16\u8f91\u8ddd\u79bb", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "len_str1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len_str2", ")", ":", "\n", "            ", "if", "str1", "[", "i", "-", "1", "]", "==", "str2", "[", "j", "-", "1", "]", ":", "\n", "                ", "cost", "=", "0", "\n", "", "else", ":", "\n", "                ", "cost", "=", "1", "\n", "", "matrix", "[", "j", "*", "len_str1", "+", "i", "]", "=", "min", "(", "matrix", "[", "(", "j", "-", "1", ")", "*", "len_str1", "+", "i", "]", "+", "1", ",", "\n", "matrix", "[", "j", "*", "len_str1", "+", "(", "i", "-", "1", ")", "]", "+", "1", ",", "\n", "matrix", "[", "(", "j", "-", "1", ")", "*", "len_str1", "+", "(", "i", "-", "1", ")", "]", "+", "cost", ")", "\n", "\n", "", "", "return", "matrix", "[", "-", "1", "]", "# \u8fd4\u56de\u77e9\u9635\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff0c\u4e5f\u5c31\u662f\u7f16\u8f91\u8ddd\u79bb", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.pred_utils.polygon_IOU": [[243, 270], ["skimage.draw.polygon", "skimage.draw.polygon", "numpy.zeros", "numpy.sum", "numpy.sum", "max", "max", "rr1.max", "rr2.max", "cc1.max", "cc2.max"], "function", ["None"], ["", "def", "polygon_IOU", "(", "polygon_1", ",", "polygon_2", ")", ":", "\n", "    ", "\"\"\"\n    \u8ba1\u7b97\u4e24\u4e2a\u591a\u8fb9\u5f62\u7684IOU\n    :param polygon_1: [[row1, col1], [row2, col2], ...]\n    :param polygon_2: \u540c\u4e0a\n    :return:\n    \"\"\"", "\n", "rr1", ",", "cc1", "=", "polygon", "(", "polygon_2", "[", ":", ",", "0", "]", ",", "polygon_2", "[", ":", ",", "1", "]", ")", "\n", "rr2", ",", "cc2", "=", "polygon", "(", "polygon_1", "[", ":", ",", "0", "]", ",", "polygon_1", "[", ":", ",", "1", "]", ")", "\n", "\n", "try", ":", "\n", "        ", "r_max", "=", "max", "(", "rr1", ".", "max", "(", ")", ",", "rr2", ".", "max", "(", ")", ")", "+", "1", "\n", "c_max", "=", "max", "(", "cc1", ".", "max", "(", ")", ",", "cc2", ".", "max", "(", ")", ")", "+", "1", "\n", "", "except", ":", "\n", "        ", "return", "0", "\n", "\n", "", "canvas", "=", "np", ".", "zeros", "(", "(", "r_max", ",", "c_max", ")", ")", "\n", "\n", "canvas", "[", "rr2", ",", "cc2", "]", "+=", "1", "\n", "union", "=", "np", ".", "sum", "(", "canvas", ">", "0", ")", "\n", "canvas", "[", "rr1", ",", "cc1", "]", "+=", "1", "\n", "\n", "if", "union", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "intersection", "=", "np", ".", "sum", "(", "canvas", "==", "2", ")", "\n", "\n", "return", "intersection", "/", "union", "", "", ""]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.cv_imread": [[7, 15], ["cv2.imdecode", "numpy.fromfile"], "function", ["None"], ["def", "cv_imread", "(", "file_path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "cv_img", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromfile", "(", "file_path", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "-", "1", ")", "\n", "", "except", ":", "\n", "        ", "return", "None", "\n", "# if len(cv_img.shape) == 3:", "\n", "#     cv_img = cv2.cvtColor(cv_img, cv2.COLOR_RGB2GRAY)", "\n", "", "return", "cv_img", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.show_img": [[16, 23], ["numpy.expand_dims", "matplotlib.figure", "matplotlib.imshow", "len", "len"], "function", ["None"], ["", "def", "show_img", "(", "imgs", ":", "np", ".", "ndarray", ",", "color", "=", "False", ")", ":", "\n", "    ", "if", "(", "len", "(", "imgs", ".", "shape", ")", "==", "3", "and", "color", ")", "or", "(", "len", "(", "imgs", ".", "shape", ")", "==", "2", "and", "not", "color", ")", ":", "\n", "        ", "imgs", "=", "np", ".", "expand_dims", "(", "imgs", ",", "axis", "=", "0", ")", "\n", "", "for", "img", "in", "imgs", ":", "\n", "# print(img)", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img", ",", "cmap", "=", "None", "if", "color", "else", "'gray'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.draw_bbox": [[25, 37], ["isinstance", "cv2.cvtColor.copy", "utils.cv_imread", "cv2.cvtColor", "point.astype.astype", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.cv_imread"], ["", "", "def", "draw_bbox", "(", "img_path", ",", "result", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "thickness", "=", "2", ")", ":", "\n", "    ", "if", "isinstance", "(", "img_path", ",", "str", ")", ":", "\n", "        ", "img_path", "=", "cv_imread", "(", "img_path", ")", "\n", "img_path", "=", "cv2", ".", "cvtColor", "(", "img_path", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "img_path", "=", "img_path", ".", "copy", "(", ")", "\n", "for", "point", "in", "result", ":", "\n", "        ", "point", "=", "point", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "0", "]", ")", ",", "tuple", "(", "point", "[", "1", "]", ")", ",", "color", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "1", "]", ")", ",", "tuple", "(", "point", "[", "2", "]", ")", ",", "color", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "2", "]", ")", ",", "tuple", "(", "point", "[", "3", "]", ")", ",", "color", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "3", "]", ")", ",", "tuple", "(", "point", "[", "0", "]", ")", ",", "color", ",", "thickness", ")", "\n", "", "return", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.draw_bbox_with_2_mask": [[38, 57], ["isinstance", "cv2.cvtColor.copy", "utils.cv_imread", "cv2.cvtColor", "point.astype.astype", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "point.astype.astype", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.cv_imread"], ["", "def", "draw_bbox_with_2_mask", "(", "img_path", ",", "result1", ",", "result2", ",", "color1", "=", "(", "255", ",", "0", ",", "0", ")", ",", "color2", "=", "(", "0", ",", "255", ",", "0", ")", ",", "thickness", "=", "2", ")", ":", "\n", "    ", "if", "isinstance", "(", "img_path", ",", "str", ")", ":", "\n", "        ", "img_path", "=", "cv_imread", "(", "img_path", ")", "\n", "img_path", "=", "cv2", ".", "cvtColor", "(", "img_path", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "img_path", "=", "img_path", ".", "copy", "(", ")", "\n", "for", "point", "in", "result1", ":", "\n", "        ", "point", "=", "point", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "0", "]", ")", ",", "tuple", "(", "point", "[", "1", "]", ")", ",", "color1", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "1", "]", ")", ",", "tuple", "(", "point", "[", "2", "]", ")", ",", "color1", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "2", "]", ")", ",", "tuple", "(", "point", "[", "3", "]", ")", ",", "color1", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "3", "]", ")", ",", "tuple", "(", "point", "[", "0", "]", ")", ",", "color1", ",", "thickness", ")", "\n", "\n", "", "for", "point", "in", "result2", ":", "\n", "        ", "point", "=", "point", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "0", "]", ")", ",", "tuple", "(", "point", "[", "1", "]", ")", ",", "color2", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "1", "]", ")", ",", "tuple", "(", "point", "[", "2", "]", ")", ",", "color2", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "2", "]", ")", ",", "tuple", "(", "point", "[", "3", "]", ")", ",", "color2", ",", "thickness", ")", "\n", "cv2", ".", "line", "(", "img_path", ",", "tuple", "(", "point", "[", "3", "]", ")", ",", "tuple", "(", "point", "[", "0", "]", ")", ",", "color2", ",", "thickness", ")", "\n", "", "return", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.setup_logger": [[58, 83], ["logging.basicConfig", "ColoredFormatter", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "logging.getLogger.info"], "function", ["None"], ["", "def", "setup_logger", "(", "log_file_path", ":", "str", "=", "None", ")", ":", "\n", "    ", "import", "logging", "\n", "from", "colorlog", "import", "ColoredFormatter", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "format", "=", "'%(asctime)s %(levelname)-8s %(filename)s: %(message)s'", ",", "\n", "# \u5b9a\u4e49\u8f93\u51falog\u7684\u683c\u5f0f", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", ")", "\n", "\"\"\"Return a logger with a default ColoredFormatter.\"\"\"", "\n", "formatter", "=", "ColoredFormatter", "(", "\"%(asctime)s %(log_color)s%(levelname)-8s %(reset)s %(filename)s: %(message)s\"", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", "\n", "reset", "=", "True", ",", "\n", "log_colors", "=", "{", "\n", "'DEBUG'", ":", "'blue'", ",", "\n", "'INFO'", ":", "'green'", ",", "\n", "'WARNING'", ":", "'yellow'", ",", "\n", "'ERROR'", ":", "'red'", ",", "\n", "'CRITICAL'", ":", "'red'", ",", "\n", "}", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'project'", ")", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "info", "(", "'logger init finished'", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.save_checkpoint": [[85, 91], ["torch.save", "logger.info", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_checkpoint", "(", "checkpoint_path", ",", "model", ",", "optimizer", ",", "epoch", ",", "logger", ")", ":", "\n", "    ", "state", "=", "{", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "}", "\n", "torch", ".", "save", "(", "state", ",", "checkpoint_path", ")", "\n", "logger", ".", "info", "(", "'models saved to %s'", "%", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.load_checkpoint": [[93, 101], ["torch.load", "model.load_state_dict", "logger.info", "optimizer.load_state_dict"], "function", ["None"], ["", "def", "load_checkpoint", "(", "checkpoint_path", ",", "model", ",", "logger", ",", "device", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "state", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optimizer'", "]", ")", "\n", "", "start_epoch", "=", "state", "[", "'epoch'", "]", "\n", "logger", ".", "info", "(", "'models loaded from %s'", "%", "checkpoint_path", ")", "\n", "return", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.exe_time": [[104, 111], ["time.time", "func", "print", "time.time"], "function", ["None"], ["", "def", "exe_time", "(", "func", ")", ":", "\n", "    ", "def", "newFunc", "(", "*", "args", ",", "**", "args2", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "back", "=", "func", "(", "*", "args", ",", "**", "args2", ")", "\n", "print", "(", "\"{} cost {:.3f}s\"", ".", "format", "(", "func", ".", "__name__", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "return", "back", "\n", "", "return", "newFunc", "\n", "", ""]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.MyDataset.__init__": [[346, 357], ["data_utils_kernel_box_from_dgrl.MyDataset.load_data"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset.load_data"], ["    ", "def", "__init__", "(", "self", ",", "data_dirs", ",", "char_dict", ",", "data_shape", ":", "int", "=", "640", ",", "n", "=", "6", ",", "m", "=", "0.5", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "max_text_length", "=", "80", ",", "\n", "is_train", "=", "True", ")", ":", "\n", "        ", "self", ".", "char_dict", "=", "char_dict", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "max_text_length", "=", "max_text_length", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dgrl_list", "=", "self", ".", "load_data", "(", "data_dirs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.MyDataset.__getitem__": [[358, 373], ["data_utils_kernel_box_from_dgrl.get_dgrl_data", "data_utils_kernel_box_from_dgrl.image_label", "data_utils_kernel_box_from_dgrl.MyDataset.transform", "data_utils_kernel_box_from_dgrl.MyDataset.target_transform", "data_utils_kernel_box_from_dgrl.MyDataset.target_transform", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.get_dgrl_data", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.image_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# print(self.image_list[index])", "\n", "        ", "dgrl_path", "=", "self", ".", "dgrl_list", "[", "index", "]", "\n", "img_np", ",", "text_polys", ",", "label_tensor", ",", "text_length", "=", "get_dgrl_data", "(", "dgrl_path", ",", "self", ".", "char_dict", ",", "self", ".", "is_train", ")", "\n", "img", ",", "score_maps", ",", "training_mask", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", "=", "image_label", "(", "img_np", ",", "text_polys", ",", "label_tensor", ",", "text_length", ",", "\n", "input_size", "=", "self", ".", "data_shape", ",", "\n", "n", "=", "self", ".", "n", ",", "\n", "m", "=", "self", ".", "m", ",", "is_train", "=", "self", ".", "is_train", ")", "\n", "# img = draw_bbox(img,text_polys)", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "score_maps", "=", "self", ".", "target_transform", "(", "score_maps", ")", "\n", "training_mask", "=", "self", ".", "target_transform", "(", "training_mask", ")", "\n", "", "return", "img", ",", "torch", ".", "tensor", "(", "score_maps", ")", ",", "training_mask", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.MyDataset.load_data": [[374, 383], ["glob.glob", "dgrl_list.append"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "data_dirs", ":", "list", ")", "->", "list", ":", "\n", "        ", "dgrl_list", "=", "[", "]", "\n", "for", "data_dir", "in", "data_dirs", ":", "\n", "            ", "for", "x", "in", "glob", ".", "glob", "(", "data_dir", "+", "'/dgrl/*.dgrl'", ",", "recursive", "=", "True", ")", ":", "\n", "                ", "dgrl_path", "=", "x", "\n", "\n", "dgrl_list", ".", "append", "(", "dgrl_path", ")", "\n", "\n", "", "", "return", "dgrl_list", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.MyDataset._get_annotation": [[384, 410], ["torch.cat", "torch.tensor", "open", "f.readlines", "numpy.array", "line.strip().split", "torch.tensor.append", "torch.zeros", "enumerate", "torch.cat.append", "list", "boxes.append", "t.unsqueeze", "len", "len", "int", "map", "line.strip"], "methods", ["None"], ["", "def", "_get_annotation", "(", "self", ",", "label_path", ":", "str", ")", "->", "tuple", ":", "\n", "        ", "boxes", "=", "[", "]", "\n", "label_tensors", "=", "[", "]", "\n", "text_length", "=", "[", "]", "\n", "\n", "with", "open", "(", "label_path", ",", "encoding", "=", "'utf-8'", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "# try:", "\n", "label", "=", "params", "[", "8", "]", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "text_length", ".", "append", "(", "len", "(", "label", ")", ")", "\n", "label_tensor", "=", "torch", ".", "zeros", "(", "self", ".", "max_text_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", ",", "c_label", "in", "enumerate", "(", "label", ")", ":", "\n", "                    ", "label_tensor", "[", "i", "]", "=", "int", "(", "self", ".", "char_dict", "[", "c_label", "]", ")", "\n", "", "label_tensors", ".", "append", "(", "label_tensor", ")", "\n", "# if label == '*' or label == '###':", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "list", "(", "map", "(", "float", ",", "params", "[", ":", "8", "]", ")", ")", "\n", "boxes", ".", "append", "(", "[", "[", "x1", ",", "y1", "]", ",", "[", "x2", ",", "y2", "]", ",", "[", "x3", ",", "y3", "]", ",", "[", "x4", ",", "y4", "]", "]", ")", "\n", "# except:", "\n", "#     print('load label failed on {}'.format(label_path))", "\n", "\n", "", "", "label_tensors", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "label_tensors", "]", ",", "0", ")", "\n", "text_length", "=", "torch", ".", "tensor", "(", "text_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "float32", ")", ",", "label_tensors", ",", "text_length", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.MyDataset.__len__": [[411, 413], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dgrl_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.MyDataset.save_label": [[414, 421], ["img_path.replace", "utils.utils.draw_bbox", "cv2.imwrite", "os.path.exists", "os.makedirs", "os.path.split", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.draw_bbox"], ["", "def", "save_label", "(", "self", ",", "img_path", ",", "label", ")", ":", "\n", "        ", "save_path", "=", "img_path", ".", "replace", "(", "'img'", ",", "'save'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "split", "(", "save_path", ")", "[", "0", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "save_path", ")", "[", "0", "]", ")", "\n", "", "img", "=", "draw_bbox", "(", "img_path", ",", "label", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.AlignCollate.__call__": [[425, 446], ["filter", "zip", "len", "torch.zeros", "torch.zeros", "range", "max", "max"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "batch", "=", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", "\n", "\n", "imgs", ",", "score_maps", ",", "training_masks", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", "=", "zip", "(", "*", "batch", ")", "\n", "batch_size", "=", "len", "(", "imgs", ")", "\n", "img_channel", "=", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "max_h", ",", "max_w", "=", "0", ",", "0", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "img_h", ",", "img_w", "=", "img", ".", "shape", "[", "1", ":", "]", "\n", "max_h", "=", "max", "(", "img_h", ",", "max_h", ")", "\n", "max_w", "=", "max", "(", "img_w", ",", "max_w", ")", "\n", "", "imgs_tensor", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "img_channel", ",", "max_h", ",", "max_w", ")", ",", "dtype", "=", "imgs", "[", "0", "]", ".", "dtype", ")", "\n", "score_maps_tensor", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_h", ",", "max_w", ")", ",", "dtype", "=", "score_maps", "[", "0", "]", ".", "dtype", ")", "\n", "for", "batch_size_i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "img", "=", "imgs", "[", "batch_size_i", "]", "\n", "score_map", "=", "score_maps", "[", "batch_size_i", "]", "[", "0", "]", "\n", "img_h", ",", "img_w", "=", "img", ".", "shape", "[", "1", ":", "]", "\n", "imgs_tensor", "[", "batch_size_i", ",", ":", ",", ":", "img_h", ",", ":", "img_w", "]", "=", "img", "\n", "score_maps_tensor", "[", "batch_size_i", ",", ":", "img_h", ",", ":", "img_w", "]", "=", "score_map", "\n", "\n", "", "return", "imgs_tensor", ",", "score_maps_tensor", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.get_dgrl_data": [[19, 132], ["torch.zeros", "enumerate", "min", "cv2.cvtColor", "numpy.array", "torch.tensor", "open", "numpy.fromfile", "range", "enumerate", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.ones", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile().reshape", "cv2.findContours", "int", "numpy.array", "cv2.minAreaRect", "max", "min", "sorted", "sorted", "sorted", "numpy.int0", "np.array.append", "Label_str.replace.replace", "torch.tensor.append", "page_label.append", "len", "int", "chr", "chr", "chr", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "cv2.boundingRect", "cv2.boxPoints", "max", "len", "struct.pack().decode", "numpy.fromfile", "random.random", "random.random", "random.uniform", "np.array.append", "struct.pack"], "function", ["None"], ["def", "get_dgrl_data", "(", "file_path", ",", "char_dict", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "header_size", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "header", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint8'", ",", "count", "=", "header_size", "-", "4", ")", "\n", "formatcode", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", ":", "8", "]", "]", ")", "\n", "Illustration_size", "=", "header_size", "-", "36", "\n", "Illustration", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", "8", ":", "Illustration_size", "+", "8", "]", "]", ")", "\n", "Code_type", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", "Illustration_size", "+", "8", ":", "Illustration_size", "+", "28", "]", "]", ")", "\n", "Code_length", "=", "header", "[", "Illustration_size", "+", "28", "]", "+", "header", "[", "Illustration_size", "+", "29", "]", "<<", "4", "\n", "Bits_per_pixel", "=", "header", "[", "Illustration_size", "+", "30", "]", "+", "header", "[", "Illustration_size", "+", "31", "]", "<<", "4", "\n", "# print(header_size, formatcode, Illustration)", "\n", "# print(Code_type, Code_length, Bits_per_pixel)", "\n", "# print()", "\n", "Image_height", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Image_width", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Line_number", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "page_np", "=", "np", ".", "ones", "(", "(", "Image_height", "*", "4", ",", "Image_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "page_label", "=", "[", "]", "\n", "boxes", "=", "[", "]", "\n", "text_length", "=", "[", "]", "\n", "Y1", "=", "0", "\n", "Y2", "=", "0", "\n", "all_margin", "=", "0", "\n", "for", "ln", "in", "range", "(", "Line_number", ")", ":", "\n", "            ", "Char_number", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Label", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint16'", ",", "count", "=", "Char_number", ")", "\n", "# print(Label)", "\n", "Label_str", "=", "\"\"", ".", "join", "(", "[", "struct", ".", "pack", "(", "'H'", ",", "c", ")", ".", "decode", "(", "'GBK'", ",", "errors", "=", "'ignore'", ")", "for", "c", "in", "Label", "]", ")", "\n", "# print(Label_str, Char_number)", "\n", "Top_left", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "2", ")", "\n", "Top", ",", "Left", "=", "Top_left", "[", "0", "]", ",", "Top_left", "[", "1", "]", "\n", "if", "Left", ">", "Image_width", ":", "\n", "                ", "Left", "=", "64", "\n", "", "Height", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Width", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Bitmap", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint8'", ",", "count", "=", "Height", "*", "Width", ")", ".", "reshape", "(", "[", "Height", ",", "Width", "]", ")", "\n", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "\n", "255", "-", "Bitmap", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.2", "and", "is_train", ":", "\n", "                ", "all_margin", "+=", "Height", "*", "0.3", "\n", "", "elif", "not", "is_train", ":", "\n", "                ", "all_margin", "+=", "Height", "*", "0.3", "\n", "", "Top", "+=", "all_margin", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", "and", "is_train", ":", "\n", "                ", "Top", "+=", "random", ".", "uniform", "(", "-", "0.2", ",", "0.2", ")", "*", "Height", "\n", "", "Top", "=", "int", "(", "Top", ")", "\n", "all_contours", "=", "[", "]", "\n", "for", "contour", "in", "contours", ":", "\n", "                ", "for", "points", "in", "contour", ":", "\n", "                    ", "all_contours", ".", "append", "(", "points", ")", "\n", "", "", "all_contours", "=", "np", ".", "array", "(", "all_contours", ")", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "all_contours", ")", "\n", "\n", "rect_w", "=", "max", "(", "rect", "[", "1", "]", ")", "\n", "rect_h", "=", "min", "(", "rect", "[", "1", "]", ")", "\n", "if", "rect_w", "<", "Image_width", "*", "0.25", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "cv2", ".", "boundingRect", "(", "all_contours", ")", "\n", "bbox", "=", "[", "[", "x1", ",", "y1", "]", ",", "[", "x2", ",", "y1", "]", ",", "[", "x2", ",", "y2", "]", ",", "[", "x1", ",", "y2", "]", "]", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "cv2", ".", "boxPoints", "(", "rect", ")", "\n", "", "bbox", "=", "sorted", "(", "bbox", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "new_bbox", "=", "[", "]", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", ":", "2", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", "2", ":", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "bbox", "=", "[", "new_bbox", "[", "0", "]", ",", "new_bbox", "[", "3", "]", ",", "new_bbox", "[", "2", "]", ",", "new_bbox", "[", "1", "]", "]", "\n", "if", "not", "is_train", ":", "\n", "                ", "expend_w", "=", "rect_h", "*", "0.5", "\n", "bbox", "[", "0", "]", "[", "0", "]", "-=", "expend_w", "\n", "bbox", "[", "1", "]", "[", "0", "]", "+=", "expend_w", "\n", "bbox", "[", "2", "]", "[", "0", "]", "+=", "expend_w", "\n", "bbox", "[", "3", "]", "[", "0", "]", "-=", "expend_w", "\n", "# left_w = random.uniform(-0.5, 0.5) * rect_h", "\n", "# right_w = random.uniform(-0.5, 0.5) * rect_h", "\n", "# bbox[0][0] += left_w", "\n", "# bbox[1][0] += right_w", "\n", "# bbox[2][0] += right_w", "\n", "# bbox[3][0] += left_w", "\n", "# bbox[0][1] += random.uniform(-0.35, 0.35) * rect_h", "\n", "# bbox[1][1] += random.uniform(-0.35, 0.35) * rect_h", "\n", "# bbox[2][1] += random.uniform(-0.35, 0.35) * rect_h", "\n", "# bbox[3][1] += random.uniform(-0.35, 0.35) * rect_h", "\n", "\n", "", "bbox", "=", "np", ".", "int0", "(", "bbox", ")", "\n", "\n", "bbox", "[", ":", ",", "0", "]", "+=", "Left", "\n", "bbox", "[", ":", ",", "1", "]", "+=", "Top", "\n", "\n", "origin_sub", "=", "page_np", "[", "Top", ":", "Top", "+", "Height", ",", "Left", ":", "Left", "+", "Width", "]", "\n", "page_np", "[", "Top", ":", "Top", "+", "Height", ",", "Left", ":", "Left", "+", "Width", "]", "=", "(", "origin_sub", ">", "Bitmap", ")", "*", "Bitmap", "+", "(", "origin_sub", "<=", "Bitmap", ")", "*", "origin_sub", "\n", "if", "ln", "==", "0", ":", "\n", "                ", "Y1", "=", "max", "(", "Top", "-", "64", ",", "0", ")", "\n", "", "if", "ln", "==", "Line_number", "-", "1", ":", "\n", "                ", "Y2", "=", "Top", "+", "Height", "\n", "# cv2.drawContours(page_np, [bbox], -1, 128, 2)", "\n", "# cv2.imshow('1', cv2.resize(page_np[Y1:, :],dsize=None,fx=0.5,fy=0.5))", "\n", "# cv2.waitKey()", "\n", "", "bbox", "[", ":", ",", "1", "]", "-=", "Y1", "\n", "boxes", ".", "append", "(", "bbox", ")", "\n", "Label_str", "=", "Label_str", ".", "replace", "(", "'\\x00'", ",", "''", ")", "\n", "text_length", ".", "append", "(", "len", "(", "Label_str", ")", ")", "\n", "page_label", ".", "append", "(", "Label_str", ")", "\n", "", "", "label_tensor", "=", "torch", ".", "zeros", "(", "(", "len", "(", "page_label", ")", ",", "100", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "line_i", ",", "line_str", "in", "enumerate", "(", "page_label", ")", ":", "\n", "        ", "for", "label_i", ",", "label_c", "in", "enumerate", "(", "line_str", ")", ":", "\n", "            ", "label_tensor", "[", "line_i", ",", "label_i", "]", "=", "int", "(", "char_dict", "[", "label_c", "]", ")", "\n", "\n", "", "", "Y2", "=", "min", "(", "Image_height", "*", "4", ",", "Y2", "+", "64", ")", "\n", "img_np", "=", "page_np", "[", "Y1", ":", "Y2", ",", ":", "]", "\n", "img_np", "=", "cv2", ".", "cvtColor", "(", "img_np", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "boxes", "=", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "int", ")", "\n", "text_length", "=", "torch", ".", "tensor", "(", "text_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "return", "img_np", ",", "boxes", ",", "label_tensor", ",", "text_length", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.check_and_validate_polys": [[134, 155], ["numpy.clip", "numpy.clip", "numpy.array", "cv2.contourArea", "validated_polys.append", "abs"], "function", ["None"], ["", "def", "check_and_validate_polys", "(", "polys", ",", "xxx_todo_changeme", ")", ":", "\n", "    ", "'''\n    check so that the text poly is in the same direction,\n    and also filter some invalid polygons\n    :param polys:\n    :param tags:\n    :return:\n    '''", "\n", "(", "h", ",", "w", ")", "=", "xxx_todo_changeme", "\n", "if", "polys", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "polys", "\n", "", "polys", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "polys", "[", ":", ",", ":", ",", "0", "]", ",", "0", ",", "w", "-", "1", ")", "# x coord not max w-1, and not min 0", "\n", "polys", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "polys", "[", ":", ",", ":", ",", "1", "]", ",", "0", ",", "h", "-", "1", ")", "# y coord not max h-1, and not min 0", "\n", "\n", "validated_polys", "=", "[", "]", "\n", "for", "poly", "in", "polys", ":", "\n", "        ", "p_area", "=", "cv2", ".", "contourArea", "(", "poly", ")", "\n", "if", "abs", "(", "p_area", ")", "<", "1", ":", "\n", "            ", "continue", "\n", "", "validated_polys", ".", "append", "(", "poly", ")", "\n", "", "return", "np", ".", "array", "(", "validated_polys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.check_shrinked_poly": [[157, 165], ["min"], "function", ["None"], ["", "def", "check_shrinked_poly", "(", "box", ")", ":", "\n", "    ", "if", "min", "(", "(", "(", "box", "[", "0", ",", "1", "]", "-", "box", "[", "1", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "0", ",", "0", "]", "-", "box", "[", "1", ",", "0", "]", ")", "**", "2", ")", ",", "\n", "(", "(", "box", "[", "1", ",", "1", "]", "-", "box", "[", "2", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "1", ",", "0", "]", "-", "box", "[", "2", ",", "0", "]", ")", "**", "2", ")", ",", "\n", "(", "(", "box", "[", "2", ",", "1", "]", "-", "box", "[", "3", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "2", ",", "0", "]", "-", "box", "[", "3", ",", "0", "]", ")", "**", "2", ")", ",", "\n", "(", "(", "box", "[", "3", ",", "1", "]", "-", "box", "[", "1", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "3", ",", "0", "]", "-", "box", "[", "1", ",", "0", "]", ")", "**", "2", ")", ",", "\n", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.generate_rbox": [[167, 213], ["numpy.zeros", "zip", "poly.astype.astype", "pyclipper.PyclipperOffset", "pyclipper.PyclipperOffset.AddPath", "numpy.array", "cv2.fillPoly", "cv2.fillPoly", "sorted", "sorted", "sorted", "numpy.int0", "new_text_polys.append", "cv2.arcLength", "pyclipper.PyclipperOffset.Execute", "cv2.minAreaRect", "cv2.boxPoints", "cv2.contourArea", "len", "data_utils_kernel_box_from_dgrl.check_shrinked_poly", "len"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.check_shrinked_poly"], ["", "def", "generate_rbox", "(", "im_size", ",", "text_polys", ",", "text_labels", ",", "training_mask", ",", "i", ",", "n", ",", "m", ")", ":", "\n", "    ", "\"\"\"\n    \u751f\u6210mask\u56fe\uff0c\u767d\u8272\u90e8\u5206\u662f\u6587\u672c\uff0c\u9ed1\u8272\u662f\u5317\u4eac\n    :param im_size: \u56fe\u50cf\u7684h,w\n    :param text_polys: \u6846\u7684\u5750\u6807\n    :param text_tags: \u6807\u6ce8\u6587\u672c\u6846\u662f\u5426\u53c2\u4e0e\u8bad\u7ec3\n    :return: \u751f\u6210\u7684mask\u56fe\n    \"\"\"", "\n", "h", ",", "w", "=", "im_size", "\n", "score_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "new_text_polys", "=", "[", "]", "\n", "for", "poly", ",", "text_label", "in", "zip", "(", "text_polys", ",", "text_labels", ")", ":", "\n", "        ", "poly", "=", "poly", ".", "astype", "(", "np", ".", "int", ")", "\n", "r_i", "=", "1", "-", "(", "1", "-", "m", ")", "*", "(", "n", "-", "i", ")", "/", "(", "n", "-", "1", ")", "\n", "d_i", "=", "cv2", ".", "contourArea", "(", "poly", ")", "*", "(", "1", "-", "r_i", "*", "r_i", ")", "/", "cv2", ".", "arcLength", "(", "poly", ",", "True", ")", "\n", "pco", "=", "pyclipper", ".", "PyclipperOffset", "(", ")", "\n", "# pco.AddPath(pyclipper.scale_to_clipper(poly), pyclipper.JT_ROUND, pyclipper.ET_CLOSEDPOLYGON)", "\n", "# shrinked_poly = np.floor(np.array(pyclipper.scale_from_clipper(pco.Execute(-d_i)))).astype(np.int)", "\n", "pco", ".", "AddPath", "(", "poly", ",", "pyclipper", ".", "JT_ROUND", ",", "pyclipper", ".", "ET_CLOSEDPOLYGON", ")", "\n", "shrinked_poly", "=", "np", ".", "array", "(", "pco", ".", "Execute", "(", "-", "d_i", ")", ")", "\n", "cv2", ".", "fillPoly", "(", "score_map", ",", "shrinked_poly", ",", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "training_mask", ",", "shrinked_poly", ",", "1", ")", "\n", "if", "len", "(", "shrinked_poly", "[", "0", "]", ")", "!=", "4", "or", "len", "(", "shrinked_poly", "[", "0", "]", ")", "==", "4", "and", "check_shrinked_poly", "(", "shrinked_poly", "[", "0", "]", ")", ":", "\n", "            ", "tmp_box", "=", "cv2", ".", "minAreaRect", "(", "shrinked_poly", "[", "0", "]", ")", "\n", "tmp_box", "=", "cv2", ".", "boxPoints", "(", "tmp_box", ")", "\n", "shrinked_poly", "=", "[", "tmp_box", "]", "\n", "", "bbox", "=", "sorted", "(", "shrinked_poly", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "new_bbox", "=", "[", "]", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", ":", "2", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", "2", ":", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "bbox", "=", "[", "new_bbox", "[", "0", "]", ",", "new_bbox", "[", "3", "]", ",", "new_bbox", "[", "2", "]", ",", "new_bbox", "[", "1", "]", "]", "\n", "bbox", "=", "np", ".", "int0", "(", "bbox", ")", "\n", "new_text_polys", ".", "append", "(", "bbox", ")", "\n", "\n", "# \u5236\u4f5cmask", "\n", "# rect = cv2.minAreaRect(shrinked_poly)", "\n", "# poly_h, poly_w = rect[1]", "\n", "\n", "# if min(poly_h, poly_w) < 10:", "\n", "#     cv2.fillPoly(training_mask, shrinked_poly, 0)", "\n", "\n", "# \u95ed\u8fd0\u7b97\u586b\u5145\u5185\u90e8\u5c0f\u6846", "\n", "# kernel = np.ones((3, 3), np.uint8)", "\n", "# score_map = cv2.morphologyEx(score_map, cv2.MORPH_CLOSE, kernel)", "\n", "\n", "", "return", "score_map", ",", "training_mask", ",", "new_text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.augmentation": [[215, 255], ["int", "len", "random.random", "cv2.fillPoly", "int", "cv2.fillPoly", "int", "text_polys[].astype", "max", "text_polys[].astype", "min"], "function", ["None"], ["", "def", "augmentation", "(", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ",", "text_label", ",", "text_lengths", ",", "scales", ":", "np", ".", "ndarray", ",", "degrees", ":", "int", ",", "\n", "input_size", ":", "int", ")", "->", "tuple", ":", "\n", "# the images are rescaled with ratio {0.5, 1.0, 2.0, 3.0} randomly", "\n", "# im, text_polys = data_aug.random_scale(im, text_polys, scales)", "\n", "# the images are horizontally fliped and rotated in range [\u221210\u25e6, 10\u25e6] randomly", "\n", "# if random.random() < 0.5:", "\n", "#     im, text_polys = data_aug.horizontal_flip(im, text_polys)", "\n", "# if random.random() < 1:", "\n", "#     im, text_polys = data_aug.random_rotate_img_bbox(im, text_polys, degrees)", "\n", "\n", "# 640 \u00d7 640 random samples are cropped from the transformed images", "\n", "# im, text_polys = data_aug.random_crop_img_bboxes(im, text_polys)", "\n", "\n", "# im, text_polys = data_aug.resize(im, text_polys, input_size, keep_ratio=False)", "\n", "# im, text_polys = data_aug.random_crop_image_pse(im, text_polys, input_size)", "\n", "\n", "    ", "half_num", "=", "int", "(", "text_polys", ".", "shape", "[", "0", "]", "/", "2", "+", "0.5", ")", "\n", "if", "len", "(", "text_polys", ")", ">", "4", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "\n", "            ", "cv2", ".", "fillPoly", "(", "im", ",", "text_polys", "[", "half_num", ":", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "255", ")", "\n", "bottom", "=", "int", "(", "max", "(", "text_polys", "[", "half_num", ",", "2", ",", "1", "]", ",", "text_polys", "[", "half_num", ",", "3", ",", "1", "]", ")", ")", "\n", "\n", "im", "=", "im", "[", ":", "bottom", ",", ":", ",", ":", "]", "\n", "text_polys", "=", "text_polys", "[", ":", "half_num", "]", "\n", "text_label", "=", "text_label", "[", ":", "half_num", "]", "\n", "text_lengths", "=", "text_lengths", "[", ":", "half_num", "]", "\n", "", "else", ":", "\n", "\n", "            ", "cv2", ".", "fillPoly", "(", "im", ",", "text_polys", "[", ":", "half_num", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "255", ")", "\n", "\n", "top", "=", "int", "(", "min", "(", "text_polys", "[", "half_num", ",", "0", ",", "1", "]", ",", "text_polys", "[", "half_num", ",", "1", ",", "1", "]", ")", ")", "\n", "im", "=", "im", "[", "top", ":", ",", ":", ",", ":", "]", "\n", "text_polys", "=", "text_polys", "[", "half_num", ":", "]", "\n", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "-=", "top", "\n", "text_label", "=", "text_label", "[", "half_num", ":", "]", "\n", "text_lengths", "=", "text_lengths", "[", "half_num", ":", "]", "\n", "\n", "", "", "return", "im", ",", "text_polys", ",", "text_label", ",", "text_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.PerspectiveTransform": [[257, 292], ["numpy.ones", "numpy.transpose", "numpy.array", "int", "int", "cv2.getPerspectiveTransform", "numpy.reshape", "numpy.dot", "numpy.reshape", "numpy.transpose", "cv2.warpPerspective", "random.random", "numpy.array", "random.randint", "random.randint", "numpy.array", "len", "len", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "function", ["None"], ["", "def", "PerspectiveTransform", "(", "img_np", ",", "text_polys", ",", "trans_rate_w", "=", "0.2", ",", "trans_rate_h", "=", "0.2", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "img_np", ".", "shape", "[", "0", "]", ",", "img_np", ".", "shape", "[", "1", "]", "\n", "tmp_polys", "=", "np", ".", "ones", "(", "(", "len", "(", "text_polys", ")", ",", "4", ",", "3", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "tmp_polys", "[", ":", ",", ":", ",", ":", "2", "]", "=", "text_polys", "\n", "tmp_polys", "=", "np", ".", "transpose", "(", "tmp_polys", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "origin_box", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "img_h", "]", ",", "[", "img_w", ",", "img_h", "]", ",", "[", "img_w", ",", "0", "]", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "trans_w_change", "=", "int", "(", "trans_rate_w", "*", "img_w", ")", "\n", "trans_h_change", "=", "int", "(", "trans_rate_h", "*", "img_h", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "trans_box", "=", "np", ".", "array", "(", "[", "\n", "[", "random", ".", "randint", "(", "0", ",", "trans_w_change", ")", ",", "random", ".", "randint", "(", "0", ",", "trans_h_change", ")", "]", ",", "\n", "[", "random", ".", "randint", "(", "0", ",", "trans_w_change", ")", ",", "random", ".", "randint", "(", "img_h", "-", "trans_h_change", ",", "img_h", ")", "]", ",", "\n", "[", "random", ".", "randint", "(", "img_w", "-", "trans_w_change", ",", "img_w", ")", ",", "random", ".", "randint", "(", "img_h", "-", "trans_h_change", ",", "img_h", ")", "]", ",", "\n", "[", "random", ".", "randint", "(", "img_w", "-", "trans_w_change", ",", "img_w", ")", ",", "random", ".", "randint", "(", "0", ",", "trans_h_change", ")", "]", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "", "else", ":", "\n", "        ", "randomx1", "=", "random", ".", "randint", "(", "0", ",", "trans_w_change", "*", "2", ")", "\n", "randomx2", "=", "random", ".", "randint", "(", "img_w", "-", "trans_w_change", "*", "2", ",", "img_w", ")", "\n", "trans_box", "=", "np", ".", "array", "(", "[", "\n", "[", "randomx1", ",", "random", ".", "randint", "(", "0", ",", "trans_h_change", ")", "]", ",", "\n", "[", "randomx1", ",", "random", ".", "randint", "(", "img_h", "-", "trans_h_change", ",", "img_h", ")", "]", ",", "\n", "[", "randomx2", ",", "random", ".", "randint", "(", "img_h", "-", "trans_h_change", ",", "img_h", ")", "]", ",", "\n", "[", "randomx2", ",", "random", ".", "randint", "(", "0", ",", "trans_h_change", ")", "]", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "", "M", "=", "cv2", ".", "getPerspectiveTransform", "(", "origin_box", ",", "trans_box", ")", "\n", "tmp_polys", "=", "np", ".", "reshape", "(", "tmp_polys", ",", "(", "3", ",", "-", "1", ")", ")", "\n", "tmp_polys", "=", "np", ".", "dot", "(", "M", ",", "tmp_polys", ")", "\n", "tmp_polys", "=", "np", ".", "reshape", "(", "tmp_polys", ",", "(", "3", ",", "len", "(", "text_polys", ")", ",", "-", "1", ")", ")", "\n", "tmp_polys", "=", "np", ".", "transpose", "(", "tmp_polys", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "text_polys", "[", ":", ",", ":", ",", "0", "]", "=", "tmp_polys", "[", ":", ",", ":", ",", "0", "]", "/", "tmp_polys", "[", ":", ",", ":", ",", "2", "]", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "=", "tmp_polys", "[", ":", ",", ":", ",", "1", "]", "/", "tmp_polys", "[", ":", ",", ":", ",", "2", "]", "\n", "\n", "trans_img", "=", "cv2", ".", "warpPerspective", "(", "img_np", ",", "M", ",", "(", "img_w", ",", "img_h", ")", ",", "borderValue", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "return", "trans_img", ",", "text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box_from_dgrl.image_label": [[294, 343], ["numpy.array", "data_utils_kernel_box_from_dgrl.check_and_validate_polys", "text_polys.astype.astype", "numpy.ones", "range", "numpy.array", "data_aug.random_crop_author", "cv2.resize", "data_utils_kernel_box_from_dgrl.PerspectiveTransform", "data_utils_kernel_box_from_dgrl.generate_rbox", "np.array.append", "imgs[].transpose", "random.random", "random.uniform", "cv2.resize", "np.array.transpose", "random.random"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.check_and_validate_polys", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_crop_author", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.PerspectiveTransform", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.generate_rbox", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize"], ["", "def", "image_label", "(", "img_np", ",", "text_polys", ",", "text_label", ",", "text_length", ",", "n", ":", "int", ",", "m", ":", "float", ",", "input_size", ":", "int", ",", "\n", "defrees", ":", "int", "=", "10", ",", "\n", "scales", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "[", "0.5", ",", "1.5", "]", ")", ",", "is_train", "=", "True", ")", "->", "tuple", ":", "\n", "    ", "'''\n    get image's corresponding matrix and ground truth\n    return\n    images [512, 512, 3]\n    score  [128, 128, 1]\n    geo    [128, 128, 5]\n    mask   [128, 128, 1]\n    '''", "\n", "\n", "im", "=", "img_np", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "# \u68c0\u67e5\u8d8a\u754c", "\n", "\n", "text_polys", "=", "check_and_validate_polys", "(", "text_polys", ",", "(", "h", ",", "w", ")", ")", "\n", "# if is_train:", "\n", "#     im, text_polys, text_label,text_lengths = augmentation(im, text_polys, text_label,text_lengths, scales, defrees, input_size)", "\n", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "short_edge", "=", "w", "\n", "text_polys", "=", "text_polys", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "short_edge", ">", "input_size", ":", "\n", "# \u4fdd\u8bc1\u77ed\u8fb9 >= inputsize", "\n", "        ", "scale", "=", "input_size", "/", "short_edge", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "text_polys", "*=", "scale", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", "and", "is_train", ":", "\n", "        ", "im", ",", "text_polys", "=", "PerspectiveTransform", "(", "im", ",", "text_polys", ")", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "0.8", "and", "is_train", ":", "\n", "        ", "scale", "=", "random", ".", "uniform", "(", "0.8", ",", "1", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "text_polys", "*=", "scale", "\n", "\n", "", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "training_mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "score_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "# s1->sn,\u7531\u5c0f\u5230\u5927", "\n", "        ", "score_map", ",", "training_mask", ",", "new_text_polys", "=", "generate_rbox", "(", "(", "h", ",", "w", ")", ",", "text_polys", ",", "text_label", ",", "training_mask", ",", "i", ",", "n", ",", "m", ")", "\n", "score_maps", ".", "append", "(", "score_map", ")", "\n", "if", "i", "==", "n", ":", "\n", "            ", "text_polys", "=", "new_text_polys", "\n", "", "", "score_maps", "=", "np", ".", "array", "(", "score_maps", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "imgs", "=", "data_aug", ".", "random_crop_author", "(", "[", "im", ",", "score_maps", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ",", "training_mask", "]", ",", "(", "input_size", ",", "input_size", ")", ")", "\n", "return", "imgs", "[", "0", "]", ",", "imgs", "[", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ",", "imgs", "[", "2", "]", ",", "text_polys", ",", "text_label", ",", "text_length", "# im,score_maps,training_mask#", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.__init__": [[32, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.add_noise": [[35, 42], ["skimage.util.random_noise"], "methods", ["None"], ["", "def", "add_noise", "(", "self", ",", "im", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"\n        \u5bf9\u56fe\u7247\u52a0\u566a\u58f0\n        :param img: \u56fe\u50cfarray\n        :return: \u52a0\u566a\u58f0\u540e\u7684\u56fe\u50cfarray,\u7531\u4e8e\u8f93\u51fa\u7684\u50cf\u7d20\u662f\u5728[0,1]\u4e4b\u95f4,\u6240\u4ee5\u5f97\u4e58\u4ee5255\n        \"\"\"", "\n", "return", "(", "random_noise", "(", "im", ",", "mode", "=", "'gaussian'", ",", "clip", "=", "True", ")", "*", "255", ")", ".", "astype", "(", "im", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_scale": [[43, 56], ["text_polys.copy", "random.uniform", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize"], ["", "def", "random_scale", "(", "self", ",", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ",", "scales", ":", "np", ".", "ndarray", "or", "list", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        \u4ecescales\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5c3a\u5ea6\uff0c\u5bf9\u56fe\u7247\u548c\u6587\u672c\u6846\u8fdb\u884c\u7f29\u653e\n        :param im: \u539f\u56fe\n        :param text_polys: \u6587\u672c\u6846\n        :param scales: \u5c3a\u5ea6\n        :return: \u7ecf\u8fc7\u7f29\u653e\u7684\u56fe\u7247\u548c\u6587\u672c\n        \"\"\"", "\n", "tmp_text_polys", "=", "text_polys", ".", "copy", "(", ")", "\n", "rd_scale", "=", "random", ".", "uniform", "(", "scales", "[", "0", "]", ",", "scales", "[", "1", "]", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "None", ",", "fx", "=", "rd_scale", ",", "fy", "=", "rd_scale", ")", "\n", "tmp_text_polys", "*=", "rd_scale", "\n", "return", "im", ",", "tmp_text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_rotate_img_bbox": [[57, 112], ["isinstance", "numpy.random.uniform", "cv2.getRotationMatrix2D", "numpy.dot", "cv2.warpAffine", "list", "numpy.deg2rad", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "list.append", "numpy.array", "ValueError", "isinstance", "isinstance", "isinstance", "Exception", "abs", "abs", "abs", "abs", "int", "int", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "ValueError", "math.ceil", "math.ceil", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "random_rotate_img_bbox", "(", "self", ",", "img", ",", "text_polys", ",", "degrees", ":", "numbers", ".", "Number", "or", "list", "or", "tuple", "or", "np", ".", "ndarray", ",", "\n", "same_size", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        \u4ece\u7ed9\u5b9a\u7684\u89d2\u5ea6\u4e2d\u9009\u62e9\u4e00\u4e2a\u89d2\u5ea6\uff0c\u5bf9\u56fe\u7247\u548c\u6587\u672c\u6846\u8fdb\u884c\u65cb\u8f6c\n        :param img: \u56fe\u7247\n        :param text_polys: \u6587\u672c\u6846\n        :param degrees: \u89d2\u5ea6\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u6570\u503c\u6216\u8005list\n        :param same_size: \u662f\u5426\u4fdd\u6301\u548c\u539f\u56fe\u4e00\u6837\u5927\n        :return: \u65cb\u8f6c\u540e\u7684\u56fe\u7247\u548c\u89d2\u5ea6\n        \"\"\"", "\n", "if", "isinstance", "(", "degrees", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "degrees", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a single number, it must be positive.\"", ")", "\n", "", "degrees", "=", "(", "-", "degrees", ",", "degrees", ")", "\n", "", "elif", "isinstance", "(", "degrees", ",", "list", ")", "or", "isinstance", "(", "degrees", ",", "tuple", ")", "or", "isinstance", "(", "degrees", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "len", "(", "degrees", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a sequence, it must be of len 2.\"", ")", "\n", "", "degrees", "=", "degrees", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'degrees must in Number or list or tuple or np.ndarray'", ")", "\n", "# ---------------------- \u65cb\u8f6c\u56fe\u50cf ----------------------", "\n", "", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "angle", "=", "np", ".", "random", ".", "uniform", "(", "degrees", "[", "0", "]", ",", "degrees", "[", "1", "]", ")", "\n", "\n", "if", "same_size", ":", "\n", "            ", "nw", "=", "w", "\n", "nh", "=", "h", "\n", "", "else", ":", "\n", "# \u89d2\u5ea6\u53d8\u5f27\u5ea6", "\n", "            ", "rangle", "=", "np", ".", "deg2rad", "(", "angle", ")", "\n", "# \u8ba1\u7b97\u65cb\u8f6c\u4e4b\u540e\u56fe\u50cf\u7684w, h", "\n", "nw", "=", "(", "abs", "(", "np", ".", "sin", "(", "rangle", ")", "*", "h", ")", "+", "abs", "(", "np", ".", "cos", "(", "rangle", ")", "*", "w", ")", ")", "\n", "nh", "=", "(", "abs", "(", "np", ".", "cos", "(", "rangle", ")", "*", "h", ")", "+", "abs", "(", "np", ".", "sin", "(", "rangle", ")", "*", "w", ")", ")", "\n", "# \u6784\u9020\u4eff\u5c04\u77e9\u9635", "\n", "", "rot_mat", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "nw", "*", "0.5", ",", "nh", "*", "0.5", ")", ",", "angle", ",", "1", ")", "\n", "# \u8ba1\u7b97\u539f\u56fe\u4e2d\u5fc3\u70b9\u5230\u65b0\u56fe\u4e2d\u5fc3\u70b9\u7684\u504f\u79fb\u91cf", "\n", "rot_move", "=", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "array", "(", "[", "(", "nw", "-", "w", ")", "*", "0.5", ",", "(", "nh", "-", "h", ")", "*", "0.5", ",", "0", "]", ")", ")", "\n", "# \u66f4\u65b0\u4eff\u5c04\u77e9\u9635", "\n", "rot_mat", "[", "0", ",", "2", "]", "+=", "rot_move", "[", "0", "]", "\n", "rot_mat", "[", "1", ",", "2", "]", "+=", "rot_move", "[", "1", "]", "\n", "# \u4eff\u5c04\u53d8\u6362", "\n", "rot_img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "rot_mat", ",", "(", "int", "(", "math", ".", "ceil", "(", "nw", ")", ")", ",", "int", "(", "math", ".", "ceil", "(", "nh", ")", ")", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ",", "borderValue", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "\n", "# ---------------------- \u77eb\u6b63bbox\u5750\u6807 ----------------------", "\n", "# rot_mat\u662f\u6700\u7ec8\u7684\u65cb\u8f6c\u77e9\u9635", "\n", "# \u83b7\u53d6\u539f\u59cbbbox\u7684\u56db\u4e2a\u4e2d\u70b9\uff0c\u7136\u540e\u5c06\u8fd9\u56db\u4e2a\u70b9\u8f6c\u6362\u5230\u65cb\u8f6c\u540e\u7684\u5750\u6807\u7cfb\u4e0b", "\n", "rot_text_polys", "=", "list", "(", ")", "\n", "for", "bbox", "in", "text_polys", ":", "\n", "            ", "point1", "=", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "array", "(", "[", "bbox", "[", "0", ",", "0", "]", ",", "bbox", "[", "0", ",", "1", "]", ",", "1", "]", ")", ")", "\n", "point2", "=", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "array", "(", "[", "bbox", "[", "1", ",", "0", "]", ",", "bbox", "[", "1", ",", "1", "]", ",", "1", "]", ")", ")", "\n", "point3", "=", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "array", "(", "[", "bbox", "[", "2", ",", "0", "]", ",", "bbox", "[", "2", ",", "1", "]", ",", "1", "]", ")", ")", "\n", "point4", "=", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "array", "(", "[", "bbox", "[", "3", ",", "0", "]", ",", "bbox", "[", "3", ",", "1", "]", ",", "1", "]", ")", ")", "\n", "rot_text_polys", ".", "append", "(", "[", "point1", ",", "point2", ",", "point3", ",", "point4", "]", ")", "\n", "", "return", "rot_img", ",", "np", ".", "array", "(", "rot_text_polys", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_crop_img_bboxes": [[113, 172], ["numpy.zeros", "numpy.zeros", "range", "numpy.round().astype", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.where", "numpy.where", "numpy.random.choice", "numpy.clip", "numpy.clip", "numpy.random.choice", "numpy.clip", "numpy.clip", "len", "len", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "len", "numpy.round", "numpy.where", "numpy.sum"], "methods", ["None"], ["", "def", "random_crop_img_bboxes", "(", "self", ",", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ",", "max_tries", "=", "50", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        \u4ece\u56fe\u7247\u4e2d\u88c1\u526a\u51fa cropsize\u5927\u5c0f\u7684\u56fe\u7247\u548c\u5bf9\u5e94\u533a\u57df\u7684\u6587\u672c\u6846\n        :param im: \u56fe\u7247\n        :param text_polys: \u6587\u672c\u6846\n        :param max_tries: \u6700\u5927\u5c1d\u8bd5\u6b21\u6570\n        :return: \u88c1\u526a\u540e\u7684\u56fe\u7247\u548c\u6587\u672c\u6846\n        \"\"\"", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "pad_h", "=", "h", "//", "10", "\n", "pad_w", "=", "w", "//", "10", "\n", "h_array", "=", "np", ".", "zeros", "(", "(", "h", "+", "pad_h", "*", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "w_array", "=", "np", ".", "zeros", "(", "(", "w", "+", "pad_w", "*", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "poly", "in", "text_polys", ":", "\n", "            ", "poly", "=", "np", ".", "round", "(", "poly", ",", "decimals", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "# \u56db\u820d\u4e94\u5165\u53d6\u6574", "\n", "minx", "=", "np", ".", "min", "(", "poly", "[", ":", ",", "0", "]", ")", "\n", "maxx", "=", "np", ".", "max", "(", "poly", "[", ":", ",", "0", "]", ")", "\n", "w_array", "[", "minx", "+", "pad_w", ":", "maxx", "+", "pad_w", "]", "=", "1", "# \u5c06\u6587\u672c\u533a\u57df\u7684\u5728w_array\u4e0a\u8bbe\u4e3a1\uff0c\u8868\u793ax\u8f74\u65b9\u5411\u4e0a\u8fd9\u90e8\u5206\u4f4d\u7f6e\u6709\u6587\u672c", "\n", "miny", "=", "np", ".", "min", "(", "poly", "[", ":", ",", "1", "]", ")", "\n", "maxy", "=", "np", ".", "max", "(", "poly", "[", ":", ",", "1", "]", ")", "\n", "h_array", "[", "miny", "+", "pad_h", ":", "maxy", "+", "pad_h", "]", "=", "1", "# \u5c06\u6587\u672c\u533a\u57df\u7684\u5728h_array\u4e0a\u8bbe\u4e3a1\uff0c\u8868\u793ay\u8f74\u65b9\u5411\u4e0a\u8fd9\u90e8\u5206\u4f4d\u7f6e\u6709\u6587\u672c", "\n", "# \u5728\u4e24\u4e2a\u8f74\u4e0a \u62ff\u51fa\u80cc\u666f\u4f4d\u7f6e\u53bb\u8fdb\u884c\u968f\u673a\u7684\u4f4d\u7f6e\u9009\u62e9\uff0c\u907f\u514d\u9009\u62e9\u7684\u533a\u57df\u7a7f\u8fc7\u6587\u672c", "\n", "", "h_axis", "=", "np", ".", "where", "(", "h_array", "==", "0", ")", "[", "0", "]", "\n", "w_axis", "=", "np", ".", "where", "(", "w_array", "==", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "h_axis", ")", "==", "0", "or", "len", "(", "w_axis", ")", "==", "0", ":", "\n", "# \u6574\u5f20\u56fe\u5168\u662f\u6587\u672c\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u8fd4\u56de", "\n", "            ", "return", "im", ",", "text_polys", "\n", "", "for", "i", "in", "range", "(", "max_tries", ")", ":", "\n", "            ", "xx", "=", "np", ".", "random", ".", "choice", "(", "w_axis", ",", "size", "=", "2", ")", "\n", "# \u5bf9\u9009\u62e9\u533a\u57df\u8fdb\u884c\u8fb9\u754c\u63a7\u5236", "\n", "xmin", "=", "np", ".", "min", "(", "xx", ")", "-", "pad_w", "\n", "xmax", "=", "np", ".", "max", "(", "xx", ")", "-", "pad_w", "\n", "xmin", "=", "np", ".", "clip", "(", "xmin", ",", "0", ",", "w", "-", "1", ")", "\n", "xmax", "=", "np", ".", "clip", "(", "xmax", ",", "0", ",", "w", "-", "1", ")", "\n", "yy", "=", "np", ".", "random", ".", "choice", "(", "h_axis", ",", "size", "=", "2", ")", "\n", "ymin", "=", "np", ".", "min", "(", "yy", ")", "-", "pad_h", "\n", "ymax", "=", "np", ".", "max", "(", "yy", ")", "-", "pad_h", "\n", "ymin", "=", "np", ".", "clip", "(", "ymin", ",", "0", ",", "h", "-", "1", ")", "\n", "ymax", "=", "np", ".", "clip", "(", "ymax", ",", "0", ",", "h", "-", "1", ")", "\n", "if", "xmax", "-", "xmin", "<", "0.1", "*", "w", "or", "ymax", "-", "ymin", "<", "0.1", "*", "h", ":", "\n", "# \u9009\u62e9\u7684\u533a\u57df\u8fc7\u5c0f", "\n", "# area too small", "\n", "                ", "continue", "\n", "", "if", "text_polys", ".", "shape", "[", "0", "]", "!=", "0", ":", "# \u8fd9\u4e2a\u5224\u65ad\u4e0d\u77e5\u9053\u5e72\u5565\u7684", "\n", "                ", "poly_axis_in_area", "=", "(", "text_polys", "[", ":", ",", ":", ",", "0", "]", ">=", "xmin", ")", "&", "(", "text_polys", "[", ":", ",", ":", ",", "0", "]", "<=", "xmax", ")", "&", "(", "text_polys", "[", ":", ",", ":", ",", "1", "]", ">=", "ymin", ")", "&", "(", "text_polys", "[", ":", ",", ":", ",", "1", "]", "<=", "ymax", ")", "\n", "selected_polys", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "poly_axis_in_area", ",", "axis", "=", "1", ")", "==", "4", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "selected_polys", "=", "[", "]", "\n", "", "if", "len", "(", "selected_polys", ")", "==", "0", ":", "\n", "# \u533a\u57df\u5185\u6ca1\u6709\u6587\u672c", "\n", "                ", "continue", "\n", "", "im", "=", "im", "[", "ymin", ":", "ymax", "+", "1", ",", "xmin", ":", "xmax", "+", "1", ",", ":", "]", "\n", "polys", "=", "text_polys", "[", "selected_polys", "]", "\n", "# \u5750\u6807\u8c03\u6574\u5230\u88c1\u526a\u56fe\u7247\u4e0a", "\n", "polys", "[", ":", ",", ":", ",", "0", "]", "-=", "xmin", "\n", "polys", "[", ":", ",", ":", ",", "1", "]", "-=", "ymin", "\n", "return", "im", ",", "polys", "\n", "", "return", "im", ",", "text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_crop_image_pse": [[173, 223], ["min", "range", "cv2.resize", "random.randint", "random.randint", "numpy.array", "numpy.clip", "numpy.clip", "selected_polys.append", "poly[].max", "poly[].min", "poly[].max", "poly[].min"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize"], ["", "def", "random_crop_image_pse", "(", "self", ",", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ",", "input_size", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        \u4ece\u56fe\u7247\u4e2d\u88c1\u526a\u51fa cropsize\u5927\u5c0f\u7684\u56fe\u7247\u548c\u5bf9\u5e94\u533a\u57df\u7684\u6587\u672c\u6846\n        :param im: \u56fe\u7247\n        :param text_polys: \u6587\u672c\u6846\n        :param input_size: \u8f93\u51fa\u56fe\u50cf\u5927\u5c0f\n        :return: \u88c1\u526a\u540e\u7684\u56fe\u7247\u548c\u6587\u672c\u6846\n        \"\"\"", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "short_edge", "=", "min", "(", "h", ",", "w", ")", "\n", "if", "short_edge", "<", "input_size", ":", "\n", "# \u4fdd\u8bc1\u77ed\u8fb9 >= inputsize", "\n", "            ", "scale", "=", "input_size", "/", "short_edge", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "text_polys", "*=", "scale", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "# \u8ba1\u7b97\u968f\u673a\u8303\u56f4", "\n", "", "w_range", "=", "w", "-", "input_size", "\n", "h_range", "=", "h", "-", "input_size", "\n", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "            ", "xmin", "=", "random", ".", "randint", "(", "0", ",", "w_range", ")", "\n", "ymin", "=", "random", ".", "randint", "(", "0", ",", "h_range", ")", "\n", "xmax", "=", "xmin", "+", "input_size", "\n", "ymax", "=", "ymin", "+", "input_size", "\n", "if", "text_polys", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "                ", "selected_polys", "=", "[", "]", "\n", "for", "poly", "in", "text_polys", ":", "\n", "                    ", "if", "poly", "[", ":", ",", "0", "]", ".", "max", "(", ")", "<", "xmin", "or", "poly", "[", ":", ",", "0", "]", ".", "min", "(", ")", ">", "xmax", "or", "poly", "[", ":", ",", "1", "]", ".", "max", "(", ")", "<", "ymin", "or", "poly", "[", ":", ",", "1", "]", ".", "min", "(", ")", ">", "ymax", ":", "\n", "                        ", "continue", "\n", "# area_p = cv2.contourArea(poly)", "\n", "", "poly", "[", ":", ",", "0", "]", "-=", "xmin", "\n", "poly", "[", ":", ",", "1", "]", "-=", "ymin", "\n", "poly", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "poly", "[", ":", ",", "0", "]", ",", "0", ",", "input_size", ")", "\n", "poly", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "poly", "[", ":", ",", "1", "]", ",", "0", ",", "input_size", ")", "\n", "# rect = cv2.minAreaRect(poly)", "\n", "# area_n = cv2.contourArea(poly)", "\n", "# h1, w1 = rect[1]", "\n", "# if w1 < 10 or h1 < 10 or area_n / area_p < 0.5:", "\n", "#     continue", "\n", "selected_polys", ".", "append", "(", "poly", ")", "\n", "", "", "else", ":", "\n", "                ", "selected_polys", "=", "[", "]", "\n", "# if len(selected_polys) == 0:", "\n", "# \u533a\u57df\u5185\u6ca1\u6709\u6587\u672c", "\n", "# continue", "\n", "", "im", "=", "im", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", ",", ":", "]", "\n", "polys", "=", "np", ".", "array", "(", "selected_polys", ")", "\n", "return", "im", ",", "polys", "\n", "", "return", "im", ",", "text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_crop_author": [[224, 260], ["None"], "methods", ["None"], ["", "def", "random_crop_author", "(", "self", ",", "imgs", ",", "img_size", ")", ":", "\n", "# h, w = imgs[0].shape[0:2]", "\n", "# th, tw = img_size", "\n", "# if w == tw and h == th:", "\n", "#     return imgs", "\n", "#", "\n", "# # label\u4e2d\u5b58\u5728\u6587\u672c\u5b9e\u4f8b\uff0c\u5e76\u4e14\u6309\u7167\u6982\u7387\u8fdb\u884c\u88c1\u526a", "\n", "# if np.max(imgs[1][:,:,-1]) > 0 and random.random() > 8.0 / 8.0:", "\n", "#     # \u6587\u672c\u5b9e\u4f8b\u7684top left\u70b9", "\n", "#     tl = np.min(np.where(imgs[1][:,:,-1] > 0), axis=1) - img_size", "\n", "#     tl[tl < 0] = 0", "\n", "#     # \u6587\u672c\u5b9e\u4f8b\u7684 bottom right \u70b9", "\n", "#     br = np.max(np.where(imgs[1][:,:,-1] > 0), axis=1) - img_size", "\n", "#     br[br < 0] = 0", "\n", "#     # \u4fdd\u8bc1\u9009\u5230\u53f3\u4e0b\u89d2\u70b9\u662f\uff0c\u6709\u8db3\u591f\u7684\u8ddd\u79bb\u8fdb\u884ccrop", "\n", "#     br[0] = min(br[0], h - th)", "\n", "#     br[1] = min(br[1], w - tw)", "\n", "#     for _ in range(50000):", "\n", "#         i = random.randint(tl[0], br[0])", "\n", "#         j = random.randint(tl[1], br[1])", "\n", "#         # \u4fdd\u8bc1\u6700\u5c0f\u7684\u56fe\u6709\u6587\u672c", "\n", "#         if imgs[1][:,:,0][i:i + th, j:j + tw].sum() <= 0:", "\n", "#             continue", "\n", "#         else:", "\n", "#             break", "\n", "# else:", "\n", "#     i = random.randint(0, h - th)", "\n", "#     j = random.randint(0, w - tw)", "\n", "#", "\n", "# # return i, j, th, tw", "\n", "# for idx in range(len(imgs)):", "\n", "#     if len(imgs[idx].shape) == 3:", "\n", "#         imgs[idx] = imgs[idx][i:i + th, j:j + tw, :]", "\n", "#     else:", "\n", "#         imgs[idx] = imgs[idx][i:i + th, j:j + tw]", "\n", "        ", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize": [[261, 297], ["isinstance", "text_polys.astype.astype.astype", "cv2.resize", "max", "max", "numpy.zeros", "cv2.resize.copy", "float", "float", "ValueError", "isinstance", "isinstance", "isinstance", "Exception", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize"], ["", "def", "resize", "(", "self", ",", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ",", "\n", "input_size", ":", "numbers", ".", "Number", "or", "list", "or", "tuple", "or", "np", ".", "ndarray", ",", "keep_ratio", ":", "bool", "=", "False", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        \u5bf9\u56fe\u7247\u548c\u6587\u672c\u6846\u8fdb\u884cresize\n        :param im: \u56fe\u7247\n        :param text_polys: \u6587\u672c\u6846\n        :param input_size: resize\u5c3a\u5bf8,\u6570\u5b57\u6216\u8005list\u7684\u5f62\u5f0f\uff0c\u5982\u679c\u4e3alist\u5f62\u5f0f\uff0c\u5c31\u662f[w,h]\n        :param keep_ratio: \u662f\u5426\u4fdd\u6301\u957f\u5bbd\u6bd4\n        :return: resize\u540e\u7684\u56fe\u7247\u548c\u6587\u672c\u6846\n        \"\"\"", "\n", "if", "isinstance", "(", "input_size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "input_size", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If input_size is a single number, it must be positive.\"", ")", "\n", "", "input_size", "=", "(", "input_size", ",", "input_size", ")", "\n", "", "elif", "isinstance", "(", "input_size", ",", "list", ")", "or", "isinstance", "(", "input_size", ",", "tuple", ")", "or", "isinstance", "(", "input_size", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "len", "(", "input_size", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"If input_size is a sequence, it must be of len 2.\"", ")", "\n", "", "input_size", "=", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'input_size must in Number or list or tuple or np.ndarray'", ")", "\n", "", "if", "keep_ratio", ":", "\n", "# \u5c06\u56fe\u7247\u77ed\u8fb9pad\u5230\u548c\u957f\u8fb9\u4e00\u6837", "\n", "            ", "h", ",", "w", ",", "c", "=", "im", ".", "shape", "\n", "max_h", "=", "max", "(", "h", ",", "input_size", "[", "0", "]", ")", "\n", "max_w", "=", "max", "(", "w", ",", "input_size", "[", "1", "]", ")", "\n", "im_padded", "=", "np", ".", "zeros", "(", "(", "max_h", ",", "max_w", ",", "c", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "im_padded", "[", ":", "h", ",", ":", "w", "]", "=", "im", ".", "copy", "(", ")", "\n", "im", "=", "im_padded", "\n", "", "text_polys", "=", "text_polys", ".", "astype", "(", "np", ".", "float32", ")", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "input_size", ")", "\n", "w_scale", "=", "input_size", "[", "0", "]", "/", "float", "(", "w", ")", "\n", "h_scale", "=", "input_size", "[", "1", "]", "/", "float", "(", "h", ")", "\n", "text_polys", "[", ":", ",", ":", ",", "0", "]", "*=", "w_scale", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "*=", "h_scale", "\n", "return", "im", ",", "text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.horizontal_flip": [[298, 311], ["text_polys.copy", "cv2.flip"], "methods", ["None"], ["", "def", "horizontal_flip", "(", "self", ",", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        \u5bf9\u56fe\u7247\u548c\u6587\u672c\u6846\u8fdb\u884c\u6c34\u5e73\u7ffb\u8f6c\n        :param im: \u56fe\u7247\n        :param text_polys: \u6587\u672c\u6846\n        :return: \u6c34\u5e73\u7ffb\u8f6c\u4e4b\u540e\u7684\u56fe\u7247\u548c\u6587\u672c\u6846\n        \"\"\"", "\n", "flip_text_polys", "=", "text_polys", ".", "copy", "(", ")", "\n", "flip_im", "=", "cv2", ".", "flip", "(", "im", ",", "1", ")", "\n", "h", ",", "w", ",", "_", "=", "flip_im", ".", "shape", "\n", "\n", "flip_text_polys", "[", ":", ",", ":", ",", "0", "]", "=", "w", "-", "flip_text_polys", "[", ":", ",", ":", ",", "0", "]", "\n", "return", "flip_im", ",", "flip_text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.vertical_flip": [[312, 324], ["text_polys.copy", "cv2.flip"], "methods", ["None"], ["", "def", "vertical_flip", "(", "self", ",", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n         \u5bf9\u56fe\u7247\u548c\u6587\u672c\u6846\u8fdb\u884c\u7ad6\u76f4\u7ffb\u8f6c\n        :param im: \u56fe\u7247\n        :param text_polys: \u6587\u672c\u6846\n        :return: \u7ad6\u76f4\u7ffb\u8f6c\u4e4b\u540e\u7684\u56fe\u7247\u548c\u6587\u672c\u6846\n        \"\"\"", "\n", "flip_text_polys", "=", "text_polys", ".", "copy", "(", ")", "\n", "flip_im", "=", "cv2", ".", "flip", "(", "im", ",", "0", ")", "\n", "h", ",", "w", ",", "_", "=", "flip_im", ".", "shape", "\n", "flip_text_polys", "[", ":", ",", ":", ",", "1", "]", "=", "h", "-", "flip_text_polys", "[", ":", ",", ":", ",", "1", "]", "\n", "return", "flip_im", ",", "flip_text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.test": [[325, 357], ["print", "augment.DataAugment.random_scale", "print", "augment.show_pic", "print", "augment.DataAugment.random_rotate_img_bbox", "print", "augment.show_pic", "print", "augment.DataAugment.random_crop_img_bboxes", "print", "augment.show_pic", "print", "augment.DataAugment.horizontal_flip", "print", "augment.show_pic", "print", "augment.DataAugment.vertical_flip", "print", "augment.show_pic", "augment.show_pic", "print", "augment.DataAugment.add_noise", "print", "augment.show_pic", "augment.show_pic"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_scale", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_rotate_img_bbox", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_crop_img_bboxes", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.horizontal_flip", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.vertical_flip", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.add_noise", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic"], ["", "def", "test", "(", "self", ",", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "print", "(", "'\u968f\u673a\u5c3a\u5ea6\u7f29\u653e'", ")", "\n", "t_im", ",", "t_text_polys", "=", "self", ".", "random_scale", "(", "im", ",", "text_polys", ",", "[", "0.5", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "print", "(", "t_im", ".", "shape", ",", "t_text_polys", ".", "dtype", ")", "\n", "show_pic", "(", "t_im", ",", "t_text_polys", ",", "'random_scale'", ")", "\n", "\n", "print", "(", "'\u968f\u673a\u65cb\u8f6c'", ")", "\n", "t_im", ",", "t_text_polys", "=", "self", ".", "random_rotate_img_bbox", "(", "im", ",", "text_polys", ",", "10", ")", "\n", "print", "(", "t_im", ".", "shape", ",", "t_text_polys", ".", "dtype", ")", "\n", "show_pic", "(", "t_im", ",", "t_text_polys", ",", "'random_rotate_img_bbox'", ")", "\n", "\n", "print", "(", "'\u968f\u673a\u88c1\u526a'", ")", "\n", "t_im", ",", "t_text_polys", "=", "self", ".", "random_crop_img_bboxes", "(", "im", ",", "text_polys", ")", "\n", "print", "(", "t_im", ".", "shape", ",", "t_text_polys", ".", "dtype", ")", "\n", "show_pic", "(", "t_im", ",", "t_text_polys", ",", "'random_crop_img_bboxes'", ")", "\n", "\n", "print", "(", "'\u6c34\u5e73\u7ffb\u8f6c'", ")", "\n", "t_im", ",", "t_text_polys", "=", "self", ".", "horizontal_flip", "(", "im", ",", "text_polys", ")", "\n", "print", "(", "t_im", ".", "shape", ",", "t_text_polys", ".", "dtype", ")", "\n", "show_pic", "(", "t_im", ",", "t_text_polys", ",", "'horizontal_flip'", ")", "\n", "\n", "print", "(", "'\u7ad6\u76f4\u7ffb\u8f6c'", ")", "\n", "t_im", ",", "t_text_polys", "=", "self", ".", "vertical_flip", "(", "im", ",", "text_polys", ")", "\n", "print", "(", "t_im", ".", "shape", ",", "t_text_polys", ".", "dtype", ")", "\n", "show_pic", "(", "t_im", ",", "t_text_polys", ",", "'vertical_flip'", ")", "\n", "show_pic", "(", "im", ",", "text_polys", ",", "'vertical_flip_ori'", ")", "\n", "\n", "print", "(", "'\u52a0\u566a\u58f0'", ")", "\n", "t_im", "=", "self", ".", "add_noise", "(", "im", ")", "\n", "print", "(", "t_im", ".", "shape", ")", "\n", "show_pic", "(", "t_im", ",", "text_polys", ",", "'add_noise'", ")", "\n", "show_pic", "(", "im", ",", "text_polys", ",", "'add_noise_ori'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.show_pic": [[9, 28], ["img.copy", "np.array.astype", "cv2.imshow", "isinstance", "numpy.array", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "function", ["None"], ["def", "show_pic", "(", "img", ",", "bboxes", "=", "None", ",", "name", "=", "'pic'", ")", ":", "\n", "    ", "'''\n    \u8f93\u5165:\n        img:\u56fe\u50cfarray\n        bboxes:\u56fe\u50cf\u7684\u6240\u6709boudning box list, \u683c\u5f0f\u4e3a[[x_min, y_min, x_max, y_max]....]\n        names:\u6bcf\u4e2abox\u5bf9\u5e94\u7684\u540d\u79f0\n    '''", "\n", "show_img", "=", "img", ".", "copy", "(", ")", "\n", "if", "not", "isinstance", "(", "bboxes", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ")", "\n", "", "for", "point", "in", "bboxes", ".", "astype", "(", "np", ".", "int", ")", ":", "\n", "        ", "cv2", ".", "line", "(", "show_img", ",", "tuple", "(", "point", "[", "0", "]", ")", ",", "tuple", "(", "point", "[", "1", "]", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "line", "(", "show_img", ",", "tuple", "(", "point", "[", "1", "]", ")", ",", "tuple", "(", "point", "[", "2", "]", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "line", "(", "show_img", ",", "tuple", "(", "point", "[", "2", "]", ")", ",", "tuple", "(", "point", "[", "3", "]", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "line", "(", "show_img", ",", "tuple", "(", "point", "[", "3", "]", ")", ",", "tuple", "(", "point", "[", "0", "]", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "# cv2.namedWindow(name, 0)  # 1\u8868\u793a\u539f\u56fe", "\n", "# cv2.moveWindow(name, 0, 0)", "\n", "# cv2.resizeWindow(name, 1200, 800)  # \u53ef\u89c6\u5316\u7684\u56fe\u7247\u5927\u5c0f", "\n", "", "cv2", ".", "imshow", "(", "name", ",", "show_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset.__init__": [[333, 345], ["data_utils_kernel_box.MyDataset.load_data"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset.load_data"], ["    ", "def", "__init__", "(", "self", ",", "data_dirs", ",", "char_dict", ",", "data_shape", ":", "int", "=", "640", ",", "n", "=", "6", ",", "m", "=", "0.5", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "max_text_length", "=", "80", ",", "\n", "is_train", "=", "True", ",", "epoch_count", "=", "2", ")", ":", "\n", "        ", "self", ".", "char_dict", "=", "char_dict", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "max_text_length", "=", "max_text_length", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "data_list", "=", "self", ".", "load_data", "(", "data_dirs", ")", "\n", "self", ".", "epoch_count", "=", "epoch_count", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset.__getitem__": [[346, 378], ["torch.cat", "torch.tensor", "data_utils_kernel_box.image_label", "torch.zeros", "enumerate", "torch.cat.append", "torch.tensor.append", "data_utils_kernel_box.MyDataset.transform", "data_utils_kernel_box.MyDataset.target_transform", "data_utils_kernel_box.MyDataset.target_transform", "torch.tensor", "int", "len", "t.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.image_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# print(self.image_list[index])", "\n", "        ", "img_path", ",", "text_polys", ",", "label_strs", "=", "self", ".", "data_list", "[", "index", "]", "\n", "label_tensors", "=", "[", "]", "\n", "text_lengths", "=", "[", "]", "\n", "\n", "for", "label", "in", "label_strs", ":", "\n", "\n", "            ", "label_tensor", "=", "torch", ".", "zeros", "(", "self", ".", "max_text_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", ",", "c_label", "in", "enumerate", "(", "label", ")", ":", "\n", "                ", "label_tensor", "[", "i", "]", "=", "int", "(", "self", ".", "char_dict", "[", "c_label", "]", ")", "\n", "", "label_tensors", ".", "append", "(", "label_tensor", ")", "\n", "text_lengths", ".", "append", "(", "len", "(", "label", ")", ")", "\n", "", "label_tensors", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "label_tensors", "]", ",", "0", ")", "\n", "text_lengths", "=", "torch", ".", "tensor", "(", "text_lengths", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "img", ",", "score_maps", ",", "training_mask", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", ",", "label_strs", "=", "image_label", "(", "img_path", ",", "\n", "text_polys", ",", "\n", "label_tensors", ",", "\n", "text_lengths", ",", "\n", "label_strs", ",", "\n", "input_size", "=", "self", ".", "data_shape", ",", "\n", "n", "=", "self", ".", "n", ",", "\n", "m", "=", "self", ".", "m", ",", "is_train", "=", "self", ".", "is_train", ",", "\n", "epoch_count", "=", "self", ".", "epoch_count", ")", "\n", "# img = draw_bbox(img,text_polys)", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "score_maps", "=", "self", ".", "target_transform", "(", "score_maps", ")", "\n", "training_mask", "=", "self", ".", "target_transform", "(", "training_mask", ")", "\n", "", "return", "img", ",", "torch", ".", "tensor", "(", "score_maps", ")", ",", "training_mask", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", ",", "label_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset.load_data": [[379, 394], ["glob.glob", "pathlib.Path", "os.path.join", "data_utils_kernel_box.MyDataset._get_annotation", "len", "data_list.append", "print", "str"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset._get_annotation"], ["", "def", "load_data", "(", "self", ",", "data_dirs", ":", "list", ")", "->", "list", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "for", "data_dir", "in", "data_dirs", ":", "\n", "            ", "for", "x", "in", "glob", ".", "glob", "(", "data_dir", "+", "'/page_imgs/*.png'", ",", "recursive", "=", "True", ")", ":", "\n", "\n", "                ", "d", "=", "pathlib", ".", "Path", "(", "x", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'gt'", ",", "(", "'gt_'", "+", "str", "(", "d", ".", "stem", ")", "+", "'.txt'", ")", ")", "\n", "bboxs", ",", "label_strs", "=", "self", ".", "_get_annotation", "(", "label_path", ")", "\n", "\n", "if", "len", "(", "bboxs", ")", ">", "0", ":", "\n", "                    ", "data_list", ".", "append", "(", "(", "x", ",", "bboxs", ",", "label_strs", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'there is no suit bbox on {}'", ".", "format", "(", "label_path", ")", ")", "\n", "\n", "", "", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset._get_annotation": [[395, 436], ["open", "f.readlines", "numpy.array", "line.strip().split", "list", "numpy.array", "sorted", "sorted", "sorted", "boxes.append", "label_strs.append", "len", "map", "cv2.contourArea", "line.strip", "numpy.int0"], "methods", ["None"], ["", "def", "_get_annotation", "(", "self", ",", "label_path", ":", "str", ")", "->", "tuple", ":", "\n", "        ", "boxes", "=", "[", "]", "\n", "label_tensors", "=", "[", "]", "\n", "text_length", "=", "[", "]", "\n", "label_strs", "=", "[", "]", "\n", "with", "open", "(", "label_path", ",", "encoding", "=", "'utf-8'", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "# try:", "\n", "label", "=", "params", "[", "8", "]", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "# label_tensor = torch.zeros(self.max_text_length, dtype=torch.long)", "\n", "# for i, c_label in enumerate(label):", "\n", "#     label_tensor[i] = int(self.char_dict[c_label])", "\n", "\n", "# if label == '*' or label == '###':", "\n", "", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "list", "(", "map", "(", "float", ",", "params", "[", ":", "8", "]", ")", ")", "\n", "\n", "box", "=", "np", ".", "array", "(", "[", "[", "x1", ",", "y1", "]", ",", "[", "x2", ",", "y2", "]", ",", "[", "x3", ",", "y3", "]", ",", "[", "x4", ",", "y4", "]", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "box", "=", "sorted", "(", "box", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "new_bbox", "=", "[", "]", "\n", "new_bbox", "+=", "sorted", "(", "box", "[", ":", "2", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "new_bbox", "+=", "sorted", "(", "box", "[", "2", ":", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "box", "=", "[", "new_bbox", "[", "0", "]", ",", "new_bbox", "[", "3", "]", ",", "new_bbox", "[", "2", "]", ",", "new_bbox", "[", "1", "]", "]", "\n", "# print(box)", "\n", "if", "cv2", ".", "contourArea", "(", "np", ".", "int0", "(", "box", ")", ")", "<", "2000", ":", "\n", "                    ", "continue", "\n", "# label_tensors.append(label_tensor)", "\n", "", "boxes", ".", "append", "(", "box", ")", "\n", "# print(label)", "\n", "label_strs", ".", "append", "(", "label", ")", "\n", "# text_length.append(len(label))", "\n", "# print(cv2.contourArea(box),len(label))", "\n", "# except:", "\n", "#     print('load label failed on {}'.format(label_path))", "\n", "\n", "# label_tensors = torch.cat([t.unsqueeze(0) for t in label_tensors], 0)", "\n", "# text_length = torch.tensor(text_length, dtype=torch.long)", "\n", "", "", "return", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "float32", ")", ",", "label_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset.__len__": [[437, 439], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.MyDataset.save_label": [[440, 447], ["img_path.replace", "utils.utils.draw_bbox", "cv2.imwrite", "os.path.exists", "os.makedirs", "os.path.split", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.utils.utils.draw_bbox"], ["", "def", "save_label", "(", "self", ",", "img_path", ",", "label", ")", ":", "\n", "        ", "save_path", "=", "img_path", ".", "replace", "(", "'img'", ",", "'save'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "split", "(", "save_path", ")", "[", "0", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "save_path", ")", "[", "0", "]", ")", "\n", "", "img", "=", "draw_bbox", "(", "img_path", ",", "label", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.AlignCollate.__call__": [[451, 472], ["filter", "zip", "len", "torch.zeros", "torch.zeros", "range", "max", "max"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "batch", "=", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", "\n", "\n", "imgs", ",", "score_maps", ",", "training_masks", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", ",", "label_strs", "=", "zip", "(", "*", "batch", ")", "\n", "batch_size", "=", "len", "(", "imgs", ")", "\n", "img_channel", "=", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "max_h", ",", "max_w", "=", "0", ",", "0", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "img_h", ",", "img_w", "=", "img", ".", "shape", "[", "1", ":", "]", "\n", "max_h", "=", "max", "(", "img_h", ",", "max_h", ")", "\n", "max_w", "=", "max", "(", "img_w", ",", "max_w", ")", "\n", "", "imgs_tensor", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "img_channel", ",", "max_h", ",", "max_w", ")", ",", "dtype", "=", "imgs", "[", "0", "]", ".", "dtype", ")", "\n", "score_maps_tensor", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "max_h", ",", "max_w", ")", ",", "dtype", "=", "score_maps", "[", "0", "]", ".", "dtype", ")", "\n", "for", "batch_size_i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "img", "=", "imgs", "[", "batch_size_i", "]", "\n", "score_map", "=", "score_maps", "[", "batch_size_i", "]", "[", "0", "]", "\n", "img_h", ",", "img_w", "=", "img", ".", "shape", "[", "1", ":", "]", "\n", "imgs_tensor", "[", "batch_size_i", ",", ":", ",", ":", "img_h", ",", ":", "img_w", "]", "=", "img", "\n", "score_maps_tensor", "[", "batch_size_i", ",", ":", "img_h", ",", ":", "img_w", "]", "=", "score_map", "\n", "\n", "", "return", "imgs_tensor", ",", "score_maps_tensor", ",", "text_polys", ",", "label_tensors", ",", "text_lengths", ",", "label_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.check_and_validate_polys": [[17, 38], ["numpy.clip", "numpy.clip", "numpy.array", "cv2.contourArea", "validated_polys.append", "abs"], "function", ["None"], ["def", "check_and_validate_polys", "(", "polys", ",", "xxx_todo_changeme", ")", ":", "\n", "    ", "'''\n    check so that the text poly is in the same direction,\n    and also filter some invalid polygons\n    :param polys:\n    :param tags:\n    :return:\n    '''", "\n", "(", "h", ",", "w", ")", "=", "xxx_todo_changeme", "\n", "if", "polys", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "polys", "\n", "", "polys", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "polys", "[", ":", ",", ":", ",", "0", "]", ",", "0", ",", "w", "-", "1", ")", "# x coord not max w-1, and not min 0", "\n", "polys", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "polys", "[", ":", ",", ":", ",", "1", "]", ",", "0", ",", "h", "-", "1", ")", "# y coord not max h-1, and not min 0", "\n", "\n", "validated_polys", "=", "[", "]", "\n", "for", "poly", "in", "polys", ":", "\n", "        ", "p_area", "=", "cv2", ".", "contourArea", "(", "poly", ")", "\n", "if", "abs", "(", "p_area", ")", "<", "1", ":", "\n", "            ", "continue", "\n", "", "validated_polys", ".", "append", "(", "poly", ")", "\n", "", "return", "np", ".", "array", "(", "validated_polys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.check_shrinked_poly": [[40, 48], ["min"], "function", ["None"], ["", "def", "check_shrinked_poly", "(", "box", ")", ":", "\n", "    ", "if", "min", "(", "(", "(", "box", "[", "0", ",", "1", "]", "-", "box", "[", "1", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "0", ",", "0", "]", "-", "box", "[", "1", ",", "0", "]", ")", "**", "2", ")", ",", "\n", "(", "(", "box", "[", "1", ",", "1", "]", "-", "box", "[", "2", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "1", ",", "0", "]", "-", "box", "[", "2", ",", "0", "]", ")", "**", "2", ")", ",", "\n", "(", "(", "box", "[", "2", ",", "1", "]", "-", "box", "[", "3", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "2", ",", "0", "]", "-", "box", "[", "3", ",", "0", "]", ")", "**", "2", ")", ",", "\n", "(", "(", "box", "[", "3", ",", "1", "]", "-", "box", "[", "1", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "3", ",", "0", "]", "-", "box", "[", "1", ",", "0", "]", ")", "**", "2", ")", ",", "\n", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.generate_rbox": [[50, 96], ["numpy.zeros", "zip", "poly.astype.astype", "pyclipper.PyclipperOffset", "pyclipper.PyclipperOffset.AddPath", "numpy.array", "cv2.fillPoly", "cv2.fillPoly", "sorted", "sorted", "sorted", "numpy.int0", "new_text_polys.append", "cv2.arcLength", "pyclipper.PyclipperOffset.Execute", "cv2.minAreaRect", "cv2.boxPoints", "cv2.contourArea", "len", "data_utils_kernel_box.check_shrinked_poly", "len"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.check_shrinked_poly"], ["", "def", "generate_rbox", "(", "im_size", ",", "text_polys", ",", "text_labels", ",", "training_mask", ",", "i", ",", "n", ",", "m", ")", ":", "\n", "    ", "\"\"\"\n    \u751f\u6210mask\u56fe\uff0c\u767d\u8272\u90e8\u5206\u662f\u6587\u672c\uff0c\u9ed1\u8272\u662f\u5317\u4eac\n    :param im_size: \u56fe\u50cf\u7684h,w\n    :param text_polys: \u6846\u7684\u5750\u6807\n    :param text_tags: \u6807\u6ce8\u6587\u672c\u6846\u662f\u5426\u53c2\u4e0e\u8bad\u7ec3\n    :return: \u751f\u6210\u7684mask\u56fe\n    \"\"\"", "\n", "h", ",", "w", "=", "im_size", "\n", "score_map", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "new_text_polys", "=", "[", "]", "\n", "for", "poly", ",", "text_label", "in", "zip", "(", "text_polys", ",", "text_labels", ")", ":", "\n", "        ", "poly", "=", "poly", ".", "astype", "(", "np", ".", "int", ")", "\n", "r_i", "=", "1", "-", "(", "1", "-", "m", ")", "*", "(", "n", "-", "i", ")", "/", "(", "n", "-", "1", ")", "\n", "d_i", "=", "cv2", ".", "contourArea", "(", "poly", ")", "*", "(", "1", "-", "r_i", "*", "r_i", ")", "/", "cv2", ".", "arcLength", "(", "poly", ",", "True", ")", "\n", "pco", "=", "pyclipper", ".", "PyclipperOffset", "(", ")", "\n", "# pco.AddPath(pyclipper.scale_to_clipper(poly), pyclipper.JT_ROUND, pyclipper.ET_CLOSEDPOLYGON)", "\n", "# shrinked_poly = np.floor(np.array(pyclipper.scale_from_clipper(pco.Execute(-d_i)))).astype(np.int)", "\n", "pco", ".", "AddPath", "(", "poly", ",", "pyclipper", ".", "JT_ROUND", ",", "pyclipper", ".", "ET_CLOSEDPOLYGON", ")", "\n", "shrinked_poly", "=", "np", ".", "array", "(", "pco", ".", "Execute", "(", "-", "d_i", ")", ")", "\n", "cv2", ".", "fillPoly", "(", "score_map", ",", "shrinked_poly", ",", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "training_mask", ",", "shrinked_poly", ",", "1", ")", "\n", "if", "len", "(", "shrinked_poly", "[", "0", "]", ")", "!=", "4", "or", "len", "(", "shrinked_poly", "[", "0", "]", ")", "==", "4", "and", "check_shrinked_poly", "(", "shrinked_poly", "[", "0", "]", ")", ":", "\n", "            ", "tmp_box", "=", "cv2", ".", "minAreaRect", "(", "shrinked_poly", "[", "0", "]", ")", "\n", "tmp_box", "=", "cv2", ".", "boxPoints", "(", "tmp_box", ")", "\n", "shrinked_poly", "=", "[", "tmp_box", "]", "\n", "", "bbox", "=", "sorted", "(", "shrinked_poly", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "new_bbox", "=", "[", "]", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", ":", "2", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", "2", ":", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "bbox", "=", "[", "new_bbox", "[", "0", "]", ",", "new_bbox", "[", "3", "]", ",", "new_bbox", "[", "2", "]", ",", "new_bbox", "[", "1", "]", "]", "\n", "bbox", "=", "np", ".", "int0", "(", "bbox", ")", "\n", "new_text_polys", ".", "append", "(", "bbox", ")", "\n", "\n", "# \u5236\u4f5cmask", "\n", "# rect = cv2.minAreaRect(shrinked_poly)", "\n", "# poly_h, poly_w = rect[1]", "\n", "\n", "# if min(poly_h, poly_w) < 10:", "\n", "#     cv2.fillPoly(training_mask, shrinked_poly, 0)", "\n", "\n", "# \u95ed\u8fd0\u7b97\u586b\u5145\u5185\u90e8\u5c0f\u6846", "\n", "# kernel = np.ones((3, 3), np.uint8)", "\n", "# score_map = cv2.morphologyEx(score_map, cv2.MORPH_CLOSE, kernel)", "\n", "\n", "", "return", "score_map", ",", "training_mask", ",", "new_text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.augmentation": [[98, 154], ["max", "min", "max", "min", "int", "int", "len", "random.random", "int", "int", "int", "int", "numpy.int0", "cv2.fillPoly", "int", "numpy.int0", "cv2.fillPoly", "int", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "augmentation", "(", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ",", "text_label", ",", "text_lengths", ",", "label_strs", ",", "epoch_count", ")", "->", "tuple", ":", "\n", "# the images are rescaled with ratio {0.5, 1.0, 2.0, 3.0} randomly", "\n", "# im, text_polys = data_aug.random_scale(im, text_polys, scales)", "\n", "# the images are horizontally fliped and rotated in range [\u221210\u25e6, 10\u25e6] randomly", "\n", "# if random.random() < 0.5:", "\n", "#     im, text_polys = data_aug.horizontal_flip(im, text_polys)", "\n", "# if random.random() < 1:", "\n", "#     im, text_polys = data_aug.random_rotate_img_bbox(im, text_polys, degrees)", "\n", "\n", "# 640 \u00d7 640 random samples are cropped from the transformed images", "\n", "# im, text_polys = data_aug.random_crop_img_bboxes(im, text_polys)", "\n", "\n", "# im, text_polys = data_aug.resize(im, text_polys, input_size, keep_ratio=False)", "\n", "# im, text_polys = data_aug.random_crop_image_pse(im, text_polys, input_size)", "\n", "\n", "    ", "left", "=", "max", "(", "int", "(", "np", ".", "min", "(", "text_polys", "[", ":", ",", ":", ",", "0", "]", ")", ")", "-", "64", ",", "0", ")", "\n", "right", "=", "min", "(", "int", "(", "np", ".", "max", "(", "text_polys", "[", ":", ",", ":", ",", "0", "]", ")", ")", "+", "64", ",", "im", ".", "shape", "[", "1", "]", ")", "\n", "top", "=", "max", "(", "int", "(", "np", ".", "min", "(", "text_polys", "[", ":", ",", ":", ",", "1", "]", ")", ")", "-", "64", ",", "0", ")", "\n", "bottom", "=", "min", "(", "int", "(", "np", ".", "max", "(", "text_polys", "[", ":", ",", ":", ",", "1", "]", ")", ")", "+", "64", ",", "im", ".", "shape", "[", "0", "]", ")", "\n", "\n", "im", "=", "im", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "-=", "top", "\n", "text_polys", "[", ":", ",", ":", ",", "0", "]", "-=", "left", "\n", "\n", "mid1", "=", "int", "(", "text_polys", ".", "shape", "[", "0", "]", "/", "2", "+", "0.5", ")", "\n", "mid2", "=", "int", "(", "text_polys", ".", "shape", "[", "0", "]", "/", "2", "+", "0.5", ")", "\n", "if", "len", "(", "text_polys", ")", ">=", "4", ":", "\n", "        ", "choice_pos", "=", "random", ".", "random", "(", ")", "\n", "# if epoch_count % 2 == 0:", "\n", "if", "choice_pos", "<", "0.5", ":", "\n", "            ", "fill_box", "=", "np", ".", "int0", "(", "[", "text_polys", "[", "mid1", "-", "1", ",", "3", "]", ",", "text_polys", "[", "mid1", "-", "1", ",", "2", "]", ",", "[", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "]", ",", "[", "0", ",", "im", ".", "shape", "[", "0", "]", "]", "]", ")", "\n", "cv2", ".", "fillPoly", "(", "im", ",", "[", "fill_box", "]", ",", "255", ")", "\n", "\n", "bottom", "=", "int", "(", "np", ".", "max", "(", "text_polys", "[", "mid1", "-", "1", ",", ":", ",", "1", "]", ")", ")", "\n", "\n", "im", "=", "im", "[", ":", "bottom", ",", ":", ",", ":", "]", "\n", "text_polys", "=", "text_polys", "[", ":", "mid1", "]", "\n", "text_label", "=", "text_label", "[", ":", "mid1", "]", "\n", "text_lengths", "=", "text_lengths", "[", ":", "mid1", "]", "\n", "label_strs", "=", "label_strs", "[", ":", "mid1", "]", "\n", "", "else", ":", "\n", "# cv2.fillPoly(im, [text_polys[mid2-1].astype(np.int)], 255)", "\n", "            ", "fill_box", "=", "np", ".", "int0", "(", "[", "[", "0", ",", "0", "]", ",", "[", "im", ".", "shape", "[", "1", "]", ",", "0", "]", ",", "text_polys", "[", "mid2", ",", "1", "]", ",", "text_polys", "[", "mid2", ",", "0", "]", "]", ")", "\n", "\n", "cv2", ".", "fillPoly", "(", "im", ",", "[", "fill_box", "]", ",", "255", ")", "\n", "top", "=", "int", "(", "np", ".", "min", "(", "text_polys", "[", "mid2", ",", ":", ",", "1", "]", ")", ")", "\n", "\n", "im", "=", "im", "[", "top", ":", ",", ":", ",", ":", "]", "\n", "text_polys", "=", "text_polys", "[", "mid2", ":", "]", "\n", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "-=", "top", "\n", "text_label", "=", "text_label", "[", "mid2", ":", "]", "\n", "text_lengths", "=", "text_lengths", "[", "mid2", ":", "]", "\n", "label_strs", "=", "label_strs", "[", "mid2", ":", "]", "\n", "\n", "", "", "return", "im", ",", "text_polys", ",", "text_label", ",", "text_lengths", ",", "label_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.augmentation1": [[156, 228], ["max", "min", "max", "min", "int", "int", "len", "random.random", "int", "int", "int", "int", "numpy.int0", "cv2.fillPoly", "int", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.max", "numpy.int0", "numpy.int0", "cv2.fillPoly", "int", "int", "numpy.int0", "cv2.fillPoly", "int", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "augmentation1", "(", "im", ":", "np", ".", "ndarray", ",", "text_polys", ":", "np", ".", "ndarray", ",", "text_label", ",", "text_lengths", ",", "label_strs", ",", "epoch_count", ")", "->", "tuple", ":", "\n", "\n", "# the images are rescaled with ratio {0.5, 1.0, 2.0, 3.0} randomly", "\n", "# im, text_polys = data_aug.random_scale(im, text_polys, scales)", "\n", "# the images are horizontally fliped and rotated in range [\u221210\u25e6, 10\u25e6] randomly", "\n", "# if random.random() < 0.5:", "\n", "#     im, text_polys = data_aug.horizontal_flip(im, text_polys)", "\n", "# if random.random() < 1:", "\n", "#     im, text_polys = data_aug.random_rotate_img_bbox(im, text_polys, degrees)", "\n", "\n", "# 640 \u00d7 640 random samples are cropped from the transformed images", "\n", "# im, text_polys = data_aug.random_crop_img_bboxes(im, text_polys)", "\n", "\n", "# im, text_polys = data_aug.resize(im, text_polys, input_size, keep_ratio=False)", "\n", "# im, text_polys = data_aug.random_crop_image_pse(im, text_polys, input_size)", "\n", "# print(im.shape)", "\n", "    ", "left", "=", "max", "(", "int", "(", "np", ".", "min", "(", "text_polys", "[", ":", ",", ":", ",", "0", "]", ")", ")", "-", "64", ",", "0", ")", "\n", "right", "=", "min", "(", "int", "(", "np", ".", "max", "(", "text_polys", "[", ":", ",", ":", ",", "0", "]", ")", ")", "+", "64", ",", "im", ".", "shape", "[", "1", "]", ")", "\n", "top", "=", "max", "(", "int", "(", "np", ".", "min", "(", "text_polys", "[", ":", ",", ":", ",", "1", "]", ")", ")", "-", "64", ",", "0", ")", "\n", "bottom", "=", "min", "(", "int", "(", "np", ".", "max", "(", "text_polys", "[", ":", ",", ":", ",", "1", "]", ")", ")", "+", "64", ",", "im", ".", "shape", "[", "0", "]", ")", "\n", "\n", "im", "=", "im", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "-=", "top", "\n", "text_polys", "[", ":", ",", ":", ",", "0", "]", "-=", "left", "\n", "\n", "mid1", "=", "int", "(", "text_polys", ".", "shape", "[", "0", "]", "/", "3", "+", "0.5", ")", "\n", "mid2", "=", "int", "(", "text_polys", ".", "shape", "[", "0", "]", "/", "3", "*", "2", "+", "0.5", ")", "\n", "if", "len", "(", "text_polys", ")", ">=", "3", ":", "\n", "        ", "choice_pos", "=", "random", ".", "random", "(", ")", "\n", "if", "epoch_count", "%", "3", "==", "0", ":", "\n", "            ", "fill_box", "=", "np", ".", "int0", "(", "[", "text_polys", "[", "mid1", "-", "1", ",", "3", "]", ",", "text_polys", "[", "mid1", "-", "1", ",", "2", "]", ",", "[", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "]", ",", "[", "0", ",", "im", ".", "shape", "[", "0", "]", "]", "]", ")", "\n", "cv2", ".", "fillPoly", "(", "im", ",", "[", "fill_box", "]", ",", "255", ")", "\n", "\n", "bottom", "=", "int", "(", "np", ".", "max", "(", "text_polys", "[", "mid1", "-", "1", ",", ":", ",", "1", "]", ")", ")", "\n", "\n", "im", "=", "im", "[", ":", "bottom", ",", ":", ",", ":", "]", "\n", "text_polys", "=", "text_polys", "[", ":", "mid1", "]", "\n", "text_label", "=", "text_label", "[", ":", "mid1", "]", "\n", "text_lengths", "=", "text_lengths", "[", ":", "mid1", "]", "\n", "label_strs", "=", "label_strs", "[", ":", "mid1", "]", "\n", "", "elif", "epoch_count", "%", "3", "==", "1", ":", "\n", "\n", "# cv2.fillPoly(im, text_polys[:mid1].astype(np.int), 255)", "\n", "# cv2.fillPoly(im, text_polys[mid2:].astype(np.int), 255)", "\n", "            ", "fill_box1", "=", "np", ".", "int0", "(", "[", "[", "0", ",", "0", "]", ",", "[", "im", ".", "shape", "[", "1", "]", ",", "0", "]", ",", "text_polys", "[", "mid1", ",", "1", "]", ",", "text_polys", "[", "mid1", ",", "0", "]", "]", ")", "\n", "fill_box2", "=", "np", ".", "int0", "(", "[", "text_polys", "[", "mid2", "-", "1", ",", "3", "]", ",", "text_polys", "[", "mid2", "-", "1", ",", "2", "]", ",", "[", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "]", ",", "[", "0", ",", "im", ".", "shape", "[", "0", "]", "]", "]", ")", "\n", "cv2", ".", "fillPoly", "(", "im", ",", "[", "fill_box1", ",", "fill_box2", "]", ",", "255", ")", "\n", "top", "=", "int", "(", "np", ".", "min", "(", "text_polys", "[", "mid1", ",", ":", ",", "1", "]", ")", ")", "\n", "bottom", "=", "int", "(", "np", ".", "max", "(", "text_polys", "[", "mid2", "-", "1", ",", ":", ",", "1", "]", ")", ")", "\n", "im", "=", "im", "[", "top", ":", "bottom", ",", ":", ",", ":", "]", "\n", "text_polys", "=", "text_polys", "[", "mid1", ":", "mid2", "]", "\n", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "-=", "top", "\n", "text_label", "=", "text_label", "[", "mid1", ":", "mid2", "]", "\n", "text_lengths", "=", "text_lengths", "[", "mid1", ":", "mid2", "]", "\n", "label_strs", "=", "label_strs", "[", "mid1", ":", "mid2", "]", "\n", "", "else", ":", "\n", "# cv2.fillPoly(im, [text_polys[mid2-1].astype(np.int)], 255)", "\n", "            ", "fill_box", "=", "np", ".", "int0", "(", "[", "[", "0", ",", "0", "]", ",", "[", "im", ".", "shape", "[", "1", "]", ",", "0", "]", ",", "text_polys", "[", "mid2", ",", "1", "]", ",", "text_polys", "[", "mid2", ",", "0", "]", "]", ")", "\n", "\n", "cv2", ".", "fillPoly", "(", "im", ",", "[", "fill_box", "]", ",", "255", ")", "\n", "top", "=", "int", "(", "np", ".", "min", "(", "text_polys", "[", "mid2", ",", ":", ",", "1", "]", ")", ")", "\n", "\n", "im", "=", "im", "[", "top", ":", ",", ":", ",", ":", "]", "\n", "text_polys", "=", "text_polys", "[", "mid2", ":", "]", "\n", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "-=", "top", "\n", "text_label", "=", "text_label", "[", "mid2", ":", "]", "\n", "text_lengths", "=", "text_lengths", "[", "mid2", ":", "]", "\n", "label_strs", "=", "label_strs", "[", "mid2", ":", "]", "\n", "\n", "", "", "return", "im", ",", "text_polys", ",", "text_label", ",", "text_lengths", ",", "label_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.PerspectiveTransform": [[230, 265], ["numpy.ones", "numpy.transpose", "numpy.array", "int", "int", "cv2.getPerspectiveTransform", "numpy.reshape", "numpy.dot", "numpy.reshape", "numpy.transpose", "cv2.warpPerspective", "random.random", "numpy.array", "random.randint", "random.randint", "numpy.array", "len", "len", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "function", ["None"], ["", "def", "PerspectiveTransform", "(", "img_np", ",", "text_polys", ",", "trans_rate_w", "=", "0.2", ",", "trans_rate_h", "=", "0.2", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "img_np", ".", "shape", "[", "0", "]", ",", "img_np", ".", "shape", "[", "1", "]", "\n", "tmp_polys", "=", "np", ".", "ones", "(", "(", "len", "(", "text_polys", ")", ",", "4", ",", "3", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "tmp_polys", "[", ":", ",", ":", ",", ":", "2", "]", "=", "text_polys", "\n", "tmp_polys", "=", "np", ".", "transpose", "(", "tmp_polys", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "origin_box", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "img_h", "]", ",", "[", "img_w", ",", "img_h", "]", ",", "[", "img_w", ",", "0", "]", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "trans_w_change", "=", "int", "(", "trans_rate_w", "*", "img_w", ")", "\n", "trans_h_change", "=", "int", "(", "trans_rate_h", "*", "img_h", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "trans_box", "=", "np", ".", "array", "(", "[", "\n", "[", "random", ".", "randint", "(", "0", ",", "trans_w_change", ")", ",", "random", ".", "randint", "(", "0", ",", "trans_h_change", ")", "]", ",", "\n", "[", "random", ".", "randint", "(", "0", ",", "trans_w_change", ")", ",", "random", ".", "randint", "(", "img_h", "-", "trans_h_change", ",", "img_h", ")", "]", ",", "\n", "[", "random", ".", "randint", "(", "img_w", "-", "trans_w_change", ",", "img_w", ")", ",", "random", ".", "randint", "(", "img_h", "-", "trans_h_change", ",", "img_h", ")", "]", ",", "\n", "[", "random", ".", "randint", "(", "img_w", "-", "trans_w_change", ",", "img_w", ")", ",", "random", ".", "randint", "(", "0", ",", "trans_h_change", ")", "]", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "", "else", ":", "\n", "        ", "randomx1", "=", "random", ".", "randint", "(", "0", ",", "trans_w_change", "*", "2", ")", "\n", "randomx2", "=", "random", ".", "randint", "(", "img_w", "-", "trans_w_change", "*", "2", ",", "img_w", ")", "\n", "trans_box", "=", "np", ".", "array", "(", "[", "\n", "[", "randomx1", ",", "random", ".", "randint", "(", "0", ",", "trans_h_change", ")", "]", ",", "\n", "[", "randomx1", ",", "random", ".", "randint", "(", "img_h", "-", "trans_h_change", ",", "img_h", ")", "]", ",", "\n", "[", "randomx2", ",", "random", ".", "randint", "(", "img_h", "-", "trans_h_change", ",", "img_h", ")", "]", ",", "\n", "[", "randomx2", ",", "random", ".", "randint", "(", "0", ",", "trans_h_change", ")", "]", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "", "M", "=", "cv2", ".", "getPerspectiveTransform", "(", "origin_box", ",", "trans_box", ")", "\n", "tmp_polys", "=", "np", ".", "reshape", "(", "tmp_polys", ",", "(", "3", ",", "-", "1", ")", ")", "\n", "tmp_polys", "=", "np", ".", "dot", "(", "M", ",", "tmp_polys", ")", "\n", "tmp_polys", "=", "np", ".", "reshape", "(", "tmp_polys", ",", "(", "3", ",", "len", "(", "text_polys", ")", ",", "-", "1", ")", ")", "\n", "tmp_polys", "=", "np", ".", "transpose", "(", "tmp_polys", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "text_polys", "[", ":", ",", ":", ",", "0", "]", "=", "tmp_polys", "[", ":", ",", ":", ",", "0", "]", "/", "tmp_polys", "[", ":", ",", ":", ",", "2", "]", "\n", "text_polys", "[", ":", ",", ":", ",", "1", "]", "=", "tmp_polys", "[", ":", ",", ":", ",", "1", "]", "/", "tmp_polys", "[", ":", ",", ":", ",", "2", "]", "\n", "\n", "trans_img", "=", "cv2", ".", "warpPerspective", "(", "img_np", ",", "M", ",", "(", "img_w", ",", "img_h", ")", ",", "borderValue", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "return", "trans_img", ",", "text_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.image_label": [[267, 330], ["numpy.array", "cv2.imread", "cv2.cvtColor", "data_utils_kernel_box.check_and_validate_polys", "max", "numpy.ones", "range", "numpy.array", "data_aug.random_crop_author", "cv2.resize", "cv2.resize", "data_utils_kernel_box.augmentation", "data_utils_kernel_box.PerspectiveTransform", "data_utils_kernel_box.generate_rbox", "np.array.append", "imgs[].transpose", "len", "random.random", "random.uniform", "cv2.resize", "np.array.transpose", "random.random"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.check_and_validate_polys", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.random_crop_author", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.augmentation", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.PerspectiveTransform", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.data_utils_kernel_box.generate_rbox", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.augment.DataAugment.resize"], ["", "def", "image_label", "(", "im_fn", ":", "str", ",", "text_polys", ":", "np", ".", "ndarray", ",", "text_label", ":", "list", ",", "text_lengths", ",", "label_strs", ",", "n", ":", "int", ",", "m", ":", "float", ",", "input_size", ":", "int", ",", "\n", "defrees", ":", "int", "=", "10", ",", "\n", "scales", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "[", "0.5", ",", "1.5", "]", ")", ",", "is_train", "=", "True", ",", "epoch_count", "=", "0", ")", "->", "tuple", ":", "\n", "    ", "'''\n    get image's corresponding matrix and ground truth\n    return\n    images [512, 512, 3]\n    score  [128, 128, 1]\n    geo    [128, 128, 5]\n    mask   [128, 128, 1]\n    '''", "\n", "\n", "im", "=", "cv2", ".", "imread", "(", "im_fn", ")", "\n", "\n", "# print(im_fn)", "\n", "im", "=", "cv2", ".", "cvtColor", "(", "im", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "# \u68c0\u67e5\u8d8a\u754c", "\n", "\n", "text_polys", "=", "check_and_validate_polys", "(", "text_polys", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "short_edge", "=", "max", "(", "h", ",", "w", ")", "\n", "# short_edge=w", "\n", "if", "short_edge", ">", "input_size", ":", "\n", "# \u4fdd\u8bc1\u77ed\u8fb9 >= inputsize", "\n", "        ", "scale", "=", "input_size", "/", "short_edge", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "text_polys", "*=", "scale", "\n", "", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "if", "h", ">", "1200", "and", "is_train", ":", "\n", "# \u4fdd\u8bc1\u77ed\u8fb9 >= inputsize", "\n", "        ", "scale", "=", "1200", "/", "h", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "text_polys", "*=", "scale", "\n", "\n", "", "if", "is_train", "and", "len", "(", "label_strs", ")", ">=", "14", "and", "'HWDB'", "not", "in", "im_fn", ":", "\n", "        ", "im", ",", "text_polys", ",", "text_label", ",", "text_lengths", ",", "label_strs", "=", "augmentation", "(", "im", ",", "text_polys", ",", "\n", "text_label", ",", "\n", "text_lengths", ",", "\n", "label_strs", ",", "\n", "epoch_count", "=", "epoch_count", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", "and", "is_train", ":", "\n", "        ", "im", ",", "text_polys", "=", "PerspectiveTransform", "(", "im", ",", "text_polys", ")", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "0.7", "and", "is_train", ":", "\n", "        ", "scale", "=", "random", ".", "uniform", "(", "0.7", ",", "1", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "text_polys", "*=", "scale", "\n", "\n", "", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "training_mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "score_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "# s1->sn,\u7531\u5c0f\u5230\u5927", "\n", "        ", "score_map", ",", "training_mask", ",", "new_text_polys", "=", "generate_rbox", "(", "(", "h", ",", "w", ")", ",", "text_polys", ",", "text_label", ",", "training_mask", ",", "i", ",", "n", ",", "m", ")", "\n", "score_maps", ".", "append", "(", "score_map", ")", "\n", "if", "i", "==", "n", ":", "\n", "            ", "text_polys", "=", "new_text_polys", "\n", "", "", "score_maps", "=", "np", ".", "array", "(", "score_maps", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "imgs", "=", "data_aug", ".", "random_crop_author", "(", "[", "im", ",", "score_maps", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ",", "training_mask", "]", ",", "(", "input_size", ",", "input_size", ")", ")", "\n", "return", "imgs", "[", "0", "]", ",", "imgs", "[", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ",", "imgs", "[", "2", "]", ",", "text_polys", ",", "text_label", ",", "text_lengths", ",", "label_strs", "# im,score_maps,training_mask#", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dataset.decode_page_with_box.read_from_gnt_dir": [[9, 101], ["tqdm.tqdm", "enumerate", "tqdm.tqdm.close", "open", "numpy.fromfile", "range", "min", "cv2.imwrite", "os.listdir", "tqdm.tqdm.update", "file_name.endswith", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.ones", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile().reshape", "cv2.findContours", "numpy.array", "cv2.minAreaRect", "cv2.boxPoints", "sorted", "sorted", "sorted", "numpy.int0", "open.write", "len", "os.path.join", "chr", "chr", "chr", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "max", "os.listdir", "open", "decode_page_with_box.read_from_gnt_dir.one_file"], "function", ["None"], ["def", "read_from_gnt_dir", "(", "gnt_dir", ")", ":", "\n", "    ", "global", "count", "\n", "def", "one_file", "(", "f", ")", ":", "\n", "\n", "        ", "laber_writer", "=", "open", "(", "'./gt/gt_{}.txt'", ".", "format", "(", "count", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "header_size", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "header", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint8'", ",", "count", "=", "header_size", "-", "4", ")", "\n", "formatcode", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", ":", "8", "]", "]", ")", "\n", "Illustration_size", "=", "header_size", "-", "36", "\n", "Illustration", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", "8", ":", "Illustration_size", "+", "8", "]", "]", ")", "\n", "Code_type", "=", "\"\"", ".", "join", "(", "[", "chr", "(", "c", ")", "for", "c", "in", "header", "[", "Illustration_size", "+", "8", ":", "Illustration_size", "+", "28", "]", "]", ")", "\n", "Code_length", "=", "header", "[", "Illustration_size", "+", "28", "]", "+", "header", "[", "Illustration_size", "+", "29", "]", "<<", "4", "\n", "Bits_per_pixel", "=", "header", "[", "Illustration_size", "+", "30", "]", "+", "header", "[", "Illustration_size", "+", "31", "]", "<<", "4", "\n", "# print(header_size, formatcode, Illustration)", "\n", "# print(Code_type, Code_length, Bits_per_pixel)", "\n", "# print()", "\n", "Image_height", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Image_width", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Line_number", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "page_np", "=", "np", ".", "ones", "(", "(", "Image_height", ",", "Image_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "page_label", "=", "''", "\n", "# print(Image_height, Image_width, Line_number)", "\n", "Y1", "=", "0", "\n", "Y2", "=", "0", "\n", "for", "ln", "in", "range", "(", "Line_number", ")", ":", "\n", "            ", "Char_number", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Label", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint16'", ",", "count", "=", "Char_number", ")", "\n", "Label_str", "=", "\"\"", ".", "join", "(", "[", "struct", ".", "pack", "(", "'H'", ",", "c", ")", ".", "decode", "(", "'GBK'", ",", "errors", "=", "'ignore'", ")", "for", "c", "in", "Label", "]", ")", "\n", "# print(Label_str, Char_number)", "\n", "page_label", "+=", "Label_str", "\n", "Top_left", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "2", ")", "\n", "Top", ",", "Left", "=", "Top_left", "[", "0", "]", ",", "Top_left", "[", "1", "]", "\n", "if", "Left", ">", "Image_width", ":", "\n", "                ", "Left", "=", "16", "\n", "", "Height", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Width", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint32'", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "Bitmap", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "'uint8'", ",", "count", "=", "Height", "*", "Width", ")", ".", "reshape", "(", "[", "Height", ",", "Width", "]", ")", "\n", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "\n", "255", "-", "Bitmap", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "\n", "all_contours", "=", "[", "]", "\n", "for", "contour", "in", "contours", ":", "\n", "                ", "for", "points", "in", "contour", ":", "\n", "                    ", "all_contours", ".", "append", "(", "points", ")", "\n", "\n", "", "", "all_contours", "=", "np", ".", "array", "(", "all_contours", ")", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "all_contours", ")", "\n", "bbox", "=", "cv2", ".", "boxPoints", "(", "rect", ")", "\n", "bbox", "=", "sorted", "(", "bbox", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "new_bbox", "=", "[", "]", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", ":", "2", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "new_bbox", "+=", "sorted", "(", "bbox", "[", "2", ":", "]", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "bbox", "=", "[", "new_bbox", "[", "0", "]", ",", "new_bbox", "[", "3", "]", ",", "new_bbox", "[", "2", "]", ",", "new_bbox", "[", "1", "]", "]", "\n", "bbox", "=", "np", ".", "int0", "(", "bbox", ")", "\n", "\n", "bbox", "[", ":", ",", "0", "]", "+=", "Left", "\n", "bbox", "[", ":", ",", "1", "]", "+=", "Top", "\n", "\n", "origin_sub", "=", "page_np", "[", "Top", ":", "Top", "+", "Height", ",", "Left", ":", "Left", "+", "Width", "]", "\n", "\n", "page_np", "[", "Top", ":", "Top", "+", "Height", ",", "Left", ":", "Left", "+", "Width", "]", "=", "(", "origin_sub", ">", "Bitmap", ")", "*", "Bitmap", "+", "(", "origin_sub", "<=", "Bitmap", ")", "*", "origin_sub", "\n", "\n", "if", "ln", "==", "0", ":", "\n", "                ", "Y1", "=", "max", "(", "Top", "-", "16", ",", "0", ")", "\n", "", "if", "ln", "==", "Line_number", "-", "1", ":", "\n", "                ", "Y2", "=", "Top", "+", "Height", "\n", "\n", "# cv2.drawContours(page_np, [bbox], -1, 128, 2)", "\n", "", "bbox", "[", ":", ",", "1", "]", "-=", "Y1", "\n", "# cv2.imshow('1', page_np[Y1:,:])", "\n", "# cv2.waitKey()", "\n", "laber_writer", ".", "write", "(", "'{} {} {} {} {} {} {} {} {}\\n'", ".", "format", "(", "bbox", "[", "0", "]", "[", "0", "]", ",", "bbox", "[", "0", "]", "[", "1", "]", ",", "\n", "bbox", "[", "1", "]", "[", "0", "]", ",", "bbox", "[", "1", "]", "[", "1", "]", ",", "\n", "bbox", "[", "2", "]", "[", "0", "]", ",", "bbox", "[", "2", "]", "[", "1", "]", ",", "\n", "bbox", "[", "3", "]", "[", "0", "]", ",", "bbox", "[", "3", "]", "[", "1", "]", ",", "\n", "Label_str", ".", "replace", "(", "'\\x00'", ",", "''", ")", ")", ")", "\n", "", "Y2", "=", "min", "(", "Image_height", ",", "Y2", "+", "16", ")", "\n", "cv2", ".", "imwrite", "(", "'./page_imgs/{}.png'", ".", "format", "(", "count", ")", ",", "page_np", "[", "Y1", ":", "Y2", ",", ":", "]", ")", "\n", "\n", "\n", "# print(Top_left,Height,Width)", "\n", "\n", "", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "os", ".", "listdir", "(", "gnt_dir", ")", ")", ")", "\n", "for", "file_i", ",", "file_name", "in", "enumerate", "(", "os", ".", "listdir", "(", "gnt_dir", ")", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "file_name", ".", "endswith", "(", "'.dgrl'", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "gnt_dir", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "one_file", "(", "f", ")", "\n", "", "count", "=", "count", "+", "1", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_kernels.DICE_loss.__init__": [[7, 9], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DICE_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_kernels.DICE_loss.forward": [[10, 22], ["torch.interpolate", "torch.interpolate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "loss_kernels.mean.DICE_loss.dice_loss", "loss_kernels.mean.mean.mean", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_kernels.DICE_loss.dice_loss"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "labels", ")", ":", "\n", "\n", "        ", "labels", "=", "F", ".", "interpolate", "(", "torch", ".", "unsqueeze", "(", "labels", ",", "0", ")", ",", "outputs", ".", "shape", "[", "1", ":", "]", ")", "\n", "labels", "=", "torch", ".", "squeeze", "(", "labels", ",", "0", ")", "\n", "\n", "kernels", "=", "outputs", "\n", "\n", "gt_kernels", "=", "labels", "\n", "\n", "loss_kernels", "=", "self", ".", "dice_loss", "(", "kernels", ",", "gt_kernels", ")", "\n", "loss_kernels", "=", "loss_kernels", ".", "mean", "(", ")", "\n", "return", "loss_kernels", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_kernels.DICE_loss.dice_loss": [[23, 34], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "input.contiguous().view.contiguous().view.contiguous().view", "target.contiguous().view.contiguous().view.contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "input.contiguous().view.contiguous().view.contiguous", "input.contiguous().view.contiguous().view.size", "target.contiguous().view.contiguous().view.contiguous", "target.contiguous().view.contiguous().view.size"], "methods", ["None"], ["", "def", "dice_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "input", "=", "torch", ".", "sigmoid", "(", "input", ")", "\n", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "input", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "target", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "a", "=", "torch", ".", "sum", "(", "input", "*", "target", ",", "1", ")", "\n", "b", "=", "torch", ".", "sum", "(", "input", "*", "input", ",", "1", ")", "+", "0.001", "\n", "c", "=", "torch", ".", "sum", "(", "target", "*", "target", ",", "1", ")", "+", "0.001", "\n", "d", "=", "(", "2", "*", "a", ")", "/", "(", "b", "+", "c", ")", "\n", "return", "1", "-", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_kernels.DICE_loss.ohem_single": [[35, 60], ["int", "int", "numpy.sort", "selected_mask.reshape().astype.reshape().astype.reshape().astype", "int", "int", "selected_mask.reshape().astype.reshape().astype.reshape().astype", "numpy.sum", "min", "selected_mask.reshape().astype.reshape().astype.reshape().astype", "numpy.sum", "numpy.sum", "selected_mask.reshape().astype.reshape().astype.reshape", "selected_mask.reshape().astype.reshape().astype.reshape", "selected_mask.reshape().astype.reshape().astype.reshape"], "methods", ["None"], ["", "def", "ohem_single", "(", "self", ",", "score", ",", "gt_text", ",", "training_mask", ")", ":", "\n", "        ", "pos_num", "=", "(", "int", ")", "(", "np", ".", "sum", "(", "gt_text", ">", "0.5", ")", ")", "-", "(", "int", ")", "(", "np", ".", "sum", "(", "(", "gt_text", ">", "0.5", ")", "&", "(", "training_mask", "<=", "0.5", ")", ")", ")", "\n", "\n", "if", "pos_num", "==", "0", ":", "\n", "# selected_mask = gt_text.copy() * 0 # may be not good", "\n", "            ", "selected_mask", "=", "training_mask", "\n", "selected_mask", "=", "selected_mask", ".", "reshape", "(", "1", ",", "selected_mask", ".", "shape", "[", "0", "]", ",", "selected_mask", ".", "shape", "[", "1", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "selected_mask", "\n", "\n", "", "neg_num", "=", "(", "int", ")", "(", "np", ".", "sum", "(", "gt_text", "<=", "0.5", ")", ")", "\n", "neg_num", "=", "(", "int", ")", "(", "min", "(", "pos_num", "*", "3", ",", "neg_num", ")", ")", "\n", "\n", "if", "neg_num", "==", "0", ":", "\n", "            ", "selected_mask", "=", "training_mask", "\n", "selected_mask", "=", "selected_mask", ".", "reshape", "(", "1", ",", "selected_mask", ".", "shape", "[", "0", "]", ",", "selected_mask", ".", "shape", "[", "1", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "selected_mask", "\n", "\n", "", "neg_score", "=", "score", "[", "gt_text", "<=", "0.5", "]", "\n", "\n", "neg_score_sorted", "=", "np", ".", "sort", "(", "-", "neg_score", ")", "\n", "threshold", "=", "-", "neg_score_sorted", "[", "neg_num", "-", "1", "]", "\n", "\n", "selected_mask", "=", "(", "(", "score", ">=", "threshold", ")", "|", "(", "gt_text", ">", "0.5", ")", ")", "&", "(", "training_mask", ">", "0.5", ")", "\n", "selected_mask", "=", "selected_mask", ".", "reshape", "(", "1", ",", "selected_mask", ".", "shape", "[", "0", "]", ",", "selected_mask", ".", "shape", "[", "1", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "selected_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_kernels.DICE_loss.ohem_batch": [[61, 74], ["scores.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "gt_texts.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "training_masks.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "range", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float.append", "torch.from_numpy().float.append", "scores.data.cpu().numpy.data.cpu().numpy.data.cpu", "gt_texts.data.cpu().numpy.data.cpu().numpy.data.cpu", "training_masks.data.cpu().numpy.data.cpu().numpy.data.cpu", "loss_kernels.DICE_loss.ohem_single", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_kernels.DICE_loss.ohem_single"], ["", "def", "ohem_batch", "(", "self", ",", "scores", ",", "gt_texts", ",", "training_masks", ")", ":", "\n", "        ", "scores", "=", "scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_texts", "=", "gt_texts", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "training_masks", "=", "training_masks", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "selected_masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "selected_masks", ".", "append", "(", "self", ".", "ohem_single", "(", "scores", "[", "i", ",", ":", ",", ":", "]", ",", "gt_texts", "[", "i", ",", ":", ",", ":", "]", ",", "training_masks", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "\n", "", "selected_masks", "=", "np", ".", "concatenate", "(", "selected_masks", ",", "0", ")", "\n", "selected_masks", "=", "torch", ".", "from_numpy", "(", "selected_masks", ")", ".", "float", "(", ")", "\n", "\n", "return", "selected_masks", "\n", "", "", ""]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.ctc_loss": [[225, 270], ["range", "torch.mean", "torch.mean", "len", "torch.full().to", "torch.full().to", "prediction_char.permute.log_softmax", "prediction_char.permute.permute", "criterion", "torch.isnan", "torch.isnan", "prediction_char.permute.permute", "torch.mean.append", "torch.stack", "torch.stack", "print", "print", "loss_ctc.ctc_acc", "loss_ctc.ctc_acc", "torch.full", "torch.full", "len"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.ctc_acc", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.ctc_acc"], ["def", "ctc_loss", "(", "criterion", ",", "prediction_chars", ",", "labels", ",", "label_lengths", ",", "sub_img_nums", ",", "char_set", ",", "is_print", "=", "False", ")", ":", "\n", "\n", "    ", "cost_chars", "=", "[", "]", "\n", "a_CR_correct_chars", ",", "a_AR_correct_chars", ",", "a_all_chars", "=", "0", ",", "0", ",", "0", "\n", "sub_count", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "        ", "label", "=", "labels", "[", "i", "]", "\n", "label_length", "=", "label_lengths", "[", "i", "]", "\n", "prediction_char", "=", "prediction_chars", "[", "sub_count", ":", "sub_count", "+", "sub_img_nums", "[", "i", "]", "]", "\n", "sub_count", "+=", "sub_img_nums", "[", "i", "]", "\n", "# print(prediction_char.shape)", "\n", "# print(label_length)", "\n", "\n", "input_length", "=", "torch", ".", "full", "(", "size", "=", "(", "len", "(", "prediction_char", ")", ",", ")", ",", "fill_value", "=", "prediction_char", ".", "shape", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "\n", "prediction_char", ".", "device", ")", "\n", "prediction_char", "=", "prediction_char", ".", "log_softmax", "(", "-", "1", ")", "\n", "prediction_char", "=", "prediction_char", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "# print(prediction_char.shape,label_length)", "\n", "\n", "cost_char", "=", "criterion", "(", "prediction_char", ",", "label", ",", "input_length", ",", "label_length", ")", "\n", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "if", "torch", ".", "isnan", "(", "cost_char", ")", ":", "\n", "            ", "print", "(", "prediction_char", ")", "\n", "print", "(", "label", ".", "shape", ")", "\n", "\n", "raise", "\n", "", "prediction_char", "=", "prediction_char", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "if", "is_print", ":", "\n", "            ", "acc", "=", "ctc_acc", "(", "char_set", ",", "prediction_char", ",", "label", ",", "label_length", ",", "blank", "=", "0", ",", "p", "=", "True", ",", "bean_search", "=", "False", ")", "\n", "# print(acc)", "\n", "", "else", ":", "\n", "            ", "acc", "=", "ctc_acc", "(", "char_set", ",", "prediction_char", ",", "label", ",", "label_length", ",", "blank", "=", "0", ",", "p", "=", "False", ",", "bean_search", "=", "False", ")", "\n", "", "CR_correct_chars", ",", "AR_correct_chars", ",", "all_chars", "=", "acc", "[", "1", "]", "\n", "a_CR_correct_chars", "+=", "CR_correct_chars", "\n", "a_AR_correct_chars", "+=", "AR_correct_chars", "\n", "a_all_chars", "+=", "all_chars", "\n", "cost_chars", ".", "append", "(", "cost_char", ")", "\n", "", "cost_chars", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "cost_chars", ")", ")", "\n", "return", "cost_chars", ",", "a_CR_correct_chars", ",", "a_AR_correct_chars", ",", "a_all_chars", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.remove_blank": [[271, 285], ["new_labels.append"], "function", ["None"], ["", "def", "remove_blank", "(", "labels", ",", "blank", "=", "0", ")", ":", "\n", "    ", "new_labels", "=", "[", "]", "\n", "\n", "# combine duplicate", "\n", "previous", "=", "None", "\n", "for", "l", "in", "labels", ":", "\n", "        ", "if", "l", "!=", "previous", ":", "\n", "            ", "new_labels", ".", "append", "(", "l", ")", "\n", "previous", "=", "l", "\n", "\n", "# remove blank", "\n", "", "", "new_labels", "=", "[", "l", "for", "l", "in", "new_labels", "if", "l", "!=", "blank", "]", "\n", "\n", "return", "new_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.partition_arg_topK": [[287, 304], ["numpy.argpartition", "numpy.arange", "numpy.argsort", "numpy.argsort", "numpy.arange"], "function", ["None"], ["", "def", "partition_arg_topK", "(", "matrix", ",", "K", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    perform topK based on np.argpartition\n    :param matrix: to be sorted\n    :param K: select and sort the top K items\n    :param axis: 0 or 1. dimension to be sorted.\n    :return:\n    \"\"\"", "\n", "a_part", "=", "np", ".", "argpartition", "(", "matrix", ",", "K", ",", "axis", "=", "axis", ")", "\n", "if", "axis", "==", "0", ":", "\n", "        ", "row_index", "=", "np", ".", "arange", "(", "matrix", ".", "shape", "[", "1", "-", "axis", "]", ")", "\n", "a_sec_argsort_K", "=", "np", ".", "argsort", "(", "matrix", "[", "a_part", "[", "0", ":", "K", ",", ":", "]", ",", "row_index", "]", ",", "axis", "=", "axis", ")", "\n", "return", "a_part", "[", "0", ":", "K", ",", ":", "]", "[", "a_sec_argsort_K", ",", "row_index", "]", "\n", "", "else", ":", "\n", "        ", "column_index", "=", "np", ".", "arange", "(", "matrix", ".", "shape", "[", "1", "-", "axis", "]", ")", "[", ":", ",", "None", "]", "\n", "a_sec_argsort_K", "=", "np", ".", "argsort", "(", "matrix", "[", "column_index", ",", "a_part", "[", ":", ",", "0", ":", "K", "]", "]", ",", "axis", "=", "axis", ")", "\n", "return", "a_part", "[", ":", ",", "0", ":", "K", "]", "[", "column_index", ",", "a_sec_argsort_K", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.beam_decode_lite": [[305, 326], ["loss_ctc.partition_arg_topK", "range", "new_beam.sort", "range", "new_beam.append"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.partition_arg_topK"], ["", "", "def", "beam_decode_lite", "(", "y", ",", "beam_size", "=", "10", ")", ":", "\n", "    ", "T", ",", "V", "=", "y", ".", "shape", "\n", "log_y", "=", "y", "\n", "top5", "=", "partition_arg_topK", "(", "-", "y", ",", "beam_size", ",", "1", ")", "\n", "\n", "beam", "=", "[", "(", "[", "]", ",", "0", ")", "]", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "# for every timestep", "\n", "        ", "new_beam", "=", "[", "]", "\n", "for", "prefix", ",", "score", "in", "beam", ":", "\n", "            ", "for", "i", "in", "range", "(", "beam_size", ")", ":", "# for every state", "\n", "                ", "new_prefix", "=", "prefix", "+", "[", "top5", "[", "t", "]", "[", "i", "]", "]", "\n", "new_score", "=", "score", "+", "log_y", "[", "t", ",", "top5", "[", "t", "]", "[", "i", "]", "]", "\n", "\n", "new_beam", ".", "append", "(", "(", "new_prefix", ",", "new_score", ")", ")", "\n", "\n", "# top beam_size", "\n", "", "", "new_beam", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "beam", "=", "new_beam", "[", ":", "beam_size", "]", "\n", "\n", "", "return", "beam", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.ctc_acc": [[328, 423], ["torch.argmax", "torch.argmax", "enumerate", "loss_ctc.remove_blank", "sub_label_pred.append", "max", "max", "difflib.SequenceMatcher().get_opcodes", "difflib.SequenceMatcher().get_opcodes", "max", "pred_softmax.cpu().numpy", "len", "len", "len", "len", "len", "len", "len", "len", "print", "print", "difflib.SequenceMatcher", "difflib.SequenceMatcher", "max", "max", "loss_ctc.beam_decode_lite", "label_pred.append", "print", "pred_softmax.cpu", "len", "len", "max", "max", "max", "pred.cpu().detach().numpy", "loss_ctc.remove_blank", "sub_label_pred.append", "print", "max", "len", "len", "len", "len", "pred.cpu().detach", "pred.cpu"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.remove_blank", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.beam_decode_lite", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.loss_ctc.remove_blank"], ["", "def", "ctc_acc", "(", "char_set", ",", "preds", ",", "labels", ",", "label_length", ",", "blank", "=", "0", ",", "p", "=", "True", ",", "bean_search", "=", "False", ")", ":", "\n", "    ", "correct_words", "=", "0", "\n", "CR_correct_chars", "=", "0", "\n", "AR_correct_chars", "=", "0", "\n", "all_chars", "=", "0", "\n", "label_pred", "=", "[", "]", "\n", "preds_softmax", "=", "torch", ".", "argmax", "(", "preds", ",", "-", "1", ")", "\n", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "sub_label_pred", "=", "[", "]", "\n", "pred_softmax", "=", "preds_softmax", "[", "i", "]", "\n", "\n", "pred_s", "=", "remove_blank", "(", "pred_softmax", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "label", "=", "label", "[", ":", "label_length", "[", "i", "]", "]", "\n", "\n", "pred_str", "=", "''", "\n", "label_str", "=", "''", "\n", "\n", "for", "ci", "in", "pred_s", ":", "\n", "            ", "if", "ci", "!=", "blank", "and", "ci", "<", "len", "(", "char_set", ")", ":", "\n", "                ", "pred_str", "+=", "char_set", "[", "ci", "]", "\n", "", "", "for", "ci", "in", "label", ":", "\n", "            ", "if", "ci", "!=", "blank", "and", "ci", "<", "len", "(", "char_set", ")", ":", "\n", "                ", "label_str", "+=", "char_set", "[", "ci", "]", "\n", "# CR_correct_char = len(label_str)", "\n", "# AR_correct_char = len(label_str)", "\n", "", "", "sub_label_pred", ".", "append", "(", "label_str", ")", "\n", "if", "len", "(", "label_str", ")", "==", "len", "(", "pred_str", ")", ":", "\n", "            ", "if", "label_str", "==", "pred_str", ":", "\n", "                ", "correct_words", "+=", "1", "\n", "\n", "", "", "CR_correct_char", "=", "max", "(", "len", "(", "label_str", ")", ",", "len", "(", "pred_str", ")", ")", "\n", "AR_correct_char", "=", "max", "(", "len", "(", "label_str", ")", ",", "len", "(", "pred_str", ")", ")", "\n", "# CR_correct_char = len(label_str)", "\n", "# AR_correct_char = len(label_str)", "\n", "\n", "for", "block", "in", "difflib", ".", "SequenceMatcher", "(", "None", ",", "label_str", ",", "pred_str", ")", ".", "get_opcodes", "(", ")", ":", "\n", "            ", "label_m", "=", "block", "[", "2", "]", "-", "block", "[", "1", "]", "\n", "pred_m", "=", "block", "[", "4", "]", "-", "block", "[", "3", "]", "\n", "if", "block", "[", "0", "]", "==", "'delete'", ":", "\n", "                ", "CR_correct_char", "-=", "max", "(", "label_m", ",", "pred_m", ")", "\n", "AR_correct_char", "-=", "max", "(", "label_m", ",", "pred_m", ")", "\n", "\n", "", "elif", "block", "[", "0", "]", "==", "'insert'", ":", "\n", "                ", "AR_correct_char", "-=", "max", "(", "label_m", ",", "pred_m", ")", "\n", "\n", "", "elif", "block", "[", "0", "]", "==", "'replace'", ":", "\n", "\n", "                ", "CR_correct_char", "-=", "label_m", "\n", "\n", "\n", "\n", "\n", "AR_correct_char", "-=", "max", "(", "pred_m", ",", "label_m", ")", "\n", "\n", "# if block[0] in ['delete', 'replace', 'insert']:", "\n", "#     if block[0] == 'replace':", "\n", "#", "\n", "#         CR_correct_char -= max(block[2] - block[1], block[4] - block[3])", "\n", "#     else:", "\n", "#         CR_correct_char -= block[2] - block[1]", "\n", "#     if block[0] == 'insert':", "\n", "#         AR_correct_char -= block[4] - block[3]", "\n", "#     else:", "\n", "#         if block[0] == 'replace':", "\n", "#             AR_correct_char -= max(block[2] - block[1], block[4] - block[3])", "\n", "#         else:", "\n", "#             AR_correct_char -= block[2] - block[1]", "\n", "\n", "", "", "CR_correct_chars", "+=", "CR_correct_char", "\n", "AR_correct_chars", "+=", "AR_correct_char", "\n", "\n", "all_chars", "+=", "max", "(", "len", "(", "label_str", ")", ",", "len", "(", "pred_str", ")", ")", "\n", "# all_chars+=len(label_str)", "\n", "if", "p", ":", "\n", "            ", "pred", "=", "preds", "[", "i", "]", "\n", "\n", "print", "(", "label_str", ",", "AR_correct_char", "/", "max", "(", "len", "(", "label_str", ")", ",", "len", "(", "pred_str", ")", ",", "1", ")", ",", "CR_correct_char", "/", "max", "(", "len", "(", "label_str", ")", ",", "len", "(", "pred_str", ")", ",", "1", ")", ")", "\n", "if", "bean_search", ":", "\n", "                ", "beans", "=", "beam_decode_lite", "(", "pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "beam_size", "=", "5", ")", "\n", "for", "bean", ",", "score", "in", "beans", ":", "\n", "                    ", "bean", "=", "remove_blank", "(", "bean", ")", "\n", "bean_str", "=", "''", "\n", "for", "strii", "in", "bean", ":", "\n", "                        ", "try", ":", "\n", "                            ", "bean_str", "+=", "char_set", "[", "strii", "]", "\n", "", "except", ":", "\n", "                            ", "pass", "\n", "", "", "sub_label_pred", ".", "append", "(", "[", "bean_str", ",", "score", "]", ")", "\n", "print", "(", "bean_str", ",", "score", ")", "\n", "", "label_pred", ".", "append", "(", "sub_label_pred", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "pred_str", ")", "\n", "", "print", "(", ")", "\n", "", "", "return", "correct_words", "/", "labels", ".", "shape", "[", "0", "]", ",", "[", "CR_correct_chars", ",", "AR_correct_chars", ",", "all_chars", "]", ",", "label_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.model_with_TCN_big_new_one_batch_hwdb.Model.__init__": [[67, 81], ["torch.nn.Module.__init__", "models.dect.PANnet", "models.connect_layer_new_one_batch_hwdb.Connect", "models.reco.DenseNet_with_TCN_big"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "line_height", "=", "32", ",", "num_classes", "=", "3000", ",", "is_english", "=", "False", ",", "is_TCN", "=", "True", ",", "is_transformer", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "PANnet_config", "=", "{", "\n", "'backbone'", ":", "'resnet34'", ",", "\n", "'fpem_repeat'", ":", "4", ",", "# fpem\u6a21\u5757\u91cd\u590d\u7684\u6b21\u6570", "\n", "'pretrained'", ":", "False", ",", "# backbone \u662f\u5426\u4f7f\u7528imagesnet\u7684\u9884\u8bad\u7ec3\u6a21\u578b", "\n", "'result_num'", ":", "7", ",", "\n", "'segmentation_head'", ":", "'FPEM_FFM'", "# \u5206\u5272\u5934\uff0cFPN or FPEM_FFM", "\n", "}", "\n", "self", ".", "PAN_layer", "=", "PANnet", "(", "model_config", "=", "PANnet_config", ")", "\n", "self", ".", "Connect_layer", "=", "Connect", "(", "line_height", ")", "\n", "self", ".", "DenseNet_layer", "=", "DenseNet_with_TCN_big", "(", "num_classes", "=", "num_classes", ",", "is_english", "=", "is_english", ",", "\n", "is_TCN", "=", "is_TCN", ",", "\n", "is_transformer", "=", "is_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.model_with_TCN_big_new_one_batch_hwdb.Model.forward": [[82, 96], ["time.time", "time.time", "time.time", "time.time", "model_with_TCN_big_new_one_batch_hwdb.Model.PAN_layer", "time.time", "time.time", "time.time", "time.time", "model_with_TCN_big_new_one_batch_hwdb.Model.Connect_layer", "model_with_TCN_big_new_one_batch_hwdb.Model.DenseNet_layer", "model_with_TCN_big_new_one_batch_hwdb.Model.Connect_layer", "model_with_TCN_big_new_one_batch_hwdb.Model.DenseNet_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_tensers", ",", "gt_boxes", "=", "None", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "assert", "(", "is_train", "==", "True", "and", "gt_boxes", "!=", "None", ")", "or", "is_train", "==", "False", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "kernels", ",", "features", "=", "self", ".", "PAN_layer", "(", "img_tensers", ")", "\n", "# print(kernels.shape)", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "if", "gt_boxes", "is", "not", "None", ":", "\n", "            ", "text_kernel_features", ",", "sub_img_nums", "=", "self", ".", "Connect_layer", "(", "kernels", ",", "features", ",", "gt_boxes", ",", "is_train", ")", "\n", "out_chars", "=", "self", ".", "DenseNet_layer", "(", "text_kernel_features", ")", "\n", "return", "kernels", ",", "out_chars", ",", "sub_img_nums", "\n", "", "else", ":", "\n", "            ", "text_kernel_features", ",", "sub_img_nums", ",", "line_top_lefts", ",", "line_contours", "=", "self", ".", "Connect_layer", "(", "kernels", ",", "features", ",", "gt_boxes", ",", "is_train", ")", "\n", "out_chars", "=", "self", ".", "DenseNet_layer", "(", "text_kernel_features", ")", "\n", "return", "kernels", ",", "out_chars", ",", "sub_img_nums", ",", "line_top_lefts", ",", "line_contours", "\n", "# t3 = time.time()", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.Connect.__init__": [[493, 497], ["torch.nn.Module.__init__", "connect_layer_new_one_batch_hwdb.TPS"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "line_height", ")", ":", "\n", "        ", "super", "(", "Connect", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Line_Height", "=", "line_height", "\n", "self", ".", "tps", "=", "TPS", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.Connect.forward": [[498, 660], ["range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "zip", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "sub_img_nums.append", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "kernel.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "cv2.threshold", "cv2.threshold", "cv2.threshold", "cv2.threshold", "cv2.findContours", "cv2.findContours", "cv2.findContours", "cv2.findContours", "sorted", "sub_img_nums.append", "line_top_lefts.append", "line_contours.append", "len", "numpy.array", "numpy.array", "max", "max", "sub_text_kernel_features.append", "sum", "cv2.contourArea", "cv2.contourArea", "cv2.contourArea", "cv2.contourArea", "numpy.array", "numpy.array", "len", "sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.array", "numpy.array", "min", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "max", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "kernel.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "numpy.min", "numpy.min", "numpy.min", "numpy.min", "line_top_left.append", "connect_layer_new_one_batch_hwdb.get_trans_points", "cv2.approxPolyDP", "cv2.approxPolyDP", "cv2.approxPolyDP", "cv2.approxPolyDP", "sub_line_contour.append", "line_trans_list.append", "max", "torchvision.transforms.functional.perspective", "int", "torch.interpolate.unsqueeze", "numpy.min", "numpy.min", "connect_layer_new_one_batch_hwdb.trans_line", "random.random", "random.random", "random.random", "random.random", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "numpy.array", "numpy.array", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "numpy.array", "numpy.array", "int", "kernel.detach().cpu().numpy.detach().cpu().numpy.detach", "max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "int", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.get_trans_points", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.trans_line"], ["", "def", "forward", "(", "self", ",", "kernels", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", ",", "gt_boxes", "=", "None", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param kernels: batch_size*H*W\n        :param features: batch_size*C*H*W\n        :param gt_boxes: List[List[List[int,int]]]\n        :return text_kernel_features: List[N*C*line_height*max_text_length]\n                text_lengths: List[List[int]]\n        \"\"\"", "\n", "assert", "(", "is_train", "==", "True", "and", "gt_boxes", "!=", "None", ")", "or", "is_train", "==", "False", "\n", "\n", "sub_img_nums", "=", "[", "]", "\n", "text_kernel_features", "=", "[", "]", "\n", "text_kernel_features_length", "=", "[", "]", "\n", "line_top_lefts", "=", "[", "]", "\n", "line_contours", "=", "[", "]", "\n", "if", "gt_boxes", "is", "not", "None", ":", "\n", "            ", "sub_text_kernel_features", "=", "[", "]", "\n", "max_text_kernel_length", "=", "64", "\n", "for", "batch_size_i", "in", "range", "(", "len", "(", "features", ")", ")", ":", "\n", "\n", "                ", "feature", "=", "features", "[", "batch_size_i", "]", "\n", "sub_img_nums", ".", "append", "(", "len", "(", "gt_boxes", "[", "batch_size_i", "]", ")", ")", "\n", "\n", "_", ",", "H", ",", "W", "=", "feature", ".", "shape", "\n", "for", "gt_box", "in", "gt_boxes", "[", "batch_size_i", "]", ":", "\n", "# print(gt_box)", "\n", "                    ", "gt_box", "=", "gt_box", "/", "4", "\n", "gt_box", "=", "np", ".", "array", "(", "gt_box", ")", "\n", "trans_h", "=", "self", ".", "Line_Height", "\n", "\n", "gt_box_w", "=", "max", "(", "(", "(", "gt_box", "[", "0", ",", "1", "]", "-", "gt_box", "[", "1", ",", "1", "]", ")", "**", "2", "+", "(", "gt_box", "[", "0", ",", "0", "]", "-", "gt_box", "[", "1", ",", "0", "]", ")", "**", "2", ")", "**", "0.5", ",", "\n", "(", "(", "gt_box", "[", "2", ",", "1", "]", "-", "gt_box", "[", "3", ",", "1", "]", ")", "**", "2", "+", "(", "gt_box", "[", "2", ",", "0", "]", "-", "gt_box", "[", "3", ",", "0", "]", ")", "**", "2", ")", "**", "0.5", ")", "\n", "gt_box_h", "=", "max", "(", "(", "(", "gt_box", "[", "0", ",", "1", "]", "-", "gt_box", "[", "3", ",", "1", "]", ")", "**", "2", "+", "(", "gt_box", "[", "0", ",", "0", "]", "-", "gt_box", "[", "3", ",", "0", "]", ")", "**", "2", ")", "**", "0.5", ",", "\n", "(", "(", "gt_box", "[", "2", ",", "1", "]", "-", "gt_box", "[", "1", ",", "1", "]", ")", "**", "2", "+", "(", "gt_box", "[", "2", ",", "0", "]", "-", "gt_box", "[", "1", ",", "0", "]", ")", "**", "2", ")", "**", "0.5", ")", "\n", "if", "gt_box_w", "<=", "4", "or", "gt_box_w", "<=", "4", ":", "\n", "                        ", "sub_text_kernel_feature", "=", "torch", ".", "zeros", "(", "\n", "(", "feature", ".", "shape", "[", "0", "]", ",", "self", ".", "Line_Height", ",", "self", ".", "Line_Height", ")", ",", "\n", "dtype", "=", "feature", ".", "dtype", ",", "device", "=", "feature", ".", "device", ")", "\n", "", "else", ":", "\n", "                        ", "origin_box", "=", "gt_box", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", "and", "gt_box_w", ">", "6", "*", "gt_box_h", "and", "is_train", ":", "\n", "                            ", "origin_box", "[", "0", ",", "0", "]", "+=", "gt_box_h", "*", "random", ".", "uniform", "(", "-", "2", ",", "2", ")", "\n", "origin_box", "[", "1", ",", "0", "]", "+=", "gt_box_h", "*", "random", ".", "uniform", "(", "-", "2", ",", "2", ")", "\n", "origin_box", "[", "2", ",", "0", "]", "+=", "gt_box_h", "*", "random", ".", "uniform", "(", "-", "2", ",", "2", ")", "\n", "origin_box", "[", "3", ",", "0", "]", "+=", "gt_box_h", "*", "random", ".", "uniform", "(", "-", "2", ",", "2", ")", "\n", "\n", "origin_box", "[", "0", ",", "1", "]", "+=", "gt_box_h", "*", "random", ".", "uniform", "(", "-", "0.2", ",", "0.2", ")", "\n", "origin_box", "[", "1", ",", "1", "]", "+=", "gt_box_h", "*", "random", ".", "uniform", "(", "-", "0.2", ",", "0.2", ")", "\n", "origin_box", "[", "2", ",", "1", "]", "+=", "gt_box_h", "*", "random", ".", "uniform", "(", "-", "0.2", ",", "0.2", ")", "\n", "origin_box", "[", "3", ",", "1", "]", "+=", "gt_box_h", "*", "random", ".", "uniform", "(", "-", "0.2", ",", "0.2", ")", "\n", "\n", "", "trans_box", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "gt_box_w", ",", "0", "]", ",", "[", "gt_box_w", ",", "gt_box_h", "]", ",", "[", "0", ",", "gt_box_h", "]", "]", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", "and", "gt_box_w", ">", "6", "*", "gt_box_h", "and", "is_train", ":", "\n", "                            ", "trans_w_change", "=", "0.1", "*", "gt_box_w", "\n", "trans_h_change", "=", "0.2", "*", "gt_box_h", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                                ", "trans_box", "=", "np", ".", "array", "(", "[", "\n", "[", "random", ".", "uniform", "(", "0", ",", "trans_w_change", ")", ",", "random", ".", "uniform", "(", "0", ",", "trans_h_change", ")", "]", ",", "\n", "[", "random", ".", "uniform", "(", "gt_box_w", "-", "trans_w_change", ",", "gt_box_w", ")", ",", "random", ".", "uniform", "(", "0", ",", "trans_h_change", ")", "]", ",", "\n", "[", "random", ".", "uniform", "(", "gt_box_w", "-", "trans_w_change", ",", "gt_box_w", ")", ",", "\n", "random", ".", "uniform", "(", "gt_box_h", "-", "trans_h_change", ",", "gt_box_h", ")", "]", ",", "\n", "\n", "[", "random", ".", "uniform", "(", "0", ",", "trans_w_change", ")", ",", "random", ".", "uniform", "(", "gt_box_h", "-", "trans_h_change", ",", "gt_box_h", ")", "]", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "", "else", ":", "\n", "                                ", "randomx1", "=", "random", ".", "uniform", "(", "0", ",", "trans_w_change", "*", "2", ")", "\n", "randomx2", "=", "random", ".", "uniform", "(", "gt_box_w", "-", "trans_w_change", "*", "2", ",", "gt_box_w", ")", "\n", "trans_box", "=", "np", ".", "array", "(", "[", "\n", "[", "randomx1", ",", "random", ".", "uniform", "(", "0", ",", "trans_h_change", ")", "]", ",", "\n", "[", "randomx2", ",", "random", ".", "uniform", "(", "0", ",", "trans_h_change", ")", "]", ",", "\n", "[", "randomx2", ",", "random", ".", "uniform", "(", "gt_box_h", "-", "trans_h_change", ",", "gt_box_h", ")", "]", ",", "\n", "[", "randomx1", ",", "random", ".", "uniform", "(", "gt_box_h", "-", "trans_h_change", ",", "gt_box_h", ")", "]", "\n", "]", ",", "dtype", "=", "\"float32\"", ")", "\n", "# trans_box[:,  0] = np.clip(trans_box[:, 0], 0, W - 1)", "\n", "# trans_box[:,  1] = np.clip(trans_box[:, 1], 0, H - 1)", "\n", "\n", "", "", "sub_text_kernel_feature", "=", "perspective", "(", "feature", ",", "origin_box", ",", "trans_box", ")", "[", ":", ",", ":", "int", "(", "gt_box_h", ")", ",", ":", "int", "(", "gt_box_w", ")", "]", "\n", "if", "is_train", ":", "\n", "\n", "                            ", "interpolate_w", "=", "int", "(", "sub_text_kernel_feature", ".", "shape", "[", "-", "1", "]", "*", "trans_h", "/", "gt_box_h", "*", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", ")", "+", "2", "\n", "", "else", ":", "\n", "                            ", "interpolate_w", "=", "int", "(", "sub_text_kernel_feature", ".", "shape", "[", "-", "1", "]", "*", "trans_h", "/", "gt_box_h", ")", "\n", "\n", "", "interpolate_w", "=", "min", "(", "1200", ",", "interpolate_w", ")", "\n", "sub_text_kernel_feature", "=", "F", ".", "interpolate", "(", "sub_text_kernel_feature", ".", "unsqueeze", "(", "0", ")", ",", "\n", "(", "trans_h", ",", "interpolate_w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "# sub_text_kernel_feature = F.upsample_bilinear(sub_text_kernel_feature.unsqueeze(0), (trans_h, interpolate_w))", "\n", "max_text_kernel_length", "=", "max", "(", "max_text_kernel_length", ",", "interpolate_w", ")", "\n", "# text_kernel_features_length.append(interpolate_w // 4)", "\n", "", "sub_text_kernel_features", ".", "append", "(", "torch", ".", "squeeze", "(", "sub_text_kernel_feature", ",", "0", ")", ")", "\n", "", "", "text_kernel_tensor_features", "=", "torch", ".", "zeros", "(", "\n", "(", "sum", "(", "sub_img_nums", ")", ",", "sub_text_kernel_features", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "Line_Height", ",", "max_text_kernel_length", "+", "32", ")", ",", "\n", "dtype", "=", "features", "[", "0", "]", ".", "dtype", ",", "device", "=", "features", "[", "0", "]", ".", "device", ")", "\n", "for", "sub_i", ",", "sub_text_kernel_tensor_feature", "in", "enumerate", "(", "sub_text_kernel_features", ")", ":", "\n", "                ", "text_kernel_tensor_features", "[", "sub_i", ",", ":", ",", ":", ",", "16", ":", "sub_text_kernel_tensor_feature", ".", "shape", "[", "-", "1", "]", "+", "16", "]", "=", "sub_text_kernel_tensor_feature", "\n", "", "return", "text_kernel_tensor_features", ",", "sub_img_nums", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "max_text_kernel_length", "=", "0", "\n", "line_trans_list", "=", "[", "]", "\n", "sub_img_nums", "=", "[", "]", "\n", "for", "kernel", ",", "feature", "in", "zip", "(", "kernels", ",", "features", ")", ":", "\n", "                ", "kernel", "=", "torch", ".", "sigmoid", "(", "kernel", ")", "\n", "kernel", "=", "kernel", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "kernel", "=", "(", "kernel", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "_", ",", "binary", "=", "cv2", ".", "threshold", "(", "kernel", ",", "127", ",", "255", ",", "cv2", ".", "THRESH_BINARY", ")", "\n", "contours", ",", "_", "=", "cv2", ".", "findContours", "(", "binary", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "\n", "contours", "=", "sorted", "(", "contours", ",", "key", "=", "lambda", "x", ":", "np", ".", "min", "(", "x", "[", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "\n", "line_count", "=", "0", "\n", "\n", "\n", "line_top_left", "=", "[", "]", "\n", "sub_line_contour", "=", "[", "]", "\n", "for", "contour", "in", "contours", ":", "\n", "                    ", "contour_area", "=", "cv2", ".", "contourArea", "(", "contour", ")", "\n", "contour", "=", "np", ".", "array", "(", "contour", ")", "\n", "\n", "if", "contour_area", ">", "30", ":", "\n", "                        ", "contour_top", "=", "np", ".", "min", "(", "contour", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "contour_left", "=", "np", ".", "min", "(", "contour", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "\n", "line_top_left", ".", "append", "(", "[", "contour_top", ",", "contour_left", "]", ")", "\n", "\n", "trans_points", ",", "trans_widths", ",", "trans_heights", "=", "get_trans_points", "(", "contour", ")", "\n", "approx", "=", "cv2", ".", "approxPolyDP", "(", "contour", ",", "max", "(", "trans_heights", ")", "*", "0.2", ",", "True", ")", "\n", "sub_line_contour", ".", "append", "(", "approx", ")", "\n", "try", ":", "\n", "                            ", "sub_line_trans", "=", "trans_line", "(", "trans_points", ",", "trans_widths", ",", "trans_heights", ",", "feature", ",", "self", ".", "tps", ",", "self", ".", "Line_Height", ")", "\n", "\n", "", "except", ":", "\n", "                            ", "sub_line_trans", "=", "torch", ".", "zeros", "(", "(", "1", ",", "512", ",", "self", ".", "Line_Height", ",", "self", ".", "Line_Height", ")", ",", "dtype", "=", "feature", ".", "dtype", ",", "\n", "device", "=", "feature", ".", "device", ")", "\n", "\n", "", "line_trans_list", ".", "append", "(", "sub_line_trans", ")", "\n", "max_text_kernel_length", "=", "max", "(", "max_text_kernel_length", ",", "sub_line_trans", ".", "shape", "[", "3", "]", ")", "\n", "\n", "line_count", "+=", "1", "\n", "\n", "# line_tensors = torch.zeros((line_count, 512, self.Line_Height, max_width + 64), dtype=feature.dtype, device=feature.device)", "\n", "# for i in range(line_count):", "\n", "#     sub_line_trans = line_trans_list[i]", "\n", "#", "\n", "#     line_tensors[i, :, :, 32:sub_line_trans.shape[-1] + 32] = sub_line_trans", "\n", "\n", "# text_kernel_features.append(line_tensors)", "\n", "", "", "sub_img_nums", ".", "append", "(", "len", "(", "sub_line_contour", ")", ")", "\n", "line_top_lefts", ".", "append", "(", "line_top_left", ")", "\n", "line_contours", ".", "append", "(", "sub_line_contour", ")", "\n", "", "text_kernel_tensor_features", "=", "torch", ".", "zeros", "(", "\n", "(", "sum", "(", "sub_img_nums", ")", ",", "line_trans_list", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "self", ".", "Line_Height", ",", "max_text_kernel_length", "+", "32", ")", ",", "\n", "dtype", "=", "features", "[", "0", "]", ".", "dtype", ",", "device", "=", "features", "[", "0", "]", ".", "device", ")", "\n", "for", "sub_i", ",", "sub_line_trans", "in", "enumerate", "(", "line_trans_list", ")", ":", "\n", "# print(text_kernel_tensor_features.shape,sub_line_trans.shape)", "\n", "                ", "text_kernel_tensor_features", "[", "sub_i", ",", ":", ",", ":", ",", "16", ":", "sub_line_trans", ".", "shape", "[", "-", "1", "]", "+", "16", "]", "=", "sub_line_trans", "\n", "\n", "", "return", "text_kernel_tensor_features", ",", "sub_img_nums", ",", "line_top_lefts", ",", "line_contours", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.TPS.__init__": [[664, 666], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.TPS.forward": [[667, 710], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid.view.view.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.ones.permute", "torch.ones.permute", "torch.ones.permute", "torch.ones.permute", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "grid.view.view.view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.solve", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ",", "w", ",", "h", ")", ":", "\n", "        ", "\"\"\" \u8ba1\u7b97grid\"\"\"", "\n", "device", "=", "X", ".", "device", "\n", "grid", "=", "torch", ".", "ones", "(", "1", ",", "h", ",", "w", ",", "2", ",", "device", "=", "device", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "w", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "h", ")", "[", "...", ",", "None", "]", "\n", "grid", "=", "grid", ".", "view", "(", "-", "1", ",", "h", "*", "w", ",", "2", ")", "\n", "\n", "\"\"\" \u8ba1\u7b97W, A\"\"\"", "\n", "n", ",", "k", "=", "X", ".", "shape", "[", ":", "2", "]", "\n", "device", "=", "X", ".", "device", "\n", "\n", "Z", "=", "torch", ".", "zeros", "(", "1", ",", "k", "+", "3", ",", "2", ",", "device", "=", "device", ")", "\n", "P", "=", "torch", ".", "ones", "(", "n", ",", "k", ",", "3", ",", "device", "=", "device", ")", "\n", "L", "=", "torch", ".", "zeros", "(", "n", ",", "k", "+", "3", ",", "k", "+", "3", ",", "device", "=", "device", ")", "\n", "\n", "eps", "=", "1e-9", "\n", "D2", "=", "torch", ".", "pow", "(", "X", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "X", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "K", "=", "D2", "*", "torch", ".", "log", "(", "D2", "+", "eps", ")", "\n", "\n", "P", "[", ":", ",", ":", ",", "1", ":", "]", "=", "X", "\n", "Z", "[", ":", ",", ":", "k", ",", ":", "]", "=", "Y", "\n", "L", "[", ":", ",", ":", "k", ",", ":", "k", "]", "=", "K", "\n", "L", "[", ":", ",", ":", "k", ",", "k", ":", "]", "=", "P", "\n", "L", "[", ":", ",", "k", ":", ",", ":", "k", "]", "=", "P", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "Q", "=", "torch", ".", "solve", "(", "Z", ",", "L", ")", "[", "0", "]", "\n", "W", ",", "A", "=", "Q", "[", ":", ",", ":", "k", "]", ",", "Q", "[", ":", ",", "k", ":", "]", "\n", "\n", "\"\"\" \u8ba1\u7b97U \"\"\"", "\n", "eps", "=", "1e-9", "\n", "D2", "=", "torch", ".", "pow", "(", "grid", "[", ":", ",", ":", ",", "None", ",", ":", "]", "-", "X", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "U", "=", "D2", "*", "torch", ".", "log", "(", "D2", "+", "eps", ")", "\n", "\n", "\"\"\" \u8ba1\u7b97P \"\"\"", "\n", "n", ",", "k", "=", "grid", ".", "shape", "[", ":", "2", "]", "\n", "device", "=", "grid", ".", "device", "\n", "P", "=", "torch", ".", "ones", "(", "n", ",", "k", ",", "3", ",", "device", "=", "device", ")", "\n", "P", "[", ":", ",", ":", ",", "1", ":", "]", "=", "grid", "\n", "\n", "# grid = P @ A + U @ W", "\n", "grid", "=", "torch", ".", "matmul", "(", "P", ",", "A", ")", "+", "torch", ".", "matmul", "(", "U", ",", "W", ")", "\n", "return", "grid", ".", "view", "(", "-", "1", ",", "h", ",", "w", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.point_norm": [[712, 720], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack().contiguous().view", "torch.stack().contiguous().view", "torch.stack().contiguous().view", "torch.stack().contiguous().view", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "", "def", "point_norm", "(", "points_int", ",", "width", ",", "height", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    \u5c06\u50cf\u7d20\u70b9\u5750\u6807\u5f52\u4e00\u5316\u81f3 -1 ~ 1\n    \"\"\"", "\n", "points_int_clone", "=", "torch", ".", "tensor", "(", "points_int", ",", "device", "=", "device", ")", "\n", "x", "=", "(", "(", "points_int_clone", "*", "2", ")", "[", "...", ",", "0", "]", "/", "(", "width", "-", "1", ")", "-", "1", ")", "\n", "y", "=", "(", "(", "points_int_clone", "*", "2", ")", "[", "...", ",", "1", "]", "/", "(", "height", "-", "1", ")", "-", "1", ")", "\n", "return", "torch", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.trans_line": [[722, 782], ["numpy.array", "numpy.reshape", "numpy.array", "int", "cv2.boundingRect", "cv2.boundingRect", "max", "max", "min", "min", "feature[].clone", "range", "numpy.array", "numpy.array", "connect_layer_new_one_batch_hwdb.point_norm", "connect_layer_new_one_batch_hwdb.point_norm", "tps", "torch.grid_sample", "int", "int", "torch.interpolate", "np.array.copy", "max", "int", "torch.dstack", "torch.dstack", "torch.dstack", "torch.dstack", "len", "int", "point_norm.append", "point_norm.append", "point_norm.append", "point_norm.append", "sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "int", "int", "sum"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.point_norm", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.point_norm"], ["", "def", "trans_line", "(", "kernel_points", ",", "box_widths", ",", "box_heights", ",", "feature", ",", "tps", ",", "out_height", ")", ":", "\n", "\n", "    ", "img_h", ",", "img_w", "=", "feature", ".", "shape", "[", "1", ":", "]", "\n", "kernel_points", "=", "np", ".", "array", "(", "kernel_points", ")", "\n", "kernel_points_c", "=", "np", ".", "reshape", "(", "kernel_points", ".", "copy", "(", ")", ",", "(", "-", "1", ",", "1", ",", "2", ")", ")", "\n", "box_heights", "=", "np", ".", "array", "(", "box_heights", ")", "\n", "max_box_height", "=", "int", "(", "max", "(", "box_heights", ")", ")", "\n", "rect_box", "=", "cv2", ".", "boundingRect", "(", "kernel_points_c", ")", "\n", "\n", "margin_x", ",", "margin_y", ",", "margin_w", ",", "margin_h", "=", "rect_box", "\n", "margin_x", "=", "max", "(", "0", ",", "margin_x", ")", "\n", "margin_y", "=", "max", "(", "0", ",", "margin_y", ")", "\n", "margin_w", "=", "min", "(", "margin_w", ",", "img_w", "-", "margin_x", ")", "\n", "margin_h", "=", "min", "(", "margin_h", ",", "img_h", "-", "margin_y", ")", "\n", "\n", "line_feature", "=", "feature", "[", ":", ",", "margin_y", ":", "margin_y", "+", "margin_h", ",", "margin_x", ":", "margin_x", "+", "margin_w", "]", ".", "clone", "(", ")", "\n", "if", "int", "(", "sum", "(", "box_widths", ")", "-", "margin_w", ")", ">", "0", ":", "\n", "        ", "line_feature", "=", "torch", ".", "dstack", "(", "[", "line_feature", ",", "\n", "torch", ".", "zeros", "(", "(", "line_feature", ".", "shape", "[", "0", "]", ",", "\n", "line_feature", ".", "shape", "[", "1", "]", ",", "\n", "int", "(", "sum", "(", "box_widths", ")", "-", "margin_w", ")", ")", ",", "\n", "dtype", "=", "line_feature", ".", "dtype", ",", "\n", "device", "=", "line_feature", ".", "device", ")", "]", ")", "\n", "\n", "", "kernel_points", "[", ":", ",", ":", ",", "0", "]", "-=", "margin_x", "\n", "kernel_points", "[", ":", ",", ":", ",", "1", "]", "-=", "margin_y", "\n", "\n", "point_source", "=", "[", "]", "\n", "point_target", "=", "[", "]", "\n", "\n", "line_h", ",", "line_w", "=", "line_feature", ".", "shape", "[", "1", ":", "]", "\n", "sum_w", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "kernel_points", ")", ")", ":", "\n", "        ", "point1", "=", "kernel_points", "[", "i", ",", "0", "]", "\n", "point2", "=", "kernel_points", "[", "i", ",", "1", "]", "\n", "if", "i", ">", "0", ":", "\n", "            ", "sum_w", "+=", "box_widths", "[", "i", "-", "1", "]", "\n", "", "box_height", "=", "box_heights", "[", "i", "]", "\n", "\n", "sub_margin", "=", "int", "(", "(", "margin_h", "-", "box_height", ")", "//", "2", ")", "\n", "point_source", ".", "append", "(", "point1", ")", "\n", "point_source", ".", "append", "(", "point2", ")", "\n", "point_target", ".", "append", "(", "[", "int", "(", "sum_w", ")", ",", "0", "]", ")", "\n", "point_target", ".", "append", "(", "[", "int", "(", "sum_w", ")", ",", "max_box_height", "-", "1", "]", ")", "\n", "", "point_source", "=", "np", ".", "array", "(", "[", "point_source", "]", ")", "\n", "point_target", "=", "np", ".", "array", "(", "[", "point_target", "]", ")", "\n", "point_source", "=", "point_norm", "(", "point_source", ",", "line_w", ",", "line_h", ",", "device", "=", "feature", ".", "device", ")", "\n", "point_target", "=", "point_norm", "(", "point_target", ",", "line_w", ",", "line_h", ",", "device", "=", "feature", ".", "device", ")", "\n", "warped_grid", "=", "tps", "(", "point_target", "[", "None", ",", "...", "]", ",", "point_source", "[", "None", ",", "...", "]", ",", "line_w", ",", "line_h", ")", "# \u8fd9\u4e2a\u8f93\u5165\u7684\u4f4d\u7f6e\u9700\u8981\u5f52\u4e00\u5316\uff0c\u6240\u4ee5\u7528norm", "\n", "\n", "ten_wrp", "=", "F", ".", "grid_sample", "(", "line_feature", "[", "None", ",", "...", "]", ",", "warped_grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "True", ")", "\n", "\n", "max_marign", "=", "int", "(", "(", "margin_h", "-", "max_box_height", ")", "/", "2", ")", "\n", "ten_wrp", "=", "ten_wrp", "[", ":", ",", ":", ",", ":", "max_box_height", ",", ":", "]", "\n", "size_h", "=", "out_height", "\n", "size_w", "=", "int", "(", "line_w", "*", "out_height", "/", "max_box_height", "*", "1", ")", "\n", "\n", "ten_wrp", "=", "F", ".", "interpolate", "(", "ten_wrp", ",", "size", "=", "(", "size_h", ",", "size_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "ten_wrp", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.get_trans_points": [[784, 834], ["cv2.contourArea", "cv2.contourArea", "cv2.approxPolyDP", "cv2.approxPolyDP", "connect_layer_new_one_batch_hwdb.get_center_points", "enumerate", "cv2.arcLength", "cv2.arcLength", "max", "cv2.boxPoints", "cv2.boxPoints", "numpy.int0", "trans_points.append", "trans_widths.append", "trans_heights.append", "len", "int", "int", "int", "int", "trans_points.append", "trans_heights.append", "len", "numpy.arctan"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.get_center_points"], ["", "def", "get_trans_points", "(", "contour", ")", ":", "\n", "    ", "contour_area", "=", "cv2", ".", "contourArea", "(", "contour", ")", "\n", "epsilon", "=", "0.2", "*", "contour_area", "/", "cv2", ".", "arcLength", "(", "contour", ",", "True", ")", "\n", "contour", "=", "cv2", ".", "approxPolyDP", "(", "contour", ",", "epsilon", ",", "True", ")", "\n", "center_points", "=", "get_center_points", "(", "contour", ")", "\n", "trans_points", "=", "[", "]", "\n", "trans_widths", "=", "[", "]", "\n", "trans_heights", "=", "[", "]", "\n", "pre_point_left1", "=", "None", "\n", "pre_point_left2", "=", "None", "\n", "if", "center_points", "[", "0", "]", "[", "0", "]", ">", "center_points", "[", "-", "1", "]", "[", "0", "]", ":", "\n", "        ", "center_points", "=", "center_points", "[", ":", ":", "-", "1", "]", "\n", "", "for", "point_i", ",", "kernel_point", "in", "enumerate", "(", "center_points", ")", ":", "\n", "        ", "if", "point_i", "<", "len", "(", "center_points", ")", "-", "1", ":", "\n", "            ", "kernel_point_next", "=", "center_points", "[", "point_i", "+", "1", "]", "\n", "if", "point_i", ">", "0", ":", "\n", "                ", "_", ",", "_", ",", "pre_r", "=", "center_points", "[", "point_i", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "pre_r", "=", "0", "\n", "", "x_left", ",", "y_left", ",", "left_r", "=", "kernel_point", "\n", "# print(kernel_point_next)", "\n", "x_right", ",", "y_right", ",", "right_r", "=", "kernel_point_next", "\n", "\n", "center_x", ",", "center_y", "=", "(", "x_right", "+", "x_left", ")", "/", "2", ",", "(", "y_left", "+", "y_right", ")", "/", "2", "\n", "box_width", "=", "(", "(", "x_left", "-", "x_right", ")", "**", "2", "+", "(", "y_right", "-", "y_left", ")", "**", "2", ")", "**", "0.5", "\n", "if", "x_left", "==", "x_right", ":", "\n", "                ", "angle", "=", "0", "\n", "", "else", ":", "\n", "                ", "angle", "=", "np", ".", "arctan", "(", "(", "y_right", "-", "y_left", ")", "/", "(", "x_right", "-", "x_left", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "", "box_height", "=", "max", "(", "left_r", ",", "right_r", ",", "pre_r", ")", "\n", "\n", "rect_box", "=", "(", "(", "center_x", ",", "center_y", ")", ",", "(", "box_width", ",", "box_height", ")", ",", "angle", ")", "\n", "point_box", "=", "cv2", ".", "boxPoints", "(", "rect_box", ")", "\n", "point_box", "=", "np", ".", "int0", "(", "point_box", ")", "\n", "if", "point_i", ">", "0", ":", "\n", "                ", "point_box", "[", "1", "]", "[", "0", "]", "=", "int", "(", "(", "point_box", "[", "1", "]", "[", "0", "]", "+", "pre_point_left1", "[", "0", "]", ")", "/", "2", ")", "\n", "point_box", "[", "1", "]", "[", "1", "]", "=", "int", "(", "(", "point_box", "[", "1", "]", "[", "1", "]", "+", "pre_point_left1", "[", "1", "]", ")", "/", "2", ")", "\n", "point_box", "[", "0", "]", "[", "0", "]", "=", "int", "(", "(", "point_box", "[", "0", "]", "[", "0", "]", "+", "pre_point_left2", "[", "0", "]", ")", "/", "2", ")", "\n", "point_box", "[", "0", "]", "[", "1", "]", "=", "int", "(", "(", "point_box", "[", "0", "]", "[", "1", "]", "+", "pre_point_left2", "[", "1", "]", ")", "/", "2", ")", "\n", "", "trans_points", ".", "append", "(", "[", "point_box", "[", "1", "]", ",", "point_box", "[", "0", "]", "]", ")", "\n", "trans_widths", ".", "append", "(", "box_width", ")", "\n", "trans_heights", ".", "append", "(", "box_height", ")", "\n", "\n", "if", "point_i", "==", "len", "(", "center_points", ")", "-", "2", ":", "\n", "                ", "trans_points", ".", "append", "(", "[", "point_box", "[", "2", "]", ",", "point_box", "[", "3", "]", "]", ")", "\n", "\n", "trans_heights", ".", "append", "(", "box_height", ")", "\n", "", "pre_point_left1", "=", "point_box", "[", "2", "]", "\n", "pre_point_left2", "=", "point_box", "[", "3", "]", "\n", "", "", "return", "trans_points", ",", "trans_widths", ",", "trans_heights", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.get_center_points": [[836, 925], ["cv2.contourArea", "cv2.contourArea", "cv2.arcLength", "cv2.arcLength", "numpy.zeros", "range", "cv2.minMaxLoc", "cv2.minMaxLoc", "cv2.pointPolygonTest", "cv2.pointPolygonTest", "cv2.pointPolygonTest", "cv2.pointPolygonTest", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "range", "max", "min", "max", "min", "cv2.minMaxLoc", "cv2.minMaxLoc", "len", "int", "int", "int", "int", "center_points.insert", "center_points.append", "connect_layer_new_one_batch_hwdb.get_out_point", "center_points.insert", "connect_layer_new_one_batch_hwdb.get_out_point", "center_points.append", "cv2.pointPolygonTest", "cv2.pointPolygonTest", "len", "center_points.append", "int", "int", "int", "int", "max", "max", "min", "min", "center_points.insert", "center_points.insert", "enumerate", "max", "len", "center_points.insert", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.get_out_point", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.get_out_point"], ["", "def", "get_center_points", "(", "contour", ")", ":", "\n", "    ", "center_points", "=", "[", "]", "\n", "contour_area", "=", "cv2", ".", "contourArea", "(", "contour", ")", "\n", "contour_length", "=", "cv2", ".", "arcLength", "(", "contour", ",", "True", ")", "\n", "min_height", "=", "contour_area", "/", "contour_length", "\n", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "=", "np", ".", "min", "(", "contour", "[", ":", ",", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "contour", "[", ":", ",", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "contour", "[", ":", ",", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "contour", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "raw_dist", "=", "np", ".", "zeros", "(", "(", "y_max", "-", "y_min", ",", "x_max", "-", "x_min", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "y_min", ",", "y_max", ",", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "x_min", ",", "x_max", ",", "1", ")", ":", "\n", "            ", "raw_dist", "[", "i", "-", "y_min", ",", "j", "-", "x_min", "]", "=", "cv2", ".", "pointPolygonTest", "(", "contour", ",", "(", "j", ",", "i", ")", ",", "True", ")", "\n", "\n", "", "", "minVal", ",", "maxVal", ",", "_", ",", "maxDistPt", "=", "cv2", ".", "minMaxLoc", "(", "raw_dist", ")", "\n", "\n", "while", "maxVal", ">", "min_height", "*", "0.5", ":", "\n", "# print(maxVal, min_height)", "\n", "        ", "point_x", "=", "(", "maxDistPt", "[", "0", "]", "+", "x_min", ")", "\n", "point_y", "=", "(", "maxDistPt", "[", "1", "]", "+", "y_min", ")", "\n", "\n", "if", "len", "(", "center_points", ")", "<", "2", ":", "\n", "            ", "center_points", ".", "append", "(", "[", "point_x", ",", "point_y", ",", "max", "(", "maxVal", ",", "min_height", ")", "*", "4", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "left_x", ",", "left_y", ",", "_", "=", "center_points", "[", "0", "]", "\n", "right_x", ",", "right_y", ",", "_", "=", "center_points", "[", "-", "1", "]", "\n", "left_w", "=", "(", "(", "point_x", "-", "left_x", ")", "**", "2", "+", "(", "point_y", "-", "left_y", ")", "**", "2", ")", "**", "0.5", "\n", "right_w", "=", "(", "(", "point_x", "-", "right_x", ")", "**", "2", "+", "(", "point_y", "-", "right_y", ")", "**", "2", ")", "**", "0.5", "\n", "left_right_w", "=", "(", "(", "left_x", "-", "right_x", ")", "**", "2", "+", "(", "left_y", "-", "right_y", ")", "**", "2", ")", "**", "0.5", "\n", "\n", "if", "right_w", ">", "left_right_w", "and", "right_w", ">", "left_w", ":", "\n", "\n", "                ", "center_points", ".", "insert", "(", "0", ",", "[", "point_x", ",", "point_y", ",", "max", "(", "maxVal", ",", "min_height", ")", "*", "4", "]", ")", "\n", "", "elif", "left_w", ">", "left_right_w", "and", "left_w", ">", "right_w", ":", "\n", "\n", "                ", "center_points", ".", "insert", "(", "len", "(", "center_points", ")", ",", "[", "point_x", ",", "point_y", ",", "max", "(", "maxVal", ",", "min_height", ")", "*", "4", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "min_sum", "=", "99999", "\n", "min_i", "=", "0", "\n", "for", "center_point_i", ",", "center_point", "in", "enumerate", "(", "center_points", "[", ":", "-", "1", "]", ")", ":", "\n", "                    ", "left_x", ",", "left_y", ",", "_", "=", "center_point", "\n", "right_x", ",", "right_y", ",", "_", "=", "center_points", "[", "center_point_i", "+", "1", "]", "\n", "left_w", "=", "(", "(", "point_x", "-", "left_x", ")", "**", "2", "+", "(", "point_y", "-", "left_y", ")", "**", "2", ")", "**", "0.5", "\n", "right_w", "=", "(", "(", "point_x", "-", "right_x", ")", "**", "2", "+", "(", "point_y", "-", "right_y", ")", "**", "2", ")", "**", "0.5", "\n", "left_right_w", "=", "(", "(", "left_x", "-", "right_x", ")", "**", "2", "+", "(", "left_y", "-", "right_y", ")", "**", "2", ")", "**", "0.5", "\n", "sum_w", "=", "left_w", "+", "right_w", "\n", "if", "sum_w", "<", "min_sum", "and", "left_w", "<", "left_right_w", "and", "right_w", "<", "left_right_w", ":", "\n", "                        ", "min_sum", "=", "sum_w", "\n", "min_i", "=", "center_point_i", "\n", "", "", "if", "min_sum", ">", "4", "*", "min_height", ":", "\n", "                    ", "center_points", ".", "insert", "(", "min_i", "+", "1", ",", "[", "point_x", ",", "point_y", ",", "max", "(", "maxVal", ",", "min_height", ")", "*", "4", "]", ")", "\n", "\n", "", "", "", "circle_x", ",", "circle_y", "=", "maxDistPt", "\n", "pad_y_min", "=", "max", "(", "int", "(", "circle_y", "-", "4", "*", "min_height", ")", ",", "0", ")", "\n", "pad_y_max", "=", "min", "(", "int", "(", "circle_y", "+", "4", "*", "min_height", ")", ",", "raw_dist", ".", "shape", "[", "0", "]", ")", "\n", "\n", "pad_x_min", "=", "max", "(", "int", "(", "circle_x", "-", "4", "*", "min_height", ")", ",", "0", ")", "\n", "pad_x_max", "=", "min", "(", "int", "(", "circle_x", "+", "4", "*", "min_height", ")", ",", "raw_dist", ".", "shape", "[", "1", "]", ")", "\n", "raw_dist", "[", "pad_y_min", ":", "pad_y_max", ",", "pad_x_min", ":", "pad_x_max", "]", "=", "0", "\n", "minVal", ",", "maxVal", ",", "_", ",", "maxDistPt", "=", "cv2", ".", "minMaxLoc", "(", "raw_dist", ")", "\n", "#", "\n", "# cv2.imshow('raw_dist', kernel_big)", "\n", "# cv2.waitKey()", "\n", "", "if", "len", "(", "center_points", ")", "==", "1", ":", "\n", "        ", "point_x", ",", "point_y", ",", "point_r", "=", "center_points", "[", "0", "]", "\n", "point_left_x", ",", "point_left_y", ",", "point_left_r", "=", "point_x", "-", "point_r", "/", "2", ",", "point_y", ",", "point_r", "\n", "point_right_x", ",", "point_right_y", ",", "point_right_r", "=", "point_x", "+", "point_r", "/", "2", ",", "point_y", ",", "point_r", "\n", "\n", "point_left_x", "=", "int", "(", "max", "(", "0", ",", "point_left_x", ")", ")", "\n", "point_left_y", "=", "int", "(", "max", "(", "0", ",", "point_left_y", ")", ")", "\n", "point_right_x", "=", "int", "(", "min", "(", "x_max", ",", "point_right_x", ")", ")", "\n", "point_right_y", "=", "int", "(", "min", "(", "y_max", ",", "point_right_y", ")", ")", "\n", "center_points", ".", "insert", "(", "0", ",", "[", "point_left_x", ",", "point_left_y", ",", "point_left_r", "]", ")", "\n", "center_points", ".", "append", "(", "[", "point_right_x", ",", "point_right_y", ",", "point_right_r", "]", ")", "\n", "\n", "", "left_x1", ",", "left_y1", ",", "left_r1", "=", "center_points", "[", "0", "]", "\n", "left_x2", ",", "left_y2", ",", "left_r2", "=", "center_points", "[", "1", "]", "\n", "left_margin", "=", "cv2", ".", "pointPolygonTest", "(", "contour", ",", "(", "left_x1", ",", "left_y1", ")", ",", "True", ")", "\n", "if", "left_margin", ">", "0", ":", "\n", "        ", "point_out", "=", "get_out_point", "(", "left_x1", ",", "left_y1", ",", "left_x2", ",", "left_y2", ",", "contour", ",", "left_r1", ")", "\n", "center_points", ".", "insert", "(", "0", ",", "point_out", ")", "\n", "", "right_x1", ",", "right_y1", ",", "right_r1", "=", "center_points", "[", "-", "1", "]", "\n", "right_x2", ",", "right_y2", ",", "right_r2", "=", "center_points", "[", "-", "2", "]", "\n", "right_margin", "=", "cv2", ".", "pointPolygonTest", "(", "contour", ",", "(", "right_x1", ",", "right_y1", ")", ",", "True", ")", "\n", "if", "right_margin", ">", "0", ":", "\n", "        ", "point_out", "=", "get_out_point", "(", "right_x1", ",", "right_y1", ",", "right_x2", ",", "right_y2", ",", "contour", ",", "right_r1", ")", "\n", "center_points", ".", "append", "(", "point_out", ")", "\n", "\n", "", "return", "center_points", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.models.connect_layer_new_one_batch_hwdb.get_out_point": [[927, 945], ["int", "int", "int", "int", "cv2.pointPolygonTest", "cv2.pointPolygonTest", "int", "int"], "function", ["None"], ["", "def", "get_out_point", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "contour", ",", "r", ")", ":", "\n", "    ", "point_w", "=", "(", "(", "x1", "-", "x2", ")", "**", "2", "+", "(", "y1", "-", "y2", ")", "**", "2", ")", "**", "0.5", "\n", "margin", "=", "0.1", "*", "r", "\n", "while", "True", ":", "\n", "        ", "out_rate", "=", "(", "margin", ")", "/", "point_w", "\n", "\n", "out_x", "=", "int", "(", "(", "out_rate", "+", "1", ")", "*", "x1", "-", "out_rate", "*", "x2", ")", "\n", "out_y", "=", "int", "(", "(", "out_rate", "+", "1", ")", "*", "y1", "-", "out_rate", "*", "y2", ")", "\n", "\n", "margin_now", "=", "cv2", ".", "pointPolygonTest", "(", "contour", ",", "(", "out_x", ",", "out_y", ")", ",", "True", ")", "\n", "\n", "if", "margin_now", "<", "0", ":", "\n", "            ", "break", "\n", "", "margin", "+=", "0.1", "*", "r", "\n", "", "out_rate", "=", "(", "margin", "+", "r", "/", "2", ")", "/", "point_w", "\n", "out_x", "=", "int", "(", "(", "out_rate", "+", "1", ")", "*", "x1", "-", "out_rate", "*", "x2", ")", "\n", "out_y", "=", "int", "(", "(", "out_rate", "+", "1", ")", "*", "y1", "-", "out_rate", "*", "y2", ")", "\n", "return", "[", "int", "(", "out_x", ")", ",", "int", "(", "out_y", ")", ",", "r", "]", "\n", "# if __name__ == '__main__':", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.TCN.Chomp1d.__init__": [[112, 115], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.TCN.Chomp1d.forward": [[116, 118], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.TCN.TemporalBlock.__init__": [[121, 155], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "TCN.Chomp1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "TCN.Chomp1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "TCN.TemporalBlock.init_weights", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.TCN.TemporalBlock.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "padding", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "\"\"\"\n        \u76f8\u5f53\u4e8e\u4e00\u4e2aResidual block\n\n        :param n_inputs: int, \u8f93\u5165\u901a\u9053\u6570\n        :param n_outputs: int, \u8f93\u51fa\u901a\u9053\u6570\n        :param kernel_size: int, \u5377\u79ef\u6838\u5c3a\u5bf8\n        :param stride: int, \u6b65\u957f\uff0c\u4e00\u822c\u4e3a1\n        :param dilation: int, \u81a8\u80c0\u7cfb\u6570\n        :param padding: int, \u586b\u5145\u7cfb\u6570\n        :param dropout: float, dropout\u6bd4\u7387\n        \"\"\"", "\n", "super", "(", "TemporalBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ")", "\n", "# \u7ecf\u8fc7conv1\uff0c\u8f93\u51fa\u7684size\u5176\u5b9e\u662f(Batch, input_channel, seq_len + padding)", "\n", "self", ".", "chomp1", "=", "Chomp1d", "(", "padding", ")", "# \u88c1\u526a\u6389\u591a\u51fa\u6765\u7684padding\u90e8\u5206\uff0c\u7ef4\u6301\u8f93\u51fa\u65f6\u95f4\u6b65\u4e3aseq_len", "\n", "self", ".", "batchnorm1", "=", "nn", ".", "BatchNorm1d", "(", "n_outputs", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "conv2", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_outputs", ",", "n_outputs", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ")", "\n", "self", ".", "chomp2", "=", "Chomp1d", "(", "padding", ")", "# \u88c1\u526a\u6389\u591a\u51fa\u6765\u7684padding\u90e8\u5206\uff0c\u7ef4\u6301\u8f93\u51fa\u65f6\u95f4\u6b65\u4e3aseq_len", "\n", "self", ".", "batchnorm2", "=", "nn", ".", "BatchNorm1d", "(", "n_outputs", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "batchnorm1", ",", "self", ".", "chomp1", ",", "self", ".", "relu1", ",", "self", ".", "dropout1", ",", "\n", "self", ".", "conv2", ",", "self", ".", "batchnorm2", ",", "self", ".", "chomp2", ",", "self", ".", "relu2", ",", "self", ".", "dropout2", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "1", ")", ",", "nn", ".", "BatchNorm1d", "(", "n_outputs", ")", ")", "if", "n_inputs", "!=", "n_outputs", "else", "None", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.TCN.TemporalBlock.init_weights": [[156, 165], ["TCN.TemporalBlock.conv1.weight.data.normal_", "TCN.TemporalBlock.conv2.weight.data.normal_", "TCN.TemporalBlock.downsample.weight.data.normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u53c2\u6570\u521d\u59cb\u5316\n        :return:\n        \"\"\"", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.TCN.TemporalBlock.forward": [[166, 175], ["TCN.TemporalBlock.net", "TCN.TemporalBlock.relu", "TCN.TemporalBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: size of (Batch, input_channel, seq_len)\n        :return:\n        \"\"\"", "\n", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "res", "=", "x", "if", "self", ".", "downsample", "is", "None", "else", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "return", "self", ".", "relu", "(", "out", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.TCN.TemporalConvNet.__init__": [[178, 200], ["torch.Module.__init__", "len", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "TCN.TemporalBlock"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_channels", ",", "kernel_size", "=", "2", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "\"\"\"\n        TCN\uff0c\u76ee\u524dpaper\u7ed9\u51fa\u7684TCN\u7ed3\u6784\u5f88\u597d\u7684\u652f\u6301\u6bcf\u4e2a\u65f6\u523b\u4e3a\u4e00\u4e2a\u6570\u7684\u60c5\u51b5\uff0c\u5373sequence\u7ed3\u6784\uff0c\n        \u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u523b\u4e3a\u4e00\u4e2a\u5411\u91cf\u8fd9\u79cd\u4e00\u7ef4\u7ed3\u6784\uff0c\u52c9\u5f3a\u53ef\u4ee5\u628a\u5411\u91cf\u62c6\u6210\u82e5\u5e72\u8be5\u65f6\u523b\u7684\u8f93\u5165\u901a\u9053\uff0c\n        \u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u523b\u4e3a\u4e00\u4e2a\u77e9\u9635\u6216\u66f4\u9ad8\u7ef4\u56fe\u50cf\u7684\u60c5\u51b5\uff0c\u5c31\u4e0d\u592a\u597d\u529e\u3002\n\n        :param num_inputs: int\uff0c \u8f93\u5165\u901a\u9053\u6570\n        :param num_channels: list\uff0c\u6bcf\u5c42\u7684hidden_channel\u6570\uff0c\u4f8b\u5982[25,25,25,25]\u8868\u793a\u67094\u4e2a\u9690\u5c42\uff0c\u6bcf\u5c42hidden_channel\u6570\u4e3a25\n        :param kernel_size: int, \u5377\u79ef\u6838\u5c3a\u5bf8\n        :param dropout: float, drop_out\u6bd4\u7387\n        \"\"\"", "\n", "super", "(", "TemporalConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "num_channels", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "dilation_size", "=", "2", "**", "i", "# \u81a8\u80c0\u7cfb\u6570\uff1a1\uff0c2\uff0c4\uff0c8\u2026\u2026", "\n", "in_channels", "=", "num_inputs", "if", "i", "==", "0", "else", "num_channels", "[", "i", "-", "1", "]", "# \u786e\u5b9a\u6bcf\u4e00\u5c42\u7684\u8f93\u5165\u901a\u9053\u6570", "\n", "out_channels", "=", "num_channels", "[", "i", "]", "# \u786e\u5b9a\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\u901a\u9053\u6570", "\n", "layers", "+=", "[", "TemporalBlock", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "dilation_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "*", "dilation_size", ",", "dropout", "=", "dropout", ")", "]", "\n", "\n", "", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.TCN.TemporalConvNet.forward": [[201, 211], ["TCN.TemporalConvNet.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        \u8f93\u5165x\u7684\u7ed3\u6784\u4e0d\u540c\u4e8eRNN\uff0c\u4e00\u822cRNN\u7684size\u4e3a(Batch, seq_len, channels)\u6216\u8005(seq_len, Batch, channels)\uff0c\n        \u8fd9\u91cc\u628aseq_len\u653e\u5728channels\u540e\u9762\uff0c\u628a\u6240\u6709\u65f6\u95f4\u6b65\u7684\u6570\u636e\u62fc\u8d77\u6765\uff0c\u5f53\u505aConv1d\u7684\u8f93\u5165\u5c3a\u5bf8\uff0c\u5b9e\u73b0\u5377\u79ef\u8de8\u65f6\u95f4\u6b65\u7684\u64cd\u4f5c\uff0c\n        \u5f88\u5de7\u5999\u7684\u8bbe\u8ba1\u3002\n        :param x: size of (Batch, input_channel, seq_len)\n        :return: size of (Batch, output_channel, seq_len)\n        \"\"\"", "\n", "\n", "return", "self", ".", "network", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big._DenseLayer.__init__": [[249, 261], ["torch.Module.__init__", "reco_layer_new_with_tcn_big._DenseLayer.add_module", "reco_layer_new_with_tcn_big._DenseLayer.add_module", "reco_layer_new_with_tcn_big._DenseLayer.add_module", "reco_layer_new_with_tcn_big._DenseLayer.add_module", "reco_layer_new_with_tcn_big._DenseLayer.add_module", "reco_layer_new_with_tcn_big._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ",", "efficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "growth_rate", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "efficient", "=", "efficient", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big._DenseLayer.forward": [[262, 273], ["reco_layer_new_with_tcn_big._bn_function_factory", "reco_layer_new_with_tcn_big._DenseLayer.conv2", "any", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "_bn_function_factory.", "reco_layer_new_with_tcn_big._DenseLayer.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "reco_layer_new_with_tcn_big._DenseLayer.norm2"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big._bn_function_factory"], ["", "def", "forward", "(", "self", ",", "*", "prev_features", ")", ":", "\n", "        ", "bn_function", "=", "_bn_function_factory", "(", "self", ".", "norm1", ",", "self", ".", "relu1", ",", "self", ".", "conv1", ")", "\n", "if", "self", ".", "efficient", "and", "any", "(", "prev_feature", ".", "requires_grad", "for", "prev_feature", "in", "prev_features", ")", ":", "\n", "            ", "bottleneck_output", "=", "cp", ".", "checkpoint", "(", "bn_function", ",", "*", "prev_features", ")", "\n", "", "else", ":", "\n", "            ", "bottleneck_output", "=", "bn_function", "(", "*", "prev_features", ")", "\n", "", "new_features", "=", "self", ".", "conv2", "(", "self", ".", "relu2", "(", "self", ".", "norm2", "(", "bottleneck_output", ")", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big._Transition.__init__": [[276, 282], ["torch.Sequential.__init__", "reco_layer_new_with_tcn_big._Transition.add_module", "reco_layer_new_with_tcn_big._Transition.add_module", "reco_layer_new_with_tcn_big._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ",", "stride", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "2", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "# self.add_module('pool', nn.MaxPool2d(kernel_size=2, stride=stride))", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big._DenseBlock.__init__": [[286, 297], ["torch.Module.__init__", "range", "reco_layer_new_with_tcn_big._DenseLayer", "reco_layer_new_with_tcn_big._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ",", "efficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "\n", "num_input_features", "+", "i", "*", "growth_rate", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "efficient", "=", "efficient", ",", "\n", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big._DenseBlock.forward": [[298, 305], ["reco_layer_new_with_tcn_big._DenseBlock.named_children", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "features.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "init_features", ")", ":", "\n", "        ", "features", "=", "[", "init_features", "]", "\n", "for", "name", ",", "layer", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "new_features", "=", "layer", "(", "*", "features", ")", "\n", "features", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "features", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big.AttentionLayer.__init__": [[308, 328], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "ker_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "AttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# spatial attention", "\n", "ker_size", "=", "ker_size", "-", "1", "if", "not", "ker_size", "%", "2", "else", "ker_size", "\n", "pad", "=", "(", "ker_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv_sa", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "ker_size", ",", "padding", "=", "pad", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv_sa", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_sa", ".", "bias", ",", "0", ")", "\n", "\n", "# channel attention", "\n", "rr", "=", "2", "\n", "self", ".", "fc1c", "=", "nn", ".", "Linear", "(", "out_channels", ",", "out_channels", "//", "rr", ")", "\n", "self", ".", "fc2c", "=", "nn", ".", "Linear", "(", "out_channels", "//", "rr", ",", "out_channels", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "fc1c", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc1c", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc2c", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc2c", ".", "bias", ",", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big.AttentionLayer.forward": [[329, 342], ["x.mean", "reco_layer_new_with_tcn_big.AttentionLayer.sigmoid", "y.mean().mean", "reco_layer_new_with_tcn_big.AttentionLayer.relu", "reco_layer_new_with_tcn_big.AttentionLayer.sigmoid", "reco_layer_new_with_tcn_big.AttentionLayer.conv_sa", "reco_layer_new_with_tcn_big.AttentionLayer.fc1c", "reco_layer_new_with_tcn_big.AttentionLayer.fc2c", "y.mean", "reco_layer_new_with_tcn_big.AttentionLayer.unsqueeze().unsqueeze", "reco_layer_new_with_tcn_big.AttentionLayer.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# N, C, H, W", "\n", "# spatial attention", "\n", "        ", "se", "=", "x", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "# N 1 H W", "\n", "se1", "=", "self", ".", "sigmoid", "(", "self", ".", "conv_sa", "(", "se", ")", ")", "\n", "y", "=", "x", "*", "se1", "+", "x", "\n", "\n", "# channel attention", "\n", "se", "=", "y", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "# N C", "\n", "se1", "=", "self", ".", "relu", "(", "self", ".", "fc1c", "(", "se", ")", ")", "\n", "se2", "=", "self", ".", "sigmoid", "(", "self", ".", "fc2c", "(", "se1", ")", ")", "\n", "y", "=", "y", "*", "se2", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "+", "y", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big.PositionalEncoding.__init__": [[345, 355], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "reco_layer_new_with_tcn_big.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log", "math.log", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "1024", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big.PositionalEncoding.forward": [[356, 359], ["x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", "x", ".", "size", "(", "0", ")", ",", ":", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big.DenseNet.__init__": [[362, 421], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "reco_layer_new_with_tcn_big.DenseNet.features.add_module", "reco_layer_new_with_tcn_big.DenseNet.features.add_module", "enumerate", "reco_layer_new_with_tcn_big.DenseNet.features.add_module", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "collections.OrderedDict", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "reco_layer_new_with_tcn_big.DenseNet.features.add_module", "reco_layer_new_with_tcn_big._DenseBlock", "reco_layer_new_with_tcn_big.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.reco.TCN.TemporalConvNet", "reco_layer_new_with_tcn_big.PositionalEncoding", "models.reco.SelfAttention.Decoder", "reco_layer_new_with_tcn_big.AttentionLayer", "reco_layer_new_with_tcn_big._Transition", "reco_layer_new_with_tcn_big.DenseNet.features.add_module", "int", "reco_layer_new_with_tcn_big._Transition", "reco_layer_new_with_tcn_big.DenseNet.features.add_module", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "4", ",", "8", ",", "8", ")", ",", "compression", "=", "0.7", ",", "\n", "num_init_features", "=", "512", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "\n", "num_classes", "=", "2704", ",", "efficient", "=", "False", ",", "is_english", "=", "False", ",", "is_TCN", "=", "True", ",", "is_transformer", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "0", "<", "compression", "<=", "1", ",", "'compression of densenet should be between 0 and 1'", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "is_TCN", "=", "is_TCN", "\n", "self", ".", "is_transformer", "=", "is_transformer", "\n", "if", "is_english", ":", "\n", "            ", "english_flag", "=", "1", "\n", "", "else", ":", "\n", "            ", "english_flag", "=", "0", "\n", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "num_init_features", ",", "num_init_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "]", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "\n", "            ", "self", ".", "features", ".", "add_module", "(", "'att%d'", "%", "(", "i", "+", "1", ")", ",", "AttentionLayer", "(", "num_features", ")", ")", "\n", "block", "=", "_DenseBlock", "(", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "efficient", "=", "efficient", ",", "\n", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "<", "len", "(", "block_config", ")", "-", "1", "-", "english_flag", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "int", "(", "num_features", "*", "compression", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "int", "(", "num_features", "*", "compression", ")", "\n", "", "else", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "int", "(", "num_features", "*", "compression", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "int", "(", "num_features", "*", "compression", ")", "\n", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm_final'", ",", "nn", ".", "BatchNorm2d", "(", "int", "(", "num_features", ")", ")", ")", "\n", "\n", "self", ".", "conv1d0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "1046", ",", "1024", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "if", "self", ".", "is_TCN", ":", "\n", "            ", "self", ".", "TCN", "=", "TemporalConvNet", "(", "1024", ",", "[", "1024", ",", "1024", ",", "1024", ",", "1024", "]", ",", "2", ",", "dropout", "=", "0", ")", "\n", "", "if", "self", ".", "is_transformer", ":", "\n", "            ", "self", ".", "position_encoding", "=", "PositionalEncoding", "(", ")", "\n", "self", ".", "multihead1", "=", "Decoder", "(", "1024", ",", "1024", ",", "16", ",", "4", ",", "0", ")", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big.DenseNet.forward": [[423, 443], ["reco_layer_new_with_tcn_big.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "reco_layer_new_with_tcn_big.DenseNet.permute", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "reco_layer_new_with_tcn_big.DenseNet.permute", "reco_layer_new_with_tcn_big.DenseNet.conv1d0", "reco_layer_new_with_tcn_big.DenseNet.permute", "reco_layer_new_with_tcn_big.DenseNet.permute", "reco_layer_new_with_tcn_big.DenseNet.classifier", "reco_layer_new_with_tcn_big.DenseNet.TCN", "reco_layer_new_with_tcn_big.DenseNet.position_encoding", "reco_layer_new_with_tcn_big.DenseNet.multihead1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "text_kernel_features", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "text_kernel_features", ")", "\n", "\n", "out", "=", "F", ".", "relu", "(", "features", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "out", "=", "self", ".", "conv1d0", "(", "out", ")", "\n", "\n", "if", "self", ".", "is_TCN", ":", "\n", "            ", "out", "=", "self", ".", "TCN", "(", "out", ")", "\n", "", "out", "=", "out", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "is_transformer", ":", "\n", "            ", "out", "=", "self", ".", "position_encoding", "(", "out", ")", "\n", "out", "=", "self", ".", "multihead1", "(", "out", ")", "\n", "\n", "", "out", "=", "out", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "out_char", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out_char", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.reco_layer_new_with_tcn_big._bn_function_factory": [[239, 246], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv", "relu", "norm"], "function", ["None"], ["def", "_bn_function_factory", "(", "norm", ",", "relu", ",", "conv", ")", ":", "\n", "    ", "def", "bn_function", "(", "*", "inputs", ")", ":", "\n", "        ", "concated_features", "=", "torch", ".", "cat", "(", "inputs", ",", "1", ")", "\n", "bottleneck_output", "=", "conv", "(", "relu", "(", "norm", "(", "concated_features", ")", ")", ")", "\n", "return", "bottleneck_output", "\n", "\n", "", "return", "bn_function", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.SelfAttention.LayerNorm.__init__": [[76, 81], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden", ")", ")", "\n", "self", ".", "variance_epsion", "=", "1e-5", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.SelfAttention.LayerNorm.forward": [[82, 88], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x \u4f20\u5165\u7684shape\u662f[L,N,E],\u5bf9E\u505aNorm", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsion", ")", "\n", "return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.SelfAttention.addAttention.__init__": [[92, 99], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "SelfAttention.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "num_heads", ")", ":", "\n", "        ", "super", "(", "addAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multihead", "=", "nn", ".", "MultiheadAttention", "(", "input_dim", ",", "num_heads", ")", "\n", "self", ".", "q_weight", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "k_weight", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "v_weight", "=", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", "\n", "self", ".", "ln", "=", "LayerNorm", "(", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.SelfAttention.addAttention.forward": [[100, 107], ["SelfAttention.addAttention.multihead", "SelfAttention.addAttention.ln", "SelfAttention.addAttention.q_weight", "SelfAttention.addAttention.k_weight", "SelfAttention.addAttention.v_weight"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "input", "# input shape: [L,N,E]", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "q_weight", "(", "input", ")", ",", "self", ".", "k_weight", "(", "input", ")", ",", "self", ".", "v_weight", "(", "input", ")", "\n", "multi_attention", ",", "_", "=", "self", ".", "multihead", "(", "q", ",", "k", ",", "v", ")", "# (L, N, E)", "\n", "output", "+=", "multi_attention", "\n", "output", "=", "self", ".", "ln", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.SelfAttention.attentionLayer.__init__": [[110, 117], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "SelfAttention.addAttention", "SelfAttention.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden", ",", "num_heads", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "attentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "liner1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden", ")", "\n", "self", ".", "liner2", "=", "nn", ".", "Linear", "(", "hidden", ",", "input_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "attention_block", "=", "addAttention", "(", "input_dim", ",", "num_heads", ")", "\n", "self", ".", "ln", "=", "LayerNorm", "(", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.SelfAttention.attentionLayer.forward": [[118, 124], ["SelfAttention.attentionLayer.attention_block", "SelfAttention.attentionLayer.liner2", "SelfAttention.attentionLayer.ln", "SelfAttention.attentionLayer.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "SelfAttention.attentionLayer.liner1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "attention_block", "=", "self", ".", "attention_block", "(", "input", ")", "\n", "output", "=", "attention_block", "\n", "feed_forward", "=", "self", ".", "liner2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "liner1", "(", "attention_block", ")", ")", ")", ")", "\n", "output", "+=", "feed_forward", "\n", "return", "self", ".", "ln", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.SelfAttention.Decoder.__init__": [[127, 132], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "SelfAttention.attentionLayer"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden", ",", "num_heads", ",", "layernam", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "attentionLayer", "(", "input_dim", ",", "hidden", ",", "num_heads", ",", "dropout", ")", "]", "*", "layernam", "\n", "self", ".", "decode", "=", "nn", ".", "Sequential", "(", "\n", "*", "layers", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.reco.SelfAttention.Decoder.forward": [[134, 137], ["SelfAttention.Decoder.decode"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "decode", "(", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPN.__init__": [[7, 61], ["torch.nn.Module.__init__", "kwargs.get", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone_out_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param backbone_out_channels: \u57fa\u7840\u7f51\u7edc\u8f93\u51fa\u7684\u7ef4\u5ea6\n        :param kwargs:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "result_num", "=", "kwargs", ".", "get", "(", "'result_num'", ",", "6", ")", "\n", "inplace", "=", "True", "\n", "conv_out", "=", "256", "\n", "# reduce layers", "\n", "self", ".", "reduce_conv_c2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "backbone_out_channels", "[", "0", "]", ",", "conv_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", ")", "\n", "self", ".", "reduce_conv_c3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "backbone_out_channels", "[", "1", "]", ",", "conv_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", ")", "\n", "self", ".", "reduce_conv_c4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "backbone_out_channels", "[", "2", "]", ",", "conv_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", ")", "\n", "\n", "self", ".", "reduce_conv_c5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "backbone_out_channels", "[", "3", "]", ",", "conv_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", ")", "\n", "# Smooth layers", "\n", "self", ".", "smooth_p4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "conv_out", ",", "conv_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", ")", "\n", "self", ".", "smooth_p3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "conv_out", ",", "conv_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", ")", "\n", "self", ".", "smooth_p2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "conv_out", ",", "conv_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "conv_out", "*", "4", ",", "conv_out", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", ")", "\n", "self", ".", "out_conv", "=", "nn", ".", "Conv2d", "(", "conv_out", "*", "2", ",", "result_num", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPN.forward": [[62, 78], ["segmentation_head.FPN.reduce_conv_c5", "segmentation_head.FPN._upsample_add", "segmentation_head.FPN.smooth_p4", "segmentation_head.FPN._upsample_add", "segmentation_head.FPN.smooth_p3", "segmentation_head.FPN._upsample_add", "segmentation_head.FPN.smooth_p2", "segmentation_head.FPN._upsample_cat", "segmentation_head.FPN.conv", "segmentation_head.FPN.out_conv", "segmentation_head.FPN.reduce_conv_c4", "segmentation_head.FPN.reduce_conv_c3", "segmentation_head.FPN.reduce_conv_c2"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPN._upsample_cat"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c2", ",", "c3", ",", "c4", ",", "c5", "=", "x", "\n", "# Top-down", "\n", "\n", "p5", "=", "self", ".", "reduce_conv_c5", "(", "c5", ")", "\n", "p4", "=", "self", ".", "_upsample_add", "(", "p5", ",", "self", ".", "reduce_conv_c4", "(", "c4", ")", ")", "\n", "p4", "=", "self", ".", "smooth_p4", "(", "p4", ")", "\n", "p3", "=", "self", ".", "_upsample_add", "(", "p4", ",", "self", ".", "reduce_conv_c3", "(", "c3", ")", ")", "\n", "p3", "=", "self", ".", "smooth_p3", "(", "p3", ")", "\n", "p2", "=", "self", ".", "_upsample_add", "(", "p3", ",", "self", ".", "reduce_conv_c2", "(", "c2", ")", ")", "\n", "p2", "=", "self", ".", "smooth_p2", "(", "p2", ")", "\n", "\n", "x", "=", "self", ".", "_upsample_cat", "(", "p2", ",", "p3", ",", "p4", ",", "p5", ")", "\n", "feature", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "out_conv", "(", "feature", ")", "\n", "return", "x", ",", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPN._upsample_add": [[79, 81], ["torch.interpolate", "torch.interpolate", "y.size"], "methods", ["None"], ["", "def", "_upsample_add", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "y", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPN._upsample_cat": [[82, 88], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "p2.size"], "methods", ["None"], ["", "def", "_upsample_cat", "(", "self", ",", "p2", ",", "p3", ",", "p4", ",", "p5", ")", ":", "\n", "        ", "h", ",", "w", "=", "p2", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "p3", "=", "F", ".", "interpolate", "(", "p3", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "p4", "=", "F", ".", "interpolate", "(", "p4", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "p5", "=", "F", ".", "interpolate", "(", "p5", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "return", "torch", ".", "cat", "(", "[", "p2", ",", "p3", ",", "p4", ",", "p5", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM_FFM.__init__": [[91, 124], ["torch.nn.Module.__init__", "kwargs.get", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "segmentation_head.FPEM_FFM.fpems.append", "segmentation_head.FPEM"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone_out_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        PANnet\n        :param backbone_out_channels: \u57fa\u7840\u7f51\u7edc\u8f93\u51fa\u7684\u7ef4\u5ea6\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "fpem_repeat", "=", "kwargs", ".", "get", "(", "'fpem_repeat'", ",", "2", ")", "\n", "conv_out", "=", "128", "\n", "# reduce layers", "\n", "self", ".", "reduce_conv_c2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "backbone_out_channels", "[", "0", "]", ",", "out_channels", "=", "conv_out", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "reduce_conv_c3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "backbone_out_channels", "[", "1", "]", ",", "out_channels", "=", "conv_out", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "reduce_conv_c4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "backbone_out_channels", "[", "2", "]", ",", "out_channels", "=", "conv_out", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "reduce_conv_c5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "backbone_out_channels", "[", "3", "]", ",", "out_channels", "=", "conv_out", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "fpems", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "fpem_repeat", ")", ":", "\n", "            ", "self", ".", "fpems", ".", "append", "(", "FPEM", "(", "conv_out", ")", ")", "\n", "", "self", ".", "out_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "conv_out", "*", "4", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM_FFM.forward": [[125, 155], ["segmentation_head.FPEM_FFM.reduce_conv_c2", "segmentation_head.FPEM_FFM.reduce_conv_c3", "segmentation_head.FPEM_FFM.reduce_conv_c4", "segmentation_head.FPEM_FFM.reduce_conv_c5", "enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "segmentation_head.FPEM_FFM.out_conv", "fpem", "c2_ffm.size", "c2_ffm.size", "c2_ffm.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c2", ",", "c3", ",", "c4", ",", "c5", "=", "x", "\n", "# reduce channel", "\n", "c2", "=", "self", ".", "reduce_conv_c2", "(", "c2", ")", "\n", "c3", "=", "self", ".", "reduce_conv_c3", "(", "c3", ")", "\n", "c4", "=", "self", ".", "reduce_conv_c4", "(", "c4", ")", "\n", "c5", "=", "self", ".", "reduce_conv_c5", "(", "c5", ")", "\n", "\n", "# FPEM", "\n", "for", "i", ",", "fpem", "in", "enumerate", "(", "self", ".", "fpems", ")", ":", "\n", "            ", "c2", ",", "c3", ",", "c4", ",", "c5", "=", "fpem", "(", "c2", ",", "c3", ",", "c4", ",", "c5", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "c2_ffm", "=", "c2", "\n", "c3_ffm", "=", "c3", "\n", "c4_ffm", "=", "c4", "\n", "c5_ffm", "=", "c5", "\n", "", "else", ":", "\n", "                ", "c2_ffm", "+=", "c2", "\n", "c3_ffm", "+=", "c3", "\n", "c4_ffm", "+=", "c4", "\n", "c5_ffm", "+=", "c5", "\n", "\n", "# FFM", "\n", "", "", "c5", "=", "F", ".", "interpolate", "(", "c5_ffm", ",", "c2_ffm", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "c4", "=", "F", ".", "interpolate", "(", "c4_ffm", ",", "c2_ffm", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "c3", "=", "F", ".", "interpolate", "(", "c3_ffm", ",", "c2_ffm", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "[", "c2_ffm", ",", "c3", ",", "c4", ",", "c5", "]", ",", "dim", "=", "1", ")", "\n", "\n", "y", "=", "self", ".", "out_conv", "(", "feature", ")", "\n", "return", "y", ",", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM.__init__": [[158, 166], ["torch.nn.Module.__init__", "segmentation_head.SeparableConv2d", "segmentation_head.SeparableConv2d", "segmentation_head.SeparableConv2d", "segmentation_head.SeparableConv2d", "segmentation_head.SeparableConv2d", "segmentation_head.SeparableConv2d"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up_add1", "=", "SeparableConv2d", "(", "in_channels", ",", "in_channels", ",", "1", ")", "\n", "self", ".", "up_add2", "=", "SeparableConv2d", "(", "in_channels", ",", "in_channels", ",", "1", ")", "\n", "self", ".", "up_add3", "=", "SeparableConv2d", "(", "in_channels", ",", "in_channels", ",", "1", ")", "\n", "self", ".", "down_add1", "=", "SeparableConv2d", "(", "in_channels", ",", "in_channels", ",", "2", ")", "\n", "self", ".", "down_add2", "=", "SeparableConv2d", "(", "in_channels", ",", "in_channels", ",", "2", ")", "\n", "self", ".", "down_add3", "=", "SeparableConv2d", "(", "in_channels", ",", "in_channels", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM.forward": [[167, 178], ["segmentation_head.FPEM.up_add1", "segmentation_head.FPEM.up_add2", "segmentation_head.FPEM.up_add3", "segmentation_head.FPEM.down_add1", "segmentation_head.FPEM.down_add2", "segmentation_head.FPEM.down_add3", "segmentation_head.FPEM._upsample_add", "segmentation_head.FPEM._upsample_add", "segmentation_head.FPEM._upsample_add", "segmentation_head.FPEM._upsample_add", "segmentation_head.FPEM._upsample_add", "segmentation_head.FPEM._upsample_add"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add"], ["", "def", "forward", "(", "self", ",", "c2", ",", "c3", ",", "c4", ",", "c5", ")", ":", "\n", "# up\u9636\u6bb5", "\n", "        ", "c4", "=", "self", ".", "up_add1", "(", "self", ".", "_upsample_add", "(", "c5", ",", "c4", ")", ")", "\n", "c3", "=", "self", ".", "up_add2", "(", "self", ".", "_upsample_add", "(", "c4", ",", "c3", ")", ")", "\n", "c2", "=", "self", ".", "up_add3", "(", "self", ".", "_upsample_add", "(", "c3", ",", "c2", ")", ")", "\n", "\n", "# down \u9636\u6bb5", "\n", "c3", "=", "self", ".", "down_add1", "(", "self", ".", "_upsample_add", "(", "c3", ",", "c2", ")", ")", "\n", "c4", "=", "self", ".", "down_add2", "(", "self", ".", "_upsample_add", "(", "c4", ",", "c3", ")", ")", "\n", "c5", "=", "self", ".", "down_add3", "(", "self", ".", "_upsample_add", "(", "c5", ",", "c4", ")", ")", "\n", "return", "c2", ",", "c3", ",", "c4", ",", "c5", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.FPEM._upsample_add": [[179, 181], ["torch.interpolate", "torch.interpolate", "y.size"], "methods", ["None"], ["", "def", "_upsample_add", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "y", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.SeparableConv2d.__init__": [[184, 192], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "depthwise_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "stride", "=", "stride", ",", "groups", "=", "in_channels", ")", "\n", "self", ".", "pointwise_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.segmentation_head.SeparableConv2d.forward": [[193, 199], ["segmentation_head.SeparableConv2d.depthwise_conv", "segmentation_head.SeparableConv2d.pointwise_conv", "segmentation_head.SeparableConv2d.bn", "segmentation_head.SeparableConv2d.relu"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.InvertedResidual.depthwise_conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "depthwise_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.InvertedResidual.__init__": [[35, 64], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "ValueError", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shufflenetv2.InvertedResidual.depthwise_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shufflenetv2.InvertedResidual.depthwise_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.InvertedResidual.depthwise_conv", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.InvertedResidual.depthwise_conv"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "(", "1", "<=", "stride", "<=", "3", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'illegal stride value'", ")", "\n", "", "self", ".", "stride", "=", "stride", "\n", "\n", "branch_features", "=", "oup", "//", "2", "\n", "assert", "(", "self", ".", "stride", "!=", "1", ")", "or", "(", "inp", "==", "branch_features", "<<", "1", ")", "\n", "\n", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "depthwise_conv", "(", "inp", ",", "inp", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", "if", "(", "self", ".", "stride", ">", "1", ")", "else", "branch_features", ",", "\n", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "self", ".", "depthwise_conv", "(", "branch_features", ",", "branch_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "branch_features", ",", "branch_features", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.InvertedResidual.depthwise_conv": [[66, 69], ["torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "depthwise_conv", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "bias", ",", "groups", "=", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.InvertedResidual.forward": [[70, 80], ["shufflenetv2.channel_shuffle", "x.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.InvertedResidual.branch2", "shufflenetv2.InvertedResidual.branch1", "shufflenetv2.InvertedResidual.branch2"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.channel_shuffle"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "x1", ",", "x2", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "self", ".", "branch2", "(", "x2", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "branch1", "(", "x", ")", ",", "self", ".", "branch2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.ShuffleNetV2.__init__": [[83, 117], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "zip", "torch.Sequential", "torch.Sequential", "len", "ValueError", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "range", "setattr", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shufflenetv2.InvertedResidual", "seq.append", "torch.Sequential", "torch.Sequential", "shufflenetv2.InvertedResidual"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stages_repeats", ",", "stages_out_channels", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "stages_repeats", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_repeats as list of 3 positive ints'", ")", "\n", "", "if", "len", "(", "stages_out_channels", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected stages_out_channels as list of 5 positive ints'", ")", "\n", "", "self", ".", "_stage_out_channels", "=", "stages_out_channels", "\n", "\n", "input_channels", "=", "3", "\n", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "stage_names", "=", "[", "'stage{}'", ".", "format", "(", "i", ")", "for", "i", "in", "[", "2", ",", "3", ",", "4", "]", "]", "\n", "for", "name", ",", "repeats", ",", "output_channels", "in", "zip", "(", "\n", "stage_names", ",", "stages_repeats", ",", "self", ".", "_stage_out_channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "seq", "=", "[", "InvertedResidual", "(", "input_channels", ",", "output_channels", ",", "2", ")", "]", "\n", "for", "i", "in", "range", "(", "repeats", "-", "1", ")", ":", "\n", "                ", "seq", ".", "append", "(", "InvertedResidual", "(", "output_channels", ",", "output_channels", ",", "1", ")", ")", "\n", "", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "seq", ")", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "-", "1", "]", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.ShuffleNetV2.forward": [[119, 127], ["shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.maxpool", "shufflenetv2.ShuffleNetV2.stage2", "shufflenetv2.ShuffleNetV2.stage3", "shufflenetv2.ShuffleNetV2.stage4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "c2", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "c3", "=", "self", ".", "stage2", "(", "c2", ")", "\n", "c4", "=", "self", ".", "stage3", "(", "c3", ")", "\n", "c5", "=", "self", ".", "stage4", "(", "c4", ")", "\n", "# c5 = self.conv5(c5)", "\n", "return", "c2", ",", "c3", ",", "c4", ",", "c5", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.channel_shuffle": [[18, 32], ["x.view.data.size", "x.view.view", "torch.transpose().contiguous", "torch.transpose().contiguous", "x.view.view", "torch.transpose", "torch.transpose"], "function", ["None"], ["def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "    ", "batchsize", ",", "num_channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "height", ",", "width", ")", "\n", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2._shufflenetv2": [[129, 141], ["shufflenetv2.ShuffleNetV2", "NotImplementedError", "torchvision.models.utils.load_state_dict_from_url", "ShuffleNetV2.load_state_dict"], "function", ["None"], ["", "", "def", "_shufflenetv2", "(", "arch", ",", "pretrained", ",", "progress", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ShuffleNetV2", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "model_url", "=", "model_urls", "[", "arch", "]", "\n", "if", "model_url", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'pretrained {} is not supported as of now'", ".", "format", "(", "arch", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.shufflenet_v2_x0_5": [[143, 155], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2._shufflenetv2"], ["", "def", "shufflenet_v2_x0_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 0.5x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x0.5'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "48", ",", "96", ",", "192", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.shufflenet_v2_x1_0": [[157, 169], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2._shufflenetv2"], ["", "def", "shufflenet_v2_x1_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 1.0x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x1.0'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "116", ",", "232", ",", "464", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.shufflenet_v2_x1_5": [[171, 183], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2._shufflenetv2"], ["", "def", "shufflenet_v2_x1_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 1.5x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x1.5'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "176", ",", "352", ",", "704", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2.shufflenet_v2_x2_0": [[185, 197], ["shufflenetv2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.shufflenetv2._shufflenetv2"], ["", "def", "shufflenet_v2_x2_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 2.0x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x2.0'", ",", "pretrained", ",", "progress", ",", "\n", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "244", ",", "488", ",", "976", ",", "2048", "]", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.BasicBlock.__init__": [[32, 49], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.conv3x3", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.BasicBlock.forward": [[50, 67], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.Bottleneck.__init__": [[72, 88], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.conv1x1", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.conv3x3", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.Bottleneck.forward": [[89, 110], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.ResNet.__init__": [[114, 162], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.ResNet._make_layer": [[163, 186], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.ResNet.forward": [[187, 199], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "# x = self.maxpool(x)", "\n", "\n", "c2", "=", "self", ".", "layer1", "(", "x", ")", "\n", "c3", "=", "self", ".", "layer2", "(", "c2", ")", "\n", "c4", "=", "self", ".", "layer3", "(", "c3", ")", "\n", "c5", "=", "self", ".", "layer4", "(", "c4", ")", "\n", "# print(c2.shape,c3.shape,c4.shape,c5.shape)", "\n", "return", "c2", ",", "c3", ",", "c4", ",", "c5", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.conv1x1": [[24, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet._resnet": [[201, 209], ["resnet.ResNet", "torchvision.models.utils.load_state_dict_from_url", "ResNet.load_state_dict", "print"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'load pretrained models from imagenet'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.resnet18": [[211, 220], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.resnet34": [[222, 231], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.resnet50": [[233, 242], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.resnet101": [[244, 253], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.resnet152": [[255, 264], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.resnext50_32x4d": [[266, 277], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-50 32x4d model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet.resnext101_32x8d": [[279, 290], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-101 32x8d model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__": [[29, 47], ["torch.nn.Module.__init__", "backbone_model"], "methods", ["home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_config", ":", "dict", ")", ":", "\n", "        ", "\"\"\"\n        PANnet\n        :param model_config: \u6a21\u578b\u914d\u7f6e\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "backbone", "=", "model_config", "[", "'backbone'", "]", "\n", "pretrained", "=", "model_config", "[", "'pretrained'", "]", "\n", "segmentation_head", "=", "model_config", "[", "'segmentation_head'", "]", "\n", "\n", "assert", "backbone", "in", "backbone_dict", ",", "'backbone must in: {}'", ".", "format", "(", "backbone_dict", ")", "\n", "assert", "segmentation_head", "in", "segmentation_head_dict", ",", "'segmentation_head must in: {}'", ".", "format", "(", "\n", "segmentation_head_dict", ")", "\n", "\n", "backbone_model", ",", "backbone_out", "=", "backbone_dict", "[", "backbone", "]", "[", "'models'", "]", ",", "backbone_dict", "[", "backbone", "]", "[", "'out'", "]", "\n", "self", ".", "backbone", "=", "backbone_model", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "segmentation_head", "=", "segmentation_head_dict", "[", "segmentation_head", "]", "(", "backbone_out", ",", "**", "model_config", ")", "\n", "self", ".", "name", "=", "'{}_{}'", ".", "format", "(", "backbone", ",", "segmentation_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grsgth_Offline-Chinese-Handwriting-Text-Page-Spotter-with-Text-Kernel.dect.pannet.Model.forward": [[48, 59], ["x.size", "pannet.Model.backbone", "pannet.Model.segmentation_head", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "backbone_out", "=", "self", ".", "backbone", "(", "x", ")", "\n", "# for b in backbone_out:", "\n", "#     print(b.shape)", "\n", "segmentation_head_out", ",", "feature", "=", "self", ".", "segmentation_head", "(", "backbone_out", ")", "\n", "\n", "segmentation_head_out", "=", "torch", ".", "squeeze", "(", "segmentation_head_out", ",", "1", ")", "\n", "\n", "# y = F.interpolate(segmentation_head_out, size=(H, W), mode='bilinear', align_corners=True)", "\n", "return", "segmentation_head_out", ",", "feature", "\n", "\n"]]}