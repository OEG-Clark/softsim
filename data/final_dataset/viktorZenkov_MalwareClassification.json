{"home.repos.pwc.inspect_result.viktorZenkov_MalwareClassification.None.textParsingCode.addLine": [[21, 25], ["mainStrings.append"], "function", ["None"], ["def", "addLine", "(", "tokens", ")", ":", "\n", "\n", "    ", "if", "(", "tokens", ".", "hexcommands", "!=", "''", ")", ":", "\n", "        ", "mainStrings", ".", "append", "(", "tokens", ".", "textcommands", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viktorZenkov_MalwareClassification.None.classifyingTextNUMBERS.plot_confusion_matrix": [[37, 57], ["print", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.ylabel", "matplotlib.xlabel", "len", "cm.max", "range", "range", "matplotlib.text", "cm.astype", "format", "cm.sum"], "function", ["None"], ["def", "plot_confusion_matrix", "(", "cm", ",", "classes", ",", "normalize", "=", "False", ",", "title", "=", "'Confusion Matrix'", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "print", "(", "cm", ")", "\n", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "45", ",", "fontsize", "=", "22", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ",", "fontsize", "=", "22", ")", "\n", "\n", "fmt", "=", "'.2f'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "horizontalalignment", "=", "\"center\"", ",", "color", "=", "'white'", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "'black'", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'True label'", ",", "fontsize", "=", "25", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ",", "fontsize", "=", "25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viktorZenkov_MalwareClassification.None.classifyingTextENSEMBLE.plot_confusion_matrix": [[34, 54], ["print", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.ylabel", "matplotlib.xlabel", "len", "cm.max", "range", "range", "matplotlib.text", "cm.astype", "format", "cm.sum"], "function", ["None"], ["def", "plot_confusion_matrix", "(", "cm", ",", "classes", ",", "normalize", "=", "False", ",", "title", "=", "'Confusion Matrix'", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "print", "(", "cm", ")", "\n", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "45", ",", "fontsize", "=", "22", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ",", "fontsize", "=", "22", ")", "\n", "\n", "fmt", "=", "'.2f'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "horizontalalignment", "=", "\"center\"", ",", "color", "=", "'white'", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "'black'", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'True label'", ",", "fontsize", "=", "25", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ",", "fontsize", "=", "25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viktorZenkov_MalwareClassification.None.hexParsingCode.addLine": [[22, 26], ["mainStrings.append"], "function", ["None"], ["def", "addLine", "(", "tokens", ")", ":", "\n", "\n", "    ", "if", "(", "tokens", ".", "hexcommands", "!=", "''", ")", ":", "\n", "        ", "mainStrings", ".", "append", "(", "' '", ".", "join", "(", "tokens", ".", "hexcommands", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viktorZenkov_MalwareClassification.None.classifyingFunctions.load_data": [[34, 156], ["sorted", "print", "print", "print", "list", "numpy.array", "list", "numpy.array", "numpy.random.seed", "numpy.arange", "numpy.random.shuffle", "math.floor", "print", "warnings.warn", "kwargs.pop", "TypeError", "os.listdir", "time.time", "open", "open.read", "np.array.append", "time.time", "open", "time.time", "len", "sequence._remove_long_seq", "max", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "time.time", "f_name.endswith", "lineEntry.split", "np.array.append", "np.array.append", "list", "int", "ValueError", "str", "max", "len", "int", "xelem.split", "str"], "function", ["None"], ["def", "load_data", "(", "path", "=", "'imdb.npz'", ",", "num_words", "=", "None", ",", "skip_top", "=", "0", ",", "\n", "maxlen", "=", "None", ",", "seed", "=", "113", ",", "\n", "start_char", "=", "1", ",", "oov_char", "=", "2", ",", "index_from", "=", "3", ",", "numOrHex", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "# Legacy support", "\n", "    ", "if", "'nb_words'", "in", "kwargs", ":", "\n", "        ", "warnings", ".", "warn", "(", "'The `nb_words` argument in `load_data` '", "\n", "'has been renamed `num_words`.'", ")", "\n", "num_words", "=", "kwargs", ".", "pop", "(", "'nb_words'", ")", "\n", "", "if", "kwargs", ":", "\n", "        ", "raise", "TypeError", "(", "'Unrecognized keyword arguments: '", "+", "str", "(", "kwargs", ")", ")", "\n", "\n", "#if we want to use only a few files, set limitNumFiles to True", "\n", "", "numFiles", "=", "100", "\n", "limitNumFiles", "=", "False", "\n", "\n", "f_path", "=", "''", "\n", "\n", "#the paths of the text or hex integer files", "\n", "if", "numOrHex", ":", "\n", "        ", "f_path", "=", "'/asmtextOutputIntegers'", "\n", "", "else", ":", "\n", "        ", "f_path", "=", "'/asmhexOutputIntegers'", "\n", "\n", "#get the files in order and keep only txt files", "\n", "", "allFileNames", "=", "sorted", "(", "os", ".", "listdir", "(", "f_path", ")", ")", "\n", "allFileNames", "=", "[", "f_name", "for", "f_name", "in", "allFileNames", "if", "f_name", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "xs", "=", "[", "]", "\n", "\n", "print", "(", "\"starting reading files at \"", ",", "time", ".", "time", "(", ")", ")", "\n", "\n", "counter", "=", "0", "\n", "\n", "#read in each file and puts its contents into an element of xs", "\n", "for", "f_name", "in", "allFileNames", ":", "\n", "\n", "#small number of files code:", "\n", "        ", "counter", "+=", "1", "\n", "if", "(", "limitNumFiles", "and", "counter", ">", "numFiles", ")", ":", "\n", "            ", "break", "\n", "\n", "", "f", "=", "open", "(", "f_path", "+", "'/'", "+", "f_name", ",", "encoding", "=", "'latin-1'", ")", "\n", "tempS", "=", "f", ".", "read", "(", ")", "\n", "xs", ".", "append", "(", "tempS", ")", "\n", "\n", "", "print", "(", "\"finished reading files at \"", ",", "time", ".", "time", "(", ")", ")", "\n", "\n", "#read in the file labels and create a dictionary", "\n", "dictionaryLabels", "=", "{", "}", "\n", "with", "open", "(", "'trainLabels.csv'", ",", "'r'", ")", "as", "dicFile", ":", "\n", "        ", "for", "lineEntry", "in", "dicFile", ":", "\n", "            ", "bothWords", "=", "lineEntry", ".", "split", "(", "','", ")", "\n", "dictionaryLabels", "[", "bothWords", "[", "0", "]", "[", "1", ":", "-", "1", "]", "]", "=", "bothWords", "[", "1", "]", "[", ":", "-", "1", "]", "\n", "\n", "\n", "", "", "labels", "=", "[", "]", "\n", "\n", "counter", "=", "0", "\n", "\n", "#create a labels array that matches the xs array", "\n", "for", "f_name", "in", "allFileNames", ":", "\n", "\n", "#small number of files code:", "\n", "        ", "counter", "+=", "1", "\n", "if", "(", "limitNumFiles", "and", "counter", ">", "numFiles", ")", ":", "\n", "            ", "break", "\n", "\n", "#the numbers here are based on removing \"Numbers.txt\" or \"hexIntegers.txt\" from the end of the files", "\n", "", "if", "numOrHex", ":", "\n", "            ", "labels", ".", "append", "(", "dictionaryLabels", "[", "f_name", "[", ":", "-", "11", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "labels", ".", "append", "(", "dictionaryLabels", "[", "f_name", "[", ":", "-", "15", "]", "]", ")", "\n", "\n", "", "", "print", "(", "\"starting quantifying files at \"", ",", "time", ".", "time", "(", ")", ")", "\n", "\n", "#turn the strings into lists of integers", "\n", "xs", "=", "list", "(", "list", "(", "int", "(", "w", ")", "for", "w", "in", "xelem", ".", "split", "(", ")", ")", "for", "xelem", "in", "xs", ")", "\n", "xs", "=", "np", ".", "array", "(", "xs", ")", "\n", "\n", "#turn the strings into integers    ", "\n", "labels", "=", "list", "(", "int", "(", "w", ")", "for", "w", "in", "labels", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "\n", "#randomly sort the xs and labels arrays in the same way", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "xs", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "xs", "=", "xs", "[", "indices", "]", "\n", "labels", "=", "labels", "[", "indices", "]", "\n", "\n", "#add a start character to the beginning of each file array and increase all the file integers by index_from", "\n", "if", "start_char", "is", "not", "None", ":", "\n", "        ", "xs", "=", "[", "[", "start_char", "]", "+", "[", "w", "+", "index_from", "for", "w", "in", "x", "]", "for", "x", "in", "xs", "]", "\n", "", "elif", "index_from", ":", "\n", "        ", "xs", "=", "[", "[", "w", "+", "index_from", "for", "w", "in", "x", "]", "for", "x", "in", "xs", "]", "\n", "\n", "#remove integers after maxlen length in each file", "\n", "", "if", "maxlen", ":", "\n", "        ", "xs", ",", "labels", "=", "_remove_long_seq", "(", "maxlen", ",", "xs", ",", "labels", ")", "\n", "if", "not", "xs", ":", "\n", "            ", "raise", "ValueError", "(", "'After filtering for sequences shorter than maxlen='", "+", "\n", "str", "(", "maxlen", ")", "+", "', no sequence was kept. '", "\n", "'Increase maxlen.'", ")", "\n", "", "", "if", "not", "num_words", ":", "\n", "        ", "num_words", "=", "max", "(", "[", "max", "(", "x", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n", "# by convention, use 2 as OOV word", "\n", "# reserve 'index_from' (=3 by default) characters:", "\n", "# 0 (padding), 1 (start), 2 (OOV)", "\n", "", "if", "oov_char", "is", "not", "None", ":", "\n", "        ", "xs", "=", "[", "[", "w", "if", "(", "skip_top", "<=", "w", "<", "num_words", ")", "else", "oov_char", "for", "w", "in", "x", "]", "for", "x", "in", "xs", "]", "\n", "", "else", ":", "\n", "        ", "xs", "=", "[", "[", "w", "for", "w", "in", "x", "if", "skip_top", "<=", "w", "<", "num_words", "]", "for", "x", "in", "xs", "]", "\n", "\n", "#put 2/10 of the files into test data and the rest as training.", "\n", "", "idx", "=", "math", ".", "floor", "(", "len", "(", "xs", ")", "*", "8", "/", "10", ")", "\n", "x_train", ",", "y_train", "=", "np", ".", "array", "(", "xs", "[", ":", "idx", "]", ")", ",", "np", ".", "array", "(", "labels", "[", ":", "idx", "]", ")", "\n", "x_test", ",", "y_test", "=", "np", ".", "array", "(", "xs", "[", "idx", ":", "]", ")", ",", "np", ".", "array", "(", "labels", "[", "idx", ":", "]", ")", "\n", "\n", "print", "(", "\"finished quantifying files at \"", ",", "time", ".", "time", "(", ")", ")", "\n", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viktorZenkov_MalwareClassification.None.classifyingFunctions.get_word_index": [[158, 171], ["open", "json.load"], "function", ["None"], ["", "def", "get_word_index", "(", "path", "=", "'imdb_word_index.json'", ")", ":", "\n", "    ", "\"\"\"Retrieves the dictionary mapping words to word indices.\n    # Arguments\n        path: where to cache the data (relative to `~/.keras/dataset`).\n    # Returns\n        The word index dictionary.\n    \"\"\"", "\n", "# path = get_file(path,", "\n", "#origin='https://s3.amazonaws.com/text-datasets/imdb_word_index.json',", "\n", "#file_hash='bfafd718b763782e994055a2d397834f')", "\n", "path", "=", "\"imdb_word_index.json\"", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.viktorZenkov_MalwareClassification.None.classifyingTextMULTI.plot_confusion_matrix": [[35, 55], ["print", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.ylabel", "matplotlib.xlabel", "len", "cm.max", "range", "range", "matplotlib.text", "cm.astype", "format", "cm.sum"], "function", ["None"], ["def", "plot_confusion_matrix", "(", "cm", ",", "classes", ",", "normalize", "=", "False", ",", "title", "=", "'Confusion Matrix'", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "print", "(", "cm", ")", "\n", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "45", ",", "fontsize", "=", "22", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ",", "fontsize", "=", "22", ")", "\n", "\n", "fmt", "=", "'.2f'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "horizontalalignment", "=", "\"center\"", ",", "color", "=", "'white'", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "'black'", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'True label'", ",", "fontsize", "=", "25", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ",", "fontsize", "=", "25", ")", "\n", "\n"]]}