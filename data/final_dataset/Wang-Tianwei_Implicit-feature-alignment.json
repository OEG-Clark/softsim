{"home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.distort": [[10, 45], ["list", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "numpy.arange", "warp_mls.WarpMLS", "warp_mls.WarpMLS.generate", "list.append", "list.append", "list.append", "list.append", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.generate"], ["def", "distort", "(", "src", ",", "segment", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "src", ".", "shape", "[", ":", "2", "]", "\n", "\n", "cut", "=", "img_w", "//", "segment", "\n", "thresh", "=", "cut", "//", "3", "\n", "# thresh = img_h // segment // 3", "\n", "# thresh = img_h // 5", "\n", "\n", "src_pts", "=", "list", "(", ")", "\n", "dst_pts", "=", "list", "(", ")", "\n", "\n", "src_pts", ".", "append", "(", "[", "0", ",", "0", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "img_w", ",", "0", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "img_w", ",", "img_h", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "0", ",", "img_h", "]", ")", "\n", "\n", "dst_pts", ".", "append", "(", "[", "np", ".", "random", ".", "randint", "(", "thresh", ")", ",", "np", ".", "random", ".", "randint", "(", "thresh", ")", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "img_w", "-", "np", ".", "random", ".", "randint", "(", "thresh", ")", ",", "np", ".", "random", ".", "randint", "(", "thresh", ")", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "img_w", "-", "np", ".", "random", ".", "randint", "(", "thresh", ")", ",", "img_h", "-", "np", ".", "random", ".", "randint", "(", "thresh", ")", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "np", ".", "random", ".", "randint", "(", "thresh", ")", ",", "img_h", "-", "np", ".", "random", ".", "randint", "(", "thresh", ")", "]", ")", "\n", "\n", "half_thresh", "=", "thresh", "*", "0.5", "\n", "\n", "for", "cut_idx", "in", "np", ".", "arange", "(", "1", ",", "segment", ",", "1", ")", ":", "\n", "        ", "src_pts", ".", "append", "(", "[", "cut", "*", "cut_idx", ",", "0", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "cut", "*", "cut_idx", ",", "img_h", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "cut", "*", "cut_idx", "+", "np", ".", "random", ".", "randint", "(", "thresh", ")", "-", "half_thresh", ",", "\n", "np", ".", "random", ".", "randint", "(", "thresh", ")", "-", "half_thresh", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "cut", "*", "cut_idx", "+", "np", ".", "random", ".", "randint", "(", "thresh", ")", "-", "half_thresh", ",", "\n", "img_h", "+", "np", ".", "random", ".", "randint", "(", "thresh", ")", "-", "half_thresh", "]", ")", "\n", "\n", "", "trans", "=", "WarpMLS", "(", "src", ",", "src_pts", ",", "dst_pts", ",", "img_w", ",", "img_h", ")", "\n", "dst", "=", "trans", ".", "generate", "(", ")", "\n", "\n", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.stretch": [[47, 81], ["list", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "numpy.arange", "warp_mls.WarpMLS", "warp_mls.WarpMLS.generate", "list.append", "list.append", "list.append", "list.append", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.generate"], ["", "def", "stretch", "(", "src", ",", "segment", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "src", ".", "shape", "[", ":", "2", "]", "\n", "\n", "cut", "=", "img_w", "//", "segment", "\n", "thresh", "=", "cut", "*", "4", "//", "5", "\n", "# thresh = img_h // segment // 3", "\n", "# thresh = img_h // 5", "\n", "\n", "src_pts", "=", "list", "(", ")", "\n", "dst_pts", "=", "list", "(", ")", "\n", "\n", "src_pts", ".", "append", "(", "[", "0", ",", "0", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "img_w", ",", "0", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "img_w", ",", "img_h", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "0", ",", "img_h", "]", ")", "\n", "\n", "dst_pts", ".", "append", "(", "[", "0", ",", "0", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "img_w", ",", "0", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "img_w", ",", "img_h", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "0", ",", "img_h", "]", ")", "\n", "\n", "half_thresh", "=", "thresh", "*", "0.5", "\n", "\n", "for", "cut_idx", "in", "np", ".", "arange", "(", "1", ",", "segment", ",", "1", ")", ":", "\n", "        ", "move", "=", "np", ".", "random", ".", "randint", "(", "thresh", ")", "-", "half_thresh", "\n", "src_pts", ".", "append", "(", "[", "cut", "*", "cut_idx", ",", "0", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "cut", "*", "cut_idx", ",", "img_h", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "cut", "*", "cut_idx", "+", "move", ",", "0", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "cut", "*", "cut_idx", "+", "move", ",", "img_h", "]", ")", "\n", "\n", "", "trans", "=", "WarpMLS", "(", "src", ",", "src_pts", ",", "dst_pts", ",", "img_w", ",", "img_h", ")", "\n", "dst", "=", "trans", ".", "generate", "(", ")", "\n", "\n", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.perspective": [[83, 105], ["list", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "warp_mls.WarpMLS", "warp_mls.WarpMLS.generate", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.generate"], ["", "def", "perspective", "(", "src", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "src", ".", "shape", "[", ":", "2", "]", "\n", "\n", "thresh", "=", "img_h", "//", "2", "\n", "\n", "src_pts", "=", "list", "(", ")", "\n", "dst_pts", "=", "list", "(", ")", "\n", "\n", "src_pts", ".", "append", "(", "[", "0", ",", "0", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "img_w", ",", "0", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "img_w", ",", "img_h", "]", ")", "\n", "src_pts", ".", "append", "(", "[", "0", ",", "img_h", "]", ")", "\n", "\n", "dst_pts", ".", "append", "(", "[", "0", ",", "np", ".", "random", ".", "randint", "(", "thresh", ")", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "img_w", ",", "np", ".", "random", ".", "randint", "(", "thresh", ")", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "img_w", ",", "img_h", "-", "np", ".", "random", ".", "randint", "(", "thresh", ")", "]", ")", "\n", "dst_pts", ".", "append", "(", "[", "0", ",", "img_h", "-", "np", ".", "random", ".", "randint", "(", "thresh", ")", "]", ")", "\n", "\n", "trans", "=", "WarpMLS", "(", "src", ",", "src_pts", ",", "dst_pts", ",", "img_w", ",", "img_h", ")", "\n", "dst", "=", "trans", ".", "generate", "(", ")", "\n", "\n", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.ExCTC.WH_ACE.__init__": [[15, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "WH_ACE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "dense_pred", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.ExCTC.WH_ACE.forward": [[17, 37], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "target.size", "dense_prob.sum.sum.size", "torch.zeros().type_as().float", "torch.zeros().type_as().float", "torch.zeros().type_as().float", "torch.zeros().type_as().float", "torch.zeros().type_as().float", "torch.zeros().type_as().float", "torch.zeros().type_as().float", "torch.zeros().type_as().float", "torch.zeros().type_as().float", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "dense_prob.sum.sum.sum", "torch.ones().type_as().float", "torch.ones().type_as().float", "torch.ones().type_as().float", "torch.ones().type_as().float", "torch.ones().type_as().float", "torch.ones().type_as().float", "torch.ones().type_as().float", "torch.ones().type_as().float", "torch.ones().type_as().float", "target[].tolist", "range", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "len", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dense_pred", ",", "target", ")", ":", "\n", "        ", "dense_prob", "=", "torch", ".", "softmax", "(", "dense_pred", ",", "dim", "=", "2", ")", "\n", "nB", "=", "target", ".", "size", "(", "0", ")", "\n", "nClass", "=", "dense_prob", ".", "size", "(", "-", "1", ")", "\n", "hollow_params", "=", "[", "]", "\n", "target_wasserstein", "=", "torch", ".", "zeros", "(", "nB", ",", "nClass", ")", ".", "type_as", "(", "dense_prob", ".", "data", ")", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "nB", ")", ":", "\n", "            ", "hollow_param", "=", "torch", ".", "ones", "(", "nClass", ")", ".", "type_as", "(", "dense_prob", ".", "data", ")", ".", "float", "(", ")", "\n", "hollow_param", "[", "0", "]", "=", "0", "\n", "tt", "=", "target", "[", "i", "]", ".", "tolist", "(", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "tt", ")", ")", ":", "\n", "                ", "if", "tt", "[", "j", "]", "==", "0", ":", "\n", "                    ", "break", "\n", "", "hollow_param", "[", "tt", "[", "j", "]", "]", "=", "0", "\n", "", "hollow_params", ".", "append", "(", "hollow_param", ")", "\n", "", "hollow_params", "=", "torch", ".", "stack", "(", "hollow_params", ",", "dim", "=", "0", ")", "\n", "dense_prob", "=", "dense_prob", ".", "sum", "(", "0", ")", "\n", "# pdb.set_trace()", "\n", "whace_loss", "=", "(", "dense_prob", "*", "hollow_params", ")", ".", "mean", "(", ")", "\n", "return", "whace_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.ExCTC.CTC.__init__": [[39, 42], ["torch.Module.__init__", "torch.CTCLoss", "torch.CTCLoss", "torch.CTCLoss"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CTC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CTCLoss", "(", "reduction", "=", "'none'", ",", "zero_infinity", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "label", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.ExCTC.CTC.forward": [[42, 61], ["torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "numpy.zeros", "range", "numpy.array", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "ExCTC.CTC.criterion().mean", "numpy.array.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ExCTC.CTC.criterion", "input.size", "input.log_softmax", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "label", ")", ":", "\n", "        ", "batch_size", ",", "total_len", "=", "label", ".", "size", "(", ")", "\n", "label_len", "=", "np", ".", "zeros", "(", "batch_size", ")", "\n", "label_seq", "=", "[", "]", "\n", "label_total", "=", "0", ";", "\n", "for", "bn", "in", "range", "(", "batch_size", ")", ":", "\n", "          ", "for", "tn", "in", "range", "(", "total_len", ")", ":", "\n", "            ", "if", "label", "[", "bn", "]", "[", "tn", "]", "!=", "-", "1", ":", "\n", "              ", "label_len", "[", "bn", "]", "=", "label_len", "[", "bn", "]", "+", "1", "\n", "label_total", "+=", "1", "\n", "label_seq", ".", "append", "(", "int", "(", "label", "[", "bn", "]", "[", "tn", "]", ")", "+", "1", ")", "\n", "", "", "", "label_seq", "=", "np", ".", "array", "(", "label_seq", ")", "\n", "label_len", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "label_len", ")", ".", "type", "(", "torch", ".", "IntTensor", ")", ",", "requires_grad", "=", "False", ")", "\n", "label", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "label_seq", ")", ".", "type", "(", "torch", ".", "IntTensor", ")", ",", "requires_grad", "=", "False", ")", "\n", "probs_sizes", "=", "Variable", "(", "torch", ".", "IntTensor", "(", "[", "input", ".", "size", "(", "0", ")", "]", "*", "batch_size", ")", ",", "requires_grad", "=", "False", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "loss", "=", "self", ".", "criterion", "(", "input", ".", "log_softmax", "(", "2", ")", ",", "label", ".", "cuda", "(", ")", ",", "probs_sizes", ",", "label_len", ")", ".", "mean", "(", ")", "/", "total_len", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.ExCTC.SqueezeNet.__init__": [[66, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ")", ":", "\n", "        ", "super", "(", "SqueezeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f2map", "=", "nn", ".", "Conv2d", "(", "in_size", ",", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "temperature", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.ExCTC.SqueezeNet.forward": [[70, 76], ["torch.relu", "torch.relu", "torch.relu", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ExCTC.SqueezeNet.bn", "torch.softmax.var().mean", "ExCTC.SqueezeNet.f2map", "torch.softmax.var"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "temperature", "=", "1", ")", ":", "\n", "        ", "squeezemap", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "f2map", "(", "input", ")", ")", ")", "\n", "concentrate_loss", "=", "1", "/", "squeezemap", ".", "var", "(", "2", ")", ".", "mean", "(", ")", "\n", "squeezemap", "=", "F", ".", "softmax", "(", "squeezemap", "/", "temperature", ",", "2", ")", "\n", "output", "=", "torch", ".", "sum", "(", "input", "*", "squeezemap", ",", "2", ")", "\n", "return", "output", ",", "squeezemap", ",", "concentrate_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.ExCTC.ExCTC.__init__": [[78, 85], ["torch.Module.__init__", "resnet.resnet18", "ExCTC.SqueezeNet", "torch.Linear", "torch.Linear", "torch.Linear", "ExCTC.WH_ACE", "ExCTC.CTC"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.resnet18"], ["    ", "def", "__init__", "(", "self", ",", "nClass", ")", ":", "\n", "        ", "super", "(", "ExCTC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "F", "=", "resnet", ".", "resnet18", "(", ")", "\n", "self", ".", "S", "=", "SqueezeNet", "(", "512", ")", "\n", "self", ".", "C", "=", "nn", ".", "Linear", "(", "512", ",", "nClass", ")", "\n", "self", ".", "WH_ACE", "=", "WH_ACE", "(", ")", "\n", "self", ".", "CTC", "=", "CTC", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "label", ",", "temperature", "=", "1", ",", "IFA_inference", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.ExCTC.ExCTC.forward": [[85, 105], ["ExCTC.ExCTC.F", "torch.dropout", "torch.dropout", "torch.dropout", "ExCTC.ExCTC.S", "features_1D.permute.permute.permute", "ExCTC.ExCTC.C", "ExCTC.ExCTC.CTC", "ExCTC.ExCTC.C", "ExCTC.ExCTC.WH_ACE", "ExCTC.ExCTC.F", "features.permute.permute.permute", "ExCTC.ExCTC.C", "features.permute.permute.view().permute", "features.permute.permute.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "label", ",", "temperature", "=", "1", ",", "IFA_inference", "=", "False", ")", ":", "\n", "# IFA_inference: set as True for full-page inference", "\n", "        ", "if", "not", "IFA_inference", ":", "\n", "            ", "features", "=", "self", ".", "F", "(", "input", ")", "\n", "features", "=", "F", ".", "dropout", "(", "features", ",", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "features_1D", ",", "squeezemap", ",", "concentrate_loss", "=", "self", ".", "S", "(", "features", ",", "temperature", ")", "\n", "features_1D", "=", "features_1D", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "output", "=", "self", ".", "C", "(", "features_1D", ")", "\n", "ctc_loss", "=", "self", ".", "CTC", "(", "output", ",", "label", ")", "\n", "\n", "nB", ",", "nC", ",", "nH", ",", "nW", "=", "features", ".", "shape", "\n", "outputdense", "=", "self", ".", "C", "(", "features", ".", "view", "(", "nB", ",", "nC", ",", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "whace_loss", "=", "self", ".", "WH_ACE", "(", "outputdense", ",", "label", "+", "1", ")", "\n", "return", "output", ",", "squeezemap", ",", "ctc_loss", ",", "whace_loss", ",", "concentrate_loss", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "F", "(", "input", ")", "\n", "features", "=", "features", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "output", "=", "self", ".", "C", "(", "features", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.__init__": [[9, 20], ["len", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "src", ",", "src_pts", ",", "dst_pts", ",", "dst_w", ",", "dst_h", ",", "trans_ratio", "=", "1.", ")", ":", "\n", "        ", "self", ".", "src", "=", "src", "\n", "self", ".", "src_pts", "=", "src_pts", "\n", "self", ".", "dst_pts", "=", "dst_pts", "\n", "self", ".", "pt_count", "=", "len", "(", "self", ".", "dst_pts", ")", "\n", "self", ".", "dst_w", "=", "dst_w", "\n", "self", ".", "dst_h", "=", "dst_h", "\n", "self", ".", "trans_ratio", "=", "trans_ratio", "\n", "self", ".", "grid_size", "=", "100", "\n", "self", ".", "rdx", "=", "np", ".", "zeros", "(", "(", "self", ".", "dst_h", ",", "self", ".", "dst_w", ")", ")", "\n", "self", ".", "rdy", "=", "np", ".", "zeros", "(", "(", "self", ".", "dst_h", ",", "self", ".", "dst_w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.__bilinear_interp": [[21, 24], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__bilinear_interp", "(", "x", ",", "y", ",", "v11", ",", "v12", ",", "v21", ",", "v22", ")", ":", "\n", "        ", "return", "(", "v11", "*", "(", "1", "-", "y", ")", "+", "v12", "*", "y", ")", "*", "(", "1", "-", "x", ")", "+", "(", "v21", "*", "(", "1", "-", "y", ")", "+", "v22", "*", "y", ")", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.generate": [[25, 28], ["warp_mls.WarpMLS.calc_delta", "warp_mls.WarpMLS.gen_img"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.calc_delta", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.gen_img"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "self", ".", "calc_delta", "(", ")", "\n", "return", "self", ".", "gen_img", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.calc_delta": [[29, 105], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "range", "range", "numpy.array", "range", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "calc_delta", "(", "self", ")", ":", "\n", "        ", "w", "=", "np", ".", "zeros", "(", "self", ".", "pt_count", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "pt_count", "<", "2", ":", "\n", "            ", "return", "\n", "\n", "", "i", "=", "0", "\n", "while", "1", ":", "\n", "            ", "if", "self", ".", "dst_w", "<=", "i", "<", "self", ".", "dst_w", "+", "self", ".", "grid_size", "-", "1", ":", "\n", "                ", "i", "=", "self", ".", "dst_w", "-", "1", "\n", "", "elif", "i", ">=", "self", ".", "dst_w", ":", "\n", "                ", "break", "\n", "\n", "", "j", "=", "0", "\n", "while", "1", ":", "\n", "                ", "if", "self", ".", "dst_h", "<=", "j", "<", "self", ".", "dst_h", "+", "self", ".", "grid_size", "-", "1", ":", "\n", "                    ", "j", "=", "self", ".", "dst_h", "-", "1", "\n", "", "elif", "j", ">=", "self", ".", "dst_h", ":", "\n", "                    ", "break", "\n", "\n", "", "sw", "=", "0", "\n", "swp", "=", "np", ".", "zeros", "(", "2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "swq", "=", "np", ".", "zeros", "(", "2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "new_pt", "=", "np", ".", "zeros", "(", "2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cur_pt", "=", "np", ".", "array", "(", "[", "i", ",", "j", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "k", "=", "0", "\n", "for", "k", "in", "range", "(", "self", ".", "pt_count", ")", ":", "\n", "                    ", "if", "i", "==", "self", ".", "dst_pts", "[", "k", "]", "[", "0", "]", "and", "j", "==", "self", ".", "dst_pts", "[", "k", "]", "[", "1", "]", ":", "\n", "                        ", "break", "\n", "\n", "", "w", "[", "k", "]", "=", "1.", "/", "(", "(", "i", "-", "self", ".", "dst_pts", "[", "k", "]", "[", "0", "]", ")", "*", "(", "i", "-", "self", ".", "dst_pts", "[", "k", "]", "[", "0", "]", ")", "+", "\n", "(", "j", "-", "self", ".", "dst_pts", "[", "k", "]", "[", "1", "]", ")", "*", "(", "j", "-", "self", ".", "dst_pts", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "\n", "sw", "+=", "w", "[", "k", "]", "\n", "swp", "=", "swp", "+", "w", "[", "k", "]", "*", "np", ".", "array", "(", "self", ".", "dst_pts", "[", "k", "]", ")", "\n", "swq", "=", "swq", "+", "w", "[", "k", "]", "*", "np", ".", "array", "(", "self", ".", "src_pts", "[", "k", "]", ")", "\n", "\n", "", "if", "k", "==", "self", ".", "pt_count", "-", "1", ":", "\n", "                    ", "pstar", "=", "1", "/", "sw", "*", "swp", "\n", "qstar", "=", "1", "/", "sw", "*", "swq", "\n", "\n", "miu_s", "=", "0", "\n", "for", "k", "in", "range", "(", "self", ".", "pt_count", ")", ":", "\n", "                        ", "if", "i", "==", "self", ".", "dst_pts", "[", "k", "]", "[", "0", "]", "and", "j", "==", "self", ".", "dst_pts", "[", "k", "]", "[", "1", "]", ":", "\n", "                            ", "continue", "\n", "", "pt_i", "=", "self", ".", "dst_pts", "[", "k", "]", "-", "pstar", "\n", "miu_s", "+=", "w", "[", "k", "]", "*", "np", ".", "sum", "(", "pt_i", "*", "pt_i", ")", "\n", "\n", "", "cur_pt", "-=", "pstar", "\n", "cur_pt_j", "=", "np", ".", "array", "(", "[", "-", "cur_pt", "[", "1", "]", ",", "cur_pt", "[", "0", "]", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "pt_count", ")", ":", "\n", "                        ", "if", "i", "==", "self", ".", "dst_pts", "[", "k", "]", "[", "0", "]", "and", "j", "==", "self", ".", "dst_pts", "[", "k", "]", "[", "1", "]", ":", "\n", "                            ", "continue", "\n", "\n", "", "pt_i", "=", "self", ".", "dst_pts", "[", "k", "]", "-", "pstar", "\n", "pt_j", "=", "np", ".", "array", "(", "[", "-", "pt_i", "[", "1", "]", ",", "pt_i", "[", "0", "]", "]", ")", "\n", "\n", "tmp_pt", "=", "np", ".", "zeros", "(", "2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_pt", "[", "0", "]", "=", "np", ".", "sum", "(", "pt_i", "*", "cur_pt", ")", "*", "self", ".", "src_pts", "[", "k", "]", "[", "0", "]", "-", "np", ".", "sum", "(", "pt_j", "*", "cur_pt", ")", "*", "self", ".", "src_pts", "[", "k", "]", "[", "1", "]", "\n", "tmp_pt", "[", "1", "]", "=", "-", "np", ".", "sum", "(", "pt_i", "*", "cur_pt_j", ")", "*", "self", ".", "src_pts", "[", "k", "]", "[", "0", "]", "+", "np", ".", "sum", "(", "pt_j", "*", "cur_pt_j", ")", "*", "self", ".", "src_pts", "[", "k", "]", "[", "1", "]", "\n", "tmp_pt", "*=", "(", "w", "[", "k", "]", "/", "miu_s", ")", "\n", "new_pt", "+=", "tmp_pt", "\n", "\n", "", "new_pt", "+=", "qstar", "\n", "", "else", ":", "\n", "                    ", "new_pt", "=", "self", ".", "src_pts", "[", "k", "]", "\n", "\n", "", "self", ".", "rdx", "[", "j", ",", "i", "]", "=", "new_pt", "[", "0", "]", "-", "i", "\n", "self", ".", "rdy", "[", "j", ",", "i", "]", "=", "new_pt", "[", "1", "]", "-", "j", "\n", "\n", "j", "+=", "self", ".", "grid_size", "\n", "", "i", "+=", "self", ".", "grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.gen_img": [[106, 180], ["numpy.zeros_like", "numpy.arange", "numpy.clip", "numpy.array", "numpy.arange", "numpy.reshape", "numpy.reshape", "warp_mls.WarpMLS.__bilinear_interp", "warp_mls.WarpMLS.__bilinear_interp", "numpy.clip", "numpy.clip", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "warp_mls.WarpMLS.__bilinear_interp", "numpy.arange", "numpy.arange", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "len", "numpy.tile", "numpy.tile", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.__bilinear_interp", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.__bilinear_interp", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.warp_mls.WarpMLS.__bilinear_interp"], ["", "", "def", "gen_img", "(", "self", ")", ":", "\n", "        ", "src_h", ",", "src_w", "=", "self", ".", "src", ".", "shape", "[", ":", "2", "]", "\n", "dst", "=", "np", ".", "zeros_like", "(", "self", ".", "src", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "self", ".", "dst_h", ",", "self", ".", "grid_size", ")", ":", "\n", "            ", "for", "j", "in", "np", ".", "arange", "(", "0", ",", "self", ".", "dst_w", ",", "self", ".", "grid_size", ")", ":", "\n", "                ", "ni", "=", "i", "+", "self", ".", "grid_size", "\n", "nj", "=", "j", "+", "self", ".", "grid_size", "\n", "w", "=", "h", "=", "self", ".", "grid_size", "\n", "if", "ni", ">=", "self", ".", "dst_h", ":", "\n", "                    ", "ni", "=", "self", ".", "dst_h", "-", "1", "\n", "h", "=", "ni", "-", "i", "+", "1", "\n", "", "if", "nj", ">=", "self", ".", "dst_w", ":", "\n", "                    ", "nj", "=", "self", ".", "dst_w", "-", "1", "\n", "w", "=", "nj", "-", "j", "+", "1", "\n", "\n", "", "di", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "h", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "dj", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "w", ")", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "delta_x", "=", "self", ".", "__bilinear_interp", "(", "di", "/", "h", ",", "dj", "/", "w", ",", "\n", "self", ".", "rdx", "[", "i", ",", "j", "]", ",", "self", ".", "rdx", "[", "i", ",", "nj", "]", ",", "\n", "self", ".", "rdx", "[", "ni", ",", "j", "]", ",", "self", ".", "rdx", "[", "ni", ",", "nj", "]", ")", "\n", "delta_y", "=", "self", ".", "__bilinear_interp", "(", "di", "/", "h", ",", "dj", "/", "w", ",", "\n", "self", ".", "rdy", "[", "i", ",", "j", "]", ",", "self", ".", "rdy", "[", "i", ",", "nj", "]", ",", "\n", "self", ".", "rdy", "[", "ni", ",", "j", "]", ",", "self", ".", "rdy", "[", "ni", ",", "nj", "]", ")", "\n", "nx", "=", "j", "+", "dj", "+", "delta_x", "*", "self", ".", "trans_ratio", "\n", "ny", "=", "i", "+", "di", "+", "delta_y", "*", "self", ".", "trans_ratio", "\n", "nx", "=", "np", ".", "clip", "(", "nx", ",", "0", ",", "src_w", "-", "1", ")", "\n", "ny", "=", "np", ".", "clip", "(", "ny", ",", "0", ",", "src_h", "-", "1", ")", "\n", "nxi", "=", "np", ".", "array", "(", "np", ".", "floor", "(", "nx", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "nyi", "=", "np", ".", "array", "(", "np", ".", "floor", "(", "ny", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "nxi1", "=", "np", ".", "array", "(", "np", ".", "ceil", "(", "nx", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "nyi1", "=", "np", ".", "array", "(", "np", ".", "ceil", "(", "ny", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "if", "len", "(", "self", ".", "src", ".", "shape", ")", "==", "3", ":", "\n", "                    ", "x", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "ny", "-", "nyi", ",", "axis", "=", "-", "1", ")", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "y", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "nx", "-", "nxi", ",", "axis", "=", "-", "1", ")", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "ny", "-", "nyi", "\n", "y", "=", "nx", "-", "nxi", "\n", "", "dst", "[", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "=", "self", ".", "__bilinear_interp", "(", "x", ",", "\n", "y", ",", "\n", "self", ".", "src", "[", "nyi", ",", "nxi", "]", ",", "\n", "self", ".", "src", "[", "nyi", ",", "nxi1", "]", ",", "\n", "self", ".", "src", "[", "nyi1", ",", "nxi", "]", ",", "\n", "self", ".", "src", "[", "nyi1", ",", "nxi1", "]", "\n", ")", "\n", "\n", "# for di in range(h):", "\n", "#     for dj in range(w):", "\n", "#         # print(ni, nj, i, j)", "\n", "#         delta_x = self.__bilinear_interp(di / h, dj / w, self.rdx[i, j], self.rdx[i, nj],", "\n", "#                                          self.rdx[ni, j], self.rdx[ni, nj])", "\n", "#         delta_y = self.__bilinear_interp(di / h, dj / w, self.rdy[i, j], self.rdy[i, nj],", "\n", "#                                          self.rdy[ni, j], self.rdy[ni, nj])", "\n", "#         nx = j + dj + delta_x * self.trans_ratio", "\n", "#         ny = i + di + delta_y * self.trans_ratio", "\n", "#         nx = min(src_w - 1, max(0, nx))", "\n", "#         ny = min(src_h - 1, max(0, ny))", "\n", "#         nxi = int(nx)", "\n", "#         nyi = int(ny)", "\n", "#         nxi1 = math.ceil(nx)", "\n", "#         nyi1 = math.ceil(ny)", "\n", "#", "\n", "#         dst[i + di, j + dj] = self.__bilinear_interp(ny - nyi, nx - nxi,", "\n", "#                                                      self.src[nyi, nxi],", "\n", "#                                                      self.src[nyi, nxi1],", "\n", "#                                                      self.src[nyi1, nxi],", "\n", "#                                                      self.src[nyi1, nxi1]", "\n", "#                                                      )", "\n", "\n", "", "", "dst", "=", "np", ".", "clip", "(", "dst", ",", "0", ",", "255", ")", "\n", "dst", "=", "np", ".", "array", "(", "dst", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "return", "dst", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.main.display_cfgs": [[18, 29], ["print", "cfgs.showcfgs", "print", "cfgs.showcfgs", "print", "cfgs.showcfgs", "print", "cfgs.showcfgs", "print", "cfgs.showcfgs"], "function", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.cfgs.showcfgs", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.cfgs.showcfgs", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.cfgs.showcfgs", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.cfgs.showcfgs", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.cfgs.showcfgs"], ["def", "display_cfgs", "(", "models", ")", ":", "\n", "    ", "print", "(", "'global_cfgs'", ")", "\n", "cfgs", ".", "showcfgs", "(", "cfgs", ".", "global_cfgs", ")", "\n", "print", "(", "'dataset_cfgs'", ")", "\n", "cfgs", ".", "showcfgs", "(", "cfgs", ".", "dataset_cfgs", ")", "\n", "print", "(", "'net_cfgs'", ")", "\n", "cfgs", ".", "showcfgs", "(", "cfgs", ".", "net_cfgs", ")", "\n", "print", "(", "'optimizer_cfgs'", ")", "\n", "cfgs", ".", "showcfgs", "(", "cfgs", ".", "optimizer_cfgs", ")", "\n", "print", "(", "'saving_cfgs'", ")", "\n", "cfgs", ".", "showcfgs", "(", "cfgs", ".", "saving_cfgs", ")", "\n", "# for model in models:", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.main.load_dataset": [[32, 41], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "load_dataset", "(", ")", ":", "\n", "    ", "train_loader", "=", "None", "\n", "\n", "test_data_set", "=", "cfgs", ".", "dataset_cfgs", "[", "'dataset_test'", "]", "(", "**", "cfgs", ".", "dataset_cfgs", "[", "'dataset_test_args'", "]", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_data_set", ",", "**", "cfgs", ".", "dataset_cfgs", "[", "'dataloader_test'", "]", ")", "\n", "\n", "val_data_set", "=", "cfgs", ".", "dataset_cfgs", "[", "'dataset_val'", "]", "(", "**", "cfgs", ".", "dataset_cfgs", "[", "'dataset_val_args'", "]", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_data_set", ",", "**", "cfgs", ".", "dataset_cfgs", "[", "'dataloader_val'", "]", ")", "\n", "return", "(", "train_loader", ",", "test_loader", ",", "val_loader", ")", "\n", "#---------------------network", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.main.load_network": [[42, 49], ["model.cuda", "model.load_state_dict", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_network", "(", ")", ":", "\n", "    ", "model", "=", "cfgs", ".", "net_cfgs", "[", "'model'", "]", "(", "**", "cfgs", ".", "net_cfgs", "[", "'model_args'", "]", ")", "\n", "\n", "if", "cfgs", ".", "net_cfgs", "[", "'init_state_dict'", "]", "!=", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfgs", ".", "net_cfgs", "[", "'init_state_dict'", "]", ")", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "return", "(", "model", ")", "\n", "#----------------------optimizer", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.main.generate_optimizer": [[50, 58], ["model.parameters"], "function", ["None"], ["", "def", "generate_optimizer", "(", "model", ")", ":", "\n", "    ", "optimizer", "=", "cfgs", ".", "optimizer_cfgs", "[", "'optimizer_0'", "]", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "**", "cfgs", ".", "optimizer_cfgs", "[", "'optimizer_0_args'", "]", ")", "\n", "optimizer_scheduler", "=", "cfgs", ".", "optimizer_cfgs", "[", "'optimizer_0_scheduler'", "]", "(", "\n", "optimizer", ",", "\n", "**", "cfgs", ".", "optimizer_cfgs", "[", "'optimizer_0_scheduler_args'", "]", ")", "\n", "return", "optimizer", ",", "optimizer_scheduler", "\n", "#---------------------", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.main.show_squeeze": [[59, 72], ["data.size", "attention_maps.size", "cv2.cvtColor", "cv2.resize", "cv2.applyColorMap", "np.concatenate", "cv2.imwrite", "[].cpu().data.numpy", "[].cpu().data.numpy", "[].cpu", "[].cpu"], "function", ["None"], ["", "def", "show_squeeze", "(", "data", ",", "attention_maps", ",", "which", ",", "ep", ",", "it", ")", ":", "\n", "    ", "B", ",", "C", ",", "img_H", ",", "img_W", "=", "data", ".", "size", "(", ")", "\n", "B_", ",", "C_", ",", "img_H_", ",", "img_W_", "=", "attention_maps", ".", "size", "(", ")", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "\n", "image", "=", "(", "data", "[", "which", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "127.5", "+", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "attention_map", "=", "(", "attention_maps", "[", "which", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "attention_map", "=", "cv2", ".", "resize", "(", "attention_map", ",", "(", "img_W", ",", "img_H", ")", ")", "\n", "attention_map", "=", "cv2", ".", "applyColorMap", "(", "attention_map", ",", "cv2", ".", "COLORMAP_HOT", ")", "\n", "\n", "output", "=", "np", ".", "concatenate", "(", "(", "image", ",", "attention_map", ")", ",", "axis", "=", "0", ")", "\n", "cv2", ".", "imwrite", "(", "'SqueezeVis/image_{}_{}.jpg'", ".", "format", "(", "ep", ",", "it", ")", ",", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.main.show_fullpage": [[73, 102], ["torch.softmax", "torch.softmax", "torch.softmax", "cv2.cvtColor.astype", "cv2.resize", "cv2.cvtColor", "cv2.applyColorMap.astype", "cv2.resize", "cv2.applyColorMap", "[].squeeze", "range", "cv2.cvtColor", "np.concatenate", "cv2.imwrite", "image.size", "image.size", "image[].cpu().data.numpy", "int", "int", "[].squeeze.size", "range", "[].squeeze.size", "np.ones", "torch.softmax.topk", "torch.softmax.size", "torch.softmax.size", "int", "cv2.putText", "image[].cpu", "int"], "function", ["None"], ["", "def", "show_fullpage", "(", "image", ",", "output", ",", "idx", "=", "0", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "image", ".", "size", "(", "2", ")", ",", "image", ".", "size", "(", "3", ")", "\n", "output", "=", "torch", ".", "softmax", "(", "output", ",", "dim", "=", "-", "1", ")", "\n", "\n", "up_scale", "=", "2", "\n", "# input image", "\n", "input_image", "=", "255", "*", "image", "[", "0", ",", "0", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "input_image", "=", "input_image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "input_image", "=", "cv2", ".", "resize", "(", "input_image", ",", "(", "up_scale", "*", "img_w", ",", "up_scale", "*", "img_h", ")", ")", "\n", "input_image", "=", "cv2", ".", "cvtColor", "(", "input_image", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "# generate saliency map", "\n", "saliency_map", "=", "255", "*", "(", "1", "-", "output", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "saliency_map", "=", "saliency_map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "saliency_map", "=", "cv2", ".", "resize", "(", "saliency_map", ",", "(", "up_scale", "*", "img_w", ",", "up_scale", "*", "img_h", ")", ")", "\n", "saliency_map", "=", "cv2", ".", "applyColorMap", "(", "saliency_map", ",", "cv2", ".", "COLORMAP_HOT", ")", "\n", "# cv2.imwrite('saliency.jpg', saliency_map)", "\n", "# dense prediction map", "\n", "char_dict", "=", "cfgs", ".", "data_args", "[", "'DICT'", "]", "\n", "dense_pred", "=", "(", "np", ".", "ones", "(", "(", "img_h", "*", "up_scale", ",", "img_w", "*", "up_scale", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "char_idx", "=", "output", ".", "topk", "(", "1", ")", "[", "1", "]", ".", "squeeze", "(", ")", "\n", "x_", ",", "y_", "=", "int", "(", "img_w", "*", "up_scale", "/", "output", ".", "size", "(", "1", ")", ")", ",", "int", "(", "img_h", "*", "up_scale", "/", "output", ".", "size", "(", "0", ")", ")", "\n", "for", "x", "in", "range", "(", "0", ",", "char_idx", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "0", ",", "char_idx", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "int", "(", "char_idx", "[", "y", ",", "x", "]", ")", ">", "0", ":", "\n", "                ", "cv2", ".", "putText", "(", "dense_pred", ",", "char_dict", "[", "int", "(", "char_idx", "[", "y", ",", "x", "]", ")", "-", "1", "]", ",", "(", "(", "x", "+", "1", ")", "*", "x_", ",", "(", "y", "+", "1", ")", "*", "y_", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.8", ",", "(", "0", ")", ",", "1", ")", "\n", "", "", "", "dense_pred", "=", "cv2", ".", "cvtColor", "(", "dense_pred", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "# ", "\n", "show_img", "=", "np", ".", "concatenate", "(", "[", "input_image", ",", "saliency_map", ",", "dense_pred", "]", ",", "axis", "=", "0", ")", "\n", "cv2", ".", "imwrite", "(", "'FullpageVis/test_{0:04d}_img_saliency_densepred.jpg'", ".", "format", "(", "idx", ")", ",", "show_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.main.test": [[106, 149], ["model.eval", "utils.Sequence", "utils.CTC_AR_counter", "enumerate", "utils.CTC_AR_counter.show", "time.time", "enumerate", "utils.Sequence.show", "sample_batched[].squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "model", "utils.CTC_AR_counter.add_iter", "sample_batched[].squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "model", "utils.Sequence.", "utils.Sequence.parse", "enumerate", "main.show_fullpage", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "function", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.show", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.show", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.CTC_AR_counter.add_iter", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.parse", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.main.show_fullpage"], ["", "def", "test", "(", "test_loader", ",", "val_loader", ",", "model", ",", "tools", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "import", "datetime", "\n", "# start_time = datetime.datetime.now()", "\n", "parser", "=", "Sequence", "(", "cfgs", ".", "data_args", "[", "'DICT'", "]", ")", "\n", "val_parser", "=", "CTC_AR_counter", "(", ")", "\n", "\n", "loss_aver", "=", "0", "\n", "total_result", "=", "[", "0", "]", "*", "9", "\n", "diswert", "=", "0", "\n", "wlent", "=", "0", "\n", "# using line-level images as validation set", "\n", "for", "it", ",", "(", "sample_batched", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "inputs", "=", "sample_batched", "[", "'image'", "]", "\n", "labels", "=", "sample_batched", "[", "'label'", "]", ".", "squeeze", "(", "1", ")", "\n", "\n", "inputs", "=", "Variable", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "# output = model(inputs, labels, iseval=True)", "\n", "output", ",", "attnmap", ",", "ctc_loss", ",", "aceloss", ",", "concentrate_loss", "=", "model", "(", "inputs", ",", "labels", ")", "\n", "val_parser", ".", "add_iter", "(", "output", ",", "labels", ")", "\n", "", "val_parser", ".", "show", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# using full-page images as test set", "\n", "# for it, (sample_batched) in enumerate(tqdm(test_loader)):", "\n", "for", "it", ",", "(", "sample_batched", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "inputs", "=", "sample_batched", "[", "'image'", "]", "\n", "labels", "=", "sample_batched", "[", "'label'", "]", ".", "squeeze", "(", "1", ")", "\n", "\n", "inputs", "=", "Variable", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "output", "=", "model", "(", "inputs", ",", "labels", ",", "temperature", "=", "1", ",", "IFA_inference", "=", "True", ")", "\n", "parser", "(", "output", ",", "labels", ",", "inputs", ",", "iseval", "=", "True", ")", "\n", "prediction", ",", "result", ",", "diswer", ",", "wlen", "=", "parser", ".", "parse", "(", ")", "\n", "\n", "for", "i", ",", "ele", "in", "enumerate", "(", "result", ")", ":", "\n", "            ", "total_result", "[", "i", "]", "+=", "ele", "\n", "", "diswert", "+=", "diswer", "\n", "wlent", "+=", "wlen", "\n", "show_fullpage", "(", "inputs", ",", "output", ",", "it", ")", "\n", "# if it % 50 == 0:", "\n", "#     parser.show(it, False, start_time)", "\n", "", "parser", ".", "show", "(", "it", ",", "True", ",", "start_time", ")", "\n", "#---------------------", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.PadCollate.__init__": [[37, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "0", ",", "istrain", "=", "True", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "self", ".", "istrain", "=", "istrain", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.PadCollate.pad_collate": [[41, 55], ["max", "range", "batch[].keys", "map", "len", "IAM_data_loader.pad_tensor", "type", "torch.stack", "type", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.pad_tensor"], ["", "def", "pad_collate", "(", "self", ",", "batch", ")", ":", "\n", "# find longest sequence", "\n", "        ", "max_W", "=", "max", "(", "map", "(", "lambda", "x", ":", "x", "[", "'image'", "]", ".", "shape", "[", "2", "]", ",", "batch", ")", ")", "\n", "max_W", "=", "max_W", "+", "8", "-", "max_W", "%", "8", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ")", ":", "\n", "            ", "batch", "[", "i", "]", "[", "'image'", "]", "=", "pad_tensor", "(", "batch", "[", "i", "]", "[", "'image'", "]", ",", "pad", "=", "max_W", ",", "dim", "=", "2", ",", "istrain", "=", "self", ".", "istrain", ")", "\n", "# stack all", "\n", "", "output", "=", "{", "}", "\n", "for", "k", "in", "batch", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "if", "type", "(", "batch", "[", "0", "]", "[", "k", "]", ")", "==", "torch", ".", "Tensor", ":", "\n", "                ", "output", "[", "k", "]", "=", "torch", ".", "stack", "(", "[", "batch", "[", "i", "]", "[", "k", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "elif", "type", "(", "batch", "[", "0", "]", "[", "k", "]", ")", "==", "str", ":", "\n", "                ", "output", "[", "k", "]", "=", "[", "batch", "[", "i", "]", "[", "k", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ")", "]", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.PadCollate.__call__": [[56, 58], ["IAM_data_loader.PadCollate.pad_collate"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.PadCollate.pad_collate"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "pad_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.LineGenerate.__init__": [[61, 92], ["open", "f.readlines", "open", "f.readlines", "standard.append", "line.split", "elements[].split", "line.strip", "cv2.imread", "IAM_data_loader.LineGenerate.image.append", "IAM_data_loader.LineGenerate.label.append", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ImgList", ",", "ImgFolder", ",", "LabelFile", ",", "conH", ",", "conW", ",", "training", "=", "False", ")", ":", "\n", "        ", "self", ".", "training", "=", "training", "\n", "self", ".", "aug", "=", "cfgs", ".", "data_args", "[", "'AUG'", "]", "\n", "\n", "self", ".", "conH", "=", "conH", "\n", "self", ".", "conW", "=", "conW", "\n", "standard", "=", "[", "]", "\n", "with", "open", "(", "ImgList", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "standard", ".", "append", "(", "line", ".", "strip", "(", "'\\n'", ")", ")", "\n", "", "", "self", ".", "image", "=", "[", "]", "\n", "self", ".", "label", "=", "[", "]", "\n", "\n", "count", "=", "0", "\n", "with", "open", "(", "LabelFile", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "elements", "=", "line", ".", "split", "(", ")", "\n", "pth_ele", "=", "elements", "[", "0", "]", ".", "split", "(", "'-'", ")", "\n", "line_tag", "=", "'%s-%s'", "%", "(", "pth_ele", "[", "0", "]", ",", "pth_ele", "[", "1", "]", ")", "\n", "if", "line_tag", "in", "standard", ":", "\n", "                    ", "pth", "=", "ImgFolder", "+", "'%s/%s-%s/%s.png'", "%", "(", "pth_ele", "[", "0", "]", ",", "pth_ele", "[", "0", "]", ",", "pth_ele", "[", "1", "]", ",", "elements", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "pth", ",", "0", ")", "#see channel and type", "\n", "if", "img", "is", "not", "None", ":", "\n", "                        ", "self", ".", "image", ".", "append", "(", "img", ")", "\n", "self", ".", "label", ".", "append", "(", "elements", "[", "-", "1", "]", ")", "\n", "count", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "print", "(", "pth", ")", "\n", "print", "(", "'line error'", ")", "\n", "", "", "", "", "self", ".", "len", "=", "count", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.LineGenerate.get_len": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.LineGenerate.generate_line": [[96, 156], ["augment.perspective.astype", "numpy.random.randint", "numpy.random.randint", "int", "cv2.resize", "image.astype.astype.astype", "int", "cv2.resize", "image.astype.astype.astype", "torch.rand", "cv2.imwrite", "float", "float", "numpy.ones", "numpy.random.randint", "int", "numpy.ones", "numpy.random.randint", "int", "numpy.random.rand", "augment.distort", "numpy.random.rand", "augment.stretch", "numpy.random.rand", "augment.perspective", "numpy.random.rand", "cv2.imwrite", "float", "float", "max", "max", "int", "abs", "int", "abs", "numpy.random.randint", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.distort", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.stretch", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.perspective"], ["", "def", "generate_line", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "len", ")", "\n", "image", "=", "self", ".", "image", "[", "idx", "]", "\n", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "idx", "=", "self", ".", "idx", "\n", "image", "=", "self", ".", "image", "[", "idx", "]", "\n", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "self", ".", "idx", "+=", "1", "\n", "\n", "", "if", "self", ".", "idx", "==", "self", ".", "len", ":", "\n", "            ", "self", ".", "idx", "-=", "self", ".", "len", "\n", "\n", "", "h", ",", "w", "=", "image", ".", "shape", "\n", "\n", "if", "self", ".", "training", "and", "cfgs", ".", "data_args", "[", "'Scale'", "]", ":", "\n", "            ", "dsth", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "conH", "//", "3", ",", "self", ".", "conH", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "dsth", "=", "self", ".", "conH", "\n", "\n", "", "if", "float", "(", "h", ")", "/", "w", ">", "float", "(", "dsth", ")", "/", "self", ".", "conW", ":", "\n", "            ", "newW", "=", "int", "(", "w", "*", "dsth", "/", "float", "(", "h", ")", ")", "\n", "imageN", "=", "np", ".", "ones", "(", "(", "self", ".", "conH", ",", "newW", ")", ")", "*", "255", "\n", "if", "self", ".", "training", ":", "\n", "                ", "beginH", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "int", "(", "abs", "(", "self", ".", "conH", "-", "dsth", ")", ")", "+", "1", ")", "\n", "", "else", ":", "\n", "                ", "beginH", "=", "int", "(", "abs", "(", "self", ".", "conH", "-", "dsth", ")", "/", "2", ")", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "newW", ",", "dsth", ")", ")", "\n", "image", "=", "image", ".", "astype", "(", "'uint8'", ")", "\n", "imageN", "[", "beginH", ":", "beginH", "+", "dsth", "]", "=", "image", "\n", "", "else", ":", "\n", "            ", "newH", "=", "int", "(", "h", "*", "self", ".", "conW", "/", "float", "(", "w", ")", ")", "\n", "imageN", "=", "np", ".", "ones", "(", "(", "self", ".", "conH", ",", "self", ".", "conW", ")", ")", "*", "255", "\n", "if", "self", ".", "training", ":", "\n", "                ", "beginH", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "int", "(", "abs", "(", "self", ".", "conH", "-", "newH", ")", ")", "+", "1", ")", "\n", "", "else", ":", "\n", "                ", "beginH", "=", "int", "(", "abs", "(", "self", ".", "conH", "-", "newH", ")", "/", "2", ")", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "self", ".", "conW", ",", "newH", ")", ")", "\n", "image", "=", "image", ".", "astype", "(", "'uint8'", ")", "\n", "imageN", "[", "beginH", ":", "beginH", "+", "newH", "]", "=", "image", "\n", "\n", "", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "\n", "if", "self", ".", "training", "and", "cfgs", ".", "data_args", "[", "'AUG'", "]", "and", "imageN", ".", "shape", "[", "1", "]", ">", "50", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                ", "imageN", "=", "distort", "(", "imageN", ",", "max", "(", "2", ",", "imageN", ".", "shape", "[", "1", "]", "//", "imageN", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                ", "imageN", "=", "stretch", "(", "imageN", ",", "max", "(", "2", ",", "imageN", ".", "shape", "[", "1", "]", "//", "imageN", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                ", "imageN", "=", "perspective", "(", "imageN", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.01", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "'augsample/%04d.jpg'", "%", "np", ".", "random", ".", "randint", "(", "10000", ")", ",", "imageN", ")", "\n", "\n", "", "", "if", "torch", ".", "rand", "(", "1", ")", "<", "0.01", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "\"line_generate/%s.jpg\"", "%", "label", ",", "imageN", ")", "\n", "\n", "", "imageN", "=", "imageN", ".", "astype", "(", "'float32'", ")", "\n", "imageN", "=", "(", "imageN", "-", "127.5", ")", "/", "127.5", "\n", "return", "imageN", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMDataset.__init__": [[163, 181], ["IAM_data_loader.LineGenerate", "enumerate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ImgList", ",", "ImgFolder", ",", "LabelFile", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n        transform (callable, optional): Optional transform to be applied\n            on a sample.\n        \"\"\"", "\n", "self", ".", "training", "=", "False", "\n", "\n", "self", ".", "conW", "=", "cfgs", ".", "data_args", "[", "'WIDTH'", "]", "\n", "self", ".", "conH", "=", "cfgs", ".", "data_args", "[", "'HEIGHT'", "]", "\n", "self", ".", "LG", "=", "LineGenerate", "(", "ImgList", ",", "ImgFolder", ",", "LabelFile", ",", "self", ".", "conH", ",", "self", ".", "conW", ",", "self", ".", "training", ")", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "self", ".", "alphabet", "=", "cfgs", ".", "data_args", "[", "'DICT'", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "alphabet", ")", ":", "\n", "            ", "self", ".", "dict", "[", "item", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMDataset.__len__": [[182, 184], ["IAM_data_loader.IAMDataset.LG.get_len"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.WordGenerate.get_len"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "LG", ".", "get_len", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMDataset.__getitem__": [[186, 206], ["IAM_data_loader.IAMDataset.LG.generate_line", "label.astype.astype.astype", "numpy.zeros", "imageN.reshape.reshape.reshape", "pdb.set_trace", "torch.from_numpy", "torch.from_numpy", "pdb.set_trace", "len"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.LineGenerate.generate_line"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "imageN", ",", "label", "=", "self", ".", "LG", ".", "generate_line", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "text", "=", "[", "self", ".", "dict", "[", "char", "]", "for", "char", "in", "label", "]", "\n", "", "except", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "label", "=", "np", ".", "zeros", "(", "(", "1", ",", "cfgs", ".", "data_args", "[", "'FINAL_LEN'", "]", ")", ")", "-", "1", "\n", "label", "[", "0", ",", ":", "len", "(", "text", ")", "]", "=", "text", "\n", "label", "=", "label", ".", "astype", "(", "'int'", ")", "\n", "\n", "try", ":", "\n", "            ", "imageN", "=", "imageN", ".", "reshape", "(", "1", ",", "imageN", ".", "shape", "[", "0", "]", ",", "imageN", ".", "shape", "[", "1", "]", ")", "\n", "sample", "=", "{", "'image'", ":", "torch", ".", "from_numpy", "(", "imageN", ")", ",", "'label'", ":", "torch", ".", "from_numpy", "(", "label", ")", "}", "\n", "", "except", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMDataset_Fullpage.__init__": [[226, 266], ["open().readlines", "open().readlines", "enumerate", "len", "l.split", "file.strip.strip.strip", "IAM_data_loader.IAMDataset_Fullpage.image.append", "IAM_data_loader.IAMDataset_Fullpage.label.append", "open", "lsplit[].strip", "lsplit[].strip", "open", "cv2.imread", "lsplit[].split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ImgList", ",", "ImgFolder", ",", "LabelFile", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n        transform (callable, optional): Optional transform to be applied\n            on a sample.\n        \"\"\"", "\n", "self", ".", "training", "=", "False", "\n", "\n", "self", ".", "conW", "=", "cfgs", ".", "data_args", "[", "'WIDTH'", "]", "\n", "self", ".", "conH", "=", "cfgs", ".", "data_args", "[", "'HEIGHT'", "]", "\n", "\n", "self", ".", "image", "=", "[", "]", "\n", "self", ".", "label", "=", "[", "]", "\n", "\n", "IAMLine", "=", "open", "(", "LabelFile", ")", ".", "readlines", "(", ")", "\n", "IAMLine_dict", "=", "{", "}", "\n", "for", "l", "in", "IAMLine", ":", "\n", "            ", "lsplit", "=", "l", ".", "split", "(", "' '", ")", "\n", "filename", "=", "'-'", ".", "join", "(", "lsplit", "[", "0", "]", ".", "split", "(", "'-'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "filename", "not", "in", "IAMLine_dict", ":", "\n", "                ", "IAMLine_dict", "[", "filename", "]", "=", "lsplit", "[", "-", "1", "]", ".", "strip", "(", "'\\n'", ")", "\n", "", "else", ":", "\n", "                ", "IAMLine_dict", "[", "filename", "]", "+=", "'|'", "\n", "IAMLine_dict", "[", "filename", "]", "+=", "lsplit", "[", "-", "1", "]", ".", "strip", "(", "'\\n'", ")", "\n", "\n", "", "", "for", "file", "in", "open", "(", "ImgList", ")", ".", "readlines", "(", ")", ":", "\n", "            ", "file", "=", "file", ".", "strip", "(", "'\\n'", ")", "\n", "imagepath", "=", "ImgFolder", "+", "file", "+", "'.png'", "\n", "self", ".", "image", ".", "append", "(", "cv2", ".", "imread", "(", "imagepath", ",", "0", ")", ")", "\n", "self", ".", "label", ".", "append", "(", "IAMLine_dict", "[", "file", "]", ")", "\n", "\n", "", "self", ".", "dict", "=", "{", "}", "\n", "self", ".", "alphabet", "=", "cfgs", ".", "data_args", "[", "'DICT'", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "alphabet", ")", ":", "\n", "            ", "self", ".", "dict", "[", "item", "]", "=", "i", "\n", "\n", "", "self", ".", "len", "=", "len", "(", "self", ".", "image", ")", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMDataset_Fullpage.__len__": [[267, 269], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMDataset_Fullpage.__getitem__": [[270, 313], ["label.astype.astype.replace", "label.astype.astype.astype", "numpy.array", "image.astype.astype.astype", "int", "int", "cv2.resize", "imageN.reshape.reshape.reshape", "numpy.random.randint", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "pdb.set_trace", "len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "len", ")", "\n", "image", "=", "self", ".", "image", "[", "idx", "]", "\n", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "idx", "=", "self", ".", "idx", "\n", "image", "=", "self", ".", "image", "[", "idx", "]", "\n", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "self", ".", "idx", "+=", "1", "\n", "\n", "", "label", "=", "label", ".", "replace", "(", "' '", ",", "'|'", ")", "\n", "\n", "if", "self", ".", "idx", "==", "self", ".", "len", ":", "\n", "            ", "self", ".", "idx", "-=", "self", ".", "len", "\n", "\n", "", "try", ":", "\n", "            ", "text", "=", "[", "self", ".", "dict", "[", "char", "]", "for", "char", "in", "label", "]", "\n", "", "except", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "label", "=", "np", ".", "zeros", "(", "len", "(", "text", ")", ")", "-", "1", "\n", "label", "[", ":", "len", "(", "text", ")", "]", "=", "text", "\n", "label", "=", "label", ".", "astype", "(", "'int'", ")", "\n", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "image", "=", "image", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# aspect_ratio = resize_ratio(image)", "\n", "aspect_ratio", "=", "0.54", "\n", "# print(aspect_ratio)", "\n", "imageN", "=", "(", "image", "-", "127.5", ")", "/", "127.5", "\n", "wnew", "=", "int", "(", "imageN", ".", "shape", "[", "1", "]", "*", "aspect_ratio", ")", "\n", "hnew", "=", "int", "(", "imageN", ".", "shape", "[", "0", "]", "*", "aspect_ratio", ")", "\n", "wnew", "=", "wnew", "+", "8", "-", "wnew", "%", "8", "\n", "hnew", "=", "hnew", "+", "8", "-", "hnew", "%", "8", "\n", "imageN", "=", "cv2", ".", "resize", "(", "imageN", ",", "(", "wnew", ",", "hnew", ")", ")", "\n", "\n", "conH", ",", "conW", "=", "imageN", ".", "shape", "\n", "imageN", "=", "imageN", ".", "reshape", "(", "1", ",", "conH", ",", "conW", ")", "\n", "\n", "sample", "=", "{", "'image'", ":", "torch", ".", "from_numpy", "(", "imageN", ")", ",", "'label'", ":", "torch", ".", "from_numpy", "(", "label", ")", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.WordGenerate.__init__": [[316, 356], ["print", "print", "open", "f.readlines", "open", "f.readlines", "standard.append", "line.split", "elements[].split", "line.strip", "cv2.imread", "IAM_data_loader.WordGenerate.image.append", "IAM_data_loader.WordGenerate.label.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ImgList", ",", "WordFolder", ",", "WordLabel", ",", "conH", ",", "conW", ")", ":", "\n", "\n", "        ", "print", "(", "'load word'", ")", "\n", "self", ".", "conH", "=", "conH", "\n", "self", ".", "conW", "=", "conW", "\n", "standard", "=", "[", "]", "\n", "with", "open", "(", "ImgList", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "standard", ".", "append", "(", "line", ".", "strip", "(", "'\\n'", ")", ")", "\n", "", "", "self", ".", "image", "=", "[", "]", "\n", "self", ".", "label", "=", "[", "]", "\n", "\n", "self", ".", "eng_chars", "=", "'ACBEDGFIHKJMLONQPSRUTWVYXZacbedgfihkjmlonqpsrutwvyxz'", "\n", "# IAMWord = '/media/dlvc/StoringDisk1/kpi/0001_code/0003_exctciam/0000_data/words.txt'", "\n", "count", "=", "0", "\n", "with", "open", "(", "WordLabel", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "elements", "=", "line", ".", "split", "(", ")", "\n", "pth_ele", "=", "elements", "[", "0", "]", ".", "split", "(", "'-'", ")", "\n", "line_tag", "=", "'%s-%s'", "%", "(", "pth_ele", "[", "0", "]", ",", "pth_ele", "[", "1", "]", ")", "\n", "if", "line_tag", "in", "standard", ":", "\n", "                    ", "pth", "=", "WordFolder", "+", "'%s/%s-%s/%s.png'", "%", "(", "pth_ele", "[", "0", "]", ",", "pth_ele", "[", "0", "]", ",", "pth_ele", "[", "1", "]", ",", "elements", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "pth", ",", "0", ")", "#see channel and type", "\n", "if", "img", "is", "not", "None", "and", "elements", "[", "1", "]", "==", "'ok'", ":", "\n", "                        ", "labeltmp", "=", "''", ".", "join", "(", "elements", "[", "8", ":", "]", ")", "\n", "used", "=", "True", "\n", "for", "c", "in", "labeltmp", ":", "\n", "                            ", "if", "c", "not", "in", "self", ".", "eng_chars", ":", "\n", "                                ", "used", "=", "False", "\n", "break", "\n", "", "", "if", "used", ":", "\n", "                            ", "self", ".", "image", ".", "append", "(", "img", ")", "\n", "self", ".", "label", ".", "append", "(", "labeltmp", ")", "\n", "count", "+=", "1", "\n", "", "", "else", ":", "\n", "# print(pth)", "\n", "# print('word error')", "\n", "                        ", "continue", ";", "\n", "", "", "", "", "print", "(", "'total word: %d'", "%", "count", ")", "\n", "self", ".", "len", "=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.WordGenerate.get_len": [[357, 359], ["None"], "methods", ["None"], ["", "def", "get_len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.WordGenerate.word_generate": [[360, 460], ["imageN.astype.astype.astype", "numpy.random.rand", "numpy.random.randint", "cv2.resize", "numpy.random.randint", "torch.rand", "cv2.imwrite", "int", "numpy.random.randint", "cv2.resize", "augment.perspective.astype", "numpy.ones", "numpy.random.randint", "cv2.resize", "numpy.random.rand", "int", "int", "numpy.ones", "numpy.ones", "numpy.random.randint", "int", "cv2.resize", "float", "int", "numpy.random.rand", "augment.distort", "numpy.random.rand", "augment.stretch", "numpy.random.rand", "augment.perspective", "numpy.random.rand", "augment.distort", "numpy.random.rand", "augment.stretch", "numpy.random.rand", "augment.perspective", "int", "int", "numpy.random.randint", "abs", "max", "max", "max", "max", "float", "numpy.random.rand", "augment.distort", "numpy.random.rand", "augment.stretch", "numpy.random.rand", "augment.perspective", "numpy.random.randint", "numpy.random.rand", "augment.distort", "numpy.random.rand", "augment.stretch", "numpy.random.rand", "augment.perspective", "numpy.random.randint", "max", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.distort", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.stretch", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.perspective", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.distort", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.stretch", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.perspective", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.distort", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.stretch", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.perspective", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.distort", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.stretch", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.augment.perspective"], ["", "def", "word_generate", "(", "self", ")", ":", "\n", "## one word", "\n", "        ", "label", "=", "''", "\n", "iseng_chars", "=", "True", "\n", "if", "cfgs", ".", "data_args", "[", "'Scale'", "]", ":", "\n", "            ", "scale_ratio", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "+", "1", "\n", "", "else", ":", "\n", "            ", "scale_ratio", "=", "1", "\n", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.3", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "len", ")", "\n", "image", "=", "self", ".", "image", "[", "idx", "]", "\n", "# iseng_chars = self.iseng_chars[idx]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "int", "(", "image", ".", "shape", "[", "1", "]", "//", "scale_ratio", ")", ",", "int", "(", "image", ".", "shape", "[", "0", "]", "//", "scale_ratio", ")", ")", ")", "\n", "h", ",", "w", "=", "image", ".", "shape", "\n", "dsth", "=", "self", ".", "conH", "\n", "if", "h", ">=", "dsth", ":", "\n", "                ", "newW", "=", "int", "(", "w", "*", "dsth", "/", "float", "(", "h", ")", ")", "\n", "imageN", "=", "np", ".", "ones", "(", "(", "self", ".", "conH", ",", "newW", ")", ")", "*", "255", "\n", "beginH", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "int", "(", "abs", "(", "self", ".", "conH", "-", "dsth", ")", ")", "+", "1", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "newW", ",", "dsth", ")", ")", "\n", "if", "cfgs", ".", "data_args", "[", "'AUG'", "]", "and", "image", ".", "shape", "[", "1", "]", ">", "50", ":", "\n", "                    ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                        ", "image", "=", "distort", "(", "image", ",", "max", "(", "2", ",", "image", ".", "shape", "[", "1", "]", "//", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                        ", "image", "=", "stretch", "(", "image", ",", "max", "(", "2", ",", "image", ".", "shape", "[", "1", "]", "//", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                        ", "image", "=", "perspective", "(", "image", ")", "\n", "", "", "image", "=", "image", ".", "astype", "(", "'uint8'", ")", "\n", "imageN", "[", "beginH", ":", "beginH", "+", "dsth", "]", "=", "image", "\n", "", "else", ":", "\n", "                ", "imageN", "=", "np", ".", "ones", "(", "(", "self", ".", "conH", ",", "w", ")", ")", "*", "255", "\n", "if", "iseng_chars", ":", "\n", "                    ", "beginH", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "conH", "-", "h", ")", "\n", "", "else", ":", "\n", "                    ", "beginH", "=", "(", "self", ".", "conH", "-", "h", ")", "//", "2", "\n", "", "if", "cfgs", ".", "data_args", "[", "'AUG'", "]", "and", "image", ".", "shape", "[", "1", "]", ">", "50", ":", "\n", "                    ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                        ", "image", "=", "distort", "(", "image", ",", "max", "(", "2", ",", "image", ".", "shape", "[", "1", "]", "//", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                        ", "image", "=", "stretch", "(", "image", ",", "max", "(", "2", ",", "image", ".", "shape", "[", "1", "]", "//", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                        ", "image", "=", "perspective", "(", "image", ")", "\n", "", "", "imageN", "[", "beginH", ":", "beginH", "+", "h", "]", "=", "image", "\n", "", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "## one line", "\n", "\n", "", "else", ":", "\n", "            ", "endW", "=", "0", "\n", "dstw", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "conW", "//", "2", ",", "self", ".", "conW", ")", "\n", "imageN", "=", "np", ".", "ones", "(", "(", "self", ".", "conH", ",", "dstw", ")", ")", "*", "255", "\n", "while", "True", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "len", ")", "\n", "image", "=", "self", ".", "image", "[", "idx", "]", "\n", "# iseng_chars = self.iseng_chars[idx]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "int", "(", "image", ".", "shape", "[", "1", "]", "//", "scale_ratio", ")", ",", "int", "(", "image", ".", "shape", "[", "0", "]", "//", "scale_ratio", ")", ")", ")", "\n", "h", ",", "w", "=", "image", ".", "shape", "\n", "if", "h", ">=", "self", ".", "conH", ":", "\n", "                    ", "newW", "=", "int", "(", "w", "*", "self", ".", "conH", "/", "float", "(", "h", ")", ")", "\n", "if", "endW", "+", "newW", ">", "dstw", ":", "\n", "                        ", "break", ";", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "newW", ",", "self", ".", "conH", ")", ")", "\n", "if", "cfgs", ".", "data_args", "[", "'AUG'", "]", "and", "image", ".", "shape", "[", "1", "]", ">", "50", ":", "\n", "                        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                            ", "image", "=", "distort", "(", "image", ",", "max", "(", "2", ",", "image", ".", "shape", "[", "1", "]", "//", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                            ", "image", "=", "stretch", "(", "image", ",", "max", "(", "2", ",", "image", ".", "shape", "[", "1", "]", "//", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                            ", "image", "=", "perspective", "(", "image", ")", "\n", "", "", "imageN", "[", ":", ",", "endW", ":", "endW", "+", "newW", "]", "=", "image", "\n", "endW", "+=", "np", ".", "random", ".", "randint", "(", "25", ")", "+", "25", "+", "newW", "\n", "", "else", ":", "\n", "                    ", "if", "endW", "+", "w", ">", "dstw", ":", "\n", "                        ", "break", ";", "\n", "", "if", "iseng_chars", ":", "\n", "                        ", "beginH", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "conH", "-", "h", ")", "\n", "", "else", ":", "\n", "                        ", "beginH", "=", "(", "self", ".", "conH", "-", "h", ")", "//", "2", "\n", "", "if", "cfgs", ".", "data_args", "[", "'AUG'", "]", "and", "image", ".", "shape", "[", "1", "]", ">", "50", ":", "\n", "                        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                            ", "image", "=", "distort", "(", "image", ",", "max", "(", "2", ",", "image", ".", "shape", "[", "1", "]", "//", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                            ", "image", "=", "stretch", "(", "image", ",", "max", "(", "2", ",", "image", ".", "shape", "[", "1", "]", "//", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                            ", "image", "=", "perspective", "(", "image", ")", "\n", "", "", "imageN", "[", "beginH", ":", "beginH", "+", "h", ",", "endW", ":", "endW", "+", "w", "]", "=", "image", "\n", "endW", "+=", "np", ".", "random", ".", "randint", "(", "25", ")", "+", "25", "+", "w", "\n", "", "if", "label", "==", "''", ":", "\n", "                    ", "label", "=", "self", ".", "label", "[", "idx", "]", "\n", "", "else", ":", "\n", "                    ", "label", "=", "label", "+", "'|'", "+", "self", ".", "label", "[", "idx", "]", "\n", "\n", "", "", "", "label", "=", "label", "\n", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "0.01", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "\"word_generate/%s.jpg\"", "%", "label", ",", "imageN", ")", "\n", "\n", "", "imageN", "=", "imageN", ".", "astype", "(", "'float32'", ")", "\n", "imageN", "=", "(", "imageN", "-", "127.5", ")", "/", "127.5", "\n", "return", "imageN", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMSynthesisDataset.__init__": [[464, 485], ["IAM_data_loader.WordGenerate", "IAM_data_loader.LineGenerate", "enumerate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ImgList", ",", "LineFolder", ",", "WordFolder", ",", "LabelFile", ",", "WordLabel", ",", "length", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n        transform (callable, optional): Optional transform to be applied\n            on a sample.\n        \"\"\"", "\n", "self", ".", "conW", "=", "cfgs", ".", "data_args", "[", "'WIDTH'", "]", "\n", "self", ".", "conH", "=", "cfgs", ".", "data_args", "[", "'HEIGHT'", "]", "\n", "\n", "# self.SynLG = SynLineGenerate(self.conH, self.conW)", "\n", "self", ".", "WG", "=", "WordGenerate", "(", "ImgList", ",", "WordFolder", ",", "WordLabel", ",", "self", ".", "conH", ",", "self", ".", "conW", ")", "\n", "self", ".", "LG", "=", "LineGenerate", "(", "ImgList", ",", "LineFolder", ",", "LabelFile", ",", "self", ".", "conH", ",", "self", ".", "conW", ",", "True", ")", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "self", ".", "alphabet", "=", "cfgs", ".", "data_args", "[", "'DICT'", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "alphabet", ")", ":", "\n", "            ", "self", ".", "dict", "[", "item", "]", "=", "i", "\n", "\n", "", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMSynthesisDataset.__len__": [[486, 488], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.IAMSynthesisDataset.__getitem__": [[490, 515], ["numpy.random.rand", "label.astype.astype.astype", "IAM_data_loader.IAMSynthesisDataset.WG.word_generate", "IAM_data_loader.IAMSynthesisDataset.LG.generate_line", "numpy.zeros", "imageN.reshape.reshape.reshape", "pdb.set_trace", "torch.from_numpy", "torch.from_numpy", "pdb.set_trace", "len"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.WordGenerate.word_generate", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.LineGenerate.generate_line"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sd", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "sd", "<", "0.5", ":", "\n", "            ", "imageN", ",", "label", "=", "self", ".", "WG", ".", "word_generate", "(", ")", "\n", "# elif sd < 0.6:", "\n", "#     imageN, label = self.SynLG.generate_line()        ", "\n", "", "else", ":", "\n", "            ", "imageN", ",", "label", "=", "self", ".", "LG", ".", "generate_line", "(", ")", "\n", "\n", "", "try", ":", "\n", "            ", "text", "=", "[", "self", ".", "dict", "[", "char", "]", "for", "char", "in", "label", "]", "\n", "", "except", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "label", "=", "np", ".", "zeros", "(", "(", "1", ",", "cfgs", ".", "data_args", "[", "'FINAL_LEN'", "]", ")", ")", "-", "1", "\n", "label", "[", "0", ",", ":", "len", "(", "text", ")", "]", "=", "text", "\n", "label", "=", "label", ".", "astype", "(", "'int'", ")", "\n", "\n", "try", ":", "\n", "            ", "imageN", "=", "imageN", ".", "reshape", "(", "1", ",", "imageN", ".", "shape", "[", "0", "]", ",", "imageN", ".", "shape", "[", "1", "]", ")", "\n", "sample", "=", "{", "'image'", ":", "torch", ".", "from_numpy", "(", "imageN", ")", ",", "'label'", ":", "torch", ".", "from_numpy", "(", "label", ")", "}", "\n", "", "except", ":", "\n", "            ", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.pad_tensor": [[24, 35], ["torch.tensor", "list", "list", "torch.cat", "int", "int", "torch.tensor.size", "torch.ones().type_as", "torch.ones().type_as", "random.random", "torch.tensor.size", "torch.tensor.size", "torch.ones", "torch.ones"], "function", ["None"], ["def", "pad_tensor", "(", "vec", ",", "pad", ",", "dim", ",", "istrain", ")", ":", "\n", "    ", "vec", "=", "torch", ".", "tensor", "(", "vec", ")", "\n", "pad_size_front", "=", "list", "(", "vec", ".", "shape", ")", "\n", "if", "istrain", ":", "\n", "        ", "pad_size_front", "[", "dim", "]", "=", "int", "(", "(", "pad", "-", "vec", ".", "size", "(", "dim", ")", ")", "*", "random", ".", "random", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "pad_size_front", "[", "dim", "]", "=", "int", "(", "(", "pad", "-", "vec", ".", "size", "(", "dim", ")", ")", "*", "0.5", ")", "\n", "", "pad_size_back", "=", "list", "(", "vec", ".", "shape", ")", "\n", "pad_size_back", "[", "dim", "]", "=", "pad", "-", "vec", ".", "size", "(", "dim", ")", "-", "pad_size_front", "[", "dim", "]", "\n", "return", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "*", "pad_size_front", ")", ".", "type_as", "(", "vec", ".", "data", ")", ",", "vec", ",", "torch", ".", "ones", "(", "*", "pad_size_back", ")", ".", "type_as", "(", "vec", ".", "data", ")", "]", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.IAM_data_loader.resize_ratio": [[208, 222], ["img.sum", "img.sum.max", "scipy.signal.find_peaks", "scipy.signal.peak_widths", "numpy.array().mean", "min", "numpy.array"], "function", ["None"], ["def", "resize_ratio", "(", "img", ",", "target_h", "=", "96.", ")", ":", "\n", "    ", "img", "=", "255", "-", "img", "\n", "h", ",", "w", "=", "img", ".", "shape", "\n", "\n", "spec", "=", "img", ".", "sum", "(", "1", ")", "\n", "max_value", "=", "spec", ".", "max", "(", ")", "\n", "\n", "peaks", ",", "value", "=", "scipy", ".", "signal", ".", "find_peaks", "(", "spec", ",", "prominence", "=", "10000", ")", "\n", "peaks_w", "=", "scipy", ".", "signal", ".", "peak_widths", "(", "spec", ",", "peaks", ",", "rel_height", "=", "0.98", ")", "\n", "\n", "mean_h", "=", "np", ".", "array", "(", "peaks_w", "[", "0", "]", ")", ".", "mean", "(", ")", "\n", "aspect_ratio", "=", "target_h", "/", "mean_h", "\n", "\n", "return", "min", "(", "0.65", ",", "aspect_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.cfgs.mkdir": [[97, 104], ["path_.split", "range", "os.system", "len"], "function", ["None"], ["def", "mkdir", "(", "path_", ")", ":", "\n", "    ", "paths", "=", "path_", ".", "split", "(", "'/'", ")", "\n", "command_str", "=", "'mkdir '", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "paths", ")", "-", "1", ")", ":", "\n", "        ", "command_str", "=", "command_str", "+", "paths", "[", "i", "]", "+", "'/'", "\n", "", "command_str", "=", "command_str", "[", "0", ":", "-", "1", "]", "\n", "os", ".", "system", "(", "command_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.cfgs.showcfgs": [[105, 109], ["s.keys", "print", "print"], "function", ["None"], ["", "def", "showcfgs", "(", "s", ")", ":", "\n", "    ", "for", "key", "in", "s", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "key", ",", "s", "[", "key", "]", ")", "\n", "", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.BasicBlock.__init__": [[31, 40], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.conv3x3", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.BasicBlock.forward": [[41, 58], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.Bottleneck.__init__": [[63, 74], ["torch.Module.__init__", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.conv1x1", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.conv3x3", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.Bottleneck.forward": [[75, 96], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.ResNet.__init__": [[100, 131], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "(", "2", ",", "1", ")", ")", "\n", "# self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.ResNet._make_layer": [[132, 147], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.ResNet.forward": [[148, 164], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.conv1x1": [[23, 26], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.resnet18": [[166, 176], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.resnet34": [[179, 189], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.resnet50": [[192, 202], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.resnet101": [[205, 215], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.resnet.resnet152": [[218, 228], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Loss_counter.__init__": [[45, 48], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_iters", "=", "0.", "\n", "self", ".", "loss_sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Loss_counter.add_iter": [[49, 52], ["float"], "methods", ["None"], ["", "def", "add_iter", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "total_iters", "+=", "1", "\n", "self", ".", "loss_sum", "+=", "float", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Loss_counter.clear": [[53, 56], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_iters", "=", "0", "\n", "self", ".", "loss_sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Loss_counter.get_loss": [[57, 62], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_sum", "/", "self", ".", "total_iters", "if", "self", ".", "total_iters", ">", "0", "else", "0", "\n", "self", ".", "total_iters", "=", "0", "\n", "self", ".", "loss_sum", "=", "0", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.CTC_AR_counter.__init__": [[102, 107], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "delete_error", "=", "0.", "\n", "self", ".", "replace_error", "=", "0.", "\n", "self", ".", "insert_error", "=", "0.", "\n", "self", ".", "character_total", "=", "0", "\n", "", "def", "clear", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.CTC_AR_counter.clear": [[107, 112], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "delete_error", "=", "0.", "\n", "self", ".", "replace_error", "=", "0.", "\n", "self", ".", "insert_error", "=", "0.", "\n", "self", ".", "character_total", "=", "0", "\n", "", "def", "add_iter", "(", "self", ",", "output", ",", "labels", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.CTC_AR_counter.add_iter": [[112, 125], ["output.size", "range", "[].squeeze().tolist", "labels[].tolist", "utils.cal_distance", "len", "[].squeeze", "range", "len", "output[].topk"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.cal_distance"], ["", "def", "add_iter", "(", "self", ",", "output", ",", "labels", ")", ":", "\n", "        ", "B", "=", "output", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "B", ")", ":", "\n", "            ", "raw_pred", "=", "output", "[", ":", ",", "i", ",", ":", "]", ".", "topk", "(", "1", ")", "[", "1", "]", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", "\n", "pred", "=", "[", "raw_pred", "[", "j", "]", "for", "j", "in", "range", "(", "1", ",", "len", "(", "raw_pred", ")", ")", "if", "raw_pred", "[", "j", "]", "!=", "raw_pred", "[", "j", "-", "1", "]", "]", "\n", "pred", "=", "[", "_", "-", "1", "for", "_", "in", "pred", "if", "_", ">", "0", "]", "\n", "label_i", "=", "labels", "[", "i", "]", ".", "tolist", "(", ")", "\n", "label_i", "=", "[", "_", "for", "_", "in", "label_i", "if", "_", ">", "0", "]", "\n", "distance", ",", "(", "delete", ",", "replace", ",", "insert", ")", "=", "cal_distance", "(", "pred", ",", "label_i", ")", "\n", "self", ".", "character_total", "+=", "len", "(", "label_i", ")", "\n", "self", ".", "delete_error", "+=", "delete", "\n", "self", ".", "insert_error", "+=", "insert", "\n", "self", ".", "replace_error", "+=", "replace", "\n", "", "", "def", "show", "(", "self", ",", "iter_id", "=", "0", ",", "clear", "=", "False", ",", "start_time", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.CTC_AR_counter.show": [[125, 135], ["utils.CTC_AR_counter.clear", "print", "print", "utils.timeSince"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.clear", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.timeSince"], ["", "", "def", "show", "(", "self", ",", "iter_id", "=", "0", ",", "clear", "=", "False", ",", "start_time", "=", "None", ")", ":", "\n", "        ", "CR", "=", "1", "-", "(", "self", ".", "delete_error", "+", "self", ".", "replace_error", ")", "/", "self", ".", "character_total", "\n", "AR", "=", "1", "-", "(", "self", ".", "delete_error", "+", "self", ".", "replace_error", "+", "self", ".", "insert_error", ")", "/", "self", ".", "character_total", "\n", "if", "start_time", ":", "\n", "            ", "print", "(", "'Test : %10s iter_id: %6d, CR: %4f  AR: %4f'", "%", "\n", "(", "timeSince", "(", "start_time", ")", ",", "iter_id", ",", "CR", ",", "AR", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'iter_id: %6d, CR: %4f  AR: %4f'", "%", "\n", "(", "iter_id", ",", "CR", ",", "AR", ")", ")", "\n", "", "self", ".", "clear", "(", ")", "\n", "# pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__": [[138, 155], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alphabet", ")", ":", "\n", "        ", "super", "(", "Sequence", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "count_n", "=", "0", "\n", "self", ".", "showing", "=", "False", "\n", "self", ".", "softmax", "=", "None", "\n", "self", ".", "label", "=", "None", "\n", "self", ".", "image", "=", "None", "\n", "\n", "self", ".", "delete_error", "=", "0.", "\n", "self", ".", "replace_error", "=", "0.", "\n", "self", ".", "insert_error", "=", "0.", "\n", "self", ".", "word_error", "=", "0.", "\n", "self", ".", "pred_character_total", "=", "0", "\n", "self", ".", "character_total", "=", "0", "\n", "self", ".", "word_total", "=", "0", "\n", "self", ".", "images", "=", "0", "\n", "self", ".", "alphabet", "=", "alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.clear": [[156, 165], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "delete_error", "=", "0.", "\n", "self", ".", "replace_error", "=", "0.", "\n", "self", ".", "insert_error", "=", "0.", "\n", "self", ".", "word_error", "=", "0.", "\n", "self", ".", "pred_character_total", "=", "0", "\n", "self", ".", "character_total", "=", "0", "\n", "self", ".", "word_total", "=", "0", "\n", "self", ".", "images", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.show": [[166, 178], ["print", "print", "utils.Sequence.clear", "utils.timeSince"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.clear", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.timeSince"], ["", "def", "show", "(", "self", ",", "iter_id", "=", "0", ",", "clear", "=", "False", ",", "start_time", "=", "None", ")", ":", "\n", "        ", "CR", "=", "1", "-", "(", "self", ".", "delete_error", "+", "self", ".", "replace_error", ")", "/", "self", ".", "character_total", "\n", "AR", "=", "1", "-", "(", "self", ".", "delete_error", "+", "self", ".", "replace_error", "+", "self", ".", "insert_error", ")", "/", "self", ".", "character_total", "\n", "WER", "=", "self", ".", "word_error", "/", "self", ".", "word_total", "\n", "if", "start_time", ":", "\n", "            ", "print", "(", "'Test : %10s iter_id: %6d, CER: %4f  WER: %4f \\n %10s delete: %4d, replace: %4d, insert: %4d, gt_len: %4d, pred_len: %4d, total word: %.4f'", "%", "\n", "(", "timeSince", "(", "start_time", ")", ",", "iter_id", ",", "1", "-", "AR", ",", "WER", ",", "'|---Details:'", ",", "self", ".", "delete_error", ",", "self", ".", "replace_error", ",", "self", ".", "insert_error", ",", "self", ".", "character_total", ",", "self", ".", "pred_character_total", ",", "self", ".", "word_total", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'iter_id: %6d, CER: %4f  WER: %4f \\n %10s delete: %4d, replace: %4d, insert: %4d, gt_len: %4d, pred_len: %4d, total word: %.4f'", "%", "\n", "(", "iter_id", ",", "1", "-", "AR", ",", "WER", ",", "'|___Details:'", ",", "self", ".", "delete_error", ",", "self", ".", "replace_error", ",", "self", ".", "insert_error", ",", "self", ".", "character_total", ",", "self", ".", "pred_character_total", ",", "self", ".", "word_total", ")", ")", "\n", "", "if", "clear", ":", "\n", "            ", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.forward": [[179, 184], ["image.permute().data.cpu().numpy", "image.permute().data.cpu", "image.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "label", ",", "image", ",", "test", "=", "False", ",", "showing", "=", "False", ",", "iseval", "=", "False", ")", ":", "\n", "        ", "self", ".", "showing", "=", "False", "\n", "self", ".", "softmax", "=", "input", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "image", "=", "image", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.decode_batch_2d": [[185, 191], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "out_best_idx.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "out_best_prob.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "torch.softmax", "torch.softmax", "torch.softmax", "out_best_idx.data.cpu().numpy.data.cpu().numpy.data.cpu", "out_best_prob.data.cpu().numpy.data.cpu().numpy.data.cpu"], "methods", ["None"], ["", "def", "decode_batch_2d", "(", "self", ")", ":", "\n", "        ", "h", ",", "w", ",", "batch_size", ",", "dim", "=", "self", ".", "softmax", ".", "shape", "\n", "out_best_prob", ",", "out_best_idx", "=", "torch", ".", "max", "(", "F", ".", "softmax", "(", "self", ".", "softmax", ",", "-", "1", ")", ",", "3", ")", "\n", "out_best_idx", "=", "out_best_idx", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out_best_prob", "=", "out_best_prob", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "out_best_idx", ",", "out_best_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.parse": [[192, 317], ["utils.Sequence.decode_batch_2d", "range", "idx_pred[].copy", "range", "int", "int", "sorted", "zip", "sorted", "[].tolist", "utils.cal_distance", "utils.cal_distance_wer", "len", "len", "range", "oneline.append", "startpoint.append", "sorted.remove", "totalline.append", "pre_list.append", "pre_list.append", "int", "location_stack.append", "pred_idx.append", "len", "pointlist.append", "pred_loc.append", "oneline.append", "sorted.remove", "location_stack.pop", "loc.append", "sum", "len", "sum", "len", "location_stack.append", "location_stack.append", "location_stack.append", "location_stack.append", "location_stack.append", "location_stack.append", "location_stack.append", "location_stack.append"], "methods", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.Sequence.decode_batch_2d", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.cal_distance", "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.cal_distance_wer"], ["", "def", "parse", "(", "self", ")", ":", "\n", "\n", "        ", "delete_total", "=", "0", "\n", "replace_total", "=", "0", "\n", "insert_total", "=", "0", "\n", "len_total", "=", "0", "\n", "correct_count", "=", "0", "\n", "pre_total", "=", "0", "\n", "word_total", "=", "0", "\n", "all_total", "=", "0", "\n", "distance_wer_t", "=", "0", "\n", "wordlen_t", "=", "0", "\n", "idx_pred", ",", "prob_pred", "=", "self", ".", "decode_batch_2d", "(", ")", "\n", "nH", ",", "nW", ",", "batch_size", "=", "self", ".", "softmax", ".", "shape", "[", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_out", "=", "idx_pred", "[", ":", ",", ":", ",", "i", "]", ".", "copy", "(", ")", "\n", "pred_idx", "=", "[", "]", "\n", "pred_loc", "=", "[", "]", "\n", "pointlist", "=", "[", "]", "\n", "location_stack", "=", "[", "]", "# Stack-based eight-neighbor merge", "\n", "for", "x", "in", "range", "(", "0", ",", "nH", ")", ":", "\n", "                ", "for", "y", "in", "range", "(", "0", ",", "nW", ")", ":", "\n", "                    ", "if", "cur_out", "[", "x", ",", "y", "]", ">", "0", ":", "\n", "                        ", "loc", "=", "[", "]", "\n", "location_stack", ".", "append", "(", "[", "x", ",", "y", "]", ")", "\n", "idx_", "=", "cur_out", "[", "x", ",", "y", "]", "\n", "cur_out", "[", "x", ",", "y", "]", "=", "0", "\n", "pred_idx", ".", "append", "(", "idx_", ")", "\n", "while", "len", "(", "location_stack", ")", ":", "\n", "                            ", "location_", "=", "location_stack", ".", "pop", "(", ")", "\n", "loc", ".", "append", "(", "location_", ")", "\n", "x_", ",", "y_", "=", "location_", "\n", "if", "x_", "and", "cur_out", "[", "x_", "-", "1", ",", "y_", "]", "==", "idx_", ":", "\n", "                                ", "location_stack", ".", "append", "(", "[", "x_", "-", "1", ",", "y_", "]", ")", "\n", "cur_out", "[", "x_", "-", "1", ",", "y_", "]", "=", "0", "\n", "", "if", "y_", "and", "cur_out", "[", "x_", ",", "y_", "-", "1", "]", "==", "idx_", ":", "\n", "                                ", "location_stack", ".", "append", "(", "[", "x_", ",", "y_", "-", "1", "]", ")", "\n", "cur_out", "[", "x_", ",", "y_", "-", "1", "]", "=", "0", "\n", "", "if", "x_", "<", "nH", "-", "1", "and", "cur_out", "[", "x_", "+", "1", ",", "y_", "]", "==", "idx_", ":", "\n", "                                ", "location_stack", ".", "append", "(", "[", "x_", "+", "1", ",", "y_", "]", ")", "\n", "cur_out", "[", "x_", "+", "1", ",", "y_", "]", "=", "0", "\n", "", "if", "y_", "<", "nW", "-", "1", "and", "cur_out", "[", "x_", ",", "y_", "+", "1", "]", "==", "idx_", ":", "\n", "                                ", "location_stack", ".", "append", "(", "[", "x_", ",", "y_", "+", "1", "]", ")", "\n", "cur_out", "[", "x_", ",", "y_", "+", "1", "]", "=", "0", "\n", "", "if", "x_", "<", "nH", "-", "1", "and", "y_", "<", "nW", "-", "1", "and", "cur_out", "[", "x_", "+", "1", ",", "y_", "+", "1", "]", "==", "idx_", ":", "\n", "                                ", "location_stack", ".", "append", "(", "[", "x_", "+", "1", ",", "y_", "+", "1", "]", ")", "\n", "cur_out", "[", "x_", "+", "1", ",", "y_", "+", "1", "]", "=", "0", "\n", "", "if", "x_", "<", "nH", "-", "1", "and", "y_", "and", "cur_out", "[", "x_", "+", "1", ",", "y_", "-", "1", "]", "==", "idx_", ":", "\n", "                                ", "location_stack", ".", "append", "(", "[", "x_", "+", "1", ",", "y_", "-", "1", "]", ")", "\n", "cur_out", "[", "x_", "+", "1", ",", "y_", "-", "1", "]", "=", "0", "\n", "", "if", "x_", "and", "y_", "and", "cur_out", "[", "x_", "-", "1", ",", "y_", "-", "1", "]", "==", "idx_", ":", "\n", "                                ", "location_stack", ".", "append", "(", "[", "x_", "-", "1", ",", "y_", "-", "1", "]", ")", "\n", "cur_out", "[", "x_", "-", "1", ",", "y_", "-", "1", "]", "=", "0", "\n", "", "if", "x_", "and", "y_", "<", "nW", "-", "1", "and", "cur_out", "[", "x_", "-", "1", ",", "y_", "+", "1", "]", "==", "idx_", ":", "\n", "                                ", "location_stack", ".", "append", "(", "[", "x_", "-", "1", ",", "y_", "+", "1", "]", ")", "\n", "cur_out", "[", "x_", "-", "1", ",", "y_", "+", "1", "]", "=", "0", "\n", "", "", "mean_x", "=", "sum", "(", "[", "loc_", "[", "0", "]", "for", "loc_", "in", "loc", "]", ")", "/", "len", "(", "loc", ")", "\n", "mean_y", "=", "sum", "(", "[", "loc_", "[", "1", "]", "for", "loc_", "in", "loc", "]", ")", "/", "len", "(", "loc", ")", "\n", "pointlist", ".", "append", "(", "[", "mean_x", ",", "mean_y", "]", "+", "[", "idx_", "]", ")", "\n", "pred_loc", ".", "append", "(", "loc", ")", "\n", "\n", "", "", "", "img_h", "=", "self", ".", "image", ".", "shape", "[", "1", "]", "\n", "img_w", "=", "self", ".", "image", ".", "shape", "[", "2", "]", "\n", "stride_h", "=", "int", "(", "img_h", "*", "2", "/", "nH", ")", "\n", "stride_w", "=", "int", "(", "img_w", "*", "2", "/", "nW", ")", "\n", "\n", "pointlistsort", "=", "sorted", "(", "pointlist", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "startpoint", "=", "[", "]", "\n", "totalline", "=", "[", "]", "\n", "ynow", "=", "0", "\n", "xnow", "=", "0", "\n", "while", "pointlistsort", "!=", "[", "]", ":", "\n", "                ", "oneline", "=", "[", "]", "\n", "ynow", ",", "xnow", ",", "_", "=", "pointlistsort", "[", "0", "]", "\n", "oneline", ".", "append", "(", "pointlistsort", "[", "0", "]", ")", "\n", "startpoint", ".", "append", "(", "pointlistsort", "[", "0", "]", ")", "\n", "pointlistsort", ".", "remove", "(", "pointlistsort", "[", "0", "]", ")", "\n", "yavg", "=", "ynow", "\n", "xavg", "=", "xnow", "\n", "for", "point", "in", "pointlistsort", "[", ":", "]", ":", "\n", "                    ", "if", "(", "(", "point", "[", "0", "]", "-", "ynow", "<", "2", "and", "point", "[", "0", "]", "-", "ynow", ">", "-", "2", ")", "or", "(", "point", "[", "0", "]", "-", "yavg", "<", "2", "and", "point", "[", "0", "]", "-", "yavg", ">", "-", "2", ")", ")", "and", "point", "[", "1", "]", "-", "xnow", "<", "20", ":", "\n", "                        ", "oneline", ".", "append", "(", "point", ")", "\n", "idxnow", "=", "point", "[", "2", "]", "\n", "ynow", ",", "xnow", ",", "_", "=", "point", "\n", "yavg", "=", "0.9", "*", "yavg", "+", "0.1", "*", "ynow", "\n", "pointlistsort", ".", "remove", "(", "point", ")", "\n", "", "", "totalline", ".", "append", "(", "oneline", ")", "\n", "\n", "", "startandtotal", "=", "zip", "(", "startpoint", ",", "totalline", ")", "\n", "startandtotalsort", "=", "sorted", "(", "startandtotal", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "\n", "pre_list", "=", "[", "]", "\n", "for", "item", "in", "startandtotalsort", ":", "\n", "                ", "for", "char", "in", "item", "[", "1", "]", ":", "\n", "                    ", "pre_list", ".", "append", "(", "char", "[", "2", "]", ")", "\n", "", "pre_list", ".", "append", "(", "79", ")", "\n", "", "pre_list", "=", "pre_list", "[", ":", "-", "1", "]", "\n", "\n", "\n", "label_list", "=", "self", ".", "label", "[", "i", "]", "[", "self", ".", "label", "[", "i", "]", "!=", "-", "1", "]", ".", "tolist", "(", ")", "\n", "label_list", "=", "[", "int", "(", "ele", ")", "+", "1", "for", "ele", "in", "label_list", "]", "\n", "distance", ",", "(", "delete", ",", "replace", ",", "insert", ")", "=", "cal_distance", "(", "label_list", ",", "pre_list", ")", "\n", "distance_wer", ",", "wordlen", "=", "cal_distance_wer", "(", "label_list", ",", "pre_list", ",", "self", ".", "alphabet", ")", "\n", "wordlen_t", "+=", "wordlen", "\n", "distance_wer_t", "+=", "distance_wer", "\n", "delete_total", "+=", "delete", "\n", "replace_total", "+=", "replace", "\n", "insert_total", "+=", "insert", "\n", "len_total", "+=", "len", "(", "label_list", ")", "\n", "pre_total", "+=", "len", "(", "pre_list", ")", "\n", "if", "distance", "==", "0", ":", "\n", "                ", "word_total", "+=", "1", "\n", "", "all_total", "+=", "1", "\n", "\n", "", "self", ".", "delete_error", "+=", "delete_total", "\n", "self", ".", "replace_error", "+=", "replace_total", "\n", "self", ".", "insert_error", "+=", "insert_total", "\n", "self", ".", "word_error", "+=", "distance_wer_t", "\n", "self", ".", "pred_character_total", "+=", "pre_total", "\n", "self", ".", "character_total", "+=", "len_total", "\n", "self", ".", "word_total", "+=", "wordlen_t", "\n", "self", ".", "images", "+=", "all_total", "\n", "result", "=", "[", "delete_total", ",", "replace_total", ",", "insert_total", ",", "len_total", ",", "correct_count", ",", "len_total", ",", "pre_total", ",", "word_total", ",", "all_total", "]", "\n", "return", "idx_pred", ",", "result", ",", "distance_wer_t", ",", "wordlen_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.asMinutes": [[18, 22], ["math.floor"], "function", ["None"], ["def", "asMinutes", "(", "s", ")", ":", "\n", "    ", "m", "=", "math", ".", "floor", "(", "s", "/", "60", ")", "\n", "s", "-=", "m", "*", "60", "\n", "return", "'%dm %ds'", "%", "(", "m", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.timeSince": [[23, 27], ["time.time", "utils.asMinutes"], "function", ["home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.asMinutes"], ["", "def", "timeSince", "(", "since", ")", ":", "\n", "    ", "now", "=", "time", ".", "time", "(", ")", "\n", "s", "=", "now", "-", "since", "\n", "return", "'%s'", "%", "(", "asMinutes", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.cal_distance": [[28, 43], ["edit_distance.SequenceMatcher", "ed.SequenceMatcher.get_opcodes"], "function", ["None"], ["", "def", "cal_distance", "(", "label_list", ",", "pre_list", ")", ":", "\n", "    ", "y", "=", "ed", ".", "SequenceMatcher", "(", "a", "=", "label_list", ",", "b", "=", "pre_list", ")", "\n", "yy", "=", "y", ".", "get_opcodes", "(", ")", "\n", "insert", "=", "0", "\n", "delete", "=", "0", "\n", "replace", "=", "0", "\n", "for", "item", "in", "yy", ":", "\n", "        ", "if", "item", "[", "0", "]", "==", "'insert'", ":", "\n", "            ", "insert", "+=", "item", "[", "-", "1", "]", "-", "item", "[", "-", "2", "]", "\n", "", "if", "item", "[", "0", "]", "==", "'delete'", ":", "\n", "            ", "delete", "+=", "item", "[", "2", "]", "-", "item", "[", "1", "]", "\n", "", "if", "item", "[", "0", "]", "==", "'replace'", ":", "\n", "            ", "replace", "+=", "item", "[", "-", "1", "]", "-", "item", "[", "-", "2", "]", "\n", "", "", "distance", "=", "insert", "+", "delete", "+", "replace", "\n", "return", "distance", ",", "(", "delete", ",", "replace", ",", "insert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wang-Tianwei_Implicit-feature-alignment.None.utils.cal_distance_wer": [[63, 100], ["len", "edit_distance.SequenceMatcher", "ed.SequenceMatcher.get_opcodes", "label_chn_word.append", "pred_chn_word.append"], "function", ["None"], ["", "", "def", "cal_distance_wer", "(", "label_list", ",", "pre_list", ",", "alphabet", ")", ":", "\n", "    ", "label_chn", "=", "''", ".", "join", "(", "[", "alphabet", "[", "cha", "-", "1", "]", "for", "cha", "in", "label_list", "]", ")", "\n", "pred_chn", "=", "''", ".", "join", "(", "[", "alphabet", "[", "cha", "-", "1", "]", "for", "cha", "in", "pre_list", "]", ")", "\n", "label_chn_word", "=", "[", "]", "\n", "strtmp", "=", "''", "\n", "for", "s", "in", "label_chn", ":", "\n", "        ", "if", "s", "==", "'|'", ":", "\n", "            ", "label_chn_word", ".", "append", "(", "strtmp", ")", "\n", "strtmp", "=", "''", "\n", "", "else", ":", "\n", "            ", "strtmp", "+=", "s", "\n", "\n", "", "", "pred_chn_word", "=", "[", "]", "\n", "strtmp", "=", "''", "\n", "for", "s", "in", "pred_chn", ":", "\n", "        ", "if", "s", "==", "'|'", ":", "\n", "            ", "pred_chn_word", ".", "append", "(", "strtmp", ")", "\n", "strtmp", "=", "''", "\n", "", "else", ":", "\n", "            ", "strtmp", "+=", "s", "\n", "\n", "", "", "wordlen", "=", "len", "(", "label_chn_word", ")", "\n", "\n", "y", "=", "ed", ".", "SequenceMatcher", "(", "a", "=", "label_chn_word", ",", "b", "=", "pred_chn_word", ")", "\n", "yy", "=", "y", ".", "get_opcodes", "(", ")", "\n", "insert", "=", "0", "\n", "delete", "=", "0", "\n", "replace", "=", "0", "\n", "for", "item", "in", "yy", ":", "\n", "        ", "if", "item", "[", "0", "]", "==", "'insert'", ":", "\n", "            ", "insert", "+=", "item", "[", "-", "1", "]", "-", "item", "[", "-", "2", "]", "\n", "", "if", "item", "[", "0", "]", "==", "'delete'", ":", "\n", "            ", "delete", "+=", "item", "[", "2", "]", "-", "item", "[", "1", "]", "\n", "", "if", "item", "[", "0", "]", "==", "'replace'", ":", "\n", "            ", "replace", "+=", "item", "[", "-", "1", "]", "-", "item", "[", "-", "2", "]", "\n", "", "", "distance", "=", "insert", "+", "delete", "+", "replace", "\n", "return", "distance", ",", "wordlen", "\n", "\n"]]}