{"home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.None.setup._load_requirements": [[16, 30], ["open", "os.path.join", "ln[].strip.strip", "ln[].strip", "ln[].strip.startswith", "requirements.append", "file.readlines", "ln[].strip.index"], "function", ["None"], ["def", "_load_requirements", "(", "path_dir", ":", "str", ",", "file_name", ":", "str", "=", "\"requirements.txt\"", ",", "comment_char", ":", "str", "=", "\"#\"", ")", "->", "List", "[", "str", "]", ":", "\n", "\t", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path_dir", ",", "file_name", ")", ")", "as", "file", ":", "\n", "\t\t", "lines", "=", "[", "ln", ".", "strip", "(", ")", "for", "ln", "in", "file", ".", "readlines", "(", ")", "]", "\n", "", "requirements", "=", "[", "]", "\n", "for", "ln", "in", "lines", ":", "\n", "# filer all comments", "\n", "\t\t", "if", "comment_char", "in", "ln", ":", "\n", "\t\t\t", "ln", "=", "ln", "[", ":", "ln", ".", "index", "(", "comment_char", ")", "]", ".", "strip", "(", ")", "\n", "# skip directly installed dependencies", "\n", "", "if", "ln", ".", "startswith", "(", "\"http\"", ")", "or", "\"@http\"", "in", "ln", ":", "\n", "\t\t\t", "continue", "\n", "", "if", "ln", ":", "\n", "\t\t\t", "requirements", ".", "append", "(", "ln", ")", "\n", "", "", "return", "requirements", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.None.setup._load_readme_description": [[32, 42], ["os.path.join", "os.path.join", "f.read.replace", "open", "f.read", "os.path.join"], "function", ["None"], ["", "def", "_load_readme_description", "(", "path_dir", ":", "str", ",", "homepage", ":", "str", ")", "->", "str", ":", "\n", "\t", "path_readme", "=", "os", ".", "path", ".", "join", "(", "path_dir", ",", "\"README.md\"", ")", "\n", "with", "open", "(", "path_readme", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "\t\t", "text", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "github_source_url", "=", "os", ".", "path", ".", "join", "(", "homepage", ",", "\"blob/master\"", ")", "\n", "# replace relative repository path to absolute link to the release", "\n", "text", "=", "text", ".", "replace", "(", "\"docs/images/\"", ",", "f\"{os.path.join(github_source_url, 'docs/images/')}\"", ")", "\n", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankDataset.__init__": [[70, 89], ["collections.defaultdict", "json.load.items", "print", "open", "json.load", "open", "json.load", "q_scores.items", "rerank.RerankDataset.tweet_examples[].append"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "index_path", ",", "scores_path", ",", "questions_path", ",", "worker_estimate", "=", "6", ")", ":", "\n", "\n", "\t\t", "with", "open", "(", "questions_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "questions", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "scores_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "scores", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "index_path", "=", "index_path", "\n", "self", ".", "frequency", "=", "0", "\n", "self", ".", "num_workers", "=", "1", "\n", "self", ".", "tweet_examples", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "num_examples", "=", "0", "\n", "self", ".", "worker_estimate", "=", "worker_estimate", "\n", "\n", "for", "tweet_id", ",", "q_scores", "in", "scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "q_p_id", ",", "score", "in", "q_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "self", ".", "tweet_examples", "[", "tweet_id", "]", ".", "append", "(", "q_p_id", ")", "\n", "self", ".", "num_examples", "+=", "1", "\n", "", "", "print", "(", "f'Num examples: {self.num_examples}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankDataset.__len__": [[90, 92], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "num_examples", "//", "self", ".", "worker_estimate", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankDataset.__iter__": [[93, 116], ["rerank.get_tweets", "rerank.get_tweet_text"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweets", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweet_text"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\t\t", "ex_idx", "=", "0", "\n", "for", "tweet", "in", "get_tweets", "(", "self", ".", "index_path", ")", ":", "\n", "\t\t\t", "if", "'tweet'", "in", "tweet", ":", "\n", "\t\t\t\t", "tweet", "=", "tweet", "[", "'tweet'", "]", "\n", "", "tweet_id", "=", "tweet", "[", "'id'", "]", "\n", "if", "tweet_id", "not", "in", "self", ".", "tweet_examples", ":", "\n", "\t\t\t\t", "continue", "\n", "", "tweet_text", "=", "get_tweet_text", "(", "tweet", ")", "\n", "# only do relevance re-ranking on bm25 results", "\n", "q_exs", "=", "self", ".", "tweet_examples", "[", "tweet_id", "]", "\n", "# OR do relevance re-ranking on all results (EXPENSIVE)", "\n", "# q_exs = self.questions", "\n", "for", "q_id", "in", "q_exs", ":", "\n", "\t\t\t\t", "ex", "=", "{", "\n", "'id'", ":", "tweet_id", ",", "\n", "'question_id'", ":", "f'{q_id}'", ",", "\n", "'query'", ":", "self", ".", "questions", "[", "q_id", "]", "[", "'text'", "]", ",", "\n", "'text'", ":", "tweet_text", "\n", "}", "\n", "if", "ex_idx", "%", "self", ".", "num_workers", "==", "self", ".", "frequency", ":", "\n", "\t\t\t\t\t", "yield", "ex", "\n", "", "ex_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBatchCollator.__init__": [[119, 124], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "tokenizer", ",", "max_seq_len", ":", "int", ",", "force_max_seq_len", ":", "bool", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "max_seq_len", "=", "max_seq_len", "\n", "self", ".", "force_max_seq_len", "=", "force_max_seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBatchCollator.__call__": [[125, 151], ["rerank.RerankBatchCollator.tokenizer.batch_encode_plus", "ids.append", "question_ids.append", "sequences.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "examples", ")", ":", "\n", "\t\t", "ids", "=", "[", "]", "\n", "question_ids", "=", "[", "]", "\n", "sequences", "=", "[", "]", "\n", "for", "ex", "in", "examples", ":", "\n", "\t\t\t", "ids", ".", "append", "(", "ex", "[", "'id'", "]", ")", "\n", "question_ids", ".", "append", "(", "ex", "[", "'question_id'", "]", ")", "\n", "sequences", ".", "append", "(", "(", "ex", "[", "'query'", "]", ",", "ex", "[", "'text'", "]", ")", ")", "\n", "\n", "", "tokenizer_batch", "=", "self", ".", "tokenizer", ".", "batch_encode_plus", "(", "\n", "batch_text_or_text_pairs", "=", "sequences", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "padding", "=", "'max_length'", "if", "self", ".", "force_max_seq_len", "else", "'longest'", ",", "\n", "return_tensors", "=", "'pt'", ",", "\n", "truncation", "=", "'only_second'", ",", "\n", "max_length", "=", "self", ".", "max_seq_len", "\n", ")", "\n", "batch", "=", "{", "\n", "'id'", ":", "ids", ",", "\n", "'question_id'", ":", "question_ids", ",", "\n", "'input_ids'", ":", "tokenizer_batch", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "tokenizer_batch", "[", "'attention_mask'", "]", ",", "\n", "'token_type_ids'", ":", "tokenizer_batch", "[", "'token_type_ids'", "]", ",", "\n", "}", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert.__init__": [[154, 165], ["pytorch_lightning.LightningModule.__init__", "transformers.AutoModelForSequenceClassification.from_pretrained", "rerank.RerankBert.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "pre_model_name", ",", "predict_mode", "=", "False", ",", "predict_path", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_model_name", "=", "pre_model_name", "\n", "self", ".", "predict_mode", "=", "predict_mode", "\n", "self", ".", "predict_path", "=", "predict_path", "\n", "self", ".", "bert", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "\n", "pre_model_name", "\n", ")", "\n", "self", ".", "config", "=", "self", ".", "bert", ".", "config", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert.forward": [[166, 174], ["rerank.RerankBert.bert"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", ")", ":", "\n", "# [batch_size, 2]", "\n", "\t\t", "logits", "=", "self", ".", "bert", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", "\n", ")", "[", "0", "]", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert.training_step": [[175, 177], ["None"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert.test_step": [[178, 180], ["rerank.RerankBert._eval_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_step"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "\t\t", "return", "self", ".", "_eval_step", "(", "batch", ",", "batch_nb", ",", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert.validation_step": [[181, 183], ["rerank.RerankBert._eval_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_step"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "\t\t", "return", "self", ".", "_eval_step", "(", "batch", ",", "batch_nb", ",", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert._forward_step": [[184, 192], ["rerank.RerankBert."], "methods", ["None"], ["", "def", "_forward_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "\t\t", "logits", "=", "self", "(", "\n", "input_ids", "=", "batch", "[", "'input_ids'", "]", ",", "\n", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", ",", "\n", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", ",", "\n", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert._eval_step": [[193, 213], ["rerank.RerankBert._forward_step", "logits.detach().cpu.detach().cpu.detach().cpu", "rerank.get_device_id", "rerank.RerankBert.write_prediction_dict", "logits.detach().cpu.detach().cpu.detach", "logits[].tolist", "logits[].tolist", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._forward_step", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_device_id"], ["", "def", "_eval_step", "(", "self", ",", "batch", ",", "batch_nb", ",", "name", ")", ":", "\n", "\t\t", "logits", "=", "self", ".", "_forward_step", "(", "batch", ",", "batch_nb", ")", "\n", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "device_id", "=", "get_device_id", "(", ")", "\n", "self", ".", "write_prediction_dict", "(", "\n", "{", "\n", "'id'", ":", "batch", "[", "'id'", "]", ",", "\n", "'question_id'", ":", "batch", "[", "'question_id'", "]", ",", "\n", "'pos_score'", ":", "logits", "[", ":", ",", "1", "]", ".", "tolist", "(", ")", ",", "\n", "'neg_score'", ":", "logits", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", ",", "\n", "}", ",", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "f'predictions-{device_id}.pt'", ")", "\n", ")", "\n", "result", "=", "{", "\n", "f'{name}_id'", ":", "batch", "[", "'id'", "]", ",", "\n", "f'{name}_question_id'", ":", "batch", "[", "'question_id'", "]", ",", "\n", "f'{name}_logits'", ":", "logits", ",", "\n", "}", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert._eval_epoch_end": [[214, 216], ["None"], "methods", ["None"], ["", "def", "_eval_epoch_end", "(", "self", ",", "outputs", ",", "name", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert.validation_epoch_end": [[217, 219], ["rerank.RerankBert._eval_epoch_end"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_epoch_end"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "self", ".", "_eval_epoch_end", "(", "outputs", ",", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.RerankBert.test_epoch_end": [[220, 222], ["rerank.RerankBert._eval_epoch_end"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_epoch_end"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "self", ".", "_eval_epoch_end", "(", "outputs", ",", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.get_tweet_text": [[17, 33], ["tweet_text.replace.startswith", "tweet[].items", "len", "tweet_text.replace.replace"], "function", ["None"], ["def", "get_tweet_text", "(", "tweet", ")", ":", "\n", "\t", "tweet_text", "=", "tweet", "[", "'text'", "]", "\n", "if", "tweet_text", ".", "startswith", "(", "'RT '", ")", ":", "\n", "\t\t", "ref_tweets", "=", "tweet", "[", "'referenced_tweets'", "]", "\n", "if", "len", "(", "ref_tweets", ")", ">", "0", ":", "\n", "\t\t\t", "rt_data", "=", "ref_tweets", "[", "0", "]", "[", "'data'", "]", "\n", "if", "'text'", "in", "rt_data", ":", "\n", "\t\t\t\t", "tweet_text", "=", "rt_data", "[", "'text'", "]", "\n", "", "", "", "if", "'entities'", "in", "tweet", ":", "\n", "\t\t", "for", "e_type", ",", "e_list", "in", "tweet", "[", "'entities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "e_type", "==", "'urls'", ":", "\n", "\t\t\t\t", "for", "e_url", "in", "e_list", ":", "\n", "\t\t\t\t\t", "r_url", "=", "e_url", "[", "'url'", "]", "\n", "s_url", "=", "e_url", "[", "'expanded_url'", "]", "\n", "tweet_text", "=", "tweet_text", ".", "replace", "(", "r_url", ",", "s_url", ")", "\n", "", "", "", "", "return", "tweet_text", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.read_jsonl": [[35, 45], ["open", "line.strip.strip", "json.loads", "print"], "function", ["None"], ["", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t\t\t", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.get_tweets": [[47, 52], ["sorted", "list", "os.path.join", "rerank.read_jsonl", "os.listdir"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "", "", "", "def", "get_tweets", "(", "dir_path", ")", ":", "\n", "\t", "for", "file_name", "in", "sorted", "(", "list", "(", "os", ".", "listdir", "(", "dir_path", ")", ")", ")", ":", "\n", "\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_name", ")", "\n", "for", "ex", "in", "read_jsonl", "(", "file_path", ")", ":", "\n", "\t\t\t", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.worker_init_fn": [[54, 67], ["torch.get_rank", "torch.get_world_size", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "print", "print", "print"], "function", ["None"], ["", "", "", "def", "worker_init_fn", "(", "_", ")", ":", "\n", "\t", "process_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "num_processes", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "worker_id", "=", "worker_info", ".", "id", "\n", "num_workers", "=", "worker_info", ".", "num_workers", "\n", "print", "(", "f'INFO: WORKER_INIT WORKER_INFO: {worker_id}/{num_workers}'", ")", "\n", "print", "(", "f'INFO: WORKER_INIT: RANK_INFO: {process_id}/{num_processes}'", ")", "\n", "dataset", "=", "worker_info", ".", "dataset", "\n", "dataset", ".", "frequency", "=", "(", "process_id", "*", "num_workers", ")", "+", "worker_id", "\n", "dataset", ".", "num_workers", "=", "num_processes", "*", "num_workers", "\n", "print", "(", "f'INFO: WORKER_INIT: F_INFO: {dataset.frequency}/{dataset.num_workers}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.get_device_id": [[224, 233], ["torch.get_rank", "int"], "function", ["None"], ["", "", "def", "get_device_id", "(", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "device_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "except", "Exception", ":", "\n", "\t\t", "if", "'XRT_SHARD_ORDINAL'", "in", "os", ".", "environ", ":", "\n", "\t\t\t", "device_id", "=", "int", "(", "os", ".", "environ", "[", "'XRT_SHARD_ORDINAL'", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "device_id", "=", "0", "\n", "", "", "return", "device_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank.main": [[235, 326], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pytorch_lightning.seed_everything", "transformers.BertTokenizer.from_pretrained", "logging.info", "rerank.RerankDataset", "torch.utils.data.DataLoader", "logging.info", "rerank.RerankBert", "logging.info", "int", "len", "logging.warning", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer", "pl.Trainer.test", "parser.parse_args.gpus.split", "len", "rerank.RerankBatchCollator", "len", "logging.exception"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--index_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-qp'", ",", "'--questions_path'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-sp'", ",", "'--scores_path'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-op'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-pm'", ",", "'--pre_model_name'", ",", "default", "=", "'nboost/pt-biobert-base-msmarco'", ")", "\n", "parser", ".", "add_argument", "(", "'-sd'", ",", "'--save_directory'", ",", "default", "=", "'models'", ")", "\n", "parser", ".", "add_argument", "(", "'-bs'", ",", "'--batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-w'", ",", "'--num_workers'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-ml'", ",", "'--max_seq_len'", ",", "default", "=", "96", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-se'", ",", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-cd'", ",", "'--torch_cache_dir'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-tpu'", ",", "'--use_tpus'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-gpu'", ",", "'--gpus'", ",", "default", "=", "'0'", ")", "\n", "parser", ".", "add_argument", "(", "'-ts'", ",", "'--train_sampling'", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'-ls'", ",", "'--losses'", ",", "default", "=", "'compare_loss'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# export TPU_IP_ADDRESS=10.155.6.34", "\n", "# export XRT_TPU_CONFIG=\"tpu_worker;0;$TPU_IP_ADDRESS:8470\"", "\n", "gpus", "=", "[", "int", "(", "x", ")", "for", "x", "in", "args", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "is_distributed", "=", "len", "(", "gpus", ")", ">", "1", "\n", "precision", "=", "16", "if", "args", ".", "use_tpus", "else", "32", "\n", "# precision = 32", "\n", "tpu_cores", "=", "8", "\n", "num_workers", "=", "args", ".", "num_workers", "\n", "deterministic", "=", "True", "\n", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "args", ".", "pre_model_name", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading datasets...'", ")", "\n", "\n", "val_dataset", "=", "RerankDataset", "(", "\n", "index_path", "=", "args", ".", "index_path", ",", "\n", "scores_path", "=", "args", ".", "scores_path", ",", "\n", "questions_path", "=", "args", ".", "questions_path", ",", "\n", "worker_estimate", "=", "len", "(", "gpus", ")", "\n", ")", "\n", "val_data_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "collate_fn", "=", "RerankBatchCollator", "(", "\n", "tokenizer", ",", "\n", "args", ".", "max_seq_len", ",", "\n", "force_max_seq_len", "=", "args", ".", "use_tpus", ",", "\n", ")", ",", "\n", "worker_init_fn", "=", "worker_init_fn", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading model...'", ")", "\n", "\n", "model", "=", "RerankBert", "(", "\n", "pre_model_name", "=", "args", ".", "pre_model_name", ",", "\n", "predict_mode", "=", "True", ",", "\n", "predict_path", "=", "args", ".", "output_path", "\n", ")", "\n", "\n", "if", "args", ".", "use_tpus", ":", "\n", "\t\t", "logging", ".", "warning", "(", "'Gradient clipping slows down TPU training drastically, disabled for now.'", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "tpu_cores", "=", "tpu_cores", ",", "\n", "max_epochs", "=", "0", ",", "\n", "precision", "=", "precision", ",", "\n", "deterministic", "=", "deterministic", ",", "\n", "checkpoint_callback", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "\t\t", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "\t\t\t", "backend", "=", "'ddp'", "if", "is_distributed", "else", "'dp'", "\n", "", "else", ":", "\n", "\t\t\t", "backend", "=", "None", "\n", "", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "gpus", "=", "gpus", ",", "\n", "max_epochs", "=", "0", ",", "\n", "precision", "=", "precision", ",", "\n", "distributed_backend", "=", "backend", ",", "\n", "deterministic", "=", "deterministic", ",", "\n", "checkpoint_callback", "=", "False", ",", "\n", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Predicting...'", ")", "\n", "try", ":", "\n", "\t\t", "trainer", ".", "test", "(", "model", ",", "val_data_loader", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "logging", ".", "exception", "(", "'Exception during predicting'", ",", "exc_info", "=", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_index_search.batch": [[9, 13], ["len", "range", "min"], "function", ["None"], ["def", "batch", "(", "iterable", ",", "chunk_size", "=", "1", ")", ":", "\n", "\t", "size", "=", "len", "(", "iterable", ")", "\n", "for", "ndx", "in", "range", "(", "0", ",", "size", ",", "chunk_size", ")", ":", "\n", "\t\t", "yield", "iterable", "[", "ndx", ":", "min", "(", "ndx", "+", "chunk_size", ",", "size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_index_search.main": [[15, 62], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pyserini.search.SimpleSearcher", "pyserini.search.SimpleSearcher.set_bm25", "print", "json.load.items", "list", "tqdm.tqdm", "print", "open", "json.load", "queries.append", "tweet_index_search.batch", "pyserini.search.SimpleSearcher.batch_search", "searcher.batch_search.items", "open", "json.dump", "enumerate"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.batch"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--index_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-q'", ",", "'--query_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "'--top_k'", ",", "default", "=", "2000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--threads'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-bk1'", ",", "'--bm25_k1'", ",", "default", "=", "0.82", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-bb'", ",", "'--bm25_b'", ",", "default", "=", "0.68", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "query_path", ")", "as", "f", ":", "\n", "\t\t", "questions", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "searcher", "=", "SimpleSearcher", "(", "args", ".", "index_path", ")", "\n", "searcher", ".", "set_bm25", "(", "args", ".", "bm25_k1", ",", "args", ".", "bm25_b", ")", "\n", "print", "(", "f'Running search...'", ")", "\n", "\n", "queries", "=", "[", "]", "\n", "for", "q_id", ",", "q", "in", "questions", ".", "items", "(", ")", ":", "\n", "\t\t", "q_txt", "=", "q", "[", "'text'", "]", "\n", "queries", ".", "append", "(", "(", "q_id", ",", "q_txt", ")", ")", "\n", "\n", "", "scores", "=", "{", "}", "\n", "batches", "=", "list", "(", "batch", "(", "queries", ",", "chunk_size", "=", "args", ".", "threads", ")", ")", "\n", "for", "batch_pairs", "in", "tqdm", "(", "batches", ")", ":", "\n", "\t\t", "batch_q_txt", "=", "[", "q_txt", "for", "q_p_id", ",", "q_txt", "in", "batch_pairs", "]", "\n", "batch_q_ids", "=", "[", "f'{q_p_id}'", "for", "q_p_id", ",", "q_txt", "in", "batch_pairs", "]", "\n", "\n", "q_hits", "=", "searcher", ".", "batch_search", "(", "\n", "queries", "=", "batch_q_txt", ",", "\n", "qids", "=", "batch_q_ids", ",", "\n", "k", "=", "args", ".", "top_k", ",", "\n", "threads", "=", "args", ".", "threads", "\n", ")", "\n", "for", "q_id", ",", "hits", "in", "q_hits", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "rank", ",", "hit", "in", "enumerate", "(", "hits", "[", ":", "args", ".", "top_k", "]", ",", "start", "=", "1", ")", ":", "\n", "\t\t\t\t", "tweet_id", "=", "hit", ".", "docid", "\n", "if", "tweet_id", "not", "in", "scores", ":", "\n", "\t\t\t\t\t", "scores", "[", "tweet_id", "]", "=", "{", "}", "\n", "", "scores", "[", "tweet_id", "]", "[", "q_id", "]", "=", "hit", ".", "score", "\n", "\n", "", "", "", "with", "open", "(", "args", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "scores", ",", "f", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.read_jsonl": [[8, 18], ["open", "line.strip.strip", "json.loads", "print"], "function", ["None"], ["def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t\t\t", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.write_jsonl": [[20, 25], ["open", "json.dumps", "f.write"], "function", ["None"], ["", "", "", "", "", "def", "write_jsonl", "(", "data", ",", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "example", "in", "data", ":", "\n", "\t\t\t", "json_data", "=", "json", ".", "dumps", "(", "example", ")", "\n", "f", ".", "write", "(", "json_data", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.get_tweet_text": [[27, 43], ["tweet_text.replace.startswith", "tweet[].items", "len", "tweet_text.replace.replace"], "function", ["None"], ["", "", "", "def", "get_tweet_text", "(", "tweet", ")", ":", "\n", "\t", "tweet_text", "=", "tweet", "[", "'text'", "]", "\n", "if", "tweet_text", ".", "startswith", "(", "'RT '", ")", ":", "\n", "\t\t", "ref_tweets", "=", "tweet", "[", "'referenced_tweets'", "]", "\n", "if", "len", "(", "ref_tweets", ")", ">", "0", ":", "\n", "\t\t\t", "rt_data", "=", "ref_tweets", "[", "0", "]", "[", "'data'", "]", "\n", "if", "'text'", "in", "rt_data", ":", "\n", "\t\t\t\t", "tweet_text", "=", "rt_data", "[", "'text'", "]", "\n", "", "", "", "if", "'entities'", "in", "tweet", ":", "\n", "\t\t", "for", "e_type", ",", "e_list", "in", "tweet", "[", "'entities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "e_type", "==", "'urls'", ":", "\n", "\t\t\t\t", "for", "e_url", "in", "e_list", ":", "\n", "\t\t\t\t\t", "r_url", "=", "e_url", "[", "'url'", "]", "\n", "s_url", "=", "e_url", "[", "'expanded_url'", "]", "\n", "tweet_text", "=", "tweet_text", ".", "replace", "(", "r_url", ",", "s_url", ")", "\n", "", "", "", "", "return", "tweet_text", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.invert_errors": [[45, 55], ["collections.defaultdict", "error[].replace"], "function", ["None"], ["", "def", "invert_errors", "(", "errors", ")", ":", "\n", "\t", "inv", "=", "defaultdict", "(", "dict", ")", "\n", "for", "error", "in", "errors", ":", "\n", "\t\t", "if", "'resource_id'", "in", "error", ":", "\n", "\t\t\t", "r_id", "=", "error", "[", "'resource_id'", "]", "\n", "", "else", ":", "\n", "\t\t\t", "r_id", "=", "error", "[", "'value'", "]", "\n", "", "e_type", "=", "error", "[", "'detail'", "]", ".", "replace", "(", "f': [{r_id}].'", ",", "''", ")", "\n", "inv", "[", "r_id", "]", "[", "e_type", "]", "=", "error", "\n", "", "return", "inv", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.invert_ids": [[57, 65], ["None"], "function", ["None"], ["", "def", "invert_ids", "(", "items", ")", ":", "\n", "\t", "inv", "=", "{", "}", "\n", "for", "item", "in", "items", ":", "\n", "\t\t", "item_id", "=", "item", "[", "'id'", "]", "if", "'id'", "in", "item", "else", "item", "[", "'media_key'", "]", "\n", "inv", "[", "item_id", "]", "=", "item", "\n", "if", "'username'", "in", "item", ":", "\n", "\t\t\t", "inv", "[", "item", "[", "'username'", "]", "]", "=", "item", "\n", "", "", "return", "inv", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.invert_includes": [[67, 72], ["includes.items", "tweet_to_jsonl.invert_ids"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_ids"], ["", "def", "invert_includes", "(", "includes", ")", ":", "\n", "\t", "inv", "=", "{", "}", "\n", "for", "key", ",", "vals", "in", "includes", ".", "items", "(", ")", ":", "\n", "\t\t", "inv", "[", "key", "]", "=", "invert_ids", "(", "vals", ")", "\n", "", "return", "inv", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.parse_tweet": [[74, 107], ["tweet[].items"], "function", ["None"], ["", "def", "parse_tweet", "(", "tweet", ",", "inv_includes", ",", "inv_errors", ")", ":", "\n", "\t", "author_id", "=", "tweet", "[", "'author_id'", "]", "\n", "if", "author_id", "in", "inv_errors", ":", "\n", "\t\t", "author", "=", "inv_errors", "[", "author_id", "]", "\n", "", "else", ":", "\n", "\t\t", "author", "=", "inv_includes", "[", "'users'", "]", "[", "author_id", "]", "\n", "", "tweet", "[", "'author'", "]", "=", "author", "\n", "if", "'entities'", "not", "in", "tweet", ":", "\n", "\t\t", "tweet", "[", "'entities'", "]", "=", "{", "}", "\n", "", "for", "e_type", ",", "e_vals", "in", "tweet", "[", "'entities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "e_type", "==", "'mentions'", ":", "\n", "\t\t\t", "for", "e", "in", "e_vals", ":", "\n", "\t\t\t\t", "if", "'username'", "in", "e", ":", "\n", "\t\t\t\t\t", "e_username", "=", "e", "[", "'username'", "]", "\n", "if", "e_username", "in", "inv_errors", ":", "\n", "\t\t\t\t\t\t", "e_user", "=", "inv_errors", "[", "e_username", "]", "\n", "", "elif", "e_username", "in", "inv_includes", "[", "'users'", "]", ":", "\n", "\t\t\t\t\t\t", "e_user", "=", "inv_includes", "[", "'users'", "]", "[", "e_username", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "e_user", "=", "None", "\n", "", "e", "[", "'user'", "]", "=", "e_user", "\n", "", "", "", "", "if", "'referenced_tweets'", "not", "in", "tweet", ":", "\n", "\t\t", "tweet", "[", "'referenced_tweets'", "]", "=", "[", "]", "\n", "", "for", "ref_tweet", "in", "tweet", "[", "'referenced_tweets'", "]", ":", "\n", "\t\t", "r_id", "=", "ref_tweet", "[", "'id'", "]", "\n", "if", "r_id", "in", "inv_errors", ":", "\n", "\t\t\t", "r_tweet", "=", "inv_errors", "[", "r_id", "]", "\n", "", "elif", "r_id", "in", "inv_includes", "[", "'tweets'", "]", ":", "\n", "\t\t\t", "r_tweet", "=", "inv_includes", "[", "'tweets'", "]", "[", "r_id", "]", "\n", "", "else", ":", "\n", "\t\t\t", "r_tweet", "=", "None", "\n", "", "ref_tweet", "[", "'data'", "]", "=", "r_tweet", "\n", "", "return", "tweet", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.parse_tweets": [[109, 120], ["tweet_to_jsonl.invert_includes", "tweet_to_jsonl.invert_errors", "tweet_to_jsonl.parse_tweet"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_includes", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_errors", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.parse_tweet"], ["", "def", "parse_tweets", "(", "tweets", ")", ":", "\n", "\t", "if", "'data'", "not", "in", "tweets", ":", "\n", "\t\t", "return", "\n", "", "tweet", "=", "tweets", "[", "'data'", "]", "\n", "if", "'includes'", "not", "in", "tweets", ":", "\n", "\t\t", "tweets", "[", "'includes'", "]", "=", "{", "}", "\n", "", "if", "'errors'", "not", "in", "tweets", ":", "\n", "\t\t", "tweets", "[", "'errors'", "]", "=", "[", "]", "\n", "", "t_includes", "=", "invert_includes", "(", "tweets", "[", "'includes'", "]", ")", "\n", "t_errors", "=", "invert_errors", "(", "tweets", "[", "'errors'", "]", ")", "\n", "return", "parse_tweet", "(", "tweet", ",", "t_includes", ",", "t_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.create_jsonl_doc": [[122, 133], ["tweet_to_jsonl.get_tweet_text", "tweet_to_jsonl.parse_tweets"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweet_text", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.parse_tweets"], ["", "def", "create_jsonl_doc", "(", "tweet", ")", ":", "\n", "\t", "if", "'data'", "in", "tweet", ":", "\n", "\t\t", "tweet", "=", "parse_tweets", "(", "tweet", ")", "\n", "", "tweet_id", "=", "tweet", "[", "'id'", "]", "\n", "tweet_text", "=", "get_tweet_text", "(", "tweet", ")", "\n", "doc", "=", "{", "\n", "'id'", ":", "tweet_id", ",", "\n", "'contents'", ":", "tweet_text", ",", "\n", "'tweet'", ":", "tweet", "\n", "}", "\n", "return", "doc", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.main": [[135, 156], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "tweet_to_jsonl.read_jsonl", "print", "tweet_to_jsonl.write_jsonl", "print", "tqdm.tqdm", "tweet_to_jsonl.create_jsonl_doc"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.write_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.tweet_to_jsonl.create_jsonl_doc"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "'Loading tweets...'", ")", "\n", "tweets", "=", "read_jsonl", "(", "args", ".", "input_path", ")", "\n", "\n", "print", "(", "'Writing jsonl tweets...'", ")", "\n", "write_jsonl", "(", "\n", "tqdm", "(", "\n", "(", "\n", "create_jsonl_doc", "(", "tweet", ")", "for", "tweet", "in", "tweets", "\n", ")", "\n", ")", ",", "\n", "args", ".", "output_path", "\n", ")", "\n", "\n", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.select_candidates.read_jsonl": [[11, 21], ["open", "line.strip.strip", "json.loads", "print"], "function", ["None"], ["def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t\t\t", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.select_candidates.write_jsonl": [[23, 28], ["open", "json.dumps", "f.write"], "function", ["None"], ["", "", "", "", "", "def", "write_jsonl", "(", "data", ",", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "example", "in", "data", ":", "\n", "\t\t\t", "json_data", "=", "json", ".", "dumps", "(", "example", ")", "\n", "f", ".", "write", "(", "json_data", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.select_candidates.get_tweets": [[30, 35], ["os.listdir", "os.path.join", "select_candidates.read_jsonl"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "", "def", "get_tweets", "(", "dir_path", ")", ":", "\n", "\t", "for", "file_name", "in", "os", ".", "listdir", "(", "dir_path", ")", ":", "\n", "\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_name", ")", "\n", "for", "ex", "in", "read_jsonl", "(", "file_path", ")", ":", "\n", "\t\t\t", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.select_candidates.collect_tweets": [[37, 46], ["tqdm.tqdm", "select_candidates.get_tweets"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweets"], ["", "", "", "def", "collect_tweets", "(", "dir_path", ",", "tweet_candidates", ")", ":", "\n", "\t", "for", "tweet", "in", "tqdm", "(", "get_tweets", "(", "dir_path", ")", ",", "total", "=", "19000000", ")", ":", "\n", "\t\t", "if", "'tweet'", "in", "tweet", ":", "\n", "\t\t\t", "tweet", "=", "tweet", "[", "'tweet'", "]", "\n", "", "tweet_id", "=", "tweet", "[", "'id'", "]", "\n", "if", "tweet_id", "not", "in", "tweet_candidates", ":", "\n", "\t\t\t", "continue", "\n", "", "tweet", "[", "'candidates'", "]", "=", "tweet_candidates", "[", "tweet_id", "]", "\n", "yield", "tweet", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.select_candidates.main": [[48, 94], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "collections.defaultdict", "json.load.items", "print", "tqdm.tqdm", "print", "tqdm.tqdm", "print", "select_candidates.write_jsonl", "open", "json.load", "t_scores.items", "list", "sorted", "collections.defaultdict.items", "enumerate", "select_candidates.collect_tweets", "question_scores[].append"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.write_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.select_candidates.collect_tweets"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--index_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-sc'", ",", "'--scores_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-mir'", ",", "'--min_rank'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-mis'", ",", "'--min_score'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "scores_path", ")", "as", "f", ":", "\n", "# [q_id][t_id] = score", "\n", "\t\t", "scores", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "question_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "tweet_id", ",", "t_scores", "in", "scores", ".", "items", "(", ")", ":", "\n", "\t\t", "for", "q_id", ",", "score", "in", "t_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "question_scores", "[", "q_id", "]", ".", "append", "(", "(", "score", ",", "tweet_id", ")", ")", "\n", "\n", "", "", "print", "(", "f'Sorting tweets for each subquestion...'", ")", "\n", "for", "q_id", "in", "tqdm", "(", "list", "(", "question_scores", ")", ")", ":", "\n", "\t\t", "question_scores", "[", "q_id", "]", "=", "sorted", "(", "\n", "question_scores", "[", "q_id", "]", ",", "\n", "# (score, tweet_id)", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "\n", "reverse", "=", "True", "\n", ")", "\n", "\n", "", "print", "(", "f'Collecting candidates for each tweet...'", ")", "\n", "tweet_candidates", "=", "{", "}", "\n", "for", "q_id", ",", "q_rel", "in", "tqdm", "(", "question_scores", ".", "items", "(", ")", ")", ":", "\n", "\t\t", "for", "rank", ",", "(", "t_score", ",", "tweet_id", ")", "in", "enumerate", "(", "q_rel", ",", "start", "=", "1", ")", ":", "\n", "\t\t\t", "if", "t_score", "<", "args", ".", "min_score", "and", "rank", ">", "args", ".", "min_rank", ":", "\n", "\t\t\t\t", "break", "\n", "", "if", "tweet_id", "not", "in", "tweet_candidates", ":", "\n", "# tweet['candidates'] = {}", "\n", "\t\t\t\t", "tweet_candidates", "[", "tweet_id", "]", "=", "{", "}", "\n", "", "t_candidates", "=", "tweet_candidates", "[", "tweet_id", "]", "\n", "t_candidates", "[", "q_id", "]", "=", "{", "\n", "'rank'", ":", "rank", ",", "\n", "'score'", ":", "t_score", "\n", "}", "\n", "\n", "", "", "print", "(", "f'Writing candidate tweets...'", ")", "\n", "write_jsonl", "(", "\n", "collect_tweets", "(", "args", ".", "index_path", ",", "tweet_candidates", ")", ",", "\n", "args", ".", "output_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankDataset.__init__": [[74, 93], ["collections.defaultdict", "cross_rerank.get_tweets", "print", "open", "json.load", "cross_rerank.RerankDataset.tweet_examples[].append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweets"], ["\t", "def", "__init__", "(", "self", ",", "data_path", ",", "questions_path", ",", "worker_estimate", "=", "6", ")", ":", "\n", "\n", "\t\t", "with", "open", "(", "questions_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "questions", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "frequency", "=", "0", "\n", "self", ".", "num_workers", "=", "1", "\n", "self", ".", "tweet_examples", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "num_examples", "=", "0", "\n", "self", ".", "worker_estimate", "=", "worker_estimate", "\n", "for", "tweet", "in", "get_tweets", "(", "self", ".", "data_path", ")", ":", "\n", "\t\t\t", "tweet_id", "=", "tweet", "[", "'id'", "]", "\n", "for", "q_id", "in", "self", ".", "questions", ":", "\n", "\t\t\t\t", "if", "q_id", "in", "tweet", "[", "'candidates'", "]", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "self", ".", "tweet_examples", "[", "tweet_id", "]", ".", "append", "(", "q_id", ")", "\n", "self", ".", "num_examples", "+=", "1", "\n", "", "", "print", "(", "f'Num examples: {self.num_examples}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankDataset.__len__": [[94, 96], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "num_examples", "//", "self", ".", "worker_estimate", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankDataset.__iter__": [[97, 118], ["cross_rerank.get_tweets", "cross_rerank.get_tweet_text"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweets", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweet_text"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\t\t", "ex_idx", "=", "0", "\n", "for", "tweet", "in", "get_tweets", "(", "self", ".", "data_path", ")", ":", "\n", "\t\t\t", "tweet_id", "=", "tweet", "[", "'id'", "]", "\n", "if", "tweet_id", "not", "in", "self", ".", "tweet_examples", ":", "\n", "\t\t\t\t", "continue", "\n", "", "tweet_text", "=", "get_tweet_text", "(", "tweet", ")", "\n", "# only do relevance re-ranking on bm25 results", "\n", "q_exs", "=", "self", ".", "tweet_examples", "[", "tweet_id", "]", "\n", "# OR do relevance re-ranking on all results (EXPENSIVE)", "\n", "# q_exs = self.questions", "\n", "for", "q_id", "in", "q_exs", ":", "\n", "\t\t\t\t", "ex", "=", "{", "\n", "'id'", ":", "tweet_id", ",", "\n", "'question_id'", ":", "f'{q_id}'", ",", "\n", "'query'", ":", "self", ".", "questions", "[", "q_id", "]", "[", "'text'", "]", ",", "\n", "'text'", ":", "tweet_text", "\n", "}", "\n", "if", "ex_idx", "%", "self", ".", "num_workers", "==", "self", ".", "frequency", ":", "\n", "\t\t\t\t\t", "yield", "ex", "\n", "", "ex_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBatchCollator.__init__": [[121, 126], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "tokenizer", ",", "max_seq_len", ":", "int", ",", "force_max_seq_len", ":", "bool", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "max_seq_len", "=", "max_seq_len", "\n", "self", ".", "force_max_seq_len", "=", "force_max_seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBatchCollator.__call__": [[127, 153], ["cross_rerank.RerankBatchCollator.tokenizer.batch_encode_plus", "ids.append", "question_ids.append", "sequences.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "examples", ")", ":", "\n", "\t\t", "ids", "=", "[", "]", "\n", "question_ids", "=", "[", "]", "\n", "sequences", "=", "[", "]", "\n", "for", "ex", "in", "examples", ":", "\n", "\t\t\t", "ids", ".", "append", "(", "ex", "[", "'id'", "]", ")", "\n", "question_ids", ".", "append", "(", "ex", "[", "'question_id'", "]", ")", "\n", "sequences", ".", "append", "(", "(", "ex", "[", "'query'", "]", ",", "ex", "[", "'text'", "]", ")", ")", "\n", "\n", "", "tokenizer_batch", "=", "self", ".", "tokenizer", ".", "batch_encode_plus", "(", "\n", "batch_text_or_text_pairs", "=", "sequences", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "padding", "=", "'max_length'", "if", "self", ".", "force_max_seq_len", "else", "'longest'", ",", "\n", "return_tensors", "=", "'pt'", ",", "\n", "truncation", "=", "'only_second'", ",", "\n", "max_length", "=", "self", ".", "max_seq_len", "\n", ")", "\n", "batch", "=", "{", "\n", "'id'", ":", "ids", ",", "\n", "'question_id'", ":", "question_ids", ",", "\n", "'input_ids'", ":", "tokenizer_batch", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "tokenizer_batch", "[", "'attention_mask'", "]", ",", "\n", "'token_type_ids'", ":", "tokenizer_batch", "[", "'token_type_ids'", "]", ",", "\n", "}", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert.__init__": [[156, 167], ["pytorch_lightning.LightningModule.__init__", "transformers.AutoModelForSequenceClassification.from_pretrained", "cross_rerank.RerankBert.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "pre_model_name", ",", "predict_mode", "=", "False", ",", "predict_path", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_model_name", "=", "pre_model_name", "\n", "self", ".", "predict_mode", "=", "predict_mode", "\n", "self", ".", "predict_path", "=", "predict_path", "\n", "self", ".", "bert", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "\n", "pre_model_name", "\n", ")", "\n", "self", ".", "config", "=", "self", ".", "bert", ".", "config", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert.forward": [[168, 176], ["cross_rerank.RerankBert.bert"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", ")", ":", "\n", "# [batch_size, 2]", "\n", "\t\t", "logits", "=", "self", ".", "bert", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", "\n", ")", "[", "0", "]", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert.training_step": [[177, 179], ["None"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert.test_step": [[180, 182], ["cross_rerank.RerankBert._eval_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_step"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "\t\t", "return", "self", ".", "_eval_step", "(", "batch", ",", "batch_nb", ",", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert.validation_step": [[183, 185], ["cross_rerank.RerankBert._eval_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_step"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "\t\t", "return", "self", ".", "_eval_step", "(", "batch", ",", "batch_nb", ",", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._forward_step": [[186, 194], ["cross_rerank.RerankBert."], "methods", ["None"], ["", "def", "_forward_step", "(", "self", ",", "batch", ",", "batch_nb", ")", ":", "\n", "\t\t", "logits", "=", "self", "(", "\n", "input_ids", "=", "batch", "[", "'input_ids'", "]", ",", "\n", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", ",", "\n", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", ",", "\n", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_step": [[195, 215], ["cross_rerank.RerankBert._forward_step", "logits.detach().cpu.detach().cpu.detach().cpu", "cross_rerank.get_device_id", "cross_rerank.RerankBert.write_prediction_dict", "logits.detach().cpu.detach().cpu.detach", "logits[].tolist", "logits[].tolist", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._forward_step", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_device_id"], ["", "def", "_eval_step", "(", "self", ",", "batch", ",", "batch_nb", ",", "name", ")", ":", "\n", "\t\t", "logits", "=", "self", ".", "_forward_step", "(", "batch", ",", "batch_nb", ")", "\n", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "device_id", "=", "get_device_id", "(", ")", "\n", "self", ".", "write_prediction_dict", "(", "\n", "{", "\n", "'id'", ":", "batch", "[", "'id'", "]", ",", "\n", "'question_id'", ":", "batch", "[", "'question_id'", "]", ",", "\n", "'pos_score'", ":", "logits", "[", ":", ",", "1", "]", ".", "tolist", "(", ")", ",", "\n", "'neg_score'", ":", "logits", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", ",", "\n", "}", ",", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "f'predictions-{device_id}.pt'", ")", "\n", ")", "\n", "result", "=", "{", "\n", "f'{name}_id'", ":", "batch", "[", "'id'", "]", ",", "\n", "f'{name}_question_id'", ":", "batch", "[", "'question_id'", "]", ",", "\n", "f'{name}_logits'", ":", "logits", ",", "\n", "}", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_epoch_end": [[216, 218], ["None"], "methods", ["None"], ["", "def", "_eval_epoch_end", "(", "self", ",", "outputs", ",", "name", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert.validation_epoch_end": [[219, 221], ["cross_rerank.RerankBert._eval_epoch_end"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_epoch_end"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "self", ".", "_eval_epoch_end", "(", "outputs", ",", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert.test_epoch_end": [[222, 224], ["cross_rerank.RerankBert._eval_epoch_end"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.RerankBert._eval_epoch_end"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "self", ".", "_eval_epoch_end", "(", "outputs", ",", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweet_text": [[17, 33], ["tweet_text.replace.startswith", "tweet[].items", "len", "tweet_text.replace.replace"], "function", ["None"], ["def", "get_tweet_text", "(", "tweet", ")", ":", "\n", "\t", "tweet_text", "=", "tweet", "[", "'text'", "]", "\n", "if", "tweet_text", ".", "startswith", "(", "'RT '", ")", ":", "\n", "\t\t", "ref_tweets", "=", "tweet", "[", "'referenced_tweets'", "]", "\n", "if", "len", "(", "ref_tweets", ")", ">", "0", ":", "\n", "\t\t\t", "rt_data", "=", "ref_tweets", "[", "0", "]", "[", "'data'", "]", "\n", "if", "'text'", "in", "rt_data", ":", "\n", "\t\t\t\t", "tweet_text", "=", "rt_data", "[", "'text'", "]", "\n", "", "", "", "if", "'entities'", "in", "tweet", ":", "\n", "\t\t", "for", "e_type", ",", "e_list", "in", "tweet", "[", "'entities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "e_type", "==", "'urls'", ":", "\n", "\t\t\t\t", "for", "e_url", "in", "e_list", ":", "\n", "\t\t\t\t\t", "r_url", "=", "e_url", "[", "'url'", "]", "\n", "s_url", "=", "e_url", "[", "'expanded_url'", "]", "\n", "tweet_text", "=", "tweet_text", ".", "replace", "(", "r_url", ",", "s_url", ")", "\n", "", "", "", "", "return", "tweet_text", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.read_jsonl": [[35, 45], ["open", "line.strip.strip", "json.loads", "print"], "function", ["None"], ["", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t\t\t", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_tweets": [[47, 52], ["cross_rerank.read_jsonl"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "", "", "", "def", "get_tweets", "(", "file_path", ")", ":", "\n", "\t", "for", "ex", "in", "read_jsonl", "(", "file_path", ")", ":", "\n", "\t\t", "if", "'tweet'", "in", "ex", ":", "\n", "\t\t\t", "ex", "=", "ex", "[", "'tweet'", "]", "\n", "", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.worker_init_fn": [[54, 71], ["torch.get_rank", "torch.get_world_size", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "print", "print", "print"], "function", ["None"], ["", "", "def", "worker_init_fn", "(", "_", ")", ":", "\n", "# ISSUE: this only works for WORKERS within the same process, not", "\n", "# TODO multiprocessing", "\n", "\t", "process_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "num_processes", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "worker_id", "=", "worker_info", ".", "id", "\n", "num_workers", "=", "worker_info", ".", "num_workers", "\n", "print", "(", "f'INFO: WORKER_INIT WORKER_INFO: {worker_id}/{num_workers}'", ")", "\n", "print", "(", "f'INFO: WORKER_INIT: RANK_INFO: {process_id}/{num_processes}'", ")", "\n", "dataset", "=", "worker_info", ".", "dataset", "\n", "# dataset.frequency = worker_id", "\n", "# dataset.num_workers = num_workers", "\n", "dataset", ".", "frequency", "=", "(", "process_id", "*", "num_workers", ")", "+", "worker_id", "\n", "dataset", ".", "num_workers", "=", "num_processes", "*", "num_workers", "\n", "print", "(", "f'INFO: WORKER_INIT: F_INFO: {dataset.frequency}/{dataset.num_workers}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.get_device_id": [[226, 235], ["torch.get_rank", "int"], "function", ["None"], ["", "", "def", "get_device_id", "(", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "device_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "except", "Exception", ":", "\n", "\t\t", "if", "'XRT_SHARD_ORDINAL'", "in", "os", ".", "environ", ":", "\n", "\t\t\t", "device_id", "=", "int", "(", "os", ".", "environ", "[", "'XRT_SHARD_ORDINAL'", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "device_id", "=", "0", "\n", "", "", "return", "device_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.cross_rerank.main": [[237, 326], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pytorch_lightning.seed_everything", "transformers.BertTokenizer.from_pretrained", "logging.info", "cross_rerank.RerankDataset", "torch.utils.data.DataLoader", "logging.info", "cross_rerank.RerankBert", "logging.info", "int", "len", "logging.warning", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer", "pl.Trainer.test", "parser.parse_args.gpus.split", "len", "cross_rerank.RerankBatchCollator", "len", "logging.exception"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--data_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-qp'", ",", "'--questions_path'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-op'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-pm'", ",", "'--pre_model_name'", ",", "default", "=", "'nboost/pt-biobert-base-msmarco'", ")", "\n", "parser", ".", "add_argument", "(", "'-sd'", ",", "'--save_directory'", ",", "default", "=", "'models'", ")", "\n", "parser", ".", "add_argument", "(", "'-w'", ",", "'--num_workers'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-bs'", ",", "'--batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-ml'", ",", "'--max_seq_len'", ",", "default", "=", "96", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-se'", ",", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-cd'", ",", "'--torch_cache_dir'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-tpu'", ",", "'--use_tpus'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-gpu'", ",", "'--gpus'", ",", "default", "=", "'0'", ")", "\n", "parser", ".", "add_argument", "(", "'-ts'", ",", "'--train_sampling'", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'-ls'", ",", "'--losses'", ",", "default", "=", "'compare_loss'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "pl", ".", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "# export TPU_IP_ADDRESS=10.155.6.34", "\n", "# export XRT_TPU_CONFIG=\"tpu_worker;0;$TPU_IP_ADDRESS:8470\"", "\n", "gpus", "=", "[", "int", "(", "x", ")", "for", "x", "in", "args", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "is_distributed", "=", "len", "(", "gpus", ")", ">", "1", "\n", "precision", "=", "16", "if", "args", ".", "use_tpus", "else", "32", "\n", "# precision = 32", "\n", "tpu_cores", "=", "8", "\n", "num_workers", "=", "args", ".", "num_workers", "\n", "deterministic", "=", "True", "\n", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "args", ".", "pre_model_name", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading datasets...'", ")", "\n", "\n", "val_dataset", "=", "RerankDataset", "(", "\n", "data_path", "=", "args", ".", "data_path", ",", "\n", "questions_path", "=", "args", ".", "questions_path", ",", "\n", "worker_estimate", "=", "len", "(", "gpus", ")", "\n", ")", "\n", "val_data_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "collate_fn", "=", "RerankBatchCollator", "(", "\n", "tokenizer", ",", "\n", "args", ".", "max_seq_len", ",", "\n", "force_max_seq_len", "=", "args", ".", "use_tpus", ",", "\n", ")", ",", "\n", "worker_init_fn", "=", "worker_init_fn", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "'Loading model...'", ")", "\n", "\n", "model", "=", "RerankBert", "(", "\n", "pre_model_name", "=", "args", ".", "pre_model_name", ",", "\n", "predict_mode", "=", "True", ",", "\n", "predict_path", "=", "args", ".", "output_path", "\n", ")", "\n", "\n", "if", "args", ".", "use_tpus", ":", "\n", "\t\t", "logging", ".", "warning", "(", "'Gradient clipping slows down TPU training drastically, disabled for now.'", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "tpu_cores", "=", "tpu_cores", ",", "\n", "max_epochs", "=", "0", ",", "\n", "precision", "=", "precision", ",", "\n", "deterministic", "=", "deterministic", ",", "\n", "checkpoint_callback", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "\t\t", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "\t\t\t", "backend", "=", "'ddp'", "if", "is_distributed", "else", "'dp'", "\n", "", "else", ":", "\n", "\t\t\t", "backend", "=", "None", "\n", "", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "gpus", "=", "gpus", ",", "\n", "max_epochs", "=", "0", ",", "\n", "precision", "=", "precision", ",", "\n", "distributed_backend", "=", "backend", ",", "\n", "deterministic", "=", "deterministic", ",", "\n", "checkpoint_callback", "=", "False", ",", "\n", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Predicting...'", ")", "\n", "try", ":", "\n", "\t\t", "trainer", ".", "test", "(", "model", ",", "val_data_loader", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "logging", ".", "exception", "(", "'Exception during predicting'", ",", "exc_info", "=", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank_format.load_predictions": [[9, 31], ["os.listdir", "collections.defaultdict", "print", "print", "file_name.endswith", "torch.load", "pred_list.extend", "collections.defaultdict", "os.path.join"], "function", ["None"], ["def", "load_predictions", "(", "input_path", ")", ":", "\n", "\t", "pred_list", "=", "[", "]", "\n", "for", "file_name", "in", "os", ".", "listdir", "(", "input_path", ")", ":", "\n", "\t\t", "if", "file_name", ".", "endswith", "(", "'.pt'", ")", ":", "\n", "\t\t\t", "preds", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "input_path", ",", "file_name", ")", ")", "\n", "pred_list", ".", "extend", "(", "preds", ")", "\n", "\n", "", "", "question_scores", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "dict", ")", ")", "\n", "p_count", "=", "0", "\n", "u_count", "=", "0", "\n", "for", "prediction", "in", "pred_list", ":", "\n", "\t\t", "doc_pass_id", "=", "prediction", "[", "'id'", "]", "\n", "q_p_id", "=", "prediction", "[", "'question_id'", "]", "\n", "# score = prediction['pos_score']", "\n", "score", "=", "prediction", "[", "'pos_score'", "]", "-", "prediction", "[", "'neg_score'", "]", "\n", "if", "doc_pass_id", "not", "in", "question_scores", "or", "q_p_id", "not", "in", "question_scores", "[", "doc_pass_id", "]", ":", "\n", "\t\t\t", "p_count", "+=", "1", "\n", "", "u_count", "+=", "1", "\n", "question_scores", "[", "doc_pass_id", "]", "[", "q_p_id", "]", "=", "score", "\n", "", "print", "(", "f'{p_count} unique predictions'", ")", "\n", "print", "(", "f'{u_count} total predictions'", ")", "\n", "return", "question_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank_format.main": [[33, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "rerank_format.load_predictions", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.search.rerank_format.load_predictions"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "output_path", "=", "args", ".", "output_path", "\n", "\n", "question_scores", "=", "load_predictions", "(", "input_path", ")", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "question_scores", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.__init__": [[6, 17], ["super().__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "num_thresholds", ":", "int", "=", "1", ",", "threshold_min", ":", "float", "=", "0.0", ",", "threshold_max", ":", "float", "=", "1.0", ",", "threshold_delta", ":", "float", "=", "0.01", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_thresholds", "=", "num_thresholds", "\n", "self", ".", "threshold_min", "=", "threshold_min", "\n", "self", ".", "threshold_max", "=", "threshold_max", "\n", "self", ".", "threshold_delta", "=", "threshold_delta", "\n", "\n", "self", ".", "_thresholds", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "num_thresholds", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.thresholds": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "thresholds", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "_thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.forward": [[23, 25], ["base_thresholds.ThresholdModule.predict"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassCallableThresholdModule.predict"], ["", "def", "forward", "(", "self", ",", "scores", ")", ":", "\n", "\t\t", "return", "self", ".", "predict", "(", "scores", ",", "self", ".", "thresholds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.predict": [[26, 29], ["scores.gt().long", "scores.gt"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "scores", ",", "thresholds", ")", ":", "\n", "\t\t", "preds", "=", "scores", ".", "gt", "(", "thresholds", ")", ".", "long", "(", ")", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.update_thresholds": [[30, 32], ["base_thresholds.ThresholdModule.thresholds.copy_"], "methods", ["None"], ["", "def", "update_thresholds", "(", "self", ",", "new_value", ")", ":", "\n", "\t\t", "self", ".", "thresholds", ".", "copy_", "(", "new_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.get_range": [[33, 42], ["torch.arange"], "methods", ["None"], ["", "def", "get_range", "(", "self", ",", "threshold_min", ":", "float", "=", "None", ",", "threshold_max", ":", "float", "=", "None", ",", "threshold_delta", ":", "float", "=", "None", ")", ":", "\n", "\t\t", "threshold_range", "=", "torch", ".", "arange", "(", "\n", "self", ".", "threshold_min", "if", "threshold_min", "is", "None", "else", "threshold_min", ",", "\n", "self", ".", "threshold_max", "if", "threshold_max", "is", "None", "else", "threshold_max", ",", "\n", "self", ".", "threshold_delta", "if", "threshold_delta", "is", "None", "else", "threshold_delta", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "return", "threshold_range", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.get_range_predictions": [[43, 50], ["base_thresholds.ThresholdModule.get_range_threshold_predictions", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.get_range_threshold_predictions"], ["", "def", "get_range_predictions", "(", "self", ",", "scores", ",", "threshold_min", ":", "float", "=", "None", ",", "threshold_max", ":", "float", "=", "None", ",", "threshold_delta", ":", "float", "=", "None", ")", ":", "\n", "\t\t", "if", "self", ".", "num_thresholds", "==", "1", ":", "\n", "\t\t\t", "t_preds", "=", "self", ".", "get_range_threshold_predictions", "(", "scores", ",", "threshold_min", ",", "threshold_max", ",", "threshold_delta", ")", "\n", "for", "threshold", ",", "preds", "in", "t_preds", ":", "\n", "\t\t\t\t", "yield", "threshold", ",", "preds", "\n", "", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "'Still need to implement this properly'", ")", "\n", "# for t_idx in range(self.num_thresholds):", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.get_range_threshold_predictions": [[56, 60], ["base_thresholds.ThresholdModule.get_range", "base_thresholds.ThresholdModule.predict"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.get_range", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassCallableThresholdModule.predict"], ["", "", "def", "get_range_threshold_predictions", "(", "self", ",", "scores", ",", "threshold_min", ":", "float", "=", "None", ",", "threshold_max", ":", "float", "=", "None", ",", "threshold_delta", ":", "float", "=", "None", ")", ":", "\n", "\t\t", "for", "threshold", "in", "self", ".", "get_range", "(", "threshold_min", ",", "threshold_max", ",", "threshold_delta", ")", ":", "\n", "\t\t\t", "preds", "=", "self", ".", "predict", "(", "scores", ",", "threshold", ")", "\n", "yield", "threshold", ",", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassThresholdModule.__init__": [[7, 9], ["pytorch_gleam.modeling.thresholds.base_thresholds.ThresholdModule.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassThresholdModule.predict": [[10, 29], ["pos_scores.gt().float", "pos_scores.gt().float.sum().gt().long", "pos_scores.gt", "pos_scores.gt().float.sum().gt", "pos_scores.max", "pos_scores.gt().float.sum"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "scores", ",", "thresholds", ")", ":", "\n", "# zero class is idx 0", "\n", "# pos classes is idx 1, ...", "\n", "\t\t", "pos_scores", "=", "scores", "[", "...", ",", "1", ":", "]", "\n", "# filter out non-threshold classes", "\n", "pos_above", "=", "pos_scores", ".", "gt", "(", "thresholds", ")", ".", "float", "(", ")", "\n", "# [bsize, num_labels-1]", "\n", "pos_scores", "=", "pos_scores", "*", "pos_above", "\n", "# 1 if any are above threshold, 0 if none are above threshold", "\n", "# [bsize]", "\n", "pos_any_above", "=", "(", "pos_above", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "gt", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "# if none are above threshold then our prediction will be class 0, otherwise it will be", "\n", "# between the classes which have scores above the threshold", "\n", "# [bsize]", "\n", "# we add one to the class id to account for the [:, 1:] filtering of only positive scores", "\n", "pos_predictions", "=", "(", "pos_scores", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "+", "1", ")", "\n", "# [bsize]", "\n", "predictions", "=", "pos_predictions", "*", "pos_any_above", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassCallableThresholdModule.__init__": [[32, 34], ["multi_class.MultiClassThresholdModule.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassCallableThresholdModule.predict": [[35, 38], ["scores"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "scores", ",", "thresholds", ")", ":", "\n", "\t\t", "predictions", "=", "scores", "(", "thresholds", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassMultiLabelCallableThresholdModule.__init__": [[41, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassMultiLabelCallableThresholdModule.thresholds": [[44, 47], ["multi_class.MultiClassMultiLabelCallableThresholdModule.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "thresholds", "(", "self", ")", ":", "\n", "\t\t", "return", "[", "x", ".", "thresholds", "for", "x", "in", "self", ".", "values", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassMultiLabelThresholdModule.__init__": [[50, 52], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassMultiLabelThresholdModule.thresholds": [[53, 56], ["multi_class.MultiClassMultiLabelThresholdModule.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "thresholds", "(", "self", ")", ":", "\n", "\t\t", "return", "[", "x", ".", "thresholds", "for", "x", "in", "self", ".", "values", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.__init__": [[12, 32], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "gcn.GraphConvolution.register_parameter", "print", "gcn.GraphConvolution.reset_parameters_uniform", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print", "gcn.GraphConvolution.reset_parameters_xavier", "print", "gcn.GraphConvolution.reset_parameters_kaiming"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.reset_parameters_uniform", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.reset_parameters_xavier", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.reset_parameters_kaiming"], ["\t", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "init", "=", "'xavier'", ")", ":", "\n", "\t\t", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "\t\t\t", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "if", "init", "==", "'uniform'", ":", "\n", "\t\t\t", "print", "(", "\"| Uniform Initialization\"", ")", "\n", "self", ".", "reset_parameters_uniform", "(", ")", "\n", "", "elif", "init", "==", "'xavier'", ":", "\n", "\t\t\t", "print", "(", "\"| Xavier Initialization\"", ")", "\n", "self", ".", "reset_parameters_xavier", "(", ")", "\n", "", "elif", "init", "==", "'kaiming'", ":", "\n", "\t\t\t", "print", "(", "\"| Kaiming Initialization\"", ")", "\n", "self", ".", "reset_parameters_kaiming", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.reset_parameters_uniform": [[33, 38], ["gcn.GraphConvolution.weight.data.uniform_", "math.sqrt", "gcn.GraphConvolution.bias.data.uniform_", "gcn.GraphConvolution.weight.size"], "methods", ["None"], ["", "", "def", "reset_parameters_uniform", "(", "self", ")", ":", "\n", "\t\t", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.reset_parameters_xavier": [[39, 43], ["torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "reset_parameters_xavier", "(", "self", ")", ":", "\n", "\t\t", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "weight", ".", "data", ",", "gain", "=", "0.02", ")", "# Implement Xavier Uniform", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.reset_parameters_kaiming": [[44, 48], ["torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "reset_parameters_kaiming", "(", "self", ")", ":", "\n", "\t\t", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.forward": [[49, 60], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "adj", ")", ":", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "# support = torch.mm(inputs, self.weight)", "\n", "\t\t", "support", "=", "torch", ".", "matmul", "(", "inputs", ",", "self", ".", "weight", ")", "\n", "# [bsize, seq_len, seq_len] x [bsize, seq_len, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "# output = torch.mm(adj, support)", "\n", "output", "=", "torch", ".", "matmul", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "\t\t\t", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphConvolution.__repr__": [[61, 65], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphAttention.__init__": [[68, 91], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout", ",", "alpha", "=", "0.2", ",", "concat", "=", "True", ",", "return_attention", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "GraphAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "\n", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ",", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "self", ".", "a1", "=", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "\n", "torch", ".", "Tensor", "(", "out_features", ",", "1", ")", ",", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "self", ".", "a2", "=", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "\n", "torch", ".", "Tensor", "(", "out_features", ",", "1", ")", ",", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphAttention.forward": [[92, 118], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gcn.GraphAttention.leakyrelu", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.elu", "torch.elu", "torch.elu", "torch.matmul.transpose", "torch.matmul.transpose", "torch.matmul.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "adj", ")", ":", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "\t\t", "h", "=", "torch", ".", "matmul", "(", "inputs", ",", "self", ".", "W", ")", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, 1] -> [bsize, seq_len, 1]", "\n", "f_1", "=", "torch", ".", "matmul", "(", "h", ",", "self", ".", "a1", ")", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, 1]", "\n", "f_2", "=", "torch", ".", "matmul", "(", "h", ",", "self", ".", "a2", ")", "\n", "# [bsize, seq_len, 1] + [bsize, 1, seq_len] -> [bsize, seq_len, seq_len]", "\n", "e", "=", "self", ".", "leakyrelu", "(", "f_1", "+", "f_2", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "# [bsize, seq_len, seq_len]", "\n", "zero_vec", "=", "-", "9e15", "*", "torch", ".", "ones_like", "(", "e", ")", "\n", "# [bsize, seq_len, seq_len]", "\n", "attention", "=", "torch", ".", "where", "(", "adj", ">", "0", ",", "e", ",", "zero_vec", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "-", "1", ")", "\n", "attention", "=", "F", ".", "dropout", "(", "attention", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "# [bsize, seq_len, seq_len] x [bsize, seq_len, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "attention", ",", "h", ")", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "\t\t\t", "return_vals", "=", "F", ".", "elu", "(", "h_prime", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return_vals", "=", "h_prime", "\n", "", "if", "self", ".", "return_attention", ":", "\n", "\t\t\t", "return_vals", "=", "(", "return_vals", ",", "attention", ")", "\n", "\n", "", "return", "return_vals", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.GraphAttention.__repr__": [[119, 121], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.TransformerGraphAttention.__init__": [[124, 135], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout_prob", ",", "activation", "=", "True", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_prob", ")", "\n", "self", ".", "normalizer", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.TransformerGraphAttention.forward": [[136, 161], ["gcn.TransformerGraphAttention.query", "gcn.TransformerGraphAttention.key", "gcn.TransformerGraphAttention.value", "adj.float.float.float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gcn.TransformerGraphAttention.normalizer", "gcn.TransformerGraphAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gcn.TransformerGraphAttention.transpose", "math.sqrt", "torch.elu", "torch.elu", "torch.elu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "adj", ")", ":", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "\t\t", "q", "=", "self", ".", "query", "(", "inputs", ")", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "k", "=", "self", ".", "key", "(", "inputs", ")", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "v", "=", "self", ".", "value", "(", "inputs", ")", "\n", "# [bsize, seq_len, seq_len]", "\n", "adj", "=", "adj", ".", "float", "(", ")", "\n", "adj", "=", "(", "1.0", "-", "adj", ")", "*", "-", "10000.0", "\n", "\n", "# [bsize, seq_len, hidden_size] x [bsize, hidden_size, seq_len] -> [bsize, seq_len, seq_len]", "\n", "a", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "a", "=", "a", "/", "math", ".", "sqrt", "(", "q", ".", "shape", "[", "-", "1", "]", ")", "\n", "# [bsize, seq_len, seq_len] + [bsize, seq_len, seq_len]", "\n", "a", "=", "a", "+", "adj", "\n", "a_probs", "=", "self", ".", "normalizer", "(", "a", ")", "\n", "a_probs", "=", "self", ".", "dropout", "(", "a_probs", ")", "\n", "# [bsize, seq_len, seq_len] x [bsize, seq_len, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "a_probs", ",", "v", ")", "\n", "\n", "if", "self", ".", "activation", ":", "\n", "\t\t\t", "return", "F", ".", "elu", "(", "h_prime", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "h_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.TransformerGraphAttention.__repr__": [[162, 164], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.EdgeTransformerGraphAttention.__init__": [[168, 179], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout_prob", ",", "activation", "=", "True", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_prob", ")", "\n", "self", ".", "normalizer", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.EdgeTransformerGraphAttention.forward": [[180, 206], ["gcn.EdgeTransformerGraphAttention.query", "gcn.EdgeTransformerGraphAttention.key", "gcn.EdgeTransformerGraphAttention.value", "adj.unsqueeze.unsqueeze.float", "adj.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gcn.EdgeTransformerGraphAttention.normalizer", "gcn.EdgeTransformerGraphAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gcn.EdgeTransformerGraphAttention.transpose", "math.sqrt", "torch.elu", "torch.elu", "torch.elu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "adj", ")", ":", "\n", "# TODO", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "\t\t", "q", "=", "self", ".", "query", "(", "inputs", ")", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "k", "=", "self", ".", "key", "(", "inputs", ")", "\n", "# [bsize, seq_len, hidden_size] x [hidden_size, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "v", "=", "self", ".", "value", "(", "inputs", ")", "\n", "\n", "adj", "=", "adj", ".", "float", "(", ")", "\n", "adj", "=", "adj", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "adj", "=", "(", "1.0", "-", "adj", ")", "*", "-", "10000.0", "\n", "\n", "# [bsize, seq_len, hidden_size] x [bsize, hidden_size, seq_len] -> [bsize, seq_len, seq_len]", "\n", "a", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "a", "=", "a", "/", "math", ".", "sqrt", "(", "q", ".", "shape", "[", "-", "1", "]", ")", "\n", "a", "=", "a", "+", "adj", "\n", "a_probs", "=", "self", ".", "normalizer", "(", "a", ")", "\n", "a_probs", "=", "self", ".", "dropout", "(", "a_probs", ")", "\n", "# [bsize, seq_len, seq_len] x [bsize, seq_len, hidden_size] -> [bsize, seq_len, hidden_size]", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "a_probs", ",", "v", ")", "\n", "\n", "if", "self", ".", "activation", ":", "\n", "\t\t\t", "return", "F", ".", "elu", "(", "h_prime", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "h_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.layers.gcn.EdgeTransformerGraphAttention.__repr__": [[207, 209], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.activation.HopfieldCore.__init__": [[50, 165], ["torch.nn.Module.__init__", "activation.HopfieldCore._check_execution_mode", "activation.HopfieldCore._reset_parameters", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "activation.HopfieldCore.register_parameter", "activation.HopfieldCore.register_parameter", "activation.HopfieldCore.register_parameter", "activation.HopfieldCore.register_parameter", "activation.HopfieldCore.register_parameter", "activation.HopfieldCore.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "activation.HopfieldCore.register_parameter", "activation.HopfieldCore.register_parameter", "type", "type", "type", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "activation.HopfieldCore.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "activation.HopfieldCore.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "activation.HopfieldCore.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "activation.HopfieldCore.register_parameter", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "_LinearWithBias", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.activation.HopfieldCore._check_execution_mode", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.StatePattern._reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "embed_dim", "=", "None", ",", "# type: Optional[int]", "\n", "num_heads", "=", "1", ",", "# type: int", "\n", "dropout", "=", "0.0", ",", "# type: float", "\n", "bias", "=", "True", ",", "# type: bool", "\n", "add_bias_kv", "=", "False", ",", "# type: bool", "\n", "add_zero_attn", "=", "False", ",", "# type: bool", "\n", "kdim", "=", "None", ",", "# type: Optional[int]", "\n", "vdim", "=", "None", ",", "# type: Optional[int]", "\n", "\n", "head_dim", "=", "None", ",", "# type: Optional[int]", "\n", "out_dim", "=", "None", ",", "# type: Optional[int]", "\n", "disable_out_projection", "=", "False", ",", "# type: bool", "\n", "key_as_static", "=", "False", ",", "# type: bool", "\n", "query_as_static", "=", "False", ",", "# type: bool", "\n", "value_as_static", "=", "False", ",", "# type: bool", "\n", "value_as_connected", "=", "False", ",", "# type: bool", "\n", "normalize_pattern", "=", "False", ",", "# type: bool", "\n", "normalize_pattern_affine", "=", "False", "# type: bool", "\n", ")", ":", "\n", "        ", "super", "(", "HopfieldCore", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "type", "(", "key_as_static", ")", "==", "bool", ")", "and", "(", "type", "(", "query_as_static", ")", "==", "bool", ")", "and", "(", "type", "(", "value_as_static", ")", "==", "bool", ")", "\n", "self", ".", "key_as_static", ",", "self", ".", "query_as_static", ",", "self", ".", "value_as_static", "=", "key_as_static", ",", "query_as_static", ",", "value_as_static", "\n", "num_non_static", "=", "3", "-", "(", "self", ".", "key_as_static", "+", "self", ".", "query_as_static", "+", "self", ".", "value_as_static", ")", "\n", "assert", "0", "<=", "num_non_static", "<", "4", "\n", "\n", "self", ".", "value_as_connected", "=", "value_as_connected", "\n", "self", ".", "normalize_pattern", ",", "self", ".", "normalize_pattern_affine", "=", "normalize_pattern", ",", "normalize_pattern_affine", "\n", "self", ".", "disable_out_projection", "=", "disable_out_projection", "\n", "\n", "# In case of a static-only executions, check corresponding projections and normalizations.", "\n", "self", ".", "static_execution", "=", "self", ".", "_check_execution_mode", "(", ")", "\n", "if", "self", ".", "static_execution", ":", "\n", "            ", "embed_dim", ",", "kdim", ",", "vdim", "=", "None", ",", "None", ",", "None", "\n", "", "if", "embed_dim", "is", "None", ":", "\n", "            ", "assert", "self", ".", "static_execution", ",", "r'static-only execution requires all projections to be deactivated.'", "\n", "\n", "# Check and set all other properties, conditioned on <static_execution>.", "\n", "", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "kdim", "=", "kdim", "if", "kdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "vdim", "=", "vdim", "if", "vdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "_qkv_same_embed_dim", "=", "self", ".", "kdim", "==", "embed_dim", "and", "self", ".", "vdim", "==", "embed_dim", "and", "not", "self", ".", "value_as_connected", "\n", "assert", "(", "not", "self", ".", "value_as_connected", ")", "or", "(", "self", ".", "kdim", "==", "self", ".", "vdim", ")", ",", "r'key and value need to be of same dimension.'", "\n", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "None", "\n", "if", "not", "self", ".", "static_execution", ":", "\n", "            ", "if", "head_dim", "is", "None", ":", "\n", "                ", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "self", ".", "head_dim", "*", "num_heads", "==", "self", ".", "embed_dim", ",", "\"embed_dim must be divisible by num_heads.\"", "\n", "", "else", ":", "\n", "                ", "assert", "head_dim", ">", "0", ",", "\"dimension of the association space has to be positive.\"", "\n", "self", ".", "head_dim", "=", "head_dim", "\n", "", "", "self", ".", "virtual_hopfield_dim", "=", "None", "if", "(", "self", ".", "head_dim", "is", "None", ")", "else", "(", "self", ".", "num_heads", "*", "self", ".", "head_dim", ")", "\n", "\n", "self", ".", "out_dim", "=", "embed_dim", "if", "out_dim", "is", "None", "else", "out_dim", "\n", "assert", "disable_out_projection", "or", "(", "self", ".", "out_dim", ">", "0", ")", ",", "\"output projection dimension has to be positive.\"", "\n", "\n", "if", "normalize_pattern_affine", ":", "\n", "            ", "assert", "normalize_pattern", ",", "\"affine pattern normalization without pattern normalization has no effect.\"", "\n", "self", ".", "p_norm_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "head_dim", ")", ")", "\n", "self", ".", "p_norm_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "head_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'p_norm_weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'p_norm_bias'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "_qkv_same_embed_dim", "is", "False", ":", "\n", "            ", "if", "query_as_static", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'q_proj_weight'", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "q_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "virtual_hopfield_dim", ",", "embed_dim", ")", ")", "\n", "", "if", "key_as_static", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'k_proj_weight'", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "k_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "virtual_hopfield_dim", ",", "self", ".", "kdim", ")", ")", "\n", "", "if", "value_as_static", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'v_proj_weight'", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "v_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "virtual_hopfield_dim", ",", "\n", "self", ".", "virtual_hopfield_dim", "if", "(", "value_as_connected", "and", "not", "key_as_static", ")", "else", "self", ".", "vdim", ")", ")", "\n", "", "self", ".", "register_parameter", "(", "'in_proj_weight'", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "if", "num_non_static", ">", "0", ":", "\n", "                ", "self", ".", "in_proj_weight", "=", "Parameter", "(", "torch", ".", "empty", "(", "num_non_static", "*", "self", ".", "virtual_hopfield_dim", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'in_proj_weight'", ",", "None", ")", "\n", "", "self", ".", "register_parameter", "(", "'q_proj_weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'k_proj_weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'v_proj_weight'", ",", "None", ")", "\n", "\n", "", "if", "bias", "and", "(", "num_non_static", ">", "0", ")", ":", "\n", "            ", "self", ".", "in_proj_bias", "=", "Parameter", "(", "torch", ".", "empty", "(", "num_non_static", "*", "self", ".", "virtual_hopfield_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'in_proj_bias'", ",", "None", ")", "\n", "", "if", "disable_out_projection", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'out_proj'", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "if", "bias", "and", "_LinearWithBias", "is", "not", "None", ":", "\n", "                ", "self", ".", "out_proj", "=", "_LinearWithBias", "(", "self", ".", "virtual_hopfield_dim", ",", "self", ".", "out_dim", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "out_proj", "=", "Linear", "(", "self", ".", "virtual_hopfield_dim", ",", "self", ".", "out_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "", "", "self", ".", "bias_k", ",", "self", ".", "bias_v", "=", "None", ",", "None", "\n", "if", "add_bias_kv", ":", "\n", "            ", "if", "not", "key_as_static", ":", "\n", "                ", "self", ".", "bias_k", "=", "Parameter", "(", "torch", ".", "empty", "(", "1", ",", "1", ",", "self", ".", "virtual_hopfield_dim", ")", ")", "\n", "", "if", "not", "value_as_static", ":", "\n", "                ", "self", ".", "bias_v", "=", "Parameter", "(", "torch", ".", "empty", "(", "1", ",", "1", ",", "self", ".", "virtual_hopfield_dim", ")", ")", "\n", "", "assert", "not", "(", "self", ".", "bias_k", "is", "None", "and", "self", ".", "bias_v", "is", "None", ")", ",", "r'cannot set key/value bias if both are static.'", "\n", "\n", "", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.activation.HopfieldCore._check_execution_mode": [[166, 170], ["all"], "methods", ["None"], ["", "def", "_check_execution_mode", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "all", "(", "(", "\n", "self", ".", "key_as_static", ",", "self", ".", "query_as_static", ",", "self", ".", "value_as_static", ",", "not", "self", ".", "value_as_connected", ",", "\n", "not", "self", ".", "normalize_pattern", ",", "not", "self", ".", "normalize_pattern_affine", ",", "self", ".", "disable_out_projection", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.activation.HopfieldCore._reset_parameters": [[172, 195], ["torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "p_norm_weight", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "ones_", "(", "self", ".", "p_norm_weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "p_norm_bias", ")", "\n", "\n", "", "if", "self", ".", "_qkv_same_embed_dim", "and", "(", "self", ".", "in_proj_weight", "is", "not", "None", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "in_proj_weight", ",", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "q_proj_weight", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "q_proj_weight", ",", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "", "if", "self", ".", "k_proj_weight", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "k_proj_weight", ",", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "", "if", "self", ".", "v_proj_weight", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "v_proj_weight", ",", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "\n", "", "", "if", "self", ".", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "in_proj_bias", ",", "0.0", ")", "\n", "if", "not", "self", ".", "disable_out_projection", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.0", ")", "\n", "", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bias_k", ",", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "", "if", "self", ".", "bias_v", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bias_v", ",", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.activation.HopfieldCore.__setstate__": [[196, 198], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.activation.HopfieldCore.__setstate__"], ["", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "HopfieldCore", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.activation.HopfieldCore.forward": [[199, 327], ["any", "pytorch_gleam.modeling.layers.hopfield.functional.hopfield_core_forward", "pytorch_gleam.modeling.layers.hopfield.functional.hopfield_core_forward"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.functional.hopfield_core_forward", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.functional.hopfield_core_forward"], ["", "def", "forward", "(", "self", ",", "\n", "query", ",", "# type: Tensor", "\n", "key", ",", "# type: Tensor", "\n", "value", ",", "# type: Tensor", "\n", "key_padding_mask", "=", "None", ",", "# type: Optional[Tensor]", "\n", "need_weights", "=", "True", ",", "# type: bool", "\n", "attn_mask", "=", "None", ",", "# type: Optional[Tensor]", "\n", "\n", "scaling", "=", "None", ",", "# type: Optional[Tensor]", "\n", "update_steps_max", "=", "0", ",", "# type: Optional[int]", "\n", "update_steps_eps", "=", "1e-4", ",", "# type: float", "\n", "return_raw_associations", "=", "False", ",", "# type: bool", "\n", "return_pattern_projections", "=", "False", "# type: bool", "\n", ")", ":", "\n", "# type: (...) -> Tuple[Tensor, Optional[Tensor], Optional[Tensor]]", "\n", "        ", "r\"\"\"\n        Args:\n            query, key, value: map a query and a set of key-value pairs to an output.\n                See \"Attention Is All You Need\" for more details.\n                See \"Hopfield Networks is All You Need\" for more details in the setting of Hopfield networks.\n            key_padding_mask: if provided, specified padding elements in the key will\n                be ignored by the attention. When given a binary mask and a value is True,\n                the corresponding value on the attention layer will be ignored. When given\n                a byte mask and a value is non-zero, the corresponding value on the attention\n                layer will be ignored.\n            need_weights: output attn_output_weights.\n            attn_mask: 2D or 3D mask that prevents attention to certain positions. A 2D mask will be broadcasted for all\n                the batches while a 3D mask allows to specify a different mask for the entries of each batch.\n\n            scaling: scaling of association heads, often represented as beta (one entry per head).\n            update_steps_max: maximum count of association update steps (None equals to infinity).\n            update_steps_eps: minimum difference threshold between two consecutive association update steps.\n            return_raw_associations: return raw association (softmax) values, unmodified.\n            return_pattern_projections: return pattern projection values, unmodified.\n\n        Shape:\n            - Inputs:\n            - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is\n              the embedding dimension.\n            - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is\n              the embedding dimension.\n            - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is\n              the embedding dimension.\n            - key_padding_mask: :math:`(N, S)` where N is the batch size, S is the source sequence length.\n              If a ByteTensor is provided, the non-zero positions will be ignored while the position\n              with the zero positions will be unchanged. If a BoolTensor is provided, the positions with the\n              value of ``True`` will be ignored while the position with the value of ``False`` will be unchanged.\n            - attn_mask: 2D mask :math:`(L, S)` where L is the target sequence length, S is the source sequence length.\n              3D mask :math:`(N*num_heads, L, S)` where N is the batch size, L is the target sequence length,\n              S is the source sequence length. attn_mask ensure that position i is allowed to attend the unmasked\n              positions. If a ByteTensor is provided, the non-zero positions are not allowed to attend\n              while the zero positions will be unchanged. If a BoolTensor is provided, positions with ``True``\n              is not allowed to attend while ``False`` values will be unchanged. If a FloatTensor\n              is provided, it will be added to the attention weight.\n\n            - scaling: :math:`(num_heads,)`, where num_heads is the amount of heads.\n\n            - Outputs:\n            - attn_output: :math:`(L, N, E)` where L is the target sequence length, N is the batch size,\n              E is the embedding dimension.\n            - attn_output_weights: :math:`(N, L, S)` where N is the batch size,\n              L is the target sequence length, S is the source sequence length.\n            - attn_raw: :math:``(N, num_heads, L, S)`, where N is the batch size,\n              L is the target sequence length, S is the source sequence length.\n        \"\"\"", "\n", "if", "self", ".", "query_as_static", "and", "self", ".", "key_as_static", ":", "\n", "            ", "assert", "query", ".", "shape", "[", "2", "]", "==", "key", ".", "shape", "[", "2", "]", ",", "f'query shape[2] of {query.shape[2]} and key shape[2] of {key.shape[2]} need to be equal'", "\n", "head_dim", ",", "embed_dim_to_check", "=", "query", ".", "shape", "[", "2", "]", ",", "query", ".", "shape", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "query_as_static", "or", "(", "query", ".", "shape", "[", "2", "]", "==", "self", ".", "embed_dim", ")", ",", "f'query shape[2] of {query.shape[2]} invalid, needs to be {self.embed_dim}.'", "\n", "assert", "(", "not", "self", ".", "query_as_static", ")", "or", "(", "self", ".", "query_as_static", "and", "query", ".", "shape", "[", "2", "]", "==", "self", ".", "head_dim", ")", ",", "f'query shape[2] of {query.shape[2]} invalid, needs to be {self.head_dim}'", "\n", "\n", "assert", "self", ".", "key_as_static", "or", "(", "key", ".", "shape", "[", "2", "]", "==", "self", ".", "kdim", ")", ",", "f'key shape[2] of {key.shape[2]} invalid, needs to be {self.kdim}.'", "\n", "assert", "(", "not", "self", ".", "key_as_static", ")", "or", "(", "self", ".", "key_as_static", "and", "key", ".", "shape", "[", "2", "]", "==", "self", ".", "head_dim", ")", ",", "f'key shape[2] of {key.shape[2]} invalid, needs to be {self.head_dim}'", "\n", "head_dim", ",", "embed_dim_to_check", "=", "self", ".", "head_dim", ",", "self", ".", "head_dim", "if", "self", ".", "query_as_static", "else", "self", ".", "embed_dim", "\n", "\n", "", "assert", "self", ".", "value_as_static", "or", "(", "value", ".", "shape", "[", "2", "]", "==", "self", ".", "vdim", ")", ",", "f'value shape[2] of {value.shape[2]} invalid, needs to be {self.vdim}.'", "\n", "assert", "any", "(", "(", "\n", "not", "self", ".", "value_as_static", ",", "self", ".", "value_as_static", "and", "value", ".", "shape", "[", "2", "]", "==", "self", ".", "head_dim", ",", "\n", "self", ".", "disable_out_projection", ")", "\n", ")", ",", "f'value shape[2] of {value.shape[2]} invalid, needs to be {self.head_dim}'", "\n", "\n", "out_weights", ",", "out_bias", "=", "None", ",", "None", "\n", "if", "not", "self", ".", "disable_out_projection", ":", "\n", "            ", "out_weights", ",", "out_bias", "=", "self", ".", "out_proj", ".", "weight", ",", "self", ".", "out_proj", ".", "bias", "\n", "\n", "", "if", "not", "self", ".", "_qkv_same_embed_dim", ":", "\n", "            ", "return", "hopfield_core_forward", "(", "\n", "query", ",", "key", ",", "value", ",", "embed_dim_to_check", ",", "self", ".", "num_heads", ",", "\n", "self", ".", "in_proj_weight", ",", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "self", ".", "bias_v", ",", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "out_weights", ",", "out_bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ",", "use_separate_proj_weight", "=", "True", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj_weight", ",", "k_proj_weight", "=", "self", ".", "k_proj_weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj_weight", ",", "\n", "\n", "key_as_static", "=", "self", ".", "key_as_static", ",", "query_as_static", "=", "self", ".", "query_as_static", ",", "\n", "value_as_static", "=", "self", ".", "value_as_static", ",", "value_as_connected", "=", "self", ".", "value_as_connected", ",", "\n", "normalize_pattern", "=", "self", ".", "normalize_pattern", ",", "\n", "p_norm_weight", "=", "self", ".", "p_norm_weight", ",", "p_norm_bias", "=", "self", ".", "p_norm_bias", ",", "\n", "head_dim", "=", "head_dim", ",", "scaling", "=", "scaling", ",", "\n", "update_steps_max", "=", "update_steps_max", ",", "update_steps_eps", "=", "update_steps_eps", ",", "\n", "return_raw_associations", "=", "return_raw_associations", ",", "return_projected_patterns", "=", "return_pattern_projections", ")", "\n", "", "else", ":", "\n", "            ", "return", "hopfield_core_forward", "(", "\n", "query", ",", "key", ",", "value", ",", "embed_dim_to_check", ",", "self", ".", "num_heads", ",", "\n", "self", ".", "in_proj_weight", ",", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "self", ".", "bias_v", ",", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "out_weights", ",", "out_bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "\n", "key_as_static", "=", "self", ".", "key_as_static", ",", "query_as_static", "=", "self", ".", "query_as_static", ",", "\n", "value_as_static", "=", "self", ".", "value_as_static", ",", "value_as_connected", "=", "self", ".", "value_as_connected", ",", "\n", "normalize_pattern", "=", "self", ".", "normalize_pattern", ",", "\n", "p_norm_weight", "=", "self", ".", "p_norm_weight", ",", "p_norm_bias", "=", "self", ".", "p_norm_bias", ",", "\n", "head_dim", "=", "head_dim", ",", "scaling", "=", "scaling", ",", "\n", "update_steps_max", "=", "update_steps_max", ",", "update_steps_eps", "=", "update_steps_eps", ",", "\n", "return_raw_associations", "=", "return_raw_associations", ",", "return_projected_patterns", "=", "return_pattern_projections", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.functional.hopfield_core_forward": [[8, 442], ["torch.tensor", "torch.tensor", "update_active_heads.unsqueeze().unsqueeze().repeat.any", "update_active_heads.unsqueeze().unsqueeze().repeat.any", "torch.functional.dropout", "torch.bmm", "torch.bmm", "nn.functional.linear.transpose().contiguous().view", "torch.jit.is_scripting", "torch.jit.is_scripting", "type", "type", "type", "type", "torch.tensor.to", "float", "torch.bmm", "torch.bmm", "list", "torch.functional.linear", "torch.masked_scatter.view", "nn.functional.linear.view", "attn_output_weights.view.view", "any", "torch.functional.has_torch_function", "torch.functional.handle_torch_function", "key.size", "value.size", "key.size", "value.size", "type", "type", "type", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.masked_scatter.masked_select().view", "nn.functional.linear.masked_select().view", "torch.masked_scatter", "torch.masked_scatter", "type", "nn.functional.linear.contiguous().view().transpose", "nn.functional.linear.size", "nn.functional.linear.transpose", "list", "attn_output_weights.view.view", "attn_output_weights.view.masked_fill", "attn_output_weights.view.view", "torch.functional.softmax", "torch.masked_scatter", "torch.masked_scatter", "torch.no_grad", "torch.no_grad", "torch.masked_scatter.view", "update_active_heads.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat", "nn.functional.linear.size", "nn.functional.linear.transpose().contiguous", "scaling.ndimension", "torch.tensor.ndimension", "torch.tensor.ndimension", "torch.nn.functional.layer_norm().reshape", "torch.nn.functional.layer_norm().reshape", "torch.nn.functional.layer_norm().reshape", "torch.nn.functional.layer_norm().reshape", "type", "scaling.unsqueeze().repeat", "print", "nn.functional.pad.to", "nn.functional.linear.contiguous().view().transpose", "nn.functional.linear.contiguous().view().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_output_weights.view.size", "attn_output_weights.view.masked_fill_", "nn.functional.pad.unsqueeze().unsqueeze", "float", "attn_output_weights.view.sum", "torch.ones", "torch.ones", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.functional.linear().chunk", "query.repeat", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "key.repeat", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "torch.functional.linear", "nn.functional.linear.repeat", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "print", "nn.functional.pad.to", "nn.functional.pad.dim", "nn.functional.pad.unsqueeze", "torch.masked_scatter.masked_select", "nn.functional.linear.masked_select", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nn.functional.linear.contiguous().view", "static_k.size", "static_k.size", "static_v.size", "static_v.size", "nn.functional.pad.size", "nn.functional.pad.size", "torch.functional.pad", "torch.functional.pad", "float", "torch.functional.softmax", "update_active_heads.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze", "nn.functional.linear.transpose", "type", "torch.equal", "torch.equal", "torch.functional.linear", "torch.functional.linear", "torch.functional.linear", "torch.functional.linear", "torch.functional.linear", "list", "RuntimeError", "nn.functional.pad.dim", "RuntimeError", "torch.nn.functional.layer_norm", "torch.nn.functional.layer_norm", "torch.nn.functional.layer_norm", "torch.nn.functional.layer_norm", "scaling.unsqueeze", "torch.functional.pad", "torch.functional.pad", "nn.functional.linear.contiguous().view", "nn.functional.linear.contiguous().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "nn.functional.pad.unsqueeze", "attn_output_weights.view.masked_select().view", "torch.functional.linear", "query.repeat", "torch.functional.linear", "torch.functional.linear().chunk", "query.repeat", "torch.functional.linear", "key.repeat", "torch.functional.linear", "value.repeat", "torch.functional.linear", "query.size", "key.size", "nn.functional.linear.size", "nn.functional.pad.size", "query.size", "key.size", "list", "RuntimeError", "bias_k.repeat", "bias_v.repeat", "nn.functional.linear.contiguous", "update_active_heads.unsqueeze().unsqueeze().repeat.unsqueeze", "nn.functional.pad.size", "query.size", "key.size", "nn.functional.pad.dim", "nn.functional.linear.reshape", "nn.functional.linear.reshape", "nn.functional.linear.contiguous", "nn.functional.linear.contiguous", "attn_output_weights.view.masked_select", "torch.functional.linear", "nn.functional.linear.size", "nn.functional.linear.size", "nn.functional.linear.size", "nn.functional.linear.size"], "function", ["None"], ["def", "hopfield_core_forward", "(", "query", ",", "# type: Tensor", "\n", "key", ",", "# type: Tensor", "\n", "value", ",", "# type: Tensor", "\n", "embed_dim_to_check", ",", "# type: int", "\n", "num_heads", ",", "# type: int", "\n", "in_proj_weight", ",", "# type: Optional[Tensor]", "\n", "in_proj_bias", ",", "# type: Optional[Tensor]", "\n", "bias_k", ",", "# type: Optional[Tensor]", "\n", "bias_v", ",", "# type: Optional[Tensor]", "\n", "add_zero_attn", ",", "# type: bool", "\n", "dropout_p", ",", "# type: float", "\n", "out_proj_weight", ",", "# type: Tensor", "\n", "out_proj_bias", ",", "# type: Tensor", "\n", "training", "=", "True", ",", "# type: bool", "\n", "key_padding_mask", "=", "None", ",", "# type: Optional[Tensor]", "\n", "need_weights", "=", "True", ",", "# type: bool", "\n", "attn_mask", "=", "None", ",", "# type: Optional[Tensor]", "\n", "use_separate_proj_weight", "=", "False", ",", "# type: bool", "\n", "q_proj_weight", "=", "None", ",", "# type: Optional[Tensor]", "\n", "k_proj_weight", "=", "None", ",", "# type: Optional[Tensor]", "\n", "v_proj_weight", "=", "None", ",", "# type: Optional[Tensor]", "\n", "static_k", "=", "None", ",", "# type: Optional[Tensor]", "\n", "static_v", "=", "None", ",", "# type: Optional[Tensor]", "\n", "\n", "key_as_static", "=", "False", ",", "# type: bool", "\n", "query_as_static", "=", "False", ",", "# type: bool", "\n", "value_as_static", "=", "False", ",", "# type: bool", "\n", "value_as_connected", "=", "False", ",", "# type: bool", "\n", "normalize_pattern", "=", "False", ",", "# type: bool", "\n", "p_norm_weight", "=", "None", ",", "# type: Optional[Tensor]", "\n", "p_norm_bias", "=", "None", ",", "# type: Optional[Tensor]", "\n", "head_dim", "=", "None", ",", "# type: Optional[int]", "\n", "scaling", "=", "None", ",", "# type: Optional[Union[float, Tensor]]", "\n", "update_steps_max", "=", "0", ",", "# type: Optional[Union[int, Tensor]]", "\n", "update_steps_eps", "=", "1e-4", ",", "# type: Union[float, Tensor]", "\n", "return_raw_associations", "=", "False", ",", "# type: bool", "\n", "return_projected_patterns", "=", "False", "# type: bool", "\n", ")", ":", "\n", "# type: (...) -> Tuple[Tensor, Optional[Tensor]]", "\n", "    ", "r\"\"\"\n    Args:\n        query, key, value: map a query and a set of key-value pairs to an output.\n            See \"Attention Is All You Need\" for more details.\n            See \"Hopfield Networks is All You Need\" for more details in the setting of Hopfield networks.\n        embed_dim_to_check: total dimension of the model (in case of default head dimension).\n        num_heads: parallel attention heads.\n        in_proj_weight, in_proj_bias: input projection weight and bias.\n        bias_k, bias_v: bias of the key and value sequences to be added at dim=0.\n        add_zero_attn: add a new batch of zeros to the key and\n                       value sequences at dim=1.\n        dropout_p: probability of an element to be zeroed.\n        out_proj_weight, out_proj_bias: the output projection weight and bias.\n        training: apply dropout if is ``True``.\n        key_padding_mask: if provided, specified padding elements in the key will\n            be ignored by the attention. This is an binary mask. When the value is True,\n            the corresponding value on the attention layer will be filled with -inf.\n        need_weights: output attn_output_weights.\n        attn_mask: 2D or 3D mask that prevents attention to certain positions. A 2D mask will be broadcasted for all\n            the batches while a 3D mask allows to specify a different mask for the entries of each batch.\n        use_separate_proj_weight: the function accept the proj. weights for query, key,\n            and value in different forms. If false, in_proj_weight will be used, which is\n            a combination of q_proj_weight, k_proj_weight, v_proj_weight.\n        q_proj_weight, k_proj_weight, v_proj_weight, in_proj_bias: input projection weight and bias.\n        static_k, static_v: static key and value used for attention operators.\n\n        key_as_static: interpret specified key as being static.\n        query_as_static: interpret specified key as being static.\n        value_as_static: interpret specified key as being static.\n        value_as_connected: connect value projection with key projection.\n        normalize_pattern: enable normalization of patterns.\n        p_norm_weight, p_norm_bias: pattern normalization weight and bias.\n        head_dim: dimensionality of each head.\n        scaling: scaling of association heads, often represented as beta (one entry per head).\n        update_steps_max: maximum count of association update steps (None equals to infinity).\n        update_steps_eps: minimum difference threshold between two consecutive association update steps.\n        return_raw_associations: return raw association (softmax) values, unmodified.\n        return_projected_patterns: return pattern projection values, unmodified.\n\n    Shape:\n        Inputs:\n        - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key_padding_mask: :math:`(N, S)` where N is the batch size, S is the source sequence length.\n          If a ByteTensor is provided, the non-zero positions will be ignored while the zero positions\n          will be unchanged. If a BoolTensor is provided, the positions with the\n          value of ``True`` will be ignored while the position with the value of ``False`` will be unchanged.\n        - attn_mask: 2D mask :math:`(L, S)` where L is the target sequence length, S is the source sequence length.\n          3D mask :math:`(N*num_heads, L, S)` where N is the batch size, L is the target sequence length,\n          S is the source sequence length. attn_mask ensures that position i is allowed to attend the unmasked\n          positions. If a ByteTensor is provided, the non-zero positions are not allowed to attend\n          while the zero positions will be unchanged. If a BoolTensor is provided, positions with ``True``\n          are not allowed to attend while ``False`` values will be unchanged. If a FloatTensor\n          is provided, it will be added to the attention weight.\n        - static_k: :math:`(N*num_heads, S, head_dim)`, where S is the source sequence length, N is the batch size.\n        - static_v: :math:`(N*num_heads, S, head_dim)`, where S is the source sequence length, N is the batch size.\n\n        - scaling: :math:`(num_heads,)`, where num_heads is the amount of heads.\n\n        Outputs:\n        - attn_output: :math:`(L, N, E)`, where L is the target sequence length, N is the batch size,\n          E is the embedding dimension.\n        - attn_output_weights: :math:`(N, L, S)`, where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n        - attn_raw: :math:``(N, num_heads, L, S)`, where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n    \"\"\"", "\n", "if", "not", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "        ", "tens_ops", "=", "(", "query", ",", "key", ",", "value", ",", "in_proj_weight", ",", "in_proj_bias", ",", "bias_k", ",", "bias_v", ",", "\n", "out_proj_weight", ",", "out_proj_bias", ")", "\n", "if", "any", "(", "[", "type", "(", "t", ")", "is", "not", "Tensor", "for", "t", "in", "tens_ops", "]", ")", "and", "nn", ".", "functional", ".", "has_torch_function", "(", "tens_ops", ")", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "handle_torch_function", "(", "\n", "hopfield_core_forward", ",", "tens_ops", ",", "query", ",", "key", ",", "value", ",", "\n", "embed_dim_to_check", ",", "num_heads", ",", "in_proj_weight", ",", "in_proj_bias", ",", "\n", "bias_k", ",", "bias_v", ",", "add_zero_attn", ",", "dropout_p", ",", "out_proj_weight", ",", "\n", "out_proj_bias", ",", "training", "=", "training", ",", "key_padding_mask", "=", "key_padding_mask", ",", "\n", "need_weights", "=", "need_weights", ",", "attn_mask", "=", "attn_mask", ",", "\n", "use_separate_proj_weight", "=", "use_separate_proj_weight", ",", "\n", "q_proj_weight", "=", "q_proj_weight", ",", "k_proj_weight", "=", "k_proj_weight", ",", "\n", "v_proj_weight", "=", "v_proj_weight", ",", "static_k", "=", "static_k", ",", "static_v", "=", "static_v", ",", "\n", "key_as_static", "=", "key_as_static", ",", "query_as_static", "=", "query_as_static", ",", "\n", "value_as_static", "=", "value_as_static", ",", "value_as_connected", "=", "value_as_connected", ",", "\n", "normalize_pattern", "=", "normalize_pattern", ",", "p_norm_weight", "=", "p_norm_weight", ",", "p_norm_bias", "=", "p_norm_bias", ",", "\n", "head_dim", "=", "head_dim", ",", "scaling", "=", "scaling", ",", "update_steps_max", "=", "update_steps_max", ",", "\n", "update_steps_eps", "=", "update_steps_eps", ",", "return_raw_associations", "=", "return_raw_associations", ")", "\n", "", "", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "shape", "[", "0", "]", ",", "value", ".", "shape", "[", "1", "]", ",", "query", ".", "shape", "[", "2", "]", "\n", "assert", "embed_dim", "==", "embed_dim_to_check", "\n", "# allow MHA to have different sizes for the feature dimension", "\n", "assert", "key", ".", "size", "(", "0", ")", "==", "value", ".", "size", "(", "0", ")", "and", "key", ".", "size", "(", "1", ")", "==", "value", ".", "size", "(", "1", ")", "\n", "\n", "assert", "(", "scaling", "is", "None", ")", "or", "(", "type", "(", "scaling", ")", "in", "(", "float", ",", "torch", ".", "Tensor", ")", ")", "\n", "if", "type", "(", "scaling", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "assert", "scaling", ".", "ndimension", "(", ")", "==", "1", "and", "scaling", ".", "shape", "[", "0", "]", "==", "num_heads", ",", "\"only one entry per head.\"", "\n", "\n", "", "assert", "(", "update_steps_max", "is", "None", ")", "or", "(", "type", "(", "update_steps_max", ")", "in", "(", "int", ",", "torch", ".", "Tensor", ")", ")", "\n", "if", "type", "(", "update_steps_max", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "assert", "update_steps_max", ".", "ndimension", "(", ")", "==", "1", "and", "update_steps_max", ".", "shape", "[", "0", "]", "==", "num_heads", ",", "\"only one entry per head.\"", "\n", "", "elif", "type", "(", "update_steps_max", ")", "==", "int", ":", "\n", "        ", "update_steps_max", "=", "torch", ".", "tensor", "(", "[", "update_steps_max", "]", "*", "num_heads", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "query", ".", "device", ")", "\n", "", "elif", "update_steps_max", "is", "None", ":", "\n", "        ", "update_steps_max", "=", "-", "torch", ".", "ones", "(", "size", "=", "(", "num_heads", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "query", ".", "device", ")", "\n", "\n", "", "assert", "type", "(", "update_steps_eps", ")", "in", "(", "float", ",", "torch", ".", "Tensor", ")", "\n", "if", "type", "(", "update_steps_eps", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "assert", "update_steps_eps", ".", "ndimension", "(", ")", "==", "1", "and", "update_steps_eps", ".", "shape", "[", "0", "]", "==", "num_heads", ",", "\"only one entry per head.\"", "\n", "assert", "(", "update_steps_eps", "<=", "0.0", ")", ".", "sum", "(", ")", "==", "0", ",", "\"only positive thresholds allowed.\"", "\n", "update_steps_eps", "=", "update_steps_eps", ".", "to", "(", "device", "=", "query", ".", "device", ")", "\n", "", "elif", "type", "(", "update_steps_eps", ")", "==", "float", ":", "\n", "        ", "assert", "update_steps_eps", ">", "0", ",", "\"only positive thresholds allowed.\"", "\n", "update_steps_eps", "=", "torch", ".", "tensor", "(", "[", "update_steps_eps", "]", "*", "num_heads", ",", "dtype", "=", "query", ".", "dtype", ",", "device", "=", "query", ".", "device", ")", "\n", "\n", "", "if", "head_dim", "is", "None", ":", "\n", "        ", "hopfield_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "head_dim", "*", "num_heads", "==", "hopfield_dim", ",", "r'embed_dim must be divisible by num_heads.'", "\n", "", "else", ":", "\n", "        ", "hopfield_dim", "=", "num_heads", "*", "head_dim", "\n", "\n", "", "q", ",", "k", ",", "v", ",", "xi", ",", "src_len", "=", "None", ",", "None", ",", "None", ",", "None", ",", "0", "\n", "update_step", ",", "xi_old", ",", "xi_difference_norm", "=", "0", ",", "None", ",", "float", "(", "r'+inf'", ")", "\n", "update_active_heads", "=", "torch", ".", "tensor", "(", "[", "[", "[", "True", "]", "]", "]", "*", "num_heads", "*", "bsz", ",", "device", "=", "query", ".", "device", ")", "\n", "assert", "update_active_heads", ".", "any", "(", ")", ",", "\"at least one head needs to be active.\"", "\n", "\n", "####################################################################################################################", "\n", "#                                         BEGIN HOPFIELD UPDATE ITERATION                                          #", "\n", "####################################################################################################################", "\n", "\n", "while", "update_active_heads", ".", "any", "(", ")", ":", "\n", "\n", "# The query is already projected into the \"Hopfield\" space at \"update_step\" equals 0.", "\n", "# No more projection necessary if \"update_step\" greater than 0.", "\n", "        ", "if", "update_step", "==", "0", ":", "\n", "            ", "if", "not", "use_separate_proj_weight", ":", "\n", "\n", "                ", "if", "torch", ".", "equal", "(", "query", ",", "key", ")", "and", "torch", ".", "equal", "(", "key", ",", "value", ")", "and", "not", "(", "\n", "key_as_static", "or", "query_as_static", "or", "value_as_static", ")", ":", "\n", "# self-attention", "\n", "                    ", "q", ",", "k", ",", "v", "=", "nn", ".", "functional", ".", "linear", "(", "query", ",", "in_proj_weight", ",", "in_proj_bias", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "torch", ".", "equal", "(", "key", ",", "value", ")", "and", "not", "(", "key_as_static", "or", "value_as_static", ")", ":", "\n", "# encoder-decoder attention", "\n", "                    ", "_start", ",", "_end", "=", "0", ",", "hopfield_dim", "\n", "if", "query_as_static", ":", "\n", "                        ", "q", "=", "query", ".", "repeat", "(", "1", ",", "num_heads", ",", "1", ")", "\n", "", "else", ":", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "                        ", "_b", "=", "in_proj_bias", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                            ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "q", "=", "nn", ".", "functional", ".", "linear", "(", "query", ",", "_w", ",", "_b", ")", "\n", "_start", "=", "hopfield_dim", "\n", "", "_end", "=", "None", "\n", "\n", "if", "key", "is", "None", ":", "\n", "                        ", "assert", "value", "is", "None", "\n", "k", "=", "None", "\n", "v", "=", "None", "\n", "", "else", ":", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "                        ", "_b", "=", "in_proj_bias", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                            ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "k", ",", "v", "=", "nn", ".", "functional", ".", "linear", "(", "key", ",", "_w", ",", "_b", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "_start", ",", "_end", "=", "0", ",", "hopfield_dim", "\n", "if", "query_as_static", ":", "\n", "                        ", "q", "=", "query", ".", "repeat", "(", "1", ",", "num_heads", ",", "1", ")", "\n", "", "else", ":", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "                        ", "_b", "=", "in_proj_bias", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                            ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "q", "=", "nn", ".", "functional", ".", "linear", "(", "query", ",", "_w", ",", "_b", ")", "\n", "_start", "+=", "hopfield_dim", "\n", "_end", "+=", "hopfield_dim", "\n", "\n", "", "if", "key_as_static", ":", "\n", "                        ", "k", "=", "key", ".", "repeat", "(", "1", ",", "num_heads", ",", "1", ")", "\n", "", "else", ":", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "                        ", "_b", "=", "in_proj_bias", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                            ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "k", "=", "nn", ".", "functional", ".", "linear", "(", "key", ",", "_w", ",", "_b", ")", "\n", "_start", "+=", "hopfield_dim", "\n", "_end", "+=", "hopfield_dim", "\n", "\n", "", "if", "value_as_static", ":", "\n", "                        ", "v", "=", "value", ".", "repeat", "(", "1", ",", "num_heads", ",", "1", ")", "\n", "", "else", ":", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "                        ", "_b", "=", "in_proj_bias", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                            ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "v", "=", "nn", ".", "functional", ".", "linear", "(", "value", ",", "_w", ",", "_b", ")", "\n", "", "", "", "else", ":", "\n", "                ", "_start", ",", "_end", "=", "0", ",", "hopfield_dim", "\n", "if", "query_as_static", ":", "\n", "                    ", "q", "=", "query", ".", "repeat", "(", "1", ",", "num_heads", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "q_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "q_proj_weight", ")", "\n", "len1", ",", "len2", "=", "q_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "hopfield_dim", "and", "len2", "==", "query", ".", "size", "(", "-", "1", ")", "\n", "if", "in_proj_bias", "is", "not", "None", ":", "\n", "                        ", "q", "=", "nn", ".", "functional", ".", "linear", "(", "query", ",", "q_proj_weight_non_opt", ",", "in_proj_bias", "[", "_start", ":", "_end", "]", ")", "\n", "_start", "+=", "hopfield_dim", "\n", "_end", "+=", "hopfield_dim", "\n", "", "else", ":", "\n", "                        ", "q", "=", "nn", ".", "functional", ".", "linear", "(", "query", ",", "q_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "\n", "", "", "v", "=", "value", "\n", "if", "key_as_static", ":", "\n", "                    ", "k", "=", "key", ".", "repeat", "(", "1", ",", "num_heads", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "k_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "k_proj_weight", ")", "\n", "len1", ",", "len2", "=", "k_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "hopfield_dim", "and", "len2", "==", "key", ".", "size", "(", "-", "1", ")", "\n", "\n", "_bias", "=", "None", "if", "in_proj_bias", "is", "None", "else", "in_proj_bias", "[", "_start", ":", "_end", "]", "\n", "k", "=", "nn", ".", "functional", ".", "linear", "(", "key", ",", "k_proj_weight_non_opt", ",", "_bias", ")", "\n", "if", "value_as_connected", ":", "\n", "                        ", "v", "=", "nn", ".", "functional", ".", "linear", "(", "v", ",", "k_proj_weight_non_opt", ",", "_bias", ")", "\n", "", "_start", "+=", "hopfield_dim", "\n", "_end", "+=", "hopfield_dim", "\n", "\n", "", "if", "value_as_static", ":", "\n", "                    ", "v", "=", "v", ".", "repeat", "(", "1", ",", "num_heads", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "v_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "v_proj_weight", ")", "\n", "len1", ",", "len2", "=", "v_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "hopfield_dim", "and", "len2", "==", "v", ".", "size", "(", "-", "1", ")", "\n", "if", "in_proj_bias", "is", "not", "None", ":", "\n", "                        ", "v", "=", "nn", ".", "functional", ".", "linear", "(", "v", ",", "v_proj_weight_non_opt", ",", "in_proj_bias", "[", "_start", ":", "_end", "]", ")", "\n", "", "else", ":", "\n", "                        ", "v", "=", "nn", ".", "functional", ".", "linear", "(", "v", ",", "v_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "\n", "", "", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "assert", "attn_mask", ".", "dtype", "==", "torch", ".", "float32", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "float64", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "float16", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "uint8", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "bool", ",", "'Only float, byte, and bool types are supported for attn_mask, not {}'", ".", "format", "(", "attn_mask", ".", "dtype", ")", "\n", "if", "attn_mask", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "                    ", "print", "(", "\n", "\"Byte tensor for attn_mask in nn.HopfieldCore is deprecated. Use bool tensor instead.\"", ")", "\n", "attn_mask", "=", "attn_mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "\n", "", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                    ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "if", "list", "(", "attn_mask", ".", "size", "(", ")", ")", "!=", "[", "1", ",", "query", ".", "size", "(", "0", ")", ",", "key", ".", "size", "(", "0", ")", "]", ":", "\n", "                        ", "raise", "RuntimeError", "(", "'The size of the 2D attn_mask is not correct.'", ")", "\n", "", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                    ", "if", "list", "(", "attn_mask", ".", "size", "(", ")", ")", "!=", "[", "bsz", "*", "num_heads", ",", "query", ".", "size", "(", "0", ")", ",", "key", ".", "size", "(", "0", ")", "]", ":", "\n", "                        ", "raise", "RuntimeError", "(", "'The size of the 3D attn_mask is not correct.'", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"attn_mask's dimension {} is not supported\"", ".", "format", "(", "attn_mask", ".", "dim", "(", ")", ")", ")", "\n", "# attn_mask's dim is 3 now.", "\n", "\n", "# Optionally normalize patterns.", "\n", "", "", "if", "normalize_pattern", ":", "\n", "                ", "q", "=", "torch", ".", "nn", ".", "functional", ".", "layer_norm", "(", "\n", "input", "=", "q", ".", "reshape", "(", "shape", "=", "(", "-", "1", ",", "head_dim", ")", ")", ",", "normalized_shape", "=", "(", "head_dim", ",", ")", ",", "\n", "weight", "=", "p_norm_weight", ",", "bias", "=", "p_norm_bias", ")", ".", "reshape", "(", "shape", "=", "q", ".", "shape", ")", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "layer_norm", "(", "\n", "input", "=", "k", ".", "reshape", "(", "shape", "=", "(", "-", "1", ",", "head_dim", ")", ")", ",", "normalized_shape", "=", "(", "head_dim", ",", ")", ",", "\n", "weight", "=", "p_norm_weight", ",", "bias", "=", "p_norm_bias", ")", ".", "reshape", "(", "shape", "=", "k", ".", "shape", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "active_xi", "=", "xi", ".", "masked_select", "(", "mask", "=", "update_active_heads", ")", ".", "view", "(", "size", "=", "(", "-", "1", ",", "*", "xi", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "active_k", "=", "k", ".", "masked_select", "(", "mask", "=", "update_active_heads", ")", ".", "view", "(", "size", "=", "(", "-", "1", ",", "*", "k", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "q", "=", "torch", ".", "masked_scatter", "(", "input", "=", "q", ",", "mask", "=", "update_active_heads", ",", "source", "=", "torch", ".", "bmm", "(", "active_xi", ",", "active_k", ")", ")", "\n", "\n", "# Optionally scale association heads (each head separately).", "\n", "", "if", "type", "(", "scaling", ")", "==", "float", ":", "\n", "            ", "q", "*=", "scaling", "\n", "", "elif", "type", "(", "scaling", ")", "==", "torch", ".", "Tensor", ":", "\n", "            ", "q", "*=", "scaling", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "repeats", "=", "(", "bsz", ",", "head_dim", ")", ")", "\n", "\n", "", "if", "update_step", "==", "0", ":", "\n", "# convert ByteTensor key_padding_mask to bool", "\n", "            ", "if", "key_padding_mask", "is", "not", "None", "and", "key_padding_mask", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "                ", "print", "(", "\n", "\"Byte tensor for key_padding_mask in nn.HopfieldCore is deprecated. Use bool tensor instead.\"", ")", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "\n", "", "if", "bias_k", "is", "not", "None", "and", "bias_v", "is", "not", "None", ":", "\n", "                ", "if", "static_k", "is", "None", "and", "static_v", "is", "None", "and", "key_as_static", "is", "None", "and", "value_as_static", "is", "None", ":", "\n", "                    ", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                        ", "attn_mask", "=", "nn", ".", "functional", ".", "pad", "(", "attn_mask", ",", "[", "0", ",", "1", "]", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                        ", "key_padding_mask", "=", "nn", ".", "functional", ".", "pad", "(", "key_padding_mask", ",", "[", "0", ",", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "assert", "static_k", "is", "None", ",", "\"bias cannot be added to static key.\"", "\n", "assert", "static_v", "is", "None", ",", "\"bias cannot be added to static value.\"", "\n", "assert", "not", "key_as_static", ",", "\"bias cannot be added to static key.\"", "\n", "assert", "not", "value_as_static", ",", "\"bias cannot be added to static value.\"", "\n", "", "", "else", ":", "\n", "                ", "assert", "bias_k", "is", "None", "\n", "assert", "bias_v", "is", "None", "\n", "\n", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "-", "1", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "k", "is", "not", "None", ":", "\n", "                ", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "if", "v", "is", "not", "None", ":", "\n", "                ", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "static_k", "is", "not", "None", ":", "\n", "                ", "assert", "static_k", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", "\n", "assert", "static_k", ".", "size", "(", "2", ")", "==", "head_dim", "\n", "k", "=", "static_k", "\n", "\n", "", "if", "static_v", "is", "not", "None", ":", "\n", "                ", "assert", "static_v", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", "\n", "assert", "static_v", ".", "size", "(", "2", ")", "==", "head_dim", "\n", "v", "=", "static_v", "\n", "\n", "", "src_len", "=", "k", ".", "size", "(", "1", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "add_zero_attn", ":", "\n", "                ", "src_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "torch", ".", "zeros", "(", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "k", ".", "dtype", ",", "device", "=", "k", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "torch", ".", "zeros", "(", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "v", ".", "dtype", ",", "device", "=", "v", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                    ", "attn_mask", "=", "nn", ".", "functional", ".", "pad", "(", "attn_mask", ",", "[", "0", ",", "1", "]", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                    ", "key_padding_mask", "=", "nn", ".", "functional", ".", "pad", "(", "key_padding_mask", ",", "[", "0", ",", "1", "]", ")", "\n", "\n", "", "", "", "attn_output_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_output_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "if", "attn_mask", ".", "dtype", "==", "torch", ".", "bool", ":", "\n", "                ", "attn_output_weights", ".", "masked_fill_", "(", "attn_mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "else", ":", "\n", "                ", "attn_output_weights", "+=", "attn_mask", "\n", "\n", "", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "\n", "# Compute new xi for Hopfield retrieve iterations.", "\n", "", "if", "xi", "is", "None", ":", "\n", "            ", "xi", "=", "nn", ".", "functional", ".", "softmax", "(", "attn_output_weights", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "xi", "=", "torch", ".", "masked_scatter", "(", "input", "=", "xi", ",", "mask", "=", "update_active_heads", ",", "source", "=", "nn", ".", "functional", ".", "softmax", "(", "\n", "attn_output_weights", ".", "masked_select", "(", "mask", "=", "update_active_heads", ")", ".", "view", "(", "size", "=", "(", "-", "1", ",", "*", "xi", ".", "shape", "[", "1", ":", "]", ")", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# Compute threshold-based stopping criterion for Hopfield retrieve iterations.", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "xi_active", "=", "xi", ".", "view", "(", "size", "=", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", ")", "\n", "update_active_heads", "=", "(", "update_step", "<", "update_steps_max", ")", "|", "(", "update_steps_max", "<", "0", ")", "\n", "if", "xi_old", "is", "not", "None", ":", "\n", "                ", "update_active_heads", "&=", "(", "(", "xi_old", "-", "xi_active", ")", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "(", "2", ",", "3", ")", ")", ".", "max", "(", "axis", "=", "0", ")", "[", "0", "]", ")", ">", "update_steps_eps", "\n", "", "update_active_heads", "=", "update_active_heads", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "repeat", "(", "repeats", "=", "(", "bsz", ",", "1", ",", "1", ")", ")", "\n", "xi_old", "=", "xi_active", "\n", "", "update_step", "+=", "1", "\n", "\n", "####################################################################################################################", "\n", "#                                          END HOPFIELD UPDATE ITERATION                                           #", "\n", "####################################################################################################################", "\n", "\n", "", "attn_output_weights", "=", "nn", ".", "functional", ".", "dropout", "(", "xi", ",", "p", "=", "dropout_p", ",", "training", "=", "training", ")", "\n", "attn_output", "=", "torch", ".", "bmm", "(", "attn_output_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn_output", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "num_heads", ",", "tgt_len", ",", "head_dim", "]", "\n", "attn_output", "=", "attn_output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "hopfield_dim", ")", "\n", "if", "out_proj_weight", "is", "not", "None", ":", "\n", "        ", "attn_output", "=", "nn", ".", "functional", ".", "linear", "(", "attn_output", ",", "out_proj_weight", ",", "out_proj_bias", ")", "\n", "\n", "", "xi", "=", "xi", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "if", "return_raw_associations", "else", "None", "\n", "v", "=", "v", ".", "view", "(", "bsz", ",", "num_heads", ",", "src_len", ",", "head_dim", ")", "if", "return_projected_patterns", "else", "None", "\n", "if", "need_weights", ":", "\n", "# average attention weights over heads", "\n", "        ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "return", "attn_output", ",", "attn_output_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "num_heads", ",", "xi", ",", "v", "\n", "", "else", ":", "\n", "        ", "return", "attn_output", ",", "None", ",", "xi", ",", "v", "", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.__init__": [[98, 214], ["torch.nn.Module.__init__", "pytorch_gleam.modeling.layers.hopfield.activation.HopfieldCore", "type", "getattr", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "type", "type", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield._maybe_transpose": [[215, 223], ["tuple", "len", "_.transpose"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield._associate": [[224, 270], ["__init__.Hopfield._maybe_transpose", "__init__.Hopfield.association_core", "type", "__init__.Hopfield.norm_stored_pattern().reshape", "__init__.Hopfield.norm_state_pattern().reshape", "__init__.Hopfield.norm_pattern_projection().reshape", "type", "type", "len", "__init__.Hopfield.norm_stored_pattern", "__init__.Hopfield.norm_state_pattern", "__init__.Hopfield.norm_pattern_projection", "__init__.Hopfield.reshape", "__init__.Hopfield.reshape", "__init__.Hopfield.reshape"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield._maybe_transpose"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.forward": [[271, 288], ["__init__.Hopfield._maybe_transpose", "__init__.Hopfield.association_activation", "__init__.Hopfield._associate"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield._maybe_transpose", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield._associate"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.get_association_matrix": [[289, 304], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "__init__.Hopfield._associate"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield._associate"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.get_projected_pattern_matrix": [[305, 320], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "__init__.Hopfield._associate"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield._associate"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.batch_first": [[321, 324], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.scaling": [[325, 328], ["__init__.Hopfield.__scaling.clone", "type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.stored_pattern_dim": [[329, 332], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.state_pattern_dim": [[333, 336], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.pattern_projection_dim": [[337, 340], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.input_size": [[341, 344], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.hidden_size": [[345, 348], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.output_size": [[349, 352], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.update_steps_max": [[353, 356], ["__init__.Hopfield.__update_steps_max.clone", "type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.update_steps_eps": [[357, 360], ["__init__.Hopfield.__update_steps_eps.clone", "type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.stored_pattern_as_static": [[361, 364], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.state_pattern_as_static": [[365, 368], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.pattern_projection_as_static": [[369, 372], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.normalize_stored_pattern": [[373, 376], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.normalize_stored_pattern_affine": [[377, 380], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.normalize_state_pattern": [[381, 384], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.normalize_state_pattern_affine": [[385, 388], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.normalize_pattern_projection": [[389, 392], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.Hopfield.normalize_pattern_projection_affine": [[393, 396], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.StatePattern.__init__": [[403, 420], ["torch.nn.Module.__init__", "torch.Parameter", "torch.Parameter", "__init__.StatePattern._reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.StatePattern._reset_parameters"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.StatePattern._reset_parameters": [[421, 427], ["torch.init.normal_", "torch.init.normal_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.StatePattern.forward": [[428, 441], ["__init__.StatePattern.state_pattern.expand().transpose", "__init__.StatePattern.state_pattern.expand", "__init__.StatePattern.state_pattern.expand"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.StatePattern.batch_first": [[442, 445], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.StatePattern.quantity": [[446, 449], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.StatePattern.output_size": [[450, 453], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.__init__": [[461, 547], ["torch.nn.Module.__init__", "__init__.Hopfield", "__init__.StatePattern"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.forward": [[548, 561], ["__init__.HopfieldPooling.hopfield().flatten", "__init__.HopfieldPooling.hopfield", "__init__.HopfieldPooling.pooling_weights"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.get_association_matrix": [[562, 576], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "__init__.HopfieldPooling.hopfield.get_association_matrix", "__init__.HopfieldPooling.pooling_weights"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.get_association_matrix"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.get_projected_pattern_matrix": [[577, 591], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "__init__.HopfieldPooling.hopfield.get_projected_pattern_matrix", "__init__.HopfieldPooling.pooling_weights"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.get_projected_pattern_matrix"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.batch_first": [[592, 595], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.scaling": [[596, 599], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.stored_pattern_dim": [[600, 603], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.state_pattern_dim": [[604, 607], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.pattern_projection_dim": [[608, 611], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.input_size": [[612, 615], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.hidden_size": [[616, 619], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.output_size": [[620, 623], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.update_steps_max": [[624, 627], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.update_steps_eps": [[628, 631], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.stored_pattern_as_static": [[632, 635], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.state_pattern_as_static": [[636, 639], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.pattern_projection_as_static": [[640, 643], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.normalize_stored_pattern": [[644, 647], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.normalize_stored_pattern_affine": [[648, 651], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.normalize_state_pattern": [[652, 655], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.normalize_state_pattern_affine": [[656, 659], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.normalize_pattern_projection": [[660, 663], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.__init__.HopfieldPooling.normalize_pattern_projection_affine": [[664, 667], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.__init__": [[17, 45], ["torch.nn.modules.Module.__init__", "copy.deepcopy", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "getattr"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["def", "__init__", "(", "self", ",", "\n", "hopfield_association", ":", "Hopfield", ",", "\n", "dim_feedforward", ":", "int", "=", "2048", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "activation", ":", "str", "=", "r'relu'", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialise a new instance of a Hopfield association-based encoder module.\n\n        :param hopfield_association: instance of Hopfield association module\n        :param dim_feedforward: depth of the linear projections applied internally\n        :param activation: activation to be applied on the result of the internal linear projections\n        :param dropout: dropout probability to be applied internally\n        \"\"\"", "\n", "super", "(", "HopfieldEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hopfield_association", "=", "deepcopy", "(", "hopfield_association", ")", "\n", "\n", "self", ".", "linear_residual", "=", "nn", ".", "Linear", "(", "self", ".", "hopfield_association", ".", "state_pattern_dim", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout_residual", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear_output", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "self", ".", "hopfield_association", ".", "state_pattern_dim", ")", "\n", "\n", "self", ".", "norm_residual", "=", "nn", ".", "LayerNorm", "(", "self", ".", "hopfield_association", ".", "state_pattern_dim", ")", "\n", "self", ".", "norm_output", "=", "nn", ".", "LayerNorm", "(", "self", ".", "hopfield_association", ".", "state_pattern_dim", ")", "\n", "self", ".", "dropout_hopfield_association", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_output", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation_residual", "=", "getattr", "(", "torch", ",", "activation", ",", "None", ")", "\n", "assert", "self", ".", "activation_residual", "is", "not", "None", ",", "r'invalid activation function supplied.'", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.forward": [[46, 66], ["transformer.HopfieldEncoderLayer.hopfield_association", "transformer.HopfieldEncoderLayer.norm_residual", "transformer.HopfieldEncoderLayer.activation_residual", "transformer.HopfieldEncoderLayer.linear_output", "transformer.HopfieldEncoderLayer.norm_output", "transformer.HopfieldEncoderLayer.dropout_hopfield_association", "transformer.HopfieldEncoderLayer.dropout_output", "transformer.HopfieldEncoderLayer.linear_residual", "transformer.HopfieldEncoderLayer.dropout_residual"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ":", "Tensor", ",", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Apply Hopfield encoding on specified data.\n\n        :param src: data to be processed by Hopfield encoder module\n        :param src_mask: mask to be applied on association matrix\n        :param src_key_padding_mask: mask to be applied on stored patterns\n        :return: Hopfield-encoded input data\n        \"\"\"", "\n", "data_associated", "=", "self", ".", "hopfield_association", "(", "\n", "input", "=", "src", ",", "stored_pattern_padding_mask", "=", "src_key_padding_mask", ",", "association_mask", "=", "src_mask", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout_hopfield_association", "(", "input", "=", "data_associated", ")", "\n", "src", "=", "self", ".", "norm_residual", "(", "input", "=", "src", ")", "\n", "\n", "result_residual_inner", "=", "self", ".", "activation_residual", "(", "input", "=", "self", ".", "linear_residual", "(", "input", "=", "src", ")", ")", "\n", "data_associated", "=", "self", ".", "linear_output", "(", "input", "=", "self", ".", "dropout_residual", "(", "input", "=", "result_residual_inner", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout_output", "(", "input", "=", "data_associated", ")", "\n", "\n", "return", "self", ".", "norm_output", "(", "input", "=", "src", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.get_association_matrix": [[67, 75], ["transformer.HopfieldEncoderLayer.hopfield_association.get_association_matrix"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.get_association_matrix"], ["", "def", "get_association_matrix", "(", "self", ",", "input", ":", "Union", "[", "Tensor", ",", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", "]", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Fetch Hopfield association matrix gathered by passing through the specified data.\n\n        :param input: data to be passed through the Hopfield association\n        :return: association matrix as computed by the Hopfield core module\n        \"\"\"", "\n", "return", "self", ".", "hopfield_association", ".", "get_association_matrix", "(", "input", "=", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.batch_first": [[76, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_first", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "hopfield_association", ".", "batch_first", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.input_size": [[80, 83], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "hopfield_association", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.output_size": [[84, 87], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "linear_output", ".", "out_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldDecoderLayer.__init__": [[91, 124], ["torch.nn.modules.Module.__init__", "copy.deepcopy", "copy.deepcopy", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "getattr"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "hopfield_association_self", ":", "Hopfield", ",", "\n", "hopfield_association_cross", ":", "Hopfield", ",", "\n", "dim_feedforward", ":", "int", "=", "2048", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "activation", ":", "str", "=", "r'relu'", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Initialise a new instance of a Hopfield association-based encoder module.\n\n        :param hopfield_association_self: instance of Hopfield self-association module\n        :param hopfield_association_cross: instance of Hopfield cross-association module\n        :param dim_feedforward: depth of the linear projections applied internally\n        :param dropout: dropout probability to be applied internally\n        :param activation: activation to be applied on the result of the internal linear projections\n        \"\"\"", "\n", "super", "(", "HopfieldDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hopfield_association_self", "=", "deepcopy", "(", "hopfield_association_self", ")", "\n", "self", ".", "hopfield_association_cross", "=", "deepcopy", "(", "hopfield_association_cross", ")", "\n", "\n", "self", ".", "linear_residual", "=", "nn", ".", "Linear", "(", "self", ".", "hopfield_association_self", ".", "state_pattern_dim", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout_residual", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear_output", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "self", ".", "hopfield_association_self", ".", "state_pattern_dim", ")", "\n", "\n", "self", ".", "norm_residual_self", "=", "nn", ".", "LayerNorm", "(", "self", ".", "hopfield_association_self", ".", "state_pattern_dim", ")", "\n", "self", ".", "norm_residual_cross", "=", "nn", ".", "LayerNorm", "(", "self", ".", "hopfield_association_self", ".", "state_pattern_dim", ")", "\n", "self", ".", "norm_output", "=", "nn", ".", "LayerNorm", "(", "self", ".", "hopfield_association_self", ".", "state_pattern_dim", ")", "\n", "self", ".", "dropout_hopfield_association_self", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_hopfield_association_cross", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_output", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation_residual", "=", "getattr", "(", "torch", ",", "activation", ",", "None", ")", "\n", "assert", "self", ".", "activation_residual", "is", "not", "None", ",", "r'invalid activation function supplied.'", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldDecoderLayer.forward": [[125, 155], ["transformer.HopfieldDecoderLayer.hopfield_association_self", "transformer.HopfieldDecoderLayer.norm_residual_self", "transformer.HopfieldDecoderLayer.hopfield_association_cross", "transformer.HopfieldDecoderLayer.norm_residual_cross", "transformer.HopfieldDecoderLayer.activation_residual", "transformer.HopfieldDecoderLayer.linear_output", "transformer.HopfieldDecoderLayer.norm_output", "transformer.HopfieldDecoderLayer.dropout_hopfield_association_self", "transformer.HopfieldDecoderLayer.dropout_hopfield_association_cross", "transformer.HopfieldDecoderLayer.dropout_output", "transformer.HopfieldDecoderLayer.linear_residual", "transformer.HopfieldDecoderLayer.dropout_residual"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ":", "Tensor", ",", "memory", ":", "Tensor", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Apply Hopfield decoding on specified data.\n\n        :param tgt: data to be processed by Hopfield decoder module (self-association)\n        :param memory: data to be processed by Hopfield encoder module (cross-association)\n        :param tgt_mask: mask to be applied on self-association matrix\n        :param memory_mask: mask to be applied on cross-association matrix\n        :param tgt_key_padding_mask: mask to be applied on stored patterns\n        :param memory_key_padding_mask: mask to be applied on state patterns as well as pattern projection\n        :return: Hopfield-decoded input\n        \"\"\"", "\n", "data_associated", "=", "self", ".", "hopfield_association_self", "(", "\n", "input", "=", "tgt", ",", "stored_pattern_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "association_mask", "=", "tgt_mask", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout_hopfield_association_self", "(", "input", "=", "data_associated", ")", "\n", "tgt", "=", "self", ".", "norm_residual_self", "(", "input", "=", "tgt", ")", "\n", "\n", "data_associated", "=", "self", ".", "hopfield_association_cross", "(", "\n", "input", "=", "(", "memory", ",", "tgt", ",", "memory", ")", ",", "stored_pattern_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "association_mask", "=", "memory_mask", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout_hopfield_association_cross", "(", "input", "=", "data_associated", ")", "\n", "tgt", "=", "self", ".", "norm_residual_cross", "(", "input", "=", "tgt", ")", "\n", "\n", "result_residual_inner", "=", "self", ".", "activation_residual", "(", "input", "=", "self", ".", "linear_residual", "(", "input", "=", "tgt", ")", ")", "\n", "data_associated", "=", "self", ".", "linear_output", "(", "input", "=", "self", ".", "dropout_residual", "(", "input", "=", "result_residual_inner", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout_output", "(", "input", "=", "data_associated", ")", "\n", "return", "self", ".", "norm_output", "(", "input", "=", "tgt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldDecoderLayer.get_association_matrix_self": [[156, 164], ["transformer.HopfieldDecoderLayer.hopfield_association_self.get_association_matrix"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.get_association_matrix"], ["", "def", "get_association_matrix_self", "(", "self", ",", "input", ":", "Union", "[", "Tensor", ",", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", "]", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Fetch Hopfield self-association matrix gathered by passing through the specified data.\n\n        :param input: data to be passed through the Hopfield association\n        :return: association matrix as computed by the Hopfield core module\n        \"\"\"", "\n", "return", "self", ".", "hopfield_association_self", ".", "get_association_matrix", "(", "input", "=", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldDecoderLayer.get_association_matrix_cross": [[165, 173], ["transformer.HopfieldDecoderLayer.hopfield_association_cross.get_association_matrix"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldEncoderLayer.get_association_matrix"], ["", "def", "get_association_matrix_cross", "(", "self", ",", "input", ":", "Union", "[", "Tensor", ",", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", "]", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Fetch Hopfield cross-association matrix gathered by passing through the specified data.\n\n        :param input: data to be passed through the Hopfield association\n        :return: association matrix as computed by the Hopfield core module\n        \"\"\"", "\n", "return", "self", ".", "hopfield_association_cross", ".", "get_association_matrix", "(", "input", "=", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldDecoderLayer.batch_first": [[174, 177], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_first", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "hopfield_association_self", ".", "batch_first", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldDecoderLayer.input_size": [[178, 181], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "hopfield_association_self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.hopfield.transformer.HopfieldDecoderLayer.output_size": [[182, 185], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "linear_output_self", ".", "out_features", "", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.rerank.ReRankLanguageModel.__init__": [[7, 13], ["pytorch_gleam.modeling.models.BaseLanguageModelForSequenceClassification.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["from", "torch", ".", "utils", ".", "data", "import", "IterableDataset", "\n", "from", "transformers", "import", "BertTokenizer", ",", "AutoModelForSequenceClassification", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", "tqdm", "import", "tqdm", "\n", "from", "collections", "import", "defaultdict", "\n", "\n", "import", "torch", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.rerank.ReRankLanguageModel.forward": [[14, 28], ["rerank.ReRankLanguageModel.lm_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step"], ["import", "torch", ".", "distributed", "as", "dist", "\n", "\n", "\n", "def", "get_tweet_text", "(", "tweet", ")", ":", "\n", "\t", "tweet_text", "=", "tweet", "[", "'text'", "]", "\n", "if", "tweet_text", ".", "startswith", "(", "'RT '", ")", ":", "\n", "\t\t", "ref_tweets", "=", "tweet", "[", "'referenced_tweets'", "]", "\n", "if", "len", "(", "ref_tweets", ")", ">", "0", ":", "\n", "\t\t\t", "rt_data", "=", "ref_tweets", "[", "0", "]", "[", "'data'", "]", "\n", "if", "'text'", "in", "rt_data", ":", "\n", "\t\t\t\t", "tweet_text", "=", "rt_data", "[", "'text'", "]", "\n", "", "", "", "if", "'entities'", "in", "tweet", ":", "\n", "\t\t", "for", "e_type", ",", "e_list", "in", "tweet", "[", "'entities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "e_type", "==", "'urls'", ":", "\n", "\t\t\t\t", "for", "e_url", "in", "e_list", ":", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.rerank.ReRankLanguageModel.predict_step": [[29, 36], ["rerank.ReRankLanguageModel."], "methods", ["None"], ["\t\t\t\t\t", "r_url", "=", "e_url", "[", "'url'", "]", "\n", "s_url", "=", "e_url", "[", "'expanded_url'", "]", "\n", "tweet_text", "=", "tweet_text", ".", "replace", "(", "r_url", ",", "s_url", ")", "\n", "", "", "", "", "return", "tweet_text", "\n", "\n", "\n", "", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.__init__": [[13, 102], ["pytorch_gleam.modeling.models.base_models.BaseLanguageModel.__init__", "len", "torch.nn.Linear", "multi_label.MultiLabelLanguageModel.label_map.keys", "torch.nn.Dropout", "torch.nn.CrossEntropyLoss", "torch.nn.Softmax", "pytorch_gleam.modeling.thresholds.MultiClassThresholdModule", "multi_label.MultiLabelLanguageModel.label_map.items"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n", "metric", ":", "Metric", ",", "\n", "m_metric", ":", "Metric", ",", "\n", "num_classes", ":", "int", "=", "2", ",", "\n", "num_threshold_steps", ":", "int", "=", "100", ",", "\n", "update_threshold", ":", "bool", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tKnowledge-Base Inference Language Model for Attitude Consistency Scoring.\n\n\t\tArgs:\n\n\t\t\tlabel_map: Dictionary mapping from name of class to class idx, used to determine\n\t\t\t\tsize of final sigmoid layer along with class-specific metrics.\n\n\t\t\tthreshold: Threshold module to use for system predictions.\n\n\t\t\tmetric: Metric to evaluate overall performance. Typically Macro or Micro F1.\n\n\t\t\tm_metric: Metric to optimize for each Stance Knowledge Graph threshold, typically Micro F1.\n\n\t\t\tnum_classes: Number of different classes.\n\t\t\t\tDefault: ``2``.\n\n\t\t\tnum_threshold_steps: Number of different threshold values to evaluate when updating threshold on\n\t\t\t\tvalidation dataset.\n\t\t\t\tDefault: ``100``.\n\n\t\t\tupdate_threshold: If ``False``, validation thresholds are not updated. Use this in testing.\n\t\t\t\tDefault: ``True``.\n\n\t\t\tpre_model_name: Name of pre-trained model from huggingface. See https://huggingface.co/\n\n\t\t\tpre_model_type: Type of pre-trained model.\n\t\t\t\tDefault: [`AutoModel`].\n\n\t\t\tlearning_rate: Maximum learning rate. Learning rate will warm up from ``0`` to ``learning_rate`` over\n\t\t\t\t``lr_warm_up`` training steps, and will then decay from ``learning_rate`` to ``0`` linearly over the remaining\n\t\t\t\t``1.0-lr_warm_up`` training steps.\n\n\t\t\tweight_decay: How much weight decay to apply in the AdamW optimizer.\n\t\t\t\tDefault: ``0.0``.\n\n\t\t\tlr_warm_up: The percent of training steps to warm up learning rate from ``0`` to ``learning_rate``.\n\t\t\t\tDefault: ``0.1``.\n\n\t\t\tload_pre_model: If ``False``, Model structure will load from pre_model_name, but weights will not be initialized.\n\t\t\t\tCuts down on model load time if you plan on loading your model from a checkpoint, as there is no reason to\n\t\t\t\tinitialize your model twice.\n\t\t\t\tDefault: ``True``.\n\n\t\t\ttorch_cache_dir: If provided, cache directory for loading models. Defaults to huggingface default.\n\t\t\t\tDefault: ``None``.\n\n\t\t\"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_labels", "=", "len", "(", "self", ".", "label_map", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "m_metric", "=", "m_metric", "\n", "self", ".", "num_threshold_steps", "=", "num_threshold_steps", "\n", "self", ".", "update_threshold", "=", "update_threshold", "\n", "\n", "self", ".", "cls_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "hidden_size", ",", "\n", "out_features", "=", "self", ".", "num_labels", "*", "self", ".", "num_classes", "\n", ")", "\n", "self", ".", "inv_label_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "label_map", ".", "items", "(", ")", "}", "\n", "\n", "for", "cls_name", "in", "self", ".", "label_map", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "self", ".", "threshold", "[", "cls_name", "]", "=", "MultiClassThresholdModule", "(", ")", "\n", "\n", "", "self", ".", "f_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "\n", "p", "=", "self", ".", "hidden_dropout_prob", "\n", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "reduction", "=", "'none'", "\n", ")", "\n", "self", ".", "score_func", "=", "torch", ".", "nn", ".", "Softmax", "(", "\n", "dim", "=", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.eval_epoch_end": [[104, 119], ["torch.cat().mean().cpu", "multi_label.MultiLabelLanguageModel.log", "multi_label.MultiLabelLanguageModel.threshold.cpu", "multi_label.MultiLabelLanguageModel.eval_outputs", "results.items", "multi_label.MultiLabelLanguageModel.threshold.to", "multi_label.MultiLabelLanguageModel.log", "torch.cat().mean", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.eval_outputs"], ["", "def", "eval_epoch_end", "(", "self", ",", "outputs", ",", "stage", ")", ":", "\n", "\t\t", "loss", "=", "torch", ".", "cat", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "log", "(", "f'{stage}_loss'", ",", "loss", ")", "\n", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "\n", "results", ",", "labels", ",", "preds", ",", "t_ids", "=", "self", ".", "eval_outputs", "(", "\n", "outputs", ",", "\n", "stage", ",", "\n", "self", ".", "num_threshold_steps", ",", "\n", "self", ".", "update_threshold", "\n", ")", "\n", "for", "val_name", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "val_name", ",", "val", ")", "\n", "\n", "", "self", ".", "threshold", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.eval_outputs": [[120, 190], ["multi_label.MultiLabelLanguageModel.flatten", "torch.cat().cpu", "torch.cat().cpu", "multi_label.MultiLabelLanguageModel.label_map.items", "torch.cat", "torch.cat", "multi_label.MultiLabelLanguageModel.metric", "multi_label.MultiLabelLanguageModel.m_metric", "zip", "m_threshold", "multi_label.MultiLabelLanguageModel.m_metric", "m_threshold.thresholds.item", "zip", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.min().item", "torch.max().item", "multi_label.MultiLabelLanguageModel.m_metric.best", "m_threshold.update_thresholds", "torch.min", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.update_thresholds"], ["", "def", "eval_outputs", "(", "self", ",", "outputs", ",", "stage", ",", "num_threshold_steps", "=", "100", ",", "update_threshold", "=", "True", ")", ":", "\n", "\t\t", "results", "=", "{", "}", "\n", "\n", "t_ids", "=", "self", ".", "flatten", "(", "[", "x", "[", "'ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count, num_labels]", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "'labels'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "# [count, num_labels, num_classes]", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "x", "[", "'scores'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "\n", "m_s_preds", "=", "[", "]", "\n", "m_s_labels", "=", "[", "]", "\n", "for", "label_name", ",", "label_idx", "in", "self", ".", "label_map", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m_threshold", "=", "self", ".", "threshold", "[", "label_name", "]", "\n", "m_ex_scores", "=", "scores", "[", ":", ",", "label_idx", "]", "\n", "m_ex_labels", "=", "labels", "[", ":", ",", "label_idx", "]", "\n", "if", "update_threshold", ":", "\n", "\t\t\t\t", "m_min_score", "=", "torch", ".", "min", "(", "m_ex_scores", ")", ".", "item", "(", ")", "\n", "m_max_score", "=", "torch", ".", "max", "(", "m_ex_scores", ")", ".", "item", "(", ")", "\n", "# check 100 values between min and max", "\n", "if", "m_min_score", "==", "m_max_score", ":", "\n", "\t\t\t\t\t", "m_max_score", "+=", "1", "\n", "", "m_delta", "=", "(", "m_max_score", "-", "m_min_score", ")", "/", "num_threshold_steps", "\n", "max_threshold", ",", "max_metrics", "=", "self", ".", "m_metric", ".", "best", "(", "\n", "m_ex_labels", ",", "\n", "m_ex_scores", ",", "\n", "m_threshold", ",", "\n", "threshold_min", "=", "m_min_score", ",", "\n", "threshold_max", "=", "m_max_score", ",", "\n", "threshold_delta", "=", "m_delta", ",", "\n", ")", "\n", "m_threshold", ".", "update_thresholds", "(", "max_threshold", ")", "\n", "\n", "", "m_ex_preds", "=", "m_threshold", "(", "m_ex_scores", ")", "\n", "m_f1", ",", "m_p", ",", "m_r", ",", "m_cls_f1", ",", "m_cls_p", ",", "m_cls_r", ",", "m_cls_indices", "=", "self", ".", "m_metric", "(", "\n", "m_ex_labels", ",", "\n", "m_ex_preds", "\n", ")", "\n", "results", "[", "f'{stage}_{label_name}_micro_f1'", "]", "=", "m_f1", "\n", "results", "[", "f'{stage}_{label_name}_micro_p'", "]", "=", "m_p", "\n", "results", "[", "f'{stage}_{label_name}_micro_r'", "]", "=", "m_r", "\n", "results", "[", "f'{stage}_{label_name}_threshold'", "]", "=", "m_threshold", ".", "thresholds", ".", "item", "(", ")", "\n", "for", "cls_index", ",", "c_f1", ",", "c_p", ",", "c_r", "in", "zip", "(", "m_cls_indices", ",", "m_cls_f1", ",", "m_cls_p", ",", "m_cls_r", ")", ":", "\n", "\t\t\t\t", "results", "[", "f'{stage}_{label_name}_{cls_index}_f1'", "]", "=", "c_f1", "\n", "results", "[", "f'{stage}_{label_name}_{cls_index}_p'", "]", "=", "c_p", "\n", "results", "[", "f'{stage}_{label_name}_{cls_index}_r'", "]", "=", "c_r", "\n", "", "m_s_labels", ".", "append", "(", "m_ex_labels", ")", "\n", "m_s_preds", ".", "append", "(", "m_ex_preds", ")", "\n", "\n", "", "m_s_labels", "=", "torch", ".", "cat", "(", "m_s_labels", ",", "dim", "=", "0", ")", "\n", "m_s_preds", "=", "torch", ".", "cat", "(", "m_s_preds", ",", "dim", "=", "0", ")", "\n", "f1", ",", "p", ",", "r", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ",", "cls_indices", "=", "self", ".", "metric", "(", "\n", "m_s_labels", ",", "\n", "m_s_preds", "\n", ")", "\n", "micro_f1", ",", "micro_p", ",", "micro_r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "m_metric", "(", "\n", "m_s_labels", ",", "\n", "m_s_preds", "\n", ")", "\n", "results", "[", "f'{stage}_f1'", "]", "=", "f1", "\n", "results", "[", "f'{stage}_p'", "]", "=", "p", "\n", "results", "[", "f'{stage}_r'", "]", "=", "r", "\n", "results", "[", "f'{stage}_micro_f1'", "]", "=", "micro_f1", "\n", "results", "[", "f'{stage}_micro_p'", "]", "=", "micro_p", "\n", "results", "[", "f'{stage}_micro_r'", "]", "=", "micro_r", "\n", "for", "cls_index", ",", "c_f1", ",", "c_p", ",", "c_r", "in", "zip", "(", "cls_indices", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ")", ":", "\n", "\t\t\t", "results", "[", "f'{stage}_{cls_index}_f1'", "]", "=", "c_f1", "\n", "results", "[", "f'{stage}_{cls_index}_p'", "]", "=", "c_p", "\n", "results", "[", "f'{stage}_{cls_index}_r'", "]", "=", "c_r", "\n", "\n", "", "return", "results", ",", "m_s_labels", ",", "m_s_preds", ",", "t_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.eval_step": [[191, 194], ["multi_label.MultiLabelLanguageModel.predict_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.predict_step"], ["", "def", "eval_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "result", "=", "self", ".", "predict_step", "(", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.forward": [[195, 214], ["multi_label.MultiLabelLanguageModel.lm_step", "multi_label.MultiLabelLanguageModel.f_dropout", "multi_label.MultiLabelLanguageModel.cls_layer().view", "multi_label.MultiLabelLanguageModel.cls_layer"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "input_ids", "=", "batch", "[", "'input_ids'", "]", "\n", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", "\n", "if", "'token_type_ids'", "in", "batch", ":", "\n", "\t\t\t", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", "\n", "", "else", ":", "\n", "\t\t\t", "token_type_ids", "=", "None", "\n", "# [bsize, seq_len, hidden_size]", "\n", "", "contextualized_embeddings", "=", "self", ".", "lm_step", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", "\n", ")", "\n", "# [bsize, hidden_size]", "\n", "lm_output", "=", "contextualized_embeddings", "[", ":", ",", "0", "]", "\n", "lm_output", "=", "self", ".", "f_dropout", "(", "lm_output", ")", "\n", "# [bsize, num_labels, num_classes]", "\n", "logits", "=", "self", ".", "cls_layer", "(", "lm_output", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ",", "self", ".", "num_classes", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.loss": [[215, 226], ["multi_label.MultiLabelLanguageModel.criterion", "len", "torch.swapaxes"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "# if logits has [bsize, num_labels, ..., num_classes]", "\n", "# then we swap the first num_labels axis with num_classes", "\n", "# for the criterion for pytorch", "\n", "\t\t", "if", "len", "(", "logits", ".", "shape", ")", ">", "2", ":", "\n", "\t\t\t", "logits", "=", "torch", ".", "swapaxes", "(", "logits", ",", "-", "1", ",", "1", ")", "\n", "", "loss", "=", "self", ".", "criterion", "(", "\n", "logits", ",", "\n", "labels", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.training_step": [[227, 240], ["multi_label.MultiLabelLanguageModel.", "multi_label.MultiLabelLanguageModel.loss", "multi_label.MultiLabelLanguageModel.mean", "multi_label.MultiLabelLanguageModel.log"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\t\t", "batch_logits", "=", "self", "(", "batch", ")", "\n", "batch_labels", "=", "batch", "[", "'labels'", "]", "\n", "batch_loss", "=", "self", ".", "loss", "(", "\n", "batch_logits", ",", "\n", "batch_labels", "\n", ")", "\n", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "'train_loss'", ",", "loss", ")", "\n", "result", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.predict_step": [[241, 261], ["multi_label.MultiLabelLanguageModel.", "multi_label.MultiLabelLanguageModel.loss", "multi_label.MultiLabelLanguageModel.score_func", "multi_label.MultiLabelLanguageModel.label_map.items", "m_threshold"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss"], ["", "def", "predict_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "logits", "=", "self", "(", "batch", ")", "\n", "loss", "=", "self", ".", "loss", "(", "logits", ",", "batch", "[", "'labels'", "]", ")", "\n", "scores", "=", "self", ".", "score_func", "(", "logits", ")", "\n", "\n", "results", "=", "{", "\n", "# [bsize]", "\n", "'ids'", ":", "batch", "[", "'ids'", "]", ",", "\n", "'labels'", ":", "batch", "[", "'labels'", "]", ",", "\n", "'stages'", ":", "batch", "[", "'stages'", "]", ",", "\n", "'logits'", ":", "logits", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n", "\n", "for", "label_name", ",", "label_idx", "in", "self", ".", "label_map", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m_threshold", "=", "self", ".", "threshold", "[", "label_name", "]", "\n", "results", "[", "f'{label_name}_pred'", "]", "=", "m_threshold", "(", "scores", "[", ":", ",", "label_idx", "]", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_label.MultiLabelLanguageModel.flatten": [[262, 265], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "flatten", "(", "l", ")", ":", "\n", "\t\t", "return", "[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.__init__": [[13, 73], ["super().__init__", "base_models.BasePreModel.pre_model_type.from_pretrained", "transformers.AutoConfig.from_pretrained", "base_models.BasePreModel.pre_model_type.from_config"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_model_name", ":", "str", ",", "\n", "pre_model_type", ":", "Type", "[", "Union", "[", "AutoModel", ",", "AutoModelForSequenceClassification", ",", "AutoModelForSeq2SeqLM", "]", "]", "=", "AutoModel", ",", "\n", "learning_rate", ":", "float", "=", "5e-5", ",", "\n", "weight_decay", ":", "float", "=", "0.0", ",", "\n", "lr_warm_up", ":", "float", "=", "0.1", ",", "\n", "load_pre_model", ":", "bool", "=", "True", ",", "\n", "torch_cache_dir", ":", "str", "=", "None", "\n", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tBase class for Pre-Trained Models.\n\n\t\tArgs:\n\n\t\t\tpre_model_name: Name of pre-trained model from huggingface. See https://huggingface.co/\n\n\t\t\tpre_model_type: Type of pre-trained model.\n\t\t\t\tDefault: [`AutoModel`].\n\n\t\t\tlearning_rate: Maximum learning rate. Learning rate will warm up from ``0`` to ``learning_rate`` over\n\t\t\t\t``lr_warm_up`` training steps, and will then decay from ``learning_rate`` to ``0`` linearly over the remaining\n\t\t\t\t``1.0-lr_warm_up`` training steps.\n\n\t\t\tweight_decay: How much weight decay to apply in the AdamW optimizer.\n\t\t\t\tDefault: ``0.0``.\n\n\t\t\tlr_warm_up: The percent of training steps to warm up learning rate from ``0`` to ``learning_rate``.\n\t\t\t\tDefault: ``0.1``.\n\n\t\t\tload_pre_model: If ``False``, Model structure will load from pre_model_name, but weights will not be initialized.\n\t\t\t\tCuts down on model load time if you plan on loading your model from a checkpoint, as there is no reason to\n\t\t\t\tinitialize your model twice.\n\t\t\t\tDefault: ``True``.\n\n\t\t\ttorch_cache_dir: If provided, cache directory for loading models. Defaults to huggingface default.\n\t\t\t\tDefault: ``None``.\n\n\t\t\"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_model_name", "=", "pre_model_name", "\n", "self", ".", "pre_model_type", "=", "pre_model_type", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "lr_warm_up", "=", "lr_warm_up", "\n", "# assigned later when training starts", "\n", "self", ".", "train_steps", "=", "0", "\n", "self", ".", "torch_cache_dir", "=", "torch_cache_dir", "\n", "if", "load_pre_model", ":", "\n", "\t\t\t", "self", ".", "lm", "=", "self", ".", "pre_model_type", ".", "from_pretrained", "(", "\n", "pre_model_name", ",", "\n", "cache_dir", "=", "torch_cache_dir", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "\n", "pre_model_name", ",", "\n", "cache_dir", "=", "torch_cache_dir", "\n", ")", "\n", "self", ".", "lm", "=", "self", ".", "pre_model_type", ".", "from_config", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.setup": [[74, 81], ["len", "base_models.BasePreModel.train_dataloader"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.train_dataloader"], ["", "", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "\t\t", "if", "stage", "==", "'fit'", ":", "\n", "\t\t\t", "total_devices", "=", "self", ".", "trainer", ".", "num_nodes", "*", "self", ".", "trainer", ".", "num_gpus", "\n", "train_batches", "=", "len", "(", "self", ".", "train_dataloader", "(", ")", ")", "//", "total_devices", "\n", "# need to figure out how many batches will actually have gradient updates", "\n", "train_batches", "=", "train_batches", "//", "self", ".", "trainer", ".", "accumulate_grad_batches", "\n", "self", ".", "train_steps", "=", "(", "self", ".", "trainer", ".", "max_epochs", "*", "train_batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.configure_optimizers": [[82, 96], ["base_models.BasePreModel._get_optimizer_params", "transformers.AdamW", "transformers.get_linear_schedule_with_warmup"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel._get_optimizer_params"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "\t\t", "params", "=", "self", ".", "_get_optimizer_params", "(", "self", ".", "weight_decay", ")", "\n", "optimizer", "=", "AdamW", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", ",", "\n", "correct_bias", "=", "False", "\n", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "\n", "num_warmup_steps", "=", "self", ".", "lr_warm_up", "*", "self", ".", "train_steps", ",", "\n", "num_training_steps", "=", "self", ".", "train_steps", "\n", ")", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel._get_optimizer_params": [[97, 104], ["list", "base_models.BasePreModel.named_parameters", "any", "any"], "methods", ["None"], ["", "def", "_get_optimizer_params", "(", "self", ",", "weight_decay", ")", ":", "\n", "\t\t", "param_optimizer", "=", "list", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_params", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "]", "\n", "return", "optimizer_params", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.validation_step": [[105, 107], ["base_models.BasePreModel.eval_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.eval_step"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "return", "self", ".", "eval_step", "(", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.test_step": [[108, 110], ["base_models.BasePreModel.eval_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.eval_step"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "return", "self", ".", "eval_step", "(", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.validation_epoch_end": [[111, 113], ["base_models.BasePreModel.eval_epoch_end"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.eval_epoch_end"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "self", ".", "eval_epoch_end", "(", "outputs", ",", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.test_epoch_end": [[114, 116], ["base_models.BasePreModel.eval_epoch_end"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.eval_epoch_end"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "self", ".", "eval_epoch_end", "(", "outputs", ",", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.eval_step": [[117, 120], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "eval_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.eval_epoch_end": [[121, 124], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "eval_epoch_end", "(", "self", ",", "outputs", ",", "stage", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BasePreModel.lm_step": [[125, 128], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "lm_step", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", "=", "None", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModel.__init__": [[131, 175], ["base_models.BasePreModel.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_model_name", ":", "str", ",", "\n", "pre_model_type", ":", "Type", "[", "Union", "[", "AutoModel", ",", "AutoModelForSequenceClassification", "]", "]", "=", "AutoModel", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tBase class for Pre-Trained Language Models.\n\n\t\tArgs:\n\n\t\t\tpre_model_name: Name of pre-trained model from huggingface. See https://huggingface.co/\n\n\t\t\tpre_model_type: Type of pre-trained model.\n\t\t\t\tDefault: [`AutoModel`].\n\n\t\t\tlearning_rate: Maximum learning rate. Learning rate will warm up from ``0`` to ``learning_rate`` over\n\t\t\t\t``lr_warm_up`` training steps, and will then decay from ``learning_rate`` to ``0`` linearly over the remaining\n\t\t\t\t``1.0-lr_warm_up`` training steps.\n\n\t\t\tweight_decay: How much weight decay to apply in the AdamW optimizer.\n\t\t\t\tDefault: ``0.0``.\n\n\t\t\tlr_warm_up: The percent of training steps to warm up learning rate from ``0`` to ``learning_rate``.\n\t\t\t\tDefault: ``0.1``.\n\n\t\t\tload_pre_model: If ``False``, Model structure will load from pre_model_name, but weights will not be initialized.\n\t\t\t\tCuts down on model load time if you plan on loading your model from a checkpoint, as there is no reason to\n\t\t\t\tinitialize your model twice.\n\t\t\t\tDefault: ``True``.\n\n\t\t\ttorch_cache_dir: If provided, cache directory for loading models. Defaults to huggingface default.\n\t\t\t\tDefault: ``None``.\n\n\t\t\"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "pre_model_name", ",", "pre_model_type", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# TODO check for these, not all models may have them", "\n", "# noinspection PyUnresolvedReferences", "\n", "self", ".", "hidden_size", "=", "self", ".", "lm", ".", "config", ".", "hidden_size", "\n", "# noinspection PyUnresolvedReferences", "\n", "self", ".", "hidden_dropout_prob", "=", "self", ".", "lm", ".", "config", ".", "hidden_dropout_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModel.lm_step": [[176, 190], ["base_models.BaseLanguageModel.lm", "base_models.BaseLanguageModel.lm"], "methods", ["None"], ["", "def", "lm_step", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", "=", "None", ")", ":", "\n", "\t\t", "if", "token_type_ids", "is", "not", "None", ":", "\n", "\t\t\t", "outputs", "=", "self", ".", "lm", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "outputs", "=", "self", ".", "lm", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", ")", "\n", "", "contextualized_embeddings", "=", "outputs", "[", "0", "]", "\n", "return", "contextualized_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.__init__": [[193, 231], ["base_models.BasePreModel.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_model_name", ":", "str", ",", "\n", "pre_model_type", ":", "Type", "[", "Union", "[", "AutoModel", ",", "AutoModelForSequenceClassification", "]", "]", "=", "AutoModelForSequenceClassification", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tBase class for Pre-Trained Language Models for Sequence Classification.\n\n\t\tArgs:\n\n\t\t\tpre_model_name: Name of pre-trained model from huggingface. See https://huggingface.co/\n\n\t\t\tpre_model_type: Type of pre-trained model.\n\t\t\t\tDefault: [`AutoModel`].\n\n\t\t\tlearning_rate: Maximum learning rate. Learning rate will warm up from ``0`` to ``learning_rate`` over\n\t\t\t\t``lr_warm_up`` training steps, and will then decay from ``learning_rate`` to ``0`` linearly over the remaining\n\t\t\t\t``1.0-lr_warm_up`` training steps.\n\n\t\t\tweight_decay: How much weight decay to apply in the AdamW optimizer.\n\t\t\t\tDefault: ``0.0``.\n\n\t\t\tlr_warm_up: The percent of training steps to warm up learning rate from ``0`` to ``learning_rate``.\n\t\t\t\tDefault: ``0.1``.\n\n\t\t\tload_pre_model: If ``False``, Model structure will load from pre_model_name, but weights will not be initialized.\n\t\t\t\tCuts down on model load time if you plan on loading your model from a checkpoint, as there is no reason to\n\t\t\t\tinitialize your model twice.\n\t\t\t\tDefault: ``True``.\n\n\t\t\ttorch_cache_dir: If provided, cache directory for loading models. Defaults to huggingface default.\n\t\t\t\tDefault: ``None``.\n\n\t\t\"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "pre_model_name", ",", "pre_model_type", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "# TODO check for these, not all models may have them", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step": [[250, 267], ["base_models.BaseLanguageModelForSequenceClassification.lm", "base_models.BaseLanguageModelForSequenceClassification.lm"], "methods", ["None"], ["", "def", "lm_step", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", "=", "None", ")", ":", "\n", "\t\t", "if", "token_type_ids", "is", "not", "None", ":", "\n", "\t\t\t", "outputs", "=", "self", ".", "lm", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "outputs", "=", "self", ".", "lm", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", ")", "\n", "\n", "", "logits", "=", "outputs", "[", "0", "]", "\n", "# re-arrange logits", "\n", "# logits = logits[:, self.label_list]", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.__init__": [[15, 93], ["pytorch_gleam.modeling.models.base_models.BaseLanguageModel.__init__", "len", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.CrossEntropyLoss", "torch.nn.Softmax", "multi_class_frame.MultiClassFrameLanguageModel.label_map.items"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n", "metric", ":", "Metric", ",", "\n", "num_threshold_steps", ":", "int", "=", "100", ",", "\n", "update_threshold", ":", "bool", "=", "False", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tMulti-Class Language Model for baseline n-way classification tasks.\n\n\t\tArgs:\n\n\t\t\tlabel_map: Dictionary mapping from name of class to class idx, used to determine\n\t\t\t\tsize of final softmax layer along with class-specific metrics. Class with zero idx is\n\t\t\t\tconsidered the negative class.\n\n\t\t\tthreshold: Threshold module to use for system predictions.\n\n\t\t\tmetric: Metric to evaluate overall performance. Typically Macro or Micro F1.\n\n\t\t\tnum_threshold_steps: Number of different threshold values to evaluate when updating threshold on\n\t\t\t\tvalidation dataset.\n\t\t\t\tDefault: ``100``.\n\n\t\t\tupdate_threshold: If ``True``, validation thresholds are updated. Automatically set during training.\n\t\t\t\tDefault: ``False``.\n\n\t\t\tpre_model_name: Name of pre-trained model from huggingface. See https://huggingface.co/\n\n\t\t\tpre_model_type: Type of pre-trained model.\n\t\t\t\tDefault: [`AutoModel`].\n\n\t\t\tlearning_rate: Maximum learning rate. Learning rate will warm up from ``0`` to ``learning_rate`` over\n\t\t\t\t``lr_warm_up`` training steps, and will then decay from ``learning_rate`` to ``0`` linearly over the remaining\n\t\t\t\t``1.0-lr_warm_up`` training steps.\n\n\t\t\tweight_decay: How much weight decay to apply in the AdamW optimizer.\n\t\t\t\tDefault: ``0.0``.\n\n\t\t\tlr_warm_up: The percent of training steps to warm up learning rate from ``0`` to ``learning_rate``.\n\t\t\t\tDefault: ``0.1``.\n\n\t\t\tload_pre_model: If ``False``, Model structure will load from pre_model_name, but weights will not be initialized.\n\t\t\t\tCuts down on model load time if you plan on loading your model from a checkpoint, as there is no reason to\n\t\t\t\tinitialize your model twice.\n\t\t\t\tDefault: ``True``.\n\n\t\t\ttorch_cache_dir: If provided, cache directory for loading models. Defaults to huggingface default.\n\t\t\t\tDefault: ``None``.\n\n\t\t\"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "num_classes", "=", "len", "(", "label_map", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "num_threshold_steps", "=", "num_threshold_steps", "\n", "self", ".", "update_threshold", "=", "update_threshold", "\n", "\n", "self", ".", "cls_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "hidden_size", ",", "\n", "out_features", "=", "self", ".", "num_classes", "\n", ")", "\n", "self", ".", "inv_label_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "label_map", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "f_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "\n", "p", "=", "self", ".", "hidden_dropout_prob", "\n", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "reduction", "=", "'none'", "\n", ")", "\n", "self", ".", "score_func", "=", "torch", ".", "nn", ".", "Softmax", "(", "\n", "dim", "=", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.setup": [[95, 99], ["super().setup"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.setup"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "setup", "(", "stage", ")", "\n", "if", "stage", "==", "'fit'", ":", "\n", "\t\t\t", "self", ".", "update_threshold", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.eval_epoch_end": [[100, 115], ["torch.cat().mean().cpu", "multi_class_frame.MultiClassFrameLanguageModel.log", "multi_class_frame.MultiClassFrameLanguageModel.threshold.cpu", "multi_class_frame.MultiClassFrameLanguageModel.eval_outputs", "results.items", "multi_class_frame.MultiClassFrameLanguageModel.threshold.to", "multi_class_frame.MultiClassFrameLanguageModel.log", "torch.cat().mean", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.eval_outputs"], ["", "", "def", "eval_epoch_end", "(", "self", ",", "outputs", ",", "stage", ")", ":", "\n", "\t\t", "loss", "=", "torch", ".", "cat", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "log", "(", "f'{stage}_loss'", ",", "loss", ")", "\n", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "\n", "results", ",", "labels", ",", "preds", ",", "t_ids", "=", "self", ".", "eval_outputs", "(", "\n", "outputs", ",", "\n", "stage", ",", "\n", "self", ".", "num_threshold_steps", ",", "\n", "self", ".", "update_threshold", "\n", ")", "\n", "for", "val_name", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "val_name", ",", "val", ")", "\n", "\n", "", "self", ".", "threshold", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.eval_outputs": [[116, 160], ["multi_class_frame.MultiClassFrameLanguageModel.flatten", "torch.cat().cpu", "torch.cat().cpu", "multi_class_frame.MultiClassFrameLanguageModel.threshold.cpu", "multi_class_frame.MultiClassFrameLanguageModel.threshold", "multi_class_frame.MultiClassFrameLanguageModel.metric", "zip", "torch.min().item", "torch.max().item", "multi_class_frame.MultiClassFrameLanguageModel.metric.best", "multi_class_frame.MultiClassFrameLanguageModel.threshold.update_thresholds", "torch.cat", "torch.cat", "abs", "torch.min", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.update_thresholds"], ["", "def", "eval_outputs", "(", "self", ",", "outputs", ",", "stage", ",", "num_threshold_steps", "=", "100", ",", "update_threshold", "=", "True", ")", ":", "\n", "\t\t", "results", "=", "{", "}", "\n", "\n", "t_ids", "=", "self", ".", "flatten", "(", "[", "x", "[", "'ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count]", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "'labels'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "# [count, num_classes]", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "x", "[", "'scores'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "\n", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "if", "update_threshold", ":", "\n", "\t\t\t", "m_min_score", "=", "torch", ".", "min", "(", "scores", ")", ".", "item", "(", ")", "\n", "m_max_score", "=", "torch", ".", "max", "(", "scores", ")", ".", "item", "(", ")", "\n", "# check 100 values between min and max", "\n", "if", "abs", "(", "m_min_score", "-", "m_max_score", ")", "<", "1e-6", ":", "\n", "\t\t\t\t", "m_max_score", "+=", "10", "\n", "", "m_delta", "=", "(", "m_max_score", "-", "m_min_score", ")", "/", "num_threshold_steps", "\n", "max_threshold", ",", "max_metrics", "=", "self", ".", "metric", ".", "best", "(", "\n", "labels", ",", "\n", "scores", ",", "\n", "self", ".", "threshold", ",", "\n", "threshold_min", "=", "m_min_score", ",", "\n", "threshold_max", "=", "m_max_score", ",", "\n", "threshold_delta", "=", "m_delta", ",", "\n", ")", "\n", "self", ".", "threshold", ".", "update_thresholds", "(", "max_threshold", ")", "\n", "", "preds", "=", "self", ".", "threshold", "(", "scores", ")", "\n", "\n", "f1", ",", "p", ",", "r", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ",", "cls_indices", "=", "self", ".", "metric", "(", "\n", "labels", ",", "\n", "preds", "\n", ")", "\n", "\n", "results", "[", "f'{stage}_f1'", "]", "=", "f1", "\n", "results", "[", "f'{stage}_p'", "]", "=", "p", "\n", "results", "[", "f'{stage}_r'", "]", "=", "r", "\n", "\n", "for", "cls_index", ",", "c_f1", ",", "c_p", ",", "c_r", "in", "zip", "(", "cls_indices", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ")", ":", "\n", "\t\t\t", "label_name", "=", "self", ".", "inv_label_map", "[", "cls_index", "]", "\n", "results", "[", "f'{stage}_{label_name}_f1'", "]", "=", "c_f1", "\n", "results", "[", "f'{stage}_{label_name}_p'", "]", "=", "c_p", "\n", "results", "[", "f'{stage}_{label_name}_r'", "]", "=", "c_r", "\n", "\n", "", "return", "results", ",", "labels", ",", "preds", ",", "t_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.eval_step": [[161, 164], ["multi_class_frame.MultiClassFrameLanguageModel.predict_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.predict_step"], ["", "def", "eval_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "result", "=", "self", ".", "predict_step", "(", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.forward": [[165, 184], ["multi_class_frame.MultiClassFrameLanguageModel.lm_step", "multi_class_frame.MultiClassFrameLanguageModel.f_dropout", "multi_class_frame.MultiClassFrameLanguageModel.cls_layer"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "input_ids", "=", "batch", "[", "'input_ids'", "]", "\n", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", "\n", "if", "'token_type_ids'", "in", "batch", ":", "\n", "\t\t\t", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", "\n", "", "else", ":", "\n", "\t\t\t", "token_type_ids", "=", "None", "\n", "# [bsize, seq_len, hidden_size]", "\n", "", "contextualized_embeddings", "=", "self", ".", "lm_step", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", "\n", ")", "\n", "# [bsize, hidden_size]", "\n", "lm_output", "=", "contextualized_embeddings", "[", ":", ",", "0", "]", "\n", "lm_output", "=", "self", ".", "f_dropout", "(", "lm_output", ")", "\n", "# [bsize, num_classes]", "\n", "logits", "=", "self", ".", "cls_layer", "(", "lm_output", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.loss": [[185, 191], ["multi_class_frame.MultiClassFrameLanguageModel.criterion"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "\t\t", "loss", "=", "self", ".", "criterion", "(", "\n", "logits", ",", "\n", "labels", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.training_step": [[192, 205], ["multi_class_frame.MultiClassFrameLanguageModel.", "multi_class_frame.MultiClassFrameLanguageModel.loss", "multi_class_frame.MultiClassFrameLanguageModel.mean", "multi_class_frame.MultiClassFrameLanguageModel.log"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\t\t", "batch_logits", "=", "self", "(", "batch", ")", "\n", "batch_labels", "=", "batch", "[", "'labels'", "]", "\n", "batch_loss", "=", "self", ".", "loss", "(", "\n", "batch_logits", ",", "\n", "batch_labels", "\n", ")", "\n", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "'train_loss'", ",", "loss", ")", "\n", "result", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.predict_step": [[206, 219], ["multi_class_frame.MultiClassFrameLanguageModel.", "multi_class_frame.MultiClassFrameLanguageModel.loss", "multi_class_frame.MultiClassFrameLanguageModel.score_func"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss"], ["", "def", "predict_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "logits", "=", "self", "(", "batch", ")", "\n", "loss", "=", "self", ".", "loss", "(", "logits", ",", "batch", "[", "'labels'", "]", ")", "\n", "scores", "=", "self", ".", "score_func", "(", "logits", ")", "\n", "results", "=", "{", "\n", "# [bsize]", "\n", "'ids'", ":", "batch", "[", "'ids'", "]", ",", "\n", "'labels'", ":", "batch", "[", "'labels'", "]", ",", "\n", "'logits'", ":", "logits", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameLanguageModel.flatten": [[220, 223], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "flatten", "(", "multi_list", ")", ":", "\n", "\t\t", "return", "[", "item", "for", "sub_list", "in", "multi_list", "for", "item", "in", "sub_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameGraphLanguageModel.__init__": [[227, 270], ["multi_class_frame.MultiClassFrameLanguageModel.__init__", "torch.nn.ModuleDict", "torch.nn.Linear", "torch.nn.ModuleDict", "len", "range", "pytorch_gleam.modeling.layers.gcn.GraphAttention", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "graphs", ":", "List", "[", "str", "]", ",", "\n", "gcn_size", ":", "int", ",", "\n", "gcn_depth", ":", "int", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "graphs", "=", "graphs", "\n", "self", ".", "gcn_size", "=", "gcn_size", "\n", "self", ".", "gcn_depth", "=", "gcn_depth", "\n", "\n", "if", "self", ".", "hidden_size", "!=", "self", ".", "gcn_size", ":", "\n", "\t\t\t", "self", ".", "gcn_projs", "=", "torch", ".", "nn", ".", "ModuleDict", "(", "\n", "{", "\n", "f'{graph}_proj'", ":", "torch", ".", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "self", ".", "gcn_size", ")", "for", "graph", "in", "self", ".", "graphs", "\n", "}", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "gcn_projs", "=", "None", "\n", "", "self", ".", "gcn_hidden_size", "=", "len", "(", "self", ".", "graphs", ")", "*", "gcn_size", "\n", "\n", "self", ".", "gcns", "=", "torch", ".", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "graph_name", "in", "self", ".", "graphs", ":", "\n", "\t\t\t", "for", "d", "in", "range", "(", "self", ".", "gcn_depth", ")", ":", "\n", "\t\t\t\t", "layer_name", "=", "f'{graph_name}_{d}_gcn'", "\n", "# first layer takes bert reduced output,", "\n", "# further layers take previous graph outputs", "\n", "in_features", "=", "gcn_size", "if", "d", "==", "0", "else", "self", ".", "gcn_hidden_size", "\n", "out_features", "=", "gcn_size", "\n", "self", ".", "gcns", "[", "layer_name", "]", "=", "GraphAttention", "(", "\n", "in_features", "=", "in_features", ",", "\n", "out_features", "=", "out_features", ",", "\n", "dropout", "=", "self", ".", "hidden_dropout_prob", ",", "\n", "alpha", "=", "0.2", ",", "\n", "concat", "=", "True", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "cls_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "gcn_hidden_size", ",", "\n", "out_features", "=", "self", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameGraphLanguageModel.gcn_pool": [[272, 278], ["graph_mask.float().sum().unsqueeze", "graph_outputs.sum", "graph_mask.float().sum", "graph_mask.float"], "methods", ["None"], ["", "def", "gcn_pool", "(", "self", ",", "graph_outputs", ",", "graph_mask", ",", "batch", ")", ":", "\n", "# [bsize, seq_len] -> [bsize] -> [bsize, 1]", "\n", "\t\t", "counts", "=", "graph_mask", ".", "float", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "# [bsize, seq_len, hidden_size] -> [bsize, hidden_size] / [bsize, 1] -> [bsize, hidden_size]", "\n", "graph_outputs_pooled", "=", "graph_outputs", ".", "sum", "(", "dim", "=", "-", "2", ")", "/", "counts", "\n", "return", "graph_outputs_pooled", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameGraphLanguageModel.gcn_forward": [[279, 296], ["range", "torch.cat", "torch.cat", "torch.cat.append"], "methods", ["None"], ["", "def", "gcn_forward", "(", "self", ",", "node_embeddings", ",", "batch", ")", ":", "\n", "# [bsize, seq_len, hidden_size]", "\n", "\t\t", "graph_inputs", "=", "[", "node_embeddings", "]", "\n", "for", "d", "in", "range", "(", "self", ".", "gcn_depth", ")", ":", "\n", "\t\t\t", "graph_emb_inputs", "=", "torch", ".", "cat", "(", "graph_inputs", ",", "dim", "=", "-", "1", ")", "\n", "graph_outputs", "=", "[", "]", "\n", "for", "graph_name", "in", "self", ".", "graphs", ":", "\n", "\t\t\t\t", "gcn_edges", "=", "batch", "[", "f'{graph_name}_edges'", "]", "\n", "if", "d", "==", "0", "and", "self", ".", "gcn_projs", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "gcn_inputs", "=", "self", ".", "gcn_projs", "[", "f'{graph_name}_proj'", "]", "(", "graph_emb_inputs", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "gcn_inputs", "=", "graph_emb_inputs", "\n", "", "gcn_outputs", "=", "self", ".", "gcns", "[", "f'{graph_name}_{d}_gcn'", "]", "(", "gcn_inputs", ",", "gcn_edges", ")", "\n", "graph_outputs", ".", "append", "(", "gcn_outputs", ")", "\n", "", "graph_inputs", "=", "graph_outputs", "\n", "", "graph_outputs", "=", "torch", ".", "cat", "(", "graph_inputs", ",", "dim", "=", "-", "1", ")", "\n", "return", "graph_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameGraphLanguageModel.forward": [[297, 316], ["multi_class_frame.MultiClassFrameGraphLanguageModel.lm_step", "multi_class_frame.MultiClassFrameGraphLanguageModel.gcn_forward", "multi_class_frame.MultiClassFrameGraphLanguageModel.gcn_pool", "multi_class_frame.MultiClassFrameGraphLanguageModel.f_dropout", "multi_class_frame.MultiClassFrameGraphLanguageModel.cls_layer"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameGraphLanguageModel.gcn_forward", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameGraphMoralityLanguageModel.gcn_pool"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "# [bsize, seq_len, hidden_size]", "\n", "\t\t", "contextualized_embeddings", "=", "self", ".", "lm_step", "(", "\n", "batch", "[", "'input_ids'", "]", ",", "\n", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", ",", "\n", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", "if", "'token_type_ids'", "in", "batch", "else", "None", "\n", ")", "\n", "graph_outputs", "=", "self", ".", "gcn_forward", "(", "\n", "contextualized_embeddings", ",", "\n", "batch", "\n", ")", "\n", "classifier_inputs", "=", "self", ".", "gcn_pool", "(", "\n", "graph_outputs", ",", "\n", "graph_mask", "=", "batch", "[", "'attention_mask'", "]", ",", "\n", "batch", "=", "batch", "\n", ")", "\n", "classifier_inputs", "=", "self", ".", "f_dropout", "(", "classifier_inputs", ")", "\n", "logits", "=", "self", ".", "cls_layer", "(", "classifier_inputs", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameGraphMoralityLanguageModel.__init__": [[321, 340], ["multi_class_frame.MultiClassFrameGraphLanguageModel.__init__", "len", "pytorch_gleam.modeling.layers.hopfield.HopfieldPooling"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "morality_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "hopfield_update_steps_max", ":", "int", "=", "2", ",", "\n", "hopfield_dropout", ":", "float", "=", "0.0", ",", "\n", "hopfield_num_heads", ":", "int", "=", "1", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "morality_map", "=", "morality_map", "\n", "self", ".", "num_moralities", "=", "len", "(", "self", ".", "morality_map", ")", "\n", "\n", "self", ".", "f_morality_pooler", "=", "HopfieldPooling", "(", "\n", "input_size", "=", "self", ".", "gcn_hidden_size", ",", "\n", "quantity", "=", "self", ".", "num_moralities", ",", "\n", "update_steps_max", "=", "hopfield_update_steps_max", ",", "\n", "dropout", "=", "hopfield_dropout", ",", "\n", "num_heads", "=", "hopfield_num_heads", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class_frame.MultiClassFrameGraphMoralityLanguageModel.gcn_pool": [[342, 360], ["batch[].float().unsqueeze", "multi_class_frame.MultiClassFrameGraphMoralityLanguageModel.f_morality_pooler().view", "batch[].float().unsqueeze.sum", "multi_class_frame.MultiClassFrameGraphMoralityLanguageModel.sum", "batch[].float", "multi_class_frame.MultiClassFrameGraphMoralityLanguageModel.f_morality_pooler", "graph_mask.bool"], "methods", ["None"], ["", "def", "gcn_pool", "(", "self", ",", "graph_outputs", ",", "graph_mask", ",", "batch", ")", ":", "\n", "# [bsize, num_moralities, 1]", "\n", "\t\t", "f_morality_mask", "=", "batch", "[", "'f_morality'", "]", ".", "float", "(", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "# [bsize, num_moralities, hidden_size]", "\n", "f_pool", "=", "self", ".", "f_morality_pooler", "(", "\n", "graph_outputs", ",", "\n", "# masks used are inverted, aka ignored values should be True", "\n", "stored_pattern_padding_mask", "=", "~", "graph_mask", ".", "bool", "(", ")", "\n", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_moralities", ",", "self", ".", "gcn_hidden_size", ")", "\n", "\n", "# [bsize, num_moralities, hidden_size]", "\n", "f_pool", "=", "f_pool", "*", "f_morality_mask", "\n", "# [bsize, 1]", "\n", "f_counts", "=", "f_morality_mask", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "# [bsize, num_moralities, hidden_size] -> [bsize, hidden_size] / [bsize, 1] -> [bsize, hidden_size]", "\n", "graph_outputs_pooled", "=", "f_pool", ".", "sum", "(", "dim", "=", "-", "2", ")", "/", "f_counts", "\n", "\n", "return", "graph_outputs_pooled", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.__init__": [[16, 53], ["pytorch_gleam.modeling.models.base_models.BaseLanguageModel.__init__", "torch.nn.Linear", "torch.nn.CrossEntropyLoss", "torch.nn.Softmax", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "infer", ":", "ConsistencyScoring", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n", "metric", ":", "Metric", ",", "\n", "m_metric", ":", "Metric", ",", "\n", "num_classes", ":", "int", "=", "3", ",", "\n", "num_val_seeds", ":", "int", "=", "1", ",", "\n", "num_threshold_steps", ":", "int", "=", "100", ",", "\n", "update_threshold", ":", "bool", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "infer", "=", "infer", "\n", "self", ".", "num_val_seeds", "=", "num_val_seeds", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "m_metric", "=", "m_metric", "\n", "self", ".", "num_threshold_steps", "=", "num_threshold_steps", "\n", "self", ".", "update_threshold", "=", "update_threshold", "\n", "\n", "self", ".", "cls_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "hidden_size", ",", "\n", "out_features", "=", "self", ".", "num_classes", "\n", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "reduction", "=", "'none'", "\n", ")", "\n", "self", ".", "score_func", "=", "torch", ".", "nn", ".", "Softmax", "(", "\n", "dim", "=", "-", "1", "\n", ")", "\n", "self", ".", "f_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "\n", "p", "=", "self", ".", "hidden_dropout_prob", "\n", ")", "\n", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.setup": [[54, 70], ["super().setup", "misinfo.items", "nli_text.NliTextLanguageModel.train_dataloader", "pytorch_gleam.modeling.thresholds.MultiClassThresholdModule", "nli_text.NliTextLanguageModel.test_dataloader", "nli_text.NliTextLanguageModel.val_dataloader", "nli_text.NliTextLanguageModel.predict_dataloader", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.setup", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.train_dataloader", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.test_dataloader", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.val_dataloader", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.predict_dataloader"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "setup", "(", "stage", ")", "\n", "if", "stage", "==", "'fit'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "train_dataloader", "(", ")", "\n", "", "elif", "stage", "==", "'test'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", "[", "0", "]", "\n", "", "elif", "stage", "==", "'val'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "val_dataloader", "(", ")", "[", "0", "]", "\n", "", "elif", "stage", "==", "'predict'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "predict_dataloader", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown stage: {stage}'", ")", "\n", "", "misinfo", "=", "data_loader", ".", "dataset", ".", "misinfo", "\n", "for", "m_id", ",", "m", "in", "misinfo", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "m_id", "not", "in", "self", ".", "threshold", ":", "\n", "\t\t\t\t", "self", ".", "threshold", "[", "m_id", "]", "=", "MultiClassThresholdModule", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.infer_m_scores": [[71, 109], ["torch.stack", "len", "numpy.zeros", "nli_text.NliTextLanguageModel.infer", "torch.tensor", "torch.stack.append", "seed_labels.items", "len", "enumerate"], "methods", ["None"], ["", "", "", "def", "infer_m_scores", "(", "self", ",", "adj_list", ",", "stage_labels", ",", "stage", ")", ":", "\n", "# always use stage 0 (val) for seeds", "\n", "\t\t", "seed_labels", "=", "stage_labels", "[", "0", "]", "\n", "seed_examples", "=", "[", "\n", "(", "ex_id", ",", "label", ")", "for", "(", "ex_id", ",", "label", ")", "\n", "in", "seed_labels", ".", "items", "(", ")", "\n", "if", "label", "!=", "0", "\n", "]", "\n", "# if the stage is val then we have no test set, so pick", "\n", "# some number of seed examples from val and test on remaining val", "\n", "if", "stage", "==", "'val'", ":", "\n", "\t\t\t", "seed_examples", "=", "seed_examples", "[", ":", "self", ".", "num_val_seeds", "]", "\n", "# make sure adj list only has val labeled data", "\n", "adj_list", "=", "[", "\n", "(", "u_id", ",", "v_id", ",", "uv_scores", ")", "for", "(", "u_id", ",", "v_id", ",", "uv_scores", ")", "in", "adj_list", "\n", "if", "u_id", "in", "seed_labels", "and", "v_id", "in", "seed_labels", "\n", "]", "\n", "", "seed_examples", "=", "{", "\n", "ex_id", ":", "label", "for", "(", "ex_id", ",", "label", ")", "\n", "in", "seed_examples", "\n", "}", "\n", "if", "len", "(", "adj_list", ")", "==", "0", ":", "\n", "\t\t\t", "node_scores", "=", "np", ".", "zeros", "(", "[", "len", "(", "seed_labels", ")", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "node_idx_map", "=", "{", "node", ":", "idx", "for", "(", "idx", ",", "node", ")", "in", "enumerate", "(", "seed_labels", ")", "}", "\n", "", "else", ":", "\n", "\t\t\t", "node_scores", ",", "node_idx_map", "=", "self", ".", "infer", "(", "adj_list", ",", "seed_examples", ")", "\n", "", "if", "stage", "==", "'test'", ":", "\n", "\t\t\t", "eval_labels", "=", "stage_labels", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "eval_labels", "=", "stage_labels", "[", "0", "]", "\n", "", "scores", "=", "[", "]", "\n", "# make sure we pack example scores in proper order", "\n", "for", "ex_id", "in", "eval_labels", ":", "\n", "\t\t\t", "ex_idx", "=", "node_idx_map", "[", "ex_id", "]", "\n", "ex_scores", "=", "torch", ".", "tensor", "(", "node_scores", "[", "ex_idx", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "scores", ".", "append", "(", "ex_scores", ")", "\n", "", "scores", "=", "torch", ".", "stack", "(", "scores", ",", "dim", "=", "0", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.eval_epoch_end": [[110, 204], ["torch.cat().mean", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.threshold.cpu", "nli_text.build_adj_list", "m_stage_labels.items", "torch.cat", "torch.cat", "nli_text.NliTextLanguageModel.metric", "nli_text.NliTextLanguageModel.m_metric", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "zip", "nli_text.NliTextLanguageModel.threshold.to", "eval_labels.items", "torch.tensor", "nli_text.NliTextLanguageModel.infer_m_scores", "m_threshold", "nli_text.NliTextLanguageModel.m_metric", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "zip", "m_s_ids.extend", "m_s_m_ids.extend", "torch.cat.append", "torch.cat.append", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "torch.cat", "pytorch_gleam.modeling.thresholds.MultiClassThresholdModule", "len", "torch.tensor.append", "m_ex_ids.append", "m_ex_m_ids.append", "torch.min().item", "torch.max().item", "nli_text.NliTextLanguageModel.m_metric.best", "m_threshold.update_thresholds", "m_threshold.thresholds.item", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "nli_text.NliTextLanguageModel.log", "torch.min", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.build_adj_list", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.infer_m_scores", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.update_thresholds"], ["", "def", "eval_epoch_end", "(", "self", ",", "outputs", ",", "stage", ")", ":", "\n", "\t\t", "triplet_eval_outputs", ",", "infer_eval_outputs", "=", "outputs", "\n", "loss", "=", "torch", ".", "cat", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "triplet_eval_outputs", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "f'{stage}_loss'", ",", "loss", ")", "\n", "\n", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "# stage 0 is validation", "\n", "# stage 1 is test", "\n", "m_adj_lists", ",", "m_stage_labels", "=", "build_adj_list", "(", "infer_eval_outputs", ")", "\n", "\n", "for", "m_id", "in", "m_stage_labels", ":", "\n", "\t\t\t", "if", "m_id", "not", "in", "self", ".", "threshold", ":", "\n", "\t\t\t\t", "self", ".", "threshold", "[", "m_id", "]", "=", "MultiClassThresholdModule", "(", ")", "\n", "\n", "", "", "m_s_ids", "=", "[", "]", "\n", "m_s_m_ids", "=", "[", "]", "\n", "m_s_labels", "=", "[", "]", "\n", "m_s_preds", "=", "[", "]", "\n", "for", "m_id", ",", "stage_labels", "in", "m_stage_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m_adj_list", "=", "m_adj_lists", "[", "m_id", "]", "\n", "m_threshold", "=", "self", ".", "threshold", "[", "m_id", "]", "\n", "if", "len", "(", "m_adj_list", ")", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "", "m_ex_ids", "=", "[", "]", "\n", "m_ex_m_ids", "=", "[", "]", "\n", "m_ex_labels", "=", "[", "]", "\n", "if", "stage", "!=", "'val'", ":", "\n", "\t\t\t\t", "eval_labels", "=", "stage_labels", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "eval_labels", "=", "stage_labels", "[", "0", "]", "\n", "", "for", "ex_id", ",", "label", "in", "eval_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "m_ex_labels", ".", "append", "(", "label", ")", "\n", "m_ex_ids", ".", "append", "(", "ex_id", ")", "\n", "m_ex_m_ids", ".", "append", "(", "m_id", ")", "\n", "", "m_ex_labels", "=", "torch", ".", "tensor", "(", "m_ex_labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "m_ex_scores", "=", "self", ".", "infer_m_scores", "(", "m_adj_list", ",", "stage_labels", ",", "stage", ")", "\n", "if", "self", ".", "update_threshold", ":", "\n", "\t\t\t\t", "m_min_score", "=", "torch", ".", "min", "(", "m_ex_scores", ")", ".", "item", "(", ")", "\n", "m_max_score", "=", "torch", ".", "max", "(", "m_ex_scores", ")", ".", "item", "(", ")", "\n", "# check 100 values between min and max", "\n", "if", "m_min_score", "==", "m_max_score", ":", "\n", "\t\t\t\t\t", "m_max_score", "+=", "1", "\n", "", "m_delta", "=", "(", "m_max_score", "-", "m_min_score", ")", "/", "self", ".", "num_threshold_steps", "\n", "max_threshold", ",", "max_metrics", "=", "self", ".", "m_metric", ".", "best", "(", "\n", "m_ex_labels", ",", "\n", "m_ex_scores", ",", "\n", "m_threshold", ",", "\n", "threshold_min", "=", "m_min_score", ",", "\n", "threshold_max", "=", "m_max_score", ",", "\n", "threshold_delta", "=", "m_delta", ",", "\n", ")", "\n", "m_threshold", ".", "update_thresholds", "(", "max_threshold", ")", "\n", "\n", "", "m_ex_preds", "=", "m_threshold", "(", "m_ex_scores", ")", "\n", "m_f1", ",", "m_p", ",", "m_r", ",", "m_cls_f1", ",", "m_cls_p", ",", "m_cls_r", ",", "m_cls_indices", "=", "self", ".", "m_metric", "(", "\n", "m_ex_labels", ",", "\n", "m_ex_preds", "\n", ")", "\n", "self", ".", "log", "(", "f'{stage}_{m_id}_micro_f1'", ",", "m_f1", ")", "\n", "self", ".", "log", "(", "f'{stage}_{m_id}_micro_p'", ",", "m_p", ")", "\n", "self", ".", "log", "(", "f'{stage}_{m_id}_micro_r'", ",", "m_r", ")", "\n", "self", ".", "log", "(", "f'{stage}_{m_id}_threshold'", ",", "m_threshold", ".", "thresholds", ".", "item", "(", ")", ")", "\n", "for", "cls_index", ",", "c_f1", ",", "c_p", ",", "c_r", "in", "zip", "(", "m_cls_indices", ",", "m_cls_f1", ",", "m_cls_p", ",", "m_cls_r", ")", ":", "\n", "\t\t\t\t", "self", ".", "log", "(", "f'{stage}_{m_id}_{cls_index}_f1'", ",", "c_f1", ")", "\n", "self", ".", "log", "(", "f'{stage}_{m_id}_{cls_index}_p'", ",", "c_p", ")", "\n", "self", ".", "log", "(", "f'{stage}_{m_id}_{cls_index}_r'", ",", "c_r", ")", "\n", "", "m_s_ids", ".", "extend", "(", "m_ex_ids", ")", "\n", "m_s_m_ids", ".", "extend", "(", "m_ex_m_ids", ")", "\n", "m_s_labels", ".", "append", "(", "m_ex_labels", ")", "\n", "m_s_preds", ".", "append", "(", "m_ex_preds", ")", "\n", "\n", "", "m_s_labels", "=", "torch", ".", "cat", "(", "m_s_labels", ",", "dim", "=", "0", ")", "\n", "m_s_preds", "=", "torch", ".", "cat", "(", "m_s_preds", ",", "dim", "=", "0", ")", "\n", "f1", ",", "p", ",", "r", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ",", "cls_indices", "=", "self", ".", "metric", "(", "\n", "m_s_labels", ",", "\n", "m_s_preds", "\n", ")", "\n", "micro_f1", ",", "micro_p", ",", "micro_r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "m_metric", "(", "\n", "m_s_labels", ",", "\n", "m_s_preds", "\n", ")", "\n", "self", ".", "log", "(", "f'{stage}_loss'", ",", "loss", ")", "\n", "self", ".", "log", "(", "f'{stage}_f1'", ",", "f1", ")", "\n", "self", ".", "log", "(", "f'{stage}_p'", ",", "p", ")", "\n", "self", ".", "log", "(", "f'{stage}_r'", ",", "r", ")", "\n", "self", ".", "log", "(", "f'{stage}_micro_f1'", ",", "micro_f1", ")", "\n", "self", ".", "log", "(", "f'{stage}_micro_p'", ",", "micro_p", ")", "\n", "self", ".", "log", "(", "f'{stage}_micro_r'", ",", "micro_r", ")", "\n", "for", "cls_index", ",", "c_f1", ",", "c_p", ",", "c_r", "in", "zip", "(", "cls_indices", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "f'{stage}_{cls_index}_f1'", ",", "c_f1", ")", "\n", "self", ".", "log", "(", "f'{stage}_{cls_index}_p'", ",", "c_p", ")", "\n", "self", ".", "log", "(", "f'{stage}_{cls_index}_r'", ",", "c_r", ")", "\n", "\n", "", "self", ".", "threshold", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.eval_step": [[205, 216], ["nli_text.NliTextLanguageModel.", "nli_text.NliTextLanguageModel.loss", "nli_text.NliTextLanguageModel.predict_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.predict_step"], ["", "def", "eval_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "if", "dataloader_idx", "is", "None", "or", "dataloader_idx", "==", "0", ":", "\n", "\t\t\t", "logits", ",", "scores", "=", "self", "(", "batch", ")", "\n", "loss", "=", "self", ".", "loss", "(", "logits", ",", "batch", "[", "'relations'", "]", ")", "\n", "result", "=", "{", "\n", "'loss'", ":", "loss", ",", "\n", "}", "\n", "", "else", ":", "\n", "\t\t\t", "result", "=", "self", ".", "predict_step", "(", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.forward": [[217, 236], ["nli_text.NliTextLanguageModel.lm_step", "nli_text.NliTextLanguageModel.f_dropout", "nli_text.NliTextLanguageModel.cls_layer", "nli_text.NliTextLanguageModel.score_func"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "input_ids", "=", "batch", "[", "'input_ids'", "]", "\n", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", "\n", "if", "'token_type_ids'", "in", "batch", ":", "\n", "\t\t\t", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", "\n", "", "else", ":", "\n", "\t\t\t", "token_type_ids", "=", "None", "\n", "# [bsize, seq_len, hidden_size]", "\n", "", "contextualized_embeddings", "=", "self", ".", "lm_step", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", "\n", ")", "\n", "# [bsize, hidden_size]", "\n", "lm_output", "=", "contextualized_embeddings", "[", ":", ",", "0", "]", "\n", "lm_output", "=", "self", ".", "f_dropout", "(", "lm_output", ")", "\n", "logits", "=", "self", ".", "cls_layer", "(", "lm_output", ")", "\n", "scores", "=", "self", ".", "score_func", "(", "logits", ")", "\n", "return", "logits", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.loss": [[237, 244], ["nli_text.NliTextLanguageModel.criterion"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "\t\t", "loss", "=", "self", ".", "criterion", "(", "\n", "logits", ",", "\n", "labels", "\n", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.training_step": [[245, 255], ["nli_text.NliTextLanguageModel.", "nli_text.NliTextLanguageModel.loss", "loss.mean.mean.mean", "nli_text.NliTextLanguageModel.log"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\t\t", "logits", ",", "scores", "=", "self", "(", "batch", ")", "\n", "loss", "=", "self", ".", "loss", "(", "logits", ",", "batch", "[", "'relations'", "]", ")", "\n", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "'train_loss'", ",", "loss", ")", "\n", "result", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.NliTextLanguageModel.predict_step": [[256, 275], ["nli_text.NliTextLanguageModel."], "methods", ["None"], ["", "def", "predict_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "logits", ",", "scores", "=", "self", "(", "batch", ")", "\n", "\n", "results", "=", "{", "\n", "# [bsize]", "\n", "'ids'", ":", "batch", "[", "'ids'", "]", ",", "\n", "# [bsize]", "\n", "'m_ids'", ":", "batch", "[", "'m_ids'", "]", ",", "\n", "# [bsize]", "\n", "'p_ids'", ":", "batch", "[", "'p_ids'", "]", ",", "\n", "# [bsize, 2]", "\n", "'labels'", ":", "batch", "[", "'labels'", "]", ",", "\n", "# [bsize, 2]", "\n", "'stages'", ":", "batch", "[", "'stages'", "]", ",", "\n", "# [bsize, num_relations]", "\n", "# only keep energies of entail and contradict relations, drop no relation", "\n", "'energies'", ":", "-", "logits", "[", ":", ",", "[", "0", ",", "1", "]", "]", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.flatten": [[277, 279], ["None"], "function", ["None"], ["", "", "def", "flatten", "(", "l", ")", ":", "\n", "\t", "return", "[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.build_adj_list": [[281, 319], ["nli_text.flatten", "nli_text.flatten", "nli_text.flatten", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "collections.defaultdict", "collections.defaultdict", "range", "len", "int", "int", "m_adj_list[].append", "torch.cat", "torch.cat", "torch.cat", "collections.defaultdict"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten"], ["", "def", "build_adj_list", "(", "outputs", ")", ":", "\n", "# [count]", "\n", "\t", "t_ids", "=", "flatten", "(", "[", "x", "[", "'ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count]", "\n", "m_ids", "=", "flatten", "(", "[", "x", "[", "'m_ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count]", "\n", "p_ids", "=", "flatten", "(", "[", "x", "[", "'p_ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count, 2]", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "'labels'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "stages", "=", "torch", ".", "cat", "(", "[", "x", "[", "'stages'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "# [count]", "\n", "t_label", "=", "labels", "[", ":", ",", "0", "]", "\n", "# [count]", "\n", "t_stage", "=", "stages", "[", ":", ",", "0", "]", "\n", "# [count]", "\n", "p_labels", "=", "labels", "[", ":", ",", "1", "]", "\n", "# [count]", "\n", "p_stage", "=", "stages", "[", ":", ",", "1", "]", "\n", "\n", "# [count, num_relations]", "\n", "t_energies", "=", "torch", ".", "cat", "(", "[", "x", "[", "'energies'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "\n", "m_adj_list", "=", "defaultdict", "(", "list", ")", "\n", "m_labels", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "dict", ")", ")", "\n", "for", "ex_idx", "in", "range", "(", "len", "(", "t_ids", ")", ")", ":", "\n", "\t\t", "ex_t_id", "=", "t_ids", "[", "ex_idx", "]", "\n", "ex_m_id", "=", "m_ids", "[", "ex_idx", "]", "\n", "ex_p_id", "=", "p_ids", "[", "ex_idx", "]", "\n", "ex_t_label", "=", "t_label", "[", "ex_idx", "]", "\n", "ex_t_stage", "=", "int", "(", "t_stage", "[", "ex_idx", "]", ")", "\n", "ex_p_label", "=", "p_labels", "[", "ex_idx", "]", "\n", "ex_p_stage", "=", "int", "(", "p_stage", "[", "ex_idx", "]", ")", "\n", "ex_tmp_energy", "=", "t_energies", "[", "ex_idx", "]", "\n", "m_labels", "[", "ex_m_id", "]", "[", "ex_t_stage", "]", "[", "ex_t_id", "]", "=", "ex_t_label", "\n", "m_adj_list", "[", "ex_m_id", "]", ".", "append", "(", "(", "ex_t_id", ",", "ex_p_id", ",", "ex_tmp_energy", ")", ")", "\n", "m_labels", "[", "ex_m_id", "]", "[", "ex_p_stage", "]", "[", "ex_p_id", "]", "=", "ex_p_label", "\n", "\n", "", "return", "m_adj_list", ",", "m_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_text.build_stage_labels": [[321, 332], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "m_labels.items", "m_t_labels.items", "stage_labels.items", "m_t_ids[].append", "m_m_ids[].append", "m_s_labels[].append"], "function", ["None"], ["", "def", "build_stage_labels", "(", "m_labels", ")", ":", "\n", "\t", "m_s_labels", "=", "defaultdict", "(", "list", ")", "\n", "m_m_ids", "=", "defaultdict", "(", "list", ")", "\n", "m_t_ids", "=", "defaultdict", "(", "list", ")", "\n", "for", "m_id", ",", "m_t_labels", "in", "m_labels", ".", "items", "(", ")", ":", "\n", "\t\t", "for", "stage_idx", ",", "stage_labels", "in", "m_t_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "m_t_id", ",", "m_t_label", "in", "stage_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "m_t_ids", "[", "stage_idx", "]", ".", "append", "(", "m_t_id", ")", "\n", "m_m_ids", "[", "stage_idx", "]", ".", "append", "(", "m_id", ")", "\n", "m_s_labels", "[", "stage_idx", "]", ".", "append", "(", "m_t_label", ")", "\n", "", "", "", "return", "m_s_labels", ",", "m_m_ids", ",", "m_t_ids", "\n", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.__init__": [[17, 116], ["pytorch_gleam.modeling.models.base_models.BaseLanguageModel.__init__", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "ke", ":", "KnowledgeEmbedding", ",", "\n", "infer", ":", "ConsistencyScoring", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n", "metric", ":", "Metric", ",", "\n", "m_metric", ":", "Metric", ",", "\n", "num_relations", ":", "int", "=", "2", ",", "\n", "num_classes", ":", "int", "=", "3", ",", "\n", "num_val_seeds", ":", "int", "=", "1", ",", "\n", "num_threshold_steps", ":", "int", "=", "100", ",", "\n", "update_threshold", ":", "bool", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tKnowledge-Base Inference Language Model for Attitude Consistency Scoring.\n\n\t\tArgs:\n\n\t\t\tke: Knowledge Embedding model to use for model.\n\n\t\t\tinfer: Attitude Consistency Scoring module to use for stance inference.\n\n\t\t\tthreshold: Threshold module to use for system predictions.\n\n\t\t\tmetric: Metric to evaluate overall performance. Typically Macro or Micro F1.\n\n\t\t\tm_metric: Metric to optimize for each Stance Knowledge Graph threshold, typically Micro F1.\n\n\t\t\tnum_relations: Number of different relations, such as \"Agree\" and \"Disagree\".\n\t\t\t\tDefault: ``2``.\n\n\t\t\tnum_classes: Number of different classes, such as \"Accept\", \"Reject\", and \"No Stance\".\n\t\t\t\tDefault: ``3``.\n\n\t\t\tnum_val_seeds: Number of validation examples to leave out during threshold update.\n\t\t\t\tDefault: ``1``.\n\n\t\t\tnum_threshold_steps: Number of different threshold values to evaluate when updating threshold on\n\t\t\t\tvalidation dataset.\n\t\t\t\tDefault: ``100``.\n\n\t\t\tupdate_threshold: If ``False``, validation thresholds are not updated. Use this in testing.\n\t\t\t\tDefault: ``True``.\n\n\t\t\tpre_model_name: Name of pre-trained model from huggingface. See https://huggingface.co/\n\n\t\t\tpre_model_type: Type of pre-trained model.\n\t\t\t\tDefault: [`AutoModel`].\n\n\t\t\tlearning_rate: Maximum learning rate. Learning rate will warm up from ``0`` to ``learning_rate`` over\n\t\t\t\t``lr_warm_up`` training steps, and will then decay from ``learning_rate`` to ``0`` linearly over the remaining\n\t\t\t\t``1.0-lr_warm_up`` training steps.\n\n\t\t\tweight_decay: How much weight decay to apply in the AdamW optimizer.\n\t\t\t\tDefault: ``0.0``.\n\n\t\t\tlr_warm_up: The percent of training steps to warm up learning rate from ``0`` to ``learning_rate``.\n\t\t\t\tDefault: ``0.1``.\n\n\t\t\tload_pre_model: If ``False``, Model structure will load from pre_model_name, but weights will not be initialized.\n\t\t\t\tCuts down on model load time if you plan on loading your model from a checkpoint, as there is no reason to\n\t\t\t\tinitialize your model twice.\n\t\t\t\tDefault: ``True``.\n\n\t\t\ttorch_cache_dir: If provided, cache directory for loading models. Defaults to huggingface default.\n\t\t\t\tDefault: ``None``.\n\n\t\t\"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_relations", "=", "num_relations", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ke", "=", "ke", "\n", "self", ".", "infer", "=", "infer", "\n", "self", ".", "num_val_seeds", "=", "num_val_seeds", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "m_metric", "=", "m_metric", "\n", "self", ".", "num_threshold_steps", "=", "num_threshold_steps", "\n", "self", ".", "update_threshold", "=", "update_threshold", "\n", "\n", "self", ".", "ke_rel_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "hidden_size", ",", "\n", "out_features", "=", "self", ".", "ke", ".", "hidden_size", "\n", ")", "for", "_", "in", "range", "(", "self", ".", "num_relations", ")", "\n", "]", "\n", ")", "\n", "self", ".", "ke_entity_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "hidden_size", ",", "\n", "out_features", "=", "self", ".", "ke", ".", "hidden_size", "\n", ")", "\n", "self", ".", "f_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "\n", "p", "=", "self", ".", "hidden_dropout_prob", "\n", ")", "\n", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.setup": [[117, 133], ["super().setup", "misinfo.items", "kbi.KbiLanguageModel.train_dataloader", "pytorch_gleam.modeling.thresholds.MultiClassThresholdModule", "kbi.KbiLanguageModel.test_dataloader", "kbi.KbiLanguageModel.val_dataloader", "kbi.KbiLanguageModel.predict_dataloader", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.setup", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.train_dataloader", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.test_dataloader", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.val_dataloader", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.predict_dataloader"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "setup", "(", "stage", ")", "\n", "if", "stage", "==", "'fit'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "train_dataloader", "(", ")", "\n", "", "elif", "stage", "==", "'test'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", "[", "0", "]", "\n", "", "elif", "stage", "==", "'val'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "val_dataloader", "(", ")", "[", "0", "]", "\n", "", "elif", "stage", "==", "'predict'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "predict_dataloader", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown stage: {stage}'", ")", "\n", "", "misinfo", "=", "data_loader", ".", "dataset", ".", "misinfo", "\n", "for", "m_id", ",", "m", "in", "misinfo", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "m_id", "not", "in", "self", ".", "threshold", ":", "\n", "\t\t\t\t", "self", ".", "threshold", "[", "m_id", "]", "=", "MultiClassThresholdModule", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.infer_m_scores": [[134, 173], ["torch.stack", "len", "numpy.zeros", "infer", "torch.tensor", "torch.stack.append", "seed_labels.items", "len", "enumerate"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "infer_m_scores", "(", "infer", ",", "adj_list", ",", "stage_labels", ",", "stage", ",", "num_val_seeds", "=", "1", ")", ":", "\n", "# always use stage 0 (val) for seeds", "\n", "\t\t", "seed_labels", "=", "stage_labels", "[", "0", "]", "\n", "seed_examples", "=", "[", "\n", "(", "ex_id", ",", "label", ")", "for", "(", "ex_id", ",", "label", ")", "\n", "in", "seed_labels", ".", "items", "(", ")", "\n", "if", "label", "!=", "0", "\n", "]", "\n", "# if the stage is val then we have no test set, so pick", "\n", "# some number of seed examples from val and test on remaining val", "\n", "if", "stage", "==", "'val'", ":", "\n", "\t\t\t", "seed_examples", "=", "seed_examples", "[", ":", "num_val_seeds", "]", "\n", "# make sure adj list only has val labeled data", "\n", "adj_list", "=", "[", "\n", "(", "u_id", ",", "v_id", ",", "uv_scores", ")", "for", "(", "u_id", ",", "v_id", ",", "uv_scores", ")", "in", "adj_list", "\n", "if", "u_id", "in", "seed_labels", "and", "v_id", "in", "seed_labels", "\n", "]", "\n", "", "seed_examples", "=", "{", "\n", "ex_id", ":", "label", "for", "(", "ex_id", ",", "label", ")", "\n", "in", "seed_examples", "\n", "}", "\n", "if", "len", "(", "adj_list", ")", "==", "0", ":", "\n", "\t\t\t", "node_scores", "=", "np", ".", "zeros", "(", "[", "len", "(", "seed_labels", ")", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "node_idx_map", "=", "{", "node", ":", "idx", "for", "(", "idx", ",", "node", ")", "in", "enumerate", "(", "seed_labels", ")", "}", "\n", "", "else", ":", "\n", "\t\t\t", "node_scores", ",", "node_idx_map", "=", "infer", "(", "adj_list", ",", "seed_examples", ")", "\n", "", "if", "stage", "==", "'test'", ":", "\n", "\t\t\t", "eval_labels", "=", "stage_labels", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "eval_labels", "=", "stage_labels", "[", "0", "]", "\n", "", "scores", "=", "[", "]", "\n", "# make sure we pack example scores in proper order", "\n", "for", "ex_id", "in", "eval_labels", ":", "\n", "\t\t\t", "ex_idx", "=", "node_idx_map", "[", "ex_id", "]", "\n", "ex_scores", "=", "torch", ".", "tensor", "(", "node_scores", "[", "ex_idx", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "scores", ".", "append", "(", "ex_scores", ")", "\n", "", "scores", "=", "torch", ".", "stack", "(", "scores", ",", "dim", "=", "0", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.eval_epoch_end": [[174, 197], ["kbi.KbiLanguageModel.eval_triplet", "kbi.KbiLanguageModel.items", "kbi.KbiLanguageModel.threshold.cpu", "kbi.KbiLanguageModel.eval_infer", "infer_eval_results.items", "kbi.KbiLanguageModel.threshold.to", "kbi.KbiLanguageModel.log", "kbi.KbiLanguageModel.log"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.eval_triplet", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.eval_infer"], ["", "def", "eval_epoch_end", "(", "self", ",", "outputs", ",", "stage", ")", ":", "\n", "\t\t", "triplet_eval_outputs", ",", "infer_eval_outputs", "=", "outputs", "\n", "triplet_eval_results", "=", "self", ".", "eval_triplet", "(", "triplet_eval_outputs", ",", "stage", ")", "\n", "for", "val_name", ",", "val", "in", "triplet_eval_results", ".", "items", "(", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "val_name", ",", "val", ")", "\n", "\n", "", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "\n", "infer_eval_results", ",", "labels", ",", "preds", ",", "t_ids", ",", "m_ids", "=", "self", ".", "eval_infer", "(", "\n", "infer_eval_outputs", ",", "\n", "stage", ",", "\n", "self", ".", "infer", ",", "\n", "self", ".", "threshold", ",", "\n", "self", ".", "m_metric", ",", "\n", "self", ".", "metric", ",", "\n", "self", ".", "num_threshold_steps", ",", "\n", "self", ".", "update_threshold", ",", "\n", "self", ".", "num_val_seeds", "\n", ")", "\n", "for", "val_name", ",", "val", "in", "infer_eval_results", ".", "items", "(", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "val_name", ",", "val", ")", "\n", "\n", "", "self", ".", "threshold", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.eval_infer": [[198, 292], ["kbi.KbiLanguageModel.build_adj_list", "m_stage_labels.items", "torch.cat", "torch.cat", "metric", "m_metric", "zip", "eval_labels.items", "torch.tensor", "kbi.KbiLanguageModel.infer_m_scores", "m_threshold", "m_metric", "m_threshold.thresholds.item", "zip", "m_s_ids.extend", "m_s_m_ids.extend", "torch.cat.append", "torch.cat.append", "pytorch_gleam.modeling.thresholds.MultiClassThresholdModule", "len", "torch.tensor.append", "m_ex_ids.append", "m_ex_m_ids.append", "torch.min().item", "torch.max().item", "m_metric.best", "m_threshold.update_thresholds", "torch.min", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.build_adj_list", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.infer_m_scores", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.update_thresholds"], ["", "@", "staticmethod", "\n", "def", "eval_infer", "(", "\n", "infer_eval_outputs", ",", "stage", ",", "infer", ",", "threshold", ",", "m_metric", ",", "metric", ",", "\n", "num_threshold_steps", "=", "100", ",", "update_threshold", "=", "True", ",", "num_val_seeds", "=", "1", "\n", ")", ":", "\n", "\t\t", "results", "=", "{", "}", "\n", "# stage 0 is validation", "\n", "# stage 1 is test", "\n", "m_adj_lists", ",", "m_stage_labels", "=", "KbiLanguageModel", ".", "build_adj_list", "(", "infer_eval_outputs", ")", "\n", "\n", "for", "m_id", "in", "m_stage_labels", ":", "\n", "\t\t\t", "if", "m_id", "not", "in", "threshold", ":", "\n", "\t\t\t\t", "threshold", "[", "m_id", "]", "=", "MultiClassThresholdModule", "(", ")", "\n", "\n", "", "", "m_s_ids", "=", "[", "]", "\n", "m_s_m_ids", "=", "[", "]", "\n", "m_s_labels", "=", "[", "]", "\n", "m_s_preds", "=", "[", "]", "\n", "for", "m_id", ",", "stage_labels", "in", "m_stage_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m_adj_list", "=", "m_adj_lists", "[", "m_id", "]", "\n", "m_threshold", "=", "threshold", "[", "m_id", "]", "\n", "if", "len", "(", "m_adj_list", ")", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "", "m_ex_ids", "=", "[", "]", "\n", "m_ex_m_ids", "=", "[", "]", "\n", "m_ex_labels", "=", "[", "]", "\n", "if", "stage", "!=", "'val'", ":", "\n", "\t\t\t\t", "eval_labels", "=", "stage_labels", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "eval_labels", "=", "stage_labels", "[", "0", "]", "\n", "", "for", "ex_id", ",", "label", "in", "eval_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "m_ex_labels", ".", "append", "(", "label", ")", "\n", "m_ex_ids", ".", "append", "(", "ex_id", ")", "\n", "m_ex_m_ids", ".", "append", "(", "m_id", ")", "\n", "", "m_ex_labels", "=", "torch", ".", "tensor", "(", "m_ex_labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "m_ex_scores", "=", "KbiLanguageModel", ".", "infer_m_scores", "(", "\n", "infer", ",", "m_adj_list", ",", "stage_labels", ",", "stage", ",", "num_val_seeds", ")", "\n", "if", "update_threshold", ":", "\n", "\t\t\t\t", "m_min_score", "=", "torch", ".", "min", "(", "m_ex_scores", ")", ".", "item", "(", ")", "\n", "m_max_score", "=", "torch", ".", "max", "(", "m_ex_scores", ")", ".", "item", "(", ")", "\n", "# check 100 values between min and max", "\n", "if", "m_min_score", "==", "m_max_score", ":", "\n", "\t\t\t\t\t", "m_max_score", "+=", "1", "\n", "", "m_delta", "=", "(", "m_max_score", "-", "m_min_score", ")", "/", "num_threshold_steps", "\n", "max_threshold", ",", "max_metrics", "=", "m_metric", ".", "best", "(", "\n", "m_ex_labels", ",", "\n", "m_ex_scores", ",", "\n", "m_threshold", ",", "\n", "threshold_min", "=", "m_min_score", ",", "\n", "threshold_max", "=", "m_max_score", ",", "\n", "threshold_delta", "=", "m_delta", ",", "\n", ")", "\n", "m_threshold", ".", "update_thresholds", "(", "max_threshold", ")", "\n", "\n", "", "m_ex_preds", "=", "m_threshold", "(", "m_ex_scores", ")", "\n", "m_f1", ",", "m_p", ",", "m_r", ",", "m_cls_f1", ",", "m_cls_p", ",", "m_cls_r", ",", "m_cls_indices", "=", "m_metric", "(", "\n", "m_ex_labels", ",", "\n", "m_ex_preds", "\n", ")", "\n", "results", "[", "f'{stage}_{m_id}_micro_f1'", "]", "=", "m_f1", "\n", "results", "[", "f'{stage}_{m_id}_micro_p'", "]", "=", "m_p", "\n", "results", "[", "f'{stage}_{m_id}_micro_r'", "]", "=", "m_r", "\n", "results", "[", "f'{stage}_{m_id}_threshold'", "]", "=", "m_threshold", ".", "thresholds", ".", "item", "(", ")", "\n", "for", "cls_index", ",", "c_f1", ",", "c_p", ",", "c_r", "in", "zip", "(", "m_cls_indices", ",", "m_cls_f1", ",", "m_cls_p", ",", "m_cls_r", ")", ":", "\n", "\t\t\t\t", "results", "[", "f'{stage}_{m_id}_{cls_index}_f1'", "]", "=", "c_f1", "\n", "results", "[", "f'{stage}_{m_id}_{cls_index}_p'", "]", "=", "c_p", "\n", "results", "[", "f'{stage}_{m_id}_{cls_index}_r'", "]", "=", "c_r", "\n", "", "m_s_ids", ".", "extend", "(", "m_ex_ids", ")", "\n", "m_s_m_ids", ".", "extend", "(", "m_ex_m_ids", ")", "\n", "m_s_labels", ".", "append", "(", "m_ex_labels", ")", "\n", "m_s_preds", ".", "append", "(", "m_ex_preds", ")", "\n", "\n", "", "m_s_labels", "=", "torch", ".", "cat", "(", "m_s_labels", ",", "dim", "=", "0", ")", "\n", "m_s_preds", "=", "torch", ".", "cat", "(", "m_s_preds", ",", "dim", "=", "0", ")", "\n", "f1", ",", "p", ",", "r", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ",", "cls_indices", "=", "metric", "(", "\n", "m_s_labels", ",", "\n", "m_s_preds", "\n", ")", "\n", "micro_f1", ",", "micro_p", ",", "micro_r", ",", "_", ",", "_", ",", "_", ",", "_", "=", "m_metric", "(", "\n", "m_s_labels", ",", "\n", "m_s_preds", "\n", ")", "\n", "results", "[", "f'{stage}_f1'", "]", "=", "f1", "\n", "results", "[", "f'{stage}_p'", "]", "=", "p", "\n", "results", "[", "f'{stage}_r'", "]", "=", "r", "\n", "results", "[", "f'{stage}_micro_f1'", "]", "=", "micro_f1", "\n", "results", "[", "f'{stage}_micro_p'", "]", "=", "micro_p", "\n", "results", "[", "f'{stage}_micro_r'", "]", "=", "micro_r", "\n", "for", "cls_index", ",", "c_f1", ",", "c_p", ",", "c_r", "in", "zip", "(", "cls_indices", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ")", ":", "\n", "\t\t\t", "results", "[", "f'{stage}_{cls_index}_f1'", "]", "=", "c_f1", "\n", "results", "[", "f'{stage}_{cls_index}_p'", "]", "=", "c_p", "\n", "results", "[", "f'{stage}_{cls_index}_r'", "]", "=", "c_r", "\n", "\n", "", "return", "results", ",", "m_s_labels", ",", "m_s_preds", ",", "m_s_ids", ",", "m_s_m_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.eval_triplet": [[293, 302], ["torch.cat().mean", "torch.cat().mean", "torch.cat", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "eval_triplet", "(", "triplet_eval_outputs", ",", "stage", ")", ":", "\n", "\t\t", "loss", "=", "torch", ".", "cat", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "triplet_eval_outputs", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", "\n", "accuracy", "=", "torch", ".", "cat", "(", "[", "x", "[", "'accuracy'", "]", "for", "x", "in", "triplet_eval_outputs", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", "\n", "results", "=", "{", "\n", "f'{stage}_loss'", ":", "loss", ",", "\n", "f'{stage}_accuracy'", ":", "accuracy", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.eval_step": [[303, 314], ["kbi.KbiLanguageModel.triplet_step", "kbi.KbiLanguageModel.predict_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.triplet_step", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.predict_step"], ["", "def", "eval_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "if", "dataloader_idx", "is", "None", "or", "dataloader_idx", "==", "0", ":", "\n", "\t\t\t", "loss", ",", "accuracy", "=", "self", ".", "triplet_step", "(", "batch", ")", "\n", "result", "=", "{", "\n", "'loss'", ":", "loss", ",", "\n", "'accuracy'", ":", "accuracy", ",", "\n", "}", "\n", "", "else", ":", "\n", "\t\t\t", "result", "=", "self", ".", "predict_step", "(", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.forward": [[315, 363], ["batch[].view", "batch[].view", "kbi.KbiLanguageModel.lm_step", "kbi.KbiLanguageModel.f_dropout", "lm_output.view.view.view", "lm_output[].reshape", "kbi.KbiLanguageModel.ke_entity_layer", "kbi.KbiLanguageModel.ke", "e_embs.view.view.view", "torch.stack", "r_projections.view.view.view", "kbi.KbiLanguageModel.ke", "r_embs.view.view.view", "batch[].view", "r_layer", "r_projections.view.view.append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "num_examples", "=", "batch", "[", "'num_examples'", "]", "\n", "num_sequences_per_example", "=", "batch", "[", "'num_sequences_per_example'", "]", "\n", "num_entities", "=", "num_sequences_per_example", "-", "1", "\n", "pad_seq_len", "=", "batch", "[", "'pad_seq_len'", "]", "\n", "\n", "# [bsize, num_seq, seq_len] -> [bsize * num_seq, seq_len]", "\n", "input_ids", "=", "batch", "[", "'input_ids'", "]", ".", "view", "(", "num_examples", "*", "num_sequences_per_example", ",", "pad_seq_len", ")", "\n", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", ".", "view", "(", "num_examples", "*", "num_sequences_per_example", ",", "pad_seq_len", ")", "\n", "if", "'token_type_ids'", "in", "batch", ":", "\n", "\t\t\t", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", ".", "view", "(", "num_examples", "*", "num_sequences_per_example", ",", "pad_seq_len", ")", "\n", "", "else", ":", "\n", "\t\t\t", "token_type_ids", "=", "None", "\n", "# [bsize * num_seq, seq_len, hidden_size]", "\n", "", "contextualized_embeddings", "=", "self", ".", "lm_step", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", "\n", ")", "\n", "# [bsize * num_seq, hidden_size]", "\n", "lm_output", "=", "contextualized_embeddings", "[", ":", ",", "0", "]", "\n", "lm_output", "=", "self", ".", "f_dropout", "(", "lm_output", ")", "\n", "lm_output", "=", "lm_output", ".", "view", "(", "num_examples", ",", "num_sequences_per_example", ",", "self", ".", "hidden_size", ")", "\n", "# [bsize, hidden_size]", "\n", "r_lm_output", "=", "lm_output", "[", ":", ",", "0", "]", "\n", "# [bsize * num_entities, hidden_size]", "\n", "e_lm_output", "=", "lm_output", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "num_examples", "*", "num_entities", ",", "self", ".", "hidden_size", ")", "\n", "e_proj", "=", "self", ".", "ke_entity_layer", "(", "e_lm_output", ")", "\n", "e_embs", "=", "self", ".", "ke", "(", "e_proj", ",", "'entity'", ")", "\n", "# [bsize, num_entities, emb_size]", "\n", "e_embs", "=", "e_embs", ".", "view", "(", "num_examples", ",", "num_entities", ",", "e_embs", ".", "shape", "[", "-", "1", "]", ")", "\n", "# num_samples = batch['pos_samples'] + batch['neg_samples']", "\n", "# [bsize, num_samples, num_relations]", "\n", "# relation_mask = batch['relation_mask']", "\n", "r_projections", "=", "[", "]", "\n", "for", "r_layer", "in", "self", ".", "ke_rel_layers", ":", "\n", "\t\t\t", "r_proj", "=", "r_layer", "(", "r_lm_output", ")", "\n", "r_projections", ".", "append", "(", "r_proj", ")", "\n", "# [bsize, num_relations, ke_hidden_size]", "\n", "", "r_projections", "=", "torch", ".", "stack", "(", "r_projections", ",", "dim", "=", "1", ")", "\n", "# [bsize * num_relations, ke_hidden_size]", "\n", "r_projections", "=", "r_projections", ".", "view", "(", "num_examples", "*", "self", ".", "num_relations", ",", "r_projections", ".", "shape", "[", "-", "1", "]", ")", "\n", "# [bsize * num_relations, ke_emb_size]", "\n", "r_embs", "=", "self", ".", "ke", "(", "r_projections", ",", "'rel'", ")", "\n", "# [bsize, num_relations, ke_emb_size]", "\n", "r_embs", "=", "r_embs", ".", "view", "(", "num_examples", ",", "self", ".", "num_relations", ",", "r_embs", ".", "shape", "[", "-", "1", "]", ")", "\n", "# [bsize, num_entities, emb_size]", "\n", "return", "e_embs", ",", "r_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.split_embeddings": [[364, 378], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "split_embeddings", "(", "embs", ",", "batch", ")", ":", "\n", "\t\t", "t_ex_embs", "=", "embs", "[", ":", ",", "0", "]", "\n", "pos_samples", "=", "batch", "[", "'pos_samples'", "]", "\n", "if", "pos_samples", ">", "0", ":", "\n", "\t\t\t", "pos_embs", "=", "embs", "[", ":", ",", "1", ":", "1", "+", "pos_samples", "]", "\n", "", "else", ":", "\n", "\t\t\t", "pos_embs", "=", "None", "\n", "", "neg_samples", "=", "batch", "[", "'neg_samples'", "]", "\n", "if", "neg_samples", ">", "0", ":", "\n", "\t\t\t", "neg_embs", "=", "embs", "[", ":", ",", "1", "+", "pos_samples", ":", "1", "+", "pos_samples", "+", "neg_samples", "]", "\n", "", "else", ":", "\n", "\t\t\t", "neg_embs", "=", "None", "\n", "", "return", "t_ex_embs", ",", "pos_embs", ",", "neg_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.predict_energy": [[379, 400], ["m_embs.unsqueeze.unsqueeze.unsqueeze", "batch[].unsqueeze", "kbi.KbiLanguageModel.split_embeddings", "t_ex_embs.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "pos_embs.unsqueeze.unsqueeze.unsqueeze", "batch[].unsqueeze().unsqueeze", "kbi.KbiLanguageModel._energy", "t_ex_embs.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "batch[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.split_embeddings", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel._energy"], ["", "def", "predict_energy", "(", "self", ",", "e_embs", ",", "m_embs", ",", "batch", ")", ":", "\n", "# convert m_embs to both relation types", "\n", "# [bsize, 1, num_relations, emb_size]", "\n", "\t\t", "m_embs", "=", "m_embs", ".", "unsqueeze", "(", "dim", "=", "-", "3", ")", "\n", "# [bsize, pos_samples, num_relations, 1]", "\n", "rel_mask", "=", "batch", "[", "'relation_mask'", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "# [bsize, pos_samples, num_relations, emb_size]", "\n", "m_embs", "=", "m_embs", "*", "rel_mask", "\n", "\n", "# t_ex_embs: [bsize, emb_size],", "\n", "# pos_embs: [bsize, pos_samples, emb_size]", "\n", "t_ex_embs", ",", "pos_embs", ",", "_", "=", "self", ".", "split_embeddings", "(", "e_embs", ",", "batch", ")", "\n", "# [bsize, 1, 1, emb_size]", "\n", "t_ex_embs", "=", "t_ex_embs", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "# [bsize, pos_samples, 1, emb_size]", "\n", "pos_embs", "=", "pos_embs", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "# [bsize, 1, 1, 2]", "\n", "d_mask", "=", "batch", "[", "'direction_mask'", "]", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "# [bsize, pos_samples, num_relations]", "\n", "pos_energy", "=", "self", ".", "_energy", "(", "t_ex_embs", ",", "m_embs", ",", "pos_embs", ",", "d_mask", ")", "\n", "return", "pos_energy", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.triplet_energy": [[401, 434], ["m_embs.sum.sum.unsqueeze", "batch[].unsqueeze", "m_embs.sum.sum.sum", "kbi.KbiLanguageModel.split_embeddings", "t_ex_embs.unsqueeze.unsqueeze.unsqueeze", "batch[].unsqueeze", "kbi.KbiLanguageModel._energy", "kbi.KbiLanguageModel._energy"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.split_embeddings", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel._energy", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel._energy"], ["", "def", "triplet_energy", "(", "self", ",", "e_embs", ",", "m_embs", ",", "batch", ")", ":", "\n", "# convert m_embs to only one relation type", "\n", "# [bsize, 1, num_relations, emb_size]", "\n", "\t\t", "m_embs", "=", "m_embs", ".", "unsqueeze", "(", "dim", "=", "-", "3", ")", "\n", "# [bsize, pos_samples + neg_samples, num_relations, 1]", "\n", "rel_mask", "=", "batch", "[", "'relation_mask'", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "# [bsize, pos_samples + neg_samples, num_relations, emb_size]", "\n", "m_embs", "=", "m_embs", "*", "rel_mask", "\n", "# using the rel_mask we are able to sum over m_embs that are zero'd", "\n", "m_embs", "=", "m_embs", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "\n", "# t_ex_embs: [bsize, emb_size],", "\n", "# pos_embs: [bsize, pos_samples, emb_size],", "\n", "# neg_embs: [bsize, pos_samples, emb_size],", "\n", "t_ex_embs", ",", "pos_embs", ",", "neg_embs", "=", "self", ".", "split_embeddings", "(", "e_embs", ",", "batch", ")", "\n", "# [bsize, 1, emb_size]", "\n", "t_ex_embs", "=", "t_ex_embs", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "pos_samples", "=", "batch", "[", "'pos_samples'", "]", "\n", "neg_samples", "=", "batch", "[", "'neg_samples'", "]", "\n", "# [bsize, pos_samples + neg_samples, emb_size]", "\n", "# [bsize, pos_samples, emb_size]", "\n", "pos_m_embs", "=", "m_embs", "[", "...", ",", ":", "pos_samples", ",", ":", "]", "\n", "# [bsize, neg_samples, emb_size]", "\n", "neg_m_embs", "=", "m_embs", "[", "...", ",", "pos_samples", ":", "pos_samples", "+", "neg_samples", ",", ":", "]", "\n", "\n", "# [bsize, 1, 2]", "\n", "d_mask", "=", "batch", "[", "'direction_mask'", "]", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "# [bsize, pos_samples]", "\n", "pos_energy", "=", "self", ".", "_energy", "(", "t_ex_embs", ",", "pos_m_embs", ",", "pos_embs", ",", "d_mask", ")", "\n", "# [bsize, neg_samples]", "\n", "neg_energy", "=", "self", ".", "_energy", "(", "t_ex_embs", ",", "neg_m_embs", ",", "neg_embs", ",", "d_mask", ")", "\n", "\n", "return", "pos_energy", ",", "neg_energy", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel._energy": [[435, 449], ["kbi.KbiLanguageModel.ke.energy", "kbi.KbiLanguageModel.ke.energy", "torch.stack", "direction_mask.sum"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.energy", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.energy"], ["", "def", "_energy", "(", "self", ",", "t_embs", ",", "m_embs", ",", "e_embs", ",", "direction_mask", ")", ":", "\n", "# [bsize, pos_samples]", "\n", "\t\t", "forward_energy", "=", "self", ".", "ke", ".", "energy", "(", "t_embs", ",", "m_embs", ",", "e_embs", ")", "\n", "# [bsize, pos_samples]", "\n", "backward_energy", "=", "self", ".", "ke", ".", "energy", "(", "e_embs", ",", "m_embs", ",", "t_embs", ")", "\n", "# [bsize, pos_samples, 2]", "\n", "tme_energy", "=", "torch", ".", "stack", "(", "[", "forward_energy", ",", "backward_energy", "]", ",", "dim", "=", "-", "1", ")", "\n", "# [bsize, 1]", "\n", "d_sum", "=", "direction_mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "# [bsize, pos_samples, 2] x [bsize, 1, 2] sum", "\n", "# -> [bsize, pos_samples] / [bsize, 1]", "\n", "# [bsize, pos_samples]", "\n", "tme_energy", "=", "(", "tme_energy", "*", "direction_mask", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "d_sum", "\n", "return", "tme_energy", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.loss": [[450, 453], ["kbi.KbiLanguageModel.ke.loss"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss"], ["", "def", "loss", "(", "self", ",", "pos_energy", ",", "neg_energy", ")", ":", "\n", "\t\t", "loss", ",", "accuracy", "=", "self", ".", "ke", ".", "loss", "(", "pos_energy", ",", "neg_energy", ")", "\n", "return", "loss", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.triplet_step": [[454, 459], ["kbi.KbiLanguageModel.", "kbi.KbiLanguageModel.triplet_energy", "kbi.KbiLanguageModel.loss"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.triplet_energy", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss"], ["", "def", "triplet_step", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "e_embs", ",", "r_embs", "=", "self", "(", "batch", ")", "\n", "pos_energy", ",", "neg_energy", "=", "self", ".", "triplet_energy", "(", "e_embs", ",", "r_embs", ",", "batch", ")", "\n", "loss", ",", "accuracy", "=", "self", ".", "loss", "(", "pos_energy", ",", "neg_energy", ")", "\n", "return", "loss", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.training_step": [[460, 470], ["kbi.KbiLanguageModel.triplet_step", "accuracy.mean.mean.mean", "loss.mean.mean.mean", "kbi.KbiLanguageModel.log", "kbi.KbiLanguageModel.log"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.triplet_step"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\t\t", "loss", ",", "accuracy", "=", "self", ".", "triplet_step", "(", "batch", ")", "\n", "accuracy", "=", "accuracy", ".", "mean", "(", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "'train_loss'", ",", "loss", ")", "\n", "self", ".", "log", "(", "'train_accuracy'", ",", "accuracy", ")", "\n", "result", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.predict_step": [[471, 490], ["kbi.KbiLanguageModel.", "kbi.KbiLanguageModel.predict_energy"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.predict_energy"], ["", "def", "predict_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "e_embs", ",", "r_embs", "=", "self", "(", "batch", ")", "\n", "# [bsize, num_pairs, num_relations]", "\n", "pair_rel_energy", "=", "self", ".", "predict_energy", "(", "e_embs", ",", "r_embs", ",", "batch", ")", "\n", "results", "=", "{", "\n", "# [bsize]", "\n", "'ids'", ":", "batch", "[", "'ids'", "]", ",", "\n", "# [bsize]", "\n", "'m_ids'", ":", "batch", "[", "'m_ids'", "]", ",", "\n", "# [bsize, num_pairs]", "\n", "'p_ids'", ":", "batch", "[", "'p_ids'", "]", ",", "\n", "# [bsize, num_pairs+1]", "\n", "'labels'", ":", "batch", "[", "'labels'", "]", ",", "\n", "# [bsize, num_pairs+1]", "\n", "'stages'", ":", "batch", "[", "'stages'", "]", ",", "\n", "# [bsize, num_pairs, num_relations]", "\n", "'energies'", ":", "pair_rel_energy", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.flatten": [[491, 494], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "flatten", "(", "l", ")", ":", "\n", "\t\t", "return", "[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.build_adj_list": [[495, 539], ["kbi.KbiLanguageModel.flatten", "kbi.KbiLanguageModel.flatten", "kbi.KbiLanguageModel.flatten", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "collections.defaultdict", "collections.defaultdict", "range", "len", "int", "range", "torch.cat", "torch.cat", "torch.cat", "collections.defaultdict", "len", "int", "m_adj_list[].append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten"], ["", "@", "staticmethod", "\n", "def", "build_adj_list", "(", "outputs", ")", ":", "\n", "# [count]", "\n", "\t\t", "t_ids", "=", "KbiLanguageModel", ".", "flatten", "(", "[", "x", "[", "'ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count]", "\n", "m_ids", "=", "KbiLanguageModel", ".", "flatten", "(", "[", "x", "[", "'m_ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count]", "\n", "p_ids", "=", "KbiLanguageModel", ".", "flatten", "(", "[", "x", "[", "'p_ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count, 2]", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "'labels'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "stages", "=", "torch", ".", "cat", "(", "[", "x", "[", "'stages'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "# [count]", "\n", "t_label", "=", "labels", "[", ":", ",", "0", "]", "\n", "# [count]", "\n", "t_stage", "=", "stages", "[", ":", ",", "0", "]", "\n", "# [count, 1]", "\n", "p_labels", "=", "labels", "[", ":", ",", "1", ":", "]", "\n", "# [count, 1]", "\n", "p_stage", "=", "stages", "[", ":", ",", "1", ":", "]", "\n", "\n", "# [count, 1, num_relations]", "\n", "t_energies", "=", "torch", ".", "cat", "(", "[", "x", "[", "'energies'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "\n", "m_adj_list", "=", "defaultdict", "(", "list", ")", "\n", "m_labels", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "dict", ")", ")", "\n", "for", "ex_idx", "in", "range", "(", "len", "(", "t_ids", ")", ")", ":", "\n", "\t\t\t", "ex_t_id", "=", "t_ids", "[", "ex_idx", "]", "\n", "ex_m_id", "=", "m_ids", "[", "ex_idx", "]", "\n", "ex_p_ids", "=", "[", "p_ids", "[", "ex_idx", "]", "]", "\n", "ex_t_label", "=", "t_label", "[", "ex_idx", "]", "\n", "ex_t_stage", "=", "int", "(", "t_stage", "[", "ex_idx", "]", ")", "\n", "ex_p_labels", "=", "p_labels", "[", "ex_idx", "]", "\n", "ex_p_stage", "=", "p_stage", "[", "ex_idx", "]", "\n", "ex_t_energies", "=", "t_energies", "[", "ex_idx", "]", "\n", "m_labels", "[", "ex_m_id", "]", "[", "ex_t_stage", "]", "[", "ex_t_id", "]", "=", "ex_t_label", "\n", "for", "p_idx", "in", "range", "(", "len", "(", "ex_p_ids", ")", ")", ":", "\n", "\t\t\t\t", "ex_p_id", "=", "ex_p_ids", "[", "p_idx", "]", "\n", "ex_p_label", "=", "ex_p_labels", "[", "p_idx", "]", "\n", "ex_p_stage", "=", "int", "(", "ex_p_stage", "[", "p_idx", "]", ")", "\n", "ex_tmp_energy", "=", "ex_t_energies", "[", "p_idx", "]", "\n", "m_adj_list", "[", "ex_m_id", "]", ".", "append", "(", "(", "ex_t_id", ",", "ex_p_id", ",", "ex_tmp_energy", ")", ")", "\n", "m_labels", "[", "ex_m_id", "]", "[", "ex_p_stage", "]", "[", "ex_p_id", "]", "=", "ex_p_label", "\n", "\n", "", "", "return", "m_adj_list", ",", "m_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.kbi.KbiLanguageModel.build_stage_labels": [[540, 552], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "m_labels.items", "m_t_labels.items", "stage_labels.items", "m_t_ids[].append", "m_m_ids[].append", "m_s_labels[].append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "build_stage_labels", "(", "m_labels", ")", ":", "\n", "\t\t", "m_s_labels", "=", "defaultdict", "(", "list", ")", "\n", "m_m_ids", "=", "defaultdict", "(", "list", ")", "\n", "m_t_ids", "=", "defaultdict", "(", "list", ")", "\n", "for", "m_id", ",", "m_t_labels", "in", "m_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "stage_idx", ",", "stage_labels", "in", "m_t_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "for", "m_t_id", ",", "m_t_label", "in", "stage_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t\t\t", "m_t_ids", "[", "stage_idx", "]", ".", "append", "(", "m_t_id", ")", "\n", "m_m_ids", "[", "stage_idx", "]", ".", "append", "(", "m_id", ")", "\n", "m_s_labels", "[", "stage_idx", "]", ".", "append", "(", "m_t_label", ")", "\n", "", "", "", "return", "m_s_labels", ",", "m_m_ids", ",", "m_t_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_misinfo.NliMisinfoLanguageModel.__init__": [[11, 71], ["pytorch_gleam.modeling.models.base_models.BaseLanguageModelForSequenceClassification.__init__", "torch.nn.CrossEntropyLoss", "torch.nn.Softmax", "pytorch_gleam.modeling.thresholds.multi_class.MultiClassThresholdModule", "pytorch_gleam.modeling.metrics.multi_class_f1.F1PRMultiClassMetric"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ":", "int", "=", "3", ",", "\n", "metric", ":", "str", "=", "'f1'", ",", "\n", "metric_mode", ":", "str", "=", "'macro'", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tMulti-Class Language Model for pre-trained sequence classification.\n\n\t\tArgs:\n\n\t\t\tnum_classes: Number of different classes, such as \"Accept\", \"Reject\", and \"No Stance\".\n\t\t\t\tDefault: ``3``.\n\n\t\t\tmetric_mode: \"macro\" or \"micro\" f1 score to use for evaluation.\n\t\t\t\tDefault: ``macro``.\n\n\t\t\tmetric: Metric to use for evaluation. TODO currently only ``f1`` is available.\n\t\t\t\tDefault: ``f1``.\n\n\t\t\tpre_model_name: Name of pre-trained model from huggingface. See https://huggingface.co/\n\n\t\t\tpre_model_type: Type of pre-trained model.\n\t\t\t\tDefault: [`AutoModel`].\n\n\t\t\tlearning_rate: Maximum learning rate. Learning rate will warm up from ``0`` to ``learning_rate`` over\n\t\t\t\t``lr_warm_up`` training steps, and will then decay from ``learning_rate`` to ``0`` linearly over the remaining\n\t\t\t\t``1.0-lr_warm_up`` training steps.\n\n\t\t\tweight_decay: How much weight decay to apply in the AdamW optimizer.\n\t\t\t\tDefault: ``0.0``.\n\n\t\t\tlr_warm_up: The percent of training steps to warm up learning rate from ``0`` to ``learning_rate``.\n\t\t\t\tDefault: ``0.1``.\n\n\t\t\tload_pre_model: If ``False``, Model structure will load from pre_model_name, but weights will not be initialized.\n\t\t\t\tCuts down on model load time if you plan on loading your model from a checkpoint, as there is no reason to\n\t\t\t\tinitialize your model twice.\n\t\t\t\tDefault: ``True``.\n\n\t\t\ttorch_cache_dir: If provided, cache directory for loading models. Defaults to huggingface default.\n\t\t\t\tDefault: ``None``.\n\n\t\t\"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "reduction", "=", "'none'", "\n", ")", "\n", "self", ".", "score_func", "=", "torch", ".", "nn", ".", "Softmax", "(", "\n", "dim", "=", "-", "1", "\n", ")", "\n", "self", ".", "threshold", "=", "MultiClassThresholdModule", "(", ")", "\n", "# TODO select based on metric", "\n", "self", ".", "metric", "=", "F1PRMultiClassMetric", "(", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "mode", "=", "metric_mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_misinfo.NliMisinfoLanguageModel.forward": [[73, 84], ["nli_misinfo.NliMisinfoLanguageModel.lm_step"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\t\t", "if", "'token_type_ids'", "in", "batch", ":", "\n", "\t\t\t", "token_type_ids", "=", "batch", "[", "'token_type_ids'", "]", "\n", "", "else", ":", "\n", "\t\t\t", "token_type_ids", "=", "None", "\n", "", "logits", "=", "self", ".", "lm_step", "(", "\n", "input_ids", "=", "batch", "[", "'input_ids'", "]", ",", "\n", "attention_mask", "=", "batch", "[", "'attention_mask'", "]", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_misinfo.NliMisinfoLanguageModel.predict_step": [[85, 97], ["nli_misinfo.NliMisinfoLanguageModel.", "nli_misinfo.NliMisinfoLanguageModel.score_func", "nli_misinfo.NliMisinfoLanguageModel.threshold"], "methods", ["None"], ["", "def", "predict_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "batch_logits", "=", "self", "(", "batch", ")", "\n", "batch_scores", "=", "self", ".", "score_func", "(", "batch_logits", ")", "\n", "batch_preds", "=", "self", ".", "threshold", "(", "batch_scores", ")", "\n", "batch_ids", "=", "batch", "[", "'ids'", "]", "\n", "results", "=", "{", "\n", "'ids'", ":", "batch_ids", ",", "\n", "'logits'", ":", "batch_logits", ",", "\n", "'scores'", ":", "batch_scores", ",", "\n", "'preds'", ":", "batch_preds", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_misinfo.NliMisinfoLanguageModel.eval_epoch_end": [[98, 132], ["torch.cat().mean", "torch.cat", "torch.cat", "scores.cpu.cpu.cpu", "labels.cpu.cpu.cpu", "nli_misinfo.NliMisinfoLanguageModel.threshold.cpu", "nli_misinfo.NliMisinfoLanguageModel.threshold", "nli_misinfo.NliMisinfoLanguageModel.metric", "nli_misinfo.NliMisinfoLanguageModel.log", "nli_misinfo.NliMisinfoLanguageModel.log", "nli_misinfo.NliMisinfoLanguageModel.log", "nli_misinfo.NliMisinfoLanguageModel.log", "enumerate", "zip", "nli_misinfo.NliMisinfoLanguageModel.threshold.to", "nli_misinfo.NliMisinfoLanguageModel.metric.best", "nli_misinfo.NliMisinfoLanguageModel.threshold.update_thresholds", "nli_misinfo.NliMisinfoLanguageModel.log", "nli_misinfo.NliMisinfoLanguageModel.log", "nli_misinfo.NliMisinfoLanguageModel.log", "nli_misinfo.NliMisinfoLanguageModel.log", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.update_thresholds"], ["", "def", "eval_epoch_end", "(", "self", ",", "outputs", ",", "stage", ")", ":", "\n", "\t\t", "loss", "=", "torch", ".", "cat", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "x", "[", "'scores'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "'labels'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", "\n", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "\n", "if", "stage", "==", "'val'", ":", "\n", "# select max f1 threshold", "\n", "\t\t\t", "max_threshold", ",", "max_metrics", "=", "self", ".", "metric", ".", "best", "(", "\n", "labels", ",", "\n", "scores", ",", "\n", "self", ".", "threshold", "\n", ")", "\n", "self", ".", "threshold", ".", "update_thresholds", "(", "max_threshold", ")", "\n", "", "preds", "=", "self", ".", "threshold", "(", "scores", ")", "\n", "\n", "f1", ",", "p", ",", "r", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ",", "cls_indices", "=", "self", ".", "metric", "(", "\n", "labels", ",", "\n", "preds", "\n", ")", "\n", "self", ".", "log", "(", "f'{stage}_loss'", ",", "loss", ")", "\n", "self", ".", "log", "(", "f'{stage}_f1'", ",", "f1", ")", "\n", "self", ".", "log", "(", "f'{stage}_p'", ",", "p", ")", "\n", "self", ".", "log", "(", "f'{stage}_r'", ",", "r", ")", "\n", "for", "t_idx", ",", "threshold", "in", "enumerate", "(", "self", ".", "threshold", ".", "thresholds", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "f'{stage}_threshold_{t_idx}'", ",", "threshold", ")", "\n", "", "for", "cls_index", ",", "c_f1", ",", "c_p", ",", "c_r", "in", "zip", "(", "cls_indices", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "f'{stage}_{cls_index}_f1'", ",", "c_f1", ")", "\n", "self", ".", "log", "(", "f'{stage}_{cls_index}_p'", ",", "c_p", ")", "\n", "self", ".", "log", "(", "f'{stage}_{cls_index}_r'", ",", "c_r", ")", "\n", "\n", "", "self", ".", "threshold", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_misinfo.NliMisinfoLanguageModel.training_step": [[133, 146], ["nli_misinfo.NliMisinfoLanguageModel.", "nli_misinfo.NliMisinfoLanguageModel.criterion", "nli_misinfo.NliMisinfoLanguageModel.mean", "nli_misinfo.NliMisinfoLanguageModel.log"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\t\t", "batch_logits", "=", "self", "(", "batch", ")", "\n", "batch_labels", "=", "batch", "[", "'labels'", "]", "\n", "batch_loss", "=", "self", ".", "criterion", "(", "\n", "batch_logits", ",", "\n", "batch_labels", "\n", ")", "\n", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "'train_loss'", ",", "loss", ")", "\n", "result", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.nli_misinfo.NliMisinfoLanguageModel.eval_step": [[147, 156], ["nli_misinfo.NliMisinfoLanguageModel.predict_step", "nli_misinfo.NliMisinfoLanguageModel.criterion"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.predict_step"], ["", "def", "eval_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "\t\t", "results", "=", "self", ".", "predict_step", "(", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "\n", "results", "[", "'logits'", "]", ",", "\n", "batch", "[", "'labels'", "]", "\n", ")", "\n", "results", "[", "'loss'", "]", "=", "loss", "\n", "results", "[", "'labels'", "]", "=", "batch", "[", "'labels'", "]", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.__init__": [[11, 75], ["pytorch_gleam.modeling.models.base_models.BaseLanguageModel.__init__", "torch.nn.Linear", "torch.nn.CrossEntropyLoss", "torch.nn.Softmax", "pytorch_gleam.modeling.thresholds.multi_class.MultiClassThresholdModule", "pytorch_gleam.modeling.metrics.multi_class_f1.F1PRMultiClassMetric"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["# zero class is idx 0", "\n", "# pos classes is idx 1, ...", "\n", "\t\t", "pos_scores", "=", "scores", "[", "...", ",", "1", ":", "]", "\n", "# filter out non-threshold classes", "\n", "pos_above", "=", "pos_scores", ".", "gt", "(", "thresholds", ")", ".", "float", "(", ")", "\n", "# [bsize, num_labels-1]", "\n", "pos_scores", "=", "pos_scores", "*", "pos_above", "\n", "# 1 if any are above threshold, 0 if none are above threshold", "\n", "# [bsize]", "\n", "pos_any_above", "=", "(", "pos_above", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "gt", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "# if none are above threshold then our prediction will be class 0, otherwise it will be", "\n", "# between the classes which have scores above the threshold", "\n", "# [bsize]", "\n", "# we add one to the class id to account for the [:, 1:] filtering of only positive scores", "\n", "pos_predictions", "=", "(", "pos_scores", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "+", "1", ")", "\n", "# [bsize]", "\n", "predictions", "=", "pos_predictions", "*", "pos_any_above", "\n", "return", "predictions", "\n", "\n", "\n", "", "", "class", "MultiClassCallableThresholdModule", "(", "MultiClassThresholdModule", ")", ":", "\n", "\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "predict", "(", "self", ",", "scores", ",", "thresholds", ")", ":", "\n", "\t\t", "predictions", "=", "scores", "(", "thresholds", ")", "\n", "return", "predictions", "\n", "\n", "\n", "", "", "class", "MultiClassMultiLabelCallableThresholdModule", "(", "MultiClassCallableThresholdModule", ",", "nn", ".", "ModuleDict", ")", ":", "\n", "\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "property", "\n", "def", "thresholds", "(", "self", ")", ":", "\n", "\t\t", "return", "[", "x", ".", "thresholds", "for", "x", "in", "self", ".", "values", "(", ")", "]", "\n", "\n", "\n", "", "", "class", "MultiClassMultiLabelThresholdModule", "(", "MultiClassThresholdModule", ",", "nn", ".", "ModuleDict", ")", ":", "\n", "\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "property", "\n", "def", "thresholds", "(", "self", ")", ":", "\n", "\t\t", "return", "[", "x", ".", "thresholds", "for", "x", "in", "self", ".", "values", "(", ")", "]", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.forward": [[77, 86], ["multi_class.MultiClassLanguageModel.lm_step", "multi_class.MultiClassLanguageModel.cls_layer"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.base_models.BaseLanguageModelForSequenceClassification.lm_step"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.predict_step": [[87, 99], ["multi_class.MultiClassLanguageModel.", "multi_class.MultiClassLanguageModel.score_func", "multi_class.MultiClassLanguageModel.threshold"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.eval_epoch_end": [[100, 134], ["torch.cat().mean", "torch.cat", "torch.cat", "scores.cpu.cpu.cpu", "labels.cpu.cpu.cpu", "multi_class.MultiClassLanguageModel.threshold.cpu", "multi_class.MultiClassLanguageModel.threshold", "multi_class.MultiClassLanguageModel.metric", "multi_class.MultiClassLanguageModel.log", "multi_class.MultiClassLanguageModel.log", "multi_class.MultiClassLanguageModel.log", "multi_class.MultiClassLanguageModel.log", "enumerate", "zip", "multi_class.MultiClassLanguageModel.threshold.to", "multi_class.MultiClassLanguageModel.metric.best", "multi_class.MultiClassLanguageModel.threshold.update_thresholds", "multi_class.MultiClassLanguageModel.log", "multi_class.MultiClassLanguageModel.log", "multi_class.MultiClassLanguageModel.log", "multi_class.MultiClassLanguageModel.log", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.update_thresholds"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.training_step": [[135, 148], ["multi_class.MultiClassLanguageModel.", "multi_class.MultiClassLanguageModel.criterion", "multi_class.MultiClassLanguageModel.mean", "multi_class.MultiClassLanguageModel.log"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.eval_step": [[149, 158], ["multi_class.MultiClassLanguageModel.predict_step", "multi_class.MultiClassLanguageModel.criterion"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.models.multi_class.MultiClassLanguageModel.predict_step"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.tucker.TuckEREmbedding.__init__": [[10, 24], ["pytorch_gleam.modeling.knowledge_embedding.base_emb.KnowledgeEmbedding.__init__", "torch.nn.parameter.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.tensor", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "parameter", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "self", ".", "emb_size", ",", "self", ".", "emb_size", ",", "self", ".", "emb_size", ")", ")", ")", "\n", ")", "\n", "\n", "self", ".", "e_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "emb_size", "\n", ")", "\n", "self", ".", "r_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "emb_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.tucker.TuckEREmbedding.forward": [[26, 37], ["tucker.TuckEREmbedding.e_emb_layer", "tucker.TuckEREmbedding.r_emb_layer", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source_embeddings", ",", "emb_type", ")", ":", "\n", "\t\t", "if", "emb_type", "==", "'entity'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "ex_embs", "=", "self", ".", "e_emb_layer", "(", "source_embeddings", ")", "\n", "return", "ex_embs", "\n", "", "elif", "emb_type", "==", "'rel'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "r_embs", "=", "self", ".", "r_emb_layer", "(", "source_embeddings", ")", "\n", "return", "r_embs", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown emb type: {emb_type}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.tucker.TuckEREmbedding.energy": [[38, 57], ["range", "head.unsqueeze.unsqueeze.unsqueeze", "head.unsqueeze.unsqueeze.unsqueeze", "rel.unsqueeze.unsqueeze.unsqueeze", "len", "w.unsqueeze.unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "energy", "(", "self", ",", "head", ",", "rel", ",", "tail", ")", ":", "\n", "\t\t", "num_batch_dims", "=", "len", "(", "head", ".", "shape", ")", "-", "1", "\n", "w", "=", "self", ".", "weight", "\n", "# [1, 1, ..., e_size, e_size, e_size]", "\n", "for", "_", "in", "range", "(", "num_batch_dims", ")", ":", "\n", "\t\t\t", "w", "=", "w", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "head", "=", "head", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "head", "=", "head", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "# [..., emb_size, emb_size, emb_size] -> [..., emb_size, emb_size]", "\n", "w", "=", "(", "w", "*", "head", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "# [..., emb_size, 1]", "\n", "rel", "=", "rel", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "# [..., emb_size]", "\n", "w", "=", "(", "w", "*", "rel", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "# [...]", "\n", "w", "=", "(", "w", "*", "tail", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "# this is treated as a score by TuckER, so - makes energy", "\n", "h_r_t_energy", "=", "-", "w", "\n", "return", "h_r_t_energy", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.tucker.TuckEREmbedding.loss": [[58, 64], ["pos_energy.lt().float", "torch.log", "torch.log", "pos_energy.lt", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "pos_energy", ",", "neg_energy", ")", ":", "\n", "\t\t", "pos_loss", "=", "-", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "-", "pos_energy", ")", "+", "1e-6", ")", "\n", "neg_loss", "=", "-", "torch", ".", "log", "(", "1.0", "-", "torch", ".", "sigmoid", "(", "-", "neg_energy", ")", "+", "1e-6", ")", "\n", "loss", "=", "pos_loss", "+", "neg_loss", "\n", "accuracy", "=", "(", "pos_energy", ".", "lt", "(", "neg_energy", ")", ")", ".", "float", "(", ")", "\n", "return", "loss", ",", "accuracy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transms.TransMSEmbedding.__init__": [[9, 19], ["pytorch_gleam.modeling.knowledge_embedding.base_emb.KnowledgeEmbedding.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "e_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "emb_size", "\n", ")", "\n", "self", ".", "r_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "emb_size", "+", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transms.TransMSEmbedding.forward": [[21, 35], ["transms.TransMSEmbedding.e_emb_layer", "torch.norm", "transms.TransMSEmbedding.r_emb_layer", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source_embeddings", ",", "emb_type", ")", ":", "\n", "\t\t", "if", "emb_type", "==", "'entity'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "ex_embs", "=", "self", ".", "e_emb_layer", "(", "source_embeddings", ")", "\n", "ex_emb_norms", "=", "torch", ".", "norm", "(", "ex_embs", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# [bsize * num_seq, emb_size]", "\n", "ex_embs", "=", "ex_embs", "/", "ex_emb_norms", "\n", "", "elif", "emb_type", "==", "'rel'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "ex_embs", "=", "self", ".", "r_emb_layer", "(", "source_embeddings", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown emb type: {emb_type}'", ")", "\n", "\n", "", "return", "ex_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transms.TransMSEmbedding.energy": [[36, 46], ["alpha.unsqueeze.unsqueeze.unsqueeze", "transms.TransMSEmbedding.diff_energy", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.diff_energy"], ["", "def", "energy", "(", "self", ",", "head", ",", "rel", ",", "tail", ")", ":", "\n", "\t\t", "rel", "=", "rel", "[", "...", ",", ":", "self", ".", "emb_size", "]", "\n", "alpha", "=", "rel", "[", "...", ",", "-", "1", "]", "\n", "alpha", "=", "alpha", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "h_p", "=", "-", "torch", ".", "tanh", "(", "tail", "*", "rel", ")", "*", "head", "\n", "r_p", "=", "rel", "+", "alpha", "*", "(", "head", "*", "tail", ")", "\n", "t_p", "=", "torch", ".", "tanh", "(", "head", "*", "rel", ")", "*", "tail", "\n", "\n", "h_r_t_diff", "=", "h_p", "+", "r_p", "-", "t_p", "\n", "return", "self", ".", "diff_energy", "(", "h_r_t_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transms.TransMSEmbedding.loss": [[47, 49], ["transms.TransMSEmbedding.margin_loss"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.margin_loss"], ["", "def", "loss", "(", "self", ",", "pos_energy", ",", "neg_energy", ")", ":", "\n", "\t\t", "return", "self", ".", "margin_loss", "(", "pos_energy", ",", "neg_energy", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transd.TransDEmbedding.__init__": [[9, 28], ["pytorch_gleam.modeling.knowledge_embedding.base_emb.KnowledgeEmbedding.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "td_emb_size", "=", "self", ".", "emb_size", "//", "2", "\n", "self", ".", "e_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "td_emb_size", "\n", ")", "\n", "self", ".", "e_proj_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "td_emb_size", "\n", ")", "\n", "self", ".", "r_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "td_emb_size", "\n", ")", "\n", "self", ".", "r_proj_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "td_emb_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transd.TransDEmbedding.forward": [[30, 51], ["torch.norm", "torch.cat", "transd.TransDEmbedding.e_emb_layer", "transd.TransDEmbedding.e_proj_layer", "transd.TransDEmbedding.r_emb_layer", "transd.TransDEmbedding.r_proj_layer", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source_embeddings", ",", "emb_type", ")", ":", "\n", "\t\t", "if", "emb_type", "==", "'entity'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "ex_embs", "=", "self", ".", "e_emb_layer", "(", "source_embeddings", ")", "\n", "ex_projs", "=", "self", ".", "e_proj_layer", "(", "source_embeddings", ")", "\n", "", "elif", "emb_type", "==", "'rel'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "ex_embs", "=", "self", ".", "r_emb_layer", "(", "source_embeddings", ")", "\n", "ex_projs", "=", "self", ".", "r_proj_layer", "(", "source_embeddings", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown emb type: {emb_type}'", ")", "\n", "# https://www.aclweb.org/anthology/P15-1067.pdf", "\n", "# normalize all lookups to max l2 norm of 1", "\n", "\n", "# [bsize * num_seq, emb_size]", "\n", "# ex_embs = ex_embs / torch.clamp(ex_emb_norms, min=1.0)", "\n", "", "ex_emb_norms", "=", "torch", ".", "norm", "(", "ex_embs", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "ex_embs", "=", "ex_embs", "/", "ex_emb_norms", "\n", "\n", "ex_embs", "=", "torch", ".", "cat", "(", "[", "ex_embs", ",", "ex_projs", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "ex_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transd.TransDEmbedding.project": [[52, 59], ["torch.norm", "torch.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "project", "(", "c", ",", "c_proj", ",", "r_proj", ")", ":", "\n", "\t\t", "c_p", "=", "c", "+", "torch", ".", "sum", "(", "c", "*", "c_proj", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "r_proj", "\n", "c_p_norm", "=", "torch", ".", "norm", "(", "c_p", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# c_p = c_p / torch.clamp(c_p_norm, min=1.0)", "\n", "c_p", "=", "c_p", "/", "c_p_norm", "\n", "return", "c_p", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transd.TransDEmbedding.energy": [[60, 68], ["transd.TransDEmbedding.project", "transd.TransDEmbedding.project", "transd.TransDEmbedding.diff_energy"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transd.TransDEmbedding.project", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transd.TransDEmbedding.project", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.diff_energy"], ["", "def", "energy", "(", "self", ",", "head", ",", "rel", ",", "tail", ")", ":", "\n", "\t\t", "h", ",", "h_proj", "=", "head", "[", "...", ",", ":", "self", ".", "td_emb_size", "]", ",", "head", "[", "...", ",", "self", ".", "td_emb_size", ":", "]", "\n", "r", ",", "r_proj", "=", "rel", "[", "...", ",", ":", "self", ".", "td_emb_size", "]", ",", "rel", "[", "...", ",", "self", ".", "td_emb_size", ":", "]", "\n", "t", ",", "t_proj", "=", "tail", "[", "...", ",", ":", "self", ".", "td_emb_size", "]", ",", "tail", "[", "...", ",", "self", ".", "td_emb_size", ":", "]", "\n", "h_p", "=", "self", ".", "project", "(", "h", ",", "h_proj", ",", "r_proj", ")", "\n", "t_p", "=", "self", ".", "project", "(", "t", ",", "t_proj", ",", "r_proj", ")", "\n", "h_r_t_diff", "=", "h_p", "+", "r", "-", "t_p", "\n", "return", "self", ".", "diff_energy", "(", "h_r_t_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transd.TransDEmbedding.loss": [[69, 71], ["transd.TransDEmbedding.margin_loss"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.margin_loss"], ["", "def", "loss", "(", "self", ",", "pos_energy", ",", "neg_energy", ")", ":", "\n", "\t\t", "return", "self", ".", "margin_loss", "(", "pos_energy", ",", "neg_energy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.__init__": [[8, 14], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "hidden_size", ":", "int", ",", "emb_size", ":", "int", ",", "gamma", ":", "float", ",", "loss_norm", ":", "int", "=", "2", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "self", ".", "loss_norm", "=", "loss_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.forward": [[15, 18], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "source_embeddings", ",", "emb_type", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.diff_energy": [[19, 27], ["torch.norm", "ValueError"], "methods", ["None"], ["", "def", "diff_energy", "(", "self", ",", "diff", ")", ":", "\n", "\t\t", "if", "self", ".", "loss_norm", "==", "1", ":", "\n", "\t\t\t", "h_r_t_energy", "=", "torch", ".", "norm", "(", "diff", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "\n", "", "elif", "self", ".", "loss_norm", "==", "2", ":", "\n", "\t\t\t", "h_r_t_energy", "=", "(", "diff", "*", "diff", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown loss norm: {self.loss_norm}'", ")", "\n", "", "return", "h_r_t_energy", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.energy": [[28, 31], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "energy", "(", "self", ",", "head", ",", "rel", ",", "tail", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.loss": [[32, 35], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "loss", "(", "self", ",", "pos_energy", ",", "neg_energy", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.margin_loss": [[36, 50], ["pos_energy.unsqueeze.unsqueeze.unsqueeze", "neg_energy.unsqueeze.unsqueeze.unsqueeze", "torch.clamp", "pos_energy.unsqueeze.unsqueeze.lt().float", "pos_energy.unsqueeze.unsqueeze.lt"], "methods", ["None"], ["", "def", "margin_loss", "(", "self", ",", "pos_energy", ",", "neg_energy", ")", ":", "\n", "# [bsize, pos_samples]", "\n", "# pos_energy", "\n", "# [bsize, neg_samples]", "\n", "# neg_energy", "\n", "# [bsize, 1, pos_samples]", "\n", "\t\t", "pos_energy", "=", "pos_energy", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "# [bsize, neg_samples, 1]", "\n", "neg_energy", "=", "neg_energy", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "# [bsize, neg_samples, pos_samples]", "\n", "margin", "=", "pos_energy", "-", "neg_energy", "\n", "loss", "=", "torch", ".", "clamp", "(", "self", ".", "gamma", "+", "margin", ",", "min", "=", "0.0", ")", "\n", "accuracy", "=", "(", "pos_energy", ".", "lt", "(", "neg_energy", ")", ")", ".", "float", "(", ")", "\n", "return", "loss", ",", "accuracy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.rotate.RotatEEmbedding.__init__": [[10, 25], ["pytorch_gleam.modeling.knowledge_embedding.base_emb.KnowledgeEmbedding.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "td_emb_size", "=", "self", ".", "emb_size", "//", "2", "\n", "self", ".", "e_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "td_emb_size", "\n", ")", "\n", "self", ".", "e_proj_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "td_emb_size", "\n", ")", "\n", "self", ".", "r_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "td_emb_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.rotate.RotatEEmbedding.forward": [[27, 40], ["rotate.RotatEEmbedding.e_emb_layer", "rotate.RotatEEmbedding.e_proj_layer", "torch.cat", "rotate.RotatEEmbedding.r_emb_layer", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source_embeddings", ",", "emb_type", ")", ":", "\n", "\t\t", "if", "emb_type", "==", "'entity'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "ex_embs", "=", "self", ".", "e_emb_layer", "(", "source_embeddings", ")", "\n", "ex_ims", "=", "self", ".", "e_proj_layer", "(", "source_embeddings", ")", "\n", "ex_embs", "=", "torch", ".", "cat", "(", "[", "ex_embs", ",", "ex_ims", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "ex_embs", "\n", "", "elif", "emb_type", "==", "'rel'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "r_embs", "=", "self", ".", "r_emb_layer", "(", "source_embeddings", ")", "\n", "return", "r_embs", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown emb type: {emb_type}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.rotate.RotatEEmbedding.energy": [[41, 53], ["torch.cos", "torch.sin", "torch.cat", "rotate.RotatEEmbedding.diff_energy", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.diff_energy"], ["", "", "def", "energy", "(", "self", ",", "head", ",", "rel", ",", "tail", ")", ":", "\n", "\t\t", "h_re", ",", "h_im", "=", "head", "[", "...", ",", ":", "self", ".", "td_emb_size", "]", ",", "head", "[", "...", ",", "self", ".", "td_emb_size", ":", "]", "\n", "t_re", ",", "t_im", "=", "tail", "[", "...", ",", ":", "self", ".", "td_emb_size", "]", ",", "tail", "[", "...", ",", "self", ".", "td_emb_size", ":", "]", "\n", "r_phase", "=", "torch", ".", "tanh", "(", "rel", ")", "*", "math", ".", "pi", "\n", "r_re", "=", "torch", ".", "cos", "(", "r_phase", ")", "\n", "r_im", "=", "torch", ".", "sin", "(", "r_phase", ")", "\n", "\n", "re_score", "=", "(", "h_re", "*", "r_re", "-", "h_im", "*", "r_im", ")", "-", "t_re", "\n", "im_score", "=", "(", "h_re", "*", "r_im", "+", "h_im", "*", "r_re", ")", "-", "t_im", "\n", "h_r_t_diff", "=", "torch", ".", "cat", "(", "[", "re_score", ",", "im_score", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "self", ".", "diff_energy", "(", "h_r_t_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.rotate.RotatEEmbedding.loss": [[54, 60], ["pos_energy.lt().float", "torch.log", "torch.log", "pos_energy.lt", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "pos_energy", ",", "neg_energy", ")", ":", "\n", "\t\t", "pos_loss", "=", "-", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "self", ".", "gamma", "-", "pos_energy", ")", "+", "1e-6", ")", "\n", "neg_loss", "=", "-", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "neg_energy", "-", "self", ".", "gamma", ")", "+", "1e-6", ")", "\n", "loss", "=", "pos_loss", "+", "neg_loss", "\n", "accuracy", "=", "(", "pos_energy", ".", "lt", "(", "neg_energy", ")", ")", ".", "float", "(", ")", "\n", "return", "loss", ",", "accuracy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.__init__": [[9, 19], ["pytorch_gleam.modeling.knowledge_embedding.base_emb.KnowledgeEmbedding.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "e_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "emb_size", "\n", ")", "\n", "self", ".", "r_emb_layer", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_size", ",", "\n", "self", ".", "emb_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.forward": [[21, 35], ["transe.TransEEmbedding.e_emb_layer", "torch.norm", "transe.TransEEmbedding.r_emb_layer", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source_embeddings", ",", "emb_type", ")", ":", "\n", "\t\t", "if", "emb_type", "==", "'entity'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "ex_embs", "=", "self", ".", "e_emb_layer", "(", "source_embeddings", ")", "\n", "ex_emb_norms", "=", "torch", ".", "norm", "(", "ex_embs", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# [bsize * num_seq, emb_size]", "\n", "ex_embs", "=", "ex_embs", "/", "ex_emb_norms", "\n", "", "elif", "emb_type", "==", "'rel'", ":", "\n", "# [bsize * num_seq, emb_size]", "\n", "\t\t\t", "ex_embs", "=", "self", ".", "r_emb_layer", "(", "source_embeddings", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown emb type: {emb_type}'", ")", "\n", "\n", "", "return", "ex_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.energy": [[36, 39], ["transe.TransEEmbedding.diff_energy"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.diff_energy"], ["", "def", "energy", "(", "self", ",", "head", ",", "rel", ",", "tail", ")", ":", "\n", "\t\t", "h_r_t_diff", "=", "head", "+", "rel", "-", "tail", "\n", "return", "self", ".", "diff_energy", "(", "h_r_t_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.transe.TransEEmbedding.loss": [[40, 42], ["transe.TransEEmbedding.margin_loss"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.knowledge_embedding.base_emb.KnowledgeEmbedding.margin_loss"], ["", "def", "loss", "(", "self", ",", "pos_energy", ",", "neg_energy", ")", ":", "\n", "\t\t", "return", "self", ".", "margin_loss", "(", "pos_energy", ",", "neg_energy", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.multi_class_f1.F1PRMultiClassMetric.__init__": [[7, 12], ["pytorch_gleam.modeling.metrics.base_metrics.Metric.__init__", "list", "range"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "num_classes", ":", "int", ",", "mode", ":", "str", "=", "'macro'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "pos_labels", "=", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.multi_class_f1.F1PRMultiClassMetric.forward": [[13, 40], ["sklearn.metrics.precision_recall_fscore_support", "cls_f1.mean", "cls_precision.mean", "cls_recall.mean", "sklearn.metrics.precision_recall_fscore_support", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "labels", ",", "predictions", ")", ":", "\n", "# labels = labels.numpy()", "\n", "# predictions = predictions.numpy()", "\n", "\t\t", "cls_precision", ",", "cls_recall", ",", "cls_f1", ",", "cls_sup", "=", "precision_recall_fscore_support", "(", "\n", "labels", ",", "\n", "predictions", ",", "\n", "average", "=", "None", ",", "\n", "labels", "=", "self", ".", "pos_labels", ",", "\n", "zero_division", "=", "0", "\n", ")", "\n", "if", "self", ".", "mode", "==", "'macro'", ":", "\n", "# ignore 0 class in macro average", "\n", "\t\t\t", "mode_f1", "=", "cls_f1", ".", "mean", "(", ")", "\n", "mode_precision", "=", "cls_precision", ".", "mean", "(", ")", "\n", "mode_recall", "=", "cls_recall", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "mode", "==", "'micro'", ":", "\n", "\t\t\t", "mode_precision", ",", "mode_recall", ",", "mode_f1", ",", "mode_sup", "=", "precision_recall_fscore_support", "(", "\n", "labels", ",", "\n", "predictions", ",", "\n", "average", "=", "'micro'", ",", "\n", "labels", "=", "self", ".", "pos_labels", ",", "\n", "zero_division", "=", "0", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown metric mode: {self.mode}'", ")", "\n", "\n", "", "return", "mode_f1", ",", "mode_precision", ",", "mode_recall", ",", "cls_f1", ",", "cls_precision", ",", "cls_recall", ",", "self", ".", "pos_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.__init__": [[9, 18], ["super().__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "mode", ":", "str", "=", "'max'", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "self", ".", "mode", "==", "'max'", ":", "\n", "\t\t\t", "self", ".", "mode_reduce", "=", "max", "\n", "", "elif", "self", ".", "mode", "==", "'min'", ":", "\n", "\t\t\t", "self", ".", "mode_reduce", "=", "min", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "f'Unknown mode: {self.mode}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.forward": [[19, 22], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "labels", ",", "predictions", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best": [[23, 29], ["base_metrics.Metric.mode_reduce", "base_metrics.Metric.best_iterator"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best_iterator"], ["", "def", "best", "(", "self", ",", "labels", ",", "scores", ",", "threshold", ":", "ThresholdModule", ",", "threshold_min", ":", "float", "=", "None", ",", "threshold_max", ":", "float", "=", "None", ",", "threshold_delta", ":", "float", "=", "None", ")", ":", "\n", "\t\t", "max_threshold", ",", "max_metrics", "=", "self", ".", "mode_reduce", "(", "\n", "self", ".", "best_iterator", "(", "labels", ",", "scores", ",", "threshold", ",", "threshold_min", ",", "threshold_max", ",", "threshold_delta", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "0", "]", "\n", ")", "\n", "return", "max_threshold", ",", "max_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.metrics.base_metrics.Metric.best_iterator": [[30, 34], ["threshold.get_range_predictions", "base_metrics.Metric."], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.base_thresholds.ThresholdModule.get_range_predictions"], ["", "def", "best_iterator", "(", "self", ",", "labels", ",", "scores", ",", "threshold", ":", "ThresholdModule", ",", "threshold_min", ":", "float", "=", "None", ",", "threshold_max", ":", "float", "=", "None", ",", "threshold_delta", ":", "float", "=", "None", ")", ":", "\n", "\t\t", "for", "threshold", ",", "preds", "in", "threshold", ".", "get_range_predictions", "(", "scores", ",", "threshold_min", ",", "threshold_max", ",", "threshold_delta", ")", ":", "\n", "\t\t\t", "metrics", "=", "self", "(", "labels", ",", "preds", ")", "\n", "yield", "threshold", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exqueue.get_ex_id": [[14, 19], ["hashlib.sha1", "base64.urlsafe_b64encode().decode", "experiment.encode", "hashlib.sha1.digest", "base64.urlsafe_b64encode"], "function", ["None"], ["def", "get_ex_id", "(", "experiment", ":", "str", ")", ":", "\n", "\t", "ex_hasher", "=", "hashlib", ".", "sha1", "(", "experiment", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "ex_hash", "=", "ex_hasher", ".", "digest", "(", ")", "[", ":", "6", "]", "\n", "ex_id", "=", "base64", ".", "urlsafe_b64encode", "(", "ex_hash", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "return", "ex_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exqueue.ex_queue": [[21, 50], ["os.path.expanduser", "os.path.join", "exqueue.get_ex_id", "os.path.join", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "datetime.datetime.now().strftime", "filelock.FileLock", "os.path.exists", "os.path.join", "print", "print", "datetime.datetime.now", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exqueue.get_ex_id"], ["", "def", "ex_queue", "(", "experiment", ":", "str", ",", "queue_path", ":", "str", "=", "'~/.default_queue'", ")", ":", "\n", "\t", "queue_path", "=", "os", ".", "path", ".", "expanduser", "(", "queue_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "queue_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "queue_path", ")", "\n", "", "submitted_path", "=", "os", ".", "path", ".", "join", "(", "queue_path", ",", "'submitted'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "submitted_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "submitted_path", ")", "\n", "\n", "", "ex_id", "=", "get_ex_id", "(", "experiment", ")", "\n", "status", "=", "{", "\n", "'status'", ":", "'submitted'", ",", "\n", "'timestamp'", ":", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "time_format", ")", ",", "\n", "}", "\n", "ex", "=", "{", "\n", "'ex_id'", ":", "ex_id", ",", "\n", "'experiment'", ":", "experiment", ",", "\n", "'process_id'", ":", "None", ",", "\n", "'current_status'", ":", "status", ",", "\n", "'status_history'", ":", "[", "status", "]", "\n", "}", "\n", "\n", "ex_queue_path", "=", "os", ".", "path", ".", "join", "(", "submitted_path", ",", "ex_id", ")", "\n", "with", "FileLock", "(", "os", ".", "path", ".", "join", "(", "queue_path", ",", "'.lock'", ")", ")", ":", "\n", "\t\t", "if", "os", ".", "path", ".", "exists", "(", "ex_queue_path", ")", ":", "\n", "\t\t\t", "print", "(", "f'Experiment already added to queue!'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "with", "open", "(", "ex_queue_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t\t", "json", ".", "dump", "(", "ex", ",", "f", ",", "indent", "=", "4", ")", "\n", "", "print", "(", "f'Experiment successfully added to queue.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exqueue.main": [[52, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "exqueue.ex_queue"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exqueue.ex_queue"], ["", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-ex'", ",", "'--experiment'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-qp'", ",", "'--queue_path'", ",", "default", "=", "'~/.default_queue'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "experiment", "=", "args", ".", "experiment", "\n", "queue_path", "=", "args", ".", "queue_path", "\n", "ex_queue", "(", "experiment", ",", "queue_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exrm.main": [[4, 6], ["NotImplementedError"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\t", "raise", "NotImplementedError", "(", "'Not yet implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstart.update_status": [[16, 32], ["os.path.join", "os.path.join", "os.path.join", "ex[].insert", "os.remove", "os.path.exists", "os.mkdir", "datetime.datetime.now().strftime", "open", "json.dump", "datetime.datetime.now"], "function", ["None"], ["def", "update_status", "(", "queue_path", ",", "ex", ",", "status", ",", "p_id", "=", "None", ")", ":", "\n", "\t", "old_file_path", "=", "os", ".", "path", ".", "join", "(", "queue_path", ",", "ex", "[", "'current_status'", "]", "[", "'status'", "]", ",", "ex", "[", "'ex_id'", "]", ")", "\n", "status_path", "=", "os", ".", "path", ".", "join", "(", "queue_path", ",", "status", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "status_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "status_path", ")", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "status_path", ",", "ex", "[", "'ex_id'", "]", ")", "\n", "new_status", "=", "{", "\n", "'status'", ":", "status", ",", "\n", "'timestamp'", ":", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "time_format", ")", ",", "\n", "}", "\n", "ex", "[", "'status_history'", "]", ".", "insert", "(", "0", ",", "new_status", ")", "\n", "ex", "[", "'current_status'", "]", "=", "new_status", "\n", "ex", "[", "'process_id'", "]", "=", "p_id", "\n", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "ex", ",", "f", ",", "indent", "=", "4", ")", "\n", "", "os", ".", "remove", "(", "old_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstart.get_experiments": [[34, 48], ["os.path.join", "os.listdir", "os.path.exists", "os.mkdir", "os.path.join", "os.path.isfile", "datetime.datetime.strptime", "ex_list.append", "os.path.join.endswith", "open", "json.load"], "function", ["None"], ["", "def", "get_experiments", "(", "queue_path", ":", "str", ",", "status", ":", "str", ")", ":", "\n", "\t", "ex_list", "=", "[", "]", "\n", "status_path", "=", "os", ".", "path", ".", "join", "(", "queue_path", ",", "status", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "status_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "status_path", ")", "\n", "", "for", "file", "in", "os", ".", "listdir", "(", "status_path", ")", ":", "\n", "\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "status_path", ",", "file", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", "and", "not", "file_path", ".", "endswith", "(", "'.lock'", ")", ":", "\n", "\t\t\t", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "load", "(", "f", ")", "\n", "", "c_status", "=", "ex", "[", "'current_status'", "]", "\n", "timestamp", "=", "datetime", ".", "strptime", "(", "c_status", "[", "'timestamp'", "]", ",", "time_format", ")", "\n", "ex_list", ".", "append", "(", "(", "timestamp", ",", "ex", ")", ")", "\n", "", "", "return", "ex_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstart.main": [[50, 115], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.expanduser", "os.path.exists", "os.mkdir", "time.sleep", "range", "filelock.FileLock", "len", "min", "os.path.join", "exstart.get_experiments", "exstart.get_experiments", "len", "heapq.nsmallest", "print", "exstart.update_status", "p.poll", "min", "subprocess.Popen", "exstart.update_status", "exstart.update_status", "command.split", "processes.items"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.get_experiments", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.get_experiments", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstart.update_status", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstart.update_status", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstart.update_status"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-qp'", ",", "'--queue_path'", ",", "default", "=", "'~/.default_queue'", ")", "\n", "parser", ".", "add_argument", "(", "'-mex'", ",", "'--max_experiments'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-rs'", ",", "'--refresh_seconds'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "queue_path", "=", "os", ".", "path", ".", "expanduser", "(", "args", ".", "queue_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "queue_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "queue_path", ")", "\n", "\n", "", "max_experiments", "=", "args", ".", "max_experiments", "\n", "refresh_seconds", "=", "args", ".", "refresh_seconds", "\n", "processes", "=", "{", "p_id", ":", "None", "for", "p_id", "in", "range", "(", "max_experiments", ")", "}", "\n", "while", "True", ":", "\n", "\t\t", "with", "FileLock", "(", "os", ".", "path", ".", "join", "(", "queue_path", ",", "'.lock'", ")", ")", ":", "\n", "\t\t\t", "ex_queue", "=", "{", "\n", "'submitted'", ":", "get_experiments", "(", "queue_path", ",", "'submitted'", ")", ",", "\n", "'running'", ":", "get_experiments", "(", "queue_path", ",", "'running'", ")", ",", "\n", "# 'completed': []", "\n", "}", "\n", "\n", "num_available_processes", "=", "len", "(", "processes", ")", "\n", "for", "ts", ",", "ex", "in", "ex_queue", "[", "'running'", "]", ":", "\n", "\t\t\t\t", "p_id", "=", "ex", "[", "'process_id'", "]", "\n", "p", "=", "processes", "[", "p_id", "]", "\n", "if", "p", "is", "None", ":", "\n", "\t\t\t\t\t", "print", "(", "f'WARNING: running experiment lost process, resubmitting.'", ")", "\n", "update_status", "(", "\n", "queue_path", "=", "queue_path", ",", "\n", "ex", "=", "ex", ",", "\n", "status", "=", "'submitted'", ",", "\n", "p_id", "=", "None", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "ret", "=", "p", ".", "poll", "(", ")", "\n", "if", "ret", "is", "None", ":", "\n", "\t\t\t\t\t\t", "num_available_processes", "-=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "update_status", "(", "\n", "queue_path", "=", "queue_path", ",", "\n", "ex", "=", "ex", ",", "\n", "status", "=", "'completed'", ",", "\n", "p_id", "=", "None", "\n", ")", "\n", "processes", "[", "p_id", "]", "=", "None", "\n", "\n", "", "", "", "available_to_run_list", "=", "ex_queue", "[", "'submitted'", "]", "\n", "num_to_run", "=", "min", "(", "num_available_processes", ",", "len", "(", "available_to_run_list", ")", ")", "\n", "if", "num_to_run", ">", "0", ":", "\n", "\t\t\t\t", "top_to_run", "=", "heapq", ".", "nsmallest", "(", "num_to_run", ",", "available_to_run_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "for", "ts", ",", "ex", "in", "top_to_run", ":", "\n", "\t\t\t\t\t", "p_id", "=", "min", "(", "[", "p_id", "for", "p_id", ",", "p", "in", "processes", ".", "items", "(", ")", "if", "p", "is", "None", "]", ")", "\n", "experiment", "=", "ex", "[", "'experiment'", "]", "\n", "command", "=", "f'bash {experiment}'", "\n", "process", "=", "subprocess", ".", "Popen", "(", "command", ".", "split", "(", ")", ")", "\n", "processes", "[", "p_id", "]", "=", "process", "\n", "update_status", "(", "\n", "queue_path", "=", "queue_path", ",", "\n", "ex", "=", "ex", ",", "\n", "status", "=", "'running'", ",", "\n", "p_id", "=", "p_id", "\n", ")", "\n", "", "", "", "time", ".", "sleep", "(", "refresh_seconds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.ex_format": [[14, 22], ["str", "datetime.datetime.strptime"], "function", ["None"], ["def", "ex_format", "(", "ex", ")", ":", "\n", "\t", "c_status", "=", "ex", "[", "'current_status'", "]", "\n", "# p_id = ex['process_id']", "\n", "status", "=", "'['", "+", "c_status", "[", "'status'", "]", "+", "']'", "\n", "timestamp", "=", "str", "(", "datetime", ".", "strptime", "(", "c_status", "[", "'timestamp'", "]", ",", "time_format", ")", ")", "\n", "experiment", "=", "ex", "[", "'experiment'", "]", "\n", "ex_id", "=", "ex", "[", "'ex_id'", "]", "\n", "return", "f'{status:<12} {ex_id:<10} {timestamp:<20} {experiment}'", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.get_experiments": [[24, 38], ["os.path.join", "os.listdir", "os.path.exists", "os.mkdir", "os.path.join", "os.path.isfile", "datetime.datetime.strptime", "ex_list.append", "os.path.join.endswith", "open", "json.load"], "function", ["None"], ["", "def", "get_experiments", "(", "queue_path", ",", "status", ")", ":", "\n", "\t", "ex_list", "=", "[", "]", "\n", "status_path", "=", "os", ".", "path", ".", "join", "(", "queue_path", ",", "status", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "status_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "status_path", ")", "\n", "", "for", "file", "in", "os", ".", "listdir", "(", "status_path", ")", ":", "\n", "\t\t", "file_path", "=", "os", ".", "path", ".", "join", "(", "status_path", ",", "file", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", "and", "not", "file_path", ".", "endswith", "(", "'.lock'", ")", ":", "\n", "\t\t\t", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "load", "(", "f", ")", "\n", "", "c_status", "=", "ex", "[", "'current_status'", "]", "\n", "timestamp", "=", "datetime", ".", "strptime", "(", "c_status", "[", "'timestamp'", "]", ",", "time_format", ")", "\n", "ex_list", ".", "append", "(", "(", "timestamp", ",", "ex", ")", ")", "\n", "", "", "return", "ex_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.main": [[40, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.expanduser", "os.path.exists", "os.mkdir", "filelock.FileLock", "sorted", "sorted", "os.path.join", "exstat.get_experiments", "print", "exstat.get_experiments", "print", "sorted", "exstat.get_experiments", "print", "exstat.ex_format", "exstat.ex_format", "exstat.ex_format"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.get_experiments", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.get_experiments", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.get_experiments", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.ex_format", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.ex_format", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exstat.ex_format"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-qp'", ",", "'--queue_path'", ",", "default", "=", "'~/.default_queue'", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--completed'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "queue_path", "=", "os", ".", "path", ".", "expanduser", "(", "args", ".", "queue_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "queue_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "queue_path", ")", "\n", "\n", "", "with", "FileLock", "(", "os", ".", "path", ".", "join", "(", "queue_path", ",", "'.lock'", ")", ")", ":", "\n", "\t\t", "for", "ts", ",", "ex", "in", "sorted", "(", "get_experiments", "(", "queue_path", ",", "'running'", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "False", ")", ":", "\n", "\t\t\t", "print", "(", "f'{ex_format(ex)}'", ")", "\n", "", "for", "ts", ",", "ex", "in", "sorted", "(", "get_experiments", "(", "queue_path", ",", "'submitted'", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "False", ")", ":", "\n", "\t\t\t", "print", "(", "f'{ex_format(ex)}'", ")", "\n", "", "if", "args", ".", "completed", ":", "\n", "\t\t\t", "for", "ts", ",", "ex", "in", "sorted", "(", "get_experiments", "(", "queue_path", ",", "'completed'", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", ":", "\n", "\t\t\t\t", "print", "(", "f'{ex_format(ex)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exbqueue.main": [[8, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sorted", "list", "os.path.join", "pytorch_gleam.exqueue.exqueue.ex_queue", "os.listdir"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.exqueue.exqueue.ex_queue"], ["def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--script_path'", ",", "default", "=", "'ex/tt.sh'", ")", "\n", "parser", ".", "add_argument", "(", "'-qp'", ",", "'--queue_path'", ",", "default", "=", "'~/.default_queue'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "batch_path", "=", "args", ".", "batch_path", "\n", "script", "=", "args", ".", "script_path", "\n", "queue_path", "=", "args", ".", "queue_path", "\n", "\n", "for", "ex_file", "in", "sorted", "(", "list", "(", "os", ".", "listdir", "(", "batch_path", ")", ")", ")", ":", "\n", "\t\t", "ex_path", "=", "os", ".", "path", ".", "join", "(", "batch_path", ",", "ex_file", ")", "\n", "experiment", "=", "f'{script} {ex_path}'", "\n", "ex_queue", "(", "experiment", ",", "queue_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.config.CopyConfigCallback.__init__": [[10, 12], ["pytorch_lightning.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.config.CopyConfigCallback._get_config_path": [[13, 17], ["os.path.join"], "methods", ["None"], ["", "def", "_get_config_path", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ")", ":", "\n", "# get lightning_logs/version_0/config.yaml", "\n", "\t\t", "config_path", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "logger", ".", "save_dir", ",", "'config.yaml'", ")", "\n", "return", "config_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.config.CopyConfigCallback.on_fit_end": [[18, 26], ["config.CopyConfigCallback._get_config_path", "print", "os.path.join", "print", "print", "shutil.copy"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.config.CopyConfigCallback._get_config_path"], ["", "def", "on_fit_end", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "if", "trainer", ".", "should_rank_save_checkpoint", ":", "\n", "\t\t\t", "config_path", "=", "self", ".", "_get_config_path", "(", "trainer", ")", "\n", "print", "(", "f'Saving config...'", ")", "\n", "root_config_path", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "default_root_dir", ",", "'config.yaml'", ")", "\n", "print", "(", "config_path", ")", "\n", "print", "(", "root_config_path", ")", "\n", "shutil", ".", "copy", "(", "config_path", ",", "root_config_path", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.JsonlWriter.__init__": [[16, 19], ["pytorch_lightning.callbacks.BasePredictionWriter.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "write_interval", ":", "str", "=", "'batch'", ",", "output_path", ":", "str", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "write_interval", ")", "\n", "self", ".", "output_path", "=", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.JsonlWriter._write": [[20, 49], ["os.path.join", "collections.defaultdict", "prediction.items", "rows.values.values.values", "os.path.join", "os.path.exists", "os.mkdir", "torch.get_rank", "torch.get_rank", "enumerate", "open", "isinstance", "f.write", "ex_value.tolist.tolist.tolist", "ujson.dumps"], "methods", ["None"], ["", "def", "_write", "(", "self", ",", "trainer", ",", "prediction", ")", ":", "\n", "\t\t", "if", "self", ".", "output_path", "is", "None", ":", "\n", "\t\t\t", "predictions_dir", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "default_root_dir", ",", "'predictions'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "predictions_dir", "=", "self", ".", "output_path", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "predictions_dir", ")", ":", "\n", "\t\t\t", "os", ".", "mkdir", "(", "predictions_dir", ")", "\n", "\n", "", "try", ":", "\n", "\t\t\t", "process_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "except", "RuntimeError", ":", "\n", "\t\t\t", "process_id", "=", "-", "1", "\n", "", "if", "process_id", "==", "-", "1", ":", "\n", "\t\t\t", "file_name", "=", "'predictions.jsonl'", "\n", "", "else", ":", "\n", "\t\t\t", "file_name", "=", "f'predictions-{process_id}.jsonl'", "\n", "\n", "", "pred_file", "=", "os", ".", "path", ".", "join", "(", "predictions_dir", ",", "file_name", ")", "\n", "rows", "=", "defaultdict", "(", "dict", ")", "\n", "for", "key", ",", "values", "in", "prediction", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "ex_idx", ",", "ex_value", "in", "enumerate", "(", "values", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "ex_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "ex_value", "=", "ex_value", ".", "tolist", "(", ")", "\n", "", "rows", "[", "ex_idx", "]", "[", "key", "]", "=", "ex_value", "\n", "", "", "rows", "=", "rows", ".", "values", "(", ")", "\n", "with", "open", "(", "pred_file", ",", "'a'", ")", "as", "f", ":", "\n", "\t\t\t", "for", "row", "in", "rows", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "json", ".", "dumps", "(", "row", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.JsonlWriter.write_on_batch_end": [[50, 61], ["prediction.JsonlWriter._write"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.JsonlWriter._write"], ["", "", "", "def", "write_on_batch_end", "(", "\n", "self", ",", "\n", "trainer", ":", "pl", ".", "Trainer", ",", "\n", "pl_module", ":", "pl", ".", "LightningModule", ",", "\n", "prediction", ":", "Any", ",", "\n", "batch_indices", ":", "List", "[", "int", "]", ",", "\n", "batch", ":", "Any", ",", "\n", "batch_idx", ":", "int", ",", "\n", "dataloader_idx", ":", "int", "\n", ")", ":", "\n", "\t\t", "self", ".", "_write", "(", "trainer", ",", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.JsonlWriter.write_on_epoch_end": [[62, 71], ["prediction.JsonlWriter._write"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.JsonlWriter._write"], ["", "def", "write_on_epoch_end", "(", "\n", "self", ",", "\n", "trainer", ":", "pl", ".", "Trainer", ",", "\n", "pl_module", ":", "pl", ".", "LightningModule", ",", "\n", "predictions", ":", "List", "[", "Any", "]", ",", "\n", "batch_indices", ":", "List", "[", "Any", "]", "\n", ")", ":", "\n", "\t\t", "for", "prediction", "in", "predictions", ":", "\n", "\t\t\t", "self", ".", "_write", "(", "trainer", ",", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.read_jsonl": [[73, 80], ["open", "line.strip.strip", "ujson.loads"], "function", ["None"], ["", "", "", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.read_predictions": [[82, 102], ["collections.defaultdict", "set", "sorted", "print", "print", "os.listdir", "file_name.endswith", "print", "os.path.join", "prediction.read_jsonl", "print", "pred[].split", "set.add", "len"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "", "", "def", "read_predictions", "(", "input_path", ")", ":", "\n", "\t", "predictions", "=", "defaultdict", "(", "dict", ")", "\n", "total_count", "=", "0", "\n", "unique_set", "=", "set", "(", ")", "\n", "for", "file_name", "in", "sorted", "(", "os", ".", "listdir", "(", "input_path", ")", ")", ":", "\n", "\t\t", "if", "file_name", ".", "endswith", "(", "'.jsonl'", ")", ":", "\n", "\t\t\t", "print", "(", "f'{file_name}: '", ",", "end", "=", "''", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "input_path", ",", "file_name", ")", "\n", "f_count", "=", "0", "\n", "for", "pred", "in", "read_jsonl", "(", "file_path", ")", ":", "\n", "\t\t\t\t", "tweet_id", ",", "f_id", "=", "pred", "[", "'ids'", "]", ".", "split", "(", "'|'", ")", "\n", "unique_set", ".", "add", "(", "(", "tweet_id", ",", "f_id", ")", ")", "\n", "scores", "=", "pred", "[", "'scores'", "]", "\n", "predictions", "[", "tweet_id", "]", "[", "f_id", "]", "=", "scores", "\n", "f_count", "+=", "1", "\n", "", "print", "(", "f'{f_count}'", ")", "\n", "total_count", "+=", "f_count", "\n", "", "", "print", "(", "f'TOTAL: {total_count}'", ")", "\n", "print", "(", "f'UNIQUE: {len(unique_set)}'", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.main": [[104, 112], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "prediction.read_predictions", "open", "ujson.dump"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.prediction.read_predictions"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "predictions", "=", "read_predictions", "(", "args", ".", "input_path", ")", "\n", "with", "open", "(", "args", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "predictions", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.results.JsonSaveResultsCallback.__init__": [[11, 13], ["pytorch_lightning.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.results.JsonSaveResultsCallback._get_results_path": [[14, 21], ["os.path.join", "os.path.join", "os.path.exists", "os.mkdir"], "methods", ["None"], ["", "def", "_get_results_path", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ")", ":", "\n", "\t\t", "results_dir", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "default_root_dir", ",", "'results'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_dir", ")", ":", "\n", "\t\t\t", "os", ".", "mkdir", "(", "results_dir", ")", "\n", "\n", "", "results_file", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'results.json'", ")", "\n", "return", "results_file", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.results.JsonSaveResultsCallback.on_test_epoch_end": [[22, 29], ["results.JsonSaveResultsCallback._get_results_path", "print", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.results.JsonSaveResultsCallback._get_results_path"], ["", "@", "rank_zero_only", "\n", "def", "on_test_epoch_end", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "results_path", "=", "self", ".", "_get_results_path", "(", "trainer", ")", "\n", "results", "=", "trainer", ".", "accelerator", ".", "results", "\n", "print", "(", "f'Saving results...'", ")", "\n", "with", "open", "(", "results_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "json", ".", "dump", "(", "results", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback.__init__": [[12, 14], ["pytorch_lightning.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback._get_checkpoint_path": [[15, 18], ["os.path.join"], "methods", ["None"], ["", "def", "_get_checkpoint_path", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ")", ":", "\n", "\t\t", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "default_root_dir", ",", "'pytorch_model.bin'", ")", "\n", "return", "checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback.on_fit_end": [[19, 25], ["checkpoint.FitCheckpointCallback._get_checkpoint_path", "print", "pl_module.to", "torch.save", "pl_module.state_dict"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback._get_checkpoint_path"], ["", "@", "rank_zero_only", "\n", "def", "on_fit_end", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "checkpoint_path", "=", "self", ".", "_get_checkpoint_path", "(", "trainer", ")", "\n", "print", "(", "f'Saving checkpoint...'", ")", "\n", "pl_module", ".", "to", "(", "'cpu'", ")", "\n", "torch", ".", "save", "(", "pl_module", ".", "state_dict", "(", ")", ",", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback._load_fit_checkpoint": [[26, 30], ["print", "checkpoint.FitCheckpointCallback._get_checkpoint_path", "pl_module.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback._get_checkpoint_path"], ["", "def", "_load_fit_checkpoint", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "print", "(", "f'Loading checkpoint...'", ")", "\n", "checkpoint_path", "=", "self", ".", "_get_checkpoint_path", "(", "trainer", ")", "\n", "pl_module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint_path", ")", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback.on_test_start": [[31, 34], ["checkpoint.FitCheckpointCallback._load_fit_checkpoint"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback._load_fit_checkpoint"], ["", "def", "on_test_start", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "if", "trainer", ".", "state", ".", "fn", "!=", "TrainerFn", ".", "FITTING", ":", "\n", "\t\t\t", "self", ".", "_load_fit_checkpoint", "(", "trainer", ",", "pl_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback.on_validation_start": [[35, 38], ["checkpoint.FitCheckpointCallback._load_fit_checkpoint"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback._load_fit_checkpoint"], ["", "", "def", "on_validation_start", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "if", "trainer", ".", "state", ".", "fn", "!=", "TrainerFn", ".", "FITTING", ":", "\n", "\t\t\t", "self", ".", "_load_fit_checkpoint", "(", "trainer", ",", "pl_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback.on_predict_start": [[39, 42], ["checkpoint.FitCheckpointCallback._load_fit_checkpoint"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.FitCheckpointCallback._load_fit_checkpoint"], ["", "", "def", "on_predict_start", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "if", "trainer", ".", "state", ".", "fn", "!=", "TrainerFn", ".", "FITTING", ":", "\n", "\t\t\t", "self", ".", "_load_fit_checkpoint", "(", "trainer", ",", "pl_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.PreTrainedCheckpointCallback.__init__": [[45, 50], ["pytorch_lightning.callbacks.Callback.__init__", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "pre_model_path", ":", "str", ",", "pre_checkpoint_name", ":", "str", "=", "'pytorch_model.bin'", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_model_path", "=", "pre_model_path", "\n", "self", ".", "pre_checkpoint_name", "=", "pre_checkpoint_name", "\n", "self", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "pre_model_path", ",", "self", ".", "pre_checkpoint_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.PreTrainedCheckpointCallback._load_pre_checkpoint": [[51, 54], ["print", "pl_module.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "_load_pre_checkpoint", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "print", "(", "f'Loading checkpoint...'", ")", "\n", "pl_module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "checkpoint_path", ")", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.PreTrainedCheckpointCallback.on_fit_start": [[55, 57], ["checkpoint.PreTrainedCheckpointCallback._load_pre_checkpoint"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.callbacks.checkpoint.PreTrainedCheckpointCallback._load_pre_checkpoint"], ["", "def", "on_fit_start", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "\t\t", "self", ".", "_load_pre_checkpoint", "(", "trainer", ",", "pl_module", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.scripts.strip_annotations.read_jsonl": [[8, 15], ["open", "line.strip.strip", "ujson.loads"], "function", ["None"], ["def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.scripts.strip_annotations.write_jsonl": [[17, 21], ["open", "f.write", "ujson.dumps"], "function", ["None"], ["", "", "", "", "def", "write_jsonl", "(", "file_path", ",", "data", ")", ":", "\n", "\t", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "row", "in", "data", ":", "\n", "\t\t\t", "f", ".", "write", "(", "json", ".", "dumps", "(", "row", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.scripts.strip_annotations.strip_annotations": [[23, 29], ["None"], "function", ["None"], ["", "", "", "def", "strip_annotations", "(", "tweet", ",", "label_name", ")", ":", "\n", "\t", "ann", "=", "{", "\n", "'id'", ":", "tweet", "[", "'id'", "]", ",", "\n", "label_name", ":", "tweet", "[", "label_name", "]", "\n", "}", "\n", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.scripts.strip_annotations.main": [[31, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "strip_annotations.write_jsonl", "tqdm.tqdm", "strip_annotations.strip_annotations", "strip_annotations.read_jsonl"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.write_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.scripts.strip_annotations.strip_annotations", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--label_name'", ",", "default", "=", "'labels'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "output_path", "=", "args", ".", "output_path", "\n", "label_name", "=", "args", ".", "label_name", "\n", "\n", "write_jsonl", "(", "\n", "output_path", ",", "\n", "tqdm", "(", "\n", "strip_annotations", "(", "tweet", ",", "label_name", ")", "\n", "for", "tweet", "in", "read_jsonl", "(", "input_path", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.scripts.framegen.parse_frames": [[8, 26], ["pandas.read_excel", "pd.read_excel.iterrows", "key.strip().lower", "row[].split", "key.strip"], "function", ["None"], ["def", "parse_frames", "(", "frame_path", ")", ":", "\n", "\n", "\t", "df", "=", "pd", ".", "read_excel", "(", "\n", "frame_path", "\n", ")", "\n", "frames", "=", "{", "}", "\n", "for", "idx", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "\t\t", "f_id", "=", "row", "[", "'f_id'", "]", "\n", "frame", "=", "{", "\n", "'text'", ":", "row", "[", "'text'", "]", ",", "\n", "'short_text'", ":", "row", "[", "'short_text'", "]", ",", "\n", "'q_id'", ":", "row", "[", "'q_id'", "]", ",", "\n", "'moralities'", ":", "{", "\n", "key", ".", "strip", "(", ")", ".", "lower", "(", ")", ":", "True", "for", "key", "in", "row", "[", "'moralities'", "]", ".", "split", "(", ")", "\n", "}", "\n", "}", "\n", "frames", "[", "f_id", "]", "=", "frame", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.scripts.framegen.main": [[28, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "framegen.parse_frames", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.fparse.parse_frames"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "frames", "=", "parse_frames", "(", "args", ".", "input_path", ")", "\n", "with", "open", "(", "args", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "frames", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.ex.validate.main": [[6, 17], ["pytorch_lightning.utilities.cli.LightningCLI", "pytorch_lightning.utilities.cli.LightningCLI.trainer.validate"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\t", "cli", "=", "LightningCLI", "(", "\n", "pl", ".", "LightningModule", ",", "\n", "pl", ".", "LightningDataModule", ",", "\n", "run", "=", "False", ",", "\n", "subclass_mode_model", "=", "True", ",", "\n", "subclass_mode_data", "=", "True", "\n", ")", "\n", "cli", ".", "trainer", ".", "validate", "(", "\n", "cli", ".", "model", ",", "\n", "datamodule", "=", "cli", ".", "datamodule", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.ex.predict.main": [[6, 18], ["pytorch_lightning.utilities.cli.LightningCLI", "pytorch_lightning.utilities.cli.LightningCLI.trainer.predict"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.thresholds.multi_class.MultiClassCallableThresholdModule.predict"], ["def", "main", "(", ")", ":", "\n", "\t", "cli", "=", "LightningCLI", "(", "\n", "pl", ".", "LightningModule", ",", "\n", "pl", ".", "LightningDataModule", ",", "\n", "run", "=", "False", ",", "\n", "subclass_mode_model", "=", "True", ",", "\n", "subclass_mode_data", "=", "True", "\n", ")", "\n", "cli", ".", "trainer", ".", "predict", "(", "\n", "cli", ".", "model", ",", "\n", "datamodule", "=", "cli", ".", "datamodule", ",", "\n", "return_predictions", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.ex.train.main": [[6, 17], ["pytorch_lightning.utilities.cli.LightningCLI", "pytorch_lightning.utilities.cli.LightningCLI.trainer.fit"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\t", "cli", "=", "LightningCLI", "(", "\n", "pl", ".", "LightningModule", ",", "\n", "pl", ".", "LightningDataModule", ",", "\n", "run", "=", "False", ",", "\n", "subclass_mode_model", "=", "True", ",", "\n", "subclass_mode_data", "=", "True", "\n", ")", "\n", "cli", ".", "trainer", ".", "fit", "(", "\n", "cli", ".", "model", ",", "\n", "datamodule", "=", "cli", ".", "datamodule", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.ex.test.main": [[6, 17], ["pytorch_lightning.utilities.cli.LightningCLI", "pytorch_lightning.utilities.cli.LightningCLI.trainer.test"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\t", "cli", "=", "LightningCLI", "(", "\n", "pl", ".", "LightningModule", ",", "\n", "pl", ".", "LightningDataModule", ",", "\n", "run", "=", "False", ",", "\n", "subclass_mode_model", "=", "True", ",", "\n", "subclass_mode_data", "=", "True", "\n", ")", "\n", "cli", ".", "trainer", ".", "test", "(", "\n", "cli", ".", "model", ",", "\n", "datamodule", "=", "cli", ".", "datamodule", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.get_sentic": [[22, 43], ["word_text.lower.lower", "float", "float", "float", "float", "float"], "function", ["None"], ["def", "get_sentic", "(", "word_text", ")", ":", "\n", "\t", "word_text", "=", "word_text", ".", "lower", "(", ")", "\n", "if", "word_text", "==", "'coronavirus'", "or", "word_text", "==", "'covid-19'", "or", "word_text", "==", "'covid'", "or", "word_text", "==", "'covid19'", ":", "\n", "\t\t", "word_text", "=", "'virus'", "\n", "", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t", "word_text", "=", "word_text", "[", ":", "-", "1", "]", "\n", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t\t", "word_text", "=", "word_text", "[", ":", "-", "1", "]", "\n", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t\t\t", "return", "None", "\n", "", "", "", "p_v", ",", "a_v", ",", "s_v", ",", "ap_v", ",", "p_m", ",", "s_m", ",", "po_l", ",", "po_v", ",", "s1", ",", "s2", ",", "s3", ",", "s4", ",", "s5", "=", "senticnet5", ".", "senticnet", "[", "word_text", "]", "\n", "return", "{", "\n", "'pleasantness_value'", ":", "float", "(", "p_v", ")", ",", "\n", "'attention_value'", ":", "float", "(", "a_v", ")", ",", "\n", "'sensitivity_value'", ":", "float", "(", "s_v", ")", ",", "\n", "'aptitude_value'", ":", "float", "(", "ap_v", ")", ",", "\n", "'primary_mood'", ":", "p_m", ",", "\n", "'secondary_mood'", ":", "s_m", ",", "\n", "'polarity_label'", ":", "po_l", ",", "\n", "'polarity_value'", ":", "float", "(", "po_v", ")", ",", "\n", "'semantics'", ":", "[", "s1", ",", "s2", ",", "s3", ",", "s4", ",", "s5", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.add_sentic_token_features": [[46, 51], ["token_data.copy.copy", "efpparse.get_sentic"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.get_sentic"], ["", "def", "add_sentic_token_features", "(", "token_data", ")", ":", "\n", "\t", "token_data", "=", "token_data", ".", "copy", "(", ")", "\n", "sentic", "=", "get_sentic", "(", "token_data", "[", "'text'", "]", ")", "\n", "token_data", "[", "'sentic'", "]", "=", "sentic", "\n", "return", "token_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.align_tokens": [[53, 66], ["set", "range", "wpt_tokens.char_to_token", "token[].add"], "function", ["None"], ["", "def", "align_tokens", "(", "tokens", ",", "wpt_tokens", ",", "seq_offset", "=", "0", ")", ":", "\n", "\t", "align_map", "=", "{", "}", "\n", "for", "token", "in", "tokens", ":", "\n", "\t\t", "token", "[", "'wpt_idxs'", "]", "=", "set", "(", ")", "\n", "start", "=", "token", "[", "'start'", "]", "\n", "end", "=", "token", "[", "'end'", "]", "\n", "for", "char_idx", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "\t\t\t", "sub_token_idx", "=", "wpt_tokens", ".", "char_to_token", "(", "char_idx", ",", "sequence_index", "=", "seq_offset", ")", "\n", "# White spaces have no token and will return None", "\n", "if", "sub_token_idx", "is", "not", "None", ":", "\n", "\t\t\t\t", "align_map", "[", "sub_token_idx", "]", "=", "token", "\n", "token", "[", "'wpt_idxs'", "]", ".", "add", "(", "sub_token_idx", ")", "\n", "", "", "", "return", "align_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.align_token_sequences": [[68, 89], ["efpparse.align_tokens", "efpparse.align_tokens", "range", "len", "aligned_tokens.append"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_tokens", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_tokens"], ["", "def", "align_token_sequences", "(", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ")", ":", "\n", "\t", "m_align_map", "=", "align_tokens", "(", "m_tokens", ",", "wpt_tokens", ")", "\n", "t_align_map", "=", "align_tokens", "(", "t_tokens", ",", "wpt_tokens", ",", "seq_offset", "=", "1", ")", "\n", "align_map", "=", "{", "**", "m_align_map", ",", "**", "t_align_map", "}", "\n", "aligned_tokens", "=", "[", "]", "\n", "for", "sub_token_idx", "in", "range", "(", "len", "(", "wpt_tokens", "[", "'input_ids'", "]", ")", ")", ":", "\n", "\t\t", "if", "sub_token_idx", "not", "in", "align_map", ":", "\n", "# CLS, SEP, or other special token", "\n", "\t\t\t", "aligned_token", "=", "{", "\n", "'pos'", ":", "'NONE'", ",", "\n", "'dep'", ":", "'NONE'", ",", "\n", "'head'", ":", "'NONE'", ",", "\n", "'sentic'", ":", "None", ",", "\n", "'text'", ":", "'[CLS]'", "if", "sub_token_idx", "==", "0", "else", "'[SEP]'", ",", "\n", "'wpt_idxs'", ":", "{", "sub_token_idx", "}", "\n", "}", "\n", "align_map", "[", "sub_token_idx", "]", "=", "aligned_token", "\n", "", "aligned_token", "=", "align_map", "[", "sub_token_idx", "]", "\n", "aligned_tokens", ".", "append", "(", "aligned_token", ")", "\n", "\n", "", "return", "align_map", ",", "aligned_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.flatten": [[91, 93], ["None"], "function", ["None"], ["", "def", "flatten", "(", "multi_list", ")", ":", "\n", "\t", "return", "[", "item", "for", "sub_list", "in", "multi_list", "for", "item", "in", "sub_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.create_adjacency_matrix": [[95, 104], ["numpy.eye", "range", "set", "efpparse.flatten"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten"], ["", "def", "create_adjacency_matrix", "(", "edges", ",", "size", ",", "t_map", ",", "r_map", ")", ":", "\n", "\t", "adj", "=", "np", ".", "eye", "(", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "input_idx", "in", "range", "(", "size", ")", ":", "\n", "\t\t", "input_idx_text", "=", "t_map", "[", "input_idx", "]", "\n", "i_edges", "=", "set", "(", "flatten", "(", "[", "r_map", "[", "e_txt", "]", "for", "e_txt", "in", "edges", "[", "input_idx_text", "]", "]", ")", ")", "\n", "for", "edge_idx", "in", "i_edges", ":", "\n", "\t\t\t", "adj", "[", "input_idx", ",", "edge_idx", "]", "=", "1.0", "\n", "adj", "[", "edge_idx", ",", "input_idx", "]", "=", "1.0", "\n", "", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.sentic_expand": [[106, 113], ["set", "set.add"], "function", ["None"], ["", "def", "sentic_expand", "(", "sentic_edges", ",", "expand_list", ")", ":", "\n", "\t", "new_edges", "=", "set", "(", "sentic_edges", ")", "\n", "for", "edge", "in", "sentic_edges", ":", "\n", "\t\t", "edge_info", "=", "senticnet5", ".", "senticnet", "[", "edge", "]", "\n", "for", "i", "in", "expand_list", ":", "\n", "\t\t\t", "new_edges", ".", "add", "(", "edge_info", "[", "i", "]", ")", "\n", "", "", "return", "new_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.create_edges": [[115, 195], ["len", "efpparse.align_token_sequences", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "lexical_edges[].add", "lexical_edges[].add", "collections.defaultdict", "collections.defaultdict.items", "collections.defaultdict.items", "token[].lower", "token[].lower", "lexical_edges[].add", "set", "set", "set", "r_map[].add", "range", "reverse_emotion_edges[].add", "reverse_emotion_edges[].add", "semantic_edges[].add", "efpparse.sentic_expand", "s_indices.union.union", "e_indices.union.union", "l_indices.union.union", "semantic_e.append", "emotion_e.append", "lexical_e.append"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_token_sequences", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.sentic_expand"], ["", "def", "create_edges", "(", "\n", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ",", "\n", "num_semantic_hops", "\n", ")", ":", "\n", "\t", "seq_len", "=", "len", "(", "wpt_tokens", "[", "'input_ids'", "]", ")", "\n", "align_map", ",", "a_tokens", "=", "align_token_sequences", "(", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ")", "\n", "\n", "semantic_edges", "=", "defaultdict", "(", "set", ")", "\n", "reverse_emotion_edges", "=", "defaultdict", "(", "set", ")", "\n", "lexical_edges", "=", "defaultdict", "(", "set", ")", "\n", "root_text", "=", "None", "\n", "r_map", "=", "defaultdict", "(", "set", ")", "\n", "t_map", "=", "{", "}", "\n", "\n", "for", "token", "in", "a_tokens", ":", "\n", "\t\t", "text", "=", "token", "[", "'text'", "]", ".", "lower", "(", ")", "\n", "head", "=", "token", "[", "'head'", "]", ".", "lower", "(", ")", "\n", "for", "wpt_idx", "in", "token", "[", "'wpt_idxs'", "]", ":", "\n", "\t\t\t", "t_map", "[", "wpt_idx", "]", "=", "text", "\n", "r_map", "[", "text", "]", ".", "add", "(", "wpt_idx", ")", "\n", "# pos = token['pos']", "\n", "", "dep", "=", "token", "[", "'dep'", "]", "\n", "# will be two roots with two sequences", "\n", "if", "dep", "==", "'ROOT'", ":", "\n", "\t\t\t", "root_text", "=", "text", "\n", "", "sentic", "=", "token", "[", "'sentic'", "]", "\n", "if", "sentic", "is", "not", "None", ":", "\n", "\t\t\t", "for", "sem", "in", "sentic", "[", "'semantics'", "]", ":", "\n", "\t\t\t\t", "semantic_edges", "[", "text", "]", ".", "add", "(", "sem", ")", "\n", "", "for", "i", "in", "range", "(", "num_semantic_hops", "-", "1", ")", ":", "\n", "\t\t\t\t", "semantic_edges", "[", "text", "]", "=", "sentic_expand", "(", "semantic_edges", "[", "text", "]", ",", "[", "8", ",", "9", ",", "10", ",", "11", ",", "12", "]", ")", "\n", "", "reverse_emotion_edges", "[", "sentic", "[", "'primary_mood'", "]", "]", ".", "add", "(", "text", ")", "\n", "reverse_emotion_edges", "[", "sentic", "[", "'secondary_mood'", "]", "]", ".", "add", "(", "text", ")", "\n", "\n", "", "lexical_edges", "[", "text", "]", ".", "add", "(", "head", ")", "\n", "", "lexical_edges", "[", "'[CLS]'", "]", ".", "add", "(", "root_text", ")", "\n", "lexical_edges", "[", "'[SEP]'", "]", ".", "add", "(", "root_text", ")", "\n", "\n", "# text -> emotion node -> other text in sentence with same emotions", "\n", "emotion_edges", "=", "defaultdict", "(", "set", ")", "\n", "for", "emotion", ",", "texts", "in", "reverse_emotion_edges", ".", "items", "(", ")", ":", "\n", "\t\t", "for", "text", "in", "texts", ":", "\n", "\t\t\t", "emotion_edges", "[", "text", "]", "=", "texts", "\n", "\n", "", "", "semantic_e", "=", "[", "]", "\n", "emotion_e", "=", "[", "]", "\n", "lexical_e", "=", "[", "]", "\n", "for", "input_idx_text", ",", "input_indices", "in", "r_map", ".", "items", "(", ")", ":", "\n", "\t\t", "s_indices", "=", "set", "(", ")", "\n", "e_indices", "=", "set", "(", ")", "\n", "l_indices", "=", "set", "(", ")", "\n", "for", "e_txt", "in", "semantic_edges", "[", "input_idx_text", "]", ":", "\n", "\t\t\t", "if", "e_txt", "in", "r_map", ":", "\n", "\t\t\t\t", "r_indices", "=", "r_map", "[", "e_txt", "]", "\n", "s_indices", "=", "s_indices", ".", "union", "(", "r_indices", ")", "\n", "", "", "for", "e_txt", "in", "emotion_edges", "[", "input_idx_text", "]", ":", "\n", "\t\t\t", "if", "e_txt", "in", "r_map", ":", "\n", "\t\t\t\t", "r_indices", "=", "r_map", "[", "e_txt", "]", "\n", "e_indices", "=", "e_indices", ".", "union", "(", "r_indices", ")", "\n", "", "", "for", "e_txt", "in", "lexical_edges", "[", "input_idx_text", "]", ":", "\n", "\t\t\t", "if", "e_txt", "in", "r_map", ":", "\n", "\t\t\t\t", "r_indices", "=", "r_map", "[", "e_txt", "]", "\n", "l_indices", "=", "l_indices", ".", "union", "(", "r_indices", ")", "\n", "", "", "for", "idx", "in", "input_indices", ":", "\n", "\t\t\t", "for", "r_idx", "in", "s_indices", ":", "\n", "\t\t\t\t", "if", "idx", "!=", "r_idx", ":", "\n", "\t\t\t\t\t", "semantic_e", ".", "append", "(", "(", "idx", ",", "r_idx", ")", ")", "\n", "", "", "for", "r_idx", "in", "e_indices", ":", "\n", "\t\t\t\t", "if", "idx", "!=", "r_idx", ":", "\n", "\t\t\t\t\t", "emotion_e", ".", "append", "(", "(", "idx", ",", "r_idx", ")", ")", "\n", "", "", "for", "r_idx", "in", "l_indices", ":", "\n", "\t\t\t\t", "if", "idx", "!=", "r_idx", ":", "\n", "\t\t\t\t\t", "lexical_e", ".", "append", "(", "(", "idx", ",", "r_idx", ")", ")", "\n", "\n", "", "", "", "", "edges", "=", "{", "\n", "'semantic'", ":", "semantic_e", ",", "\n", "'emotion'", ":", "emotion_e", ",", "\n", "'lexical'", ":", "lexical_e", ",", "\n", "}", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.read_jsonl": [[197, 204], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.get_token_features": [[206, 216], ["len"], "function", ["None"], ["", "", "", "", "def", "get_token_features", "(", "token", ")", ":", "\n", "\t", "token_data", "=", "{", "\n", "'text'", ":", "token", ".", "text", ",", "\n", "'pos'", ":", "token", ".", "pos_", ",", "\n", "'dep'", ":", "token", ".", "dep_", ",", "\n", "'head'", ":", "token", ".", "head", ".", "text", ",", "\n", "'start'", ":", "token", ".", "idx", ",", "\n", "'end'", ":", "token", ".", "idx", "+", "len", "(", "token", ".", "text", ")", ",", "\n", "}", "\n", "return", "token_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.parse_tweet": [[218, 251], ["ex_text.strip().replace().replace.strip().replace().replace", "ex[].items", "efpparse.get_token_features", "efpparse.add_sentic_token_features", "tokenizer", "efpparse.create_edges", "json.dumps", "ex_text.strip().replace().replace.strip().replace", "nlp", "efpparse.add_sentic_token_features", "ex_text.strip().replace().replace.strip"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.get_token_features", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.add_sentic_token_features", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.create_edges", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.add_sentic_token_features"], ["", "def", "parse_tweet", "(", "ex", ":", "dict", ")", ":", "\n", "\t", "ex_text", "=", "ex", "[", "'full_text'", "]", "if", "'full_text'", "in", "ex", "else", "ex", "[", "'text'", "]", "\n", "ex_text", "=", "ex_text", ".", "strip", "(", ")", ".", "replace", "(", "'\\r'", ",", "' '", ")", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "tweet_raw_parse", "=", "[", "get_token_features", "(", "x", ")", "for", "x", "in", "nlp", "(", "ex_text", ")", "]", "\n", "tweet_parse", "=", "[", "add_sentic_token_features", "(", "x", ")", "for", "x", "in", "tweet_raw_parse", "]", "\n", "ex_f_examples", "=", "{", "}", "\n", "for", "f_id", ",", "f_label", "in", "ex", "[", "label_name", "]", ".", "items", "(", ")", ":", "\n", "\t\t", "frame", "=", "frames", "[", "f_id", "]", "\n", "frame_text", "=", "frame", "[", "'text'", "]", "\n", "token_data", "=", "tokenizer", "(", "\n", "frame_text", ",", "\n", "ex_text", "\n", ")", "\n", "\n", "f_parse", "=", "[", "add_sentic_token_features", "(", "x", ")", "for", "x", "in", "frame", "[", "'parse'", "]", "]", "\n", "\n", "ex_edges", "=", "create_edges", "(", "\n", "f_parse", ",", "\n", "tweet_parse", ",", "\n", "token_data", ",", "\n", "num_semantic_hops", "\n", ")", "\n", "f_example", "=", "{", "\n", "# 'input_ids': token_data['input_ids'],", "\n", "# 'attention_mask': token_data['attention_mask'],", "\n", "'edges'", ":", "ex_edges", ",", "\n", "}", "\n", "# if 'token_type_ids' in token_data:", "\n", "# \tf_example['token_type_ids'] = token_data['token_type_ids']", "\n", "ex_f_examples", "[", "f_id", "]", "=", "f_example", "\n", "", "ex", "[", "'f_examples'", "]", "=", "ex_f_examples", "\n", "ex_json_data", "=", "json", ".", "dumps", "(", "ex", ")", "+", "'\\n'", "\n", "return", "ex_json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.parse_tweets": [[253, 263], ["open", "multiprocessing.Pool", "tqdm.tqdm", "p.imap_unordered", "f.write", "efpparse.read_jsonl"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "def", "parse_tweets", "(", "tweet_path", ":", "str", ",", "num_processes", ":", "int", ",", "output_path", ":", "str", ")", ":", "\n", "# for ex in tqdm(read_jsonl(tweet_path)):", "\n", "\t", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "with", "Pool", "(", "processes", "=", "num_processes", ")", "as", "p", ":", "\n", "\t\t\t", "for", "ex_jsonl", "in", "tqdm", "(", "\n", "p", ".", "imap_unordered", "(", "parse_tweet", ",", "read_jsonl", "(", "tweet_path", ")", ")", ",", "\n", "mininterval", "=", "1.0", ",", "\n", "total", "=", "8161354", "\n", ")", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "ex_jsonl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.efpparse.main": [[265, 292], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "spacy.load", "transformers.AutoTokenizer.from_pretrained", "efpparse.parse_tweets", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.parse_tweets"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--frame_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--label_name'", ",", "default", "=", "'candidates'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--tokenizer'", ",", "default", "=", "'digitalepidemiologylab/covid-twitter-bert-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model_name'", ",", "default", "=", "'en_core_web_sm'", ")", "\n", "parser", ".", "add_argument", "(", "'-sh'", ",", "'--num_semantic_hops'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--num_processes'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# for multiprocessing pool", "\n", "global", "tokenizer", "\n", "global", "nlp", "\n", "global", "frames", "\n", "global", "num_semantic_hops", "\n", "global", "label_name", "\n", "\n", "num_semantic_hops", "=", "args", ".", "num_semantic_hops", "\n", "label_name", "=", "args", ".", "label_name", "\n", "\n", "with", "open", "(", "args", ".", "frame_path", ")", "as", "f", ":", "\n", "\t\t", "frames", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "nlp", "=", "spacy", ".", "load", "(", "args", ".", "model_name", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "tokenizer", ")", "\n", "parse_tweets", "(", "args", ".", "input_path", ",", "args", ".", "num_processes", ",", "args", ".", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.read_file": [[10, 14], ["open", "json.load"], "function", ["None"], ["def", "read_file", "(", "file_path", ")", ":", "\n", "\t", "with", "open", "(", "file_path", ")", "as", "f", ":", "\n", "\t\t", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_errors": [[16, 23], ["collections.defaultdict", "error[].replace"], "function", ["None"], ["", "def", "invert_errors", "(", "errors", ")", ":", "\n", "\t", "inv", "=", "defaultdict", "(", "dict", ")", "\n", "for", "error", "in", "errors", ":", "\n", "\t\t", "r_id", "=", "error", "[", "'resource_id'", "]", "\n", "e_type", "=", "error", "[", "'detail'", "]", ".", "replace", "(", "f': [{r_id}].'", ",", "''", ")", "\n", "inv", "[", "r_id", "]", "[", "e_type", "]", "=", "error", "\n", "", "return", "inv", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_ids": [[25, 33], ["None"], "function", ["None"], ["", "def", "invert_ids", "(", "items", ")", ":", "\n", "\t", "inv", "=", "{", "}", "\n", "for", "item", "in", "items", ":", "\n", "\t\t", "item_id", "=", "item", "[", "'id'", "]", "if", "'id'", "in", "item", "else", "item", "[", "'media_key'", "]", "\n", "inv", "[", "item_id", "]", "=", "item", "\n", "if", "'username'", "in", "item", ":", "\n", "\t\t\t", "inv", "[", "item", "[", "'username'", "]", "]", "=", "item", "\n", "", "", "return", "inv", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_includes": [[35, 40], ["includes.items", "parse_raw_tweet.invert_ids"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_ids"], ["", "def", "invert_includes", "(", "includes", ")", ":", "\n", "\t", "inv", "=", "{", "}", "\n", "for", "key", ",", "vals", "in", "includes", ".", "items", "(", ")", ":", "\n", "\t\t", "inv", "[", "key", "]", "=", "invert_ids", "(", "vals", ")", "\n", "", "return", "inv", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.parse_tweet": [[42, 75], ["tweet[].items"], "function", ["None"], ["", "def", "parse_tweet", "(", "tweet", ",", "inv_includes", ",", "inv_errors", ")", ":", "\n", "\t", "author_id", "=", "tweet", "[", "'author_id'", "]", "\n", "if", "author_id", "in", "inv_errors", ":", "\n", "\t\t", "author", "=", "inv_errors", "[", "author_id", "]", "\n", "", "else", ":", "\n", "\t\t", "author", "=", "inv_includes", "[", "'users'", "]", "[", "author_id", "]", "\n", "", "tweet", "[", "'author'", "]", "=", "author", "\n", "if", "'entities'", "not", "in", "tweet", ":", "\n", "\t\t", "tweet", "[", "'entities'", "]", "=", "{", "}", "\n", "", "for", "e_type", ",", "e_vals", "in", "tweet", "[", "'entities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "e_type", "==", "'mentions'", ":", "\n", "\t\t\t", "for", "e", "in", "e_vals", ":", "\n", "\t\t\t\t", "if", "'username'", "in", "e", ":", "\n", "\t\t\t\t\t", "e_username", "=", "e", "[", "'username'", "]", "\n", "if", "e_username", "in", "inv_errors", ":", "\n", "\t\t\t\t\t\t", "e_user", "=", "inv_errors", "[", "e_username", "]", "\n", "", "elif", "e_username", "in", "inv_includes", "[", "'users'", "]", ":", "\n", "\t\t\t\t\t\t", "e_user", "=", "inv_includes", "[", "'users'", "]", "[", "e_username", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "e_user", "=", "None", "\n", "", "e", "[", "'user'", "]", "=", "e_user", "\n", "", "", "", "", "if", "'referenced_tweets'", "not", "in", "tweet", ":", "\n", "\t\t", "tweet", "[", "'referenced_tweets'", "]", "=", "[", "]", "\n", "", "for", "ref_tweet", "in", "tweet", "[", "'referenced_tweets'", "]", ":", "\n", "\t\t", "r_id", "=", "ref_tweet", "[", "'id'", "]", "\n", "if", "r_id", "in", "inv_errors", ":", "\n", "\t\t\t", "r_tweet", "=", "inv_errors", "[", "r_id", "]", "\n", "", "elif", "r_id", "in", "inv_includes", "[", "'tweets'", "]", ":", "\n", "\t\t\t", "r_tweet", "=", "inv_includes", "[", "'tweets'", "]", "[", "r_id", "]", "\n", "", "else", ":", "\n", "\t\t\t", "r_tweet", "=", "None", "\n", "", "ref_tweet", "[", "'data'", "]", "=", "r_tweet", "\n", "", "return", "tweet", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.parse_tweets": [[77, 93], ["parse_raw_tweet.invert_includes", "parse_raw_tweet.invert_errors", "parse_raw_tweet.parse_tweet", "pprint.pprint", "pprint.pprint"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_includes", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.invert_errors", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.parse_tweet"], ["", "def", "parse_tweets", "(", "tweets", ")", ":", "\n", "\t", "if", "'data'", "not", "in", "tweets", ":", "\n", "\t\t", "return", "\n", "", "t_data", "=", "tweets", "[", "'data'", "]", "\n", "if", "'includes'", "not", "in", "tweets", ":", "\n", "\t\t", "tweets", "[", "'includes'", "]", "=", "{", "}", "\n", "", "if", "'errors'", "not", "in", "tweets", ":", "\n", "\t\t", "tweets", "[", "'errors'", "]", "=", "[", "]", "\n", "", "t_includes", "=", "invert_includes", "(", "tweets", "[", "'includes'", "]", ")", "\n", "t_errors", "=", "invert_errors", "(", "tweets", "[", "'errors'", "]", ")", "\n", "for", "tweet", "in", "t_data", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "yield", "parse_tweet", "(", "tweet", ",", "t_includes", ",", "t_errors", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "pprint", "(", "e", ")", "\n", "pprint", "(", "tweet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.parse_tweet_file": [[95, 102], ["parse_raw_tweet.read_file", "parse_raw_tweet.parse_tweets", "json.dumps", "parsed_tweets.append"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.read_file", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.parse_tweets"], ["", "", "", "def", "parse_tweet_file", "(", "file_path", ")", ":", "\n", "\t", "tweets", "=", "read_file", "(", "file_path", ")", "\n", "parsed_tweets", "=", "[", "]", "\n", "for", "tweet", "in", "parse_tweets", "(", "tweets", ")", ":", "\n", "\t\t", "json_data", "=", "json", ".", "dumps", "(", "tweet", ")", "\n", "parsed_tweets", ".", "append", "(", "json_data", ")", "\n", "", "return", "parsed_tweets", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.parse_raw_tweet.main": [[104, 118], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "open", "os.listdir", "x.endswith", "multiprocessing.Pool", "tqdm.tqdm", "p.imap", "len", "f.write"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-ps'", ",", "'--processes'", ",", "default", "=", "8", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "files", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "input_path", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "args", ".", "input_path", ")", "if", "x", ".", "endswith", "(", "'.json'", ")", "]", "\n", "with", "open", "(", "args", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "with", "Pool", "(", "processes", "=", "args", ".", "processes", ")", "as", "p", ":", "\n", "\t\t\t", "for", "tweets", "in", "tqdm", "(", "p", ".", "imap", "(", "parse_tweet_file", ",", "files", ")", ",", "total", "=", "len", "(", "files", ")", ")", ":", "\n", "\t\t\t\t", "for", "tweet", "in", "tweets", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "tweet", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.fparse.get_token_features": [[10, 20], ["len"], "function", ["None"], ["def", "get_token_features", "(", "token", ")", ":", "\n", "\t", "token_data", "=", "{", "\n", "'text'", ":", "token", ".", "text", ",", "\n", "'pos'", ":", "token", ".", "pos_", ",", "\n", "'dep'", ":", "token", ".", "dep_", ",", "\n", "'head'", ":", "token", ".", "head", ".", "text", ",", "\n", "'start'", ":", "token", ".", "idx", ",", "\n", "'end'", ":", "token", ".", "idx", "+", "len", "(", "token", ".", "text", ")", ",", "\n", "}", "\n", "return", "token_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.fparse.read_jsonl": [[22, 29], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.fparse.write_jsonl": [[31, 36], ["open", "json.dumps", "f.write"], "function", ["None"], ["", "", "", "", "def", "write_jsonl", "(", "data", ",", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "example", "in", "data", ":", "\n", "\t\t\t", "json_data", "=", "json", ".", "dumps", "(", "example", ")", "\n", "f", ".", "write", "(", "json_data", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.fparse.parse_frames": [[38, 46], ["tqdm.tqdm", "open", "json.load", "json.load.items", "fparse.get_token_features", "nlp"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.get_token_features"], ["", "", "", "def", "parse_frames", "(", "frame_path", ",", "nlp", ")", ":", "\n", "\t", "with", "open", "(", "frame_path", ")", "as", "f", ":", "\n", "\t\t", "frames", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "f_id", ",", "frame", "in", "tqdm", "(", "frames", ".", "items", "(", ")", ")", ":", "\n", "\t\t", "frame_text", "=", "frame", "[", "'text'", "]", "\n", "frame_parse", "=", "[", "get_token_features", "(", "x", ")", "for", "x", "in", "nlp", "(", "frame_text", ")", "]", "\n", "frame", "[", "'parse'", "]", "=", "frame_parse", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.fparse.main": [[48, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "spacy.load", "fparse.parse_frames", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.fparse.parse_frames"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model_name'", ",", "default", "=", "'en_core_web_sm'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "spacy_model", "=", "spacy", ".", "load", "(", "args", ".", "model_name", ")", "\n", "frames", "=", "parse_frames", "(", "args", ".", "input_path", ",", "spacy_model", ")", "\n", "with", "open", "(", "args", ".", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "frames", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.get_sentic": [[13, 34], ["word_text.lower.lower", "float", "float", "float", "float", "float"], "function", ["None"], ["def", "get_sentic", "(", "word_text", ")", ":", "\n", "\t", "word_text", "=", "word_text", ".", "lower", "(", ")", "\n", "if", "word_text", "==", "'coronavirus'", "or", "word_text", "==", "'covid-19'", "or", "word_text", "==", "'covid'", "or", "word_text", "==", "'covid19'", ":", "\n", "\t\t", "word_text", "=", "'virus'", "\n", "", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t", "word_text", "=", "word_text", "[", ":", "-", "1", "]", "\n", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t\t", "word_text", "=", "word_text", "[", ":", "-", "1", "]", "\n", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t\t\t", "return", "None", "\n", "", "", "", "p_v", ",", "a_v", ",", "s_v", ",", "ap_v", ",", "p_m", ",", "s_m", ",", "po_l", ",", "po_v", ",", "s1", ",", "s2", ",", "s3", ",", "s4", ",", "s5", "=", "senticnet5", ".", "senticnet", "[", "word_text", "]", "\n", "return", "{", "\n", "'pleasantness_value'", ":", "float", "(", "p_v", ")", ",", "\n", "'attention_value'", ":", "float", "(", "a_v", ")", ",", "\n", "'sensitivity_value'", ":", "float", "(", "s_v", ")", ",", "\n", "'aptitude_value'", ":", "float", "(", "ap_v", ")", ",", "\n", "'primary_mood'", ":", "p_m", ",", "\n", "'secondary_mood'", ":", "s_m", ",", "\n", "'polarity_label'", ":", "po_l", ",", "\n", "'polarity_value'", ":", "float", "(", "po_v", ")", ",", "\n", "'semantics'", ":", "[", "s1", ",", "s2", ",", "s3", ",", "s4", ",", "s5", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.add_sentic_token_features": [[37, 42], ["token_data.copy.copy", "eparse.get_sentic"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.get_sentic"], ["", "def", "add_sentic_token_features", "(", "token_data", ")", ":", "\n", "\t", "token_data", "=", "token_data", ".", "copy", "(", ")", "\n", "sentic", "=", "get_sentic", "(", "token_data", "[", "'text'", "]", ")", "\n", "token_data", "[", "'sentic'", "]", "=", "sentic", "\n", "return", "token_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.align_tokens": [[44, 57], ["set", "range", "wpt_tokens.char_to_token", "token[].add"], "function", ["None"], ["", "def", "align_tokens", "(", "tokens", ",", "wpt_tokens", ",", "seq_offset", "=", "0", ")", ":", "\n", "\t", "align_map", "=", "{", "}", "\n", "for", "token", "in", "tokens", ":", "\n", "\t\t", "token", "[", "'wpt_idxs'", "]", "=", "set", "(", ")", "\n", "start", "=", "token", "[", "'start'", "]", "\n", "end", "=", "token", "[", "'end'", "]", "\n", "for", "char_idx", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "\t\t\t", "sub_token_idx", "=", "wpt_tokens", ".", "char_to_token", "(", "char_idx", ",", "sequence_index", "=", "seq_offset", ")", "\n", "# White spaces have no token and will return None", "\n", "if", "sub_token_idx", "is", "not", "None", ":", "\n", "\t\t\t\t", "align_map", "[", "sub_token_idx", "]", "=", "token", "\n", "token", "[", "'wpt_idxs'", "]", ".", "add", "(", "sub_token_idx", ")", "\n", "", "", "", "return", "align_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.align_token_sequences": [[59, 80], ["eparse.align_tokens", "eparse.align_tokens", "range", "len", "aligned_tokens.append"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_tokens", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_tokens"], ["", "def", "align_token_sequences", "(", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ")", ":", "\n", "\t", "m_align_map", "=", "align_tokens", "(", "m_tokens", ",", "wpt_tokens", ")", "\n", "t_align_map", "=", "align_tokens", "(", "t_tokens", ",", "wpt_tokens", ",", "seq_offset", "=", "1", ")", "\n", "align_map", "=", "{", "**", "m_align_map", ",", "**", "t_align_map", "}", "\n", "aligned_tokens", "=", "[", "]", "\n", "for", "sub_token_idx", "in", "range", "(", "len", "(", "wpt_tokens", "[", "'input_ids'", "]", ")", ")", ":", "\n", "\t\t", "if", "sub_token_idx", "not", "in", "align_map", ":", "\n", "# CLS, SEP, or other special token", "\n", "\t\t\t", "aligned_token", "=", "{", "\n", "'pos'", ":", "'NONE'", ",", "\n", "'dep'", ":", "'NONE'", ",", "\n", "'head'", ":", "'NONE'", ",", "\n", "'sentic'", ":", "None", ",", "\n", "'text'", ":", "'[CLS]'", "if", "sub_token_idx", "==", "0", "else", "'[SEP]'", ",", "\n", "'wpt_idxs'", ":", "{", "sub_token_idx", "}", "\n", "}", "\n", "align_map", "[", "sub_token_idx", "]", "=", "aligned_token", "\n", "", "aligned_token", "=", "align_map", "[", "sub_token_idx", "]", "\n", "aligned_tokens", ".", "append", "(", "aligned_token", ")", "\n", "\n", "", "return", "align_map", ",", "aligned_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.flatten": [[82, 84], ["None"], "function", ["None"], ["", "def", "flatten", "(", "multi_list", ")", ":", "\n", "\t", "return", "[", "item", "for", "sub_list", "in", "multi_list", "for", "item", "in", "sub_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.create_adjacency_matrix": [[86, 95], ["numpy.eye", "range", "set", "eparse.flatten"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten"], ["", "def", "create_adjacency_matrix", "(", "edges", ",", "size", ",", "t_map", ",", "r_map", ")", ":", "\n", "\t", "adj", "=", "np", ".", "eye", "(", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "input_idx", "in", "range", "(", "size", ")", ":", "\n", "\t\t", "input_idx_text", "=", "t_map", "[", "input_idx", "]", "\n", "i_edges", "=", "set", "(", "flatten", "(", "[", "r_map", "[", "e_txt", "]", "for", "e_txt", "in", "edges", "[", "input_idx_text", "]", "]", ")", ")", "\n", "for", "edge_idx", "in", "i_edges", ":", "\n", "\t\t\t", "adj", "[", "input_idx", ",", "edge_idx", "]", "=", "1.0", "\n", "adj", "[", "edge_idx", ",", "input_idx", "]", "=", "1.0", "\n", "", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.sentic_expand": [[97, 104], ["set", "set.add"], "function", ["None"], ["", "def", "sentic_expand", "(", "sentic_edges", ",", "expand_list", ")", ":", "\n", "\t", "new_edges", "=", "set", "(", "sentic_edges", ")", "\n", "for", "edge", "in", "sentic_edges", ":", "\n", "\t\t", "edge_info", "=", "senticnet5", ".", "senticnet", "[", "edge", "]", "\n", "for", "i", "in", "expand_list", ":", "\n", "\t\t\t", "new_edges", ".", "add", "(", "edge_info", "[", "i", "]", ")", "\n", "", "", "return", "new_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.create_edges": [[106, 183], ["len", "eparse.align_token_sequences", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "lexical_edges[].add", "lexical_edges[].add", "collections.defaultdict", "collections.defaultdict.items", "numpy.eye", "numpy.eye", "numpy.eye", "collections.defaultdict.items", "token[].lower", "token[].lower", "lexical_edges[].add", "list", "np.eye.tolist", "np.eye.tolist", "np.eye.tolist", "r_map[].add", "range", "reverse_emotion_edges[].add", "reverse_emotion_edges[].add", "semantic_edges[].add", "eparse.sentic_expand", "list", "list", "list"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_token_sequences", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.sentic_expand"], ["", "def", "create_edges", "(", "\n", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ",", "\n", "num_semantic_hops", "\n", ")", ":", "\n", "\t", "seq_len", "=", "len", "(", "wpt_tokens", "[", "'input_ids'", "]", ")", "\n", "align_map", ",", "a_tokens", "=", "align_token_sequences", "(", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ")", "\n", "\n", "semantic_edges", "=", "defaultdict", "(", "set", ")", "\n", "reverse_emotion_edges", "=", "defaultdict", "(", "set", ")", "\n", "lexical_edges", "=", "defaultdict", "(", "set", ")", "\n", "root_text", "=", "None", "\n", "r_map", "=", "defaultdict", "(", "set", ")", "\n", "t_map", "=", "{", "}", "\n", "\n", "for", "token", "in", "a_tokens", ":", "\n", "\t\t", "text", "=", "token", "[", "'text'", "]", ".", "lower", "(", ")", "\n", "head", "=", "token", "[", "'head'", "]", ".", "lower", "(", ")", "\n", "for", "wpt_idx", "in", "token", "[", "'wpt_idxs'", "]", ":", "\n", "\t\t\t", "t_map", "[", "wpt_idx", "]", "=", "text", "\n", "r_map", "[", "text", "]", ".", "add", "(", "wpt_idx", ")", "\n", "# pos = token['pos']", "\n", "", "dep", "=", "token", "[", "'dep'", "]", "\n", "# will be two roots with two sequences", "\n", "if", "dep", "==", "'ROOT'", ":", "\n", "\t\t\t", "root_text", "=", "text", "\n", "", "sentic", "=", "token", "[", "'sentic'", "]", "\n", "if", "sentic", "is", "not", "None", ":", "\n", "\t\t\t", "for", "sem", "in", "sentic", "[", "'semantics'", "]", ":", "\n", "\t\t\t\t", "semantic_edges", "[", "text", "]", ".", "add", "(", "sem", ")", "\n", "", "for", "i", "in", "range", "(", "num_semantic_hops", "-", "1", ")", ":", "\n", "\t\t\t\t", "semantic_edges", "[", "text", "]", "=", "sentic_expand", "(", "semantic_edges", "[", "text", "]", ",", "[", "8", ",", "9", ",", "10", ",", "11", ",", "12", "]", ")", "\n", "", "reverse_emotion_edges", "[", "sentic", "[", "'primary_mood'", "]", "]", ".", "add", "(", "text", ")", "\n", "reverse_emotion_edges", "[", "sentic", "[", "'secondary_mood'", "]", "]", ".", "add", "(", "text", ")", "\n", "\n", "", "lexical_edges", "[", "text", "]", ".", "add", "(", "head", ")", "\n", "", "lexical_edges", "[", "'[CLS]'", "]", ".", "add", "(", "root_text", ")", "\n", "lexical_edges", "[", "'[SEP]'", "]", ".", "add", "(", "root_text", ")", "\n", "\n", "# text -> emotion node -> other text in sentence with same emotions", "\n", "emotion_edges", "=", "defaultdict", "(", "set", ")", "\n", "for", "emotion", ",", "texts", "in", "reverse_emotion_edges", ".", "items", "(", ")", ":", "\n", "\t\t", "for", "text", "in", "texts", ":", "\n", "\t\t\t", "emotion_edges", "[", "text", "]", "=", "texts", "\n", "\n", "", "", "semantic_adj", "=", "np", ".", "eye", "(", "seq_len", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "emotion_adj", "=", "np", ".", "eye", "(", "seq_len", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lexical_adj", "=", "np", ".", "eye", "(", "seq_len", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "input_idx_text", ",", "input_indices", "in", "r_map", ".", "items", "(", ")", ":", "\n", "\t\t", "input_indices", "=", "list", "(", "input_indices", ")", "\n", "for", "e_txt", "in", "semantic_edges", "[", "input_idx_text", "]", ":", "\n", "\t\t\t", "if", "e_txt", "in", "r_map", ":", "\n", "\t\t\t\t", "r_indices", "=", "list", "(", "r_map", "[", "e_txt", "]", ")", "\n", "for", "idx", "in", "input_indices", ":", "\n", "\t\t\t\t\t", "for", "r_idx", "in", "r_indices", ":", "\n", "\t\t\t\t\t\t", "semantic_adj", "[", "idx", ",", "r_idx", "]", "=", "1.0", "\n", "semantic_adj", "[", "r_idx", ",", "idx", "]", "=", "1.0", "\n", "", "", "", "", "for", "e_txt", "in", "emotion_edges", "[", "input_idx_text", "]", ":", "\n", "\t\t\t", "if", "e_txt", "in", "r_map", ":", "\n", "\t\t\t\t", "r_indices", "=", "list", "(", "r_map", "[", "e_txt", "]", ")", "\n", "for", "idx", "in", "input_indices", ":", "\n", "\t\t\t\t\t", "for", "r_idx", "in", "r_indices", ":", "\n", "\t\t\t\t\t\t", "emotion_adj", "[", "idx", ",", "r_idx", "]", "=", "1.0", "\n", "emotion_adj", "[", "r_idx", ",", "idx", "]", "=", "1.0", "\n", "", "", "", "", "for", "e_txt", "in", "lexical_edges", "[", "input_idx_text", "]", ":", "\n", "\t\t\t", "if", "e_txt", "in", "r_map", ":", "\n", "\t\t\t\t", "r_indices", "=", "list", "(", "r_map", "[", "e_txt", "]", ")", "\n", "for", "idx", "in", "input_indices", ":", "\n", "\t\t\t\t\t", "for", "r_idx", "in", "r_indices", ":", "\n", "\t\t\t\t\t\t", "lexical_adj", "[", "idx", ",", "r_idx", "]", "=", "1.0", "\n", "lexical_adj", "[", "r_idx", ",", "idx", "]", "=", "1.0", "\n", "\n", "", "", "", "", "", "edges", "=", "{", "\n", "'semantic'", ":", "semantic_adj", ".", "tolist", "(", ")", ",", "\n", "'emotion'", ":", "emotion_adj", ".", "tolist", "(", ")", ",", "\n", "'lexical'", ":", "lexical_adj", ".", "tolist", "(", ")", ",", "\n", "}", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.read_jsonl": [[185, 192], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.write_jsonl": [[194, 199], ["open", "json.dumps", "f.write"], "function", ["None"], ["", "", "", "", "def", "write_jsonl", "(", "data", ",", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "example", "in", "data", ":", "\n", "\t\t\t", "json_data", "=", "json", ".", "dumps", "(", "example", ")", "\n", "f", ".", "write", "(", "json_data", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.parse_tweets": [[201, 233], ["tqdm.tqdm", "eparse.read_jsonl", "ex_text.strip().replace().replace.strip().replace().replace", "ex[].items", "tokenizer", "eparse.create_edges", "ex_text.strip().replace().replace.strip().replace", "eparse.add_sentic_token_features", "eparse.add_sentic_token_features", "ex_text.strip().replace().replace.strip"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.create_edges", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.add_sentic_token_features", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.add_sentic_token_features"], ["", "", "", "def", "parse_tweets", "(", "tweet_path", ",", "tokenizer", ",", "num_semantic_hops", ",", "label_name", ",", "frames", ")", ":", "\n", "\t", "for", "ex", "in", "tqdm", "(", "read_jsonl", "(", "tweet_path", ")", ")", ":", "\n", "\t\t", "ex_text", "=", "ex", "[", "'full_text'", "]", "if", "'full_text'", "in", "ex", "else", "ex", "[", "'text'", "]", "\n", "ex_text", "=", "ex_text", ".", "strip", "(", ")", ".", "replace", "(", "'\\r'", ",", "' '", ")", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "ex_f_examples", "=", "{", "}", "\n", "for", "f_id", ",", "f_label", "in", "ex", "[", "label_name", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "frame", "=", "frames", "[", "f_id", "]", "\n", "frame_text", "=", "frame", "[", "'text'", "]", "\n", "token_data", "=", "tokenizer", "(", "\n", "frame_text", ",", "\n", "ex_text", "\n", ")", "\n", "\n", "tweet_parse", "=", "[", "add_sentic_token_features", "(", "x", ")", "for", "x", "in", "ex", "[", "'parse'", "]", "]", "\n", "f_parse", "=", "[", "add_sentic_token_features", "(", "x", ")", "for", "x", "in", "frame", "[", "'parse'", "]", "]", "\n", "\n", "ex_edges", "=", "create_edges", "(", "\n", "f_parse", ",", "\n", "tweet_parse", ",", "\n", "token_data", ",", "\n", "num_semantic_hops", "\n", ")", "\n", "f_example", "=", "{", "\n", "'input_ids'", ":", "token_data", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "token_data", "[", "'attention_mask'", "]", ",", "\n", "'edges'", ":", "ex_edges", ",", "\n", "}", "\n", "if", "'token_type_ids'", "in", "token_data", ":", "\n", "\t\t\t\t", "f_example", "[", "'token_type_ids'", "]", "=", "token_data", "[", "'token_type_ids'", "]", "\n", "", "ex_f_examples", "[", "f_id", "]", "=", "f_example", "\n", "", "ex", "[", "'f_examples'", "]", "=", "ex_f_examples", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.eparse.main": [[235, 252], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "transformers.AutoTokenizer.from_pretrained", "eparse.write_jsonl", "open", "json.load", "eparse.parse_tweets"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.write_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.parse_tweets"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--frame_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--label_name'", ",", "default", "=", "'labels'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--tokenizer'", ",", "default", "=", "'digitalepidemiologylab/covid-twitter-bert-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'-sh'", ",", "'--num_semantic_hops'", ",", "default", "=", "3", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "frame_path", ")", "as", "f", ":", "\n", "\t\t", "frames", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "tokenizer", ")", "\n", "write_jsonl", "(", "\n", "parse_tweets", "(", "args", ".", "input_path", ",", "tokenizer", ",", "args", ".", "num_semantic_hops", ",", "args", ".", "label_name", ",", "frames", ")", ",", "\n", "args", ".", "output_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.get_token_features": [[10, 20], ["len"], "function", ["None"], ["def", "get_token_features", "(", "token", ")", ":", "\n", "\t", "token_data", "=", "{", "\n", "'text'", ":", "token", ".", "text", ",", "\n", "'pos'", ":", "token", ".", "pos_", ",", "\n", "'dep'", ":", "token", ".", "dep_", ",", "\n", "'head'", ":", "token", ".", "head", ".", "text", ",", "\n", "'start'", ":", "token", ".", "idx", ",", "\n", "'end'", ":", "token", ".", "idx", "+", "len", "(", "token", ".", "text", ")", ",", "\n", "}", "\n", "return", "token_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.read_jsonl": [[22, 29], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.write_jsonl": [[31, 36], ["open", "json.dumps", "f.write"], "function", ["None"], ["", "", "", "", "def", "write_jsonl", "(", "data", ",", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "example", "in", "data", ":", "\n", "\t\t\t", "json_data", "=", "json", ".", "dumps", "(", "example", ")", "\n", "f", ".", "write", "(", "json_data", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.parse_tweets": [[38, 45], ["tqdm.tqdm", "tparse.read_jsonl", "ex_text.strip().replace().replace.strip().replace().replace", "tparse.get_token_features", "ex_text.strip().replace().replace.strip().replace", "nlp", "ex_text.strip().replace().replace.strip"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.get_token_features"], ["", "", "", "def", "parse_tweets", "(", "tweet_path", ",", "nlp", ")", ":", "\n", "\t", "for", "ex", "in", "tqdm", "(", "read_jsonl", "(", "tweet_path", ")", ")", ":", "\n", "\t\t", "ex_text", "=", "ex", "[", "'full_text'", "]", "if", "'full_text'", "in", "ex", "else", "ex", "[", "'text'", "]", "\n", "ex_text", "=", "ex_text", ".", "strip", "(", ")", ".", "replace", "(", "'\\r'", ",", "' '", ")", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "tweet_parse", "=", "[", "get_token_features", "(", "x", ")", "for", "x", "in", "nlp", "(", "ex_text", ")", "]", "\n", "ex", "[", "'parse'", "]", "=", "tweet_parse", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.main": [[47, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "spacy.load", "tparse.write_jsonl", "tparse.parse_tweets"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.write_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.parse.tparse.parse_tweets"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model_name'", ",", "default", "=", "'en_core_web_sm'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "spacy_model", "=", "spacy", ".", "load", "(", "args", ".", "model_name", ")", "\n", "write_jsonl", "(", "\n", "parse_tweets", "(", "args", ".", "input_path", ",", "spacy_model", ")", ",", "\n", "args", ".", "output_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.ConsistencyScoring.__init__": [[14, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.ConsistencyScoring.forward": [[17, 24], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "\n", "self", ",", "\n", "adj_list", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", ",", "\n", "node_labels", ":", "Dict", "[", "str", ",", "int", "]", "\n", ")", "->", "Tuple", "[", "np", ".", "array", ",", "Dict", "[", "str", ",", "int", "]", "]", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopConsistencyScoring.__init__": [[27, 31], ["consistency_scoring.ConsistencyScoring.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "num_steps", ":", "int", "=", "1", ",", "num_classes", ":", "int", "=", "3", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopConsistencyScoring.initialize": [[32, 62], ["networkx.Graph", "set", "set.add", "set.add", "networkx.Graph.add_edge", "len", "len", "entail_weight.item", "contradict_weight.item", "labeled_nodes.append", "unlabeled_nodes.append", "labeled_nodes.append", "unlabeled_nodes.append"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "adj_list", ",", "seed_node_labels", ")", ":", "\n", "\t\t", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "# list of (ex_t_id, ex_p_id, ex_tmp_energy)", "\n", "# 0 - entail", "\n", "# 1 - contradict", "\n", "nodes", "=", "set", "(", ")", "\n", "unlabeled_nodes", "=", "[", "]", "\n", "labeled_nodes", "=", "[", "]", "\n", "node_idx", "=", "{", "}", "\n", "for", "t_id", ",", "p_id", ",", "tp_r_dists", "in", "adj_list", ":", "\n", "\t\t\t", "if", "t_id", "not", "in", "nodes", ":", "\n", "\t\t\t\t", "node_idx", "[", "t_id", "]", "=", "len", "(", "node_idx", ")", "\n", "if", "t_id", "in", "seed_node_labels", ":", "\n", "\t\t\t\t\t", "labeled_nodes", ".", "append", "(", "t_id", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "unlabeled_nodes", ".", "append", "(", "t_id", ")", "\n", "", "", "if", "p_id", "not", "in", "nodes", ":", "\n", "\t\t\t\t", "node_idx", "[", "p_id", "]", "=", "len", "(", "node_idx", ")", "\n", "if", "p_id", "in", "seed_node_labels", ":", "\n", "\t\t\t\t\t", "labeled_nodes", ".", "append", "(", "p_id", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "unlabeled_nodes", ".", "append", "(", "p_id", ")", "\n", "\n", "", "", "nodes", ".", "add", "(", "t_id", ")", "\n", "nodes", ".", "add", "(", "p_id", ")", "\n", "entail_weight", ",", "contradict_weight", "=", "tp_r_dists", "\n", "entail_weight", "=", "-", "entail_weight", ".", "item", "(", ")", "\n", "contradict_weight", "=", "-", "contradict_weight", ".", "item", "(", ")", "\n", "g", ".", "add_edge", "(", "t_id", ",", "p_id", ",", "entail_weight", "=", "entail_weight", ",", "contradict_weight", "=", "contradict_weight", ")", "\n", "", "return", "g", ",", "unlabeled_nodes", ",", "labeled_nodes", ",", "node_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopConsistencyScoring.propagate_seeds": [[63, 84], ["isinstance", "graph.get_edge_data", "pytorch_gleam.data.datasets.kbi_misinfo_stance.flip_tm_stance", "other_label.item.item.item"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_tm_stance"], ["", "def", "propagate_seeds", "(", "self", ",", "labeled_nodes", ",", "unlabeled_nodes", ",", "graph", ",", "nls", ",", "nlc", ",", "seed_node_labels", ",", "node_idx", ")", ":", "\n", "\t\t", "for", "node", "in", "unlabeled_nodes", ":", "\n", "\t\t\t", "for", "other_node", "in", "labeled_nodes", ":", "\n", "\t\t\t\t", "other_label", "=", "seed_node_labels", "[", "other_node", "]", "\n", "if", "isinstance", "(", "other_label", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "other_label", "=", "other_label", ".", "item", "(", ")", "\n", "# entailment, contradiction, or neither does not mean anything if we know", "\n", "# the label of the other node", "\n", "", "if", "other_label", "==", "0", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "edge", "=", "graph", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_score", "=", "edge", "[", "'entail_weight'", "]", "\n", "entail_label", "=", "other_label", "\n", "contradict_score", "=", "edge", "[", "'contradict_weight'", "]", "\n", "contradict_label", "=", "flip_tm_stance", "(", "other_label", ")", "\n", "n_idx", "=", "node_idx", "[", "node", "]", "\n", "nls", "[", "n_idx", ",", "entail_label", ",", "0", "]", "+=", "entail_score", "\n", "nlc", "[", "n_idx", ",", "entail_label", ",", "0", "]", "+=", "1", "\n", "nls", "[", "n_idx", ",", "contradict_label", ",", "0", "]", "+=", "contradict_score", "\n", "nlc", "[", "n_idx", ",", "contradict_label", ",", "0", "]", "+=", "1", "\n", "", "", "nls", "[", ":", ",", ":", ",", "0", "]", "=", "nls", "[", ":", ",", ":", ",", "0", "]", "/", "nlc", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopConsistencyScoring.propagate": [[85, 105], ["graph.get_edge_data", "pytorch_gleam.data.datasets.kbi_misinfo_stance.flip_tm_stance"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_tm_stance"], ["", "def", "propagate", "(", "self", ",", "nodes", ",", "graph", ",", "nls", ",", "nlc", ",", "step", ",", "node_idx", ")", ":", "\n", "\t\t", "for", "node", "in", "nodes", ":", "\n", "\t\t\t", "for", "other_node", "in", "nodes", ":", "\n", "\t\t\t\t", "if", "node", "==", "other_node", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "edge", "=", "graph", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_score", "=", "edge", "[", "'entail_weight'", "]", "\n", "contradict_score", "=", "edge", "[", "'contradict_weight'", "]", "\n", "n_idx", "=", "node_idx", "[", "node", "]", "\n", "o_idx", "=", "node_idx", "[", "other_node", "]", "\n", "for", "other_pred", "in", "[", "1", ",", "2", "]", ":", "\n", "\t\t\t\t\t", "entail_label", "=", "other_pred", "\n", "contradict_label", "=", "flip_tm_stance", "(", "other_pred", ")", "\n", "node_score", "=", "nls", "[", "o_idx", ",", "other_pred", ",", "step", "-", "1", "]", "\n", "# node_count = nlc[o_idx, other_pred, step-1]", "\n", "nls", "[", "n_idx", ",", "entail_label", ",", "step", "]", "+=", "(", "node_score", "+", "entail_score", ")", "\n", "nlc", "[", "n_idx", ",", "entail_label", ",", "step", "]", "+=", "1", "\n", "nls", "[", "n_idx", ",", "contradict_label", ",", "step", "]", "+=", "(", "node_score", "+", "contradict_score", ")", "\n", "nlc", "[", "n_idx", ",", "contradict_label", ",", "step", "]", "+=", "1", "\n", "", "", "", "nls", "[", ":", ",", ":", ",", "step", "]", "=", "nls", "[", ":", ",", ":", ",", "step", "]", "/", "nlc", "[", ":", ",", ":", ",", "step", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopConsistencyScoring.forward": [[106, 136], ["consistency_scoring.MultiHopConsistencyScoring.initialize", "numpy.zeros", "numpy.zeros", "consistency_scoring.MultiHopConsistencyScoring.propagate_seeds", "range", "nls.mean.mean.mean", "nls[].min", "len", "len", "consistency_scoring.MultiHopConsistencyScoring.propagate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopLogConsistencyScoring.initialize", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopConsistencyScoring.propagate_seeds", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopConsistencyScoring.propagate"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "adj_list", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", ",", "\n", "node_labels", ":", "Dict", "[", "str", ",", "int", "]", "\n", ")", "->", "Tuple", "[", "np", ".", "array", ",", "Dict", "[", "str", ",", "int", "]", "]", ":", "\n", "\t\t", "assert", "len", "(", "node_labels", ")", ">", "0", "\n", "\n", "graph", ",", "unlabeled_nodes", ",", "labeled_nodes", ",", "node_idx", "=", "self", ".", "initialize", "(", "adj_list", ",", "node_labels", ")", "\n", "num_steps", "=", "self", ".", "num_steps", "\n", "# no need to do any propagation steps if there are no paths in unlabeled graph", "\n", "if", "len", "(", "unlabeled_nodes", ")", "==", "1", ":", "\n", "\t\t\t", "num_steps", "=", "0", "\n", "\n", "# [num_nodes, num_labels, num_steps]", "\n", "", "nls", "=", "np", ".", "zeros", "(", "[", "len", "(", "node_idx", ")", ",", "self", ".", "num_classes", ",", "num_steps", "+", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "nlc", "=", "np", ".", "zeros", "(", "[", "len", "(", "node_idx", ")", ",", "self", ".", "num_classes", ",", "num_steps", "+", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "nlc", "[", ":", ",", "0", ",", ":", "]", "=", "1.0", "\n", "for", "node", "in", "labeled_nodes", ":", "\n", "\t\t\t", "n_idx", "=", "node_idx", "[", "node", "]", "\n", "nlc", "[", "n_idx", ",", ":", ",", ":", "]", "=", "1.0", "\n", "\n", "", "self", ".", "propagate_seeds", "(", "labeled_nodes", ",", "unlabeled_nodes", ",", "graph", ",", "nls", ",", "nlc", ",", "node_labels", ",", "node_idx", ")", "\n", "\n", "for", "s_idx", "in", "range", "(", "1", ",", "num_steps", "+", "1", ")", ":", "\n", "\t\t\t", "self", ".", "propagate", "(", "unlabeled_nodes", ",", "graph", ",", "nls", ",", "nlc", ",", "s_idx", ",", "node_idx", ")", "\n", "\n", "", "nls", "=", "nls", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "nls", "[", ":", ",", "0", "]", "=", "nls", "[", ":", ",", "1", ":", "]", ".", "min", "(", ")", "\n", "\n", "return", "nls", ",", "node_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopLogConsistencyScoring.__init__": [[139, 141], ["consistency_scoring.MultiHopConsistencyScoring.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency_scoring.MultiHopLogConsistencyScoring.initialize": [[142, 172], ["networkx.Graph", "set", "set.add", "set.add", "networkx.Graph.add_edge", "len", "len", "numpy.log", "numpy.log", "labeled_nodes.append", "unlabeled_nodes.append", "labeled_nodes.append", "unlabeled_nodes.append", "entail_weight.item", "contradict_weight.item"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "adj_list", ",", "seed_node_labels", ")", ":", "\n", "\t\t", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "# list of (ex_t_id, ex_p_id, ex_tmp_energy)", "\n", "# 0 - entail", "\n", "# 1 - contradict", "\n", "nodes", "=", "set", "(", ")", "\n", "unlabeled_nodes", "=", "[", "]", "\n", "labeled_nodes", "=", "[", "]", "\n", "node_idx", "=", "{", "}", "\n", "for", "t_id", ",", "p_id", ",", "tp_r_dists", "in", "adj_list", ":", "\n", "\t\t\t", "if", "t_id", "not", "in", "nodes", ":", "\n", "\t\t\t\t", "node_idx", "[", "t_id", "]", "=", "len", "(", "node_idx", ")", "\n", "if", "t_id", "in", "seed_node_labels", ":", "\n", "\t\t\t\t\t", "labeled_nodes", ".", "append", "(", "t_id", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "unlabeled_nodes", ".", "append", "(", "t_id", ")", "\n", "", "", "if", "p_id", "not", "in", "nodes", ":", "\n", "\t\t\t\t", "node_idx", "[", "p_id", "]", "=", "len", "(", "node_idx", ")", "\n", "if", "p_id", "in", "seed_node_labels", ":", "\n", "\t\t\t\t\t", "labeled_nodes", ".", "append", "(", "p_id", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "unlabeled_nodes", ".", "append", "(", "p_id", ")", "\n", "\n", "", "", "nodes", ".", "add", "(", "t_id", ")", "\n", "nodes", ".", "add", "(", "p_id", ")", "\n", "entail_weight", ",", "contradict_weight", "=", "tp_r_dists", "\n", "entail_weight", "=", "-", "np", ".", "log", "(", "entail_weight", ".", "item", "(", ")", ")", "\n", "contradict_weight", "=", "-", "np", ".", "log", "(", "contradict_weight", ".", "item", "(", ")", ")", "\n", "g", ".", "add_edge", "(", "t_id", ",", "p_id", ",", "entail_weight", "=", "entail_weight", ",", "contradict_weight", "=", "contradict_weight", ")", "\n", "", "return", "g", ",", "unlabeled_nodes", ",", "labeled_nodes", ",", "node_idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.ConsistencyInference.__init__": [[16, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.ConsistencyInference.forward": [[19, 27], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "\n", "self", ",", "\n", "adj_list", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", ",", "\n", "threshold", ":", "float", ",", "\n", "node_labels", ":", "Dict", "[", "str", ",", "int", "]", "\n", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.CountConsistencyInference.__init__": [[30, 32], ["consistency.ConsistencyInference.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.CountConsistencyInference.forward": [[33, 117], ["node_labels.copy.copy.copy", "node_labels.copy.copy.copy", "networkx.Graph", "collections.defaultdict", "networkx.Graph.nodes", "max", "networkx.algorithms.traversal.breadth_first_search.bfs_predecessors", "networkx.Graph.add_edge", "networkx.Graph.neighbors", "collections.defaultdict.items", "collections.defaultdict", "networkx.Graph.neighbors", "collections.defaultdict", "sum", "collections.defaultdict.items", "max", "networkx.Graph.get_edge_data", "max", "collections.defaultdict.values", "collections.defaultdict.items", "networkx.Graph.get_edge_data", "max", "pytorch_gleam.data.datasets.kbi_misinfo_stance.flip_tm_stance"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_tm_stance"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "adj_list", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", ",", "\n", "threshold", ":", "float", ",", "\n", "node_labels", ":", "Dict", "[", "str", ",", "int", "]", "\n", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "\t\t", "seed_node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "# list of (ex_t_id, ex_p_id, ex_tmp_energy)", "\n", "# 0 - entail", "\n", "# 1 - contradict", "\n", "for", "t_id", ",", "p_id", ",", "tp_r_dists", "in", "adj_list", ":", "\n", "\t\t\t", "entail_weight", ",", "contradict_weight", "=", "tp_r_dists", "\n", "g", ".", "add_edge", "(", "t_id", ",", "p_id", ",", "entail_weight", "=", "entail_weight", ",", "contradict_weight", "=", "contradict_weight", ")", "\n", "\n", "", "node_relations", "=", "defaultdict", "(", "int", ")", "\n", "first_node", "=", "None", "\n", "for", "node", "in", "g", ".", "nodes", "(", ")", ":", "\n", "\t\t\t", "if", "node", "not", "in", "seed_node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "", "node_label", "=", "seed_node_labels", "[", "node", "]", "\n", "if", "node_label", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "", "first_node", "=", "node", "\n", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_weight", "=", "edge", "[", "'entail_weight'", "]", "\n", "contradict_weight", "=", "edge", "[", "'contradict_weight'", "]", "\n", "max_score", ",", "max_label", "=", "max", "(", "\n", "(", "-", "entail_weight", ",", "'entail'", ")", ",", "\n", "(", "-", "contradict_weight", ",", "'contradict'", ")", ",", "\n", "(", "threshold", ",", "'none'", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "\n", ")", "\n", "if", "max_label", "==", "'entail'", "or", "max_label", "==", "'contradict'", ":", "\n", "\t\t\t\t\t", "node_relations", "[", "node", "]", "+=", "1", "\n", "\n", "", "", "", "max_rel_node", ",", "max_rel_count", "=", "max", "(", "node_relations", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "default", "=", "(", "first_node", ",", "0", ")", ")", "\n", "\n", "# assume the node with the most entailments is stance 1", "\n", "for", "node", ",", "_", "in", "bfs_predecessors", "(", "g", ",", "max_rel_node", ")", ":", "\n", "# No need to re-label labeled nodes", "\n", "\t\t\t", "if", "node", "in", "node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "# TODO v2: use average of scores for prediction vs threshold", "\n", "# this uses average of predictions", "\n", "", "node_label_counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "if", "other_node", "in", "node_labels", ":", "\n", "\t\t\t\t\t", "other_pred", "=", "node_labels", "[", "other_node", "]", "\n", "# entailment, contradiction, or neither does not mean anything if we know", "\n", "# the label of the other node", "\n", "if", "other_pred", "==", "0", ":", "\n", "\t\t\t\t\t\t", "continue", "\n", "", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_weight", "=", "edge", "[", "'entail_weight'", "]", "\n", "contradict_weight", "=", "edge", "[", "'contradict_weight'", "]", "\n", "max_score", ",", "max_label", "=", "max", "(", "\n", "(", "-", "entail_weight", ",", "'entail'", ")", ",", "\n", "(", "-", "contradict_weight", ",", "'contradict'", ")", ",", "\n", "(", "threshold", ",", "'none'", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "\n", ")", "\n", "node_pred", "=", "0", "\n", "if", "max_label", "==", "'entail'", ":", "\n", "\t\t\t\t\t\t", "node_pred", "=", "other_pred", "\n", "", "elif", "max_label", "==", "'contradict'", ":", "\n", "# 0 -> 0", "\n", "# 1 -> 2", "\n", "# 2 -> 1", "\n", "\t\t\t\t\t\t", "node_pred", "=", "flip_tm_stance", "(", "other_pred", ")", "\n", "", "node_label_counts", "[", "node_pred", "]", "+=", "1", "\n", "", "", "node_label_scores", "=", "defaultdict", "(", "float", ")", "\n", "node_label_total_count", "=", "sum", "(", "node_label_counts", ".", "values", "(", ")", ")", "\n", "for", "node_label", ",", "node_count", "in", "node_label_counts", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "node_label_scores", "[", "node_label", "]", "=", "node_count", "/", "node_label_total_count", "\n", "\n", "# if there are no scores for a node then default to no stance", "\n", "# this would only happen if all the adjacent nodes were assigned 0", "\n", "", "max_label", ",", "max_score", "=", "max", "(", "node_label_scores", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ",", "default", "=", "(", "0", ",", "0", ")", ")", "\n", "node_labels", "[", "node", "]", "=", "max_label", "\n", "\n", "", "return", "node_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.ScoreConsistencyInference.__init__": [[120, 122], ["consistency.ConsistencyInference.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.ScoreConsistencyInference.forward": [[123, 198], ["node_labels.copy.copy.copy", "node_labels.copy.copy.copy", "networkx.Graph", "collections.defaultdict", "networkx.Graph.nodes", "collections.defaultdict.items", "max", "networkx.algorithms.traversal.breadth_first_search.bfs_predecessors", "len", "networkx.Graph.add_edge", "networkx.Graph.neighbors", "numpy.mean", "node_avg_scores.items", "collections.defaultdict", "networkx.Graph.neighbors", "collections.defaultdict.items", "max", "networkx.Graph.get_edge_data", "max", "node_scores[].append", "numpy.mean", "label_avg_scores.items", "networkx.Graph.get_edge_data", "pytorch_gleam.data.datasets.kbi_misinfo_stance.flip_tm_stance", "node_label_scores[].append", "node_label_scores[].append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_tm_stance"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "adj_list", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", ",", "\n", "threshold", ":", "float", ",", "\n", "node_labels", ":", "Dict", "[", "str", ",", "int", "]", "\n", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "\t\t", "assert", "len", "(", "node_labels", ")", ">", "0", "\n", "seed_node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "# list of (ex_t_id, ex_p_id, ex_tmp_energy)", "\n", "# 0 - entail", "\n", "# 1 - contradict", "\n", "for", "t_id", ",", "p_id", ",", "tp_r_dists", "in", "adj_list", ":", "\n", "\t\t\t", "entail_weight", ",", "contradict_weight", "=", "tp_r_dists", "\n", "g", ".", "add_edge", "(", "t_id", ",", "p_id", ",", "entail_weight", "=", "entail_weight", ",", "contradict_weight", "=", "contradict_weight", ")", "\n", "\n", "", "node_scores", "=", "defaultdict", "(", "list", ")", "\n", "first_node", "=", "None", "\n", "for", "node", "in", "g", ".", "nodes", "(", ")", ":", "\n", "\t\t\t", "if", "node", "not", "in", "seed_node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "", "node_label", "=", "seed_node_labels", "[", "node", "]", "\n", "if", "node_label", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "", "first_node", "=", "node", "\n", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_weight", "=", "edge", "[", "'entail_weight'", "]", "\n", "contradict_weight", "=", "edge", "[", "'contradict_weight'", "]", "\n", "max_score", ",", "max_label", "=", "max", "(", "\n", "(", "-", "entail_weight", ",", "'entail'", ")", ",", "\n", "(", "-", "contradict_weight", ",", "'contradict'", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "\n", ")", "\n", "node_scores", "[", "node", "]", ".", "append", "(", "max_score", ")", "\n", "", "", "assert", "first_node", "is", "not", "None", "\n", "node_avg_scores", "=", "{", "}", "\n", "for", "node", ",", "scores", "in", "node_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "node_avg_scores", "[", "node", "]", "=", "np", ".", "mean", "(", "scores", ")", "\n", "\n", "", "max_rel_node", ",", "max_avg_score", "=", "max", "(", "node_avg_scores", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "default", "=", "(", "first_node", ",", "0.0", ")", ")", "\n", "\n", "# assume the node with the most entailments is stance 1", "\n", "for", "node", ",", "_", "in", "bfs_predecessors", "(", "g", ",", "max_rel_node", ")", ":", "\n", "# No need to re-label labeled nodes", "\n", "\t\t\t", "if", "node", "in", "node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "", "node_label_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "if", "other_node", "in", "node_labels", ":", "\n", "\t\t\t\t\t", "other_pred", "=", "node_labels", "[", "other_node", "]", "\n", "# entailment, contradiction, or neither does not mean anything if we know", "\n", "# the label of the other node", "\n", "if", "other_pred", "==", "0", ":", "\n", "\t\t\t\t\t\t", "continue", "\n", "", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_score", "=", "-", "edge", "[", "'entail_weight'", "]", "\n", "entail_label", "=", "other_pred", "\n", "contradict_score", "=", "-", "edge", "[", "'contradict_weight'", "]", "\n", "contradict_label", "=", "flip_tm_stance", "(", "other_pred", ")", "\n", "node_label_scores", "[", "entail_label", "]", ".", "append", "(", "entail_score", ")", "\n", "node_label_scores", "[", "contradict_label", "]", ".", "append", "(", "contradict_score", ")", "\n", "\n", "", "", "label_avg_scores", "=", "{", "}", "\n", "for", "node_label", ",", "scores", "in", "node_label_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "label_avg_scores", "[", "node_label", "]", "=", "np", ".", "mean", "(", "scores", ")", "\n", "", "label_avg_scores", "[", "0", "]", "=", "threshold", "\n", "max_label", ",", "max_score", "=", "max", "(", "\n", "label_avg_scores", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "\n", ")", "\n", "node_labels", "[", "node", "]", "=", "max_label", "\n", "\n", "", "return", "node_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.ScoreSeedConsistencyInference.__init__": [[201, 203], ["consistency.ConsistencyInference.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.ScoreSeedConsistencyInference.forward": [[204, 278], ["node_labels.copy.copy.copy", "node_labels.copy.copy.copy", "networkx.Graph", "collections.defaultdict", "networkx.Graph.nodes", "collections.defaultdict.items", "max", "networkx.algorithms.traversal.breadth_first_search.bfs_predecessors", "networkx.Graph.add_edge", "networkx.Graph.neighbors", "numpy.mean", "node_avg_scores.items", "collections.defaultdict", "networkx.Graph.neighbors", "collections.defaultdict.items", "max", "networkx.Graph.get_edge_data", "max", "node_scores[].append", "numpy.mean", "label_avg_scores.items", "networkx.Graph.get_edge_data", "pytorch_gleam.data.datasets.kbi_misinfo_stance.flip_tm_stance", "node_label_scores[].append", "node_label_scores[].append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_tm_stance"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "adj_list", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", ",", "\n", "threshold", ":", "float", ",", "\n", "node_labels", ":", "Dict", "[", "str", ",", "int", "]", "\n", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "\t\t", "seed_node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "# list of (ex_t_id, ex_p_id, ex_tmp_energy)", "\n", "# 0 - entail", "\n", "# 1 - contradict", "\n", "for", "t_id", ",", "p_id", ",", "tp_r_dists", "in", "adj_list", ":", "\n", "\t\t\t", "entail_weight", ",", "contradict_weight", "=", "tp_r_dists", "\n", "g", ".", "add_edge", "(", "t_id", ",", "p_id", ",", "entail_weight", "=", "entail_weight", ",", "contradict_weight", "=", "contradict_weight", ")", "\n", "\n", "", "node_scores", "=", "defaultdict", "(", "list", ")", "\n", "first_node", "=", "None", "\n", "for", "node", "in", "g", ".", "nodes", "(", ")", ":", "\n", "\t\t\t", "if", "node", "not", "in", "seed_node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "", "node_label", "=", "seed_node_labels", "[", "node", "]", "\n", "if", "node_label", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "", "first_node", "=", "node", "\n", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_weight", "=", "edge", "[", "'entail_weight'", "]", "\n", "contradict_weight", "=", "edge", "[", "'contradict_weight'", "]", "\n", "max_score", ",", "max_label", "=", "max", "(", "\n", "(", "-", "entail_weight", ",", "'entail'", ")", ",", "\n", "(", "-", "contradict_weight", ",", "'contradict'", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "\n", ")", "\n", "node_scores", "[", "node", "]", ".", "append", "(", "max_score", ")", "\n", "\n", "", "", "node_avg_scores", "=", "{", "}", "\n", "for", "node", ",", "scores", "in", "node_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "node_avg_scores", "[", "node", "]", "=", "np", ".", "mean", "(", "scores", ")", "\n", "\n", "", "max_rel_node", ",", "max_avg_score", "=", "max", "(", "node_avg_scores", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "default", "=", "(", "first_node", ",", "0.0", ")", ")", "\n", "\n", "# assume the node with the most entailments is stance 1", "\n", "for", "node", ",", "_", "in", "bfs_predecessors", "(", "g", ",", "max_rel_node", ")", ":", "\n", "# No need to re-label labeled nodes", "\n", "\t\t\t", "if", "node", "in", "seed_node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "", "node_label_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "if", "other_node", "in", "seed_node_labels", ":", "\n", "\t\t\t\t\t", "other_pred", "=", "seed_node_labels", "[", "other_node", "]", "\n", "# entailment, contradiction, or neither does not mean anything if we know", "\n", "# the label of the other node", "\n", "if", "other_pred", "==", "0", ":", "\n", "\t\t\t\t\t\t", "continue", "\n", "", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_score", "=", "-", "edge", "[", "'entail_weight'", "]", "\n", "entail_label", "=", "other_pred", "\n", "contradict_score", "=", "-", "edge", "[", "'contradict_weight'", "]", "\n", "contradict_label", "=", "flip_tm_stance", "(", "other_pred", ")", "\n", "node_label_scores", "[", "entail_label", "]", ".", "append", "(", "entail_score", ")", "\n", "node_label_scores", "[", "contradict_label", "]", ".", "append", "(", "contradict_score", ")", "\n", "\n", "", "", "label_avg_scores", "=", "{", "}", "\n", "for", "node_label", ",", "scores", "in", "node_label_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "label_avg_scores", "[", "node_label", "]", "=", "np", ".", "mean", "(", "scores", ")", "\n", "", "label_avg_scores", "[", "0", "]", "=", "threshold", "\n", "max_label", ",", "max_score", "=", "max", "(", "\n", "label_avg_scores", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "\n", ")", "\n", "node_labels", "[", "node", "]", "=", "max_label", "\n", "\n", "", "return", "node_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.MaxScoreConsistencyInference.__init__": [[281, 283], ["consistency.ConsistencyInference.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.MaxScoreConsistencyInference.forward": [[284, 341], ["node_labels.copy.copy.copy", "node_labels.copy.copy.copy", "networkx.Graph", "networkx.Graph.nodes", "networkx.Graph.nodes", "networkx.Graph.add_edge", "networkx.Graph.neighbors", "heapq.heappop", "pytorch_gleam.data.datasets.kbi_misinfo_stance.tmp_stance", "networkx.Graph.neighbors", "networkx.Graph.get_edge_data", "min", "heapq.heappush", "len", "len", "networkx.Graph.get_edge_data", "min", "heapq.heappush", "networkx.Graph.nodes"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.tmp_stance"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "adj_list", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", ",", "\n", "threshold", ":", "float", ",", "\n", "node_labels", ":", "Dict", "[", "str", ",", "int", "]", "\n", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "\t\t", "seed_node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "# list of (ex_t_id, ex_p_id, ex_tmp_energy)", "\n", "# 0 - entail", "\n", "# 1 - contradict", "\n", "for", "t_id", ",", "p_id", ",", "tp_r_dists", "in", "adj_list", ":", "\n", "\t\t\t", "entail_weight", ",", "contradict_weight", "=", "tp_r_dists", "\n", "g", ".", "add_edge", "(", "t_id", ",", "p_id", ",", "entail_weight", "=", "entail_weight", ",", "contradict_weight", "=", "contradict_weight", ")", "\n", "\n", "", "edge_heap", "=", "[", "]", "\n", "for", "node", "in", "g", ".", "nodes", "(", ")", ":", "\n", "\t\t\t", "if", "node", "not", "in", "seed_node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "", "node_label", "=", "seed_node_labels", "[", "node", "]", "\n", "if", "node_label", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "if", "other_node", "in", "seed_node_labels", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_weight", "=", "edge", "[", "'entail_weight'", "]", "\n", "contradict_weight", "=", "edge", "[", "'contradict_weight'", "]", "\n", "min_weight", ",", "min_relation", "=", "min", "(", "[", "(", "entail_weight", ",", "0", ")", ",", "(", "contradict_weight", ",", "1", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "heapq", ".", "heappush", "(", "edge_heap", ",", "(", "min_weight", ",", "(", "node", ",", "other_node", ",", "min_relation", ")", ")", ")", "\n", "\n", "", "", "while", "edge_heap", ":", "\n", "\t\t\t", "weight", ",", "(", "other_node", ",", "node", ",", "relation", ")", "=", "heapq", ".", "heappop", "(", "edge_heap", ")", "\n", "if", "node", "in", "node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "", "if", "-", "weight", "<=", "threshold", ":", "\n", "\t\t\t\t", "break", "\n", "", "if", "len", "(", "node_labels", ")", "==", "len", "(", "g", ".", "nodes", "(", ")", ")", ":", "\n", "\t\t\t\t", "break", "\n", "", "other_label", "=", "node_labels", "[", "other_node", "]", "\n", "node_label", "=", "tmp_stance", "(", "relation", ",", "other_label", ")", "\n", "node_labels", "[", "node", "]", "=", "node_label", "\n", "for", "next_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "if", "next_node", "in", "node_labels", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "next_node", ")", "\n", "entail_weight", "=", "edge", "[", "'entail_weight'", "]", "\n", "contradict_weight", "=", "edge", "[", "'contradict_weight'", "]", "\n", "min_weight", ",", "min_relation", "=", "min", "(", "[", "(", "entail_weight", ",", "0", ")", ",", "(", "contradict_weight", ",", "1", ")", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "heapq", ".", "heappush", "(", "edge_heap", ",", "(", "min_weight", ",", "(", "node", ",", "next_node", ",", "min_relation", ")", ")", ")", "\n", "\n", "", "", "for", "node", "in", "g", ".", "nodes", "(", ")", ":", "\n", "\t\t\t", "if", "node", "not", "in", "node_labels", ":", "\n", "\t\t\t\t", "node_labels", "[", "node", "]", "=", "0", "\n", "\n", "", "", "return", "node_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.SortedScoreConsistencyInference.__init__": [[344, 346], ["consistency.ConsistencyInference.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.inference.consistency.SortedScoreConsistencyInference.forward": [[347, 434], ["isinstance", "node_labels.copy.copy.copy", "node_labels.copy.copy.copy", "networkx.Graph", "set", "collections.defaultdict", "networkx.Graph.nodes", "collections.defaultdict.items", "sorted", "len", "threshold.item.item.item", "set.add", "set.add", "isinstance", "isinstance", "networkx.Graph.add_edge", "networkx.Graph.neighbors", "numpy.mean", "list", "collections.defaultdict", "networkx.Graph.neighbors", "collections.defaultdict.items", "max", "networkx.Graph.get_edge_data", "max", "node_scores[].append", "node_avg_scores.keys", "numpy.mean", "label_avg_scores.items", "entail_weight.item", "contradict_weight.item", "isinstance", "networkx.Graph.get_edge_data", "pytorch_gleam.data.datasets.kbi_misinfo_stance.flip_tm_stance", "node_label_scores[].append", "node_label_scores[].append", "other_pred.item.item.item"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_tm_stance"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "adj_list", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", ",", "\n", "threshold", ":", "float", ",", "\n", "node_labels", ":", "Dict", "[", "str", ",", "int", "]", "\n", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "\t\t", "assert", "len", "(", "node_labels", ")", ">", "0", "\n", "if", "isinstance", "(", "threshold", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t", "threshold", "=", "threshold", ".", "item", "(", ")", "\n", "", "seed_node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "node_labels", "=", "node_labels", ".", "copy", "(", ")", "\n", "g", "=", "nx", ".", "Graph", "(", ")", "\n", "# list of (ex_t_id, ex_p_id, ex_tmp_energy)", "\n", "# 0 - entail", "\n", "# 1 - contradict", "\n", "nodes", "=", "set", "(", ")", "\n", "for", "t_id", ",", "p_id", ",", "tp_r_dists", "in", "adj_list", ":", "\n", "\t\t\t", "nodes", ".", "add", "(", "t_id", ")", "\n", "nodes", ".", "add", "(", "p_id", ")", "\n", "entail_weight", ",", "contradict_weight", "=", "tp_r_dists", "\n", "if", "isinstance", "(", "entail_weight", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t", "entail_weight", "=", "-", "entail_weight", ".", "item", "(", ")", "\n", "", "if", "isinstance", "(", "contradict_weight", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t", "contradict_weight", "=", "-", "contradict_weight", ".", "item", "(", ")", "\n", "", "g", ".", "add_edge", "(", "t_id", ",", "p_id", ",", "entail_weight", "=", "entail_weight", ",", "contradict_weight", "=", "contradict_weight", ")", "\n", "\n", "", "node_scores", "=", "defaultdict", "(", "list", ")", "\n", "first_node", "=", "None", "\n", "# apply labels in order of highest entail edges", "\n", "for", "node", "in", "g", ".", "nodes", "(", ")", ":", "\n", "\t\t\t", "if", "node", "in", "seed_node_labels", ":", "\n", "\t\t\t\t", "continue", "\n", "", "first_node", "=", "node", "\n", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "if", "other_node", "not", "in", "seed_node_labels", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "max_score", ",", "max_label", "=", "max", "(", "\n", "(", "edge", "[", "'entail_weight'", "]", ",", "'entail'", ")", ",", "\n", "(", "edge", "[", "'contradict_weight'", "]", ",", "'contradict'", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "\n", ")", "\n", "node_scores", "[", "node", "]", ".", "append", "(", "max_score", ")", "\n", "", "", "assert", "first_node", "is", "not", "None", "\n", "node_avg_scores", "=", "{", "}", "\n", "for", "node", ",", "scores", "in", "node_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "node_avg_scores", "[", "node", "]", "=", "np", ".", "mean", "(", "scores", ")", "\n", "# loop over nodes and label in order of max avg relation score to labeled nodes.", "\n", "", "node_list", "=", "sorted", "(", "list", "(", "node_avg_scores", ".", "keys", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "-", "node_avg_scores", "[", "x", "]", ")", "\n", "# assume the node with the most entailments is stance 1", "\n", "for", "node", "in", "node_list", ":", "\n", "#       print(f'{node}')", "\n", "# No need to re-label labeled nodes", "\n", "\t\t\t", "node_label_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "other_node", "in", "g", ".", "neighbors", "(", "node", ")", ":", "\n", "\t\t\t\t", "if", "other_node", "in", "node_labels", ":", "\n", "\t\t\t\t\t", "other_pred", "=", "node_labels", "[", "other_node", "]", "\n", "if", "isinstance", "(", "other_pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t\t", "other_pred", "=", "other_pred", ".", "item", "(", ")", "\n", "# entailment, contradiction, or neither does not mean anything if we know", "\n", "# the label of the other node", "\n", "", "if", "other_pred", "==", "0", ":", "\n", "\t\t\t\t\t\t", "continue", "\n", "", "edge", "=", "g", ".", "get_edge_data", "(", "node", ",", "other_node", ")", "\n", "entail_score", "=", "edge", "[", "'entail_weight'", "]", "\n", "entail_label", "=", "other_pred", "\n", "contradict_score", "=", "edge", "[", "'contradict_weight'", "]", "\n", "contradict_label", "=", "flip_tm_stance", "(", "other_pred", ")", "\n", "node_label_scores", "[", "entail_label", "]", ".", "append", "(", "entail_score", ")", "\n", "node_label_scores", "[", "contradict_label", "]", ".", "append", "(", "contradict_score", ")", "\n", "#           print(f'  {other_node} ({other_pred})')", "\n", "\n", "", "", "label_avg_scores", "=", "{", "}", "\n", "for", "node_label", ",", "scores", "in", "node_label_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "label_avg_scores", "[", "node_label", "]", "=", "np", ".", "mean", "(", "scores", ")", "\n", "", "label_avg_scores", "[", "0", "]", "=", "threshold", "\n", "max_label", ",", "max_score", "=", "max", "(", "\n", "label_avg_scores", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "\n", ")", "\n", "#       print(f'{node}: {max_label} {max_score:.2f}')", "\n", "node_labels", "[", "node", "]", "=", "max_label", "\n", "", "for", "node", "in", "nodes", ":", "\n", "\t\t\t", "if", "node", "not", "in", "node_labels", ":", "\n", "\t\t\t\t", "node_labels", "[", "node", "]", "=", "0", "\n", "\n", "", "", "return", "node_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_label.MultiLabelDataset.__init__": [[23, 35], ["torch.utils.data.Dataset.__init__", "isinstance", "multi_label.MultiLabelDataset.read_path", "enumerate", "multi_label.MultiLabelDataset.read_path"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path"], ["**", "kwargs", "\n", ")", ":", "\n", "\t\t"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_label.MultiLabelDataset.read_path": [[36, 58], ["multi_label.read_jsonl", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace().replace", "multi_label.MultiLabelDataset.tokenizer", "multi_label.MultiLabelDataset.examples.append", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace", "ex_text.strip().replace().replace.strip().replace().replace.strip"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_label.MultiLabelDataset.__len__": [[59, 61], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_label.MultiLabelDataset.__getitem__": [[62, 69], ["torch.is_tensor", "idx.tolist.tolist.tolist"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_label.MultiLabelDataset.worker_init_fn": [[70, 72], ["None"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_label.MultiLabelDataModule.__init__": [[75, 123], ["pytorch_gleam.data.datasets.base_datasets.BaseDataModule.__init__", "len", "multi_label.MultiLabelDataset", "multi_label.MultiLabelDataset", "multi_label.MultiLabelDataset", "multi_label.MultiLabelDataset"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["self", ".", "label_map", "=", "label_map", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_labels", "=", "len", "(", "self", ".", "label_map", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "m_metric", "=", "m_metric", "\n", "self", ".", "num_threshold_steps", "=", "num_threshold_steps", "\n", "self", ".", "update_threshold", "=", "update_threshold", "\n", "\n", "self", ".", "cls_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "hidden_size", ",", "\n", "out_features", "=", "self", ".", "num_labels", "*", "self", ".", "num_classes", "\n", ")", "\n", "self", ".", "inv_label_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "label_map", ".", "items", "(", ")", "}", "\n", "\n", "for", "cls_name", "in", "self", ".", "label_map", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "self", ".", "threshold", "[", "cls_name", "]", "=", "MultiClassThresholdModule", "(", ")", "\n", "\n", "", "self", ".", "f_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "\n", "p", "=", "self", ".", "hidden_dropout_prob", "\n", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "reduction", "=", "'none'", "\n", ")", "\n", "self", ".", "score_func", "=", "torch", ".", "nn", ".", "Softmax", "(", "\n", "dim", "=", "-", "1", "\n", ")", "\n", "\n", "", "def", "eval_epoch_end", "(", "self", ",", "outputs", ",", "stage", ")", ":", "\n", "\t\t", "loss", "=", "torch", ".", "cat", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "log", "(", "f'{stage}_loss'", ",", "loss", ")", "\n", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "\n", "results", ",", "labels", ",", "preds", ",", "t_ids", "=", "self", ".", "eval_outputs", "(", "\n", "outputs", ",", "\n", "stage", ",", "\n", "self", ".", "num_threshold_steps", ",", "\n", "self", ".", "update_threshold", "\n", ")", "\n", "for", "val_name", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "val_name", ",", "val", ")", "\n", "\n", "", "self", ".", "threshold", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "eval_outputs", "(", "self", ",", "outputs", ",", "stage", ",", "num_threshold_steps", "=", "100", ",", "update_threshold", "=", "True", ")", ":", "\n", "\t\t", "results", "=", "{", "}", "\n", "\n", "t_ids", "=", "self", ".", "flatten", "(", "[", "x", "[", "'ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_label.MultiLabelDataModule.create_collator": [[125, 130], ["pytorch_gleam.data.collators.MultiLabelBatchCollator"], "methods", ["None"], ["labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "'labels'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "# [count, num_labels, num_classes]", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "x", "[", "'scores'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "\n", "m_s_preds", "=", "[", "]", "\n", "m_s_labels", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_label.read_jsonl": [[11, 18], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["# noinspection PyAbstractClass", "\n", "class", "MultiLabelLanguageModel", "(", "BaseLanguageModel", ")", ":", "\n", "\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n", "metric", ":", "Metric", ",", "\n", "m_metric", ":", "Metric", ",", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.misinfo_stance.MisinfoStanceDataset.__init__": [[21, 40], ["torch.utils.data.Dataset.__init__", "isinstance", "open", "json.load", "misinfo_stance.MisinfoStanceDataset.read_path", "enumerate", "misinfo_stance.MisinfoStanceDataset.read_path"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path"], ["def", "__init__", "(", "self", ",", "data_path", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", ",", "misinfo_path", ":", "str", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "label_map", "=", "{", "\n", "'No Stance'", ":", "0", ",", "\n", "'no_stance'", ":", "0", ",", "\n", "'Accept'", ":", "1", ",", "\n", "'agree'", ":", "1", ",", "\n", "'Reject'", ":", "2", ",", "\n", "'disagree'", ":", "2", "\n", "}", "\n", "with", "open", "(", "misinfo_path", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "misinfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "examples", "=", "[", "]", "\n", "if", "isinstance", "(", "data_path", ",", "str", ")", ":", "\n", "\t\t\t", "self", ".", "read_path", "(", "data_path", ")", "\n", "", "else", ":", "\n", "\t\t\t", "for", "stage", ",", "stage_path", "in", "enumerate", "(", "data_path", ")", ":", "\n", "\t\t\t\t", "self", ".", "read_path", "(", "stage_path", ",", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.misinfo_stance.MisinfoStanceDataset.read_path": [[41, 66], ["misinfo_stance.read_jsonl", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace().replace", "ex_labels.items", "misinfo_stance.MisinfoStanceDataset.examples.append", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace", "print", "print", "ex_text.strip().replace().replace.strip().replace().replace.strip"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "", "def", "read_path", "(", "self", ",", "data_path", ",", "stage", "=", "0", ")", ":", "\n", "\t\t", "for", "ex", "in", "read_jsonl", "(", "data_path", ")", ":", "\n", "\t\t\t", "ex_id", "=", "ex", "[", "'id'", "]", "\n", "ex_text", "=", "ex", "[", "'full_text'", "]", "if", "'full_text'", "in", "ex", "else", "ex", "[", "'text'", "]", "\n", "ex_text", "=", "ex_text", ".", "strip", "(", ")", ".", "replace", "(", "'\\r'", ",", "' '", ")", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "ex_labels", "=", "ex", "[", "'misinfo'", "]", "\n", "for", "m_id", ",", "m_label", "in", "ex_labels", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "m_id", "not", "in", "self", ".", "misinfo", ":", "\n", "\t\t\t\t\t", "print", "(", "f'MISSING M_ID: {m_id}'", ")", "\n", "continue", "\n", "", "if", "m_label", "not", "in", "self", ".", "label_map", ":", "\n", "\t\t\t\t\t", "print", "(", "f'MISSING M_LABEL: {m_label}'", ")", "\n", "continue", "\n", "", "m_label_idx", "=", "self", ".", "label_map", "[", "m_label", "]", "\n", "m", "=", "self", ".", "misinfo", "[", "m_id", "]", "\n", "m_text", "=", "m", "[", "'text'", "]", "\n", "example", "=", "{", "\n", "'ex_id'", ":", "ex_id", ",", "\n", "'m_id'", ":", "m_id", ",", "\n", "'ex_text'", ":", "ex_text", ",", "\n", "'m_text'", ":", "m_text", ",", "\n", "'m_label'", ":", "m_label_idx", ",", "\n", "'stage'", ":", "stage", "\n", "}", "\n", "self", ".", "examples", ".", "append", "(", "example", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.misinfo_stance.MisinfoStanceDataset.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.misinfo_stance.MisinfoStanceDataset.__getitem__": [[70, 77], ["torch.is_tensor", "idx.tolist.tolist.tolist"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "\t\t\t", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "example", "=", "self", ".", "examples", "[", "idx", "]", "\n", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.misinfo_stance.MisinfoStanceDataset.worker_init_fn": [[78, 80], ["None"], "methods", ["None"], ["", "def", "worker_init_fn", "(", "self", ",", "_", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.misinfo_stance.read_jsonl": [[9, 16], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.MultiClassFrameEdgeDataset.__init__": [[235, 266], ["torch.utils.data.Dataset.__init__", "py_lex.EmoLex", "isinstance", "open", "json.load", "multi_class_frame_edge.MultiClassFrameEdgeDataset.read_path", "enumerate", "multi_class_frame_edge.MultiClassFrameEdgeDataset.read_path"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path"], ["def", "__init__", "(", "\n", "self", ",", "data_path", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", ",", "frame_path", ":", "str", ",", "\n", "label_name", ":", "str", ",", "tokenizer", ",", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "emo_path", ":", "str", ",", "\n", "num_semantic_hops", ":", "int", "=", "3", ",", "\n", "num_emotion_hops", ":", "int", "=", "1", ",", "\n", "num_lexical_hops", ":", "int", "=", "1", ",", "\n", "emotion_type", ":", "str", "=", "'senticnet'", ",", "\n", "lex_edge_expanded", ":", "str", "=", "'none'", ",", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "frame_path", "=", "frame_path", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "label_name", "=", "label_name", "\n", "self", ".", "label_map", "=", "label_map", "\n", "\n", "self", ".", "num_semantic_hops", "=", "num_semantic_hops", "\n", "self", ".", "num_emotion_hops", "=", "num_emotion_hops", "\n", "self", ".", "num_lexical_hops", "=", "num_lexical_hops", "\n", "self", ".", "emotion_type", "=", "emotion_type", "\n", "self", ".", "lex_edge_expanded", "=", "lex_edge_expanded", "\n", "self", ".", "emolex", "=", "EmoLex", "(", "emo_path", ")", "\n", "\n", "self", ".", "examples", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "frame_path", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "frames", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "isinstance", "(", "data_path", ",", "str", ")", ":", "\n", "\t\t\t", "self", ".", "read_path", "(", "data_path", ")", "\n", "", "else", ":", "\n", "\t\t\t", "for", "stage", ",", "stage_path", "in", "enumerate", "(", "data_path", ")", ":", "\n", "\t\t\t\t", "self", ".", "read_path", "(", "stage_path", ",", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.MultiClassFrameEdgeDataset.parse_example": [[267, 309], ["ex_text.strip().replace().replace.strip().replace().replace.strip().replace().replace", "ex[].items", "multi_class_frame_edge.MultiClassFrameEdgeDataset.tokenizer", "multi_class_frame_edge.create_edges", "ex_examples.append", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace", "multi_class_frame_edge.add_sentic_token_features", "multi_class_frame_edge.add_sentic_token_features", "ex_text.strip().replace().replace.strip().replace().replace.strip"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.create_edges", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.add_sentic_token_features", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.add_sentic_token_features"], ["", "", "", "def", "parse_example", "(", "self", ",", "ex", ")", ":", "\n", "\t\t", "ex_id", "=", "ex", "[", "'id'", "]", "\n", "ex_text", "=", "ex", "[", "'full_text'", "]", "if", "'full_text'", "in", "ex", "else", "ex", "[", "'text'", "]", "\n", "ex_text", "=", "ex_text", ".", "strip", "(", ")", ".", "replace", "(", "'\\r'", ",", "' '", ")", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "ex_examples", "=", "[", "]", "\n", "for", "f_id", ",", "f_label", "in", "ex", "[", "self", ".", "label_name", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "frame", "=", "self", ".", "frames", "[", "f_id", "]", "\n", "frame_text", "=", "frame", "[", "'text'", "]", "\n", "ex_label", "=", "0", "\n", "if", "f_label", "in", "self", ".", "label_map", ":", "\n", "\t\t\t\t", "ex_label", "=", "self", ".", "label_map", "[", "f_label", "]", "\n", "", "token_data", "=", "self", ".", "tokenizer", "(", "\n", "frame_text", ",", "\n", "ex_text", "\n", ")", "\n", "\n", "tweet_parse", "=", "[", "add_sentic_token_features", "(", "x", ")", "for", "x", "in", "ex", "[", "'parse'", "]", "]", "\n", "f_parse", "=", "[", "add_sentic_token_features", "(", "x", ")", "for", "x", "in", "frame", "[", "'parse'", "]", "]", "\n", "\n", "ex_edges", "=", "create_edges", "(", "\n", "f_parse", ",", "\n", "tweet_parse", ",", "\n", "token_data", ",", "\n", "self", ".", "num_semantic_hops", ",", "\n", "self", ".", "num_emotion_hops", ",", "\n", "self", ".", "num_lexical_hops", ",", "\n", "self", ".", "emotion_type", ",", "\n", "self", ".", "emolex", ",", "\n", "self", ".", "lex_edge_expanded", ",", "\n", ")", "\n", "\n", "example", "=", "{", "\n", "'ids'", ":", "f'{ex_id}|{f_id}'", ",", "\n", "'label'", ":", "ex_label", ",", "\n", "'input_ids'", ":", "token_data", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "token_data", "[", "'attention_mask'", "]", ",", "\n", "'edges'", ":", "ex_edges", "\n", "}", "\n", "if", "'token_type_ids'", "in", "token_data", ":", "\n", "\t\t\t\t", "example", "[", "'token_type_ids'", "]", "=", "token_data", "[", "'token_type_ids'", "]", "\n", "", "ex_examples", ".", "append", "(", "example", ")", "\n", "", "return", "ex_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.MultiClassFrameEdgeDataset.read_path": [[310, 314], ["tqdm.tqdm.tqdm", "multi_class_frame_edge.read_jsonl", "multi_class_frame_edge.MultiClassFrameEdgeDataset.parse_example", "multi_class_frame_edge.MultiClassFrameEdgeDataset.examples.append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.parse_example"], ["", "def", "read_path", "(", "self", ",", "data_path", ",", "stage", "=", "0", ")", ":", "\n", "\t\t", "for", "ex", "in", "tqdm", "(", "read_jsonl", "(", "data_path", ")", ")", ":", "\n", "\t\t\t", "for", "ex_examples", "in", "self", ".", "parse_example", "(", "ex", ")", ":", "\n", "\t\t\t\t", "self", ".", "examples", ".", "append", "(", "ex_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.MultiClassFrameEdgeDataset.__len__": [[315, 317], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.MultiClassFrameEdgeDataset.__getitem__": [[318, 325], ["torch.is_tensor", "idx.tolist.tolist.tolist"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "\t\t\t", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "example", "=", "self", ".", "examples", "[", "idx", "]", "\n", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.MultiClassFrameEdgeDataset.worker_init_fn": [[326, 328], ["None"], "methods", ["None"], ["", "def", "worker_init_fn", "(", "self", ",", "_", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.MultiClassFrameEdgeDataModule.__init__": [[331, 414], ["pytorch_gleam.data.datasets.base_datasets.BaseDataModule.__init__", "multi_class_frame_edge.MultiClassFrameEdgeDataset", "multi_class_frame_edge.MultiClassFrameEdgeDataset", "multi_class_frame_edge.MultiClassFrameEdgeDataset", "multi_class_frame_edge.MultiClassFrameEdgeDataset"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_name", ":", "str", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "frame_path", ":", "str", ",", "\n", "emo_path", ":", "str", ",", "\n", "num_semantic_hops", ":", "int", "=", "3", ",", "\n", "num_emotion_hops", ":", "int", "=", "1", ",", "\n", "num_lexical_hops", ":", "int", "=", "1", ",", "\n", "emotion_type", ":", "str", "=", "'senticnet'", ",", "\n", "lex_edge_expanded", ":", "str", "=", "'none'", ",", "\n", "train_path", ":", "str", "=", "None", ",", "\n", "val_path", ":", "str", "=", "None", ",", "\n", "test_path", ":", "str", "=", "None", ",", "\n", "predict_path", ":", "str", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "label_map", "=", "label_map", "\n", "\n", "self", ".", "label_name", "=", "label_name", "\n", "self", ".", "train_path", "=", "train_path", "\n", "self", ".", "val_path", "=", "val_path", "\n", "self", ".", "test_path", "=", "test_path", "\n", "self", ".", "predict_path", "=", "predict_path", "\n", "self", ".", "frame_path", "=", "frame_path", "\n", "\n", "if", "self", ".", "train_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "train_dataset", "=", "MultiClassFrameEdgeDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "train_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "emo_path", "=", "emo_path", ",", "\n", "num_semantic_hops", "=", "num_semantic_hops", ",", "\n", "num_emotion_hops", "=", "num_emotion_hops", ",", "\n", "num_lexical_hops", "=", "num_lexical_hops", ",", "\n", "emotion_type", "=", "emotion_type", ",", "\n", "lex_edge_expanded", "=", "lex_edge_expanded", ",", "\n", ")", "\n", "", "if", "self", ".", "val_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "val_dataset", "=", "MultiClassFrameEdgeDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "val_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "emo_path", "=", "emo_path", ",", "\n", "num_semantic_hops", "=", "num_semantic_hops", ",", "\n", "num_emotion_hops", "=", "num_emotion_hops", ",", "\n", "num_lexical_hops", "=", "num_lexical_hops", ",", "\n", "emotion_type", "=", "emotion_type", ",", "\n", "lex_edge_expanded", "=", "lex_edge_expanded", ",", "\n", ")", "\n", "", "if", "self", ".", "test_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "test_dataset", "=", "MultiClassFrameEdgeDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "test_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "emo_path", "=", "emo_path", ",", "\n", "num_semantic_hops", "=", "num_semantic_hops", ",", "\n", "num_emotion_hops", "=", "num_emotion_hops", ",", "\n", "num_lexical_hops", "=", "num_lexical_hops", ",", "\n", "emotion_type", "=", "emotion_type", ",", "\n", "lex_edge_expanded", "=", "lex_edge_expanded", ",", "\n", ")", "\n", "", "if", "self", ".", "predict_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "predict_dataset", "=", "MultiClassFrameEdgeDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "predict_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "emo_path", "=", "emo_path", ",", "\n", "num_semantic_hops", "=", "num_semantic_hops", ",", "\n", "num_emotion_hops", "=", "num_emotion_hops", ",", "\n", "num_lexical_hops", "=", "num_lexical_hops", ",", "\n", "emotion_type", "=", "emotion_type", ",", "\n", "lex_edge_expanded", "=", "lex_edge_expanded", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.MultiClassFrameEdgeDataModule.create_collator": [[416, 420], ["pytorch_gleam.data.collators.MultiClassFrameEdgeBatchCollator"], "methods", ["None"], ["", "", "def", "create_collator", "(", "self", ")", ":", "\n", "\t\t", "return", "MultiClassFrameEdgeBatchCollator", "(", "\n", "max_seq_len", "=", "self", ".", "max_seq_len", ",", "\n", "use_tpus", "=", "self", ".", "use_tpus", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.read_jsonl": [[18, 25], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.get_sentic": [[27, 48], ["word_text.lower.lower", "float", "float", "float", "float", "float"], "function", ["None"], ["", "", "", "", "def", "get_sentic", "(", "word_text", ")", ":", "\n", "\t", "word_text", "=", "word_text", ".", "lower", "(", ")", "\n", "if", "word_text", "==", "'coronavirus'", "or", "word_text", "==", "'covid-19'", "or", "word_text", "==", "'covid'", "or", "word_text", "==", "'covid19'", ":", "\n", "\t\t", "word_text", "=", "'virus'", "\n", "", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t", "word_text", "=", "word_text", "[", ":", "-", "1", "]", "\n", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t\t", "word_text", "=", "word_text", "[", ":", "-", "1", "]", "\n", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t\t\t", "return", "None", "\n", "", "", "", "p_v", ",", "a_v", ",", "s_v", ",", "ap_v", ",", "p_m", ",", "s_m", ",", "po_l", ",", "po_v", ",", "s1", ",", "s2", ",", "s3", ",", "s4", ",", "s5", "=", "senticnet5", ".", "senticnet", "[", "word_text", "]", "\n", "return", "{", "\n", "'pleasantness_value'", ":", "float", "(", "p_v", ")", ",", "\n", "'attention_value'", ":", "float", "(", "a_v", ")", ",", "\n", "'sensitivity_value'", ":", "float", "(", "s_v", ")", ",", "\n", "'aptitude_value'", ":", "float", "(", "ap_v", ")", ",", "\n", "'primary_mood'", ":", "p_m", ",", "\n", "'secondary_mood'", ":", "s_m", ",", "\n", "'polarity_label'", ":", "po_l", ",", "\n", "'polarity_value'", ":", "float", "(", "po_v", ")", ",", "\n", "'semantics'", ":", "[", "s1", ",", "s2", ",", "s3", ",", "s4", ",", "s5", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.add_sentic_token_features": [[51, 55], ["multi_class_frame_edge.get_sentic"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.get_sentic"], ["", "def", "add_sentic_token_features", "(", "token_data", ")", ":", "\n", "\t", "sentic", "=", "get_sentic", "(", "token_data", "[", "'text'", "]", ")", "\n", "token_data", "[", "'sentic'", "]", "=", "sentic", "\n", "return", "token_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_tokens": [[57, 70], ["set", "range", "wpt_tokens.char_to_token", "token[].add"], "function", ["None"], ["", "def", "align_tokens", "(", "tokens", ",", "wpt_tokens", ",", "seq_offset", "=", "0", ")", ":", "\n", "\t", "align_map", "=", "{", "}", "\n", "for", "token", "in", "tokens", ":", "\n", "\t\t", "token", "[", "'wpt_idxs'", "]", "=", "set", "(", ")", "\n", "start", "=", "token", "[", "'start'", "]", "\n", "end", "=", "token", "[", "'end'", "]", "\n", "for", "char_idx", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "\t\t\t", "sub_token_idx", "=", "wpt_tokens", ".", "char_to_token", "(", "char_idx", ",", "sequence_index", "=", "seq_offset", ")", "\n", "# White spaces have no token and will return None", "\n", "if", "sub_token_idx", "is", "not", "None", ":", "\n", "\t\t\t\t", "align_map", "[", "sub_token_idx", "]", "=", "token", "\n", "token", "[", "'wpt_idxs'", "]", ".", "add", "(", "sub_token_idx", ")", "\n", "", "", "", "return", "align_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_token_sequences": [[72, 93], ["multi_class_frame_edge.align_tokens", "multi_class_frame_edge.align_tokens", "range", "len", "aligned_tokens.append"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_tokens", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_tokens"], ["", "def", "align_token_sequences", "(", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ")", ":", "\n", "\t", "m_align_map", "=", "align_tokens", "(", "m_tokens", ",", "wpt_tokens", ")", "\n", "t_align_map", "=", "align_tokens", "(", "t_tokens", ",", "wpt_tokens", ",", "seq_offset", "=", "1", ")", "\n", "align_map", "=", "{", "**", "m_align_map", ",", "**", "t_align_map", "}", "\n", "aligned_tokens", "=", "[", "]", "\n", "for", "sub_token_idx", "in", "range", "(", "len", "(", "wpt_tokens", "[", "'input_ids'", "]", ")", ")", ":", "\n", "\t\t", "if", "sub_token_idx", "not", "in", "align_map", ":", "\n", "# CLS, SEP, or other special token", "\n", "\t\t\t", "aligned_token", "=", "{", "\n", "'pos'", ":", "'NONE'", ",", "\n", "'dep'", ":", "'NONE'", ",", "\n", "'head'", ":", "'NONE'", ",", "\n", "'sentic'", ":", "None", ",", "\n", "'text'", ":", "'[CLS]'", "if", "sub_token_idx", "==", "0", "else", "'[SEP]'", ",", "\n", "'wpt_idxs'", ":", "{", "sub_token_idx", "}", "\n", "}", "\n", "align_map", "[", "sub_token_idx", "]", "=", "aligned_token", "\n", "", "aligned_token", "=", "align_map", "[", "sub_token_idx", "]", "\n", "aligned_tokens", ".", "append", "(", "aligned_token", ")", "\n", "\n", "", "return", "align_map", ",", "aligned_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten": [[95, 97], ["None"], "function", ["None"], ["", "def", "flatten", "(", "multi_list", ")", ":", "\n", "\t", "return", "[", "item", "for", "sub_list", "in", "multi_list", "for", "item", "in", "sub_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.create_adjacency_matrix": [[99, 108], ["numpy.eye", "range", "set", "multi_class_frame_edge.flatten"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten"], ["", "def", "create_adjacency_matrix", "(", "edges", ",", "size", ",", "t_map", ",", "r_map", ")", ":", "\n", "\t", "adj", "=", "np", ".", "eye", "(", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "input_idx", "in", "range", "(", "size", ")", ":", "\n", "\t\t", "input_idx_text", "=", "t_map", "[", "input_idx", "]", "\n", "i_edges", "=", "set", "(", "flatten", "(", "[", "r_map", "[", "e_txt", "]", "for", "e_txt", "in", "edges", "[", "input_idx_text", "]", "]", ")", ")", "\n", "for", "edge_idx", "in", "i_edges", ":", "\n", "\t\t\t", "adj", "[", "input_idx", ",", "edge_idx", "]", "=", "1.0", "\n", "adj", "[", "edge_idx", ",", "input_idx", "]", "=", "1.0", "\n", "", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.sentic_expand": [[110, 117], ["set", "set.add"], "function", ["None"], ["", "def", "sentic_expand", "(", "sentic_edges", ",", "expand_list", ")", ":", "\n", "\t", "new_edges", "=", "set", "(", "sentic_edges", ")", "\n", "for", "edge", "in", "sentic_edges", ":", "\n", "\t\t", "edge_info", "=", "senticnet5", ".", "senticnet", "[", "edge", "]", "\n", "for", "i", "in", "expand_list", ":", "\n", "\t\t\t", "new_edges", ".", "add", "(", "edge_info", "[", "i", "]", ")", "\n", "", "", "return", "new_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.create_edges": [[119, 230], ["len", "multi_class_frame_edge.align_token_sequences", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "lexical_edges[].add", "lexical_edges[].add", "collections.defaultdict.keys", "multi_class_frame_edge.create_adjacency_matrix", "multi_class_frame_edge.create_adjacency_matrix", "multi_class_frame_edge.create_adjacency_matrix", "token[].lower", "token[].lower", "reverse_lexical_dep_edges[].add", "reverse_lexical_pos_edges[].add", "lexical_dep_edges[].add", "lexical_pos_edges[].add", "lexical_edges[].add", "emotion_edges[].union", "collections.defaultdict.keys", "collections.defaultdict.keys", "r_map[].add", "range", "set", "lexical_edges[].union", "lexical_edges[].union", "semantic_edges[].add", "multi_class_frame_edge.sentic_expand", "emotion_edges[].add", "emotion_edges[].add", "reverse_emotion_edges[].add", "reverse_emotion_edges[].add", "multi_class_frame_edge.flatten", "set", "set", "emolex.categorize_token", "ValueError", "multi_class_frame_edge.flatten", "multi_class_frame_edge.flatten", "emotion_edges[].add", "reverse_emotion_edges[].add"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.align_token_sequences", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.create_adjacency_matrix", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.create_adjacency_matrix", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.create_adjacency_matrix", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.sentic_expand", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge.flatten"], ["", "def", "create_edges", "(", "\n", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ",", "\n", "num_semantic_hops", ",", "num_emotion_hops", ",", "num_lexical_hops", ",", "\n", "emotion_type", ",", "emolex", ",", "lex_edge_expanded", "\n", ")", ":", "\n", "\t", "seq_len", "=", "len", "(", "wpt_tokens", "[", "'input_ids'", "]", ")", "\n", "align_map", ",", "a_tokens", "=", "align_token_sequences", "(", "m_tokens", ",", "t_tokens", ",", "wpt_tokens", ")", "\n", "\n", "semantic_edges", "=", "defaultdict", "(", "set", ")", "\n", "emotion_edges", "=", "defaultdict", "(", "set", ")", "\n", "reverse_emotion_edges", "=", "defaultdict", "(", "set", ")", "\n", "lexical_edges", "=", "defaultdict", "(", "set", ")", "\n", "reverse_lexical_dep_edges", "=", "defaultdict", "(", "set", ")", "\n", "reverse_lexical_pos_edges", "=", "defaultdict", "(", "set", ")", "\n", "lexical_dep_edges", "=", "defaultdict", "(", "set", ")", "\n", "lexical_pos_edges", "=", "defaultdict", "(", "set", ")", "\n", "root_text", "=", "None", "\n", "r_map", "=", "defaultdict", "(", "set", ")", "\n", "t_map", "=", "{", "}", "\n", "for", "token", "in", "a_tokens", ":", "\n", "\t\t", "text", "=", "token", "[", "'text'", "]", ".", "lower", "(", ")", "\n", "head", "=", "token", "[", "'head'", "]", ".", "lower", "(", ")", "\n", "for", "wpt_idx", "in", "token", "[", "'wpt_idxs'", "]", ":", "\n", "\t\t\t", "t_map", "[", "wpt_idx", "]", "=", "text", "\n", "r_map", "[", "text", "]", ".", "add", "(", "wpt_idx", ")", "\n", "", "pos", "=", "token", "[", "'pos'", "]", "\n", "dep", "=", "token", "[", "'dep'", "]", "\n", "reverse_lexical_dep_edges", "[", "dep", "]", ".", "add", "(", "text", ")", "\n", "reverse_lexical_pos_edges", "[", "pos", "]", ".", "add", "(", "text", ")", "\n", "lexical_dep_edges", "[", "text", "]", ".", "add", "(", "dep", ")", "\n", "lexical_pos_edges", "[", "text", "]", ".", "add", "(", "pos", ")", "\n", "# will be two roots with two sequences", "\n", "if", "dep", "==", "'ROOT'", ":", "\n", "\t\t\t", "root_text", "=", "text", "\n", "", "sentic", "=", "token", "[", "'sentic'", "]", "\n", "if", "sentic", "is", "not", "None", ":", "\n", "\t\t\t", "for", "sem", "in", "sentic", "[", "'semantics'", "]", ":", "\n", "\t\t\t\t", "semantic_edges", "[", "text", "]", ".", "add", "(", "sem", ")", "\n", "", "for", "i", "in", "range", "(", "num_semantic_hops", "-", "1", ")", ":", "\n", "\t\t\t\t", "semantic_edges", "[", "text", "]", "=", "sentic_expand", "(", "semantic_edges", "[", "text", "]", ",", "[", "8", ",", "9", ",", "10", ",", "11", ",", "12", "]", ")", "\n", "", "if", "emotion_type", "==", "'senticnet'", ":", "\n", "\t\t\t\t", "emotion_edges", "[", "text", "]", ".", "add", "(", "sentic", "[", "'primary_mood'", "]", ")", "\n", "emotion_edges", "[", "text", "]", ".", "add", "(", "sentic", "[", "'secondary_mood'", "]", ")", "\n", "reverse_emotion_edges", "[", "sentic", "[", "'primary_mood'", "]", "]", ".", "add", "(", "text", ")", "\n", "reverse_emotion_edges", "[", "sentic", "[", "'secondary_mood'", "]", "]", ".", "add", "(", "text", ")", "\n", "", "elif", "emotion_type", "==", "'emolex'", ":", "\n", "\t\t\t\t", "for", "emotion", "in", "emolex", ".", "categorize_token", "(", "text", ")", ":", "\n", "\t\t\t\t\t", "emotion_edges", "[", "text", "]", ".", "add", "(", "emotion", ")", "\n", "reverse_emotion_edges", "[", "emotion", "]", ".", "add", "(", "text", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "f'Invalid emotion type: {emotion_type}'", ")", "\n", "# for emotion in [sentic['primary_mood'], sentic['secondary_mood']]:", "\n", "# \temotion_edges[text] = emotion_edges[text].union(emotion_nodes[emotion])", "\n", "\n", "# for i in range(num_emotion_hops - 1):", "\n", "# \tnew_emotions = sentic_expand(emotion_edges[text], [4, 5])", "\n", "# \tfor emotion in new_emotions:", "\n", "# \t\temotion_edges[text] = emotion_edges[text].union(emotion_nodes[emotion])", "\n", "\n", "", "", "lexical_edges", "[", "text", "]", ".", "add", "(", "head", ")", "\n", "\n", "", "lexical_edges", "[", "'[CLS]'", "]", ".", "add", "(", "root_text", ")", "\n", "lexical_edges", "[", "'[SEP]'", "]", ".", "add", "(", "root_text", ")", "\n", "\n", "# text -> emotion node -> other text in sentence with same emotions", "\n", "for", "text", "in", "emotion_edges", ".", "keys", "(", ")", ":", "\n", "\t\t", "emotions", "=", "emotion_edges", "[", "text", "]", "\n", "emotion_edges", "[", "text", "]", "=", "emotion_edges", "[", "text", "]", ".", "union", "(", "\n", "set", "(", "flatten", "(", "reverse_emotion_edges", "[", "emotion", "]", "for", "emotion", "in", "emotions", ")", ")", "\n", ")", "\n", "", "if", "'dep'", "in", "lex_edge_expanded", ":", "\n", "\t\t", "for", "text", "in", "lexical_edges", ".", "keys", "(", ")", ":", "\n", "# expand lexical edges to same dependency roles", "\n", "\t\t\t", "text_deps", "=", "lexical_dep_edges", "[", "text", "]", "\n", "lexical_edges", "[", "text", "]", "=", "lexical_edges", "[", "text", "]", ".", "union", "(", "\n", "set", "(", "flatten", "(", "reverse_lexical_dep_edges", "[", "dep", "]", "for", "dep", "in", "text_deps", ")", ")", "\n", ")", "\n", "\n", "", "", "if", "'pos'", "in", "lex_edge_expanded", ":", "\n", "\t\t", "for", "text", "in", "lexical_edges", ".", "keys", "(", ")", ":", "\n", "# expand lexical edges to same pos tags", "\n", "\t\t\t", "text_pos", "=", "lexical_pos_edges", "[", "text", "]", "\n", "lexical_edges", "[", "text", "]", "=", "lexical_edges", "[", "text", "]", ".", "union", "(", "\n", "set", "(", "flatten", "(", "reverse_lexical_pos_edges", "[", "pos", "]", "for", "pos", "in", "text_pos", ")", ")", "\n", ")", "\n", "\n", "", "", "semantic_adj", "=", "create_adjacency_matrix", "(", "\n", "edges", "=", "semantic_edges", ",", "\n", "size", "=", "seq_len", ",", "\n", "t_map", "=", "t_map", ",", "\n", "r_map", "=", "r_map", "\n", ")", "\n", "emotion_adj", "=", "create_adjacency_matrix", "(", "\n", "edges", "=", "emotion_edges", ",", "\n", "size", "=", "seq_len", ",", "\n", "t_map", "=", "t_map", ",", "\n", "r_map", "=", "r_map", "\n", ")", "\n", "lexical_adj", "=", "create_adjacency_matrix", "(", "\n", "edges", "=", "lexical_edges", ",", "\n", "size", "=", "seq_len", ",", "\n", "t_map", "=", "t_map", ",", "\n", "r_map", "=", "r_map", "\n", ")", "\n", "\n", "edges", "=", "{", "\n", "'semantic'", ":", "semantic_adj", ",", "\n", "'emotion'", ":", "emotion_adj", ",", "\n", "'lexical'", ":", "lexical_adj", ",", "\n", "}", "\n", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame.MultiClassFrameDataset.__init__": [[23, 50], ["torch.utils.data.Dataset.__init__", "isinstance", "isinstance", "enumerate", "multi_class_frame.MultiClassFrameDataset.read_path", "enumerate", "open", "json.load", "json.load.items", "multi_class_frame.MultiClassFrameDataset.read_path", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path"], ["**", "kwargs", "\n", ")", ":", "\n", "\t\t"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame.MultiClassFrameDataset.read_path": [[51, 76], ["multi_class_frame.read_jsonl", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace().replace", "ex[].items", "multi_class_frame.MultiClassFrameDataset.tokenizer", "multi_class_frame.MultiClassFrameDataset.examples.append", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace", "ex_text.strip().replace().replace.strip().replace().replace.strip"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "num_classes", "=", "len", "(", "label_map", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "num_threshold_steps", "=", "num_threshold_steps", "\n", "self", ".", "update_threshold", "=", "update_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame.MultiClassFrameDataset.__len__": [[77, 79], ["len"], "methods", ["None"], ["self", ".", "cls_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "hidden_size", ",", "\n", "out_features", "=", "self", ".", "num_classes", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame.MultiClassFrameDataset.__getitem__": [[80, 87], ["torch.is_tensor", "idx.tolist.tolist.tolist"], "methods", ["None"], [")", "\n", "self", ".", "inv_label_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "label_map", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "f_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "\n", "p", "=", "self", ".", "hidden_dropout_prob", "\n", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame.MultiClassFrameDataset.worker_init_fn": [[88, 90], ["None"], "methods", ["None"], ["self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "reduction", "=", "'none'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame.MultiClassFrameDataModule.__init__": [[93, 146], ["pytorch_gleam.data.datasets.base_datasets.BaseDataModule.__init__", "multi_class_frame.MultiClassFrameDataset", "multi_class_frame.MultiClassFrameDataset", "multi_class_frame.MultiClassFrameDataset", "multi_class_frame.MultiClassFrameDataset"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], [")", "\n", "\n", "", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "setup", "(", "stage", ")", "\n", "if", "stage", "==", "'fit'", ":", "\n", "\t\t\t", "self", ".", "update_threshold", "=", "True", "\n", "\n", "", "", "def", "eval_epoch_end", "(", "self", ",", "outputs", ",", "stage", ")", ":", "\n", "\t\t", "loss", "=", "torch", ".", "cat", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "log", "(", "f'{stage}_loss'", ",", "loss", ")", "\n", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "\n", "results", ",", "labels", ",", "preds", ",", "t_ids", "=", "self", ".", "eval_outputs", "(", "\n", "outputs", ",", "\n", "stage", ",", "\n", "self", ".", "num_threshold_steps", ",", "\n", "self", ".", "update_threshold", "\n", ")", "\n", "for", "val_name", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "\t\t\t", "self", ".", "log", "(", "val_name", ",", "val", ")", "\n", "\n", "", "self", ".", "threshold", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "def", "eval_outputs", "(", "self", ",", "outputs", ",", "stage", ",", "num_threshold_steps", "=", "100", ",", "update_threshold", "=", "True", ")", ":", "\n", "\t\t", "results", "=", "{", "}", "\n", "\n", "t_ids", "=", "self", ".", "flatten", "(", "[", "x", "[", "'ids'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "# [count]", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "'labels'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "# [count, num_classes]", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "x", "[", "'scores'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "\n", "self", ".", "threshold", ".", "cpu", "(", ")", "\n", "if", "update_threshold", ":", "\n", "\t\t\t", "m_min_score", "=", "torch", ".", "min", "(", "scores", ")", ".", "item", "(", ")", "\n", "m_max_score", "=", "torch", ".", "max", "(", "scores", ")", ".", "item", "(", ")", "\n", "# check 100 values between min and max", "\n", "if", "abs", "(", "m_min_score", "-", "m_max_score", ")", "<", "1e-6", ":", "\n", "\t\t\t\t", "m_max_score", "+=", "10", "\n", "", "m_delta", "=", "(", "m_max_score", "-", "m_min_score", ")", "/", "num_threshold_steps", "\n", "max_threshold", ",", "max_metrics", "=", "self", ".", "metric", ".", "best", "(", "\n", "labels", ",", "\n", "scores", ",", "\n", "self", ".", "threshold", ",", "\n", "threshold_min", "=", "m_min_score", ",", "\n", "threshold_max", "=", "m_max_score", ",", "\n", "threshold_delta", "=", "m_delta", ",", "\n", ")", "\n", "self", ".", "threshold", ".", "update_thresholds", "(", "max_threshold", ")", "\n", "", "preds", "=", "self", ".", "threshold", "(", "scores", ")", "\n", "\n", "f1", ",", "p", ",", "r", ",", "cls_f1", ",", "cls_p", ",", "cls_r", ",", "cls_indices", "=", "self", ".", "metric", "(", "\n", "labels", ",", "\n", "preds", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame.MultiClassFrameDataModule.create_collator": [[148, 152], ["pytorch_gleam.data.collators.MultiClassFrameBatchCollator"], "methods", ["None"], ["\n", "results", "[", "f'{stage}_f1'", "]", "=", "f1", "\n", "results", "[", "f'{stage}_p'", "]", "=", "p", "\n", "results", "[", "f'{stage}_r'", "]", "=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame.read_jsonl": [[11, 18], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["\n", "\n", "# noinspection PyAbstractClass", "\n", "class", "MultiClassFrameLanguageModel", "(", "BaseLanguageModel", ")", ":", "\n", "\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.__init__": [[26, 46], ["torch.utils.data.Dataset.__init__", "isinstance", "open", "json.load", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path", "enumerate", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path"], ["def", "__init__", "(", "\n", "self", ",", "data_path", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", ",", "frame_path", ":", "str", ",", "\n", "label_name", ":", "str", ",", "tokenizer", ",", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "morality_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "morality_map", "=", "morality_map", "\n", "self", ".", "frame_path", "=", "frame_path", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "label_name", "=", "label_name", "\n", "self", ".", "label_map", "=", "label_map", "\n", "\n", "self", ".", "examples", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "frame_path", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "frames", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "isinstance", "(", "data_path", ",", "str", ")", ":", "\n", "\t\t\t", "self", ".", "read_path", "(", "data_path", ")", "\n", "", "else", ":", "\n", "\t\t\t", "for", "stage", ",", "stage_path", "in", "enumerate", "(", "data_path", ")", ":", "\n", "\t\t\t\t", "self", ".", "read_path", "(", "stage_path", ",", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.parse_example": [[47, 79], ["ex[].items", "frame[].items", "ex_examples.append", "numpy.array", "f_ex[].items", "f_morality.append"], "methods", ["None"], ["", "", "", "def", "parse_example", "(", "self", ",", "ex", ")", ":", "\n", "\t\t", "ex_id", "=", "ex", "[", "'id'", "]", "\n", "ex_examples", "=", "[", "]", "\n", "for", "f_id", ",", "f_label", "in", "ex", "[", "self", ".", "label_name", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "f_ex", "=", "ex", "[", "'f_examples'", "]", "[", "f_id", "]", "\n", "frame", "=", "self", ".", "frames", "[", "f_id", "]", "\n", "ex_label", "=", "0", "\n", "if", "f_label", "in", "self", ".", "label_map", ":", "\n", "\t\t\t\t", "ex_label", "=", "self", ".", "label_map", "[", "f_label", "]", "\n", "\n", "", "ex_edges", "=", "{", "e_key", ":", "np", ".", "array", "(", "e_value", ")", "for", "e_key", ",", "e_value", "in", "f_ex", "[", "'edges'", "]", ".", "items", "(", ")", "}", "\n", "\n", "ex_morality", "=", "[", "]", "\n", "if", "'morality_preds'", "in", "ex", ":", "\n", "\t\t\t\t", "ex_morality", "=", "[", "self", ".", "morality_map", "[", "m_name", "]", "for", "m_name", "in", "ex", "[", "'morality_preds'", "]", "]", "\n", "", "f_morality", "=", "[", "]", "\n", "for", "m_name", ",", "m_val", "in", "frame", "[", "'moralities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "m_val", ":", "\n", "\t\t\t\t\t", "f_morality", ".", "append", "(", "self", ".", "morality_map", "[", "m_name", "]", ")", "\n", "", "", "example", "=", "{", "\n", "'ids'", ":", "f'{ex_id}|{f_id}'", ",", "\n", "'label'", ":", "ex_label", ",", "\n", "'input_ids'", ":", "f_ex", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "f_ex", "[", "'attention_mask'", "]", ",", "\n", "'edges'", ":", "ex_edges", ",", "\n", "'ex_morality'", ":", "ex_morality", ",", "\n", "'f_morality'", ":", "f_morality", ",", "\n", "}", "\n", "if", "'token_type_ids'", "in", "f_ex", ":", "\n", "\t\t\t\t", "example", "[", "'token_type_ids'", "]", "=", "f_ex", "[", "'token_type_ids'", "]", "\n", "", "ex_examples", ".", "append", "(", "example", ")", "\n", "", "return", "ex_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.read_path": [[80, 84], ["tqdm.tqdm.tqdm", "enumerate", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.parse_example", "multi_class_frame_edge_morality.read_jsonl", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.examples.append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.parse_example", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "def", "read_path", "(", "self", ",", "data_path", ",", "stage", "=", "0", ")", ":", "\n", "\t\t", "for", "ex_idx", ",", "ex", "in", "tqdm", "(", "enumerate", "(", "read_jsonl", "(", "data_path", ")", ")", ")", ":", "\n", "\t\t\t", "for", "ex_example", "in", "self", ".", "parse_example", "(", "ex", ")", ":", "\n", "\t\t\t\t", "self", ".", "examples", ".", "append", "(", "ex_example", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.__getitem__": [[88, 95], ["torch.is_tensor", "idx.tolist.tolist.tolist"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "\t\t\t", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "example", "=", "self", ".", "examples", "[", "idx", "]", "\n", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset.worker_init_fn": [[96, 98], ["None"], "methods", ["None"], ["", "def", "worker_init_fn", "(", "self", ",", "_", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataModule.__init__": [[101, 160], ["pytorch_gleam.data.datasets.base_datasets.BaseDataModule.__init__", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataset"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_name", ":", "str", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "morality_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "frame_path", ":", "str", ",", "\n", "train_path", ":", "str", "=", "None", ",", "\n", "val_path", ":", "str", "=", "None", ",", "\n", "test_path", ":", "str", "=", "None", ",", "\n", "predict_path", ":", "str", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "morality_map", "=", "morality_map", "\n", "\n", "self", ".", "label_name", "=", "label_name", "\n", "self", ".", "train_path", "=", "train_path", "\n", "self", ".", "val_path", "=", "val_path", "\n", "self", ".", "test_path", "=", "test_path", "\n", "self", ".", "predict_path", "=", "predict_path", "\n", "self", ".", "frame_path", "=", "frame_path", "\n", "\n", "if", "self", ".", "train_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "train_dataset", "=", "MultiClassFrameEdgeMoralityDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "train_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "morality_map", "=", "self", ".", "morality_map", ",", "\n", ")", "\n", "", "if", "self", ".", "val_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "val_dataset", "=", "MultiClassFrameEdgeMoralityDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "val_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "morality_map", "=", "self", ".", "morality_map", ",", "\n", ")", "\n", "", "if", "self", ".", "test_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "test_dataset", "=", "MultiClassFrameEdgeMoralityDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "test_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "morality_map", "=", "self", ".", "morality_map", ",", "\n", ")", "\n", "", "if", "self", ".", "predict_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "predict_dataset", "=", "MultiClassFrameEdgeMoralityDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "predict_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "morality_map", "=", "self", ".", "morality_map", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityDataModule.create_collator": [[162, 167], ["pytorch_gleam.data.collators.MultiClassFrameEdgeMoralityBatchCollator", "len"], "methods", ["None"], ["", "", "def", "create_collator", "(", "self", ")", ":", "\n", "\t\t", "return", "MultiClassFrameEdgeMoralityBatchCollator", "(", "\n", "max_seq_len", "=", "self", ".", "max_seq_len", ",", "\n", "use_tpus", "=", "self", ".", "use_tpus", ",", "\n", "num_moralities", "=", "len", "(", "self", ".", "morality_map", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality.read_jsonl": [[14, 21], ["open", "line.strip.strip", "json.loads"], "function", ["None"], ["def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_misinfo_stance.MultiClassMisinfoStanceDataset.__init__": [[8, 28], ["pytorch_gleam.data.datasets.misinfo_stance.MisinfoStanceDataset.__init__", "tokenizer", "multi_class_misinfo_stance.MultiClassMisinfoStanceDataset.examples.append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "tokenizer", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "base_examples", "=", "self", ".", "examples", "\n", "self", ".", "examples", "=", "[", "]", "\n", "for", "ex", "in", "self", ".", "base_examples", ":", "\n", "\t\t\t", "ex_id", "=", "ex", "[", "'ex_id'", "]", "\n", "m_id", "=", "ex", "[", "'m_id'", "]", "\n", "token_data", "=", "tokenizer", "(", "\n", "ex", "[", "'m_text'", "]", ",", "\n", "ex", "[", "'ex_text'", "]", "\n", ")", "\n", "p_ex", "=", "{", "\n", "'ids'", ":", "f'{ex_id}|{m_id}'", ",", "\n", "'labels'", ":", "ex", "[", "'m_label'", "]", ",", "\n", "'input_ids'", ":", "token_data", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "token_data", "[", "'attention_mask'", "]", ",", "\n", "}", "\n", "if", "'token_type_ids'", "in", "token_data", ":", "\n", "\t\t\t\t", "p_ex", "[", "'token_type_ids'", "]", "=", "token_data", "[", "'token_type_ids'", "]", "\n", "", "self", ".", "examples", ".", "append", "(", "p_ex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_misinfo_stance.MultiClassMisinfoStanceDataModule.__init__": [[31, 70], ["pytorch_gleam.data.datasets.base_datasets.BaseDataModule.__init__", "multi_class_misinfo_stance.MultiClassMisinfoStanceDataset", "multi_class_misinfo_stance.MultiClassMisinfoStanceDataset", "multi_class_misinfo_stance.MultiClassMisinfoStanceDataset", "multi_class_misinfo_stance.MultiClassMisinfoStanceDataset"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "train_misinfo_path", ":", "str", "=", "None", ",", "\n", "val_misinfo_path", ":", "str", "=", "None", ",", "\n", "test_misinfo_path", ":", "str", "=", "None", ",", "\n", "predict_misinfo_path", ":", "str", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "train_misinfo_path", "=", "train_misinfo_path", "\n", "self", ".", "val_misinfo_path", "=", "val_misinfo_path", "\n", "self", ".", "test_misinfo_path", "=", "test_misinfo_path", "\n", "self", ".", "predict_misinfo_path", "=", "predict_misinfo_path", "\n", "\n", "if", "self", ".", "train_path", "is", "not", "None", "and", "self", ".", "train_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "train_dataset", "=", "MultiClassMisinfoStanceDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "train_path", ",", "\n", "misinfo_path", "=", "train_misinfo_path", "\n", ")", "\n", "", "if", "self", ".", "val_path", "is", "not", "None", "and", "self", ".", "val_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "val_dataset", "=", "MultiClassMisinfoStanceDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "val_path", ",", "\n", "misinfo_path", "=", "val_misinfo_path", "\n", ")", "\n", "", "if", "self", ".", "test_path", "is", "not", "None", "and", "self", ".", "test_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "test_dataset", "=", "MultiClassMisinfoStanceDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "test_path", ",", "\n", "misinfo_path", "=", "test_misinfo_path", "\n", ")", "\n", "", "if", "self", ".", "predict_path", "is", "not", "None", "and", "self", ".", "predict_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "predict_dataset", "=", "MultiClassMisinfoStanceDataset", "(", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "predict_path", ",", "\n", "misinfo_path", "=", "predict_misinfo_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_misinfo_stance.MultiClassMisinfoStanceDataModule.create_collator": [[72, 76], ["pytorch_gleam.data.collators.MultiSequenceBatchCollator"], "methods", ["None"], ["", "", "def", "create_collator", "(", "self", ")", ":", "\n", "\t\t", "return", "MultiSequenceBatchCollator", "(", "\n", "max_seq_len", "=", "self", ".", "max_seq_len", ",", "\n", "use_tpus", "=", "self", ".", "use_tpus", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset.__init__": [[12, 79], ["pytorch_gleam.data.datasets.misinfo_stance.MisinfoStanceDataset.__init__", "kbi_misinfo_stance.KbiMisinfoStanceDataset.misinfo.items", "collections.defaultdict", "collections.defaultdict", "tokenizer", "[].append", "kbi_misinfo_stance.KbiMisinfoStanceDataset.m_examples[].append", "kbi_misinfo_stance.KbiMisinfoStanceDataset.full_examples.append", "collections.defaultdict", "tokenizer", "kbi_misinfo_stance.KbiMisinfoStanceDataset.examples.append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "tokenizer", ",", "pos_samples", ":", "int", "=", "1", ",", "neg_samples", ":", "int", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "pos_samples", "=", "pos_samples", "\n", "self", ".", "neg_samples", "=", "neg_samples", "\n", "self", ".", "permutations", "=", "[", "\n", "self", ".", "flip_polarity", ",", "\n", "self", ".", "flip_rel", ",", "\n", "self", ".", "zero_polarity", ",", "\n", "# self.zero_all_polarity", "\n", "]", "\n", "for", "m_id", ",", "m", "in", "self", ".", "misinfo", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m", "[", "'token_data'", "]", "=", "tokenizer", "(", "\n", "m", "[", "'text'", "]", "\n", ")", "\n", "", "self", ".", "full_examples", "=", "[", "]", "\n", "self", ".", "base_examples", "=", "self", ".", "examples", "\n", "self", ".", "examples", "=", "[", "]", "\n", "self", ".", "label_examples", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "self", ".", "m_examples", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "m_exs", "=", "{", "}", "\n", "ex_token_data", "=", "{", "}", "\n", "for", "pair_ex", "in", "self", ".", "base_examples", ":", "\n", "\t\t\t", "ex_id", "=", "pair_ex", "[", "'ex_id'", "]", "\n", "if", "ex_id", "in", "ex_token_data", ":", "\n", "\t\t\t\t", "token_data", "=", "ex_token_data", "[", "ex_id", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "token_data", "=", "tokenizer", "(", "\n", "pair_ex", "[", "'ex_text'", "]", "\n", ")", "\n", "ex_token_data", "[", "ex_id", "]", "=", "token_data", "\n", "\n", "", "m_id", "=", "pair_ex", "[", "'m_id'", "]", "\n", "m", "=", "self", ".", "misinfo", "[", "m_id", "]", "\n", "m_label", "=", "pair_ex", "[", "'m_label'", "]", "\n", "if", "m_id", "in", "self", ".", "m_exs", ":", "\n", "\t\t\t\t", "m_ex", "=", "self", ".", "m_exs", "[", "m_id", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "m_ex", "=", "{", "\n", "'m_id'", ":", "m_id", ",", "\n", "'m_text'", ":", "pair_ex", "[", "'m_text'", "]", ",", "\n", "'input_ids'", ":", "m", "[", "'token_data'", "]", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "m", "[", "'token_data'", "]", "[", "'attention_mask'", "]", ",", "\n", "}", "\n", "if", "'token_type_ids'", "in", "m", "[", "'token_data'", "]", ":", "\n", "\t\t\t\t\t", "m_ex", "[", "'token_type_ids'", "]", "=", "m", "[", "'token_data'", "]", "[", "'token_type_ids'", "]", "\n", "", "self", ".", "m_exs", "[", "m_id", "]", "=", "m_ex", "\n", "", "t_ex", "=", "{", "\n", "'t_id'", ":", "ex_id", ",", "\n", "'t_text'", ":", "pair_ex", "[", "'ex_text'", "]", ",", "\n", "'input_ids'", ":", "token_data", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "token_data", "[", "'attention_mask'", "]", ",", "\n", "'m_label'", ":", "m_label", ",", "\n", "'stage'", ":", "pair_ex", "[", "'stage'", "]", "\n", "}", "\n", "if", "'token_type_ids'", "in", "token_data", ":", "\n", "\t\t\t\t", "t_ex", "[", "'token_type_ids'", "]", "=", "token_data", "[", "'token_type_ids'", "]", "\n", "", "ex", "=", "{", "\n", "'t_ex'", ":", "t_ex", ",", "\n", "'m_ex'", ":", "m_ex", ",", "\n", "}", "\n", "self", ".", "label_examples", "[", "m_id", "]", "[", "m_label", "]", ".", "append", "(", "t_ex", ")", "\n", "self", ".", "m_examples", "[", "m_id", "]", ".", "append", "(", "t_ex", ")", "\n", "# no stance has no true pairs", "\n", "if", "m_label", "!=", "0", ":", "\n", "\t\t\t\t", "self", ".", "examples", ".", "append", "(", "ex", ")", "\n", "", "self", ".", "full_examples", ".", "append", "(", "ex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset.__getitem__": [[80, 153], ["torch.is_tensor", "kbi_misinfo_stance.KbiMisinfoStanceDataset._sample_relation", "kbi_misinfo_stance.tmp_stance", "kbi_misinfo_stance.KbiMisinfoStanceDataset._sample", "kbi_misinfo_stance.KbiMisinfoStanceDataset._negative_sample", "kbi_misinfo_stance.KbiMisinfoStanceDataset._sample_direction", "idx.tolist.tolist.tolist", "len", "kbi_misinfo_stance.flip_relation", "kbi_misinfo_stance.tmp_stance", "neg_samples.append", "neg_relations.append", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample_relation", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.tmp_stance", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._negative_sample", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample_direction", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_relation", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.tmp_stance"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "\t\t\t", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "ex", "=", "self", ".", "examples", "[", "idx", "]", "\n", "t_ex", "=", "ex", "[", "'t_ex'", "]", "\n", "m_ex", "=", "ex", "[", "'m_ex'", "]", "\n", "# 1 is accept", "\n", "# 2 is reject", "\n", "# 0 is no stance, and is only in negative_examples", "\n", "tm_stance", "=", "t_ex", "[", "'m_label'", "]", "\n", "m_id", "=", "m_ex", "[", "'m_id'", "]", "\n", "t_id", "=", "t_ex", "[", "'t_id'", "]", "\n", "\n", "# TODO positive examples", "\n", "# 0 is entail", "\n", "# 1 is contradict", "\n", "# TODO could sample positive relations too", "\n", "tmp_relation", "=", "self", ".", "_sample_relation", "(", ")", "\n", "pm_stance", "=", "tmp_stance", "(", "tmp_relation", ",", "tm_stance", ")", "\n", "pos_examples", "=", "self", ".", "label_examples", "[", "m_id", "]", "[", "pm_stance", "]", "\n", "# if pos_examples is empty then flip tmp_relation", "\n", "if", "len", "(", "pos_examples", ")", "==", "0", ":", "\n", "\t\t\t", "tmp_relation", "=", "flip_relation", "(", "tmp_relation", ")", "\n", "pm_stance", "=", "tmp_stance", "(", "tmp_relation", ",", "tm_stance", ")", "\n", "pos_examples", "=", "self", ".", "label_examples", "[", "m_id", "]", "[", "pm_stance", "]", "\n", "\n", "# t - tmp_relation -> p", "\n", "", "pos_samples", "=", "self", ".", "_sample", "(", "\n", "pos_examples", ",", "\n", "self", ".", "pos_samples", ",", "\n", "replacement", "=", "False", "\n", ")", "\n", "# negative sampling", "\n", "# Four ways to create negative samples", "\n", "# (flip polarity): a -> a to a -> r", "\n", "# (flip rel) a -> a to a \\-> a", "\n", "# (zero polarity): a -> a to a -> ns", "\n", "# (zero all polarity) a -> a to ns -> ns", "\n", "# all four permutations could be useful for training", "\n", "# first three are necessary", "\n", "# fourth is only needed if ns will be used in seed kb for inference", "\n", "neg_relation_samples", "=", "self", ".", "_negative_sample", "(", "\n", "m_id", ",", "\n", "tmp_relation", ",", "\n", "pm_stance", ",", "\n", "pos_samples", ",", "\n", "self", ".", "neg_samples", "\n", ")", "\n", "neg_samples", "=", "[", "]", "\n", "neg_relations", "=", "[", "]", "\n", "for", "neg_relation", ",", "neg_sample", "in", "neg_relation_samples", ":", "\n", "\t\t\t", "neg_samples", ".", "append", "(", "neg_sample", ")", "\n", "neg_relations", ".", "append", "(", "neg_relation", ")", "\n", "\n", "", "direction", "=", "self", ".", "_sample_direction", "(", ")", "\n", "# [pos sample relation labels + neg_sample_relation_labels]", "\n", "# not used for training, stance labels are unnecessary", "\n", "labels", "=", "[", "tm_stance", "]", "+", "[", "p_ex", "[", "'m_label'", "]", "for", "p_ex", "in", "pos_samples", "]", "+", "[", "n_ex", "[", "'m_label'", "]", "for", "n_ex", "in", "neg_samples", "]", "\n", "stages", "=", "[", "t_ex", "[", "'stage'", "]", "]", "+", "[", "p_ex", "[", "'stage'", "]", "for", "p_ex", "in", "pos_samples", "]", "+", "[", "n_ex", "[", "'stage'", "]", "for", "n_ex", "in", "neg_samples", "]", "\n", "relations", "=", "[", "tmp_relation", "for", "_", "in", "range", "(", "len", "(", "pos_samples", ")", ")", "]", "+", "neg_relations", "\n", "ex", "=", "{", "\n", "'t_ex'", ":", "t_ex", ",", "\n", "'m_ex'", ":", "m_ex", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'stages'", ":", "stages", ",", "\n", "'p_samples'", ":", "pos_samples", ",", "\n", "'n_samples'", ":", "neg_samples", ",", "\n", "'direction'", ":", "direction", ",", "\n", "'relations'", ":", "relations", "\n", "}", "\n", "\n", "return", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._negative_sample": [[154, 169], ["torch.randint().tolist", "torch.randint", "permutation", "len"], "methods", ["None"], ["", "def", "_negative_sample", "(", "self", ",", "m_id", ",", "tmp_relation", ",", "pm_stance", ",", "pos_samples", ",", "sample_count", ")", ":", "\n", "\t\t", "possible_permutations", "=", "[", "\n", "permutation", "\n", "for", "permutation", "in", "self", ".", "permutations", "\n", "if", "permutation", "(", "m_id", ",", "tmp_relation", ",", "pm_stance", ",", "pos_samples", ")", "is", "not", "None", "\n", "]", "\n", "p_indices", "=", "torch", ".", "randint", "(", "\n", "high", "=", "len", "(", "possible_permutations", ")", ",", "\n", "size", "=", "[", "sample_count", "]", ",", "\n", ")", ".", "tolist", "(", ")", "\n", "samples", "=", "[", "\n", "possible_permutations", "[", "i", "]", "(", "m_id", ",", "tmp_relation", ",", "pm_stance", ",", "pos_samples", ")", "for", "i", "in", "p_indices", "\n", "]", "\n", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset.flip_polarity": [[170, 182], ["kbi_misinfo_stance.flip_tm_stance", "len", "kbi_misinfo_stance.KbiMisinfoStanceDataset._sample"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_tm_stance", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample"], ["", "def", "flip_polarity", "(", "self", ",", "m_id", ",", "tmp_relation", ",", "pm_stance", ",", "pos_samples", ")", ":", "\n", "# (flip polarity): a -> a to a -> r", "\n", "\t\t", "flip_pm_stance", "=", "flip_tm_stance", "(", "pm_stance", ")", "\n", "m_examples", "=", "self", ".", "label_examples", "[", "m_id", "]", "[", "flip_pm_stance", "]", "\n", "if", "len", "(", "m_examples", ")", "==", "0", ":", "\n", "\t\t\t", "return", "None", "\n", "", "s_example", "=", "self", ".", "_sample", "(", "\n", "m_examples", ",", "\n", "m_count", "=", "1", ",", "\n", "replacement", "=", "True", "\n", ")", "[", "0", "]", "\n", "return", "tmp_relation", ",", "s_example", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset.flip_rel": [[183, 192], ["kbi_misinfo_stance.flip_relation", "kbi_misinfo_stance.KbiMisinfoStanceDataset._sample"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_relation", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample"], ["", "def", "flip_rel", "(", "self", ",", "m_id", ",", "tmp_relation", ",", "pm_stance", ",", "pos_samples", ")", ":", "\n", "# (flip rel) a -> a to a \\-> a", "\n", "\t\t", "flip_tmp_relation", "=", "flip_relation", "(", "tmp_relation", ")", "\n", "s_example", "=", "self", ".", "_sample", "(", "\n", "pos_samples", ",", "\n", "m_count", "=", "1", ",", "\n", "replacement", "=", "True", "\n", ")", "[", "0", "]", "\n", "return", "flip_tmp_relation", ",", "s_example", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset.zero_polarity": [[193, 205], ["len", "kbi_misinfo_stance.KbiMisinfoStanceDataset._sample"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample"], ["", "def", "zero_polarity", "(", "self", ",", "m_id", ",", "tmp_relation", ",", "pm_stance", ",", "pos_samples", ")", ":", "\n", "# (zero polarity): a -> a to a -> ns", "\n", "# 0 is zero stance polarity", "\n", "\t\t", "m_examples", "=", "self", ".", "label_examples", "[", "m_id", "]", "[", "0", "]", "\n", "if", "len", "(", "m_examples", ")", "==", "0", ":", "\n", "\t\t\t", "return", "None", "\n", "", "s_example", "=", "self", ".", "_sample", "(", "\n", "m_examples", ",", "\n", "m_count", "=", "1", ",", "\n", "replacement", "=", "True", "\n", ")", "[", "0", "]", "\n", "return", "tmp_relation", ",", "s_example", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample": [[206, 222], ["torch.randint().tolist", "samples.append", "torch.randperm().tolist", "torch.randint", "torch.randperm", "len", "len"], "methods", ["None"], ["", "def", "_sample", "(", "self", ",", "m_examples", ",", "m_count", ",", "replacement", "=", "False", ")", ":", "\n", "\t\t", "samples", "=", "[", "]", "\n", "if", "m_count", "<=", "0", ":", "\n", "\t\t\t", "return", "samples", "\n", "", "if", "not", "replacement", ":", "\n", "\t\t\t", "m_s_indices", "=", "torch", ".", "randperm", "(", "\n", "n", "=", "len", "(", "m_examples", ")", ",", "\n", ")", ".", "tolist", "(", ")", "[", ":", "m_count", "]", "\n", "", "else", ":", "\n", "\t\t\t", "m_s_indices", "=", "torch", ".", "randint", "(", "\n", "high", "=", "len", "(", "m_examples", ")", ",", "\n", "size", "=", "[", "m_count", "]", ",", "\n", ")", ".", "tolist", "(", ")", "\n", "", "for", "s_idx", "in", "m_s_indices", ":", "\n", "\t\t\t", "samples", ".", "append", "(", "m_examples", "[", "s_idx", "]", ")", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample_direction": [[223, 231], ["torch.rand().tolist", "torch.rand"], "methods", ["None"], ["", "def", "_sample_direction", "(", "self", ")", ":", "\n", "\t\t", "r", "=", "torch", ".", "rand", "(", "\n", "size", "=", "(", "1", ",", ")", ",", "\n", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "r", "<", "0.5", ":", "\n", "\t\t\t", "return", "0", "\n", "", "else", ":", "\n", "\t\t\t", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset._sample_relation": [[232, 240], ["torch.rand().tolist", "torch.rand"], "methods", ["None"], ["", "", "def", "_sample_relation", "(", "self", ")", ":", "\n", "\t\t", "r", "=", "torch", ".", "rand", "(", "\n", "size", "=", "(", "1", ",", ")", ",", "\n", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "r", "<", "0.5", ":", "\n", "\t\t\t", "return", "0", "\n", "", "else", ":", "\n", "\t\t\t", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset.worker_init_fn": [[241, 243], ["None"], "methods", ["None"], ["", "", "def", "worker_init_fn", "(", "self", ",", "_", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoInferStanceDataset.__init__": [[246, 260], ["kbi_misinfo_stance.KbiMisinfoStanceDataset.__init__", "kbi_misinfo_stance.KbiMisinfoInferStanceDataset.m_examples.items", "itertools.combinations", "kbi_misinfo_stance.KbiMisinfoInferStanceDataset.examples.append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "pair_count", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# TODO support pair counts greater than 1", "\n", "self", ".", "pair_count", "=", "pair_count", "\n", "self", ".", "examples", "=", "[", "]", "\n", "for", "m_id", ",", "m_examples", "in", "self", ".", "m_examples", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m_ex", "=", "self", ".", "m_exs", "[", "m_id", "]", "\n", "for", "a_ex", ",", "b_ex", "in", "itertools", ".", "combinations", "(", "m_examples", ",", "2", ")", ":", "\n", "\t\t\t\t", "pair_ex", "=", "{", "\n", "'t_ex'", ":", "a_ex", ",", "\n", "'p_ex'", ":", "b_ex", ",", "\n", "'m_ex'", ":", "m_ex", ",", "\n", "}", "\n", "self", ".", "examples", ".", "append", "(", "pair_ex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoInferStanceDataset.__getitem__": [[261, 291], ["torch.is_tensor", "idx.tolist.tolist.tolist", "range", "len"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "\t\t\t", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "ex", "=", "self", ".", "examples", "[", "idx", "]", "\n", "t_ex", "=", "ex", "[", "'t_ex'", "]", "\n", "m_ex", "=", "ex", "[", "'m_ex'", "]", "\n", "pair_examples", "=", "[", "ex", "[", "'p_ex'", "]", "]", "\n", "# 1 is accept", "\n", "# 2 is reject", "\n", "# 0 is no stance, and is only in negative_examples", "\n", "\n", "# both directions", "\n", "direction", "=", "[", "0", ",", "1", "]", "\n", "labels", "=", "[", "t_ex", "[", "'m_label'", "]", "]", "+", "[", "p_ex", "[", "'m_label'", "]", "for", "p_ex", "in", "pair_examples", "]", "\n", "stages", "=", "[", "t_ex", "[", "'stage'", "]", "]", "+", "[", "p_ex", "[", "'stage'", "]", "for", "p_ex", "in", "pair_examples", "]", "\n", "# both relations", "\n", "relations", "=", "[", "[", "0", ",", "1", "]", "for", "_", "in", "range", "(", "len", "(", "pair_examples", ")", ")", "]", "\n", "ex", "=", "{", "\n", "'t_ex'", ":", "t_ex", ",", "\n", "'m_ex'", ":", "m_ex", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'stages'", ":", "stages", ",", "\n", "'p_samples'", ":", "pair_examples", ",", "\n", "'n_samples'", ":", "[", "]", ",", "\n", "'direction'", ":", "direction", ",", "\n", "'relations'", ":", "relations", "\n", "}", "\n", "\n", "return", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataModule.__init__": [[294, 371], ["pytorch_gleam.data.datasets.base_datasets.BaseDataModule.__init__", "kbi_misinfo_stance.KbiMisinfoStanceDataset", "kbi_misinfo_stance.KbiMisinfoStanceDataset", "kbi_misinfo_stance.KbiMisinfoInferStanceDataset", "kbi_misinfo_stance.KbiMisinfoStanceDataset", "kbi_misinfo_stance.KbiMisinfoInferStanceDataset", "kbi_misinfo_stance.KbiMisinfoInferStanceDataset"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "train_misinfo_path", ":", "str", "=", "None", ",", "\n", "val_misinfo_path", ":", "str", "=", "None", ",", "\n", "test_misinfo_path", ":", "str", "=", "None", ",", "\n", "predict_misinfo_path", ":", "str", "=", "None", ",", "\n", "pos_samples", ":", "int", "=", "1", ",", "\n", "neg_samples", ":", "int", "=", "1", ",", "\n", "num_relations", ":", "int", "=", "2", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "train_misinfo_path", "=", "train_misinfo_path", "\n", "self", ".", "val_misinfo_path", "=", "val_misinfo_path", "\n", "self", ".", "test_misinfo_path", "=", "test_misinfo_path", "\n", "self", ".", "predict_misinfo_path", "=", "predict_misinfo_path", "\n", "self", ".", "pos_samples", "=", "pos_samples", "\n", "self", ".", "neg_samples", "=", "neg_samples", "\n", "self", ".", "num_relations", "=", "num_relations", "\n", "\n", "if", "self", ".", "train_path", "is", "not", "None", "and", "self", ".", "train_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "train_dataset", "=", "KbiMisinfoStanceDataset", "(", "\n", "pos_samples", "=", "self", ".", "pos_samples", ",", "\n", "neg_samples", "=", "self", ".", "neg_samples", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "train_path", ",", "\n", "misinfo_path", "=", "self", ".", "train_misinfo_path", "\n", ")", "\n", "", "if", "self", ".", "val_path", "is", "not", "None", "and", "self", ".", "val_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "val_triplet_dataset", "=", "KbiMisinfoStanceDataset", "(", "\n", "pos_samples", "=", "self", ".", "pos_samples", ",", "\n", "neg_samples", "=", "self", ".", "neg_samples", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "val_path", ",", "\n", "misinfo_path", "=", "self", ".", "val_misinfo_path", "\n", ")", "\n", "val_infer_dataset", "=", "KbiMisinfoInferStanceDataset", "(", "\n", "pos_samples", "=", "1", ",", "\n", "neg_samples", "=", "1", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "val_path", ",", "\n", "misinfo_path", "=", "self", ".", "val_misinfo_path", "\n", ")", "\n", "\n", "self", ".", "val_dataset", "=", "[", "\n", "val_triplet_dataset", ",", "\n", "val_infer_dataset", "\n", "]", "\n", "", "if", "self", ".", "test_path", "is", "not", "None", "and", "self", ".", "test_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "test_triplet_dataset", "=", "KbiMisinfoStanceDataset", "(", "\n", "pos_samples", "=", "self", ".", "pos_samples", ",", "\n", "neg_samples", "=", "self", ".", "neg_samples", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "test_path", ",", "\n", "misinfo_path", "=", "self", ".", "test_misinfo_path", "\n", ")", "\n", "test_infer_dataset", "=", "KbiMisinfoInferStanceDataset", "(", "\n", "pos_samples", "=", "1", ",", "\n", "neg_samples", "=", "1", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "[", "self", ".", "val_path", ",", "self", ".", "test_path", "]", ",", "\n", "misinfo_path", "=", "self", ".", "test_misinfo_path", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "[", "\n", "test_triplet_dataset", ",", "\n", "test_infer_dataset", "\n", "]", "\n", "", "if", "self", ".", "predict_path", "is", "not", "None", "and", "self", ".", "predict_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "predict_dataset", "=", "KbiMisinfoInferStanceDataset", "(", "\n", "pos_samples", "=", "1", ",", "\n", "neg_samples", "=", "1", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "[", "self", ".", "val_path", ",", "self", ".", "predict_path", "]", ",", "\n", "misinfo_path", "=", "self", ".", "predict_misinfo_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataModule.create_collator": [[373, 378], ["pytorch_gleam.data.collators.KbiBatchCollator"], "methods", ["None"], ["", "", "def", "create_collator", "(", "self", ")", ":", "\n", "\t\t", "return", "KbiBatchCollator", "(", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "max_seq_len", "=", "self", ".", "max_seq_len", ",", "\n", "use_tpus", "=", "self", ".", "use_tpus", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.tmp_stance": [[381, 390], ["None"], "function", ["None"], ["", "", "def", "tmp_stance", "(", "tmp_relation", ",", "tm_stance", ")", ":", "\n", "# 0 (entail) + 1 = 1 % 2 = 1", "\n", "# 1 (contradict) + 1 = 2 % 2 = 0", "\n", "\t", "r_mod", "=", "(", "tmp_relation", "+", "1", ")", "%", "2", "\n", "# 1 % 2 = 1 + 1 = 2", "\n", "# 2 % 2 = 0 + 1 = 1", "\n", "# r_mod is 1 when entail, so flipping (tm_stance + 1) % 2 to get 1 is same as tm_stance", "\n", "# r_mod is 0 when contradict, so flipping tm_stance is correct", "\n", "return", "(", "tm_stance", "+", "r_mod", ")", "%", "2", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_tm_stance": [[392, 404], ["min"], "function", ["None"], ["", "def", "flip_tm_stance", "(", "tm_stance", ")", ":", "\n", "# 0 is no_stance", "\n", "# 1 is accept", "\n", "# 2 is reject", "\n", "# 0 -> 0", "\n", "# 1 -> 2", "\n", "# 2 -> 1", "\n", "# 0 % 2 = 0 + 0 = 0", "\n", "# 1 % 2 = 1 + 1 = 2", "\n", "# 2 % 2 = 0 + 1 = 1", "\n", "\t", "tm_flip_stance", "=", "(", "tm_stance", "%", "2", ")", "+", "min", "(", "1", ",", "tm_stance", ")", "\n", "return", "tm_flip_stance", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.kbi_misinfo_stance.flip_relation": [[406, 410], ["None"], "function", ["None"], ["", "def", "flip_relation", "(", "tmp_relation", ")", ":", "\n", "# 0 -> 1", "\n", "# 1 -> 0", "\n", "\t", "return", "(", "tmp_relation", "+", "1", ")", "%", "2", "\n", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset.__init__": [[51, 84], ["torch.utils.data.IterableDataset.__init__", "print", "open", "ujson.load"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "batch_size", ":", "int", ",", "\n", "tokenizer", ",", "\n", "data_path", ":", "str", ",", "\n", "frame_path", ":", "str", ",", "\n", "label_name", ":", "str", ",", "\n", "morality_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "worker_estimate", ":", "int", ",", "\n", "size_estimate", ":", "int", ",", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "morality_map", "=", "morality_map", "\n", "self", ".", "frame_path", "=", "frame_path", "\n", "self", ".", "label_name", "=", "label_name", "\n", "self", ".", "data_path", "=", "data_path", "\n", "\n", "self", ".", "frequency", "=", "0", "\n", "self", ".", "num_workers", "=", "1", "\n", "self", ".", "worker_estimate", "=", "worker_estimate", "\n", "self", ".", "size_estimate", "=", "size_estimate", "\n", "self", ".", "_iterator", "=", "None", "\n", "\n", "with", "open", "(", "self", ".", "frame_path", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "frames", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "num_examples", "=", "self", ".", "size_estimate", "\n", "# for ex in read_jsonl(self.data_path):", "\n", "# \tself.num_examples += len(ex[self.label_name])", "\n", "\n", "print", "(", "f'Num examples: {self.num_examples}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset.__len__": [[85, 88], ["int", "math.ceil"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "length", "=", "int", "(", "ceil", "(", "(", "self", ".", "num_examples", "/", "self", ".", "worker_estimate", ")", "/", "self", ".", "batch_size", ")", ")", "\n", "return", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset.__iter__": [[89, 92], ["multi_class_frame_edge_morality_iter.batch", "multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset._ex_iter"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.batch", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset._ex_iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\t\t", "for", "i_batch", "in", "batch", "(", "self", ".", "_ex_iter", "(", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "\t\t\t", "yield", "i_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset._ex_iter": [[93, 140], ["multi_class_frame_edge_morality_iter.read_jsonl", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace().replace", "tweet[].items", "ex_text.strip().replace().replace.strip().replace().replace.strip().replace", "multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset.tokenizer", "len", "f_ex[].items", "frame[].items", "numpy.eye", "ex_text.strip().replace().replace.strip().replace().replace.strip", "f_morality.append"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "def", "_ex_iter", "(", "self", ")", ":", "\n", "\t\t", "ex_idx", "=", "0", "\n", "for", "tweet", "in", "read_jsonl", "(", "self", ".", "data_path", ")", ":", "\n", "\t\t\t", "ex_id", "=", "tweet", "[", "'id'", "]", "\n", "ex_text", "=", "tweet", "[", "'full_text'", "]", "if", "'full_text'", "in", "tweet", "else", "tweet", "[", "'text'", "]", "\n", "ex_text", "=", "ex_text", ".", "strip", "(", ")", ".", "replace", "(", "'\\r'", ",", "' '", ")", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "\n", "for", "f_id", ",", "f_label", "in", "tweet", "[", "self", ".", "label_name", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "ex_idx", "%", "self", ".", "num_workers", "==", "self", ".", "frequency", ":", "\n", "\t\t\t\t\t", "f_ex", "=", "tweet", "[", "'f_examples'", "]", "[", "f_id", "]", "\n", "frame", "=", "self", ".", "frames", "[", "f_id", "]", "\n", "frame_text", "=", "frame", "[", "'text'", "]", "\n", "token_data", "=", "self", ".", "tokenizer", "(", "\n", "frame_text", ",", "\n", "ex_text", "\n", ")", "\n", "seq_len", "=", "len", "(", "token_data", "[", "'input_ids'", "]", ")", "\n", "ex_label", "=", "0", "\n", "# create np.eye of floats, then fill in with tuples", "\n", "# ex_edges = {e_key: np.array(e_value) for e_key, e_value in f_ex['edges'].items()}", "\n", "ex_edges", "=", "{", "}", "\n", "for", "edge_type", ",", "edge_list", "in", "f_ex", "[", "'edges'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t\t\t\t", "adj_list", "=", "np", ".", "eye", "(", "seq_len", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "j", "in", "edge_list", ":", "\n", "\t\t\t\t\t\t\t", "adj_list", "[", "i", ",", "j", "]", "=", "1.0", "\n", "adj_list", "[", "j", ",", "i", "]", "=", "1.0", "\n", "", "ex_edges", "[", "edge_type", "]", "=", "adj_list", "\n", "", "ex_morality", "=", "[", "]", "\n", "if", "'morality_preds'", "in", "tweet", ":", "\n", "\t\t\t\t\t\t", "ex_morality", "=", "[", "self", ".", "morality_map", "[", "m_name", "]", "for", "m_name", "in", "tweet", "[", "'morality_preds'", "]", "]", "\n", "", "f_morality", "=", "[", "]", "\n", "for", "m_name", ",", "m_val", "in", "frame", "[", "'moralities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t\t\t\t", "if", "m_val", ":", "\n", "\t\t\t\t\t\t\t", "f_morality", ".", "append", "(", "self", ".", "morality_map", "[", "m_name", "]", ")", "\n", "", "", "example", "=", "{", "\n", "'ids'", ":", "f'{ex_id}|{f_id}'", ",", "\n", "'label'", ":", "ex_label", ",", "\n", "'input_ids'", ":", "token_data", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "token_data", "[", "'attention_mask'", "]", ",", "\n", "'edges'", ":", "ex_edges", ",", "\n", "'ex_morality'", ":", "ex_morality", ",", "\n", "'f_morality'", ":", "f_morality", ",", "\n", "}", "\n", "if", "'token_type_ids'", "in", "token_data", ":", "\n", "\t\t\t\t\t\t", "example", "[", "'token_type_ids'", "]", "=", "token_data", "[", "'token_type_ids'", "]", "\n", "", "yield", "example", "\n", "", "ex_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset.worker_init_fn": [[141, 143], ["multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset.worker_init_fn"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.worker_init_fn"], ["", "", "", "def", "worker_init_fn", "(", "self", ",", "_", ")", ":", "\n", "\t\t", "return", "worker_init_fn", "(", "_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataModule.__init__": [[146, 177], ["pytorch_gleam.data.datasets.base_datasets.BaseDataModule.__init__", "multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataset"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_name", ":", "str", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "morality_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "frame_path", ":", "str", ",", "\n", "predict_path", ":", "str", ",", "\n", "worker_estimate", ":", "int", ",", "\n", "size_estimate", ":", "int", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "morality_map", "=", "morality_map", "\n", "\n", "self", ".", "label_name", "=", "label_name", "\n", "self", ".", "predict_path", "=", "predict_path", "\n", "self", ".", "frame_path", "=", "frame_path", "\n", "self", ".", "worker_estimate", "=", "worker_estimate", "\n", "self", ".", "size_estimate", "=", "size_estimate", "\n", "\n", "self", ".", "predict_dataset", "=", "MultiClassFrameEdgeMoralityIterableDataset", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "predict_path", ",", "\n", "frame_path", "=", "self", ".", "frame_path", ",", "\n", "label_name", "=", "self", ".", "label_name", ",", "\n", "morality_map", "=", "self", ".", "morality_map", ",", "\n", "worker_estimate", "=", "self", ".", "worker_estimate", ",", "\n", "size_estimate", "=", "self", ".", "size_estimate", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.MultiClassFrameEdgeMoralityIterableDataModule.create_collator": [[179, 184], ["pytorch_gleam.data.collators.MultiClassFrameEdgeMoralityBatchCollator", "len"], "methods", ["None"], ["", "def", "create_collator", "(", "self", ")", ":", "\n", "\t\t", "return", "MultiClassFrameEdgeMoralityBatchCollator", "(", "\n", "max_seq_len", "=", "self", ".", "max_seq_len", ",", "\n", "use_tpus", "=", "self", ".", "use_tpus", ",", "\n", "num_moralities", "=", "len", "(", "self", ".", "morality_map", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.batch": [[17, 24], ["list", "itertools.islice"], "function", ["None"], ["def", "batch", "(", "iterable", ",", "n", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "while", "True", ":", "\n", "\t\t\t", "batch_iter", "=", "list", "(", "islice", "(", "iterable", ",", "n", ")", ")", "\n", "yield", "batch_iter", "\n", "", "", "except", "StopIteration", ":", "\n", "\t\t", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.read_jsonl": [[26, 33], ["open", "line.strip.strip", "ujson.loads"], "function", ["None"], ["", "", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.multi_class_frame_edge_morality_iter.worker_init_fn": [[35, 48], ["torch.get_rank", "torch.get_world_size", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "print", "print", "print"], "function", ["None"], ["", "", "", "", "def", "worker_init_fn", "(", "_", ")", ":", "\n", "\t", "process_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "num_processes", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "worker_id", "=", "worker_info", ".", "id", "\n", "num_workers", "=", "worker_info", ".", "num_workers", "\n", "print", "(", "f'INFO: WORKER_INIT WORKER_INFO: {worker_id}/{num_workers}'", ")", "\n", "print", "(", "f'INFO: WORKER_INIT: RANK_INFO: {process_id}/{num_processes}'", ")", "\n", "dataset", "=", "worker_info", ".", "dataset", "\n", "dataset", ".", "frequency", "=", "(", "process_id", "*", "num_workers", ")", "+", "worker_id", "\n", "dataset", ".", "num_workers", "=", "num_processes", "*", "num_workers", "\n", "print", "(", "f'INFO: WORKER_INIT: F_INFO: {dataset.frequency}/{dataset.num_workers}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.__init__": [[10, 42], ["super().__init__", "transformers.AutoTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "tokenizer_name", ":", "str", ",", "\n", "train_path", ":", "str", "=", "None", ",", "\n", "val_path", ":", "str", "=", "None", ",", "\n", "test_path", ":", "str", "=", "None", ",", "\n", "predict_path", ":", "str", "=", "None", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "max_seq_len", ":", "int", "=", "512", ",", "\n", "num_workers", ":", "int", "=", "8", ",", "\n", "use_tpus", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokenizer_name", "=", "tokenizer_name", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_seq_len", "=", "max_seq_len", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "use_tpus", "=", "use_tpus", "\n", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\n", "self", ".", "tokenizer_name", "\n", ")", "\n", "\n", "self", ".", "train_path", "=", "train_path", "\n", "self", ".", "val_path", "=", "val_path", "\n", "self", ".", "test_path", "=", "test_path", "\n", "self", ".", "predict_path", "=", "predict_path", "\n", "\n", "self", ".", "train_dataset", "=", "None", "\n", "self", ".", "val_dataset", "=", "None", "\n", "self", ".", "test_dataset", "=", "None", "\n", "self", ".", "predict_dataset", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.create_collator": [[43, 46], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "create_collator", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.get_datasets": [[47, 51], ["isinstance"], "methods", ["None"], ["", "def", "get_datasets", "(", "self", ",", "ds", ")", ":", "\n", "\t\t", "if", "not", "isinstance", "(", "ds", ",", "list", ")", ":", "\n", "\t\t\t", "ds", "=", "[", "ds", "]", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.flatten_dataloaders": [[52, 57], ["isinstance", "len"], "methods", ["None"], ["", "def", "flatten_dataloaders", "(", "self", ",", "data_loaders", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "data_loaders", ",", "list", ")", ":", "\n", "\t\t\t", "if", "len", "(", "data_loaders", ")", "==", "1", ":", "\n", "\t\t\t\t", "data_loaders", "=", "data_loaders", "[", "0", "]", "\n", "", "", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.create_eval_data_loaders": [[58, 74], ["torch.utils.data.DataLoader", "base_datasets.BaseDataModule.create_collator"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoStanceDataModule.create_collator"], ["", "def", "create_eval_data_loaders", "(", "self", ",", "datasets", ")", ":", "\n", "\t\t", "data_loaders", "=", "[", "\n", "DataLoader", "(", "\n", "ds", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "self", ".", "create_collator", "(", ")", ",", "\n", "worker_init_fn", "=", "ds", ".", "worker_init_fn", ",", "\n", "# ensures same samples because rng will get assigned during worker creation", "\n", "persistent_workers", "=", "False", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "for", "ds", "in", "datasets", "\n", "]", "\n", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.create_train_data_loaders": [[75, 93], ["torch.utils.data.DataLoader", "base_datasets.BaseDataModule.create_collator"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoStanceDataModule.create_collator"], ["", "def", "create_train_data_loaders", "(", "self", ",", "datasets", ")", ":", "\n", "\t\t", "data_loaders", "=", "[", "\n", "DataLoader", "(", "\n", "ds", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "collate_fn", "=", "self", ".", "create_collator", "(", ")", ",", "\n", "worker_init_fn", "=", "ds", ".", "worker_init_fn", ",", "\n", "# ensures different samples across epochs from rng generator", "\n", "# seeded on creation with worker seed", "\n", "persistent_workers", "=", "True", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "for", "ds", "in", "datasets", "\n", "]", "\n", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.train_dataloader": [[94, 99], ["base_datasets.BaseDataModule.get_datasets", "base_datasets.BaseDataModule.create_train_data_loaders", "base_datasets.BaseDataModule.flatten_dataloaders"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.get_datasets", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.create_train_data_loaders", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.flatten_dataloaders"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "\t\t", "data_sets", "=", "self", ".", "get_datasets", "(", "self", ".", "train_dataset", ")", "\n", "data_loaders", "=", "self", ".", "create_train_data_loaders", "(", "data_sets", ")", "\n", "data_loaders", "=", "self", ".", "flatten_dataloaders", "(", "data_loaders", ")", "\n", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.val_dataloader": [[100, 105], ["base_datasets.BaseDataModule.get_datasets", "base_datasets.BaseDataModule.create_eval_data_loaders", "base_datasets.BaseDataModule.flatten_dataloaders"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.get_datasets", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.create_eval_data_loaders", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.flatten_dataloaders"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "\t\t", "data_sets", "=", "self", ".", "get_datasets", "(", "self", ".", "val_dataset", ")", "\n", "data_loaders", "=", "self", ".", "create_eval_data_loaders", "(", "data_sets", ")", "\n", "data_loaders", "=", "self", ".", "flatten_dataloaders", "(", "data_loaders", ")", "\n", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.test_dataloader": [[106, 111], ["base_datasets.BaseDataModule.get_datasets", "base_datasets.BaseDataModule.create_eval_data_loaders", "base_datasets.BaseDataModule.flatten_dataloaders"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.get_datasets", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.create_eval_data_loaders", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.flatten_dataloaders"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "\t\t", "data_sets", "=", "self", ".", "get_datasets", "(", "self", ".", "test_dataset", ")", "\n", "data_loaders", "=", "self", ".", "create_eval_data_loaders", "(", "data_sets", ")", "\n", "data_loaders", "=", "self", ".", "flatten_dataloaders", "(", "data_loaders", ")", "\n", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.predict_dataloader": [[112, 117], ["base_datasets.BaseDataModule.get_datasets", "base_datasets.BaseDataModule.create_eval_data_loaders", "base_datasets.BaseDataModule.flatten_dataloaders"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.get_datasets", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.create_eval_data_loaders", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.base_datasets.BaseDataModule.flatten_dataloaders"], ["", "def", "predict_dataloader", "(", "self", ")", ":", "\n", "\t\t", "data_sets", "=", "self", ".", "get_datasets", "(", "self", ".", "predict_dataset", ")", "\n", "data_loaders", "=", "self", ".", "create_eval_data_loaders", "(", "data_sets", ")", "\n", "data_loaders", "=", "self", ".", "flatten_dataloaders", "(", "data_loaders", ")", "\n", "return", "data_loaders", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoStanceDataset.__init__": [[10, 12], ["pytorch_gleam.data.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoStanceDataset.__getitem__": [[13, 60], ["pytorch_gleam.data.datasets.kbi_misinfo_stance.KbiMisinfoStanceDataset.__getitem__", "nli_text_stance.NliTextMisinfoStanceDataset._sample_label", "nli_text_stance.NliTextMisinfoStanceDataset.tokenizer", "nli_text_stance.NliTextMisinfoStanceDataset.tokenizer"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoInferStanceDataset.__getitem__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoStanceDataset._sample_label"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "ex", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "t_ex", "=", "ex", "[", "'t_ex'", "]", "\n", "p_ex", "=", "ex", "[", "'p_samples'", "]", "[", "0", "]", "\n", "p_label", ",", "_", "=", "ex", "[", "'relations'", "]", "\n", "direction", "=", "ex", "[", "'direction'", "]", "\n", "n_ex", "=", "ex", "[", "'n_samples'", "]", "[", "0", "]", "\n", "\n", "label", "=", "self", ".", "_sample_label", "(", ")", "\n", "# pos sample", "\n", "if", "label", "==", "0", ":", "\n", "# 0 - entail", "\n", "# 1 - contradict", "\n", "# 2 - no relation", "\n", "\t\t\t", "s_label", "=", "p_label", "\n", "s_ex", "=", "p_ex", "\n", "# neg_sample", "\n", "", "else", ":", "\n", "# negative examples have no relation", "\n", "\t\t\t", "s_label", "=", "2", "\n", "s_ex", "=", "n_ex", "\n", "", "if", "direction", "==", "0", ":", "\n", "\t\t\t", "token_data", "=", "self", ".", "tokenizer", "(", "\n", "t_ex", "[", "'t_text'", "]", ",", "\n", "s_ex", "[", "'t_text'", "]", "\n", ")", "\n", "", "else", ":", "\n", "\t\t\t", "token_data", "=", "self", ".", "tokenizer", "(", "\n", "s_ex", "[", "'t_text'", "]", ",", "\n", "t_ex", "[", "'t_text'", "]", "\n", ")", "\n", "", "labels", "=", "[", "t_ex", "[", "'m_label'", "]", ",", "s_ex", "[", "'m_label'", "]", "]", "\n", "stages", "=", "[", "t_ex", "[", "'stage'", "]", ",", "s_ex", "[", "'stage'", "]", "]", "\n", "ex", "=", "{", "\n", "'t_ex'", ":", "ex", "[", "'t_ex'", "]", ",", "\n", "'m_ex'", ":", "ex", "[", "'m_ex'", "]", ",", "\n", "'p_ex'", ":", "s_ex", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'relations'", ":", "s_label", ",", "\n", "'stages'", ":", "stages", ",", "\n", "'input_ids'", ":", "token_data", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "token_data", "[", "'attention_mask'", "]", ",", "\n", "}", "\n", "if", "'token_type_ids'", "in", "token_data", ":", "\n", "\t\t\t", "ex", "[", "'token_type_ids'", "]", "=", "token_data", "[", "'token_type_ids'", "]", "\n", "\n", "", "return", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoStanceDataset._sample_label": [[61, 69], ["torch.rand().tolist", "torch.rand"], "methods", ["None"], ["", "def", "_sample_label", "(", "self", ")", ":", "\n", "\t\t", "r", "=", "torch", ".", "rand", "(", "\n", "size", "=", "(", "1", ",", ")", ",", "\n", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "r", "<", "0.5", ":", "\n", "\t\t\t", "return", "0", "\n", "", "else", ":", "\n", "\t\t\t", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoInferStanceDataset.__init__": [[72, 74], ["pytorch_gleam.data.datasets.kbi_misinfo_stance.KbiMisinfoInferStanceDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoInferStanceDataset.__getitem__": [[75, 106], ["torch.is_tensor", "nli_text_stance.NliTextMisinfoInferStanceDataset.tokenizer", "idx.tolist.tolist.tolist"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "\t\t\t", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "ex", "=", "self", ".", "examples", "[", "idx", "]", "\n", "t_ex", "=", "ex", "[", "'t_ex'", "]", "\n", "m_ex", "=", "ex", "[", "'m_ex'", "]", "\n", "p_ex", "=", "ex", "[", "'p_ex'", "]", "\n", "token_data", "=", "self", ".", "tokenizer", "(", "\n", "t_ex", "[", "'t_text'", "]", ",", "\n", "p_ex", "[", "'t_text'", "]", "\n", ")", "\n", "\n", "labels", "=", "[", "t_ex", "[", "'m_label'", "]", ",", "p_ex", "[", "'m_label'", "]", "]", "\n", "stages", "=", "[", "t_ex", "[", "'stage'", "]", ",", "p_ex", "[", "'stage'", "]", "]", "\n", "# unknown relations", "\n", "relations", "=", "2", "\n", "ex", "=", "{", "\n", "'t_ex'", ":", "t_ex", ",", "\n", "'m_ex'", ":", "m_ex", ",", "\n", "'p_ex'", ":", "p_ex", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'stages'", ":", "stages", ",", "\n", "'relations'", ":", "relations", ",", "\n", "'input_ids'", ":", "token_data", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "token_data", "[", "'attention_mask'", "]", ",", "\n", "}", "\n", "if", "'token_type_ids'", "in", "token_data", ":", "\n", "\t\t\t", "ex", "[", "'token_type_ids'", "]", "=", "token_data", "[", "'token_type_ids'", "]", "\n", "\n", "", "return", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoStanceDataModule.__init__": [[109, 182], ["pytorch_gleam.data.datasets.base_datasets.BaseDataModule.__init__", "nli_text_stance.NliTextMisinfoStanceDataset", "nli_text_stance.NliTextMisinfoStanceDataset", "nli_text_stance.NliTextMisinfoInferStanceDataset", "nli_text_stance.NliTextMisinfoStanceDataset", "nli_text_stance.NliTextMisinfoInferStanceDataset", "nli_text_stance.NliTextMisinfoInferStanceDataset"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "train_misinfo_path", ":", "str", "=", "None", ",", "\n", "val_misinfo_path", ":", "str", "=", "None", ",", "\n", "test_misinfo_path", ":", "str", "=", "None", ",", "\n", "predict_misinfo_path", ":", "str", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "train_misinfo_path", "=", "train_misinfo_path", "\n", "self", ".", "val_misinfo_path", "=", "val_misinfo_path", "\n", "self", ".", "test_misinfo_path", "=", "test_misinfo_path", "\n", "self", ".", "predict_misinfo_path", "=", "predict_misinfo_path", "\n", "self", ".", "pos_samples", "=", "1", "\n", "self", ".", "neg_samples", "=", "1", "\n", "\n", "if", "self", ".", "train_path", "is", "not", "None", "and", "self", ".", "train_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "train_dataset", "=", "NliTextMisinfoStanceDataset", "(", "\n", "pos_samples", "=", "self", ".", "pos_samples", ",", "\n", "neg_samples", "=", "self", ".", "neg_samples", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "train_path", ",", "\n", "misinfo_path", "=", "self", ".", "train_misinfo_path", "\n", ")", "\n", "", "if", "self", ".", "val_path", "is", "not", "None", "and", "self", ".", "val_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "val_triplet_dataset", "=", "NliTextMisinfoStanceDataset", "(", "\n", "pos_samples", "=", "self", ".", "pos_samples", ",", "\n", "neg_samples", "=", "self", ".", "neg_samples", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "val_path", ",", "\n", "misinfo_path", "=", "self", ".", "val_misinfo_path", "\n", ")", "\n", "val_infer_dataset", "=", "NliTextMisinfoInferStanceDataset", "(", "\n", "pos_samples", "=", "1", ",", "\n", "neg_samples", "=", "1", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "val_path", ",", "\n", "misinfo_path", "=", "self", ".", "val_misinfo_path", "\n", ")", "\n", "\n", "self", ".", "val_dataset", "=", "[", "\n", "val_triplet_dataset", ",", "\n", "val_infer_dataset", "\n", "]", "\n", "", "if", "self", ".", "test_path", "is", "not", "None", "and", "self", ".", "test_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "test_triplet_dataset", "=", "NliTextMisinfoStanceDataset", "(", "\n", "pos_samples", "=", "self", ".", "pos_samples", ",", "\n", "neg_samples", "=", "self", ".", "neg_samples", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "self", ".", "test_path", ",", "\n", "misinfo_path", "=", "self", ".", "test_misinfo_path", "\n", ")", "\n", "test_infer_dataset", "=", "NliTextMisinfoInferStanceDataset", "(", "\n", "pos_samples", "=", "1", ",", "\n", "neg_samples", "=", "1", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "[", "self", ".", "val_path", ",", "self", ".", "test_path", "]", ",", "\n", "misinfo_path", "=", "self", ".", "test_misinfo_path", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "=", "[", "\n", "test_triplet_dataset", ",", "\n", "test_infer_dataset", "\n", "]", "\n", "", "if", "self", ".", "predict_path", "is", "not", "None", "and", "self", ".", "predict_misinfo_path", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "predict_dataset", "=", "NliTextMisinfoInferStanceDataset", "(", "\n", "pos_samples", "=", "1", ",", "\n", "neg_samples", "=", "1", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "data_path", "=", "[", "self", ".", "val_path", ",", "self", ".", "predict_path", "]", ",", "\n", "misinfo_path", "=", "self", ".", "predict_misinfo_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.datasets.nli_text_stance.NliTextMisinfoStanceDataModule.create_collator": [[184, 188], ["pytorch_gleam.data.collators.NliTextBatchCollator"], "methods", ["None"], ["", "", "def", "create_collator", "(", "self", ")", ":", "\n", "\t\t", "return", "NliTextBatchCollator", "(", "\n", "max_seq_len", "=", "self", ".", "max_seq_len", ",", "\n", "use_tpus", "=", "self", ".", "use_tpus", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_sequence.MultiSequenceBatchCollator.__init__": [[8, 14], ["pytorch_gleam.data.collators.base_collators.BatchCollator.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_sequence.MultiSequenceBatchCollator.__call__": [[15, 50], ["multi_sequence.MultiSequenceBatchCollator._calculate_seq_padding", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "enumerate", "ids.append", "multi_sequence.MultiSequenceBatchCollator.pad_and_apply", "multi_sequence.MultiSequenceBatchCollator.pad_and_apply", "len", "multi_sequence.MultiSequenceBatchCollator.pad_and_apply"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator._calculate_seq_padding", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply"], ["", "def", "__call__", "(", "self", ",", "examples", ":", "list", ")", "->", "dict", ":", "\n", "\t\t", "pad_seq_len", "=", "self", ".", "_calculate_seq_padding", "(", "examples", ")", "\n", "\n", "batch_size", "=", "len", "(", "examples", ")", "\n", "input_ids", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "pad_seq_len", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "attention_mask", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "pad_seq_len", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "token_type_ids", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "pad_seq_len", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# [ex_count]", "\n", "labels", "=", "torch", ".", "zeros", "(", "[", "len", "(", "examples", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "ex_idx", ",", "ex", "in", "enumerate", "(", "examples", ")", ":", "\n", "\t\t\t", "if", "'labels'", "not", "in", "ex", ":", "\n", "\t\t\t\t", "break", "\n", "", "labels", "[", "ex_idx", "]", "=", "ex", "[", "'labels'", "]", "\n", "\n", "", "ids", "=", "[", "]", "\n", "has_token_type_ids", "=", "True", "\n", "for", "ex_idx", ",", "ex", "in", "enumerate", "(", "examples", ")", ":", "\n", "\t\t\t", "ids", ".", "append", "(", "ex", "[", "'ids'", "]", ")", "\n", "self", ".", "pad_and_apply", "(", "ex", "[", "'input_ids'", "]", ",", "input_ids", ",", "ex_idx", ")", "\n", "self", ".", "pad_and_apply", "(", "ex", "[", "'attention_mask'", "]", ",", "attention_mask", ",", "ex_idx", ")", "\n", "if", "'token_type_ids'", "in", "ex", ":", "\n", "\t\t\t\t", "self", ".", "pad_and_apply", "(", "ex", "[", "'token_type_ids'", "]", ",", "token_type_ids", ",", "ex_idx", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "has_token_type_ids", "=", "False", "\n", "", "", "batch", "=", "{", "\n", "'ids'", ":", "ids", ",", "\n", "'input_ids'", ":", "input_ids", ",", "\n", "'attention_mask'", ":", "attention_mask", ",", "\n", "'labels'", ":", "labels", ",", "\n", "}", "\n", "if", "has_token_type_ids", ":", "\n", "\t\t\t", "batch", "[", "'token_type_ids'", "]", "=", "token_type_ids", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.__init__": [[7, 14], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "max_seq_len", ":", "int", "=", "512", ",", "\n", "use_tpus", "=", "False", "\n", ")", ":", "\n", "\t\t", "self", ".", "max_seq_len", "=", "max_seq_len", "\n", "self", ".", "use_tpus", "=", "use_tpus", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator._calculate_seq_padding": [[15, 24], ["max", "min", "len"], "methods", ["None"], ["", "def", "_calculate_seq_padding", "(", "self", ",", "examples", ")", ":", "\n", "\t\t", "if", "self", ".", "use_tpus", ":", "\n", "\t\t\t", "pad_seq_len", "=", "self", ".", "max_seq_len", "\n", "", "else", ":", "\n", "\t\t\t", "pad_seq_len", "=", "0", "\n", "for", "ex", "in", "examples", ":", "\n", "\t\t\t\t", "pad_seq_len", "=", "max", "(", "pad_seq_len", ",", "min", "(", "len", "(", "ex", "[", "'input_ids'", "]", ")", ",", "self", ".", "max_seq_len", ")", ")", "\n", "\n", "", "", "return", "pad_seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply": [[25, 28], ["torch.tensor", "len"], "methods", ["None"], ["", "def", "pad_and_apply", "(", "self", ",", "id_list", ",", "id_tensor", ",", "ex_idx", ")", ":", "\n", "\t\t", "ex_ids", "=", "id_list", "[", ":", "self", ".", "max_seq_len", "]", "\n", "id_tensor", "[", "ex_idx", ",", ":", "len", "(", "ex_ids", ")", "]", "=", "torch", ".", "tensor", "(", "ex_ids", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.__call__": [[29, 32], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "examples", ":", "list", ")", "->", "dict", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_label.MultiLabelBatchCollator.__init__": [[8, 16], ["pytorch_gleam.data.collators.base_collators.BatchCollator.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["from", "pytorch_gleam", ".", "modeling", ".", "metrics", "import", "Metric", "\n", "\n", "\n", "# noinspection PyAbstractClass", "\n", "class", "MultiLabelLanguageModel", "(", "BaseLanguageModel", ")", ":", "\n", "\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_label.MultiLabelBatchCollator.__call__": [[17, 53], ["multi_label.MultiLabelBatchCollator._calculate_seq_padding", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "ids.append", "multi_label.MultiLabelBatchCollator.pad_and_apply", "multi_label.MultiLabelBatchCollator.pad_and_apply", "multi_label.MultiLabelBatchCollator.pad_and_apply"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator._calculate_seq_padding", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply"], ["metric", ":", "Metric", ",", "\n", "m_metric", ":", "Metric", ",", "\n", "num_classes", ":", "int", "=", "2", ",", "\n", "num_threshold_steps", ":", "int", "=", "100", ",", "\n", "update_threshold", ":", "bool", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_class_frame_edge.MultiClassFrameEdgeBatchCollator.__init__": [[8, 14], ["pytorch_gleam.data.collators.base_collators.BatchCollator.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["from", "py_lex", "import", "EmoLex", "\n", "import", "torch", "\n", "from", "torch", ".", "utils", ".", "data", "import", "Dataset", "\n", "\n", "from", "pytorch_gleam", ".", "data", ".", "datasets", ".", "base_datasets", "import", "BaseDataModule", "\n", "from", "pytorch_gleam", ".", "data", ".", "collators", "import", "MultiClassFrameEdgeBatchCollator", "\n", "import", "pytorch_gleam", ".", "data", ".", "datasets", ".", "senticnet5", "as", "senticnet5", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_class_frame_edge.MultiClassFrameEdgeBatchCollator.__call__": [[15, 58], ["multi_class_frame_edge.MultiClassFrameEdgeBatchCollator._calculate_seq_padding", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "edges.items", "ids.append", "multi_class_frame_edge.MultiClassFrameEdgeBatchCollator.pad_and_apply", "multi_class_frame_edge.MultiClassFrameEdgeBatchCollator.pad_and_apply", "ex[].items", "multi_class_frame_edge.MultiClassFrameEdgeBatchCollator.pad_and_apply", "torch.tensor", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator._calculate_seq_padding", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply"], ["from", "tqdm", "import", "tqdm", "\n", "\n", "\n", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n", "\n", "", "", "", "", "def", "get_sentic", "(", "word_text", ")", ":", "\n", "\t", "word_text", "=", "word_text", ".", "lower", "(", ")", "\n", "if", "word_text", "==", "'coronavirus'", "or", "word_text", "==", "'covid-19'", "or", "word_text", "==", "'covid'", "or", "word_text", "==", "'covid19'", ":", "\n", "\t\t", "word_text", "=", "'virus'", "\n", "", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t", "word_text", "=", "word_text", "[", ":", "-", "1", "]", "\n", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t\t", "word_text", "=", "word_text", "[", ":", "-", "1", "]", "\n", "if", "word_text", "not", "in", "senticnet5", ".", "senticnet", ":", "\n", "\t\t\t\t", "return", "None", "\n", "", "", "", "p_v", ",", "a_v", ",", "s_v", ",", "ap_v", ",", "p_m", ",", "s_m", ",", "po_l", ",", "po_v", ",", "s1", ",", "s2", ",", "s3", ",", "s4", ",", "s5", "=", "senticnet5", ".", "senticnet", "[", "word_text", "]", "\n", "return", "{", "\n", "'pleasantness_value'", ":", "float", "(", "p_v", ")", ",", "\n", "'attention_value'", ":", "float", "(", "a_v", ")", ",", "\n", "'sensitivity_value'", ":", "float", "(", "s_v", ")", ",", "\n", "'aptitude_value'", ":", "float", "(", "ap_v", ")", ",", "\n", "'primary_mood'", ":", "p_m", ",", "\n", "'secondary_mood'", ":", "s_m", ",", "\n", "'polarity_label'", ":", "po_l", ",", "\n", "'polarity_value'", ":", "float", "(", "po_v", ")", ",", "\n", "'semantics'", ":", "[", "s1", ",", "s2", ",", "s3", ",", "s4", ",", "s5", "]", ",", "\n", "}", "\n", "\n", "\n", "", "def", "add_sentic_token_features", "(", "token_data", ")", ":", "\n", "\t", "sentic", "=", "get_sentic", "(", "token_data", "[", "'text'", "]", ")", "\n", "token_data", "[", "'sentic'", "]", "=", "sentic", "\n", "return", "token_data", "\n", "\n", "\n", "", "def", "align_tokens", "(", "tokens", ",", "wpt_tokens", ",", "seq_offset", "=", "0", ")", ":", "\n", "\t", "align_map", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_class_frame.MultiClassFrameBatchCollator.__init__": [[8, 14], ["pytorch_gleam.data.collators.base_collators.BatchCollator.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["from", "pytorch_gleam", ".", "modeling", ".", "metrics", "import", "Metric", "\n", "from", "pytorch_gleam", ".", "modeling", ".", "layers", ".", "gcn", "import", "GraphAttention", "\n", "from", "pytorch_gleam", ".", "modeling", ".", "layers", ".", "hopfield", "import", "HopfieldPooling", "\n", "\n", "\n", "# noinspection PyAbstractClass", "\n", "class", "MultiClassFrameLanguageModel", "(", "BaseLanguageModel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_class_frame.MultiClassFrameBatchCollator.__call__": [[15, 47], ["multi_class_frame.MultiClassFrameBatchCollator._calculate_seq_padding", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "ids.append", "multi_class_frame.MultiClassFrameBatchCollator.pad_and_apply", "multi_class_frame.MultiClassFrameBatchCollator.pad_and_apply", "multi_class_frame.MultiClassFrameBatchCollator.pad_and_apply"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator._calculate_seq_padding", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n", "metric", ":", "Metric", ",", "\n", "num_threshold_steps", ":", "int", "=", "100", ",", "\n", "update_threshold", ":", "bool", "=", "False", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityBatchCollator.__init__": [[8, 16], ["pytorch_gleam.data.collators.base_collators.BatchCollator.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\n", "from", "pytorch_gleam", ".", "data", ".", "datasets", ".", "base_datasets", "import", "BaseDataModule", "\n", "from", "pytorch_gleam", ".", "data", ".", "collators", "import", "MultiClassFrameEdgeMoralityBatchCollator", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "\n", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityBatchCollator.__call__": [[17, 78], ["multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityBatchCollator._calculate_seq_padding", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "edges.items", "isinstance", "ids.append", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityBatchCollator.pad_and_apply", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityBatchCollator.pad_and_apply", "ex[].items", "len", "multi_class_frame_edge_morality.MultiClassFrameEdgeMoralityBatchCollator.pad_and_apply", "torch.tensor", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator._calculate_seq_padding", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply"], ["\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n", "\n", "", "", "", "", "class", "MultiClassFrameEdgeMoralityDataset", "(", "Dataset", ")", ":", "\n", "\t", "examples", ":", "List", "[", "Dict", "[", "Any", ",", "Union", "[", "Any", ",", "Dict", "]", "]", "]", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "data_path", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", ",", "frame_path", ":", "str", ",", "\n", "label_name", ":", "str", ",", "tokenizer", ",", "label_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "morality_map", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "morality_map", "=", "morality_map", "\n", "self", ".", "frame_path", "=", "frame_path", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "label_name", "=", "label_name", "\n", "self", ".", "label_map", "=", "label_map", "\n", "\n", "self", ".", "examples", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "frame_path", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "frames", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "isinstance", "(", "data_path", ",", "str", ")", ":", "\n", "\t\t\t", "self", ".", "read_path", "(", "data_path", ")", "\n", "", "else", ":", "\n", "\t\t\t", "for", "stage", ",", "stage_path", "in", "enumerate", "(", "data_path", ")", ":", "\n", "\t\t\t\t", "self", ".", "read_path", "(", "stage_path", ",", "stage", ")", "\n", "\n", "", "", "", "def", "parse_example", "(", "self", ",", "ex", ")", ":", "\n", "\t\t", "ex_id", "=", "ex", "[", "'id'", "]", "\n", "ex_examples", "=", "[", "]", "\n", "for", "f_id", ",", "f_label", "in", "ex", "[", "self", ".", "label_name", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "f_ex", "=", "ex", "[", "'f_examples'", "]", "[", "f_id", "]", "\n", "frame", "=", "self", ".", "frames", "[", "f_id", "]", "\n", "ex_label", "=", "0", "\n", "if", "f_label", "in", "self", ".", "label_map", ":", "\n", "\t\t\t\t", "ex_label", "=", "self", ".", "label_map", "[", "f_label", "]", "\n", "\n", "", "ex_edges", "=", "{", "e_key", ":", "np", ".", "array", "(", "e_value", ")", "for", "e_key", ",", "e_value", "in", "f_ex", "[", "'edges'", "]", ".", "items", "(", ")", "}", "\n", "\n", "ex_morality", "=", "[", "]", "\n", "if", "'morality_preds'", "in", "ex", ":", "\n", "\t\t\t\t", "ex_morality", "=", "[", "self", ".", "morality_map", "[", "m_name", "]", "for", "m_name", "in", "ex", "[", "'morality_preds'", "]", "]", "\n", "", "f_morality", "=", "[", "]", "\n", "for", "m_name", ",", "m_val", "in", "frame", "[", "'moralities'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "m_val", ":", "\n", "\t\t\t\t\t", "f_morality", ".", "append", "(", "self", ".", "morality_map", "[", "m_name", "]", ")", "\n", "", "", "example", "=", "{", "\n", "'ids'", ":", "f'{ex_id}|{f_id}'", ",", "\n", "'label'", ":", "ex_label", ",", "\n", "'input_ids'", ":", "f_ex", "[", "'input_ids'", "]", ",", "\n", "'attention_mask'", ":", "f_ex", "[", "'attention_mask'", "]", ",", "\n", "'edges'", ":", "ex_edges", ",", "\n", "'ex_morality'", ":", "ex_morality", ",", "\n", "'f_morality'", ":", "f_morality", ",", "\n", "}", "\n", "if", "'token_type_ids'", "in", "f_ex", ":", "\n", "\t\t\t\t", "example", "[", "'token_type_ids'", "]", "=", "f_ex", "[", "'token_type_ids'", "]", "\n", "", "ex_examples", ".", "append", "(", "example", ")", "\n", "", "return", "ex_examples", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.nli_text.NliTextBatchCollator.__init__": [[8, 14], ["pytorch_gleam.data.collators.base_collators.BatchCollator.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["from", "pytorch_gleam", ".", "modeling", ".", "models", ".", "base_models", "import", "BaseLanguageModel", "\n", "from", "pytorch_gleam", ".", "modeling", ".", "thresholds", "import", "ThresholdModule", ",", "MultiClassThresholdModule", "\n", "from", "pytorch_gleam", ".", "modeling", ".", "metrics", "import", "Metric", "\n", "from", "pytorch_gleam", ".", "inference", "import", "ConsistencyScoring", "\n", "\n", "\n", "# noinspection PyAbstractClass", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.nli_text.NliTextBatchCollator.__call__": [[15, 60], ["nli_text.NliTextBatchCollator._calculate_seq_padding", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "ids.append", "m_ids.append", "p_ids.append", "enumerate", "enumerate", "nli_text.NliTextBatchCollator.pad_and_apply", "nli_text.NliTextBatchCollator.pad_and_apply", "nli_text.NliTextBatchCollator.pad_and_apply"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator._calculate_seq_padding", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.base_collators.BatchCollator.pad_and_apply"], ["class", "NliTextLanguageModel", "(", "BaseLanguageModel", ")", ":", "\n", "\t", "def", "__init__", "(", "\n", "self", ",", "\n", "infer", ":", "ConsistencyScoring", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n", "metric", ":", "Metric", ",", "\n", "m_metric", ":", "Metric", ",", "\n", "num_classes", ":", "int", "=", "3", ",", "\n", "num_val_seeds", ":", "int", "=", "1", ",", "\n", "num_threshold_steps", ":", "int", "=", "100", ",", "\n", "update_threshold", ":", "bool", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "infer", "=", "infer", "\n", "self", ".", "num_val_seeds", "=", "num_val_seeds", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "m_metric", "=", "m_metric", "\n", "self", ".", "num_threshold_steps", "=", "num_threshold_steps", "\n", "self", ".", "update_threshold", "=", "update_threshold", "\n", "\n", "self", ".", "cls_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "hidden_size", ",", "\n", "out_features", "=", "self", ".", "num_classes", "\n", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "reduction", "=", "'none'", "\n", ")", "\n", "self", ".", "score_func", "=", "torch", ".", "nn", ".", "Softmax", "(", "\n", "dim", "=", "-", "1", "\n", ")", "\n", "self", ".", "f_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "\n", "p", "=", "self", ".", "hidden_dropout_prob", "\n", ")", "\n", "\n", "self", ".", "metric", "=", "metric", "\n", "\n", "", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "setup", "(", "stage", ")", "\n", "if", "stage", "==", "'fit'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "train_dataloader", "(", ")", "\n", "", "elif", "stage", "==", "'test'", ":", "\n", "\t\t\t", "data_loader", "=", "self", ".", "test_dataloader", "(", ")", "[", "0", "]", "\n", "", "elif", "stage", "==", "'val'", ":", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.kbi.KbiBatchCollator.__init__": [[8, 16], ["pytorch_gleam.data.collators.base_collators.BatchCollator.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["from", "pytorch_gleam", ".", "modeling", ".", "models", ".", "base_models", "import", "BaseLanguageModel", "\n", "from", "pytorch_gleam", ".", "modeling", ".", "thresholds", "import", "ThresholdModule", ",", "MultiClassThresholdModule", "\n", "from", "pytorch_gleam", ".", "modeling", ".", "knowledge_embedding", "import", "KnowledgeEmbedding", "\n", "from", "pytorch_gleam", ".", "modeling", ".", "metrics", "import", "Metric", "\n", "from", "pytorch_gleam", ".", "inference", "import", "ConsistencyScoring", "\n", "\n", "\n", "# noinspection PyAbstractClass", "\n", "class", "KbiLanguageModel", "(", "BaseLanguageModel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.kbi.KbiBatchCollator._calculate_multi_seq_padding": [[17, 27], ["max", "min", "len"], "methods", ["None"], ["\t", "def", "__init__", "(", "\n", "self", ",", "\n", "ke", ":", "KnowledgeEmbedding", ",", "\n", "infer", ":", "ConsistencyScoring", ",", "\n", "threshold", ":", "ThresholdModule", ",", "\n", "metric", ":", "Metric", ",", "\n", "m_metric", ":", "Metric", ",", "\n", "num_relations", ":", "int", "=", "2", ",", "\n", "num_classes", ":", "int", "=", "3", ",", "\n", "num_val_seeds", ":", "int", "=", "1", ",", "\n", "num_threshold_steps", ":", "int", "=", "100", ",", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.kbi.KbiBatchCollator.__call__": [[28, 92], ["kbi.KbiBatchCollator._calculate_multi_seq_padding", "len", "len", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "ids.append", "m_ids.append", "enumerate", "enumerate", "enumerate", "enumerate", "kbi.KbiBatchCollator.pad_and_apply_seq", "kbi.KbiBatchCollator.pad_and_apply_seq", "p_ids.append", "n_ids.append", "kbi.KbiBatchCollator.pad_and_apply_seq"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.kbi.KbiBatchCollator._calculate_multi_seq_padding", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.kbi.KbiBatchCollator.pad_and_apply_seq", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.kbi.KbiBatchCollator.pad_and_apply_seq", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.kbi.KbiBatchCollator.pad_and_apply_seq"], ["update_threshold", ":", "bool", "=", "True", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tKnowledge-Base Inference Language Model for Attitude Consistency Scoring.\n\n\t\tArgs:\n\n\t\t\tke: Knowledge Embedding model to use for model.\n\n\t\t\tinfer: Attitude Consistency Scoring module to use for stance inference.\n\n\t\t\tthreshold: Threshold module to use for system predictions.\n\n\t\t\tmetric: Metric to evaluate overall performance. Typically Macro or Micro F1.\n\n\t\t\tm_metric: Metric to optimize for each Stance Knowledge Graph threshold, typically Micro F1.\n\n\t\t\tnum_relations: Number of different relations, such as \"Agree\" and \"Disagree\".\n\t\t\t\tDefault: ``2``.\n\n\t\t\tnum_classes: Number of different classes, such as \"Accept\", \"Reject\", and \"No Stance\".\n\t\t\t\tDefault: ``3``.\n\n\t\t\tnum_val_seeds: Number of validation examples to leave out during threshold update.\n\t\t\t\tDefault: ``1``.\n\n\t\t\tnum_threshold_steps: Number of different threshold values to evaluate when updating threshold on\n\t\t\t\tvalidation dataset.\n\t\t\t\tDefault: ``100``.\n\n\t\t\tupdate_threshold: If ``False``, validation thresholds are not updated. Use this in testing.\n\t\t\t\tDefault: ``True``.\n\n\t\t\tpre_model_name: Name of pre-trained model from huggingface. See https://huggingface.co/\n\n\t\t\tpre_model_type: Type of pre-trained model.\n\t\t\t\tDefault: [`AutoModel`].\n\n\t\t\tlearning_rate: Maximum learning rate. Learning rate will warm up from ``0`` to ``learning_rate`` over\n\t\t\t\t``lr_warm_up`` training steps, and will then decay from ``learning_rate`` to ``0`` linearly over the remaining\n\t\t\t\t``1.0-lr_warm_up`` training steps.\n\n\t\t\tweight_decay: How much weight decay to apply in the AdamW optimizer.\n\t\t\t\tDefault: ``0.0``.\n\n\t\t\tlr_warm_up: The percent of training steps to warm up learning rate from ``0`` to ``learning_rate``.\n\t\t\t\tDefault: ``0.1``.\n\n\t\t\tload_pre_model: If ``False``, Model structure will load from pre_model_name, but weights will not be initialized.\n\t\t\t\tCuts down on model load time if you plan on loading your model from a checkpoint, as there is no reason to\n\t\t\t\tinitialize your model twice.\n\t\t\t\tDefault: ``True``.\n\n\t\t\ttorch_cache_dir: If provided, cache directory for loading models. Defaults to huggingface default.\n\t\t\t\tDefault: ``None``.\n\n\t\t\"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_relations", "=", "num_relations", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ke", "=", "ke", "\n", "self", ".", "infer", "=", "infer", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.collators.kbi.KbiBatchCollator.pad_and_apply_seq": [[93, 96], ["torch.tensor", "len"], "methods", ["None"], ["self", ".", "num_val_seeds", "=", "num_val_seeds", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "m_metric", "=", "m_metric", "\n", "self", ".", "num_threshold_steps", "=", "num_threshold_steps", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_profile.embed_user": [[17, 44], ["numpy.zeros", "numpy.zeros", "tweet_scores.items", "numpy.linalg.norm", "numpy.maximum", "scipy.csr_matrix", "frame_scores.items", "np.zeros.sum", "ValueError", "numpy.sign"], "function", ["None"], ["def", "embed_user", "(", "args", ")", ":", "\n", "\t", "user_id", ",", "tweet_scores", "=", "args", "\n", "u_vec", "=", "np", ".", "zeros", "(", "shape", "=", "[", "vec_size", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "u_vec_count", "=", "np", ".", "zeros", "(", "shape", "=", "[", "vec_size", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "tweet_id", ",", "frame_scores", "in", "tweet_scores", ".", "items", "(", ")", ":", "\n", "\t\t", "for", "frame_id", ",", "frame_score", "in", "frame_scores", ".", "items", "(", ")", ":", "\n", "# TODO some frames have no assigned taxonomy", "\n", "\t\t\t", "if", "frame_id", "not", "in", "frame_map", ":", "\n", "\t\t\t\t", "continue", "\n", "", "for", "vec_idx", ",", "vec_sign", "in", "frame_map", "[", "frame_id", "]", ":", "\n", "\t\t\t\t", "if", "mode", "==", "'prob'", ":", "\n", "\t\t\t\t\t", "u_vec", "[", "vec_idx", "]", "+=", "vec_sign", "*", "frame_score", "\n", "", "elif", "mode", "==", "'sign'", "or", "mode", "==", "'cosine'", ":", "\n", "\t\t\t\t\t", "u_vec", "[", "vec_idx", "]", "+=", "vec_sign", "*", "np", ".", "sign", "(", "frame_score", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "ValueError", "(", "f'Unknown mode: {mode}'", ")", "\n", "", "u_vec_count", "[", "vec_idx", "]", "+=", "1.0", "\n", "\n", "", "", "", "u_norm", "=", "np", ".", "linalg", ".", "norm", "(", "u_vec", ",", "axis", "=", "-", "1", ")", "\n", "if", "u_vec_count", ".", "sum", "(", ")", "==", "0", "or", "u_norm", "==", "0", ":", "\n", "\t\t", "return", "None", ",", "None", "\n", "# divide each vec_idx by the number of stances the user has on it", "\n", "", "u_vec", "/=", "np", ".", "maximum", "(", "u_vec_count", ",", "1.0", ")", "\n", "if", "mode", "==", "'cosine'", ":", "\n", "\t\t", "u_vec", "/=", "u_norm", "\n", "", "u_vec", "=", "scp", ".", "csr_matrix", "(", "u_vec", ")", "\n", "return", "user_id", ",", "u_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_profile.main": [[46, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.mode.lower", "len", "scipy.vstack", "open", "ujson.load", "open", "ujson.load", "max", "multiprocessing.Pool", "tqdm.tqdm", "open", "pickle.dump", "p.imap_unordered", "max", "json.load.items", "user_vecs[].append", "user_vecs[].append", "json.load.items"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--frame_map_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--num_processes'", ",", "default", "=", "12", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--mode'", ",", "default", "=", "'prob'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "frame_map_path", "=", "args", ".", "frame_map_path", "\n", "output_path", "=", "args", ".", "output_path", "\n", "num_processes", "=", "args", ".", "num_processes", "\n", "\n", "with", "open", "(", "input_path", ")", "as", "f", ":", "\n", "# [user_id][tweet_id][frame_id] -> frame_score", "\n", "\t\t", "user_scores", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "global", "frame_map", "\n", "global", "vec_size", "\n", "global", "mode", "\n", "\n", "mode", "=", "args", ".", "mode", ".", "lower", "(", ")", "\n", "with", "open", "(", "frame_map_path", ")", "as", "f", ":", "\n", "# [frame_id] -> List[(vec_idx, score_sign)]", "\n", "\t\t", "frame_map", "=", "json", ".", "load", "(", "f", ")", "\n", "", "vec_size", "=", "max", "(", "[", "max", "(", "v", "[", "0", "]", ")", "for", "k", ",", "v", "in", "frame_map", ".", "items", "(", ")", "]", ")", "+", "1", "\n", "user_count", "=", "len", "(", "user_scores", ")", "\n", "user_vecs", "=", "{", "\n", "'users'", ":", "[", "]", ",", "\n", "'matrix'", ":", "[", "]", "\n", "}", "\n", "with", "Pool", "(", "processes", "=", "num_processes", ")", "as", "p", ":", "\n", "\t\t", "for", "user_id", ",", "u_vec", "in", "tqdm", "(", "p", ".", "imap_unordered", "(", "embed_user", ",", "user_scores", ".", "items", "(", ")", ")", ",", "total", "=", "user_count", ")", ":", "\n", "\t\t\t", "if", "user_id", "is", "not", "None", ":", "\n", "\t\t\t\t", "user_vecs", "[", "'users'", "]", ".", "append", "(", "user_id", ")", "\n", "user_vecs", "[", "'matrix'", "]", ".", "append", "(", "u_vec", ")", "\n", "\n", "", "", "", "user_vecs", "[", "'matrix'", "]", "=", "scp", ".", "vstack", "(", "user_vecs", "[", "'matrix'", "]", ")", "\n", "with", "open", "(", "output_path", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "user_vecs", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.Taxonomy.__init__": [[15, 19], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "\t\t", "self", ".", "name", "=", "name", "\n", "self", ".", "themes", "=", "None", "\n", "self", ".", "frames", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.Taxonomy.load_themes": [[20, 23], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_themes", "(", "self", ",", "theme_path", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.Taxonomy.theme_score": [[24, 27], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "theme_score", "(", "self", ",", "scores", ",", "frames", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.Taxonomy.frames_to_themes": [[28, 31], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "frames_to_themes", "(", "self", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.Taxonomy.frame_to_themes": [[32, 35], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "frame_to_themes", "(", "self", ",", "f_id", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.HierarchicalTaxonomy.__init__": [[38, 41], ["stance_taxonomy.Taxonomy.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "concerns", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.HierarchicalTaxonomy.load_concerns": [[42, 45], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_concerns", "(", "self", ",", "file_path", ")", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MisinformationTaxonomy.__init__": [[48, 55], ["stance_taxonomy.HierarchicalTaxonomy.__init__", "stance_taxonomy.MisinformationTaxonomy.load_concerns", "stance_taxonomy.MisinformationTaxonomy.load_themes", "frames[].apply", "frames[].apply"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustTaxonomy.load_concerns", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.load_themes"], ["\t", "def", "__init__", "(", "self", ",", "concern_path", ",", "theme_path", ",", "frames", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "name", "=", "'misinformation'", ")", "\n", "self", ".", "concerns", "=", "self", ".", "load_concerns", "(", "concern_path", ")", "\n", "self", ".", "themes", "=", "self", ".", "load_themes", "(", "theme_path", ")", "\n", "accept_mask", "=", "frames", "[", "'misinformation|Accept'", "]", ".", "apply", "(", "len", ")", ">", "0", "\n", "reject_mask", "=", "frames", "[", "'misinformation|Reject'", "]", ".", "apply", "(", "len", ")", ">", "0", "\n", "self", ".", "frames", "=", "frames", "[", "accept_mask", "|", "reject_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MisinformationTaxonomy.load_concerns": [[56, 65], ["pandas.read_excel", "pandas.read_excel.index.astype"], "methods", ["None"], ["", "def", "load_concerns", "(", "self", ",", "file_path", ")", ":", "\n", "\t\t", "m_concerns", "=", "pd", ".", "read_excel", "(", "\n", "file_path", ",", "\n", "index_col", "=", "'m_id'", ",", "\n", "engine", "=", "'openpyxl'", ",", "\n", "dtype", "=", "str", "\n", ")", "\n", "m_concerns", ".", "index", "=", "m_concerns", ".", "index", ".", "astype", "(", "str", ")", "\n", "return", "m_concerns", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MisinformationTaxonomy.load_themes": [[66, 75], ["pandas.read_excel", "pandas.read_excel.index.astype"], "methods", ["None"], ["", "def", "load_themes", "(", "self", ",", "file_path", ")", ":", "\n", "\t\t", "m_themes", "=", "pd", ".", "read_excel", "(", "\n", "file_path", ",", "\n", "index_col", "=", "'theme_id'", ",", "\n", "engine", "=", "'openpyxl'", ",", "\n", "dtype", "=", "str", "\n", ")", "\n", "m_themes", ".", "index", "=", "m_themes", ".", "index", ".", "astype", "(", "str", ")", "\n", "return", "m_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MisinformationTaxonomy.frames_to_themes": [[76, 81], ["collections.defaultdict", "stance_taxonomy.MisinformationTaxonomy.frames.iterrows", "stance_taxonomy.MisinformationTaxonomy.frame_to_themes"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_themes"], ["", "def", "frames_to_themes", "(", "self", ")", ":", "\n", "\t\t", "f_lookup", "=", "defaultdict", "(", "set", ")", "\n", "for", "f_id", ",", "frame", "in", "self", ".", "frames", ".", "iterrows", "(", ")", ":", "\n", "\t\t\t", "f_lookup", "[", "f_id", "]", "=", "self", ".", "frame_to_themes", "(", "f_id", ")", "\n", "", "return", "f_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MisinformationTaxonomy.frame_to_themes": [[82, 98], ["set", "len", "set.add", "len", "set.add"], "methods", ["None"], ["", "def", "frame_to_themes", "(", "self", ",", "f_id", ")", ":", "\n", "\t\t", "f_themes", "=", "set", "(", ")", "\n", "if", "f_id", "not", "in", "self", ".", "frames", ".", "index", ":", "\n", "\t\t\t", "return", "f_themes", "\n", "", "frame", "=", "self", ".", "frames", ".", "loc", "[", "f_id", "]", "\n", "for", "m_id", "in", "frame", "[", "'misinformation|Accept'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t", "mt_id", "=", "self", ".", "concerns", ".", "loc", "[", "m_id", "]", "[", "'theme'", "]", "\n", "# ensure same theme only gets score once for one frame - stance pair, no need to count multiple times", "\n", "f_themes", ".", "add", "(", "(", "mt_id", ",", "1", ")", ")", "\n", "", "", "for", "m_id", "in", "frame", "[", "'misinformation|Reject'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t", "mt_id", "=", "self", ".", "concerns", ".", "loc", "[", "m_id", "]", "[", "'theme'", "]", "\n", "# ensure same theme only gets score once for one frame - stance pair, no need to count multiple times", "\n", "f_themes", ".", "add", "(", "(", "mt_id", ",", "-", "1", ")", ")", "\n", "", "", "return", "f_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MisinformationTaxonomy.theme_score": [[99, 122], ["collections.defaultdict", "collections.defaultdict.items", "list", "fs_themes.items", "numpy.sum", "list.append", "sorted", "mt_scores[].append", "len", "len", "numpy.abs"], "methods", ["None"], ["", "def", "theme_score", "(", "self", ",", "scores", ",", "frames", ")", ":", "\n", "\t\t", "mt_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "fs_score", ",", "f_id", "in", "scores", ":", "\n", "\t\t\t", "fs_themes", "=", "{", "}", "\n", "for", "m_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'misinformation|Accept'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "mt_id", "=", "self", ".", "concerns", ".", "loc", "[", "m_id", "]", "[", "'theme'", "]", "\n", "# ensure same theme only gets score once for one frame - stance pair, no need to count multiple times", "\n", "fs_themes", "[", "mt_id", "]", "=", "fs_score", "\n", "", "", "for", "m_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'misinformation|Reject'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "mt_id", "=", "self", ".", "concerns", ".", "loc", "[", "m_id", "]", "[", "'theme'", "]", "\n", "# ensure same theme only gets score once for one frame - stance pair, no need to count multiple times", "\n", "fs_themes", "[", "mt_id", "]", "=", "-", "fs_score", "\n", "", "", "for", "mt_id", ",", "mt_score", "in", "fs_themes", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "mt_scores", "[", "mt_id", "]", ".", "append", "(", "mt_score", ")", "\n", "\n", "", "", "themes", "=", "[", "]", "\n", "for", "mt_id", ",", "mt_i_scores", "in", "mt_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "mt_score", "=", "np", ".", "sum", "(", "mt_i_scores", ")", "\n", "themes", ".", "append", "(", "(", "mt_score", ",", "mt_id", ")", ")", "\n", "", "themes", "=", "list", "(", "sorted", "(", "themes", ",", "key", "=", "lambda", "x", ":", "-", "np", ".", "abs", "(", "x", "[", "0", "]", ")", ")", ")", "\n", "return", "themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustTaxonomy.__init__": [[125, 132], ["stance_taxonomy.HierarchicalTaxonomy.__init__", "stance_taxonomy.TrustTaxonomy.load_concerns", "stance_taxonomy.TrustTaxonomy.load_themes", "frames[].apply", "frames[].apply"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustTaxonomy.load_concerns", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.load_themes"], ["\t", "def", "__init__", "(", "self", ",", "name", ",", "concern_path", ",", "theme_path", ",", "frames", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "concerns", "=", "self", ".", "load_concerns", "(", "concern_path", ")", "\n", "self", ".", "themes", "=", "self", ".", "load_themes", "(", "theme_path", ")", "\n", "accept_mask", "=", "frames", "[", "'trust|Accept'", "]", ".", "apply", "(", "len", ")", ">", "0", "\n", "reject_mask", "=", "frames", "[", "'trust|Reject'", "]", ".", "apply", "(", "len", ")", ">", "0", "\n", "self", ".", "frames", "=", "frames", "[", "accept_mask", "|", "reject_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustTaxonomy.load_concerns": [[133, 142], ["pandas.read_excel().fillna", "pandas.read_excel().fillna.index.astype", "pandas.read_excel"], "methods", ["None"], ["", "def", "load_concerns", "(", "self", ",", "file_path", ")", ":", "\n", "\t\t", "t_concerns", "=", "pd", ".", "read_excel", "(", "\n", "file_path", ",", "\n", "index_col", "=", "'trust_id'", ",", "\n", "engine", "=", "'openpyxl'", ",", "\n", "dtype", "=", "str", "\n", ")", ".", "fillna", "(", "''", ")", "\n", "t_concerns", ".", "index", "=", "t_concerns", ".", "index", ".", "astype", "(", "str", ")", "\n", "return", "t_concerns", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustTaxonomy.load_themes": [[143, 152], ["pandas.read_excel", "pandas.read_excel.index.astype"], "methods", ["None"], ["", "def", "load_themes", "(", "self", ",", "file_path", ")", ":", "\n", "\t\t", "t_themes", "=", "pd", ".", "read_excel", "(", "\n", "file_path", ",", "\n", "index_col", "=", "'theme_id'", ",", "\n", "engine", "=", "'openpyxl'", ",", "\n", "dtype", "=", "str", "\n", ")", "\n", "t_themes", ".", "index", "=", "t_themes", ".", "index", ".", "astype", "(", "str", ")", "\n", "return", "t_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustTaxonomy.frames_to_themes": [[153, 158], ["collections.defaultdict", "stance_taxonomy.TrustTaxonomy.frames.iterrows", "stance_taxonomy.TrustTaxonomy.frame_to_themes"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_themes"], ["", "def", "frames_to_themes", "(", "self", ")", ":", "\n", "\t\t", "f_lookup", "=", "defaultdict", "(", "set", ")", "\n", "for", "f_id", ",", "frame", "in", "self", ".", "frames", ".", "iterrows", "(", ")", ":", "\n", "\t\t\t", "f_lookup", "[", "f_id", "]", "=", "self", ".", "frame_to_themes", "(", "f_id", ")", "\n", "", "return", "f_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustTaxonomy.frame_to_themes": [[159, 177], ["set", "len", "len", "set.add", "len", "len", "set.add"], "methods", ["None"], ["", "def", "frame_to_themes", "(", "self", ",", "f_id", ")", ":", "\n", "\t\t", "f_themes", "=", "set", "(", ")", "\n", "if", "f_id", "not", "in", "self", ".", "frames", ".", "index", ":", "\n", "\t\t\t", "return", "f_themes", "\n", "", "frame", "=", "self", ".", "frames", ".", "loc", "[", "f_id", "]", "\n", "for", "t_id", "in", "frame", "[", "'trust|Accept'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "t_id", ")", ">", "0", "and", "t_id", "in", "self", ".", "concerns", ".", "index", ":", "\n", "# ensure same theme only gets score once for one frame - stance pair, no need to count multiple times", "\n", "\t\t\t\t", "tp_id", "=", "self", ".", "concerns", ".", "loc", "[", "t_id", "]", "[", "'theme'", "]", "\n", "if", "len", "(", "tp_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "f_themes", ".", "add", "(", "(", "tp_id", ",", "1", ")", ")", "\n", "", "", "", "for", "t_id", "in", "frame", "[", "'trust|Reject'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "t_id", ")", ">", "0", "and", "t_id", "in", "self", ".", "concerns", ".", "index", ":", "\n", "# ensure same theme only gets score once for one frame - stance pair, no need to count multiple times", "\n", "\t\t\t\t", "tp_id", "=", "self", ".", "concerns", ".", "loc", "[", "t_id", "]", "[", "'theme'", "]", "\n", "if", "len", "(", "tp_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "f_themes", ".", "add", "(", "(", "tp_id", ",", "-", "1", ")", ")", "\n", "", "", "", "return", "f_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustTaxonomy.theme_score": [[178, 205], ["collections.defaultdict", "collections.defaultdict.items", "list", "fs_tp_themes.items", "numpy.sum", "list.append", "sorted", "tp_scores[].append", "len", "len", "len", "len", "numpy.abs"], "methods", ["None"], ["", "def", "theme_score", "(", "self", ",", "scores", ",", "frames", ")", ":", "\n", "\t\t", "tp_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "fs_score", ",", "f_id", "in", "scores", ":", "\n", "\t\t\t", "fs_tp_themes", "=", "{", "}", "\n", "for", "t_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'trust|Accept'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "t_id", ")", ">", "0", "and", "t_id", "in", "self", ".", "concerns", ".", "index", ":", "\n", "# ensure same theme only gets score once for one frame - stance pair, no need to count multiple times", "\n", "\t\t\t\t\t", "t_score", "=", "fs_score", "\n", "tp_id", "=", "self", ".", "concerns", ".", "loc", "[", "t_id", "]", "[", "'theme'", "]", "\n", "if", "len", "(", "tp_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t\t", "fs_tp_themes", "[", "tp_id", "]", "=", "t_score", "\n", "", "", "", "for", "t_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'trust|Reject'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "t_id", ")", ">", "0", "and", "t_id", "in", "self", ".", "concerns", ".", "index", ":", "\n", "# ensure same theme only gets score once for one frame - stance pair, no need to count multiple times", "\n", "\t\t\t\t\t", "t_score", "=", "-", "fs_score", "\n", "tp_id", "=", "self", ".", "concerns", ".", "loc", "[", "t_id", "]", "[", "'theme'", "]", "\n", "if", "len", "(", "tp_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t\t", "fs_tp_themes", "[", "tp_id", "]", "=", "t_score", "\n", "", "", "", "for", "tp_id", ",", "t_score", "in", "fs_tp_themes", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "tp_scores", "[", "tp_id", "]", ".", "append", "(", "t_score", ")", "\n", "", "", "p_themes", "=", "[", "]", "\n", "for", "t_id", ",", "t_i_scores", "in", "tp_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "t_score", "=", "np", ".", "sum", "(", "t_i_scores", ")", "\n", "p_themes", ".", "append", "(", "(", "t_score", ",", "t_id", ")", ")", "\n", "", "p_themes", "=", "list", "(", "sorted", "(", "p_themes", ",", "key", "=", "lambda", "x", ":", "-", "np", ".", "abs", "(", "x", "[", "0", "]", ")", ")", ")", "\n", "\n", "return", "p_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustBuildingTaxonomy.__init__": [[208, 210], ["stance_taxonomy.TrustTaxonomy.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "concern_path", ",", "theme_path", ",", "frames", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "name", "=", "'trust+'", ",", "concern_path", "=", "concern_path", ",", "theme_path", "=", "theme_path", ",", "frames", "=", "frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.TrustErodingTaxonomy.__init__": [[213, 215], ["stance_taxonomy.TrustTaxonomy.__init__"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "concern_path", ",", "theme_path", ",", "frames", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "name", "=", "'trust-'", ",", "concern_path", "=", "concern_path", ",", "theme_path", "=", "theme_path", ",", "frames", "=", "frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MoralityTaxonomy.__init__": [[218, 223], ["stance_taxonomy.Taxonomy.__init__", "stance_taxonomy.MoralityTaxonomy.load_themes"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.load_themes"], ["\t", "def", "__init__", "(", "self", ",", "theme_path", ",", "frames", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "name", "=", "'morality'", ")", "\n", "self", ".", "themes", "=", "self", ".", "load_themes", "(", "theme_path", ")", "\n", "# all frames have moralities defined", "\n", "self", ".", "frames", "=", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MoralityTaxonomy.load_themes": [[224, 236], ["pandas.DataFrame"], "methods", ["None"], ["", "def", "load_themes", "(", "self", ",", "file_path", ")", ":", "\n", "\t\t", "mo", "=", "[", "\n", "'Care'", ",", "'Harm'", ",", "\n", "'Fairness'", ",", "'Cheating'", ",", "\n", "'Loyalty'", ",", "'Betrayal'", ",", "\n", "'Authority'", ",", "'Subversion'", ",", "\n", "'Purity'", ",", "'Degradation'", "\n", "]", "\n", "mo", "=", "pd", ".", "DataFrame", "(", "\n", "columns", "=", "[", "'theme_id'", ",", "'text'", "]", ",", "\n", "data", "=", "[", "(", "x", ",", "x", ")", "for", "x", "in", "mo", "]", ")", "\n", "return", "mo", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MoralityTaxonomy.frames_to_themes": [[237, 242], ["collections.defaultdict", "stance_taxonomy.MoralityTaxonomy.frames.iterrows", "stance_taxonomy.MoralityTaxonomy.frame_to_themes"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_themes"], ["", "def", "frames_to_themes", "(", "self", ")", ":", "\n", "\t\t", "f_lookup", "=", "defaultdict", "(", "set", ")", "\n", "for", "f_id", ",", "frame", "in", "self", ".", "frames", ".", "iterrows", "(", ")", ":", "\n", "\t\t\t", "f_lookup", "[", "f_id", "]", "=", "self", ".", "frame_to_themes", "(", "f_id", ")", "\n", "", "return", "f_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MoralityTaxonomy.frame_to_themes": [[243, 252], ["set", "len", "set.add"], "methods", ["None"], ["", "def", "frame_to_themes", "(", "self", ",", "f_id", ")", ":", "\n", "\t\t", "f_themes", "=", "set", "(", ")", "\n", "if", "f_id", "not", "in", "self", ".", "frames", ".", "index", ":", "\n", "\t\t\t", "return", "f_themes", "\n", "", "frame", "=", "self", ".", "frames", ".", "loc", "[", "f_id", "]", "\n", "for", "m_id", "in", "frame", "[", "'morality'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t", "f_themes", ".", "add", "(", "(", "m_id", ",", "1", ")", ")", "\n", "", "", "return", "f_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.MoralityTaxonomy.theme_score": [[253, 265], ["collections.defaultdict", "collections.defaultdict.items", "list", "numpy.sum", "list.append", "sorted", "len", "m_scores[].append", "numpy.abs"], "methods", ["None"], ["", "def", "theme_score", "(", "self", ",", "scores", ",", "frames", ")", ":", "\n", "\t\t", "m_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "fs_score", ",", "f_id", "in", "scores", ":", "\n", "\t\t\t", "for", "m_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'morality'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "m_scores", "[", "m_id", "]", ".", "append", "(", "fs_score", ")", "\n", "", "", "", "misinfo", "=", "[", "]", "\n", "for", "m_id", ",", "m_i_scores", "in", "m_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m_score", "=", "np", ".", "sum", "(", "m_i_scores", ")", "\n", "misinfo", ".", "append", "(", "(", "m_score", ",", "m_id", ")", ")", "\n", "", "misinfo", "=", "list", "(", "sorted", "(", "misinfo", ",", "key", "=", "lambda", "x", ":", "-", "np", ".", "abs", "(", "x", "[", "0", "]", ")", ")", ")", "\n", "return", "misinfo", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.LiteracyTaxonomy.__init__": [[268, 275], ["stance_taxonomy.Taxonomy.__init__", "stance_taxonomy.LiteracyTaxonomy.load_themes", "frames[].apply", "frames[].apply"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.load_themes"], ["\t", "def", "__init__", "(", "self", ",", "theme_path", ",", "frames", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "name", "=", "'literacy'", ")", "\n", "self", ".", "themes", "=", "self", ".", "load_themes", "(", "theme_path", ")", "\n", "\n", "accept_mask", "=", "frames", "[", "'literacy+|Accept'", "]", ".", "apply", "(", "len", ")", ">", "0", "\n", "reject_mask", "=", "frames", "[", "'literacy-|Accept'", "]", ".", "apply", "(", "len", ")", ">", "0", "\n", "self", ".", "frames", "=", "frames", "[", "accept_mask", "|", "reject_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.LiteracyTaxonomy.load_themes": [[276, 279], ["pandas.DataFrame"], "methods", ["None"], ["", "def", "load_themes", "(", "self", ",", "file_path", ")", ":", "\n", "\t\t", "lt_themes", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'theme_id'", ",", "'text'", "]", ",", "data", "=", "[", "[", "'+'", ",", "'+'", "]", ",", "[", "'-'", ",", "'-'", "]", "]", ")", "\n", "return", "lt_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.LiteracyTaxonomy.frames_to_themes": [[280, 285], ["collections.defaultdict", "stance_taxonomy.LiteracyTaxonomy.frames.iterrows", "stance_taxonomy.LiteracyTaxonomy.frame_to_themes"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_themes"], ["", "def", "frames_to_themes", "(", "self", ")", ":", "\n", "\t\t", "f_lookup", "=", "defaultdict", "(", "set", ")", "\n", "for", "f_id", ",", "frame", "in", "self", ".", "frames", ".", "iterrows", "(", ")", ":", "\n", "\t\t\t", "f_lookup", "[", "f_id", "]", "=", "self", ".", "frame_to_themes", "(", "f_id", ")", "\n", "", "return", "f_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.LiteracyTaxonomy.frame_to_themes": [[286, 298], ["set", "len", "set.add", "len", "set.add"], "methods", ["None"], ["", "def", "frame_to_themes", "(", "self", ",", "f_id", ")", ":", "\n", "\t\t", "f_themes", "=", "set", "(", ")", "\n", "if", "f_id", "not", "in", "self", ".", "frames", ".", "index", ":", "\n", "\t\t\t", "return", "f_themes", "\n", "", "frame", "=", "self", ".", "frames", ".", "loc", "[", "f_id", "]", "\n", "for", "m_id", "in", "frame", "[", "'literacy+|Accept'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t", "f_themes", ".", "add", "(", "(", "'+'", ",", "1", ")", ")", "\n", "", "", "for", "m_id", "in", "frame", "[", "'literacy-|Accept'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t", "f_themes", ".", "add", "(", "(", "'-'", ",", "1", ")", ")", "\n", "", "", "return", "f_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.LiteracyTaxonomy.theme_score": [[299, 316], ["collections.defaultdict", "collections.defaultdict.items", "list", "numpy.sum", "list.append", "sorted", "len", "m_scores[].append", "len", "m_scores[].append", "numpy.abs"], "methods", ["None"], ["", "def", "theme_score", "(", "self", ",", "scores", ",", "frames", ")", ":", "\n", "\t\t", "m_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "fs_score", ",", "f_id", "in", "scores", ":", "\n", "\t\t\t", "for", "m_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'literacy+|Accept'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "m_scores", "[", "'+'", "]", ".", "append", "(", "fs_score", ")", "\n", "break", "\n", "", "", "for", "m_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'literacy-|Accept'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "m_scores", "[", "'-'", "]", ".", "append", "(", "fs_score", ")", "\n", "break", "\n", "", "", "", "misinfo", "=", "[", "]", "\n", "for", "m_id", ",", "m_i_scores", "in", "m_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m_score", "=", "np", ".", "sum", "(", "m_i_scores", ")", "\n", "misinfo", ".", "append", "(", "(", "m_score", ",", "m_id", ")", ")", "\n", "", "misinfo", "=", "list", "(", "sorted", "(", "misinfo", ",", "key", "=", "lambda", "x", ":", "-", "np", ".", "abs", "(", "x", "[", "0", "]", ")", ")", ")", "\n", "return", "misinfo", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.__init__": [[319, 326], ["stance_taxonomy.Taxonomy.__init__", "stance_taxonomy.CivilRightsTaxonomy.load_themes", "frames[].apply", "frames[].apply"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.load_themes"], ["\t", "def", "__init__", "(", "self", ",", "theme_path", ",", "frames", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "name", "=", "'civil_rights'", ")", "\n", "self", ".", "themes", "=", "self", ".", "load_themes", "(", "theme_path", ")", "\n", "\n", "accept_mask", "=", "frames", "[", "'civil_rights+|Accept'", "]", ".", "apply", "(", "len", ")", ">", "0", "\n", "reject_mask", "=", "frames", "[", "'civil_rights-|Accept'", "]", ".", "apply", "(", "len", ")", ">", "0", "\n", "self", ".", "frames", "=", "frames", "[", "accept_mask", "|", "reject_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.load_themes": [[327, 330], ["pandas.DataFrame"], "methods", ["None"], ["", "def", "load_themes", "(", "self", ",", "file_path", ")", ":", "\n", "\t\t", "cr_themes", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'theme_id'", ",", "'text'", "]", ",", "data", "=", "[", "[", "'+'", ",", "'+'", "]", ",", "[", "'-'", ",", "'-'", "]", "]", ")", "\n", "return", "cr_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.frames_to_themes": [[331, 336], ["collections.defaultdict", "stance_taxonomy.CivilRightsTaxonomy.frames.iterrows", "stance_taxonomy.CivilRightsTaxonomy.frame_to_themes"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_themes"], ["", "def", "frames_to_themes", "(", "self", ")", ":", "\n", "\t\t", "f_lookup", "=", "defaultdict", "(", "set", ")", "\n", "for", "f_id", ",", "frame", "in", "self", ".", "frames", ".", "iterrows", "(", ")", ":", "\n", "\t\t\t", "f_lookup", "[", "f_id", "]", "=", "self", ".", "frame_to_themes", "(", "f_id", ")", "\n", "", "return", "f_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.frame_to_themes": [[337, 349], ["set", "len", "set.add", "len", "set.add"], "methods", ["None"], ["", "def", "frame_to_themes", "(", "self", ",", "f_id", ")", ":", "\n", "\t\t", "f_themes", "=", "set", "(", ")", "\n", "if", "f_id", "not", "in", "self", ".", "frames", ".", "index", ":", "\n", "\t\t\t", "return", "f_themes", "\n", "", "frame", "=", "self", ".", "frames", ".", "loc", "[", "f_id", "]", "\n", "for", "m_id", "in", "frame", "[", "'civil_rights+|Accept'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t", "f_themes", ".", "add", "(", "(", "'+'", ",", "1", ")", ")", "\n", "", "", "for", "m_id", "in", "frame", "[", "'civil_rights-|Accept'", "]", ":", "\n", "\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t", "f_themes", ".", "add", "(", "(", "'-'", ",", "1", ")", ")", "\n", "", "", "return", "f_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.theme_score": [[350, 367], ["collections.defaultdict", "collections.defaultdict.items", "list", "numpy.sum", "list.append", "sorted", "len", "m_scores[].append", "len", "m_scores[].append", "numpy.abs"], "methods", ["None"], ["", "def", "theme_score", "(", "self", ",", "scores", ",", "frames", ")", ":", "\n", "\t\t", "m_scores", "=", "defaultdict", "(", "list", ")", "\n", "for", "fs_score", ",", "f_id", "in", "scores", ":", "\n", "\t\t\t", "for", "m_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'civil_rights+|Accept'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "m_scores", "[", "'+'", "]", ".", "append", "(", "fs_score", ")", "\n", "break", "\n", "", "", "for", "m_id", "in", "frames", ".", "loc", "[", "f_id", "]", "[", "'civil_rights-|Accept'", "]", ":", "\n", "\t\t\t\t", "if", "len", "(", "m_id", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "m_scores", "[", "'-'", "]", ".", "append", "(", "fs_score", ")", "\n", "break", "\n", "", "", "", "misinfo", "=", "[", "]", "\n", "for", "m_id", ",", "m_i_scores", "in", "m_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "m_score", "=", "np", ".", "sum", "(", "m_i_scores", ")", "\n", "misinfo", ".", "append", "(", "(", "m_score", ",", "m_id", ")", ")", "\n", "", "misinfo", "=", "list", "(", "sorted", "(", "misinfo", ",", "key", "=", "lambda", "x", ":", "-", "np", ".", "abs", "(", "x", "[", "0", "]", ")", ")", ")", "\n", "return", "misinfo", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__": [[378, 394], ["object.__init__", "pandas.concat", "list", "pandas.concat.set_index", "pandas.concat.reset_index().set_index", "tax_theme.reset_index.reset_index.reset_index", "pandas.concat.append", "range", "len", "pandas.concat.reset_index", "enumerate", "stance_taxonomy.FrameTaxonomy.f_map.items"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.__init__"], ["\t", "def", "__init__", "(", "self", ",", "frames", ",", "taxonomies", ":", "List", "[", "Taxonomy", "]", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "frames", "=", "frames", "\n", "self", ".", "taxonomies", "=", "taxonomies", "\n", "themes", "=", "[", "]", "\n", "for", "tax", "in", "self", ".", "taxonomies", ":", "\n", "\t\t\t", "tax_theme", "=", "tax", ".", "themes", "\n", "tax_theme", "=", "tax_theme", ".", "reset_index", "(", ")", "\n", "tax_theme", "[", "'taxonomy'", "]", "=", "tax", ".", "name", "\n", "themes", ".", "append", "(", "tax_theme", ")", "\n", "", "themes", "=", "pd", ".", "concat", "(", "themes", ")", "\n", "themes", "[", "'idx'", "]", "=", "list", "(", "range", "(", "len", "(", "themes", ")", ")", ")", "\n", "self", ".", "themes", "=", "themes", ".", "set_index", "(", "[", "'taxonomy'", ",", "'theme_id'", "]", ")", "\n", "self", ".", "themes_inv", "=", "themes", ".", "reset_index", "(", ")", ".", "set_index", "(", "'idx'", ")", "\n", "self", ".", "f_map", "=", "{", "f_id", ":", "idx", "for", "(", "idx", ",", "f_id", ")", "in", "enumerate", "(", "self", ".", "frames", ".", "index", ")", "}", "\n", "self", ".", "f_imap", "=", "{", "v", ":", "k", "for", "(", "k", ",", "v", ")", "in", "self", ".", "f_map", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frames_to_themes": [[395, 404], ["collections.defaultdict", "tax.frames_to_themes", "tax.frames_to_themes.items", "f_lookup[].append", "int"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frames_to_themes"], ["", "def", "frames_to_themes", "(", "self", ")", ":", "\n", "\t\t", "f_lookup", "=", "defaultdict", "(", "list", ")", "\n", "for", "tax", "in", "self", ".", "taxonomies", ":", "\n", "\t\t\t", "tax_f_lookup", "=", "tax", ".", "frames_to_themes", "(", ")", "\n", "for", "f_id", ",", "tax_set", "in", "tax_f_lookup", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "for", "tax_theme_id", ",", "score_sign", "in", "tax_set", ":", "\n", "\t\t\t\t\t", "theme_idx", "=", "self", ".", "themes", ".", "loc", "[", "tax", ".", "name", ",", "tax_theme_id", "]", "[", "'idx'", "]", "\n", "f_lookup", "[", "f_id", "]", ".", "append", "(", "(", "int", "(", "theme_idx", ")", ",", "score_sign", ")", ")", "\n", "", "", "", "return", "f_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_themes": [[405, 413], ["tax.frame_to_themes", "f_themes.append", "int"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_themes"], ["", "def", "frame_to_themes", "(", "self", ",", "f_id", ")", ":", "\n", "\t\t", "f_themes", "=", "[", "]", "\n", "for", "tax", "in", "self", ".", "taxonomies", ":", "\n", "\t\t\t", "f_tax_themes", "=", "tax", ".", "frame_to_themes", "(", "f_id", ")", "\n", "for", "tax_theme_id", ",", "score_sign", "in", "f_tax_themes", ":", "\n", "\t\t\t\t", "theme_idx", "=", "self", ".", "themes", ".", "loc", "[", "tax", ".", "name", ",", "tax_theme_id", "]", "[", "'idx'", "]", "\n", "f_themes", ".", "append", "(", "(", "int", "(", "theme_idx", ")", ",", "score_sign", ")", ")", "\n", "", "", "return", "f_themes", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_tax": [[414, 425], ["tax.frame_to_themes", "len"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_to_themes"], ["", "def", "frame_to_tax", "(", "self", ",", "f_id", ")", ":", "\n", "\t\t", "f_tax", "=", "{", "}", "\n", "for", "tax", "in", "self", ".", "taxonomies", ":", "\n", "\t\t\t", "tax_hier", "=", "{", "}", "\n", "f_tax_themes", "=", "tax", ".", "frame_to_themes", "(", "f_id", ")", "\n", "for", "tax_theme_id", ",", "score_sign", "in", "f_tax_themes", ":", "\n", "\t\t\t\t", "theme_txt", "=", "self", ".", "themes", ".", "loc", "[", "tax", ".", "name", ",", "tax_theme_id", "]", "[", "'text'", "]", "\n", "tax_hier", "[", "theme_txt", "]", "=", "'Agree'", "if", "score_sign", ">", "0", "else", "'Disagree'", "\n", "", "if", "len", "(", "tax_hier", ")", ">", "0", ":", "\n", "\t\t\t\t", "f_tax", "[", "tax", ".", "name", "]", "=", "tax_hier", "\n", "", "", "return", "f_tax", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.load_frames": [[426, 450], ["pandas.read_excel", "frames[].apply", "frames[].fillna().apply", "frames[].fillna"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_frames", "(", "file_path", ":", "str", ")", ":", "\n", "\t\t", "taxonomy_cols", "=", "[", "\n", "'misinformation|Accept'", ",", "\n", "'misinformation|Reject'", ",", "\n", "'trust|Accept'", ",", "\n", "'trust|Reject'", ",", "\n", "'civil_rights+|Accept'", ",", "\n", "'civil_rights-|Accept'", ",", "\n", "'literacy+|Accept'", ",", "\n", "'literacy-|Accept'", ",", "\n", "]", "\n", "\n", "frames", "=", "pd", ".", "read_excel", "(", "\n", "file_path", ",", "\n", "index_col", "=", "'f_id'", ",", "\n", "engine", "=", "'openpyxl'", "\n", ")", "\n", "for", "col", "in", "taxonomy_cols", ":", "\n", "\t\t\t", "frames", "[", "col", "]", "=", "frames", "[", "col", "]", ".", "fillna", "(", "''", ")", ".", "apply", "(", "split_taxonomy", ")", "\n", "\n", "# morality", "\n", "", "frames", "[", "'morality'", "]", "=", "frames", "[", "'morality'", "]", ".", "apply", "(", "split_morality", ")", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_stance_score": [[451, 461], ["numpy.argsort", "scores.append", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "frame_stance_score", "(", "self", ",", "v", ",", "threshold", "=", "0.2", ")", ":", "\n", "\t\t", "scores", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "argsort", "(", "np", ".", "abs", "(", "v", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "\t\t\t", "i_score", "=", "v", "[", "i", "]", "\n", "if", "np", ".", "abs", "(", "i_score", ")", "<", "threshold", ":", "\n", "\t\t\t\t", "break", "\n", "", "f_idx", "=", "i", "\n", "f_id", "=", "self", ".", "f_imap", "[", "f_idx", "]", "\n", "scores", ".", "append", "(", "(", "i_score", ",", "f_id", ")", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.theme_embedding": [[462, 469], ["numpy.zeros", "stance_taxonomy.FrameTaxonomy.frame_stance_score", "tax.theme_score", "stance_taxonomy.FrameTaxonomy.assign_score", "len"], "methods", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_stance_score", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.CivilRightsTaxonomy.theme_score", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.assign_score"], ["", "def", "theme_embedding", "(", "self", ",", "u", ",", "threshold", "=", "0.2", ")", ":", "\n", "\t\t", "t", "=", "np", ".", "zeros", "(", "[", "len", "(", "self", ".", "themes", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "stance_scores", "=", "self", ".", "frame_stance_score", "(", "u", ",", "threshold", ")", "\n", "for", "tax", "in", "self", ".", "taxonomies", ":", "\n", "\t\t\t", "tax_scores", "=", "tax", ".", "theme_score", "(", "stance_scores", ",", "self", ".", "frames", ")", "\n", "self", ".", "assign_score", "(", "t", ",", "tax_scores", ",", "tax", ".", "name", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.theme_scores": [[470, 481], ["numpy.argsort", "scores.append", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "theme_scores", "(", "self", ",", "t_vec", ",", "t_threshold", "=", "0.02", ")", ":", "\n", "\t\t", "scores", "=", "[", "]", "\n", "for", "t_idx", "in", "np", ".", "argsort", "(", "np", ".", "abs", "(", "t_vec", ")", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "\t\t\t", "i_score", "=", "t_vec", "[", "t_idx", "]", "\n", "if", "np", ".", "abs", "(", "i_score", ")", "<", "t_threshold", ":", "\n", "\t\t\t\t", "break", "\n", "", "t", "=", "self", ".", "themes_inv", ".", "loc", "[", "t_idx", "]", "\n", "t_id", "=", "t", "[", "'theme_id'", "]", "\n", "t_tax", "=", "t", "[", "'taxonomy'", "]", "\n", "scores", ".", "append", "(", "(", "i_score", ",", "t_tax", ",", "t_id", ")", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frame_embedding": [[482, 497], ["numpy.zeros", "tweet[].items", "max", "len", "f_s.items"], "methods", ["None"], ["", "def", "frame_embedding", "(", "self", ",", "tweet", ",", "threshold", "=", "0.2", ")", ":", "\n", "\t\t", "t_vec", "=", "np", ".", "zeros", "(", "[", "len", "(", "self", ".", "frames", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "set_value", "=", "False", "\n", "for", "f_id", ",", "f_s", "in", "tweet", "[", "'stance'", "]", ".", "items", "(", ")", ":", "\n", "\t\t\t", "f_idx", "=", "self", ".", "f_map", "[", "f_id", "]", "\n", "stance", ",", "score", "=", "max", "(", "f_s", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "if", "stance", "==", "'No Stance'", "or", "score", "<", "threshold", ":", "\n", "\t\t\t\t", "continue", "\n", "", "if", "stance", "==", "'Reject'", ":", "\n", "\t\t\t\t", "score", "*=", "-", "1", "\n", "", "t_vec", "[", "f_idx", "]", "=", "score", "\n", "set_value", "=", "True", "\n", "", "if", "not", "set_value", ":", "\n", "\t\t\t", "return", "None", "\n", "", "return", "t_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.assign_score": [[498, 502], ["None"], "methods", ["None"], ["", "def", "assign_score", "(", "self", ",", "t", ",", "scores", ",", "tax", ")", ":", "\n", "\t\t", "for", "t_score", ",", "t_id", "in", "scores", ":", "\n", "\t\t\t", "t_idx", "=", "self", ".", "themes", ".", "loc", "[", "tax", ",", "t_id", "]", "[", "'idx'", "]", "\n", "t", "[", "t_idx", "]", "=", "t_score", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.split_taxonomy": [[369, 371], ["str", "int", "str().split", "float", "len", "str"], "function", ["None"], ["", "", "def", "split_taxonomy", "(", "x", ")", ":", "\n", "\t", "return", "[", "str", "(", "int", "(", "float", "(", "x", ")", ")", ")", "for", "x", "in", "str", "(", "x", ")", ".", "split", "(", "','", ")", "if", "len", "(", "x", ")", ">", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.split_morality": [[373, 375], ["str().split", "str"], "function", ["None"], ["", "def", "split_morality", "(", "x", ")", ":", "\n", "\t", "return", "str", "(", "x", ")", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.main": [[504, 557], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "stance_taxonomy.FrameTaxonomy.load_frames", "stance_taxonomy.FrameTaxonomy", "stance_taxonomy.FrameTaxonomy.frames_to_themes", "open", "ujson.dump", "open", "t2idx.to_json", "stance_taxonomy.MisinformationTaxonomy", "stance_taxonomy.TrustBuildingTaxonomy", "stance_taxonomy.TrustErodingTaxonomy", "stance_taxonomy.LiteracyTaxonomy", "stance_taxonomy.CivilRightsTaxonomy", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.load_frames", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_taxonomy.FrameTaxonomy.frames_to_themes"], ["", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--frame_map_output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--theme_output_path'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# taxonomy_path = 'data/co-vax-frames/taxonomy'", "\n", "taxonomy_path", "=", "args", ".", "input_path", "\n", "frame_map_output_path", "=", "args", ".", "frame_map_output_path", "\n", "theme_output_path", "=", "args", ".", "theme_output_path", "\n", "\n", "frame_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'frames-covid19.xlsx'", ")", "\n", "frames", "=", "FrameTaxonomy", ".", "load_frames", "(", "frame_path", ")", "\n", "tax", "=", "FrameTaxonomy", "(", "\n", "frames", "=", "frames", ",", "\n", "taxonomies", "=", "[", "\n", "MisinformationTaxonomy", "(", "\n", "concern_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'misinformation-concerns-covid19.xlsx'", ")", ",", "\n", "theme_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'misinformation-themes-covid19.xlsx'", ")", ",", "\n", "frames", "=", "frames", "\n", ")", ",", "\n", "TrustBuildingTaxonomy", "(", "\n", "concern_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'trust-building-concerns-covid19.xlsx'", ")", ",", "\n", "theme_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'trust-building-themes-covid19.xlsx'", ")", ",", "\n", "frames", "=", "frames", "\n", ")", ",", "\n", "TrustErodingTaxonomy", "(", "\n", "concern_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'trust-eroding-concerns-covid19.xlsx'", ")", ",", "\n", "theme_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'trust-eroding-themes-covid19.xlsx'", ")", ",", "\n", "frames", "=", "frames", "\n", ")", ",", "\n", "LiteracyTaxonomy", "(", "\n", "theme_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'literacy-themes-covid19.xlsx'", ")", ",", "\n", "frames", "=", "frames", "\n", ")", ",", "\n", "CivilRightsTaxonomy", "(", "\n", "theme_path", "=", "os", ".", "path", ".", "join", "(", "taxonomy_path", ",", "'civil-rights-themes-covid19.xlsx'", ")", ",", "\n", "frames", "=", "frames", "\n", ")", ",", "\n", "# MoralityTaxonomy(", "\n", "# \ttheme_path=os.path.join(taxonomy_path, 'morality-themes-covid19.xlsx'),", "\n", "# \tframes=frames", "\n", "# ),", "\n", "]", "\n", ")", "\n", "f2t", "=", "tax", ".", "frames_to_themes", "(", ")", "\n", "t2idx", "=", "tax", ".", "themes", "\n", "with", "open", "(", "frame_map_output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "f2t", ",", "f", ")", "\n", "\n", "", "with", "open", "(", "theme_output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "t2idx", ".", "to_json", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.cluster_statistics.read_jsonl": [[10, 17], ["open", "line.strip.strip", "ujson.loads"], "function", ["None"], ["def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.cluster_statistics.main": [[19, 70], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "pickle.load.items", "collections.defaultdict", "print", "tqdm.tqdm", "print", "open", "ujson.load", "open", "pickle.load", "cluster_statistics.read_jsonl", "open", "ujson.dump", "collections.defaultdict", "ut_scores.items", "collections.defaultdict"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--scores_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--tweets_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "scores_path", "=", "args", ".", "scores_path", "\n", "tweets_path", "=", "args", ".", "tweets_path", "\n", "output_path", "=", "args", ".", "output_path", "\n", "\n", "print", "(", "'loading scores...'", ")", "\n", "with", "open", "(", "scores_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "scores", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "'loading clusters...'", ")", "\n", "with", "open", "(", "input_path", ",", "'rb'", ")", "as", "f", ":", "\n", "# [cluster_id]['users'] -> list[user_ids]", "\n", "# [cluster_id]['centroid'] -> list[float]", "\n", "\t\t", "clusters", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "'collecting users for each cluster'", ")", "\n", "user_cluster", "=", "{", "}", "\n", "for", "cluster_id", ",", "cluster", "in", "clusters", ".", "items", "(", ")", ":", "\n", "\t\t", "c_users", "=", "cluster", "[", "'users'", "]", "\n", "for", "user_id", "in", "c_users", ":", "\n", "\t\t\t", "user_cluster", "[", "user_id", "]", "=", "cluster_id", "\n", "\n", "", "", "cluster_frame_stances", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", ")", "\n", "print", "(", "'collecting tweets for each user...'", ")", "\n", "for", "tweet", "in", "tqdm", "(", "read_jsonl", "(", "tweets_path", ")", ",", "total", "=", "8161354", ")", ":", "\n", "\t\t", "user_id", "=", "tweet", "[", "'author_id'", "]", "\n", "tweet_id", "=", "tweet", "[", "'id'", "]", "\n", "if", "user_id", "not", "in", "user_cluster", ":", "\n", "\t\t\t", "continue", "\n", "", "user_cluster_id", "=", "user_cluster", "[", "user_id", "]", "\n", "if", "user_id", "in", "scores", ":", "\n", "\t\t\t", "u_scores", "=", "scores", "[", "user_id", "]", "\n", "if", "tweet_id", "in", "u_scores", ":", "\n", "\t\t\t\t", "ut_scores", "=", "u_scores", "[", "tweet_id", "]", "\n", "for", "f_id", ",", "f_score", "in", "ut_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t\t\t", "f_stance", "=", "'Accept'", "\n", "if", "f_score", "<", "0", ":", "\n", "\t\t\t\t\t\t", "f_stance", "=", "'Reject'", "\n", "", "cluster_frame_stances", "[", "user_cluster_id", "]", "[", "f_id", "]", "[", "f_stance", "]", "+=", "1", "\n", "\n", "", "", "", "", "print", "(", "f'saving stats...'", ")", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "cluster_frame_stances", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.evaluate_clusters.jaccard_coefficient": [[13, 15], ["None"], "function", ["None"], ["def", "jaccard_coefficient", "(", "tp", ",", "tn", ",", "fp", ",", "fn", ")", ":", "\n", "\t", "return", "tp", "/", "(", "tp", "+", "fn", "+", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.evaluate_clusters.rand_index": [[17, 19], ["None"], "function", ["None"], ["", "def", "rand_index", "(", "tp", ",", "tn", ",", "fp", ",", "fn", ")", ":", "\n", "\t", "return", "(", "tp", "+", "tn", ")", "/", "(", "tp", "+", "tn", "+", "fp", "+", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.evaluate_clusters.fowlkes_mallow_index": [[21, 23], ["math.sqrt"], "function", ["None"], ["", "def", "fowlkes_mallow_index", "(", "tp", ",", "tn", ",", "fp", ",", "fn", ")", ":", "\n", "\t", "return", "tp", "/", "math", ".", "sqrt", "(", "(", "tp", "+", "fn", ")", "*", "(", "tp", "+", "fp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.evaluate_clusters.main": [[25, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pandas.read_excel", "df.set_index.set_index", "df.set_index.index.map", "df[].apply", "len", "evaluate_clusters.jaccard_coefficient", "evaluate_clusters.rand_index", "evaluate_clusters.fowlkes_mallow_index", "print", "print", "print", "print", "print", "print", "print", "open", "ujson.load", "df[].notna"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.evaluate_clusters.jaccard_coefficient", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.evaluate_clusters.rand_index", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.evaluate_clusters.fowlkes_mallow_index"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--label_path'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "label_path", "=", "args", ".", "label_path", "\n", "\n", "df", "=", "pd", ".", "read_excel", "(", "\n", "input_path", ",", "\n", "engine", "=", "'openpyxl'", "\n", ")", "\n", "df", "=", "df", ".", "set_index", "(", "'sample_id'", ")", "\n", "\n", "with", "open", "(", "label_path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "labels", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "df", "[", "'label'", "]", "=", "df", ".", "index", ".", "map", "(", "labels", ")", "\n", "\n", "df", "=", "df", "[", "df", "[", "'Cluster'", "]", ".", "notna", "(", ")", "]", "\n", "df", "[", "'judgement'", "]", "=", "df", "[", "'Cluster'", "]", ".", "apply", "(", "lambda", "x", ":", "1", "if", "x", "==", "'Same'", "else", "0", ")", "\n", "\n", "df", "[", "'correct'", "]", "=", "df", "[", "'judgement'", "]", "==", "df", "[", "'label'", "]", "\n", "df", "[", "'incorrect'", "]", "=", "df", "[", "'judgement'", "]", "!=", "df", "[", "'label'", "]", "\n", "total_count", "=", "len", "(", "df", ")", "\n", "tp", "=", "(", "df", "[", "'correct'", "]", "&", "(", "df", "[", "'judgement'", "]", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "tn", "=", "(", "df", "[", "'correct'", "]", "&", "(", "df", "[", "'judgement'", "]", "==", "0", ")", ")", ".", "sum", "(", ")", "\n", "fp", "=", "(", "df", "[", "'incorrect'", "]", "&", "(", "df", "[", "'label'", "]", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "fn", "=", "(", "df", "[", "'incorrect'", "]", "&", "(", "df", "[", "'label'", "]", "==", "0", ")", ")", ".", "sum", "(", ")", "\n", "jc", "=", "jaccard_coefficient", "(", "tp", ",", "tn", ",", "fp", ",", "fn", ")", "\n", "ri", "=", "rand_index", "(", "tp", ",", "tn", ",", "fp", ",", "fn", ")", "\n", "fmi", "=", "fowlkes_mallow_index", "(", "tp", ",", "tn", ",", "fp", ",", "fn", ")", "\n", "p", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "r", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "print", "(", "f'jaccard_coefficient={jc:.3f}'", ")", "\n", "print", "(", "f'rand_index={ri:.3f}'", ")", "\n", "print", "(", "f'fowlkes_mallow_index={fmi:.3f}'", ")", "\n", "print", "(", "f'precision={p:.3f}'", ")", "\n", "print", "(", "f'recall={r:.3f}'", ")", "\n", "\n", "# identified as similar and same cluster", "\n", "# tp", "\n", "\n", "# identified as similar but not the same cluster", "\n", "# fn", "\n", "# identified as different and same different", "\n", "# tn", "\n", "# identified as different but not different cluster", "\n", "# fp", "\n", "\n", "sim_same", "=", "(", "(", "df", "[", "'judgement'", "]", "==", "1", ")", "&", "(", "df", "[", "'label'", "]", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "sim_diff", "=", "(", "(", "df", "[", "'judgement'", "]", "==", "1", ")", "&", "(", "df", "[", "'label'", "]", "==", "0", ")", ")", ".", "sum", "(", ")", "\n", "print", "(", "f'SAME: {sim_same}/{sim_diff}'", ")", "\n", "diff_diff", "=", "(", "(", "df", "[", "'judgement'", "]", "==", "0", ")", "&", "(", "df", "[", "'label'", "]", "==", "0", ")", ")", ".", "sum", "(", ")", "\n", "diff_same", "=", "(", "(", "df", "[", "'judgement'", "]", "==", "0", ")", "&", "(", "df", "[", "'label'", "]", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "print", "(", "f'DIFF: {diff_diff}/{diff_same}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.profile_cluster.dist": [[10, 13], ["numpy.linalg.norm"], "function", ["None"], ["def", "dist", "(", "a", ",", "b", ")", ":", "\n", "\t", "a_b", "=", "np", ".", "linalg", ".", "norm", "(", "a", "-", "b", ",", "axis", "=", "-", "1", ")", "\n", "return", "a_b", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.profile_cluster.cluster_kmeans": [[15, 44], ["sklearn.cluster.KMeans", "model.fit.fit", "collections.defaultdict", "zip", "collections.defaultdict.items", "cluster_users[].append", "profile_cluster.dist", "numpy.mean", "enumerate", "float", "cluster_centroid.tolist"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.collect_cluster_users.dist"], ["", "def", "cluster_kmeans", "(", "user_ids", ",", "user_vecs", ",", "num_clusters", ")", ":", "\n", "\t", "model", "=", "KMeans", "(", "\n", "n_clusters", "=", "num_clusters", ",", "\n", "random_state", "=", "0", ",", "\n", "n_init", "=", "20", ",", "\n", "verbose", "=", "0", "\n", ")", "\n", "\n", "model", "=", "model", ".", "fit", "(", "user_vecs", ")", "\n", "centroids", "=", "model", ".", "cluster_centers_", "\n", "cluster_users", "=", "defaultdict", "(", "list", ")", "\n", "clusters", "=", "{", "}", "\n", "for", "user_id", ",", "cluster_id", "in", "zip", "(", "user_ids", ",", "model", ".", "labels_", ")", ":", "\n", "\t\t", "cluster_users", "[", "cluster_id", "]", ".", "append", "(", "user_id", ")", "\n", "\n", "", "user_lookup", "=", "{", "user_id", ":", "idx", "for", "(", "idx", ",", "user_id", ")", "in", "enumerate", "(", "user_ids", ")", "}", "\n", "for", "cluster_id", ",", "cluster_users", "in", "cluster_users", ".", "items", "(", ")", ":", "\n", "\t\t", "cluster_centroid", "=", "centroids", "[", "cluster_id", "]", "\n", "cluster_user_idxs", "=", "[", "user_lookup", "[", "user_id", "]", "for", "user_id", "in", "cluster_users", "]", "\n", "c_user_vecs", "=", "user_vecs", "[", "cluster_user_idxs", "]", "\n", "user_dist", "=", "dist", "(", "cluster_centroid", ",", "c_user_vecs", ")", "\n", "avg_dist", "=", "np", ".", "mean", "(", "user_dist", ")", "\n", "\n", "clusters", "[", "cluster_id", "]", "=", "{", "\n", "'dist'", ":", "float", "(", "avg_dist", ")", ",", "\n", "'users'", ":", "cluster_users", ",", "\n", "'centroid'", ":", "cluster_centroid", ".", "tolist", "(", ")", "\n", "}", "\n", "", "return", "clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.profile_cluster.main": [[46, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "profile_cluster.cluster_kmeans", "cluster_kmeans.items", "print", "open", "pickle.load", "print", "open", "pickle.dump", "len"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.profile_cluster.cluster_kmeans"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--num_clusters'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "output_path", "=", "args", ".", "output_path", "\n", "num_clusters", "=", "args", ".", "num_clusters", "\n", "\n", "print", "(", "'collecting user vectors...'", ")", "\n", "with", "open", "(", "input_path", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "profiles", "=", "pickle", ".", "load", "(", "f", ")", "\n", "user_ids", "=", "profiles", "[", "'users'", "]", "\n", "user_vecs", "=", "profiles", "[", "'matrix'", "]", "\n", "\n", "", "print", "(", "user_vecs", ".", "shape", ")", "\n", "print", "(", "'clustering...'", ")", "\n", "clusters", "=", "cluster_kmeans", "(", "user_ids", ",", "user_vecs", ",", "num_clusters", ")", "\n", "\n", "for", "cluster_id", ",", "cluster", "in", "clusters", ".", "items", "(", ")", ":", "\n", "\t\t", "print", "(", "f'{cluster_id}: {len(cluster[\"users\"])}'", ")", "\n", "\n", "", "print", "(", "'saving clusters...'", ")", "\n", "with", "open", "(", "output_path", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "clusters", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.create_user_text": [[13, 22], ["textwrap.wrap", "lines.append", "lines.append"], "function", ["None"], ["def", "create_user_text", "(", "u_tweets", ")", ":", "\n", "\t", "u_info", "=", "u_tweets", "[", "0", "]", "[", "'author'", "]", "\n", "lines", "=", "[", "f'@{u_info[\"username\"]}'", "]", "\n", "for", "tweet", "in", "u_tweets", ":", "\n", "\t\t", "tweet_text", "=", "tweet", "[", "'full_text'", "]", "if", "'full_text'", "in", "tweet", "else", "tweet", "[", "'text'", "]", "\n", "for", "line", "in", "wrap", "(", "tweet_text", ",", "50", ")", ":", "\n", "\t\t\t", "lines", ".", "append", "(", "f'    {line}'", ")", "\n", "", "lines", ".", "append", "(", "f'  ----'", ")", "\n", "", "return", "'\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.sample_from_pop": [[24, 44], ["len", "frozenset", "samples.append", "random.sample", "random.sample", "sample_pairs.create_user_text", "sample_pairs.create_user_text"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.create_user_text", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.create_user_text"], ["", "def", "sample_from_pop", "(", "pos_pop", ",", "sample_pop", ",", "seen_sample_ids", ",", "num_samples", ")", ":", "\n", "\t", "samples", "=", "[", "]", "\n", "while", "len", "(", "samples", ")", "<", "num_samples", ":", "\n", "\t\t", "pos_user", "=", "random", ".", "sample", "(", "pos_pop", ",", "1", ")", "[", "0", "]", "\n", "pos_user_id", "=", "pos_user", "[", "'user_id'", "]", "\n", "pos_user_tweets", "=", "pos_user", "[", "'tweets'", "]", "\n", "neg_user", "=", "random", ".", "sample", "(", "sample_pop", ",", "1", ")", "[", "0", "]", "\n", "neg_user_id", "=", "neg_user", "[", "'user_id'", "]", "\n", "neg_user_tweets", "=", "neg_user", "[", "'tweets'", "]", "\n", "sample_id", "=", "frozenset", "(", "[", "pos_user_id", ",", "neg_user_id", "]", ")", "\n", "if", "sample_id", "in", "seen_sample_ids", "or", "pos_user_id", "==", "neg_user_id", ":", "\n", "\t\t\t", "continue", "\n", "", "samples", ".", "append", "(", "{", "\n", "'sample_id'", ":", "f'{pos_user_id}|{neg_user_id}'", ",", "\n", "'user_a_id'", ":", "pos_user_id", ",", "\n", "'user_b_id'", ":", "neg_user_id", ",", "\n", "'user_a'", ":", "create_user_text", "(", "pos_user_tweets", ")", ",", "\n", "'user_b'", ":", "create_user_text", "(", "neg_user_tweets", ")", "\n", "}", ")", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.create_excel": [[46, 116], ["labels.copy.copy", "zip", "zip", "pandas.DataFrame", "df.set_index.fillna", "df.set_index.set_index", "len", "pandas.DataFrame", "pandas.ExcelWriter", "df.set_index.to_excel", "pd.DataFrame.to_excel", "labels.copy.items", "workbook.add_format", "workbook.add_format.set_text_wrap", "column_types.items", "pd.ExcelWriter.save", "list", "list.append", "worksheet.data_validation", "data[].keys", "column_name.endswith", "worksheet.set_column", "labels.copy.items", "worksheet.set_column", "worksheet.set_column", "len"], "function", ["None"], ["", "def", "create_excel", "(", "data", ",", "output_path", ",", "columns", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\t", "labels", "=", "labels", ".", "copy", "(", ")", "\n", "if", "columns", "is", "None", ":", "\n", "\t\t", "columns", "=", "list", "(", "data", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "", "column_types", "=", "{", "}", "\n", "for", "label_letter", ",", "label_name", "in", "zip", "(", "string", ".", "ascii_uppercase", ",", "labels", ")", ":", "\n", "\t\t", "columns", ".", "append", "(", "label_name", ")", "\n", "labels", "[", "label_name", "]", "[", "'label_letter'", "]", "=", "label_letter", "\n", "# TODO support more than A-Z columns", "\n", "", "for", "column_letter", ",", "column_name", "in", "zip", "(", "string", ".", "ascii_uppercase", ",", "columns", ")", ":", "\n", "\t\t", "if", "column_name", "==", "'id'", "or", "column_name", ".", "endswith", "(", "'_id'", ")", ":", "\n", "\t\t\t", "column_types", "[", "column_letter", "]", "=", "'id'", "\n", "", "elif", "column_name", "in", "labels", ":", "\n", "\t\t\t", "labels", "[", "column_name", "]", "[", "'data_letter'", "]", "=", "column_letter", "\n", "column_types", "[", "column_letter", "]", "=", "'label'", "\n", "", "else", ":", "\n", "\t\t\t", "column_types", "[", "column_letter", "]", "=", "'text'", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "\n", "data", "=", "data", ",", "\n", "columns", "=", "columns", "\n", ")", "\n", "df", "=", "df", ".", "fillna", "(", "''", ")", "\n", "df", "=", "df", ".", "set_index", "(", "columns", "[", "0", "]", ")", "\n", "data_size", "=", "len", "(", "df", ")", "\n", "l_df", "=", "pd", ".", "DataFrame", "(", "{", "\n", "l_name", ":", "l", "[", "'values'", "]", "for", "l_name", ",", "l", "in", "labels", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "writer", "=", "pd", ".", "ExcelWriter", "(", "output_path", ",", "engine", "=", "'xlsxwriter'", ")", "\n", "df", ".", "to_excel", "(", "writer", ",", "sheet_name", "=", "'data'", ")", "\n", "l_df", ".", "to_excel", "(", "writer", ",", "sheet_name", "=", "'labels'", ",", "index", "=", "False", ")", "\n", "workbook", "=", "writer", ".", "book", "\n", "worksheet", "=", "writer", ".", "sheets", "[", "'data'", "]", "\n", "for", "label_name", ",", "label", "in", "labels", ".", "items", "(", ")", ":", "\n", "\t\t", "data_letter", "=", "label", "[", "'data_letter'", "]", "\n", "label_letter", "=", "label", "[", "'label_letter'", "]", "\n", "label_values", "=", "label", "[", "'values'", "]", "\n", "label_message", "=", "label", "[", "'message'", "]", "\n", "worksheet", ".", "data_validation", "(", "\n", "f'{data_letter}2:{data_letter}{data_size+1}'", ",", "\n", "{", "\n", "'validate'", ":", "'list'", ",", "\n", "'source'", ":", "f'=labels!${label_letter}$2:${label_letter}${len(label_values)+1}'", ",", "\n", "'input_message'", ":", "label_message", "\n", "}", "\n", ")", "\n", "", "cell_format", "=", "workbook", ".", "add_format", "(", ")", "\n", "cell_format", ".", "set_text_wrap", "(", ")", "\n", "for", "column_letter", ",", "column_type", "in", "column_types", ".", "items", "(", ")", ":", "\n", "\t\t", "column_range", "=", "f'{column_letter}:{column_letter}'", "\n", "# first_col, last_col, width, cell_format, options", "\n", "if", "column_type", "==", "'id'", ":", "\n", "\t\t\t", "worksheet", ".", "set_column", "(", "\n", "column_range", ",", "\n", "options", "=", "{", "'hidden'", ":", "True", "}", "\n", ")", "\n", "", "elif", "column_type", "==", "'text'", ":", "\n", "\t\t\t", "worksheet", ".", "set_column", "(", "\n", "column_range", ",", "\n", "cell_format", "=", "cell_format", ",", "\n", "width", "=", "55", "\n", ")", "\n", "", "elif", "column_type", "==", "'label'", ":", "\n", "\t\t\t", "worksheet", ".", "set_column", "(", "\n", "column_range", ",", "\n", "width", "=", "15", "\n", ")", "\n", "\n", "", "", "writer", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.main": [[118, 170], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.seed", "list", "collections.defaultdict", "set", "random.shuffle", "sample_pairs.create_excel", "open", "pickle.load", "pickle.load.keys", "pickle.load.items", "sample_pairs.sample_from_pop", "samples.extend", "sample_pairs.sample_from_pop", "samples.extend", "open", "ujson.dump", "negative_samples[].extend"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.create_excel", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.sample_from_pop", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.sample_pairs.sample_from_pop"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--samples_per_cluster'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--label_path'", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "input_path", "=", "args", ".", "input_path", "\n", "samples_per_cluster", "=", "args", ".", "samples_per_cluster", "\n", "output_path", "=", "args", ".", "output_path", "\n", "label_path", "=", "args", ".", "label_path", "\n", "\n", "with", "open", "(", "input_path", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "cluster_samples", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "cluster_ids", "=", "list", "(", "cluster_samples", ".", "keys", "(", ")", ")", "\n", "negative_samples", "=", "defaultdict", "(", "list", ")", "\n", "for", "cluster_a_id", "in", "cluster_ids", ":", "\n", "\t\t", "for", "cluster_b_id", ",", "cluster_s", "in", "cluster_samples", ".", "items", "(", ")", ":", "\n", "\t\t\t", "if", "cluster_a_id", "==", "cluster_b_id", ":", "\n", "\t\t\t\t", "continue", "\n", "", "negative_samples", "[", "cluster_a_id", "]", ".", "extend", "(", "cluster_s", ")", "\n", "\n", "", "", "seen_sample_ids", "=", "set", "(", ")", "\n", "labels", "=", "{", "}", "\n", "samples", "=", "[", "]", "\n", "for", "cluster_a_id", "in", "cluster_ids", ":", "\n", "\t\t", "pos_pop", "=", "cluster_samples", "[", "cluster_a_id", "]", "\n", "neg_pop", "=", "negative_samples", "[", "cluster_a_id", "]", "\n", "pos_samples", "=", "sample_from_pop", "(", "pos_pop", ",", "pos_pop", ",", "seen_sample_ids", ",", "samples_per_cluster", ")", "\n", "for", "ps", "in", "pos_samples", ":", "\n", "\t\t\t", "labels", "[", "ps", "[", "'sample_id'", "]", "]", "=", "1", "\n", "", "samples", ".", "extend", "(", "pos_samples", ")", "\n", "neg_samples", "=", "sample_from_pop", "(", "pos_pop", ",", "neg_pop", ",", "seen_sample_ids", ",", "samples_per_cluster", ")", "\n", "for", "ns", "in", "neg_samples", ":", "\n", "\t\t\t", "labels", "[", "ns", "[", "'sample_id'", "]", "]", "=", "0", "\n", "", "samples", ".", "extend", "(", "neg_samples", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "samples", ")", "\n", "create_excel", "(", "\n", "samples", ",", "\n", "output_path", ",", "\n", "labels", "=", "{", "\n", "'Cluster'", ":", "{", "\n", "'values'", ":", "[", "'Same'", ",", "'Different'", "]", ",", "\n", "'message'", ":", "'Identify if the two users are from the same or different cluster: '", "\n", "}", "\n", "}", "\n", ")", "\n", "\n", "with", "open", "(", "label_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "labels", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.analyze_cluster.sim": [[9, 12], ["numpy.linalg.norm"], "function", ["None"], ["def", "sim", "(", "a", ",", "b", ")", ":", "\n", "\t", "a_b", "=", "-", "np", ".", "linalg", ".", "norm", "(", "a", "-", "b", ",", "axis", "=", "-", "1", ")", "\n", "return", "a_b", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.analyze_cluster.main": [[14, 94], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "sorted", "open", "ujson.load", "open", "pickle.load", "open", "pickle.load", "pickle.load.items", "print", "idx2txt.items", "tax_info.items", "print", "[].split", "print", "sorted", "t2idx.items", "idx2t.items", "enumerate", "len", "abs", "tax_info[].append", "print", "len", "tax_name.title.title", "abs", "len", "tax_name.title.title"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--theme_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-u'", ",", "'--user_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-th'", ",", "'--threshold'", ",", "default", "=", "0.05", ",", "type", "=", "float", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "theme_path", "=", "args", ".", "theme_path", "\n", "user_path", "=", "args", ".", "user_path", "\n", "threshold", "=", "args", ".", "threshold", "\n", "\n", "with", "open", "(", "theme_path", ")", "as", "f", ":", "\n", "# ['idx'][theme_id] -> idx", "\n", "# ['text'][theme_id] -> text", "\n", "\t\t", "themes", "=", "json", ".", "load", "(", "f", ")", "\n", "t2idx", "=", "themes", "[", "'idx'", "]", "\n", "t2text", "=", "themes", "[", "'text'", "]", "\n", "idx2t", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "t2idx", ".", "items", "(", ")", "}", "\n", "idx2txt", "=", "{", "k", ":", "t2text", "[", "v", "]", "for", "k", ",", "v", "in", "idx2t", ".", "items", "(", ")", "}", "\n", "\n", "", "print", "(", "'collecting user vectors...'", ")", "\n", "with", "open", "(", "user_path", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "profiles", "=", "pickle", ".", "load", "(", "f", ")", "\n", "user_ids", "=", "profiles", "[", "'users'", "]", "\n", "user_vecs", "=", "profiles", "[", "'matrix'", "]", "\n", "user_lookup", "=", "{", "user_id", ":", "idx", "for", "(", "idx", ",", "user_id", ")", "in", "enumerate", "(", "user_ids", ")", "}", "\n", "\n", "", "print", "(", "user_vecs", ".", "shape", ")", "\n", "print", "(", "'loading clusters...'", ")", "\n", "with", "open", "(", "input_path", ",", "'rb'", ")", "as", "f", ":", "\n", "# [cluster_id]['users'] -> list[user_ids]", "\n", "# [cluster_id]['centroid'] -> list[float]", "\n", "\t\t", "clusters", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "total_users", "=", "user_vecs", ".", "shape", "[", "0", "]", "\n", "for", "cluster_id", ",", "cluster", "in", "sorted", "(", "clusters", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", "[", "'users'", "]", ")", ",", "reverse", "=", "True", ")", ":", "\n", "\t\t", "c_users", "=", "cluster", "[", "'users'", "]", "\n", "c_centroid", "=", "cluster", "[", "'centroid'", "]", "\n", "c_avg_centroid_dist", "=", "cluster", "[", "'dist'", "]", "\n", "\n", "print", "(", "\n", "f'Cluster {cluster_id}: {len(c_users):,} '", "\n", "f'users ({100 * len(c_users) / total_users:.0f}%) '", "\n", "f'{c_avg_centroid_dist:.3f} avg centroid distance'", "\n", ")", "\n", "tax_info", "=", "{", "}", "\n", "current_tax", "=", "None", "\n", "for", "t_idx", ",", "t_text", "in", "idx2txt", ".", "items", "(", ")", ":", "\n", "\t\t\t", "t_score", "=", "c_centroid", "[", "t_idx", "]", "\n", "tax_name", ",", "tax_theme", "=", "idx2t", "[", "t_idx", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "tax_name", "=", "tax_name", "[", "1", ":", "-", "1", "]", "\n", "if", "tax_name", "==", "'literacy'", ":", "\n", "\t\t\t\t", "if", "t_text", "==", "'+'", ":", "\n", "\t\t\t\t\t", "t_text", "=", "'Having literacy'", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "t_text", "=", "'Lacking literacy'", "\n", "", "", "elif", "tax_name", "==", "'civil_rights'", ":", "\n", "\t\t\t\t", "tax_name", "=", "'Civil rights'", "\n", "if", "t_text", "==", "'+'", ":", "\n", "\t\t\t\t\t", "t_text", "=", "'Vaccines more important than civil rights'", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "t_text", "=", "'Civil rights above all'", "\n", "", "", "elif", "tax_name", "==", "'trust+'", ":", "\n", "\t\t\t\t", "tax_name", "=", "'Building trust'", "\n", "", "elif", "tax_name", "==", "'trust-'", ":", "\n", "\t\t\t\t", "tax_name", "=", "'Eroding trust'", "\n", "", "if", "abs", "(", "t_score", ")", ">=", "threshold", ":", "\n", "\t\t\t\t", "if", "current_tax", "!=", "tax_name", ":", "\n", "\t\t\t\t\t", "current_tax", "=", "tax_name", "\n", "tax_name", "=", "tax_name", ".", "title", "(", ")", "\n", "# print(f'  {tax_name} Taxonomy')", "\n", "tax_info", "[", "f'  {tax_name} Taxonomy'", "]", "=", "[", "]", "\n", "", "tax_info", "[", "f'  {tax_name.title()} Taxonomy'", "]", ".", "append", "(", "(", "abs", "(", "t_score", ")", ",", "f'    {t_score:+.2f}: {t_text}'", ")", ")", "\n", "", "", "for", "tax", ",", "tax_s", "in", "tax_info", ".", "items", "(", ")", ":", "\n", "\t\t\t", "print", "(", "tax", ")", "\n", "for", "_", ",", "s_line", "in", "sorted", "(", "tax_s", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", ":", "\n", "\t\t\t\t", "print", "(", "s_line", ")", "\n", "", "", "print", "(", "'-------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.collect_cluster_users.dist": [[10, 13], ["numpy.linalg.norm"], "function", ["None"], ["def", "dist", "(", "a", ",", "b", ")", ":", "\n", "\t", "a_b", "=", "np", ".", "linalg", ".", "norm", "(", "a", "-", "b", ",", "axis", "=", "-", "1", ")", "\n", "return", "a_b", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.collect_cluster_users.read_jsonl": [[15, 22], ["open", "line.strip.strip", "ujson.loads"], "function", ["None"], ["", "def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.collect_cluster_users.main": [[24, 102], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "collections.defaultdict", "tqdm.tqdm", "print", "print", "print", "collections.defaultdict", "set", "sorted", "print", "collections.defaultdict", "tqdm.tqdm", "collections.defaultdict", "collections.defaultdict.items", "print", "collect_cluster_users.read_jsonl", "open", "pickle.load", "open", "pickle.load", "pickle.load.items", "numpy.array", "collect_cluster_users.dist", "collect_cluster_users.read_jsonl", "open", "pickle.dump", "numpy.argsort", "cluster_samples[].append", "set.add", "users[].append", "cluster_users[].append", "enumerate", "len", "len"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.collect_cluster_users.dist", "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-u'", ",", "'--user_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--tweets_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--num_samples'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-mt'", ",", "'--max_tweets'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "user_path", "=", "args", ".", "user_path", "\n", "tweets_path", "=", "args", ".", "tweets_path", "\n", "output_path", "=", "args", ".", "output_path", "\n", "num_samples", "=", "args", ".", "num_samples", "\n", "max_tweets", "=", "args", ".", "max_tweets", "\n", "\n", "print", "(", "'counting tweets for each user...'", ")", "\n", "uc", "=", "defaultdict", "(", "int", ")", "\n", "for", "tweet", "in", "tqdm", "(", "read_jsonl", "(", "tweets_path", ")", ",", "total", "=", "8161354", ")", ":", "\n", "\t\t", "user_id", "=", "tweet", "[", "'author_id'", "]", "\n", "uc", "[", "user_id", "]", "+=", "1", "\n", "\n", "", "print", "(", "'collecting user vectors...'", ")", "\n", "with", "open", "(", "user_path", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "profiles", "=", "pickle", ".", "load", "(", "f", ")", "\n", "user_ids", "=", "profiles", "[", "'users'", "]", "\n", "user_vecs", "=", "profiles", "[", "'matrix'", "]", "\n", "user_lookup", "=", "{", "user_id", ":", "idx", "for", "(", "idx", ",", "user_id", ")", "in", "enumerate", "(", "user_ids", ")", "}", "\n", "\n", "", "print", "(", "'loading clusters...'", ")", "\n", "with", "open", "(", "input_path", ",", "'rb'", ")", "as", "f", ":", "\n", "# [cluster_id]['users'] -> list[user_ids]", "\n", "# [cluster_id]['centroid'] -> list[float]", "\n", "\t\t", "clusters", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "'collecting users for each cluster'", ")", "\n", "cluster_samples", "=", "defaultdict", "(", "list", ")", "\n", "keep_users", "=", "set", "(", ")", "\n", "for", "cluster_id", ",", "cluster", "in", "sorted", "(", "clusters", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", "[", "'users'", "]", ")", ",", "reverse", "=", "True", ")", ":", "\n", "\t\t", "c_users", "=", "cluster", "[", "'users'", "]", "\n", "c_centroid", "=", "np", ".", "array", "(", "cluster", "[", "'centroid'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cluster_user_idxs", "=", "[", "user_lookup", "[", "user_id", "]", "for", "user_id", "in", "c_users", "]", "\n", "c_user_vecs", "=", "user_vecs", "[", "cluster_user_idxs", "]", "\n", "user_dists", "=", "dist", "(", "c_centroid", ",", "c_user_vecs", ")", "\n", "# ind = np.argpartition(user_dists, -num_samples)[-num_samples:]", "\n", "# ind = ind[np.argsort(user_dists[ind])[::-1]]", "\n", "ind", "=", "np", ".", "argsort", "(", "user_dists", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "user_index", "in", "ind", ":", "\n", "\t\t\t", "sample_user_id", "=", "c_users", "[", "user_index", "]", "\n", "if", "uc", "[", "sample_user_id", "]", ">", "max_tweets", ":", "\n", "\t\t\t\t", "continue", "\n", "", "cluster_samples", "[", "cluster_id", "]", ".", "append", "(", "\n", "sample_user_id", "\n", ")", "\n", "keep_users", ".", "add", "(", "sample_user_id", ")", "\n", "if", "len", "(", "cluster_samples", "[", "cluster_id", "]", ")", ">=", "num_samples", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "", "", "print", "(", "'collecting tweets for each user...'", ")", "\n", "users", "=", "defaultdict", "(", "list", ")", "\n", "for", "tweet", "in", "tqdm", "(", "read_jsonl", "(", "tweets_path", ")", ",", "total", "=", "8161354", ")", ":", "\n", "\t\t", "user_id", "=", "tweet", "[", "'author_id'", "]", "\n", "if", "user_id", "in", "keep_users", ":", "\n", "\t\t\t", "users", "[", "user_id", "]", ".", "append", "(", "tweet", ")", "\n", "\n", "", "", "cluster_users", "=", "defaultdict", "(", "list", ")", "\n", "for", "cluster_id", ",", "sample_users", "in", "cluster_samples", ".", "items", "(", ")", ":", "\n", "\t\t", "for", "user_id", "in", "sample_users", ":", "\n", "\t\t\t", "cluster_users", "[", "cluster_id", "]", ".", "append", "(", "\n", "{", "\n", "'user_id'", ":", "user_id", ",", "\n", "'tweets'", ":", "users", "[", "user_id", "]", "\n", "}", "\n", ")", "\n", "", "", "print", "(", "f'saving users...'", ")", "\n", "with", "open", "(", "output_path", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "cluster_users", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl": [[10, 17], ["open", "line.strip.strip", "ujson.loads"], "function", ["None"], ["def", "read_jsonl", "(", "path", ")", ":", "\n", "\t", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "for", "line", "in", "f", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "\t\t\t\t", "ex", "=", "json", ".", "loads", "(", "line", ")", "\n", "yield", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.main": [[19, 95], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "tqdm.tqdm", "print", "set", "set", "set", "collections.defaultdict", "collections.defaultdict", "len", "tqdm.tqdm", "numpy.array", "numpy.median", "numpy.mean", "numpy.percentile", "numpy.percentile", "numpy.percentile", "numpy.min", "numpy.max", "numpy.array", "numpy.median", "numpy.mean", "numpy.min", "numpy.max", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "stance_merge.read_jsonl", "open", "ujson.load", "json.load.items", "set.add", "f_scores.items", "open", "ujson.dump", "collections.defaultdict", "float", "float", "set.add", "set.add", "len", "collections.defaultdict.items", "collections.defaultdict.items", "collections.defaultdict.items", "collections.defaultdict.items", "len", "len", "len", "int", "int", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.stance.stance_merge.read_jsonl"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--tweet_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_path'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--threshold'", ",", "default", "=", "0.28", ",", "type", "=", "float", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_path", "=", "args", ".", "input_path", "\n", "output_path", "=", "args", ".", "output_path", "\n", "tweet_path", "=", "args", ".", "tweet_path", "\n", "threshold", "=", "args", ".", "threshold", "\n", "user_lookup", "=", "{", "}", "\n", "print", "(", "'building tweet-user index'", ")", "\n", "for", "tweet", "in", "tqdm", "(", "read_jsonl", "(", "tweet_path", ")", ",", "total", "=", "8161354", ")", ":", "\n", "\t\t", "user_lookup", "[", "tweet", "[", "'id'", "]", "]", "=", "tweet", "[", "'author_id'", "]", "\n", "\n", "", "with", "open", "(", "input_path", ")", "as", "f", ":", "\n", "\t\t", "scores", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "'collecting tweet-frame scores'", ")", "\n", "tweets_kept", "=", "set", "(", ")", "\n", "users_kept", "=", "set", "(", ")", "\n", "users_seen", "=", "set", "(", ")", "\n", "frame_count", "=", "defaultdict", "(", "int", ")", "\n", "keep_scores", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "dict", ")", ")", "\n", "tweet_count", "=", "len", "(", "scores", ")", "\n", "for", "tweet_id", ",", "f_scores", "in", "tqdm", "(", "scores", ".", "items", "(", ")", ")", ":", "\n", "\t\t", "user_id", "=", "user_lookup", "[", "tweet_id", "]", "\n", "users_seen", ".", "add", "(", "user_id", ")", "\n", "for", "f_id", ",", "fs_scores", "in", "f_scores", ".", "items", "(", ")", ":", "\n", "\t\t\t", "not_rel_score", ",", "accept_score", ",", "reject_score", "=", "fs_scores", "\n", "if", "accept_score", ">", "threshold", "or", "reject_score", ">", "threshold", ":", "\n", "\t\t\t\t", "s_score", "=", "accept_score", "\n", "if", "accept_score", "<", "reject_score", ":", "\n", "\t\t\t\t\t", "s_score", "=", "-", "reject_score", "\n", "", "keep_scores", "[", "user_id", "]", "[", "tweet_id", "]", "[", "f_id", "]", "=", "s_score", "\n", "tweets_kept", ".", "add", "(", "tweet_id", ")", "\n", "users_kept", ".", "add", "(", "user_id", ")", "\n", "frame_count", "[", "f_id", "]", "+=", "1", "\n", "\n", "", "", "", "user_counts", "=", "np", ".", "array", "(", "[", "float", "(", "len", "(", "v", ")", ")", "for", "k", ",", "v", "in", "keep_scores", ".", "items", "(", ")", "]", ")", "\n", "med_uc", "=", "np", ".", "median", "(", "user_counts", ")", "\n", "mean_uc", "=", "np", ".", "mean", "(", "user_counts", ")", "\n", "percentile_95_uc", "=", "np", ".", "percentile", "(", "user_counts", ",", "95", ")", "\n", "percentile_80_uc", "=", "np", ".", "percentile", "(", "user_counts", ",", "80", ")", "\n", "percentile_75_uc", "=", "np", ".", "percentile", "(", "user_counts", ",", "75", ")", "\n", "min_uc", "=", "np", ".", "min", "(", "user_counts", ")", "\n", "max_uc", "=", "np", ".", "max", "(", "user_counts", ")", "\n", "f_counts", "=", "np", ".", "array", "(", "[", "float", "(", "v", ")", "for", "k", ",", "v", "in", "frame_count", ".", "items", "(", ")", "]", ")", "\n", "med_fc", "=", "np", ".", "median", "(", "f_counts", ")", "\n", "mean_fc", "=", "np", ".", "mean", "(", "f_counts", ")", "\n", "min_fc", "=", "np", ".", "min", "(", "f_counts", ")", "\n", "min_f", "=", "[", "k", "for", "k", ",", "v", "in", "frame_count", ".", "items", "(", ")", "if", "v", "==", "int", "(", "min_fc", ")", "]", "[", "0", "]", "\n", "max_fc", "=", "np", ".", "max", "(", "f_counts", ")", "\n", "max_f", "=", "[", "k", "for", "k", ",", "v", "in", "frame_count", ".", "items", "(", ")", "if", "v", "==", "int", "(", "max_fc", ")", "]", "[", "0", "]", "\n", "print", "(", ")", "\n", "print", "(", "f'{len(users_kept):,}/{len(users_seen):,} ({100 * len(users_kept)/len(users_seen):.0f}%) users'", ")", "\n", "print", "(", "f'{len(tweets_kept):,}/{tweet_count:,} ({100 * len(tweets_kept)/tweet_count:.0f}%) tweets'", ")", "\n", "print", "(", ")", "\n", "print", "(", "f'{med_uc:,.2f} tweets / user (median)'", ")", "\n", "print", "(", "f'{mean_uc:,.2f} tweets / user (mean)'", ")", "\n", "print", "(", "f'{percentile_95_uc:,.2f} tweets / user (95 percentile)'", ")", "\n", "print", "(", "f'{percentile_80_uc:,.2f} tweets / user (80 percentile)'", ")", "\n", "print", "(", "f'{percentile_75_uc:,.2f} tweets / user (75 percentile)'", ")", "\n", "print", "(", "f'{min_uc:,.0f} tweets / user (min)'", ")", "\n", "print", "(", "f'{max_uc:,.0f} tweets / user (max)'", ")", "\n", "print", "(", ")", "\n", "print", "(", "f'{med_fc:,.2f} tweets / frame (median)'", ")", "\n", "print", "(", "f'{mean_fc:,.2f} tweets / frame (mean)'", ")", "\n", "print", "(", "f'{min_f}={min_fc:,.0f} tweets / frame (min)'", ")", "\n", "print", "(", "f'{max_f}={max_fc:,.0f} tweets / frame (max)'", ")", "\n", "\n", "print", "(", "'saving scores'", ")", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "json", ".", "dump", "(", "keep_scores", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.gpu.request_gpus.reserve_gpus": [[8, 27], ["filelock.FileLock", "os.path.join", "line.split", "int", "len", "os.path.join", "list", "os.path.join", "open().close", "reserved_gpus.append", "gpu_mem_info.split", "os.path.exists", "available_gpus.append", "reversed", "open"], "function", ["None"], ["def", "reserve_gpus", "(", "request_count", ",", "gpu_mem_threshold", ",", "res_path", ",", "output", ")", ":", "\n", "\t", "with", "FileLock", "(", "os", ".", "path", ".", "join", "(", "res_path", ",", "'.lock'", ")", ")", ":", "\n", "\t\t", "available_gpus", "=", "[", "]", "\n", "for", "line", "in", "output", ":", "\n", "\t\t\t", "gpu_id", ",", "gpu_mem_info", "=", "line", ".", "split", "(", "','", ")", "\n", "gpu_mem", "=", "int", "(", "gpu_mem_info", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "if", "gpu_mem", "<", "gpu_mem_threshold", ":", "\n", "\t\t\t\t", "gpu_res_path", "=", "os", ".", "path", ".", "join", "(", "res_path", ",", "gpu_id", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "gpu_res_path", ")", ":", "\n", "\t\t\t\t\t", "available_gpus", ".", "append", "(", "gpu_id", ")", "\n", "\n", "", "", "", "reserved_gpus", "=", "[", "]", "\n", "if", "len", "(", "available_gpus", ")", ">=", "request_count", ":", "\n", "# reversed to allocate less used gpus on gpu cluster, avoid annoying others", "\n", "\t\t\t", "for", "gpu_id", "in", "list", "(", "reversed", "(", "available_gpus", ")", ")", "[", ":", "request_count", "]", ":", "\n", "\t\t\t\t", "gpu_res_path", "=", "os", ".", "path", ".", "join", "(", "res_path", ",", "gpu_id", ")", "\n", "open", "(", "gpu_res_path", ",", "'w'", ")", ".", "close", "(", ")", "\n", "reserved_gpus", ".", "append", "(", "gpu_id", ")", "\n", "", "", "", "return", "reserved_gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.gpu.request_gpus.main": [[29, 60], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "subprocess.Popen", "subprocess.Popen.communicate", "os.path.expanduser", "command.split", "output.decode().strip().split", "os.path.exists", "os.mkdir", "print", "request_gpus.reserve_gpus", "len", "print", "output.decode().strip", "len", "print", "print", "output.decode"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.gpu.request_gpus.reserve_gpus"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--request_count'", ",", "required", "=", "True", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--gpu_mem_threshold'", ",", "default", "=", "200", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-rp'", ",", "'--res_path'", ",", "default", "=", "'~/.gpu_availability'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "command", "=", "'nvidia-smi --query-gpu=index,memory.used --format=csv'", "\n", "process", "=", "subprocess", ".", "Popen", "(", "command", ".", "split", "(", ")", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "output", ",", "error", "=", "process", ".", "communicate", "(", ")", "\n", "output", "=", "output", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "]", "\n", "res_path", "=", "os", ".", "path", ".", "expanduser", "(", "args", ".", "res_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "res_path", ")", "\n", "", "if", "args", ".", "request_count", "==", "0", ":", "\n", "\t\t", "print", "(", "''", ",", "end", "=", "''", ")", "\n", "", "else", ":", "\n", "\t\t", "gpu_ids", "=", "reserve_gpus", "(", "\n", "request_count", "=", "args", ".", "request_count", ",", "\n", "gpu_mem_threshold", "=", "args", ".", "gpu_mem_threshold", ",", "\n", "res_path", "=", "res_path", ",", "\n", "output", "=", "output", "\n", ")", "\n", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "\t\t\t", "if", "len", "(", "gpu_ids", ")", "==", "1", ":", "\n", "\t\t\t\t", "print", "(", "','", ".", "join", "(", "gpu_ids", ")", "+", "','", ",", "end", "=", "''", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "','", ".", "join", "(", "gpu_ids", ")", ",", "end", "=", "''", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "print", "(", "'-1'", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.gpu.free_gpus.free_gpus": [[7, 13], ["filelock.FileLock", "os.path.join", "os.path.join", "os.path.exists", "os.remove"], "function", ["None"], ["def", "free_gpus", "(", "gpu_ids", ",", "res_path", ")", ":", "\n", "\t", "with", "FileLock", "(", "os", ".", "path", ".", "join", "(", "res_path", ",", "'.lock'", ")", ")", ":", "\n", "\t\t", "for", "gpu_id", "in", "gpu_ids", ":", "\n", "\t\t\t", "gpu_res_path", "=", "os", ".", "path", ".", "join", "(", "res_path", ",", "gpu_id", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "gpu_res_path", ")", ":", "\n", "\t\t\t\t", "os", ".", "remove", "(", "gpu_res_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.gpu.free_gpus.main": [[15, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.expanduser", "free_gpus.free_gpus", "parser.parse_args.gpu_ids.split", "len"], "function", ["home.repos.pwc.inspect_result.Supermaxman_pytorch-gleam.gpu.free_gpus.free_gpus"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--gpu_ids'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-rp'", ",", "'--res_path'", ",", "default", "=", "'~/.gpu_availability'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "gpu_ids", "=", "[", "x", "for", "x", "in", "args", ".", "gpu_ids", ".", "split", "(", "','", ")", "if", "len", "(", "x", ")", ">", "0", "]", "\n", "full_res_path", "=", "os", ".", "path", ".", "expanduser", "(", "args", ".", "res_path", ")", "\n", "free_gpus", "(", "gpu_ids", ",", "full_res_path", ")", "\n", "\n"]]}