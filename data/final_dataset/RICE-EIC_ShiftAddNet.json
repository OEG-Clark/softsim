{"home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.cyclicLR.CyclicCosAnnealingLR.__init__": [[37, 47], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "decay_milestones", "=", "None", ",", "gamma", "=", "0.5", ",", "eta_min", "=", "1e-6", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Milestones should be a list of'", "\n", "' increasing integers. Got {}'", ",", "milestones", ")", "\n", "", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "milestones2", "=", "decay_milestones", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "CyclicCosAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.cyclicLR.CyclicCosAnnealingLR.get_lr": [[48, 73], ["bisect.bisect_right", "math.cos", "math.cos", "bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "last_epoch", ">=", "self", ".", "milestones", "[", "-", "1", "]", ":", "\n", "            ", "return", "[", "self", ".", "eta_min", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "idx", "=", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "\n", "\n", "\n", "left_barrier", "=", "0", "if", "idx", "==", "0", "else", "self", ".", "milestones", "[", "idx", "-", "1", "]", "\n", "right_barrier", "=", "self", ".", "milestones", "[", "idx", "]", "\n", "\n", "\n", "width", "=", "right_barrier", "-", "left_barrier", "\n", "curr_pos", "=", "self", ".", "last_epoch", "-", "left_barrier", "\n", "\n", "\n", "if", "self", ".", "milestones2", ":", "\n", "            ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones2", ",", "self", ".", "last_epoch", ")", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "curr_pos", "/", "width", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "curr_pos", "/", "width", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.cyclicLR.CyclicLinearLR.__init__": [[97, 107], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "decay_milestones", "=", "None", ",", "gamma", "=", "0.5", ",", "eta_min", "=", "1e-6", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Milestones should be a list of'", "\n", "' increasing integers. Got {}'", ",", "milestones", ")", "\n", "", "self", ".", "eta_min", "=", "eta_min", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "milestones2", "=", "decay_milestones", "\n", "super", "(", "CyclicLinearLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.cyclicLR.CyclicLinearLR.get_lr": [[108, 130], ["bisect.bisect_right", "bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "last_epoch", ">=", "self", ".", "milestones", "[", "-", "1", "]", ":", "\n", "            ", "return", "[", "self", ".", "eta_min", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "idx", "=", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "\n", "left_barrier", "=", "0", "if", "idx", "==", "0", "else", "self", ".", "milestones", "[", "idx", "-", "1", "]", "\n", "right_barrier", "=", "self", ".", "milestones", "[", "idx", "]", "\n", "\n", "width", "=", "right_barrier", "-", "left_barrier", "\n", "curr_pos", "=", "self", ".", "last_epoch", "-", "left_barrier", "\n", "\n", "if", "self", ".", "milestones2", ":", "\n", "            ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones2", ",", "self", ".", "last_epoch", ")", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1.", "-", "1.0", "*", "curr_pos", "/", "width", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1.", "-", "1.0", "*", "curr_pos", "/", "width", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.generate_feature.save_checkpoint": [[243, 254], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "# filename = os.path.join(filepath, 'ckpt'+str(epoch)+'.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.generate_feature.load_add_state_dict": [[255, 267], ["OrderedDict", "state_dict.items"], "function", ["None"], ["", "", "", "def", "load_add_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "k", "and", "not", "'bn'", "in", "k", "and", "not", "'fc'", "in", "k", ":", "\n", "            ", "if", "k", "==", "'conv1.weight'", "or", "'downsample.1'", "in", "k", ":", "\n", "                ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "continue", "\n", "", "k", "=", "k", "[", ":", "-", "6", "]", "+", "'adder'", "\n", "# print(k)", "\n", "", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.generate_feature.load_shiftadd_state_dict": [[268, 280], ["OrderedDict", "state_dict.items"], "function", ["None"], ["", "def", "load_shiftadd_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "k", "and", "not", "'bn'", "in", "k", "and", "not", "'fc'", "in", "k", ":", "\n", "            ", "if", "k", "==", "'conv1.weight'", "or", "'downsample.2'", "in", "k", ":", "\n", "                ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "continue", "\n", "", "k", "=", "k", "[", ":", "-", "6", "]", "+", "'adder'", "\n", "# print(k)", "\n", "", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.generate_feature.accuracy": [[314, 328], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.generate_feature.test": [[330, 349], ["model.eval", "len", "print", "model", "torch.cross_entropy().item", "generate_feature.accuracy", "prec1.item", "prec5.item", "numpy.round", "numpy.round", "torch.autograd.Variable", "torch.autograd.Variable", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "test_acc_5", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "test_acc_5", "+=", "prec5", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Prec1: {}/{} ({:.2f}%), Prec5: ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ",", "test_acc_5", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_5", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.generate_feature.gene_feat": [[351, 380], ["model.eval", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.save", "numpy.save", "numpy.save", "len", "print", "model", "model.data.cpu().numpy", "target.data.cpu().numpy", "data.data.cpu().numpy", "out_output.append", "out_target.append", "out_data.append", "os.path.join", "os.path.join", "os.path.join", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.squeeze", "data.cuda", "target.cuda", "model.data.cpu", "target.data.cpu", "data.data.cpu", "len"], "function", ["None"], ["", "def", "gene_feat", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "cnt", "=", "0", "\n", "out_target", "=", "[", "]", "\n", "out_data", "=", "[", "]", "\n", "out_output", "=", "[", "]", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "cnt", "+=", "len", "(", "data", ")", "\n", "print", "(", "\"processing: %d/%d\"", "%", "(", "cnt", ",", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "output_np", "=", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target_np", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "data_np", "=", "data", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "out_output", ".", "append", "(", "output_np", ")", "\n", "out_target", ".", "append", "(", "target_np", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "out_data", ".", "append", "(", "np", ".", "squeeze", "(", "data_np", ")", ")", "\n", "\n", "\n", "", "output_array", "=", "np", ".", "concatenate", "(", "out_output", ",", "axis", "=", "0", ")", "\n", "target_array", "=", "np", ".", "concatenate", "(", "out_target", ",", "axis", "=", "0", ")", "\n", "data_array", "=", "np", ".", "concatenate", "(", "out_data", ",", "axis", "=", "0", ")", "\n", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'output.npy'", ")", ",", "output_array", ",", "allow_pickle", "=", "False", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'target.npy'", ")", ",", "target_array", ",", "allow_pickle", "=", "False", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'data.npy'", ")", ",", "data_array", ",", "allow_pickle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train.save_checkpoint": [[271, 282], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "# filename = os.path.join(filepath, 'ckpt'+str(epoch)+'.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train.load_add_state_dict": [[283, 295], ["OrderedDict", "state_dict.items"], "function", ["None"], ["", "", "", "def", "load_add_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "k", "and", "not", "'bn'", "in", "k", "and", "not", "'fc'", "in", "k", ":", "\n", "            ", "if", "k", "==", "'conv1.weight'", "or", "'downsample.1'", "in", "k", ":", "\n", "                ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "continue", "\n", "", "k", "=", "k", "[", ":", "-", "6", "]", "+", "'adder'", "\n", "# print(k)", "\n", "", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train.load_shiftadd_state_dict": [[296, 308], ["OrderedDict", "state_dict.items"], "function", ["None"], ["", "def", "load_shiftadd_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "k", "and", "not", "'bn'", "in", "k", "and", "not", "'fc'", "in", "k", ":", "\n", "            ", "if", "k", "==", "'conv1.weight'", "or", "'downsample.2'", "in", "k", ":", "\n", "                ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "continue", "\n", "", "k", "=", "k", "[", ":", "-", "6", "]", "+", "'adder'", "\n", "# print(k)", "\n", "", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train.visualize": [[376, 394], ["matplotlib.ion", "matplotlib.clf", "range", "matplotlib.legend", "matplotlib.title", "os.path.join", "matplotlib.savefig", "matplotlib.draw", "matplotlib.pause", "matplotlib.plot", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "visualize", "(", "feat", ",", "labels", ",", "epoch", ")", ":", "\n", "    ", "plt", ".", "ion", "(", ")", "\n", "c", "=", "[", "'#ff0000'", ",", "'#ffff00'", ",", "'#00ff00'", ",", "'#00ffff'", ",", "'#0000ff'", ",", "\n", "'#ff00ff'", ",", "'#990000'", ",", "'#999900'", ",", "'#009900'", ",", "'#009999'", "]", "\n", "plt", ".", "clf", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "feat", "[", "labels", "==", "i", ",", "0", "]", ",", "feat", "[", "labels", "==", "i", ",", "1", "]", ",", "'.'", ",", "c", "=", "c", "[", "i", "]", ")", "\n", "", "plt", ".", "legend", "(", "[", "'0'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", ",", "'5'", ",", "'6'", ",", "'7'", ",", "'8'", ",", "'9'", "]", ",", "loc", "=", "'upper right'", ")", "\n", "# plt.xlim(xmin=-8,xmax=8)", "\n", "# plt.ylim(ymin=-8,ymax=8)", "\n", "# plt.text(-7.8,7.3,\"epoch=%d\" % epoch)", "\n", "plt", ".", "title", "(", "\"epoch=%d\"", "%", "epoch", ")", "\n", "vis_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'visualization'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "vis_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "vis_dir", ")", "\n", "", "plt", ".", "savefig", "(", "vis_dir", "+", "'/epoch=%d.jpg'", "%", "epoch", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train.accuracy": [[395, 409], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train.get_shift_range": [[418, 464], ["model.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.modules", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "int", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "print", "isinstance", "isinstance", "model.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.modules", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "print", "print", "print", "m.weight.data.numel", "m.weight.data.numel", "m.weight.data.view().abs().clone", "isinstance", "isinstance", "weight_dist.append", "numpy.round", "torch.unique.size", "m.sign.data.numel", "m.sign.data.numel", "m.sign.data.view().abs().clone", "m.shift.data.view().abs().clone", "numpy.round", "m.weight.data.view().abs", "torch.unique.size", "m.sign.data.view().abs", "m.shift.data.view().abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "m.weight.data.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "m.sign.data.view", "m.shift.data.view"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "", "def", "get_shift_range", "(", "model", ")", ":", "\n", "    ", "if", "'shift'", "in", "args", ".", "arch", ":", "\n", "# pruning", "\n", "        ", "if", "args", ".", "shift_type", "==", "'Q'", ":", "\n", "            ", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "shift_module", ")", ":", "\n", "                    ", "total", "+=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "", "", "shift_weights", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "shift_module", ")", ":", "\n", "                    ", "size", "=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "shift_weights", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "weight", ".", "data", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "y", ",", "i", "=", "torch", ".", "sort", "(", "shift_weights", ")", "\n", "thre_index", "=", "int", "(", "total", "*", "args", ".", "percent", ")", "\n", "thre", "=", "y", "[", "thre_index", "]", "-", "1e-7", "\n", "weight_unique", "=", "torch", ".", "unique", "(", "shift_weights", ")", "\n", "print", "(", "weight_unique", ")", "\n", "print", "(", "'shift_range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "", "elif", "args", ".", "shift_type", "==", "'PS'", ":", "\n", "            ", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "shift_module", ")", ":", "\n", "                    ", "total", "+=", "m", ".", "sign", ".", "data", ".", "numel", "(", ")", "\n", "", "", "sign_weights", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "shift_weights", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "shift_module", ")", ":", "\n", "                    ", "size", "=", "m", ".", "sign", ".", "data", ".", "numel", "(", ")", "\n", "sign_weights", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "sign", ".", "data", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "shift_weights", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "shift", ".", "data", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "y", ",", "i", "=", "torch", ".", "sort", "(", "shift_weights", ")", "\n", "shift_unique", "=", "torch", ".", "unique", "(", "shift_weights", ")", "\n", "print", "(", "shift_unique", ")", "\n", "weight_dist", "=", "[", "]", "\n", "for", "value", "in", "shift_unique", ":", "\n", "                ", "weight_dist", ".", "append", "(", "np", ".", "round", "(", "(", "torch", ".", "sum", "(", "shift_weights", "==", "value", ")", "/", "float", "(", "total", ")", ")", "*", "100", ",", "2", ")", ")", "\n", "", "print", "(", "weight_dist", ")", "\n", "print", "(", "'shift_range:'", ",", "shift_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "print", "(", "'pruning ratio:'", ",", "np", ".", "round", "(", "(", "torch", ".", "sum", "(", "sign_weights", "==", "0", ")", "/", "float", "(", "total", ")", ")", "*", "100", ",", "2", ")", ",", "'%'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train.train": [[466, 529], ["model.train", "time.time", "time.time", "time.time", "time.time", "enumerate", "numpy.round", "print", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "train.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.autograd.Variable", "torch.autograd.Variable", "print", "len", "data.cuda", "target.cuda", "time.time", "time.time", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.train", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.step"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "feat_loader", "=", "[", "]", "\n", "idx_loader", "=", "[", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# batch_time = time.time()", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# print('total time for one batch: {}'.format(time.time()-batch_time))", "\n", "# batch_time = time.time()", "\n", "\n", "# for name, m in model.named_modules():", "\n", "#     # print(name)", "\n", "#     # if isinstance(m, deepshift.modules.Conv2dShift):", "\n", "#     # if name == 'layer1.1.conv1':", "\n", "#     if name == 'layer2.2.conv1.0':", "\n", "#         pre = utils.round(m.shift.data, 'deterministic')", "\n", "#         pre_s = m.sign.data", "\n", "# print(m.shift.grad.data)", "\n", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "\n", "\n", "# for name, m in model.named_modules():", "\n", "#     if isinstance(m, deepshift.modules.Conv2dShift):", "\n", "#         m.shift.grad = None", "\n", "#         m.sign.grad = None", "\n", "#     # if name == 'layer1.1.conv1':", "\n", "#     # if name == 'layer2.2.conv1.0':", "\n", "#     #     now = utils.round(m.shift.data, 'deterministic')", "\n", "#     #     now_s = m.sign.data", "\n", "#     #     print(torch.sum(abs(now - pre)))", "\n", "#         # print(torch.sum(abs(now_s - pre_s)))", "\n", "#     if isinstance(m, Adder2D):", "\n", "#         print(name, torch.norm(m.adder.grad))", "\n", "# exit()", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# if args.add_quant:", "\n", "#     for name, m in model.named_modules():", "\n", "#         if isinstance(m, Adder2D):", "\n", "#             m.adder.data = m.round_weight_each_step(m.adder.data, m.weight_bits)", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n", "print", "(", "'total time for one epoch: {}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train.test": [[530, 549], ["model.eval", "len", "print", "model", "torch.cross_entropy().item", "train.accuracy", "prec1.item", "prec5.item", "numpy.round", "numpy.round", "torch.autograd.Variable", "torch.autograd.Variable", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "test_acc_5", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "test_acc_5", "+=", "prec5", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Prec1: {}/{} ({:.2f}%), Prec5: ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ",", "test_acc_5", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_5", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.check.check_forward": [[14, 117], ["print", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "adder.adder_slow.adder2d().cuda", "adder2d().cuda.adder.data.copy_", "adder2d().cuda.b.data.copy_", "adder.adder.Adder2D().cuda", "Adder2D().cuda.adder.data.copy_", "Adder2D().cuda.b.data.copy_", "Adder2D().cuda.", "adder2d().cuda.", "tt.randn().cuda.clone", "tt.randn().cuda.clone", "time.time", "Adder2D().cuda.", "time.time", "print", "time.time", "adder2d().cuda.", "time.time", "print", "print", "time.time", "Adder2D().cuda.", "time.time", "print", "time.time", "adder2d().cuda.", "time.time", "print", "print", "torch.randn", "torch.randn", "torch.randn", "adder.adder_slow.adder2d", "adder.adder.Adder2D", "float", "float"], "function", ["None"], ["def", "check_forward", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "64", "\n", "# in_channels = 1", "\n", "# out_channels = 1", "\n", "in_size", "=", "256", "\n", "# in_size = 3", "\n", "kernel_size", "=", "3", "\n", "padding", "=", "1", "\n", "stride", "=", "1", "\n", "out_size", "=", "(", "in_size", "+", "2", "*", "padding", "-", "kernel_size", ")", "//", "stride", "+", "1", "\n", "print", "(", "out_size", ")", "\n", "\n", "input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "weight", "=", "tt", ".", "randn", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ".", "cuda", "(", ")", "\n", "bias", "=", "tt", ".", "randn", "(", "out_channels", ")", ".", "cuda", "(", ")", "\n", "# output = tt.randn(batch_size, out_channels, out_size, out_size).cuda()", "\n", "\n", "adder_ref", "=", "adder2d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "adder_ref", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder_ref", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "adder", "=", "Adder2D", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "eta", "=", "0.2", ")", ".", "cuda", "(", ")", "\n", "adder", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "# adder_cuda.forward(input,", "\n", "#                    weight,", "\n", "#                    # bias,", "\n", "#                    output,", "\n", "#                    kernel_size, kernel_size,", "\n", "#                    stride, stride,", "\n", "#                    padding, padding)", "\n", "adder", "(", "input", ")", "\n", "adder_ref", "(", "input", ")", "\n", "input", ".", "clone", "(", ")", "\n", "weight", ".", "clone", "(", ")", "\n", "# output.clone()", "\n", "\n", "# print(input)", "\n", "# print(weight)", "\n", "# print(\"our output: \", output)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "# print(\"addernet ref: \", out_ref)", "\n", "# print(\"by hand no bias: \", -(input - weight).abs().sum())", "\n", "# print(F.conv2d(input, weight, bias, padding=padding))", "\n", "# out_ref = F.conv2d(input, weight, bias, padding=padding)", "\n", "\n", "import", "time", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.forward(input,", "\n", "#                   weight,", "\n", "#                   # bias,", "\n", "#                   output,", "\n", "#                   kernel_size, kernel_size,", "\n", "#                   stride, stride,", "\n", "#                   padding, padding)", "\n", "output", "=", "adder", "(", "input", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# out_ref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "out_ref", "=", "adder_ref", "(", "input", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "print", "(", "\"max error: {:.3e}\"", ".", "format", "(", "float", "(", "(", "out_ref", "-", "output", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.forward(input,", "\n", "#                   weight,", "\n", "#                   # bias,", "\n", "#                   output,", "\n", "#                   kernel_size, kernel_size,", "\n", "#                   stride, stride,", "\n", "#                   padding, padding)", "\n", "output", "=", "adder", "(", "input", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# out_ref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "out_ref", "=", "adder_ref", "(", "input", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "print", "(", "\"max error: {:.3e}\"", ".", "format", "(", "float", "(", "(", "out_ref", "-", "output", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.check.check_grad_in": [[119, 201], ["print", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "adder.adder_slow.adder2d().cuda", "adder2d().cuda.adder.data.copy_", "adder2d().cuda.b.data.copy_", "adder.adder.Adder2D().cuda", "Adder2D().cuda.adder.data.copy_", "Adder2D().cuda.b.data.copy_", "adder2d().cuda.", "adder_ref.backward", "tt.randn().cuda.grad.clone", "tt.randn().cuda.grad.zero_", "Adder2D().cuda.", "adder.backward", "tt.randn().cuda.grad.clone", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "adder.adder_slow.adder2d", "adder.adder.Adder2D"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward"], ["", "def", "check_grad_in", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "64", "\n", "in_size", "=", "128", "\n", "kernel_size", "=", "3", "\n", "padding", "=", "1", "\n", "stride", "=", "1", "\n", "# batch_size = 1", "\n", "# in_channels = 1", "\n", "# out_channels = 1", "\n", "# in_size = 2", "\n", "# kernel_size = 2", "\n", "# padding = 0", "\n", "# stride = 1", "\n", "out_size", "=", "(", "in_size", "+", "2", "*", "padding", "-", "kernel_size", ")", "//", "stride", "+", "1", "\n", "print", "(", "out_size", ")", "\n", "\n", "input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "grad_input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "weight", "=", "tt", ".", "randn", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ".", "cuda", "(", ")", "\n", "weight", ".", "requires_grad", "=", "True", "\n", "bias", "=", "tt", ".", "randn", "(", "out_channels", ")", ".", "cuda", "(", ")", "\n", "grad_output", "=", "tt", ".", "randn", "(", "batch_size", ",", "out_channels", ",", "out_size", ",", "out_size", ")", ".", "cuda", "(", ")", "\n", "\n", "adder_ref", "=", "adder2d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "adder_ref", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder_ref", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "adder", "=", "Adder2D", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "eta", "=", "0.2", ")", ".", "cuda", "(", ")", "\n", "adder", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "out_ref", "=", "adder_ref", "(", "input", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ")", "\n", "\n", "grad_clone", "=", "input", ".", "grad", ".", "clone", "(", ")", "\n", "input", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "# adder_cuda.backward_input(grad_output,", "\n", "#                           input,", "\n", "#                           weight,", "\n", "#                           grad_input,", "\n", "#                           kernel_size, kernel_size,", "\n", "#                           stride, stride,", "\n", "#                           padding, padding)", "\n", "output", "=", "adder", "(", "input", ")", "\n", "output", ".", "backward", "(", "grad_output", ")", "\n", "grad_input", "=", "input", ".", "grad", ".", "clone", "(", ")", "\n", "\n", "# print(\"input\")", "\n", "# print(input)", "\n", "# print(\"weight ref\")", "\n", "# print(adder_ref.adder)", "\n", "# print(\"weight our\")", "\n", "# print(adder.adder)", "\n", "# print(\"output ref\")", "\n", "# print(out_ref)", "\n", "# print(\"output our\")", "\n", "# print(output)", "\n", "# print(\"grad output\")", "\n", "# print(grad_output)", "\n", "# print(\"grad_in ref\")", "\n", "# print(grad_clone)", "\n", "# print(\"grad_in our\")", "\n", "# print(grad_input)", "\n", "\n", "print", "(", "(", "(", "grad_clone", "-", "grad_input", ")", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.check.check_grad_weight": [[203, 341], ["print", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "adder.adder_slow.adder2d().cuda", "adder2d().cuda.adder.data.copy_", "adder2d().cuda.b.data.copy_", "adder.adder.Adder2D().cuda", "Adder2D().cuda.adder.data.copy_", "Adder2D().cuda.b.data.copy_", "adder2d().cuda.", "adder_ref.backward", "adder2d().cuda.adder.grad.clone", "adder2d().cuda.adder.grad.zero_", "Adder2D().cuda.", "adder.backward", "Adder2D().cuda.adder.grad.clone", "Adder2D().cuda.adder.grad.zero_", "print", "time.time", "adder.backward", "time.time", "print", "time.time", "adder_ref.backward", "time.time", "print", "time.time", "adder.backward", "time.time", "print", "time.time", "adder_ref.backward", "time.time", "print", "time.time", "adder.backward", "time.time", "print", "time.time", "adder_ref.backward", "time.time", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "adder.adder_slow.adder2d", "adder.adder.Adder2D", "adder_ref.adder.grad.clone.abs"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "def", "check_grad_weight", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "in_channels", "=", "6", "\n", "out_channels", "=", "6", "\n", "in_size", "=", "128", "\n", "kernel_size", "=", "3", "\n", "padding", "=", "1", "\n", "stride", "=", "1", "\n", "# batch_size = 1", "\n", "# in_channels = 1", "\n", "# out_channels = 1", "\n", "# in_size = 1", "\n", "# kernel_size = 1", "\n", "# padding = 0", "\n", "# stride = 1", "\n", "out_size", "=", "(", "in_size", "+", "2", "*", "padding", "-", "kernel_size", ")", "//", "stride", "+", "1", "\n", "print", "(", "out_size", ")", "\n", "\n", "input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "weight", "=", "tt", ".", "randn", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ".", "cuda", "(", ")", "\n", "weight", ".", "requires_grad", "=", "True", "\n", "bias", "=", "tt", ".", "randn", "(", "out_channels", ")", ".", "cuda", "(", ")", "\n", "grad_output", "=", "tt", ".", "randn", "(", "batch_size", ",", "out_channels", ",", "out_size", ",", "out_size", ")", ".", "cuda", "(", ")", "\n", "\n", "adder_ref", "=", "adder2d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "adder_ref", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder_ref", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "adder", "=", "Adder2D", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "eta", "=", "0.2", ")", ".", "cuda", "(", ")", "\n", "adder", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "out_ref", "=", "adder_ref", "(", "input", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "grad_clone", "=", "adder_ref", ".", "adder", ".", "grad", ".", "clone", "(", ")", "\n", "adder_ref", ".", "adder", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "# grad_weight = weight.clone()", "\n", "# adder_cuda.backward_weight(grad_output,", "\n", "#                            input,", "\n", "#                            weight,", "\n", "#                            grad_weight,", "\n", "#                            kernel_size, kernel_size,", "\n", "#                            stride, stride,", "\n", "#                            padding, padding)", "\n", "output", "=", "adder", "(", "input", ")", "\n", "output", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "grad_weight", "=", "adder", ".", "adder", ".", "grad", ".", "clone", "(", ")", "\n", "adder", ".", "adder", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "# print(\"input\")", "\n", "# print(input)", "\n", "# print(\"weight\")", "\n", "# print(weight)", "\n", "# print(\"output ref\")", "\n", "# print(out_ref)", "\n", "# # print(\"output our\", output)", "\n", "# print(\"grad output\")", "\n", "# print(grad_output)", "\n", "# print(\"grad_weight ref\")", "\n", "# print(grad_clone)", "\n", "# print(\"grad_weight our\")", "\n", "# print(grad_weight)", "\n", "\n", "eps", "=", "1e-6", "\n", "print", "(", "(", "(", "grad_clone", "-", "grad_weight", ")", "/", "(", "grad_clone", ".", "abs", "(", ")", "+", "eps", ")", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "import", "time", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.backward_weight(grad_output,", "\n", "#                            input,", "\n", "#                            weight,", "\n", "#                            grad_weight,", "\n", "#                            kernel_size, kernel_size,", "\n", "#                            stride, stride,", "\n", "#                            padding, padding)", "\n", "output", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.backward_weight(grad_output,", "\n", "#                            input,", "\n", "#                            weight,", "\n", "#                            grad_weight,", "\n", "#                            kernel_size, kernel_size,", "\n", "#                            stride, stride,", "\n", "#                            padding, padding)", "\n", "output", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.backward_weight(grad_output,", "\n", "#                            input,", "\n", "#                            weight,", "\n", "#                            grad_weight,", "\n", "#                            kernel_size, kernel_size,", "\n", "#                            stride, stride,", "\n", "#                            padding, padding)", "\n", "output", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.check.check_naive_clone": [[343, 371], ["print", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "adder_cuda.forward", "print", "tt.randn().cuda.clone", "tt.randn().cuda.clone", "tt.randn().cuda.clone", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.CNN.forward"], ["", "def", "check_naive_clone", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "in_channels", "=", "1", "\n", "out_channels", "=", "1", "\n", "in_size", "=", "3", "\n", "kernel_size", "=", "1", "\n", "padding", "=", "0", "\n", "stride", "=", "1", "\n", "out_size", "=", "(", "in_size", "+", "2", "*", "padding", "-", "kernel_size", ")", "//", "stride", "+", "1", "\n", "print", "(", "out_size", ")", "\n", "\n", "input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "weight", "=", "tt", ".", "randn", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ".", "cuda", "(", ")", "\n", "# bias = tt.randn(out_channels).cuda()", "\n", "output", "=", "tt", ".", "randn", "(", "batch_size", ",", "out_channels", ",", "out_size", ",", "out_size", ")", ".", "cuda", "(", ")", "\n", "\n", "result", "=", "adder_cuda", ".", "forward", "(", "input", ",", "\n", "weight", ",", "\n", "# bias,", "\n", "output", ",", "\n", "kernel_size", ",", "kernel_size", ",", "\n", "stride", ",", "stride", ",", "\n", "padding", ",", "padding", ")", "\n", "print", "(", "result", ")", "\n", "input", ".", "clone", "(", ")", "\n", "weight", ".", "clone", "(", ")", "\n", "# bias.clone()", "\n", "output", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.prune.save_checkpoint": [[198, 201], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'pruned.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.prune.accuracy": [[202, 216], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.prune.test": [[217, 232], ["model.eval", "len", "model", "torch.cross_entropy().item", "prune.accuracy", "prec1.item", "numpy.round", "torch.autograd.Variable", "torch.autograd.Variable", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "return", "test_loss", ",", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.prune.change_name": [[233, 244], ["collections.OrderedDict", "state_dict.items", "key.replace", "key.replace"], "function", ["None"], ["", "def", "change_name", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'conv'", "in", "key", "and", "'.1.weight'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'weight'", ",", "'adder'", ")", "\n", "", "elif", "'downsample'", "in", "key", "and", "'.1.weight'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'weight'", ",", "'adder'", ")", "\n", "", "else", ":", "\n", "            ", "new_key", "=", "key", "\n", "", "new_state_dict", "[", "new_key", "]", "=", "value", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.prune.create_mask": [[268, 271], ["torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "function", ["None"], ["def", "create_mask", "(", "shape", ",", "rate", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "shape", ")", ".", "uniform_", "(", ")", ">", "rate", "\n", "return", "mask", "+", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.retrain.save_checkpoint": [[227, 238], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "# filename = os.path.join(filepath, 'ckpt'+str(epoch)+'.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.retrain.change_name": [[254, 265], ["collections.OrderedDict", "state_dict.items", "key.replace", "key.replace"], "function", ["None"], ["", "def", "change_name", "(", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'conv'", "in", "key", "and", "'.1.weight'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'weight'", ",", "'adder'", ")", "\n", "", "elif", "'downsample'", "in", "key", "and", "'.1.weight'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'weight'", ",", "'adder'", ")", "\n", "", "else", ":", "\n", "            ", "new_key", "=", "key", "\n", "", "new_state_dict", "[", "new_key", "]", "=", "value", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.retrain.visualize": [[340, 358], ["matplotlib.ion", "matplotlib.clf", "range", "matplotlib.legend", "matplotlib.title", "os.path.join", "matplotlib.savefig", "matplotlib.draw", "matplotlib.pause", "matplotlib.plot", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "visualize", "(", "feat", ",", "labels", ",", "epoch", ")", ":", "\n", "    ", "plt", ".", "ion", "(", ")", "\n", "c", "=", "[", "'#ff0000'", ",", "'#ffff00'", ",", "'#00ff00'", ",", "'#00ffff'", ",", "'#0000ff'", ",", "\n", "'#ff00ff'", ",", "'#990000'", ",", "'#999900'", ",", "'#009900'", ",", "'#009999'", "]", "\n", "plt", ".", "clf", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "feat", "[", "labels", "==", "i", ",", "0", "]", ",", "feat", "[", "labels", "==", "i", ",", "1", "]", ",", "'.'", ",", "c", "=", "c", "[", "i", "]", ")", "\n", "", "plt", ".", "legend", "(", "[", "'0'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", ",", "'5'", ",", "'6'", ",", "'7'", ",", "'8'", ",", "'9'", "]", ",", "loc", "=", "'upper right'", ")", "\n", "# plt.xlim(xmin=-8,xmax=8)", "\n", "# plt.ylim(ymin=-8,ymax=8)", "\n", "# plt.text(-7.8,7.3,\"epoch=%d\" % epoch)", "\n", "plt", ".", "title", "(", "\"epoch=%d\"", "%", "epoch", ")", "\n", "vis_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'visualization'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "vis_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "vis_dir", ")", "\n", "", "plt", ".", "savefig", "(", "vis_dir", "+", "'/epoch=%d.jpg'", "%", "epoch", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.retrain.accuracy": [[359, 373], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.retrain.train": [[374, 427], ["model.train", "time.time", "enumerate", "numpy.round", "optimizer.zero_grad", "torch.cross_entropy", "F.cross_entropy.item", "retrain.accuracy", "prec1.item", "F.cross_entropy.backward", "enumerate", "optimizer.step", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "retrain.visualize", "torch.autograd.Variable", "torch.autograd.Variable", "model", "feat_loader.append", "idx_loader.append", "model", "model.modules", "isinstance", "print", "len", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "data.cuda", "target.cuda", "m.weight.data.abs().clone", "torch.ne().float().cuda", "torch.ne().float().cuda", "torch.ne().float().cuda", "torch.ne().float().cuda", "torch.ne().float().cuda", "m.weight.grad.data.mul_", "isinstance", "m.shift.data.abs().clone", "m.shift.data.abs().clone.gt().float().cuda", "m.shift.grad.data.mul_", "m.sign.grad.data.mul_", "isinstance", "len", "F.cross_entropy.item", "torch.cat.data.cpu", "torch.cat.data.cpu", "m.weight.data.abs", "torch.ne().float", "torch.ne().float", "torch.ne().float", "torch.ne().float", "torch.ne().float", "m.adder.data.abs().clone", "m.adder.data.abs().clone.gt().float().cuda", "m.adder.grad.data.mul_", "len", "len", "m.shift.data.abs", "m.shift.data.abs().clone.gt().float", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "m.adder.data.abs", "m.adder.data.abs().clone.gt().float", "m.shift.data.abs().clone.gt", "m.adder.data.abs().clone.gt"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.train", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.step", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.retrain.visualize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "feat_loader", "=", "[", "]", "\n", "idx_loader", "=", "[", "]", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "visualize", ":", "\n", "### store for visualization ###", "\n", "            ", "feat", ",", "output", "=", "model", "(", "data", ")", "\n", "feat_loader", ".", "append", "(", "feat", ")", "\n", "idx_loader", ".", "append", "(", "target", ")", "\n", "###############################", "\n", "", "else", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#-----------------------------------------", "\n", "for", "k", ",", "m", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "# print(k, m)", "\n", "            ", "if", "isinstance", "(", "m", ",", "deepshift", ".", "modules_q", ".", "Conv2dShiftQ", ")", ":", "# Q shift", "\n", "                ", "weight_copy", "=", "m", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "mask", "=", "torch", ".", "ne", "(", "weight_copy", ",", "1.", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "# print(mask)", "\n", "m", ".", "weight", ".", "grad", ".", "data", ".", "mul_", "(", "mask", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "deepshift", ".", "modules", ".", "Conv2dShift", ")", ":", "# PS shift", "\n", "                ", "weight_copy", "=", "m", ".", "shift", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "mask", "=", "weight_copy", ".", "gt", "(", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "m", ".", "shift", ".", "grad", ".", "data", ".", "mul_", "(", "mask", ")", "\n", "m", ".", "sign", ".", "grad", ".", "data", ".", "mul_", "(", "mask", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "adder_fast", ".", "Adder2D", ")", ":", "\n", "                ", "adder_copy", "=", "m", ".", "adder", ".", "data", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "mask", "=", "adder_copy", ".", "gt", "(", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "m", ".", "adder", ".", "grad", ".", "data", ".", "mul_", "(", "mask", ")", "\n", "#-----------------------------------------", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "if", "args", ".", "visualize", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "feat_loader", ",", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "idx_loader", ",", "0", ")", "\n", "visualize", "(", "feat", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.retrain.test": [[428, 448], ["model.eval", "len", "print", "numpy.round", "torch.cross_entropy().item", "retrain.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "model", "model", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "if", "args", ".", "visualize", ":", "\n", "            ", "_", ",", "output", "=", "model", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "\n", "", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train_fix.save_checkpoint": [[263, 274], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "# filename = os.path.join(filepath, 'ckpt'+str(epoch)+'.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train_fix.save_checkpoint_swa": [[275, 288], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "save_checkpoint_swa", "(", "state", ",", "is_best", ",", "is_swa_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "# filename = os.path.join(filepath, 'ckpt'+str(epoch)+'.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "if", "is_swa_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'swa_model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train_fix.accuracy": [[344, 358], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train_fix.get_pruning_ratio": [[371, 382], ["numpy.round", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.modules", "isinstance", "m.weight.data.numel", "m.mask.data.view().abs().clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "m.mask.data.view().abs", "m.mask.data.view"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "", "def", "get_pruning_ratio", "(", "model", ")", ":", "\n", "    ", "if", "'shift'", "in", "args", ".", "arch", ":", "\n", "        ", "shift_masks", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "SEConv2d", ")", ":", "\n", "                ", "size", "=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "shift_masks", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "mask", ".", "data", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "", "return", "np", ".", "round", "(", "(", "1", "-", "torch", ".", "sum", "(", "shift_masks", ")", "/", "float", "(", "total", ")", ")", "*", "100", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train_fix.get_shift_range": [[388, 415], ["print", "model.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.modules", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "print", "print", "print", "print", "isinstance", "isinstance", "weight_dist.append", "numpy.round", "numpy.round", "m.weight.data.numel", "m.weight.data.numel", "m.weight.data.view().abs().clone", "m.mask.data.view().abs().clone", "numpy.round", "torch.unique.size", "m.weight.data.view().abs", "m.mask.data.view().abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "m.weight.data.view", "m.mask.data.view"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "def", "get_shift_range", "(", "model", ")", ":", "\n", "    ", "if", "'shift'", "in", "args", ".", "arch", ":", "\n", "        ", "print", "(", "'shift candidates:'", ")", "\n", "total", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "shift_module", ")", ":", "\n", "                ", "total", "+=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "", "", "shift_weights", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "shift_masks", "=", "torch", ".", "zeros", "(", "total", ")", "\n", "index", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "shift_module", ")", ":", "\n", "                ", "size", "=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "shift_weights", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "weight", ".", "data", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "shift_masks", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "mask", ".", "data", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "# y, i = torch.sort(shift_weights)", "\n", "", "", "weight_unique", "=", "torch", ".", "unique", "(", "shift_weights", ")", "\n", "print", "(", "weight_unique", ")", "\n", "print", "(", "'shift range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "weight_dist", "=", "[", "]", "\n", "for", "value", "in", "weight_unique", ":", "\n", "            ", "weight_dist", ".", "append", "(", "np", ".", "round", "(", "(", "torch", ".", "sum", "(", "shift_weights", "==", "value", ")", "/", "float", "(", "total", ")", ")", "*", "100", ",", "2", ")", ")", "\n", "", "print", "(", "weight_dist", ")", "\n", "print", "(", "'pruning ratio:'", ",", "np", ".", "round", "(", "(", "1", "-", "torch", ".", "sum", "(", "shift_masks", ")", "/", "float", "(", "total", ")", ")", "*", "100", ",", "2", ")", ",", "'%'", ")", "\n", "print", "(", "'pruning ratio:'", ",", "np", ".", "round", "(", "(", "torch", ".", "sum", "(", "shift_weights", "==", "0", ")", "/", "float", "(", "total", ")", ")", "*", "100", ",", "2", ")", ",", "'%'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train_fix.get_adder_sparsity": [[416, 429], ["print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.modules", "print", "isinstance", "m.adder.data.numel", "m.adder_mask.data.view().abs().clone", "numpy.round", "m.adder_mask.data.view().abs", "m.adder_mask.data.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "", "def", "get_adder_sparsity", "(", "model", ")", ":", "\n", "    ", "if", "args", ".", "add_sparsity", "==", "0", ":", "\n", "        ", "print", "(", "'no sparisty in adder layer.'", ")", "\n", "", "elif", "'add'", "in", "args", ".", "arch", ":", "\n", "        ", "adder_masks", "=", "torch", ".", "zeros", "(", "total_add", ")", "\n", "index", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "Adder2D", ")", ":", "\n", "                ", "size", "=", "m", ".", "adder", ".", "data", ".", "numel", "(", ")", "\n", "adder_masks", "[", "index", ":", "(", "index", "+", "size", ")", "]", "=", "m", ".", "adder_mask", ".", "data", ".", "view", "(", "-", "1", ")", ".", "abs", "(", ")", ".", "clone", "(", ")", "\n", "index", "+=", "size", "\n", "\n", "", "", "print", "(", "'add sparsity: {}%'", ".", "format", "(", "np", ".", "round", "(", "(", "1", "-", "torch", ".", "sum", "(", "adder_masks", ")", "/", "float", "(", "total_add", ")", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train_fix.train": [[430, 550], ["model.train", "time.time", "time.time", "enumerate", "print", "numpy.round", "model.modules", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "train_fix.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "hasattr", "torch.autograd.Variable", "torch.autograd.Variable", "model.named_modules", "print", "time.time", "len", "m.reset_dweight_counter", "data.cuda", "target.cuda", "hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.train", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.step", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.reset_dweight_counter"], ["", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "feat_loader", "=", "[", "]", "\n", "idx_loader", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# reset ``dweight_counter`` in SE layers", "\n", "if", "args", ".", "switch", ":", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'mask'", ")", ":", "\n", "                ", "m", ".", "reset_dweight_counter", "(", ")", "\n", "\n", "# batch_time = time.time()", "\n", "\n", "", "", "", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# print('total time for one batch: {}'.format(time.time()-batch_time))", "\n", "# batch_time = time.time()", "\n", "\n", "# if args.quant_each_step:", "\n", "#     for m in model.modules():", "\n", "#         if hasattr(m, 'mask'):", "\n", "#             with torch.no_grad():", "\n", "#                 m.weight_prev = m.sparsify_and_quantize_weight()", "\n", "# start_time = time.time()", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "# print('!!!!!!!!prepare data: ', time.time()-start_time)", "\n", "# start_time = time.time()", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# print('!!!!!!!!forward time: ', time.time()-start_time)", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "# start_time = time.time()", "\n", "loss", ".", "backward", "(", ")", "\n", "# torch.cuda.synchronize()", "\n", "\n", "\n", "\n", "# fix conv (used for normaladd variant)", "\n", "# for name, m in model.named_modules():", "\n", "#     if isinstance(m, nn.Conv2d):", "\n", "#         m.weight.grad = None", "\n", "\n", "\n", "# update weight", "\n", "if", "args", ".", "switch", ":", "\n", "# Bucket Switching", "\n", "            ", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "not", "hasattr", "(", "m", ",", "'mask'", ")", ":", "\n", "                    ", "continue", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# pre = torch.sum(abs(m.weight.data) < args.threshold)", "\n", "# pre = m.weight.data", "\n", "\n", "# qweight = m.sparsify_and_quantize_weight()", "\n", "# dweight = optimizer.get_d(m.weight)", "\n", "# if dweight is None:", "\n", "#     continue", "\n", "# if args.dweight_threshold > 0.0:", "\n", "#     # adative LR", "\n", "#     # dweight = 0.1 * np.sqrt(dweight.numel()) / torch.norm(dweight) * dweight", "\n", "#     # print(dweight.mean())", "\n", "#     dweight[dweight.abs() <= args.dweight_threshold] = 0.0", "\n", "                    ", "m", ".", "weight", ".", "grad", "=", "None", "\n", "# dweight_sign = dweight.sign().float()", "\n", "# # update dweight_counter", "\n", "# m.dweight_counter.add_(dweight_sign)", "\n", "# activated = m.dweight_counter.abs() == args.switch_bar", "\n", "# dweight_sign = m.dweight_counter.sign() * activated.float()", "\n", "# # weight nonzero and gradient nonzero", "\n", "# dweight_pow = dweight_sign * qweight.sign().float()", "\n", "# dweight_mul = 2 ** dweight_pow", "\n", "# # weight zero and gradient nonzero", "\n", "# dweight_add = (qweight == 0.0).float() * m.mask * dweight_sign * args.min_weight", "\n", "# # print(torch.sum(dweight_add))", "\n", "# # update weight", "\n", "# new_weight = qweight.data * dweight_mul + dweight_add", "\n", "# if args.max_weight is not None:", "\n", "#     new_weight.clamp_(-args.max_weight, args.max_weight)", "\n", "# m.weight.data = new_weight", "\n", "# # check whether new_weight contains weights that less than given threshold", "\n", "# # now = torch.sum(abs(new_weight) < args.threshold)", "\n", "# # print(now-pre)", "\n", "# now = new_weight", "\n", "# # print(torch.sum(abs(now - pre)))", "\n", "# # reset the activated counters to 0", "\n", "# m.dweight_counter[activated] = 0.0", "\n", "\n", "", "", "", "optimizer", ".", "step", "(", ")", "\n", "# print('!!!!!!!!backward time: ', time.time()-start_time)", "\n", "\n", "# pruning_ratio = get_pruning_ratio(model)", "\n", "# if args.quant_each_step:", "\n", "#     for name, m in model.named_modules():", "\n", "#         if hasattr(m, 'mask'):", "\n", "#             with torch.no_grad():", "\n", "#                 pass # do not need if fixed shift parameters", "\n", "#                 # m.weight.data = m.sparsify_and_quantize_weight()", "\n", "#                 # reset mask??", "\n", "#                 # if pruning_ratio < 50:", "\n", "#                 #     m.set_mask()", "\n", "#     for name, m in model.named_modules():", "\n", "#         if isinstance(m, Adder2D):", "\n", "#             m.adder.data = m.round_weight_each_step(m.adder.data, m.weight_bits)", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'one epoch training time: '", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.None.train_fix.test": [[551, 568], ["model.eval", "len", "print", "numpy.round", "model", "torch.cross_entropy().item", "train_fix.accuracy", "prec1.item", "torch.autograd.Variable", "torch.autograd.Variable", "len", "len", "data.cuda", "target.cuda", "torch.cross_entropy", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy"], ["", "def", "test", "(", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.optim_shift.SGDShift.step": [[7, 44], ["closure", "p.data.add_", "d_p.add.add.add_", "torch.clone().detach", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone().detach.mul_"], "methods", ["None"], ["    ", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "2", "**", "(", "p", ".", "data", ")", "*", "log2", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "d_p", ")", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.RAdam.__init__": [[7, 11], ["dict", "torch.optim.optimizer.Optimizer.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "self", ".", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.RAdam.__setstate__": [[12, 14], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.RAdam.step": [[15, 79], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "self", ".", "buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.PlainRAdam.__init__": [[82, 86], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.PlainRAdam.__setstate__": [[87, 89], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.PlainRAdam.step": [[90, 143], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.AdamW.__init__": [[147, 151], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "warmup", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "warmup", "=", "warmup", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.AdamW.__setstate__": [[152, 154], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.radam.AdamW.step": [[155, 208], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'warmup'", "]", ">", "state", "[", "'step'", "]", ":", "\n", "                    ", "scheduled_lr", "=", "1e-8", "+", "state", "[", "'step'", "]", "*", "group", "[", "'lr'", "]", "/", "group", "[", "'warmup'", "]", "\n", "", "else", ":", "\n", "                    ", "scheduled_lr", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "step_size", "=", "scheduled_lr", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "scheduled_lr", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.ranger.Ranger.__init__": [[28, 63], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "alpha", "=", "0.5", ",", "k", "=", "6", ",", "N_sma_threshhold", "=", "5", ",", "betas", "=", "(", ".95", ",", "0.999", ")", ",", "eps", "=", "1e-5", ",", "weight_decay", "=", "0", ")", ":", "\n", "#parameter checks", "\n", "        ", "if", "not", "0.0", "<=", "alpha", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid slow update rate: '", ",", "alpha", ")", "\n", "", "if", "not", "1", "<=", "k", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid lookahead steps: '", ",", "k", ")", "\n", "", "if", "not", "lr", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid Learning Rate: '", ",", "lr", ")", "\n", "", "if", "not", "eps", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid eps: '", ",", "eps", ")", "\n", "\n", "#parameter comments:", "\n", "# beta1 (momentum) of .95 seems to work better than .90...", "\n", "#N_sma_threshold of 5 seems better in testing than 4.", "\n", "#In both cases, worth testing on your dataset (.90 vs .95, 4 vs 5) to make sure which works best for you.", "\n", "\n", "#prep defaults and init torch.optim base", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "alpha", "=", "alpha", ",", "k", "=", "k", ",", "step_counter", "=", "0", ",", "betas", "=", "betas", ",", "N_sma_threshhold", "=", "N_sma_threshhold", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "#adjustable threshold", "\n", "self", ".", "N_sma_threshhold", "=", "N_sma_threshhold", "\n", "\n", "#now we can get to work...", "\n", "#removed as we now use step from RAdam...no need for duplicate step counting", "\n", "#for group in self.param_groups:", "\n", "#    group[\"step_counter\"] = 0", "\n", "#print(\"group step counter init\")", "\n", "\n", "#look ahead params", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "k", "=", "k", "\n", "\n", "#radam buffer for state", "\n", "self", ".", "radam_buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.ranger.Ranger.__setstate__": [[77, 80], ["print", "super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "print", "(", "\"set state called\"", ")", "\n", "super", "(", "Ranger", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.optim.ranger.Ranger.step": [[82, 166], ["p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.empty_like", "state[].copy_", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "slow_p.add_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "#note - below is commented out b/c I have other work that passes back the loss as a float, and thus not a callable closure.  ", "\n", "#Uncomment if you need to use the actual closure...", "\n", "\n", "#if closure is not None:", "\n", "#loss = closure()", "\n", "\n", "#Evaluate averages and grad, update param tensors", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Ranger optimizer does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "#get state dict for this param", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "#if first time to run...init dictionary with our desired entries", "\n", "#if self.first_run_check==0:", "\n", "#self.first_run_check=1", "\n", "#print(\"Initializing slow buffer...should not see this at load from saved model!\")", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "\n", "#look ahead weight storage now in state dict ", "\n", "state", "[", "'slow_buffer'", "]", "=", "torch", ".", "empty_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'slow_buffer'", "]", ".", "copy_", "(", "p", ".", "data", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "#begin computations ", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "#compute variance mov avg", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "#compute mean moving avg", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "\n", "buffered", "=", "self", ".", "radam_buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "if", "N_sma", ">", "self", ".", "N_sma_threshhold", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "", "if", "N_sma", ">", "self", ".", "N_sma_threshhold", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "#integrated look ahead...", "\n", "#we do it at the param level instead of group level", "\n", "if", "state", "[", "'step'", "]", "%", "group", "[", "'k'", "]", "==", "0", ":", "\n", "                    ", "slow_p", "=", "state", "[", "'slow_buffer'", "]", "#get access to slow param tensor", "\n", "slow_p", ".", "add_", "(", "self", ".", "alpha", ",", "p", ".", "data", "-", "slow_p", ")", "#(fast weights - slow weights) * alpha", "\n", "p", ".", "data", ".", "copy_", "(", "slow_p", ")", "#copy interpolated weights to RAdam param tensor", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.LinearShiftQFunction.forward": [[18, 47], ["deepshift.get_shift_and_sign", "deepshift.get_shift_and_sign", "deepshift.get_shift_and_sign", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "input.mm.float", "round_to_fixed", "input.mm", "ctx.save_for_backward", "round_to_fixed", "weight_s.t", "bias.unsqueeze().expand_as", "bias.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed"], ["    ", "@", "staticmethod", "\n", "# bias is an optional argument", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ",", "bias", "=", "None", ",", "conc_weight", "=", "None", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "True", ",", "rounding", "=", "'deterministic'", ",", "shift_range", "=", "(", "0", ",", "-", "15", ")", ")", ":", "\n", "        ", "fraction_bits", "=", "16", "\n", "integer_bit", "=", "16", "\n", "\n", "shift", ",", "sign", "=", "utils", ".", "get_shift_and_sign", "(", "weight", ",", "rounding", ")", "\n", "\n", "if", "use_kernel", ":", "\n", "            ", "input_fixed_point", "=", "(", "input", "*", "(", "2", "**", "fraction_bits", ")", ")", ".", "int", "(", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "bias_fixed_point", "=", "(", "bias", "*", "(", "2", "**", "fraction_bits", ")", ")", ".", "int", "(", ")", "\n", "\n", "", "out", "=", "deepshift", ".", "kernels", ".", "linear", "(", "input_fixed_point", ",", "shift", ",", "sign", ",", "bias_fixed_point", ",", "conc_weight", ",", "use_cuda", ")", "\n", "out", "=", "out", ".", "float", "(", ")", "\n", "out", "=", "out", "/", "(", "2", "**", "fraction_bits", ")", "\n", "", "else", ":", "\n", "            ", "input", ".", "data", "=", "round_to_fixed", "(", "input", ".", "data", ",", "fraction_bits", ",", "integer_bit", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "bias", ".", "data", "=", "round_to_fixed", "(", "bias", ".", "data", ",", "fraction_bits", ",", "integer_bit", ")", "\n", "\n", "", "weight_s", "=", "(", "2.0", "**", "shift", ")", "*", "sign", "\n", "out", "=", "input", ".", "mm", "(", "weight_s", ".", "t", "(", ")", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "out", "+=", "bias", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "out", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "input", ",", "weight_s", ",", "bias", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.LinearShiftQFunction.backward": [[49, 71], ["grad_output.mm", "grad_output.t().mm", "grad_output.sum().squeeze", "grad_output.t", "grad_output.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# This is a pattern that is very convenient - at the top of backward", "\n", "# unpack saved_tensors and initialize all gradients w.r.t. inputs to", "\n", "# None. Thanks to the fact that additional trailing Nones are", "\n", "# ignored, the return statement is simple even when the function has", "\n", "# optional inputs.", "\n", "        ", "input", ",", "weight_s", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_weight", "=", "grad_bias", "=", "None", "\n", "\n", "# These needs_input_grad checks are optional and there only to", "\n", "# improve efficiency. If you want to make your code simpler, you can", "\n", "# skip them. Returning gradients for inputs that don't require it is", "\n", "# not an error.", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "mm", "(", "weight_s", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_weight", "=", "grad_output", ".", "t", "(", ")", ".", "mm", "(", "input", ")", "# * v * math.log(2)", "\n", "", "if", "bias", "is", "not", "None", "and", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "grad_bias", "=", "grad_output", ".", "sum", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.LinearShiftQ.__init__": [[73, 108], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modules_q.LinearShiftQ.reset_parameters", "tensor_constructor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modules_q.LinearShiftQ.register_parameter", "tensor_constructor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "check_grad", "=", "False", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "True", ",", "rounding", "=", "'deterministic'", ",", "weight_bits", "=", "5", ")", ":", "\n", "\n", "        ", "super", "(", "LinearShiftQ", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "use_kernel", "=", "use_kernel", "\n", "self", ".", "check_grad", "=", "check_grad", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "conc_weight", "=", "None", "\n", "self", ".", "rounding", "=", "rounding", "\n", "self", ".", "shift_range", "=", "(", "-", "1", "*", "(", "2", "**", "(", "weight_bits", "-", "1", ")", "-", "1", ")", ",", "0", ")", "# we use binary weights to represent sign", "\n", "\n", "# nn.Parameter is a special kind of Tensor, that will get", "\n", "# automatically registered as Module's parameter once it's assigned", "\n", "# as an attribute. Parameters and buffers need to be registered, or", "\n", "# they won't appear in .parameters() (doesn't apply to buffers), and", "\n", "# won't be converted when e.g. .cuda() is called. You can use", "\n", "# .register_buffer() to register buffers.", "\n", "# nn.Parameters require gradients by default.", "\n", "\n", "if", "check_grad", ":", "\n", "            ", "tensor_constructor", "=", "torch", ".", "DoubleTensor", "# double precision required to check grad", "\n", "", "else", ":", "\n", "            ", "tensor_constructor", "=", "torch", ".", "Tensor", "# In PyTorch torch.Tensor is alias torch.FloatTensor", "\n", "\n", "", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "out_features", ",", "in_features", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "# You should always register all possible parameters, but the", "\n", "# optional ones can be None if you want.", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.LinearShiftQ.reset_parameters": [[109, 116], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.LinearShiftQ.forward": [[117, 134], ["deepshift.clampabs", "deepshift.clampabs", "deepshift.clampabs", "deepshift.round_power_of_2", "deepshift.round_power_of_2", "deepshift.round_power_of_2", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "LinearShiftQFunction.apply", "deepshift.round_fixed_point.mm", "deepshift.round_power_of_2.t", "modules_q.LinearShiftQ.bias.unsqueeze().expand_as", "modules_q.LinearShiftQ.bias.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clampabs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clampabs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clampabs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "weight", ".", "data", "=", "ste", ".", "clampabs", "(", "self", ".", "weight", ".", "data", ",", "2", "**", "self", ".", "shift_range", "[", "0", "]", ",", "2", "**", "self", ".", "shift_range", "[", "1", "]", ")", "\n", "weight_q", "=", "ste", ".", "round_power_of_2", "(", "self", ".", "weight", ",", "self", ".", "rounding", ")", "\n", "input_fixed_point", "=", "ste", ".", "round_fixed_point", "(", "input", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias_fixed_point", "=", "ste", ".", "round_fixed_point", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "bias_fixed_point", "=", "None", "\n", "\n", "", "if", "self", ".", "use_kernel", ":", "\n", "            ", "return", "LinearShiftQFunction", ".", "apply", "(", "input_fixed_point", ",", "weight_q", ",", "bias_fixed_point", ",", "self", ".", "conc_weight", ",", "self", ".", "use_kernel", ",", "self", ".", "use_cuda", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "input_fixed_point", ".", "mm", "(", "weight_q", ".", "t", "(", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "out", "+=", "self", ".", "bias", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.LinearShiftQ.extra_repr": [[135, 140], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "# (Optional)Set the extra information about this module. You can test", "\n", "# it by printing an object of this class.", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.Conv2dShiftQFunction.forward": [[146, 176], ["deepshift.get_shift_and_sign", "deepshift.get_shift_and_sign", "deepshift.get_shift_and_sign", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "torch.conv2d.float", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d"], ["    ", "@", "staticmethod", "\n", "# bias is an optional argument", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ",", "bias", "=", "None", ",", "conc_weight", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "False", ")", ":", "\n", "        ", "fraction_bits", "=", "16", "\n", "integer_bits", "=", "16", "\n", "\n", "shift", ",", "sign", "=", "utils", ".", "get_shift_and_sign", "(", "weight", ",", "rounding", "=", "'deterministic'", ")", "\n", "\n", "if", "use_kernel", ":", "\n", "            ", "input_fixed_point", "=", "(", "input", "*", "(", "2", "**", "fraction_bits", ")", ")", ".", "int", "(", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "bias_fixed_point", "=", "(", "bias", "*", "(", "2", "**", "fraction_bits", ")", ")", ".", "int", "(", ")", "\n", "", "else", ":", "\n", "                ", "bias_fixed_point", "=", "None", "\n", "\n", "", "out", "=", "deepshift", ".", "kernels", ".", "conv2d", "(", "input_fixed_point", ",", "shift", ",", "sign", ",", "bias_fixed_point", ",", "conc_weight", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "use_cuda", ")", "\n", "\n", "out", "=", "out", ".", "float", "(", ")", "\n", "out", "=", "out", "/", "(", "2", "**", "fraction_bits", ")", "\n", "", "else", ":", "\n", "            ", "weight_s", "=", "(", "2.0", "**", "shift", ")", "*", "sign", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight_s", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "weight_s", ",", "bias", ")", "\n", "ctx", ".", "stride", "=", "stride", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "groups", "=", "groups", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.Conv2dShiftQFunction.backward": [[178, 204], ["torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "grad_output.sum().squeeze", "grad_output.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# This is a pattern that is very convenient - at the top of backward", "\n", "# unpack saved_tensors and initialize all gradients w.r.t. inputs to", "\n", "# None. Thanks to the fact that additional trailing Nones are", "\n", "# ignored, the return statement is simple even when the function has", "\n", "# optional inputs.", "\n", "        ", "input", ",", "weight_s", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "stride", "=", "ctx", ".", "stride", "\n", "padding", "=", "ctx", ".", "padding", "\n", "dilation", "=", "ctx", ".", "dilation", "\n", "groups", "=", "ctx", ".", "groups", "\n", "grad_input", "=", "grad_weight", "=", "grad_bias", "=", "None", "\n", "\n", "# These needs_input_grad checks are optional and there only to", "\n", "# improve efficiency. If you want to make your code simpler, you can", "\n", "# skip them. Returning gradients for inputs that don't require it is", "\n", "# not an error.", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "torch", ".", "nn", ".", "grad", ".", "conv2d_input", "(", "input", ".", "shape", ",", "weight_s", ",", "grad_output", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_weight", "=", "torch", ".", "nn", ".", "grad", ".", "conv2d_weight", "(", "input", ",", "weight_s", ".", "shape", ",", "grad_output", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "# * v * math.log(2)", "\n", "", "if", "bias", "is", "not", "None", "and", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "grad_bias", "=", "grad_output", ".", "sum", "(", "(", "0", ",", "2", ",", "3", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q._ConvNdShiftQ.__init__": [[209, 242], ["torch.Module.__init__", "modules_q._ConvNdShiftQ.reset_parameters", "ValueError", "ValueError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modules_q._ConvNdShiftQ.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "transposed", ",", "output_padding", ",", "\n", "groups", ",", "bias", ",", "padding_mode", ",", "\n", "check_grad", "=", "False", ",", "\n", "rounding", "=", "'deterministic'", ",", "weight_bits", "=", "5", ")", ":", "\n", "        ", "super", "(", "_ConvNdShiftQ", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "if", "transposed", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "rounding", "=", "rounding", "\n", "self", ".", "shift_range", "=", "(", "-", "1", "*", "(", "2", "**", "(", "weight_bits", "-", "1", ")", "-", "1", ")", ",", "0", ")", "# we use binary weights to represent sign", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q._ConvNdShiftQ.reset_parameters": [[243, 249], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q._ConvNdShiftQ.extra_repr": [[250, 264], ["s.format", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', stride={stride}'", ")", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "', output_padding={output_padding}'", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "', groups={groups}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.Conv2dShiftQ.__init__": [[266, 284], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "modules_q._ConvNdShiftQ.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "\n", "check_grad", "=", "False", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "True", ",", "\n", "rounding", "=", "'deterministic'", ",", "weight_bits", "=", "5", ",", "shift_or_full", "=", "'shift'", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "use_kernel", "=", "use_kernel", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "conc_weight", "=", "None", "\n", "self", ".", "shift_or_full", "=", "shift_or_full", "\n", "super", "(", "Conv2dShiftQ", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "False", ",", "_pair", "(", "0", ")", ",", "groups", ",", "bias", ",", "padding_mode", ",", "\n", "check_grad", ",", "\n", "rounding", ",", "weight_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules_q.Conv2dShiftQ.forward": [[286, 323], ["deepshift.clampabs", "deepshift.clampabs", "deepshift.clampabs", "deepshift.round_power_of_2", "deepshift.round_power_of_2", "deepshift.round_power_of_2", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "torch.pad", "torch.pad", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "Conv2dShiftQFunction.apply", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clampabs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clampabs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clampabs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "shift_or_full", "==", "'shift'", ":", "\n", "            ", "self", ".", "weight", ".", "data", "=", "ste", ".", "clampabs", "(", "self", ".", "weight", ".", "data", ",", "2", "**", "self", ".", "shift_range", "[", "0", "]", ",", "2", "**", "self", ".", "shift_range", "[", "1", "]", ")", "\n", "weight_q", "=", "ste", ".", "round_power_of_2", "(", "self", ".", "weight", ",", "self", ".", "rounding", ")", "\n", "# print(weight_q)", "\n", "input_fixed_point", "=", "ste", ".", "round_fixed_point", "(", "input", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "bias_fixed_point", "=", "ste", ".", "round_fixed_point", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "                ", "bias_fixed_point", "=", "None", "\n", "", "", "elif", "self", ".", "shift_or_full", "==", "'full'", ":", "# full precision training", "\n", "            ", "weight_q", "=", "self", ".", "weight", "\n", "input_fixed_point", "=", "ste", ".", "round_fixed_point", "(", "input", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "bias_fixed_point", "=", "self", ".", "bias", "\n", "", "else", ":", "\n", "                ", "bias_fixed_point", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'No such type!'", ")", "\n", "\n", "", "if", "self", ".", "padding_mode", "==", "'circular'", ":", "\n", "            ", "expanded_padding", "=", "(", "(", "self", ".", "padding", "[", "1", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "1", "]", "//", "2", ",", "\n", "(", "self", ".", "padding", "[", "0", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "0", "]", "//", "2", ")", "\n", "\n", "input_padded", "=", "F", ".", "pad", "(", "input_fixed_point", ",", "expanded_padding", ",", "mode", "=", "'circular'", ")", "\n", "padding", "=", "_pair", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "input_padded", "=", "input_fixed_point", "\n", "padding", "=", "self", ".", "padding", "\n", "\n", "", "if", "self", ".", "use_kernel", ":", "\n", "            ", "return", "Conv2dShiftQFunction", ".", "apply", "(", "input_padded", ",", "weight_q", ",", "bias_fixed_point", ",", "self", ".", "conc_weight", ",", "\n", "self", ".", "stride", ",", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "\n", "self", ".", "use_kernel", ",", "self", ".", "use_cuda", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input_padded", ",", "weight_q", ",", "bias_fixed_point", ",", "\n", "self", ".", "stride", ",", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.LinearShiftFunction.forward": [[23, 52], ["deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "deepshift.kernels.linear", "input.mm.float", "sign.clamp.clamp.clamp", "shift.clamp.clamp.clamp", "deepshift.round_to_fixed", "deepshift.round_to_fixed", "deepshift.round_to_fixed", "input.mm", "ctx.save_for_backward", "deepshift.round_to_fixed", "deepshift.round_to_fixed", "deepshift.round_to_fixed", "sign.clamp.clamp.round().sign", "v.t", "bias.unsqueeze().expand_as", "shift.clamp.clamp.round", "sign.clamp.clamp.round", "bias.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["    ", "@", "staticmethod", "\n", "# bias is an optional argument", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "shift", ",", "sign", ",", "bias", "=", "None", ",", "conc_weight", "=", "None", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "True", ",", "rounding", "=", "'deterministic'", ",", "shift_range", "=", "(", "-", "14", ",", "0", ")", ")", ":", "\n", "        ", "fraction_bits", "=", "16", "\n", "integer_bit", "=", "16", "\n", "\n", "if", "use_kernel", ":", "\n", "            ", "input_fixed_point", "=", "(", "input", "*", "(", "2", "**", "fraction_bits", ")", ")", ".", "int", "(", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "bias_fixed_point", "=", "(", "bias", "*", "(", "2", "**", "fraction_bits", ")", ")", ".", "int", "(", ")", "\n", "\n", "", "out", "=", "deepshift", ".", "kernels", ".", "linear", "(", "input_fixed_point", ",", "shift", ",", "sign", ",", "bias_fixed_point", ",", "conc_weight", ",", "use_cuda", ")", "\n", "out", "=", "out", ".", "float", "(", ")", "\n", "out", "=", "out", "/", "(", "2", "**", "fraction_bits", ")", "\n", "", "else", ":", "\n", "            ", "sign", "=", "sign", ".", "clamp", "(", "-", "1", ",", "1", ")", "\n", "shift", "=", "shift", ".", "clamp", "(", "*", "shift_range", ")", "\n", "input", ".", "data", "=", "utils", ".", "round_to_fixed", "(", "input", ".", "data", ",", "fraction_bits", ",", "integer_bit", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "bias", ".", "data", "=", "utils", ".", "round_to_fixed", "(", "bias", ".", "data", ",", "fraction_bits", ",", "integer_bit", ")", "\n", "\n", "", "v", "=", "2", "**", "shift", ".", "round", "(", ")", "*", "sign", ".", "round", "(", ")", ".", "sign", "(", ")", "\n", "out", "=", "input", ".", "mm", "(", "v", ".", "t", "(", ")", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "out", "+=", "bias", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "out", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "input", ",", "shift", ",", "sign", ",", "bias", ",", "v", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.LinearShiftFunction.backward": [[54, 81], ["grad_output.mm", "grad_output.t().mm", "grad_output.sum().squeeze", "grad_output.t", "grad_output.sum", "grad_output.t().mm", "grad_output.t"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# This is a pattern that is very convenient - at the top of backward", "\n", "# unpack saved_tensors and initialize all gradients w.r.t. inputs to", "\n", "# None. Thanks to the fact that additional trailing Nones are", "\n", "# ignored, the return statement is simple even when the function has", "\n", "# optional inputs.", "\n", "        ", "input", ",", "shift", ",", "sign", ",", "bias", ",", "v", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_shift", "=", "grad_sign", "=", "grad_bias", "=", "None", "\n", "\n", "# These needs_input_grad checks are optional and there only to", "\n", "# improve efficiency. If you want to make your code simpler, you can", "\n", "# skip them. Returning gradients for inputs that don't require it is", "\n", "# not an error.", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "mm", "(", "v", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "grad_sign", "=", "grad_output", ".", "t", "(", ")", ".", "mm", "(", "input", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "if", "grad_sign", "is", "None", ":", "\n", "                ", "grad_shift", "=", "grad_output", ".", "t", "(", ")", ".", "mm", "(", "input", ")", "*", "v", "*", "log2", "\n", "", "else", ":", "\n", "                ", "grad_shift", "=", "grad_sign", "*", "v", "*", "log2", "\n", "", "", "if", "bias", "is", "not", "None", "and", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_bias", "=", "grad_output", ".", "sum", "(", "0", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_shift", ",", "grad_sign", ",", "grad_bias", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.LinearShift.__init__": [[83, 119], ["torch.Module.__init__", "print", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modules.LinearShift.reset_parameters", "tensor_constructor", "tensor_constructor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modules.LinearShift.register_parameter", "tensor_constructor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "check_grad", "=", "False", ",", "freeze_sign", "=", "False", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "True", ",", "rounding", "=", "'deterministic'", ",", "weight_bits", "=", "5", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "super", "(", "LinearShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "use_kernel", "=", "use_kernel", "\n", "self", ".", "check_grad", "=", "check_grad", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "conc_weight", "=", "None", "\n", "self", ".", "rounding", "=", "rounding", "\n", "self", ".", "shift_range", "=", "(", "-", "1", "*", "(", "2", "**", "(", "weight_bits", "-", "1", ")", "-", "2", ")", ",", "0", ")", "# we use ternary weights to represent sign", "\n", "print", "(", "self", ".", "shift_range", ")", "\n", "# self.shift_range = (-1 * weight_bits, 0)", "\n", "# nn.Parameter is a special kind of Tensor, that will get", "\n", "# automatically registered as Module's parameter once it's assigned", "\n", "# as an attribute. Parameters and buffers need to be registered, or", "\n", "# they won't appear in .parameters() (doesn't apply to buffers), and", "\n", "# won't be converted when e.g. .cuda() is called. You can use", "\n", "# .register_buffer() to register buffers.", "\n", "# nn.Parameters require gradients by default.", "\n", "\n", "if", "check_grad", ":", "\n", "            ", "tensor_constructor", "=", "torch", ".", "DoubleTensor", "# double precision required to check grad", "\n", "", "else", ":", "\n", "            ", "tensor_constructor", "=", "torch", ".", "Tensor", "# In PyTorch torch.Tensor is alias torch.FloatTensor", "\n", "\n", "", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "sign", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "out_features", ",", "in_features", ")", ",", "requires_grad", "=", "(", "freeze_sign", "==", "False", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "# You should always register all possible parameters, but the", "\n", "# optional ones can be None if you want.", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.LinearShift.reset_parameters": [[120, 128], ["modules.LinearShift.shift.data.uniform_", "modules.LinearShift.sign.data.uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "shift", ".", "data", ".", "uniform_", "(", "*", "self", ".", "shift_range", ")", "\n", "self", ".", "sign", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "shift", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.LinearShift.forward": [[129, 142], ["deepshift.clamp", "deepshift.clamp", "deepshift.clamp", "deepshift.round", "deepshift.round", "deepshift.round", "deepshift.unsym_grad_mul", "deepshift.unsym_grad_mul", "deepshift.unsym_grad_mul", "deepshift.sign", "deepshift.sign", "deepshift.sign", "deepshift.sign", "deepshift.sign", "deepshift.sign", "LinearShiftFunction.apply", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "deepshift.round", "deepshift.round", "deepshift.round", "round"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.unsym_grad_mul", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.unsym_grad_mul", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.unsym_grad_mul", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "shift", ".", "data", "=", "ste", ".", "clamp", "(", "self", ".", "shift", ".", "data", ",", "*", "self", ".", "shift_range", ")", "\n", "shift_rounded", "=", "ste", ".", "round", "(", "self", ".", "shift", ",", "rounding", "=", "self", ".", "rounding", ")", "\n", "if", "self", ".", "threshold", "==", "None", ":", "\n", "            ", "sign_rounded_signed", "=", "ste", ".", "sign", "(", "ste", ".", "round", "(", "self", ".", "sign", ",", "rounding", "=", "self", ".", "rounding", ")", ")", "\n", "", "else", ":", "\n", "            ", "sign_rounded_signed", "=", "ste", ".", "sign", "(", "round", "(", "self", ".", "sign", ",", "self", ".", "threshold", ")", ")", "\n", "", "weight_ps", "=", "ste", ".", "unsym_grad_mul", "(", "2", "**", "shift_rounded", ",", "sign_rounded_signed", ")", "\n", "\n", "if", "self", ".", "use_kernel", ":", "\n", "            ", "return", "LinearShiftFunction", ".", "apply", "(", "input", ",", "self", ".", "shift", ",", "self", ".", "sign", ",", "self", ".", "bias", ",", "self", ".", "conc_weight", ",", "self", ".", "use_kernel", ",", "self", ".", "use_cuda", ",", "self", ".", "rounding", ",", "self", ".", "shift_range", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "linear", "(", "input", ",", "weight_ps", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.LinearShift.extra_repr": [[143, 148], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "# (Optional)Set the extra information about this module. You can test", "\n", "# it by printing an object of this class.", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.Conv2dShiftFunction.forward": [[157, 199], ["deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "deepshift.kernels.conv2d", "torch.conv2d.float", "shift.clamp.clamp.clamp", "sign.clamp.clamp.clamp", "deepshift.round_to_fixed", "deepshift.round_to_fixed", "deepshift.round_to_fixed", "deepshift.round", "deepshift.round", "deepshift.round", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ctx.save_for_backward", "deepshift.round_to_fixed", "deepshift.round_to_fixed", "deepshift.round_to_fixed", "deepshift.round", "deepshift.round", "deepshift.round"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["    ", "@", "staticmethod", "\n", "# bias is an optional argument", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "shift", ",", "sign", ",", "bias", "=", "None", ",", "conc_weight", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "False", ",", "rounding", "=", "'deterministic'", ",", "shift_range", "=", "(", "-", "14", ",", "0", ")", ")", ":", "\n", "        ", "fraction_bits", "=", "16", "\n", "integer_bits", "=", "16", "\n", "\n", "\n", "# start_time = time.time()", "\n", "if", "use_kernel", ":", "\n", "            ", "input_fixed_point", "=", "(", "input", "*", "(", "2", "**", "fraction_bits", ")", ")", ".", "int", "(", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "bias_fixed_point", "=", "(", "bias", "*", "(", "2", "**", "fraction_bits", ")", ")", ".", "int", "(", ")", "\n", "", "else", ":", "\n", "                ", "bias_fixed_point", "=", "None", "\n", "\n", "", "out", "=", "deepshift", ".", "kernels", ".", "conv2d", "(", "input_fixed_point", ",", "shift", ",", "sign", ",", "bias_fixed_point", ",", "conc_weight", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "use_cuda", ")", "\n", "\n", "out", "=", "out", ".", "float", "(", ")", "\n", "out", "=", "out", "/", "(", "2", "**", "fraction_bits", ")", "\n", "", "else", ":", "\n", "            ", "shift", "=", "shift", ".", "clamp", "(", "*", "shift_range", ")", "\n", "sign", "=", "sign", ".", "clamp", "(", "-", "1", ",", "1", ")", "\n", "input", ".", "data", "=", "utils", ".", "round_to_fixed", "(", "input", ".", "data", ",", "fraction_bits", ",", "integer_bits", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "bias", ".", "data", "=", "utils", ".", "round_to_fixed", "(", "bias", ".", "data", ",", "fraction_bits", ",", "integer_bits", ")", "\n", "\n", "# shift_rounded = utils.round(self.shift, stochastic=False)", "\n", "# sign_rounded_signed = torch.sign(utils.round(self.sign, stochastic=False))", "\n", "\n", "", "shift_rounded", "=", "utils", ".", "round", "(", "shift", ",", "stochastic", "=", "False", ")", "\n", "sign_rounded_signed", "=", "torch", ".", "sign", "(", "utils", ".", "round", "(", "sign", ",", "stochastic", "=", "False", ")", ")", "\n", "v", "=", "2", "**", "shift_rounded", "*", "sign_rounded_signed", "\n", "out", "=", "F", ".", "conv2d", "(", "input", ",", "v", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "shift", ",", "sign", ",", "bias", ",", "v", ")", "\n", "ctx", ".", "stride", "=", "stride", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "groups", "=", "groups", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.Conv2dShiftFunction.backward": [[201, 232], ["torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_input", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "grad_output.sum().squeeze", "grad_output.sum", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight", "torch.nn.grad.conv2d_weight"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# This is a pattern that is very convenient - at the top of backward", "\n", "# unpack saved_tensors and initialize all gradients w.r.t. inputs to", "\n", "# None. Thanks to the fact that additional trailing Nones are", "\n", "# ignored, the return statement is simple even when the function has", "\n", "# optional inputs.", "\n", "        ", "input", ",", "shift", ",", "sign", ",", "bias", ",", "v", "=", "ctx", ".", "saved_tensors", "\n", "stride", "=", "ctx", ".", "stride", "\n", "padding", "=", "ctx", ".", "padding", "\n", "dilation", "=", "ctx", ".", "dilation", "\n", "groups", "=", "ctx", ".", "groups", "\n", "grad_input", "=", "grad_shift", "=", "grad_sign", "=", "grad_bias", "=", "None", "\n", "\n", "# These needs_input_grad checks are optional and there only to", "\n", "# improve efficiency. If you want to make your code simpler, you can", "\n", "# skip them. Returning gradients for inputs that don't require it is", "\n", "# not an error.", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "torch", ".", "nn", ".", "grad", ".", "conv2d_input", "(", "input", ".", "shape", ",", "v", ",", "grad_output", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "grad_sign", "=", "torch", ".", "nn", ".", "grad", ".", "conv2d_weight", "(", "input", ",", "v", ".", "shape", ",", "grad_output", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "if", "grad_sign", "is", "None", ":", "\n", "                ", "grad_shift", "=", "torch", ".", "nn", ".", "grad", ".", "conv2d_weight", "(", "input", ",", "v", ".", "shape", ",", "grad_output", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "*", "v", "*", "log2", "\n", "", "else", ":", "\n", "                ", "grad_shift", "=", "grad_sign", "*", "v", "*", "log2", "\n", "", "", "if", "bias", "is", "not", "None", "and", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_bias", "=", "grad_output", ".", "sum", "(", "(", "0", ",", "2", ",", "3", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_shift", ",", "grad_sign", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules._ConvNdShift.__init__": [[237, 284], ["torch.Module.__init__", "modules._ConvNdShift.reset_parameters", "ValueError", "ValueError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modules._ConvNdShift.register_parameter", "tensor_constructor", "tensor_constructor", "tensor_constructor", "tensor_constructor", "tensor_constructor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "transposed", ",", "output_padding", ",", "\n", "groups", ",", "bias", ",", "padding_mode", ",", "\n", "check_grad", "=", "False", ",", "freeze_sign", "=", "False", ",", "\n", "rounding", "=", "'deterministic'", ",", "weight_bits", "=", "5", ")", ":", "\n", "        ", "super", "(", "_ConvNdShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "self", ".", "rounding", "=", "rounding", "\n", "self", ".", "shift_range", "=", "(", "-", "1", "*", "(", "2", "**", "(", "weight_bits", "-", "1", ")", "-", "2", ")", ",", "0", ")", "# we use ternary weights to represent sign", "\n", "# for ps", "\n", "# self.shift_range = (-1 * weight_bits, 0)", "\n", "\n", "if", "check_grad", ":", "\n", "            ", "tensor_constructor", "=", "torch", ".", "DoubleTensor", "# double precision required to check grad", "\n", "", "else", ":", "\n", "            ", "tensor_constructor", "=", "torch", ".", "Tensor", "# In PyTorch torch.Tensor is alias torch.FloatTensor", "\n", "\n", "", "if", "transposed", ":", "\n", "            ", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "\n", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "sign", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "\n", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", ",", "\n", "requires_grad", "=", "(", "freeze_sign", "==", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "\n", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "self", ".", "sign", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "\n", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ",", "\n", "requires_grad", "=", "(", "freeze_sign", "==", "False", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "tensor_constructor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", "weight_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules._ConvNdShift.reset_parameters": [[285, 293], ["modules._ConvNdShift.shift.data.uniform_", "modules._ConvNdShift.sign.data.uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "weight_bits", ")", ":", "\n", "        ", "self", ".", "shift", ".", "data", ".", "uniform_", "(", "*", "self", ".", "shift_range", ")", "# (-0.1, 0.1)", "\n", "self", ".", "sign", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "# (-0.1, 0.1)", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "shift", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules._ConvNdShift.extra_repr": [[294, 308], ["s.format", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', stride={stride}'", ")", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "', output_padding={output_padding}'", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "', groups={groups}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.Conv2dShift.__init__": [[314, 331], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "modules._ConvNdShift.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ",", "\n", "check_grad", "=", "False", ",", "freeze_sign", "=", "False", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "True", ",", "rounding", "=", "'determinstic'", ",", "weight_bits", "=", "5", ",", "threshold", "=", "0.3", ",", "quant_bits", "=", "16", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "use_kernel", "=", "use_kernel", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "conc_weight", "=", "None", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "quant_bits", "=", "quant_bits", "\n", "super", "(", "Conv2dShift", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "False", ",", "_pair", "(", "0", ")", ",", "groups", ",", "bias", ",", "padding_mode", ",", "\n", "check_grad", ",", "freeze_sign", ",", "rounding", ",", "weight_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.modules.Conv2dShift.forward": [[333, 376], ["deepshift.clamp", "deepshift.clamp", "deepshift.clamp", "deepshift.round", "deepshift.round", "deepshift.round", "deepshift.unsym_grad_mul", "deepshift.unsym_grad_mul", "deepshift.unsym_grad_mul", "deepshift.sign", "deepshift.sign", "deepshift.sign", "deepshift.sign", "deepshift.sign", "deepshift.sign", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "deepshift.round_fixed_point", "torch.pad", "torch.pad", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "Conv2dShiftFunction.apply", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "adder.quantize.quantize_grad", "deepshift.round", "deepshift.round", "deepshift.round", "deepshift.myround", "deepshift.myround", "deepshift.myround"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.unsym_grad_mul", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.unsym_grad_mul", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.unsym_grad_mul", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.myround", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.myround", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.myround"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "shift", ".", "data", "=", "ste", ".", "clamp", "(", "self", ".", "shift", ".", "data", ",", "*", "self", ".", "shift_range", ")", "\n", "shift_rounded", "=", "ste", ".", "round", "(", "self", ".", "shift", ",", "self", ".", "rounding", ")", "\n", "# print(self.threshold)", "\n", "if", "self", ".", "threshold", "is", "None", ":", "\n", "# print('default threshold')", "\n", "            ", "sign_rounded_signed", "=", "ste", ".", "sign", "(", "ste", ".", "round", "(", "self", ".", "sign", ",", "self", ".", "rounding", ")", ")", "\n", "", "else", ":", "\n", "            ", "sign_rounded_signed", "=", "ste", ".", "sign", "(", "ste", ".", "myround", "(", "self", ".", "sign", ",", "self", ".", "threshold", ")", ")", "\n", "", "weight_ps", "=", "ste", ".", "unsym_grad_mul", "(", "2", "**", "shift_rounded", ",", "sign_rounded_signed", ")", "\n", "# input_fixed_point = ste.round_fixed_point(input, quant_bits=self.quant_bits)", "\n", "if", "self", ".", "quant_bits", ">", "0", ":", "\n", "            ", "input_fixed_point", "=", "ste", ".", "round_fixed_point", "(", "input", ",", "quant_bits", "=", "self", ".", "quant_bits", ")", "\n", "", "else", ":", "\n", "            ", "input_fixed_point", "=", "ste", ".", "round_fixed_point", "(", "input", ",", "quant_bits", "=", "self", ".", "quant_bits", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias_fixed_point", "=", "ste", ".", "round_fixed_point", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "bias_fixed_point", "=", "None", "\n", "\n", "", "if", "self", ".", "padding_mode", "==", "'circular'", ":", "\n", "            ", "expanded_padding", "=", "(", "(", "self", ".", "padding", "[", "1", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "1", "]", "//", "2", ",", "\n", "(", "self", ".", "padding", "[", "0", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "0", "]", "//", "2", ")", "\n", "\n", "input_padded", "=", "F", ".", "pad", "(", "input_fixed_point", ",", "expanded_padding", ",", "mode", "=", "'circular'", ")", "\n", "padding", "=", "_pair", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "input_padded", "=", "input_fixed_point", "\n", "padding", "=", "self", ".", "padding", "\n", "\n", "", "if", "self", ".", "use_kernel", ":", "\n", "# if True:", "\n", "            ", "output", "=", "Conv2dShiftFunction", ".", "apply", "(", "input_padded", ",", "self", ".", "shift", ",", "self", ".", "sign", ",", "bias_fixed_point", ",", "self", ".", "conc_weight", ",", "\n", "self", ".", "stride", ",", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "\n", "self", ".", "use_kernel", ",", "self", ".", "use_cuda", ",", "self", ".", "rounding", ",", "self", ".", "shift_range", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input_padded", ",", "weight_ps", ",", "bias_fixed_point", ",", "\n", "self", ".", "stride", ",", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "# quantize backpropogation", "\n", "", "if", "self", ".", "quant_bits", ">", "0", ":", "\n", "            ", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "quant_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "output", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.convert.convert_to_shift": [[11, 82], ["reversed", "model._modules.items", "len", "convert.convert_to_shift", "list", "type", "deepshift.modules_q.LinearShiftQ", "deepshift.modules_q.LinearShiftQ", "deepshift.modules_q.LinearShiftQ", "type", "deepshift.modules_q.Conv2dShiftQ", "deepshift.modules_q.Conv2dShiftQ", "deepshift.modules_q.Conv2dShiftQ", "module.children", "deepshift.round_to_fixed", "deepshift.compress_bits", "deepshift.modules.LinearShift", "deepshift.modules.LinearShift", "deepshift.modules.LinearShift", "ValueError", "deepshift.round_to_fixed", "deepshift.compress_bits", "deepshift.modules.Conv2dShift", "deepshift.modules.Conv2dShift", "deepshift.modules.Conv2dShift", "deepshift.get_shift_and_sign", "deepshift.get_shift_and_sign", "deepshift.compress_bits", "deepshift.get_shift_and_sign", "deepshift.compress_bits", "deepshift.get_shift_and_sign"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.convert.convert_to_shift", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.compress_bits", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.compress_bits", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.compress_bits", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.compress_bits", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign"], ["def", "convert_to_shift", "(", "model", ",", "shift_depth", ",", "shift_type", ",", "convert_all_linear", "=", "True", ",", "convert_weights", "=", "False", ",", "freeze_sign", "=", "False", ",", "use_kernel", "=", "False", ",", "use_cuda", "=", "True", ",", "\n", "rounding", "=", "'deterministic'", ",", "weight_bits", "=", "5", ",", "sign_threshold_ps", "=", "None", ",", "quant_bits", "=", "16", ")", ":", "\n", "    ", "conversion_count", "=", "0", "\n", "for", "name", ",", "module", "in", "reversed", "(", "model", ".", "_modules", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "module", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "# recurse", "\n", "            ", "model", ".", "_modules", "[", "name", "]", ",", "num_converted", "=", "convert_to_shift", "(", "model", "=", "module", ",", "shift_depth", "=", "shift_depth", "-", "conversion_count", ",", "shift_type", "=", "shift_type", ",", "convert_all_linear", "=", "convert_all_linear", ",", "convert_weights", "=", "convert_weights", ",", "freeze_sign", "=", "freeze_sign", ",", "use_kernel", "=", "use_kernel", ",", "use_cuda", "=", "use_cuda", ",", "rounding", "=", "rounding", ",", "weight_bits", "=", "weight_bits", ")", "\n", "conversion_count", "+=", "num_converted", "\n", "", "if", "type", "(", "module", ")", "==", "nn", ".", "Linear", "and", "(", "convert_all_linear", "==", "True", "or", "conversion_count", "<", "shift_depth", ")", ":", "\n", "            ", "linear", "=", "module", "\n", "\n", "if", "shift_type", "==", "'Q'", ":", "\n", "                ", "shift_linear", "=", "deepshift", ".", "modules_q", ".", "LinearShiftQ", "(", "module", ".", "in_features", ",", "module", ".", "out_features", ",", "module", ".", "bias", "is", "not", "None", ",", "use_kernel", "=", "use_kernel", ",", "use_cuda", "=", "use_cuda", ",", "rounding", "=", "rounding", ",", "weight_bits", "=", "weight_bits", ")", "\n", "shift_linear", ".", "weight", "=", "linear", ".", "weight", "\n", "if", "linear", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "shift_linear", ".", "bias", ".", "data", "=", "utils", ".", "round_to_fixed", "(", "linear", ".", "bias", ",", "fraction", "=", "16", ",", "integer", "=", "16", ")", "\n", "\n", "", "if", "use_cuda", "==", "True", "and", "use_kernel", "==", "True", ":", "\n", "                    ", "shift_linear", ".", "conc_weight", "=", "utils", ".", "compress_bits", "(", "*", "utils", ".", "get_shift_and_sign", "(", "linear", ".", "weight", ")", ")", "\n", "", "", "elif", "shift_type", "==", "'PS'", ":", "\n", "                ", "shift_linear", "=", "deepshift", ".", "modules", ".", "LinearShift", "(", "module", ".", "in_features", ",", "module", ".", "out_features", ",", "module", ".", "bias", "is", "not", "None", ",", "freeze_sign", "=", "freeze_sign", ",", "use_kernel", "=", "use_kernel", ",", "\n", "use_cuda", "=", "use_cuda", ",", "rounding", "=", "rounding", ",", "weight_bits", "=", "weight_bits", ",", "threshold", "=", "sign_threshold_ps", ")", "\n", "\n", "if", "convert_weights", "==", "True", ":", "\n", "                    ", "shift_linear", ".", "shift", ".", "data", ",", "shift_linear", ".", "sign", ".", "data", "=", "utils", ".", "get_shift_and_sign", "(", "linear", ".", "weight", ")", "\n", "shift_linear", ".", "bias", "=", "linear", ".", "bias", "\n", "\n", "if", "use_cuda", "==", "True", "and", "use_kernel", "==", "True", ":", "\n", "                        ", "shift_linear", ".", "conc_weight", "=", "utils", ".", "compress_bits", "(", "shift_linear", ".", "shift", ".", "data", ",", "shift_linear", ".", "sign", ".", "data", ")", "\n", "", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unsupported shift_type argument: '", ",", "shift_type", ")", "\n", "\n", "# model._modules[name] = shift_linear", "\n", "", "model", ".", "_modules", "[", "name", "]", "=", "linear", "# no shift", "\n", "if", "convert_all_linear", "==", "False", ":", "\n", "                ", "conversion_count", "+=", "1", "\n", "\n", "", "", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", "and", "conversion_count", "<", "shift_depth", ":", "\n", "            ", "conv2d", "=", "module", "\n", "\n", "if", "shift_type", "==", "'Q'", ":", "\n", "                ", "shift_conv2d", "=", "deepshift", ".", "modules_q", ".", "Conv2dShiftQ", "(", "module", ".", "in_channels", ",", "module", ".", "out_channels", ",", "module", ".", "kernel_size", ",", "module", ".", "stride", ",", "\n", "module", ".", "padding", ",", "module", ".", "dilation", ",", "module", ".", "groups", ",", "\n", "module", ".", "bias", "is", "not", "None", ",", "module", ".", "padding_mode", ",", "\n", "use_kernel", "=", "use_kernel", ",", "use_cuda", "=", "use_cuda", ",", "\n", "rounding", "=", "rounding", ",", "weight_bits", "=", "weight_bits", ")", "\n", "shift_conv2d", ".", "weight", "=", "conv2d", ".", "weight", "\n", "if", "conv2d", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "shift_conv2d", ".", "bias", ".", "data", "=", "utils", ".", "round_to_fixed", "(", "conv2d", ".", "bias", ",", "fraction", "=", "16", ",", "integer", "=", "16", ")", "\n", "\n", "", "if", "use_cuda", "==", "True", "and", "use_kernel", "==", "True", ":", "\n", "                    ", "shift_conv2d", ".", "conc_weight", "=", "utils", ".", "compress_bits", "(", "*", "utils", ".", "get_shift_and_sign", "(", "conv2d", ".", "weight", ")", ")", "\n", "\n", "", "", "elif", "shift_type", "==", "'PS'", ":", "\n", "                ", "shift_conv2d", "=", "deepshift", ".", "modules", ".", "Conv2dShift", "(", "module", ".", "in_channels", ",", "module", ".", "out_channels", ",", "module", ".", "kernel_size", ",", "module", ".", "stride", ",", "\n", "module", ".", "padding", ",", "module", ".", "dilation", ",", "module", ".", "groups", ",", "\n", "module", ".", "bias", "is", "not", "None", ",", "module", ".", "padding_mode", ",", "\n", "freeze_sign", "=", "freeze_sign", ",", "use_kernel", "=", "use_kernel", ",", "use_cuda", "=", "use_cuda", ",", "\n", "rounding", "=", "rounding", ",", "weight_bits", "=", "weight_bits", ",", "threshold", "=", "sign_threshold_ps", ",", "quant_bits", "=", "quant_bits", ")", "\n", "\n", "if", "convert_weights", "==", "True", ":", "\n", "                    ", "shift_conv2d", ".", "shift", ".", "data", ",", "shift_conv2d", ".", "sign", ".", "data", "=", "utils", ".", "get_shift_and_sign", "(", "conv2d", ".", "weight", ")", "\n", "shift_conv2d", ".", "bias", "=", "conv2d", ".", "bias", "\n", "\n", "", "if", "use_cuda", "==", "True", "and", "use_kernel", "==", "True", ":", "\n", "                    ", "shift_conv2d", ".", "conc_weight", "=", "utils", ".", "compress_bits", "(", "shift_conv2d", ".", "shift", ".", "data", ",", "shift_conv2d", ".", "sign", ".", "data", ")", "\n", "\n", "", "", "model", ".", "_modules", "[", "name", "]", "=", "shift_conv2d", "\n", "conversion_count", "+=", "1", "\n", "\n", "", "", "return", "model", ",", "conversion_count", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.convert.round_shift_weights": [[83, 110], ["copy.deepcopy.eval", "reversed", "copy.deepcopy", "copy.deepcopy._modules.items", "len", "convert.round_shift_weights", "module.shift.round", "module.sign.round().sign", "list", "type", "type", "deepshift.round_to_fixed", "deepshift.round_power_of_2", "module.children", "module.sign.round", "type", "type", "deepshift.round_to_fixed"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.convert.round_shift_weights", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed"], ["", "def", "round_shift_weights", "(", "model", ",", "clone", "=", "False", ")", ":", "\n", "\n", "# for name, param in model.named_parameters():", "\n", "#     if param.is_leaf:", "\n", "#         print(name)", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "if", "(", "clone", ")", ":", "\n", "        ", "model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "\n", "", "for", "name", ",", "module", "in", "reversed", "(", "model", ".", "_modules", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "module", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "# recurse", "\n", "            ", "model", ".", "_modules", "[", "name", "]", "=", "round_shift_weights", "(", "model", "=", "module", ")", "\n", "\n", "", "if", "type", "(", "module", ")", "==", "deepshift", ".", "modules", ".", "LinearShift", "or", "type", "(", "module", ")", "==", "deepshift", ".", "modules", ".", "Conv2dShift", ":", "\n", "            ", "module", ".", "shift", ".", "data", "=", "module", ".", "shift", ".", "round", "(", ")", "\n", "module", ".", "sign", ".", "data", "=", "module", ".", "sign", ".", "round", "(", ")", ".", "sign", "(", ")", "\n", "\n", "if", "(", "module", ".", "bias", "is", "not", "None", ")", ":", "\n", "                ", "module", ".", "bias", ".", "data", "=", "utils", ".", "round_to_fixed", "(", "module", ".", "bias", ",", "fraction", "=", "16", ",", "integer", "=", "16", ")", "\n", "", "", "elif", "type", "(", "module", ")", "==", "deepshift", ".", "modules_q", ".", "LinearShiftQ", "or", "type", "(", "module", ")", "==", "deepshift", ".", "modules_q", ".", "Conv2dShiftQ", ":", "\n", "            ", "module", ".", "weight", ".", "data", "=", "utils", ".", "round_power_of_2", "(", "module", ".", "weight", ")", "\n", "\n", "if", "(", "module", ".", "bias", "is", "not", "None", ")", ":", "\n", "                ", "module", ".", "bias", ".", "data", "=", "utils", ".", "round_to_fixed", "(", "module", ".", "bias", ",", "fraction", "=", "16", ",", "integer", "=", "16", ")", "\n", "\n", "", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.convert.count_layer_type": [[111, 121], ["model._modules.items", "len", "convert.count_layer_type", "type", "list", "module.children"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.convert.count_layer_type"], ["", "def", "count_layer_type", "(", "model", ",", "layer_type", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "name", ",", "module", "in", "model", ".", "_modules", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "module", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "# recurse", "\n", "            ", "count", "+=", "count_layer_type", "(", "model", "=", "module", ",", "layer_type", "=", "layer_type", ")", "\n", "", "if", "type", "(", "module", ")", "==", "layer_type", ":", "\n", "            ", "count", "+=", "1", "\n", "\n", "", "", "return", "count", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.ConcWeight.__init__": [[43, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", "=", "None", ",", "base", "=", "0", ",", "bits", "=", "8", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "base", "=", "base", "\n", "self", ".", "bits", "=", "bits", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed": [[7, 19], ["math.pow", "math.pow", "torch.clamp", "torch.floor", "torch.sign"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign"], ["def", "round_to_fixed", "(", "input", ",", "fraction", "=", "16", ",", "integer", "=", "16", ")", ":", "\n", "    ", "assert", "integer", ">=", "1", ",", "integer", "\n", "if", "integer", "==", "1", ":", "\n", "        ", "return", "torch", ".", "sign", "(", "input", ")", "-", "1", "\n", "", "delta", "=", "math", ".", "pow", "(", "2.0", ",", "-", "(", "fraction", ")", ")", "\n", "bound", "=", "math", ".", "pow", "(", "2.0", ",", "integer", "-", "1", ")", "\n", "min_val", "=", "-", "bound", "\n", "max_val", "=", "bound", "-", "1", "\n", "rounded", "=", "torch", ".", "floor", "(", "input", "/", "delta", ")", "*", "delta", "\n", "\n", "clipped_value", "=", "torch", ".", "clamp", "(", "rounded", ",", "min_val", ",", "max_val", ")", "\n", "return", "clipped_value", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign": [[20, 27], ["torch.sign", "torch.abs", "utils.round", "torch.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log"], ["", "def", "get_shift_and_sign", "(", "x", ",", "rounding", "=", "'deterministic'", ")", ":", "\n", "    ", "sign", "=", "torch", ".", "sign", "(", "x", ")", "\n", "\n", "x_abs", "=", "torch", ".", "abs", "(", "x", ")", "\n", "shift", "=", "round", "(", "torch", ".", "log", "(", "x_abs", ")", "/", "np", ".", "log", "(", "2", ")", ",", "rounding", ")", "\n", "\n", "return", "shift", ",", "sign", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_power_of_2": [[28, 33], ["utils.get_shift_and_sign"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.get_shift_and_sign"], ["", "def", "round_power_of_2", "(", "x", ",", "rounding", "=", "'deterministic'", ")", ":", "\n", "    ", "shift", ",", "sign", "=", "get_shift_and_sign", "(", "x", ",", "rounding", ")", "\n", "# print(shift)", "\n", "x_rounded", "=", "(", "2.0", "**", "shift", ")", "*", "sign", "\n", "return", "x_rounded", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round": [[34, 41], ["x.floor", "x.round", "torch.bernoulli"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "round", "(", "x", ",", "rounding", "=", "'deterministic'", ")", ":", "\n", "    ", "assert", "(", "rounding", "in", "[", "'deterministic'", ",", "'stochastic'", "]", ")", "\n", "if", "rounding", "==", "'stochastic'", ":", "\n", "        ", "x_floor", "=", "x", ".", "floor", "(", ")", "\n", "return", "x_floor", "+", "torch", ".", "bernoulli", "(", "x", "-", "x_floor", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", ".", "round", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.compress_bits": [[49, 77], ["utils.ConcWeight", "math.ceil", "int", "int", "int", "deepshift.kernels.compress_sign_and_shift", "len", "shift.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "torch.min", "shift.unsqueeze().unsqueeze.int().cuda", "sign.int().cuda", "torch.log", "numpy.log", "shift.unsqueeze().unsqueeze.unsqueeze", "shift.unsqueeze().unsqueeze.int", "sign.int", "torch.min"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.compress_sign_and_shift", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log"], ["", "", "def", "compress_bits", "(", "shift", ",", "sign", ")", ":", "\n", "    ", "conc_weight", "=", "ConcWeight", "(", ")", "\n", "\n", "if", "len", "(", "shift", ".", "shape", ")", "==", "2", ":", "\n", "        ", "shift", "=", "shift", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# if sign is ternary, then use a big shift value that is equivalent to multiplying by zero", "\n", "", "zero_sign_indices", "=", "(", "sign", "==", "0", ")", ".", "nonzero", "(", ")", "\n", "shift", "[", "zero_sign_indices", "]", "=", "-", "32", "\n", "sign", "[", "zero_sign_indices", "]", "=", "+", "1", "\n", "\n", "conc_weight", ".", "bits", "=", "math", ".", "ceil", "(", "torch", ".", "log", "(", "-", "torch", ".", "min", "(", "shift", ")", "+", "1", ")", "/", "np", ".", "log", "(", "2", ")", ")", "\n", "# treat shift to the right as the default", "\n", "shift", "=", "shift", "*", "-", "1", "\n", "minimum", "=", "int", "(", "torch", ".", "min", "(", "shift", ")", ")", "\n", "if", "minimum", "<", "0", ":", "\n", "        ", "conc_weight", ".", "base", "=", "minimum", "\n", "shift", "=", "shift", "-", "minimum", "\n", "", "else", ":", "\n", "        ", "conc_weight", ".", "base", "=", "0", "\n", "\n", "", "num", "=", "int", "(", "32", "/", "(", "conc_weight", ".", "bits", "+", "1", ")", ")", "\n", "row_length", "=", "int", "(", "(", "shift", ".", "shape", "[", "1", "]", "*", "shift", ".", "shape", "[", "2", "]", "*", "shift", ".", "shape", "[", "3", "]", "+", "num", "-", "1", ")", "/", "num", ")", "\n", "size", "=", "row_length", "*", "shift", ".", "shape", "[", "0", "]", "\n", "\n", "conc_weight", ".", "data", "=", "deepshift", ".", "kernels", ".", "compress_sign_and_shift", "(", "shift", ".", "int", "(", ")", ".", "cuda", "(", ")", ",", "sign", ".", "int", "(", ")", ".", "cuda", "(", ")", ",", "size", ",", "conc_weight", ".", "base", ",", "conc_weight", ".", "bits", ",", "row_length", ",", "num", ")", "\n", "\n", "return", "conc_weight", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.myRoundFunction.forward": [[14, 17], ["ste.dynamic_range_for_sign"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.dynamic_range_for_sign"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "threshold", ")", ":", "\n", "        ", "return", "dynamic_range_for_sign", "(", "input", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.myRoundFunction.backward": [[18, 21], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.RoundPowerOf2.forward": [[29, 32], ["deepshift.round_power_of_2"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "stochastic", "=", "False", ")", ":", "\n", "        ", "return", "utils", ".", "round_power_of_2", "(", "input", ",", "stochastic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.RoundPowerOf2.backward": [[33, 36], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.RoundFixedPoint.forward": [[41, 44], ["deepshift.round_to_fixed"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.utils.round_to_fixed"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "quant_bits", ")", ":", "\n", "        ", "return", "utils", ".", "round_to_fixed", "(", "input", ",", "fraction", "=", "quant_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.RoundFixedPoint.backward": [[45, 48], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.RoundFunction.forward": [[53, 56], ["deepshift.round"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "rounding", "=", "'deterministic'", ")", ":", "\n", "        ", "return", "utils", ".", "round", "(", "input", ",", "rounding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.RoundFunction.backward": [[57, 60], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.SignFunction.forward": [[65, 68], ["torch.sign"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "sign", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.SignFunction.backward": [[69, 72], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.ClampFunction.forward": [[77, 80], ["torch.clamp"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "min", ",", "max", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "input", ",", "min", ",", "max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.ClampFunction.backward": [[81, 84], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.ClampAbsFunction.forward": [[89, 99], ["torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "min", ",", "max", ")", ":", "\n", "        ", "assert", "(", "min", ">=", "0", "and", "max", ">=", "0", ")", "\n", "\n", "input", "[", "input", ">", "max", "]", "=", "max", "\n", "input", "[", "input", "<", "-", "max", "]", "=", "-", "max", "\n", "\n", "input", "[", "(", "input", ">", "torch", ".", "zeros_like", "(", "input", ")", ")", "&", "(", "input", "<", "min", ")", "]", "=", "min", "\n", "input", "[", "(", "input", "<", "torch", ".", "zeros_like", "(", "input", ")", ")", "&", "(", "input", ">", "-", "min", ")", "]", "=", "-", "min", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.ClampAbsFunction.backward": [[100, 103], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.LogFunction.forward": [[108, 111], ["torch.log"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "log", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.LogFunction.backward": [[112, 115], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.UnsymmetricGradMulFunction.forward": [[120, 124], ["ctx.save_for_backward", "torch.mul"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input1", ",", "input2", ")", "\n", "return", "torch", ".", "mul", "(", "input1", ",", "input2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.UnsymmetricGradMulFunction.backward": [[125, 129], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input1", ",", "input2", "=", "ctx", ".", "saved_tensors", "\n", "return", "grad_output", "*", "input2", ",", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.AbsFunction.forward": [[135, 138], ["torch.abs"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "abs", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.AbsFunction.backward": [[139, 142], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.dynamic_range_for_sign": [[5, 12], ["torch.no_grad"], "function", ["None"], ["def", "dynamic_range_for_sign", "(", "sign", ",", "threshold", ")", ":", "\n", "# print(sign, threshold)", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "sign", ".", "data", "[", "sign", ".", "data", "<", "-", "threshold", "]", "=", "-", "1", "\n", "sign", ".", "data", "[", "sign", ".", "data", ">", "threshold", "]", "=", "1", "\n", "sign", ".", "data", "[", "(", "-", "threshold", "<=", "sign", ".", "data", ")", "&", "(", "sign", ".", "data", "<=", "threshold", ")", "]", "=", "0", "\n", "", "return", "sign", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.myround": [[22, 24], ["myRoundFunction.apply"], "function", ["None"], ["", "", "def", "myround", "(", "input", ",", "threshold", ")", ":", "\n", "    ", "return", "myRoundFunction", ".", "apply", "(", "input", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_power_of_2": [[37, 39], ["RoundPowerOf2.apply"], "function", ["None"], ["", "", "def", "round_power_of_2", "(", "input", ",", "stochastic", "=", "False", ")", ":", "\n", "    ", "return", "RoundPowerOf2", ".", "apply", "(", "input", ",", "stochastic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round_fixed_point": [[49, 51], ["RoundFixedPoint.apply"], "function", ["None"], ["", "", "def", "round_fixed_point", "(", "input", ",", "quant_bits", ")", ":", "\n", "    ", "return", "RoundFixedPoint", ".", "apply", "(", "input", ",", "quant_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.round": [[61, 63], ["RoundFunction.apply"], "function", ["None"], ["", "", "def", "round", "(", "input", ",", "rounding", "=", "'deterministic'", ")", ":", "\n", "    ", "return", "RoundFunction", ".", "apply", "(", "input", ",", "rounding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign": [[73, 75], ["SignFunction.apply"], "function", ["None"], ["", "", "def", "sign", "(", "input", ")", ":", "\n", "    ", "return", "SignFunction", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp": [[85, 87], ["ClampFunction.apply"], "function", ["None"], ["", "", "def", "clamp", "(", "input", ",", "min", ",", "max", ")", ":", "\n", "    ", "return", "ClampFunction", ".", "apply", "(", "input", ",", "min", ",", "max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clampabs": [[104, 106], ["ClampAbsFunction.apply"], "function", ["None"], ["", "", "def", "clampabs", "(", "input", ",", "min", ",", "max", ")", ":", "\n", "    ", "return", "ClampAbsFunction", ".", "apply", "(", "input", ",", "min", ",", "max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log": [[116, 118], ["LogFunction.apply"], "function", ["None"], ["", "", "def", "log", "(", "input", ")", ":", "\n", "    ", "return", "LogFunction", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.unsym_grad_mul": [[130, 132], ["UnsymmetricGradMulFunction.apply"], "function", ["None"], ["", "", "def", "unsym_grad_mul", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "return", "UnsymmetricGradMulFunction", ".", "apply", "(", "input1", ",", "input2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs": [[143, 145], ["AbsFunction.apply"], "function", ["None"], ["", "", "def", "abs", "(", "input", ")", ":", "\n", "    ", "return", "AbsFunction", ".", "apply", "(", "input", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear": [[10, 27], ["torch.zeros", "torch.zeros", "deepshift_cpu.linear_kernel", "torch.Tensor", "torch.Tensor", "deepshift_cuda.DEEP_SHIFT_LINEAR", "torch.zeros", "torch.zeros", "deepshift_cuda.DEEP_SHIFT_LINEAR", "input.detach().numpy", "shift.detach().numpy", "sign.detach().numpy", "bias.detach().numpy", "input.size", "shift.size", "shift.size", "shift.size", "shift.size", "input.detach", "shift.detach", "sign.detach", "bias.detach"], "function", ["None"], ["", "def", "linear", "(", "input", ",", "shift", ",", "sign", ",", "bias", "=", "None", ",", "conc_weight", "=", "None", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "if", "(", "use_cuda", ")", ":", "\n", "        ", "assert", "(", "conc_weight", "is", "not", "None", ")", "\n", "# start_time = time.time()      ", "\n", "out", "=", "torch", ".", "zeros", "(", "[", "input", ".", "size", "(", "0", ")", ",", "shift", ".", "size", "(", "0", ")", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "input", ".", "device", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "deepshift_cuda", ".", "DEEP_SHIFT_LINEAR", "(", "input", ",", "conc_weight", ".", "data", ",", "bias", ",", "out", ",", "conc_weight", ".", "base", ",", "conc_weight", ".", "bits", ",", "shift", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "temp", "=", "torch", ".", "zeros", "(", "[", "shift", ".", "size", "(", "0", ")", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "input", ".", "device", ")", "\n", "deepshift_cuda", ".", "DEEP_SHIFT_LINEAR", "(", "input", ",", "conc_weight", ".", "data", ",", "temp", ",", "out", ",", "conc_weight", ".", "base", ",", "conc_weight", ".", "bits", ",", "shift", ".", "size", "(", "0", ")", ")", "\n", "# end_time = time.time()", "\n", "# print(\"Linear Time:\", end_time - start_time )    ", "\n", "", "", "else", ":", "\n", "        ", "out", "=", "deepshift_cpu", ".", "linear_kernel", "(", "input", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "shift", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "sign", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "bias", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "out", "=", "torch", ".", "Tensor", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d": [[28, 68], ["time.time", "torch.pad", "int", "int", "shift.size", "torch.zeros", "torch.zeros", "torch.pad", "deepshift_cpu.convolution_kernel", "torch.Tensor", "torch.Tensor", "len", "len", "deepshift_cuda.DEEP_SHIFT_CONV", "torch.zeros", "torch.zeros", "deepshift_cuda.DEEP_SHIFT_CONV", "F.pad.cpu().detach().numpy", "shift.cpu().detach().numpy", "sign.cpu().detach().numpy", "bias.cpu().detach().numpy", "F.pad.size", "F.pad.cpu().detach", "shift.cpu().detach", "sign.cpu().detach", "bias.cpu().detach", "F.pad.size", "F.pad.size", "F.pad.cpu", "shift.cpu", "sign.cpu", "bias.cpu"], "function", ["None"], ["", "def", "conv2d", "(", "input", ",", "shift", ",", "sign", ",", "bias", "=", "None", ",", "conc_weight", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "if", "(", "use_cuda", ")", ":", "\n", "        ", "assert", "(", "conc_weight", "is", "not", "None", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "len", "(", "padding", ")", "==", "2", ":", "\n", "            ", "padding", "=", "(", "padding", "[", "0", "]", ",", "padding", "[", "0", "]", ",", "padding", "[", "1", "]", ",", "padding", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "padding", "=", "padding", "\n", "", "input", "=", "F", ".", "pad", "(", "input", "=", "input", ",", "pad", "=", "padding", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "if", "len", "(", "stride", ")", "==", "1", ":", "\n", "            ", "strides_h", "=", "stride", "[", "0", "]", "\n", "strides_w", "=", "stride", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "strides_h", "=", "stride", "[", "0", "]", "\n", "strides_w", "=", "stride", "[", "1", "]", "\n", "", "kernel_size", "=", "shift", ".", "shape", "[", "2", ":", "4", "]", "\n", "out_height", "=", "int", "(", "(", "input", ".", "size", "(", "2", ")", "-", "kernel_size", "[", "0", "]", ")", "/", "strides_h", "+", "1", ")", "\n", "out_width", "=", "int", "(", "(", "input", ".", "size", "(", "3", ")", "-", "kernel_size", "[", "1", "]", ")", "/", "strides_w", "+", "1", ")", "\n", "out_channels", "=", "shift", ".", "size", "(", "0", ")", "\n", "out", "=", "torch", ".", "zeros", "(", "[", "input", ".", "size", "(", "0", ")", ",", "out_channels", ",", "out_height", ",", "out_width", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "input", ".", "device", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "deepshift_cuda", ".", "DEEP_SHIFT_CONV", "(", "input", ",", "conc_weight", ".", "data", ",", "bias", ",", "out", ",", "stride", ",", "padding", ",", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "conc_weight", ".", "base", ",", "conc_weight", ".", "bits", ")", "\n", "", "else", ":", "\n", "            ", "temp", "=", "torch", ".", "zeros", "(", "[", "out_channels", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "input", ".", "device", ")", "\n", "deepshift_cuda", ".", "DEEP_SHIFT_CONV", "(", "input", ",", "conc_weight", ".", "data", ",", "temp", ",", "out", ",", "stride", ",", "padding", ",", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "conc_weight", ".", "base", ",", "conc_weight", ".", "bits", ")", "\n", "# end_time = time.time()", "\n", "# print(\"Conv Time:\", end_time - start_time )", "\n", "\n", "", "", "else", ":", "\n", "        ", "input", "=", "F", ".", "pad", "(", "input", "=", "input", ",", "pad", "=", "padding", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "out", "=", "deepshift_cpu", ".", "convolution_kernel", "(", "input", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "shift", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "sign", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "bias", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "stride", ",", "padding", ")", "\n", "out", "=", "torch", ".", "Tensor", "(", "out", ")", "\n", "\n", "#print(\"out - out1: \", out.cpu() - out1.cpu().int())", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.compress_sign_and_shift": [[69, 75], ["torch.zeros", "torch.zeros", "deepshift_cuda.COMPRESS_SIGN_SHIFT", "torch.device", "torch.device"], "function", ["None"], ["", "def", "compress_sign_and_shift", "(", "shift", ",", "sign", ",", "comp_size", ",", "base", ",", "bits", ",", "row_length", ",", "num", ")", ":", "\n", "    ", "comp_weight", "=", "torch", ".", "zeros", "(", "[", "comp_size", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "\n", "deepshift_cuda", ".", "COMPRESS_SIGN_SHIFT", "(", "shift", ",", "sign", ",", "comp_weight", ",", "base", ",", "bits", ",", "shift", ".", "shape", "[", "0", "]", ",", "shift", ".", "shape", "[", "1", "]", ",", "shift", ".", "shape", "[", "2", "]", ",", "shift", ".", "shape", "[", "3", "]", ",", "row_length", ",", "num", ")", "\n", "\n", "return", "comp_weight", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_conv._UnoptimizedConvNd.__init__": [[16, 46], ["torch.Module.__init__", "unoptimized_conv._UnoptimizedConvNd.reset_parameters", "ValueError", "ValueError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "unoptimized_conv._UnoptimizedConvNd.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "transposed", ",", "output_padding", ",", "\n", "groups", ",", "bias", ",", "padding_mode", ")", ":", "\n", "        ", "super", "(", "_UnoptimizedConvNd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "if", "out_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'out_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n", "if", "transposed", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "in_channels", ",", "out_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "in_channels", "//", "groups", ",", "*", "kernel_size", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_conv._UnoptimizedConvNd.reset_parameters": [[47, 54], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_conv._UnoptimizedConvNd.extra_repr": [[55, 69], ["s.format", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', stride={stride}'", ")", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "', output_padding={output_padding}'", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "', groups={groups}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_conv.UnoptimizedConv2d.__init__": [[71, 81], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "unoptimized_conv._UnoptimizedConvNd.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "UnoptimizedConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "False", ",", "_pair", "(", "0", ")", ",", "groups", ",", "bias", ",", "padding_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_conv.UnoptimizedConv2d.forward": [[83, 110], ["torch.pad", "torch.pad", "torch.pad", "int", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "len", "len", "unoptimized_cuda_kernel.UNOPTIMIZED_CONV", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "unoptimized_cuda_kernel.UNOPTIMIZED_CONV", "torch.pad.size", "unoptimized_conv.UnoptimizedConv2d.weight.size", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "unoptimized_conv.UnoptimizedConv2d.weight.size", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.pad.size", "unoptimized_conv.UnoptimizedConv2d.weight.size", "torch.pad.size", "unoptimized_conv.UnoptimizedConv2d.weight.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# start_time = time.time()", "\n", "        ", "if", "self", ".", "padding_mode", "==", "'circular'", ":", "\n", "            ", "print", "(", "'circular'", ")", "\n", "", "if", "len", "(", "self", ".", "padding", ")", "==", "2", ":", "\n", "            ", "padding", "=", "(", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "padding", "[", "0", "]", ",", "self", ".", "padding", "[", "1", "]", ",", "self", ".", "padding", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "padding", "=", "self", ".", "padding", "\n", "", "input", "=", "F", ".", "pad", "(", "input", "=", "input", ",", "pad", "=", "padding", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "if", "len", "(", "self", ".", "stride", ")", "==", "1", ":", "\n", "            ", "strides_h", "=", "self", ".", "stride", "[", "0", "]", "\n", "strides_w", "=", "self", ".", "stride", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "strides_h", "=", "self", ".", "stride", "[", "0", "]", "\n", "strides_w", "=", "self", ".", "stride", "[", "1", "]", "\n", "", "out_height", "=", "int", "(", "(", "input", ".", "size", "(", "2", ")", "-", "self", ".", "weight", ".", "size", "(", "2", ")", ")", "/", "strides_h", "+", "1", ")", "\n", "out_width", "=", "int", "(", "(", "input", ".", "size", "(", "3", ")", "-", "self", ".", "weight", ".", "size", "(", "3", ")", ")", "/", "strides_w", "+", "1", ")", "\n", "out", "=", "torch", ".", "zeros", "(", "[", "input", ".", "size", "(", "0", ")", ",", "self", ".", "weight", ".", "size", "(", "0", ")", ",", "out_height", ",", "out_width", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "unoptimized_cuda_kernel", ".", "UNOPTIMIZED_CONV", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "out", ",", "self", ".", "stride", ",", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "            ", "temp", "=", "torch", ".", "zeros", "(", "[", "self", ".", "weight", ".", "size", "(", "0", ")", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "unoptimized_cuda_kernel", ".", "UNOPTIMIZED_CONV", "(", "input", ",", "self", ".", "weight", ",", "temp", ",", "out", ",", "self", ".", "stride", ",", "self", ".", "padding", ")", "\n", "# end_time = time.time()", "\n", "# print(\"Conv Time:\", end_time - start_time )", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_linear.UnoptimizedLinear.__init__": [[14, 28], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "unoptimized_linear.UnoptimizedLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "unoptimized_linear.UnoptimizedLinear.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "UnoptimizedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "# You should always register all possible parameters, but the", "\n", "# optional ones can be None if you want.", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_linear.UnoptimizedLinear.reset_parameters": [[29, 36], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_linear.UnoptimizedLinear.forward": [[37, 48], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "unoptimized_cuda_kernel.UNOPTIMIZED_LINEAR", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "unoptimized_cuda_kernel.UNOPTIMIZED_LINEAR", "input.size", "unoptimized_linear.UnoptimizedLinear.weight.size", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "unoptimized_linear.UnoptimizedLinear.weight.size", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# start_time = time.time()", "\n", "        ", "out", "=", "torch", ".", "zeros", "(", "[", "input", ".", "size", "(", "0", ")", ",", "self", ".", "weight", ".", "size", "(", "0", ")", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "unoptimized_cuda_kernel", ".", "UNOPTIMIZED_LINEAR", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "temp", "=", "torch", ".", "zeros", "(", "[", "self", ".", "weight", ".", "size", "(", "0", ")", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "unoptimized_cuda_kernel", ".", "UNOPTIMIZED_LINEAR", "(", "input", ",", "self", ".", "weight", ",", "temp", ",", "out", ")", "\n", "# end_time = time.time()", "\n", "# print(\"Linear Time:\", end_time - start_time )   ", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.unoptimized_linear.UnoptimizedLinear.extra_repr": [[51, 56], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "# (Optional)Set the extra information about this module. You can test", "\n", "# it by printing an object of this class.", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.convert_to_unoptimized.convert_to_unoptimized": [[8, 31], ["model._modules.items", "len", "convert_to_unoptimized.convert_to_unoptimized", "type", "unoptimized_linear.UnoptimizedLinear", "type", "unoptimized_conv.UnoptimizedConv2d", "list", "module.children"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.cuda.convert_to_unoptimized.convert_to_unoptimized"], ["def", "convert_to_unoptimized", "(", "model", ")", ":", "\n", "    ", "for", "name", ",", "module", "in", "model", ".", "_modules", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "module", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "# recurse", "\n", "            ", "model", ".", "_modules", "[", "name", "]", "=", "convert_to_unoptimized", "(", "model", "=", "module", ")", "\n", "", "if", "type", "(", "module", ")", "==", "nn", ".", "Linear", ":", "\n", "            ", "linear", "=", "module", "\n", "unoptimized_linear", "=", "UnoptimizedLinear", "(", "module", ".", "in_features", ",", "module", ".", "out_features", ",", "module", ".", "bias", "is", "not", "None", ")", "\n", "unoptimized_linear", ".", "weight", "=", "linear", ".", "weight", "\n", "unoptimized_linear", ".", "bias", "=", "linear", ".", "bias", "\n", "\n", "model", ".", "_modules", "[", "name", "]", "=", "unoptimized_linear", "\n", "", "if", "type", "(", "module", ")", "==", "nn", ".", "Conv2d", ":", "\n", "            ", "conv2d", "=", "module", "\n", "unoptimized_conv", "=", "UnoptimizedConv2d", "(", "module", ".", "in_channels", ",", "module", ".", "out_channels", ",", "module", ".", "kernel_size", ",", "module", ".", "stride", ",", "\n", "module", ".", "padding", ",", "module", ".", "dilation", ",", "module", ".", "groups", ",", "\n", "module", ".", "bias", "is", "not", "None", ",", "module", ".", "padding_mode", ")", "\n", "unoptimized_conv", ".", "bias", "=", "conv2d", ".", "bias", "\n", "unoptimized_conv", ".", "weight", "=", "conv2d", ".", "weight", "\n", "\n", "model", ".", "_modules", "[", "name", "]", "=", "unoptimized_conv", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder_slow.adder2d.__init__": [[74, 85], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.init.uniform_", "torch.init.uniform_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "adder2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "input_channel", "=", "input_channel", "\n", "self", ".", "output_channel", "=", "output_channel", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "adder", "=", "torch", ".", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "randn", "(", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros", "(", "output_channel", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder_slow.adder2d.forward": [[86, 92], ["adder_slow.adder2d_function", "adder_slow.adder2d.b.unsqueeze().unsqueeze().unsqueeze", "adder_slow.adder2d.b.unsqueeze().unsqueeze", "adder_slow.adder2d.b.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder2d_function"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "adder2d_function", "(", "x", ",", "self", ".", "adder", ",", "self", ".", "stride", ",", "self", ".", "padding", ")", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder_slow.new_cdist": [[12, 40], ["cdist", "ctx.save_for_backward", "torch.cdist", "torch.cdist", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.norm", "torch.norm", "numpy.sqrt", "torch.nn.functional.hardtanh", "torch.nn.functional.hardtanh", "grad_W.numel"], "function", ["None"], ["def", "new_cdist", "(", "p", ",", "eta", ")", ":", "\n", "    ", "class", "cdist", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "W", ",", "X", ")", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "W", ",", "X", ")", "\n", "out", "=", "-", "torch", ".", "cdist", "(", "W", ",", "X", ",", "p", ")", "\n", "return", "out", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "W", ",", "X", "=", "ctx", ".", "saved_tensors", "\n", "grad_W", "=", "grad_X", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "# print('grad dim:', grad_output.shape)", "\n", "# print('X dim:', X.shape)", "\n", "# print('W dim:', W.shape)", "\n", "# back propogation", "\n", "                ", "X_unsqueeze", "=", "torch", ".", "unsqueeze", "(", "X", ",", "0", ")", ".", "expand", "(", "W", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ")", "\n", "W_unsqueeze", "=", "torch", ".", "unsqueeze", "(", "W", ",", "1", ")", ".", "expand", "(", "W", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ",", "W", ".", "shape", "[", "1", "]", ")", "\n", "grad_unsqueeze", "=", "torch", ".", "unsqueeze", "(", "grad_output", ",", "2", ")", ".", "expand", "(", "grad_output", ".", "shape", "[", "0", "]", ",", "grad_output", ".", "shape", "[", "1", "]", ",", "W", ".", "shape", "[", "1", "]", ")", "\n", "grad_W", "=", "(", "(", "X_unsqueeze", "-", "W_unsqueeze", ")", "*", "grad_unsqueeze", ")", ".", "sum", "(", "1", ")", "\n", "grad_W", "=", "eta", "*", "np", ".", "sqrt", "(", "grad_W", ".", "numel", "(", ")", ")", "/", "torch", ".", "norm", "(", "grad_W", ")", "*", "grad_W", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "grad_X", "=", "(", "torch", ".", "nn", ".", "functional", ".", "hardtanh", "(", "(", "W_unsqueeze", "-", "X_unsqueeze", ")", ",", "min_val", "=", "-", "1.", ",", "max_val", "=", "1.", ")", "*", "grad_unsqueeze", ")", ".", "sum", "(", "0", ")", "\n", "# print(\"hardtanh input\", W_unsqueeze - X_unsqueeze)", "\n", "# print(\"hardtanh\", torch.nn.functional.hardtanh((W_unsqueeze - X_unsqueeze), min_val=-1., max_val=1.))", "\n", "", "return", "grad_W", ",", "grad_X", "\n", "", "", "return", "cdist", "(", ")", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder_slow.adder2d_function": [[44, 70], ["W.size", "X.size", "torch.nn.functional.unfold().view", "torch.nn.functional.unfold().view", "X_col.permute().contiguous().view.permute().contiguous().view", "W.view", "cdist", "out.permute().contiguous.view", "out.permute().contiguous.permute().contiguous", "int", "int", "X_col.permute().contiguous().view.size", "X_col.permute().contiguous().view.transpose", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "X_col.permute().contiguous().view.permute().contiguous", "out.permute().contiguous.permute", "X.view", "X_col.permute().contiguous().view.permute"], "function", ["None"], ["def", "adder2d_function", "(", "X", ",", "W", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ":", "\n", "    ", "n_filters", ",", "d_filter", ",", "h_filter", ",", "w_filter", "=", "W", ".", "size", "(", ")", "\n", "n_x", ",", "d_x", ",", "h_x", ",", "w_x", "=", "X", ".", "size", "(", ")", "\n", "\n", "h_out", "=", "(", "h_x", "-", "h_filter", "+", "2", "*", "padding", ")", "/", "stride", "+", "1", "\n", "w_out", "=", "(", "w_x", "-", "w_filter", "+", "2", "*", "padding", ")", "/", "stride", "+", "1", "\n", "\n", "h_out", ",", "w_out", "=", "int", "(", "h_out", ")", ",", "int", "(", "w_out", ")", "\n", "# print('W dim:', W.shape)", "\n", "# print('X dim:', X.shape)", "\n", "X_col", "=", "torch", ".", "nn", ".", "functional", ".", "unfold", "(", "X", ".", "view", "(", "1", ",", "-", "1", ",", "h_x", ",", "w_x", ")", ",", "h_filter", ",", "dilation", "=", "1", ",", "padding", "=", "padding", ",", "stride", "=", "stride", ")", ".", "view", "(", "n_x", ",", "-", "1", ",", "h_out", "*", "w_out", ")", "\n", "# print('X_fold dim:', X_col.shape)", "\n", "X_col", "=", "X_col", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "X_col", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "W_col", "=", "W", ".", "view", "(", "n_filters", ",", "-", "1", ")", "\n", "\n", "# print('W dim:', W_col.shape)", "\n", "# print('X dim:', X_col.shape)", "\n", "# exit()", "\n", "# out = -torch.cdist(W_col,X_col.transpose(0,1),1)", "\n", "out", "=", "cdist", "(", "W_col", ",", "X_col", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "# print('out dim:', out.shape)", "\n", "\n", "out", "=", "out", ".", "view", "(", "n_filters", ",", "h_out", ",", "w_out", ",", "n_x", ")", "\n", "out", "=", "out", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.check.check_forward": [[14, 117], ["print", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "adder_slow.adder2d().cuda", "adder2d().cuda.adder.data.copy_", "adder2d().cuda.b.data.copy_", "adder.Adder2D().cuda", "Adder2D().cuda.weight.data.copy_", "Adder2D().cuda.b.data.copy_", "Adder2D().cuda.", "adder2d().cuda.", "tt.randn().cuda.clone", "tt.randn().cuda.clone", "time.time", "Adder2D().cuda.", "time.time", "print", "time.time", "adder2d().cuda.", "time.time", "print", "print", "time.time", "Adder2D().cuda.", "time.time", "print", "time.time", "adder2d().cuda.", "time.time", "print", "print", "torch.randn", "torch.randn", "torch.randn", "adder_slow.adder2d", "adder.Adder2D", "float", "float"], "function", ["None"], ["def", "check_forward", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "64", "\n", "# in_channels = 1", "\n", "# out_channels = 1", "\n", "in_size", "=", "256", "\n", "# in_size = 3", "\n", "kernel_size", "=", "3", "\n", "padding", "=", "1", "\n", "stride", "=", "1", "\n", "out_size", "=", "(", "in_size", "+", "2", "*", "padding", "-", "kernel_size", ")", "//", "stride", "+", "1", "\n", "print", "(", "out_size", ")", "\n", "\n", "input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "weight", "=", "tt", ".", "randn", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ".", "cuda", "(", ")", "\n", "bias", "=", "tt", ".", "randn", "(", "out_channels", ")", ".", "cuda", "(", ")", "\n", "# output = tt.randn(batch_size, out_channels, out_size, out_size).cuda()", "\n", "\n", "adder_ref", "=", "adder2d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "adder_ref", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder_ref", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "adder", "=", "Adder2D", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "eta", "=", "0.2", ")", ".", "cuda", "(", ")", "\n", "adder", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "# adder_cuda.forward(input,", "\n", "#                    weight,", "\n", "#                    # bias,", "\n", "#                    output,", "\n", "#                    kernel_size, kernel_size,", "\n", "#                    stride, stride,", "\n", "#                    padding, padding)", "\n", "adder", "(", "input", ")", "\n", "adder_ref", "(", "input", ")", "\n", "input", ".", "clone", "(", ")", "\n", "weight", ".", "clone", "(", ")", "\n", "# output.clone()", "\n", "\n", "# print(input)", "\n", "# print(weight)", "\n", "# print(\"our output: \", output)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "# print(\"addernet ref: \", out_ref)", "\n", "# print(\"by hand no bias: \", -(input - weight).abs().sum())", "\n", "# print(F.conv2d(input, weight, bias, padding=padding))", "\n", "# out_ref = F.conv2d(input, weight, bias, padding=padding)", "\n", "\n", "import", "time", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.forward(input,", "\n", "#                   weight,", "\n", "#                   # bias,", "\n", "#                   output,", "\n", "#                   kernel_size, kernel_size,", "\n", "#                   stride, stride,", "\n", "#                   padding, padding)", "\n", "output", "=", "adder", "(", "input", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# out_ref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "out_ref", "=", "adder_ref", "(", "input", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "print", "(", "\"max error: {:.3e}\"", ".", "format", "(", "float", "(", "(", "out_ref", "-", "output", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.forward(input,", "\n", "#                   weight,", "\n", "#                   # bias,", "\n", "#                   output,", "\n", "#                   kernel_size, kernel_size,", "\n", "#                   stride, stride,", "\n", "#                   padding, padding)", "\n", "output", "=", "adder", "(", "input", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# out_ref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "out_ref", "=", "adder_ref", "(", "input", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "print", "(", "\"max error: {:.3e}\"", ".", "format", "(", "float", "(", "(", "out_ref", "-", "output", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.check.check_grad_in": [[119, 201], ["print", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "adder_slow.adder2d().cuda", "adder2d().cuda.adder.data.copy_", "adder2d().cuda.b.data.copy_", "adder.Adder2D().cuda", "Adder2D().cuda.weight.data.copy_", "Adder2D().cuda.b.data.copy_", "adder2d().cuda.", "adder_ref.backward", "tt.randn().cuda.grad.clone", "tt.randn().cuda.grad.zero_", "Adder2D().cuda.", "adder.backward", "tt.randn().cuda.grad.clone", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "adder_slow.adder2d", "adder.Adder2D"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward"], ["", "def", "check_grad_in", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "64", "\n", "in_size", "=", "128", "\n", "kernel_size", "=", "3", "\n", "padding", "=", "1", "\n", "stride", "=", "1", "\n", "# batch_size = 1", "\n", "# in_channels = 1", "\n", "# out_channels = 1", "\n", "# in_size = 2", "\n", "# kernel_size = 2", "\n", "# padding = 0", "\n", "# stride = 1", "\n", "out_size", "=", "(", "in_size", "+", "2", "*", "padding", "-", "kernel_size", ")", "//", "stride", "+", "1", "\n", "print", "(", "out_size", ")", "\n", "\n", "input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "grad_input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "weight", "=", "tt", ".", "randn", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ".", "cuda", "(", ")", "\n", "weight", ".", "requires_grad", "=", "True", "\n", "bias", "=", "tt", ".", "randn", "(", "out_channels", ")", ".", "cuda", "(", ")", "\n", "grad_output", "=", "tt", ".", "randn", "(", "batch_size", ",", "out_channels", ",", "out_size", ",", "out_size", ")", ".", "cuda", "(", ")", "\n", "\n", "adder_ref", "=", "adder2d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "adder_ref", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder_ref", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "adder", "=", "Adder2D", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "eta", "=", "0.2", ")", ".", "cuda", "(", ")", "\n", "adder", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "out_ref", "=", "adder_ref", "(", "input", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ")", "\n", "\n", "grad_clone", "=", "input", ".", "grad", ".", "clone", "(", ")", "\n", "input", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "# adder_cuda.backward_input(grad_output,", "\n", "#                           input,", "\n", "#                           weight,", "\n", "#                           grad_input,", "\n", "#                           kernel_size, kernel_size,", "\n", "#                           stride, stride,", "\n", "#                           padding, padding)", "\n", "output", "=", "adder", "(", "input", ")", "\n", "output", ".", "backward", "(", "grad_output", ")", "\n", "grad_input", "=", "input", ".", "grad", ".", "clone", "(", ")", "\n", "\n", "# print(\"input\")", "\n", "# print(input)", "\n", "# print(\"weight ref\")", "\n", "# print(adder_ref.adder)", "\n", "# print(\"weight our\")", "\n", "# print(adder.adder)", "\n", "# print(\"output ref\")", "\n", "# print(out_ref)", "\n", "# print(\"output our\")", "\n", "# print(output)", "\n", "# print(\"grad output\")", "\n", "# print(grad_output)", "\n", "# print(\"grad_in ref\")", "\n", "# print(grad_clone)", "\n", "# print(\"grad_in our\")", "\n", "# print(grad_input)", "\n", "\n", "print", "(", "(", "(", "grad_clone", "-", "grad_input", ")", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.check.check_grad_weight": [[203, 341], ["print", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "adder_slow.adder2d().cuda", "adder2d().cuda.adder.data.copy_", "adder2d().cuda.b.data.copy_", "adder.Adder2D().cuda", "Adder2D().cuda.weight.data.copy_", "Adder2D().cuda.b.data.copy_", "adder2d().cuda.", "adder_ref.backward", "adder2d().cuda.adder.grad.clone", "adder2d().cuda.adder.grad.zero_", "Adder2D().cuda.", "adder.backward", "Adder2D().cuda.weight.grad.clone", "Adder2D().cuda.weight.grad.zero_", "print", "time.time", "adder.backward", "time.time", "print", "time.time", "adder_ref.backward", "time.time", "print", "time.time", "adder.backward", "time.time", "print", "time.time", "adder_ref.backward", "time.time", "print", "time.time", "adder.backward", "time.time", "print", "time.time", "adder_ref.backward", "time.time", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "adder_slow.adder2d", "adder.Adder2D", "adder_ref.adder.grad.clone.abs"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "def", "check_grad_weight", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "in_channels", "=", "6", "\n", "out_channels", "=", "6", "\n", "in_size", "=", "128", "\n", "kernel_size", "=", "3", "\n", "padding", "=", "1", "\n", "stride", "=", "1", "\n", "# batch_size = 1", "\n", "# in_channels = 1", "\n", "# out_channels = 1", "\n", "# in_size = 1", "\n", "# kernel_size = 1", "\n", "# padding = 0", "\n", "# stride = 1", "\n", "out_size", "=", "(", "in_size", "+", "2", "*", "padding", "-", "kernel_size", ")", "//", "stride", "+", "1", "\n", "print", "(", "out_size", ")", "\n", "\n", "input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "input", ".", "requires_grad", "=", "True", "\n", "weight", "=", "tt", ".", "randn", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ".", "cuda", "(", ")", "\n", "weight", ".", "requires_grad", "=", "True", "\n", "bias", "=", "tt", ".", "randn", "(", "out_channels", ")", ".", "cuda", "(", ")", "\n", "grad_output", "=", "tt", ".", "randn", "(", "batch_size", ",", "out_channels", ",", "out_size", ",", "out_size", ")", ".", "cuda", "(", ")", "\n", "\n", "adder_ref", "=", "adder2d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "adder_ref", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder_ref", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "adder", "=", "Adder2D", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "eta", "=", "0.2", ")", ".", "cuda", "(", ")", "\n", "adder", ".", "adder", ".", "data", ".", "copy_", "(", "weight", ")", "\n", "adder", ".", "b", ".", "data", ".", "copy_", "(", "bias", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "out_ref", "=", "adder_ref", "(", "input", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "grad_clone", "=", "adder_ref", ".", "adder", ".", "grad", ".", "clone", "(", ")", "\n", "adder_ref", ".", "adder", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "# grad_weight = weight.clone()", "\n", "# adder_cuda.backward_weight(grad_output,", "\n", "#                            input,", "\n", "#                            weight,", "\n", "#                            grad_weight,", "\n", "#                            kernel_size, kernel_size,", "\n", "#                            stride, stride,", "\n", "#                            padding, padding)", "\n", "output", "=", "adder", "(", "input", ")", "\n", "output", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "grad_weight", "=", "adder", ".", "adder", ".", "grad", ".", "clone", "(", ")", "\n", "adder", ".", "adder", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "# print(\"input\")", "\n", "# print(input)", "\n", "# print(\"weight\")", "\n", "# print(weight)", "\n", "# print(\"output ref\")", "\n", "# print(out_ref)", "\n", "# # print(\"output our\", output)", "\n", "# print(\"grad output\")", "\n", "# print(grad_output)", "\n", "# print(\"grad_weight ref\")", "\n", "# print(grad_clone)", "\n", "# print(\"grad_weight our\")", "\n", "# print(grad_weight)", "\n", "\n", "eps", "=", "1e-6", "\n", "print", "(", "(", "(", "grad_clone", "-", "grad_weight", ")", "/", "(", "grad_clone", ".", "abs", "(", ")", "+", "eps", ")", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "import", "time", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.backward_weight(grad_output,", "\n", "#                            input,", "\n", "#                            weight,", "\n", "#                            grad_weight,", "\n", "#                            kernel_size, kernel_size,", "\n", "#                            stride, stride,", "\n", "#                            padding, padding)", "\n", "output", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.backward_weight(grad_output,", "\n", "#                            input,", "\n", "#                            weight,", "\n", "#                            grad_weight,", "\n", "#                            kernel_size, kernel_size,", "\n", "#                            stride, stride,", "\n", "#                            padding, padding)", "\n", "output", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "# adder_cuda.backward_weight(grad_output,", "\n", "#                            input,", "\n", "#                            weight,", "\n", "#                            grad_weight,", "\n", "#                            kernel_size, kernel_size,", "\n", "#                            stride, stride,", "\n", "#                            padding, padding)", "\n", "output", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hand_written_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n", "# outref = F.conv2d(input, weight, bias, padding=padding)", "\n", "# out_ref = adder2d_function(input, weight, stride, padding)", "\n", "time_b", "=", "time", ".", "time", "(", ")", "\n", "out_ref", ".", "backward", "(", "grad_output", ",", "retain_graph", "=", "True", ")", "\n", "time_e", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"builtin_conv: {:.4f}us\"", ".", "format", "(", "(", "time_e", "-", "time_b", ")", "*", "1e6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.check.check_naive_clone": [[343, 371], ["print", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "adder_cuda.forward", "print", "tt.randn().cuda.clone", "tt.randn().cuda.clone", "tt.randn().cuda.clone", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.CNN.forward"], ["", "def", "check_naive_clone", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "in_channels", "=", "1", "\n", "out_channels", "=", "1", "\n", "in_size", "=", "3", "\n", "kernel_size", "=", "1", "\n", "padding", "=", "0", "\n", "stride", "=", "1", "\n", "out_size", "=", "(", "in_size", "+", "2", "*", "padding", "-", "kernel_size", ")", "//", "stride", "+", "1", "\n", "print", "(", "out_size", ")", "\n", "\n", "input", "=", "tt", ".", "randn", "(", "batch_size", ",", "in_channels", ",", "in_size", ",", "in_size", ")", ".", "cuda", "(", ")", "\n", "weight", "=", "tt", ".", "randn", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ".", "cuda", "(", ")", "\n", "# bias = tt.randn(out_channels).cuda()", "\n", "output", "=", "tt", ".", "randn", "(", "batch_size", ",", "out_channels", ",", "out_size", ",", "out_size", ")", ".", "cuda", "(", ")", "\n", "\n", "result", "=", "adder_cuda", ".", "forward", "(", "input", ",", "\n", "weight", ",", "\n", "# bias,", "\n", "output", ",", "\n", "kernel_size", ",", "kernel_size", ",", "\n", "stride", ",", "stride", ",", "\n", "padding", ",", "padding", ")", "\n", "print", "(", "result", ")", "\n", "input", ".", "clone", "(", ")", "\n", "weight", ".", "clone", "(", ")", "\n", "# bias.clone()", "\n", "output", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.RoundWeightFixedPoint.forward": [[144, 147], ["adder.qw"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.qw"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bits", ")", ":", "\n", "        ", "return", "qw", "(", "input", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.RoundWeightFixedPoint.backward": [[148, 151], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.RoundActFixedPoint.forward": [[153, 156], ["adder.qa"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.qa"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bits", ")", ":", "\n", "        ", "return", "qa", "(", "input", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.RoundActFixedPoint.backward": [[157, 160], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.Adder2DFunction.forward": [[218, 251], ["ctx.save_for_backward", "input.new_zeros", "adder_cuda.forward", "adder.get_conv2d_output_shape"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.CNN.forward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.get_conv2d_output_shape"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "input", ",", "\n", "weight", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "eta", ",", "quantize", ",", "\n", "weight_bits", ",", "\n", "quantize_v", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ",", "weight", ")", "\n", "ctx", ".", "kernel_size", "=", "kernel_size", "\n", "ctx", ".", "stride", "=", "stride", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "eta", "=", "eta", "\n", "ctx", ".", "quantize", "=", "quantize", "\n", "ctx", ".", "weight_bits", "=", "weight_bits", "\n", "ctx", ".", "quantize_v", "=", "quantize_v", "\n", "\n", "output", "=", "input", ".", "new_zeros", "(", "\n", "get_conv2d_output_shape", "(", "input", ",", "weight", ",", "stride", ",", "padding", ")", ")", "\n", "adder_cuda", ".", "forward", "(", "input", ",", "\n", "weight", ",", "\n", "output", ",", "\n", "kernel_size", ",", "kernel_size", ",", "\n", "stride", ",", "stride", ",", "\n", "padding", ",", "padding", ")", "\n", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_weight", "=", "None", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.Adder2DFunction.backward": [[252, 291], ["adder.qe", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "adder_cuda.backward_input", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "adder_cuda.backward_weight", "adder.qg", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "numpy.sqrt", "qg.numel"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.qe", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.qg"], ["eta", ",", "kernel_size", ",", "stride", ",", "padding", "=", "(", "\n", "ctx", ".", "eta", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "stride", ",", "ctx", ".", "padding", "\n", ")", "\n", "\n", "# quantize grad_output v1", "\n", "if", "ctx", ".", "quantize", "==", "True", "and", "ctx", ".", "quantize_v", "==", "'wageubn'", ":", "\n", "            ", "grad_output", "=", "qe", "(", "grad_output", ",", "ctx", ".", "weight_bits", ")", "\n", "\n", "# input", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "adder_cuda", ".", "backward_input", "(", "grad_output", ",", "\n", "input", ",", "\n", "weight", ",", "\n", "grad_input", ",", "\n", "kernel_size", ",", "kernel_size", ",", "\n", "stride", ",", "stride", ",", "\n", "padding", ",", "padding", ")", "\n", "\n", "# weight", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "adder_cuda", ".", "backward_weight", "(", "grad_output", ",", "\n", "input", ",", "\n", "weight", ",", "\n", "grad_weight", ",", "\n", "kernel_size", ",", "kernel_size", ",", "\n", "stride", ",", "stride", ",", "\n", "padding", ",", "padding", ")", "\n", "grad_weight", "=", "eta", "*", "np", ".", "sqrt", "(", "grad_weight", ".", "numel", "(", ")", ")", "/", "torch", ".", "norm", "(", "grad_weight", ")", "*", "grad_weight", "\n", "\n", "if", "ctx", ".", "quantize", "==", "True", "and", "ctx", ".", "quantize_v", "==", "'wageubn'", ":", "\n", "                ", "grad_weight", "=", "qg", "(", "grad_weight", ",", "ctx", ".", "weight_bits", ")", "\n", "\n", "", "", "return", "grad_input", ",", "grad_weight", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "class", "Adder2D", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.Adder2D.__init__": [[295, 342], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "quantize.quantize.QuantMeasure", "torch.init.normal_", "torch.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "adder.Adder2D.s.data.uniform_", "adder.Adder2D.register_buffer", "adder.Adder2D.set_mask", "print", "print", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "adder.Adder2D.adder.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask"], ["stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "eta", "=", "0.2", ",", "\n", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "momentum", "=", "0.9", ",", "quantize_v", "=", "'sbm'", ")", ":", "\n", "        ", "super", "(", "Adder2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "input_channel", "=", "input_channel", "\n", "self", ".", "output_channel", "=", "output_channel", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "quantize_v", "=", "quantize_v", "\n", "# print(quantize_v)", "\n", "\n", "if", "self", ".", "quantize", ":", "\n", "            ", "self", ".", "quantize_input_fw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "\n", "", "self", ".", "adder", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "qadder", "=", "None", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros", "(", "output_channel", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "self", ".", "s", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'adder_mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "adder", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n", "", "if", "self", ".", "quantize", "is", "True", ":", "\n", "            ", "print", "(", "self", ".", "quantize", ")", "\n", "print", "(", "'quantize adder layer to {} bits.'", ".", "format", "(", "self", ".", "weight_bits", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "# apply mask", "\n", "            ", "self", ".", "adder", ".", "data", "=", "self", ".", "adder", ".", "data", "*", "self", ".", "adder_mask", ".", "data", "\n", "\n", "", "if", "self", ".", "quantize", "is", "True", ":", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.Adder2D.forward": [[343, 389], ["Adder2DFunction.apply", "Adder2DFunction.apply", "adder.Adder2D.b.unsqueeze().unsqueeze().unsqueeze", "adder.round_weight_fixed_point", "adder.round_act_fixed_point", "adder.Adder2D.quantize_input_fw", "quantize.quantize.calculate_qparams", "quantize.quantize.quantize", "quantize.quantize.quantize_grad", "adder.Adder2D.b.unsqueeze().unsqueeze", "adder.Adder2D.b.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.round_weight_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round_act_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad"], ["# shift_range = (-1 * (2 ** (self.weight_bits - 1) - 1), 0)", "\n", "# self.adder.data = ste.clampabs(self.adder.data, 2**shift_range[0], 2**shift_range[1])", "\n", "# weight_q = ste.round_power_of_2(self.adder, 'deterministic')", "\n", "\n", "# quantization v1", "\n", "            ", "if", "self", ".", "quantize_v", "==", "'wageubn'", ":", "\n", "                ", "self", ".", "qadder", "=", "round_weight_fixed_point", "(", "self", ".", "adder", ",", "self", ".", "weight_bits", ")", "\n", "input_q", "=", "round_act_fixed_point", "(", "input", ",", "self", ".", "weight_bits", ")", "\n", "\n", "# quantization v2", "\n", "", "if", "self", ".", "quantize_v", "==", "'sbm'", ":", "\n", "                ", "input_q", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "self", ".", "weight_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "adder", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "self", ".", "qadder", "=", "quantize", "(", "self", ".", "adder", ",", "qparams", "=", "weight_qparams", ")", "\n", "", "bias_fixed_point", "=", "None", "\n", "output", "=", "Adder2DFunction", ".", "apply", "(", "input_q", ",", "\n", "self", ".", "qadder", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "eta", ",", "\n", "self", ".", "quantize", ",", "\n", "self", ".", "weight_bits", ",", "\n", "self", ".", "quantize_v", ")", "\n", "if", "self", ".", "quantize_v", "==", "'sbm'", ":", "\n", "                ", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "Adder2DFunction", ".", "apply", "(", "input", ",", "\n", "self", ".", "adder", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "eta", ",", "\n", "self", ".", "quantize", ",", "\n", "self", ".", "weight_bits", ",", "\n", "self", ".", "quantize_v", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "", "return", "output", "\n", "\n", "", "def", "round_weight_each_step", "(", "self", ",", "weight", ",", "bits", "=", "16", ")", ":", "\n", "# print('before quantize: ', input)", "\n", "# quantization v1", "\n", "# if bits == 1:", "\n", "#     return torch.sign(weight)", "\n", "# S = 2. ** (bits - 1)", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.Adder2D.round_weight_each_step": [[390, 413], ["quantize.quantize.calculate_qparams", "quantize.quantize.quantize", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "torch.unique.size", "torch.unique.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize"], ["# if bits > 15 or bits == 1:", "\n", "#   delta = 0", "\n", "# else:", "\n", "#   delta = 1. / S", "\n", "# max_val = 1 - delta", "\n", "# min_val = delta - 1", "\n", "\n", "# weight_clamp = torch.clamp(weight, min_val, max_val)", "\n", "# qweight = torch.round(weight_clamp * S) / S", "\n", "# print('after quantize: ', input_round)", "\n", "\n", "# quantization v2", "\n", "        ", "weight_qparams", "=", "calculate_qparams", "(", "weight", ",", "num_bits", "=", "bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "weight_unique", "=", "torch", ".", "unique", "(", "qweight", "[", "0", "]", ")", "\n", "print", "(", "'add weight range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "return", "qweight", "\n", "\n", "", "def", "set_mask", "(", "self", ")", ":", "\n", "# random fix zero", "\n", "        ", "self", ".", "adder_mask", ".", "data", "=", "(", "self", ".", "s", ">", "self", ".", "sparsity", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "adder_mask", ".", "requires_grad", "==", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.Adder2D.set_mask": [[414, 418], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.get_conv2d_output_shape": [[18, 26], ["weight.size", "input.size"], "function", ["None"], ["def", "get_conv2d_output_shape", "(", "input", ",", "weight", ",", "stride", ",", "padding", ")", ":", "\n", "    ", "n_filters", ",", "d_filter", ",", "h_filter", ",", "w_filter", "=", "weight", ".", "size", "(", ")", "\n", "n_x", ",", "d_x", ",", "h_x", ",", "w_x", "=", "input", ".", "size", "(", ")", "\n", "\n", "h_out", "=", "(", "h_x", "-", "h_filter", "+", "2", "*", "padding", ")", "//", "stride", "+", "1", "\n", "w_out", "=", "(", "w_x", "-", "w_filter", "+", "2", "*", "padding", ")", "//", "stride", "+", "1", "\n", "\n", "return", "(", "n_x", ",", "n_filters", ",", "h_out", ",", "w_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.round_weight_to_fixed": [[28, 44], ["torch.clamp", "torch.clamp", "torch.sign", "torch.sign", "torch.round", "torch.round"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "round_weight_to_fixed", "(", "input", ",", "bits", "=", "16", ")", ":", "\n", "# print('before quantize: ', input)", "\n", "    ", "if", "bits", "==", "1", ":", "\n", "        ", "return", "torch", ".", "sign", "(", "input", ")", "\n", "", "S", "=", "2.", "**", "(", "bits", "-", "1", ")", "\n", "if", "bits", ">", "15", "or", "bits", "==", "1", ":", "\n", "      ", "delta", "=", "0", "\n", "", "else", ":", "\n", "      ", "delta", "=", "1.", "/", "S", "\n", "", "max_val", "=", "1", "-", "delta", "\n", "min_val", "=", "delta", "-", "1", "\n", "\n", "input_clamp", "=", "torch", ".", "clamp", "(", "input", ",", "min_val", ",", "max_val", ")", "\n", "input_round", "=", "torch", ".", "round", "(", "input_clamp", "*", "S", ")", "/", "S", "\n", "# print('after quantize: ', input_round)", "\n", "return", "input_round", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.round_act_to_fixed": [[45, 53], ["torch.sign", "torch.sign", "torch.round", "torch.round"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "round_act_to_fixed", "(", "input", ",", "bits", "=", "16", ")", ":", "\n", "    ", "if", "bits", "==", "1", ":", "\n", "        ", "return", "torch", ".", "sign", "(", "input", ")", "\n", "", "S", "=", "2.", "**", "(", "bits", "-", "1", ")", "\n", "\n", "input_round", "=", "torch", ".", "round", "(", "input", "*", "S", ")", "/", "S", "\n", "\n", "return", "input_round", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.scale": [[101, 105], ["torch.max", "torch.max", "torch.abs", "torch.abs", "torch.round", "torch.round", "torch.log2", "torch.log2"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["def", "scale", "(", "x", ")", ":", "\n", "    ", "scale", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "x", ")", ")", "\n", "result", "=", "2.", "**", "torch", ".", "round", "(", "torch", ".", "log2", "(", "scale", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.delta": [[106, 109], ["None"], "function", ["None"], ["", "def", "delta", "(", "bits", ")", ":", "\n", "    ", "result", "=", "(", "2.", "**", "(", "1", "-", "bits", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.clip": [[110, 119], ["torch.clamp", "torch.clamp", "adder.delta"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.delta"], ["", "def", "clip", "(", "x", ",", "bits", ")", ":", "\n", "    ", "if", "bits", ">=", "32", ":", "\n", "        ", "step", "=", "0", "\n", "", "else", ":", "\n", "        ", "step", "=", "delta", "(", "bits", ")", "\n", "", "ceil", "=", "1", "-", "step", "\n", "floor", "=", "step", "-", "1", "\n", "result", "=", "torch", ".", "clamp", "(", "x", ",", "floor", ",", "ceil", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.quant": [[120, 126], ["torch.round", "torch.round", "adder.delta", "adder.delta"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.delta", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.delta"], ["", "def", "quant", "(", "x", ",", "bits", ")", ":", "\n", "    ", "if", "bits", ">=", "32", ":", "\n", "        ", "result", "=", "x", "\n", "", "else", ":", "\n", "        ", "result", "=", "torch", ".", "round", "(", "x", "/", "delta", "(", "bits", ")", ")", "*", "delta", "(", "bits", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.qw": [[127, 134], ["adder.quant"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.quant"], ["", "def", "qw", "(", "x", ",", "bitsW", ")", ":", "\n", "    ", "bits", "=", "bitsW", "\n", "if", "bits", ">=", "32", ":", "\n", "        ", "result", "=", "x", "\n", "", "else", ":", "\n", "        ", "result", "=", "quant", "(", "x", ",", "bits", ")", "# remove clip for adding layer", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.qa": [[135, 142], ["adder.quant"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.quant"], ["", "def", "qa", "(", "x", ",", "bitsA", ")", ":", "\n", "    ", "bits", "=", "bitsA", "\n", "if", "bits", ">=", "32", ":", "\n", "        ", "result", "=", "x", "\n", "", "else", ":", "\n", "        ", "result", "=", "quant", "(", "x", ",", "bits", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.round_weight_fixed_point": [[161, 163], ["RoundWeightFixedPoint.apply"], "function", ["None"], ["", "", "def", "round_weight_fixed_point", "(", "input", ",", "bits", ")", ":", "\n", "    ", "return", "RoundWeightFixedPoint", ".", "apply", "(", "input", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.round_act_fixed_point": [[164, 166], ["RoundActFixedPoint.apply"], "function", ["None"], ["", "def", "round_act_fixed_point", "(", "input", ",", "bits", ")", ":", "\n", "    ", "return", "RoundActFixedPoint", ".", "apply", "(", "input", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.qe": [[168, 176], ["adder.scale", "adder.clip", "adder.quant"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.scale", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.clip", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.quant"], ["", "def", "qe", "(", "x", ",", "bitsE", ")", ":", "\n", "    ", "bits", "=", "bitsE", "\n", "if", "bits", ">=", "32", ":", "\n", "        ", "result", "=", "x", "\n", "", "else", ":", "\n", "        ", "dscale", "=", "scale", "(", "x", ")", "\n", "result", "=", "dscale", "*", "clip", "(", "quant", "(", "x", "/", "dscale", ",", "bits", ")", ",", "bits", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.qg": [[177, 213], ["adder.scale", "adder.quant", "torch.sign", "torch.sign", "torch.abs", "torch.abs", "torch.floor", "torch.floor", "torch.FloatTensor().uniform_().cuda", "torch.FloatTensor().uniform_().cuda", "torch.clamp", "torch.clamp", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor", "torch.FloatTensor", "torch.sign", "torch.sign", "x.size"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.scale", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.quant", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign"], ["", "def", "qg", "(", "x", ",", "bitsG", ")", ":", "\n", "    ", "bits", "=", "bitsG", "\n", "if", "bits", ">=", "32", ":", "\n", "        ", "result", "=", "x", "\n", "", "else", ":", "\n", "# dscale = scale(x)", "\n", "# x = x / dscale", "\n", "# factor = 128", "\n", "# bitsR = 32", "\n", "# norm = quant(factor * x, bitsR)", "\n", "#", "\n", "# norm_sign = torch.sign(norm)", "\n", "# norm_abs = torch.abs(norm)", "\n", "# norm_int = torch.floor(norm_abs)", "\n", "# norm_float = norm_abs - norm_int", "\n", "# rand_float = torch.FloatTensor(*x.size()).uniform_()", "\n", "# norm = norm_sign * ( norm_int + 0.5 * (torch.sign(norm_float - rand_float) + 1) )", "\n", "# norm = torch.clamp(norm,-factor+1,factor-1)", "\n", "# result = quant(norm*delta(bits)/128,15)", "\n", "\n", "        ", "dscale", "=", "scale", "(", "x", ")", "\n", "x", "=", "x", "/", "dscale", "\n", "factor", "=", "128", "\n", "bitsR", "=", "32", "\n", "norm", "=", "quant", "(", "factor", "*", "x", ",", "bitsR", ")", "\n", "\n", "norm_sign", "=", "torch", ".", "sign", "(", "norm", ")", "\n", "norm_abs", "=", "torch", ".", "abs", "(", "norm", ")", "\n", "norm_int", "=", "torch", ".", "floor", "(", "norm_abs", ")", "\n", "norm_float", "=", "norm_abs", "-", "norm_int", "\n", "rand_float", "=", "torch", ".", "FloatTensor", "(", "*", "x", ".", "size", "(", ")", ")", ".", "uniform_", "(", ")", ".", "cuda", "(", ")", "\n", "norm", "=", "norm_sign", "*", "(", "norm_int", "+", "0.5", "*", "(", "torch", ".", "sign", "(", "norm_float", "-", "rand_float", ")", "+", "1", ")", ")", "\n", "norm", "=", "torch", ".", "clamp", "(", "norm", ",", "-", "factor", "+", "1", ",", "factor", "-", "1", ")", "\n", "result", "=", "norm", "/", "128", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.UniformQuantize.forward": [[44, 83], ["torch.tensor().expand_as().cuda", "torch.tensor().expand_as().cuda", "torch.tensor().expand_as().cuda", "torch.tensor().expand_as().cuda", "torch.tensor().expand_as().cuda", "torch.tensor().expand_as().cuda", "torch.tensor().expand_as().cuda", "torch.tensor().expand_as().cuda", "torch.tensor().expand_as().cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ctx.mark_dirty", "input.clone", "quantize.calculate_qparams", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input.clone.add_().div_", "input.clone.clamp_().round_", "torch.tensor().expand_as", "torch.tensor().expand_as", "torch.tensor().expand_as", "torch.tensor().expand_as", "torch.tensor().expand_as", "torch.tensor().expand_as", "torch.tensor().expand_as", "torch.tensor().expand_as", "torch.tensor().expand_as", "input.clone.new().uniform_", "input.clone.add_", "input.clone.mul_().add_", "input.clone.add_", "input.clone.clamp_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "input.clone.new", "input.clone.mul_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "\n", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "\n", "        ", "ctx", ".", "inplace", "=", "inplace", "\n", "\n", "if", "ctx", ".", "inplace", ":", "\n", "            ", "ctx", ".", "mark_dirty", "(", "input", ")", "\n", "output", "=", "input", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", ".", "clone", "(", ")", "\n", "\n", "", "if", "qparams", "is", "None", ":", "\n", "            ", "assert", "num_bits", "is", "not", "None", ",", "\"either provide qparams of num_bits to quantize\"", "\n", "qparams", "=", "calculate_qparams", "(", "\n", "input", ",", "num_bits", "=", "num_bits", ",", "flatten_dims", "=", "flatten_dims", ",", "reduce_dim", "=", "reduce_dim", ")", "\n", "\n", "", "zero_point", "=", "qparams", ".", "zero_point", "\n", "num_bits", "=", "qparams", ".", "num_bits", "\n", "qmin", "=", "-", "(", "2.", "**", "(", "num_bits", "-", "1", ")", ")", "if", "signed", "else", "0.", "\n", "qmax", "=", "qmin", "+", "2.", "**", "num_bits", "-", "1.", "\n", "scale", "=", "qparams", ".", "range", "/", "(", "qmax", "-", "qmin", ")", "\n", "\n", "min_scale", "=", "torch", ".", "tensor", "(", "1e-8", ")", ".", "expand_as", "(", "scale", ")", ".", "cuda", "(", ")", "\n", "scale", "=", "torch", ".", "max", "(", "scale", ",", "min_scale", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ".", "add_", "(", "qmin", "*", "scale", "-", "zero_point", ")", ".", "div_", "(", "scale", ")", "\n", "if", "stochastic", ":", "\n", "# print('use stochastic')", "\n", "                ", "noise", "=", "output", ".", "new", "(", "output", ".", "shape", ")", ".", "uniform_", "(", "-", "0.5", ",", "0.5", ")", "\n", "output", ".", "add_", "(", "noise", ")", "\n", "# quantize", "\n", "", "output", ".", "clamp_", "(", "qmin", ",", "qmax", ")", ".", "round_", "(", ")", "\n", "\n", "if", "dequantize", ":", "\n", "                ", "output", ".", "mul_", "(", "scale", ")", ".", "add_", "(", "\n", "zero_point", "-", "qmin", "*", "scale", ")", "# dequantize", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.UniformQuantize.backward": [[84, 89], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# straight-through estimator", "\n", "        ", "grad_input", "=", "grad_output", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.UniformQuantizeGrad.forward": [[93, 105], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN_GRAD", ",", "\n", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "True", ")", ":", "\n", "        ", "ctx", ".", "num_bits", "=", "num_bits", "\n", "ctx", ".", "qparams", "=", "qparams", "\n", "ctx", ".", "flatten_dims", "=", "flatten_dims", "\n", "ctx", ".", "stochastic", "=", "stochastic", "\n", "ctx", ".", "signed", "=", "signed", "\n", "ctx", ".", "dequantize", "=", "dequantize", "\n", "ctx", ".", "reduce_dim", "=", "reduce_dim", "\n", "ctx", ".", "inplace", "=", "False", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.UniformQuantizeGrad.backward": [[106, 119], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "quantize.quantize", "quantize.calculate_qparams"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "qparams", "=", "ctx", ".", "qparams", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "qparams", "is", "None", ":", "\n", "                ", "assert", "ctx", ".", "num_bits", "is", "not", "None", ",", "\"either provide qparams of num_bits to quantize\"", "\n", "qparams", "=", "calculate_qparams", "(", "\n", "grad_output", ",", "num_bits", "=", "ctx", ".", "num_bits", ",", "flatten_dims", "=", "ctx", ".", "flatten_dims", ",", "reduce_dim", "=", "ctx", ".", "reduce_dim", ",", "reduce_type", "=", "'extreme'", ")", "\n", "\n", "", "grad_input", "=", "quantize", "(", "grad_output", ",", "num_bits", "=", "None", ",", "\n", "qparams", "=", "qparams", ",", "flatten_dims", "=", "ctx", ".", "flatten_dims", ",", "reduce_dim", "=", "ctx", ".", "reduce_dim", ",", "\n", "dequantize", "=", "True", ",", "signed", "=", "ctx", ".", "signed", ",", "stochastic", "=", "ctx", ".", "stochastic", ",", "inplace", "=", "False", ")", "\n", "", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.QuantMeasure.__init__": [[161, 174], ["torch.Module.__init__", "quantize.QuantMeasure.register_buffer", "quantize.QuantMeasure.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "quantize.QuantMeasure.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "shape_measure", "=", "(", "1", ",", ")", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "\n", "inplace", "=", "False", ",", "dequantize", "=", "True", ",", "stochastic", "=", "False", ",", "momentum", "=", "0.9", ",", "measure", "=", "False", ")", ":", "\n", "        ", "super", "(", "QuantMeasure", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'running_zero_point'", ",", "torch", ".", "zeros", "(", "*", "shape_measure", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_range'", ",", "torch", ".", "zeros", "(", "*", "shape_measure", ")", ")", "\n", "self", ".", "measure", "=", "measure", "\n", "if", "self", ".", "measure", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'num_measured'", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "self", ".", "flatten_dims", "=", "flatten_dims", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "dequantize", "=", "dequantize", "\n", "self", ".", "stochastic", "=", "stochastic", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.QuantMeasure.forward": [[175, 200], ["QParams", "quantize.quantize", "quantize.calculate_qparams", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "quantize.QuantMeasure.running_zero_point.mul_().add_", "quantize.QuantMeasure.running_range.mul_().add_", "quantize.QuantMeasure.running_zero_point.mul_", "quantize.QuantMeasure.running_range.mul_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams"], ["", "def", "forward", "(", "self", ",", "input", ",", "num_bits", ",", "qparams", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "training", "or", "self", ".", "measure", ":", "\n", "            ", "if", "qparams", "is", "None", ":", "\n", "                ", "qparams", "=", "calculate_qparams", "(", "\n", "input", ",", "num_bits", "=", "num_bits", ",", "flatten_dims", "=", "self", ".", "flatten_dims", ",", "reduce_dim", "=", "0", ",", "reduce_type", "=", "'extreme'", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "self", ".", "measure", ":", "\n", "                    ", "momentum", "=", "self", ".", "num_measured", "/", "(", "self", ".", "num_measured", "+", "1", ")", "\n", "self", ".", "num_measured", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "momentum", "=", "self", ".", "momentum", "\n", "", "self", ".", "running_zero_point", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "\n", "qparams", ".", "zero_point", "*", "(", "1", "-", "momentum", ")", ")", "\n", "self", ".", "running_range", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "\n", "qparams", ".", "range", "*", "(", "1", "-", "momentum", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "qparams", "=", "QParams", "(", "range", "=", "self", ".", "running_range", ",", "\n", "zero_point", "=", "self", ".", "running_zero_point", ",", "num_bits", "=", "num_bits", ")", "\n", "", "if", "self", ".", "measure", ":", "\n", "            ", "return", "input", "\n", "", "else", ":", "\n", "            ", "q_input", "=", "quantize", "(", "input", ",", "qparams", "=", "qparams", ",", "dequantize", "=", "self", ".", "dequantize", ",", "\n", "stochastic", "=", "self", ".", "stochastic", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "return", "q_input", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.QConv2d.__init__": [[205, 219], ["torch.Conv2d.__init__", "quantize.QuantMeasure", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "momentum", "=", "0.1", ",", "quant_act_forward", "=", "0", ",", "quant_act_backward", "=", "0", ",", "quant_grad_act_error", "=", "0", ",", "quant_grad_act_gc", "=", "0", ",", "weight_bits", "=", "0", ",", "fix_prec", "=", "False", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "\n", "self", ".", "quantize_input_fw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "quantize_input_bw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "self", ".", "quant_act_forward", "=", "quant_act_forward", "\n", "self", ".", "quant_act_backward", "=", "quant_act_backward", "\n", "self", ".", "quant_grad_act_error", "=", "quant_grad_act_error", "\n", "self", ".", "quant_grad_act_gc", "=", "quant_grad_act_gc", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "fix_prec", "=", "fix_prec", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.QConv2d.forward": [[221, 284], ["quantize.calculate_qparams", "quantize.quantize", "quantize.QConv2d.quantize_input_fw", "torch.conv2d", "torch.conv2d", "torch.conv2d", "quantize.quantize_grad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "quantize.quantize", "quantize.calculate_qparams", "quantize.quantize", "quantize.QConv2d.quantize_input_fw", "quantize.QConv2d.quantize_input_bw", "quantize.QConv2d.conv2d_quant_act", "quantize.QConv2d.quantize_input_fw", "quantize.calculate_qparams", "quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "quantize.quantize_grad"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.QConv2d.conv2d_quant_act", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad"], ["", "def", "forward", "(", "self", ",", "input", ",", "num_bits", ",", "num_grad_bits", ")", ":", "\n", "        ", "if", "num_bits", "==", "0", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "output", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "quantize", "(", "\n", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", "+", "self", ".", "num_bits", ",", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "qbias", "=", "None", "\n", "\n", "", "if", "self", ".", "fix_prec", ":", "\n", "            ", "if", "self", ".", "quant_act_forward", "or", "self", ".", "quant_act_backward", "or", "self", ".", "quant_grad_act_error", "or", "self", ".", "quant_grad_act_gc", "or", "self", ".", "weight_bits", ":", "\n", "                ", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "\n", "qinput_fw", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "self", ".", "quant_act_forward", ")", "\n", "qinput_bw", "=", "self", ".", "quantize_input_bw", "(", "input", ",", "self", ".", "quant_act_backward", ")", "\n", "\n", "error_bits", "=", "self", ".", "quant_grad_act_error", "\n", "gc_bits", "=", "self", ".", "quant_grad_act_gc", "\n", "output", "=", "self", ".", "conv2d_quant_act", "(", "qinput_fw", ",", "qinput_bw", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "error_bits", ",", "gc_bits", ")", "\n", "\n", "", "else", ":", "\n", "                ", "qinput", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "num_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "num_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "output", "=", "F", ".", "conv2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "num_grad_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "return", "output", "\n", "\n", "", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "\n", "qinput", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "num_bits", ")", "\n", "output", "=", "F", ".", "conv2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "num_grad_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "# if self.quant_act_forward == -1:", "\n", "#     qinput_fw = self.quantize_input_fw(input, num_bits)", "\n", "# else:", "\n", "#     qinput_fw = self.quantize_input_fw(input, self.quant_act_forward)", "\n", "\n", "# if self.quant_act_backward == -1:", "\n", "#     qinput_bw = self.quantize_input_bw(input, num_bits)", "\n", "# else:", "\n", "#     qinput_bw = self.quantize_input_bw(input, self.quant_act_backward)", "\n", "\n", "# if self.quant_grad_act_error == -1:", "\n", "#     error_bits = num_grad_bits", "\n", "# else:", "\n", "#     error_bits = self.quant_grad_act_error", "\n", "\n", "# if self.quant_grad_act_gc == -1:", "\n", "#     gc_bits = num_grad_bits", "\n", "# else:", "\n", "#     gc_bits = self.quant_grad_act_gc", "\n", "\n", "# output = self.conv2d_quant_act(qinput_fw, qinput_bw, qweight, qbias, self.stride, self.padding, self.dilation, self.groups, error_bits, gc_bits)", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.QConv2d.conv2d_quant_act": [[286, 294], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "quantize.quantize_grad", "quantize.quantize_grad", "weight.detach", "input_bw.detach", "quantize_grad.detach", "bias.detach"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad"], ["", "def", "conv2d_quant_act", "(", "self", ",", "input_fw", ",", "input_bw", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "error_bits", "=", "0", ",", "gc_bits", "=", "0", ")", ":", "\n", "        ", "out1", "=", "F", ".", "conv2d", "(", "input_fw", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "if", "bias", "is", "not", "None", "else", "None", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "F", ".", "conv2d", "(", "input_bw", ".", "detach", "(", ")", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out1", "=", "quantize_grad", "(", "out1", ",", "num_bits", "=", "error_bits", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "gc_bits", ")", "\n", "return", "out1", "+", "out2", "-", "out2", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.QLinear.__init__": [[299, 306], ["torch.Linear.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ",", "num_bits_grad", "=", "8", ",", "biprecision", "=", "False", ")", ":", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "or", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "biprecision", "=", "biprecision", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.QLinear.forward": [[307, 331], ["quantize.QLinear.quantize_input", "quantize.calculate_qparams", "quantize.quantize", "torch.linear", "torch.linear", "torch.linear", "quantize.quantize_grad", "quantize.quantize"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize"], ["", "def", "forward", "(", "self", ",", "input", ",", "num_bits", ",", "num_bits_grad", ")", ":", "\n", "# self.quantize_input = QuantMeasure(num_bits)", "\n", "\n", "        ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ",", "num_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "\n", "self", ".", "weight", ",", "num_bits", "=", "num_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "quantize", "(", "\n", "self", ".", "bias", ",", "num_bits", "=", "num_bits", ",", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "qbias", "=", "None", "\n", "\n", "# if not self.biprecision or self.num_bits_grad is None:", "\n", "", "output", "=", "F", ".", "linear", "(", "qinput", ",", "qweight", ",", "qbias", ")", "\n", "#     if self.num_bits_grad is not None:", "\n", "output", "=", "quantize_grad", "(", "\n", "output", ",", "num_bits", "=", "num_bits_grad", ")", "\n", "# else:", "\n", "#     output = linear_biprec(qinput, qweight, qbias, self.num_bits_grad)", "\n", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.RangeBN.__init__": [[336, 352], ["torch.Module.__init__", "quantize.RangeBN.register_buffer", "quantize.RangeBN.register_buffer", "quantize.QuantMeasure", "quantize.RangeBN.reset_params", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.RangeBN.reset_params"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "dim", "=", "1", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "num_chunks", "=", "16", ",", "eps", "=", "1e-5", ",", "num_bits", "=", "8", ",", "num_bits_grad", "=", "8", ")", ":", "\n", "        ", "super", "(", "RangeBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "dim", "=", "dim", "\n", "if", "affine", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "inplace", "=", "True", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "num_chunks", "=", "num_chunks", "\n", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.RangeBN.reset_params": [[353, 358], ["quantize.RangeBN.weight.data.uniform_", "quantize.RangeBN.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.RangeBN.forward": [[359, 407], ["quantize.RangeBN.quantize_input", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.transpose().contiguous", "y.view.view.view", "[].mean", "[].mean", "y.view.view.view().mean", "quantize.quantize_grad", "out.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "quantize.RangeBN.running_mean.mul_().add_", "quantize.RangeBN.running_var.mul_().add_", "y.view.view().mean.view", "scale.view", "qweight.view", "qbias.view", "out.squeeze().squeeze.squeeze().squeeze.size", "out.squeeze().squeeze.squeeze().squeeze.size", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.transpose", "y.view.view.view", "out.squeeze().squeeze.squeeze().squeeze.squeeze", "y.view.view.max", "y.view.view.min", "math.log", "quantize.RangeBN.running_mean.mul_", "quantize.RangeBN.running_var.mul_", "y.view.view.size", "math.log"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "num_bits", ",", "num_grad_bits", ")", ":", "\n", "        ", "x", "=", "self", ".", "quantize_input", "(", "x", ",", "num_bits", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "# 1d", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ",", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "y", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# C x B x H x W", "\n", "y", "=", "y", ".", "view", "(", "C", ",", "self", ".", "num_chunks", ",", "(", "B", "*", "H", "*", "W", ")", "//", "self", ".", "num_chunks", ")", "\n", "mean_max", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean_min", "=", "y", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean", "=", "y", ".", "view", "(", "C", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "# C", "\n", "scale_fix", "=", "(", "0.5", "*", "0.35", ")", "*", "(", "1", "+", "(", "math", ".", "pi", "*", "math", ".", "log", "(", "4", ")", ")", "**", "\n", "0.5", ")", "/", "(", "(", "2", "*", "math", ".", "log", "(", "y", ".", "size", "(", "-", "1", ")", ")", ")", "**", "0.5", ")", "\n", "\n", "scale", "=", "(", "mean_max", "-", "mean_min", ")", "*", "scale_fix", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "mean", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "scale", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "scale", "=", "self", ".", "running_var", "\n", "# scale = quantize(scale, num_bits=self.num_bits, min_value=float(", "\n", "#     scale.min()), max_value=float(scale.max()))", "\n", "", "out", "=", "(", "x", "-", "mean", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "/", "(", "scale", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "+", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "qweight", "=", "self", ".", "weight", "\n", "# qweight = quantize(self.weight, num_bits=self.num_bits,", "\n", "#                    min_value=float(self.weight.min()),", "\n", "#                    max_value=float(self.weight.max()))", "\n", "out", "=", "out", "*", "qweight", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "self", ".", "bias", "\n", "# qbias = quantize(self.bias, num_bits=self.num_bits)", "\n", "out", "=", "out", "+", "qbias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "if", "num_grad_bits", ":", "\n", "            ", "out", "=", "quantize_grad", "(", "\n", "out", ",", "num_bits", "=", "num_grad_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "if", "out", ".", "size", "(", "3", ")", "==", "1", "and", "out", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "            ", "out", "=", "out", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.RangeBN1d.__init__": [[412, 417], ["quantize.RangeBN.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "dim", "=", "1", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "num_chunks", "=", "16", ",", "eps", "=", "1e-5", ",", "num_bits", "=", "8", ",", "num_bits_grad", "=", "8", ")", ":", "\n", "        ", "super", "(", "RangeBN1d", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "dim", ",", "momentum", ",", "\n", "affine", ",", "num_chunks", ",", "eps", ",", "num_bits", ",", "num_bits_grad", ")", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "\n", "self", ".", "num_bits", ",", "inplace", "=", "True", ",", "shape_measure", "=", "(", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize._deflatten_as": [[14, 17], ["x.view", "list", "x_full.dim", "x.dim"], "function", ["None"], ["def", "_deflatten_as", "(", "x", ",", "x_full", ")", ":", "\n", "    ", "shape", "=", "list", "(", "x", ".", "shape", ")", "+", "[", "1", "]", "*", "(", "x_full", ".", "dim", "(", ")", "-", "x", ".", "dim", "(", ")", ")", "\n", "return", "x", ".", "view", "(", "*", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.calculate_qparams": [[19, 40], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "x.flatten", "QParams", "x.flatten.dim", "quantize._deflatten_as", "quantize._deflatten_as", "quantize._deflatten_as", "quantize._deflatten_as", "x.flatten.min", "x.flatten.max", "min_values.mean.mean", "max_values.mean.mean", "x.flatten.min", "x.flatten.max", "min_values.mean.min", "max_values.mean.max"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as"], ["", "def", "calculate_qparams", "(", "x", ",", "num_bits", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "reduce_dim", "=", "0", ",", "reduce_type", "=", "'mean'", ",", "keepdim", "=", "False", ",", "true_zero", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "x_flat", "=", "x", ".", "flatten", "(", "*", "flatten_dims", ")", "\n", "if", "x_flat", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "min_values", "=", "_deflatten_as", "(", "x_flat", ".", "min", "(", ")", ",", "x", ")", "\n", "max_values", "=", "_deflatten_as", "(", "x_flat", ".", "max", "(", ")", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "min_values", "=", "_deflatten_as", "(", "x_flat", ".", "min", "(", "-", "1", ")", "[", "0", "]", ",", "x", ")", "\n", "max_values", "=", "_deflatten_as", "(", "x_flat", ".", "max", "(", "-", "1", ")", "[", "0", "]", ",", "x", ")", "\n", "\n", "", "if", "reduce_dim", "is", "not", "None", ":", "\n", "            ", "if", "reduce_type", "==", "'mean'", ":", "\n", "                ", "min_values", "=", "min_values", ".", "mean", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "\n", "max_values", "=", "max_values", ".", "mean", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "\n", "", "else", ":", "\n", "                ", "min_values", "=", "min_values", ".", "min", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "[", "0", "]", "\n", "max_values", "=", "max_values", ".", "max", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "[", "0", "]", "\n", "\n", "", "", "range_values", "=", "max_values", "-", "min_values", "\n", "return", "QParams", "(", "range", "=", "range_values", ",", "zero_point", "=", "min_values", ",", "\n", "num_bits", "=", "num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.conv2d_biprec": [[121, 128], ["torch.conv2d", "torch.conv2d", "quantize.quantize_grad", "input.detach", "weight.detach", "F.conv2d.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad"], ["", "", "def", "conv2d_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "conv2d", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "if", "bias", "is", "not", "None", "else", "None", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.linear_biprec": [[130, 136], ["torch.linear", "torch.linear", "quantize.quantize_grad", "input.detach", "weight.detach", "F.linear.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad"], ["", "def", "linear_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "linear", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ")", "\n", "out2", "=", "F", ".", "linear", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "\n", "if", "bias", "is", "not", "None", "else", "None", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.quantize": [[138, 146], ["UniformQuantize().apply", "UniformQuantize().apply", "quantize.UniformQuantize", "quantize.UniformQuantize"], "function", ["None"], ["", "def", "quantize", "(", "x", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "if", "qparams", ":", "\n", "        ", "if", "qparams", ".", "num_bits", ":", "\n", "            ", "return", "UniformQuantize", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "qparams", ",", "flatten_dims", ",", "reduce_dim", ",", "dequantize", ",", "signed", ",", "stochastic", ",", "inplace", ")", "\n", "", "", "elif", "num_bits", ":", "\n", "        ", "return", "UniformQuantize", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "qparams", ",", "flatten_dims", ",", "reduce_dim", ",", "dequantize", ",", "signed", ",", "stochastic", ",", "inplace", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.quantize.quantize_grad": [[148, 156], ["UniformQuantizeGrad().apply", "UniformQuantizeGrad().apply", "quantize.UniformQuantizeGrad", "quantize.UniformQuantizeGrad"], "function", ["None"], ["", "def", "quantize_grad", "(", "x", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN_GRAD", ",", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "True", ")", ":", "\n", "    ", "if", "qparams", ":", "\n", "        ", "if", "qparams", ".", "num_bits", ":", "\n", "            ", "return", "UniformQuantizeGrad", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "qparams", ",", "flatten_dims", ",", "reduce_dim", ",", "dequantize", ",", "signed", ",", "stochastic", ")", "\n", "", "", "elif", "num_bits", ":", "\n", "        ", "return", "UniformQuantizeGrad", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "qparams", ",", "flatten_dims", ",", "reduce_dim", ",", "dequantize", ",", "signed", ",", "stochastic", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.RoundActFixedPoint.forward": [[34, 37], ["conv_mask_shift.round_act_to_fixed"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round_act_to_fixed"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bits", ")", ":", "\n", "        ", "return", "round_act_to_fixed", "(", "input", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.RoundActFixedPoint.backward": [[38, 41], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.RoundFunction.forward": [[54, 57], ["conv_mask_shift.dynamic_range_for_sign"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.dynamic_range_for_sign"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "threshold", ")", ":", "\n", "        ", "return", "dynamic_range_for_sign", "(", "input", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.RoundFunction.backward": [[58, 61], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.__init__": [[66, 102], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "conv_mask_shift.SEConv2d.register_buffer", "range", "conv_mask_shift.SEConv2d.reset_parameters", "ValueError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "conv_mask_shift.SEConv2d.register_parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "conv_mask_shift.SEConv2d.weight.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "size_splits", "=", "64", ",", "\n", "threshold", "=", "5e-3", ",", "sign_threshold", "=", "0.5", ",", "distribution", "=", "'uniform'", ")", ":", "\n", "        ", "super", "(", "SEConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "size_splits", "=", "size_splits", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "randn", "(", "\n", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "p", "=", "torch", ".", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "s", "=", "torch", ".", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "weight", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "for", "i", "in", "range", "(", "-", "10", ",", "1", ")", ":", "\n", "            ", "if", "2", "**", "i", ">=", "threshold", ":", "\n", "                ", "self", ".", "min_p", "=", "-", "i", "\n", "break", "\n", "", "", "self", ".", "shift_range", "=", "(", "-", "1", "*", "self", ".", "min_p", ",", "0", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.reset_dweight_counter": [[103, 105], ["conv_mask_shift.SEConv2d.weight.new_zeros().float", "conv_mask_shift.SEConv2d.weight.new_zeros", "conv_mask_shift.SEConv2d.weight.size"], "methods", ["None"], ["", "def", "reset_dweight_counter", "(", "self", ")", ":", "\n", "        ", "self", ".", "dweight_counter", "=", "self", ".", "weight", ".", "new_zeros", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.reset_parameters": [[106, 134], ["torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "conv_mask_shift.SEConv2d.set_mask", "conv_mask_shift.SEConv2d.s.data.uniform_", "deepshift.ste.sign", "abs", "deepshift.ste.clamp", "deepshift.ste.round", "conv_mask_shift.SEConv2d.s.data.uniform_", "deepshift.ste.sign", "print", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.uniform_", "conv_mask_shift.round", "conv_mask_shift.SEConv2d.p.data.uniform_", "conv_mask_shift.round", "math.sqrt", "conv_mask_shift.SEConv2d.p.data.normal_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# n = self.in_channels", "\n", "# init.kaiming_uniform_(self.weight, a=math.sqrt(5))", "\n", "# init.kaiming_normal_(self.weight, mode='fan_out', nonlinearity='relu')", "\n", "#", "\n", "        ", "if", "self", ".", "distribution", "==", "'kaiming_normal'", ":", "\n", "            ", "init", ".", "kaiming_normal_", "(", "self", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "self", ".", "set_mask", "(", ")", "# quantize", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "sign", "=", "ste", ".", "sign", "(", "round", "(", "self", ".", "s", ",", "self", ".", "sign_threshold", ")", ")", "\n", "self", ".", "weight", ".", "data", "*=", "abs", "(", "sign", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "distribution", "==", "'uniform'", ":", "\n", "                ", "self", ".", "p", ".", "data", ".", "uniform_", "(", "-", "self", ".", "min_p", "-", "0.5", ",", "-", "1", "+", "0.5", ")", "\n", "", "elif", "self", ".", "distribution", "==", "'normal'", ":", "\n", "                ", "self", ".", "p", ".", "data", ".", "normal_", "(", "-", "self", ".", "min_p", "/", "2", ",", "1", ")", "\n", "", "self", ".", "p", ".", "data", "=", "ste", ".", "clamp", "(", "self", ".", "p", ".", "data", ",", "*", "self", ".", "shift_range", ")", "\n", "self", ".", "p", ".", "data", "=", "ste", ".", "round", "(", "self", ".", "p", ".", "data", ",", "'deterministic'", ")", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "sign", "=", "ste", ".", "sign", "(", "round", "(", "self", ".", "s", ",", "self", ".", "sign_threshold", ")", ")", "\n", "# self.weight.data = torch.sign(self.weight) * (2 ** self.p.data)", "\n", "self", ".", "weight", ".", "data", "=", "sign", "*", "(", "2", "**", "self", ".", "p", ".", "data", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "print", "(", "'use bias'", ")", "\n", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.extra_repr": [[135, 149], ["s.format", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', stride={stride}'", ")", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "# if self.output_padding != (0,) * len(self.output_padding):", "\n", "#     s += ', output_padding={output_padding}'", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "', groups={groups}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.set_mask": [[150, 154], ["conv_mask_shift.SEConv2d.sparsify_and_quantize_weight"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.sparsify_and_quantize_weight"], ["", "def", "set_mask", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight", ".", "data", "=", "self", ".", "sparsify_and_quantize_weight", "(", "mask", "=", "False", ")", "\n", "self", ".", "mask", ".", "data", "=", "(", "self", ".", "weight", "!=", "0.0", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.sparsify_and_quantize_weight": [[155, 160], ["se_shift.utils_quantize.sparsify_and_nearestpow2"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.sparsify_and_nearestpow2"], ["", "def", "sparsify_and_quantize_weight", "(", "self", ",", "mask", "=", "True", ")", ":", "\n", "        ", "qweight", "=", "sparsify_and_nearestpow2", "(", "self", ".", "weight", ",", "self", ".", "threshold", ")", "\n", "if", "mask", ":", "\n", "            ", "qweight", "=", "qweight", "*", "self", ".", "mask", "\n", "", "return", "qweight", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.get_weight": [[161, 164], ["conv_mask_shift.SEConv2d.sparsify_and_quantize_weight"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.sparsify_and_quantize_weight"], ["", "def", "get_weight", "(", "self", ",", "mask", "=", "True", ")", ":", "\n", "        ", "qweight", "=", "self", ".", "sparsify_and_quantize_weight", "(", "mask", "=", "mask", ")", "\n", "return", "qweight", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.SEConv2d.forward": [[165, 177], ["conv_mask_shift.round_act_fixed_point", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round_act_fixed_point", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Get the weight", "\n", "# weight = self.get_weight(mask=True)", "\n", "        ", "weight", "=", "self", ".", "weight", "\n", "input", "=", "round_act_fixed_point", "(", "input", ",", "bits", "=", "16", ")", "\n", "# intput = ste.round_fixed_point(input)", "\n", "# weight = self.get_weight(mask=False)", "\n", "\n", "output", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round_act_to_fixed": [[24, 32], ["torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.round", "torch.round", "torch.round", "torch.round"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["def", "round_act_to_fixed", "(", "input", ",", "bits", "=", "16", ")", ":", "\n", "    ", "if", "bits", "==", "1", ":", "\n", "        ", "return", "torch", ".", "sign", "(", "input", ")", "\n", "", "S", "=", "2.", "**", "(", "bits", "-", "1", ")", "\n", "\n", "input_round", "=", "torch", ".", "round", "(", "input", "*", "S", ")", "/", "S", "\n", "\n", "return", "input_round", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round_act_fixed_point": [[42, 44], ["RoundActFixedPoint.apply"], "function", ["None"], ["", "", "def", "round_act_fixed_point", "(", "input", ",", "bits", ")", ":", "\n", "    ", "return", "RoundActFixedPoint", ".", "apply", "(", "input", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.dynamic_range_for_sign": [[46, 52], ["None"], "function", ["None"], ["", "def", "dynamic_range_for_sign", "(", "sign", ",", "threshold", ")", ":", "\n", "# print(sign, threshold)", "\n", "    ", "sign", "[", "sign", "<", "-", "threshold", "]", "=", "-", "1", "\n", "sign", "[", "sign", ">", "threshold", "]", "=", "1", "\n", "sign", "[", "(", "-", "threshold", "<=", "sign", ")", "&", "(", "sign", "<=", "threshold", ")", "]", "=", "0", "\n", "return", "sign", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round": [[62, 64], ["RoundFunction.apply"], "function", ["None"], ["", "", "def", "round", "(", "input", ",", "threshold", ")", ":", "\n", "    ", "return", "RoundFunction", ".", "apply", "(", "input", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask.SEConv2d.__init__": [[23, 62], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "conv_mask.SEConv2d.register_buffer", "conv_mask.SEConv2d.set_mask", "conv_mask.SEConv2d.reset_parameters", "ValueError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "conv_mask.SEConv2d.register_parameter", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "conv_mask.SEConv2d.C.size", "conv_mask.SEConv2d.C.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "size_splits", "=", "64", ",", "\n", "threshold", "=", "5e-3", ")", ":", "\n", "        ", "super", "(", "SEConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channels", "%", "groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'in_channels must be divisible by groups'", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "size_splits", "=", "size_splits", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "kernel_size", "[", "1", "]", ">", "1", ":", "\n", "            ", "self", ".", "size_B", "=", "self", ".", "kernel_size", "[", "1", "]", "\n", "if", "(", "in_channels", "//", "self", ".", "groups", ")", "<", "self", ".", "size_splits", ":", "\n", "                ", "self", ".", "num_splits", ",", "self", ".", "size_splits", "=", "1", ",", "(", "in_channels", "//", "self", ".", "groups", ")", "\n", "", "if", "in_channels", ">=", "self", ".", "size_splits", ":", "\n", "                ", "self", ".", "num_splits", "=", "(", "in_channels", "//", "self", ".", "groups", ")", "//", "self", ".", "size_splits", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "size_B", "=", "3", "\n", "self", ".", "num_splits", ",", "self", ".", "size_splits", "=", "VEC_2_SHAPE", "[", "in_channels", "//", "self", ".", "groups", "]", "\n", "\n", "", "self", ".", "C", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", "*", "self", ".", "num_splits", ",", "\n", "self", ".", "size_splits", "*", "self", ".", "kernel_size", "[", "0", "]", ",", "self", ".", "size_B", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "B", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "C", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "size_B", ",", "self", ".", "size_B", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "C", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask.SEConv2d.reset_dC_counter": [[63, 65], ["conv_mask.SEConv2d.C.new_zeros().float", "conv_mask.SEConv2d.C.new_zeros", "conv_mask.SEConv2d.C.size"], "methods", ["None"], ["", "def", "reset_dC_counter", "(", "self", ")", ":", "\n", "        ", "self", ".", "dC_counter", "=", "self", ".", "C", ".", "new_zeros", "(", "self", ".", "C", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask.SEConv2d.reset_parameters": [[66, 76], ["torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv_mask.SEConv2d.B.normal_", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "# init.kaiming_uniform_(self.weight, a=math.sqrt(5))", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "C", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "B", ".", "normal_", "(", "0", ",", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "size_B", ")", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask.SEConv2d.extra_repr": [[77, 91], ["s.format", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', stride={stride}'", ")", "\n", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "# if self.output_padding != (0,) * len(self.output_padding):", "\n", "#     s += ', output_padding={output_padding}'", "\n", "", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "s", "+=", "', groups={groups}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask.SEConv2d.set_mask": [[92, 96], ["conv_mask.SEConv2d.sparsify_and_quantize_C"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.sparsify_and_quantize_C"], ["", "def", "set_mask", "(", "self", ")", ":", "\n", "        ", "self", ".", "C", ".", "data", "=", "self", ".", "sparsify_and_quantize_C", "(", "mask", "=", "False", ")", "\n", "self", ".", "mask", ".", "data", "=", "(", "self", ".", "C", "!=", "0.0", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask.SEConv2d.sparsify_and_quantize_C": [[97, 102], ["se_shift.utils_quantize.sparsify_and_nearestpow2"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.sparsify_and_nearestpow2"], ["", "def", "sparsify_and_quantize_C", "(", "self", ",", "mask", "=", "True", ")", ":", "\n", "        ", "qC", "=", "sparsify_and_nearestpow2", "(", "self", ".", "C", ",", "self", ".", "threshold", ")", "\n", "if", "mask", ":", "\n", "            ", "qC", "=", "qC", "*", "self", ".", "mask", "\n", "", "return", "qC", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask.SEConv2d.get_weight": [[103, 113], ["conv_mask.SEConv2d.sparsify_and_quantize_C", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.reshape", "torch.bmm.reshape", "torch.bmm.reshape", "torch.bmm.reshape"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.sparsify_and_quantize_C"], ["", "def", "get_weight", "(", "self", ",", "mask", "=", "True", ")", ":", "\n", "        ", "qC", "=", "self", ".", "sparsify_and_quantize_C", "(", "mask", "=", "mask", ")", "\n", "# if mask:", "\n", "#     qC = qC * self.mask", "\n", "BC", "=", "torch", ".", "bmm", "(", "qC", ",", "self", ".", "B", ")", "\n", "# Reshape `self.BC` to (out_channels, in_channels, kW, hW)", "\n", "weight", "=", "BC", ".", "reshape", "(", "self", ".", "out_channels", ",", "-", "1", ",", "*", "self", ".", "kernel_size", ")", "\n", "if", "self", ".", "kernel_size", "[", "1", "]", "==", "1", ":", "\n", "            ", "weight", "=", "weight", "[", ":", ",", "0", ":", "self", ".", "in_channels", ",", ":", ",", ":", "]", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask.SEConv2d.forward": [[114, 122], ["conv_mask.SEConv2d.get_weight", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.get_weight", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Get the weight from `self.B` and `self.C`", "\n", "        ", "weight", "=", "self", ".", "get_weight", "(", "mask", "=", "True", ")", "\n", "\n", "output", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.UniformQuantize.forward": [[43, 77], ["ctx.mark_dirty", "input.clone", "utils_quantize.calculate_qparams", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input.clone.add_().div_", "input.clone.clamp_().round_", "input.clone.new().uniform_", "input.clone.add_", "input.clone.mul_().add_", "input.clone.add_", "input.clone.clamp_", "input.clone.new", "input.clone.mul_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "\n", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "\n", "        ", "ctx", ".", "inplace", "=", "inplace", "\n", "\n", "if", "ctx", ".", "inplace", ":", "\n", "            ", "ctx", ".", "mark_dirty", "(", "input", ")", "\n", "output", "=", "input", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", ".", "clone", "(", ")", "\n", "\n", "", "if", "qparams", "is", "None", ":", "\n", "            ", "assert", "num_bits", "is", "not", "None", ",", "\"either provide qparams of num_bits to quantize\"", "\n", "qparams", "=", "calculate_qparams", "(", "\n", "input", ",", "num_bits", "=", "num_bits", ",", "flatten_dims", "=", "flatten_dims", ",", "reduce_dim", "=", "reduce_dim", ")", "\n", "\n", "", "zero_point", "=", "qparams", ".", "zero_point", "\n", "num_bits", "=", "qparams", ".", "num_bits", "\n", "qmin", "=", "-", "(", "2.", "**", "(", "num_bits", "-", "1", ")", ")", "if", "signed", "else", "0.", "\n", "qmax", "=", "qmin", "+", "2.", "**", "num_bits", "-", "1.", "\n", "scale", "=", "qparams", ".", "range", "/", "(", "qmax", "-", "qmin", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ".", "add_", "(", "qmin", "*", "scale", "-", "zero_point", ")", ".", "div_", "(", "scale", ")", "\n", "if", "stochastic", ":", "\n", "                ", "noise", "=", "output", ".", "new", "(", "output", ".", "shape", ")", ".", "uniform_", "(", "-", "0.5", ",", "0.5", ")", "\n", "output", ".", "add_", "(", "noise", ")", "\n", "# quantize", "\n", "", "output", ".", "clamp_", "(", "qmin", ",", "qmax", ")", ".", "round_", "(", ")", "\n", "\n", "if", "dequantize", ":", "\n", "                ", "output", ".", "mul_", "(", "scale", ")", ".", "add_", "(", "\n", "zero_point", "-", "qmin", "*", "scale", ")", "# dequantize", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.UniformQuantize.backward": [[78, 83], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# straight-through estimator", "\n", "        ", "grad_input", "=", "grad_output", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.UniformQuantizeGrad.forward": [[87, 99], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN_GRAD", ",", "\n", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "True", ")", ":", "\n", "        ", "ctx", ".", "num_bits", "=", "num_bits", "\n", "ctx", ".", "qparams", "=", "qparams", "\n", "ctx", ".", "flatten_dims", "=", "flatten_dims", "\n", "ctx", ".", "stochastic", "=", "stochastic", "\n", "ctx", ".", "signed", "=", "signed", "\n", "ctx", ".", "dequantize", "=", "dequantize", "\n", "ctx", ".", "reduce_dim", "=", "reduce_dim", "\n", "ctx", ".", "inplace", "=", "False", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.UniformQuantizeGrad.backward": [[100, 113], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils_quantize.quantize", "utils_quantize.calculate_qparams"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "qparams", "=", "ctx", ".", "qparams", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "qparams", "is", "None", ":", "\n", "                ", "assert", "ctx", ".", "num_bits", "is", "not", "None", ",", "\"either provide qparams of num_bits to quantize\"", "\n", "qparams", "=", "calculate_qparams", "(", "\n", "grad_output", ",", "num_bits", "=", "ctx", ".", "num_bits", ",", "flatten_dims", "=", "ctx", ".", "flatten_dims", ",", "reduce_dim", "=", "ctx", ".", "reduce_dim", ",", "reduce_type", "=", "'extreme'", ")", "\n", "\n", "", "grad_input", "=", "quantize", "(", "grad_output", ",", "num_bits", "=", "None", ",", "\n", "qparams", "=", "qparams", ",", "flatten_dims", "=", "ctx", ".", "flatten_dims", ",", "reduce_dim", "=", "ctx", ".", "reduce_dim", ",", "\n", "dequantize", "=", "True", ",", "signed", "=", "ctx", ".", "signed", ",", "stochastic", "=", "ctx", ".", "stochastic", ",", "inplace", "=", "False", ")", "\n", "", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.SparsifyAndNearestPow2.forward": [[142, 163], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input.new_zeros", "input.sign", "input.abs", "input.size", "input_abs_nnz.log2().ceil", "input_abs_nnz.log2"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "threshold", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "input", ".", "new_zeros", "(", "input", ".", "size", "(", ")", ")", "\n", "input_sign", "=", "input", ".", "sign", "(", ")", "\n", "input_abs", "=", "input", ".", "abs", "(", ")", "\n", "\n", "nnz_idx", "=", "input_abs", ">=", "(", "threshold", "-", "eps", ")", "\n", "input_abs_nnz", "=", "input_abs", "[", "nnz_idx", "]", "\n", "\n", "nextpow2", "=", "2", "**", "input_abs_nnz", ".", "log2", "(", ")", ".", "ceil", "(", ")", "\n", "prevpow2", "=", "nextpow2", "/", "2.0", "\n", "lerr", "=", "input_abs_nnz", "-", "prevpow2", "\n", "rerr", "=", "nextpow2", "-", "input_abs_nnz", "\n", "lbetter", "=", "(", "lerr", "<", "rerr", ")", ".", "float", "(", ")", "\n", "# print(prevpow2.size(), nextpow2.size(), lbetter.size())", "\n", "# output_abs_nnz = prevpow2[lbetter] + nextpow2[~lbetter]", "\n", "output_abs_nnz", "=", "prevpow2", "*", "lbetter", "+", "nextpow2", "*", "(", "1", "-", "lbetter", ")", "\n", "\n", "output", "[", "nnz_idx", "]", "=", "output_abs_nnz", "*", "input_sign", "[", "nnz_idx", "]", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.SparsifyAndNearestPow2.backward": [[164, 169], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# straight-through estimator", "\n", "        ", "grad_input", "=", "grad_output", "\n", "return", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.QuantMeasure.__init__": [[178, 192], ["torch.Module.__init__", "utils_quantize.QuantMeasure.register_buffer", "utils_quantize.QuantMeasure.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils_quantize.QuantMeasure.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "num_bits", "=", "8", ",", "shape_measure", "=", "(", "1", ",", ")", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "\n", "inplace", "=", "False", ",", "dequantize", "=", "True", ",", "stochastic", "=", "False", ",", "momentum", "=", "0.1", ",", "measure", "=", "False", ")", ":", "\n", "        ", "super", "(", "QuantMeasure", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'running_zero_point'", ",", "torch", ".", "zeros", "(", "*", "shape_measure", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_range'", ",", "torch", ".", "zeros", "(", "*", "shape_measure", ")", ")", "\n", "self", ".", "measure", "=", "measure", "\n", "if", "self", ".", "measure", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'num_measured'", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "self", ".", "flatten_dims", "=", "flatten_dims", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "dequantize", "=", "dequantize", "\n", "self", ".", "stochastic", "=", "stochastic", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.QuantMeasure.forward": [[193, 218], ["QParams", "utils_quantize.quantize", "utils_quantize.calculate_qparams", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils_quantize.QuantMeasure.running_zero_point.mul_().add_", "utils_quantize.QuantMeasure.running_range.mul_().add_", "utils_quantize.QuantMeasure.running_zero_point.mul_", "utils_quantize.QuantMeasure.running_range.mul_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams"], ["", "def", "forward", "(", "self", ",", "input", ",", "qparams", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "training", "or", "self", ".", "measure", ":", "\n", "            ", "if", "qparams", "is", "None", ":", "\n", "                ", "qparams", "=", "calculate_qparams", "(", "\n", "input", ",", "num_bits", "=", "self", ".", "num_bits", ",", "flatten_dims", "=", "self", ".", "flatten_dims", ",", "reduce_dim", "=", "0", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "self", ".", "measure", ":", "\n", "                    ", "momentum", "=", "self", ".", "num_measured", "/", "(", "self", ".", "num_measured", "+", "1", ")", "\n", "self", ".", "num_measured", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "momentum", "=", "self", ".", "momentum", "\n", "", "self", ".", "running_zero_point", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "\n", "qparams", ".", "zero_point", "*", "(", "1", "-", "momentum", ")", ")", "\n", "self", ".", "running_range", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "\n", "qparams", ".", "range", "*", "(", "1", "-", "momentum", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "qparams", "=", "QParams", "(", "range", "=", "self", ".", "running_range", ",", "\n", "zero_point", "=", "self", ".", "running_zero_point", ",", "num_bits", "=", "self", ".", "num_bits", ")", "\n", "", "if", "self", ".", "measure", ":", "\n", "            ", "return", "input", "\n", "", "else", ":", "\n", "            ", "q_input", "=", "quantize", "(", "input", ",", "qparams", "=", "qparams", ",", "dequantize", "=", "self", ".", "dequantize", ",", "\n", "stochastic", "=", "self", ".", "stochastic", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "return", "q_input", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.QConv2d.__init__": [[223, 234], ["torch.Conv2d.__init__", "utils_quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ",", "num_bits_grad", "=", "8", ",", "biprecision", "=", "False", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "or", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "\n", "self", ".", "num_bits", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "self", ".", "biprecision", "=", "biprecision", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.QConv2d.forward": [[235, 267], ["utils_quantize.QConv2d.quantize_input", "utils_quantize.calculate_qparams", "utils_quantize.quantize", "utils_quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "utils_quantize.conv2d_biprec", "utils_quantize.quantize_grad", "dict", "utils_quantize.QConv2d.detach"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.conv2d_biprec", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad"], ["", "def", "forward", "(", "self", ",", "input", ",", "ret_qinput", "=", "False", ")", ":", "\n", "        ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "\n", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "quantize", "(", "\n", "# self.bias, num_bits=self.num_bits_weight,", "\n", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", "+", "self", ".", "num_bits", ",", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "qbias", "=", "None", "\n", "# output = F.conv2d(qinput, qweight, qbias, self.stride,", "\n", "#                   self.padding, self.dilation, self.groups)", "\n", "", "if", "not", "self", ".", "biprecision", "or", "self", ".", "num_bits_grad", "is", "None", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "if", "self", ".", "num_bits_grad", "is", "not", "None", ":", "\n", "                ", "output", "=", "quantize_grad", "(", "\n", "output", ",", "num_bits", "=", "self", ".", "num_bits_grad", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "conv2d_biprec", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "num_bits_grad", "=", "self", ".", "num_bits_grad", ")", "\n", "", "if", "ret_qinput", ":", "\n", "            ", "return", "output", ",", "dict", "(", "type", "=", "'conv'", ",", "data", "=", "qinput", ".", "detach", "(", ")", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "[", "0", "]", ",", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.QLinear.__init__": [[272, 281], ["torch.Linear.__init__", "utils_quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "\n", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ")", ":", "\n", "# num_bits=8, num_bits_weight=8, num_bits_grad=8, biprecision=True):", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "or", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "biprecision", "=", "biprecision", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.QLinear.forward": [[282, 309], ["utils_quantize.QLinear.quantize_input", "utils_quantize.calculate_qparams", "utils_quantize.quantize", "torch.linear", "torch.linear", "torch.linear", "utils_quantize.quantize", "dict", "utils_quantize.QLinear.detach"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize"], ["", "def", "forward", "(", "self", ",", "input", ",", "ret_qinput", "=", "False", ")", ":", "\n", "        ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "\n", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "quantize", "(", "\n", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "\n", "# self.bias, num_bits=self.num_bits_weight + self.num_bits,", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "qbias", "=", "None", "\n", "\n", "", "output", "=", "F", ".", "linear", "(", "qinput", ",", "qweight", ",", "qbias", ")", "\n", "# if not self.biprecision or self.num_bits_grad is None:", "\n", "#     output = F.linear(qinput, qweight, qbias)", "\n", "#     if self.num_bits_grad is not None:", "\n", "#         output = quantize_grad(", "\n", "#             output, num_bits=self.num_bits_grad)", "\n", "# else:", "\n", "#     output = linear_biprec(qinput, qweight, qbias, self.num_bits_grad)", "\n", "if", "ret_qinput", ":", "\n", "            ", "return", "output", ",", "dict", "(", "type", "=", "'fc'", ",", "data", "=", "qinput", ".", "detach", "(", ")", ",", "\n", "in_features", "=", "self", ".", "in_features", ",", "\n", "out_features", "=", "self", ".", "out_features", ")", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.RangeBN.__init__": [[315, 333], ["torch.Module.__init__", "utils_quantize.RangeBN.register_buffer", "utils_quantize.RangeBN.register_buffer", "utils_quantize.QuantMeasure", "utils_quantize.RangeBN.reset_params", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.RangeBN.reset_params"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "dim", "=", "1", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "num_chunks", "=", "16", ",", "eps", "=", "1e-5", ",", "num_bits", "=", "8", ")", ":", "\n", "        ", "super", "(", "RangeBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "dim", "=", "dim", "\n", "if", "affine", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "", "self", ".", "num_bits", "=", "num_bits", "\n", "# self.num_bits_grad = num_bits_grad", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "\n", "self", ".", "num_bits", ",", "inplace", "=", "True", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "num_chunks", "=", "num_chunks", "\n", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.RangeBN.reset_params": [[334, 339], ["utils_quantize.RangeBN.weight.data.uniform_", "utils_quantize.RangeBN.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.RangeBN.forward": [[340, 391], ["utils_quantize.RangeBN.quantize_input", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.transpose().contiguous", "y.view.view.view", "[].mean", "[].mean", "y.view.view.view().mean", "out.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils_quantize.RangeBN.running_mean.mul_().add_", "utils_quantize.RangeBN.running_var.mul_().add_", "y.view.view().mean.view", "scale.view", "qweight.view", "qbias.view", "out.squeeze().squeeze.squeeze().squeeze.size", "out.squeeze().squeeze.squeeze().squeeze.size", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.transpose", "y.view.view.view", "out.squeeze().squeeze.squeeze().squeeze.squeeze", "y.view.view.max", "y.view.view.min", "math.log", "utils_quantize.RangeBN.running_mean.mul_", "utils_quantize.RangeBN.running_var.mul_", "y.view.view.size", "math.log"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.log"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "quantize_input", "(", "x", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "# 1d", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ",", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# print(x.shape)", "\n", "# print((C, self.num_chunks, (B*H*W) // self.num_chunks))", "\n", "y", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# C x B x H x W", "\n", "# print(B, self.num_chunks)", "\n", "y", "=", "y", ".", "view", "(", "C", ",", "self", ".", "num_chunks", ",", "(", "B", "*", "H", "*", "W", ")", "//", "self", ".", "num_chunks", ")", "\n", "mean_max", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean_min", "=", "y", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean", "=", "y", ".", "view", "(", "C", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "# C", "\n", "scale_fix", "=", "(", "0.5", "*", "0.35", ")", "*", "(", "1", "+", "(", "math", ".", "pi", "*", "math", ".", "log", "(", "4", ")", ")", "**", "\n", "0.5", ")", "/", "(", "(", "2", "*", "math", ".", "log", "(", "y", ".", "size", "(", "-", "1", ")", ")", ")", "**", "0.5", ")", "\n", "\n", "scale", "=", "(", "mean_max", "-", "mean_min", ")", "*", "scale_fix", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "mean", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "scale", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "scale", "=", "self", ".", "running_var", "\n", "# scale = quantize(scale, num_bits=self.num_bits, min_value=float(", "\n", "#     scale.min()), max_value=float(scale.max()))", "\n", "", "out", "=", "(", "x", "-", "mean", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "/", "(", "scale", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "+", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "qweight", "=", "self", ".", "weight", "\n", "# qweight = quantize(self.weight, num_bits=self.num_bits,", "\n", "#                    min_value=float(self.weight.min()),", "\n", "#                    max_value=float(self.weight.max()))", "\n", "out", "=", "out", "*", "qweight", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "self", ".", "bias", "\n", "# qbias = quantize(self.bias, num_bits=self.num_bits)", "\n", "out", "=", "out", "+", "qbias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "#### if self.num_bits_grad is not None:", "\n", "####     out = quantize_grad(", "\n", "####         out, num_bits=self.num_bits_grad, flatten_dims=(1, -1))", "\n", "\n", "", "if", "out", ".", "size", "(", "3", ")", "==", "1", "and", "out", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "            ", "out", "=", "out", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.RangeBN1d.__init__": [[396, 401], ["utils_quantize.RangeBN.__init__", "utils_quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "dim", "=", "1", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "num_chunks", "=", "16", ",", "eps", "=", "1e-5", ",", "num_bits", "=", "8", ")", ":", "\n", "        ", "super", "(", "RangeBN1d", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "dim", ",", "momentum", ",", "\n", "affine", ",", "num_chunks", ",", "eps", ",", "num_bits", ")", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "\n", "self", ".", "num_bits", ",", "inplace", "=", "True", ",", "shape_measure", "=", "(", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as": [[14, 17], ["x.view", "list", "x_full.dim", "x.dim"], "function", ["None"], ["def", "_deflatten_as", "(", "x", ",", "x_full", ")", ":", "\n", "    ", "shape", "=", "list", "(", "x", ".", "shape", ")", "+", "[", "1", "]", "*", "(", "x_full", ".", "dim", "(", ")", "-", "x", ".", "dim", "(", ")", ")", "\n", "return", "x", ".", "view", "(", "*", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams": [[19, 39], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "x.flatten", "QParams", "x.flatten.dim", "utils_quantize._deflatten_as", "utils_quantize._deflatten_as", "utils_quantize._deflatten_as", "utils_quantize._deflatten_as", "x.flatten.min", "x.flatten.max", "min_values.mean.mean", "max_values.mean.mean", "x.flatten.min", "x.flatten.max", "min_values.mean.min", "max_values.mean.max"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize._deflatten_as"], ["", "def", "calculate_qparams", "(", "x", ",", "num_bits", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "reduce_dim", "=", "0", ",", "reduce_type", "=", "'mean'", ",", "keepdim", "=", "False", ",", "true_zero", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "x_flat", "=", "x", ".", "flatten", "(", "*", "flatten_dims", ")", "\n", "if", "x_flat", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "min_values", "=", "_deflatten_as", "(", "x_flat", ".", "min", "(", ")", ",", "x", ")", "\n", "max_values", "=", "_deflatten_as", "(", "x_flat", ".", "max", "(", ")", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "min_values", "=", "_deflatten_as", "(", "x_flat", ".", "min", "(", "-", "1", ")", "[", "0", "]", ",", "x", ")", "\n", "max_values", "=", "_deflatten_as", "(", "x_flat", ".", "max", "(", "-", "1", ")", "[", "0", "]", ",", "x", ")", "\n", "", "if", "reduce_dim", "is", "not", "None", ":", "\n", "            ", "if", "reduce_type", "==", "'mean'", ":", "\n", "                ", "min_values", "=", "min_values", ".", "mean", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "\n", "max_values", "=", "max_values", ".", "mean", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "\n", "", "else", ":", "\n", "                ", "min_values", "=", "min_values", ".", "min", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "[", "0", "]", "\n", "max_values", "=", "max_values", ".", "max", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "[", "0", "]", "\n", "# TODO: re-add true zero computation", "\n", "", "", "range_values", "=", "max_values", "-", "min_values", "\n", "return", "QParams", "(", "range", "=", "range_values", ",", "zero_point", "=", "min_values", ",", "\n", "num_bits", "=", "num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.conv2d_biprec": [[115, 122], ["torch.conv2d", "torch.conv2d", "utils_quantize.quantize_grad", "input.detach", "weight.detach", "F.conv2d.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad"], ["", "", "def", "conv2d_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "conv2d", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "if", "bias", "is", "not", "None", "else", "None", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.linear_biprec": [[124, 130], ["torch.linear", "torch.linear", "utils_quantize.quantize_grad", "input.detach", "weight.detach", "F.linear.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad"], ["", "def", "linear_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "linear", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ")", "\n", "out2", "=", "F", ".", "linear", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "\n", "if", "bias", "is", "not", "None", "else", "None", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize": [[132, 134], ["UniformQuantize().apply", "utils_quantize.UniformQuantize"], "function", ["None"], ["", "def", "quantize", "(", "x", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "UniformQuantize", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "qparams", ",", "flatten_dims", ",", "reduce_dim", ",", "dequantize", ",", "signed", ",", "stochastic", ",", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad": [[136, 138], ["UniformQuantizeGrad().apply", "utils_quantize.UniformQuantizeGrad"], "function", ["None"], ["", "def", "quantize_grad", "(", "x", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN_GRAD", ",", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "True", ")", ":", "\n", "    ", "return", "UniformQuantizeGrad", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "qparams", ",", "flatten_dims", ",", "reduce_dim", ",", "dequantize", ",", "signed", ",", "stochastic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.sparsify_and_nearestpow2": [[171, 173], ["SparsifyAndNearestPow2().apply", "utils_quantize.SparsifyAndNearestPow2"], "function", ["None"], ["", "", "def", "sparsify_and_nearestpow2", "(", "input", ",", "threshold", ")", ":", "\n", "    ", "return", "SparsifyAndNearestPow2", "(", ")", ".", "apply", "(", "input", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.factors": [[9, 21], ["fct.append", "fct.append"], "function", ["None"], ["def", "factors", "(", "n", ")", ":", "\n", "    ", "i", "=", "2", "\n", "fct", "=", "[", "]", "\n", "while", "i", "*", "i", "<=", "n", ":", "\n", "        ", "if", "n", "%", "i", ":", "\n", "            ", "i", "+=", "1", "\n", "", "else", ":", "\n", "            ", "n", "//=", "i", "\n", "fct", ".", "append", "(", "i", ")", "\n", "", "", "if", "n", ">", "1", ":", "\n", "        ", "fct", ".", "append", "(", "n", ")", "\n", "", "return", "fct", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.isprime": [[50, 69], ["abs", "range", "int", "int"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["def", "isprime", "(", "n", ")", ":", "\n", "    ", "\"\"\"check if integer n is a prime\"\"\"", "\n", "# make sure n is a positive integer", "\n", "n", "=", "abs", "(", "int", "(", "n", ")", ")", "\n", "# 0 and 1 are not primes", "\n", "if", "n", "<", "2", ":", "\n", "        ", "return", "False", "\n", "# 2 is the only even prime number", "\n", "", "if", "n", "==", "2", ":", "\n", "        ", "return", "True", "\n", "# all other even numbers are not primes", "\n", "", "if", "not", "n", "&", "1", ":", "\n", "        ", "return", "False", "\n", "# range starts with 3 and only needs to go up the squareroot of n", "\n", "# for all odd numbers", "\n", "", "for", "x", "in", "range", "(", "3", ",", "int", "(", "n", "**", "0.5", ")", "+", "1", ",", "2", ")", ":", "\n", "        ", "if", "n", "%", "x", "==", "0", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.nearestpow2": [[71, 85], ["numpy.ceil", "numpy.all", "numpy.log2"], "function", ["None"], ["", "def", "nearestpow2", "(", "v", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for nearest_pow2.\n\n    :v: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "assert", "v", ".", "size", ">", "0", "and", "np", ".", "all", "(", "v", ">", "0", ")", "\n", "nextpow2", "=", "np", ".", "ceil", "(", "np", ".", "log2", "(", "v", ")", ")", "\n", "lerr", "=", "v", "-", "2", "**", "(", "nextpow2", "-", "1", ")", "\n", "rerr", "=", "2", "**", "nextpow2", "-", "v", "\n", "lbetter", "=", "(", "lerr", "<=", "rerr", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "nearest", "=", "(", "nextpow2", "-", "1", ")", "*", "lbetter", "+", "nextpow2", "*", "(", "1", "-", "lbetter", ")", "\n", "return", "nearest", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.factor_short": [[87, 96], ["alg.factors", "alg.isprime"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factors", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.isprime"], ["", "def", "factor_short", "(", "n", ")", ":", "\n", "    ", "if", "n", "<=", "12", "or", "isprime", "(", "n", ")", ":", "\n", "        ", "return", "n", "\n", "", "fct", "=", "factors", "(", "n", ")", "\n", "if", "fct", "[", "0", "]", ">", "2", ":", "\n", "        ", "return", "fct", "[", "0", "]", "\n", "", "if", "fct", "[", "1", "]", ">=", "6", ":", "\n", "        ", "return", "fct", "[", "1", "]", "\n", "", "return", "fct", "[", "0", "]", "*", "fct", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.factor_long": [[98, 109], ["preset.get", "alg.factors", "range", "alg.isprime", "len", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factors", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.isprime"], ["", "def", "factor_long", "(", "m", ",", "n0", ")", ":", "\n", "    ", "m0", "=", "preset", ".", "get", "(", "(", "m", ",", "n0", ")", ",", "False", ")", "\n", "if", "not", "m0", ":", "\n", "        ", "if", "m", "<=", "64", "*", "n0", "or", "isprime", "(", "m", ")", ":", "\n", "            ", "return", "m", "\n", "", "fct", "=", "factors", "(", "m", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "fct", ")", ")", ":", "\n", "            ", "m0", "=", "np", ".", "prod", "(", "fct", "[", "i", ":", "]", ")", "\n", "if", "m0", "<=", "64", "*", "n0", ":", "\n", "                ", "return", "m0", "\n", "", "", "", "return", "m0", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.core_decompose": [[120, 263], ["numpy.transpose", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "numpy.eye", "numpy.copy", "dict", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.transpose", "numpy.count_nonzero", "numpy.linalg.norm", "len", "ValueError", "ValueError", "opts.get.lower", "NotImplementedError", "numpy.zeros", "numpy.transpose", "numpy.count_nonzero", "numpy.linalg.norm", "numpy.sign", "numpy.abs", "nz_idx.any", "numpy.clip", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.sign", "numpy.abs", "nz_idx.any", "numpy.clip", "numpy.copy", "numpy.linalg.norm", "numpy.copy", "numpy.linalg.lstsq", "numpy.ones", "range", "np.ones.reshape", "numpy.reshape", "numpy.linalg.lstsq", "numpy.matmul", "numpy.ones", "range", "np.ones.reshape", "numpy.reshape", "numpy.linalg.lstsq", "numpy.matmul", "numpy.log2", "numpy.round", "alg.nearestpow2", "numpy.log2", "numpy.round", "alg.nearestpow2", "alg.core_decompose", "numpy.mean", "alg.core_decompose", "numpy.mean", "numpy.abs", "numpy.transpose", "numpy.transpose", "numpy.sum", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.clip", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.clip", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.nearestpow2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.nearestpow2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.core_decompose", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.core_decompose", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "def", "core_decompose", "(", "A", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for core_decompose.\n\n    :A: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "if", "len", "(", "A", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'The input should be a 2-D matrix'", ")", "\n", "", "m", ",", "n", "=", "A", ".", "shape", "\n", "if", "m", "<", "n", ":", "\n", "        ", "raise", "ValueError", "(", "'The input should be a tall matrix'", ")", "\n", "", "A", "=", "np", ".", "transpose", "(", "A", ")", "\n", "m", ",", "n", "=", "A", ".", "shape", "\n", "\n", "init_method", "=", "opts", ".", "get", "(", "'init_method'", ",", "'trivial'", ")", "\n", "if", "init_method", ".", "lower", "(", ")", "is", "'ksvd'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"KSVD initialization not implemented yet.\"", ")", "\n", "", "decompose_iternum", "=", "opts", ".", "get", "(", "'decompose_iternum'", ",", "50", ")", "\n", "decompose_threshold", "=", "opts", ".", "get", "(", "'decompose_threshold'", ",", "2e-1", ")", "\n", "decompose_quant2", "=", "opts", ".", "get", "(", "'decompose_quant2'", ",", "True", ")", "\n", "decompose_decay", "=", "opts", ".", "get", "(", "'decompose_decay'", ",", "0.1", ")", "\n", "decompose_scale", "=", "opts", ".", "get", "(", "'decompose_scale'", ",", "False", ")", "\n", "decompose_tol", "=", "opts", ".", "get", "(", "'decompose_tol'", ",", "1e-6", ")", "\n", "decompose_rcond", "=", "opts", ".", "get", "(", "'decompose_rcond'", ",", "1e-10", ")", "\n", "threshold_row", "=", "opts", ".", "get", "(", "'threshold_row'", ",", "False", ")", "\n", "max_C", "=", "opts", ".", "get", "(", "'max_C'", ",", "32.0", ")", "\n", "\n", "# if init_method is 'trivial':", "\n", "B", "=", "np", ".", "eye", "(", "m", ")", "\n", "Ce", "=", "np", ".", "copy", "(", "A", ")", "\n", "\n", "# Initialize the output", "\n", "Out", "=", "dict", "(", ")", "\n", "Out", "[", "'B_init'", "]", "=", "np", ".", "transpose", "(", "B", ")", "\n", "Out", "[", "'Ce_init'", "]", "=", "np", ".", "transpose", "(", "Ce", ")", "\n", "Out", "[", "'B_hist'", "]", "=", "np", ".", "zeros", "(", "(", "decompose_iternum", ",", "m", ",", "m", ")", ")", "\n", "Out", "[", "'Ce_hist'", "]", "=", "np", ".", "zeros", "(", "(", "decompose_iternum", ",", "n", ",", "m", ")", ")", "\n", "Out", "[", "'err_hist'", "]", "=", "np", ".", "zeros", "(", "decompose_iternum", ")", "\n", "Out", "[", "'nnz_hist'", "]", "=", "np", ".", "zeros", "(", "decompose_iternum", ")", "\n", "if", "decompose_scale", ":", "\n", "        ", "Out", "[", "'dhist'", "]", "=", "np", ".", "zeros", "(", "(", "m", ",", "decompose_iternum", ")", ")", "\n", "\n", "", "if", "decompose_threshold", "<", "0.0", "and", "not", "decompose_quant2", ":", "\n", "        ", "return", "np", ".", "transpose", "(", "Ce", ")", ",", "np", ".", "transpose", "(", "B", ")", ",", "Out", "\n", "\n", "", "for", "i", "in", "range", "(", "decompose_iternum", "-", "1", ")", ":", "\n", "# quantization", "\n", "        ", "if", "decompose_quant2", ":", "\n", "            ", "Ce_sign", "=", "np", ".", "sign", "(", "Ce", ")", "\n", "Ce_abs", "=", "np", ".", "abs", "(", "Ce", ")", "\n", "# print(Ce_abs)", "\n", "nz_idx", "=", "Ce_abs", ">", "0", "\n", "# find scaling matrix D for minimum quantization error", "\n", "if", "decompose_scale", "is", "True", ":", "\n", "                ", "d", "=", "np", ".", "ones", "(", "(", "m", ",", "1", ")", ")", "\n", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "                    ", "c", "=", "Ce_abs", "[", "j", ",", ":", "]", "\n", "cnz", "=", "c", "[", "c", ">", "0", "]", "\n", "if", "cnz", ".", "size", "==", "0", ":", "\n", "                        ", "opts", "[", "'decompose_threshold'", "]", "*=", "decompose_decay", "\n", "return", "core_decompose", "(", "np", ".", "transpose", "(", "A", ")", ",", "**", "opts", ")", "\n", "", "cnz_log", "=", "np", ".", "log2", "(", "cnz", ")", "\n", "cnz_round", "=", "np", ".", "round", "(", "cnz_log", ")", "\n", "d", "[", "j", "]", "=", "2", "**", "np", ".", "mean", "(", "cnz_round", "-", "cnz_log", ")", "\n", "", "Ce_abs", "=", "d", "*", "Ce_abs", "\n", "Out", "[", "'dhist'", "]", "[", ":", ",", "i", "]", "=", "d", ".", "reshape", "(", "-", "1", ")", "\n", "", "if", "nz_idx", ".", "any", "(", ")", ":", "\n", "                ", "Ce_abs", "[", "nz_idx", "]", "=", "2", "**", "nearestpow2", "(", "Ce_abs", "[", "nz_idx", "]", ")", "\n", "# if np.max(Ce_abs) > 32:", "\n", "# Ce_abs = Ce_abs / np.max(Ce_abs) * 32.0", "\n", "", "Ce_abs", "=", "np", ".", "clip", "(", "Ce_abs", ",", "0.0", ",", "max_C", ")", "\n", "Ce_quant", "=", "np", ".", "reshape", "(", "Ce_abs", ",", "Ce", ".", "shape", ")", "*", "Ce_sign", "\n", "", "else", ":", "\n", "            ", "Ce_quant", "=", "Ce", "\n", "\n", "# quit condition", "\n", "", "if", "i", "==", "0", ":", "\n", "            ", "Ce_quant_prev", "=", "np", ".", "copy", "(", "Ce_quant", ")", "\n", "", "else", ":", "\n", "            ", "diff", "=", "np", ".", "linalg", ".", "norm", "(", "Ce_quant", "-", "Ce_quant_prev", ",", "ord", "=", "'fro'", ")", "\n", "if", "diff", "<=", "decompose_tol", ":", "\n", "                ", "break", "\n", "", "Ce_quant_prev", "=", "np", ".", "copy", "(", "Ce_quant", ")", "\n", "\n", "# least square to update B", "\n", "", "B", "=", "np", ".", "transpose", "(", "np", ".", "linalg", ".", "lstsq", "(", "Ce_quant", ".", "T", ",", "A", ".", "T", ",", "rcond", "=", "decompose_rcond", ")", "[", "0", "]", ")", "\n", "\n", "# update history", "\n", "Out", "[", "'Ce_hist'", "]", "[", "i", ",", ":", ",", ":", "]", "=", "Ce_quant", ".", "T", "\n", "Out", "[", "'B_hist'", "]", "[", "i", ",", ":", ",", ":", "]", "=", "B", ".", "T", "\n", "Out", "[", "'nnz_hist'", "]", "[", "i", "]", "=", "np", ".", "count_nonzero", "(", "Ce_quant", ")", "\n", "Out", "[", "'err_hist'", "]", "[", "i", "]", "=", "np", ".", "linalg", ".", "norm", "(", "A", "-", "np", ".", "matmul", "(", "B", ",", "Ce_quant", ")", ",", "'fro'", ")", "\n", "\n", "# least square to update C", "\n", "Ce", "=", "np", ".", "linalg", ".", "lstsq", "(", "B", ",", "A", ",", "rcond", "=", "decompose_rcond", ")", "[", "0", "]", "\n", "\n", "# promote sparsity in C", "\n", "if", "decompose_threshold", ">", "0.0", ":", "\n", "            ", "if", "threshold_row", ":", "\n", "# NOTE: the `row`s correspond to the columns in Ce here because of", "\n", "# the transpose", "\n", "                ", "Ce", "[", ":", ",", "np", ".", "sum", "(", "np", ".", "abs", "(", "Ce", ")", ",", "axis", "=", "0", ")", "<", "decompose_threshold", "*", "5", "]", "=", "0.0", "\n", "# elif decompose_threshold_type == 'element':", "\n", "", "Ce", "[", "np", ".", "abs", "(", "Ce", ")", "<", "decompose_threshold", "]", "=", "0.0", "\n", "\n", "# quantization", "\n", "", "", "if", "decompose_quant2", ":", "\n", "        ", "Ce_sign", "=", "np", ".", "sign", "(", "Ce", ")", "\n", "Ce_abs", "=", "np", ".", "abs", "(", "Ce", ")", "\n", "nz_idx", "=", "Ce_abs", ">", "0", "\n", "# find scaling matrix D for minimum quantization error", "\n", "if", "decompose_scale", "is", "True", ":", "\n", "            ", "d", "=", "np", ".", "ones", "(", "(", "m", ",", "1", ")", ")", "\n", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "                ", "c", "=", "Ce_abs", "[", "j", ",", ":", "]", "\n", "cnz", "=", "c", "[", "c", ">", "0", "]", "\n", "if", "cnz", ".", "size", "==", "0", ":", "\n", "                    ", "opts", "[", "'decompose_threshold'", "]", "*=", "decompose_decay", "\n", "return", "core_decompose", "(", "np", ".", "transpose", "(", "A", ")", ",", "**", "opts", ")", "\n", "", "cnz_log", "=", "np", ".", "log2", "(", "cnz", ")", "\n", "cnz_round", "=", "np", ".", "round", "(", "cnz_log", ")", "\n", "d", "[", "j", "]", "=", "2", "**", "np", ".", "mean", "(", "cnz_round", "-", "cnz_log", ")", "\n", "", "Ce_abs", "=", "Ce_abs", "*", "d", "\n", "Out", "[", "'dhist'", "]", "[", ":", ",", "i", "]", "=", "d", ".", "reshape", "(", "-", "1", ")", "\n", "", "if", "nz_idx", ".", "any", "(", ")", ":", "\n", "            ", "Ce_abs", "[", "nz_idx", "]", "=", "2", "**", "nearestpow2", "(", "Ce_abs", "[", "nz_idx", "]", ")", "\n", "# if np.max(Ce_abs) > 32:", "\n", "#     Ce_abs = Ce_abs / np.max(Ce_abs) * 32.0", "\n", "", "Ce_abs", "=", "np", ".", "clip", "(", "Ce_abs", ",", "0.0", ",", "max_C", ")", "\n", "Ce", "=", "np", ".", "reshape", "(", "Ce_abs", ",", "Ce", ".", "shape", ")", "*", "Ce_sign", "\n", "\n", "# least square to update B", "\n", "", "B", "=", "np", ".", "transpose", "(", "np", ".", "linalg", ".", "lstsq", "(", "Ce", ".", "T", ",", "A", ".", "T", ",", "rcond", "=", "1e-10", ")", "[", "0", "]", ")", "\n", "\n", "# update history", "\n", "Out", "[", "'Ce_hist'", "]", "[", "-", "1", ",", ":", ",", ":", "]", "=", "Ce", ".", "T", "\n", "Out", "[", "'B_hist'", "]", "[", "-", "1", ",", ":", ",", ":", "]", "=", "B", ".", "T", "\n", "Out", "[", "'nnz_hist'", "]", "[", "-", "1", "]", "=", "np", ".", "count_nonzero", "(", "Ce", ")", "\n", "Out", "[", "'err_hist'", "]", "[", "-", "1", "]", "=", "np", ".", "linalg", ".", "norm", "(", "A", "-", "np", ".", "matmul", "(", "B", ",", "Ce", ")", ",", "'fro'", ")", "\n", "\n", "return", "np", ".", "transpose", "(", "Ce", ")", ",", "np", ".", "transpose", "(", "B", ")", ",", "Out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.vector_decompose": [[265, 290], ["opts.get", "numpy.zeros", "np.zeros.reshape", "opts.get", "alg.matrix_decompose", "print", "len", "VEC_2_SHAPE.keys", "int", "print", "matrecon.reshape", "math.ceil"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.matrix_decompose"], ["", "def", "vector_decompose", "(", "col", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for matrix_decompose.\n\n    :col: TODO\n    :**opts: TODO\n\n    \"\"\"", "\n", "if", "opts", ".", "get", "(", "'verbose'", ",", "False", ")", ":", "\n", "        ", "print", "(", "col", ".", "shape", ")", "\n", "", "assert", "len", "(", "col", ".", "shape", ")", "==", "1", "\n", "size", "=", "col", ".", "size", "\n", "if", "size", "in", "VEC_2_SHAPE", ".", "keys", "(", ")", ":", "\n", "        ", "num_split", ",", "size_split", "=", "VEC_2_SHAPE", "[", "size", "]", "\n", "newsize", "=", "3", "*", "num_split", "*", "size_split", "\n", "", "else", ":", "\n", "        ", "newsize", "=", "int", "(", "ceil", "(", "size", "/", "3.0", ")", "*", "3", ")", "\n", "# newsize = int(ceil(size/3.0) * 3)", "\n", "", "newcol", "=", "np", ".", "zeros", "(", "newsize", ",", "dtype", "=", "col", ".", "dtype", ")", "\n", "newcol", "[", ":", "size", "]", "=", "col", "\n", "mat", "=", "newcol", ".", "reshape", "(", "newsize", "//", "3", ",", "3", ")", "\n", "if", "opts", ".", "get", "(", "'verbose'", ",", "False", ")", ":", "\n", "        ", "print", "(", "mat", ".", "shape", ")", "\n", "", "matrecon", ",", "Ces", ",", "Bs", "=", "matrix_decompose", "(", "mat", ",", "**", "opts", ")", "\n", "colrecon", "=", "matrecon", ".", "reshape", "(", "-", "1", ")", "[", ":", "size", "]", "\n", "return", "colrecon", ",", "Ces", ",", "Bs", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.matrix_decompose": [[292, 340], ["alg.factor_short", "alg.factor_long", "opts.get", "numpy.zeros", "range", "len", "numpy.transpose", "range", "numpy.transpose", "alg.core_decompose", "numpy.matmul", "Ces.append", "Bs.append"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factor_short", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factor_long", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.core_decompose"], ["", "def", "matrix_decompose", "(", "A", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for matrix_decompose.\n\n    :A: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "assert", "len", "(", "A", ".", "shape", ")", "==", "2", "\n", "m", ",", "n", "=", "A", ".", "shape", "\n", "\n", "# transpose weight if weight is a fat and short matrix.", "\n", "# `transpose_flag` will be used to transpose the reconstructed matrix", "\n", "#   back before returning the results.", "\n", "if", "m", "<", "n", ":", "\n", "        ", "A", "=", "np", ".", "transpose", "(", "A", ")", "\n", "m", ",", "n", "=", "A", ".", "shape", "\n", "transpose_flag", "=", "1", "\n", "", "else", ":", "\n", "        ", "transpose_flag", "=", "0", "\n", "\n", "# decide how to partition the matrix for decompositions", "\n", "", "n0", "=", "factor_short", "(", "n", ")", "\n", "m0", "=", "factor_long", "(", "m", ",", "n0", ")", "\n", "\n", "return_decomps", "=", "opts", ".", "get", "(", "'return_decomps'", ",", "True", ")", "\n", "\n", "Arecon", "=", "np", ".", "zeros", "(", "A", ".", "shape", ")", "\n", "Ces", "=", "[", "]", "if", "return_decomps", "else", "None", "\n", "Bs", "=", "[", "]", "if", "return_decomps", "else", "None", "\n", "\n", "# print(n // n0)", "\n", "for", "j", "in", "range", "(", "n", "//", "n0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "m", "//", "m0", ")", ":", "\n", "            ", "upper", "=", "i", "*", "m0", "\n", "lower", "=", "(", "i", "+", "1", ")", "*", "m0", "\n", "left", "=", "j", "*", "n0", "\n", "right", "=", "(", "j", "+", "1", ")", "*", "n0", "\n", "Ce", ",", "B", ",", "_", "=", "core_decompose", "(", "A", "[", "upper", ":", "lower", ",", "left", ":", "right", "]", ",", "**", "opts", ")", "\n", "Arecon", "[", "upper", ":", "lower", ",", "left", ":", "right", "]", "=", "np", ".", "matmul", "(", "Ce", ",", "B", ")", "\n", "if", "return_decomps", ":", "\n", "                ", "Ces", ".", "append", "(", "Ce", ")", "\n", "Bs", ".", "append", "(", "B", ")", "\n", "\n", "", "", "", "if", "transpose_flag", ":", "\n", "        ", "Arecon", "=", "np", ".", "transpose", "(", "Arecon", ")", "\n", "# assert len(Ces) == len(Bs)", "\n", "", "return", "Arecon", ",", "Ces", ",", "Bs", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.parfun_vector_decompose": [[342, 348], ["dict", "alg.vector_decompose"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.vector_decompose"], ["", "def", "parfun_vector_decompose", "(", "i", ",", "vec", ",", "**", "opts", ")", ":", "\n", "    ", "decomps", "=", "dict", "(", "type", "=", "'vector'", ",", "shape", "=", "vec", ".", "size", ")", "\n", "vecrecon", ",", "Ces", ",", "Bs", "=", "vector_decompose", "(", "vec", ",", "**", "opts", ")", "\n", "decomps", "[", "'Ces'", "]", "=", "Ces", "\n", "decomps", "[", "'Bs'", "]", "=", "Bs", "\n", "return", "i", ",", "vecrecon", ",", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.parfun_matrix_decompose": [[350, 356], ["dict", "alg.matrix_decompose"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.matrix_decompose"], ["", "def", "parfun_matrix_decompose", "(", "i", ",", "Wp", ",", "**", "opts", ")", ":", "\n", "    ", "decomps", "=", "dict", "(", "type", "=", "'matrix'", ",", "shape", "=", "Wp", ".", "shape", ")", "\n", "Wprecon", ",", "Ces", ",", "Bs", "=", "matrix_decompose", "(", "Wp", ",", "**", "opts", ")", "\n", "decomps", "[", "'Ces'", "]", "=", "Ces", "\n", "decomps", "[", "'Bs'", "]", "=", "Bs", "\n", "return", "i", ",", "Wprecon", ",", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.smart_decompose": [[358, 414], ["opts.pop", "opts.pop", "dict", "len", "tuple", "numpy.zeros_like", "tuple", "numpy.zeros_like", "joblib.Parallel", "numpy.reshape", "numpy.reshape", "numpy.reshape", "joblib.Parallel", "joblib.Parallel", "joblib.delayed", "range", "joblib.delayed", "range", "joblib.delayed", "range"], "function", ["None"], ["", "def", "smart_decompose", "(", "W", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for smart_decompose.\n\n    :W: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "threshold_row", "=", "opts", ".", "pop", "(", "'threshold_row'", ",", "False", ")", "\n", "num_workers", "=", "opts", ".", "pop", "(", "'num_workers'", ",", "8", ")", "\n", "decomps", "=", "dict", "(", ")", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "2", ":", "\n", "        ", "decomps", "[", "'type'", "]", "=", "'fc'", "\n", "decomps", "[", "'shape'", "]", "=", "tuple", "(", "W", ".", "shape", ")", "\n", "dout", ",", "din", "=", "W", ".", "shape", "\n", "Wrecon", "=", "np", ".", "zeros_like", "(", "W", ")", "\n", "opts", "[", "'threshold_row'", "]", "=", "False", "# do not do row thresholding for fc layers", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "num_workers", ")", "(", "delayed", "(", "parfun_vector_decompose", ")", "(", "i", ",", "W", "[", "i", ",", ":", "]", ",", "**", "opts", ")", "for", "i", "in", "range", "(", "dout", ")", ")", "\n", "for", "i", ",", "rowrecon", ",", "row_decomps", "in", "results", ":", "\n", "            ", "decomps", "[", "'r%d'", "%", "(", "i", "+", "1", ")", "]", "=", "row_decomps", "\n", "Wrecon", "[", "i", ",", "]", "=", "rowrecon", "\n", "", "", "else", ":", "\n", "        ", "decomps", "[", "'type'", "]", "=", "'conv'", "\n", "decomps", "[", "'shape'", "]", "=", "tuple", "(", "W", ".", "shape", ")", "\n", "cout", ",", "cin", ",", "kh", ",", "kw", "=", "W", ".", "shape", "\n", "opts", "[", "'threshold_row'", "]", "=", "threshold_row", "and", "(", "kh", "==", "3", ")", "\n", "if", "kh", "!=", "1", "and", "kh", "!=", "3", ":", "\n", "            ", "return", "W", ",", "decomps", "\n", "", "Wrecon", "=", "np", ".", "zeros_like", "(", "W", ")", "\n", "if", "kh", "==", "1", ":", "\n", "            ", "W", "=", "np", ".", "reshape", "(", "W", ",", "(", "cout", ",", "-", "1", ")", ")", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "num_workers", ")", "(", "\n", "delayed", "(", "parfun_vector_decompose", ")", "(", "i", ",", "W", "[", "i", ",", ":", "]", ",", "**", "opts", ")", "for", "i", "in", "range", "(", "cout", ")", ")", "\n", "", "else", ":", "\n", "            ", "W", "=", "np", ".", "reshape", "(", "W", ",", "(", "cout", ",", "cin", "*", "kh", ",", "kw", ")", ")", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "num_workers", ")", "(", "\n", "delayed", "(", "parfun_matrix_decompose", ")", "(", "i", ",", "W", "[", "i", ",", ":", ",", ":", "]", ",", "**", "opts", ")", "for", "i", "in", "range", "(", "cout", ")", ")", "\n", "", "for", "c", ",", "Wprecon", ",", "Wp_decomps", "in", "results", ":", "\n", "            ", "Wrecon", "[", "c", ",", ":", ",", ":", ",", ":", "]", "=", "np", ".", "reshape", "(", "Wprecon", ",", "(", "cin", ",", "kh", ",", "kw", ")", ")", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "=", "Wp_decomps", "\n", "# for c in range(cout):", "\n", "#     decomps['k%d'%(c+1)] = dict()", "\n", "#     if kh == 1:", "\n", "#         Wp = np.reshape(W[c,:,:,:], -1)", "\n", "#         decomps['k%d'%(c+1)]['type'] = 'vector'", "\n", "#         decomps['k%d'%(c+1)]['shape'] = int(Wp.size)", "\n", "#         Wprecon, Ces, Bs = vector_decompose(Wp, **opts)", "\n", "#     else:", "\n", "#         Wp = np.reshape(W[c,:,:,:], (cin*kh, kw))", "\n", "#         decomps['k%d'%(c+1)]['type'] = 'matrix'", "\n", "#         decomps['k%d'%(c+1)]['shape'] = tuple(Wp.shape)", "\n", "#         Wprecon, Ces, Bs = matrix_decompose(Wp, **opts)", "\n", "#     Wrecon[c,:,:,:] = np.reshape(Wprecon, (cin, kh, kw))", "\n", "#     decomps['k%d'%(c+1)]['Ces'] = Ces", "\n", "#     decomps['k%d'%(c+1)]['Bs'] = Bs", "\n", "", "", "return", "Wrecon", ",", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.smart_decompose_backup": [[416, 467], ["opts.pop", "opts.pop", "dict", "len", "tuple", "numpy.zeros_like", "tuple", "numpy.zeros_like", "range", "joblib.Parallel", "dict", "numpy.reshape", "numpy.reshape", "int", "alg.vector_decompose", "numpy.reshape", "tuple", "alg.matrix_decompose", "joblib.delayed", "range"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.vector_decompose", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.matrix_decompose"], ["", "def", "smart_decompose_backup", "(", "W", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for smart_decompose.\n\n    :W: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "threshold_row", "=", "opts", ".", "pop", "(", "'threshold_row'", ",", "False", ")", "\n", "num_workers", "=", "opts", ".", "pop", "(", "'num_workers'", ",", "8", ")", "\n", "decomps", "=", "dict", "(", ")", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "2", ":", "\n", "        ", "decomps", "[", "'type'", "]", "=", "'fc'", "\n", "decomps", "[", "'shape'", "]", "=", "tuple", "(", "W", ".", "shape", ")", "\n", "dout", ",", "din", "=", "W", ".", "shape", "\n", "Wrecon", "=", "np", ".", "zeros_like", "(", "W", ")", "\n", "opts", "[", "'threshold_row'", "]", "=", "False", "# do not do row thresholding for fc layers", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "num_workers", ")", "(", "delayed", "(", "parfun_vector_decompose", ")", "(", "i", ",", "W", "[", "i", ",", ":", "]", ",", "**", "opts", ")", "for", "i", "in", "range", "(", "dout", ")", ")", "\n", "for", "i", ",", "rowrecon", ",", "row_decomps", "in", "results", ":", "\n", "            ", "decomps", "[", "'r%d'", "%", "(", "i", "+", "1", ")", "]", "=", "row_decomps", "\n", "Wrecon", "[", "i", ",", "]", "=", "rowrecon", "\n", "# for i in tqdm(range(dout)):", "\n", "#     decomps['r%d'%(i+1)] = dict(type='vector', shape=din)", "\n", "#     rowrecon, Ces, Bs = vector_decompose(W[i,:], **opts)", "\n", "#     Wrecon[i,:] = rowrecon", "\n", "#     decomps['r%d'%(i+1)]['Ces'] = Ces", "\n", "#     decomps['r%d'%(i+1)]['Bs'] = Bs", "\n", "", "", "else", ":", "\n", "        ", "decomps", "[", "'type'", "]", "=", "'conv'", "\n", "decomps", "[", "'shape'", "]", "=", "tuple", "(", "W", ".", "shape", ")", "\n", "cout", ",", "cin", ",", "kh", ",", "kw", "=", "W", ".", "shape", "\n", "opts", "[", "'threshold_row'", "]", "=", "threshold_row", "and", "(", "kh", "==", "3", ")", "\n", "if", "kh", "!=", "1", "and", "kh", "!=", "3", ":", "\n", "            ", "return", "W", ",", "decomps", "\n", "", "Wrecon", "=", "np", ".", "zeros_like", "(", "W", ")", "\n", "for", "c", "in", "range", "(", "cout", ")", ":", "\n", "            ", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "=", "dict", "(", ")", "\n", "if", "kh", "==", "1", ":", "\n", "                ", "Wp", "=", "np", ".", "reshape", "(", "W", "[", "c", ",", ":", ",", ":", ",", ":", "]", ",", "-", "1", ")", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'type'", "]", "=", "'vector'", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'shape'", "]", "=", "int", "(", "Wp", ".", "size", ")", "\n", "Wprecon", ",", "Ces", ",", "Bs", "=", "vector_decompose", "(", "Wp", ",", "**", "opts", ")", "\n", "", "else", ":", "\n", "                ", "Wp", "=", "np", ".", "reshape", "(", "W", "[", "c", ",", ":", ",", ":", ",", ":", "]", ",", "(", "cin", "*", "kh", ",", "kw", ")", ")", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'type'", "]", "=", "'matrix'", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'shape'", "]", "=", "tuple", "(", "Wp", ".", "shape", ")", "\n", "Wprecon", ",", "Ces", ",", "Bs", "=", "matrix_decompose", "(", "Wp", ",", "**", "opts", ")", "\n", "", "Wrecon", "[", "c", ",", ":", ",", ":", ",", ":", "]", "=", "np", ".", "reshape", "(", "Wprecon", ",", "(", "cin", ",", "kh", ",", "kw", ")", ")", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'Ces'", "]", "=", "Ces", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'Bs'", "]", "=", "Bs", "\n", "", "", "return", "Wrecon", ",", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.smart_net": [[469, 495], ["dict", "net.parameters", "len", "print", "alg.smart_decompose", "torch.FloatTensor", "print", "param.detach().cpu().numpy", "param.detach().numpy", "wrecon_tensor.cuda.cuda", "param.detach().cpu", "param.detach", "param.detach"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.smart_decompose"], ["", "def", "smart_net", "(", "net", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for smart_net.\n\n    :net: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "i", "=", "0", "\n", "decomps", "=", "dict", "(", ")", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "len", "(", "param", ".", "shape", ")", ">=", "2", ":", "\n", "            ", "i", "=", "i", "+", "1", "\n", "print", "(", "'decompose layer {}...'", ".", "format", "(", "i", ")", ",", "end", "=", "' '", ")", "\n", "if", "param", ".", "is_cuda", ":", "\n", "                ", "w", "=", "param", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "w", "=", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "wrecon", ",", "layer_decomps", "=", "smart_decompose", "(", "w", ",", "**", "opts", ")", "\n", "wrecon_tensor", "=", "torch", ".", "FloatTensor", "(", "wrecon", ")", "\n", "if", "param", ".", "is_cuda", ":", "\n", "                ", "wrecon_tensor", "=", "wrecon_tensor", ".", "cuda", "(", ")", "\n", "", "param", ".", "data", "=", "wrecon_tensor", "\n", "print", "(", "'done'", ")", "\n", "decomps", "[", "'l%d'", "%", "i", "]", "=", "layer_decomps", "\n", "", "", "return", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg.smart_state_dict": [[497, 525], ["dict", "state.items", "print", "alg.smart_decompose", "torch.FloatTensor", "print", "len", "v.data.detach().cpu().numpy", "v.data.detach().numpy", "wrecon_tensor.cuda.cuda", "v.data.detach().cpu", "v.data.detach", "v.data.detach"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.smart_decompose"], ["", "def", "smart_state_dict", "(", "state", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for smart_net.\n\n    :state: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "i", "=", "0", "\n", "decomps", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "        ", "if", "(", "'weight'", "in", "k", ")", "and", "(", "len", "(", "v", ".", "shape", ")", ">=", "2", ")", ":", "\n", "# if ('weight' in k) and ('classifier' in k) and (len(v.shape) >= 2):", "\n", "# if len(param.shape) >= 2:", "\n", "            ", "i", "=", "i", "+", "1", "\n", "print", "(", "'decompose layer {}...'", ".", "format", "(", "i", ")", ",", "end", "=", "' '", ")", "\n", "if", "v", ".", "data", ".", "is_cuda", ":", "\n", "                ", "w", "=", "v", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "w", "=", "v", ".", "data", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "wrecon", ",", "layer_decomps", "=", "smart_decompose", "(", "w", ",", "**", "opts", ")", "\n", "wrecon_tensor", "=", "torch", ".", "FloatTensor", "(", "wrecon", ")", "\n", "if", "v", ".", "data", ".", "is_cuda", ":", "\n", "                ", "wrecon_tensor", "=", "wrecon_tensor", ".", "cuda", "(", ")", "\n", "", "v", ".", "data", "=", "wrecon_tensor", "\n", "print", "(", "'done'", ")", "\n", "decomps", "[", "'l%d'", "%", "i", "]", "=", "layer_decomps", "\n", "", "", "return", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.__init__": [[26, 48], ["torch.Module.__init__", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "torch.Parameter().float", "linear_mask.SELinear.register_buffer", "linear_mask.SELinear.register_buffer", "linear_mask.SELinear.set_mask", "linear_mask.SELinear.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "linear_mask.SELinear.register_parameter", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "linear_mask.SELinear.C.size", "linear_mask.SELinear.C.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "threshold", "=", "5e-3", ")", ":", "\n", "        ", "super", "(", "SELinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "num_splits", ",", "self", ".", "size_splits", "=", "VEC_2_SHAPE", "[", "self", ".", "in_features", "]", "\n", "self", ".", "size_B", "=", "3", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "C", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "out_features", "*", "self", ".", "num_splits", ",", "\n", "self", ".", "size_splits", ",", "self", ".", "size_B", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "B", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "C", ".", "size", "(", ")", "[", "0", "]", ",", "\n", "self", ".", "size_B", ",", "self", ".", "size_B", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "C", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "torch", ".", "Tensor", "(", "out_features", ",", "in_features", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_dC_counter": [[49, 51], ["linear_mask.SELinear.C.new_zeros().float", "linear_mask.SELinear.C.new_zeros", "linear_mask.SELinear.C.size"], "methods", ["None"], ["", "def", "reset_dC_counter", "(", "self", ")", ":", "\n", "        ", "self", ".", "dC_counter", "=", "self", ".", "C", ".", "new_zeros", "(", "self", ".", "C", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.reset_parameters": [[52, 60], ["torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "linear_mask.SELinear.B.normal_", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.uniform_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "init", ".", "kaiming_uniform_", "(", "self", ".", "C", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "B", ".", "normal_", "(", "0", ",", "1.0", "/", "math", ".", "sqrt", "(", "3.0", ")", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.set_mask": [[61, 65], ["linear_mask.SELinear.sparsify_and_quantize_C"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.sparsify_and_quantize_C"], ["", "", "def", "set_mask", "(", "self", ")", ":", "\n", "        ", "self", ".", "C", ".", "data", "=", "self", ".", "sparsify_and_quantize_C", "(", "mask", "=", "False", ")", "\n", "self", ".", "mask", ".", "data", "=", "(", "self", ".", "C", "!=", "0.0", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.sparsify_and_quantize_C": [[66, 71], ["se_shift.utils_quantize.sparsify_and_nearestpow2"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.sparsify_and_nearestpow2"], ["", "def", "sparsify_and_quantize_C", "(", "self", ",", "mask", "=", "True", ")", ":", "\n", "        ", "qC", "=", "sparsify_and_nearestpow2", "(", "self", ".", "C", ",", "self", ".", "threshold", ")", "\n", "if", "mask", ":", "\n", "            ", "qC", "=", "qC", "*", "self", ".", "mask", "\n", "", "return", "qC", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.get_weight": [[72, 79], ["linear_mask.SELinear.sparsify_and_quantize_C", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.reshape", "torch.bmm.reshape", "torch.bmm.reshape", "torch.bmm.reshape"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.sparsify_and_quantize_C"], ["", "def", "get_weight", "(", "self", ",", "mask", "=", "True", ")", ":", "\n", "        ", "qC", "=", "self", ".", "sparsify_and_quantize_C", "(", "mask", "=", "mask", ")", "\n", "# if mask:", "\n", "#     qC = qC * self.mask", "\n", "weight", "=", "torch", ".", "bmm", "(", "qC", ",", "self", ".", "B", ")", "\n", "# Reshape `self.BC` to (out_features, in_features)", "\n", "return", "weight", ".", "reshape", "(", "self", ".", "out_features", ",", "-", "1", ")", "[", ":", ",", "0", ":", "self", ".", "in_features", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.forward": [[80, 83], ["linear_mask.SELinear.get_weight", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.get_weight", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "get_weight", "(", "mask", "=", "True", ")", "\n", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.linear_mask.SELinear.extra_repr": [[84, 87], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.__init__": [[51, 65], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid momentum value: {}\"", ".", "format", "(", "momentum", ")", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.__setstate__": [[66, 70], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.step": [[71, 109], ["closure", "p.data.add_", "d_p.add.add.add_", "torch.clone().detach", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone().detach.mul_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "d_p", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.get_d": [[110, 144], ["d_p.add.add.add_", "torch.clone().detach", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone().detach.mul_"], "methods", ["None"], ["", "def", "get_d", "(", "self", ",", "param", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            param (parameter, optional): the parameter whose update is calculated.\n        \"\"\"", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", "is", "param", ":", "\n", "                    ", "if", "param", ".", "grad", "is", "None", ":", "\n", "                        ", "return", "None", "\n", "", "d_p", "=", "param", ".", "grad", ".", "data", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                        ", "d_p", ".", "add_", "(", "weight_decay", ",", "param", ".", "data", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                        ", "param_state", "=", "self", ".", "state", "[", "param", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                            ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                            ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                            ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                            ", "d_p", "=", "buf", "\n", "\n", "", "", "return", "-", "group", "[", "'lr'", "]", "*", "d_p", "\n", "\n", "", "", "", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factors": [[9, 21], ["fct.append", "fct.append"], "function", ["None"], ["def", "factors", "(", "n", ")", ":", "\n", "    ", "i", "=", "2", "\n", "fct", "=", "[", "]", "\n", "while", "i", "*", "i", "<=", "n", ":", "\n", "        ", "if", "n", "%", "i", ":", "\n", "            ", "i", "+=", "1", "\n", "", "else", ":", "\n", "            ", "n", "//=", "i", "\n", "fct", ".", "append", "(", "i", ")", "\n", "", "", "if", "n", ">", "1", ":", "\n", "        ", "fct", ".", "append", "(", "n", ")", "\n", "", "return", "fct", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.isprime": [[50, 69], ["abs", "range", "int", "int"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["def", "isprime", "(", "n", ")", ":", "\n", "    ", "\"\"\"check if integer n is a prime\"\"\"", "\n", "# make sure n is a positive integer", "\n", "n", "=", "abs", "(", "int", "(", "n", ")", ")", "\n", "# 0 and 1 are not primes", "\n", "if", "n", "<", "2", ":", "\n", "        ", "return", "False", "\n", "# 2 is the only even prime number", "\n", "", "if", "n", "==", "2", ":", "\n", "        ", "return", "True", "\n", "# all other even numbers are not primes", "\n", "", "if", "not", "n", "&", "1", ":", "\n", "        ", "return", "False", "\n", "# range starts with 3 and only needs to go up the squareroot of n", "\n", "# for all odd numbers", "\n", "", "for", "x", "in", "range", "(", "3", ",", "int", "(", "n", "**", "0.5", ")", "+", "1", ",", "2", ")", ":", "\n", "        ", "if", "n", "%", "x", "==", "0", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.nearestpow2": [[71, 85], ["numpy.ceil", "numpy.all", "numpy.log2"], "function", ["None"], ["", "def", "nearestpow2", "(", "v", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for nearest_pow2.\n\n    :v: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "assert", "v", ".", "size", ">", "0", "and", "np", ".", "all", "(", "v", ">", "0", ")", "\n", "nextpow2", "=", "np", ".", "ceil", "(", "np", ".", "log2", "(", "v", ")", ")", "\n", "lerr", "=", "v", "-", "2", "**", "(", "nextpow2", "-", "1", ")", "\n", "rerr", "=", "2", "**", "nextpow2", "-", "v", "\n", "lbetter", "=", "(", "lerr", "<=", "rerr", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "nearest", "=", "(", "nextpow2", "-", "1", ")", "*", "lbetter", "+", "nextpow2", "*", "(", "1", "-", "lbetter", ")", "\n", "return", "nearest", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factor_short": [[87, 96], ["alg_structural.factors", "alg_structural.isprime"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factors", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.isprime"], ["", "def", "factor_short", "(", "n", ")", ":", "\n", "    ", "if", "n", "<=", "12", "or", "isprime", "(", "n", ")", ":", "\n", "        ", "return", "n", "\n", "", "fct", "=", "factors", "(", "n", ")", "\n", "if", "fct", "[", "0", "]", ">", "2", ":", "\n", "        ", "return", "fct", "[", "0", "]", "\n", "", "if", "fct", "[", "1", "]", ">=", "6", ":", "\n", "        ", "return", "fct", "[", "1", "]", "\n", "", "return", "fct", "[", "0", "]", "*", "fct", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factor_long": [[98, 109], ["preset.get", "alg_structural.factors", "range", "alg_structural.isprime", "len", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factors", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.isprime"], ["", "def", "factor_long", "(", "m", ",", "n0", ")", ":", "\n", "    ", "m0", "=", "preset", ".", "get", "(", "(", "m", ",", "n0", ")", ",", "False", ")", "\n", "if", "not", "m0", ":", "\n", "        ", "if", "m", "<=", "64", "*", "n0", "or", "isprime", "(", "m", ")", ":", "\n", "            ", "return", "m", "\n", "", "fct", "=", "factors", "(", "m", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "fct", ")", ")", ":", "\n", "            ", "m0", "=", "np", ".", "prod", "(", "fct", "[", "i", ":", "]", ")", "\n", "if", "m0", "<=", "64", "*", "n0", ":", "\n", "                ", "return", "m0", "\n", "", "", "", "return", "m0", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.core_decompose": [[120, 256], ["numpy.transpose", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "opts.get", "numpy.eye", "numpy.copy", "dict", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.all", "range", "numpy.sign", "numpy.abs", "nz_idx.any", "numpy.clip", "numpy.transpose", "numpy.count_nonzero", "numpy.linalg.norm", "len", "ValueError", "ValueError", "opts.get.lower", "NotImplementedError", "numpy.zeros", "numpy.sign", "numpy.abs", "nz_idx.any", "numpy.clip", "numpy.transpose", "numpy.count_nonzero", "numpy.linalg.norm", "numpy.ones", "range", "np.ones.reshape", "numpy.reshape", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.ones", "range", "np.ones.reshape", "numpy.reshape", "numpy.copy", "numpy.linalg.norm", "numpy.copy", "numpy.linalg.lstsq", "numpy.log2", "numpy.round", "alg_structural.nearestpow2", "numpy.linalg.lstsq", "numpy.matmul", "numpy.log2", "numpy.round", "alg_structural.nearestpow2", "numpy.linalg.lstsq", "numpy.matmul", "alg_structural.core_decompose", "numpy.mean", "alg_structural.core_decompose", "numpy.mean", "numpy.abs", "numpy.transpose", "numpy.transpose", "numpy.sum", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.clip", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.sign", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.adder.adder.clip", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.nearestpow2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.nearestpow2", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.core_decompose", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.core_decompose", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "def", "core_decompose", "(", "A", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for core_decompose.\n\n    :A: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "if", "len", "(", "A", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'The input should be a 2-D matrix'", ")", "\n", "", "m", ",", "n", "=", "A", ".", "shape", "\n", "if", "m", "<", "n", ":", "\n", "        ", "raise", "ValueError", "(", "'The input should be a tall matrix'", ")", "\n", "", "A", "=", "np", ".", "transpose", "(", "A", ")", "\n", "m", ",", "n", "=", "A", ".", "shape", "\n", "\n", "init_method", "=", "opts", ".", "get", "(", "'init_method'", ",", "'trivial'", ")", "\n", "if", "init_method", ".", "lower", "(", ")", "is", "'ksvd'", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"KSVD initialization not implemented yet.\"", ")", "\n", "", "decompose_iternum", "=", "opts", ".", "get", "(", "'decompose_iternum'", ",", "50", ")", "\n", "decompose_threshold", "=", "opts", ".", "get", "(", "'decompose_threshold'", ",", "2e-1", ")", "\n", "decompose_decay", "=", "opts", ".", "get", "(", "'decompose_decay'", ",", "0.1", ")", "\n", "decompose_scale", "=", "opts", ".", "get", "(", "'decompose_scale'", ",", "True", ")", "\n", "decompose_tol", "=", "opts", ".", "get", "(", "'decompose_tol'", ",", "1e-6", ")", "\n", "decompose_rcond", "=", "opts", ".", "get", "(", "'decompose_rcond'", ",", "1e-10", ")", "\n", "threshold_row", "=", "opts", ".", "get", "(", "'threshold_row'", ",", "False", ")", "\n", "max_C", "=", "opts", ".", "get", "(", "'max_C'", ",", "32.0", ")", "\n", "\n", "# if init_method is 'trivial':", "\n", "B", "=", "np", ".", "eye", "(", "m", ")", "\n", "Ce", "=", "np", ".", "copy", "(", "A", ")", "\n", "\n", "# Initialize the output", "\n", "Out", "=", "dict", "(", ")", "\n", "Out", "[", "'B_init'", "]", "=", "np", ".", "transpose", "(", "B", ")", "\n", "Out", "[", "'Ce_init'", "]", "=", "np", ".", "transpose", "(", "Ce", ")", "\n", "Out", "[", "'B_hist'", "]", "=", "np", ".", "zeros", "(", "(", "decompose_iternum", ",", "m", ",", "m", ")", ")", "\n", "Out", "[", "'Ce_hist'", "]", "=", "np", ".", "zeros", "(", "(", "decompose_iternum", ",", "n", ",", "m", ")", ")", "\n", "Out", "[", "'err_hist'", "]", "=", "np", ".", "zeros", "(", "decompose_iternum", ")", "\n", "Out", "[", "'nnz_hist'", "]", "=", "np", ".", "zeros", "(", "decompose_iternum", ")", "\n", "if", "decompose_scale", ":", "\n", "        ", "Out", "[", "'dhist'", "]", "=", "np", ".", "zeros", "(", "(", "m", ",", "decompose_iternum", ")", ")", "\n", "\n", "", "if", "np", ".", "all", "(", "A", "==", "0.0", ")", ":", "\n", "        ", "return", "np", ".", "transpose", "(", "Ce", ")", ",", "np", ".", "transpose", "(", "B", ")", ",", "Out", "\n", "\n", "", "for", "i", "in", "range", "(", "decompose_iternum", "-", "1", ")", ":", "\n", "# quantization", "\n", "        ", "Ce_sign", "=", "np", ".", "sign", "(", "Ce", ")", "\n", "Ce_abs", "=", "np", ".", "abs", "(", "Ce", ")", "\n", "nz_idx", "=", "Ce_abs", ">", "0", "\n", "# find scaling matrix D for minimum quantization error", "\n", "if", "decompose_scale", "is", "True", ":", "\n", "            ", "d", "=", "np", ".", "ones", "(", "(", "m", ",", "1", ")", ")", "\n", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "                ", "c", "=", "Ce_abs", "[", "j", ",", ":", "]", "\n", "cnz", "=", "c", "[", "c", ">", "0", "]", "\n", "if", "cnz", ".", "size", "==", "0", ":", "\n", "                    ", "opts", "[", "'decompose_threshold'", "]", "*=", "decompose_decay", "\n", "return", "core_decompose", "(", "np", ".", "transpose", "(", "A", ")", ",", "**", "opts", ")", "\n", "", "cnz_log", "=", "np", ".", "log2", "(", "cnz", ")", "\n", "cnz_round", "=", "np", ".", "round", "(", "cnz_log", ")", "\n", "d", "[", "j", "]", "=", "2", "**", "np", ".", "mean", "(", "cnz_round", "-", "cnz_log", ")", "\n", "", "Ce_abs", "=", "d", "*", "Ce_abs", "\n", "Out", "[", "'dhist'", "]", "[", ":", ",", "i", "]", "=", "d", ".", "reshape", "(", "-", "1", ")", "\n", "", "if", "nz_idx", ".", "any", "(", ")", ":", "\n", "            ", "Ce_abs", "[", "nz_idx", "]", "=", "2", "**", "nearestpow2", "(", "Ce_abs", "[", "nz_idx", "]", ")", "\n", "# if np.max(Ce_abs) > 32:", "\n", "# Ce_abs = Ce_abs / np.max(Ce_abs) * 32.0", "\n", "", "Ce_abs", "=", "np", ".", "clip", "(", "Ce_abs", ",", "0.0", ",", "max_C", ")", "\n", "Ce_quant", "=", "np", ".", "reshape", "(", "Ce_abs", ",", "Ce", ".", "shape", ")", "*", "Ce_sign", "\n", "\n", "# quit condition", "\n", "if", "i", "==", "0", ":", "\n", "            ", "Ce_quant_prev", "=", "np", ".", "copy", "(", "Ce_quant", ")", "\n", "", "else", ":", "\n", "            ", "diff", "=", "np", ".", "linalg", ".", "norm", "(", "Ce_quant", "-", "Ce_quant_prev", ",", "ord", "=", "'fro'", ")", "\n", "if", "diff", "<=", "decompose_tol", ":", "\n", "                ", "break", "\n", "", "Ce_quant_prev", "=", "np", ".", "copy", "(", "Ce_quant", ")", "\n", "\n", "# least square to update B", "\n", "", "B", "=", "np", ".", "transpose", "(", "np", ".", "linalg", ".", "lstsq", "(", "Ce_quant", ".", "T", ",", "A", ".", "T", ",", "rcond", "=", "decompose_rcond", ")", "[", "0", "]", ")", "\n", "\n", "# update history", "\n", "Out", "[", "'Ce_hist'", "]", "[", "i", ",", ":", ",", ":", "]", "=", "Ce_quant", ".", "T", "\n", "Out", "[", "'B_hist'", "]", "[", "i", ",", ":", ",", ":", "]", "=", "B", ".", "T", "\n", "Out", "[", "'nnz_hist'", "]", "[", "i", "]", "=", "np", ".", "count_nonzero", "(", "Ce_quant", ")", "\n", "Out", "[", "'err_hist'", "]", "[", "i", "]", "=", "np", ".", "linalg", ".", "norm", "(", "A", "-", "np", ".", "matmul", "(", "B", ",", "Ce_quant", ")", ",", "'fro'", ")", "\n", "\n", "# least square to update C", "\n", "Ce", "=", "np", ".", "linalg", ".", "lstsq", "(", "B", ",", "A", ",", "rcond", "=", "decompose_rcond", ")", "[", "0", "]", "\n", "\n", "# promote sparsity in C", "\n", "if", "threshold_row", ":", "\n", "# NOTE: the `row`s correspond to the columns in Ce here because of", "\n", "# the transpose", "\n", "            ", "Ce", "[", ":", ",", "np", ".", "sum", "(", "np", ".", "abs", "(", "Ce", ")", ",", "axis", "=", "0", ")", "<", "decompose_threshold", "*", "5", "]", "=", "0.0", "\n", "# elif decompose_threshold_type == 'element':", "\n", "", "Ce", "[", "np", ".", "abs", "(", "Ce", ")", "<", "decompose_threshold", "]", "=", "0.0", "\n", "\n", "# quantization", "\n", "", "Ce_sign", "=", "np", ".", "sign", "(", "Ce", ")", "\n", "Ce_abs", "=", "np", ".", "abs", "(", "Ce", ")", "\n", "nz_idx", "=", "Ce_abs", ">", "0", "\n", "# find scaling matrix D for minimum quantization error", "\n", "if", "decompose_scale", "is", "True", ":", "\n", "        ", "d", "=", "np", ".", "ones", "(", "(", "m", ",", "1", ")", ")", "\n", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "            ", "c", "=", "Ce_abs", "[", "j", ",", ":", "]", "\n", "cnz", "=", "c", "[", "c", ">", "0", "]", "\n", "if", "cnz", ".", "size", "==", "0", ":", "\n", "                ", "opts", "[", "'decompose_threshold'", "]", "*=", "decompose_decay", "\n", "return", "core_decompose", "(", "np", ".", "transpose", "(", "A", ")", ",", "**", "opts", ")", "\n", "", "cnz_log", "=", "np", ".", "log2", "(", "cnz", ")", "\n", "cnz_round", "=", "np", ".", "round", "(", "cnz_log", ")", "\n", "d", "[", "j", "]", "=", "2", "**", "np", ".", "mean", "(", "cnz_round", "-", "cnz_log", ")", "\n", "", "Ce_abs", "=", "Ce_abs", "*", "d", "\n", "Out", "[", "'dhist'", "]", "[", ":", ",", "i", "]", "=", "d", ".", "reshape", "(", "-", "1", ")", "\n", "", "if", "nz_idx", ".", "any", "(", ")", ":", "\n", "        ", "Ce_abs", "[", "nz_idx", "]", "=", "2", "**", "nearestpow2", "(", "Ce_abs", "[", "nz_idx", "]", ")", "\n", "# if np.max(Ce_abs) > 32:", "\n", "# Ce_abs = Ce_abs / np.max(Ce_abs) * 32.0", "\n", "", "Ce_abs", "=", "np", ".", "clip", "(", "Ce_abs", ",", "0.0", ",", "max_C", ")", "\n", "Ce", "=", "np", ".", "reshape", "(", "Ce_abs", ",", "Ce", ".", "shape", ")", "*", "Ce_sign", "\n", "\n", "# least square to update B", "\n", "B", "=", "np", ".", "transpose", "(", "np", ".", "linalg", ".", "lstsq", "(", "Ce", ".", "T", ",", "A", ".", "T", ",", "rcond", "=", "1e-10", ")", "[", "0", "]", ")", "\n", "\n", "# update history", "\n", "Out", "[", "'Ce_hist'", "]", "[", "-", "1", ",", ":", ",", ":", "]", "=", "Ce", ".", "T", "\n", "Out", "[", "'B_hist'", "]", "[", "-", "1", ",", ":", ",", ":", "]", "=", "B", ".", "T", "\n", "Out", "[", "'nnz_hist'", "]", "[", "-", "1", "]", "=", "np", ".", "count_nonzero", "(", "Ce", ")", "\n", "Out", "[", "'err_hist'", "]", "[", "-", "1", "]", "=", "np", ".", "linalg", ".", "norm", "(", "A", "-", "np", ".", "matmul", "(", "B", ",", "Ce", ")", ",", "'fro'", ")", "\n", "\n", "return", "np", ".", "transpose", "(", "Ce", ")", ",", "np", ".", "transpose", "(", "B", ")", ",", "Out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.vector_decompose": [[258, 283], ["opts.get", "numpy.zeros", "np.zeros.reshape", "opts.get", "alg_structural.matrix_decompose", "print", "len", "VEC_2_SHAPE.keys", "int", "print", "matrecon.reshape", "math.ceil"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.matrix_decompose"], ["", "def", "vector_decompose", "(", "col", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for matrix_decompose.\n\n    :col: TODO\n    :**opts: TODO\n\n    \"\"\"", "\n", "if", "opts", ".", "get", "(", "'verbose'", ",", "False", ")", ":", "\n", "        ", "print", "(", "col", ".", "shape", ")", "\n", "", "assert", "len", "(", "col", ".", "shape", ")", "==", "1", "\n", "size", "=", "col", ".", "size", "\n", "if", "size", "in", "VEC_2_SHAPE", ".", "keys", "(", ")", ":", "\n", "        ", "num_split", ",", "size_split", "=", "VEC_2_SHAPE", "[", "size", "]", "\n", "newsize", "=", "3", "*", "num_split", "*", "size_split", "\n", "", "else", ":", "\n", "        ", "newsize", "=", "int", "(", "ceil", "(", "size", "/", "3.0", ")", "*", "3", ")", "\n", "# newsize = int(ceil(size/3.0) * 3)", "\n", "", "newcol", "=", "np", ".", "zeros", "(", "newsize", ",", "dtype", "=", "col", ".", "dtype", ")", "\n", "newcol", "[", ":", "size", "]", "=", "col", "\n", "mat", "=", "newcol", ".", "reshape", "(", "newsize", "//", "3", ",", "3", ")", "\n", "if", "opts", ".", "get", "(", "'verbose'", ",", "False", ")", ":", "\n", "        ", "print", "(", "mat", ".", "shape", ")", "\n", "", "matrecon", ",", "Ces", ",", "Bs", "=", "matrix_decompose", "(", "mat", ",", "**", "opts", ")", "\n", "colrecon", "=", "matrecon", ".", "reshape", "(", "-", "1", ")", "[", ":", "size", "]", "\n", "return", "colrecon", ",", "Ces", ",", "Bs", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.matrix_decompose": [[285, 333], ["alg_structural.factor_short", "alg_structural.factor_long", "opts.get", "numpy.zeros", "range", "len", "numpy.transpose", "range", "numpy.transpose", "alg_structural.core_decompose", "numpy.matmul", "Ces.append", "Bs.append"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factor_short", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.factor_long", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.core_decompose"], ["", "def", "matrix_decompose", "(", "A", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for matrix_decompose.\n\n    :A: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "assert", "len", "(", "A", ".", "shape", ")", "==", "2", "\n", "m", ",", "n", "=", "A", ".", "shape", "\n", "\n", "# transpose weight if weight is a fat and short matrix.", "\n", "# `transpose_flag` will be used to transpose the reconstructed matrix", "\n", "#   back before returning the results.", "\n", "if", "m", "<", "n", ":", "\n", "        ", "A", "=", "np", ".", "transpose", "(", "A", ")", "\n", "m", ",", "n", "=", "A", ".", "shape", "\n", "transpose_flag", "=", "1", "\n", "", "else", ":", "\n", "        ", "transpose_flag", "=", "0", "\n", "\n", "# decide how to partition the matrix for decompositions", "\n", "", "n0", "=", "factor_short", "(", "n", ")", "\n", "m0", "=", "factor_long", "(", "m", ",", "n0", ")", "\n", "\n", "return_decomps", "=", "opts", ".", "get", "(", "'return_decomps'", ",", "True", ")", "\n", "\n", "Arecon", "=", "np", ".", "zeros", "(", "A", ".", "shape", ")", "\n", "Ces", "=", "[", "]", "if", "return_decomps", "else", "None", "\n", "Bs", "=", "[", "]", "if", "return_decomps", "else", "None", "\n", "\n", "# print(n // n0)", "\n", "for", "j", "in", "range", "(", "n", "//", "n0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "m", "//", "m0", ")", ":", "\n", "            ", "upper", "=", "i", "*", "m0", "\n", "lower", "=", "(", "i", "+", "1", ")", "*", "m0", "\n", "left", "=", "j", "*", "n0", "\n", "right", "=", "(", "j", "+", "1", ")", "*", "n0", "\n", "Ce", ",", "B", ",", "_", "=", "core_decompose", "(", "A", "[", "upper", ":", "lower", ",", "left", ":", "right", "]", ",", "**", "opts", ")", "\n", "Arecon", "[", "upper", ":", "lower", ",", "left", ":", "right", "]", "=", "np", ".", "matmul", "(", "Ce", ",", "B", ")", "\n", "if", "return_decomps", ":", "\n", "                ", "Ces", ".", "append", "(", "Ce", ")", "\n", "Bs", ".", "append", "(", "B", ")", "\n", "\n", "", "", "", "if", "transpose_flag", ":", "\n", "        ", "Arecon", "=", "np", ".", "transpose", "(", "Arecon", ")", "\n", "# assert len(Ces) == len(Bs)", "\n", "", "return", "Arecon", ",", "Ces", ",", "Bs", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.parfun_vector_decompose": [[335, 341], ["dict", "alg_structural.vector_decompose"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.vector_decompose"], ["", "def", "parfun_vector_decompose", "(", "i", ",", "vec", ",", "**", "opts", ")", ":", "\n", "    ", "decomps", "=", "dict", "(", "type", "=", "'vector'", ",", "shape", "=", "vec", ".", "size", ")", "\n", "vecrecon", ",", "Ces", ",", "Bs", "=", "vector_decompose", "(", "vec", ",", "**", "opts", ")", "\n", "decomps", "[", "'Ces'", "]", "=", "Ces", "\n", "decomps", "[", "'Bs'", "]", "=", "Bs", "\n", "return", "i", ",", "vecrecon", ",", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.parfun_matrix_decompose": [[343, 349], ["dict", "alg_structural.matrix_decompose"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.matrix_decompose"], ["", "def", "parfun_matrix_decompose", "(", "i", ",", "Wp", ",", "**", "opts", ")", ":", "\n", "    ", "decomps", "=", "dict", "(", "type", "=", "'matrix'", ",", "shape", "=", "Wp", ".", "shape", ")", "\n", "Wprecon", ",", "Ces", ",", "Bs", "=", "matrix_decompose", "(", "Wp", ",", "**", "opts", ")", "\n", "decomps", "[", "'Ces'", "]", "=", "Ces", "\n", "decomps", "[", "'Bs'", "]", "=", "Bs", "\n", "return", "i", ",", "Wprecon", ",", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.smart_decompose": [[351, 448], ["opts.get", "opts.get", "dict", "opts.get", "min", "print", "range", "len", "tuple", "numpy.zeros_like", "tuple", "numpy.zeros_like", "len", "numpy.sum", "numpy.reshape", "numpy.reshape", "opts.get", "opts.get", "numpy.sum", "numpy.argsort", "opts.get", "opts.get", "numpy.ones_like", "numpy.reshape", "joblib.Parallel", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.abs", "numpy.abs", "len", "math.ceil", "joblib.Parallel", "joblib.Parallel", "joblib.delayed", "range", "sum", "range", "joblib.delayed", "range", "joblib.delayed", "range", "range"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.abs"], ["", "def", "smart_decompose", "(", "W", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for smart_decompose.\n\n    :W: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "threshold_row", "=", "opts", ".", "get", "(", "'threshold_row'", ",", "False", ")", "\n", "num_workers", "=", "opts", ".", "get", "(", "'num_workers'", ",", "8", ")", "\n", "decomps", "=", "dict", "(", ")", "\n", "\n", "# Structurally prune the filter, if needed", "\n", "# Structural pruning is not applied to FC layers", "\n", "if", "opts", ".", "get", "(", "'structural_pruning'", ",", "False", ")", "and", "len", "(", "W", ".", "shape", ")", ">", "2", ":", "\n", "        ", "shape", "=", "W", ".", "shape", "\n", "if", "shape", "[", "-", "1", "]", ">", "1", ":", "# CONV layers", "\n", "            ", "row_abssum", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "W", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "flat", "=", "np", ".", "reshape", "(", "row_abssum", ",", "(", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "flat", "=", "np", ".", "reshape", "(", "np", ".", "abs", "(", "W", ")", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "", "group_size", "=", "opts", ".", "get", "(", "'prune_conv_group_size'", ",", "32", ")", "if", "len", "(", "shape", ")", ">", "2", "else", "opts", ".", "get", "(", "'prune_linear_group_size'", ",", "10", ")", "\n", "group_size", "=", "min", "(", "shape", "[", "0", "]", ",", "group_size", ")", "\n", "print", "(", "'Group size is set to {}'", ".", "format", "(", "group_size", ")", ")", "\n", "# print('structural pruning used')", "\n", "for", "i", "in", "range", "(", "0", ",", "shape", "[", "0", "]", ",", "group_size", ")", ":", "# NOTE: iterate over groups", "\n", "            ", "col_sum", "=", "np", ".", "sum", "(", "flat", "[", "i", ":", "i", "+", "group_size", "]", ",", "axis", "=", "0", ")", "\n", "sorted_idx", "=", "np", ".", "argsort", "(", "col_sum", ")", "# sort in ascending order", "\n", "prune_type", "=", "opts", ".", "get", "(", "'prune_type'", ",", "'population'", ")", "\n", "prune_threshold", "=", "opts", ".", "get", "(", "'prune_threshold'", ",", "0.4", ")", "\n", "# get the indices of pruned groups", "\n", "if", "prune_type", "==", "'population'", ":", "\n", "                ", "end", "=", "ceil", "(", "sorted_idx", ".", "size", "*", "prune_threshold", ")", "\n", "pruned_idx", "=", "sorted_idx", "[", ":", "end", "]", "\n", "", "elif", "prune_type", "==", "'value'", ":", "\n", "                ", "pruned_idx", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "sorted_idx", ".", "size", ")", "if", "col_sum", "[", "i", "]", "<", "prune_threshold", "]", "\n", "", "elif", "prune_type", "==", "'energy'", ":", "\n", "                ", "total_energy", "=", "sum", "(", "col_sum", ")", "\n", "current_sum", "=", "0", "\n", "for", "end", "in", "range", "(", "sorted_idx", ".", "size", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "current_sum", "+=", "col_sum", "[", "end", "]", "\n", "if", "current_sum", "/", "total_energy", ">=", "prune_threshold", ":", "\n", "                        ", "break", "\n", "", "", "pruned_idx", "=", "sorted_idx", "[", ":", "end", "]", "\n", "# perform pruning", "\n", "", "preserved", "=", "np", ".", "ones_like", "(", "col_sum", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "preserved", "[", "pruned_idx", "]", "=", "0.0", "\n", "preserved", "=", "np", ".", "reshape", "(", "preserved", ",", "(", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "W", "[", "i", ":", "i", "+", "group_size", "]", "=", "W", "[", "i", ":", "i", "+", "group_size", "]", "*", "preserved", "\n", "\n", "# print(np.sum(W==0.0) / W.size)", "\n", "\n", "", "", "if", "len", "(", "W", ".", "shape", ")", "==", "2", ":", "\n", "        ", "decomps", "[", "'type'", "]", "=", "'fc'", "\n", "decomps", "[", "'shape'", "]", "=", "tuple", "(", "W", ".", "shape", ")", "\n", "dout", ",", "din", "=", "W", ".", "shape", "\n", "Wrecon", "=", "np", ".", "zeros_like", "(", "W", ")", "\n", "opts", "[", "'threshold_row'", "]", "=", "False", "# do not do row thresholding for fc layers", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "num_workers", ")", "(", "delayed", "(", "parfun_vector_decompose", ")", "(", "i", ",", "W", "[", "i", ",", ":", "]", ",", "**", "opts", ")", "for", "i", "in", "range", "(", "dout", ")", ")", "\n", "for", "i", ",", "rowrecon", ",", "row_decomps", "in", "results", ":", "\n", "            ", "decomps", "[", "'r%d'", "%", "(", "i", "+", "1", ")", "]", "=", "row_decomps", "\n", "Wrecon", "[", "i", ",", "]", "=", "rowrecon", "\n", "", "", "else", ":", "\n", "        ", "decomps", "[", "'type'", "]", "=", "'conv'", "\n", "decomps", "[", "'shape'", "]", "=", "tuple", "(", "W", ".", "shape", ")", "\n", "cout", ",", "cin", ",", "kh", ",", "kw", "=", "W", ".", "shape", "\n", "opts", "[", "'threshold_row'", "]", "=", "threshold_row", "and", "(", "kh", "==", "3", ")", "\n", "if", "kh", "!=", "1", "and", "kh", "!=", "3", ":", "\n", "            ", "return", "W", ",", "decomps", "\n", "", "Wrecon", "=", "np", ".", "zeros_like", "(", "W", ")", "\n", "if", "kh", "==", "1", ":", "\n", "            ", "W", "=", "np", ".", "reshape", "(", "W", ",", "(", "cout", ",", "-", "1", ")", ")", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "num_workers", ")", "(", "\n", "delayed", "(", "parfun_vector_decompose", ")", "(", "i", ",", "W", "[", "i", ",", ":", "]", ",", "**", "opts", ")", "for", "i", "in", "range", "(", "cout", ")", ")", "\n", "", "else", ":", "\n", "            ", "W", "=", "np", ".", "reshape", "(", "W", ",", "(", "cout", ",", "cin", "*", "kh", ",", "kw", ")", ")", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "num_workers", ")", "(", "\n", "delayed", "(", "parfun_matrix_decompose", ")", "(", "i", ",", "W", "[", "i", ",", ":", ",", ":", "]", ",", "**", "opts", ")", "for", "i", "in", "range", "(", "cout", ")", ")", "\n", "", "for", "c", ",", "Wprecon", ",", "Wp_decomps", "in", "results", ":", "\n", "            ", "Wrecon", "[", "c", ",", ":", ",", ":", ",", ":", "]", "=", "np", ".", "reshape", "(", "Wprecon", ",", "(", "cin", ",", "kh", ",", "kw", ")", ")", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "=", "Wp_decomps", "\n", "# for c in range(cout):", "\n", "#     decomps['k%d'%(c+1)] = dict()", "\n", "#     if kh == 1:", "\n", "#         Wp = np.reshape(W[c,:,:,:], -1)", "\n", "#         decomps['k%d'%(c+1)]['type'] = 'vector'", "\n", "#         decomps['k%d'%(c+1)]['shape'] = int(Wp.size)", "\n", "#         Wprecon, Ces, Bs = vector_decompose(Wp, **opts)", "\n", "#     else:", "\n", "#         Wp = np.reshape(W[c,:,:,:], (cin*kh, kw))", "\n", "#         decomps['k%d'%(c+1)]['type'] = 'matrix'", "\n", "#         decomps['k%d'%(c+1)]['shape'] = tuple(Wp.shape)", "\n", "#         Wprecon, Ces, Bs = matrix_decompose(Wp, **opts)", "\n", "#     Wrecon[c,:,:,:] = np.reshape(Wprecon, (cin, kh, kw))", "\n", "#     decomps['k%d'%(c+1)]['Ces'] = Ces", "\n", "#     decomps['k%d'%(c+1)]['Bs'] = Bs", "\n", "", "", "return", "Wrecon", ",", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.smart_decompose_backup": [[450, 501], ["opts.pop", "opts.pop", "dict", "len", "tuple", "numpy.zeros_like", "tuple", "numpy.zeros_like", "range", "joblib.Parallel", "dict", "numpy.reshape", "numpy.reshape", "int", "alg_structural.vector_decompose", "numpy.reshape", "tuple", "alg_structural.matrix_decompose", "joblib.delayed", "range"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.vector_decompose", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.matrix_decompose"], ["", "def", "smart_decompose_backup", "(", "W", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for smart_decompose.\n\n    :W: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "threshold_row", "=", "opts", ".", "pop", "(", "'threshold_row'", ",", "False", ")", "\n", "num_workers", "=", "opts", ".", "pop", "(", "'num_workers'", ",", "8", ")", "\n", "decomps", "=", "dict", "(", ")", "\n", "if", "len", "(", "W", ".", "shape", ")", "==", "2", ":", "\n", "        ", "decomps", "[", "'type'", "]", "=", "'fc'", "\n", "decomps", "[", "'shape'", "]", "=", "tuple", "(", "W", ".", "shape", ")", "\n", "dout", ",", "din", "=", "W", ".", "shape", "\n", "Wrecon", "=", "np", ".", "zeros_like", "(", "W", ")", "\n", "opts", "[", "'threshold_row'", "]", "=", "False", "# do not do row thresholding for fc layers", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "num_workers", ")", "(", "delayed", "(", "parfun_vector_decompose", ")", "(", "i", ",", "W", "[", "i", ",", ":", "]", ",", "**", "opts", ")", "for", "i", "in", "range", "(", "dout", ")", ")", "\n", "for", "i", ",", "rowrecon", ",", "row_decomps", "in", "results", ":", "\n", "            ", "decomps", "[", "'r%d'", "%", "(", "i", "+", "1", ")", "]", "=", "row_decomps", "\n", "Wrecon", "[", "i", ",", "]", "=", "rowrecon", "\n", "# for i in tqdm(range(dout)):", "\n", "#     decomps['r%d'%(i+1)] = dict(type='vector', shape=din)", "\n", "#     rowrecon, Ces, Bs = vector_decompose(W[i,:], **opts)", "\n", "#     Wrecon[i,:] = rowrecon", "\n", "#     decomps['r%d'%(i+1)]['Ces'] = Ces", "\n", "#     decomps['r%d'%(i+1)]['Bs'] = Bs", "\n", "", "", "else", ":", "\n", "        ", "decomps", "[", "'type'", "]", "=", "'conv'", "\n", "decomps", "[", "'shape'", "]", "=", "tuple", "(", "W", ".", "shape", ")", "\n", "cout", ",", "cin", ",", "kh", ",", "kw", "=", "W", ".", "shape", "\n", "opts", "[", "'threshold_row'", "]", "=", "threshold_row", "and", "(", "kh", "==", "3", ")", "\n", "if", "kh", "!=", "1", "and", "kh", "!=", "3", ":", "\n", "            ", "return", "W", ",", "decomps", "\n", "", "Wrecon", "=", "np", ".", "zeros_like", "(", "W", ")", "\n", "for", "c", "in", "range", "(", "cout", ")", ":", "\n", "            ", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "=", "dict", "(", ")", "\n", "if", "kh", "==", "1", ":", "\n", "                ", "Wp", "=", "np", ".", "reshape", "(", "W", "[", "c", ",", ":", ",", ":", ",", ":", "]", ",", "-", "1", ")", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'type'", "]", "=", "'vector'", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'shape'", "]", "=", "int", "(", "Wp", ".", "size", ")", "\n", "Wprecon", ",", "Ces", ",", "Bs", "=", "vector_decompose", "(", "Wp", ",", "**", "opts", ")", "\n", "", "else", ":", "\n", "                ", "Wp", "=", "np", ".", "reshape", "(", "W", "[", "c", ",", ":", ",", ":", ",", ":", "]", ",", "(", "cin", "*", "kh", ",", "kw", ")", ")", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'type'", "]", "=", "'matrix'", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'shape'", "]", "=", "tuple", "(", "Wp", ".", "shape", ")", "\n", "Wprecon", ",", "Ces", ",", "Bs", "=", "matrix_decompose", "(", "Wp", ",", "**", "opts", ")", "\n", "", "Wrecon", "[", "c", ",", ":", ",", ":", ",", ":", "]", "=", "np", ".", "reshape", "(", "Wprecon", ",", "(", "cin", ",", "kh", ",", "kw", ")", ")", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'Ces'", "]", "=", "Ces", "\n", "decomps", "[", "'k%d'", "%", "(", "c", "+", "1", ")", "]", "[", "'Bs'", "]", "=", "Bs", "\n", "", "", "return", "Wrecon", ",", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.smart_net": [[503, 530], ["dict", "net.parameters", "len", "print", "alg_structural.smart_decompose", "torch.FloatTensor", "print", "param.detach().cpu().numpy", "param.detach().numpy", "wrecon_tensor.cuda.cuda", "param.detach().cpu", "param.detach", "param.detach"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.smart_decompose"], ["", "def", "smart_net", "(", "net", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for smart_net.\n\n    :net: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "i", "=", "0", "\n", "decomps", "=", "dict", "(", ")", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "len", "(", "param", ".", "shape", ")", ">=", "2", ":", "\n", "            ", "i", "=", "i", "+", "1", "\n", "print", "(", "'decompose layer {}...'", ".", "format", "(", "i", ")", ",", "end", "=", "' '", ")", "\n", "if", "param", ".", "is_cuda", ":", "\n", "                ", "w", "=", "param", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "w", "=", "param", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "opts", "[", "'prune_threshold'", "]", "=", "opts", "[", "'threshold_list'", "]", "[", "i", "-", "1", "]", "\n", "wrecon", ",", "layer_decomps", "=", "smart_decompose", "(", "w", ",", "**", "opts", ")", "\n", "wrecon_tensor", "=", "torch", ".", "FloatTensor", "(", "wrecon", ")", "\n", "if", "param", ".", "is_cuda", ":", "\n", "                ", "wrecon_tensor", "=", "wrecon_tensor", ".", "cuda", "(", ")", "\n", "", "param", ".", "data", "=", "wrecon_tensor", "\n", "print", "(", "'done'", ")", "\n", "decomps", "[", "'l%d'", "%", "i", "]", "=", "layer_decomps", "\n", "", "", "return", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.smart_state_dict": [[532, 559], ["dict", "state.items", "print", "alg_structural.smart_decompose", "torch.FloatTensor", "print", "len", "v.data.detach().cpu().numpy", "v.data.detach().numpy", "wrecon_tensor.cuda.cuda", "v.data.detach().cpu", "v.data.detach", "v.data.detach"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.alg_structural.smart_decompose"], ["", "def", "smart_state_dict", "(", "state", ",", "**", "opts", ")", ":", "\n", "    ", "\"\"\"TODO: Docstring for smart_net.\n\n    :state: TODO\n    :**opts: TODO\n    :returns: TODO\n\n    \"\"\"", "\n", "i", "=", "0", "\n", "decomps", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "        ", "if", "(", "'weight'", "in", "k", ")", "and", "(", "len", "(", "v", ".", "shape", ")", ">=", "2", ")", ":", "\n", "            ", "i", "=", "i", "+", "1", "\n", "print", "(", "'decompose layer {}... prune threshold {}'", ".", "format", "(", "i", ",", "opts", "[", "'threshold_list'", "]", "[", "i", "-", "1", "]", ")", ",", "end", "=", "' '", ")", "\n", "if", "v", ".", "data", ".", "is_cuda", ":", "\n", "                ", "w", "=", "v", ".", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "w", "=", "v", ".", "data", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "opts", "[", "'prune_threshold'", "]", "=", "opts", "[", "'threshold_list'", "]", "[", "i", "-", "1", "]", "\n", "wrecon", ",", "layer_decomps", "=", "smart_decompose", "(", "w", ",", "**", "opts", ")", "\n", "wrecon_tensor", "=", "torch", ".", "FloatTensor", "(", "wrecon", ")", "\n", "if", "v", ".", "data", ".", "is_cuda", ":", "\n", "                ", "wrecon_tensor", "=", "wrecon_tensor", ".", "cuda", "(", ")", "\n", "", "v", ".", "data", "=", "wrecon_tensor", "\n", "print", "(", "'done'", ")", "\n", "decomps", "[", "'l%d'", "%", "i", "]", "=", "layer_decomps", "\n", "", "", "return", "decomps", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa.moving_average": [[3, 7], ["zip", "net1.parameters", "net2.parameters"], "function", ["None"], ["def", "moving_average", "(", "net1", ",", "net2", ",", "alpha", "=", "1", ")", ":", "\n", "    ", "for", "param1", ",", "param2", "in", "zip", "(", "net1", ".", "parameters", "(", ")", ",", "net2", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "param1", ".", "data", "*=", "(", "1.0", "-", "alpha", ")", "\n", "param1", ".", "data", "+=", "param2", ".", "data", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa._check_bn": [[8, 11], ["issubclass"], "function", ["None"], ["", "", "def", "_check_bn", "(", "module", ",", "flag", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "flag", "[", "0", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa.check_bn": [[13, 17], ["model.apply", "utils_swa._check_bn"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa._check_bn"], ["", "", "def", "check_bn", "(", "model", ")", ":", "\n", "    ", "flag", "=", "[", "False", "]", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_check_bn", "(", "module", ",", "flag", ")", ")", "\n", "return", "flag", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa.reset_bn": [[19, 23], ["issubclass", "torch.zeros_like", "torch.ones_like"], "function", ["None"], ["", "def", "reset_bn", "(", "module", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "module", ".", "running_mean", ")", "\n", "module", ".", "running_var", "=", "torch", ".", "ones_like", "(", "module", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa._get_momenta": [[25, 28], ["issubclass"], "function", ["None"], ["", "", "def", "_get_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "momenta", "[", "module", "]", "=", "module", ".", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa._set_momenta": [[30, 33], ["issubclass"], "function", ["None"], ["", "", "def", "_set_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "momentum", "=", "momenta", "[", "module", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa.bn_update": [[35, 63], ["model.train", "model.apply", "model.apply", "model.apply", "utils_swa.check_bn", "input.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable.data.size", "momenta.keys", "model", "utils_swa._get_momenta", "utils_swa._set_momenta"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.train", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa.check_bn", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa._get_momenta", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_swa._set_momenta"], ["", "", "def", "bn_update", "(", "loader", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n        BatchNorm buffers update (if any).\n        Performs 1 epochs to estimate buffers average using train dataset.\n        :param loader: train dataset loader for buffers average estimation.\n        :param model: model being update\n        :return: None\n    \"\"\"", "\n", "if", "not", "check_bn", "(", "model", ")", ":", "\n", "        ", "return", "\n", "", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "reset_bn", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "n", "=", "0", "\n", "for", "input", ",", "_", "in", "loader", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "b", "=", "input_var", ".", "data", ".", "size", "(", "0", ")", "\n", "\n", "momentum", "=", "b", "/", "(", "n", "+", "b", ")", "\n", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "momentum", "\n", "\n", "", "model", "(", "input_var", ")", "\n", "n", "+=", "b", "\n", "\n", "", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.BasicBlock.__init__": [[18, 27], ["torch.Module.__init__", "resnet20_shiftadd.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shiftadd.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "quantize_v", "=", "'sbm'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "quantize_v", "=", "quantize_v", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "quantize_v", "=", "quantize_v", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.BasicBlock.forward": [[28, 45], ["resnet20_shiftadd.BasicBlock.conv1", "resnet20_shiftadd.BasicBlock.bn1", "resnet20_shiftadd.BasicBlock.relu", "resnet20_shiftadd.BasicBlock.conv2", "resnet20_shiftadd.BasicBlock.bn2", "resnet20_shiftadd.BasicBlock.relu", "resnet20_shiftadd.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.ResNet.__init__": [[48, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shiftadd.ResNet._make_layer", "resnet20_shiftadd.ResNet._make_layer", "resnet20_shiftadd.ResNet._make_layer", "torch.AvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet20_shiftadd.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "quantize_v", "=", "'sbm'", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "quantize_v", "=", "quantize_v", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.ResNet._make_layer": [[70, 89], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "# shift", "\n", "adder", ".", "Adder2D", "(", "planes", "*", "block", ".", "expansion", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "quantize_v", "=", "self", ".", "quantize_v", ")", ",", "# add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "quantize_v", "=", "self", ".", "quantize_v", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "quantize_v", "=", "self", ".", "quantize_v", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.ResNet.forward": [[90, 103], ["resnet20_shiftadd.ResNet.conv1", "resnet20_shiftadd.ResNet.bn1", "resnet20_shiftadd.ResNet.relu", "resnet20_shiftadd.ResNet.layer1", "resnet20_shiftadd.ResNet.layer2", "resnet20_shiftadd.ResNet.layer3", "resnet20_shiftadd.ResNet.avgpool", "resnet20_shiftadd.ResNet.fc", "resnet20_shiftadd.ResNet.bn2", "resnet20_shiftadd.ResNet.view", "resnet20_shiftadd.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.ResNet_vis.__init__": [[107, 125], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shiftadd.ResNet_vis._make_layer", "resnet20_shiftadd.ResNet_vis._make_layer", "resnet20_shiftadd.ResNet_vis._make_layer", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet20_shiftadd.ResNet_vis.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use linear as fc layer", "\n", "self", ".", "linear_1", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "2", ")", "\n", "self", ".", "linear_2", "=", "nn", ".", "Linear", "(", "2", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.ResNet_vis._make_layer": [[126, 142], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "# shift", "\n", "adder", ".", "Adder2D", "(", "planes", "*", "block", ".", "expansion", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.ResNet_vis.forward": [[143, 157], ["resnet20_shiftadd.ResNet_vis.conv1", "resnet20_shiftadd.ResNet_vis.bn1", "resnet20_shiftadd.ResNet_vis.relu", "resnet20_shiftadd.ResNet_vis.layer1", "resnet20_shiftadd.ResNet_vis.layer2", "resnet20_shiftadd.ResNet_vis.layer3", "resnet20_shiftadd.ResNet_vis.avgpool", "resnet20_shiftadd.ResNet_vis.view", "resnet20_shiftadd.ResNet_vis.linear_1", "resnet20_shiftadd.ResNet_vis.linear_2", "resnet20_shiftadd.ResNet_vis.size", "resnet20_shiftadd.ResNet_vis.view", "resnet20_shiftadd.ResNet_vis.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "self", ".", "linear_1", "(", "x", ")", "\n", "x", "=", "self", ".", "linear_2", "(", "feat", ")", "\n", "return", "feat", ",", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.conv3x3": [[8, 13], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "quantize_v", "=", "'sbm'", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "quantize_v", "=", "quantize_v", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd.resnet20_shiftadd": [[159, 161], ["resnet20_shiftadd.ResNet"], "function", ["None"], ["", "", "def", "resnet20_shiftadd", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.wide_basic.__init__": [[41, 56], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wideres_shift.conv", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wideres_shift.conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "wideres_shift.conv"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "# self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, padding=1, bias=True)", "\n", "self", ".", "conv1", "=", "conv", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride, padding=1, bias=True)", "\n", "self", ".", "conv2", "=", "conv", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True),", "\n", "conv", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.wide_basic.forward": [[58, 67], ["wideres_shift.wide_basic.dropout", "wideres_shift.wide_basic.conv2", "wideres_shift.wide_basic.shortcut", "wideres_shift.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wideres_shift.wide_basic.bn2", "wideres_shift.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(x.shape)", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "# print(out.shape)", "\n", "# print(self.shortcut(x).shape)", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.Wide_ResNet.__init__": [[69, 89], ["torch.Module.__init__", "print", "wideres_shift.conv3x3", "wideres_shift.Wide_ResNet._wide_layer", "wideres_shift.Wide_ResNet._wide_layer", "wideres_shift.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.Wide_ResNet._wide_layer": [[90, 99], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.Wide_ResNet.forward": [[100, 111], ["wideres_shift.Wide_ResNet.conv1", "wideres_shift.Wide_ResNet.layer1", "wideres_shift.Wide_ResNet.layer2", "wideres_shift.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wideres_shift.Wide_ResNet.view", "wideres_shift.Wide_ResNet.linear", "wideres_shift.Wide_ResNet.bn1", "wideres_shift.Wide_ResNet.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.conv3x3": [[14, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# add = adder.Adder2D(out_planes, out_planes, kernel_size=3, stride=1, padding=1, bias=False, quantize=quantize, weight_bits=weight_bits, sparsity=sparsity)", "\n", "# return nn.Sequential(shift, add)", "\n", "return", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.conv": [[21, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "# add = adder.Adder2D(in_planes, out_planes, kernel_size=kernel_size, stride=1, padding=padding, bias=False, quantize=quantize, weight_bits=weight_bits, sparsity=sparsity)", "\n", "# return nn.Sequential(shift, add)", "\n", "return", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.conv_init": [[31, 39], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shift.wideres_shift": [[112, 115], ["wideres_shift.Wide_ResNet"], "function", ["None"], ["", "", "def", "wideres_shift", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "16", ",", "8", ",", "0.3", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.BasicBlock.__init__": [[20, 29], ["torch.Module.__init__", "resnet20_add.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_add.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "quantize_v", "=", "quantize_v", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "quantize_v", "=", "quantize_v", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.BasicBlock.forward": [[30, 47], ["resnet20_add.BasicBlock.conv1", "resnet20_add.BasicBlock.bn1", "resnet20_add.BasicBlock.relu", "resnet20_add.BasicBlock.conv2", "resnet20_add.BasicBlock.bn2", "resnet20_add.BasicBlock.relu", "resnet20_add.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.ResNet.__init__": [[51, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_add.ResNet._make_layer", "resnet20_add.ResNet._make_layer", "resnet20_add.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet20_add.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "quantize_v", "=", "quantize_v", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "\n", "# init (new add)", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# if isinstance(m, adder.Adder2D):", "\n", "#     nn.init.kaiming_normal_(m.adder, mode='fan_out', nonlinearity='relu')", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.ResNet._make_layer": [[78, 95], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "adder", ".", "Adder2D", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ",", "quantize_v", "=", "self", ".", "quantize_v", ")", ",", "# adder.Adder2D", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ",", "quantize_v", "=", "self", ".", "quantize_v", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ",", "quantize_v", "=", "self", ".", "quantize_v", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.ResNet.forward": [[96, 110], ["resnet20_add.ResNet.conv1", "resnet20_add.ResNet.bn1", "resnet20_add.ResNet.relu", "resnet20_add.ResNet.layer1", "resnet20_add.ResNet.layer2", "resnet20_add.ResNet.layer3", "resnet20_add.ResNet.avgpool", "print", "resnet20_add.ResNet.fc", "resnet20_add.ResNet.bn2", "resnet20_add.ResNet.view", "resnet20_add.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.ResNet_vis.__init__": [[113, 135], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_add.ResNet_vis._make_layer", "resnet20_add.ResNet_vis._make_layer", "resnet20_add.ResNet_vis._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet20_add.ResNet_vis.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc_1", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "2", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Linear", "(", "2", ",", "num_classes", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.ResNet_vis._make_layer": [[136, 153], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "adder", ".", "Adder2D", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# adder.Adder2D", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.ResNet_vis.forward": [[154, 169], ["resnet20_add.ResNet_vis.conv1", "resnet20_add.ResNet_vis.bn1", "resnet20_add.ResNet_vis.relu", "resnet20_add.ResNet_vis.layer1", "resnet20_add.ResNet_vis.layer2", "resnet20_add.ResNet_vis.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "resnet20_add.ResNet_vis.view", "resnet20_add.ResNet_vis.fc_1", "resnet20_add.ResNet_vis.fc_2", "resnet20_add.ResNet_vis.view", "resnet20_add.ResNet_vis.size", "resnet20_add.ResNet_vis.size", "resnet20_add.ResNet_vis.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.LeNet_vis.__init__": [[172, 189], ["torch.Module.__init__", "adder.adder.adder.Adder2D", "torch.PReLU", "torch.PReLU", "adder.adder.adder.Adder2D", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LeNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "adder", ".", "Adder2D", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv1_2", "=", "adder", ".", "Adder2D", "(", "32", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_2", "=", "nn", ".", "PReLU", "(", ")", "\n", "# self.conv2_1 = adder.Adder2D(32, 64, kernel_size=5, padding=2)", "\n", "# self.prelu2_1 = nn.PReLU()", "\n", "# self.conv2_2 = adder.Adder2D(64, 64, kernel_size=5, padding=2)", "\n", "# self.prelu2_2 = nn.PReLU()", "\n", "# self.conv3_1 = adder.Adder2D(64, 128, kernel_size=5, padding=2)", "\n", "# self.prelu3_1 = nn.PReLU()", "\n", "# self.conv3_2 = adder.Adder2D(128, 128, kernel_size=5, padding=2)", "\n", "# self.prelu3_2 = nn.PReLU()", "\n", "self", ".", "preluip1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "ip1", "=", "nn", ".", "Linear", "(", "32", "*", "3", "*", "3", ",", "2", ")", "\n", "self", ".", "ip2", "=", "nn", ".", "Linear", "(", "2", ",", "10", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.LeNet_vis.forward": [[190, 205], ["resnet20_add.LeNet_vis.prelu1_1", "resnet20_add.LeNet_vis.prelu1_2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "x.view.view.view", "resnet20_add.LeNet_vis.preluip1", "resnet20_add.LeNet_vis.ip2", "resnet20_add.LeNet_vis.conv1_1", "resnet20_add.LeNet_vis.conv1_2", "resnet20_add.LeNet_vis.ip1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prelu1_1", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prelu1_2", "(", "self", ".", "conv1_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# x = self.prelu2_1(self.conv2_1(x))", "\n", "# x = self.prelu2_2(self.conv2_2(x))", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# x = self.prelu3_1(self.conv3_1(x))", "\n", "# x = self.prelu3_2(self.conv3_2(x))", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "32", "*", "3", "*", "3", ")", "\n", "ip1", "=", "self", ".", "preluip1", "(", "self", ".", "ip1", "(", "x", ")", ")", "\n", "ip2", "=", "self", ".", "ip2", "(", "ip1", ")", "\n", "# return ip1, F.log_softmax(ip2, dim=1)", "\n", "return", "ip1", ",", "ip2", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.conv3x3": [[11, 15], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "quantize_v", "=", "quantize_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.resnet20_add": [[207, 211], ["print", "resnet20_add.ResNet"], "function", ["None"], ["", "", "def", "resnet20_add", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "quantize", ",", "sparsity", ")", "\n", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "quantize_v", "=", "quantize_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.resnet20_add_vis": [[212, 215], ["resnet20_add.ResNet_vis"], "function", ["None"], ["", "def", "resnet20_add_vis", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet_vis", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add.LeNet_add_vis": [[216, 218], ["resnet20_add.LeNet_vis"], "function", ["None"], ["", "def", "LeNet_add_vis", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "LeNet_vis", "(", "num_classes", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.BasicBlock.__init__": [[20, 29], ["torch.Module.__init__", "resnet20_shiftadd_se.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_shiftadd_se.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.BasicBlock.forward": [[30, 47], ["resnet20_shiftadd_se.BasicBlock.conv1", "resnet20_shiftadd_se.BasicBlock.bn1", "resnet20_shiftadd_se.BasicBlock.relu", "resnet20_shiftadd_se.BasicBlock.conv2", "resnet20_shiftadd_se.BasicBlock.bn2", "resnet20_shiftadd_se.BasicBlock.relu", "resnet20_shiftadd_se.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.ResNet.__init__": [[50, 82], ["torch.Module.__init__", "se_shift.SEConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_shiftadd_se.ResNet._make_layer", "resnet20_shiftadd_se.ResNet._make_layer", "resnet20_shiftadd_se.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "se_shift.SEConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet20_shiftadd_se.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "# self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1", "=", "SEConv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "# self.fc = nn.Conv2d(64 * block.expansion, num_classes, 1, bias=False)", "\n", "self", ".", "fc", "=", "SEConv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "# for m in self.modules():", "\n", "#     if isinstance(m, nn.BatchNorm2d):", "\n", "#         m.weight.data.fill_(1)", "\n", "#         m.bias.data.zero_()", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# if isinstance(m, adder.Adder2D):", "\n", "#     nn.init.kaiming_normal_(m.adder, mode='fan_out', nonlinearity='relu')", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.ResNet._make_layer": [[83, 104], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "se_shift.SEConv2d", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "SEConv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ")", ",", "# shift", "\n", "adder", ".", "Adder2D", "(", "planes", "*", "block", ".", "expansion", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "\n", "distribution", "=", "self", ".", "distribution", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.ResNet.forward": [[105, 118], ["resnet20_shiftadd_se.ResNet.conv1", "resnet20_shiftadd_se.ResNet.bn1", "resnet20_shiftadd_se.ResNet.relu", "resnet20_shiftadd_se.ResNet.layer1", "resnet20_shiftadd_se.ResNet.layer2", "resnet20_shiftadd_se.ResNet.layer3", "resnet20_shiftadd_se.ResNet.avgpool", "resnet20_shiftadd_se.ResNet.fc", "resnet20_shiftadd_se.ResNet.bn2", "resnet20_shiftadd_se.ResNet.view", "resnet20_shiftadd_se.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.ResNet_vis.__init__": [[121, 147], ["torch.Module.__init__", "se_shift.SEConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_shiftadd_se.ResNet_vis._make_layer", "resnet20_shiftadd_se.ResNet_vis._make_layer", "resnet20_shiftadd_se.ResNet_vis._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet20_shiftadd_se.ResNet_vis.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "# self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1", "=", "SEConv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "# self.fc = nn.Conv2d(64 * block.expansion, num_classes, 1, bias=False)", "\n", "self", ".", "fc_1", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "2", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Linear", "(", "2", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.ResNet_vis._make_layer": [[148, 169], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "se_shift.SEConv2d", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "SEConv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ")", ",", "# shift", "\n", "adder", ".", "Adder2D", "(", "planes", "*", "block", ".", "expansion", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "\n", "distribution", "=", "self", ".", "distribution", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.ResNet_vis.forward": [[170, 185], ["resnet20_shiftadd_se.ResNet_vis.conv1", "resnet20_shiftadd_se.ResNet_vis.bn1", "resnet20_shiftadd_se.ResNet_vis.relu", "resnet20_shiftadd_se.ResNet_vis.layer1", "resnet20_shiftadd_se.ResNet_vis.layer2", "resnet20_shiftadd_se.ResNet_vis.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "resnet20_shiftadd_se.ResNet_vis.view", "resnet20_shiftadd_se.ResNet_vis.fc_1", "resnet20_shiftadd_se.ResNet_vis.fc_2", "resnet20_shiftadd_se.ResNet_vis.view", "resnet20_shiftadd_se.ResNet_vis.size", "resnet20_shiftadd_se.ResNet_vis.size", "resnet20_shiftadd_se.ResNet_vis.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.conv3x3": [[10, 15], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.resnet20_shiftadd_se": [[186, 188], ["resnet20_shiftadd_se.ResNet"], "function", ["None"], ["", "", "def", "resnet20_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se.resnet20_shiftadd_se_vis": [[189, 191], ["resnet20_shiftadd_se.ResNet_vis"], "function", ["None"], ["", "def", "resnet20_shiftadd_se_vis", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet_vis", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.VGG.__init__": [[28, 52], ["torch.Module.__init__", "cls_layers.append", "torch.Sequential", "torch.Sequential", "vgg_shift.VGG.modules", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "torch.Linear", "torch.Linear", "isinstance", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "cls_layers.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "m.weight.data.normal_", "torch.Dropout", "torch.Dropout", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ",", "dropout", "=", "True", ",", "small", "=", "False", ",", "supersmall", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "cls_layers", "=", "[", "]", "\n", "if", "dropout", "or", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "if", "not", "(", "small", "or", "supersmall", ")", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout", ":", "\n", "                ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "", "if", "not", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "cls_layers", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.VGG.forward": [[54, 59], ["vgg_shift.VGG.features", "vgg_shift.VGG.view", "vgg_shift.VGG.classifier", "vgg_shift.VGG.size"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.conv3x3": [[15, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# add = adder.Adder2D(in_planes, out_planes, kernel_size=3, stride=1, padding=1, bias=False, quantize=quantize, weight_bits=weight_bits, sparsity=sparsity)", "\n", "# return nn.Sequential(shift, add)", "\n", "return", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.make_layers": [[61, 76], ["torch.Sequential", "vgg_shift.conv3x3", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["", "", "def", "make_layers", "(", "cfg", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "batch_norm", "=", "True", ",", "quantize_v", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "# conv2d = nn.Conv2d(in_channels, v, kernel_size=3, padding=1)", "\n", "            ", "conv2d", "=", "conv3x3", "(", "in_channels", ",", "v", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg11": [[87, 90], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg11_nd": [[91, 94], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg11_nd_s": [[95, 98], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg11_nd_ss": [[99, 102], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg11_bn": [[104, 107], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg13": [[109, 112], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg13_nd": [[113, 116], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg13_nd_s": [[117, 120], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg13_nd_ss": [[121, 124], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg13_bn": [[126, 129], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg16": [[131, 134], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg16_nd": [[135, 138], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg16_nd_s": [[139, 142], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg16_nd_ss": [[143, 146], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg16_bn": [[148, 151], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg19": [[153, 156], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg19_nd": [[157, 160], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg19_small_shift": [[161, 165], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_small_shift", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "**", "kwargs", ")", ",", "\n", "num_classes", "=", "num_classes", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg19_nd_ss": [[166, 169], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shift.vgg19_bn": [[172, 175], ["vgg_shift.VGG", "vgg_shift.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.VGG.__init__": [[27, 50], ["torch.Module.__init__", "cls_layers.append", "torch.Sequential", "torch.Sequential", "vgg_mult_cuda.VGG.modules", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "torch.Linear", "torch.Linear", "isinstance", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "cls_layers.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "m.weight.data.normal_", "m.bias.data.zero_", "torch.Dropout", "torch.Dropout", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ",", "dropout", "=", "True", ",", "small", "=", "False", ",", "supersmall", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "cls_layers", "=", "[", "]", "\n", "if", "dropout", "or", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "if", "not", "(", "small", "or", "supersmall", ")", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout", ":", "\n", "                ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "", "if", "not", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "cls_layers", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.VGG.forward": [[52, 57], ["vgg_mult_cuda.VGG.features", "vgg_mult_cuda.VGG.view", "vgg_mult_cuda.VGG.classifier", "vgg_mult_cuda.VGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.conv3x3": [[17, 20], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.make_layers": [[59, 74], ["torch.Sequential", "vgg_mult_cuda.conv3x3", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "True", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "# conv2d = nn.Conv2d(in_channels, v, kernel_size=3, padding=1)", "\n", "            ", "conv2d", "=", "conv3x3", "(", "in_channels", ",", "v", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg11": [[85, 88], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg11_nd": [[89, 92], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg11_nd_s": [[93, 96], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg11_nd_ss": [[97, 100], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg11_bn": [[102, 105], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg13": [[107, 110], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg13_nd": [[111, 114], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg13_nd_s": [[115, 118], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg13_nd_ss": [[119, 122], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg13_bn": [[124, 127], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg16": [[129, 132], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg16_nd": [[133, 136], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg16_nd_s": [[137, 140], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg16_nd_ss": [[141, 144], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg16_bn": [[146, 149], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg19": [[151, 154], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg19_nd": [[155, 158], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg19_small_mult_cuda": [[159, 162], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_small_mult_cuda", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "num_classes", "=", "num_classes", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg19_nd_ss": [[163, 166], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult_cuda.vgg19_bn": [[169, 172], ["vgg_mult_cuda.VGG", "vgg_mult_cuda.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd.Bottleneck.__init__": [[27, 39], ["torch.Module.__init__", "resnet50_shiftadd.conv1x1", "torch.BatchNorm2d", "resnet50_shiftadd.conv3x3", "torch.BatchNorm2d", "resnet50_shiftadd.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd.Bottleneck.forward": [[40, 61], ["resnet50_shiftadd.Bottleneck.conv1", "resnet50_shiftadd.Bottleneck.bn1", "resnet50_shiftadd.Bottleneck.relu", "resnet50_shiftadd.Bottleneck.conv2", "resnet50_shiftadd.Bottleneck.bn2", "resnet50_shiftadd.Bottleneck.relu", "resnet50_shiftadd.Bottleneck.conv3", "resnet50_shiftadd.Bottleneck.bn3", "resnet50_shiftadd.Bottleneck.relu", "resnet50_shiftadd.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd.ResNet.__init__": [[65, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "resnet50_shiftadd.ResNet._make_layer", "resnet50_shiftadd.ResNet._make_layer", "resnet50_shiftadd.ResNet._make_layer", "resnet50_shiftadd.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet50_shiftadd.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd.ResNet._make_layer": [[92, 110], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet50_shiftadd.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd.ResNet.forward": [[111, 127], ["resnet50_shiftadd.ResNet.conv1", "resnet50_shiftadd.ResNet.bn1", "resnet50_shiftadd.ResNet.relu", "resnet50_shiftadd.ResNet.maxpool", "resnet50_shiftadd.ResNet.layer1", "resnet50_shiftadd.ResNet.layer2", "resnet50_shiftadd.ResNet.layer3", "resnet50_shiftadd.ResNet.layer4", "resnet50_shiftadd.ResNet.avgpool", "resnet50_shiftadd.ResNet.fc", "resnet50_shiftadd.ResNet.bn2", "resnet50_shiftadd.ResNet.view", "resnet50_shiftadd.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd.conv3x3": [[10, 15], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd.conv1x1": [[17, 22], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd.resnet50_shiftadd": [[130, 133], ["resnet50_shiftadd.ResNet"], "function", ["None"], ["", "", "def", "resnet50_shiftadd", "(", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_normaladd_se.BasicBlock.__init__": [[20, 29], ["torch.Module.__init__", "resnet20_normaladd_se.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_normaladd_se.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_normaladd_se.BasicBlock.forward": [[30, 47], ["resnet20_normaladd_se.BasicBlock.conv1", "resnet20_normaladd_se.BasicBlock.bn1", "resnet20_normaladd_se.BasicBlock.relu", "resnet20_normaladd_se.BasicBlock.conv2", "resnet20_normaladd_se.BasicBlock.bn2", "resnet20_normaladd_se.BasicBlock.relu", "resnet20_normaladd_se.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_normaladd_se.ResNet.__init__": [[50, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_normaladd_se.ResNet._make_layer", "resnet20_normaladd_se.ResNet._make_layer", "resnet20_normaladd_se.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet20_normaladd_se.ResNet.modules", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.kaiming_normal_", "torch.kaiming_normal_", "print", "torch._calculate_fan_in_and_fan_out", "torch._calculate_fan_in_and_fan_out", "torch.uniform_", "torch.uniform_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# self.conv1 = SEConv2d(3, 16, kernel_size=3, stride=1, padding=1, bias=False, threshold=threshold, sign_threshold=sign_threshold)", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "# self.fc = SEConv2d(64 * block.expansion, num_classes, 1, bias=False, threshold=threshold, sign_threshold=sign_threshold)", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'use bias'", ")", "\n", "fan_in", ",", "_", "=", "init", ".", "_calculate_fan_in_and_fan_out", "(", "m", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "init", ".", "uniform_", "(", "m", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_normaladd_se.ResNet._make_layer": [[83, 103], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "# normal", "\n", "adder", ".", "Adder2D", "(", "planes", "*", "block", ".", "expansion", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ")", ",", "# add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "\n", "distribution", "=", "self", ".", "distribution", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_normaladd_se.ResNet.forward": [[104, 117], ["resnet20_normaladd_se.ResNet.conv1", "resnet20_normaladd_se.ResNet.bn1", "resnet20_normaladd_se.ResNet.relu", "resnet20_normaladd_se.ResNet.layer1", "resnet20_normaladd_se.ResNet.layer2", "resnet20_normaladd_se.ResNet.layer3", "resnet20_normaladd_se.ResNet.avgpool", "resnet20_normaladd_se.ResNet.fc", "resnet20_normaladd_se.ResNet.bn2", "resnet20_normaladd_se.ResNet.view", "resnet20_normaladd_se.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_normaladd_se.conv3x3": [[10, 15], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "normal", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ")", "\n", "return", "nn", ".", "Sequential", "(", "normal", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_normaladd_se.resnet20_normaladd_se": [[119, 121], ["resnet20_normaladd_se.ResNet"], "function", ["None"], ["", "", "def", "resnet20_normaladd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd_se.Bottleneck.__init__": [[28, 40], ["torch.Module.__init__", "resnet50_shiftadd_se.conv1x1", "torch.BatchNorm2d", "resnet50_shiftadd_se.conv3x3", "torch.BatchNorm2d", "resnet50_shiftadd_se.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd_se.Bottleneck.forward": [[41, 62], ["resnet50_shiftadd_se.Bottleneck.conv1", "resnet50_shiftadd_se.Bottleneck.bn1", "resnet50_shiftadd_se.Bottleneck.relu", "resnet50_shiftadd_se.Bottleneck.conv2", "resnet50_shiftadd_se.Bottleneck.bn2", "resnet50_shiftadd_se.Bottleneck.relu", "resnet50_shiftadd_se.Bottleneck.conv3", "resnet50_shiftadd_se.Bottleneck.bn3", "resnet50_shiftadd_se.Bottleneck.relu", "resnet50_shiftadd_se.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd_se.ResNet.__init__": [[66, 94], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "resnet50_shiftadd_se.ResNet._make_layer", "resnet50_shiftadd_se.ResNet._make_layer", "resnet50_shiftadd_se.ResNet._make_layer", "resnet50_shiftadd_se.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet50_shiftadd_se.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd_se.ResNet._make_layer": [[96, 117], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet50_shiftadd_se.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "stride", "=", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd_se.ResNet.forward": [[118, 134], ["resnet50_shiftadd_se.ResNet.conv1", "resnet50_shiftadd_se.ResNet.bn1", "resnet50_shiftadd_se.ResNet.relu", "resnet50_shiftadd_se.ResNet.maxpool", "resnet50_shiftadd_se.ResNet.layer1", "resnet50_shiftadd_se.ResNet.layer2", "resnet50_shiftadd_se.ResNet.layer3", "resnet50_shiftadd_se.ResNet.layer4", "resnet50_shiftadd_se.ResNet.avgpool", "resnet50_shiftadd_se.ResNet.fc", "resnet50_shiftadd_se.ResNet.bn2", "resnet50_shiftadd_se.ResNet.view", "resnet50_shiftadd_se.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd_se.conv3x3": [[11, 16], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd_se.conv1x1": [[18, 23], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50_shiftadd_se.resnet50_shiftadd_se": [[137, 140], ["resnet50_shiftadd_se.ResNet"], "function", ["None"], ["", "", "def", "resnet50_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.Mult2D.__init__": [[22, 58], ["torch.Module.__init__", "adder.adder.quantize.QuantMeasure", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "vgg_mult.Mult2D.s.data.uniform_", "vgg_mult.Mult2D.register_buffer", "vgg_mult.Mult2D.set_mask", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "vgg_mult.Mult2D.weight.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_channel", ",", "\n", "output_channel", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "Mult2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "input_channel", "=", "input_channel", "\n", "self", ".", "output_channel", "=", "output_channel", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "quantize_input_fw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "qweight", "=", "None", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros", "(", "output_channel", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "self", ".", "s", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'weight_mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "weight", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.Mult2D.forward": [[59, 86], ["vgg_mult.Mult2D.quantize_input_fw", "adder.adder.quantize.calculate_qparams", "adder.adder.quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "adder.adder.quantize.quantize_grad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "vgg_mult.Mult2D.b.unsqueeze().unsqueeze().unsqueeze", "vgg_mult.Mult2D.b.unsqueeze().unsqueeze", "vgg_mult.Mult2D.b.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "# apply mask", "\n", "            ", "self", ".", "weight", ".", "data", "=", "self", ".", "weight", ".", "data", "*", "self", ".", "weight_mask", ".", "data", "\n", "\n", "", "if", "self", ".", "quantize", "==", "True", ":", "\n", "# quantization v2", "\n", "            ", "input_q", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "self", ".", "weight_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "self", ".", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "bias_fixed_point", "=", "None", "\n", "output", "=", "F", ".", "conv2d", "(", "input_q", ",", "\n", "self", ".", "qweight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "\n", "self", ".", "weight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.Mult2D.round_weight_each_step": [[87, 110], ["adder.adder.quantize.calculate_qparams", "adder.adder.quantize.quantize", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "torch.unique.size", "torch.unique.size", "torch.unique.size", "torch.unique.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize"], ["", "def", "round_weight_each_step", "(", "self", ",", "weight", ",", "bits", "=", "16", ")", ":", "\n", "# print('before quantize: ', input)", "\n", "# quantization v1", "\n", "# if bits == 1:", "\n", "#     return torch.sign(weight)", "\n", "# S = 2. ** (bits - 1)", "\n", "# if bits > 15 or bits == 1:", "\n", "#   delta = 0", "\n", "# else:", "\n", "#   delta = 1. / S", "\n", "# max_val = 1 - delta", "\n", "# min_val = delta - 1", "\n", "\n", "# weight_clamp = torch.clamp(weight, min_val, max_val)", "\n", "# qweight = torch.round(weight_clamp * S) / S", "\n", "# print('after quantize: ', input_round)", "\n", "\n", "# quantization v2", "\n", "        ", "weight_qparams", "=", "calculate_qparams", "(", "weight", ",", "num_bits", "=", "bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "weight_unique", "=", "torch", ".", "unique", "(", "qweight", "[", "0", "]", ")", "\n", "print", "(", "'add weight range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "return", "qweight", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.Mult2D.set_mask": [[111, 115], ["None"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ")", ":", "\n", "# random fix zero", "\n", "        ", "self", ".", "weight_mask", ".", "data", "=", "(", "self", ".", "s", ">", "self", ".", "sparsity", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "weight_mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.VGG.__init__": [[126, 159], ["torch.Module.__init__", "cls_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vgg_mult.VGG.modules", "vgg_mult.VGG.modules", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "isinstance", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "cls_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "m.weight.data.normal_", "m.bias.data.zero_", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ",", "dropout", "=", "True", ",", "small", "=", "False", ",", "supersmall", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "cls_layers", "=", "[", "]", "\n", "if", "dropout", "or", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "if", "not", "(", "small", "or", "supersmall", ")", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout", ":", "\n", "                ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "", "if", "not", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "cls_layers", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "Mult2D", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "*", "m", ".", "kernel_size", "*", "m", ".", "output_channel", "\n", "# m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "# m.bias.data.zero_()", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.VGG.forward": [[161, 169], ["vgg_mult.VGG.features", "vgg_mult.VGG.view", "vgg_mult.VGG.classifier", "vgg_mult.VGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "# for conv in self.features:", "\n", "#     x = conv(x)", "\n", "#     print(x.shape)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.conv3x3": [[116, 120], ["vgg_mult.Mult2D"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "Mult2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.make_layers": [[171, 186], ["torch.Sequential", "vgg_mult.conv3x3", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["", "", "def", "make_layers", "(", "cfg", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ",", "batch_norm", "=", "True", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "# conv2d = nn.Conv2d(in_channels, v, kernel_size=3, padding=1)", "\n", "            ", "conv2d", "=", "conv3x3", "(", "in_channels", ",", "v", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.Conv6": [[197, 199], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["def", "Conv6", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'6'", "]", ",", "**", "kwargs", ")", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg11": [[200, 203], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg11_nd": [[204, 207], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg11_nd_s": [[208, 211], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg11_nd_ss": [[212, 215], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg11_bn": [[217, 220], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg13": [[222, 225], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg13_nd": [[226, 229], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg13_nd_s": [[230, 233], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg13_nd_ss": [[234, 237], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg13_bn": [[239, 242], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg16": [[244, 247], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg16_nd": [[248, 251], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg16_nd_s": [[252, 255], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg16_nd_ss": [[256, 259], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg16_bn": [[261, 264], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg19": [[266, 269], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg19_nd": [[270, 273], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg19_small_mult": [[274, 277], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_small_mult", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "num_classes", "=", "num_classes", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg19_nd_ss": [[278, 281], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_mult.vgg19_bn": [[284, 287], ["vgg_mult.VGG", "vgg_mult.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.wide_basic.__init__": [[40, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wideres_add.conv", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wideres_add.conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "wideres_add.conv"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "# self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, padding=1, bias=True)", "\n", "self", ".", "conv1", "=", "conv", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride, padding=1, bias=True)", "\n", "self", ".", "conv2", "=", "conv", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True),", "\n", "conv", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.wide_basic.forward": [[57, 66], ["wideres_add.wide_basic.dropout", "wideres_add.wide_basic.conv2", "wideres_add.wide_basic.shortcut", "wideres_add.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wideres_add.wide_basic.bn2", "wideres_add.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(x.shape)", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "# print(out.shape)", "\n", "# print(self.shortcut(x).shape)", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.Wide_ResNet.__init__": [[68, 88], ["torch.Module.__init__", "print", "wideres_add.init_conv3x3", "wideres_add.Wide_ResNet._wide_layer", "wideres_add.Wide_ResNet._wide_layer", "wideres_add.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.init_conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "init_conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.Wide_ResNet._wide_layer": [[89, 98], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.Wide_ResNet.forward": [[99, 110], ["wideres_add.Wide_ResNet.conv1", "wideres_add.Wide_ResNet.layer1", "wideres_add.Wide_ResNet.layer2", "wideres_add.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wideres_add.Wide_ResNet.view", "wideres_add.Wide_ResNet.linear", "wideres_add.Wide_ResNet.bn1", "wideres_add.Wide_ResNet.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.init_conv3x3": [[14, 16], ["torch.Conv2d"], "function", ["None"], ["def", "init_conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.conv3x3": [[17, 21], ["adder.adder.Adder2D"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.conv": [[22, 26], ["adder.adder.Adder2D"], "function", ["None"], ["", "def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.conv_init": [[30, 38], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_add.wideres_add": [[111, 114], ["wideres_add.Wide_ResNet"], "function", ["None"], ["", "", "def", "wideres_add", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "16", ",", "8", ",", "0.3", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_add.BasicBlock.__init__": [[20, 29], ["torch.Module.__init__", "resnet110_add.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet110_add.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_add.BasicBlock.forward": [[30, 47], ["resnet110_add.BasicBlock.conv1", "resnet110_add.BasicBlock.bn1", "resnet110_add.BasicBlock.relu", "resnet110_add.BasicBlock.conv2", "resnet110_add.BasicBlock.bn2", "resnet110_add.BasicBlock.relu", "resnet110_add.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_add.ResNet.__init__": [[51, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet110_add.ResNet._make_layer", "resnet110_add.ResNet._make_layer", "resnet110_add.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet110_add.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_add.ResNet._make_layer": [[74, 91], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "adder", ".", "Adder2D", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# adder.Adder2D", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_add.ResNet.forward": [[92, 105], ["resnet110_add.ResNet.conv1", "resnet110_add.ResNet.bn1", "resnet110_add.ResNet.relu", "resnet110_add.ResNet.layer1", "resnet110_add.ResNet.layer2", "resnet110_add.ResNet.layer3", "resnet110_add.ResNet.avgpool", "resnet110_add.ResNet.fc", "resnet110_add.ResNet.bn2", "resnet110_add.ResNet.view", "resnet110_add.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_add.conv3x3": [[11, 15], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_add.resnet110_add": [[107, 110], ["resnet110_add.ResNet"], "function", ["None"], ["", "", "def", "resnet110_add", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.LambdaLayer.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.LambdaLayer.forward": [[21, 23], ["resnet.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.Mult2D.__init__": [[27, 63], ["torch.Module.__init__", "adder.quantize.QuantMeasure", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "resnet.Mult2D.s.data.uniform_", "resnet.Mult2D.register_buffer", "resnet.Mult2D.set_mask", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "resnet.Mult2D.weight.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_channel", ",", "\n", "output_channel", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "Mult2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "input_channel", "=", "input_channel", "\n", "self", ".", "output_channel", "=", "output_channel", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "quantize_input_fw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "qweight", "=", "None", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros", "(", "output_channel", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "self", ".", "s", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'weight_mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "weight", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.Mult2D.forward": [[64, 94], ["print", "print", "resnet.Mult2D.quantize_input_fw", "adder.quantize.calculate_qparams", "adder.quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "adder.quantize.quantize_grad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "print", "resnet.Mult2D.b.unsqueeze().unsqueeze().unsqueeze", "resnet.Mult2D.b.unsqueeze().unsqueeze", "resnet.Mult2D.b.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "print", "(", "'?'", ")", "\n", "# apply mask", "\n", "self", ".", "weight", ".", "data", "=", "self", ".", "weight", ".", "data", "*", "self", ".", "weight_mask", ".", "data", "\n", "\n", "", "if", "self", ".", "quantize", "==", "True", ":", "\n", "# quantization v2", "\n", "            ", "print", "(", "'?'", ")", "\n", "input_q", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "self", ".", "weight_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "self", ".", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "bias_fixed_point", "=", "None", "\n", "output", "=", "F", ".", "conv2d", "(", "input_q", ",", "\n", "self", ".", "qweight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "\n", "self", ".", "weight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "print", "(", "'?'", ")", "\n", "output", "+=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.Mult2D.round_weight_each_step": [[95, 118], ["adder.quantize.calculate_qparams", "adder.quantize.quantize", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "torch.unique.size", "torch.unique.size", "torch.unique.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize"], ["", "def", "round_weight_each_step", "(", "self", ",", "weight", ",", "bits", "=", "16", ")", ":", "\n", "# print('before quantize: ', input)", "\n", "# quantization v1", "\n", "# if bits == 1:", "\n", "#     return torch.sign(weight)", "\n", "# S = 2. ** (bits - 1)", "\n", "# if bits > 15 or bits == 1:", "\n", "#   delta = 0", "\n", "# else:", "\n", "#   delta = 1. / S", "\n", "# max_val = 1 - delta", "\n", "# min_val = delta - 1", "\n", "\n", "# weight_clamp = torch.clamp(weight, min_val, max_val)", "\n", "# qweight = torch.round(weight_clamp * S) / S", "\n", "# print('after quantize: ', input_round)", "\n", "\n", "# quantization v2", "\n", "        ", "weight_qparams", "=", "calculate_qparams", "(", "weight", ",", "num_bits", "=", "bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "weight_unique", "=", "torch", ".", "unique", "(", "qweight", "[", "0", "]", ")", "\n", "print", "(", "'add weight range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "return", "qweight", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.Mult2D.set_mask": [[119, 123], ["None"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ")", ":", "\n", "# random fix zero", "\n", "        ", "self", ".", "weight_mask", ".", "data", "=", "(", "self", ".", "s", ">", "self", ".", "sparsity", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "weight_mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.BasicBlock.__init__": [[17, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n", "\n", "", "", "class", "Mult2D", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "input_channel", ",", "\n", "output_channel", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "Mult2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "input_channel", "=", "input_channel", "\n", "self", ".", "output_channel", "=", "output_channel", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.BasicBlock.forward": [[41, 47], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "quantize_input_fw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.Bottleneck.__init__": [[52, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros", "(", "output_channel", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "self", ".", "s", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'weight_mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "weight", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "print", "(", "'?'", ")", "\n", "# apply mask", "\n", "self", ".", "weight", ".", "data", "=", "self", ".", "weight", ".", "data", "*", "self", ".", "weight_mask", ".", "data", "\n", "\n", "", "if", "self", ".", "quantize", "==", "True", ":", "\n", "# quantization v2", "\n", "            ", "print", "(", "'?'", ")", "\n", "input_q", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "self", ".", "weight_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "self", ".", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "bias_fixed_point", "=", "None", "\n", "output", "=", "F", ".", "conv2d", "(", "input_q", ",", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.Bottleneck.forward": [[78, 85], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["self", ".", "qweight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "\n", "self", ".", "weight", ",", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet.__init__": [[88, 100], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["self", ".", "padding", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "print", "(", "'?'", ")", "\n", "output", "+=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "", "return", "output", "\n", "\n", "", "def", "round_weight_each_step", "(", "self", ",", "weight", ",", "bits", "=", "16", ")", ":", "\n", "# print('before quantize: ', input)", "\n", "# quantization v1", "\n", "# if bits == 1:", "\n", "#     return torch.sign(weight)", "\n", "# S = 2. ** (bits - 1)", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet._make_layer": [[101, 108], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["# if bits > 15 or bits == 1:", "\n", "#   delta = 0", "\n", "# else:", "\n", "#   delta = 1. / S", "\n", "# max_val = 1 - delta", "\n", "# min_val = delta - 1", "\n", "\n", "# weight_clamp = torch.clamp(weight, min_val, max_val)", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet.forward": [[109, 119], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["# qweight = torch.round(weight_clamp * S) / S", "\n", "# print('after quantize: ', input_round)", "\n", "\n", "# quantization v2", "\n", "        ", "weight_qparams", "=", "calculate_qparams", "(", "weight", ",", "num_bits", "=", "bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "weight_unique", "=", "torch", ".", "unique", "(", "qweight", "[", "0", "]", ")", "\n", "print", "(", "'add weight range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "return", "qweight", "\n", "\n", "", "def", "set_mask", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.conv3x3": [[125, 129], ["resnet.Mult2D"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "Mult2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet20": [[263, 266], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet32": [[267, 269], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet44": [[270, 272], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet56": [[273, 275], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet110": [[276, 278], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet1202": [[279, 281], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet18": [[285, 287], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet34": [[288, 290], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet50": [[291, 293], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet101": [[294, 296], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.resnet152": [[297, 299], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.test": [[141, 145], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet18"], ["self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            "]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.wide_basic.__init__": [[42, 57], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wideres_shiftadd_se.conv", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wideres_shiftadd_se.conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "wideres_shiftadd_se.conv"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "# self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, padding=1, bias=True)", "\n", "self", ".", "conv1", "=", "conv", "(", "in_planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride, padding=1, bias=True)", "\n", "self", ".", "conv2", "=", "conv", "(", "planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True),", "\n", "conv", "(", "in_planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.wide_basic.forward": [[59, 68], ["wideres_shiftadd_se.wide_basic.dropout", "wideres_shiftadd_se.wide_basic.conv2", "wideres_shiftadd_se.wide_basic.shortcut", "wideres_shiftadd_se.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wideres_shiftadd_se.wide_basic.bn2", "wideres_shiftadd_se.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(x.shape)", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "# print(out.shape)", "\n", "# print(self.shortcut(x).shape)", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.Wide_ResNet.__init__": [[70, 93], ["torch.Module.__init__", "print", "wideres_shiftadd_se.init_conv3x3", "wideres_shiftadd_se.Wide_ResNet._wide_layer", "wideres_shiftadd_se.Wide_ResNet._wide_layer", "wideres_shiftadd_se.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.init_conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "init_conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.Wide_ResNet._wide_layer": [[94, 105], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "stride", "=", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.Wide_ResNet.forward": [[106, 117], ["wideres_shiftadd_se.Wide_ResNet.conv1", "wideres_shiftadd_se.Wide_ResNet.layer1", "wideres_shiftadd_se.Wide_ResNet.layer2", "wideres_shiftadd_se.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wideres_shiftadd_se.Wide_ResNet.view", "wideres_shiftadd_se.Wide_ResNet.linear", "wideres_shiftadd_se.Wide_ResNet.bn1", "wideres_shiftadd_se.Wide_ResNet.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.init_conv3x3": [[14, 16], ["torch.Conv2d"], "function", ["None"], ["def", "init_conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.conv3x3": [[17, 22], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.conv": [[23, 28], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["", "def", "conv", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.conv_init": [[32, 40], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd_se.wideres_shiftadd_se": [[118, 121], ["wideres_shiftadd_se.Wide_ResNet"], "function", ["None"], ["", "", "def", "wideres_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "16", ",", "8", ",", "0.3", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.VGG.__init__": [[27, 50], ["torch.Module.__init__", "cls_layers.append", "torch.Sequential", "torch.Sequential", "vgg_shiftadd_se.VGG.modules", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "torch.Linear", "torch.Linear", "isinstance", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "cls_layers.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "m.weight.data.normal_", "m.bias.data.zero_", "torch.Dropout", "torch.Dropout", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ",", "dropout", "=", "True", ",", "small", "=", "False", ",", "supersmall", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "cls_layers", "=", "[", "]", "\n", "if", "dropout", "or", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "if", "not", "(", "small", "or", "supersmall", ")", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout", ":", "\n", "                ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "", "if", "not", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "cls_layers", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.VGG.forward": [[52, 57], ["vgg_shiftadd_se.VGG.features", "vgg_shiftadd_se.VGG.view", "vgg_shiftadd_se.VGG.classifier", "vgg_shiftadd_se.VGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.conv3x3": [[15, 20], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.make_layers": [[59, 75], ["torch.Sequential", "vgg_shiftadd_se.conv3x3", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["", "", "def", "make_layers", "(", "cfg", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "batch_norm", "=", "True", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "# conv2d = nn.Conv2d(in_channels, v, kernel_size=3, padding=1)", "\n", "            ", "conv2d", "=", "conv3x3", "(", "in_channels", ",", "v", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "\n", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg11": [[86, 89], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg11_nd": [[90, 93], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg11_nd_s": [[94, 97], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg11_nd_ss": [[98, 101], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg11_bn": [[103, 106], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg13": [[108, 111], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg13_nd": [[112, 115], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg13_nd_s": [[116, 119], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg13_nd_ss": [[120, 123], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg13_bn": [[125, 128], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg16": [[130, 133], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg16_nd": [[134, 137], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg16_nd_s": [[138, 141], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg16_nd_ss": [[142, 145], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg16_bn": [[147, 150], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg19": [[152, 155], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg19_nd": [[156, 159], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg19_small_shiftadd_se": [[160, 164], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_small_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "**", "kwargs", ")", ",", "\n", "num_classes", "=", "num_classes", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg19_nd_ss": [[165, 168], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd_se.vgg19_bn": [[171, 174], ["vgg_shiftadd_se.VGG", "vgg_shiftadd_se.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.forward": [[144, 149], ["ctx.save_for_backward", "W_col.unsqueeze", "X_col.unsqueeze"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bits", ")", ":", "\n", "        ", "return", "qw", "(", "input", ",", "bits", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward": [[150, 158], ["math.sqrt", "grad_output.unsqueeze", "grad_W_col.norm().clamp", "grad_output.unsqueeze", "X_col.unsqueeze", "W_col.unsqueeze", "W_col.size", "W_col.size", "grad_W_col.norm", "X_col.unsqueeze", "W_col.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.ste.clamp"], ["        ", "return", "grad_output", ",", "None", "\n", "\n", "", "", "class", "RoundActFixedPoint", "(", "Function", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bits", ")", ":", "\n", "        ", "return", "qa", "(", "input", ",", "bits", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.Adder2D.__init__": [[161, 172], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.init.uniform_", "torch.init.uniform_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["", "", "def", "round_weight_fixed_point", "(", "input", ",", "bits", ")", ":", "\n", "    ", "return", "RoundWeightFixedPoint", ".", "apply", "(", "input", ",", "bits", ")", "\n", "\n", "", "def", "round_act_fixed_point", "(", "input", ",", "bits", ")", ":", "\n", "    ", "return", "RoundActFixedPoint", ".", "apply", "(", "input", ",", "bits", ")", "\n", "\n", "\n", "", "def", "qe", "(", "x", ",", "bitsE", ")", ":", "\n", "    ", "bits", "=", "bitsE", "\n", "if", "bits", ">=", "32", ":", "\n", "        ", "result", "=", "x", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.Adder2D.forward": [[173, 179], ["adder.adder2d_function", "adder.Adder2D.b.unsqueeze().unsqueeze().unsqueeze", "adder.Adder2D.b.unsqueeze().unsqueeze", "adder.Adder2D.b.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder2d_function"], ["        ", "dscale", "=", "scale", "(", "x", ")", "\n", "result", "=", "dscale", "*", "clip", "(", "quant", "(", "x", "/", "dscale", ",", "bits", ")", ",", "bits", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "qg", "(", "x", ",", "bitsG", ")", ":", "\n", "    ", "bits", "=", "bitsG", "\n", "if", "bits", ">=", "32", ":", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder2d_function": [[124, 142], ["W.size", "X.size", "torch.nn.functional.unfold().view", "torch.nn.functional.unfold().view", "X_col.permute().contiguous().view.permute().contiguous().view", "W.view", "adder.apply", "out.permute().contiguous.view", "out.permute().contiguous.permute().contiguous", "int", "int", "X_col.permute().contiguous().view.size", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "X_col.permute().contiguous().view.permute().contiguous", "out.permute().contiguous.permute", "X.view", "X_col.permute().contiguous().view.permute"], "function", ["None"], ["        ", "result", "=", "torch", ".", "round", "(", "x", "/", "delta", "(", "bits", ")", ")", "*", "delta", "(", "bits", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "qw", "(", "x", ",", "bitsW", ")", ":", "\n", "    ", "bits", "=", "bitsW", "\n", "if", "bits", ">=", "32", ":", "\n", "        ", "result", "=", "x", "\n", "", "else", ":", "\n", "        ", "result", "=", "quant", "(", "x", ",", "bits", ")", "# remove clip for adding layer", "\n", "", "return", "result", "\n", "\n", "", "def", "qa", "(", "x", ",", "bitsA", ")", ":", "\n", "    ", "bits", "=", "bitsA", "\n", "if", "bits", ">=", "32", ":", "\n", "        ", "result", "=", "x", "\n", "", "else", ":", "\n", "        ", "result", "=", "quant", "(", "x", ",", "bits", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.VGG.__init__": [[26, 49], ["torch.Module.__init__", "cls_layers.append", "torch.Sequential", "torch.Sequential", "vgg_add.VGG.modules", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "torch.Linear", "torch.Linear", "isinstance", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "cls_layers.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "m.weight.data.normal_", "m.bias.data.zero_", "torch.Dropout", "torch.Dropout", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ",", "dropout", "=", "True", ",", "small", "=", "False", ",", "supersmall", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "cls_layers", "=", "[", "]", "\n", "if", "dropout", "or", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "if", "not", "(", "small", "or", "supersmall", ")", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout", ":", "\n", "                ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "", "if", "not", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "cls_layers", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.VGG.forward": [[51, 56], ["vgg_add.VGG.features", "vgg_add.VGG.view", "vgg_add.VGG.classifier", "vgg_add.VGG.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.conv3x3": [[16, 19], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.make_layers": [[58, 73], ["torch.Sequential", "vgg_add.conv3x3", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["", "", "def", "make_layers", "(", "cfg", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "batch_norm", "=", "True", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "# conv2d = nn.Conv2d(in_channels, v, kernel_size=3, padding=1)", "\n", "            ", "conv2d", "=", "conv3x3", "(", "in_channels", ",", "v", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg11": [[84, 87], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg11_nd": [[88, 91], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg11_nd_s": [[92, 95], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg11_nd_ss": [[96, 99], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg11_bn": [[101, 104], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg13": [[106, 109], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg13_nd": [[110, 113], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg13_nd_s": [[114, 117], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg13_nd_ss": [[118, 121], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg13_bn": [[123, 126], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg16": [[128, 131], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg16_nd": [[132, 135], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg16_nd_s": [[136, 139], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg16_nd_ss": [[140, 143], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg16_bn": [[145, 148], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg19": [[150, 153], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg19_nd": [[154, 157], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg19_small_add": [[158, 161], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_small_add", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "quantize", ",", "weight_bits", ",", "sparsity", ")", ",", "num_classes", "=", "num_classes", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg19_nd_ss": [[162, 165], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_add.vgg19_bn": [[168, 171], ["vgg_add.VGG", "vgg_add.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50.Bottleneck.__init__": [[24, 36], ["torch.Module.__init__", "resnet50.conv1x1", "torch.BatchNorm2d", "resnet50.conv3x3", "torch.BatchNorm2d", "resnet50.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50.Bottleneck.forward": [[37, 58], ["resnet50.Bottleneck.conv1", "resnet50.Bottleneck.bn1", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.conv2", "resnet50.Bottleneck.bn2", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.conv3", "resnet50.Bottleneck.bn3", "resnet50.Bottleneck.relu", "resnet50.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50.ResNet.__init__": [[62, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "resnet50.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet50.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50.ResNet._make_layer": [[89, 104], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet50.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50.ResNet.forward": [[105, 121], ["resnet50.ResNet.conv1", "resnet50.ResNet.bn1", "resnet50.ResNet.relu", "resnet50.ResNet.maxpool", "resnet50.ResNet.layer1", "resnet50.ResNet.layer2", "resnet50.ResNet.layer3", "resnet50.ResNet.layer4", "resnet50.ResNet.avgpool", "resnet50.ResNet.fc", "resnet50.ResNet.bn2", "resnet50.ResNet.view", "resnet50.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50.conv3x3": [[10, 14], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50.conv1x1": [[16, 19], ["adder.adder.Adder2D"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet50.resnet50_add": [[124, 127], ["resnet50.ResNet"], "function", ["None"], ["", "", "def", "resnet50_add", "(", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.BasicBlock.__init__": [[22, 31], ["torch.Module.__init__", "resnet20_add_stack.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_add_stack.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.BasicBlock.forward": [[32, 49], ["resnet20_add_stack.BasicBlock.conv1", "resnet20_add_stack.BasicBlock.bn1", "resnet20_add_stack.BasicBlock.relu", "resnet20_add_stack.BasicBlock.conv2", "resnet20_add_stack.BasicBlock.bn2", "resnet20_add_stack.BasicBlock.relu", "resnet20_add_stack.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.ResNet.__init__": [[53, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet20_add_stack.ResNet._make_layer", "resnet20_add_stack.ResNet._make_layer", "resnet20_add_stack.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet20_add_stack.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.ResNet._make_layer": [[76, 93], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "adder", ".", "Adder2D", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# adder.Adder2D", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.ResNet.forward": [[94, 107], ["resnet20_add_stack.ResNet.conv1", "resnet20_add_stack.ResNet.bn1", "resnet20_add_stack.ResNet.relu", "resnet20_add_stack.ResNet.layer1", "resnet20_add_stack.ResNet.layer2", "resnet20_add_stack.ResNet.layer3", "resnet20_add_stack.ResNet.avgpool", "resnet20_add_stack.ResNet.fc", "resnet20_add_stack.ResNet.bn2", "resnet20_add_stack.ResNet.view", "resnet20_add_stack.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.LeNet_vis.__init__": [[110, 127], ["torch.Module.__init__", "adder.adder.adder.Adder2D", "torch.PReLU", "torch.PReLU", "adder.adder.adder.Adder2D", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LeNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "adder", ".", "Adder2D", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv1_2", "=", "adder", ".", "Adder2D", "(", "32", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_2", "=", "nn", ".", "PReLU", "(", ")", "\n", "# self.conv2_1 = adder.Adder2D(32, 64, kernel_size=5, padding=2)", "\n", "# self.prelu2_1 = nn.PReLU()", "\n", "# self.conv2_2 = adder.Adder2D(64, 64, kernel_size=5, padding=2)", "\n", "# self.prelu2_2 = nn.PReLU()", "\n", "# self.conv3_1 = adder.Adder2D(64, 128, kernel_size=5, padding=2)", "\n", "# self.prelu3_1 = nn.PReLU()", "\n", "# self.conv3_2 = adder.Adder2D(128, 128, kernel_size=5, padding=2)", "\n", "# self.prelu3_2 = nn.PReLU()", "\n", "self", ".", "preluip1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "ip1", "=", "nn", ".", "Linear", "(", "32", "*", "3", "*", "3", ",", "2", ")", "\n", "self", ".", "ip2", "=", "nn", ".", "Linear", "(", "2", ",", "10", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.LeNet_vis.forward": [[128, 143], ["resnet20_add_stack.LeNet_vis.prelu1_1", "resnet20_add_stack.LeNet_vis.prelu1_2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "x.view.view.view", "resnet20_add_stack.LeNet_vis.preluip1", "resnet20_add_stack.LeNet_vis.ip2", "resnet20_add_stack.LeNet_vis.conv1_1", "resnet20_add_stack.LeNet_vis.conv1_2", "resnet20_add_stack.LeNet_vis.ip1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prelu1_1", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prelu1_2", "(", "self", ".", "conv1_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# x = self.prelu2_1(self.conv2_1(x))", "\n", "# x = self.prelu2_2(self.conv2_2(x))", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# x = self.prelu3_1(self.conv3_1(x))", "\n", "# x = self.prelu3_2(self.conv3_2(x))", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "32", "*", "3", "*", "3", ")", "\n", "ip1", "=", "self", ".", "preluip1", "(", "self", ".", "ip1", "(", "x", ")", ")", "\n", "ip2", "=", "self", ".", "ip2", "(", "ip1", ")", "\n", "# return ip1, F.log_softmax(ip2, dim=1)", "\n", "return", "ip1", ",", "ip2", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.conv3x3": [[11, 16], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "add", "=", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "add", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.resnet20_add_stack": [[145, 148], ["resnet20_add_stack.ResNet"], "function", ["None"], ["", "", "def", "resnet20_add_stack", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_add_stack.LeNet_add_vis": [[149, 151], ["resnet20_add_stack.LeNet_vis"], "function", ["None"], ["", "def", "LeNet_add_vis", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "LeNet_vis", "(", "num_classes", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.BasicBlock.__init__": [[26, 38], ["torch.Module.__init__", "resnet_basic_shiftadd.conv1x1", "torch.BatchNorm2d", "resnet_basic_shiftadd.conv3x3", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.conv3 = conv1x1(planes, planes * self.expansion, quantize=quantize, weight_bits=weight_bits, sparsity=sparsity)", "\n", "# self.bn3 = nn.BatchNorm2d(planes * self.expansion)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.BasicBlock.forward": [[39, 60], ["resnet_basic_shiftadd.BasicBlock.conv1", "resnet_basic_shiftadd.BasicBlock.bn1", "resnet_basic_shiftadd.BasicBlock.relu", "resnet_basic_shiftadd.BasicBlock.conv2", "resnet_basic_shiftadd.BasicBlock.bn2", "resnet_basic_shiftadd.BasicBlock.relu", "resnet_basic_shiftadd.BasicBlock.relu", "resnet_basic_shiftadd.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "# out = self.conv3(out)", "\n", "# out = self.bn3(out)", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.Bottleneck.__init__": [[64, 76], ["torch.Module.__init__", "resnet_basic_shiftadd.conv1x1", "torch.BatchNorm2d", "resnet_basic_shiftadd.conv3x3", "torch.BatchNorm2d", "resnet_basic_shiftadd.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.Bottleneck.forward": [[77, 98], ["resnet_basic_shiftadd.Bottleneck.conv1", "resnet_basic_shiftadd.Bottleneck.bn1", "resnet_basic_shiftadd.Bottleneck.relu", "resnet_basic_shiftadd.Bottleneck.conv2", "resnet_basic_shiftadd.Bottleneck.bn2", "resnet_basic_shiftadd.Bottleneck.relu", "resnet_basic_shiftadd.Bottleneck.conv3", "resnet_basic_shiftadd.Bottleneck.bn3", "resnet_basic_shiftadd.Bottleneck.relu", "resnet_basic_shiftadd.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.ResNet.__init__": [[102, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "resnet_basic_shiftadd.ResNet._make_layer", "resnet_basic_shiftadd.ResNet._make_layer", "resnet_basic_shiftadd.ResNet._make_layer", "resnet_basic_shiftadd.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet_basic_shiftadd.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.ResNet._make_layer": [[129, 147], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_basic_shiftadd.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.ResNet.forward": [[148, 164], ["resnet_basic_shiftadd.ResNet.conv1", "resnet_basic_shiftadd.ResNet.bn1", "resnet_basic_shiftadd.ResNet.relu", "resnet_basic_shiftadd.ResNet.maxpool", "resnet_basic_shiftadd.ResNet.layer1", "resnet_basic_shiftadd.ResNet.layer2", "resnet_basic_shiftadd.ResNet.layer3", "resnet_basic_shiftadd.ResNet.layer4", "resnet_basic_shiftadd.ResNet.avgpool", "resnet_basic_shiftadd.ResNet.fc", "resnet_basic_shiftadd.ResNet.bn2", "resnet_basic_shiftadd.ResNet.view", "resnet_basic_shiftadd.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.conv3x3": [[10, 15], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.conv1x1": [[17, 22], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.resnet18_shiftadd": [[165, 168], ["resnet_basic_shiftadd.ResNet"], "function", ["None"], ["", "", "def", "resnet18_shiftadd", "(", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.resnet34_shiftadd": [[170, 173], ["resnet_basic_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet34_shiftadd", "(", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd.resnet50_shiftadd": [[175, 178], ["resnet_basic_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet50_shiftadd", "(", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift_se.BasicBlock.__init__": [[19, 29], ["torch.Module.__init__", "resnet20_shift_se.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shift_se.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "threshold", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "threshold", "=", "self", ".", "threshold", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift_se.BasicBlock.forward": [[30, 47], ["resnet20_shift_se.BasicBlock.conv1", "resnet20_shift_se.BasicBlock.bn1", "resnet20_shift_se.BasicBlock.relu", "resnet20_shift_se.BasicBlock.conv2", "resnet20_shift_se.BasicBlock.bn2", "resnet20_shift_se.BasicBlock.relu", "resnet20_shift_se.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift_se.ResNet.__init__": [[51, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shift_se.ResNet._make_layer", "resnet20_shift_se.ResNet._make_layer", "resnet20_shift_se.ResNet._make_layer", "torch.AvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet20_shift_se.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "threshold", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift_se.ResNet._make_layer": [[71, 87], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "se_shift.SEConv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "SEConv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "threshold", "=", "self", ".", "threshold", ")", ",", "# shift", "\n", "# adder.adder2d(planes * block.expansion, planes * block.expansion, kernel_size=1, stride=1, bias=False), # add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift_se.ResNet.forward": [[88, 101], ["resnet20_shift_se.ResNet.conv1", "resnet20_shift_se.ResNet.bn1", "resnet20_shift_se.ResNet.relu", "resnet20_shift_se.ResNet.layer1", "resnet20_shift_se.ResNet.layer2", "resnet20_shift_se.ResNet.layer3", "resnet20_shift_se.ResNet.avgpool", "resnet20_shift_se.ResNet.fc", "resnet20_shift_se.ResNet.bn2", "resnet20_shift_se.ResNet.view", "resnet20_shift_se.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift_se.conv3x3": [[8, 14], ["se_shift.SEConv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ")", "\n", "# add = adder.adder2d(out_planes, out_planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "# return nn.Sequential(shift, add)", "\n", "return", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift_se.resnet20_shift_se": [[103, 105], ["resnet20_shift_se.ResNet"], "function", ["None"], ["", "", "def", "resnet20_shift_se", "(", "threshold", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.wide_basic.__init__": [[42, 57], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wideres_shiftadd.conv", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wideres_shiftadd.conv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "wideres_shiftadd.conv"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "# self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, padding=1, bias=True)", "\n", "self", ".", "conv1", "=", "conv", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride, padding=1, bias=True)", "\n", "self", ".", "conv2", "=", "conv", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True),", "\n", "conv", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.wide_basic.forward": [[59, 68], ["wideres_shiftadd.wide_basic.dropout", "wideres_shiftadd.wide_basic.conv2", "wideres_shiftadd.wide_basic.shortcut", "wideres_shiftadd.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wideres_shiftadd.wide_basic.bn2", "wideres_shiftadd.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(x.shape)", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "# print(out.shape)", "\n", "# print(self.shortcut(x).shape)", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.Wide_ResNet.__init__": [[70, 90], ["torch.Module.__init__", "print", "wideres_shiftadd.init_conv3x3", "wideres_shiftadd.Wide_ResNet._wide_layer", "wideres_shiftadd.Wide_ResNet._wide_layer", "wideres_shiftadd.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.init_conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "init_conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.Wide_ResNet._wide_layer": [[91, 100], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.Wide_ResNet.forward": [[101, 112], ["wideres_shiftadd.Wide_ResNet.conv1", "wideres_shiftadd.Wide_ResNet.layer1", "wideres_shiftadd.Wide_ResNet.layer2", "wideres_shiftadd.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wideres_shiftadd.Wide_ResNet.view", "wideres_shiftadd.Wide_ResNet.linear", "wideres_shiftadd.Wide_ResNet.bn1", "wideres_shiftadd.Wide_ResNet.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.init_conv3x3": [[14, 16], ["torch.Conv2d"], "function", ["None"], ["def", "init_conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv3x3": [[17, 22], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv": [[23, 28], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["", "def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv_init": [[32, 40], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.wideres_shiftadd": [[113, 116], ["wideres_shiftadd.Wide_ResNet"], "function", ["None"], ["", "", "def", "wideres_shiftadd", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "16", ",", "8", ",", "0.3", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_shiftadd_se.BasicBlock.__init__": [[19, 28], ["torch.Module.__init__", "resnet110_shiftadd_se.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet110_shiftadd_se.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_shiftadd_se.BasicBlock.forward": [[29, 46], ["resnet110_shiftadd_se.BasicBlock.conv1", "resnet110_shiftadd_se.BasicBlock.bn1", "resnet110_shiftadd_se.BasicBlock.relu", "resnet110_shiftadd_se.BasicBlock.conv2", "resnet110_shiftadd_se.BasicBlock.bn2", "resnet110_shiftadd_se.BasicBlock.relu", "resnet110_shiftadd_se.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_shiftadd_se.ResNet.__init__": [[49, 75], ["torch.Module.__init__", "se_shift.SEConv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet110_shiftadd_se.ResNet._make_layer", "resnet110_shiftadd_se.ResNet._make_layer", "resnet110_shiftadd_se.ResNet._make_layer", "torch.AvgPool2d", "se_shift.SEConv2d", "torch.BatchNorm2d", "resnet110_shiftadd_se.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "# self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1", "=", "SEConv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "# self.fc = nn.Conv2d(64 * block.expansion, num_classes, 1, bias=False)", "\n", "self", ".", "fc", "=", "SEConv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_shiftadd_se.ResNet._make_layer": [[76, 97], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "se_shift.SEConv2d", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "SEConv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ")", ",", "# shift", "\n", "adder", ".", "Adder2D", "(", "planes", "*", "block", ".", "expansion", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "\n", "distribution", "=", "self", ".", "distribution", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_shiftadd_se.ResNet.forward": [[98, 111], ["resnet110_shiftadd_se.ResNet.conv1", "resnet110_shiftadd_se.ResNet.bn1", "resnet110_shiftadd_se.ResNet.relu", "resnet110_shiftadd_se.ResNet.layer1", "resnet110_shiftadd_se.ResNet.layer2", "resnet110_shiftadd_se.ResNet.layer3", "resnet110_shiftadd_se.ResNet.avgpool", "resnet110_shiftadd_se.ResNet.fc", "resnet110_shiftadd_se.ResNet.bn2", "resnet110_shiftadd_se.ResNet.view", "resnet110_shiftadd_se.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_shiftadd_se.conv3x3": [[9, 14], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet110_shiftadd_se.resnet110_shiftadd_se": [[113, 115], ["resnet110_shiftadd_se.ResNet"], "function", ["None"], ["", "", "def", "resnet110_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se_stack.BasicBlock.__init__": [[20, 29], ["torch.Module.__init__", "resnet20_shiftadd_se_stack.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shiftadd_se_stack.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se_stack.BasicBlock.forward": [[30, 47], ["resnet20_shiftadd_se_stack.BasicBlock.conv1", "resnet20_shiftadd_se_stack.BasicBlock.bn1", "resnet20_shiftadd_se_stack.BasicBlock.relu", "resnet20_shiftadd_se_stack.BasicBlock.conv2", "resnet20_shiftadd_se_stack.BasicBlock.bn2", "resnet20_shiftadd_se_stack.BasicBlock.relu", "resnet20_shiftadd_se_stack.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se_stack.ResNet.__init__": [[50, 76], ["torch.Module.__init__", "se_shift.SEConv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shiftadd_se_stack.ResNet._make_layer", "resnet20_shiftadd_se_stack.ResNet._make_layer", "resnet20_shiftadd_se_stack.ResNet._make_layer", "torch.AvgPool2d", "se_shift.SEConv2d", "torch.BatchNorm2d", "resnet20_shiftadd_se_stack.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "# self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1", "=", "SEConv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "# self.fc = nn.Conv2d(64 * block.expansion, num_classes, 1, bias=False)", "\n", "self", ".", "fc", "=", "SEConv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se_stack.ResNet._make_layer": [[77, 98], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "se_shift.SEConv2d", "adder.adder.adder.Adder2D", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "SEConv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ")", ",", "# shift", "\n", "adder", ".", "Adder2D", "(", "planes", "*", "block", ".", "expansion", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "\n", "distribution", "=", "self", ".", "distribution", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se_stack.ResNet.forward": [[99, 112], ["resnet20_shiftadd_se_stack.ResNet.conv1", "resnet20_shiftadd_se_stack.ResNet.bn1", "resnet20_shiftadd_se_stack.ResNet.relu", "resnet20_shiftadd_se_stack.ResNet.layer1", "resnet20_shiftadd_se_stack.ResNet.layer2", "resnet20_shiftadd_se_stack.ResNet.layer3", "resnet20_shiftadd_se_stack.ResNet.avgpool", "resnet20_shiftadd_se_stack.ResNet.fc", "resnet20_shiftadd_se_stack.ResNet.bn2", "resnet20_shiftadd_se_stack.ResNet.view", "resnet20_shiftadd_se_stack.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se_stack.conv3x3": [[9, 15], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "# add_2 = adder.Adder2D(out_planes, out_planes, kernel_size=3, stride=1, padding=1, bias=False, quantize=quantize, weight_bits=weight_bits, sparsity=sparsity)", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shiftadd_se_stack.resnet20_shiftadd_se_stack": [[114, 116], ["resnet20_shiftadd_se_stack.ResNet"], "function", ["None"], ["", "", "def", "resnet20_shiftadd_se_stack", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.Mult2D.__init__": [[18, 54], ["torch.Module.__init__", "adder.quantize.QuantMeasure", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "resnet20_mult_stack.Mult2D.s.data.uniform_", "resnet20_mult_stack.Mult2D.register_buffer", "resnet20_mult_stack.Mult2D.set_mask", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "resnet20_mult_stack.Mult2D.weight.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_channel", ",", "\n", "output_channel", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "Mult2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "input_channel", "=", "input_channel", "\n", "self", ".", "output_channel", "=", "output_channel", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "quantize_input_fw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "qweight", "=", "None", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros", "(", "output_channel", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "self", ".", "s", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'weight_mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "weight", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.Mult2D.forward": [[55, 82], ["resnet20_mult_stack.Mult2D.quantize_input_fw", "adder.quantize.calculate_qparams", "adder.quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "adder.quantize.quantize_grad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "resnet20_mult_stack.Mult2D.b.unsqueeze().unsqueeze().unsqueeze", "resnet20_mult_stack.Mult2D.b.unsqueeze().unsqueeze", "resnet20_mult_stack.Mult2D.b.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "# apply mask", "\n", "            ", "self", ".", "weight", ".", "data", "=", "self", ".", "weight", ".", "data", "*", "self", ".", "weight_mask", ".", "data", "\n", "\n", "", "if", "self", ".", "quantize", "==", "True", ":", "\n", "# quantization v2", "\n", "            ", "input_q", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "self", ".", "weight_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "self", ".", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "bias_fixed_point", "=", "None", "\n", "output", "=", "F", ".", "conv2d", "(", "input_q", ",", "\n", "self", ".", "qweight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "\n", "self", ".", "weight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.Mult2D.round_weight_each_step": [[83, 106], ["adder.quantize.calculate_qparams", "adder.quantize.quantize", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "torch.unique.size", "torch.unique.size", "torch.unique.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize"], ["", "def", "round_weight_each_step", "(", "self", ",", "weight", ",", "bits", "=", "16", ")", ":", "\n", "# print('before quantize: ', input)", "\n", "# quantization v1", "\n", "# if bits == 1:", "\n", "#     return torch.sign(weight)", "\n", "# S = 2. ** (bits - 1)", "\n", "# if bits > 15 or bits == 1:", "\n", "#   delta = 0", "\n", "# else:", "\n", "#   delta = 1. / S", "\n", "# max_val = 1 - delta", "\n", "# min_val = delta - 1", "\n", "\n", "# weight_clamp = torch.clamp(weight, min_val, max_val)", "\n", "# qweight = torch.round(weight_clamp * S) / S", "\n", "# print('after quantize: ', input_round)", "\n", "\n", "# quantization v2", "\n", "        ", "weight_qparams", "=", "calculate_qparams", "(", "weight", ",", "num_bits", "=", "bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "weight_unique", "=", "torch", ".", "unique", "(", "qweight", "[", "0", "]", ")", "\n", "print", "(", "'add weight range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "return", "qweight", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.Mult2D.set_mask": [[107, 111], ["None"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ")", ":", "\n", "# random fix zero", "\n", "        ", "self", ".", "weight_mask", ".", "data", "=", "(", "self", ".", "s", ">", "self", ".", "sparsity", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "weight_mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.BasicBlock.__init__": [[121, 130], ["torch.Module.__init__", "resnet20_mult_stack.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet20_mult_stack.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.BasicBlock.forward": [[131, 148], ["resnet20_mult_stack.BasicBlock.conv1", "resnet20_mult_stack.BasicBlock.bn1", "resnet20_mult_stack.BasicBlock.relu", "resnet20_mult_stack.BasicBlock.conv2", "resnet20_mult_stack.BasicBlock.bn2", "resnet20_mult_stack.BasicBlock.relu", "resnet20_mult_stack.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.ResNet.__init__": [[152, 174], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet20_mult_stack.ResNet._make_layer", "resnet20_mult_stack.ResNet._make_layer", "resnet20_mult_stack.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet20_mult_stack.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.ResNet._make_layer": [[175, 192], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet20_mult_stack.Mult2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "Mult2D", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# adder.Adder2D", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.ResNet.forward": [[193, 206], ["resnet20_mult_stack.ResNet.conv1", "resnet20_mult_stack.ResNet.bn1", "resnet20_mult_stack.ResNet.relu", "resnet20_mult_stack.ResNet.layer1", "resnet20_mult_stack.ResNet.layer2", "resnet20_mult_stack.ResNet.layer3", "resnet20_mult_stack.ResNet.avgpool", "resnet20_mult_stack.ResNet.fc", "resnet20_mult_stack.ResNet.bn2", "resnet20_mult_stack.ResNet.view", "resnet20_mult_stack.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.LeNet_vis.__init__": [[209, 226], ["torch.Module.__init__", "adder.Adder2D", "torch.PReLU", "torch.PReLU", "torch.PReLU", "adder.Adder2D", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LeNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "adder", ".", "Adder2D", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv1_2", "=", "adder", ".", "Adder2D", "(", "32", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_2", "=", "nn", ".", "PReLU", "(", ")", "\n", "# self.conv2_1 = adder.Adder2D(32, 64, kernel_size=5, padding=2)", "\n", "# self.prelu2_1 = nn.PReLU()", "\n", "# self.conv2_2 = adder.Adder2D(64, 64, kernel_size=5, padding=2)", "\n", "# self.prelu2_2 = nn.PReLU()", "\n", "# self.conv3_1 = adder.Adder2D(64, 128, kernel_size=5, padding=2)", "\n", "# self.prelu3_1 = nn.PReLU()", "\n", "# self.conv3_2 = adder.Adder2D(128, 128, kernel_size=5, padding=2)", "\n", "# self.prelu3_2 = nn.PReLU()", "\n", "self", ".", "preluip1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "ip1", "=", "nn", ".", "Linear", "(", "32", "*", "3", "*", "3", ",", "2", ")", "\n", "self", ".", "ip2", "=", "nn", ".", "Linear", "(", "2", ",", "10", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.LeNet_vis.forward": [[227, 242], ["resnet20_mult_stack.LeNet_vis.prelu1_1", "resnet20_mult_stack.LeNet_vis.prelu1_2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "x.view.view.view", "resnet20_mult_stack.LeNet_vis.preluip1", "resnet20_mult_stack.LeNet_vis.ip2", "resnet20_mult_stack.LeNet_vis.conv1_1", "resnet20_mult_stack.LeNet_vis.conv1_2", "resnet20_mult_stack.LeNet_vis.ip1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prelu1_1", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prelu1_2", "(", "self", ".", "conv1_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# x = self.prelu2_1(self.conv2_1(x))", "\n", "# x = self.prelu2_2(self.conv2_2(x))", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# x = self.prelu3_1(self.conv3_1(x))", "\n", "# x = self.prelu3_2(self.conv3_2(x))", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "32", "*", "3", "*", "3", ")", "\n", "ip1", "=", "self", ".", "preluip1", "(", "self", ".", "ip1", "(", "x", ")", ")", "\n", "ip2", "=", "self", ".", "ip2", "(", "ip1", ")", "\n", "# return ip1, F.log_softmax(ip2, dim=1)", "\n", "return", "ip1", ",", "ip2", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.conv3x3": [[112, 116], ["resnet20_mult_stack.Mult2D"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "Mult2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.resnet20_mult": [[244, 247], ["resnet20_mult_stack.ResNet"], "function", ["None"], ["", "", "def", "resnet20_mult", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult_stack.LeNet_add_vis": [[248, 250], ["resnet20_mult_stack.LeNet_vis"], "function", ["None"], ["", "def", "LeNet_add_vis", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "LeNet_vis", "(", "num_classes", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.LambdaLayer.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.LambdaLayer.forward": [[21, 23], ["resnet_shiftadd.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.BasicBlock.__init__": [[39, 62], ["torch.Module.__init__", "resnet_shiftadd.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_shiftadd.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_shiftadd.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "print", "torch.pad", "torch.pad", "torch.pad", "resnet_shiftadd.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "\"\"\"\n            For CIFAR10 ResNet paper uses option A.\n            \"\"\"", "\n", "if", "option", "==", "'A'", ":", "\n", "                ", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ")", ",", "\n", "# nn.Conv2d(in_planes, self.expansion*planes, kernel_size=1, stride=stride, bias=False),", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"ResNet option should be either 'A' or 'B'. Option passed was: \"", ",", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.BasicBlock.forward": [[63, 69], ["torch.relu", "torch.relu", "torch.relu", "resnet_shiftadd.BasicBlock.bn2", "resnet_shiftadd.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_shiftadd.BasicBlock.bn1", "resnet_shiftadd.BasicBlock.conv2", "resnet_shiftadd.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.Bottleneck.__init__": [[74, 89], ["torch.Module.__init__", "resnet_shiftadd.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_shiftadd.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_shiftadd.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_shiftadd.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "in_planes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "# nn.Conv2d(in_planes, self.expansion*planes, kernel_size=1, stride=stride, bias=False),", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.Bottleneck.forward": [[91, 98], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_shiftadd.Bottleneck.bn3", "resnet_shiftadd.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_shiftadd.Bottleneck.bn1", "resnet_shiftadd.Bottleneck.bn2", "resnet_shiftadd.Bottleneck.conv3", "resnet_shiftadd.Bottleneck.conv1", "resnet_shiftadd.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.ResNet.__init__": [[101, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_shiftadd.ResNet._make_layer", "resnet_shiftadd.ResNet._make_layer", "resnet_shiftadd.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_shiftadd.ResNet._make_layer", "resnet_shiftadd.ResNet._make_layer", "resnet_shiftadd.ResNet._make_layer", "resnet_shiftadd.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "print"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        For CIFAR10 ResNet paper uses option A.\n        \"\"\"", "\n", "self", ".", "option", "=", "option", "\n", "if", "self", ".", "option", "==", "'A'", ":", "\n", "            ", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "", "elif", "self", ".", "option", "==", "'B'", ":", "\n", "            ", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"ResNet option should be either 'A' or 'B'. Option passed was: \"", ",", "self", ".", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.ResNet._make_layer": [[129, 136], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.ResNet.forward": [[137, 150], ["torch.relu", "torch.relu", "torch.relu", "resnet_shiftadd.ResNet.layer1", "resnet_shiftadd.ResNet.layer2", "resnet_shiftadd.ResNet.layer3", "torch.avg_pool2d.view", "resnet_shiftadd.ResNet.linear", "resnet_shiftadd.ResNet.bn1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_shiftadd.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.size", "resnet_shiftadd.ResNet.conv1", "torch.avg_pool2d.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "if", "self", ".", "option", "==", "'A'", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "", "else", ":", "# if self.option == 'B':", "\n", "            ", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.conv3x3": [[24, 29], ["torch.Conv2d", "models.adder.adder2d", "torch.Sequential"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "adder2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.conv1x1": [[30, 35], ["torch.Conv2d", "models.adder.adder2d", "torch.Sequential"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "adder2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet20_shiftadd_v2": [[154, 156], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "", "def", "resnet20_shiftadd_v2", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "option", "=", "'A'", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet32": [[157, 159], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet44": [[160, 162], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet56": [[163, 165], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet110": [[166, 168], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet1202": [[169, 171], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ",", "option", "=", "'A'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet18": [[175, 177], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet34": [[178, 180], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet50": [[181, 183], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet101": [[184, 186], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet152": [[187, 189], ["resnet_shiftadd.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "option", "=", "'B'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.test": [[190, 194], ["resnet_shiftadd.resnet18", "resnet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_shiftadd.resnet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "resnet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.BasicBlock.__init__": [[18, 27], ["torch.Module.__init__", "resnet20_shift.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shift.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.BasicBlock.forward": [[28, 45], ["resnet20_shift.BasicBlock.conv1", "resnet20_shift.BasicBlock.bn1", "resnet20_shift.BasicBlock.relu", "resnet20_shift.BasicBlock.conv2", "resnet20_shift.BasicBlock.bn2", "resnet20_shift.BasicBlock.relu", "resnet20_shift.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.ResNet.__init__": [[49, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shift.ResNet._make_layer", "resnet20_shift.ResNet._make_layer", "resnet20_shift.ResNet._make_layer", "torch.AvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet20_shift.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.ResNet._make_layer": [[68, 84], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "# shift", "\n", "# adder.adder2d(planes * block.expansion, planes * block.expansion, kernel_size=1, stride=1, bias=False), # add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.ResNet.forward": [[85, 98], ["resnet20_shift.ResNet.conv1", "resnet20_shift.ResNet.bn1", "resnet20_shift.ResNet.relu", "resnet20_shift.ResNet.layer1", "resnet20_shift.ResNet.layer2", "resnet20_shift.ResNet.layer3", "resnet20_shift.ResNet.avgpool", "resnet20_shift.ResNet.fc", "resnet20_shift.ResNet.bn2", "resnet20_shift.ResNet.view", "resnet20_shift.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.ResNet_vis.__init__": [[101, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet20_shift.ResNet_vis._make_layer", "resnet20_shift.ResNet_vis._make_layer", "resnet20_shift.ResNet_vis._make_layer", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet20_shift.ResNet_vis.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use linear as fc layer", "\n", "self", ".", "linear_1", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "2", ")", "\n", "self", ".", "linear_2", "=", "nn", ".", "Linear", "(", "2", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.ResNet_vis._make_layer": [[120, 136], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "# shift", "\n", "# adder.adder2d(planes * block.expansion, planes * block.expansion, kernel_size=1, stride=1, bias=False), # add", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.ResNet_vis.forward": [[137, 151], ["resnet20_shift.ResNet_vis.conv1", "resnet20_shift.ResNet_vis.bn1", "resnet20_shift.ResNet_vis.relu", "resnet20_shift.ResNet_vis.layer1", "resnet20_shift.ResNet_vis.layer2", "resnet20_shift.ResNet_vis.layer3", "resnet20_shift.ResNet_vis.avgpool", "resnet20_shift.ResNet_vis.view", "resnet20_shift.ResNet_vis.linear_1", "resnet20_shift.ResNet_vis.linear_2", "resnet20_shift.ResNet_vis.size", "resnet20_shift.ResNet_vis.view", "resnet20_shift.ResNet_vis.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "self", ".", "linear_1", "(", "x", ")", "\n", "x", "=", "self", ".", "linear_2", "(", "feat", ")", "\n", "return", "feat", ",", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.conv3x3": [[7, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# add = adder.adder2d(out_planes, out_planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "# return nn.Sequential(shift, add)", "\n", "return", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_shift.resnet20_shift": [[153, 155], ["resnet20_shift.ResNet"], "function", ["None"], ["", "", "def", "resnet20_shift", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.BasicBlock.__init__": [[24, 36], ["torch.Module.__init__", "resnet_basic.conv1x1", "torch.BatchNorm2d", "resnet_basic.conv3x3", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.conv3 = conv1x1(planes, planes * self.expansion, quantize=quantize, weight_bits=weight_bits, sparsity=sparsity)", "\n", "# self.bn3 = nn.BatchNorm2d(planes * self.expansion)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.BasicBlock.forward": [[37, 58], ["resnet_basic.BasicBlock.conv1", "resnet_basic.BasicBlock.bn1", "resnet_basic.BasicBlock.relu", "resnet_basic.BasicBlock.conv2", "resnet_basic.BasicBlock.bn2", "resnet_basic.BasicBlock.relu", "resnet_basic.BasicBlock.relu", "resnet_basic.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "# out = self.conv3(out)", "\n", "# out = self.bn3(out)", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.Bottleneck.__init__": [[63, 75], ["torch.Module.__init__", "resnet_basic.conv1x1", "torch.BatchNorm2d", "resnet_basic.conv3x3", "torch.BatchNorm2d", "resnet_basic.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.Bottleneck.forward": [[76, 97], ["resnet_basic.Bottleneck.conv1", "resnet_basic.Bottleneck.bn1", "resnet_basic.Bottleneck.relu", "resnet_basic.Bottleneck.conv2", "resnet_basic.Bottleneck.bn2", "resnet_basic.Bottleneck.relu", "resnet_basic.Bottleneck.conv3", "resnet_basic.Bottleneck.bn3", "resnet_basic.Bottleneck.relu", "resnet_basic.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.ResNet.__init__": [[101, 126], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "resnet_basic.ResNet._make_layer", "resnet_basic.ResNet._make_layer", "resnet_basic.ResNet._make_layer", "resnet_basic.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet_basic.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.ResNet._make_layer": [[128, 143], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_basic.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.ResNet.forward": [[144, 160], ["resnet_basic.ResNet.conv1", "resnet_basic.ResNet.bn1", "resnet_basic.ResNet.relu", "resnet_basic.ResNet.maxpool", "resnet_basic.ResNet.layer1", "resnet_basic.ResNet.layer2", "resnet_basic.ResNet.layer3", "resnet_basic.ResNet.layer4", "resnet_basic.ResNet.avgpool", "resnet_basic.ResNet.fc", "resnet_basic.ResNet.bn2", "resnet_basic.ResNet.view", "resnet_basic.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.conv3x3": [[10, 14], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.conv1x1": [[16, 19], ["adder.adder.Adder2D"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.resnet18_add": [[161, 164], ["resnet_basic.ResNet"], "function", ["None"], ["", "", "def", "resnet18_add", "(", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.resnet34_add": [[165, 168], ["resnet_basic.ResNet"], "function", ["None"], ["", "def", "resnet34_add", "(", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic.resnet50_add": [[169, 172], ["resnet_basic.ResNet"], "function", ["None"], ["", "def", "resnet50_add", "(", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.VGG.__init__": [[27, 51], ["torch.Module.__init__", "cls_layers.append", "torch.Sequential", "torch.Sequential", "vgg_shiftadd.VGG.modules", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "cls_layers.append", "torch.Linear", "torch.Linear", "isinstance", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "cls_layers.append", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "m.weight.data.normal_", "torch.Dropout", "torch.Dropout", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ",", "dropout", "=", "True", ",", "small", "=", "False", ",", "supersmall", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "cls_layers", "=", "[", "]", "\n", "if", "dropout", "or", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "if", "not", "(", "small", "or", "supersmall", ")", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout", ":", "\n", "                ", "cls_layers", ".", "append", "(", "nn", ".", "Dropout", "(", ")", ")", "\n", "", "", "if", "not", "supersmall", ":", "\n", "            ", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ")", "\n", "cls_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "cls_layers", ".", "append", "(", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "cls_layers", ")", "\n", "# Initialize weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.VGG.forward": [[53, 58], ["vgg_shiftadd.VGG.features", "vgg_shiftadd.VGG.view", "vgg_shiftadd.VGG.classifier", "vgg_shiftadd.VGG.size"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.conv3x3": [[15, 20], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers": [[60, 75], ["torch.Sequential", "vgg_shiftadd.conv3x3", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["", "", "def", "make_layers", "(", "cfg", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "batch_norm", "=", "True", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "# conv2d = nn.Conv2d(in_channels, v, kernel_size=3, padding=1)", "\n", "            ", "conv2d", "=", "conv3x3", "(", "in_channels", ",", "v", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg11": [[86, 89], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["def", "vgg11", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg11_nd": [[90, 93], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg11_nd_s": [[94, 97], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg11_nd_ss": [[98, 101], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg11_bn": [[103, 106], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg11_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'A'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg13": [[108, 111], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg13_nd": [[112, 115], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg13_nd_s": [[116, 119], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg13_nd_ss": [[120, 123], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg13_bn": [[125, 128], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg13_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'B'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg16": [[130, 133], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg16_nd": [[134, 137], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg16_nd_s": [[138, 141], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_s", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg16_nd_ss": [[142, 145], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg16_bn": [[147, 150], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg16_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'D'", "]", ",", "batch_norm", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg19": [[152, 155], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg19_nd": [[156, 159], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg19_small_shiftadd": [[160, 164], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_small_shiftadd", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "**", "kwargs", ")", ",", "\n", "num_classes", "=", "num_classes", ",", "dropout", "=", "False", ",", "small", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg19_nd_ss": [[165, 168], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_nd_ss", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration \"E\")\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ")", ",", "dropout", "=", "False", ",", "small", "=", "True", ",", "supersmall", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.vgg19_bn": [[171, 174], ["vgg_shiftadd.VGG", "vgg_shiftadd.make_layers"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg_shiftadd.make_layers"], ["", "def", "vgg19_bn", "(", ")", ":", "\n", "    ", "\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\"\"\"", "\n", "return", "VGG", "(", "make_layers", "(", "cfg", "[", "'E'", "]", ",", "batch_norm", "=", "True", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.wide_basic.__init__": [[23, 35], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.wide_basic.forward": [[37, 43], ["wideres.wide_basic.dropout", "wideres.wide_basic.conv2", "wideres.wide_basic.shortcut", "wideres.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wideres.wide_basic.bn2", "wideres.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet.__init__": [[45, 62], ["torch.Module.__init__", "print", "wideres.conv3x3", "wideres.Wide_ResNet._wide_layer", "wideres.Wide_ResNet._wide_layer", "wideres.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet._wide_layer": [[63, 72], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.Wide_ResNet.forward": [[73, 84], ["wideres.Wide_ResNet.conv1", "wideres.Wide_ResNet.layer1", "wideres.Wide_ResNet.layer2", "wideres.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wideres.Wide_ResNet.view", "wideres.Wide_ResNet.linear", "wideres.Wide_ResNet.bn1", "wideres.Wide_ResNet.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.conv3x3": [[10, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres.conv_init": [[13, 21], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.Mult2D.__init__": [[18, 54], ["torch.Module.__init__", "adder.quantize.QuantMeasure", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "resnet20_mult.Mult2D.s.data.uniform_", "resnet20_mult.Mult2D.register_buffer", "resnet20_mult.Mult2D.set_mask", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "resnet20_mult.Mult2D.weight.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_channel", ",", "\n", "output_channel", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "Mult2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "input_channel", "=", "input_channel", "\n", "self", ".", "output_channel", "=", "output_channel", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "quantize_input_fw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "qweight", "=", "None", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros", "(", "output_channel", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "self", ".", "s", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", ",", "kernel_size", ")", ")", ")", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'weight_mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "weight", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.Mult2D.forward": [[55, 82], ["resnet20_mult.Mult2D.quantize_input_fw", "adder.quantize.calculate_qparams", "adder.quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "adder.quantize.quantize_grad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "resnet20_mult.Mult2D.b.unsqueeze().unsqueeze().unsqueeze", "resnet20_mult.Mult2D.b.unsqueeze().unsqueeze", "resnet20_mult.Mult2D.b.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "# apply mask", "\n", "            ", "self", ".", "weight", ".", "data", "=", "self", ".", "weight", ".", "data", "*", "self", ".", "weight_mask", ".", "data", "\n", "\n", "", "if", "self", ".", "quantize", "==", "True", ":", "\n", "# quantization v2", "\n", "            ", "input_q", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "self", ".", "weight_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "self", ".", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "bias_fixed_point", "=", "None", "\n", "output", "=", "F", ".", "conv2d", "(", "input_q", ",", "\n", "self", ".", "qweight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "\n", "self", ".", "weight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.Mult2D.round_weight_each_step": [[83, 106], ["adder.quantize.calculate_qparams", "adder.quantize.quantize", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "torch.unique.size", "torch.unique.size", "torch.unique.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize"], ["", "def", "round_weight_each_step", "(", "self", ",", "weight", ",", "bits", "=", "16", ")", ":", "\n", "# print('before quantize: ', input)", "\n", "# quantization v1", "\n", "# if bits == 1:", "\n", "#     return torch.sign(weight)", "\n", "# S = 2. ** (bits - 1)", "\n", "# if bits > 15 or bits == 1:", "\n", "#   delta = 0", "\n", "# else:", "\n", "#   delta = 1. / S", "\n", "# max_val = 1 - delta", "\n", "# min_val = delta - 1", "\n", "\n", "# weight_clamp = torch.clamp(weight, min_val, max_val)", "\n", "# qweight = torch.round(weight_clamp * S) / S", "\n", "# print('after quantize: ', input_round)", "\n", "\n", "# quantization v2", "\n", "        ", "weight_qparams", "=", "calculate_qparams", "(", "weight", ",", "num_bits", "=", "bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "weight_unique", "=", "torch", ".", "unique", "(", "qweight", "[", "0", "]", ")", "\n", "print", "(", "'add weight range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "return", "qweight", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.Mult2D.set_mask": [[107, 111], ["None"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ")", ":", "\n", "# random fix zero", "\n", "        ", "self", ".", "weight_mask", ".", "data", "=", "(", "self", ".", "s", ">", "self", ".", "sparsity", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "weight_mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.BasicBlock.__init__": [[121, 130], ["torch.Module.__init__", "resnet20_mult.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet20_mult.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.BasicBlock.forward": [[131, 148], ["resnet20_mult.BasicBlock.conv1", "resnet20_mult.BasicBlock.bn1", "resnet20_mult.BasicBlock.relu", "resnet20_mult.BasicBlock.conv2", "resnet20_mult.BasicBlock.bn2", "resnet20_mult.BasicBlock.relu", "resnet20_mult.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.ResNet.__init__": [[152, 174], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet20_mult.ResNet._make_layer", "resnet20_mult.ResNet._make_layer", "resnet20_mult.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet20_mult.ResNet.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.ResNet._make_layer": [[175, 192], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet20_mult.Mult2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "Mult2D", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# adder.Adder2D", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.ResNet.forward": [[193, 206], ["resnet20_mult.ResNet.conv1", "resnet20_mult.ResNet.bn1", "resnet20_mult.ResNet.relu", "resnet20_mult.ResNet.layer1", "resnet20_mult.ResNet.layer2", "resnet20_mult.ResNet.layer3", "resnet20_mult.ResNet.avgpool", "resnet20_mult.ResNet.fc", "resnet20_mult.ResNet.bn2", "resnet20_mult.ResNet.view", "resnet20_mult.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.ResNet_vis.__init__": [[210, 232], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet20_mult.ResNet_vis._make_layer", "resnet20_mult.ResNet_vis._make_layer", "resnet20_mult.ResNet_vis._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet20_mult.ResNet_vis.modules", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "# use conv as fc layer (addernet)", "\n", "self", ".", "fc_1", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "2", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Linear", "(", "2", ",", "num_classes", ")", "\n", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.ResNet_vis._make_layer": [[233, 250], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet20_mult.Mult2D", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "Mult2D", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "# adder.Adder2D", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", "=", "self", ".", "inplanes", ",", "planes", "=", "planes", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.ResNet_vis.forward": [[251, 266], ["resnet20_mult.ResNet_vis.conv1", "resnet20_mult.ResNet_vis.bn1", "resnet20_mult.ResNet_vis.relu", "resnet20_mult.ResNet_vis.layer1", "resnet20_mult.ResNet_vis.layer2", "resnet20_mult.ResNet_vis.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet20_mult.ResNet_vis.view", "resnet20_mult.ResNet_vis.fc_1", "resnet20_mult.ResNet_vis.fc_2", "resnet20_mult.ResNet_vis.view", "resnet20_mult.ResNet_vis.size", "resnet20_mult.ResNet_vis.size", "resnet20_mult.ResNet_vis.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc_1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.LeNet_vis.__init__": [[269, 286], ["torch.Module.__init__", "adder.Adder2D", "torch.PReLU", "torch.PReLU", "torch.PReLU", "adder.Adder2D", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "LeNet_vis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "adder", ".", "Adder2D", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv1_2", "=", "adder", ".", "Adder2D", "(", "32", ",", "32", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "prelu1_2", "=", "nn", ".", "PReLU", "(", ")", "\n", "# self.conv2_1 = adder.Adder2D(32, 64, kernel_size=5, padding=2)", "\n", "# self.prelu2_1 = nn.PReLU()", "\n", "# self.conv2_2 = adder.Adder2D(64, 64, kernel_size=5, padding=2)", "\n", "# self.prelu2_2 = nn.PReLU()", "\n", "# self.conv3_1 = adder.Adder2D(64, 128, kernel_size=5, padding=2)", "\n", "# self.prelu3_1 = nn.PReLU()", "\n", "# self.conv3_2 = adder.Adder2D(128, 128, kernel_size=5, padding=2)", "\n", "# self.prelu3_2 = nn.PReLU()", "\n", "self", ".", "preluip1", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "ip1", "=", "nn", ".", "Linear", "(", "32", "*", "3", "*", "3", ",", "2", ")", "\n", "self", ".", "ip2", "=", "nn", ".", "Linear", "(", "2", ",", "10", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.LeNet_vis.forward": [[287, 302], ["resnet20_mult.LeNet_vis.prelu1_1", "resnet20_mult.LeNet_vis.prelu1_2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "x.view.view.view", "resnet20_mult.LeNet_vis.preluip1", "resnet20_mult.LeNet_vis.ip2", "resnet20_mult.LeNet_vis.conv1_1", "resnet20_mult.LeNet_vis.conv1_2", "resnet20_mult.LeNet_vis.ip1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prelu1_1", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prelu1_2", "(", "self", ".", "conv1_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# x = self.prelu2_1(self.conv2_1(x))", "\n", "# x = self.prelu2_2(self.conv2_2(x))", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "# x = self.prelu3_1(self.conv3_1(x))", "\n", "# x = self.prelu3_2(self.conv3_2(x))", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "32", "*", "3", "*", "3", ")", "\n", "ip1", "=", "self", ".", "preluip1", "(", "self", ".", "ip1", "(", "x", ")", ")", "\n", "ip2", "=", "self", ".", "ip2", "(", "ip1", ")", "\n", "# return ip1, F.log_softmax(ip2, dim=1)", "\n", "return", "ip1", ",", "ip2", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.conv3x3": [[112, 116], ["resnet20_mult.Mult2D"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "Mult2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.resnet20_mult": [[304, 307], ["resnet20_mult.ResNet"], "function", ["None"], ["", "", "def", "resnet20_mult", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.resnet20_mult_vis": [[308, 311], ["resnet20_mult.ResNet_vis"], "function", ["None"], ["", "def", "resnet20_mult_vis", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet_vis", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "quantize", "=", "quantize", ",", "\n", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet20_mult.LeNet_add_vis": [[313, 315], ["resnet20_mult.LeNet_vis"], "function", ["None"], ["", "def", "LeNet_add_vis", "(", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "LeNet_vis", "(", "num_classes", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.BasicBlock.__init__": [[28, 40], ["torch.Module.__init__", "resnet_basic_shiftadd_se.conv1x1", "torch.BatchNorm2d", "resnet_basic_shiftadd_se.conv3x3", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.conv3 = conv1x1(planes, planes * self.expansion, threshold=threshold, sign_threshold=sign_threshold, distribution=distribution, quantize=quantize, weight_bits=weight_bits, sparsity=sparsity)", "\n", "# self.bn3 = nn.BatchNorm2d(planes * self.expansion)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.BasicBlock.forward": [[41, 62], ["resnet_basic_shiftadd_se.BasicBlock.conv1", "resnet_basic_shiftadd_se.BasicBlock.bn1", "resnet_basic_shiftadd_se.BasicBlock.relu", "resnet_basic_shiftadd_se.BasicBlock.conv2", "resnet_basic_shiftadd_se.BasicBlock.bn2", "resnet_basic_shiftadd_se.BasicBlock.relu", "resnet_basic_shiftadd_se.BasicBlock.relu", "resnet_basic_shiftadd_se.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "# out = self.conv3(out)", "\n", "# out = self.bn3(out)", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.Bottleneck.__init__": [[66, 78], ["torch.Module.__init__", "resnet_basic_shiftadd_se.conv1x1", "torch.BatchNorm2d", "resnet_basic_shiftadd_se.conv3x3", "torch.BatchNorm2d", "resnet_basic_shiftadd_se.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.Bottleneck.forward": [[79, 100], ["resnet_basic_shiftadd_se.Bottleneck.conv1", "resnet_basic_shiftadd_se.Bottleneck.bn1", "resnet_basic_shiftadd_se.Bottleneck.relu", "resnet_basic_shiftadd_se.Bottleneck.conv2", "resnet_basic_shiftadd_se.Bottleneck.bn2", "resnet_basic_shiftadd_se.Bottleneck.relu", "resnet_basic_shiftadd_se.Bottleneck.conv3", "resnet_basic_shiftadd_se.Bottleneck.bn3", "resnet_basic_shiftadd_se.Bottleneck.relu", "resnet_basic_shiftadd_se.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.ResNet.__init__": [[104, 132], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "resnet_basic_shiftadd_se.ResNet._make_layer", "resnet_basic_shiftadd_se.ResNet._make_layer", "resnet_basic_shiftadd_se.ResNet._make_layer", "resnet_basic_shiftadd_se.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.BatchNorm2d", "resnet_basic_shiftadd_se.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.ResNet._make_layer": [[134, 155], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_basic_shiftadd_se.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "stride", "=", "stride", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "threshold", "=", "self", ".", "threshold", ",", "\n", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.ResNet.forward": [[156, 172], ["resnet_basic_shiftadd_se.ResNet.conv1", "resnet_basic_shiftadd_se.ResNet.bn1", "resnet_basic_shiftadd_se.ResNet.relu", "resnet_basic_shiftadd_se.ResNet.maxpool", "resnet_basic_shiftadd_se.ResNet.layer1", "resnet_basic_shiftadd_se.ResNet.layer2", "resnet_basic_shiftadd_se.ResNet.layer3", "resnet_basic_shiftadd_se.ResNet.layer4", "resnet_basic_shiftadd_se.ResNet.avgpool", "resnet_basic_shiftadd_se.ResNet.fc", "resnet_basic_shiftadd_se.ResNet.bn2", "resnet_basic_shiftadd_se.ResNet.view", "resnet_basic_shiftadd_se.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv3x3": [[11, 16], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.conv1x1": [[18, 23], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.resnet18_shiftadd_se": [[173, 176], ["resnet_basic_shiftadd_se.ResNet"], "function", ["None"], ["", "", "def", "resnet18_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.resnet34_shiftadd_se": [[177, 180], ["resnet_basic_shiftadd_se.ResNet"], "function", ["None"], ["", "def", "resnet34_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet_basic_shiftadd_se.resnet50_shiftadd_se": [[182, 185], ["resnet_basic_shiftadd_se.ResNet"], "function", ["None"], ["", "def", "resnet50_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "1000", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd_se.CNN.__init__": [[22, 44], ["torch.Module.__init__", "CNN_shiftadd_se.conv_add", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "CNN_shiftadd_se.conv_add", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "CNN_shiftadd_se.last_fc", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.conv_add", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.conv_add", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd.last_fc"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sign_threshold", "=", "sign_threshold", "\n", "self", ".", "distribution", "=", "distribution", "\n", "\n", "self", ".", "conv1", "=", "conv_add", "(", "1", ",", "5", ",", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "5", ")", "\n", "self", ".", "conv2", "=", "conv_add", "(", "5", ",", "10", ",", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "# self.conv3 = nn.Conv2d(36, 24, kernel_size=(12, 1))", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "4", ",", "4", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "fc1", "=", "last_fc", "(", "8120", ",", "num_classes", ",", "threshold", "=", "self", ".", "threshold", ",", "sign_threshold", "=", "self", ".", "sign_threshold", ",", "distribution", "=", "self", ".", "distribution", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd_se.CNN.forward": [[45, 58], ["CNN_shiftadd_se.CNN.pool1", "CNN_shiftadd_se.CNN.pool2", "CNN_shiftadd_se.CNN.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "CNN_shiftadd_se.CNN.fc1", "CNN_shiftadd_se.CNN.fc2", "CNN_shiftadd_se.CNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CNN_shiftadd_se.CNN.size", "CNN_shiftadd_se.CNN.size", "CNN_shiftadd_se.CNN.bn1", "CNN_shiftadd_se.CNN.bn2", "CNN_shiftadd_se.CNN.conv1", "CNN_shiftadd_se.CNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "# x = self.pool(F.relu(self.conv3(x)))", "\n", "# x = torch.flatten(x, start_dim=1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "3", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# return F.softmax(x)", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd_se.conv_add": [[9, 14], ["se_shift.SEConv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv_add", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd_se.last_fc": [[15, 20], ["se_shift.SEConv2d"], "function", ["None"], ["", "def", "last_fc", "(", "in_planes", ",", "out_planes", ",", "threshold", ",", "sign_threshold", ",", "distribution", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "SEConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ")", "\n", "# add = adder.Adder2D(out_planes, out_planes, kernel_size=(1,1), stride=1, padding=padding, bias=False, quantize=quantize, weight_bits=weight_bits, sparsity=sparsity)", "\n", "return", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd_se.CNN_shiftadd_se": [[59, 63], ["CNN_shiftadd_se.CNN"], "function", ["None"], ["", "", "def", "CNN_shiftadd_se", "(", "threshold", ",", "sign_threshold", ",", "distribution", ",", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "CNN", "(", "num_classes", ",", "\n", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ",", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.__init__": [[11, 47], ["torch.Module.__init__", "adder.adder.quantize.QuantMeasure", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "CNN_mult.Mult2D.s.data.uniform_", "CNN_mult.Mult2D.register_buffer", "CNN_mult.Mult2D.set_mask", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.Tensor().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "CNN_mult.Mult2D.weight.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_channel", ",", "\n", "output_channel", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "momentum", "=", "0.9", ")", ":", "\n", "        ", "super", "(", "Mult2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "input_channel", "=", "input_channel", "\n", "self", ".", "output_channel", "=", "output_channel", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "quantize_input_fw", "=", "QuantMeasure", "(", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "momentum", "=", "momentum", ")", "\n", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ")", ")", ")", "\n", "self", ".", "qweight", "=", "None", "\n", "self", ".", "bias", "=", "bias", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "zeros", "(", "output_channel", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "            ", "self", ".", "s", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "nn", ".", "init", ".", "uniform_", "(", "torch", ".", "randn", "(", "\n", "output_channel", ",", "input_channel", ",", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ")", ")", ")", "\n", "self", ".", "s", ".", "data", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'weight_mask'", ",", "torch", ".", "Tensor", "(", "*", "self", ".", "weight", ".", "size", "(", ")", ")", ".", "float", "(", ")", ")", "\n", "self", ".", "set_mask", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.forward": [[48, 76], ["CNN_mult.Mult2D.quantize_input_fw", "adder.adder.quantize.calculate_qparams", "adder.adder.quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "adder.adder.quantize.quantize_grad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "CNN_mult.Mult2D.b.unsqueeze().unsqueeze().unsqueeze", "CNN_mult.Mult2D.b.unsqueeze().unsqueeze", "CNN_mult.Mult2D.b.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize_grad", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.conv2d"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "sparsity", "!=", "0", ":", "\n", "# apply mask", "\n", "            ", "self", ".", "weight", ".", "data", "=", "self", ".", "weight", ".", "data", "*", "self", ".", "weight_mask", ".", "data", "\n", "\n", "", "if", "self", ".", "quantize", "==", "True", ":", "\n", "# print('quantize to {} bits'.format(self.weight_bits))", "\n", "# quantization v2", "\n", "            ", "input_q", "=", "self", ".", "quantize_input_fw", "(", "input", ",", "self", ".", "weight_bits", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "self", ".", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "bias_fixed_point", "=", "None", "\n", "output", "=", "F", ".", "conv2d", "(", "input_q", ",", "\n", "self", ".", "qweight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "output", "=", "quantize_grad", "(", "output", ",", "num_bits", "=", "self", ".", "weight_bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "\n", "self", ".", "weight", ",", "\n", "None", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "b", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.round_weight_each_step": [[77, 100], ["adder.adder.quantize.calculate_qparams", "adder.adder.quantize.quantize", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "print", "torch.unique.size", "torch.unique.size", "torch.unique.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.calculate_qparams", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_quantize.quantize"], ["", "def", "round_weight_each_step", "(", "self", ",", "weight", ",", "bits", "=", "16", ")", ":", "\n", "# print('before quantize: ', input)", "\n", "# quantization v1", "\n", "# if bits == 1:", "\n", "#     return torch.sign(weight)", "\n", "# S = 2. ** (bits - 1)", "\n", "# if bits > 15 or bits == 1:", "\n", "#   delta = 0", "\n", "# else:", "\n", "#   delta = 1. / S", "\n", "# max_val = 1 - delta", "\n", "# min_val = delta - 1", "\n", "\n", "# weight_clamp = torch.clamp(weight, min_val, max_val)", "\n", "# qweight = torch.round(weight_clamp * S) / S", "\n", "# print('after quantize: ', input_round)", "\n", "\n", "# quantization v2", "\n", "        ", "weight_qparams", "=", "calculate_qparams", "(", "weight", ",", "num_bits", "=", "bits", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "weight_unique", "=", "torch", ".", "unique", "(", "qweight", "[", "0", "]", ")", "\n", "print", "(", "'add weight range:'", ",", "weight_unique", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", "\n", "return", "qweight", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.Mult2D.set_mask": [[101, 105], ["None"], "methods", ["None"], ["", "def", "set_mask", "(", "self", ")", ":", "\n", "# random fix zero", "\n", "        ", "self", ".", "weight_mask", ".", "data", "=", "(", "self", ".", "s", ">", "self", ".", "sparsity", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "weight_mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.CNN.__init__": [[113, 128], ["torch.Module.__init__", "CNN_mult.conv_mult", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "CNN_mult.conv_mult", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "CNN_mult.conv_mult", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.conv_mult", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.conv_mult", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.conv_mult"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "conv1", "=", "conv_mult", "(", "1", ",", "5", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "5", ")", "\n", "self", ".", "conv2", "=", "conv_mult", "(", "5", ",", "10", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "# self.conv3 = nn.Conv2d(36, 24, kernel_size=(12, 1))", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "4", ",", "4", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "fc1", "=", "conv_mult", "(", "8120", ",", "num_classes", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.CNN.forward": [[129, 142], ["CNN_mult.CNN.pool1", "CNN_mult.CNN.pool2", "CNN_mult.CNN.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "CNN_mult.CNN.fc1", "CNN_mult.CNN.fc2", "CNN_mult.CNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CNN_mult.CNN.size", "CNN_mult.CNN.size", "CNN_mult.CNN.bn1", "CNN_mult.CNN.bn2", "CNN_mult.CNN.conv1", "CNN_mult.CNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "# x = self.pool(F.relu(self.conv3(x)))", "\n", "# x = torch.flatten(x, start_dim=1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "3", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# return F.softmax(x)", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.conv_mult": [[106, 110], ["CNN_mult.Mult2D"], "function", ["None"], ["", "", "def", "conv_mult", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "Mult2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_mult.CNN_mult": [[143, 145], ["CNN_mult.CNN"], "function", ["None"], ["", "", "def", "CNN_mult", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "CNN", "(", "num_classes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd.CNN.__init__": [[21, 36], ["torch.Module.__init__", "CNN_shiftadd.conv_add", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "CNN_shiftadd.conv_add", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "CNN_shiftadd.last_fc", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.conv_add", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.conv_add", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd.last_fc"], ["\n", "", "class", "CNN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "conv1", "=", "conv_add", "(", "1", ",", "5", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "5", ")", "\n", "self", ".", "conv2", "=", "conv_add", "(", "5", ",", "10", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "# self.conv3 = nn.Conv2d(36, 24, kernel_size=(12, 1))", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "4", ",", "4", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "fc1", "=", "last_fc", "(", "8120", ",", "num_classes", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd.CNN.forward": [[37, 50], ["CNN_shiftadd.CNN.pool1", "CNN_shiftadd.CNN.pool2", "CNN_shiftadd.CNN.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "CNN_shiftadd.CNN.fc1", "CNN_shiftadd.CNN.fc2", "CNN_shiftadd.CNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CNN_shiftadd.CNN.size", "CNN_shiftadd.CNN.size", "CNN_shiftadd.CNN.bn1", "CNN_shiftadd.CNN.bn2", "CNN_shiftadd.CNN.conv1", "CNN_shiftadd.CNN.conv2"], "methods", ["None"], ["self", ".", "fc2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "# x = self.pool(F.relu(self.conv3(x)))", "\n", "# x = torch.flatten(x, start_dim=1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "3", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# return F.softmax(x)", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd.conv_add": [[8, 13], ["torch.Conv2d", "adder.adder.Adder2D", "torch.Sequential"], "function", ["None"], ["def", "conv_add", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd.last_fc": [[14, 19], ["torch.Conv2d", "adder.adder.Adder2D"], "function", ["None"], ["", "def", "last_fc", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "add", "=", "adder", ".", "Adder2D", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "return", "nn", ".", "Sequential", "(", "shift", ",", "add", ")", "\n", "# return shift", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shiftadd.CNN_shiftadd": [[51, 53], ["CNN_shiftadd.CNN"], "function", ["None"], ["return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "", "def", "CNN_shiftadd", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shift.CNN.__init__": [[15, 30], ["torch.Module.__init__", "CNN_shift.conv_shift", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "CNN_shift.conv_shift", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "CNN_shift.conv_shift", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shift.conv_shift", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shift.conv_shift", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shift.conv_shift"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "conv1", "=", "conv_shift", "(", "1", ",", "5", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "5", ")", "\n", "self", ".", "conv2", "=", "conv_shift", "(", "5", ",", "10", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "# self.conv3 = nn.Conv2d(36, 24, kernel_size=(12, 1))", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "4", ",", "4", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "fc1", "=", "conv_shift", "(", "8120", ",", "num_classes", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shift.CNN.forward": [[31, 44], ["CNN_shift.CNN.pool1", "CNN_shift.CNN.pool2", "CNN_shift.CNN.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "CNN_shift.CNN.fc1", "CNN_shift.CNN.fc2", "CNN_shift.CNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CNN_shift.CNN.size", "CNN_shift.CNN.size", "CNN_shift.CNN.bn1", "CNN_shift.CNN.bn2", "CNN_shift.CNN.conv1", "CNN_shift.CNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "# x = self.pool(F.relu(self.conv3(x)))", "\n", "# x = torch.flatten(x, start_dim=1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "3", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# return F.softmax(x)", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shift.conv_shift": [[8, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv_shift", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "shift", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "return", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_shift.CNN_shift": [[45, 47], ["CNN_shift.CNN"], "function", ["None"], ["", "", "def", "CNN_shift", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "CNN", "(", "num_classes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_add.CNN.__init__": [[15, 30], ["torch.Module.__init__", "CNN_add.conv_add", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "CNN_add.conv_add", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "CNN_add.conv_add", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.conv_add", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.conv_add", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.conv_add"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "weight_bits", "=", "weight_bits", "\n", "self", ".", "sparsity", "=", "sparsity", "\n", "\n", "self", ".", "conv1", "=", "conv_add", "(", "1", ",", "5", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "5", ")", "\n", "self", ".", "conv2", "=", "conv_add", "(", "5", ",", "10", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "# self.conv3 = nn.Conv2d(36, 24, kernel_size=(12, 1))", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "4", ",", "4", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "fc1", "=", "conv_add", "(", "8120", ",", "num_classes", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "quantize", "=", "self", ".", "quantize", ",", "weight_bits", "=", "self", ".", "weight_bits", ",", "sparsity", "=", "self", ".", "sparsity", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_add.CNN.forward": [[31, 44], ["CNN_add.CNN.pool1", "CNN_add.CNN.pool2", "CNN_add.CNN.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "CNN_add.CNN.fc1", "CNN_add.CNN.fc2", "CNN_add.CNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CNN_add.CNN.size", "CNN_add.CNN.size", "CNN_add.CNN.bn1", "CNN_add.CNN.bn2", "CNN_add.CNN.conv1", "CNN_add.CNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "# x = self.pool(F.relu(self.conv3(x)))", "\n", "# x = torch.flatten(x, start_dim=1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "3", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# return F.softmax(x)", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_add.conv_add": [[8, 12], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv_add", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.CNN_add.CNN_add": [[45, 47], ["CNN_add.CNN"], "function", ["None"], ["", "", "def", "CNN_add", "(", "num_classes", "=", "10", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ",", "quantize_v", "=", "'sbm'", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "CNN", "(", "num_classes", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.model_factory_dict.model_factory": [[25, 79], ["float", "model_dict.keys", "AttributeError"], "function", ["None"], ["def", "model_factory", "(", "model_name", ",", "**", "params", ")", ":", "\n", "    ", "model_dict", "=", "{", "\n", "'densenet121'", ":", "DenseNet121", ",", "\n", "'densenet169'", ":", "DenseNet169", ",", "\n", "'densenet201'", ":", "DenseNet201", ",", "\n", "'densenet161'", ":", "DenseNet161", ",", "\n", "'densenet-cifar'", ":", "densenet_cifar", ",", "\n", "'dual-path-net-26'", ":", "DPN26", ",", "\n", "'dual-path-net-92'", ":", "DPN92", ",", "\n", "'googlenet'", ":", "GoogLeNet", ",", "\n", "'lenet'", ":", "LeNet", ",", "\n", "'mobilenet'", ":", "MobileNet", ",", "\n", "'mobilenetv2'", ":", "MobileNetV2", ",", "\n", "'pnasneta'", ":", "PNASNetA", ",", "\n", "'pnasnetb'", ":", "PNASNetB", ",", "\n", "'preact-resnet18'", ":", "PreActResNet18", ",", "\n", "'preact-resnet34'", ":", "PreActResNet34", ",", "\n", "'preact-resnet50'", ":", "PreActResNet50", ",", "\n", "'preact-resnet101'", ":", "PreActResNet101", ",", "\n", "'preact-resnet152'", ":", "PreActResNet152", ",", "\n", "'resnet18'", ":", "ResNet18", ",", "\n", "'resnet34'", ":", "ResNet34", ",", "\n", "'resnet50'", ":", "ResNet50", ",", "\n", "'resnet101'", ":", "ResNet101", ",", "\n", "'resnet152'", ":", "ResNet152", ",", "\n", "'resnext29_2x64d'", ":", "ResNeXt29_2x64d", ",", "\n", "'resnext29_4x64d'", ":", "ResNeXt29_4x64d", ",", "\n", "'resnext29_8x64d'", ":", "ResNeXt29_8x64d", ",", "\n", "'resnext29_32x64d'", ":", "ResNeXt29_32x4d", ",", "\n", "'senet18'", ":", "SENet18", ",", "\n", "'shufflenetg2'", ":", "ShuffleNetG2", ",", "\n", "'shufflenetg3'", ":", "ShuffleNetG3", ",", "\n", "'shufflenetv2_0.5'", ":", "ShuffleNetV2", ",", "\n", "'shufflenetv2_1.0'", ":", "ShuffleNetV2", ",", "\n", "'shufflenetv2_1.5'", ":", "ShuffleNetV2", ",", "\n", "'shufflenetv2_2.0'", ":", "ShuffleNetV2", ",", "\n", "'vgg11'", ":", "VGG", ",", "\n", "'vgg13'", ":", "VGG", ",", "\n", "'vgg16'", ":", "VGG", ",", "\n", "'vgg19'", ":", "VGG", ",", "\n", "'resnet20_add'", ":", "resnet20_add", ",", "\n", "'resnet20_shift'", ":", "resnet20_shift", ",", "\n", "'resnet20_shiftadd'", ":", "resnet20_shiftadd", ",", "\n", "'resnet20_shiftadd_se'", ":", "resnet20_shiftadd_se", ",", "\n", "}", "\n", "\n", "if", "'vgg'", "in", "model_name", ":", "\n", "        ", "return", "model_dict", "[", "model_name", "]", "(", "model_name", ")", "\n", "", "elif", "'shufflenetv2'", "in", "model_name", ":", "\n", "        ", "return", "model_dict", "[", "model_name", "]", "(", "float", "(", "model_name", "[", "-", "3", ":", "]", ")", ")", "\n", "", "elif", "model_name", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "        ", "return", "model_dict", "[", "model_name", "]", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "AttributeError", "(", "'Model doesn\\'t exist'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenet.Block.__init__": [[14, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "in_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenet.Block.forward": [[34, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenet.MobileNet.__init__": [[47, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenet.MobileNet._make_layers": [[55, 63], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenet.MobileNet.forward": [[64, 71], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenet.test": [[73, 78], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg.VGG.__init__": [[21, 25], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg.VGG.forward": [[26, 31], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg.VGG._make_layers": [[32, 47], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.vgg.test": [[49, 54], ["vgg.VGG", "torch.randn", "torch.randn", "VGG.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "VGG", "(", "'vgg11'", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.Block.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.Block.forward": [[32, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.MobileNetV2.__init__": [[50, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.MobileNetV2._make_layers": [[60, 68], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.MobileNetV2.forward": [[69, 78], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.mobilenetv2.test": [[80, 85], ["mobilenetv2.MobileNetV2", "torch.randn", "torch.randn", "torch.randn", "MobileNetV2.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.SepConv.__init__": [[12, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.SepConv.forward": [[20, 22], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.CellA.__init__": [[25, 32], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.CellA.forward": [[33, 39], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.CellB.__init__": [[41, 55], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.CellB.forward": [[56, 70], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNet.__init__": [[72, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNet._make_layer": [[88, 94], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNet._downsample": [[95, 99], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNetA": [[112, 114], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNetB": [[115, 117], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.test": [[119, 124], ["pnasnet.PNASNetB", "torch.randn", "torch.randn", "torch.randn", "PNASNetB.", "print"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.lenet.LeNet.__init__": [[7, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.lenet.LeNet.forward": [[15, 25], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.lenet.test": [[27, 32], ["lenet.LeNet", "torch.randn", "torch.randn", "LeNet.", "print"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "LeNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.Bottleneck.__init__": [[8, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "\n", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "in_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "32", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "last_planes", ",", "\n", "out_planes", "+", "dense_depth", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.Bottleneck.forward": [[40, 51], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "\n", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "\n", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.DPN.__init__": [[54, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "in_planes", "[", "0", "]", ",", "\n", "out_planes", "[", "0", "]", ",", "\n", "num_blocks", "[", "0", "]", ",", "\n", "dense_depth", "[", "0", "]", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "in_planes", "[", "1", "]", ",", "\n", "out_planes", "[", "1", "]", ",", "\n", "num_blocks", "[", "1", "]", ",", "\n", "dense_depth", "[", "1", "]", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "in_planes", "[", "2", "]", ",", "\n", "out_planes", "[", "2", "]", ",", "\n", "num_blocks", "[", "2", "]", ",", "\n", "dense_depth", "[", "2", "]", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "in_planes", "[", "3", "]", ",", "\n", "out_planes", "[", "3", "]", ",", "\n", "num_blocks", "[", "3", "]", ",", "\n", "dense_depth", "[", "3", "]", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "\n", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.DPN._make_layer": [[90, 100], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "\n", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "\n", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.DPN.forward": [[101, 111], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.DPN26": [[113, 121], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.DPN92": [[123, 131], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.test": [[133, 138], ["dpn.DPN92", "torch.randn", "torch.randn", "torch.randn", "DPN92.", "print"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.ShuffleBlock.forward": [[15, 21], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "\n", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.Bottleneck.__init__": [[24, 50], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "mid_planes", ",", "\n", "mid_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "mid_planes", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.Bottleneck.forward": [[51, 60], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "\n", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.ShuffleNet.__init__": [[63, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.ShuffleNet._make_layer": [[77, 90], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "\n", "Bottleneck", "(", "\n", "self", ".", "in_planes", ",", "\n", "out_planes", "-", "cat_planes", ",", "\n", "stride", "=", "stride", ",", "\n", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.ShuffleNet.forward": [[91, 100], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.ShuffleNetG2": [[102, 105], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "'groups'", ":", "2", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.ShuffleNetG3": [[107, 110], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "'groups'", ":", "3", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.test": [[112, 117], ["shufflenet.ShuffleNetG2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetG2.", "print"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", "=", "2", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.ShuffleBlock.forward": [[15, 21], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "\n", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.SplitBlock.__init__": [[24, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "super", "(", "SplitBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.SplitBlock.forward": [[28, 31], ["int", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", "=", "int", "(", "x", ".", "size", "(", "1", ")", "*", "self", ".", "ratio", ")", "\n", "return", "x", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.BasicBlock.__init__": [[34, 54], ["torch.Module.__init__", "shufflenetv2.SplitBlock", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "split_ratio", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "SplitBlock", "(", "split_ratio", ")", "\n", "in_channels", "=", "int", "(", "in_channels", "*", "split_ratio", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_channels", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.BasicBlock.forward": [[55, 63], ["shufflenetv2.BasicBlock.split", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.BasicBlock.shuffle", "shufflenetv2.BasicBlock.bn1", "shufflenetv2.BasicBlock.conv2", "shufflenetv2.BasicBlock.bn3", "shufflenetv2.BasicBlock.conv1", "shufflenetv2.BasicBlock.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "self", ".", "split", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x2", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "out", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.DownBlock.__init__": [[66, 100], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "2", "\n", "# left", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "in_channels", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "# right", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "\n", "mid_channels", ",", "\n", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "mid_channels", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "\n", "mid_channels", ",", "mid_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.DownBlock.forward": [[101, 113], ["shufflenetv2.DownBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.DownBlock.bn4", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.DownBlock.shuffle", "shufflenetv2.DownBlock.conv1", "shufflenetv2.DownBlock.bn2", "shufflenetv2.DownBlock.bn3", "shufflenetv2.DownBlock.conv4", "shufflenetv2.DownBlock.bn5", "shufflenetv2.DownBlock.conv2", "shufflenetv2.DownBlock.conv3", "shufflenetv2.DownBlock.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# left", "\n", "        ", "out1", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out1", ")", ")", ")", "\n", "# right", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "out2", "=", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "out2", ")", ")", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "out2", ")", ")", ")", "\n", "# concat", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.ShuffleNetV2.__init__": [[116, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "net_size", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "configs", "[", "net_size", "]", "[", "'out_channels'", "]", "\n", "num_blocks", "=", "configs", "[", "net_size", "]", "[", "'num_blocks'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "24", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_channels", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "out_channels", "[", "2", "]", ",", "\n", "out_channels", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "[", "3", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_channels", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.ShuffleNetV2._make_layer": [[138, 144], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.DownBlock", "layers.append", "shufflenetv2.BasicBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ")", ":", "\n", "        ", "layers", "=", "[", "DownBlock", "(", "self", ".", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock", "(", "out_channels", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.ShuffleNetV2.forward": [[145, 156], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv2.ShuffleNetV2.layer1", "shufflenetv2.ShuffleNetV2.layer2", "shufflenetv2.ShuffleNetV2.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenetv2.ShuffleNetV2.view", "shufflenetv2.ShuffleNetV2.linear", "shufflenetv2.ShuffleNetV2.bn1", "shufflenetv2.ShuffleNetV2.bn2", "shufflenetv2.ShuffleNetV2.size", "shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.conv2"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# out = F.max_pool2d(out, 3, stride=2, padding=1)", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.shufflenetv2.test": [[178, 183], ["shufflenetv2.ShuffleNetV2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetV2.", "print"], "function", ["None"], ["def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetV2", "(", "net_size", "=", "0.5", ")", "\n", "x", "=", "torch", ".", "randn", "(", "3", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet18": [[121, 123], ["resnet.ResNet"], "function", ["None"], ["        ", "self", ".", "weight_mask", ".", "data", "=", "(", "self", ".", "s", ">", "self", ".", "sparsity", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "weight_mask", ".", "requires_grad", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet34": [[125, 127], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "Mult2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet50": [[129, 131], ["resnet.ResNet"], "function", ["None"], ["\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet101": [[133, 135], ["resnet.ResNet"], "function", ["None"], ["\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnet.ResNet152": [[137, 139], ["resnet.ResNet"], "function", ["None"], ["self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", "=", "stride", ",", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.BasicBlock.__init__": [[11, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", "//", "16", ",", "\n", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.BasicBlock.forward": [[41, 55], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.PreActBlock.__init__": [[58, 84], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.PreActBlock.forward": [[85, 100], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.SENet.__init__": [[103, 115], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.SENet._make_layer": [[116, 123], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.SENet.forward": [[124, 134], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.SENet18": [[136, 138], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.test": [[140, 144], ["senet.SENet18", "SENet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.Bottleneck.__init__": [[10, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.Bottleneck.forward": [[19, 24], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.Transition.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.Transition.forward": [[32, 36], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.wideres_shiftadd.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet.__init__": [[39, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "nblocks", ",", "\n", "growth_rate", "=", "12", ",", "\n", "reduction", "=", "0.5", ",", "\n", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet._make_dense_layers": [[76, 82], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet.forward": [[83, 93], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet121": [[95, 97], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet169": [[99, 101], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet201": [[103, 105], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.DenseNet161": [[107, 109], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.densenet_cifar": [[111, 113], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.test": [[115, 120], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.densenet.densenet_cifar"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.Block.__init__": [[14, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "\n", "group_width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "cardinality", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "\n", "self", ".", "expansion", "*", "group_width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "group_width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.Block.forward": [[47, 54], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.ResNeXt.__init__": [[57, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_blocks", ",", "\n", "cardinality", ",", "\n", "bottleneck_width", ",", "\n", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "\n", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.ResNeXt._make_layer": [[76, 87], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "\n", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.ResNeXt.forward": [[88, 98], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.ResNeXt29_2x64d": [[100, 102], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.ResNeXt29_4x64d": [[104, 106], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.ResNeXt29_8x64d": [[108, 110], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.ResNeXt29_32x4d": [[112, 114], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.test": [[116, 121], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.resnext.ResNeXt29_2x64d"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.googlenet.Inception.__init__": [[8, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.googlenet.Inception.forward": [[48, 54], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.googlenet.GoogLeNet.__init__": [[57, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.googlenet.GoogLeNet.forward": [[82, 99], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.googlenet.test": [[101, 106], ["googlenet.GoogLeNet", "torch.randn", "torch.randn", "torch.randn", "GoogLeNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "GoogLeNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActBlock.__init__": [[16, 38], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActBlock.forward": [[39, 46], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActBottleneck.__init__": [[52, 76], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActBottleneck.forward": [[77, 85], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet.__init__": [[88, 99], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet._make_layer": [[100, 107], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet.forward": [[108, 118], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.kernels.kernels.linear"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet18": [[120, 122], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet34": [[124, 126], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet50": [[128, 130], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet101": [[132, 134], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet152": [[136, 138], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.test": [[140, 144], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.CNN.__init__": [[28, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "5", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "5", ",", "10", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "# self.conv3 = nn.Conv2d(36, 24, kernel_size=(12, 1))", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "4", ",", "4", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "# self.fc1 = nn.Linear(8120, 120)", "\n", "# self.fc2 = nn.Linear(120, num_classes)", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "8120", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.CNN.forward": [[42, 58], ["print", "MHEALTH_fp16.CNN.pool1", "print", "MHEALTH_fp16.CNN.pool2", "print", "MHEALTH_fp16.CNN.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "MHEALTH_fp16.CNN.fc1", "MHEALTH_fp16.CNN.fc2", "MHEALTH_fp16.CNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "MHEALTH_fp16.CNN.size", "MHEALTH_fp16.CNN.size", "MHEALTH_fp16.CNN.bn1", "MHEALTH_fp16.CNN.bn2", "MHEALTH_fp16.CNN.conv1", "MHEALTH_fp16.CNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "print", "(", "inputs", ".", "shape", ")", "\n", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "# x = self.pool(F.relu(self.conv3(x)))", "\n", "# x = torch.flatten(x, start_dim=1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "3", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# return F.softmax(x)", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.MHEALTH.__init__": [[61, 83], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.argmax", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "MHEALTH_fp16.MHEALTH.target.reshape", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_data", ",", "input_data_labels", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "input_data", ")", ".", "float", "(", ")", "\n", "temp_arr", "=", "input_data_labels", "\n", "final_arr", "=", "[", "]", "\n", "final_arr", "=", "np", ".", "argmax", "(", "temp_arr", ",", "axis", "=", "1", ")", "\n", "# final_arr = temp_arr", "\n", "# Reshaping array to get normalized feature vector", "\n", "# for x in temp_arr:", "\n", "#     number_of_features = 12", "\n", "\n", "#     temp_a = [0. for x in range(number_of_features + 1)]", "\n", "#     temp_a[int(x)-1] = 1.", "\n", "#     final_arr.append(temp_a)", "\n", "\n", "final_arr", "=", "np", ".", "asarray", "(", "final_arr", ")", "\n", "self", ".", "target", "=", "torch", ".", "from_numpy", "(", "final_arr", ")", ".", "float", "(", ")", "# Labels for input", "\n", "self", ".", "target", "=", "self", ".", "target", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "self", ".", "n_samples", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "# Length of input", "\n", "\n", "print", "(", "self", ".", "data", ".", "shape", ")", "\n", "# print(self.target)", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.MHEALTH.__len__": [[85, 87], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "# Length of the dataset.", "\n", "        ", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.MHEALTH.__getitem__": [[88, 90], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "# Function that returns one point and one label.", "\n", "        ", "return", "torch", ".", "Tensor", "(", "self", ".", "data", "[", "index", "]", ")", ",", "torch", ".", "Tensor", "(", "self", ".", "target", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.tofp16.__init__": [[206, 211], ["torch.Module.__init__", "input.half"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "tofp16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "            ", "return", "input", ".", "half", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.conv_add": [[22, 26], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv_add", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.check_neighboring": [[135, 144], ["range", "len", "len"], "function", ["None"], ["", "def", "check_neighboring", "(", "sis", ",", "elem1", ",", "elem2", ")", ":", "\n", "    ", "if", "(", "len", "(", "sis", ")", "==", "1", ")", ":", "\n", "        ", "return", "False", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sis", ")", "-", "1", ")", ":", "\n", "        ", "if", "sis", "[", "i", "]", "==", "elem1", "and", "sis", "[", "i", "+", "1", "]", "==", "elem2", ":", "\n", "            ", "return", "True", "\n", "", "if", "sis", "[", "i", "]", "==", "elem2", "and", "sis", "[", "i", "+", "1", "]", "==", "elem1", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.activity_image": [[145, 178], ["numpy.arange", "sis.append", "numpy.array", "numpy.transpose", "numpy.fft.fftshift", "numpy.transpose", "np.array.append", "len", "MHEALTH_fp16.check_neighboring", "sis.append"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.check_neighboring"], ["", "def", "activity_image", "(", "raw_signals", ")", ":", "\n", "    ", "seq", "=", "np", ".", "arange", "(", "0", ",", "raw_signals", ".", "shape", "[", "3", "]", ",", "1", ")", "\n", "sis", "=", "[", "]", "\n", "n_sis", "=", "1", "\n", "i", "=", "0", "\n", "j", "=", "i", "+", "1", "\n", "sis", ".", "append", "(", "i", ")", "\n", "while", "i", "!=", "j", ":", "\n", "        ", "if", "j", "==", "len", "(", "seq", ")", ":", "\n", "            ", "j", "=", "0", "\n", "", "elif", "check_neighboring", "(", "sis", ",", "i", ",", "j", ")", "==", "False", ":", "\n", "            ", "sis", ".", "append", "(", "j", ")", "\n", "i", "=", "j", "\n", "j", "=", "j", "+", "1", "\n", "", "else", ":", "\n", "            ", "j", "=", "j", "+", "1", "\n", "\n", "", "", "output", "=", "[", "]", "\n", "for", "sample", "in", "raw_signals", ":", "\n", "        ", "signal_image", "=", "sample", "[", "0", "]", "\n", "signal_image", "=", "signal_image", "[", ":", ",", "sis", "]", "\n", "signal_image", "=", "np", ".", "transpose", "(", "signal_image", ")", "\n", "\n", "fshift", "=", "np", ".", "fft", ".", "fftshift", "(", "signal_image", ")", "\n", "fshift", "=", "np", ".", "transpose", "(", "fshift", ")", "\n", "# import cv2", "\n", "# cv2.imshow('tete', magnitude_spectrum)", "\n", "# cv2.waitKey(1000)", "\n", "\n", "output", ".", "append", "(", "[", "fshift", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "array", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.prep_param_list": [[197, 204], ["p.detach().clone().float", "model.parameters", "p.detach().clone", "p.detach"], "function", ["None"], ["def", "prep_param_list", "(", "model", ")", ":", "\n", "    ", "model_params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "master_params", "=", "[", "p", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "float", "(", ")", "for", "p", "in", "model_params", "]", "\n", "for", "p", "in", "master_params", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "\n", "", "return", "model_params", ",", "master_params", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.BN_convert_float": [[212, 218], ["isinstance", "module.children", "module.float", "MHEALTH_fp16.BN_convert_float"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.BN_convert_float"], ["", "", "", "def", "BN_convert_float", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "float", "(", ")", "\n", "", "for", "child", "in", "module", ".", "children", "(", ")", ":", "\n", "        ", "BN_convert_float", "(", "child", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.network_to_half": [[219, 221], ["torch.Sequential", "MHEALTH_fp16.tofp16", "MHEALTH_fp16.BN_convert_float"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.BN_convert_float"], ["", "def", "network_to_half", "(", "network", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "tofp16", "(", ")", ",", "BN_convert_float", "(", "network", ".", "half", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.get_model": [[222, 263], ["MHEALTH_fp16.network_to_half", "MHEALTH_fp16.prep_param_list", "network_to_half.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "deepshift.convert.convert_to_shift", "network_to_half.cuda", "name.endswith", "model_sign_params.append", "name.endswith", "model_shift_params.append", "model_other_params.append"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.network_to_half", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.prep_param_list", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.convert.convert_to_shift"], ["", "def", "get_model", "(", ")", ":", "\n", "    ", "if", "not", "'se'", "in", "args", ".", "arch", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "n_class", ",", "quantize", "=", "args", ".", "add_quant", ",", "weight_bits", "=", "args", ".", "add_bits", ",", "quantize_v", "=", "args", ".", "quantize_v", ")", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "5e-3", "\n", "sign_threshold", "=", "0.5", "\n", "distribution", "=", "'kaiming_normal'", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "\n", "num_classes", "=", "n_class", ",", "quantize", "=", "args", ".", "add_quant", ",", "weight_bits", "=", "args", ".", "add_bits", ",", "quantize_v", "=", "args", ".", "quantize_v", ")", "\n", "", "if", "'shift'", "in", "args", ".", "arch", ":", "# no pretrain", "\n", "        ", "model", ",", "_", "=", "convert_to_shift", "(", "model", ",", "args", ".", "shift_depth", ",", "args", ".", "shift_type", ",", "convert_weights", "=", "False", ",", "use_kernel", "=", "args", ".", "use_kernel", ",", "rounding", "=", "args", ".", "rounding", ",", "\n", "weight_bits", "=", "args", ".", "weight_bits", ",", "sign_threshold_ps", "=", "args", ".", "sign_threshold_ps", ",", "quant_bits", "=", "args", ".", "shift_quant_bits", ")", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "model", "=", "network_to_half", "(", "model", ")", "\n", "model_params", ",", "master_params", "=", "prep_param_list", "(", "model", ")", "\n", "\n", "\n", "model_other_params", "=", "[", "]", "\n", "model_sign_params", "=", "[", "]", "\n", "model_shift_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "(", "name", ".", "endswith", "(", "\".sign\"", ")", ")", ":", "\n", "            ", "model_sign_params", ".", "append", "(", "param", ")", "\n", "", "elif", "(", "name", ".", "endswith", "(", "\".shift\"", ")", ")", ":", "\n", "            ", "model_shift_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "model_other_params", ".", "append", "(", "param", ")", "\n", "\n", "", "", "params_dict", "=", "[", "\n", "{", "\"params\"", ":", "model_other_params", "}", ",", "\n", "{", "\"params\"", ":", "model_sign_params", ",", "'lr'", ":", "args", ".", "lr_sign", "if", "args", ".", "lr_sign", "is", "not", "None", "else", "args", ".", "lr", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "\"params\"", ":", "model_shift_params", ",", "'lr'", ":", "args", ".", "lr", ",", "'weight_decay'", ":", "0", "}", "\n", "]", "\n", "\n", "# optimizer = torch.optim.Adam(model.parameters(), args.lr, weight_decay=args.weight_decay)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "master_params", ",", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "return", "model", ",", "optimizer", ",", "model_params", ",", "master_params", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.accuracy": [[273, 287], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.train": [[289, 322], ["model.train", "time.time", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "loss.float.float", "loss.float.item", "MHEALTH_fp16.accuracy", "prec1.item", "loss.float.backward", "model_grads_to_master_grads", "optimizer.step", "master_params_to_model_params", "len", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.squeeze.long", "print", "len", "torch.cuda", "torch.squeeze.cuda", "len", "loss.float.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.train", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.step"], ["", "def", "train", "(", "epoch", ",", "train_loader", ",", "model_params", ",", "master_params", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# batch_time = time.time()", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "squeeze", "(", "target", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# print(output[0])", "\n", "# print(target, torch.argmax(output, axis=1))", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ".", "long", "(", ")", ")", "\n", "loss", "=", "loss", "*", "_LOSS_SCALE", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "model_grads_to_master_grads", "(", "model_params", ",", "master_params", ")", "\n", "for", "params", "in", "master_params", ":", "\n", "            ", "params", ".", "grad", ".", "data", "=", "params", ".", "grad", ".", "data", "/", "_LOSS_SCALE", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "master_params_to_model_params", "(", "model_params", ",", "master_params", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.test": [[325, 345], ["model.eval", "len", "print", "model", "torch.cross_entropy().item", "MHEALTH_fp16.accuracy", "prec1.item", "prec5.item", "numpy.round", "numpy.round", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "len", "torch.cuda", "torch.squeeze.cuda", "torch.cross_entropy", "len", "len", "len", "len", "torch.squeeze.long"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "test", "(", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "test_acc_5", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "squeeze", "(", "target", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ".", "long", "(", ")", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "test_acc_5", "+=", "prec5", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Prec1: {}/{} ({:.2f}%), Prec5: ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ",", "test_acc_5", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_5", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH_fp16.save_checkpoint": [[346, 357], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "# filename = os.path.join(filepath, 'ckpt'+str(epoch)+'.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.CNN.__init__": [[28, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "5", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "5", ",", "10", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "# self.conv3 = nn.Conv2d(36, 24, kernel_size=(12, 1))", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "4", ",", "4", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "# self.fc1 = nn.Linear(8120, 120)", "\n", "# self.fc2 = nn.Linear(120, num_classes)", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "8120", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.CNN.forward": [[42, 58], ["print", "MHEALTH.CNN.pool1", "print", "MHEALTH.CNN.pool2", "print", "MHEALTH.CNN.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "MHEALTH.CNN.fc1", "MHEALTH.CNN.fc2", "MHEALTH.CNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "MHEALTH.CNN.size", "MHEALTH.CNN.size", "MHEALTH.CNN.bn1", "MHEALTH.CNN.bn2", "MHEALTH.CNN.conv1", "MHEALTH.CNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "print", "(", "inputs", ".", "shape", ")", "\n", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "# x = self.pool(F.relu(self.conv3(x)))", "\n", "# x = torch.flatten(x, start_dim=1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "3", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# return F.softmax(x)", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.MHEALTH.__init__": [[61, 83], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.argmax", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "MHEALTH.MHEALTH.target.reshape", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_data", ",", "input_data_labels", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "input_data", ")", ".", "float", "(", ")", "\n", "temp_arr", "=", "input_data_labels", "\n", "final_arr", "=", "[", "]", "\n", "final_arr", "=", "np", ".", "argmax", "(", "temp_arr", ",", "axis", "=", "1", ")", "\n", "# final_arr = temp_arr", "\n", "# Reshaping array to get normalized feature vector", "\n", "# for x in temp_arr:", "\n", "#     number_of_features = 12", "\n", "\n", "#     temp_a = [0. for x in range(number_of_features + 1)]", "\n", "#     temp_a[int(x)-1] = 1.", "\n", "#     final_arr.append(temp_a)", "\n", "\n", "final_arr", "=", "np", ".", "asarray", "(", "final_arr", ")", "\n", "self", ".", "target", "=", "torch", ".", "from_numpy", "(", "final_arr", ")", ".", "float", "(", ")", "# Labels for input", "\n", "self", ".", "target", "=", "self", ".", "target", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "self", ".", "n_samples", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "# Length of input", "\n", "\n", "print", "(", "self", ".", "data", ".", "shape", ")", "\n", "# print(self.target)", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.MHEALTH.__len__": [[85, 87], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "# Length of the dataset.", "\n", "        ", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.MHEALTH.__getitem__": [[88, 90], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "# Function that returns one point and one label.", "\n", "        ", "return", "torch", ".", "Tensor", "(", "self", ".", "data", "[", "index", "]", ")", ",", "torch", ".", "Tensor", "(", "self", ".", "target", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.conv_add": [[22, 26], ["adder.adder.Adder2D"], "function", ["None"], ["def", "conv_add", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "quantize", "=", "False", ",", "weight_bits", "=", "8", ",", "sparsity", "=", "0", ")", ":", "\n", "    ", "\" 3x3 convolution with padding \"", "\n", "return", "adder", ".", "Adder2D", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "\n", "quantize", "=", "quantize", ",", "weight_bits", "=", "weight_bits", ",", "sparsity", "=", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.check_neighboring": [[135, 144], ["range", "len", "len"], "function", ["None"], ["", "def", "check_neighboring", "(", "sis", ",", "elem1", ",", "elem2", ")", ":", "\n", "    ", "if", "(", "len", "(", "sis", ")", "==", "1", ")", ":", "\n", "        ", "return", "False", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sis", ")", "-", "1", ")", ":", "\n", "        ", "if", "sis", "[", "i", "]", "==", "elem1", "and", "sis", "[", "i", "+", "1", "]", "==", "elem2", ":", "\n", "            ", "return", "True", "\n", "", "if", "sis", "[", "i", "]", "==", "elem2", "and", "sis", "[", "i", "+", "1", "]", "==", "elem1", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.activity_image": [[145, 178], ["numpy.arange", "sis.append", "numpy.array", "numpy.transpose", "numpy.fft.fftshift", "numpy.transpose", "np.array.append", "len", "MHEALTH.check_neighboring", "sis.append"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.check_neighboring"], ["", "def", "activity_image", "(", "raw_signals", ")", ":", "\n", "    ", "seq", "=", "np", ".", "arange", "(", "0", ",", "raw_signals", ".", "shape", "[", "3", "]", ",", "1", ")", "\n", "sis", "=", "[", "]", "\n", "n_sis", "=", "1", "\n", "i", "=", "0", "\n", "j", "=", "i", "+", "1", "\n", "sis", ".", "append", "(", "i", ")", "\n", "while", "i", "!=", "j", ":", "\n", "        ", "if", "j", "==", "len", "(", "seq", ")", ":", "\n", "            ", "j", "=", "0", "\n", "", "elif", "check_neighboring", "(", "sis", ",", "i", ",", "j", ")", "==", "False", ":", "\n", "            ", "sis", ".", "append", "(", "j", ")", "\n", "i", "=", "j", "\n", "j", "=", "j", "+", "1", "\n", "", "else", ":", "\n", "            ", "j", "=", "j", "+", "1", "\n", "\n", "", "", "output", "=", "[", "]", "\n", "for", "sample", "in", "raw_signals", ":", "\n", "        ", "signal_image", "=", "sample", "[", "0", "]", "\n", "signal_image", "=", "signal_image", "[", ":", ",", "sis", "]", "\n", "signal_image", "=", "np", ".", "transpose", "(", "signal_image", ")", "\n", "\n", "fshift", "=", "np", ".", "fft", ".", "fftshift", "(", "signal_image", ")", "\n", "fshift", "=", "np", ".", "transpose", "(", "fshift", ")", "\n", "# import cv2", "\n", "# cv2.imshow('tete', magnitude_spectrum)", "\n", "# cv2.waitKey(1000)", "\n", "\n", "output", ".", "append", "(", "[", "fshift", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "array", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.get_model": [[196, 233], ["model.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "deepshift.convert.convert_to_shift", "model.cuda", "name.endswith", "model.parameters", "model_sign_params.append", "name.endswith", "model_shift_params.append", "model_other_params.append"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.deepshift.convert.convert_to_shift"], ["def", "get_model", "(", ")", ":", "\n", "    ", "if", "not", "'se'", "in", "args", ".", "arch", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "n_class", ",", "quantize", "=", "args", ".", "add_quant", ",", "weight_bits", "=", "args", ".", "add_bits", ",", "quantize_v", "=", "args", ".", "quantize_v", ")", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "5e-3", "\n", "sign_threshold", "=", "0.5", "\n", "distribution", "=", "'kaiming_normal'", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "threshold", "=", "threshold", ",", "sign_threshold", "=", "sign_threshold", ",", "distribution", "=", "distribution", ",", "\n", "num_classes", "=", "n_class", ",", "quantize", "=", "args", ".", "add_quant", ",", "weight_bits", "=", "args", ".", "add_bits", ",", "quantize_v", "=", "args", ".", "quantize_v", ")", "\n", "", "if", "'shift'", "in", "args", ".", "arch", ":", "# no pretrain", "\n", "        ", "model", ",", "_", "=", "convert_to_shift", "(", "model", ",", "args", ".", "shift_depth", ",", "args", ".", "shift_type", ",", "convert_weights", "=", "False", ",", "use_kernel", "=", "args", ".", "use_kernel", ",", "rounding", "=", "args", ".", "rounding", ",", "\n", "weight_bits", "=", "args", ".", "weight_bits", ",", "sign_threshold_ps", "=", "args", ".", "sign_threshold_ps", ",", "quant_bits", "=", "args", ".", "shift_quant_bits", ")", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "model_other_params", "=", "[", "]", "\n", "model_sign_params", "=", "[", "]", "\n", "model_shift_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "(", "name", ".", "endswith", "(", "\".sign\"", ")", ")", ":", "\n", "            ", "model_sign_params", ".", "append", "(", "param", ")", "\n", "", "elif", "(", "name", ".", "endswith", "(", "\".shift\"", ")", ")", ":", "\n", "            ", "model_shift_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "model_other_params", ".", "append", "(", "param", ")", "\n", "\n", "", "", "params_dict", "=", "[", "\n", "{", "\"params\"", ":", "model_other_params", "}", ",", "\n", "{", "\"params\"", ":", "model_sign_params", ",", "'lr'", ":", "args", ".", "lr_sign", "if", "args", ".", "lr_sign", "is", "not", "None", "else", "args", ".", "lr", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "\"params\"", ":", "model_shift_params", ",", "'lr'", ":", "args", ".", "lr", ",", "'weight_decay'", ":", "0", "}", "\n", "]", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.accuracy": [[242, 256], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.train": [[258, 285], ["model.train", "time.time", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "MHEALTH.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.squeeze.long", "print", "len", "torch.cuda", "torch.squeeze.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.train", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.step"], ["", "def", "train", "(", "epoch", ",", "train_loader", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# batch_time = time.time()", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "squeeze", "(", "target", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# print(output[0])", "\n", "# print(target, torch.argmax(output, axis=1))", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ".", "long", "(", ")", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.test": [[288, 308], ["model.eval", "len", "print", "model", "torch.cross_entropy().item", "MHEALTH.accuracy", "prec1.item", "prec5.item", "numpy.round", "numpy.round", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "len", "torch.cuda", "torch.squeeze.cuda", "torch.cross_entropy", "len", "len", "len", "len", "torch.squeeze.long"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "test", "(", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "test_acc_5", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "squeeze", "(", "target", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ".", "long", "(", ")", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "test_acc_5", "+=", "prec5", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Prec1: {}/{} ({:.2f}%), Prec5: ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ",", "test_acc_5", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_5", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.MHEALTH.MHEALTH.save_checkpoint": [[309, 320], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "# filename = os.path.join(filepath, 'ckpt'+str(epoch)+'.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.CNN.__init__": [[23, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "5", ",", "kernel_size", "=", "(", "12", ",", "5", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "5", ",", "10", ",", "kernel_size", "=", "(", "5", ",", "1", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "# self.conv3 = nn.Conv2d(36, 24, kernel_size=(12, 1))", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "(", "4", ",", "4", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", "# self.fc1 = nn.Linear(8120, 120)", "\n", "# self.fc2 = nn.Linear(120, num_classes)", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "590", ",", "num_classes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "BatchNorm2d", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.CNN.forward": [[37, 53], ["print", "USCHAD.CNN.pool1", "print", "USCHAD.CNN.pool2", "print", "USCHAD.CNN.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "USCHAD.CNN.fc1", "USCHAD.CNN.fc2", "USCHAD.CNN.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "USCHAD.CNN.size", "USCHAD.CNN.size", "USCHAD.CNN.bn1", "USCHAD.CNN.bn2", "USCHAD.CNN.conv1", "USCHAD.CNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "print", "(", "inputs", ".", "shape", ")", "\n", "x", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "inputs", ")", ")", ")", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", ")", "\n", "print", "(", "x", ".", "shape", ")", "\n", "# x = self.pool(F.relu(self.conv3(x)))", "\n", "# x = torch.flatten(x, start_dim=1)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "3", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# return F.softmax(x)", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__init__": [[56, 78], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.argmax", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "USCHAD.MHEALTH.target.reshape", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_data", ",", "input_data_labels", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "input_data", ")", ".", "float", "(", ")", "\n", "temp_arr", "=", "input_data_labels", "\n", "final_arr", "=", "[", "]", "\n", "final_arr", "=", "np", ".", "argmax", "(", "temp_arr", ",", "axis", "=", "1", ")", "\n", "# final_arr = temp_arr", "\n", "# Reshaping array to get normalized feature vector", "\n", "# for x in temp_arr:", "\n", "#     number_of_features = 12", "\n", "\n", "#     temp_a = [0. for x in range(number_of_features + 1)]", "\n", "#     temp_a[int(x)-1] = 1.", "\n", "#     final_arr.append(temp_a)", "\n", "\n", "final_arr", "=", "np", ".", "asarray", "(", "final_arr", ")", "\n", "self", ".", "target", "=", "torch", ".", "from_numpy", "(", "final_arr", ")", ".", "float", "(", ")", "# Labels for input", "\n", "self", ".", "target", "=", "self", ".", "target", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "self", ".", "n_samples", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "# Length of input", "\n", "\n", "print", "(", "self", ".", "data", ".", "shape", ")", "\n", "# print(self.target)", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__len__": [[80, 82], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "# Length of the dataset.", "\n", "        ", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.MHEALTH.__getitem__": [[83, 85], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "# Function that returns one point and one label.", "\n", "        ", "return", "torch", ".", "Tensor", "(", "self", ".", "data", "[", "index", "]", ")", ",", "torch", ".", "Tensor", "(", "self", ".", "target", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.check_neighboring": [[132, 141], ["range", "len", "len"], "function", ["None"], ["", "def", "check_neighboring", "(", "sis", ",", "elem1", ",", "elem2", ")", ":", "\n", "    ", "if", "(", "len", "(", "sis", ")", "==", "1", ")", ":", "\n", "        ", "return", "False", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sis", ")", "-", "1", ")", ":", "\n", "        ", "if", "sis", "[", "i", "]", "==", "elem1", "and", "sis", "[", "i", "+", "1", "]", "==", "elem2", ":", "\n", "            ", "return", "True", "\n", "", "if", "sis", "[", "i", "]", "==", "elem2", "and", "sis", "[", "i", "+", "1", "]", "==", "elem1", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.activity_image": [[142, 175], ["numpy.arange", "sis.append", "numpy.array", "numpy.transpose", "numpy.fft.fftshift", "numpy.transpose", "np.array.append", "len", "USCHAD.check_neighboring", "sis.append"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.check_neighboring"], ["", "def", "activity_image", "(", "raw_signals", ")", ":", "\n", "    ", "seq", "=", "np", ".", "arange", "(", "0", ",", "raw_signals", ".", "shape", "[", "3", "]", ",", "1", ")", "\n", "sis", "=", "[", "]", "\n", "n_sis", "=", "1", "\n", "i", "=", "0", "\n", "j", "=", "i", "+", "1", "\n", "sis", ".", "append", "(", "i", ")", "\n", "while", "i", "!=", "j", ":", "\n", "        ", "if", "j", "==", "len", "(", "seq", ")", ":", "\n", "            ", "j", "=", "0", "\n", "", "elif", "check_neighboring", "(", "sis", ",", "i", ",", "j", ")", "==", "False", ":", "\n", "            ", "sis", ".", "append", "(", "j", ")", "\n", "i", "=", "j", "\n", "j", "=", "j", "+", "1", "\n", "", "else", ":", "\n", "            ", "j", "=", "j", "+", "1", "\n", "\n", "", "", "output", "=", "[", "]", "\n", "for", "sample", "in", "raw_signals", ":", "\n", "        ", "signal_image", "=", "sample", "[", "0", "]", "\n", "signal_image", "=", "signal_image", "[", ":", ",", "sis", "]", "\n", "signal_image", "=", "np", ".", "transpose", "(", "signal_image", ")", "\n", "\n", "fshift", "=", "np", ".", "fft", ".", "fftshift", "(", "signal_image", ")", "\n", "fshift", "=", "np", ".", "transpose", "(", "fshift", ")", "\n", "# import cv2", "\n", "# cv2.imshow('tete', magnitude_spectrum)", "\n", "# cv2.waitKey(1000)", "\n", "\n", "output", ".", "append", "(", "[", "fshift", "]", ")", "\n", "\n", "", "output", "=", "np", ".", "array", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.get_model": [[194, 232], ["USCHAD.CNN", "CNN.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "CNN.cuda", "name.endswith", "CNN.parameters", "model_sign_params.append", "name.endswith", "model_shift_params.append", "model_other_params.append"], "function", ["None"], ["def", "get_model", "(", ")", ":", "\n", "# if not 'se' in args.arch:", "\n", "#     model = models.__dict__[args.arch](num_classes=n_class, quantize=args.add_quant, weight_bits=args.add_bits, quantize_v=args.quantize_v)", "\n", "# else:", "\n", "#     threshold = 5e-3", "\n", "#     sign_threshold = 0.5", "\n", "#     distribution = 'kaiming_normal'", "\n", "#     model = models.__dict__[args.arch](threshold=threshold, sign_threshold=sign_threshold, distribution=distribution,", "\n", "#         num_classes=n_class, quantize=args.add_quant, weight_bits=args.add_bits, quantize_v=args.quantize_v)", "\n", "# if 'shift' in args.arch: # no pretrain", "\n", "#     model, _ = convert_to_shift(model, args.shift_depth, args.shift_type, convert_weights=False, use_kernel=args.use_kernel, rounding=args.rounding,", "\n", "#         weight_bits=args.weight_bits, sign_threshold_ps=args.sign_threshold_ps, quant_bits=args.shift_quant_bits)", "\n", "\n", "    ", "model", "=", "CNN", "(", "num_classes", "=", "n_class", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "model_other_params", "=", "[", "]", "\n", "model_sign_params", "=", "[", "]", "\n", "model_shift_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "(", "name", ".", "endswith", "(", "\".sign\"", ")", ")", ":", "\n", "            ", "model_sign_params", ".", "append", "(", "param", ")", "\n", "", "elif", "(", "name", ".", "endswith", "(", "\".shift\"", ")", ")", ":", "\n", "            ", "model_shift_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "model_other_params", ".", "append", "(", "param", ")", "\n", "\n", "", "", "params_dict", "=", "[", "\n", "{", "\"params\"", ":", "model_other_params", "}", ",", "\n", "{", "\"params\"", ":", "model_sign_params", ",", "'lr'", ":", "args", ".", "lr_sign", "if", "args", ".", "lr_sign", "is", "not", "None", "else", "args", ".", "lr", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "\"params\"", ":", "model_shift_params", ",", "'lr'", ":", "args", ".", "lr", ",", "'weight_decay'", ":", "0", "}", "\n", "]", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy": [[241, 255], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.train": [[257, 284], ["model.train", "time.time", "enumerate", "numpy.round", "optimizer.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.item", "USCHAD.accuracy", "prec1.item", "F.cross_entropy.backward", "optimizer.step", "len", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.squeeze.long", "print", "len", "torch.cuda", "torch.squeeze.cuda", "len", "F.cross_entropy.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.train", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.models.adder.adder.backward", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.utils_optim.SGD.step"], ["", "def", "train", "(", "epoch", ",", "train_loader", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "global", "history_score", "\n", "avg_loss", "=", "0.", "\n", "train_acc", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# batch_time = time.time()", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "squeeze", "(", "target", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# print(output[0])", "\n", "# print(target, torch.argmax(output, axis=1))", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ".", "long", "(", ")", ")", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "train_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.1f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "history_score", "[", "epoch", "]", "[", "0", "]", "=", "avg_loss", "/", "len", "(", "train_loader", ")", "\n", "history_score", "[", "epoch", "]", "[", "1", "]", "=", "np", ".", "round", "(", "train_acc", "/", "len", "(", "train_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.test": [[287, 307], ["model.eval", "len", "print", "model", "torch.cross_entropy().item", "USCHAD.accuracy", "prec1.item", "prec5.item", "numpy.round", "numpy.round", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "len", "torch.cuda", "torch.squeeze.cuda", "torch.cross_entropy", "len", "len", "len", "len", "torch.squeeze.long"], "function", ["home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.accuracy", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round", "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.se_shift.conv_mask_shift.round"], ["", "def", "test", "(", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "test_acc", "=", "0", "\n", "test_acc_5", "=", "0", "\n", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "squeeze", "(", "target", ")", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ".", "long", "(", ")", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "test_acc", "+=", "prec1", ".", "item", "(", ")", "\n", "test_acc_5", "+=", "prec5", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Prec1: {}/{} ({:.2f}%), Prec5: ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "test_acc", ",", "len", "(", "test_loader", ")", ",", "test_acc", "/", "len", "(", "test_loader", ")", ",", "test_acc_5", "/", "len", "(", "test_loader", ")", ")", ")", "\n", "return", "np", ".", "round", "(", "test_acc", "/", "len", "(", "test_loader", ")", ",", "2", ")", ",", "np", ".", "round", "(", "test_acc_5", "/", "len", "(", "test_loader", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RICE-EIC_ShiftAddNet.USCHAD.USCHAD.save_checkpoint": [[308, 319], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "epoch", ",", "filepath", ")", ":", "\n", "    ", "if", "epoch", "==", "'init'", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'init.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "", "else", ":", "\n", "# filename = os.path.join(filepath, 'ckpt'+str(epoch)+'.pth.tar')", "\n", "# torch.save(state, filename)", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'ckpt.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "filepath", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]]}