{"home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q3-RDFframes.expand_groupby_join": [[8, 17], ["graph.entities().expand().group_by().count", "graph.entities().expand", "graph.entities().expand.join", "print", "basketball_team.join.to_sparql", "graph.entities().expand().group_by", "graph.entities", "graph.entities().expand", "graph.entities", "rdfframes.utils.constants.JoinType.RightOuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_groupby_join", "(", "join_type", ")", ":", "\n", "    ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", ".", "group_by", "(", "[", "'team'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", "\n", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "basketball_palyer_team", "=", "basketball_team", ".", "join", "(", "basketball_palyer", ",", "'team'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q7-RDFframes.basket_ball_teams_player_count": [[9, 14], ["graph.entities().expand().group_by().count", "print", "graph.entities().expand().group_by().count.to_sparql", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "basket_ball_teams_player_count", "(", ")", ":", "\n", "\t", "players", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:team'", ",", "'team'", ")", ",", "(", "'dbpp:years'", ",", "'years'", ")", ",", "(", "'dbpo:termPeriod'", ",", "'period'", ")", "]", ")", ".", "group_by", "(", "[", "'team'", "]", ")", ".", "count", "(", "'player'", ",", "'count_players'", ",", "True", ")", "\n", "print", "(", "players", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q4-RDFframes.join": [[18, 29], ["graph1.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand().filter", "graph1.feature_domain_range().expand().filter.join", "print", "dbpedia_actors.join.to_sparql", "graph1.feature_domain_range().expand", "graph2.feature_domain_range().expand", "graph1.feature_domain_range", "graph2.feature_domain_range", "rdfframes.utils.constants.JoinType.InnerJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["def", "join", "(", "join_type", ")", ":", "\n", "    ", "dbpedia_actors", "=", "graph1", ".", "feature_domain_range", "(", "'dbpp:starring'", ",", "'film1'", ",", "'actor1'", ")", ".", "expand", "(", "'actor1'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'actor_country1'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country1'", ":", "[", "'regex(str(?actor_country1), \"USA\")'", "]", "}", ")", "\n", "\n", "yago_actors", "=", "graph2", ".", "feature_domain_range", "(", "'yago:actedIn'", ",", "'actor2'", ",", "'film2'", ")", ".", "expand", "(", "'actor2'", ",", "[", "(", "'yago:isCitizenOf'", ",", "'actor_country2'", ")", ",", "(", "'yagoinfo:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country2'", ":", "[", "'= yago:United_States'", "]", "}", ")", "\n", "\n", "actors", "=", "dbpedia_actors", ".", "join", "(", "yago_actors", ",", "'name'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "actors", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q8-RDFframes.expand_filter_expand": [[12, 23], ["graph.entities().expand().filter().expand().expand().filter().filter", "print", "graph.entities().expand().filter().expand().expand().filter().filter.to_sparql", "graph.entities().expand().filter().expand().expand().filter", "graph.entities().expand().filter().expand().expand", "graph.entities().expand().filter().expand", "graph.entities().expand().filter", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_filter_expand", "(", ")", ":", "\n", "    ", "films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:country'", ",", "'movie_country'", ")", "]", ")", ".", "filter", "(", "{", "'movie_country'", ":", "[", "' IN (dbpr:United_States, dbpr:India)'", "]", "}", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:genre'", ",", "'genre'", ")", "]", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:director'", ",", "'director'", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ")", ",", "(", "'dbpp:language'", ",", "'language'", ")", ",", "\n", "(", "'dbpp:story'", ",", "'story'", ")", ",", "(", "'dbpp:runtime'", ",", "'runtime'", ")", ",", "(", "'dbpp:studio'", ",", "'studio'", ")", ",", "\n", "(", "'dbpp:title'", ",", "'title'", ")", "]", ")", ".", "filter", "(", "{", "'genre'", ":", "[", "'IN (dbpr:Film_score, dbpr:Soundtrack, dbpr:Rock_music, dbpr:House_music, dbpr:Dubstep)'", "]", "}", ")", ".", "filter", "(", "{", "'studio'", ":", "[", "'!= \"Eskay Movies\"'", "]", "}", ")", "\n", "print", "(", "films", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q2-RDFframes.expand_groupby_join": [[10, 19], ["graph.entities().expand().group_by().count", "graph.entities().expand", "graph.entities().expand.join", "print", "graph.entities().expand().group_by", "graph.entities", "basketball_team.join.to_sparql", "graph.entities().expand", "graph.entities", "rdfframes.utils.constants.JoinType.InnerJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_groupby_join", "(", "join_type", ")", ":", "\n", "    ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", ".", "group_by", "(", "[", "'team'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", "\n", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "basketball_palyer_team", "=", "basketball_team", ".", "join", "(", "basketball_palyer", ",", "'team'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "\"SPARQL QUERY FOR JOIN TYPE {} \\n{}\\n\"", ".", "format", "(", "join_type", ",", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q15-RDFframes.books_with_authors_cache": [[12, 26], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand().cache", "graph.feature_domain_range().expand().expand().cache.filter", "graph.feature_domain_range().expand().expand().cache.group_by().count().filter", "dataset.filter.join", "print", "american_authors.join.to_sparql", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand", "graph.feature_domain_range().expand().expand().cache.group_by().count", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand", "graph.feature_domain_range().expand().expand().cache.group_by", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.cache", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["def", "books_with_authors_cache", "(", ")", ":", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "graph_name", "=", "'dbpedia'", ")", "\n", "dataset", "=", "graph", ".", "feature_domain_range", "(", "'dbpp:author'", ",", "'book'", ",", "'author'", ")", ".", "expand", "(", "'author'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'author_country'", ")", ",", "(", "' dbpp:education'", ",", "'education'", ")", "]", ")", ".", "expand", "(", "'book'", ",", "[", "(", "'rdfs:label'", ",", "'work_name'", ")", ",", "(", "'dbpp:country'", ",", "'country'", ",", "True", ")", ",", "(", "'dcterms:subject'", ",", "'subject'", ")", ",", "\n", "(", "'dbpp:publisher'", ",", "'publisher'", ",", "True", ")", "]", ")", ".", "cache", "(", ")", "\n", "american_authors", "=", "dataset", ".", "filter", "(", "{", "'author_country'", ":", "[", "'regex(str(?author_country), \"USA\")'", "]", "}", ")", "\n", "\n", "famous_authors", "=", "dataset", ".", "group_by", "(", "[", "'author'", "]", ")", ".", "count", "(", "'book'", ",", "'book_count'", ",", "unique", "=", "True", ")", ".", "filter", "(", "{", "'book_count'", ":", "[", "'>= 2'", "]", "}", ")", "\n", "\n", "books", "=", "american_authors", ".", "join", "(", "famous_authors", ",", "join_col_name1", "=", "'author'", ",", "join_type", "=", "JoinType", ".", "OuterJoin", ")", "\n", "print", "(", "books", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q14-RDFframes.optional_expand_filter_expand": [[11, 22], ["graph.entities().expand().filter().expand().expand().filter().filter", "print", "graph.entities().expand().filter().expand().expand().filter", "graph.entities().expand().filter().expand().expand().filter().filter.to_sparql", "graph.entities().expand().filter().expand().expand", "graph.entities().expand().filter().expand", "graph.entities().expand().filter", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "optional_expand_filter_expand", "(", ")", ":", "\n", "    ", "Films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:country'", ",", "'movie_country'", ")", "]", ")", ".", "filter", "(", "{", "'movie_country'", ":", "[", "' IN (dbpr:United_States, dbpr:India)'", "]", "}", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:genre'", ",", "'genre'", ")", "]", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:director'", ",", "'director'", ",", "True", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ",", "True", ")", ",", "\n", "(", "'dbpp:language'", ",", "'language'", ")", ",", "(", "'dbpp:story'", ",", "'story'", ")", ",", "(", "'dbpp:studio'", ",", "'studio'", ")", ",", "\n", "(", "'dbpp:title'", ",", "'title'", ",", "True", ")", "]", ")", ".", "filter", "(", "{", "'genre'", ":", "[", "'IN (dbpr:Film_score, dbpr:Soundtrack, dbpr:Rock_music, dbpr:House_music, dbpr:Dubstep)'", "]", "}", ")", ".", "filter", "(", "{", "'studio'", ":", "[", "'!= \"Eskay Movies\"'", "]", "}", ")", "\n", "print", "(", "\"SPARQL Query = \\n{}\"", ".", "format", "(", "Films", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q12-RDFframes.expand_groupby_expand": [[9, 15], ["graph.entities().expand().group_by().count().expand", "print", "graph.entities().expand().group_by().count", "graph.entities().expand().group_by().count().expand.to_sparql", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_groupby_expand", "(", ")", ":", "\n", "    ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:Athlete'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", ".", "group_by", "(", "[", "'team'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "print", "(", "\"SPARQL QUERY \\n{}\\n\"", ".", "format", "(", "basketball_palyer", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q1-RDFframes.expand_join": [[13, 21], ["graph.entities().expand", "graph.entities().expand", "graph.entities().expand.join", "print", "basketball_team.join.to_sparql", "graph.entities", "graph.entities", "rdfframes.utils.constants.JoinType.RightOuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_join", "(", "join_type", ")", ":", "\n", "    ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:nationality'", ",", "'nationality'", ")", ",", "(", "'dbpp:birthPlace'", ",", "'place'", ")", ",", "\n", "(", "'dbpp:birthDate'", ",", "'birthDate'", ")", ",", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "basketball_palyer_team", "=", "basketball_team", ".", "join", "(", "basketball_palyer", ",", "'team'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q6-RDFframes.expand_join": [[9, 17], ["graph.entities().expand", "graph.entities().expand", "graph.entities().expand.join", "print", "basketball_team.join.to_sparql", "graph.entities", "graph.entities", "rdfframes.utils.constants.JoinType.InnerJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_join", "(", "join_type", ")", ":", "\n", "    ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:nationality'", ",", "'nationality'", ")", ",", "(", "'dbpp:birthPlace'", ",", "'place'", ")", ",", "\n", "(", "'dbpp:birthDate'", ",", "'birthDate'", ")", ",", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "basketball_palyer_team", "=", "basketball_team", ".", "join", "(", "basketball_palyer", ",", "'team'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q11-RDFframes.join": [[18, 29], ["graph1.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand().filter", "graph1.feature_domain_range().expand().filter.join", "print", "dbpedia_actors.join.to_sparql", "graph1.feature_domain_range().expand", "graph2.feature_domain_range().expand", "graph1.feature_domain_range", "graph2.feature_domain_range", "rdfframes.utils.constants.JoinType.OuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["def", "join", "(", "join_type", ")", ":", "\n", "    ", "dbpedia_actors", "=", "graph1", ".", "feature_domain_range", "(", "'dbpp:starring'", ",", "'film1'", ",", "'actor1'", ")", ".", "expand", "(", "'actor1'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'actor_country1'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country1'", ":", "[", "'regex(str(?actor_country1), \"USA\")'", "]", "}", ")", "\n", "\n", "yago_actors", "=", "graph2", ".", "feature_domain_range", "(", "'yago:actedIn'", ",", "'actor2'", ",", "'film2'", ")", ".", "expand", "(", "'actor2'", ",", "[", "(", "'yago:isCitizenOf'", ",", "'actor_country2'", ")", ",", "(", "'yagoinfo:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country2'", ":", "[", "'= yago:United_States'", "]", "}", ")", "\n", "\n", "actors", "=", "dbpedia_actors", ".", "join", "(", "yago_actors", ",", "'name'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "actors", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q10-RDFframes.expand_groupby_expand": [[10, 15], ["graph.entities().expand().group_by().count", "print", "graph.entities().expand().group_by().count.to_sparql", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_groupby_expand", "(", ")", ":", "\n", "    ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:Athlete'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'place'", ")", "]", ")", ".", "group_by", "(", "[", "'place'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", "\n", "print", "(", "basketball_palyer", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q9-RDFframes.expand_groupby_columns": [[12, 20], ["graph.entities().expand().group_by().count", "print", "graph.entities().expand().group_by().count.to_sparql", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_groupby_columns", "(", ")", ":", "\n", "    ", "films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:director'", ",", "'director'", ",", "True", ")", ",", "\n", "(", "'dbpp:country'", ",", "'movie_country'", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ",", "True", ")", ",", "\n", "(", "'dbpp:language'", ",", "'language'", ")", ",", "(", "'dbpp:story'", ",", "'story'", ")", ",", "(", "'dbpp:runtime'", ",", "'runtime'", ")", ",", "\n", "(", "'dbpp:studio'", ",", "'studio'", ",", "True", ")", ",", "(", "'dbpp:title'", ",", "'title'", ")", ",", "(", "'dbpp:genre'", ",", "'genre'", ")", "]", ")", ".", "group_by", "(", "[", "'movie_country'", ",", "'genre'", "]", ")", ".", "count", "(", "'film'", ",", "'film_country_genre'", ",", "True", ")", "\n", "print", "(", "films", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q13-RDFframes.expand_optional": [[10, 18], ["graph.entities().expand", "print", "graph.entities", "graph.entities().expand.to_sparql"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["def", "expand_optional", "(", ")", ":", "\n", "    ", "Films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:director'", ",", "'director'", ",", "True", ")", ",", "\n", "(", "'dbpp:country'", ",", "'movie_country'", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ",", "True", ")", ",", "\n", "(", "'dbpp:language'", ",", "'language'", ")", ",", "(", "'dbpp:story'", ",", "'story'", ")", ",", "\n", "(", "'dbpp:runtime'", ",", "'runtime'", ")", ",", "(", "'dbpp:studio'", ",", "'studio'", ",", "True", ")", ",", "(", "'dbpp:title'", ",", "'title'", ")", ",", "\n", "(", "'dbpp:genre'", ",", "'genre'", ")", "]", ")", "\n", "print", "(", "\"SPARQL Query = \\n{}\"", ".", "format", "(", "Films", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2016.Q5-RDFframes.expand_filter_expand": [[11, 21], ["graph.entities().expand().filter().filter().filter", "print", "graph.entities().expand().filter().filter().filter.to_sparql", "graph.entities().expand().filter().filter", "graph.entities().expand().filter", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_filter_expand", "(", ")", ":", "\n", "    ", "films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:country'", ",", "'movie_country'", ")", ",", "(", "'dbpp:genre'", ",", "'genre'", ")", ",", "\n", "(", "'dbpp:director'", ",", "'director'", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ")", ",", "(", "'dbpp:language'", ",", "'language'", ")", ",", "\n", "(", "'dbpp:story'", ",", "'story'", ")", ",", "(", "'dbpp:runtime'", ",", "'runtime'", ")", ",", "(", "'dbpp:studio'", ",", "'studio'", ")", ",", "\n", "(", "'dbpp:title'", ",", "'title'", ")", "]", ")", ".", "filter", "(", "{", "'genre'", ":", "[", "'IN (dbpr:Film_score, dbpr:Soundtrack, dbpr:Rock_music, dbpr:House_music, dbpr:Dubstep)'", "]", "}", ")", ".", "filter", "(", "{", "'studio'", ":", "[", "'!= \"Eskay Movies\"'", "]", "}", ")", ".", "filter", "(", "{", "'movie_country'", ":", "[", "' IN (dbpr:United_States, dbpr:India)'", "]", "}", ")", "\n", "print", "(", "films", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q3-RDFframes.join": [[19, 34], ["graph1.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand().filter", "graph1.feature_domain_range().expand().filter.join", "rdfframes.client.http_client.HttpClient", "dbpedia_actors.join.execute", "print", "print", "dbpedia_actors.join.to_sparql", "graph1.feature_domain_range().expand", "graph2.feature_domain_range().expand", "graph1.feature_domain_range", "graph2.feature_domain_range", "rdfframes.utils.constants.JoinType.InnerJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.execute", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], [""]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q7-RDFframes.expand_filter_expand": [[11, 22], ["graph.entities().expand().expand().expand().filter().filter().filter", "print", "graph.entities().expand().expand().expand().filter().filter().filter.to_sparql", "graph.entities().expand().expand().expand().filter().filter", "graph.entities().expand().expand().expand().filter", "graph.entities().expand().expand().expand", "graph.entities().expand().expand", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], [".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:team'", ",", "'team'", ")", ",", "(", "'dbpp:years'", ",", "'years'", ")", ",", "(", "'dbpo:termPeriod'", ",", "'period'", ")", "]", ")", ".", "group_by", "(", "[", "'team'", "]", ")", ".", "count", "(", "'player'", ",", "'count_players'", ",", "True", ")", "\n", "print", "(", "players", ".", "to_sparql", "(", ")", ")", "\n", "\n", "\n", "", "basket_ball_teams_player_count", "(", ")", "\n", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q8-RDFframes.expand_join": [[9, 17], ["graph.entities().expand", "graph.entities().expand", "graph.entities().expand.join", "print", "basketball_team.join.to_sparql", "graph.entities", "graph.entities", "rdfframes.utils.constants.JoinType.InnerJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["graph", "=", "KnowledgeGraph", "(", "graph_name", "=", "'dbpedia'", ")", "\n", "\n", "\n", "def", "expand_filter_expand", "(", ")", ":", "\n", "    ", "films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:country'", ",", "'movie_country'", ")", "]", ")", ".", "filter", "(", "{", "'movie_country'", ":", "[", "' IN (dbpr:United_States, dbpr:India)'", "]", "}", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:genre'", ",", "'genre'", ")", "]", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:director'", ",", "'director'", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ")", ",", "(", "'dbpp:language'", ",", "'language'", ")", ",", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q2-RDFframes.join": [[18, 30], ["graph1.feature_domain_range().expand().filter().filter", "graph2.feature_domain_range().expand().filter", "graph1.feature_domain_range().expand().filter().filter.join", "print", "dbpedia_actors.join.to_sparql", "graph1.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand", "graph1.feature_domain_range().expand", "graph2.feature_domain_range", "graph1.feature_domain_range", "rdfframes.utils.constants.JoinType.OuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["print", "(", "\"SPARQL QUERY FOR JOIN TYPE {} \\n{}\\n\"", ".", "format", "(", "join_type", ",", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n", "", "expand_groupby_join", "(", "JoinType", ".", "InnerJoin", ")", "\n", "\n", "\n", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q15-RDFframes.books_with_authors_cache": [[12, 25], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand().cache", "graph.feature_domain_range().expand().expand().cache.filter", "graph.feature_domain_range().expand().expand().cache.group_by().count().filter", "dataset.filter.join", "print", "american_authors.join.to_sparql", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand", "graph.feature_domain_range().expand().expand().cache.group_by().count", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand", "graph.feature_domain_range().expand().expand().cache.group_by", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.cache", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["def", "books_with_authors_cache", "(", ")", ":", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "graph_name", "=", "'dbpedia'", ")", "\n", "dataset", "=", "graph", ".", "feature_domain_range", "(", "'dbpp:author'", ",", "'book'", ",", "'author'", ")", ".", "expand", "(", "'author'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'author_country'", ")", ",", "(", "' dbpp:education'", ",", "'education'", ")", "]", ")", ".", "expand", "(", "'book'", ",", "[", "(", "'rdfs:label'", ",", "'work_name'", ")", ",", "(", "'dbpp:country'", ",", "'country'", ",", "True", ")", ",", "(", "'dcterms:subject'", ",", "'subject'", ")", ",", "\n", "(", "'dbpp:publisher'", ",", "'publisher'", ",", "True", ")", "]", ")", ".", "cache", "(", ")", "\n", "american_authors", "=", "dataset", ".", "filter", "(", "{", "'author_country'", ":", "[", "'regex(str(?author_country), \"USA\")'", "]", "}", ")", "\n", "\n", "famous_authors", "=", "dataset", ".", "group_by", "(", "[", "'author'", "]", ")", ".", "count", "(", "'book'", ",", "'book_count'", ",", "unique", "=", "True", ")", ".", "filter", "(", "{", "'book_count'", ":", "[", "'>= 2'", "]", "}", ")", "\n", "\n", "books", "=", "american_authors", ".", "join", "(", "famous_authors", ",", "join_col_name1", "=", "'author'", ",", "join_type", "=", "JoinType", ".", "OuterJoin", ")", "\n", "print", "(", "books", ".", "to_sparql", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q14-RDFframes.expand_groupby_join": [[10, 19], ["graph.entities().expand().group_by().count", "graph.entities().expand", "graph.entities().expand.join", "print", "basketball_team.join.to_sparql", "graph.entities().expand().group_by", "graph.entities", "graph.entities().expand", "graph.entities", "rdfframes.utils.constants.JoinType.LeftOuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["\n", "def", "optional_expand_filter_expand", "(", ")", ":", "\n", "    ", "Films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:country'", ",", "'movie_country'", ")", "]", ")", ".", "filter", "(", "{", "'movie_country'", ":", "[", "' IN (dbpr:United_States, dbpr:India)'", "]", "}", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:genre'", ",", "'genre'", ")", "]", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:director'", ",", "'director'", ",", "True", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ",", "True", ")", ",", "\n", "(", "'dbpp:language'", ",", "'language'", ")", ",", "(", "'dbpp:story'", ",", "'story'", ")", ",", "(", "'dbpp:studio'", ",", "'studio'", ")", ",", "\n", "(", "'dbpp:title'", ",", "'title'", ",", "True", ")", "]", ")", ".", "filter", "(", "{", "'genre'", ":", "[", "'IN (dbpr:Film_score, dbpr:Soundtrack, dbpr:Rock_music, dbpr:House_music, dbpr:Dubstep)'", "]", "}", ")"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q12-RDFframes.expand_groupby_columns": [[12, 20], ["graph.entities().expand().group_by().count", "print", "graph.entities().expand().group_by().count.to_sparql", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], [".", "group_by", "(", "[", "'team'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "print", "(", "\"SPARQL QUERY \\n{}\\n\"", ".", "format", "(", "basketball_palyer", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n", "\n", "", "expand_groupby_expand", "(", ")", "\n", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q1-RDFframes.expand_optional": [[10, 18], ["graph.entities().expand", "print", "graph.entities", "graph.entities().expand.to_sparql"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["graph", "=", "KnowledgeGraph", "(", "graph_name", "=", "'dbpedia'", ")", "\n", "\n", "\n", "def", "expand_join", "(", "join_type", ")", ":", "\n", "    ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:nationality'", ",", "'nationality'", ")", ",", "(", "'dbpp:birthPlace'", ",", "'place'", ")", ",", "\n", "(", "'dbpp:birthDate'", ",", "'birthDate'", ")", ",", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q6-RDFframes.expand_filter_expand": [[12, 21], ["graph.entities().expand().filter().filter().filter", "graph.entities().expand().filter().filter", "graph.entities().expand().filter", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["(", "'dbpp:birthDate'", ",", "'birthDate'", ")", ",", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "basketball_palyer_team", "=", "basketball_team", ".", "join", "(", "basketball_palyer", ",", "'team'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", "\n", "\n", "\n", "", "expand_join", "(", "JoinType", ".", "InnerJoin", ")", "## change the type here.", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q11-RDFframes.expand_groupby_expand": [[10, 15], ["graph.entities().expand().group_by().count().count", "print", "graph.entities().expand().group_by().count().count.to_sparql", "graph.entities().expand().group_by().count", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["prefixes", "=", "{", "\n", "'rdfs'", ":", "'http://www.w3.org/2000/01/rdf-schema#'", ",", "\n", "'rdf'", ":", "'http://www.w3.org/1999/02/22-rdf-syntax-ns#'", ",", "\n", "'yago'", ":", "'http://yago-knowledge.org/resource/'", ",", "\n", "'yagoinfo'", ":", "'http://yago-knowledge.org/resource/infobox/en/'", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q10-RDFframes.optional_expand_filter_expand": [[11, 22], ["graph.entities().expand().filter().expand().expand().filter().filter", "print", "graph.entities().expand().filter().expand().expand().filter", "graph.entities().expand().filter().expand().expand().filter().filter.to_sparql", "graph.entities().expand().filter().expand().expand", "graph.entities().expand().filter().expand", "graph.entities().expand().filter", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["    ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:Athlete'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'place'", ")", "]", ")", ".", "group_by", "(", "[", "'place'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", "\n", "print", "(", "basketball_palyer", ".", "to_sparql", "(", ")", ")", "\n", "\n", "", "expand_groupby_expand", "(", ")", "\n", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q16-RDFframes.join": [[29, 53], ["graph1.entities().expand().filter().filter().select_cols", "graph2.feature_domain_range().expand().expand().filter().filter().filter", "graph3.feature_domain_range().expand().expand().filter().filter", "rdfframes.client.http_client.HttpClient", "graph3.feature_domain_range().expand().expand().filter().filter.join", "dbpl_person.join.join", "print", "shared_ppl.join.to_sparql", "graph1.entities().expand().filter().filter", "graph2.feature_domain_range().expand().expand().filter().filter", "graph3.feature_domain_range().expand().expand().filter", "graph1.entities().expand().filter", "graph2.feature_domain_range().expand().expand().filter", "graph3.feature_domain_range().expand().expand", "graph1.entities().expand", "graph2.feature_domain_range().expand().expand", "graph3.feature_domain_range().expand", "graph1.entities", "graph2.feature_domain_range().expand", "graph3.feature_domain_range", "graph2.feature_domain_range", "rdfframes.utils.constants.JoinType.OuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["def", "join", "(", "join_type", ")", ":", "\n", "    ", "dbpedia_person", "=", "graph1", ".", "entities", "(", "\"dbpo:Person\"", ",", "entities_col_name", "=", "\"person1\"", ")", ".", "expand", "(", "'person1'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'country1'", ")", ",", "(", "'dbpp:name'", ",", "'name1'", ")", "]", ")", ".", "filter", "(", "{", "'country1'", ":", "[", "'regex(str(?country1), \"USA\")'", "]", "}", ")", ".", "filter", "(", "{", "'name1'", ":", "[", "'regex(str(?name1),\"Abraham\")'", "]", "}", ")", ".", "select_cols", "(", "[", "'name1'", "]", ")", "\n", "\n", "yago_person", "=", "graph2", ".", "feature_domain_range", "(", "\"rdf:type\"", ",", "\"person2\"", ",", "\"p\"", ")", ".", "expand", "(", "'p'", ",", "[", "(", "'rdfs:label'", ",", "'label'", ")", "]", ")", ".", "expand", "(", "'person2'", ",", "[", "(", "'yagoinfo:name'", ",", "\"name2\"", ")", ",", "(", "'yago:isCitizenOf'", ",", "'country2'", ")", "]", ")", ".", "filter", "(", "{", "'label'", ":", "[", "'=\"person\"@eng'", "]", "}", ")", ".", "filter", "(", "{", "'country2'", ":", "[", "'= yago:United_States'", "]", "}", ")", ".", "filter", "(", "{", "'name2'", ":", "[", "'regex(str(?name2),\"Abraham\")'", "]", "}", ")", "\n", "\n", "dbpl_person", "=", "graph3", ".", "feature_domain_range", "(", "\"dc:creator\"", ",", "\"paper\"", ",", "\"author\"", ")", ".", "expand", "(", "'author'", ",", "[", "(", "'rdfs:label'", ",", "'name3'", ")", "]", ")", ".", "expand", "(", "'paper'", ",", "[", "(", "'dcterm:issued'", ",", "'date'", ")", "]", ")", ".", "filter", "(", "{", "'date'", ":", "[", "'>= 2015'", "]", "}", ")", ".", "filter", "(", "{", "'name3'", ":", "[", "'regex(str(?name3),\"Abraham\")'", "]", "}", ")", "#.select_cols(['name3'])", "\n", "\n", "endpoint", "=", "'http://10.161.202.101:8890/sparql/'", "\n", "output_format", "=", "HttpClientDataFormat", ".", "PANDAS_DF", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "return_format", "=", "output_format", ")", "\n", "shared_ppl", "=", "dbpl_person", ".", "join", "(", "yago_person", ",", "'name3'", ",", "'name2'", ",", "join_type", "=", "join_type", ")", "\n", "shared_ppl2", "=", "shared_ppl", ".", "join", "(", "dbpedia_person", ",", "'name3'", ",", "'name1'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "shared_ppl2", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q9-RDFframes.basket_ball_teams_player_count": [[9, 14], ["graph.entities().expand().group_by().count", "print", "graph.entities().expand().group_by().count.to_sparql", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["graph", "=", "KnowledgeGraph", "(", "graph_name", "=", "'dbpedia'", ")", "\n", "\n", "\n", "def", "expand_groupby_columns", "(", ")", ":", "\n", "    ", "films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:director'", ",", "'director'", ",", "True", ")", ",", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q13-RDFframes.expand_groupby_join": [[12, 21], ["graph.entities().expand().group_by().count", "graph.entities().expand", "graph.entities().expand.join", "print", "graph.entities().expand().group_by", "graph.entities", "basketball_team.join.to_sparql", "graph.entities().expand", "graph.entities", "rdfframes.utils.constants.JoinType.InnerJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], [".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:director'", ",", "'director'", ",", "True", ")", ",", "\n", "(", "'dbpp:country'", ",", "'movie_country'", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ",", "True", ")", ",", "\n", "(", "'dbpp:language'", ",", "'language'", ")", ",", "(", "'dbpp:story'", ",", "'story'", ")", ",", "\n", "(", "'dbpp:runtime'", ",", "'runtime'", ")", ",", "(", "'dbpp:studio'", ",", "'studio'", ",", "True", ")", ",", "(", "'dbpp:title'", ",", "'title'", ")", ",", "\n", "(", "'dbpp:genre'", ",", "'genre'", ")", "]", ")", "\n", "print", "(", "\"SPARQL Query = \\n{}\"", ".", "format", "(", "Films", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n", "\n", "", "expand_optional", "(", ")", "\n", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.benchmark_DBpedia2020.Q5-RDFframes.expand_groupby_expand": [[9, 15], ["graph.entities().expand().group_by().count().expand", "print", "graph.entities().expand().group_by().count", "graph.entities().expand().group_by().count().expand.to_sparql", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["\n", "\n", "def", "expand_filter_expand", "(", ")", ":", "\n", "    ", "films", "=", "graph", ".", "entities", "(", "'dbpo:Film'", ",", "entities_col_name", "=", "'film'", ")", ".", "expand", "(", "'film'", ",", "[", "(", "'dbpp:starring'", ",", "'actor'", ")", ",", "(", "'dbpp:country'", ",", "'movie_country'", ")", ",", "(", "'dbpp:genre'", ",", "'genre'", ")", ",", "\n", "(", "'dbpp:director'", ",", "'director'", ")", ",", "(", "'dbpp:producer'", ",", "'producer'", ")", ",", "(", "'dbpp:language'", ",", "'language'", ")", ",", "\n", "(", "'dbpp:story'", ",", "'story'", ")", ",", "(", "'dbpp:runtime'", ",", "'runtime'", ")", ",", "(", "'dbpp:studio'", ",", "'studio'", ")", ",", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__init__": [[38, 53], ["knowledge_graph.KnowledgeGraph._add_graph"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph._add_graph"], ["def", "__init__", "(", "self", ",", "graph_name", "=", "None", ",", "graph_uri", "=", "None", ",", "prefixes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the object with one graph. Other graphs can be added using\n        add_graph method.\n        :param graph_name: graph user defined name\n        :type graph_name: string\n        :param graph_uri: graph URI\n        :type graph_uri: string\n        :param prefixes: a dictionary of the prefixes to use in this graph. Keys\n            are the prefixes and values are the URIs.\n        :type prefixes: a dictionary where the key and value are strings.\n        \"\"\"", "\n", "self", ".", "graphs", "=", "{", "}", "\n", "self", ".", "graph_prefixes", "=", "{", "}", "\n", "self", ".", "_add_graph", "(", "graph_name", ",", "graph_uri", ",", "prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.add_graph": [[54, 67], ["knowledge_graph.KnowledgeGraph._add_graph"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph._add_graph"], ["", "def", "add_graph", "(", "self", ",", "graph_name", "=", "None", ",", "graph_uri", "=", "None", ",", "prefixes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        add more knowledge graph URIs to this KnowledgeGraph instance\n        :param graph_name: graph user defined name\n        :type graph_name: string\n        :param graph_uri: graph URI\n        :type graph_uri: string\n        :param prefixes: a dictionary of the prefixes to use in this graph. Keys\n            are the prefixes and values are the URIs.\n        :type prefixes: a dictionary where the key and value are strings.\n        :return: None or raise Exception\n        \"\"\"", "\n", "self", ".", "_add_graph", "(", "graph_name", ",", "graph_uri", ",", "prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph._add_graph": [[68, 110], ["len", "Exception", "len", "knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "knowledge_graph.KnowledgeGraph.__load_default_prefixes", "knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "knowledge_graph.KnowledgeGraph.__load_default_prefixes", "knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "knowledge_graph.KnowledgeGraph.__load_default_prefixes", "Exception", "knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "knowledge_graph.KnowledgeGraph.__load_default_prefixes"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__load_default_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__load_default_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__load_default_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__load_default_prefixes"], ["", "def", "_add_graph", "(", "self", ",", "graph_name", "=", "None", ",", "graph_uri", "=", "None", ",", "prefixes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        add a knowledge graph URI or a set of prefixes to this KnowledgeGraph instance.\n        :param graph_name: graph user defined name\n        :type graph_name: string\n        :param graph_uri: graph URI\n        :type graph_uri: string\n        :param prefixes: a dictionary of the prefixes to use in this graph. Keys\n            are the prefixes and values are the URIs.\n        :type prefixes: a dictionary where the key and value are strings.\n        :return:\n        \"\"\"", "\n", "if", "graph_name", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "graph_name", ")", "<=", "0", ":", "\n", "                ", "raise", "Exception", "(", "\"Graph name cannot be an empty string.\"", ")", "\n", "", "elif", "graph_uri", "is", "not", "None", ":", "\n", "                ", "self", ".", "graphs", "[", "graph_name", "]", "=", "graph_uri", "\n", "if", "prefixes", "is", "not", "None", ":", "\n", "                    ", "self", ".", "__add_graph_prefixes", "(", "graph_name", ",", "prefixes", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "__load_default_prefixes", "(", "graph_name", ")", "\n", "", "", "elif", "graph_name", "in", "KnowledgeGraph", ".", "default_graphs", ":", "\n", "                ", "self", ".", "graphs", "[", "graph_name", "]", "=", "KnowledgeGraph", ".", "default_graphs", "[", "graph_name", "]", "\n", "if", "graph_name", "in", "KnowledgeGraph", ".", "default_graph_prefixes", ":", "\n", "                    ", "self", ".", "__add_graph_prefixes", "(", "graph_name", ",", "KnowledgeGraph", ".", "default_graph_prefixes", "[", "graph_name", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "__load_default_prefixes", "(", "graph_name", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Graph {} is not one of the default graphs.\"", ".", "format", "(", "graph_name", ")", ")", "\n", "", "", "elif", "graph_uri", "is", "not", "None", ":", "\n", "            ", "graph_name", "=", "\"graph{}\"", ".", "format", "(", "len", "(", "self", ".", "graphs", ")", ")", "\n", "self", ".", "graphs", "[", "graph_name", "]", "=", "graph_uri", "\n", "if", "prefixes", "is", "not", "None", ":", "\n", "                ", "self", ".", "__add_graph_prefixes", "(", "graph_name", ",", "prefixes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "__load_default_prefixes", "(", "graph_name", ")", "\n", "", "", "else", ":", "\n", "            ", "graph_name", "=", "\"\"", "\n", "if", "prefixes", "is", "not", "None", ":", "\n", "                ", "self", ".", "__add_graph_prefixes", "(", "graph_name", ",", "prefixes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "__load_default_prefixes", "(", "graph_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__add_graph_prefixes": [[111, 126], ["graph_prefixes.items"], "methods", ["None"], ["", "", "", "def", "__add_graph_prefixes", "(", "self", ",", "graph_name", ",", "graph_prefixes", ")", ":", "\n", "        ", "\"\"\"\n        add prefixes to be used with the graph specified by graph_name\n        :param graph_name: graph user defined name\n        :type graph_name: string\n        :param graph_prefixes: a dictionary of the prefixes to use in this graph. Keys\n            are the prefixes and values are the prefix URIs. \n        :type graph_prefixes: a dictionary where the key and value are strings.\n        :return:        \n        \"\"\"", "\n", "if", "graph_name", "not", "in", "self", ".", "graph_prefixes", ":", "\n", "            ", "self", ".", "graph_prefixes", "[", "graph_name", "]", "=", "{", "}", "\n", "\n", "", "for", "prefix", ",", "prefix_uri", "in", "graph_prefixes", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "graph_prefixes", "[", "graph_name", "]", "[", "prefix", "]", "=", "prefix_uri", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__load_default_prefixes": [[127, 148], ["knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "knowledge_graph.KnowledgeGraph.__add_graph_prefixes"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__add_graph_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.__add_graph_prefixes"], ["", "", "def", "__load_default_prefixes", "(", "self", ",", "graph_name", ")", ":", "\n", "        ", "\"\"\"\n        if no prefixes are given with the graph, load the default list of \n            prefixes to be used for this graph\n        :param graph_name: graph name\n        :type graph_name: string\n        :return:\n        \"\"\"", "\n", "default_prefixes", "=", "{", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", ",", "\n", "\"rdfs\"", ":", "\"http://www.w3.org/2000/01/rdf-schema#\"", ",", "\n", "\"xsd\"", ":", "\"http://www.w3.org/2001/XMLSchema#\"", ",", "\n", "\"xtypes\"", ":", "\"http://purl.org/xtypes/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"dc\"", ":", "\"http://purl.org/dc/elements/1.1/\"", ",", "\n", "}", "\n", "if", "graph_name", "not", "in", "KnowledgeGraph", ".", "default_graph_prefixes", ":", "\n", "            ", "self", ".", "__add_graph_prefixes", "(", "graph_name", ",", "default_prefixes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__add_graph_prefixes", "(", "graph_name", ",", "KnowledgeGraph", ".", "default_graph_prefixes", "[", "graph_name", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities": [[149, 172], ["rdfframes.dataset.expandable_dataset.ExpandableDataset().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "", "def", "entities", "(", "self", ",", "class_name", ",", "new_dataset_name", "=", "'dataset'", ",", "entities_col_name", "=", "'entity'", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves all entities in the predefined graphs whose type is the passed class_name.\n        Equivalent to the following sparql query:\n            select distinct ?e\n            where {\n                ?e  rdf:type ?class_class\n            }\n        :param class_name: the name of the class\n        :type class_name: string\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :param entities_col_name: entities column name in the returned dataset\n        :type entities_col_name: string\n        :return: new dataset with one column of the URIs entities of the class\n        :rtype: Dataset\n        \"\"\"", "\n", "for", "graph", "in", "self", ".", "graph_prefixes", ":", "\n", "            ", "if", "\"rdf\"", "not", "in", "self", ".", "graph_prefixes", "[", "graph", "]", ":", "\n", "                ", "self", ".", "graph_prefixes", "[", "graph", "]", "[", "'rdf'", "]", "=", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "\n", "", "", "return", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "class_name", ",", "class_name", ")", ".", "expand", "(", "class_name", ",", "[", "\n", "(", "'rdf:type'", ",", "entities_col_name", ",", "False", ",", "PredicateDirection", ".", "INCOMING", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.features": [[173, 198], ["rdfframes.dataset.expandable_dataset.ExpandableDataset().expand().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "features", "(", "self", ",", "class_name", ",", "new_dataset_name", "=", "'dataset'", ",", "features_col_name", "=", "'feature_uri'", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves all features in my graphs for all entities whose type is class_name\n        Equivalent to the following sparql query:\n        select distinct ?p\n            where {\n                ?e  type ?class.\n                ?e  ?p   ?o.\n            }\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :param class_name: class that are part of my graphs\n        :type class_name: string\n        :param features_col_name: features column name in the returned dataset\n        :type features_col_name: string\n        :return: new dataset with two columns mapping each class URI to the\n            matching features\n        :rtype: Dataset\n        \"\"\"", "\n", "for", "graph", "in", "self", ".", "graph_prefixes", ":", "\n", "            ", "if", "\"rdf\"", "not", "in", "self", ".", "graph_prefixes", "[", "graph", "]", ":", "\n", "                ", "self", ".", "graph_prefixes", "[", "graph", "]", "[", "'rdf'", "]", "=", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "\n", "", "", "return", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "class_name", ",", "class_name", ")", ".", "expand", "(", "class_name", ",", "[", "(", "'rdf:type'", ",", "\"entity\"", ",", "False", ",", "PredicateDirection", ".", "INCOMING", ")", "]", ")", ".", "expand", "(", "\"entity\"", ",", "[", "(", "features_col_name", ",", "\"feature_value\"", ",", "False", ",", "PredicateDirection", ".", "OUTGOING", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities_and_features": [[199, 234], ["rdfframes.dataset.expandable_dataset.ExpandableDataset().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand.expand", "predicate_list.append", "rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "entities_and_features", "(", "self", ",", "class_name", ",", "features", ",", "new_dataset_name", "=", "'dataset'", ",", "entities_col_name", "=", "'entity'", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves all entities in my graphs whose types are in the passed\n        classes and their specified features.\n        When an entity has two values for a  specific features, two rows are returned for the same entity.\n        Equivalent to the following query:\n        select ?e ?o1 ?o2 ..\n        where {\n                ?e  type ?class\n                ?e ?p1 ?o1\n                ?e ?p2 ?o2\n                ..\n        }\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :param class_name: class that are part of my graphs\n        :type class_name: string\n        :param features: a list 2-tuples (feature_uri, new_col_name) where each tuple represents a feature.\n        :type features: a list of tuples of strings\n        :param entities_col_name: entities column name in the returned dataset\n        :type entities_col_name: string\n        :return: new dataset with at least two columns mapping each class URI to\n            the matching entities and their features\n        :rtype: Dataset\n        \"\"\"", "\n", "for", "graph", "in", "self", ".", "graph_prefixes", ":", "\n", "            ", "if", "\"rdf\"", "not", "in", "self", ".", "graph_prefixes", "[", "graph", "]", ":", "\n", "                ", "self", ".", "graph_prefixes", "[", "graph", "]", "[", "'rdf'", "]", "=", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "\n", "", "", "ds", "=", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "class_name", ",", "class_name", ")", ".", "expand", "(", "class_name", ",", "[", "(", "'rdf:type'", ",", "entities_col_name", ",", "False", ",", "PredicateDirection", ".", "INCOMING", ")", "]", ")", "\n", "predicate_list", "=", "[", "]", "\n", "for", "(", "pred_uri", ",", "col_name", ")", "in", "features", ":", "\n", "            ", "predicate_list", ".", "append", "(", "(", "pred_uri", ",", "col_name", ",", "False", ",", "PredicateDirection", ".", "OUTGOING", ")", ")", "\n", "", "ds", ".", "expand", "(", "entities_col_name", ",", "predicate_list", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.classes_and_freq": [[235, 261], ["rdfframes.dataset.expandable_dataset.ExpandableDataset().expand().group_by().count", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand().group_by", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "classes_and_freq", "(", "self", ",", "new_dataset_name", "=", "'dataset'", ",", "classes_col_name", "=", "'class'", ",", "frequency_col_name", "=", "'frequency'", ")", ":", "\n", "        ", "\"\"\"\n        retrieves all classes in my graph and their number of instances.\n        Equivalent to the following query:\n        select ?class count(distinct ?e)\n            where {\n                ?e  type ?class.\n            }\n            group by ?class\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :param classes_col_name: class column name in the returned dataset\n        :type classes_col_name: string\n        :param frequency_col_name: frequency column name in the returned dataset\n        :type frequency_col_name: string\n        :return: new dataset with two columns mapping each class URI to the\n            number of entities of this type\n        :rtype: Dataset \n        \"\"\"", "\n", "for", "graph", "in", "self", ".", "graph_prefixes", ":", "\n", "            ", "if", "\"rdf\"", "not", "in", "self", ".", "graph_prefixes", "[", "graph", "]", ":", "\n", "                ", "self", ".", "graph_prefixes", "[", "graph", "]", "[", "'rdf'", "]", "=", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "\n", "", "", "return", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "\"instance\"", ",", "\"instance\"", ")", ".", "expand", "(", "\"instance\"", ",", "[", "(", "'rdf:type'", ",", "classes_col_name", ",", "False", ",", "PredicateDirection", ".", "OUTGOING", ")", "]", ")", ".", "group_by", "(", "[", "classes_col_name", "]", ")", ".", "count", "(", "'instance'", ",", "frequency_col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.features_and_freq": [[262, 293], ["rdfframes.dataset.expandable_dataset.ExpandableDataset().expand().expand().group_by().count", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand().expand().group_by", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "features_and_freq", "(", "self", ",", "class_name", ",", "new_dataset_name", "=", "'dataset'", ",", "features_col_name", "=", "\"feature\"", ",", "\n", "frequency_col_name", "=", "'frequency'", ")", ":", "\n", "        ", "\"\"\"\n        retrieves all features of the specified class and their frequency.\n        equivalent to the following query:\n        select ?class ?p count(distinct ?e)\n        where {\n            ?e  type ?class.\n            ?e ?p ?o\n        }\n            group by ?class, ?p\n        :param class_name: class that are part of my graphs\n        :type class_name: string\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :param features_col_name: features column name in the returned dataset\n        :type features_col_name: string\n        :param frequency_col_name: frequency column name in the returned dataset\n        :type frequency_col_name: string\n        :return: new dataset with three columns mapping each class URI to the\n            matching features and their frequency\n        :rtype: Dataset\n        \"\"\"", "\n", "for", "graph", "in", "self", ".", "graph_prefixes", ":", "\n", "            ", "if", "\"rdf\"", "not", "in", "self", ".", "graph_prefixes", "[", "graph", "]", ":", "\n", "                ", "self", ".", "graph_prefixes", "[", "graph", "]", "[", "'rdf'", "]", "=", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "\n", "", "", "return", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "class_name", ",", "class_name", ")", ".", "expand", "(", "class_name", ",", "[", "(", "'rdf:type'", ",", "'instance'", ",", "False", ",", "PredicateDirection", ".", "INCOMING", ")", "]", ")", ".", "expand", "(", "'instance'", ",", "[", "(", "features_col_name", ",", "'feature_value'", ",", "False", ",", "PredicateDirection", ".", "OUTGOING", ")", "]", ")", ".", "group_by", "(", "[", "features_col_name", "]", ")", ".", "count", "(", "'feature_value'", ",", "frequency_col_name", ",", "unique", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.num_entities": [[294, 320], ["rdfframes.dataset.expandable_dataset.ExpandableDataset().expand().count", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "num_entities", "(", "self", ",", "class_name", ",", "new_dataset_name", "=", "'dataset'", ",", "num_entities_col_name", "=", "'num_entities'", ")", ":", "\n", "        ", "\"\"\"\n        Counts all entities in the predefined graphs whose type is the passed classes.\n        Equivalent to the following query:\n        foreach class in classes:\n            select ?class count(distinct ?e)\n            where {\n                ?e  type ?class\n            }\n        :param class_name: class that are part of my graphs\n        :type class_name: string\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :param num_entities_col_name: count of entities column name in the\n            returned dataset\n        :type num_entities_col_name: string\n        :return: new dataset with two columns mapping each class URI to the\n            count of the matching entities\n        :rtype: Dataset\n        \"\"\"", "\n", "for", "graph", "in", "self", ".", "graph_prefixes", ":", "\n", "            ", "if", "\"rdf\"", "not", "in", "self", ".", "graph_prefixes", "[", "graph", "]", ":", "\n", "                ", "self", ".", "graph_prefixes", "[", "graph", "]", "[", "'rdf'", "]", "=", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "\n", "", "", "return", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "class_name", ",", "class_name", ")", ".", "expand", "(", "class_name", ",", "[", "(", "'rdf:type'", ",", "'instance'", ",", "False", ",", "PredicateDirection", ".", "INCOMING", ")", "]", ")", ".", "count", "(", "'instance'", ",", "num_entities_col_name", ",", "unique", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range": [[321, 344], ["rdfframes.dataset.expandable_dataset.ExpandableDataset().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "feature_domain_range", "(", "self", ",", "feature", ",", "domain_col_name", "=", "\"domain\"", ",", "range_col_name", "=", "\"range\"", ",", "new_dataset_name", "=", "'dataset'", ")", ":", "\n", "        ", "\"\"\"\n        retrieves all the subjects and objects of a given predicate. When graphs\n        is passed, restrict to the specified graphs\n        Equivalent to the query:\n            select ?s ?o\n            where {\n                ?s  feature ?o\n            }\n        :param feature: feature to find its domain and range\n        :type feature: string\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :param domain_col_name: name of domain column in the returned dataset\n        :type domain_col_name: string\n        :param range_col_name: name of range column in the returned dataset\n        :type range_col_name: string\n        :return: new dataset with two columns mapping each subject URI to the\n            object connected by the passed predicate\n        :rtype: Dataset\n        \"\"\"", "\n", "return", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "domain_col_name", ",", "domain_col_name", ")", ".", "expand", "(", "domain_col_name", ",", "[", "(", "feature", ",", "range_col_name", ",", "False", ",", "PredicateDirection", ".", "OUTGOING", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.dataset_with_entity": [[345, 358], ["rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["None"], ["", "def", "dataset_with_entity", "(", "self", ",", "entity", ",", "new_dataset_name", "=", "'dataset'", ")", ":", "\n", "        ", "\"\"\"\n        Creates a new one-column dataset filled with the passed entities\n        :param entities: list of entities URIs\n        :type entities: list of strings\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :param entities_col_name: the entities column name in the created dataset\n        :type entities_col_name: string\n        :return: dataset with one column filled with the passed entities URIs\n        :rtype: Dataset\n        \"\"\"", "\n", "return", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "entity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.describe_entity": [[359, 383], ["rdfframes.dataset.expandable_dataset.ExpandableDataset().expand().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset().expand", "rdfframes.dataset.expandable_dataset.ExpandableDataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "describe_entity", "(", "self", ",", "entity", ",", "new_dataset_name", "=", "'dataset'", ",", "class_col_name", "=", "'class'", ",", "feature_col_name", "=", "'feature'", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves the class and the features of a specific entity\n        Equivalent to the query:\n        select ?class ?p\n        where {\n            ?e  rdf:type ?class\n            ?e ?p ?o\n        }        \n        :param entity: entity uri\n        :type entity: string\n        :param class_col_name: the class column name in the returned dataset\n        :type class_col_name: string\n        :param new_dataset_name: the name of the created dataset holding the entities\n        :type new_dataset_name: string\n        :return: (class, list of features)\n        :rtype: tuple of (string, list of strings)\n        \"\"\"", "\n", "for", "graph", "in", "self", ".", "graph_prefixes", ":", "\n", "            ", "if", "\"rdf\"", "not", "in", "self", ".", "graph_prefixes", "[", "graph", "]", ":", "\n", "                ", "self", ".", "graph_prefixes", "[", "graph", "]", "[", "'rdf'", "]", "=", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "\n", "", "", "return", "ExpandableDataset", "(", "self", ",", "new_dataset_name", ",", "entity", ",", "'instance'", ")", ".", "expand", "(", "'instance'", ",", "[", "(", "'rdf:type'", ",", "class_col_name", ",", "False", ",", "PredicateDirection", ".", "OUTGOING", ")", "]", ")", ".", "expand", "(", "'instance'", ",", "[", "(", "feature_col_name", ",", "\"feature_value\"", ",", "False", ",", "PredicateDirection", ".", "OUTGOING", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.utils.constants.is_subset": [[33, 43], ["len", "len"], "function", ["None"], ["", "def", "is_subset", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "\"\"\"\n    returns true of l1 is a subset of l2 and 0 otherwise\n    \"\"\"", "\n", "if", "len", "(", "l2", ")", "<", "len", "(", "l1", ")", ":", "\n", "        ", "return", "False", "\n", "", "for", "c", "in", "l1", ":", "\n", "        ", "if", "c", "not", "in", "l2", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.vectorize_value": [[5, 10], ["isinstance"], "function", ["None"], ["def", "vectorize_value", "(", "value", ")", ":", "\n", "    ", "if", "isinstance", "(", "value", ",", "Iterable", ")", ":", "\n", "        ", "return", "value", "\n", "", "else", ":", "\n", "        ", "return", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri": [[12, 21], ["re.compile", "re.match"], "function", ["None"], ["", "", "def", "is_uri", "(", "uri", ")", ":", "\n", "    ", "regex", "=", "re", ".", "compile", "(", "\n", "r'^(?:http|ftp)s?://'", "# http:// or https://", "\n", "r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'", "# domain...", "\n", "r'localhost|'", "# localhost...", "\n", "r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'", "# ...or ip", "\n", "r'(?::\\d+)?'", "# optional port", "\n", "r'(?:/?|[/?]\\S+)$'", ",", "re", ".", "IGNORECASE", ")", "\n", "return", "re", ".", "match", "(", "regex", ",", "uri", ")", "is", "not", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins_old.test_expandable_expandable_join": [[7, 46], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand().select_cols.expand().select_cols", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand().select_cols.expand().select_cols", "dataset.expand().select_cols.join", "dataset.expand().select_cols.to_sparql", "print", "dataset.expand().select_cols.expand", "dataset2.expand().select_cols.expand"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["def", "test_expandable_expandable_join", "(", "join_type", ",", "optional1", "=", "False", ",", "optional2", "=", "False", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "optional1", ")", "\n", "]", ")", ".", "select_cols", "(", "[", "'tweep'", ",", "'tweet'", "]", ")", "\n", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter2'", ",", "'https://twitter2.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "}", ")", "\n", "dataset2", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:UserAccount'", ",", "\n", "new_dataset_name", "=", "'dataset2'", ",", "\n", "entities_col_name", "=", "'tweeter'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweeter'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_name'", ",", "'name'", ",", "optional2", ")", "\n", "]", ")", ".", "select_cols", "(", "[", "'tweeter'", "]", ")", "\n", "\n", "dataset", ".", "join", "(", "dataset2", ",", "'tweep'", ",", "'tweeter'", ",", "'tweep'", ",", "join_type", ")", "\n", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"SPARQL query with {} =\\n{}\\n\"", ".", "format", "(", "join_type", ",", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins_old.test_join_instead_of_expand": [[48, 76], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities().expand", "rdfframes.knowledge_graph.KnowledgeGraph.entities().expand", "graph.entities().expand.join", "graph.entities().expand.to_sparql", "print", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "rdfframes.knowledge_graph.KnowledgeGraph.entities"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["", "def", "test_join_instead_of_expand", "(", "join_type", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset1", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", "]", ")", "\n", "\n", "dataset2", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "]", ")", "\n", "\n", "dataset2", ".", "join", "(", "dataset1", ",", "'tweet'", ",", "'tweet'", ",", "'tweet'", ",", "join_type", ")", "\n", "\n", "sparql_query", "=", "dataset2", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"SPARQL query with {} =\\n{}\\n\"", ".", "format", "(", "join_type", ",", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins_old.test_expandable_expandable_3_joins": [[78, 122], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand.expand", "dataset2.expand.join", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset3.expand.expand", "dataset3.expand.join", "dataset3.expand.to_sparql", "print"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "test_expandable_expandable_3_joins", "(", "join_type", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "\n", "dataset2", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:UserAccount'", ",", "\n", "new_dataset_name", "=", "'dataset2'", ",", "\n", "entities_col_name", "=", "'tweep'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweep'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_name'", ",", "'name'", ",", "False", ")", ",", "\n", "(", "'sioc:has_follower'", ",", "'follower'", ",", "False", ")", "\n", "]", ")", "\n", "\n", "dataset2", ".", "join", "(", "dataset", ",", "'tweep'", ",", "'tweep'", ",", "'tweep'", ",", "join_type", ")", "\n", "\n", "dataset3", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:UserAccount'", ",", "\n", "new_dataset_name", "=", "'dataset3'", ",", "\n", "entities_col_name", "=", "'tweeter'", ")", "\n", "\n", "dataset3", "=", "dataset3", ".", "expand", "(", "src_col_name", "=", "'tweeter'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_id'", ",", "'id'", ",", "False", ")", "\n", "]", ")", "\n", "\n", "dataset3", ".", "join", "(", "dataset2", ",", "'tweeter'", ",", "'follower'", ",", "'follower'", ",", "join_type", ")", "\n", "\n", "sparql_query", "=", "dataset3", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"SPARQL query with {} =\\n{}\\n\"", ".", "format", "(", "join_type", ",", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins_old.test_expandable_expandable_join_w_selectcols": [[124, 157], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand().select_cols.expand().select_cols", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand().select_cols.expand().select_cols", "dataset.expand().select_cols.join", "dataset.expand().select_cols.to_sparql", "print", "dataset.expand().select_cols.expand", "dataset2.expand().select_cols.expand"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "test_expandable_expandable_join_w_selectcols", "(", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", ".", "select_cols", "(", "[", "'tweep'", ",", "'text'", "]", ")", "\n", "\n", "dataset2", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:tweeter'", ",", "\n", "new_dataset_name", "=", "'dataset2'", ",", "\n", "entities_col_name", "=", "'tweep'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweep'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_name'", ",", "'name'", ",", "False", ")", "\n", "]", ")", ".", "select_cols", "(", "[", "'tweep'", ",", "'name'", "]", ")", "\n", "\n", "dataset", ".", "join", "(", "dataset2", ",", "'tweep'", ",", "'tweep'", ",", "'tweep'", ",", "JoinType", ".", "InnerJoin", ")", "\n", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"SPARQL query =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins_old.test_expandable_grouped_join": [[159, 192], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand().group_by().count().filter.expand().group_by().count().filter", "dataset.expand.join", "dataset.expand.to_sparql", "print", "dataset2.expand().group_by().count().filter.expand().group_by().count", "dataset2.expand().group_by().count().filter.expand().group_by", "dataset2.expand().group_by().count().filter.expand"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "test_expandable_grouped_join", "(", "join_type", ")", ":", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "\n", "dataset2", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweeter'", ")", "\n", "]", ")", ".", "group_by", "(", "[", "'tweeter'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", ".", "filter", "(", "\n", "conditions_dict", "=", "{", "'tweets_count'", ":", "[", "'>= {}'", ".", "format", "(", "200", ")", ",", "'<= {}'", ".", "format", "(", "300", ")", "]", "}", ")", "\n", "dataset", ".", "join", "(", "dataset2", ",", "'tweep'", ",", "'tweeter'", ",", "'user'", ",", "join_type", ")", "\n", "#dataset.select_cols(['user'])", "\n", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"SPARQL query with {} =\\n{}\\n\"", ".", "format", "(", "join_type", ",", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins_old.test_grouped_expandable_join": [[211, 246], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand.expand().group_by().count().filter", "dataset2.expand.expand", "dataset2.expand.join", "dataset2.expand.select_cols", "dataset2.expand.to_sparql", "print", "dataset2.expand.expand().group_by().count", "dataset2.expand.expand().group_by", "dataset2.expand.expand"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "test_grouped_expandable_join", "(", "join_type", ")", ":", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "\n", "dataset2", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweeter'", ")", "\n", "]", ")", ".", "group_by", "(", "[", "'tweeter'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", ".", "filter", "(", "\n", "conditions_dict", "=", "{", "'tweets_count'", ":", "[", "'>= {}'", ".", "format", "(", "200", ")", ",", "'<= {}'", ".", "format", "(", "300", ")", "]", "}", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweeter'", ",", "predicate_list", "=", "[", "(", "'rdf:type'", ",", "'sioc:UserAccount'", ")", "]", ")", "\n", "dataset2", ".", "join", "(", "dataset", ",", "'tweeter'", ",", "'tweep'", ",", "'user'", ",", "join_type", ")", "\n", "dataset2", ".", "select_cols", "(", "[", "'user'", "]", ")", "\n", "\n", "\n", "sparql_query", "=", "dataset2", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"SPARQL query with {} =\\n{}\\n\"", ".", "format", "(", "join_type", ",", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins_old.test_grouped_grouped_join_diff_graphs": [[250, 286], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand().group_by().count().filter.expand().group_by().count().filter", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand().group_by().count().filter.expand().group_by().count().filter", "dataset.expand().group_by().count().filter.join", "dataset.expand().group_by().count().filter.select_cols", "dataset.expand().group_by().count().filter.to_sparql", "print", "dataset.expand().group_by().count().filter.expand().group_by().count", "dataset2.expand().group_by().count().filter.expand().group_by().count", "dataset.expand().group_by().count().filter.expand().group_by", "dataset2.expand().group_by().count().filter.expand().group_by", "dataset.expand().group_by().count().filter.expand", "dataset2.expand().group_by().count().filter.expand"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "test_grouped_grouped_join_diff_graphs", "(", "join_type", ")", ":", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "]", ")", ".", "group_by", "(", "[", "'tweep'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", ".", "filter", "(", "{", "'tweets_count'", ":", "[", "'>= {}'", ".", "format", "(", "1000", ")", "]", "}", ")", "\n", "\n", "graph2", "=", "KnowledgeGraph", "(", "'twitter2'", ",", "'https://twitter2.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc2\"", ":", "\"http://rdfs.org/sioc2/ns#\"", ",", "\n", "\"sioct2\"", ":", "\"http://rdfs.org/sioc2/types#\"", ",", "\n", "}", ")", "\n", "dataset2", "=", "graph2", ".", "entities", "(", "class_name", "=", "'sioct2:twitterPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc2:has_creater'", ",", "'tweeter'", ")", "\n", "]", ")", ".", "group_by", "(", "[", "'tweeter'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count2'", ",", "unique", "=", "False", ")", ".", "filter", "(", "conditions_dict", "=", "{", "'tweets_count2'", ":", "[", "'>= {}'", ".", "format", "(", "200", ")", ",", "'<= {}'", ".", "format", "(", "300", ")", "]", "}", ")", "\n", "dataset", ".", "join", "(", "dataset2", ",", "'tweep'", ",", "'tweeter'", ",", "'user'", ",", "join_type", ")", "\n", "dataset", ".", "select_cols", "(", "[", "'user'", "]", ")", "\n", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"SPARQL query with {} =\\n{}\\n\"", ".", "format", "(", "join_type", ",", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins_old.test_grouped_grouped_join": [[288, 324], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand().group_by().count().filter.expand().group_by().count().filter", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand().group_by().count().filter.expand().group_by().count().filter", "dataset.expand().group_by().count().filter.join", "dataset.expand().group_by().count().filter.select_cols", "dataset.expand().group_by().count().filter.to_sparql", "print", "dataset.expand().group_by().count().filter.expand().group_by().count", "dataset2.expand().group_by().count().filter.expand().group_by().count", "dataset.expand().group_by().count().filter.expand().group_by", "dataset2.expand().group_by().count().filter.expand().group_by", "dataset.expand().group_by().count().filter.expand", "dataset2.expand().group_by().count().filter.expand"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "test_grouped_grouped_join", "(", "join_type", ")", ":", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "]", ")", ".", "group_by", "(", "[", "'tweep'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", ".", "filter", "(", "{", "'tweets_count'", ":", "[", "'>= {}'", ".", "format", "(", "1000", ")", "]", "}", ")", "\n", "\n", "graph2", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc2\"", ":", "\"http://rdfs.org/sioc2/ns#\"", ",", "\n", "\"sioct2\"", ":", "\"http://rdfs.org/sioc2/types#\"", ",", "\n", "}", ")", "\n", "dataset2", "=", "graph2", ".", "entities", "(", "class_name", "=", "'sioct2:twitterPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc2:has_creater'", ",", "'tweeter'", ")", "\n", "]", ")", ".", "group_by", "(", "[", "'tweeter'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count2'", ",", "unique", "=", "False", ")", ".", "filter", "(", "conditions_dict", "=", "{", "'tweets_count2'", ":", "[", "'>= {}'", ".", "format", "(", "200", ")", ",", "'<= {}'", ".", "format", "(", "300", ")", "]", "}", ")", "\n", "dataset", ".", "join", "(", "dataset2", ",", "'tweep'", ",", "'tweeter'", ",", "'user'", ",", "join_type", ")", "\n", "dataset", ".", "select_cols", "(", "[", "'user'", "]", ")", "\n", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"SPARQL query with {} =\\n{}\\n\"", ".", "format", "(", "join_type", ",", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_join.expand_groupby_join": [[26, 35], ["graph.entities().expand().group_by().count", "graph.entities().expand", "graph.entities().expand.join", "print", "graph.entities().expand().group_by", "graph.entities", "basketball_team.join.to_sparql", "graph.entities().expand", "graph.entities", "rdfframes.utils.constants.JoinType.InnerJoin", "rdfframes.utils.constants.JoinType.LeftOuterJoin", "rdfframes.utils.constants.JoinType.RightOuterJoin", "rdfframes.utils.constants.JoinType.OuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["def", "expand_groupby_join", "(", "join_type", ")", ":", "\n", "  ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", ".", "group_by", "(", "[", "'team'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", "\n", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "basketball_palyer_team", "=", "basketball_team", ".", "join", "(", "basketball_palyer", ",", "'team'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "\"SPARQL QUERY FOR JOIN TYPE {} \\n{}\\n\"", ".", "format", "(", "join_type", ",", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", ")", "\n", "#df = basketball_palyer_team.execute(client)", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_join.groupby_expand_join": [[40, 49], ["graph.entities().expand().group_by().count", "graph.entities().expand", "graph.entities().expand().group_by().count.join", "print", "graph.entities().expand().group_by", "graph.entities", "basketball_palyer.join.to_sparql", "graph.entities().expand", "graph.entities", "rdfframes.utils.constants.JoinType.InnerJoin", "rdfframes.utils.constants.JoinType.LeftOuterJoin", "rdfframes.utils.constants.JoinType.RightOuterJoin", "rdfframes.utils.constants.JoinType.OuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["", "def", "groupby_expand_join", "(", "join_type", ")", ":", "\n", "  ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", ".", "group_by", "(", "[", "'team'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", "\n", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "basketball_palyer_team", "=", "basketball_palyer", ".", "join", "(", "basketball_team", ",", "'team'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "\"SPARQL QUERY FOR JOIN TYPE {} \\n{}\\n\"", ".", "format", "(", "join_type", ",", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_join.expand_join": [[51, 59], ["graph.entities().expand", "graph.entities().expand", "graph.entities().expand.join", "print", "basketball_team.join.to_sparql", "graph.entities", "graph.entities", "rdfframes.utils.constants.JoinType.InnerJoin", "rdfframes.utils.constants.JoinType.LeftOuterJoin", "rdfframes.utils.constants.JoinType.RightOuterJoin", "rdfframes.utils.constants.JoinType.OuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["", "def", "expand_join", "(", "join_type", ")", ":", "\n", "  ", "basketball_palyer", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:nationality'", ",", "'nationality'", ")", ",", "(", "'dbpp:birthPlace'", ",", "'place'", ")", ",", "(", "'dbpp:birthDate'", ",", "'birthDate'", ")", ",", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", "\n", "basketball_team", "=", "graph", ".", "entities", "(", "'dbpo:BasketballTeam'", ",", "entities_col_name", "=", "'team'", ")", ".", "expand", "(", "'team'", ",", "[", "(", "'dbpp:president'", ",", "'president'", ")", ",", "(", "'dbpp:sponsor'", ",", "'sponsor'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", "\n", "basketball_palyer_team", "=", "basketball_team", ".", "join", "(", "basketball_palyer", ",", "'team'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "basketball_palyer_team", ".", "to_sparql", "(", ")", ")", "\n", "#df = basketball_palyer_team.execute(client)", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_join.group_join": [[62, 72], ["graph.entities().expand().group_by().count", "graph.entities().expand().group_by().count", "graph.entities().expand().group_by().count.join", "print", "basket_ball.join.to_sparql", "graph.entities().expand().group_by", "graph.entities().expand().group_by", "graph.entities().expand", "graph.entities().expand", "graph.entities", "graph.entities", "rdfframes.utils.constants.JoinType.InnerJoin", "rdfframes.utils.constants.JoinType.LeftOuterJoin", "rdfframes.utils.constants.JoinType.RightOuterJoin", "rdfframes.utils.constants.JoinType.OuterJoin"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities"], ["", "def", "group_join", "(", "join_type", ")", ":", "\n", "    ", "basket_ball", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'place'", ")", "]", ")", ".", "group_by", "(", "[", "'place'", "]", ")", ".", "count", "(", "'player'", ",", "'count_basketball_players'", ",", "True", ")", "\n", "\n", "tennis", "=", "graph", ".", "entities", "(", "'dbpo:TennisPlayer'", ",", "entities_col_name", "=", "'player'", ")", ".", "expand", "(", "'player'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'place'", ")", "]", ")", ".", "group_by", "(", "[", "'place'", "]", ")", ".", "count", "(", "'player'", ",", "'count_tennis_players'", ",", "True", ")", "\n", "teams", "=", "basket_ball", ".", "join", "(", "tennis", ",", "'place'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "teams", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_http_client.test_small_results": [[5, 23], ["print", "rdfframes.client.http_client.HttpClient", "rdfframes.client.http_client.HttpClient.execute_query", "print", "len", "type"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.execute_query", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type"], ["def", "test_small_results", "(", ")", ":", "\n", "    ", "print", "(", "'test_small_results:'", ")", "\n", "query", "=", "'SELECT ?tweet (min(?tag) AS ?min_tags)  FROM <http://twitter.com/> WHERE {?tweet <http://rdfs.org/sioc/ns#has_creater> <http://twitter.com/9977822/> . ?tweet <http://twitter.com/ontology/hashashtag> ?tag} GROUP BY ?tweet;'", "\n", "endpoint", "=", "'http://10.161.202.101:8890/sparql/'", "\n", "port", "=", "8890", "\n", "output_format", "=", "HttpClientDataFormat", ".", "CSV", "\n", "max_rows", "=", "1000", "\n", "timeout", "=", "120", "\n", "default_graph_url", "=", "'http://twitter.com'", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "\n", "port", "=", "port", ",", "\n", "return_format", "=", "output_format", ",", "\n", "timeout", "=", "timeout", ",", "\n", "default_graph_uri", "=", "default_graph_url", ",", "\n", "max_rows", "=", "max_rows", "\n", ")", "\n", "for", "res", "in", "client", ".", "execute_query", "(", "query", ",", "HttpClientDataFormat", ".", "CSV", ",", "'response_data.txt'", ")", ":", "\n", "        ", "print", "(", "'data with type {} and length {} retrieved'", ".", "format", "(", "type", "(", "res", ")", ".", "__name__", ",", "len", "(", "res", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_http_client.test_large_results": [[25, 43], ["print", "rdfframes.client.http_client.HttpClient", "rdfframes.client.http_client.HttpClient.execute_query", "print", "len", "type"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.execute_query", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type"], ["", "", "def", "test_large_results", "(", ")", ":", "\n", "    ", "print", "(", "'test_large_results:'", ")", "\n", "query", "=", "'SELECT ?tweet (min(?tag) AS ?min_tags)  FROM <http://twitter.com/> WHERE {?tweet <http://rdfs.org/sioc/ns#has_creater> <http://twitter.com/9977822/> . ?tweet <http://twitter.com/ontology/hashashtag> ?tag} GROUP BY ?tweet LIMIT 10 OFFSET 10;'", "\n", "endpoint", "=", "'http://10.161.202.101/sparql/'", "\n", "port", "=", "8890", "\n", "output_format", "=", "HttpClientDataFormat", ".", "CSV", "\n", "max_rows", "=", "10", "\n", "timeout", "=", "120", "\n", "default_graph_url", "=", "'http://twitter.com'", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "\n", "port", "=", "port", ",", "\n", "return_format", "=", "output_format", ",", "\n", "timeout", "=", "timeout", ",", "\n", "default_graph_uri", "=", "default_graph_url", ",", "\n", "max_rows", "=", "max_rows", "\n", ")", "\n", "for", "res", "in", "client", ".", "execute_query", "(", "query", ",", "HttpClientDataFormat", ".", "CSV", ",", "'response_data.txt'", ")", ":", "\n", "        ", "print", "(", "'data with type {} and length {} retrieved'", ".", "format", "(", "type", "(", "res", ")", ".", "__name__", ",", "len", "(", "res", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_http_client.test_query_with_limit": [[45, 62], ["rdfframes.client.http_client.HttpClient", "rdfframes.client.http_client.HttpClient.execute_query", "print", "len", "type", "rdfframes.client.http_client.HttpClientDataFormat.PANDAS_DF", "rdfframes.client.http_client.HttpClientDataFormat.HTML"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.execute_query", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type"], ["", "", "def", "test_query_with_limit", "(", "limit", ",", "offset", ",", "return_format", "=", "HttpClientDataFormat", ".", "DEFAULT", ",", "out_file", "=", "None", ")", ":", "\n", "    ", "query", "=", "'SELECT ?tweet (min(?tag) AS ?min_tags) FROM <http://twitter.com/> WHERE {{?tweet <http://rdfs.org/sioc/ns#has_creater> <http://twitter.com/9977822/> . ?tweet <http://twitter.com/ontology/hashashtag> ?tag}} GROUP BY ?tweet LIMIT {} OFFSET {};'", ".", "format", "(", "limit", ",", "offset", ")", "\n", "endpoint", "=", "'http://10.161.202.101:8890/sparql/'", "\n", "port", "=", "8890", "\n", "output_format", "=", "return_format", "\n", "max_rows", "=", "10", "\n", "timeout", "=", "120", "\n", "default_graph_url", "=", "'http://twitter.com'", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "\n", "port", "=", "port", ",", "\n", "return_format", "=", "output_format", ",", "\n", "timeout", "=", "timeout", ",", "\n", "default_graph_uri", "=", "default_graph_url", ",", "\n", "max_rows", "=", "max_rows", "\n", ")", "\n", "for", "res", "in", "client", ".", "execute_query", "(", "query", ",", "output_format", ",", "out_file", ")", ":", "\n", "        ", "print", "(", "'data with type {} and length {} retrieved'", ".", "format", "(", "type", "(", "res", ")", ".", "__name__", ",", "len", "(", "res", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_http_client.test_query_with_large_limit": [[64, 67], ["print", "test_http_client.test_query_with_limit"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_http_client.test_query_with_limit"], ["", "", "def", "test_query_with_large_limit", "(", ")", ":", "\n", "    ", "print", "(", "'test_query_with_large_limit:'", ")", "\n", "test_query_with_limit", "(", "100", ",", "10", ",", "HttpClientDataFormat", ".", "PANDAS_DF", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_http_client.test_query_with_small_limit": [[69, 72], ["print", "test_http_client.test_query_with_limit"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_http_client.test_query_with_limit"], ["", "def", "test_query_with_small_limit", "(", ")", ":", "\n", "    ", "print", "(", "'test_query_with_small_limit:'", ")", "\n", "test_query_with_limit", "(", "10", ",", "10", ",", "HttpClientDataFormat", ".", "HTML", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_conv.test_convenience_functions": [[7, 24], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "print", "rdfframes.knowledge_graph.KnowledgeGraph.features", "print", "rdfframes.knowledge_graph.KnowledgeGraph.entities_and_features", "print", "rdfframes.knowledge_graph.KnowledgeGraph.classes_and_freq", "print", "rdfframes.knowledge_graph.KnowledgeGraph.features_and_freq", "print", "rdfframes.knowledge_graph.KnowledgeGraph.num_entities", "print", "graph.entities.to_sparql", "graph.features.to_sparql", "graph.entities_and_features.to_sparql", "graph.classes_and_freq.to_sparql", "graph.features_and_freq.to_sparql", "graph.num_entities.to_sparql"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.features", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities_and_features", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.classes_and_freq", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.features_and_freq", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.num_entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["def", "test_convenience_functions", "(", ")", ":", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "graph_name", "=", "'dbpedia'", ")", "\n", "entities", "=", "graph", ".", "entities", "(", "'dbpo:BasketballPlayer'", ",", "entities_col_name", "=", "'player'", ")", "\n", "print", "(", "entities", ".", "to_sparql", "(", ")", ")", "\n", "features", "=", "graph", ".", "features", "(", "'dbpo:BasketballPlayer'", ",", "features_col_name", "=", "'feature_uri'", ")", "\n", "print", "(", "features", ".", "to_sparql", "(", ")", ")", "\n", "entities_feats", "=", "graph", ".", "entities_and_features", "(", "'dbpo:BasketballPlayer'", ",", "[", "(", "'dbpp:nationality'", ",", "'nationality'", ")", ",", "\n", "(", "'dbpp:birthPlace'", ",", "'place'", ")", ",", "\n", "(", "'dbpp:birthDate'", ",", "'birthDate'", ")", ",", "\n", "(", "'dbpp:team'", ",", "'team'", ")", "]", ")", "\n", "print", "(", "entities_feats", ".", "to_sparql", "(", ")", ")", "\n", "classes_freq", "=", "graph", ".", "classes_and_freq", "(", ")", "\n", "print", "(", "classes_freq", ".", "to_sparql", "(", ")", ")", "\n", "feats_freq", "=", "graph", ".", "features_and_freq", "(", "'dbpo:BasketballPlayer'", ")", "\n", "print", "(", "feats_freq", ".", "to_sparql", "(", ")", ")", "\n", "n_entities", "=", "graph", ".", "num_entities", "(", "'dbpo:BasketballPlayer'", ")", "\n", "print", "(", "n_entities", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.users_tweets_count.test_users_tweets_count": [[5, 51], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "graph.entities.expand", "ds.select_cols.expand", "ds.select_cols.group_by", "gds.filter.count", "gds.filter.filter", "ds.select_cols.sort().limit().offset", "ds.select_cols.select_cols", "ds.select_cols.to_sparql", "time.time", "print", "print", "ds.select_cols.sort().limit", "ds.select_cols.sort"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.offset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.limit", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.sort"], ["def", "test_users_tweets_count", "(", ")", ":", "\n", "    ", "\"\"\"\n    In twitter dataset, retrieve all users having tweets count >= count_threshold\n    :return:\n    \"\"\"", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "\n", "ds", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ")", ",", "\n", "(", "'dcterms:created'", ",", "'date'", ")", ",", "\n", "(", "'to:hasmedia'", ",", "'multimedia'", ")", ",", "\n", "(", "'to:hashashtag'", ",", "'hashtag'", ")", ",", "\n", "(", "'sioc:mentions'", ",", "'users_mentioned'", ")", "\n", "]", ")", "\n", "\n", "ds", "=", "ds", ".", "expand", "(", "src_col_name", "=", "'tweep'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:name'", ",", "'tweep_name'", ")", "\n", "]", ")", "\n", "\n", "gds", "=", "ds", ".", "group_by", "(", "groupby_cols_list", "=", "[", "'tweep'", "]", ")", "\n", "gds", "=", "gds", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", "\n", "gds", "=", "gds", ".", "filter", "(", "conditions_dict", "=", "{", "'tweets_count'", ":", "[", "'> {}'", ".", "format", "(", "250", ")", ",", "'< {}'", ".", "format", "(", "300", ")", "]", "}", ")", "\n", "\n", "ds", "=", "ds", ".", "sort", "(", "{", "'tweep'", ":", "'ASC'", "}", ")", ".", "limit", "(", "10", ")", ".", "offset", "(", "5", ")", "\n", "\n", "ds", "=", "ds", ".", "select_cols", "(", "[", "'tweet'", ",", "'tweep'", ",", "'tweep_name'", ",", "'text'", ",", "'date'", ",", "'multimedia'", ",", "'hashtag'", ",", "'users_mentioned'", "]", ")", "\n", "\n", "sparql", "=", "ds", ".", "to_sparql", "(", ")", "\n", "end_transformation", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Transformed in {} sec'", ".", "format", "(", "end_transformation", "-", "start", ")", ")", "\n", "print", "(", "sparql", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins.TestJoins.test_expandable_expandable_inner_join": [[9, 28], ["test_joins.TestJoins._expandable_expandable_join", "test_joins.TestJoins.assertEqual", "true_sparql.split", "test_joins.TestJoins.split"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins.TestJoins._expandable_expandable_join"], ["    ", "def", "test_expandable_expandable_inner_join", "(", "self", ")", ":", "\n", "        ", "true_sparql", "=", "\"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\"", "\"PREFIX sioc: <http://rdfs.org/sioc/ns#>\"", "\"PREFIX sioct: <http://rdfs.org/sioc/types#>\"", "\"PREFIX to: <http://twitter.com/ontology/>\"", "\"PREFIX dcterms: <http://purl.org/dc/terms/>\"", "\"PREFIX xsd: <http://www.example.org/>\"", "\"PREFIX foaf: <http://xmlns.com/foaf/0.1/>\"", "\"FROM <https://twitter.com>\"", "\"SELECT ?tweep ?name \"", "\"WHERE {\"", "\" ?tweet rdf:type sioct:microblogPost .\"", "\" ?tweet sioc:has_creater ?tweep .\"", "\" ?tweet sioc:content ?text .\"", "\" ?tweep rdf:type sioct:tweeter . \"", "\" ?tweep sioc:has_name ?name .\"", "\"}\"", "\n", "generated_sparql", "=", "self", ".", "_expandable_expandable_join", "(", "JoinType", ".", "InnerJoin", ",", "False", ",", "False", ")", "\n", "self", ".", "assertEqual", "(", "''", ".", "join", "(", "true_sparql", ".", "split", "(", ")", ")", ",", "''", ".", "join", "(", "generated_sparql", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins.TestJoins.test_expandable_expandable_inner_join_with_optional": [[29, 49], ["test_joins.TestJoins._expandable_expandable_join", "test_joins.TestJoins.assertEqual", "true_sparql.split", "test_joins.TestJoins.split"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins.TestJoins._expandable_expandable_join"], ["", "def", "test_expandable_expandable_inner_join_with_optional", "(", "self", ")", ":", "\n", "        ", "true_sparql", "=", "\"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\"", "\"PREFIX sioc: <http://rdfs.org/sioc/ns#>\"", "\"PREFIX sioct: <http://rdfs.org/sioc/types#>\"", "\"PREFIX to: <http://twitter.com/ontology/>\"", "\"PREFIX dcterms: <http://purl.org/dc/terms/>\"", "\"PREFIX xsd: <http://www.example.org/>\"", "\"PREFIX foaf: <http://xmlns.com/foaf/0.1/>\"", "\"FROM <https://twitter.com>\"", "\"SELECT ?tweep ?name \"", "\"WHERE {\"", "\" ?tweet rdf:type sioct:microblogPost .\"", "\" ?tweet sioc:has_creater ?tweep .\"", "\" ?tweep rdf:type sioct:tweeter . \"", "\" OPTIONAL {\"", "\" ?tweet sioc:content ?text .\"", "\" ?tweep sioc:has_name ?name .}\"", "\"}\"", "\n", "generated_sparql", "=", "self", ".", "_expandable_expandable_join", "(", "JoinType", ".", "InnerJoin", ",", "True", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "''", ".", "join", "(", "true_sparql", ".", "split", "(", ")", ")", ",", "''", ".", "join", "(", "generated_sparql", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins.TestJoins.test_expandable_expandable_leftouter_join": [[50, 70], ["test_joins.TestJoins._expandable_expandable_join", "test_joins.TestJoins.assertEqual", "true_sparql.split", "test_joins.TestJoins.split"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins.TestJoins._expandable_expandable_join"], ["", "def", "test_expandable_expandable_leftouter_join", "(", "self", ")", ":", "\n", "        ", "true_sparql", "=", "\"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\"", "\"PREFIX sioc: <http://rdfs.org/sioc/ns#>\"", "\"PREFIX sioct: <http://rdfs.org/sioc/types#>\"", "\"PREFIX to: <http://twitter.com/ontology/>\"", "\"PREFIX dcterms: <http://purl.org/dc/terms/>\"", "\"PREFIX xsd: <http://www.example.org/>\"", "\"PREFIX foaf: <http://xmlns.com/foaf/0.1/>\"", "\"FROM <https://twitter.com>\"", "\"SELECT ?tweep ?name \"", "\"WHERE {\"", "\" ?tweet rdf:type sioct:microblogPost .\"", "\" ?tweet sioc:has_creater ?tweep .\"", "\" ?tweet sioc:content ?text .\"", "\" OPTIONAL {\"", "\" ?tweep rdf:type sioct:tweeter . \"", "\" ?tweep sioc:has_name ?name .}\"", "\"}\"", "\n", "generated_sparql", "=", "self", ".", "_expandable_expandable_join", "(", "JoinType", ".", "LeftOuterJoin", ",", "False", ",", "False", ")", "\n", "self", ".", "assertEqual", "(", "''", ".", "join", "(", "true_sparql", ".", "split", "(", ")", ")", ",", "''", ".", "join", "(", "generated_sparql", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_joins.TestJoins._expandable_expandable_join": [[72, 104], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand().select_cols.expand().select_cols.expand().select_cols", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand.expand.expand", "dataset.expand().select_cols.expand().select_cols.join", "dataset.expand().select_cols.expand().select_cols.to_sparql", "dataset.expand().select_cols.expand().select_cols.expand"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "@", "staticmethod", "\n", "def", "_expandable_expandable_join", "(", "join_type", ",", "optional1", ",", "optional2", ")", ":", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "        ", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "optional1", ")", "\n", "]", ")", ".", "select_cols", "(", "[", "'tweep'", "]", ")", "\n", "\n", "dataset2", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:tweeter'", ",", "\n", "new_dataset_name", "=", "'dataset2'", ",", "\n", "entities_col_name", "=", "'tweeter'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweeter'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_name'", ",", "'name'", ",", "optional2", ")", "\n", "]", ")", "\n", "\n", "dataset", ".", "join", "(", "dataset2", ",", "'tweep'", ",", "'tweeter'", ",", "'tweep'", ",", "join_type", ")", "\n", "\n", "return", "dataset", ".", "to_sparql", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_aggregation.test_simple_query": [[4, 76], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.group_by().count", "dataset.expand.to_sparql", "print", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.group_by().count", "dataset.expand.to_sparql", "print", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.group_by().count().sum", "dataset.expand.to_sparql", "print", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.count", "dataset.expand.to_sparql", "print", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.group_by().count", "dataset.expand.expand", "dataset.expand.to_sparql", "print", "dataset.expand.group_by", "dataset.expand.group_by", "dataset.expand.group_by().count", "dataset.expand.group_by", "dataset.expand.group_by"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.sum", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by"], ["def", "test_simple_query", "(", ")", ":", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "dataset", "=", "dataset", ".", "group_by", "(", "[", "'tweep'", "]", ")", ".", "count", "(", "src_col_name", "=", "'tweet'", ",", "new_col_name", "=", "'tweet_count'", ",", "unique", "=", "True", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query that returns each user and his unique tweet count =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "dataset", "=", "dataset", ".", "group_by", "(", "[", "'tweep'", "]", ")", ".", "count", "(", "'tweet'", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query that returns the number of tweets per user without unique =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "dataset", "=", "dataset", ".", "group_by", "(", "[", "'tweep'", "]", ")", ".", "count", "(", "'tweet'", ",", "new_col_name", "=", "'n_tweets'", ")", ".", "sum", "(", "'n_tweets'", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query that returns the number of tweets as the sum of tweets per user without unique =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "dataset", "=", "dataset", ".", "count", "(", "\"tweet\"", ",", "unique", "=", "True", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query that returns the number of tweets =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", "\n", "]", ")", "\n", "dataset", "=", "dataset", ".", "group_by", "(", "[", "'tweep'", "]", ")", ".", "count", "(", "src_col_name", "=", "'tweet'", ",", "new_col_name", "=", "'tweet_count'", ",", "unique", "=", "True", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweep'", ",", "predicate_list", "=", "[", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "]", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query that returns the tweep, tweet_count, text of each tweet =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "# TODO: make sure this actually returns the expected result", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_join_tow_graphs.join_warning": [[36, 47], ["graph1.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand().filter", "graph1.feature_domain_range().expand().filter.join", "print", "dbpedia_actors.join.to_sparql", "graph1.feature_domain_range().expand", "graph2.feature_domain_range().expand", "graph1.feature_domain_range", "graph2.feature_domain_range"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["def", "join_warning", "(", "join_type", ")", ":", "\n", "    ", "dbpedia_actors", "=", "graph1", ".", "feature_domain_range", "(", "'dbpp:starring'", ",", "'film'", ",", "'actor'", ")", ".", "expand", "(", "'actor'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'actor_country'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country'", ":", "[", "'regex(str(?actor_country), \"USA\")'", "]", "}", ")", "#.select_cols(['name'])", "\n", "\n", "yago_actors", "=", "graph2", ".", "feature_domain_range", "(", "'yago:actedIn'", ",", "'actor'", ",", "'film'", ")", ".", "expand", "(", "'actor'", ",", "[", "(", "'yago:isCitizenOf'", ",", "'actor_country'", ")", ",", "(", "'yagoinfo:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country'", ":", "[", "'= yago:United_States'", "]", "}", ")", "#.select_cols(['name'])", "\n", "\n", "actors", "=", "dbpedia_actors", ".", "join", "(", "yago_actors", ",", "'name'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "actors", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_join_tow_graphs.join_expand": [[49, 60], ["graph1.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand().filter", "graph1.feature_domain_range().expand().filter.join", "print", "dbpedia_actors.join.to_sparql", "graph1.feature_domain_range().expand", "graph2.feature_domain_range().expand", "graph1.feature_domain_range", "graph2.feature_domain_range"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["", "def", "join_expand", "(", "join_type", ")", ":", "\n", "    ", "dbpedia_actors", "=", "graph1", ".", "feature_domain_range", "(", "'dbpp:starring'", ",", "'film1'", ",", "'actor1'", ")", ".", "expand", "(", "'actor1'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'actor_country1'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country1'", ":", "[", "'regex(str(?actor_country1), \"USA\")'", "]", "}", ")", "#.select_cols(['name'])", "\n", "\n", "yago_actors", "=", "graph2", ".", "feature_domain_range", "(", "'yago:actedIn'", ",", "'actor2'", ",", "'film2'", ")", ".", "expand", "(", "'actor2'", ",", "[", "(", "'yago:isCitizenOf'", ",", "'actor_country2'", ")", ",", "(", "'yagoinfo:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country2'", ":", "[", "'= yago:United_States'", "]", "}", ")", "#.select_cols(['name'])", "\n", "\n", "actors", "=", "dbpedia_actors", ".", "join", "(", "yago_actors", ",", "'name'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "actors", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_join_tow_graphs.join_expand_grouped": [[63, 74], ["graph1.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand().filter().group_by().count", "graph1.feature_domain_range().expand().filter.join", "print", "dbpedia_actors.join.to_sparql", "graph1.feature_domain_range().expand", "graph2.feature_domain_range().expand().filter().group_by", "graph1.feature_domain_range", "graph2.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand", "graph2.feature_domain_range"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["", "def", "join_expand_grouped", "(", "join_type", ")", ":", "\n", "    ", "dbpedia_actors", "=", "graph1", ".", "feature_domain_range", "(", "'dbpp:starring'", ",", "'film1'", ",", "'actor1'", ")", ".", "expand", "(", "'actor1'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'actor_country1'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country1'", ":", "[", "'regex(str(?actor_country1), \"USA\")'", "]", "}", ")", "#.select_cols(['name'])", "\n", "\n", "yago_actors", "=", "graph2", ".", "feature_domain_range", "(", "'yago:actedIn'", ",", "'actor2'", ",", "'film2'", ")", ".", "expand", "(", "'actor2'", ",", "[", "(", "'yago:isCitizenOf'", ",", "'actor_country2'", ")", ",", "(", "'yagoinfo:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country2'", ":", "[", "'= yago:United_States'", "]", "}", ")", ".", "group_by", "(", "[", "'name'", "]", ")", ".", "count", "(", "'film2'", ")", "\n", "\n", "actors", "=", "dbpedia_actors", ".", "join", "(", "yago_actors", ",", "'name'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "actors", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_join_tow_graphs.join_grouped": [[77, 88], ["graph1.feature_domain_range().expand().filter().group_by().count", "graph2.feature_domain_range().expand().filter().group_by().count", "graph1.feature_domain_range().expand().filter().group_by().count.join", "print", "dbpedia_actors.join.to_sparql", "graph1.feature_domain_range().expand().filter().group_by", "graph2.feature_domain_range().expand().filter().group_by", "graph1.feature_domain_range().expand().filter", "graph2.feature_domain_range().expand().filter", "graph1.feature_domain_range().expand", "graph2.feature_domain_range().expand", "graph1.feature_domain_range", "graph2.feature_domain_range"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["", "def", "join_grouped", "(", "join_type", ")", ":", "\n", "    ", "dbpedia_actors", "=", "graph1", ".", "feature_domain_range", "(", "'dbpp:starring'", ",", "'film1'", ",", "'actor1'", ")", ".", "expand", "(", "'actor1'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'actor_country1'", ")", ",", "(", "'dbpp:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country1'", ":", "[", "'regex(str(?actor_country1), \"USA\")'", "]", "}", ")", ".", "group_by", "(", "[", "'name'", "]", ")", ".", "count", "(", "'film1'", ")", "\n", "\n", "yago_actors", "=", "graph2", ".", "feature_domain_range", "(", "'yago:actedIn'", ",", "'actor2'", ",", "'film2'", ")", ".", "expand", "(", "'actor2'", ",", "[", "(", "'yago:isCitizenOf'", ",", "'actor_country2'", ")", ",", "(", "'yagoinfo:name'", ",", "'name'", ")", "]", ")", ".", "filter", "(", "{", "'actor_country2'", ":", "[", "'= yago:United_States'", "]", "}", ")", ".", "group_by", "(", "[", "'name'", "]", ")", ".", "count", "(", "'film2'", ")", "\n", "\n", "actors", "=", "dbpedia_actors", ".", "join", "(", "yago_actors", ",", "'name'", ",", "join_type", "=", "join_type", ")", "\n", "print", "(", "actors", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_nested_queries.test_expand_after_group_by": [[6, 65], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "graph.entities.to_sparql", "print", "graph.entities.expand", "dataset.expand.to_sparql", "print", "dataset.expand.group_by().count().filter", "gds.select_cols.to_sparql", "print", "gds.select_cols.expand", "gds.select_cols.to_sparql", "print", "gds.select_cols.expand", "gds.select_cols.to_sparql", "print", "gds.select_cols.select_cols", "gds.select_cols.print_query_structure", "gds.select_cols.to_sparql", "time.time", "print", "print", "dataset.expand.group_by().count", "dataset.expand.group_by"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.print_query_structure", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by"], ["def", "test_expand_after_group_by", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "# expand each tweet by the following features: text and tweep", "\n", "ds", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ")", "\n", "]", ")", "\n", "sparql_query", "=", "ds", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 2 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "# return all the tweets of users whose tweep tweeted 250-300 twweets", "\n", "gds", "=", "ds", ".", "group_by", "(", "groupby_cols_list", "=", "[", "'tweep'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", ".", "filter", "(", "{", "'tweets_count'", ":", "[", "'> {}'", ".", "format", "(", "250", ")", ",", "'< {}'", ".", "format", "(", "300", ")", "]", "}", ")", "\n", "sparql_query", "=", "gds", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 3 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "# expand these tweets by the following features: date, media, hashtags, users mentioned", "\n", "gds", "=", "gds", ".", "expand", "(", "src_col_name", "=", "'tweep'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweet'", ",", "False", ",", "PredicateDirection", ".", "INCOMING", ")", "]", ")", "\n", "sparql_query", "=", "gds", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 3.1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "gds", "=", "gds", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'dcterms:created'", ",", "'date'", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ")", ",", "\n", "(", "'to:hasmedia'", ",", "'multimedia'", ")", ",", "\n", "(", "'to:hashashtag'", ",", "'hashtag'", ")", ",", "\n", "(", "'sioc:mentions'", ",", "'users_mentioned'", ")", "\n", "]", ")", "\n", "sparql_query", "=", "gds", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 4 =\\n{}\\n\\n\\n\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "# select all the tweets and their features", "\n", "gds", "=", "gds", ".", "select_cols", "(", "[", "'tweet'", ",", "'tweep'", ",", "'text'", ",", "'date'", ",", "'multimedia'", ",", "'hashtag'", ",", "'users_mentioned'", "]", ")", "\n", "\n", "# ds.print_query_structure()", "\n", "gds", ".", "print_query_structure", "(", ")", "\n", "sparql_query", "=", "gds", ".", "to_sparql", "(", ")", "\n", "end_transformation", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Transformed in {} sec'", ".", "format", "(", "end_transformation", "-", "start", ")", ")", "\n", "print", "(", "\"sparql_query 5 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_nested_queries.test_filter_after_group_by": [[67, 102], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "graph.entities.expand", "dataset.expand.group_by().count().filter", "gds.filter.filter", "gds.filter.print_query_structure", "gds.filter.to_sparql", "time.time", "print", "print", "dataset.expand.group_by().count", "dataset.expand.group_by"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.print_query_structure", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by"], ["", "def", "test_filter_after_group_by", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "# expand each tweet by the following features: text and tweep", "\n", "ds", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ")", "\n", "]", ")", "\n", "# return all the tweets of users whose tweep tweeted 250-300 twweets", "\n", "gds", "=", "ds", ".", "group_by", "(", "groupby_cols_list", "=", "[", "'tweep'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", ".", "filter", "(", "conditions_dict", "=", "{", "'tweets_count'", ":", "[", "'> {}'", ".", "format", "(", "250", ")", ",", "'< {}'", ".", "format", "(", "300", ")", "]", "}", ")", "\n", "\n", "# expand these tweets by the following features: date, media, hashtags, users mentioned", "\n", "# TODO: Bug. implement filter fully", "\n", "gds", "=", "gds", ".", "filter", "(", "{", "'tweep'", ":", "' >= aa'", "}", ")", "\n", "gds", ".", "print_query_structure", "(", ")", "\n", "sparql_query", "=", "gds", ".", "to_sparql", "(", ")", "\n", "end_transformation", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Transformed in {} sec'", ".", "format", "(", "end_transformation", "-", "start", ")", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_flat_queries.test_simple_query": [[8, 45], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "graph.entities.to_sparql", "print", "rdfframes.client.http_client.HttpClient", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["def", "test_simple_query", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:MicroblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query to return tweets =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n", "endpoint", "=", "'http://10.161.202.101:8890/sparql/'", "\n", "port", "=", "8890", "\n", "output_format", "=", "HttpClientDataFormat", ".", "PANDAS_DF", "\n", "max_rows", "=", "1000000", "\n", "timeout", "=", "12000", "\n", "default_graph_url", "=", "'http://twitter.com/'", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "\n", "port", "=", "port", ",", "\n", "return_format", "=", "output_format", ",", "\n", "timeout", "=", "timeout", ",", "\n", "default_graph_uri", "=", "default_graph_url", ",", "\n", "max_rows", "=", "max_rows", "\n", ")", "\n", "\n", "#df = dataset.execute(client, return_format=output_format)", "\n", "duration", "=", "start", "-", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Done in {} secs\"", ".", "format", "(", "duration", ")", ")", "\n", "#print(df.head(10))", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_flat_queries.test_expand_query": [[48, 70], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.to_sparql", "print"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "test_expand_query", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "True", ")", "\n", "]", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_flat_queries.test_join_query": [[72, 106], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset2.expand.expand", "dataset.expand.join", "dataset.expand.to_sparql", "print"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "test_join_query", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'dataset1'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "\n", "dataset2", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:UserAccount'", ",", "\n", "new_dataset_name", "=", "'dataset2'", ",", "\n", "entities_col_name", "=", "'tweep'", ")", "\n", "dataset2", "=", "dataset2", ".", "expand", "(", "src_col_name", "=", "'tweep'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_name'", ",", "'name'", ",", "False", ")", "\n", "]", ")", "\n", "\n", "# TODO: put the whole first dataset in one optional block. now, its in multiple optional blocks", "\n", "dataset", ".", "join", "(", "dataset2", ",", "'tweep'", ",", "'tweep'", ",", "'tweep'", ",", "JoinType", ".", "RightOuterJoin", ")", "\n", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_flat_queries.test_select_query": [[108, 132], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.select_cols", "dataset.expand.to_sparql", "print"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "test_select_query", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "True", ")", "\n", "]", ")", "\n", "dataset", ".", "select_cols", "(", "[", "'text'", ",", "'tweet'", "]", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_flat_queries.test_filter_query": [[134, 160], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand().filter().select_cols.expand().filter().select_cols", "dataset.expand().filter().select_cols.to_sparql", "print", "dataset.expand().filter().select_cols.expand().filter", "dataset.expand().filter().select_cols.expand"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["", "def", "test_filter_query", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "True", ")", "]", ")", ".", "filter", "(", "{", "'text'", ":", "[", "' >= \\\"aa\\\"'", "]", "}", ")", ".", "select_cols", "(", "[", "'tweet'", ",", "'text'", "]", ")", "\n", "# TODO: make sure the order of filter when called before a join or optional is done before the join or the optional", "\n", "#  and when called after the join or optional are done after it", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_flat_queries.test_sort_limit_offset_query": [[162, 187], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.sort().limit().offset", "dataset.expand.to_sparql", "print", "dataset.expand.sort().limit", "dataset.expand.sort"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.offset", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.limit", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.sort"], ["", "def", "test_sort_limit_offset_query", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "True", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "dataset", ".", "sort", "(", "{", "'tweep'", ":", "'ASC'", "}", ")", ".", "limit", "(", "10", ")", ".", "offset", "(", "5", ")", "\n", "# TODO: do we care about limit after or before an offset? Do we allow one limit in each query?", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_flat_queries.test_groupby_query": [[189, 214], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.group_by.expand", "dataset.group_by.group_by", "dataset.group_by.to_sparql", "print"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "test_groupby_query", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "# class_col_name='tweet_class',", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "True", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "dataset", "=", "dataset", ".", "group_by", "(", "[", "'tweep'", "]", ")", "\n", "sparql_query", "=", "dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.test_flat_queries.test_groupby_aggregation_query": [[216, 244], ["time.time", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand.expand", "dataset.expand.group_by().count().select_cols", "dataset.group_by().count().select_cols.to_sparql", "print", "dataset.expand.group_by().count", "dataset.expand.group_by"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by"], ["", "def", "test_groupby_aggregation_query", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "# create a knowledge graph to store the graph uri and prefixes", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "'https://twitter.com'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "# return all the instances of the tweet class", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioc:microblogPost'", ",", "\n", "new_dataset_name", "=", "'tweets'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "\n", "(", "'sioc:has_creater'", ",", "'tweep'", ",", "False", ")", ",", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", "\n", "]", ")", "\n", "grouped_dataset", "=", "dataset", ".", "group_by", "(", "[", "'tweep'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", ".", "select_cols", "(", "[", "'tweep'", "]", ")", "\n", "# TODO: when select after groupby and aggregation, remove the non-selected columns from the select clause", "\n", "#  including aggregation columns", "\n", "sparql_query", "=", "grouped_dataset", ".", "to_sparql", "(", ")", "\n", "print", "(", "\"sparql_query 1 =\\n{}\\n\"", ".", "format", "(", "sparql_query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.test_queries.end_to_end_test_query.test_twitter_query": [[6, 53], ["rdfframes.client.http_client.HttpClient", "rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "graph.entities.expand().group_by().count().filter", "ds.select_cols.expand().expand", "ds.select_cols.select_cols", "print", "graph.entities.expand().group_by().count", "ds.select_cols.expand", "ds.select_cols.to_sparql", "graph.entities.expand().group_by", "graph.entities.expand"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand"], ["def", "test_twitter_query", "(", ")", ":", "\n", "# TODO: remove endpoint URI", "\n", "    ", "endpoint", "=", "'http://10.161.202.101:8890/sparql/'", "\n", "port", "=", "8890", "\n", "output_format", "=", "HttpClientDataFormat", ".", "PANDAS_DF", "\n", "max_rows", "=", "1000000", "\n", "timeout", "=", "12000", "\n", "default_graph_url", "=", "'http://twitter.com'", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "\n", "port", "=", "port", ",", "\n", "return_format", "=", "output_format", ",", "\n", "timeout", "=", "timeout", ",", "\n", "default_graph_uri", "=", "default_graph_url", ",", "\n", "max_rows", "=", "max_rows", "\n", ")", "\n", "\n", "graph", "=", "KnowledgeGraph", "(", "'twitter'", ",", "\n", "'http://twitter.com/'", ",", "\n", "prefixes", "=", "{", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"sioc\"", ":", "\"http://rdfs.org/sioc/ns#\"", ",", "\n", "\"sioct\"", ":", "\"http://rdfs.org/sioc/types#\"", ",", "\n", "\"to\"", ":", "\"http://twitter.com/ontology/\"", ",", "\n", "\"dcterms\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"xsd\"", ":", "\"http://www.example.org/\"", ",", "\n", "\"foaf\"", ":", "\"http://xmlns.com/foaf/0.1/\"", "\n", "}", ")", "\n", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'sioct:microblogPost'", ",", "\n", "entities_col_name", "=", "'tweet'", ")", "\n", "ds", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'tweet'", ",", "predicate_list", "=", "[", "(", "'sioc:has_creater'", ",", "'tweep'", ")", "]", ")", ".", "group_by", "(", "[", "'tweep'", "]", ")", ".", "count", "(", "'tweet'", ",", "'tweets_count'", ")", ".", "filter", "(", "{", "'tweets_count'", ":", "[", "'>= {}'", ".", "format", "(", "200", ")", ",", "'<= {}'", ".", "format", "(", "300", ")", "]", "}", ")", "\n", "\n", "ds", "=", "ds", ".", "expand", "(", "'tweep'", ",", "[", "(", "'sioc:has_creater'", ",", "'tweet'", ",", "False", ",", "PredicateDirection", ".", "INCOMING", ")", "]", ")", ".", "expand", "(", "'tweet'", ",", "[", "\n", "(", "'sioc:content'", ",", "'text'", ",", "False", ")", ",", "\n", "(", "'dcterms:created'", ",", "'date'", ",", "True", ")", ",", "\n", "(", "'to:hasmedia'", ",", "'multimedia'", ",", "True", ")", ",", "\n", "(", "'to:hashashtag'", ",", "'hashtag'", ",", "True", ")", ",", "\n", "(", "'sioc:mentions'", ",", "'users_mentioned'", ",", "True", ")", "\n", "]", ")", "\n", "\n", "ds", "=", "ds", ".", "select_cols", "(", "[", "'tweet'", ",", "'tweep'", ",", "'text'", ",", "'date'", ",", "'multimedia'", ",", "'hashtag'", ",", "'users_mentioned'", ",", "'tweets_count'", "]", ")", "\n", "\n", "print", "(", "\"Sparql Query = \\n{}\"", ".", "format", "(", "ds", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.__init__": [[25, 40], ["rdfframes.dataset.dataset.Dataset.__init__", "rdfframes.query_buffer.query_operators.expandable.seed_operator.SeedOperator", "expandable_dataset.ExpandableDataset.query_queue.append_node", "expandable_dataset.ExpandableDataset.columns.append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["def", "__init__", "(", "self", ",", "graph", ",", "dataset_name", ",", "seed_uri_list", ",", "seed_col_name", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a new dataset whose data is derived from a graph\n        :param graph: KnowledgeGraph object representing the graph(s) from where the dataset is derived\n        :param dataset_name: the name of the created dataset\n        :param seed_uri_list: list of uris to initialize the first column of the dataset with\n        :param seed_col_name: the name of the seed column\n        \"\"\"", "\n", "super", "(", "ExpandableDataset", ",", "self", ")", ".", "__init__", "(", "graph", ",", "dataset_name", ")", "\n", "# creating and appending the root node to the query tree", "\n", "seed_node", "=", "SeedOperator", "(", "dataset_name", ",", "seed_uri_list", ",", "seed_col_name", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "seed_node", ")", "\n", "self", ".", "columns", ".", "append", "(", "seed_col_name", ")", "\n", "self", ".", "agg_columns", "=", "[", "]", "\n", "self", ".", "is_grouped", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.filter": [[41, 61], ["conditions_dict.items", "len", "Exception", "expandable_dataset.ExpandableDataset._cache_dataset", "expandable_dataset.ExpandableDataset.filter", "conditions_dict.keys", "rdfframes.query_buffer.query_operators.shared.filter_operator.FilterOperator", "expandable_dataset.ExpandableDataset.query_queue.append_node"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "filter", "(", "self", ",", "conditions_dict", ")", ":", "\n", "        ", "\"\"\"\n        Apply the given filters on the corresponding columns in the dataset.\n        :param conditions_dict: mapping from column name to a list of predicates to apply on the column. Format:\n        {'col_name': [pred1, pred2 ... etc], ...}\n        :return: the same dataset object logically with the filtered column.\n        \"\"\"", "\n", "invalid_cols", "=", "[", "col", "for", "col", "in", "conditions_dict", ".", "keys", "(", ")", "if", "col", "not", "in", "self", ".", "columns", "]", "\n", "if", "len", "(", "invalid_cols", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Columns {} are not defined in the dataset'", ".", "format", "(", "invalid_cols", ")", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "filter", "(", "conditions_dict", ")", "\n", "\n", "", "for", "col", ",", "conditions", "in", "conditions_dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "cond", "in", "conditions", ":", "\n", "                ", "filter_node", "=", "FilterOperator", "(", "self", ".", "name", ",", "col", ",", "cond", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "filter_node", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.group_by": [[62, 84], ["rdfframes.dataset.grouped_dataset.GroupedDataset.generated_grouped_ds_name", "rdfframes.query_buffer.query_operators.shared.groupby_operator.GroupByOperator", "rdfframes.dataset.grouped_dataset.GroupedDataset", "expandable_dataset.ExpandableDataset.query_queue.append_node", "len", "Exception", "expandable_dataset.ExpandableDataset._cache_dataset", "expandable_dataset.ExpandableDataset.group_by"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.generated_grouped_ds_name", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by"], ["", "def", "group_by", "(", "self", ",", "groupby_cols_list", ")", ":", "\n", "        ", "\"\"\"\n        Group the table by the column names passed in groupby_cols_list\n        :param groupby_cols_list: list of column names to group the table by\n        :return: GroupedDataset object derived from self dataset with groupby_cols_list as grouping columns\n        \"\"\"", "\n", "invalid_cols", "=", "[", "col", "for", "col", "in", "groupby_cols_list", "if", "col", "not", "in", "self", ".", "columns", "]", "\n", "if", "len", "(", "invalid_cols", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Columns {} are not defined in the dataset'", ".", "format", "(", "invalid_cols", ")", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "group_by", "(", "groupby_cols_list", ")", "\n", "\n", "", "groupby_ds_name", "=", "GroupedDataset", ".", "generated_grouped_ds_name", "(", "self", ".", "name", ",", "groupby_cols_list", ")", "\n", "groupby_node", "=", "GroupByOperator", "(", "self", ".", "name", ",", "groupby_cols_list", ",", "groupby_ds_name", ")", "\n", "\n", "grouped_ds", "=", "GroupedDataset", "(", "self", ",", "groupby_cols_list", ",", "groupby_node", ",", "groupby_ds_name", ")", "\n", "groupby_node", ".", "grouped_dataset", "=", "grouped_ds", "\n", "self", ".", "query_queue", ".", "append_node", "(", "groupby_node", ")", "\n", "\n", "return", "grouped_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.sum": [[87, 108], ["rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "expandable_dataset.ExpandableDataset.query_queue.append_node", "expandable_dataset.ExpandableDataset.agg_columns.append", "Exception", "expandable_dataset.ExpandableDataset._cache_dataset", "expandable_dataset.ExpandableDataset.sum"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.sum"], ["", "def", "sum", "(", "self", ",", "src_col_name", ",", "new_col_name", "=", "'sum'", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to find the sum of its values\n        :param new_col_name: the new column name of the sum\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "sum", "(", "src_col_name", ",", "new_col_name", ")", "\n", "\n", "", "agg_col", "=", "src_col_name", "\n", "# TODO: Don't allow any more operations on the dataset", "\n", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "SUM", ",", "new_col_name", ",", "None", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.avg": [[109, 130], ["rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "expandable_dataset.ExpandableDataset.query_queue.append_node", "expandable_dataset.ExpandableDataset.agg_columns.append", "Exception", "expandable_dataset.ExpandableDataset._cache_dataset", "expandable_dataset.ExpandableDataset.avg"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.avg"], ["", "def", "avg", "(", "self", ",", "src_col_name", ",", "new_col_name", "=", "'avg'", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to find the max of its values\n        :param new_col_name: the new column name of the max\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "avg", "(", "src_col_name", ",", "new_col_name", ")", "\n", "\n", "", "agg_col", "=", "src_col_name", "\n", "# TODO: Don't allow any more operations on the dataset", "\n", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "AVG", ",", "new_col_name", ",", "None", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.min": [[131, 151], ["rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "expandable_dataset.ExpandableDataset.query_queue.append_node", "expandable_dataset.ExpandableDataset.agg_columns.append", "Exception", "expandable_dataset.ExpandableDataset._cache_dataset", "expandable_dataset.ExpandableDataset.min"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.min"], ["", "def", "min", "(", "self", ",", "src_col_name", ",", "new_col_name", "=", "'min'", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to find the min of its values\n        :param new_col_name: the new column name of the min\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "min", "(", "src_col_name", ",", "new_col_name", ")", "\n", "\n", "", "agg_col", "=", "src_col_name", "\n", "# TODO: Don't allow any more operations on the dataset", "\n", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "MIN", ",", "new_col_name", ",", "None", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.max": [[152, 172], ["rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "expandable_dataset.ExpandableDataset.query_queue.append_node", "expandable_dataset.ExpandableDataset.agg_columns.append", "Exception", "expandable_dataset.ExpandableDataset._cache_dataset", "expandable_dataset.ExpandableDataset.max"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.max"], ["", "def", "max", "(", "self", ",", "src_col_name", ",", "new_col_name", "=", "'max'", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to find the max of its values\n        :param new_col_name: the new column name of the max\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "max", "(", "src_col_name", ",", "new_col_name", ")", "\n", "\n", "", "agg_col", "=", "src_col_name", "\n", "# TODO: Don't allow any more operations on the dataset", "\n", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "MAX", ",", "new_col_name", ",", "None", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.count": [[173, 205], ["expandable_dataset.ExpandableDataset._cache_dataset", "expandable_dataset.ExpandableDataset.count", "rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "expandable_dataset.ExpandableDataset.query_queue.append_node", "expandable_dataset.ExpandableDataset.agg_columns.append", "rdfframes.query_buffer.query_operators.shared.integer_count_node.IntegerCountOperator", "expandable_dataset.ExpandableDataset.query_queue.append_node", "expandable_dataset.ExpandableDataset.agg_columns.append", "Exception"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "count", "(", "self", ",", "src_col_name", "=", "None", ",", "new_col_name", "=", "'count'", ",", "unique", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to count its values\n        :param new_col_name: the new column name of the count\n        :param unique: if True retun the number of unique values else return the size of the result set\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "count", "(", "src_col_name", ",", "new_col_name", ",", "unique", ")", "\n", "\n", "", "if", "unique", ":", "\n", "            ", "param", "=", "\"DISTINCT\"", "\n", "", "else", ":", "\n", "            ", "param", "=", "None", "\n", "", "if", "src_col_name", "is", "not", "None", ":", "\n", "            ", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "                ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "", "agg_col", "=", "src_col_name", "\n", "# TODO: Don't allow any more operations on the dataset", "\n", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "COUNT", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "else", ":", "\n", "# TODO: Don't allow any more operations on the dataser", "\n", "            ", "agg_node", "=", "IntegerCountOperator", "(", "self", ".", "name", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.expandable_dataset.ExpandableDataset.type": [[206, 212], ["None"], "methods", ["None"], ["", "def", "type", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return the type of the dataset as string\n        :return: dataset type as string\n        \"\"\"", "\n", "return", "\"ExpandableDataset\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.__init__": [[33, 45], ["rdfframes.query_buffer.query_queue.QueryQueue"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "graph", ",", "dataset_name", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a new dataset whose data is derived from a graph\n        :param graph: KnowledgeGraph object representing the graph(s) from where the dataset is derived\n        :param dataset_name: the name of the created dataset the query tree\n        \"\"\"", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "name", "=", "dataset_name", "\n", "self", ".", "query_queue", "=", "QueryQueue", "(", "self", ")", "\n", "self", ".", "columns", "=", "[", "]", "\n", "self", ".", "cached", "=", "False", "\n", "self", ".", "is_grouped", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand": [[46, 81], ["Exception", "dataset.Dataset._cache_dataset", "dataset.Dataset.expand", "rdfframes.query_buffer.query_operators.shared.expansion_operator.ExpansionOperator", "dataset.Dataset.query_queue.append_node", "dataset.Dataset.add_column", "dataset.Dataset.add_column", "len", "len"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column"], ["", "def", "expand", "(", "self", ",", "src_col_name", ",", "predicate_list", ")", ":", "\n", "        ", "\"\"\"\n        Expand the dataset from the source column based on the given predicates. Each entry in the predicate list\n        should have a predicate URI, the new column name which will be used to name the new dataset column and a flag to\n        indicate whether the expansion is ingoing or outgoing from the source column\n        Requires src_col_name in self.columns\n        Ensures for each predicate, new_col_name in the new dataset\n        :param src_col_name: the starting point\n        :param predicate_list: list of RDF predicates each one containing: (1) predicate URI, (2) new column name,\n         (3) optional flag, and (4) ingoing or outgoing flag\n        :return: the same dataset object, but logically a new column is appended.\n        \"\"\"", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"{} doesn't exist in the dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "expand", "(", "src_col_name", ",", "predicate_list", ")", "\n", "\n", "", "for", "predicate", "in", "predicate_list", ":", "\n", "            ", "if", "len", "(", "predicate", ")", ">", "3", ":", "\n", "                ", "direction", "=", "predicate", "[", "3", "]", "\n", "is_optional", "=", "predicate", "[", "2", "]", "\n", "", "else", ":", "\n", "                ", "direction", "=", "PredicateDirection", ".", "OUTGOING", "\n", "if", "len", "(", "predicate", ")", ">", "2", ":", "\n", "                    ", "is_optional", "=", "predicate", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "is_optional", "=", "False", "\n", "", "", "operator", "=", "ExpansionOperator", "(", "self", ".", "name", ",", "src_col_name", ",", "predicate", "[", "0", "]", ",", "predicate", "[", "1", "]", ",", "\n", "direction", ",", "is_optional", "=", "is_optional", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "operator", ")", "\n", "self", ".", "add_column", "(", "predicate", "[", "1", "]", ")", "\n", "self", ".", "add_column", "(", "predicate", "[", "0", "]", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join": [[82, 144], ["rdfframes.query_buffer.query_operators.shared.join_operator.JoinOperator", "dataset.Dataset.query_queue.append_node", "dataset.Dataset._cache_dataset", "dataset.Dataset.join", "Exception", "len", "warnings.warn", "dataset.Dataset.rem_column", "dataset.Dataset.add_column", "Exception", "Exception", "warn_cols.append", "dataset.Dataset.add_column"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.rem_column", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column"], ["", "def", "join", "(", "self", ",", "dataset2", ",", "join_col_name1", ",", "join_col_name2", "=", "None", ",", "new_column_name", "=", "None", ",", "join_type", "=", "JoinType", ".", "InnerJoin", ")", ":", "\n", "        ", "\"\"\"\n        Join this dataset with datset 2.\n        :param dataset2:\n        :param join_col_name1:\n        :param join_col_name2:\n        :param new_column_name:\n        :param join_type:\n        :return:\n        \"\"\"", "\n", "\"\"\"\n        Join this dataset with datset 2. The join key in this dataset is join_col_name1.\n        The join key is dataset2 is join_col_name2 if passed. Otherwise, it is assumed to be the same (join_col_name1).\n        If new_col_name is passed, rename the join column in the new dataset to new_Col_name,.\n        :param dataset2:\n        :param join_col_name1:\n        :param join_col_name2:\n        :param new_column_name:\n        :param join_type:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "join", "(", "dataset2", ",", "join_col_name1", ",", "join_col_name2", ",", "new_column_name", ",", "join_type", ")", "\n", "\n", "", "if", "join_col_name1", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"column {} not in the dataset\"", ".", "format", "(", "join_col_name1", ")", ")", "\n", "# specify the join key in dataset2", "\n", "", "if", "join_col_name2", "is", "None", ":", "\n", "            ", "if", "join_col_name1", "not", "in", "dataset2", ".", "columns", ":", "\n", "                ", "raise", "Exception", "(", "\"No join key specified for dataset2 and join_col_name1 is not in dataset2\"", ")", "\n", "", "else", ":", "\n", "                ", "join_col_name2", "=", "join_col_name1", "\n", "", "", "elif", "join_col_name2", "not", "in", "dataset2", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Join key {} doesn't exist in dataset2\"", ".", "format", "(", "join_col_name2", ")", ")", "\n", "\n", "", "warn_cols", "=", "[", "]", "\n", "for", "col", "in", "dataset2", ".", "columns", ":", "\n", "            ", "if", "col", "!=", "join_col_name2", "and", "col", "in", "self", ".", "columns", ":", "\n", "                ", "warn_cols", ".", "append", "(", "col", ")", "\n", "", "", "if", "len", "(", "warn_cols", ")", ">", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"columns {} are common between dataset 1 and 2. All these columns will be used as \"", "\n", "\"join columns\"", ".", "format", "(", "warn_cols", ")", ")", "\n", "\n", "# find the new column name", "\n", "", "if", "new_column_name", "is", "None", ":", "\n", "            ", "new_column_name", "=", "join_col_name1", "\n", "", "else", ":", "# new_column_name is not None", "\n", "            ", "self", ".", "rem_column", "(", "join_col_name1", ")", "\n", "self", ".", "add_column", "(", "new_column_name", ")", "\n", "\n", "", "node", "=", "JoinOperator", "(", "self", ",", "dataset2", ",", "join_col_name1", ",", "join_col_name2", ",", "join_type", ",", "new_column_name", ")", "\n", "\n", "# ds1.columns = union(ds1.columns, ds2.columns)", "\n", "for", "col", "in", "dataset2", ".", "columns", ":", "\n", "            ", "if", "col", "not", "in", "self", ".", "columns", "and", "col", "!=", "join_col_name2", ":", "\n", "                ", "self", ".", "add_column", "(", "col", ")", "\n", "\n", "", "", "self", ".", "query_queue", ".", "append_node", "(", "node", ")", "\n", "# TODO: if we allow the join between different graphs, Union the graphs", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.filter": [[145, 153], ["None"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "conditions_dict", ")", ":", "\n", "        ", "\"\"\"\n        Apply the given filters on the corresponding columns in the dataset.\n        :param conditions_dict: mapping from column name to a list of predicates to apply on the column. Format:\n        {'col_name': [pred1, pred2 ... etc], ...}\n        :return: the same dataset object logically with the filtered column.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols": [[154, 170], ["rdfframes.query_buffer.query_operators.shared.select_operator.SelectOperator", "dataset.Dataset.query_queue.append_node", "len", "Exception"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "select_cols", "(", "self", ",", "col_list", ")", ":", "\n", "        ", "\"\"\"\n        Select the columns of interest from the returned dataset when executing the SPARQL query\n        :param col_list: list of column names to return\n        :return: a dataset that contains only the selected columns and the rows that have a value for at least one of\n            the selected columns\n        \"\"\"", "\n", "invalid_cols", "=", "[", "col", "for", "col", "in", "col_list", "if", "col", "not", "in", "self", ".", "columns", "]", "\n", "if", "len", "(", "invalid_cols", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Columns {} are not defined in the dataset'", ".", "format", "(", "invalid_cols", ")", ")", "\n", "", "select_node", "=", "SelectOperator", "(", "self", ".", "name", ",", "col_list", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "select_node", ")", "\n", "# change the dataset to contain only the new columns", "\n", "self", ".", "columns", "=", "col_list", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.group_by": [[171, 178], ["None"], "methods", ["None"], ["", "def", "group_by", "(", "self", ",", "groupby_cols_list", ")", ":", "\n", "        ", "\"\"\"\n        Group the table by the column names passed in groupby_cols_list\n        :param groupby_cols_list: list of column names to group the table by\n        :return: GroupedDataset object derived from self dataset with groupby_cols_list as grouping columns\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.sort": [[179, 189], ["rdfframes.query_buffer.query_operators.shared.sort_operator.SortOperator", "dataset.Dataset.query_queue.append_node"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "sort", "(", "self", ",", "sort_dict", ")", ":", "\n", "        ", "\"\"\"\n        sorts the dataset based on the given column names and the corresponding sort orders\n        :param sort_dict: mapping from the sorting column names to the corresponding sort order. Format:\n        {'sort_col1': 'DESC', 'sort_col2': 'ASC', ... etc}\n        :return: the same dataset object logically ordered\n        \"\"\"", "\n", "sort_node", "=", "SortOperator", "(", "self", ".", "name", ",", "sort_dict", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "sort_node", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.limit": [[190, 199], ["rdfframes.query_buffer.query_operators.shared.limit_operator.LimitOperator", "dataset.Dataset.query_queue.append_node"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "limit", "(", "self", ",", "threshold", ")", ":", "\n", "        ", "\"\"\"\n        limit the number of returned records to the passed threshold\n        :param threshold: the cut off threshold\n        :return: the same dataset object\n        \"\"\"", "\n", "limit_node", "=", "LimitOperator", "(", "self", ".", "name", ",", "threshold", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "limit_node", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.offset": [[200, 209], ["rdfframes.query_buffer.query_operators.shared.offset_operator.OffsetOperator", "dataset.Dataset.query_queue.append_node"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "offset", "(", "self", ",", "offset", ")", ":", "\n", "        ", "\"\"\"\n        starts returning records after the passed offset (offset keyword in SPARQL)\n        :param offset: the offset (int)\n        :return: the same dataset object\n        \"\"\"", "\n", "offset_node", "=", "OffsetOperator", "(", "self", ".", "name", ",", "offset", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "offset_node", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.sum": [[212, 220], ["None"], "methods", ["None"], ["", "def", "sum", "(", "self", ",", "aggregation_fn_data", ")", ":", "\n", "        ", "\"\"\"\n        Runs sum aggregate function on the pass rdframe columns list and returns the summation of the passed columns as\n        a list of scalar values\n        :param aggregation_fn_data: list of AggregationData class holding the aggregation functions' information\n        :return: the same dataset object\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.avg": [[221, 229], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "aggregation_fn_data", ")", ":", "\n", "        ", "\"\"\"\n        Runs average aggregate function on the pass rdframe columns list and returns the average of the passed columns as\n        a list of scalar values\n        :param aggregation_fn_data: list of AggregationData class holding the aggregation functions' information\n        :return: the same dataset object\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.min": [[230, 238], ["None"], "methods", ["None"], ["", "def", "min", "(", "self", ",", "aggregation_fn_data", ")", ":", "\n", "        ", "\"\"\"\n        Runs min aggregate function on the pass rdframe columns list and returns the min of the passed columns as\n        a list of scalar values\n        :param aggregation_fn_data: list of AggregationData class holding the aggregation functions' information\n        :return: the same dataset object\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.max": [[239, 247], ["None"], "methods", ["None"], ["", "def", "max", "(", "self", ",", "aggregation_fn_data", ")", ":", "\n", "        ", "\"\"\"\n        Runs max aggregate function on the pass rdframe columns list and returns the max of the passed columns as\n        a list of scalar values\n        :param aggregation_fn_data: list of AggregationData class holding the aggregation functions' information\n        :return: the same dataset object\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.count": [[248, 256], ["None"], "methods", ["None"], ["", "def", "count", "(", "self", ",", "aggregation_fn_data", ")", ":", "\n", "        ", "\"\"\"\n        Runs count aggregate function on the pass rdframe columns list and returns the count of the passed columns as\n        a list of scalar values\n        :param aggregation_fn_data: list of AggregationData objects holding the aggregation functions' information\n        :return: the same dataset object\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.print_query_structure": [[257, 263], ["dataset.Dataset.query_queue.print_query_queue"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.print_query_queue"], ["", "def", "print_query_structure", "(", "self", ",", "filename", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        prints the queue that keeps all API calls to this dataset\n        :return:\n        \"\"\"", "\n", "self", ".", "query_queue", ".", "print_query_queue", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.to_sparql": [[264, 273], ["rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter", "rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.to_query_model", "rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.to_query_model.to_sparql"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.to_query_model", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "to_sparql", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Converts the API calls of this dataset to a SPARQL query\n        :return: the SPARQL query as a string\n        \"\"\"", "\n", "converter", "=", "Queue2QueryModelConverter", "(", "self", ")", "\n", "query_model", "=", "converter", ".", "to_query_model", "(", ")", "\n", "query_string", "=", "query_model", ".", "to_sparql", "(", ")", "\n", "return", "query_string", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.execute": [[274, 287], ["dataset.Dataset.to_sparql", "client.execute_query"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.execute_query"], ["", "def", "execute", "(", "self", ",", "client", ",", "return_format", "=", "None", ",", "output_file", "=", "None", ",", "timeout", "=", "_TIMEOUT", ",", "limit", "=", "_MAX_ROWS", ")", ":", "\n", "        ", "\"\"\"\n        converts this dataset to a sparql query, send it to the sparql endpoint or RDF engine and\n        returns the result in the specified return format\n        :param client: client to communicate with the SPARQL endpoint/RDF engine\n        :param return_format: one of ['df', 'csv']\n        :param output_file: file to save the results in\n        :return:\n        \"\"\"", "\n", "query_string", "=", "self", ".", "to_sparql", "(", ")", "\n", "res", "=", "client", ".", "execute_query", "(", "query_string", ",", "timeout", "=", "timeout", ",", "limit", "=", "limit", ",", "return_format", "=", "return_format", ",", "\n", "output_file", "=", "output_file", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.type": [[288, 294], ["None"], "methods", ["None"], ["", "def", "type", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return the type of the dataset as string\n        :return: dataset type as string\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.get_columns": [[295, 303], ["print", "range", "len", "print"], "methods", ["None"], ["", "def", "get_columns", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        prints the column names of this dataset\n        :return:\n        \"\"\"", "\n", "print", "(", "\"columns:\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "columns", ")", ")", ":", "\n", "            ", "print", "(", "self", ".", "columns", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column": [[304, 307], ["dataset.Dataset.columns.append", "rdfframes.utils.helper_functions.is_uri", "column.find"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri"], ["", "", "def", "add_column", "(", "self", ",", "column", ")", ":", "\n", "        ", "if", "not", "is_uri", "(", "column", ")", "and", "column", ".", "find", "(", "\":\"", ")", "<", "0", ":", "\n", "            ", "self", ".", "columns", ".", "append", "(", "column", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.rem_column": [[308, 311], ["dataset.Dataset.columns.remove"], "methods", ["None"], ["", "", "def", "rem_column", "(", "self", ",", "column", ")", ":", "\n", "        ", "if", "column", "in", "self", ".", "columns", ":", "\n", "            ", "self", ".", "columns", ".", "remove", "(", "column", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.cache": [[312, 315], ["None"], "methods", ["None"], ["", "", "def", "cache", "(", "self", ")", ":", "\n", "        ", "self", ".", "cached", "=", "True", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset": [[316, 320], ["copy.deepcopy"], "methods", ["None"], ["", "def", "_cache_dataset", "(", "self", ")", ":", "\n", "        ", "ds", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "ds", ".", "cached", "=", "False", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.__init__": [[26, 45], ["rdfframes.dataset.dataset.Dataset.__init__", "grouping_cols.copy", "rdfframes.query_buffer.query_operators.grouped.groupby_seed_operator.GroupBySeedOperator", "grouped_dataset.GroupedDataset.query_queue.append_node"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["def", "__init__", "(", "self", ",", "parent_dataset", ",", "grouping_cols", ",", "groupby_node", ",", "groupby_dataset_name", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the new GroupedDataset object with the parent dataset and the grouping columns\n        :param parent_dataset: the dataset from which self dataset is derived from\n        :param grouping_cols: the columns used to group the parent dataset\n        :param groupby_node: the groupby Operator in the original's dataset query graph\n        :param groupby_dataset_name: the new name assigned to this groupby dataset\n        \"\"\"", "\n", "super", "(", "GroupedDataset", ",", "self", ")", ".", "__init__", "(", "parent_dataset", ".", "graph", ",", "groupby_dataset_name", ")", "\n", "\n", "self", ".", "parent_dataset", "=", "parent_dataset", "\n", "self", ".", "grouping_cols", "=", "grouping_cols", "\n", "self", ".", "agg_columns", "=", "[", "]", "\n", "self", ".", "columns", "=", "grouping_cols", ".", "copy", "(", ")", "\n", "self", ".", "is_grouped", "=", "True", "\n", "\n", "# create groupby seed Operator and append it to the query tree", "\n", "gbsn", "=", "GroupBySeedOperator", "(", "self", ".", "name", ",", "groupby_node", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "gbsn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter": [[46, 71], ["len", "Exception", "grouped_dataset.GroupedDataset._cache_dataset", "grouped_dataset.GroupedDataset.filter", "conditions_dict.keys", "rdfframes.query_buffer.query_operators.grouped.having_operator.HavingOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "conditions_dict.items", "rdfframes.query_buffer.query_operators.shared.filter_operator.FilterOperator", "grouped_dataset.GroupedDataset.query_queue.append_node"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "filter", "(", "self", ",", "conditions_dict", ")", ":", "\n", "        ", "\"\"\"\n        Apply the given filters on the corresponding columns in the dataset.\n        :param conditions_dict: mapping from column name to a list of predicates to apply on the column. Format:\n        {'col_name': [pred1, pred2 ... etc], ...}\n        :return: the same dataset object logically with the filtered column.\n        \"\"\"", "\n", "invalid_cols", "=", "[", "col", "for", "col", "in", "conditions_dict", ".", "keys", "(", ")", "if", "col", "not", "in", "self", ".", "columns", "]", "\n", "if", "len", "(", "invalid_cols", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Columns {} are not defined in the dataset'", ".", "format", "(", "invalid_cols", ")", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "filter", "(", "conditions_dict", ")", "\n", "\n", "", "for", "src_col_name", "in", "conditions_dict", ":", "\n", "            ", "if", "src_col_name", "in", "self", ".", "agg_columns", ":", "\n", "                ", "operator", "=", "HavingOperator", "(", "self", ".", "name", ",", "src_col_name", ",", "conditions_dict", "[", "src_col_name", "]", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "operator", ")", "\n", "", "else", ":", "# groupby column or added after groupby", "\n", "                ", "for", "col", ",", "conditions", "in", "conditions_dict", ".", "items", "(", ")", ":", "\n", "                    ", "for", "cond", "in", "conditions", ":", "\n", "                        ", "operator", "=", "FilterOperator", "(", "self", ".", "name", ",", "col", ",", "cond", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "operator", ")", "\n", "", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by": [[72, 91], ["grouped_dataset.GroupedDataset.generated_grouped_ds_name", "rdfframes.query_buffer.query_operators.shared.groupby_operator.GroupByOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset", "len", "Exception", "grouped_dataset.GroupedDataset._cache_dataset", "grouped_dataset.GroupedDataset.group_by"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.generated_grouped_ds_name", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by"], ["", "def", "group_by", "(", "self", ",", "groupby_cols_list", ")", ":", "\n", "        ", "\"\"\"\n        Group the table by the column names passed in groupby_cols_list\n        :param groupby_cols_list: list of column names to group the table by\n        :return: GroupedDataset object derived from self dataset with groupby_cols_list as grouping columns\n        \"\"\"", "\n", "invalid_cols", "=", "[", "col", "for", "col", "in", "groupby_cols_list", "if", "col", "not", "in", "self", ".", "columns", "]", "\n", "if", "len", "(", "invalid_cols", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Columns {} are not defined in the dataset'", ".", "format", "(", "invalid_cols", ")", ")", "\n", "\n", "", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "group_by", "(", "groupby_cols_list", ")", "\n", "\n", "", "groupby_ds_name", "=", "GroupedDataset", ".", "generated_grouped_ds_name", "(", "self", ".", "name", ",", "groupby_cols_list", ")", "\n", "groupby_node", "=", "GroupByOperator", "(", "self", ".", "name", ",", "groupby_cols_list", ",", "groupby_ds_name", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "groupby_node", ")", "\n", "ds", "=", "GroupedDataset", "(", "self", ",", "groupby_cols_list", ",", "groupby_node", ",", "groupby_ds_name", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.sum": [[94, 120], ["grouped_dataset.GroupedDataset._cache_dataset", "grouped_dataset.GroupedDataset.sum", "Exception", "rdfframes.query_buffer.query_operators.grouped.grouped_aggregation_operator.GroupedAggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.add_column", "grouped_dataset.GroupedDataset.agg_columns.append", "rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.agg_columns.append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.sum", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "sum", "(", "self", ",", "src_col_name", ",", "new_col_name", "=", "'sum'", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to find the sum of its values\n        :param new_col_name: the new column name of the sum\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "sum", "(", "src_col_name", ",", "new_col_name", ")", "\n", "\n", "", "param", "=", "None", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "", "agg_col", "=", "src_col_name", "\n", "if", "agg_col", "not", "in", "self", ".", "grouping_cols", "and", "agg_col", "in", "self", ".", "parent_dataset", ".", "columns", ":", "\n", "            ", "agg_node", "=", "GroupedAggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "SUM", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "add_column", "(", "new_col_name", ")", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "else", ":", "\n", "            ", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "SUM", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.avg": [[121, 147], ["grouped_dataset.GroupedDataset._cache_dataset", "grouped_dataset.GroupedDataset.avg", "Exception", "rdfframes.query_buffer.query_operators.grouped.grouped_aggregation_operator.GroupedAggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.add_column", "grouped_dataset.GroupedDataset.agg_columns.append", "rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.agg_columns.append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.avg", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "avg", "(", "self", ",", "src_col_name", ",", "new_col_name", "=", "'average'", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to find the average of its values\n        :param new_col_name: the new column name of the average\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "avg", "(", "src_col_name", ",", "new_col_name", ")", "\n", "\n", "", "param", "=", "None", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "", "agg_col", "=", "src_col_name", "\n", "if", "agg_col", "not", "in", "self", ".", "grouping_cols", "and", "agg_col", "in", "self", ".", "parent_dataset", ".", "columns", ":", "\n", "            ", "agg_node", "=", "GroupedAggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "AVG", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "add_column", "(", "new_col_name", ")", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "else", ":", "\n", "            ", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "AVG", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.min": [[148, 174], ["grouped_dataset.GroupedDataset._cache_dataset", "grouped_dataset.GroupedDataset.min", "Exception", "rdfframes.query_buffer.query_operators.grouped.grouped_aggregation_operator.GroupedAggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.add_column", "grouped_dataset.GroupedDataset.agg_columns.append", "rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.agg_columns.append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.min", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "min", "(", "self", ",", "src_col_name", ",", "new_col_name", "=", "'min'", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to find the min of its values\n        :param new_col_name: the new column name of the min\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "min", "(", "src_col_name", ",", "new_col_name", ")", "\n", "\n", "", "param", "=", "None", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "", "agg_col", "=", "src_col_name", "\n", "if", "agg_col", "not", "in", "self", ".", "grouping_cols", "and", "agg_col", "in", "self", ".", "parent_dataset", ".", "columns", ":", "\n", "            ", "agg_node", "=", "GroupedAggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "MIN", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "add_column", "(", "new_col_name", ")", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "else", ":", "\n", "            ", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "MIN", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.max": [[175, 201], ["grouped_dataset.GroupedDataset._cache_dataset", "grouped_dataset.GroupedDataset.max", "Exception", "rdfframes.query_buffer.query_operators.grouped.grouped_aggregation_operator.GroupedAggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.add_column", "grouped_dataset.GroupedDataset.agg_columns.append", "rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.agg_columns.append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.max", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "max", "(", "self", ",", "src_col_name", ",", "new_col_name", "=", "'max'", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to find the max of its values\n        :param new_col_name: the new column name of the max\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "max", "(", "src_col_name", ",", "new_col_name", ")", "\n", "\n", "", "param", "=", "None", "\n", "if", "src_col_name", "not", "in", "self", ".", "columns", ":", "\n", "            ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "", "agg_col", "=", "src_col_name", "\n", "if", "agg_col", "not", "in", "self", ".", "grouping_cols", "and", "agg_col", "in", "self", ".", "parent_dataset", ".", "columns", ":", "# aggregate after group by", "\n", "            ", "agg_node", "=", "GroupedAggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "MAX", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "add_column", "(", "new_col_name", ")", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "else", ":", "\n", "            ", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "MAX", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count": [[202, 238], ["grouped_dataset.GroupedDataset._cache_dataset", "grouped_dataset.GroupedDataset.count", "rdfframes.query_buffer.query_operators.shared.integer_count_node.IntegerCountOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.agg_columns.append", "Exception", "rdfframes.query_buffer.query_operators.grouped.grouped_aggregation_operator.GroupedAggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.add_column", "grouped_dataset.GroupedDataset.agg_columns.append", "rdfframes.query_buffer.query_operators.shared.aggregation_operator.AggregationOperator", "grouped_dataset.GroupedDataset.query_queue.append_node", "grouped_dataset.GroupedDataset.agg_columns.append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset._cache_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.add_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node"], ["", "def", "count", "(", "self", ",", "src_col_name", "=", "None", ",", "new_col_name", "=", "'count'", ",", "unique", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param src_col_name: the column to count its values\n        :param new_col_name: the new column name of the count\n        :param unique: if True retun the number of unique values else return the size of the result set\n        :return: if src_col_name is not None and is a groupby column, return a dataset with a new column name. else\n            return an integer\n        \"\"\"", "\n", "if", "self", ".", "cached", ":", "\n", "            ", "ds", "=", "self", ".", "_cache_dataset", "(", ")", "\n", "return", "ds", ".", "count", "(", "src_col_name", ",", "new_col_name", ",", "unique", ")", "\n", "\n", "", "if", "unique", ":", "\n", "            ", "param", "=", "\"DISTINCT\"", "\n", "", "else", ":", "\n", "            ", "param", "=", "None", "\n", "", "if", "src_col_name", "is", "not", "None", ":", "\n", "            ", "if", "src_col_name", "not", "in", "self", ".", "columns", "and", "src_col_name", "not", "in", "self", ".", "parent_dataset", ".", "columns", ":", "\n", "                ", "raise", "Exception", "(", "\"Aggregation column {} doesn't exist in this dataset\"", ".", "format", "(", "src_col_name", ")", ")", "\n", "", "agg_col", "=", "src_col_name", "\n", "if", "agg_col", "not", "in", "self", ".", "grouping_cols", "and", "agg_col", "in", "self", ".", "parent_dataset", ".", "columns", ":", "\n", "                ", "agg_node", "=", "GroupedAggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "COUNT", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "add_column", "(", "new_col_name", ")", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "else", ":", "\n", "                ", "agg_node", "=", "AggregationOperator", "(", "self", ".", "name", ",", "agg_col", ",", "AggregationFunction", ".", "COUNT", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "src_col_name", ",", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "", "else", ":", "\n", "            ", "agg_node", "=", "IntegerCountOperator", "(", "self", ".", "name", ",", "new_col_name", ",", "param", ")", "\n", "self", ".", "query_queue", ".", "append_node", "(", "agg_node", ")", "\n", "self", ".", "columns", "=", "[", "new_col_name", "]", "\n", "self", ".", "agg_columns", ".", "append", "(", "new_col_name", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type": [[239, 245], ["None"], "methods", ["None"], ["", "def", "type", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return the type of the dataset as string\n        :return: dataset type as string\n        \"\"\"", "\n", "return", "\"GroupedDataset\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.generated_grouped_ds_name": [[246, 249], ["sorted"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generated_grouped_ds_name", "(", "parent_ds_name", ",", "grouping_cols", ")", ":", "\n", "        ", "return", "'{}.grouped.{}'", ".", "format", "(", "parent_ds_name", ",", "','", ".", "join", "(", "sorted", "(", "grouping_cols", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.__init__": [[13, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n             Initializing the query_builder object\n             it has a sparql_query that contains the SPARQL object\n            \"\"\"", "\n", "self", ".", "query_string", "=", "\"\"", "# represents the query string of base query", "\n", "self", ".", "query_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.to_sparql": [[21, 46], ["sparqlbuilder.SPARQLBuilder.add_select", "sparqlbuilder.SPARQLBuilder.add_where_clause", "sparqlbuilder.SPARQLBuilder.add_groupby", "sparqlbuilder.SPARQLBuilder.add_having_clause", "sparqlbuilder.SPARQLBuilder.add_order_clause", "sparqlbuilder.SPARQLBuilder.add_limit", "sparqlbuilder.SPARQLBuilder.add_offset", "sparqlbuilder.SPARQLBuilder.query_string.rstrip", "sparqlbuilder.SPARQLBuilder.__add_patterns", "sparqlbuilder.SPARQLBuilder.add_prefixes", "sparqlbuilder.SPARQLBuilder.add_from"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_select", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_where_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_groupby", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_having_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_order_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_limit", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_offset", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.__add_patterns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_from"], ["", "def", "to_sparql", "(", "self", ",", "query_model", ")", ":", "\n", "            ", "\"\"\"\n            :param query_model: the query_model that contains the information required to generate the query\n            :return: sub_query_string or query_string depending on the type of the query model\n            \"\"\"", "\n", "self", ".", "query_model", "=", "query_model", "\n", "if", "self", ".", "query_model", ".", "is_optional", ":", "\n", "                ", "self", ".", "query_string", "=", "self", ".", "__add_patterns", "(", ")", "\n", "return", "self", ".", "query_string", "\n", "", "if", "query_model", ".", "parent_query_model", "is", "None", ":", "# if not a subquery", "\n", "                ", "self", ".", "add_prefixes", "(", ")", "\n", "", "self", ".", "add_select", "(", ")", "\n", "if", "query_model", ".", "parent_query_model", "is", "None", ":", "\n", "                ", "self", ".", "add_from", "(", ")", "\n", "", "self", ".", "add_where_clause", "(", ")", "\n", "self", ".", "add_groupby", "(", ")", "\n", "self", ".", "add_having_clause", "(", ")", "\n", "self", ".", "add_order_clause", "(", ")", "\n", "self", ".", "add_limit", "(", ")", "\n", "self", ".", "add_offset", "(", ")", "\n", "\n", "self", ".", "query_string", "=", "self", ".", "query_string", ".", "rstrip", "(", "\"\\n\"", ")", "\n", "self", ".", "query_string", "+=", "\"\\n\"", "\n", "\n", "return", "self", ".", "query_string", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_prefixes": [[47, 56], ["len", "sparqlbuilder.SPARQLBuilder.query_model.prefixes.items"], "methods", ["None"], ["", "def", "add_prefixes", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n             add namespaces required the SPARQL query\n            \"\"\"", "\n", "prefixes_string", "=", "\"\"", "\n", "if", "len", "(", "self", ".", "query_model", ".", "prefixes", ")", ">", "0", ":", "\n", "                ", "for", "prefix", ",", "prefix_uri", "in", "self", ".", "query_model", ".", "prefixes", ".", "items", "(", ")", ":", "\n", "                    ", "prefixes_string", "+=", "\"PREFIX {}: <{}>\\n\"", ".", "format", "(", "prefix", ",", "prefix_uri", ")", "\n", "", "self", ".", "query_string", "=", "prefixes_string", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_select": [[57, 81], ["sparqlbuilder.SPARQLBuilder.query_model.select_columns.union", "len", "len"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union"], ["", "", "def", "add_select", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            add select columns from querymodel into the SPARQL query\n            \"\"\"", "\n", "if", "self", ".", "query_model", ".", "select_all", "==", "True", ":", "\n", "                ", "select_string", "=", "\"SELECT * \\n\"", "\n", "self", ".", "query_string", "+=", "select_string", "\n", "return", "\n", "", "elif", "len", "(", "self", ".", "query_model", ".", "select_columns", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "auto_generated_select_columns", ")", ">", "0", ":", "\n", "                ", "select_string", "=", "\"SELECT DISTINCT \"", "\n", "for", "col", "in", "self", ".", "query_model", ".", "select_columns", ".", "union", "(", "self", ".", "query_model", ".", "auto_generated_select_columns", ")", ":", "\n", "                    ", "if", "col", "in", "self", ".", "query_model", ".", "aggregate_clause", ":", "\n", "                        ", "agg_part", "=", "self", ".", "query_model", ".", "aggregate_clause", "[", "col", "]", "\n", "agg_func", "=", "agg_part", "[", "0", "]", "[", "0", "]", "\n", "src_col_name", "=", "\"?\"", "+", "agg_part", "[", "0", "]", "[", "2", "]", "if", "agg_part", "[", "0", "]", "[", "2", "]", "!=", "\"*\"", "else", "\"*\"", "\n", "agg_col_name", "=", "\"AS ?{}\"", ".", "format", "(", "col", ")", "if", "col", "is", "not", "None", "else", "''", "\n", "agg_parameter", "=", "agg_part", "[", "0", "]", "[", "1", "]", "if", "agg_part", "[", "0", "]", "[", "1", "]", "is", "not", "None", "else", "''", "\n", "select_string", "+=", "\" (%s(%s %s) %s) \"", "%", "(", "agg_func", ",", "agg_parameter", ",", "src_col_name", ",", "agg_col_name", ")", "\n", "", "else", ":", "\n", "                        ", "select_string", "+=", "\"?%s \"", "%", "col", "\n", "", "", "select_string", "+=", "\"\\n\"", "\n", "", "else", ":", "\n", "                ", "select_string", "=", "\"SELECT * \\n\"", "\n", "", "self", ".", "query_string", "+=", "select_string", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.return_subquery": [[82, 89], ["sparqlbuilder.SPARQLBuilder.to_sparql"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "return_subquery", "(", "self", ",", "subquery", ")", ":", "\n", "            ", "\"\"\"\n\n            :param subquery: build the query model for the subquery\n            :return: the string representation of the SPARQL query for the the subquery\n            \"\"\"", "\n", "return", "self", ".", "to_sparql", "(", "subquery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_subqueries": [[90, 100], ["query.to_sparql"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "add_subqueries", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            attach the subquery to its outer query\n            :return: The SPARQL representation of the query\n            \"\"\"", "\n", "subquery_string", "=", "\"\"", "\n", "for", "query", "in", "self", ".", "query_model", ".", "subqueries", ":", "\n", "                ", "query_str", "=", "query", ".", "to_sparql", "(", ")", "\n", "subquery_string", "+=", "\"\\n{\\n\"", "+", "query_str", "+", "\"}\"", "\n", "", "return", "subquery_string", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_optional_subqueries": [[101, 112], ["query.to_sparql", "query.to_sparql.lstrip"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "add_optional_subqueries", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            attach the optional subquery to its outer query\n            :return: The SPARQL representation of the query\n            \"\"\"", "\n", "subquery_string", "=", "\"\"", "\n", "for", "query", "in", "self", ".", "query_model", ".", "optional_subqueries", ":", "\n", "                ", "subquery_string", "+=", "\"\\n OPTIONAL\"", "\n", "query_str", "=", "query", ".", "to_sparql", "(", ")", "\n", "subquery_string", "+=", "\"\\t\"", "+", "\"{\"", "+", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "query_str", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "+", "\"\\n\\t\"", "+", "\"\\t}\"", "\n", "", "return", "subquery_string", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_optional_clause": [[113, 123], ["len", "optional_block.to_sparql", "optional_block.to_sparql.lstrip"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "add_optional_clause", "(", "self", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "query_model", ".", "optionals", ")", ">", "0", ":", "\n", "                ", "optional_string", "=", "\"\\t\"", "\n", "for", "optional_block", "in", "self", ".", "query_model", ".", "optionals", ":", "\n", "                    ", "query_string", "=", "optional_block", ".", "to_sparql", "(", ")", "\n", "optional_string", "+=", "\"OPTIONAL {\"", "+", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "query_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "+", "\"\\n\\t}\\n\"", "\n", "", "return", "optional_string", "\n", "", "else", ":", "\n", "                ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_graph_clause": [[124, 136], ["len", "sparqlbuilder.SPARQLBuilder", "sparqlbuilder.SPARQLBuilder.query_model.graph_clause.items", "sparqlbuilder.SPARQLBuilder.__add_patterns", "sparqlbuilder.SPARQLBuilder.__add_patterns"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.__add_patterns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.__add_patterns"], ["", "", "def", "add_graph_clause", "(", "self", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "query_model", ".", "graph_clause", ")", ">", "0", ":", "\n", "                ", "graph_string", "=", "\"\\t\"", "\n", "query_builder", "=", "SPARQLBuilder", "(", ")", "\n", "for", "graph_uri", ",", "graph_query", "in", "self", ".", "query_model", ".", "graph_clause", ".", "items", "(", ")", ":", "\n", "                    ", "query_builder", ".", "query_model", "=", "graph_query", "\n", "query_string", "=", "query_builder", ".", "__add_patterns", "(", ")", "\n", "graph_string", "+=", "\"GRAPH <{}>\"", ".", "format", "(", "graph_uri", ")", "+", "'{'", "+", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "query_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "+", "\"\\n\\t}\\n\"", "\n", "", "return", "graph_string", "\n", "", "else", ":", "\n", "                ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_optional_graph_clause": [[137, 148], ["len", "sparqlbuilder.SPARQLBuilder", "sparqlbuilder.SPARQLBuilder.query_model.optional_graph_clause.items", "sparqlbuilder.SPARQLBuilder.__add_patterns", "sparqlbuilder.SPARQLBuilder.__add_patterns"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.__add_patterns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.__add_patterns"], ["", "", "def", "add_optional_graph_clause", "(", "self", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "query_model", ".", "optional_graph_clause", ")", ">", "0", ":", "\n", "                ", "graph_string", "=", "\"\"", "\n", "query_builder", "=", "SPARQLBuilder", "(", ")", "\n", "for", "graph_uri", ",", "graph_query", "in", "self", ".", "query_model", ".", "optional_graph_clause", ".", "items", "(", ")", ":", "\n", "                    ", "query_builder", ".", "query_model", "=", "graph_query", "\n", "query_string", "=", "query_builder", ".", "__add_patterns", "(", ")", "\n", "graph_string", "+=", "\"\\tOPTIONAL { \"", "+", "\"GRAPH <{}>\"", ".", "format", "(", "graph_uri", ")", "+", "' { '", "+", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "query_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "+", "\"\\n\\t\"", "+", "\"\\t}}\"", "\n", "", "return", "graph_string", "\n", "", "else", ":", "\n", "                ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.__add_patterns": [[149, 202], ["len", "sparqlbuilder.SPARQLBuilder.query_model.graph_triples.items", "len", "sparqlbuilder.SPARQLBuilder.add_graph_clause", "len", "sparqlbuilder.SPARQLBuilder.add_optional_graph_clause", "len", "sparqlbuilder.SPARQLBuilder.add_filter_clause", "len", "sparqlbuilder.SPARQLBuilder.add_subqueries", "len", "sparqlbuilder.SPARQLBuilder.add_optional_clause", "len", "sparqlbuilder.SPARQLBuilder.add_union_query", "len", "where_string.rstrip.rstrip.rstrip", "sparqlbuilder.SPARQLBuilder.add_optional_subqueries", "rdfframes.utils.helper_functions.is_uri", "triple[].find", "rdfframes.utils.helper_functions.is_uri", "triple[].find", "rdfframes.utils.helper_functions.is_uri", "triple[].find", "len", "sparqlbuilder.SPARQLBuilder.lstrip", "sparqlbuilder.SPARQLBuilder.lstrip", "sparqlbuilder.SPARQLBuilder.lstrip", "sparqlbuilder.SPARQLBuilder.lstrip", "sparqlbuilder.SPARQLBuilder.lstrip", "sparqlbuilder.SPARQLBuilder.lstrip", "rdfframes.utils.helper_functions.is_uri", "triple[].find", "rdfframes.utils.helper_functions.is_uri", "triple[].find", "rdfframes.utils.helper_functions.is_uri", "triple[].find", "graph_triples_string.lstrip"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_filter_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_subqueries", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_optional_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_union_query", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_optional_subqueries", "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri", "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri", "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri", "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri", "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri", "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri"], ["", "", "def", "__add_patterns", "(", "self", ")", ":", "\n", "            ", "where_string", "=", "\"\"", "\n", "for", "triple", "in", "self", ".", "query_model", ".", "triples", ":", "\n", "                ", "triple0", "=", "triple", "[", "0", "]", "\n", "triple1", "=", "triple", "[", "1", "]", "\n", "triple2", "=", "triple", "[", "2", "]", "\n", "if", "not", "is_uri", "(", "triple", "[", "0", "]", ")", "and", "triple", "[", "0", "]", ".", "find", "(", "\":\"", ")", "<", "0", ":", "\n", "                    ", "triple0", "=", "\"?\"", "+", "triple", "[", "0", "]", "\n", "", "if", "not", "is_uri", "(", "triple", "[", "1", "]", ")", "and", "triple", "[", "1", "]", ".", "find", "(", "\":\"", ")", "<", "0", ":", "\n", "                    ", "triple1", "=", "\"?\"", "+", "triple", "[", "1", "]", "\n", "", "if", "not", "is_uri", "(", "triple", "[", "2", "]", ")", "and", "triple", "[", "2", "]", ".", "find", "(", "\":\"", ")", "<", "0", ":", "\n", "                    ", "triple2", "=", "\"?\"", "+", "triple", "[", "2", "]", "\n", "", "where_string", "+=", "'\\n\\t{} {} {}'", ".", "format", "(", "triple0", ",", "triple1", ",", "triple2", ")", "+", "\" .\"", "\n", "", "if", "len", "(", "self", ".", "query_model", ".", "graph_triples", ")", ">", "0", ":", "\n", "                ", "for", "graph", ",", "triples", "in", "self", ".", "query_model", ".", "graph_triples", ".", "items", "(", ")", ":", "\n", "                    ", "if", "len", "(", "triples", ")", ">", "0", ":", "\n", "                        ", "graph_triples_string", "=", "\"GRAPH <{}> \"", ".", "format", "(", "graph", ")", "+", "\"{\\n\"", "\n", "for", "triple", "in", "triples", ":", "\n", "                            ", "triple0", "=", "triple", "[", "0", "]", "\n", "triple1", "=", "triple", "[", "1", "]", "\n", "triple2", "=", "triple", "[", "2", "]", "\n", "if", "not", "is_uri", "(", "triple", "[", "0", "]", ")", "and", "triple", "[", "0", "]", ".", "find", "(", "\":\"", ")", "<", "0", ":", "\n", "                                ", "triple0", "=", "\"?\"", "+", "triple", "[", "0", "]", "\n", "", "if", "not", "is_uri", "(", "triple", "[", "1", "]", ")", "and", "triple", "[", "1", "]", ".", "find", "(", "\":\"", ")", "<", "0", ":", "\n", "                                ", "triple1", "=", "\"?\"", "+", "triple", "[", "1", "]", "\n", "", "if", "not", "is_uri", "(", "triple", "[", "2", "]", ")", "and", "triple", "[", "2", "]", ".", "find", "(", "\":\"", ")", "<", "0", ":", "\n", "                                ", "triple2", "=", "\"?\"", "+", "triple", "[", "2", "]", "\n", "", "graph_triples_string", "+=", "'\\t{} {} {}'", ".", "format", "(", "triple0", ",", "triple1", ",", "triple2", ")", "+", "\" .\\n\"", "\n", "", "graph_triples_string", "+=", "\" }\\n\"", "\n", "where_string", "+=", "\"\\n\"", "+", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "graph_triples_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "\n", "", "", "", "if", "len", "(", "self", ".", "query_model", ".", "graph_clause", ")", ">", "0", ":", "\n", "                ", "graph_string", "=", "self", ".", "add_graph_clause", "(", ")", "\n", "where_string", "+=", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "graph_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "\n", "", "if", "len", "(", "self", ".", "query_model", ".", "optional_graph_clause", ")", ">", "0", ":", "\n", "                ", "graph_string", "=", "self", ".", "add_optional_graph_clause", "(", ")", "\n", "where_string", "+=", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "graph_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "\n", "", "if", "len", "(", "self", ".", "query_model", ".", "filter_clause", ")", ">", "0", ":", "\n", "                ", "filter_string", "=", "self", ".", "add_filter_clause", "(", ")", "\n", "where_string", "+=", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "filter_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "\n", "", "if", "len", "(", "self", ".", "query_model", ".", "subqueries", ")", ">", "0", ":", "\n", "                ", "subqueries_string", "=", "self", ".", "add_subqueries", "(", ")", "\n", "where_string", "+=", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "subqueries_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "\n", "", "if", "len", "(", "self", ".", "query_model", ".", "optionals", ")", ">", "0", ":", "\n", "                ", "optional_string", "=", "self", ".", "add_optional_clause", "(", ")", "\n", "where_string", "+=", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "optional_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "\n", "", "if", "len", "(", "self", ".", "query_model", ".", "unions", ")", ">", "0", ":", "\n", "                ", "union_string", "=", "self", ".", "add_union_query", "(", ")", "\n", "where_string", "+=", "'\\t'", ".", "join", "(", "(", "'\\n'", "+", "union_string", ".", "lstrip", "(", ")", ")", ".", "splitlines", "(", "True", ")", ")", "\n", "", "if", "len", "(", "self", ".", "query_model", ".", "optional_subqueries", ")", ">", "0", ":", "\n", "                ", "where_string", "+=", "\"\\t\"", "+", "self", ".", "add_optional_subqueries", "(", ")", "\n", "", "if", "where_string", "!=", "\"\"", ":", "\n", "                ", "where_string", "=", "where_string", ".", "rstrip", "(", "'\\n'", ")", "\n", "", "return", "where_string", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_where_clause": [[203, 220], ["sparqlbuilder.SPARQLBuilder.__add_patterns", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.__add_patterns"], ["", "def", "add_where_clause", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            prepare where clause of the query\n            - adds the triples\n            - adds the optional clause if needed\n            - adds the filter conditions if needed\n            - adds the subqueries if any exist\n            \"\"\"", "\n", "if", "len", "(", "self", ".", "query_model", ".", "triples", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "subqueries", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "unions", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "optionals", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "filter_clause", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "optional_subqueries", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "graph_triples", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "graph_clause", ")", ">", "0", "or", "len", "(", "self", ".", "query_model", ".", "optional_graph_clause", ")", ">", "0", ":", "\n", "                ", "where_string", "=", "self", ".", "__add_patterns", "(", ")", "\n", "self", ".", "query_string", "+=", "\"WHERE {\"", "+", "where_string", "+", "\"\\n\\t}\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "query_string", "+=", "\"WHERE {}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_union_query": [[222, 236], ["range", "len", "sparqlbuilder.SPARQLBuilder.query_model.unions[].to_sparql", "len"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "", "def", "add_union_query", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n\n            :return: The string of the main query with the union queries\n            \"\"\"", "\n", "unionQuery", "=", "\"{ \"", "\n", "if", "self", ".", "query_model", ".", "unions", "is", "not", "None", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "query_model", ".", "unions", ")", ")", ":", "\n", "                    ", "unionQuery", "+=", "\"{\\n\"", "+", "self", ".", "query_model", ".", "unions", "[", "i", "]", ".", "to_sparql", "(", ")", "\n", "unionQuery", "+=", "\"}\\n\"", "\n", "if", "i", "<", "len", "(", "self", ".", "query_model", ".", "unions", ")", "-", "1", ":", "\n", "                       ", "unionQuery", "+=", "\"UNION\\n\"", "\n", "", "", "", "return", "unionQuery", "+", "\" }\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_order_clause": [[237, 248], ["len", "sparqlbuilder.SPARQLBuilder.query_model.order_clause.items"], "methods", ["None"], ["", "def", "add_order_clause", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            append the order specifier is it exists in the query model\n            :return:\n            \"\"\"", "\n", "if", "len", "(", "self", ".", "query_model", ".", "order_clause", ")", ">", "0", ":", "\n", "                ", "orderby", "=", "\" ORDER BY \"", "\n", "for", "order_col", ",", "sort_order", "in", "self", ".", "query_model", ".", "order_clause", ".", "items", "(", ")", ":", "\n", "                    ", "orderby", "+=", "'%s(?%s)'", "%", "(", "sort_order", ",", "order_col", ",", ")", "+", "\" \"", "\n", "", "orderby", "+=", "\" \"", "\n", "self", ".", "query_string", "+=", "orderby", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_limit": [[249, 255], ["str"], "methods", ["None"], ["", "", "def", "add_limit", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            :return:\n            \"\"\"", "\n", "if", "self", ".", "query_model", ".", "limit", "!=", "0", ":", "\n", "                ", "self", ".", "query_string", "+=", "\"LIMIT \"", "+", "str", "(", "self", ".", "query_model", ".", "limit", ")", "+", "\"\\t\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_offset": [[256, 264], ["str"], "methods", ["None"], ["", "", "def", "add_offset", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            :return:\n            \"\"\"", "\n", "if", "self", ".", "query_model", ".", "offset", "!=", "0", ":", "\n", "                ", "self", ".", "query_string", "+=", "\"OFFSET \"", "+", "str", "(", "self", ".", "query_model", ".", "offset", ")", "+", "\"\\n\"", "\n", "", "else", ":", "\n", "                ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_groupby": [[265, 276], ["len"], "methods", ["None"], ["", "", "def", "add_groupby", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            add group-by clause from the query model into the SPARQL query\n            :return:\n            \"\"\"", "\n", "if", "self", ".", "query_model", ".", "groupBy_columns", "is", "not", "None", "and", "len", "(", "self", ".", "query_model", ".", "groupBy_columns", ")", ">", "0", ":", "\n", "                ", "groupby_clause", "=", "\" GROUP BY \"", "\n", "for", "col_name", "in", "self", ".", "query_model", ".", "groupBy_columns", ":", "\n", "                    ", "groupby_clause", "+=", "\"?\"", "+", "col_name", "+", "\" \"", "\n", "", "groupby_clause", "+=", "\"\\n\"", "\n", "self", ".", "query_string", "+=", "groupby_clause", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_from": [[277, 290], ["len", "len"], "methods", ["None"], ["", "", "def", "add_from", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            build From clause from the query model into the SPARQL query\n            :return:\n            \"\"\"", "\n", "if", "self", ".", "query_model", ".", "parent_query_model", "is", "None", ":", "\n", "                ", "if", "len", "(", "self", ".", "query_model", ".", "from_clause", ")", ">", "0", ":", "\n", "                    ", "from_clause", "=", "\"FROM \"", "\n", "for", "graph", "in", "self", ".", "query_model", ".", "from_clause", ":", "\n", "                        ", "from_clause", "+=", "'<{}>, '", ".", "format", "(", "graph", ")", "\n", "", "from_clause", "=", "from_clause", "[", ":", "len", "(", "from_clause", ")", "-", "2", "]", "\n", "from_clause", "+=", "\"\\n\"", "\n", "self", ".", "query_string", "+=", "from_clause", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_agg_clause": [[291, 303], ["sparqlbuilder.SPARQLBuilder.query_model.aggregate_clause.items"], "methods", ["None"], ["", "", "", "def", "add_agg_clause", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            :return:\n            \"\"\"", "\n", "agg_clause", "=", "\" \"", "\n", "for", "agg_col", ",", "agg_part", "in", "self", ".", "query_model", ".", "aggregate_clause", ".", "items", "(", ")", ":", "\n", "                ", "agg_func", "=", "agg_part", "[", "0", "]", "[", "0", "]", "\n", "src_col_name", "=", "agg_part", "[", "0", "]", "[", "2", "]", "\n", "agg_col_name", "=", "agg_col", "if", "agg_col", "is", "not", "None", "else", "''", "\n", "agg_parameter", "=", "agg_part", "[", "0", "]", "[", "1", "]", "if", "agg_part", "[", "0", "]", "[", "1", "]", "is", "not", "None", "else", "''", "\n", "agg_clause", "+=", "\" %s (%s ?%s) AS %s\"", "%", "(", "agg_func", ",", "agg_parameter", ",", "src_col_name", ",", "agg_col_name", ")", "\n", "", "self", ".", "query_string", "+=", "agg_clause", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_filter_clause": [[304, 363], ["len", "sparqlbuilder.SPARQLBuilder.query_model.filter_clause.items", "len", "range", "len", "len", "filter_con[].find", "filter_con[].find", "filter_con[].find", "filter_con[].find", "filter_con[].find", "filter_con[].find"], "methods", ["None"], ["", "def", "add_filter_clause", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            :return:\n            \"\"\"", "\n", "and_clause", "=", "\" && \"", "\n", "filter_clause", "=", "\"\"", "\n", "cond_list", "=", "\"\"", "\n", "if", "len", "(", "self", ".", "query_model", ".", "filter_clause", ")", ">", "0", ":", "\n", "                ", "filter_clause", "=", "\"FILTER ( \"", "\n", "col_i", "=", "0", "\n", "for", "col_name", ",", "filter_con", "in", "self", ".", "query_model", ".", "filter_clause", ".", "items", "(", ")", ":", "\n", "                    ", "col_i", "+=", "1", "\n", "if", "len", "(", "filter_con", ")", ">", "1", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "filter_con", ")", ")", ":", "\n", "                            ", "if", "filter_con", "[", "i", "]", ".", "find", "(", "\"isIRI\"", ")", ">=", "0", "or", "filter_con", "[", "0", "]", ".", "find", "(", "\"langMatches\"", ")", ">=", "0", "or", "filter_con", "[", "0", "]", ".", "find", "(", "\"regex\"", ")", ">=", "0", ":", "\n", "                                ", "cond_string", "=", "\" ( \"", "+", "filter_con", "[", "i", "]", "+", "\" )\"", "\n", "if", "cond_list", "!=", "\"\"", ":", "\n", "                                    ", "cond_list", "+=", "and_clause", "\n", "cond_list", "+=", "cond_string", "\n", "", "else", ":", "\n", "                                    ", "cond_list", "+=", "cond_string", "\n", "", "", "elif", "\"date\"", "not", "in", "col_name", ":", "\n", "                                ", "cond_string", "=", "\" ( \"", "\n", "cond_string", "+=", "\"?%s %s\"", "%", "(", "col_name", ",", "filter_con", "[", "i", "]", ")", "\n", "cond_string", "+=", "\" )\"", "\n", "if", "cond_list", "!=", "\"\"", ":", "\n", "                                    ", "cond_list", "+=", "and_clause", "\n", "cond_list", "+=", "cond_string", "\n", "", "else", ":", "\n", "                                    ", "cond_list", "+=", "cond_string", "\n", "", "", "else", ":", "\n", "                                ", "cond_string", "=", "\" (\"", "\n", "cond_string", "+=", "\"year(xsd:dateTime(?%s)) %s\"", "%", "(", "col_name", ",", "filter_con", "[", "i", "]", ")", "\n", "cond_string", "+=", "\" )\"", "\n", "if", "cond_list", "!=", "\"\"", ":", "\n", "                                    ", "cond_list", "+=", "and_clause", "\n", "cond_list", "+=", "cond_string", "\n", "", "else", ":", "\n", "                                    ", "cond_list", "+=", "cond_string", "\n", "", "", "", "", "else", ":", "\n", "                        ", "if", "filter_con", "[", "0", "]", ".", "find", "(", "\"isIRI\"", ")", ">=", "0", "or", "filter_con", "[", "0", "]", ".", "find", "(", "\"langMatches\"", ")", ">=", "0", "or", "filter_con", "[", "0", "]", ".", "find", "(", "\"regex\"", ")", ">=", "0", ":", "\n", "                            ", "cond_string", "=", "filter_con", "[", "0", "]", "\n", "cond_list", "+=", "cond_string", "\n", "", "elif", "\"date\"", "not", "in", "col_name", ":", "\n", "                            ", "cond_string", "=", "\" (\"", "\n", "cond_string", "+=", "\"?%s %s\"", "%", "(", "col_name", ",", "filter_con", "[", "0", "]", ")", "\n", "cond_string", "+=", "\" )\"", "\n", "cond_list", "+=", "cond_string", "\n", "", "else", ":", "\n", "                            ", "cond_string", "=", "\" (\"", "\n", "cond_string", "+=", "\"year(xsd:dateTime(?%s)) %s\"", "%", "(", "col_name", ",", "filter_con", "[", "0", "]", ")", "\n", "cond_string", "+=", "\" )\"", "\n", "cond_list", "+=", "cond_string", "\n", "", "", "if", "col_i", "<", "len", "(", "self", ".", "query_model", ".", "filter_clause", ")", ":", "\n", "                        ", "cond_list", "+=", "and_clause", "\n", "\n", "", "", "if", "filter_clause", "!=", "\"\"", ":", "\n", "                    ", "filter_clause", "+=", "cond_list", "+", "\" ) \\n\"", "\n", "", "", "return", "filter_clause", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.sparqlbuilder.SPARQLBuilder.add_having_clause": [[364, 389], ["len", "bool", "sparqlbuilder.SPARQLBuilder.query_model.having_clause.items", "range", "len"], "methods", ["None"], ["", "def", "add_having_clause", "(", "self", ")", ":", "\n", "            ", "\"\"\"\n            :return:\n            \"\"\"", "\n", "if", "len", "(", "self", ".", "query_model", ".", "having_clause", ")", ">", "0", ":", "\n", "\n", "                ", "having_clause", "=", "\"\"", "\n", "cond_list", "=", "\"\"", "\n", "if", "bool", "(", "self", ".", "query_model", ".", "having_clause", ")", ":", "\n", "                    ", "having_clause", "=", "\"HAVING ( \"", "\n", "", "for", "col_name", ",", "conditions", "in", "self", ".", "query_model", ".", "having_clause", ".", "items", "(", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "conditions", ")", ")", ":", "\n", "                        ", "cond_string", "=", "\"( \"", "\n", "func_name", ",", "agg_param", ",", "src_col_name", ",", "condition", "=", "conditions", "[", "i", "]", "\n", "agg_param", "=", "agg_param", "if", "agg_param", "is", "not", "None", "else", "''", "\n", "cond_string", "+=", "\"%s(%s ?%s) %s\"", "%", "(", "func_name", ",", "agg_param", ",", "src_col_name", ",", "condition", ")", "\n", "cond_string", "+=", "\" ) \"", "\n", "if", "cond_list", "!=", "\"\"", ":", "\n", "                            ", "cond_list", "+=", "\" && \"", "\n", "cond_list", "+=", "cond_string", "\n", "", "else", ":", "\n", "                            ", "cond_list", "+=", "cond_string", "\n", "", "", "", "if", "having_clause", "!=", "\"\"", ":", "\n", "                    ", "having_clause", "+=", "cond_list", "+", "\")\"", "\n", "", "self", ".", "query_string", "+=", "having_clause", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.__init__": [[8, 19], ["rdfframes.query_builder.querymodel.QueryModel", "queue2querymodel.Queue2QueryModelConverter.dataset.graph.graph_prefixes.values", "queue2querymodel.Queue2QueryModelConverter.query_model.add_graphs", "queue2querymodel.Queue2QueryModelConverter.query_model.add_graphs", "queue2querymodel.Queue2QueryModelConverter.query_model.add_prefixes", "queue2querymodel.Queue2QueryModelConverter.dataset.graph.graphs.values"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "query_model", "=", "QueryModel", "(", ")", "\n", "# add the graph URIs", "\n", "if", "self", ".", "dataset", ".", "graph", ".", "graphs", "is", "not", "None", ":", "\n", "            ", "self", ".", "query_model", ".", "add_graphs", "(", "self", ".", "dataset", ".", "graph", ".", "graphs", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "query_model", ".", "add_graphs", "(", "[", "]", ")", "\n", "# add the prefixes", "\n", "", "for", "prefixes", "in", "self", ".", "dataset", ".", "graph", ".", "graph_prefixes", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "query_model", ".", "add_prefixes", "(", "prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.to_query_model": [[20, 28], ["queue2querymodel.Queue2QueryModelConverter.traverse_dataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.traverse_dataset"], ["", "", "def", "to_query_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        converts the dataset to a query model\n        :return: a query model\n        \"\"\"", "\n", "# traverse the query queue", "\n", "self", ".", "traverse_dataset", "(", ")", "\n", "return", "self", ".", "query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.traverse_dataset": [[29, 31], ["queue2querymodel.Queue2QueryModelConverter.__traverse_dataset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.__traverse_dataset"], ["", "def", "traverse_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "__traverse_dataset", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.__traverse_dataset": [[32, 43], ["ds.type", "queue2querymodel.Queue2QueryModelConverter.__traverse_dataset", "node.visit_node"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.__traverse_dataset", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.visit_node"], ["", "def", "__traverse_dataset", "(", "self", ",", "ds", ")", ":", "\n", "# check if this ds is a grouped_ds, process the parent ds before", "\n", "        ", "if", "ds", ".", "type", "(", ")", "==", "\"GroupedDataset\"", ":", "\n", "            ", "self", ".", "__traverse_dataset", "(", "ds", ".", "parent_dataset", ")", "\n", "\n", "", "queue", "=", "ds", ".", "query_queue", "\n", "current_qm", "=", "self", ".", "query_model", "\n", "\n", "for", "node", "in", "queue", ".", "queue", ":", "\n", "            ", "current_ds", ",", "current_qm", ",", "grouped_ds", "=", "node", ".", "visit_node", "(", "current_qm", ",", "ds", ",", "node", ")", "\n", "", "self", ".", "query_model", "=", "current_qm", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.__init__": [[21, 57], ["set", "set", "orderedset.OrderedSet", "collections.OrderedDict", "orderedset.OrderedSet", "orderedset.OrderedSet"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializing the QueryModel\n        QueryModel is a representation of a sparql query. It has a place holder for every\n        possible componne of a sparql query\n        \"\"\"", "\n", "\n", "self", ".", "prefixes", "=", "{", "}", "# a dictionary of prefix_name: prefix_URI", "\n", "\n", "self", ".", "variables", "=", "set", "(", ")", "# a set of all variables in the query.", "\n", "self", ".", "from_clause", "=", "set", "(", ")", "# a list of graph URIs", "\n", "self", ".", "graph_clause", "=", "{", "}", "# a dict of graph: subquery", "\n", "self", ".", "optional_graph_clause", "=", "{", "}", "\n", "self", ".", "filter_clause", "=", "{", "}", "# a dictionary of column name as key and associated conditions as a value", "\n", "self", ".", "groupBy_columns", "=", "OrderedSet", "(", ")", "# a set of columns for the groupby modifier, it's a subset of self.variables", "\n", "self", ".", "aggregate_clause", "=", "{", "}", "# a dictionary of new_aggregation_col_name: (aggregate function, src_column_name)", "\n", "self", ".", "having_clause", "=", "{", "}", "# a dictionary of new_aggregation_col_name : condition", "\n", "self", ".", "order_clause", "=", "OrderedDict", "(", ")", "# a dictionary of columns and the specifier (ASC, DSC)", "\n", "\n", "self", ".", "limit", "=", "0", "# represents the number of rows to be returned by the query.", "\n", "self", ".", "offset", "=", "0", "# represents the offset in terms of the number of rows", "\n", "\n", "self", ".", "triples", "=", "[", "]", "# list of basic graph patterns in the form (subject, predicate, object) tuples", "\n", "self", ".", "optionals", "=", "[", "]", "# list of optional query models.", "\n", "self", ".", "subqueries", "=", "[", "]", "# list of subqueries. each subquery is a query model", "\n", "self", ".", "optional_subqueries", "=", "[", "]", "# list of optional subqueries. each subquery is a query model", "\n", "self", ".", "unions", "=", "[", "]", "# list of subqueries to union with the current query model", "\n", "self", ".", "graph_triples", "=", "{", "}", "# dict of graph: list of triples. When there is more than one triple in the graph", "\n", "\n", "self", ".", "select_columns", "=", "OrderedSet", "(", ")", "# list of columns to be selected ,  set()", "\n", "self", ".", "auto_generated_select_columns", "=", "OrderedSet", "(", ")", "\n", "self", ".", "select_all", "=", "False", "\n", "\n", "self", ".", "querybuilder", "=", "None", "# a SPARQLbuilder that converts the query model to a string", "\n", "self", ".", "parent_query_model", "=", "None", "# a pointer to the parent query if this is a subquery", "\n", "self", ".", "is_optional", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes": [[58, 65], ["querymodel.QueryModel.is_subquery", "querymodel.QueryModel.prefixes.update"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_subquery"], ["", "def", "add_prefixes", "(", "self", ",", "prefixes", ")", ":", "\n", "        ", "\"\"\"\n        Add a dictionary of prefixs to the sparql queries\n        :param prefixes: a dictionary of prefixes where the key is the prefix name and the value is the prefix URI\n        \"\"\"", "\n", "if", "not", "self", ".", "is_subquery", "(", ")", ":", "\n", "            ", "self", ".", "prefixes", ".", "update", "(", "prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graphs": [[66, 73], ["querymodel.QueryModel.is_subquery", "querymodel.QueryModel.from_clause.union"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union"], ["", "", "def", "add_graphs", "(", "self", ",", "graphs", ")", ":", "\n", "        ", "\"\"\"\n        Add a list of graphs to the from clause\n        :param graphs: a list of graphs' URIs\n        \"\"\"", "\n", "if", "not", "self", ".", "is_subquery", "(", ")", ":", "\n", "            ", "self", ".", "from_clause", "=", "self", ".", "from_clause", ".", "union", "(", "graphs", ")", "#extend", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause": [[74, 78], ["next", "querymodel.QueryModel.clean_inner_qm", "iter"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm"], ["", "", "def", "add_graph_clause", "(", "self", ",", "query_model", ")", ":", "\n", "        ", "graph", "=", "next", "(", "iter", "(", "query_model", ".", "from_clause", ")", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model", ")", "\n", "self", ".", "graph_clause", "[", "graph", "]", "=", "query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_graph_clause": [[79, 83], ["next", "querymodel.QueryModel.clean_inner_qm", "iter"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm"], ["", "def", "add_optional_graph_clause", "(", "self", ",", "query_model", ")", ":", "\n", "        ", "graph", "=", "next", "(", "iter", "(", "query_model", ".", "from_clause", ")", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model", ")", "\n", "self", ".", "optional_graph_clause", "[", "graph", "]", "=", "query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_triples": [[84, 97], ["len", "querymodel.OptionalQueryModel", "querymodel.QueryModel.optionals.append", "querymodel.QueryModel.add_triple"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_triple"], ["", "def", "add_optional_triples", "(", "self", ",", "triples", ",", "graph", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n         add a triple to the list of the optional triples in the query model.\n         :param subject: subject of the triple\n         :param object: object of the triple\n         :param predicate: predicate of the triple\n         \"\"\"", "\n", "if", "len", "(", "triples", ")", ">", "0", ":", "\n", "            ", "optional_query_model", "=", "OptionalQueryModel", "(", ")", "\n", "for", "(", "subject", ",", "predicate", ",", "object", ")", "in", "triples", ":", "\n", "                ", "optional_query_model", ".", "add_triple", "(", "subject", ",", "predicate", ",", "object", ")", "\n", "", "self", ".", "optionals", ".", "append", "(", "optional_query_model", ")", "\n", "return", "optional_query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_block": [[98, 106], ["querymodel.QueryModel.optionals.append"], "methods", ["None"], ["", "", "def", "add_optional_block", "(", "self", ",", "optional_query_model", ")", ":", "\n", "        ", "\"\"\"\n         add a triple to the list of the optional triples in the query model.\n         :param subject: subject of the triple\n         :param object: object of the triple\n         :param predicate: predicate of the triple\n         \"\"\"", "\n", "self", ".", "optionals", ".", "append", "(", "optional_query_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_triple": [[107, 119], ["querymodel.QueryModel.triples.append", "querymodel.QueryModel.add_variable", "querymodel.QueryModel.add_variable", "querymodel.QueryModel.add_variable"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_variable"], ["", "def", "add_triple", "(", "self", ",", "subject", ",", "predicate", ",", "object", ")", ":", "\n", "        ", "\"\"\"\n         add a triple to the list of the triples in the query model.\n         :param subject: subject of the triple\n         :param object: object of the triple\n         :param predicate: predicate of the triple\n         \"\"\"", "\n", "if", "(", "subject", ",", "predicate", ",", "object", ")", "not", "in", "self", ".", "triples", ":", "\n", "            ", "self", ".", "triples", ".", "append", "(", "(", "subject", ",", "predicate", ",", "object", ")", ")", "\n", "self", ".", "add_variable", "(", "subject", ")", "\n", "self", ".", "add_variable", "(", "object", ")", "\n", "self", ".", "add_variable", "(", "predicate", ")", "\n", "", "", "def", "add_graph_triple", "(", "self", ",", "graph", ",", "triples", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_triple": [[119, 121], ["None"], "methods", ["None"], ["", "", "def", "add_graph_triple", "(", "self", ",", "graph", ",", "triples", ")", ":", "\n", "        ", "self", ".", "graph_triples", "[", "graph", "]", "=", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions": [[122, 132], ["querymodel.QueryModel.unions.append", "weakref.ref", "len", "len"], "methods", ["None"], ["", "def", "add_unions", "(", "self", ",", "unionquery", ")", ":", "# subquery type is query_builder", "\n", "        ", "\"\"\"\n        adds a subquery to the query model\n        :param subquery:\n        :return:\n        \"\"\"", "\n", "if", "len", "(", "unionquery", ".", "select_columns", ")", "<=", "0", "and", "len", "(", "unionquery", ".", "auto_generated_select_columns", ")", "<=", "0", ":", "\n", "            ", "unionquery", ".", "select_all", "=", "True", "\n", "", "self", ".", "unions", ".", "append", "(", "unionquery", ")", "\n", "unionquery", ".", "parent_query_model", "=", "weakref", ".", "ref", "(", "self", ")", "\n", "#unionquery.from_clause.clear()", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_subquery": [[135, 144], ["querymodel.QueryModel.subqueries.append", "weakref.ref", "subquery.from_clause.clear"], "methods", ["None"], ["", "def", "add_subquery", "(", "self", ",", "subquery", ")", ":", "# subquery type is query_builder", "\n", "        ", "\"\"\"\n        adds a subquery to the query model\n        :param subquery:\n        :return:\n        \"\"\"", "\n", "self", ".", "subqueries", ".", "append", "(", "subquery", ")", "\n", "subquery", ".", "parent_query_model", "=", "weakref", ".", "ref", "(", "self", ")", "\n", "subquery", ".", "from_clause", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_subquery": [[145, 154], ["querymodel.QueryModel.optional_subqueries.append", "weakref.ref", "subquery.from_clause.clear"], "methods", ["None"], ["", "def", "add_optional_subquery", "(", "self", ",", "subquery", ")", ":", "# subquery type is query_builder", "\n", "        ", "\"\"\"\n        adds a subquery to the query model\n        :param subquery:\n        :return:\n        \"\"\"", "\n", "self", ".", "optional_subqueries", ".", "append", "(", "subquery", ")", "\n", "subquery", ".", "parent_query_model", "=", "weakref", ".", "ref", "(", "self", ")", "\n", "subquery", ".", "from_clause", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_variable": [[155, 167], ["rdfframes.utils.helper_functions.is_uri", "col_name.find", "querymodel.QueryModel.variables.add", "querymodel.QueryModel.variables.add", "col_name.find"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri"], ["", "def", "add_variable", "(", "self", ",", "col_name", ")", ":", "\n", "        ", "\"\"\"\n        add a variable (column name) to the list of the variables of a single SPARQL query (mainly to represent\n         Select variables) .\n         :param col_name: represents the column name after being parced from the corresponding DAG node.\n\n        \"\"\"", "\n", "if", "not", "is_uri", "(", "col_name", ")", ":", "\n", "            ", "if", "col_name", ".", "find", "(", "\":\"", ")", "<", "0", ":", "\n", "                ", "self", ".", "variables", ".", "add", "(", "col_name", ")", "\n", "", "elif", "col_name", "[", ":", "col_name", ".", "find", "(", "\":\"", ")", "]", "not", "in", "self", ".", "prefixes", ":", "\n", "                ", "self", ".", "variables", ".", "add", "(", "col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_group_columns": [[168, 174], ["querymodel.QueryModel.groupBy_columns.union"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union"], ["", "", "", "def", "add_group_columns", "(", "self", ",", "col_names", ")", ":", "\n", "        ", "\"\"\"\n         add a columns  to the list of the group by columns.\n        :param col_names: represents the column name that will group the records based on it.\n        \"\"\"", "\n", "self", ".", "groupBy_columns", "=", "self", ".", "groupBy_columns", ".", "union", "(", "col_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_aggregate_pair": [[175, 187], ["querymodel.QueryModel.aggregate_clause[].append", "querymodel.QueryModel.variables.add"], "methods", ["None"], ["", "def", "add_aggregate_pair", "(", "self", ",", "src_col_name", ",", "func_name", ",", "new_col_name", ",", "agg_param", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n         add a pair of column, function name to the list that forms the aggregation clause\n         :param src_col_name: the source column name to be aggregated\n         :param new_col_name: the new column name\n         :param func_name: represents aggregation function on the corresponding column\n         :param agg_param: aggregation parameter like distinct with count\n         \"\"\"", "\n", "if", "new_col_name", "not", "in", "self", ".", "aggregate_clause", ":", "\n", "            ", "self", ".", "aggregate_clause", "[", "new_col_name", "]", "=", "[", "]", "\n", "", "self", ".", "aggregate_clause", "[", "new_col_name", "]", ".", "append", "(", "(", "func_name", ",", "agg_param", ",", "src_col_name", ")", ")", "\n", "self", ".", "variables", ".", "add", "(", "new_col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_filter_condition": [[188, 200], ["querymodel.QueryModel.add_variable", "querymodel.QueryModel.filter_clause[].append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_variable"], ["", "def", "add_filter_condition", "(", "self", ",", "col_name", ",", "condition", ")", ":", "\n", "        ", "\"\"\"\n        add a pair of (column, condition) to the list of conditions of the filter clause\n        :param col_name: represents the column name at which the condition will be applied.\n        :param condition: represents the filtering criterion ( Operator, Value)\n         \"\"\"", "\n", "if", "col_name", "not", "in", "self", ".", "variables", ":", "\n", "            ", "self", ".", "add_variable", "(", "col_name", ")", "\n", "", "if", "col_name", "in", "self", ".", "filter_clause", ":", "\n", "            ", "self", ".", "filter_clause", "[", "col_name", "]", ".", "append", "(", "condition", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "filter_clause", "[", "col_name", "]", "=", "[", "condition", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_having_condition": [[201, 211], ["querymodel.QueryModel.having_clause[].append"], "methods", ["None"], ["", "", "def", "add_having_condition", "(", "self", ",", "agg_col_name", ",", "condition", ")", ":", "\n", "        ", "\"\"\"\n        add a pair of (column, condition) to the list of conditions of the filter clause\n        :param agg_col_name: represents the column name where the filtering will occur.\n        :param condition: represents the having criterion ( Operator Value)\n        \"\"\"", "\n", "if", "agg_col_name", "not", "in", "self", ".", "having_clause", ":", "\n", "            ", "self", ".", "having_clause", "[", "agg_col_name", "]", "=", "[", "]", "\n", "", "func_name", ",", "agg_param", ",", "src_col_name", "=", "self", ".", "aggregate_clause", "[", "agg_col_name", "]", "[", "0", "]", "\n", "self", ".", "having_clause", "[", "agg_col_name", "]", ".", "append", "(", "[", "func_name", ",", "agg_param", ",", "src_col_name", ",", "condition", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_order_columns": [[212, 219], ["sorting_cols.items"], "methods", ["None"], ["", "def", "add_order_columns", "(", "self", ",", "sorting_cols", ")", ":", "\n", "        ", "\"\"\"\n        add a pair of (column, specifier) to the list of sorting options.\n        :param sorting_cols: list of pairs of (column name, sort order) that will be used for sorting\n        \"\"\"", "\n", "for", "col", ",", "order", "in", "sorting_cols", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "order_clause", "[", "col", "]", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_limit": [[220, 226], ["None"], "methods", ["None"], ["", "", "def", "set_limit", "(", "self", ",", "limit", ")", ":", "\n", "        ", "\"\"\"\n        :param limit: the value that represents the number of results to be returned\n        :return: none\n        \"\"\"", "\n", "self", ".", "limit", "=", "limit", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_offset": [[227, 234], ["None"], "methods", ["None"], ["", "def", "set_offset", "(", "self", ",", "offset", ")", ":", "\n", "        ", "\"\"\"\n\n        :param offset: the value that represents the number of NEXT results to be returned\n        :return: none\n        \"\"\"", "\n", "self", ".", "offset", "=", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_select_column": [[235, 241], ["querymodel.QueryModel.select_columns.add"], "methods", ["None"], ["", "def", "add_select_column", "(", "self", ",", "col_name", ")", ":", "\n", "        ", "\"\"\"\n        :param col_name:\n        :return:\n        \"\"\"", "\n", "self", ".", "select_columns", ".", "add", "(", "col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.auto_add_select_column": [[242, 245], ["querymodel.QueryModel.auto_generated_select_columns.add"], "methods", ["None"], ["", "def", "auto_add_select_column", "(", "self", ",", "col_name", ")", ":", "\n", "#print(\"Auto adding {}\".format(col_name))", "\n", "        ", "self", ".", "auto_generated_select_columns", ".", "add", "(", "col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_select_column": [[246, 248], ["querymodel.QueryModel.select_columns.remove"], "methods", ["None"], ["", "def", "rem_select_column", "(", "self", ",", "col_name", ")", ":", "\n", "        ", "self", ".", "select_columns", ".", "remove", "(", "col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_all_triples": [[249, 251], ["None"], "methods", ["None"], ["", "def", "rem_all_triples", "(", "self", ")", ":", "\n", "        ", "self", ".", "triples", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_graph_triples": [[252, 254], ["None"], "methods", ["None"], ["", "def", "rem_graph_triples", "(", "self", ")", ":", "\n", "        ", "self", ".", "graph_triples", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_from_clause": [[255, 257], ["set"], "methods", ["None"], ["", "def", "rem_from_clause", "(", "self", ")", ":", "\n", "        ", "self", ".", "from_clause", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_prefixes": [[258, 260], ["None"], "methods", ["None"], ["", "def", "rem_prefixes", "(", "self", ")", ":", "\n", "        ", "self", ".", "prefixes", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_optional_triples": [[261, 263], ["None"], "methods", ["None"], ["", "def", "rem_optional_triples", "(", "self", ")", ":", "\n", "        ", "self", ".", "optionals", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_filters": [[264, 266], ["None"], "methods", ["None"], ["", "def", "rem_filters", "(", "self", ")", ":", "\n", "        ", "self", ".", "filter_clause", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_subqueries": [[267, 269], ["None"], "methods", ["None"], ["", "def", "rem_subqueries", "(", "self", ")", ":", "\n", "        ", "self", ".", "subqueries", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_optional_subqueries": [[270, 272], ["None"], "methods", ["None"], ["", "def", "rem_optional_subqueries", "(", "self", ")", ":", "\n", "        ", "self", ".", "optional_subqueries", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_unions": [[273, 275], ["None"], "methods", ["None"], ["", "def", "rem_unions", "(", "self", ")", ":", "\n", "        ", "self", ".", "unions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.transfer_grouping_to_subquery": [[276, 294], ["orderedset.OrderedSet", "set", "dict", "dict", "querymodel.QueryModel.groupBy_columns.clear", "querymodel.QueryModel.having_clause.clear", "querymodel.QueryModel.aggregate_clause.clear", "querymodel.QueryModel.add_subquery", "subquery.add_triple"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_triple"], ["", "def", "transfer_grouping_to_subquery", "(", "self", ",", "subquery", ")", ":", "\n", "        ", "grouping_cols", "=", "self", ".", "groupBy_columns", "\n", "\n", "for", "g_col", "in", "grouping_cols", ":", "\n", "            ", "involved_triples", "=", "[", "triple", "for", "triple", "in", "self", ".", "triples", "\n", "if", "g_col", "==", "triple", "[", "0", "]", "or", "g_col", "==", "triple", "[", "2", "]", "]", "\n", "for", "t", "in", "involved_triples", ":", "\n", "                ", "subquery", ".", "add_triple", "(", "*", "t", ")", "\n", "\n", "", "", "subquery", ".", "groupBy_columns", "=", "OrderedSet", "(", "grouping_cols", ")", "\n", "subquery", ".", "select_columns", "=", "set", "(", "grouping_cols", ")", "\n", "subquery", ".", "having_clause", "=", "dict", "(", "self", ".", "having_clause", ")", "\n", "subquery", ".", "aggregate_clause", "=", "dict", "(", "self", ".", "aggregate_clause", ")", "\n", "\n", "self", ".", "groupBy_columns", ".", "clear", "(", ")", "\n", "self", ".", "having_clause", ".", "clear", "(", ")", "\n", "self", ".", "aggregate_clause", ".", "clear", "(", ")", "\n", "self", ".", "add_subquery", "(", "subquery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm": [[295, 303], ["qm.rem_prefixes", "qm.rem_from_clause", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_from_clause"], ["", "@", "staticmethod", "\n", "def", "clean_inner_qm", "(", "qm", ")", ":", "\n", "# clean the inner query (self)", "\n", "        ", "qm", ".", "rem_prefixes", "(", ")", "\n", "qm", ".", "rem_from_clause", "(", ")", "\n", "qm", ".", "limit", "=", "0", "\n", "qm", ".", "offset", "=", "0", "\n", "qm", ".", "order_clause", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.wrap_in_a_parent_query": [[304, 358], ["querymodel.QueryModel", "querymodel.QueryModel.add_prefixes", "querymodel.QueryModel.add_graphs", "querymodel.QueryModel.set_limit", "querymodel.QueryModel.set_offset", "querymodel.QueryModel.add_order_columns", "querymodel.QueryModel.add_subquery", "querymodel.QueryModel.clean_inner_qm", "querymodel.QueryModel.auto_add_select_column", "querymodel.QueryModel.add_variable", "querymodel.QueryModel.auto_add_select_column", "querymodel.QueryModel.rem_select_column", "to_add_to_select.append", "to_rem_from_select.append", "querymodel.QueryModel.add_triple", "querymodel.QueryModel.add_filter_condition", "querymodel.QueryModel.add_subquery"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_limit", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_offset", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_order_columns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.auto_add_select_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.auto_add_select_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rem_select_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_triple", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_filter_condition", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_subquery"], ["", "def", "wrap_in_a_parent_query", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        wraps the current query in a subquery and returns a new query model that contains one graph pattern which is\n        the current query as a subquery\n        :return: a new QueryModel that wraps the current query model\n        \"\"\"", "\n", "# initialize the parent query with the graph uri, the prefixes and the variables in the inner query", "\n", "parent_query", "=", "QueryModel", "(", ")", "\n", "parent_query", ".", "add_prefixes", "(", "self", ".", "prefixes", ")", "\n", "parent_query", ".", "add_graphs", "(", "self", ".", "from_clause", ")", "\n", "to_add_to_select", "=", "[", "]", "\n", "to_rem_from_select", "=", "[", "]", "\n", "for", "var", "in", "self", ".", "select_columns", ":", "\n", "# if select column in groupby or aggregation: add it to selected columns by the user in inner query", "\n", "#  and the outer query.", "\n", "#  else: find the relevant graph patterns and move them to the outer query and", "\n", "#  remove the select column from select clause in inner query", "\n", "            ", "if", "(", "var", "in", "self", ".", "groupBy_columns", ")", "or", "(", "var", "in", "self", ".", "aggregate_clause", ")", ":", "\n", "                ", "to_add_to_select", ".", "append", "(", "var", ")", "\n", "", "else", ":", "\n", "# add basic graph patterns", "\n", "                ", "involved_triples", "=", "[", "triple", "for", "triple", "in", "self", ".", "triples", "\n", "if", "var", "==", "triple", "[", "0", "]", "or", "var", "==", "triple", "[", "2", "]", "]", "\n", "for", "t", "in", "involved_triples", ":", "\n", "                    ", "parent_query", ".", "add_triple", "(", "*", "t", ")", "\n", "# add filter patterns", "\n", "", "if", "var", "in", "self", ".", "filter_clause", ":", "\n", "                    ", "for", "condition", "in", "self", ".", "filter_clause", "[", "var", "]", ":", "\n", "                        ", "parent_query", ".", "add_filter_condition", "(", "var", ",", "condition", ")", "\n", "# add subqueries", "\n", "# Is it query.select or query.variables", "\n", "", "", "for", "subquery", "in", "self", ".", "subqueries", ":", "\n", "                    ", "if", "var", "in", "subquery", ".", "select_columns", ":", "\n", "                        ", "parent_query", ".", "add_subquery", "(", "subquery", ")", "\n", "", "", "to_rem_from_select", ".", "append", "(", "var", ")", "\n", "", "parent_query", ".", "auto_add_select_column", "(", "var", ")", "\n", "parent_query", ".", "add_variable", "(", "var", ")", "\n", "", "for", "var", "in", "to_add_to_select", ":", "\n", "            ", "self", ".", "auto_add_select_column", "(", "var", ")", "\n", "", "for", "var", "in", "to_rem_from_select", ":", "\n", "            ", "self", ".", "rem_select_column", "(", "var", ")", "\n", "\n", "# set the limit and offset of the outer query. don't allow limit and offset in the inner query", "\n", "", "parent_query", ".", "set_limit", "(", "self", ".", "limit", ")", "\n", "parent_query", ".", "set_offset", "(", "self", ".", "offset", ")", "\n", "parent_query", ".", "add_order_columns", "(", "self", ".", "order_clause", ")", "\n", "# add self to the subqueries in the parent subquery", "\n", "parent_query", ".", "add_subquery", "(", "self", ")", "\n", "self", ".", "parent_query_model", "=", "parent_query", "\n", "\n", "# clean the inner query (self)", "\n", "QueryModel", ".", "clean_inner_qm", "(", "self", ")", "\n", "\n", "return", "parent_query", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.transfer_select_triples_to_parent_query": [[359, 367], ["querymodel.QueryModel.add_triple"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_triple"], ["", "def", "transfer_select_triples_to_parent_query", "(", "self", ",", "parent_ds_cols", ")", ":", "\n", "# transfer the order by, the filter clause,", "\n", "        ", "for", "col", "in", "parent_ds_cols", ":", "\n", "            ", "triples_list", "=", "[", "subquery", ".", "triples", "for", "subquery", "in", "self", ".", "subqueries", "]", "\n", "involved_triples", "=", "[", "triple", "for", "triples", "in", "triples_list", "for", "triple", "in", "triples", "if", "col", "==", "triple", "[", "0", "]", "or", "col", "==", "triple", "[", "2", "]", "]", "\n", "for", "t", "in", "involved_triples", ":", "\n", "                ", "if", "t", "not", "in", "self", ".", "triples", ":", "\n", "                    ", "self", ".", "add_triple", "(", "*", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_defined_variable": [[368, 370], ["any", "subquery.is_defined_variable"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_defined_variable"], ["", "", "", "", "def", "is_defined_variable", "(", "self", ",", "var", ")", ":", "\n", "        ", "return", "var", "in", "self", ".", "variables", "or", "any", "(", "[", "subquery", ".", "is_defined_variable", "(", "var", ")", "for", "subquery", "in", "self", ".", "subqueries", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_grouped": [[371, 373], ["len"], "methods", ["None"], ["", "def", "is_grouped", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "groupBy_columns", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_sorted": [[374, 376], ["len"], "methods", ["None"], ["", "def", "is_sorted", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "order_clause", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql": [[377, 381], ["rdfframes.query_builder.sparqlbuilder.SPARQLBuilder", "querymodel.QueryModel.querybuilder.to_sparql"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "to_sparql", "(", "self", ")", ":", "\n", "#self.validate()", "\n", "        ", "self", ".", "querybuilder", "=", "SPARQLBuilder", "(", ")", "\n", "return", "self", ".", "querybuilder", ".", "to_sparql", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_aggregate_col": [[382, 386], ["None"], "methods", ["None"], ["", "def", "is_aggregate_col", "(", "self", ",", "src_col_name", ")", ":", "\n", "        ", "if", "src_col_name", "in", "self", ".", "aggregate_clause", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_subquery": [[387, 389], ["None"], "methods", ["None"], ["", "def", "is_subquery", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "parent_query_model", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.all_variables": [[390, 399], ["set().union", "len", "all_vars.union.union.union", "set", "subq.all_variables"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.all_variables"], ["", "def", "all_variables", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "subqueries", ")", "==", "0", ":", "\n", "            ", "return", "self", ".", "variables", "\n", "\n", "", "all_vars", "=", "set", "(", ")", ".", "union", "(", "self", ".", "variables", ")", "\n", "\n", "for", "subq", "in", "self", ".", "subqueries", ":", "\n", "            ", "all_vars", "=", "all_vars", ".", "union", "(", "subq", ".", "all_variables", "(", ")", ")", "\n", "", "return", "all_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rename_variable": [[400, 429], ["orderedset.OrderedSet", "orderedset.OrderedSet", "orderedset.OrderedSet", "query.rename_variable", "query.rename_variable", "query.rename_variable", "query.rename_variable"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rename_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rename_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rename_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rename_variable"], ["", "def", "rename_variable", "(", "self", ",", "old_name", ",", "new_name", ")", ":", "\n", "        ", "self", ".", "triples", "=", "[", "[", "new_name", "if", "element", "==", "old_name", "else", "element", "for", "element", "in", "triple", "]", "for", "triple", "in", "self", ".", "triples", "]", "\n", "for", "query", "in", "self", ".", "optionals", ":", "\n", "            ", "query", ".", "rename_variable", "(", "old_name", ",", "new_name", ")", "\n", "", "self", ".", "select_columns", "=", "OrderedSet", "(", "[", "new_name", "if", "var", "==", "old_name", "else", "var", "for", "var", "in", "self", ".", "select_columns", "]", ")", "\n", "self", ".", "auto_generated_select_columns", "=", "OrderedSet", "(", "[", "new_name", "if", "var", "==", "old_name", "else", "var", "for", "var", "in", "self", ".", "auto_generated_select_columns", "]", ")", "\n", "self", ".", "groupBy_columns", "=", "OrderedSet", "(", "[", "new_name", "if", "var", "==", "old_name", "else", "var", "for", "var", "in", "self", ".", "groupBy_columns", "]", ")", "\n", "self", ".", "variables", "=", "{", "new_name", "if", "var", "==", "old_name", "else", "var", "for", "var", "in", "self", ".", "variables", "}", "\n", "if", "old_name", "in", "self", ".", "order_clause", ":", "\n", "            ", "self", ".", "order_clause", "[", "new_name", "]", "=", "self", ".", "order_clause", "[", "old_name", "]", "\n", "del", "self", ".", "order_clause", "[", "old_name", "]", "\n", "", "if", "old_name", "in", "self", ".", "filter_clause", ":", "\n", "            ", "self", ".", "filter_clause", "[", "new_name", "]", "=", "self", ".", "filter_clause", "[", "old_name", "]", "\n", "del", "self", ".", "filter_clause", "[", "old_name", "]", "\n", "", "if", "old_name", "in", "self", ".", "having_clause", ":", "\n", "            ", "self", ".", "having_clause", "[", "new_name", "]", "=", "self", ".", "having_clause", "[", "old_name", "]", "\n", "del", "self", ".", "having_clause", "[", "old_name", "]", "\n", "", "for", "var", "in", "self", ".", "aggregate_clause", ":", "\n", "            ", "self", ".", "aggregate_clause", "[", "var", "]", "=", "[", "[", "new_name", "if", "element", "==", "old_name", "else", "element", "\n", "for", "element", "in", "triple", "]", "for", "triple", "in", "self", ".", "aggregate_clause", "[", "var", "]", "]", "\n", "if", "var", "==", "old_name", ":", "\n", "                ", "self", ".", "aggregate_clause", "[", "new_name", "]", "=", "self", ".", "aggregate_clause", "[", "old_name", "]", "\n", "del", "self", ".", "aggregate_clause", "[", "old_name", "]", "\n", "", "", "for", "query", "in", "self", ".", "subqueries", ":", "\n", "            ", "query", ".", "rename_variable", "(", "old_name", ",", "new_name", ")", "\n", "", "for", "query", "in", "self", ".", "unions", ":", "\n", "            ", "query", ".", "rename_variable", "(", "old_name", ",", "new_name", ")", "\n", "", "for", "query", "in", "self", ".", "optional_subqueries", ":", "\n", "            ", "query", ".", "rename_variable", "(", "old_name", ",", "new_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_valid_prefix": [[430, 435], ["querymodel.QueryModel.prefixes.keys"], "methods", ["None"], ["", "", "def", "is_valid_prefix", "(", "self", ",", "prefix", ")", ":", "\n", "        ", "if", "prefix", "in", "self", ".", "prefixes", ".", "keys", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union": [[436, 469], ["querymodel.QueryModel", "querymodel.QueryModel.add_graphs", "querymodel.QueryModel.add_graphs", "querymodel.QueryModel.add_prefixes", "querymodel.QueryModel.add_prefixes", "QueryModel.variables.union", "QueryModel.variables.union", "querymodel.QueryModel.set_offset", "querymodel.QueryModel.set_limit", "querymodel.QueryModel.add_order_columns", "querymodel.QueryModel.add_order_columns", "querymodel.QueryModel.clean_inner_qm", "querymodel.QueryModel.clean_inner_qm", "querymodel.QueryModel.add_unions", "querymodel.QueryModel.add_unions", "min", "max"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_offset", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_limit", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_order_columns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_order_columns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.min", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.max"], ["", "", "def", "union", "(", "self", ",", "qm2", ")", ":", "\n", "        ", "\"\"\"\n        union this query model with query model (qm2)\n        :param qm2:\n        :return: a query model that unions the current query model and qm2\n        \"\"\"", "\n", "final_qm", "=", "QueryModel", "(", ")", "\n", "\n", "if", "self", ".", "from_clause", "==", "qm2", ".", "from_clause", ":", "# same graph", "\n", "# add the graphs to the outer qm and remove them  from the inner qms", "\n", "            ", "final_qm", ".", "add_graphs", "(", "self", ".", "from_clause", ")", "\n", "final_qm", ".", "add_graphs", "(", "qm2", ".", "from_clause", ")", "\n", "\n", "# union the prefixes and remove them  from the inner qms", "\n", "# TODO: check that all namespaces that have the same prefix have the same uri", "\n", "final_qm", ".", "add_prefixes", "(", "self", ".", "prefixes", ")", "\n", "final_qm", ".", "add_prefixes", "(", "qm2", ".", "prefixes", ")", "\n", "\n", "final_qm", ".", "variables", "=", "final_qm", ".", "variables", ".", "union", "(", "self", ".", "variables", ")", "\n", "final_qm", ".", "variables", "=", "final_qm", ".", "variables", ".", "union", "(", "qm2", ".", "variables", ")", "\n", "\n", "final_qm", ".", "set_offset", "(", "min", "(", "self", ".", "offset", ",", "qm2", ".", "offset", ")", ")", "\n", "final_qm", ".", "set_limit", "(", "max", "(", "self", ".", "limit", ",", "qm2", ".", "limit", ")", ")", "\n", "final_qm", ".", "add_order_columns", "(", "self", ".", "order_clause", ")", "\n", "final_qm", ".", "add_order_columns", "(", "qm2", ".", "order_clause", ")", "\n", "\n", "QueryModel", ".", "clean_inner_qm", "(", "self", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "qm2", ")", "\n", "\n", "final_qm", ".", "add_unions", "(", "self", ")", "\n", "final_qm", ".", "add_unions", "(", "qm2", ")", "\n", "\n", "return", "final_qm", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.validate": [[470, 531], ["querymodel.QueryModel.all_variables", "set", "set", "set", "set.intersection", "len", "Exception", "len", "Exception", "set.add", "Warning", "Warning", "querymodel.QueryModel.is_aggregate_col", "Warning", "rdfframes.utils.helper_functions.is_uri", "col_name.find", "col_name.split", "triple[].find", "triple[].split", "len", "len", "querymodel.QueryModel.is_valid_prefix", "Exception", "querymodel.QueryModel.is_valid_prefix", "Exception"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.all_variables", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_aggregate_col", "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_valid_prefix", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.is_valid_prefix"], ["", "", "def", "validate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        validate the columns and parameters data in the query model and reports and inconsistencies.\n        1) validate the namespance in the preidcate to match the given in the graphs' prefixes\n        2)\n        :return: True if valid and False if not\n        \"\"\"", "\n", "# add the aggregation to expandable group", "\n", "\n", "# group by in expandable dataset, raise exception if the select cols not in the group by", "\n", "# validate the prefix in the triple", "\n", "if", "self", ".", "parent_query_model", "is", "None", ":", "\n", "            ", "for", "triple", "in", "self", ".", "triples", ":", "\n", "                ", "if", "not", "is_uri", "(", "triple", "[", "1", "]", ")", ":", "\n", "                    ", "if", "triple", "[", "1", "]", ".", "find", "(", "\":\"", ")", ">=", "0", ":", "\n", "                        ", "prefix", "=", "triple", "[", "1", "]", ".", "split", "(", "\":\"", ")", "\n", "if", "(", "len", "(", "prefix", ")", ">=", "1", ")", ":", "\n", "                            ", "if", "not", "self", ".", "is_valid_prefix", "(", "prefix", "[", "0", "]", ")", ":", "\n", "                                ", "raise", "Exception", "(", "\"Not a valid Prefix in triple {}\"", ".", "format", "(", "triple", ")", ")", "\n", "", "", "", "else", ":", "\n", "# predicate is a variable", "\n", "                        ", "pass", "\n", "\n", "", "", "", "", "if", "self", ".", "parent_query_model", "is", "None", ":", "\n", "            ", "for", "col_name", "in", "self", ".", "filter_clause", ":", "\n", "                ", "if", "col_name", ".", "find", "(", "':'", ")", "!=", "-", "1", ":", "\n", "                    ", "prefix", "=", "col_name", ".", "split", "(", "\":\"", ")", "\n", "if", "(", "len", "(", "prefix", ")", ">=", "1", ")", ":", "\n", "                        ", "if", "not", "self", ".", "is_valid_prefix", "(", "prefix", "[", "0", "]", ")", ":", "\n", "                            ", "raise", "Exception", "(", "\"Not a valid Prefix in filter {}\"", ".", "format", "(", "col_name", ")", ")", "\n", "\n", "\n", "", "", "", "", "", "for", "subquery", "in", "self", ".", "subqueries", ":", "\n", "            ", "subquery_variables_set", "=", "set", "(", "subquery", ".", "variables", ")", "\n", "my_variables_set", "=", "set", "(", "self", ".", "variables", ")", "\n", "intersection_variables", "=", "my_variables_set", ".", "intersection", "(", "subquery_variables_set", ")", "\n", "if", "len", "(", "intersection_variables", ")", "<", "0", ":", "\n", "                ", "raise", "Exception", "(", "\"No common variables between the main query and the subquery\"", ")", "\n", "\n", "", "", "all_vars", "=", "self", ".", "all_variables", "(", ")", "\n", "missing_vars", "=", "set", "(", ")", "\n", "\n", "for", "sel_col", "in", "self", ".", "select_columns", ":", "\n", "            ", "if", "sel_col", "not", "in", "all_vars", ":", "\n", "                ", "missing_vars", ".", "add", "(", "sel_col", ")", "\n", "\n", "", "", "if", "len", "(", "missing_vars", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Variables {} are not defined in the query\\'s body'", ".", "format", "(", "', '", ".", "join", "(", "missing_vars", ")", ")", ")", "\n", "\n", "# filter_clause validation", "\n", "", "for", "col_name", "in", "self", ".", "filter_clause", ":", "\n", "            ", "if", "col_name", "not", "in", "all_vars", ":", "\n", "                ", "raise", "Warning", "(", "'Cannot add filter on {}, is not part of the query variables'", ".", "format", "(", "col_name", ")", ")", "\n", "\n", "", "", "for", "col", "in", "self", ".", "order_clause", ":", "\n", "            ", "if", "col", "not", "in", "self", ".", "variables", ":", "\n", "                ", "raise", "Warning", "(", "'{} cannot be a sorting column, it should be part of variables'", ".", "format", "(", "col", ")", ")", "\n", "\n", "", "", "for", "col_name", "in", "self", ".", "having_clause", ":", "\n", "            ", "if", "not", "self", ".", "is_aggregate_col", "(", "col_name", ")", ":", "\n", "                ", "raise", "Warning", "(", "'{} is not an aggregate column, cannot be added to having clause'", ".", "format", "(", "col_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy": [[532, 534], ["copy.deepcopy"], "methods", ["None"], ["", "", "", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.__repr__": [[535, 537], ["querymodel.QueryModel.to_sparql"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to_sparql", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.__str__": [[538, 540], ["querymodel.QueryModel.to_sparql"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to_sparql", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.OptionalQueryModel.__init__": [[547, 550], ["querymodel.QueryModel.__init__"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OptionalQueryModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_optional", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.__init__": [[9, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Initializing the query dag to belong to a particular dataset. Tree nodes has identifiers and these identifiers\n        has to be globally unique\n        :param dataset: parent dataset\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "queue", "=", "[", "]", "\n", "self", ".", "nodes_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.append_node": [[19, 28], ["query_queue.QueryQueue.queue.append", "node.id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.id"], ["", "def", "append_node", "(", "self", ",", "node", ")", ":", "\n", "        ", "\"\"\"\n        Appending node to one or more parent nodes defined by their col_names.\n        :param node: node to append\n        :return:\n        \"\"\"", "\n", "self", ".", "queue", ".", "append", "(", "node", ")", "\n", "node_id", "=", "node", ".", "id", "(", ")", "\n", "self", ".", "nodes_dict", "[", "node_id", "]", "=", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.remove_node": [[29, 33], ["query_queue.QueryQueue.queue.remove", "node.id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.id"], ["", "def", "remove_node", "(", "self", ",", "node", ")", ":", "\n", "        ", "self", ".", "queue", ".", "remove", "(", "node", ")", "\n", "node_id", "=", "node", ".", "id", "(", ")", "\n", "del", "self", ".", "nodes_dict", "[", "node_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.get_node": [[34, 37], ["query_queue.QueryQueue.create_node_id", "query_queue.QueryQueue.nodes_dict.get"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], ["", "def", "get_node", "(", "self", ",", "col_name", ")", ":", "\n", "        ", "node_id", "=", "QueryQueue", ".", "create_node_id", "(", "self", ".", "dataset", ".", "name", ",", "col_name", ")", "\n", "return", "self", ".", "nodes_dict", ".", "get", "(", "node_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.get_nodes_of_type": [[38, 41], ["rdfframes.utils.helper_functions.vectorize_value", "query_queue.QueryQueue.nodes_dict.values", "type"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.vectorize_value", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type"], ["", "def", "get_nodes_of_type", "(", "self", ",", "node_types", ")", ":", "\n", "        ", "node_types", "=", "vectorize_value", "(", "node_types", ")", "\n", "return", "[", "node", "for", "node", "in", "self", ".", "nodes_dict", ".", "values", "(", ")", "if", "type", "(", "node", ")", "in", "node_types", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.print_query_queue": [[42, 52], ["print", "str", "open", "out_file.write"], "methods", ["None"], ["", "def", "print_query_queue", "(", "self", ",", "filename", "=", "None", ")", ":", "\n", "        ", "out_str", "=", "\"\"", "\n", "for", "node", "in", "self", ".", "queue", ":", "\n", "            ", "out_str", "+=", "'{}\\n'", ".", "format", "(", "str", "(", "node", ")", ")", "\n", "\n", "", "if", "filename", "is", "None", ":", "\n", "            ", "print", "(", "out_str", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "out_file", ":", "\n", "                ", "out_file", ".", "write", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.create_node_id": [[53, 58], ["None"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "create_node_id", "(", "table_name", ",", "col_name", ")", ":", "\n", "        ", "if", "col_name", "!=", "''", ":", "\n", "            ", "return", "'{}.{}'", ".", "format", "(", "table_name", ",", "col_name", ")", "\n", "", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.get_node_id": [[59, 62], ["query_queue.QueryQueue.create_node_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], ["", "@", "staticmethod", "\n", "def", "get_node_id", "(", "node", ")", ":", "\n", "        ", "return", "QueryQueue", ".", "create_node_id", "(", "node", ".", "table_name", ",", "node", ".", "new_col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.node_adds_column": [[63, 69], ["node.id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.id"], ["", "@", "staticmethod", "\n", "def", "node_adds_column", "(", "node", ")", ":", "\n", "        ", "node_id", "=", "node", ".", "id", "(", ")", "\n", "return", "not", "(", "'.having.'", "in", "node_id", "or", "\n", "'.filter.'", "in", "node_id", "or", "\n", "'.select.'", "in", "node_id", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.__init__": [[16, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "src_dataset_name", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the node with the information about the created step\n        :param src_dataset_name: the dataset name where the source column resides\n        \"\"\"", "\n", "self", ".", "src_dataset_name", "=", "src_dataset_name", "\n", "self", ".", "_id", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.create_id": [[24, 26], ["None"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.parent_ids": [[27, 29], ["None"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.id": [[30, 35], ["None"], "methods", ["None"], ["", "def", "id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: a string unique identifier of the node\n        \"\"\"", "\n", "return", "self", ".", "_id", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.node_adds_col": [[36, 38], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.operation_name": [[39, 41], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.visit_node": [[42, 44], ["None"], "methods", ["None"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.__repr__": [[45, 50], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: node to string representation\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.__str__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_id", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.__hash__": [[54, 56], ["hash", "query_queue_operator.QueryQueueOperator.id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.id"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "id", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.__eq__": [[57, 59], ["query_queue_operator.QueryQueueOperator.id", "other.id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.id", "home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.id"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "id", "(", ")", "==", "other", ".", "id", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.expandable.seed_operator.SeedOperator.__init__": [[14, 25], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "seed_operator.SeedOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "dataset_name", ",", "uris_list", ",", "seed_col_name", ")", ":", "\n", "        ", "\"\"\"\n        initializes a SeedNode with a list of uris that could be for classes, entities, predicates ... etc\n        :param dataset_name: the name of the containing dataset\n        :param uris_list: list of URIs that could be for classes, entities, predicates ... etc, but not literals\n        :param seed_col_name: the name of the seed column\n        \"\"\"", "\n", "super", "(", "SeedOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", "=", "dataset_name", ")", "\n", "self", ".", "uris", "=", "uris_list", "\n", "self", ".", "seed_col_name", "=", "seed_col_name", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.expandable.seed_operator.SeedOperator.create_id": [[26, 28], ["rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "QueryQueue", ".", "create_node_id", "(", "self", ".", "src_dataset_name", ",", "self", ".", "seed_col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.expandable.seed_operator.SeedOperator.parent_ids": [[29, 31], ["Exception"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Seed node does not have parent'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.expandable.seed_operator.SeedOperator.node_adds_col": [[32, 34], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.expandable.seed_operator.SeedOperator.visit_node": [[35, 38], ["query_model.add_variable"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_variable"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "query_model", ".", "add_variable", "(", "self", ".", "seed_col_name", ")", "\n", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.expandable.seed_operator.SeedOperator.__repr__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'seed node: {}'", ".", "format", "(", "self", ".", "src_dataset_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.groupby_seed_operator.GroupBySeedOperator.__init__": [[10, 15], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "groupby_seed_operator.GroupBySeedOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["    ", "def", "__init__", "(", "self", ",", "grouped_dataset_name", ",", "groupby_node", ")", ":", "\n", "        ", "super", "(", "GroupBySeedOperator", ",", "self", ")", ".", "__init__", "(", "grouped_dataset_name", ")", "\n", "self", ".", "src_col_name", "=", "'{}.seed'", ".", "format", "(", "grouped_dataset_name", ")", "\n", "self", ".", "groupby_node", "=", "groupby_node", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.groupby_seed_operator.GroupBySeedOperator.create_id": [[16, 18], ["None"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "'{}.seed'", ".", "format", "(", "self", ".", "src_dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.groupby_seed_operator.GroupBySeedOperator.parent_ids": [[19, 21], ["Exception"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Seed node does not have parent'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.groupby_seed_operator.GroupBySeedOperator.node_adds_col": [[22, 24], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.groupby_seed_operator.GroupBySeedOperator.visit_node": [[25, 27], ["None"], "methods", ["None"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.groupby_seed_operator.GroupBySeedOperator.__repr__": [[28, 30], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__repr__"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Grouped_seed {}, group_by node = {}\"", ".", "format", "(", "super", "(", "GroupBySeedOperator", ",", "self", ")", ".", "__repr__", "(", ")", ",", "self", ".", "groupby_node", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.grouped_aggregation_operator.GroupedAggregationOperator.__init__": [[13, 20], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "grouped_aggregation_operator.GroupedAggregationOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["    ", "def", "__init__", "(", "self", ",", "src_dataset_name", ",", "src_col_name", ",", "agg_fn", ",", "new_col_name", ",", "agg_param", ")", ":", "\n", "        ", "super", "(", "GroupedAggregationOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", ")", "\n", "self", ".", "src_col_name", "=", "src_col_name", "\n", "self", ".", "agg_function", "=", "agg_fn", "\n", "self", ".", "new_col_name", "=", "new_col_name", "\n", "self", ".", "agg_parameter", "=", "agg_param", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.grouped_aggregation_operator.GroupedAggregationOperator.create_id": [[21, 23], ["rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "QueryQueue", ".", "create_node_id", "(", "self", ".", "src_dataset_name", ",", "self", ".", "new_col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.grouped_aggregation_operator.GroupedAggregationOperator.parent_ids": [[24, 27], ["None"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "parent_id", "=", "'{}.seed'", ".", "format", "(", "self", ".", "src_dataset_name", ")", "\n", "return", "[", "parent_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.grouped_aggregation_operator.GroupedAggregationOperator.node_adds_col": [[28, 30], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.grouped_aggregation_operator.GroupedAggregationOperator.operation_name": [[31, 33], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "agg_function", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.grouped_aggregation_operator.GroupedAggregationOperator.visit_node": [[34, 38], ["query_model.add_aggregate_pair", "query_model.auto_add_select_column"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_aggregate_pair", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.auto_add_select_column"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "query_model", ".", "add_aggregate_pair", "(", "self", ".", "src_col_name", ",", "self", ".", "agg_function", ",", "self", ".", "new_col_name", ",", "self", ".", "agg_parameter", ")", "\n", "query_model", ".", "auto_add_select_column", "(", "self", ".", "new_col_name", ")", "\n", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.grouped_aggregation_operator.GroupedAggregationOperator.__repr__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Grouped_Agg {}, agg_fn: {}, new_col_name: {}\"", ".", "format", "(", "self", ".", "_id", ",", "self", ".", "agg_function", ",", "self", ".", "new_col_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.having_operator.HavingOperator.__init__": [[15, 27], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "having_operator.HavingOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "src_dataset_name", ",", "src_col_name", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the node with the information about the created filter step\n        :param src_dataset_name: the dataset name where the source column resides\n        :param src_col_name: the column name that will be filtered in the source dataset. It has to be a column that was\n            created by an aggregate function. to filter on non aggregate function result, create a filter node.\n        :param conditions: the filter condition as string or a list of strings\n        \"\"\"", "\n", "super", "(", "HavingOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", "=", "src_dataset_name", ")", "\n", "self", ".", "src_col_name", "=", "src_col_name", "\n", "self", ".", "conditions", "=", "conditions", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.having_operator.HavingOperator.create_id": [[28, 33], ["None"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: a string unique identifier of the node\n        \"\"\"", "\n", "return", "'{}.{}.having.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ",", "self", ".", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.having_operator.HavingOperator.parent_ids": [[34, 37], ["None"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "parent_id", "=", "'{}.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ")", "\n", "return", "[", "parent_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.having_operator.HavingOperator.node_adds_col": [[38, 40], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.having_operator.HavingOperator.operation_name": [[41, 43], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'Filter'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.having_operator.HavingOperator.visit_node": [[44, 53], ["ds.query_queue.get_nodes_of_type", "query_model.add_having_condition"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.get_nodes_of_type", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_having_condition"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "nodes", "=", "ds", ".", "query_queue", ".", "get_nodes_of_type", "(", "GroupedAggregationOperator", ")", "\n", "\n", "for", "node", "in", "nodes", ":", "\n", "            ", "if", "node", ".", "new_col_name", "==", "self", ".", "src_col_name", ":", "\n", "                ", "for", "condition", "in", "self", ".", "conditions", ":", "\n", "                    ", "query_model", ".", "add_having_condition", "(", "self", ".", "src_col_name", ",", "condition", ")", "\n", "\n", "", "", "", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.grouped.having_operator.HavingOperator.__repr__": [[54, 57], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Having Node: src_ds:{}, src_col: {}, conditions: {}\"", ".", "format", "(", "\n", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ",", "self", ".", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.select_operator.SelectOperator.__init__": [[11, 20], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "select_operator.SelectOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["    ", "def", "__init__", "(", "self", ",", "src_dataset_name", ",", "selected_cols", ")", ":", "\n", "        ", "\"\"\"\n        Represents a selection clause in the SPARQL query\n        :param src_dataset_name: Which dataset this node belongs to\n        :param selected_cols: the column to retrieve its data in the SPARQL query\n        \"\"\"", "\n", "super", "(", "SelectOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", ")", "\n", "self", ".", "selected_cols", "=", "selected_cols", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.select_operator.SelectOperator.create_id": [[21, 23], ["sorted"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "'{}.select.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "sorted", "(", "self", ".", "selected_cols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.select_operator.SelectOperator.parent_ids": [[24, 26], ["None"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "return", "[", "'{}.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "col", ")", "for", "col", "in", "self", ".", "selected_cols", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.select_operator.SelectOperator.node_adds_col": [[27, 29], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.select_operator.SelectOperator.operation_name": [[30, 32], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'Select'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.select_operator.SelectOperator.visit_node": [[33, 49], ["return_query_model.add_select_column"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_select_column"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "return_query_model", "=", "query_model", "\n", "\"\"\"\n        if self.requires_nested_query(ds):  # there is a select column that is not in the inner query\n            parent_ds_cols = [col for col in self.selected_cols if col not in ds.columns]\n            if len(query_model.subqueries) > 0:\n                query_model.transfer_select_triples_to_parent_query(parent_ds_cols)\n                return_query_model = query_model\n            else:\n                return_query_model = query_model.wrap_in_a_parent_query()\n                return_query_model.transfer_select_triples_to_parent_query(parent_ds_cols)\n        \"\"\"", "\n", "for", "col", "in", "self", ".", "selected_cols", ":", "\n", "            ", "return_query_model", ".", "add_select_column", "(", "col", ")", "\n", "\n", "", "return", "ds", ",", "return_query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.select_operator.SelectOperator.requires_nested_query": [[50, 60], ["ds.type"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type"], ["", "def", "requires_nested_query", "(", "self", ",", "ds", ")", ":", "\n", "        ", "if", "ds", ".", "type", "(", ")", "==", "\"ExpandableDataset\"", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "# grouped dataset:", "\n", "# check if the select columns are not all in", "\n", "# (group_by columns, aggregation columns, columns created after groupby)", "\n", "# assert ds.columns == group_by columns, aggregation columns, columns created after groupby", "\n", "            ", "for", "col", "in", "self", ".", "selected_cols", ":", "\n", "                ", "if", "col", "not", "in", "ds", ".", "columns", ":", "\n", "                    ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.select_operator.SelectOperator.__repr__": [[61, 63], ["sorted"], "methods", ["None"], ["", "", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Dataset_name {}, Selected Columns {}\"", ".", "format", "(", "self", ".", "src_dataset_name", ",", "sorted", "(", "self", ".", "selected_cols", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__init__": [[21, 38], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "join_operator.JoinOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "dataset1", ",", "dataset2", ",", "join_col_name1", ",", "join_col_name2", ",", "join_type", ",", "new_column_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the node with the information about the created join step\n        :param first_dataset_name: the dataset name where the source column resides\n        :param first_col_name: the column name that the join operation will operate on in the source dataset\n        :param second_dataset_name: the dataset name that will be joined with first_dataset_name\n        :param second_col_name: the column name that the join operation will operate on in the second dataset\n        :param join_type: one of [inner, left_orter, right_outer]\n        \"\"\"", "\n", "super", "(", "JoinOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", "=", "dataset1", ".", "name", ")", "\n", "self", ".", "dataset", "=", "dataset1", "\n", "self", ".", "second_dataset", "=", "dataset2", "\n", "self", ".", "src_col_name", "=", "join_col_name1", "\n", "self", ".", "second_col_name", "=", "join_col_name2", "\n", "self", ".", "join_type", "=", "join_type", "\n", "self", ".", "new_col_name", "=", "new_column_name", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.create_id": [[39, 42], ["None"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "'{}.{}.join.{}.{}'", ".", "format", "(", "self", ".", "dataset", ".", "name", ",", "self", ".", "src_col_name", ",", "\n", "self", ".", "second_dataset", ".", "name", ",", "self", ".", "second_col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.node_adds_col": [[43, 45], ["len"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "new_col_name", "is", "not", "None", "or", "len", "(", "self", ".", "second_dataset", ".", "columns", ")", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.operation_name": [[46, 48], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'Join'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.visit_node": [[49, 58], ["rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter", "rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.to_query_model", "join_operator.JoinOperator.__join"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.queue2querymodel.Queue2QueryModelConverter.to_query_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "# evaluate the query model of dataset2", "\n", "        ", "converter", "=", "Queue2QueryModelConverter", "(", "self", ".", "second_dataset", ")", "\n", "ds2_query_model", "=", "converter", ".", "to_query_model", "(", ")", "\n", "\n", "# join the two query models", "\n", "joined_query_model", "=", "self", ".", "__join", "(", "query_model", ",", "ds2_query_model", ")", "\n", "\n", "return", "ds", ",", "joined_query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join": [[59, 99], ["query_model1.rename_variable", "query_model2.rename_variable", "join_operator.JoinOperator.__create_outer_quer_model", "Exception", "len", "len", "join_operator.JoinOperator.__join_expandable_expandable_2_graphs", "join_operator.JoinOperator.__join_expandable_grouped_2_graphs", "join_operator.JoinOperator.__join_expandable_grouped_2_graphs", "join_operator.JoinOperator.__join_grouped_grouped_2_graphs", "join_operator.JoinOperator.__join_expandable_expandable", "join_operator.JoinOperator.__join_expandable_grouped", "join_operator.JoinOperator.__join_expandable_grouped", "join_operator.JoinOperator.__join_grouped_grouped"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rename_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.rename_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_expandable_2_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_grouped_2_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_grouped_2_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_grouped_grouped_2_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_expandable", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_grouped", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_grouped", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_grouped_grouped"], ["", "def", "__join", "(", "self", ",", "query_model1", ",", "query_model2", ")", ":", "\n", "# rename all variables of the first and second query models if necessary", "\n", "        ", "if", "self", ".", "src_col_name", "!=", "self", ".", "new_col_name", ":", "\n", "            ", "query_model1", ".", "rename_variable", "(", "self", ".", "src_col_name", ",", "self", ".", "new_col_name", ")", "\n", "", "if", "self", ".", "second_col_name", "!=", "self", ".", "new_col_name", ":", "\n", "            ", "query_model2", ".", "rename_variable", "(", "self", ".", "second_col_name", ",", "self", ".", "new_col_name", ")", "\n", "\n", "# if join between two different graphs", "\n", "", "if", "query_model1", ".", "from_clause", "!=", "query_model2", ".", "from_clause", ":", "\n", "            ", "if", "len", "(", "query_model2", ".", "from_clause", ")", ">", "1", "or", "len", "(", "query_model1", ".", "from_clause", ")", ">", "1", ":", "\n", "                ", "raise", "Exception", "(", "\"Can't join two datasets that were created from multiple graphs. GRAGH keyword \"", "\n", "\"takes only with more than one graph\"", ")", "\n", "# create an outer query model", "\n", "", "query_model", "=", "JoinOperator", ".", "__create_outer_quer_model", "(", "query_model1", ",", "query_model2", ")", "\n", "if", "not", "self", ".", "dataset", ".", "is_grouped", ":", "#if self.dataset.type() == \"ExpandableDataset\":", "\n", "                ", "if", "not", "self", ".", "second_dataset", ".", "is_grouped", ":", "# two expandable datasets", "\n", "                    ", "query_model", "=", "self", ".", "__join_expandable_expandable_2_graphs", "(", "query_model", ",", "query_model1", ",", "query_model2", ")", "\n", "", "else", ":", "# ds2 is grouped while ds1 is expandable", "\n", "                    ", "query_model", "=", "self", ".", "__join_expandable_grouped_2_graphs", "(", "query_model", ",", "query_model1", ",", "query_model2", ",", "1", ")", "\n", "#self.dataset.is_grouped = True", "\n", "", "", "else", ":", "# ds1 is grouped while ds2 is expandable", "\n", "                ", "if", "not", "self", ".", "second_dataset", ".", "is_grouped", ":", "\n", "                    ", "query_model", "=", "self", ".", "__join_expandable_grouped_2_graphs", "(", "query_model", ",", "query_model1", ",", "query_model2", ",", "2", ")", "\n", "", "else", ":", "# ds2 is grouped", "\n", "                    ", "query_model", "=", "self", ".", "__join_grouped_grouped_2_graphs", "(", "query_model", ",", "query_model1", ",", "query_model2", ")", "\n", "", "", "return", "query_model", "\n", "", "else", ":", "# join two datasets extracted from the same graph", "\n", "# make query model 1 the outer query model the prefixes", "\n", "            ", "if", "not", "self", ".", "dataset", ".", "is_grouped", ":", "\n", "                ", "if", "not", "self", ".", "second_dataset", ".", "is_grouped", ":", "# two expandable datasets", "\n", "                    ", "query_model", "=", "self", ".", "__join_expandable_expandable", "(", "query_model1", ",", "query_model2", ")", "\n", "", "else", ":", "# ds2 is grouped while ds1 is expandables", "\n", "                    ", "query_model", "=", "self", ".", "__join_expandable_grouped", "(", "query_model1", ",", "query_model2", ",", "expandable_order", "=", "1", ")", "\n", "#self.dataset.is_grouped = True", "\n", "", "", "else", ":", "# ds1 is grouped", "\n", "                ", "if", "not", "self", ".", "second_dataset", ".", "is_grouped", ":", "# ds2 is expandable while ds1 is grouped", "\n", "                    ", "query_model", "=", "self", ".", "__join_expandable_grouped", "(", "query_model1", ",", "query_model2", ",", "expandable_order", "=", "2", ")", "\n", "", "else", ":", "# ds2 is grouped", "\n", "                    ", "query_model", "=", "self", ".", "__join_grouped_grouped", "(", "query_model1", ",", "query_model2", ")", "\n", "", "", "return", "query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_expandable_2_graphs": [[100, 118], ["query_model.add_graph_clause", "query_model.add_graph_clause", "query_model.add_graph_clause", "query_model.add_optional_graph_clause", "query_model.add_graph_clause", "query_model.add_optional_graph_clause", "join_operator.JoinOperator._outer_join_two_graphs"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator._outer_join_two_graphs"], ["", "", "def", "__join_expandable_expandable_2_graphs", "(", "self", ",", "query_model", ",", "query_model1", ",", "query_model2", ")", ":", "\n", "#if len(query_model1.aggregate_clause) > 0 or len(query_model2.aggregate_clause) > 0:", "\n", "#    raise Exception(\"Can't join flat aggregated datasets\")", "\n", "        ", "if", "self", ".", "join_type", "==", "JoinType", ".", "InnerJoin", ":", "\n", "            ", "query_model", ".", "add_graph_clause", "(", "query_model1", ")", "\n", "query_model", ".", "add_graph_clause", "(", "query_model2", ")", "\n", "return", "query_model", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "LeftOuterJoin", ":", "\n", "# add the basic and optionals graph patterns of dataset2 to dataset1 in one optional block", "\n", "            ", "query_model", ".", "add_graph_clause", "(", "query_model1", ")", "\n", "query_model", ".", "add_optional_graph_clause", "(", "query_model2", ")", "\n", "return", "query_model", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "RightOuterJoin", ":", "\n", "            ", "query_model", ".", "add_graph_clause", "(", "query_model2", ")", "\n", "query_model", ".", "add_optional_graph_clause", "(", "query_model1", ")", "\n", "return", "query_model", "\n", "", "else", ":", "# outer join", "\n", "            ", "return", "JoinOperator", ".", "_outer_join_two_graphs", "(", "query_model", ",", "query_model1", ",", "query_model2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_grouped_2_graphs": [[119, 161], ["join_operator.JoinOperator._outer_join", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__join_expandable_expandable_2_graphs", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__join_expandable_expandable_2_graphs", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "query_model.add_optional_graph_clause", "query_model.add_graph_clause", "Exception"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator._outer_join", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_expandable_2_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_expandable_2_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause"], ["", "", "def", "__join_expandable_grouped_2_graphs", "(", "self", ",", "query_model", ",", "query_model1", ",", "query_model2", ",", "expandable_order", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "join_type", "==", "JoinType", ".", "OuterJoin", ":", "# outer join", "\n", "            ", "return", "JoinOperator", ".", "_outer_join", "(", "query_model", ",", "query_model1", ",", "query_model2", ")", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "InnerJoin", ":", "\n", "# add query model 2 as a subquery", "\n", "            ", "if", "expandable_order", "==", "1", ":", "\n", "                ", "old_query_model", "=", "query_model2", "\n", "first", "=", "query_model1", "\n", "", "else", ":", "\n", "                ", "assert", "(", "expandable_order", "==", "2", ")", "\n", "old_query_model", "=", "query_model1", "\n", "first", "=", "query_model2", "\n", "", "new_query_model", "=", "JoinOperator", ".", "__wrap_in_subquery", "(", "old_query_model", ")", "\n", "new_query_model", ".", "add_subquery", "(", "old_query_model", ")", "\n", "return", "self", ".", "__join_expandable_expandable_2_graphs", "(", "query_model", ",", "first", ",", "new_query_model", ")", "\n", "\n", "", "elif", "(", "(", "expandable_order", "==", "1", "and", "self", ".", "join_type", "==", "JoinType", ".", "LeftOuterJoin", ")", "or", "(", "expandable_order", "==", "2", "and", "self", ".", "join_type", "==", "JoinType", ".", "RightOuterJoin", ")", ")", ":", "\n", "            ", "if", "expandable_order", "==", "1", ":", "\n", "                ", "old_query_model", "=", "query_model2", "\n", "first", "=", "query_model1", "\n", "", "else", ":", "\n", "                ", "assert", "(", "expandable_order", "==", "2", ")", "\n", "old_query_model", "=", "query_model1", "\n", "first", "=", "query_model2", "\n", "", "new_query_model", "=", "JoinOperator", ".", "__wrap_in_subquery", "(", "old_query_model", ")", "\n", "new_query_model", ".", "add_subquery", "(", "old_query_model", ")", "\n", "return", "self", ".", "__join_expandable_expandable_2_graphs", "(", "query_model", ",", "first", ",", "new_query_model", ")", "\n", "\n", "", "elif", "(", "(", "expandable_order", "==", "2", "and", "self", ".", "join_type", "==", "JoinType", ".", "LeftOuterJoin", ")", "or", "(", "expandable_order", "==", "1", "and", "self", ".", "join_type", "==", "JoinType", ".", "RightOuterJoin", ")", ")", ":", "\n", "            ", "new_query_model1", "=", "JoinOperator", ".", "__wrap_in_subquery", "(", "query_model1", ")", "\n", "new_query_model1", ".", "add_subquery", "(", "query_model1", ")", "\n", "\n", "new_query_model2", "=", "JoinOperator", ".", "__wrap_in_subquery", "(", "query_model2", ")", "\n", "new_query_model2", ".", "add_subquery", "(", "query_model2", ")", "\n", "\n", "query_model", ".", "add_optional_graph_clause", "(", "new_query_model1", ")", "\n", "query_model", ".", "add_graph_clause", "(", "new_query_model2", ")", "\n", "return", "query_model", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Undefined case of grouped and expandable datasets joins\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_grouped_grouped_2_graphs": [[162, 186], ["copy.deepcopy", "join_operator.JoinOperator.__wrap", "join_operator.JoinOperator.__wrap", "copy.deepcopy", "join_operator.JoinOperator.__wrap", "join_operator.JoinOperator.__wrap", "query_model.add_graph_clause", "query_model.add_graph_clause", "query_model.add_graph_clause", "query_model.add_optional_graph_clause", "query_model.add_optional_graph_clause", "query_model.add_graph_clause", "join_operator.JoinOperator.__wrap", "join_operator.JoinOperator.__wrap", "query_model.add_unions", "query_model.add_unions"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions"], ["", "", "def", "__join_grouped_grouped_2_graphs", "(", "self", ",", "query_model", ",", "query_model1", ",", "query_model2", ")", ":", "\n", "        ", "query_model1_copy", "=", "copy", ".", "deepcopy", "(", "query_model1", ")", "\n", "new_query_model1", "=", "JoinOperator", ".", "__wrap", "(", "query_model1", ")", "\n", "new_query_model1", ".", "add_graph_clause", "(", "query_model1", ")", "\n", "\n", "query_model2_copy", "=", "copy", ".", "deepcopy", "(", "query_model2", ")", "\n", "new_query_model2", "=", "JoinOperator", ".", "__wrap", "(", "query_model2", ")", "\n", "new_query_model2", ".", "add_graph_clause", "(", "query_model2", ")", "\n", "# add subqueries", "\n", "if", "self", ".", "join_type", "==", "JoinType", ".", "InnerJoin", ":", "\n", "            ", "query_model", ".", "add_graph_clause", "(", "query_model1", ")", "\n", "query_model", ".", "add_graph_clause", "(", "query_model2", ")", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "LeftOuterJoin", ":", "\n", "            ", "query_model", ".", "add_graph_clause", "(", "query_model1", ")", "\n", "query_model", ".", "add_optional_graph_clause", "(", "query_model2", ")", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "RightOuterJoin", ":", "\n", "            ", "query_model", ".", "add_optional_graph_clause", "(", "query_model1", ")", "\n", "query_model", ".", "add_graph_clause", "(", "query_model2", ")", "\n", "", "else", ":", "# outer join", "\n", "            ", "new_query_model1", ".", "add_optional_graph_clause", "(", "query_model2_copy", ")", "\n", "new_query_model2", ".", "add_optional_graph_clause", "(", "query_model1_copy", ")", "\n", "query_model", ".", "add_unions", "(", "new_query_model1", ")", "\n", "query_model", ".", "add_unions", "(", "new_query_model2", ")", "\n", "", "return", "query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_expandable": [[187, 270], ["Exception", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "len", "len", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "JoinOperator.__make_parent.add_optional_triples.graph_clause.update", "JoinOperator.__make_parent.add_optional_triples.optional_graph_clause.update", "join_operator.JoinOperator.__make_parent", "JoinOperator.__make_parent.add_optional_triples.add_graph_triple", "JoinOperator.__make_parent.add_optional_triples.add_optional_block", "JoinOperator.__make_parent.add_optional_triples.add_subquery", "JoinOperator.__make_parent.add_optional_triples.add_optional_subquery", "JoinOperator.__make_parent.add_optional_triples.add_unions", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "JoinOperator.__make_parent.add_optional_triples.graph_clause.update", "JoinOperator.__make_parent.add_optional_triples.optional_graph_clause.update", "join_operator.JoinOperator.__create_outer_quer_model", "join_operator.JoinOperator._outer_join", "JoinOperator.__make_parent.add_optional_triples.add_filter_condition", "JoinOperator.__make_parent.add_optional_triples.add_graph_triple", "JoinOperator.__make_parent.add_optional_triples.add_optional_block", "JoinOperator.__make_parent.add_optional_triples.add_subquery", "JoinOperator.__make_parent.add_optional_triples.add_optional_subquery", "JoinOperator.__make_parent.add_optional_triples.add_unions", "JoinOperator.__make_parent.add_optional_triples.add_filter_condition"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_triple", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_block", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator._outer_join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_filter_condition", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_triple", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_block", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_filter_condition"], ["", "def", "__join_expandable_expandable", "(", "self", ",", "query_model1", ",", "query_model2", ")", ":", "\n", "# if in this function then 2 datasets are expandable and from the same graph", "\n", "        ", "if", "len", "(", "query_model1", ".", "aggregate_clause", ")", ">", "0", "or", "len", "(", "query_model2", ".", "aggregate_clause", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "\"Can't join flat aggregated datasets\"", ")", "\n", "", "if", "self", ".", "join_type", "==", "JoinType", ".", "InnerJoin", ":", "\n", "# add the basic graph patterns in dataset2 to dataset1", "\n", "            ", "for", "triple", "in", "query_model2", ".", "triples", ":", "\n", "                ", "query_model1", ".", "add_triple", "(", "*", "triple", ")", "\n", "", "for", "graph", ",", "triples", "in", "query_model2", ".", "graph_triples", ".", "items", "(", ")", ":", "\n", "                ", "query_model1", ".", "add_graph_triple", "(", "graph", ",", "triples", ")", "\n", "# append the optional patterns in dataset2 to optionals in dataset1", "\n", "", "for", "optional_block", "in", "query_model2", ".", "optionals", ":", "\n", "                ", "query_model1", ".", "add_optional_block", "(", "optional_block", ")", "\n", "# add the filter graph patterns of dataset2 to dataset1", "\n", "", "for", "column", ",", "conditions", "in", "query_model2", ".", "filter_clause", ".", "items", "(", ")", ":", "\n", "                ", "for", "condition", "in", "conditions", ":", "\n", "                    ", "query_model1", ".", "add_filter_condition", "(", "column", ",", "condition", ")", "\n", "", "", "for", "query", "in", "query_model2", ".", "subqueries", ":", "\n", "                ", "query_model1", ".", "add_subquery", "(", "query", ")", "\n", "", "for", "query", "in", "query_model2", ".", "optional_subqueries", ":", "\n", "                ", "query_model1", ".", "add_optional_subquery", "(", "query", ")", "\n", "", "for", "query", "in", "query_model2", ".", "unions", ":", "\n", "                ", "query_model1", ".", "add_unions", "(", "query", ")", "\n", "# TODO: if there are graphs common between the two query models, join the inner graphs", "\n", "", "query_model1", ".", "graph_clause", ".", "update", "(", "query_model2", ".", "graph_clause", ")", "\n", "query_model1", ".", "optional_graph_clause", ".", "update", "(", "query_model2", ".", "optional_graph_clause", ")", "\n", "return", "query_model1", "\n", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "LeftOuterJoin", ":", "\n", "# add the basic and optional graph patterns of dataset2 to dataset1 in one optional block", "\n", "            ", "query_model1", "=", "JoinOperator", ".", "__make_parent", "(", "query_model1", ",", "query_model2", ")", "\n", "optional_block", "=", "query_model1", ".", "add_optional_triples", "(", "query_model2", ".", "triples", ")", "\n", "for", "graph", ",", "triples", "in", "query_model2", ".", "graph_triples", ".", "items", "(", ")", ":", "\n", "                ", "optional_block", ".", "add_graph_triple", "(", "graph", ",", "triples", ")", "\n", "# append the optional patterns in dataset2 to optionals in dataset1", "\n", "", "for", "optional_block", "in", "query_model2", ".", "optionals", ":", "\n", "                ", "optional_block", ".", "add_optional_block", "(", "optional_block", ")", "\n", "# add the filter graph patterns of dataset2 to dataset1", "\n", "", "for", "column", ",", "conditions", "in", "query_model2", ".", "filter_clause", ".", "items", "(", ")", ":", "\n", "                ", "for", "condition", "in", "conditions", ":", "\n", "                    ", "optional_block", ".", "add_filter_condition", "(", "column", ",", "condition", ")", "\n", "", "", "for", "query", "in", "query_model2", ".", "subqueries", ":", "\n", "                ", "optional_block", ".", "add_subquery", "(", "query", ")", "\n", "", "for", "query", "in", "query_model2", ".", "optional_subqueries", ":", "\n", "                ", "optional_block", ".", "add_optional_subquery", "(", "query", ")", "\n", "", "for", "query", "in", "query_model2", ".", "unions", ":", "\n", "                ", "optional_block", ".", "add_unions", "(", "query", ")", "\n", "# TODO: if there are graphs common between the two query models, join the inner graphs", "\n", "", "optional_block", ".", "graph_clause", ".", "update", "(", "query_model2", ".", "graph_clause", ")", "\n", "optional_block", ".", "optional_graph_clause", ".", "update", "(", "query_model2", ".", "optional_graph_clause", ")", "\n", "# TODO: if there is a bug, uncomment these 2 lines and remove the optional_block;", "\n", "#QueryModel.clean_inner_qm(query_model2)", "\n", "#query_model1.add_optional_subquery(query_model2)", "\n", "return", "query_model1", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "RightOuterJoin", ":", "\n", "            ", "query_model2", "=", "JoinOperator", ".", "__make_parent", "(", "query_model2", ",", "query_model1", ")", "\n", "optional_block", "=", "query_model2", ".", "add_optional_triples", "(", "query_model1", ".", "triples", ")", "\n", "for", "graph", ",", "triples", "in", "query_model1", ".", "graph_triples", ".", "items", "(", ")", ":", "\n", "                ", "optional_block", ".", "add_graph_triple", "(", "graph", ",", "triples", ")", "\n", "# append the optional patterns in dataset2 to optionals in dataset1", "\n", "", "for", "optional_block", "in", "query_model1", ".", "optionals", ":", "\n", "                ", "optional_block", ".", "add_optional_block", "(", "optional_block", ")", "\n", "# add the filter graph patterns of dataset2 to dataset1", "\n", "", "for", "column", ",", "conditions", "in", "query_model1", ".", "filter_clause", ".", "items", "(", ")", ":", "\n", "                ", "for", "condition", "in", "conditions", ":", "\n", "                    ", "optional_block", ".", "add_filter_condition", "(", "column", ",", "condition", ")", "\n", "", "", "for", "query", "in", "query_model1", ".", "subqueries", ":", "\n", "                ", "optional_block", ".", "add_subquery", "(", "query", ")", "\n", "", "for", "query", "in", "query_model1", ".", "optional_subqueries", ":", "\n", "                ", "optional_block", ".", "add_optional_subquery", "(", "query", ")", "\n", "", "for", "query", "in", "query_model1", ".", "unions", ":", "\n", "                ", "optional_block", ".", "add_unions", "(", "query", ")", "\n", "# TODO: if there are graphs common between the two query models, join the inner graphs", "\n", "", "optional_block", ".", "graph_clause", ".", "update", "(", "query_model1", ".", "graph_clause", ")", "\n", "optional_block", ".", "optional_graph_clause", ".", "update", "(", "query_model1", ".", "optional_graph_clause", ")", "\n", "# TODO: if there is a bug, uncomment these 2 lines and remove the optional_block;", "\n", "#QueryModel.clean_inner_qm(query_model1)", "\n", "#query_model2.add_optional_subquery(query_model1)", "\n", "return", "query_model2", "\n", "", "else", ":", "# outer join", "\n", "# TODO: could be made simpler", "\n", "            ", "query_model", "=", "JoinOperator", ".", "__create_outer_quer_model", "(", "query_model1", ",", "query_model2", ")", "\n", "return", "JoinOperator", ".", "_outer_join", "(", "query_model", ",", "query_model1", ",", "query_model2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_expandable_grouped": [[272, 317], ["join_operator.JoinOperator.__create_outer_quer_model", "join_operator.JoinOperator._outer_join", "join_operator.JoinOperator.__make_parent", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__make_parent", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "join_operator.JoinOperator.__make_parent", "join_operator.JoinOperator.__make_parent", "Exception"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator._outer_join", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent"], ["", "", "def", "__join_expandable_grouped", "(", "self", ",", "query_model1", ",", "query_model2", ",", "expandable_order", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "join_type", "==", "JoinType", ".", "OuterJoin", ":", "# outer join", "\n", "            ", "joined_query_model", "=", "JoinOperator", ".", "__create_outer_quer_model", "(", "query_model1", ",", "query_model2", ")", "\n", "return", "JoinOperator", ".", "_outer_join", "(", "joined_query_model", ",", "query_model1", ",", "query_model2", ")", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "InnerJoin", ":", "\n", "# add query model 2 as a subquery", "\n", "                ", "if", "expandable_order", "==", "1", ":", "\n", "                    ", "query_model1", "=", "JoinOperator", ".", "__make_parent", "(", "query_model1", ",", "query_model2", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model2", ")", "\n", "query_model1", ".", "add_subquery", "(", "query_model2", ")", "\n", "return", "query_model1", "\n", "", "else", ":", "\n", "                    ", "query_model2", "=", "JoinOperator", ".", "__make_parent", "(", "query_model2", ",", "query_model1", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model1", ")", "\n", "query_model2", ".", "add_subquery", "(", "query_model1", ")", "\n", "return", "query_model2", "\n", "", "", "elif", "(", "(", "expandable_order", "==", "1", "and", "self", ".", "join_type", "==", "JoinType", ".", "LeftOuterJoin", ")", "or", "(", "expandable_order", "==", "2", "and", "self", ".", "join_type", "==", "JoinType", ".", "RightOuterJoin", ")", ")", ":", "\n", "# make query model 2 an optional subquery", "\n", "            ", "if", "expandable_order", "==", "1", ":", "\n", "                ", "query_model1", "=", "JoinOperator", ".", "__make_parent", "(", "query_model1", ",", "query_model2", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model2", ")", "\n", "query_model1", ".", "add_optional_subquery", "(", "query_model2", ")", "\n", "return", "query_model1", "\n", "", "else", ":", "\n", "                ", "query_model2", "=", "JoinOperator", ".", "__make_parent", "(", "query_model2", ",", "query_model1", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model1", ")", "\n", "query_model2", ".", "add_optional_subquery", "(", "query_model1", ")", "\n", "return", "query_model2", "\n", "", "", "elif", "(", "(", "expandable_order", "==", "2", "and", "self", ".", "join_type", "==", "JoinType", ".", "LeftOuterJoin", ")", "or", "(", "expandable_order", "==", "1", "and", "self", ".", "join_type", "==", "JoinType", ".", "RightOuterJoin", ")", ")", ":", "\n", "# create an outer query and add the main dataset as a subquery and the optional dataset as optional subquery", "\n", "            ", "if", "expandable_order", "==", "1", ":", "\n", "                ", "expandable_qm", ",", "grouped_qm", "=", "query_model1", ",", "query_model2", "\n", "", "else", ":", "\n", "                ", "expandable_qm", ",", "grouped_qm", "=", "query_model2", ",", "query_model1", "\n", "", "joined_query_model", "=", "JoinOperator", ".", "__wrap_in_subquery", "(", "expandable_qm", ")", "\n", "joined_query_model", "=", "JoinOperator", ".", "__make_parent", "(", "joined_query_model", ",", "grouped_qm", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "expandable_qm", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "grouped_qm", ")", "\n", "joined_query_model", ".", "add_optional_subquery", "(", "expandable_qm", ")", "\n", "joined_query_model", ".", "add_subquery", "(", "grouped_qm", ")", "\n", "return", "joined_query_model", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Undefined case of expandable grouped join\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__join_grouped_grouped": [[318, 337], ["join_operator.JoinOperator.__create_outer_quer_model", "copy.copy", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "join_operator.JoinOperator.__create_outer_quer_model", "join_operator.JoinOperator.__create_outer_quer_model", "join_operator.JoinOperator.__create_outer_quer_model", "join_operator.JoinOperator.__create_outer_quer_model", "join_operator.JoinOperator.__create_outer_quer_model", "join_operator.JoinOperator.__create_outer_quer_model", "copy.copy", "join_operator.JoinOperator._outer_join"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator._outer_join"], ["", "", "def", "__join_grouped_grouped", "(", "self", ",", "query_model1", ",", "query_model2", ")", ":", "\n", "        ", "joined_query_model", "=", "JoinOperator", ".", "__create_outer_quer_model", "(", "query_model1", ",", "query_model2", ")", "\n", "joined_query_model", ".", "from_clause", "=", "copy", ".", "copy", "(", "query_model1", ".", "from_clause", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model1", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model2", ")", "\n", "# add subqueries", "\n", "if", "self", ".", "join_type", "==", "JoinType", ".", "InnerJoin", ":", "\n", "            ", "joined_query_model", ".", "add_subquery", "(", "query_model1", ")", "\n", "joined_query_model", ".", "add_subquery", "(", "query_model2", ")", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "LeftOuterJoin", ":", "\n", "            ", "joined_query_model", ".", "add_subquery", "(", "query_model1", ")", "\n", "joined_query_model", ".", "add_optional_subquery", "(", "query_model2", ")", "\n", "", "elif", "self", ".", "join_type", "==", "JoinType", ".", "RightOuterJoin", ":", "\n", "            ", "joined_query_model", ".", "add_subquery", "(", "query_model2", ")", "\n", "joined_query_model", ".", "add_optional_subquery", "(", "query_model1", ")", "\n", "", "else", ":", "# outer join", "\n", "            ", "query_model1", ".", "from_clause", "=", "copy", ".", "copy", "(", "joined_query_model", ".", "from_clause", ")", "\n", "return", "JoinOperator", ".", "_outer_join", "(", "joined_query_model", ",", "query_model1", ",", "query_model2", ")", "\n", "", "return", "joined_query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__repr__": [[338, 344], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return: node to string representation\n        \"\"\"", "\n", "return", "\"Join Operator dataset1: {}  dataset2: {} col1: {} col2: {} join type: {}\"", ".", "format", "(", "\n", "self", ".", "src_datset_name", ",", "self", ".", "second_dataset", ".", "name", ",", "self", ".", "src_col_name", ",", "self", ".", "second_col_name", ",", "self", ".", "join_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator._outer_join": [[345, 369], ["copy.copy", "copy.deepcopy", "copy.deepcopy", "joined_query_model.add_unions", "joined_query_model.add_unions", "join_operator.JoinOperator.__wrap_in_subquery", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "query_model1.add_optional_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "join_operator.JoinOperator.__wrap_in_subquery", "query_model2.add_optional_subquery"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_subquery"], ["", "@", "staticmethod", "\n", "def", "_outer_join", "(", "joined_query_model", ",", "query_model1", ",", "query_model2", ")", ":", "\n", "        ", "joined_query_model", ".", "from_clause", "=", "copy", ".", "copy", "(", "query_model1", ".", "from_clause", ")", "\n", "query_model1_copy", "=", "copy", ".", "deepcopy", "(", "query_model1", ")", "\n", "query_model2_copy", "=", "copy", ".", "deepcopy", "(", "query_model2", ")", "\n", "#if len(query_model1.groupBy_columns) > 0:", "\n", "if", "True", ":", "\n", "            ", "new_query_model1", "=", "JoinOperator", ".", "__wrap_in_subquery", "(", "query_model1", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model2_copy", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model1_copy", ")", "\n", "new_query_model1", ".", "add_subquery", "(", "query_model1_copy", ")", "\n", "new_query_model1", ".", "add_optional_subquery", "(", "query_model2_copy", ")", "\n", "", "else", ":", "\n", "            ", "query_model1", ".", "add_optional_subquery", "(", "query_model2_copy", ")", "\n", "#if len(query_model2.groupBy_columns) > 0:", "\n", "", "if", "True", ":", "\n", "            ", "new_query_model2", "=", "JoinOperator", ".", "__wrap_in_subquery", "(", "query_model2", ")", "\n", "new_query_model2", ".", "add_subquery", "(", "query_model2_copy", ")", "\n", "new_query_model2", ".", "add_optional_subquery", "(", "query_model1_copy", ")", "\n", "", "else", ":", "\n", "            ", "query_model2", ".", "add_optional_subquery", "(", "query_model1_copy", ")", "\n", "", "joined_query_model", ".", "add_unions", "(", "new_query_model1", ")", "\n", "joined_query_model", ".", "add_unions", "(", "new_query_model2", ")", "\n", "return", "joined_query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__create_outer_quer_model": [[371, 402], ["rdfframes.query_builder.querymodel.QueryModel", "rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "rdfframes.query_builder.querymodel.QueryModel.set_offset", "rdfframes.query_builder.querymodel.QueryModel.set_limit", "rdfframes.query_builder.querymodel.QueryModel.add_order_columns", "rdfframes.query_builder.querymodel.QueryModel.add_order_columns", "query_model1.variables.union", "min", "max", "query_model1.select_columns.union", "len", "len", "len", "query_model1.select_columns.union", "len", "query_model1.variables.union"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_offset", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_limit", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_order_columns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_order_columns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.min", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.max", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union"], ["", "@", "staticmethod", "\n", "def", "__create_outer_quer_model", "(", "query_model1", ",", "query_model2", ")", ":", "\n", "        ", "\"\"\"\n        Joins the prefixes, offset, limit, order and select clauses and variables of the two query models.\n        Doesn't add the from clause from both variables\n        :param query_model1:\n        :param query_model2:\n        :return: an outer query model\n        \"\"\"", "\n", "query_model", "=", "QueryModel", "(", ")", "\n", "#query_model.from_clause.clear()", "\n", "query_model", ".", "add_prefixes", "(", "query_model1", ".", "prefixes", ")", "\n", "query_model", ".", "add_prefixes", "(", "query_model2", ".", "prefixes", ")", "\n", "\n", "query_model", ".", "set_offset", "(", "min", "(", "query_model1", ".", "offset", ",", "query_model2", ".", "offset", ")", ")", "\n", "query_model", ".", "set_limit", "(", "max", "(", "query_model1", ".", "limit", ",", "query_model2", ".", "limit", ")", ")", "\n", "query_model", ".", "add_order_columns", "(", "query_model1", ".", "order_clause", ")", "\n", "query_model", ".", "add_order_columns", "(", "query_model2", ".", "order_clause", ")", "\n", "\n", "# TODO: WHY do this here?", "\n", "# union the select columns", "\n", "if", "len", "(", "query_model1", ".", "select_columns", ")", ">", "0", "and", "len", "(", "query_model1", ".", "select_columns", ")", ">", "0", ":", "\n", "            ", "query_model", ".", "select_columns", "=", "query_model1", ".", "select_columns", ".", "union", "(", "query_model2", ".", "select_columns", ")", "\n", "", "elif", "len", "(", "query_model1", ".", "select_columns", ")", ">", "0", ":", "\n", "            ", "query_model", ".", "select_columns", "=", "query_model1", ".", "select_columns", ".", "union", "(", "query_model2", ".", "variables", ")", "\n", "", "elif", "len", "(", "query_model2", ".", "select_columns", ")", ">", "0", ":", "\n", "            ", "query_model", ".", "select_columns", "=", "query_model1", ".", "variables", ".", "union", "(", "query_model2", ".", "select_columns", ")", "\n", "# union the variables", "\n", "", "query_model", ".", "variables", "=", "query_model1", ".", "variables", ".", "union", "(", "query_model2", ".", "variables", ")", "\n", "\n", "return", "query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap": [[403, 420], ["rdfframes.query_builder.querymodel.QueryModel", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graph_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.clean_inner_qm"], ["", "@", "staticmethod", "\n", "def", "__wrap", "(", "query_model", ")", ":", "\n", "        ", "\"\"\"\n        create an outer query containing the variables, select columns, offset, limit, order,\n        :param query_model:\n        :return:\n        \"\"\"", "\n", "new_query_model", "=", "QueryModel", "(", ")", "\n", "new_query_model", ".", "variables", "=", "copy", ".", "copy", "(", "query_model", ".", "variables", ")", "# all prefixes are already in query_model1", "\n", "new_query_model", ".", "from_clause", "=", "copy", ".", "copy", "(", "query_model", ".", "from_clause", ")", "\n", "new_query_model", ".", "select_columns", "=", "copy", ".", "copy", "(", "query_model", ".", "select_columns", ")", "\n", "new_query_model", ".", "offset", "=", "query_model", ".", "offset", "\n", "new_query_model", ".", "limit", "=", "query_model", ".", "limit", "\n", "new_query_model", ".", "order_clause", "=", "copy", ".", "copy", "(", "query_model", ".", "order_clause", ")", "\n", "new_query_model", ".", "add_graph_clause", "(", "query_model", ")", "\n", "QueryModel", ".", "clean_inner_qm", "(", "query_model", ")", "\n", "return", "new_query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap_in_subquery": [[421, 436], ["rdfframes.query_builder.querymodel.QueryModel", "copy.copy", "copy.copy", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.copy"], ["", "@", "staticmethod", "\n", "def", "__wrap_in_subquery", "(", "query_model", ")", ":", "\n", "        ", "\"\"\"\n        create an outer query containing the variables, select columns, offset, limit, order,\n        :param query_model:\n        :return:\n        \"\"\"", "\n", "new_query_model", "=", "QueryModel", "(", ")", "\n", "new_query_model", ".", "variables", "=", "copy", ".", "copy", "(", "query_model", ".", "variables", ")", "# all prefixes are already in query_model1", "\n", "new_query_model", ".", "from_clause", "=", "copy", ".", "copy", "(", "query_model", ".", "from_clause", ")", "\n", "new_query_model", ".", "select_columns", "=", "copy", ".", "copy", "(", "query_model", ".", "select_columns", ")", "\n", "new_query_model", ".", "offset", "=", "query_model", ".", "offset", "\n", "new_query_model", ".", "limit", "=", "query_model", ".", "limit", "\n", "new_query_model", ".", "order_clause", "=", "copy", ".", "copy", "(", "query_model", ".", "order_clause", ")", "\n", "return", "new_query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator._outer_join_two_graphs": [[439, 458], ["copy.deepcopy", "copy.deepcopy", "join_operator.JoinOperator.__wrap", "join_operator.JoinOperator.__wrap", "query_model.add_unions", "query_model.add_unions", "join_operator.JoinOperator.__wrap", "query_model1.add_optional_graph_cluase", "join_operator.JoinOperator.__wrap", "query_model2.add_optional_graph_cluase"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_unions", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__wrap"], ["", "@", "staticmethod", "\n", "def", "_outer_join_two_graphs", "(", "query_model", ",", "query_model1", ",", "query_model2", ")", ":", "\n", "        ", "query_model1_copy", "=", "copy", ".", "deepcopy", "(", "query_model1", ")", "\n", "query_model2_copy", "=", "copy", ".", "deepcopy", "(", "query_model2", ")", "\n", "#if len(query_model1.groupBy_columns) > 0:", "\n", "if", "True", ":", "\n", "            ", "new_query_model1", "=", "JoinOperator", ".", "__wrap", "(", "query_model1", ")", "\n", "", "else", ":", "\n", "            ", "query_model1", ".", "add_optional_graph_cluase", "(", "query_model2_copy", ")", "\n", "#if len(query_model2.groupBy_columns) > 0:", "\n", "", "if", "True", ":", "\n", "            ", "new_query_model2", "=", "JoinOperator", ".", "__wrap", "(", "query_model2", ")", "\n", "", "else", ":", "\n", "            ", "query_model2", ".", "add_optional_graph_cluase", "(", "query_model1_copy", ")", "\n", "", "new_query_model1", ".", "add_optional_graph_clause", "(", "query_model2_copy", ")", "\n", "new_query_model2", ".", "add_optional_graph_clause", "(", "query_model1_copy", ")", "\n", "query_model", ".", "add_unions", "(", "new_query_model1", ")", "\n", "query_model", ".", "add_unions", "(", "new_query_model2", ")", "\n", "return", "query_model", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.join_operator.JoinOperator.__make_parent": [[459, 476], ["parent.add_prefixes", "parent.add_graphs", "parent.set_offset", "parent.set_limit", "parent.add_order_columns", "parent.variables.union", "min", "max", "parent.select_columns.union", "len", "len", "len", "parent.select_columns.union", "len", "parent.variables.union"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_prefixes", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_graphs", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_offset", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_limit", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_order_columns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.min", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.max", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union"], ["", "@", "staticmethod", "\n", "def", "__make_parent", "(", "parent", ",", "child", ")", ":", "\n", "# make query model 1 the outer query model the prefixes", "\n", "        ", "parent", ".", "add_prefixes", "(", "child", ".", "prefixes", ")", "\n", "parent", ".", "add_graphs", "(", "child", ".", "from_clause", ")", "\n", "parent", ".", "set_offset", "(", "min", "(", "parent", ".", "offset", ",", "child", ".", "offset", ")", ")", "\n", "parent", ".", "set_limit", "(", "max", "(", "parent", ".", "limit", ",", "child", ".", "limit", ")", ")", "\n", "parent", ".", "add_order_columns", "(", "child", ".", "order_clause", ")", "\n", "# union the select columns", "\n", "if", "len", "(", "parent", ".", "select_columns", ")", ">", "0", "and", "len", "(", "parent", ".", "select_columns", ")", ">", "0", ":", "\n", "            ", "parent", ".", "select_columns", "=", "parent", ".", "select_columns", ".", "union", "(", "child", ".", "select_columns", ")", "\n", "", "elif", "len", "(", "parent", ".", "select_columns", ")", ">", "0", ":", "\n", "            ", "parent", ".", "select_columns", "=", "parent", ".", "select_columns", ".", "union", "(", "child", ".", "variables", ")", "\n", "", "elif", "len", "(", "child", ".", "select_columns", ")", ">", "0", ":", "\n", "            ", "parent", ".", "select_columns", "=", "parent", ".", "variables", ".", "union", "(", "child", ".", "select_columns", ")", "\n", "", "parent", ".", "variables", "=", "parent", ".", "variables", ".", "union", "(", "child", ".", "variables", ")", "\n", "return", "parent", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.limit_operator.LimitOperator.__init__": [[14, 23], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "limit_operator.LimitOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "src_dataset_name", ",", "threshold", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the node with the information about the created limit step\n        :param src_dataset_name:\n        :param threshold:\n        \"\"\"", "\n", "super", "(", "LimitOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", "=", "src_dataset_name", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.limit_operator.LimitOperator.create_id": [[24, 29], ["None"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: a string unique identifier of the node\n        \"\"\"", "\n", "return", "'{}.limit.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.limit_operator.LimitOperator.node_adds_col": [[30, 32], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.limit_operator.LimitOperator.operation_name": [[33, 35], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'Limit'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.limit_operator.LimitOperator.visit_node": [[36, 39], ["query_model.set_limit"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_limit"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "query_model", ".", "set_limit", "(", "self", ".", "threshold", ")", "\n", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.limit_operator.LimitOperator.__repr__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'dataset: {}, limit: {}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "threshold", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.__init__": [[14, 26], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "filter_operator.FilterOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "src_dataset_name", ",", "src_col_name", ",", "conditions", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the node with the information about the created filter step\n        :param src_dataset_name: the dataset name where the source column resides\n        :param src_col_name: the column name that will be filtered in the source dataset. It has to be a column that was\n            not created by an aggregate function. to filter on aggregate function results, create a having node.\n        :param conditions: the filter conditions as string or a list of strings\n        \"\"\"", "\n", "super", "(", "FilterOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", "=", "src_dataset_name", ")", "\n", "self", ".", "src_col_name", "=", "src_col_name", "\n", "self", ".", "conditions", "=", "conditions", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.create_id": [[27, 33], ["None"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        initializes the node id\n        :return:\n        \"\"\"", "\n", "return", "'{}.{}.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ",", "self", ".", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.parent_ids": [[34, 37], ["None"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "parent_id", "=", "'{}.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ")", "\n", "return", "[", "parent_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.node_adds_col": [[38, 40], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.operation_name": [[41, 43], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'Filter'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.visit_node": [[44, 52], ["filter_operator.FilterOperator.already_in_outer_query", "query_model.wrap_in_a_parent_query.wrap_in_a_parent_query.add_filter_condition", "query_model.wrap_in_a_parent_query.wrap_in_a_parent_query.wrap_in_a_parent_query"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.already_in_outer_query", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_filter_condition", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.wrap_in_a_parent_query"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "\n", "# any filter operations on a grouped dataset result in a subquery", "\n", "        ", "if", "self", ".", "already_in_outer_query", "(", "ds", ",", "query_model", ")", ":", "\n", "            ", "query_model", "=", "query_model", ".", "wrap_in_a_parent_query", "(", ")", "\n", "", "query_model", ".", "add_filter_condition", "(", "self", ".", "src_col_name", ",", "self", ".", "conditions", ")", "\n", "\n", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.already_in_outer_query": [[53, 55], ["ds.type", "len"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type"], ["", "def", "already_in_outer_query", "(", "self", ",", "ds", ",", "query_model", ")", ":", "\n", "        ", "return", "ds", ".", "type", "(", ")", "==", "\"GroupedDataset\"", "and", "len", "(", "query_model", ".", "groupBy_columns", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.filter_operator.FilterOperator.__repr__": [[56, 64], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: node to string representation\n        \"\"\"", "\n", "return", "\"\"\"Filter Node:\n            src_ds:{}\n            src_col: {}\n            condition: {}\"\"\"", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ",", "self", ".", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.integer_count_node.IntegerCountOperator.__init__": [[11, 23], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "integer_count_node.IntegerCountOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["    ", "def", "__init__", "(", "self", ",", "src_dataset_name", ",", "agg_tag", "=", "None", ",", "agg_param", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Represents an aggregation function on a normal dataset like SUM, AVG ... etc\n        :param src_dataset_name: the dataset name where the source column resides\n        :param agg_tag: aggregation function alias\n        :param agg_param: aggregation parameter like distinct with count\n        \"\"\"", "\n", "super", "(", "IntegerCountOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", ")", "\n", "self", ".", "function", "=", "AggregationFunction", ".", "COUNT", "\n", "self", ".", "agg_tag", "=", "agg_tag", "if", "agg_tag", "is", "not", "None", "else", "'{}_{}'", ".", "format", "(", "src_col_name", ",", "agg_fn", ")", "\n", "self", ".", "agg_parameter", "=", "agg_param", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.integer_count_node.IntegerCountOperator.create_id": [[24, 26], ["None"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "'{}.all'", ".", "format", "(", "self", ".", "function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.integer_count_node.IntegerCountOperator.parent_ids": [[27, 29], ["Exception"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"COUNT ALL column has not parent\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.integer_count_node.IntegerCountOperator.node_adds_col": [[30, 32], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.integer_count_node.IntegerCountOperator.operation_name": [[33, 35], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "function", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.integer_count_node.IntegerCountOperator.visit_node": [[36, 40], ["query_model.add_aggregate_pair", "query_model.auto_add_select_column"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_aggregate_pair", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.auto_add_select_column"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "query_model", ".", "add_aggregate_pair", "(", "\"*\"", ",", "self", ".", "function", ",", "self", ".", "agg_tag", ",", "self", ".", "agg_parameter", ")", "\n", "query_model", ".", "auto_add_select_column", "(", "self", ".", "agg_tag", ")", "\n", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.integer_count_node.IntegerCountOperator.__repr__": [[41, 49], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'''Aggregation Node:\n            src_ds: {}\n            src_col: all\n            agg_function: {}\n            agg_parameters: {}\n            agg_tag: {}'''", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "function", ",", "self", ".", "agg_parameter", ",", "\n", "self", ".", "agg_tag", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.aggregation_operator.AggregationOperator.__init__": [[12, 27], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "aggregation_operator.AggregationOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["    ", "def", "__init__", "(", "self", ",", "src_dataset_name", ",", "src_col_name", ",", "agg_fn", ",", "agg_tag", "=", "None", ",", "agg_param", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Represents an aggregation function on a normal dataset like SUM, AVG ... etc\n        :param src_dataset_name: the dataset name where the source column resides\n        :param src_col_name: the column name that will be expanded in the source dataset\n        :param agg_tag: aggregation function alias\n        :param agg_param: aggregation parameter like distinct with count\n        :param agg_fn: the name of the aggregation function as string\n        \"\"\"", "\n", "super", "(", "AggregationOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", ")", "\n", "self", ".", "src_col_name", "=", "src_col_name", "\n", "self", ".", "function", "=", "agg_fn", "\n", "self", ".", "agg_tag", "=", "agg_tag", "if", "agg_tag", "is", "not", "None", "else", "'{}_{}'", ".", "format", "(", "src_col_name", ",", "agg_fn", ")", "\n", "self", ".", "agg_parameter", "=", "agg_param", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.aggregation_operator.AggregationOperator.create_id": [[28, 30], ["rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "'{}.{}'", ".", "format", "(", "QueryQueue", ".", "create_node_id", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ")", ",", "self", ".", "function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.aggregation_operator.AggregationOperator.parent_ids": [[31, 34], ["None"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "parent_id", "=", "'{}.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ")", "\n", "return", "[", "parent_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.aggregation_operator.AggregationOperator.node_adds_col": [[35, 37], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.aggregation_operator.AggregationOperator.operation_name": [[38, 40], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "function", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.aggregation_operator.AggregationOperator.visit_node": [[41, 48], ["query_model.wrap_in_a_parent_query.wrap_in_a_parent_query.add_aggregate_pair", "query_model.wrap_in_a_parent_query.wrap_in_a_parent_query.auto_add_select_column", "aggregation_operator.AggregationOperator.not_already_in_outer_query", "query_model.wrap_in_a_parent_query.wrap_in_a_parent_query.wrap_in_a_parent_query"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_aggregate_pair", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.auto_add_select_column", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.not_already_in_outer_query", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.wrap_in_a_parent_query"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "if", "self", ".", "src_col_name", "in", "ds", ".", "agg_columns", ":", "\n", "            ", "if", "self", ".", "not_already_in_outer_query", "(", "ds", ",", "query_model", ")", ":", "\n", "                ", "query_model", "=", "query_model", ".", "wrap_in_a_parent_query", "(", ")", "\n", "", "", "query_model", ".", "add_aggregate_pair", "(", "self", ".", "src_col_name", ",", "self", ".", "function", ",", "self", ".", "agg_tag", ",", "self", ".", "agg_parameter", ")", "\n", "query_model", ".", "auto_add_select_column", "(", "self", ".", "agg_tag", ")", "\n", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.aggregation_operator.AggregationOperator.not_already_in_outer_query": [[49, 51], ["ds.type", "len"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type"], ["", "def", "not_already_in_outer_query", "(", "self", ",", "ds", ",", "query_model", ")", ":", "\n", "        ", "return", "ds", ".", "type", "(", ")", "==", "\"GroupedDataset\"", "and", "len", "(", "query_model", ".", "groupBy_columns", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.aggregation_operator.AggregationOperator.__repr__": [[52, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'''Aggregation Node:\n            src_ds: {}\n            src_col: {}\n            agg_function: {}\n            agg_parameters: {}\n            agg_tag: {}'''", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ",", "self", ".", "function", ",", "self", ".", "agg_parameter", ",", "\n", "self", ".", "agg_tag", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.__init__": [[16, 22], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "orderedset.OrderedSet", "groupby_operator.GroupByOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "src_dataset_name", ",", "grouping_cols", ",", "new_dataset_name", ")", ":", "\n", "        ", "super", "(", "GroupByOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", ")", "\n", "self", ".", "grouping_cols", "=", "OrderedSet", "(", "grouping_cols", ")", "\n", "self", ".", "new_dataset_name", "=", "new_dataset_name", "\n", "self", ".", "grouped_dataset", "=", "None", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.create_id": [[23, 25], ["sorted"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "'{}.groupedby.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "sorted", "(", "self", ".", "grouping_cols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.parent_ids": [[26, 28], ["None"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "return", "[", "'{}.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "col", ")", "for", "col", "in", "self", ".", "grouping_cols", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.node_adds_col": [[29, 31], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.operation_name": [[32, 34], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'GroupBy'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.visit_node": [[35, 66], ["groupby_operator.GroupByOperator.requires_nested_query", "Exception", "query_model.wrap_in_a_parent_query", "query_model.wrap_in_a_parent_query.subqueries[].add_group_columns", "query_model.wrap_in_a_parent_query.add_group_columns", "query_model.wrap_in_a_parent_query.subqueries[].auto_add_select_column", "query_model.wrap_in_a_parent_query.auto_add_select_column", "query_model.wrap_in_a_parent_query.add_variable", "query_model.wrap_in_a_parent_query.add_triple", "query_model.wrap_in_a_parent_query.add_filter_condition", "query_model.wrap_in_a_parent_query.add_subquery", "len", "len"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.requires_nested_query", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.wrap_in_a_parent_query", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_group_columns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_group_columns", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.auto_add_select_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.auto_add_select_column", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_variable", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_triple", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_filter_condition", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_subquery"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "return_query_model", "=", "query_model", "\n", "\n", "if", "self", ".", "requires_nested_query", "(", "query_model", ",", "ds", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"GroupBy operation requires a nested query\"", ")", "\n", "return_query_model", "=", "query_model", ".", "wrap_in_a_parent_query", "(", ")", "\n", "# add the group-by operation", "\n", "for", "g_col", "in", "self", ".", "grouping_cols", ":", "\n", "                ", "if", "g_col", "not", "in", "return_query_model", ".", "variables", ":", "\n", "                    ", "return_query_model", ".", "add_variable", "(", "g_col", ")", "\n", "involved_triples", "=", "[", "triple", "for", "triple", "in", "query_model", ".", "triples", "\n", "if", "g_col", "==", "triple", "[", "0", "]", "or", "g_col", "==", "triple", "[", "2", "]", "]", "\n", "for", "t", "in", "involved_triples", ":", "\n", "                        ", "return_query_model", ".", "add_triple", "(", "*", "t", ")", "\n", "# add filter patterns", "\n", "", "if", "g_col", "in", "query_model", ".", "filter_clause", ":", "\n", "                        ", "return_query_model", ".", "add_filter_condition", "(", "g_col", ",", "query_model", ".", "filter_clause", "[", "g_col", "]", ")", "\n", "# add subqueries", "\n", "", "for", "subquery", "in", "query_model", ".", "subqueries", ":", "\n", "                        ", "if", "g_col", "in", "subquery", ".", "select_columns", ":", "\n", "                            ", "return_query_model", ".", "add_subquery", "(", "subquery", ")", "\n", "", "", "", "return_query_model", ".", "subqueries", "[", "len", "(", "return_query_model", ".", "subqueries", ")", "-", "1", "]", ".", "auto_add_select_column", "(", "g_col", ")", "\n", "# add the select columns and group by columns to the inner query", "\n", "", "return_query_model", ".", "subqueries", "[", "len", "(", "return_query_model", ".", "subqueries", ")", "-", "1", "]", ".", "add_group_columns", "(", "self", ".", "grouping_cols", ")", "\n", "", "else", ":", "\n", "# add select and group by columns", "\n", "            ", "for", "g_col", "in", "self", ".", "grouping_cols", ":", "\n", "                ", "return_query_model", ".", "auto_add_select_column", "(", "g_col", ")", "\n", "", "return_query_model", ".", "add_group_columns", "(", "self", ".", "grouping_cols", ")", "\n", "\n", "", "return", "ds", ",", "return_query_model", ",", "self", ".", "grouped_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.requires_nested_query": [[67, 73], ["set", "len", "query_model.select_columns.difference", "ds.query_queue.get_nodes_of_type", "set.union"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.get_nodes_of_type", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.union"], ["", "def", "requires_nested_query", "(", "self", ",", "query_model", ",", "ds", ")", ":", "\n", "# check if the query model has select columns added by the user", "\n", "# that are not in the group by columns or aggregation columns", "\n", "        ", "agg_cols", "=", "set", "(", "[", "node", ".", "new_col_name", "for", "node", "in", "ds", ".", "query_queue", ".", "get_nodes_of_type", "(", "[", "GroupedAggregationOperator", "]", ")", "]", ")", "\n", "#agg_cols = set([node.new_col_name for node in self.grouped_dataset.query_queue.get_nodes_of_type([GroupedAggregationOperator])])", "\n", "return", "len", "(", "query_model", ".", "select_columns", ".", "difference", "(", "agg_cols", ".", "union", "(", "self", ".", "grouping_cols", ")", ")", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.groupby_operator.GroupByOperator.__repr__": [[74, 77], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Group_by_node src_ds:{}, grouping_col: {}, new_dataset_name: {}\"", ".", "format", "(", "\n", "self", ".", "src_dataset_name", ",", "self", ".", "grouping_cols", ",", "self", ".", "new_dataset_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.offset_operator.OffsetOperator.__init__": [[14, 23], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "offset_operator.OffsetOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "src_dataset_name", ",", "offset", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the node with the information about the created offset step\n        :param src_dataset_name:\n        :param offset:\n        \"\"\"", "\n", "super", "(", "OffsetOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", "=", "src_dataset_name", ")", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.offset_operator.OffsetOperator.create_id": [[24, 29], ["super().id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_operators.query_queue_operator.QueryQueueOperator.id"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: a string unique identifier of the node\n        \"\"\"", "\n", "return", "'{}.offset.{}'", ".", "format", "(", "super", "(", "OffsetOperator", ",", "self", ")", ".", "id", "(", ")", ",", "self", ".", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.offset_operator.OffsetOperator.node_adds_col": [[30, 32], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.offset_operator.OffsetOperator.operation_name": [[33, 35], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'Offset'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.offset_operator.OffsetOperator.visit_node": [[36, 39], ["query_model.set_offset"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.set_offset"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "query_model", ".", "set_offset", "(", "self", ".", "offset", ")", "\n", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.offset_operator.OffsetOperator.__repr__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'dataset: {}, offset: {}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "offset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.sort_operator.SortOperator.__init__": [[16, 25], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "sort_operator.SortOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "src_dataset_name", ",", "sorting_cols", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the node with the information about the created sort step\n        :param src_dataset_name: the dataset name where the source column resides.\n        :param sorting_cols: list of tuples (column name, sort order) that needs to be sorted in the source dataset.\n        \"\"\"", "\n", "super", "(", "SortOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", "=", "src_dataset_name", ")", "\n", "self", ".", "sorting_cols", "=", "sorting_cols", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.sort_operator.SortOperator.create_id": [[26, 31], ["None"], "methods", ["None"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: a string unique identifier of the node\n        \"\"\"", "\n", "return", "'{}.sort.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "sorting_cols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.sort_operator.SortOperator.node_adds_col": [[32, 34], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.sort_operator.SortOperator.operation_name": [[35, 37], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'Sort'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.sort_operator.SortOperator.visit_node": [[38, 46], ["target_qm.add_order_columns"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_order_columns"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "target_qm", "=", "query_model", "\n", "\n", "while", "target_qm", ".", "parent_query_model", "is", "not", "None", ":", "\n", "            ", "target_qm", "=", "target_qm", ".", "parent_query_model", "\n", "\n", "", "target_qm", ".", "add_order_columns", "(", "self", ".", "sorting_cols", ")", "\n", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.sort_operator.SortOperator.__repr__": [[47, 49], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Sort Node: dataset: {} sort_columns: {}\"", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "sorting_cols", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.__init__": [[17, 35], ["rdfframes.query_buffer.query_operators.query_queue_operator.QueryQueueOperator.__init__", "expansion_operator.ExpansionOperator.create_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id"], ["def", "__init__", "(", "self", ",", "dataset_name", ",", "src_col_name", ",", "predicate", ",", "new_col_name", ",", "exp_dir", ",", "is_optional", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the node with the information about the created expansion step\n        :param dataset_name: the dataset name where the source column resides\n        :param src_col_name: the column name that will be expanded in the source dataset\n        :param predicate: this expansion step is done based on which RDF predicate on the source column\n        :param new_col_name: the name of the created column\n        :param exp_dir: whether this expansion step is outgoing or ingoing from/to the rdframe col\n        :param is_optional: flag to tell if this expansion step is optional\n        \"\"\"", "\n", "super", "(", "ExpansionOperator", ",", "self", ")", ".", "__init__", "(", "src_dataset_name", "=", "dataset_name", ")", "\n", "\n", "self", ".", "src_col_name", "=", "src_col_name", "\n", "self", ".", "predicate", "=", "predicate", "\n", "self", ".", "new_col_name", "=", "new_col_name", "\n", "self", ".", "expansion_direction", "=", "exp_dir", "\n", "self", ".", "is_optional", "=", "is_optional", "\n", "self", ".", "_id", "=", "self", ".", "create_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.create_id": [[36, 38], ["rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.query_buffer.query_queue.QueryQueue.create_node_id"], ["", "def", "create_id", "(", "self", ")", ":", "\n", "        ", "return", "QueryQueue", ".", "create_node_id", "(", "self", ".", "src_dataset_name", ",", "self", ".", "new_col_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.parent_ids": [[39, 42], ["None"], "methods", ["None"], ["", "def", "parent_ids", "(", "self", ")", ":", "\n", "        ", "parent_id", "=", "'{}.{}'", ".", "format", "(", "self", ".", "src_dataset_name", ",", "self", ".", "src_col_name", ")", "\n", "return", "[", "parent_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.node_adds_col": [[43, 45], ["None"], "methods", ["None"], ["", "def", "node_adds_col", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.operation_name": [[46, 48], ["None"], "methods", ["None"], ["", "def", "operation_name", "(", "self", ")", ":", "\n", "        ", "return", "'Expansion'", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.visit_node": [[49, 77], ["expansion_operator.ExpansionOperator.not_already_in_outer_query", "query_model.wrap_in_a_parent_query.wrap_in_a_parent_query.wrap_in_a_parent_query", "query_model.wrap_in_a_parent_query.wrap_in_a_parent_query.add_optional_triples", "query_model.wrap_in_a_parent_query.wrap_in_a_parent_query.add_triple"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.not_already_in_outer_query", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.wrap_in_a_parent_query", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_optional_triples", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.add_triple"], ["", "def", "visit_node", "(", "self", ",", "query_model", ",", "ds", ",", "parent", ")", ":", "\n", "        ", "\"\"\"\n        adds the expansion node to the query model\n        :param query_model: the current qquery model\n        :param ds: the dataset\n        :param parent:\n        :return: the dataset, the query model after adding the current node,\n        \"\"\"", "\n", "\n", "triple", "=", "None", "\n", "\n", "if", "self", ".", "expansion_direction", "==", "PredicateDirection", ".", "INCOMING", ":", "\n", "            ", "triple", "=", "(", "self", ".", "new_col_name", ",", "self", ".", "predicate", ",", "self", ".", "src_col_name", ",", "self", ".", "is_optional", ")", "\n", "", "elif", "self", ".", "expansion_direction", "==", "PredicateDirection", ".", "OUTGOING", ":", "\n", "            ", "triple", "=", "(", "self", ".", "src_col_name", ",", "self", ".", "predicate", ",", "self", ".", "new_col_name", ",", "self", ".", "is_optional", ")", "\n", "\n", "# any expand operations on a grouped dataset result in a subquery", "\n", "", "if", "self", ".", "not_already_in_outer_query", "(", "ds", ",", "query_model", ")", ":", "\n", "            ", "query_model", "=", "query_model", ".", "wrap_in_a_parent_query", "(", ")", "\n", "", "if", "triple", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "is_optional", ":", "\n", "                ", "query_model", ".", "add_optional_triples", "(", "[", "(", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", ",", "triple", "[", "2", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "query_model", ".", "add_triple", "(", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", ",", "triple", "[", "2", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "ds", ",", "query_model", ",", "None", "\n", "\n", "", "return", "ds", ",", "query_model", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.not_already_in_outer_query": [[78, 80], ["ds.type", "len"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.type"], ["", "def", "not_already_in_outer_query", "(", "self", ",", "ds", ",", "query_model", ")", ":", "\n", "        ", "return", "ds", ".", "type", "(", ")", "==", "\"GroupedDataset\"", "and", "len", "(", "query_model", ".", "groupBy_columns", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.shared.expansion_operator.ExpansionOperator.__repr__": [[81, 91], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: node to string representation\n        \"\"\"", "\n", "return", "\"Expansion_node src_ds: {}, src_col: {}, predicate used: {}, new col name: {}, direction:{}\"", ".", "format", "(", "\n", "self", ".", "src_dataset_name", ",", "\n", "self", ".", "src_col_name", ",", "\n", "self", ".", "predicate", ",", "\n", "self", ".", "new_col_name", ",", "\n", "self", ".", "expansion_direction", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.examples.movie_genre_classification.movies_with_american_actors_cache": [[7, 28], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand().cache", "graph.feature_domain_range().expand().expand().cache.filter", "graph.feature_domain_range().expand().expand().cache.group_by().count().filter", "dataset.filter.join().join", "american_actors.join().join.to_sparql", "print", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand", "graph.feature_domain_range().expand().expand().cache.group_by().count", "dataset.filter.join", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand", "graph.feature_domain_range().expand().expand().cache.group_by", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.cache", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["from", "rdfframes", ".", "client", ".", "http_client", "import", "HttpClientDataFormat", ",", "HttpClient", "\n", "\n", "# External packages import: Sklearn, NTLK", "\n", "from", "sklearn", ".", "model_selection", "import", "train_test_split", "\n", "from", "sklearn", ".", "preprocessing", "import", "StandardScaler", "\n", "from", "sklearn", ".", "ensemble", "import", "RandomForestClassifier", "\n", "import", "re", "\n", "import", "nltk", "\n", "\n", "# Graph, client, and the SPARQL endpoint URI", "\n", "\n", "graph", "=", "KnowledgeGraph", "(", "graph_uri", "=", "'http://dbpedia.org'", ",", "\n", "prefixes", "=", "{", "'dcterms'", ":", "'http://purl.org/dc/terms/'", ",", "\n", "'rdfs'", ":", "'http://www.w3.org/2000/01/rdf-schema#'", ",", "\n", "'dbpprop'", ":", "'http://dbpedia.org/property/'", ",", "\n", "'dbpr'", ":", "'http://dbpedia.org/resource/'", "}", ")", "\n", "endpoint", "=", "'http://10.161.202.101:8890/sparql/'", "\n", "output_format", "=", "HttpClientDataFormat", ".", "PANDAS_DF", "\n", "timeout", "=", "12000", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "return_format", "=", "output_format", ")", "\n", "\n", "# RDFFrames code for creating the dataframe", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.examples.movie_genre_classification.movies_with_american_actors": [[29, 54], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand", "graph.feature_domain_range().expand().expand.filter", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand", "graph.feature_domain_range().expand().expand.group_by().count().filter", "dataset1.filter.join", "american_actors.join.to_sparql", "print", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand", "graph.feature_domain_range().expand().expand.group_by().count", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "graph.feature_domain_range().expand().expand.group_by"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by"], ["\n", "dataset", "=", "graph", ".", "feature_domain_range", "(", "'dbpp:starring'", ",", "'movie'", ",", "'actor'", ")", ".", "expand", "(", "'actor'", ",", "[", "(", "'dbpp:birthPlace'", ",", "'actor_country'", ")", ",", "(", "'rdfs:label'", ",", "'actor_name'", ")", "]", ")", ".", "expand", "(", "'movie'", ",", "[", "(", "'rdfs:label'", ",", "'movie_name'", ")", ",", "(", "'dcterms:subject'", ",", "'subject'", ")", ",", "(", "'dbpp:genre'", ",", "'genre'", ",", "True", ")", "]", ")", ".", "cache", "(", ")", "\n", "\n", "american_actors", "=", "dataset", ".", "filter", "(", "{", "'actor_country'", ":", "[", "'regex(str(?actor_country), \"USA\")'", "]", "}", ")", "\n", "prolific_actors", "=", "dataset", ".", "group_by", "(", "[", "'actor'", "]", ")", ".", "count", "(", "'movie'", ",", "'movie_count'", ",", "unique", "=", "True", ")", ".", "filter", "(", "{", "'movie_count'", ":", "[", "'>= 100'", "]", "}", ")", "\n", "movies", "=", "american_actors", ".", "join", "(", "prolific_actors", ",", "join_col_name1", "=", "'actor'", ",", "join_type", "=", "JoinType", ".", "OuterJoin", ")", ".", "join", "(", "dataset", ",", "join_col_name1", "=", "'actor'", ")", ".", "select_cols", "(", "[", "\"actor_name\"", ",", "\"movie_name\"", ",", "\"actor_country\"", ",", "\"genre\"", ",", "\"subject\"", "]", ")", "\n", "sparql_query", "=", "movies", ".", "to_sparql", "(", ")", "\n", "print", "(", "sparql_query", ")", "\n", "\n", "#  execution", "\n", "\n", "df", "=", "movies", ".", "execute", "(", "client", ",", "return_format", "=", "output_format", ")", "\n", "\n", "# Preprocessing and preparation", "\n", "\n", "regex", "=", "re", ".", "compile", "(", "\n", "r'^(?:http|ftp)s?://'", "# http:// or https://", "\n", "r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'", "#domain...", "\n", "r'localhost|'", "#localhost...", "\n", "r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'", "# ...or ip", "\n", "r'(?::\\d+)?'", "# optional port", "\n", "r'(?:/?|[/?]\\S+)$'", ",", "re", ".", "IGNORECASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.examples.movie_genre_classification.movies_with_american_actors_optional": [[55, 92], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand().cache", "graph.feature_domain_range().expand().expand().cache.filter", "graph.feature_domain_range().expand().expand().cache.group_by().count().filter", "dataset.filter.join().join", "american_actors.join().join.to_sparql", "print", "rdfframes.client.http_client.HttpClient", "graph.feature_domain_range().expand().expand().cache.execute", "print", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand().expand", "graph.feature_domain_range().expand().expand().cache.group_by().count", "dataset.filter.join", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().expand", "RDFPredicate", "RDFPredicate", "RDFPredicate", "graph.feature_domain_range().expand().expand().cache.group_by", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range", "RDFPredicate", "RDFPredicate"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.cache", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.execute", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["# for cleaning the URL", "\n", "def", "clean", "(", "dataframe", ")", ":", "\n", "    ", "for", "i", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "      ", "if", "df", ".", "loc", "[", "i", "]", "[", "'genre'", "]", "!=", "None", ":", "\n", "value", "=", "df", ".", "at", "[", "i", ",", "'genre'", "]", "\n", "if", "re", ".", "match", "(", "regex", ",", "str", "(", "value", ")", ")", "is", "not", "None", ":", "\n", "          ", "df", ".", "at", "[", "i", ",", "'genre'", "]", "=", "value", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "", "return", "dataframe", "\n", "\n", "# Remove URL from the 'genre' and convert to label keys", "\n", "", "df", "=", "clean", "(", "df", ")", "\n", "\n", "# Find the most most frequent genres", "\n", "all_genres", "=", "nltk", ".", "FreqDist", "(", "df", "[", "'genre'", "]", ".", "values", ")", "\n", "all_genres_df", "=", "pd", ".", "DataFrame", "(", "{", "'genre'", ":", "list", "(", "all_genres", ".", "keys", "(", ")", ")", ",", "'Count'", ":", "list", "(", "all_genres", ".", "values", "(", ")", ")", "}", ")", "\n", "all_genres_df", ".", "sort_values", "(", "by", "=", "[", "'Count'", "]", ",", "ascending", "=", "False", ")", "\n", "\n", "# In this example, use 900 movies as a cut off for the frequent movies", "\n", "most_frequent_genres", "=", "all_genres_df", "[", "all_genres_df", "[", "'Count'", "]", ">", "900", "]", "\n", "df", "=", "df", "[", "df", "[", "'genre'", "]", ".", "isin", "(", "list", "(", "most_frequent_genres", "[", "'genre'", "]", ")", ")", "]", "\n", "\n", "# Features and factorization", "\n", "\n", "df", "=", "df", ".", "apply", "(", "lambda", "col", ":", "pd", ".", "factorize", "(", "col", ",", "sort", "=", "True", ")", "[", "0", "]", ")", "\n", "features", "=", "[", "\"movie_name\"", ",", "\"actor_name\"", ",", "\"actor_country\"", ",", "\"subject\"", ",", "\"movie_country\"", ",", "\"subject\"", "]", "\n", "df", "=", "df", ".", "dropna", "(", "subset", "=", "[", "'genre'", "]", ")", "\n", "x", "=", "df", "[", "features", "]", "\n", "y", "=", "df", "[", "'genre'", "]", "\n", "x_train", ",", "x_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "x", ",", "y", ",", "test_size", "=", "0.3", ")", "\n", "sc", "=", "StandardScaler", "(", ")", "\n", "x_train", "=", "sc", ".", "fit_transform", "(", "x_train", ")", "\n", "x_test", "=", "sc", ".", "fit_transform", "(", "x_test", ")", "\n", "\n", "# Random Forest classifier train and predict ", "\n", "\n", "model", "=", "RandomForestClassifier", "(", "n_estimators", "=", "100", ")", "\n", "model", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "y_pred", "=", "clf", ".", "predict", "(", "x_test", ")", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.examples.kge.kge": [[4, 10], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range().filter", "print", "graph.feature_domain_range().filter.to_sparql", "rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.feature_domain_range"], ["def", "kge", "(", ")", ":", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "graph_uri", "=", "'http://dblp.13s.de/'", ")", "\n", "triples", "=", "graph", ".", "feature_domain_range", "(", "\"pred\"", ",", "domain_col_name", "=", "'sub'", ",", "range_col_name", "=", "'obj'", ")", ".", "filter", "(", "{", "'obj'", ":", "[", "'isIRI(?obj)'", "]", "}", ")", "\n", "\n", "print", "(", "triples", ".", "to_sparql", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.examples.dblp_examples.explore_dblp": [[5, 45], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.client.http_client.HttpClient", "rdfframes.knowledge_graph.KnowledgeGraph.classes_and_freq().sort", "rdfframes.knowledge_graph.KnowledgeGraph.features", "rdfframes.knowledge_graph.KnowledgeGraph.features_and_freq", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "rdfframes.knowledge_graph.KnowledgeGraph.num_entities", "print", "graph.classes_and_freq().sort.execute", "print", "rdfframes.knowledge_graph.KnowledgeGraph.classes_and_freq", "graph.classes_and_freq().sort.to_sparql"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.sort", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.features", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.features_and_freq", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.num_entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.execute", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.classes_and_freq", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql"], ["def", "explore_dblp", "(", ")", ":", "\n", "    ", "graph", "=", "KnowledgeGraph", "(", "\n", "graph_name", "=", "'dblp'", ",", "\n", "graph_uri", "=", "'http://dblp.l3s.de'", ",", "\n", "prefixes", "=", "{", "\n", "\"xsd\"", ":", "\"http://www.w3.org/2001/XMLSchema#\"", ",", "\n", "\"swrc\"", ":", "\"http://swrc.ontoware.org/ontology#\"", ",", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"dc\"", ":", "\"http://purl.org/dc/elements/1.1/\"", ",", "\n", "\"dcterm\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"dblprc\"", ":", "\"http://dblp.l3s.de/d2r/resource/conferences/\"", "\n", "}", ")", "\n", "\n", "endpoint", "=", "'http://10.161.202.101:8890/sparql/'", "\n", "port", "=", "8890", "\n", "output_format", "=", "HttpClientDataFormat", ".", "PANDAS_DF", "\n", "max_rows", "=", "1000000", "\n", "timeout", "=", "12000", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "\n", "port", "=", "port", ",", "\n", "return_format", "=", "output_format", ",", "\n", "timeout", "=", "timeout", ",", "\n", "max_rows", "=", "max_rows", "\n", ")", "\n", "\n", "classes", "=", "graph", ".", "classes_and_freq", "(", ")", ".", "sort", "(", "{", "'frequency'", ":", "'DESC'", "}", ")", "\n", "#class_with_max_freq = graph.classes_and_freq().max('frequency').to_sparql()", "\n", "attributes_of_papers", "=", "graph", ".", "features", "(", "'swrc:InProceedings'", ")", "\n", "attributes_of_papers_with_freq", "=", "graph", ".", "features_and_freq", "(", "'swrc:InProceedings'", ")", "\n", "papers", "=", "graph", ".", "entities", "(", "'swrc:InProceedings'", ")", "\n", "#papers_with_features = graph.entities_and_features('swrc:InProceedings').to_sparql()", "\n", "num_papers", "=", "graph", ".", "num_entities", "(", "'swrc:InProceedings'", ")", "\n", "\n", "print", "(", "\"{}\"", ".", "format", "(", "classes", ".", "to_sparql", "(", ")", ")", ")", "\n", "df", "=", "classes", ".", "execute", "(", "client", ",", "return_format", "=", "output_format", ")", "\n", "\n", "#print(\"{}\".format(attributes_of_papers.to_sparql()))", "\n", "#df = attributes_of_papers.execute(client, return_format=output_format)", "\n", "\n", "print", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.examples.dblp_examples.important_vldb_authors": [[47, 77], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.expand().filter.expand().filter", "dataset.expand().filter.group_by().count().filter", "grouped_dataset.select_cols.select_cols", "print", "dataset.expand().filter.expand", "dataset.expand().filter.group_by().count", "grouped_dataset.select_cols.to_sparql", "dataset.expand().filter.group_by"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by"], ["", "def", "important_vldb_authors", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns the SPARQL query that finds all authors that have more than 20 vldb papers using dblp data.\n    \"\"\"", "\n", "graph", "=", "KnowledgeGraph", "(", "\n", "graph_name", "=", "'dblp'", ",", "\n", "graph_uri", "=", "'http://dblp.l3s.de'", ",", "\n", "prefixes", "=", "{", "\n", "\"xsd\"", ":", "\"http://www.w3.org/2001/XMLSchema#\"", ",", "\n", "\"swrc\"", ":", "\"http://swrc.ontoware.org/ontology#\"", ",", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"dc\"", ":", "\"http://purl.org/dc/elements/1.1/\"", ",", "\n", "\"dcterm\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"dblprc\"", ":", "\"http://dblp.l3s.de/d2r/resource/conferences/\"", "\n", "}", ")", "\n", "\n", "dataset", "=", "graph", ".", "entities", "(", "class_name", "=", "'swrc:InProceedings'", ",", "\n", "new_dataset_name", "=", "'papers'", ",", "\n", "entities_col_name", "=", "'paper'", ")", "\n", "dataset", "=", "dataset", ".", "expand", "(", "src_col_name", "=", "'paper'", ",", "predicate_list", "=", "[", "\n", "(", "'dc:title'", ",", "'title'", ")", ",", "\n", "(", "'dc:creator'", ",", "'author'", ")", ",", "\n", "(", "'swrc:series'", ",", "'conference'", ")", "]", ")", ".", "filter", "(", "conditions_dict", "=", "{", "'conference'", ":", "[", "'= <https://dblp.l3s.de/d2r/resource/conferences/vldb>'", "]", "}", ")", "\n", "grouped_dataset", "=", "dataset", ".", "group_by", "(", "[", "'author'", "]", ")", ".", "count", "(", "'paper'", ",", "'papers_count'", ")", ".", "filter", "(", "conditions_dict", "=", "{", "'papers_count'", ":", "[", "'>= {}'", ".", "format", "(", "20", ")", "]", "}", ")", "\n", "\n", "grouped_dataset", "=", "grouped_dataset", ".", "select_cols", "(", "[", "'author'", ",", "'papers_count'", "]", ")", "\n", "print", "(", "\"SPARQL Query = \\n{}\"", ".", "format", "(", "grouped_dataset", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.examples.dblp_examples.important_topics": [[79, 125], ["rdfframes.knowledge_graph.KnowledgeGraph", "rdfframes.client.http_client.HttpClient", "rdfframes.knowledge_graph.KnowledgeGraph.entities().expand", "dataset.cache.cache", "dataset.cache.filter().group_by().count().filter", "dataset.cache.join().filter().select_cols", "print", "dataset.join().filter().select_cols.execute", "print", "rdfframes.knowledge_graph.KnowledgeGraph.entities", "dataset.cache.filter().group_by().count", "dataset.cache.join().filter", "dataset.join().filter().select_cols.to_sparql", "dataset.cache.filter().group_by", "dataset.cache.join", "dataset.cache.filter"], "function", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.expand", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.cache", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.select_cols", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.execute", "home.repos.pwc.inspect_result.qcri_rdfframes.rdfframes.knowledge_graph.KnowledgeGraph.entities", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter", "home.repos.pwc.inspect_result.qcri_rdfframes.query_builder.querymodel.QueryModel.to_sparql", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.group_by", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.dataset.Dataset.join", "home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.filter"], ["", "def", "important_topics", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns the SPARQL query to identify the hot areas of research in a field of databases.\n    First, we identify a list of the top conferences of the computer science field of interest.\n    We then identify the authors who have published more than 20 papers in these conferences since the year 2000.\n    Next, we find the titles of all papers published by these authors in the specified conferences since 2005.\n    \"\"\"", "\n", "graph", "=", "KnowledgeGraph", "(", "\n", "graph_name", "=", "'dblp'", ",", "\n", "graph_uri", "=", "'http://dblp.l3s.de'", ",", "\n", "prefixes", "=", "{", "\n", "\"xsd\"", ":", "\"http://www.w3.org/2001/XMLSchema#\"", ",", "\n", "\"swrc\"", ":", "\"http://swrc.ontoware.org/ontology#\"", ",", "\n", "\"rdf\"", ":", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"dc\"", ":", "\"http://purl.org/dc/elements/1.1/\"", ",", "\n", "\"dcterm\"", ":", "\"http://purl.org/dc/terms/\"", ",", "\n", "\"dblprc\"", ":", "\"http://dblp.l3s.de/d2r/resource/conferences/\"", "\n", "}", ")", "\n", "endpoint", "=", "'http://10.161.202.101:8890/sparql/'", "\n", "port", "=", "8890", "\n", "output_format", "=", "HttpClientDataFormat", ".", "PANDAS_DF", "\n", "max_rows", "=", "1000000", "\n", "timeout", "=", "12000", "\n", "client", "=", "HttpClient", "(", "endpoint_url", "=", "endpoint", ",", "\n", "port", "=", "port", ",", "\n", "return_format", "=", "output_format", ",", "\n", "timeout", "=", "timeout", ",", "\n", "max_rows", "=", "max_rows", "\n", ")", "\n", "\n", "dataset", "=", "graph", ".", "entities", "(", "'swrc:InProceedings'", ",", "entities_col_name", "=", "'paper'", ")", ".", "expand", "(", "src_col_name", "=", "'paper'", ",", "predicate_list", "=", "[", "(", "'dc:creator'", ",", "'author'", ")", ",", "(", "'dcterm:issued'", ",", "'date'", ")", ",", "\n", "(", "'swrc:series'", ",", "'conference'", ")", ",", "(", "'dc:title'", ",", "'title'", ")", "]", ")", "\n", "dataset", "=", "dataset", ".", "cache", "(", ")", "\n", "\n", "authors", "=", "dataset", ".", "filter", "(", "{", "'date'", ":", "[", "'>= 2000'", "]", ",", "'conference'", ":", "[", "'IN (dblprc:vldb, dblprc:sigmod)'", "]", "}", ")", ".", "group_by", "(", "[", "'author'", "]", ")", ".", "count", "(", "'paper'", ",", "'papers_count'", ")", ".", "filter", "(", "{", "'papers_count'", ":", "[", "'>= 20'", "]", "}", ")", "\n", "\n", "titles", "=", "dataset", ".", "join", "(", "authors", ",", "'author'", ")", ".", "filter", "(", "{", "'date'", ":", "[", "'>= 2005'", "]", "}", ")", ".", "select_cols", "(", "[", "'title'", "]", ")", "\n", "\n", "print", "(", "\"SPARQL Query = \\n{}\"", ".", "format", "(", "titles", ".", "to_sparql", "(", ")", ")", ")", "\n", "\n", "df", "=", "titles", ".", "execute", "(", "client", ",", "return_format", "=", "output_format", ")", "\n", "print", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.client.Client.__init__": [[12, 22], ["client.Client.set_endpoint", "rdfframes.utils.helper_functions.is_uri", "Exception"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_endpoint", "home.repos.pwc.inspect_result.qcri_rdfframes.utils.helper_functions.is_uri"], ["def", "__init__", "(", "self", ",", "endpoint", ")", ":", "\n", "        ", "\"\"\"\n        Constructs an instance of the client class\n        :param endpoint: string of the SPARQL endpoint's URI hostname:port\n        :type endpoint: string\n        \"\"\"", "\n", "if", "not", "is_uri", "(", "endpoint", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"endpoint is not a valid URI\"", ")", "\n", "", "self", ".", "endpoint_url", "=", "None", "\n", "self", ".", "set_endpoint", "(", "endpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.client.Client.is_alive": [[23, 32], ["None"], "methods", ["None"], ["", "def", "is_alive", "(", "self", ",", "endpoint", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param endpoint string of the SPARQL endpoint's URI\n        :type endpoint string\n        :return if endpoint is not None return True if endpoint is alive else\n            return False. if endpoint is None return True if self.endpoint is \n            alive and False otherwise.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.client.Client.get_endpoint": [[33, 38], ["None"], "methods", ["None"], ["", "def", "get_endpoint", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return a string of the endpont URI\n        \"\"\"", "\n", "return", "self", ".", "endpoint_url", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.client.Client.set_endpoint": [[39, 45], ["None"], "methods", ["None"], ["", "def", "set_endpoint", "(", "self", ",", "endpoint", ")", ":", "\n", "        ", "\"\"\"\n        updates self.endpoint with the new endpoint\n        :param endpoint: endpoint uri\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.client.Client.execute_query": [[46, 55], ["None"], "methods", ["None"], ["", "def", "execute_query", "(", "self", ",", "query", ",", "timeout", "=", "_TIMEOUT", ",", "limit", "=", "_MAX_ROWS", ",", "return_format", "=", "None", ",", "output_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Connects to a sparql endpoint\n        :param query:\n        :param timeout:\n        :param output_file:\n        :return:\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.sparql_endpoint_client.SPARQLEndpointClient.__init__": [[19, 27], ["rdfframes.client.client.Client.__init__"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__"], ["def", "__init__", "(", "self", ",", "endpoint", ")", ":", "\n", "        ", "\"\"\"\n        Constructs an instance of the client class\n        :param endpoint: string of the SPARQL endpoint's URI hostname:port\n        :type endpoint: string\n        \"\"\"", "\n", "super", "(", "SPARQLEndpointClient", ",", "self", ")", ".", "__init__", "(", "endpoint", "=", "endpoint", ")", "\n", "self", ".", "endpoint", "=", "endpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.sparql_endpoint_client.SPARQLEndpointClient.get_endpoint": [[28, 33], ["None"], "methods", ["None"], ["", "def", "get_endpoint", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return a string of the endpont URI\n        \"\"\"", "\n", "return", "self", ".", "endpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.sparql_endpoint_client.SPARQLEndpointClient.set_endpoint": [[34, 40], ["None"], "methods", ["None"], ["", "def", "set_endpoint", "(", "self", ",", "endpoint", ")", ":", "\n", "        ", "\"\"\"\n        updates self.endpoint with the new endpoint\n        :param endpoint: endpoint uri\n        \"\"\"", "\n", "self", ".", "endpoint", "=", "endpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.sparql_endpoint_client.SPARQLEndpointClient.execute_query": [[41, 81], ["SPARQLWrapper.SPARQLWrapper.SPARQLWrapper", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.setTimeout", "io.StringIO", "io.StringIO.seek", "pandas.read_csv", "query_string.encode.encode.encode", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.setQuery", "results_string.append", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.setReturnFormat", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.query().convert().decode().split", "len", "results_string.append", "result[].count", "print", "sys.exit", "str", "str", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.query().convert().decode", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.query().convert", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.query"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.dataset.grouped_dataset.GroupedDataset.count"], ["", "def", "execute_query", "(", "self", ",", "query", ",", "timeout", "=", "_TIMEOUT", ",", "limit", "=", "_MAX_ROWS", ",", "return_format", "=", "None", ",", "output_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Connects to a sparql endpoint\n        :param query:\n        :param timeout:\n        :param output_file:\n        :return:\n        \"\"\"", "\n", "client", "=", "SPARQLWrapper", "(", "self", ".", "endpoint", ")", "\n", "client", ".", "setTimeout", "(", "_TIMEOUT", ")", "\n", "offset", "=", "0", "\n", "results_string", "=", "[", "]", "# where all the results are concatenated", "\n", "continue_streaming", "=", "True", "\n", "while", "continue_streaming", ":", "\n", "            ", "if", "limit", ">", "1", ":", "# This query doesn't return one constant value", "\n", "                ", "query_string", "=", "query", "+", "\" OFFSET {} LIMIT {}\"", ".", "format", "(", "str", "(", "offset", ")", ",", "str", "(", "limit", ")", ")", "\n", "", "else", ":", "\n", "                ", "query_string", "=", "query", "\n", "", "query_string", "=", "query_string", ".", "encode", "(", ")", "\n", "client", ".", "setQuery", "(", "query_string", ")", "\n", "try", ":", "\n", "                ", "client", ".", "setReturnFormat", "(", "CSV", ")", "\n", "result", "=", "client", ".", "query", "(", ")", ".", "convert", "(", ")", ".", "decode", "(", "\"UTF-8\"", ")", ".", "split", "(", "\"\\n\"", ",", "1", ")", "\n", "if", "len", "(", "results_string", ")", "==", "0", ":", "# Add the returned table header", "\n", "                    ", "header", "=", "result", "[", "0", "]", "\n", "results_string", ".", "append", "(", "header", "+", "\"\\n\"", ")", "\n", "# if the number of rows is less then the maximum number of rows", "\n", "", "if", "result", "[", "1", "]", ".", "count", "(", "'\\n'", ")", "<", "_MAX_ROWS", ":", "\n", "                    ", "continue_streaming", "=", "False", "\n", "", "offset", "=", "offset", "+", "limit", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "results_string", ".", "append", "(", "result", "[", "1", "]", ")", "\n", "# convert it to a dataframe", "\n", "", "results_string", "=", "''", ".", "join", "(", "results_string", ")", "\n", "f", "=", "io", ".", "StringIO", "(", "results_string", ")", "\n", "f", ".", "seek", "(", "0", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "f", ",", "sep", "=", "','", ")", "# to get the values and the header", "\n", "return", "df", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClientDataFormat.return_format": [[25, 38], ["http_client.HttpClientDataFormat.return_format"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClientDataFormat.return_format"], ["@", "staticmethod", "\n", "def", "return_format", "(", "comm_format", ")", ":", "\n", "        ", "if", "comm_format", "==", "HttpClientDataFormat", ".", "CSV", "or", "comm_format", "==", "HttpClientDataFormat", ".", "PANDAS_DF", ":", "\n", "            ", "return", "\"text/csv\"", "\n", "", "elif", "comm_format", "==", "HttpClientDataFormat", ".", "JSON", ":", "\n", "            ", "return", "\"application/json\"", "\n", "", "elif", "comm_format", "==", "HttpClientDataFormat", ".", "HTML", ":", "\n", "            ", "return", "\"text/html\"", "\n", "", "elif", "comm_format", "==", "HttpClientDataFormat", ".", "TURTLE", ":", "\n", "            ", "return", "\"application/turtle\"", "\n", "", "else", ":", "\n", "            ", "return", "HttpClientDataFormat", ".", "return_format", "(", "HttpClientDataFormat", ".", "DEFAULT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__": [[44, 75], ["rdfframes.client.client.Client.__init__", "http_client.HttpClient.set_port", "http_client.HttpClient.__build_full_url", "http_client.HttpClient.set_return_format", "http_client.HttpClient.set_timeout", "http_client.HttpClient.set_graph_uri", "http_client.HttpClient.set_max_rows"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__init__", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_port", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__build_full_url", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_return_format", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_timeout", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_graph_uri", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_max_rows"], ["def", "__init__", "(", "self", ",", "\n", "endpoint_url", ",", "\n", "port", "=", "8890", ",", "\n", "return_format", "=", "HttpClientDataFormat", ".", "DEFAULT", ",", "\n", "timeout", "=", "120", ",", "\n", "default_graph_uri", "=", "''", ",", "\n", "max_rows", "=", "_MAX_ROWS", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a client object with the URI of the RDF engine SPARQL endpoint and the port number\n        :param endpoint_url: the url of the RDF engine or SPARQL endpoint\n        :param port: the endpoint's port number\n        :param timeout: the http request timeout in seconds\n        :param default_graph_uri: the absolute url of the default graph\n        :param max_rows: the maximum number of rows retrieved in a single http request\n        :param return_format: the query results format\n        \"\"\"", "\n", "super", "(", "HttpClient", ",", "self", ")", ".", "__init__", "(", "endpoint_url", ")", "\n", "\n", "self", ".", "port", "=", "None", "\n", "self", ".", "full_endpoint_url", "=", "None", "\n", "self", ".", "return_format", "=", "None", "\n", "self", ".", "timeout", "=", "None", "\n", "self", ".", "default_graph_uri", "=", "None", "\n", "self", ".", "max_rows", "=", "None", "\n", "\n", "self", ".", "set_port", "(", "port", ")", "\n", "self", ".", "__build_full_url", "(", ")", "\n", "self", ".", "set_return_format", "(", "return_format", ")", "\n", "self", ".", "set_timeout", "(", "timeout", ")", "\n", "self", ".", "set_graph_uri", "(", "default_graph_uri", ")", "\n", "self", ".", "set_max_rows", "(", "max_rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_endpoint": [[76, 84], ["http_client.HttpClient.__endpoint_liveness_check"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__endpoint_liveness_check"], ["", "def", "set_endpoint", "(", "self", ",", "endpoint_url", ")", ":", "\n", "        ", "\"\"\"\n        setter for the SPARQL endpoint url\n        :param endpoint_url: url of the sparql endpoint\n        :return: None\n        \"\"\"", "\n", "self", ".", "endpoint_url", "=", "endpoint_url", "\n", "self", ".", "__endpoint_liveness_check", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_port": [[85, 93], ["http_client.HttpClient.__endpoint_liveness_check"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__endpoint_liveness_check"], ["", "def", "set_port", "(", "self", ",", "port", ")", ":", "\n", "        ", "\"\"\"\n        setter for the SPARQL endpoint port number\n        :param port: port number of the sparql endpoint\n        :return: None\n        \"\"\"", "\n", "self", ".", "port", "=", "port", "\n", "self", ".", "__endpoint_liveness_check", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_return_format": [[94, 101], ["None"], "methods", ["None"], ["", "def", "set_return_format", "(", "self", ",", "return_format", "=", "HttpClientDataFormat", ".", "CSV", ")", ":", "\n", "        ", "\"\"\"\n        setter for the format of the returned data. Options are CSV, JSON, HTML, TURTLE or pandas dataframe (PANDAS_DF)\n        :param return_format: return data in format of HttpClientDataFormat\n        :return: None\n        \"\"\"", "\n", "self", ".", "return_format", "=", "return_format", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_timeout": [[102, 109], ["None"], "methods", ["None"], ["", "def", "set_timeout", "(", "self", ",", "timeout", "=", "120", ")", ":", "\n", "        ", "\"\"\"\n        setter for the request timeout. Default 120 seconds\n        :param timeout: requests timeout period\n        :return: None\n        \"\"\"", "\n", "self", ".", "timeout", "=", "timeout", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_graph_uri": [[110, 117], ["None"], "methods", ["None"], ["", "def", "set_graph_uri", "(", "self", ",", "graph_uri", ")", ":", "\n", "        ", "\"\"\"\n        setter for the absolute URL of default graph\n        :param graph_uri: uri of the default graph\n        :return: None\n        \"\"\"", "\n", "self", ".", "default_graph_uri", "=", "graph_uri", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_max_rows": [[118, 126], ["None"], "methods", ["None"], ["", "def", "set_max_rows", "(", "self", ",", "max_rows", ")", ":", "\n", "        ", "\"\"\"\n        setter for the maximum number of rows to return in a single request\n        :param max_rows: the maximum number of returned rows in each http request\n        :return: None\n        \"\"\"", "\n", "if", "max_rows", ">=", "1", ":", "\n", "            ", "self", ".", "max_rows", "=", "max_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.execute_query": [[127, 154], ["http_client.HttpClient._execute_query", "io.StringIO", "io.StringIO.seek", "pandas.read_csv", "Exception", "len", "final_result.append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient._execute_query"], ["", "", "def", "execute_query", "(", "self", ",", "query", ",", "timeout", "=", "_TIMEOUT", ",", "limit", "=", "_MAX_ROWS", ",", "return_format", "=", "None", ",", "output_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        submits the provided SPARQL query to the registered endpoint to be executed.\n        The result is retrieved in the requested format (return_format)\n        :param query: the SPARQL query as string\n        :param return_format: the format of the retrieved data. Options from HttpClientDataFormat\n        :param export_file: if provided, the data will be saved to the pass file path\n        :return: the result of the query in the requested format\n        \"\"\"", "\n", "self", ".", "return_format", "=", "return_format", "if", "return_format", "is", "not", "None", "else", "self", ".", "return_format", "\n", "final_result", "=", "[", "]", "\n", "for", "res", "in", "self", ".", "_execute_query", "(", "query", ",", "return_format", "=", "return_format", ",", "export_file", "=", "output_file", ")", ":", "\n", "            ", "if", "return_format", "==", "HttpClientDataFormat", ".", "PANDAS_DF", ":", "\n", "                ", "if", "len", "(", "final_result", ")", "<=", "0", ":", "\n", "                    ", "final_result", "=", "[", "res", "]", "\n", "", "else", ":", "\n", "                    ", "final_result", ".", "append", "(", "res", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"return format {} is unimplemented\"", ".", "format", "(", "return_format", ")", ")", "\n", "", "", "if", "return_format", "==", "HttpClientDataFormat", ".", "PANDAS_DF", ":", "\n", "            ", "string", "=", "''", ".", "join", "(", "final_result", ")", "\n", "stringio", "=", "StringIO", "(", "string", ")", "\n", "stringio", ".", "seek", "(", "0", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "stringio", ",", "sep", "=", "','", ")", "\n", "return", "df", "\n", "", "else", ":", "\n", "            ", "return", "final_result", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient._execute_query": [[155, 229], ["http_client.HttpClient.__find_clause", "http_client.HttpClient.__find_clause", "http_client.HttpClient.set_max_rows", "http_client.HttpClient.__remove_clause", "http_client.HttpClient.__remove_clause", "http_client.HttpClient.__append_clause", "http_client.HttpClient.__append_clause", "requests.post", "http_client.HttpClient.__find_clause", "int", "int", "offsets.append", "offsets.append", "len", "http_client.HttpClientDataFormat.return_format", "http_client.HttpClient.__handle_http_response", "print", "offsets.append"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__find_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__find_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.set_max_rows", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__remove_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__remove_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__append_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__append_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__find_clause", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClientDataFormat.return_format", "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__handle_http_response"], ["", "", "def", "_execute_query", "(", "self", ",", "query", ",", "return_format", "=", "None", ",", "export_file", "=", "None", ")", ":", "\n", "        ", "self", ".", "return_format", "=", "return_format", "if", "return_format", "is", "not", "None", "else", "self", ".", "return_format", "\n", "if", "HttpClient", ".", "__find_clause", "(", "query", ",", "'ORDER BY'", ")", "[", "0", "]", ">=", "0", ":", "\n", "            ", "self", ".", "set_max_rows", "(", "1000", ")", "\n", "\n", "\n", "", "limit_start", ",", "limit_end", "=", "HttpClient", ".", "__find_clause", "(", "query", ",", "'LIMIT'", ")", "\n", "\n", "query_limit", "=", "-", "1", "\n", "\n", "if", "limit_start", "!=", "-", "1", ":", "\n", "            ", "try", ":", "\n", "                ", "query_limit", "=", "int", "(", "query", "[", "limit_start", ":", "limit_end", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "offset_start", ",", "offset_end", "=", "HttpClient", ".", "__find_clause", "(", "query", ",", "'OFFSET'", ")", "\n", "\n", "query_offset", "=", "0", "\n", "\n", "if", "offset_start", "!=", "-", "1", ":", "\n", "            ", "try", ":", "\n", "                ", "query_offset", "=", "int", "(", "query", "[", "offset_start", ":", "offset_end", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "offsets", "=", "None", "\n", "\n", "if", "limit_start", "!=", "-", "1", ":", "\n", "            ", "offsets", "=", "[", "]", "\n", "\n", "if", "offset_start", "!=", "-", "1", ":", "\n", "                ", "offsets", ".", "append", "(", "query_offset", ")", "\n", "", "else", ":", "\n", "                ", "offsets", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "query_limit", ">", "self", ".", "max_rows", ":", "\n", "                ", "query_limit", "-=", "self", ".", "max_rows", "\n", "current_offset", "=", "offsets", "[", "0", "]", "\n", "\n", "while", "query_limit", ">", "0", ":", "\n", "                    ", "current_offset", "+=", "self", ".", "max_rows", "\n", "query_limit", "-=", "self", ".", "max_rows", "\n", "offsets", ".", "append", "(", "current_offset", ")", "\n", "\n", "", "", "", "offset_index", "=", "0", "\n", "current_offset", "=", "-", "1", "*", "self", ".", "max_rows", "\n", "\n", "first_query_flag", "=", "True", "\n", "while", "offsets", "is", "None", "or", "offset_index", "<", "len", "(", "offsets", ")", ":", "\n", "            ", "modified_query", "=", "query", "\n", "current_offset", "=", "offsets", "[", "offset_index", "]", "if", "offsets", "is", "not", "None", "else", "current_offset", "+", "self", ".", "max_rows", "\n", "offset_index", "+=", "1", "\n", "modified_query", "=", "HttpClient", ".", "__remove_clause", "(", "modified_query", ",", "'LIMIT'", ")", "\n", "modified_query", "=", "HttpClient", ".", "__remove_clause", "(", "modified_query", ",", "'OFFSET'", ")", "\n", "modified_query", "=", "HttpClient", ".", "__append_clause", "(", "modified_query", ",", "'OFFSET'", ",", "current_offset", ")", "\n", "modified_query", "=", "HttpClient", ".", "__append_clause", "(", "modified_query", ",", "'LIMIT'", ",", "_MAX_ROWS", ")", "\n", "params", "=", "{", "\n", "'query'", ":", "modified_query", ",", "\n", "'format'", ":", "HttpClientDataFormat", ".", "return_format", "(", "self", ".", "return_format", ")", ",", "\n", "'default-graph-uri'", ":", "self", ".", "default_graph_uri", ",", "\n", "'maxrows'", ":", "self", ".", "max_rows", "\n", "}", "\n", "response", "=", "requests", ".", "post", "(", "self", ".", "full_endpoint_url", ",", "data", "=", "params", ",", "timeout", "=", "self", ".", "timeout", ")", "\n", "if", "response", ".", "status_code", "==", "200", ":", "\n", "                ", "data", "=", "self", ".", "__handle_http_response", "(", "response", ",", "export_file", ",", "first_query_flag", "=", "first_query_flag", ")", "\n", "if", "data", "is", "not", "None", ":", "\n", "                    ", "yield", "data", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"HTTP Response is:\\n{}\"", ".", "format", "(", "response", ")", ")", "\n", "break", "\n", "", "first_query_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__handle_http_response": [[230, 260], ["data.split", "len", "os.path.exists", "open", "exp_file.write"], "methods", ["None"], ["", "", "def", "__handle_http_response", "(", "self", ",", "response", ",", "export_file", ",", "first_query_flag", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Given a valid http response, this methods wraps the response text up in the requested format\n        and returns it to the caller\n        :param response: http response object\n        :param export_file: the file path if the results should be exported to a file\n        :return: file name if export to file or the data in the requested format\n        \"\"\"", "\n", "data", "=", "response", ".", "text", "\n", "#first_nl = data.find('\\n')", "\n", "# header = data[:first_nl]", "\n", "body", "=", "data", ".", "split", "(", "\"\\n\"", ",", "1", ")", "[", "1", "]", "\n", "\n", "if", "len", "(", "body", ")", ">", "0", ":", "\n", "            ", "if", "export_file", "is", "not", "None", ":", "\n", "# In order to skip the header line before appending to file", "\n", "                ", "if", "os", ".", "path", ".", "exists", "(", "export_file", ")", ":", "\n", "                    ", "data", "=", "body", "\n", "", "with", "open", "(", "export_file", ",", "'a+'", ")", "as", "exp_file", ":", "\n", "                    ", "exp_file", ".", "write", "(", "data", ")", "\n", "return", "export_file", "\n", "", "", "elif", "self", ".", "return_format", "==", "HttpClientDataFormat", ".", "PANDAS_DF", ":", "\n", "#stringio = StringIO(response.text)", "\n", "#return pd.read_csv(stringio, sep=',')", "\n", "                ", "if", "first_query_flag", ":", "\n", "                    ", "return", "data", "\n", "", "else", ":", "\n", "                    ", "return", "body", "\n", "", "", "else", ":", "\n", "                ", "return", "response", ".", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__build_full_url": [[261, 273], ["urllib.parse.urlparse", "urllib.parse.urlparse.netloc.split", "len"], "methods", ["None"], ["", "", "", "def", "__build_full_url", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        if the port number is missing from the url, this method adds it and prepare the full url in one string\n        :return: None\n        \"\"\"", "\n", "if", "self", ".", "endpoint_url", ":", "\n", "            ", "url_comps", "=", "urlparse", "(", "self", ".", "endpoint_url", ")", "\n", "netlocs", "=", "url_comps", ".", "netloc", ".", "split", "(", "':'", ")", "\n", "netloc", "=", "netlocs", "[", "0", "]", "\n", "port", "=", "netlocs", "[", "1", "]", "if", "len", "(", "netlocs", ")", ">", "1", "else", "self", ".", "port", "\n", "\n", "self", ".", "full_endpoint_url", "=", "'{}://{}:{}{}'", ".", "format", "(", "url_comps", ".", "scheme", ",", "netloc", ",", "port", ",", "url_comps", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__find_clause": [[274, 292], ["query.lower().replace.lower().replace.lower().replace", "query.lower().replace.lower().replace.find", "clause.strip().lower", "query.lower().replace.lower().replace.lower", "len", "query[].isdigit", "clause.strip", "len", "len"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "__find_clause", "(", "query", ",", "clause", ")", ":", "\n", "        ", "\"\"\"\n        checks if a sparql query already has some clause. Useful when trying to batch retrieve the results\n        :param query: the sparql query string\n        :return: -1 if the clause does not exist or the range of the number after the clause\n        \"\"\"", "\n", "clause", "=", "' {} '", ".", "format", "(", "clause", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", "\n", "query", "=", "query", ".", "lower", "(", ")", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "pos", "=", "query", ".", "find", "(", "clause", ")", "\n", "\n", "if", "pos", "==", "-", "1", ":", "\n", "            ", "return", "-", "1", ",", "-", "1", "\n", "", "else", ":", "\n", "            ", "i", "=", "pos", "+", "len", "(", "clause", ")", "\n", "while", "i", "<", "len", "(", "query", ")", "and", "query", "[", "i", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "i", "+=", "1", "\n", "", "return", "pos", "+", "len", "(", "clause", ")", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__remove_clause": [[293, 312], ["query.replace.replace.strip", "http_client.HttpClient.__find_clause", "clause.strip", "len", "query.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__find_clause"], ["", "", "@", "staticmethod", "\n", "def", "__remove_clause", "(", "query", ",", "clause", ")", ":", "\n", "        ", "\"\"\"\n        if a clause exists in the query, it as well as the associated values are removed\n        :param query: the sparql query string\n        :param clause: the clause to process such as LIMIT and OFFSET\n        :return: the sparql query after removing the clause\n        \"\"\"", "\n", "clause", "=", "' {} '", ".", "format", "(", "clause", ".", "strip", "(", ")", ")", "\n", "query", "=", "query", ".", "strip", "(", "' \\n;'", ")", "\n", "#clause = ' {} '.format(clause.strip().lower())", "\n", "#query = query.lower().strip(' \\n;')", "\n", "start", ",", "end", "=", "HttpClient", ".", "__find_clause", "(", "query", ",", "clause", ")", "\n", "if", "start", "!=", "-", "1", ":", "\n", "            ", "start", "-=", "len", "(", "clause", ")", "\n", "replace", "=", "query", "[", "start", ":", "end", "]", "\n", "query", "=", "query", ".", "replace", "(", "replace", ",", "''", ")", "\n", "\n", "", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__append_clause": [[313, 317], ["query.strip.strip.strip", "rdfframes.utils.constants._MAX_ROWS"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "__append_clause", "(", "query", ",", "clause", ",", "value", ")", ":", "\n", "        ", "query", "=", "query", ".", "strip", "(", "' ;\\n'", ")", "\n", "return", "'{} {} {}'", ".", "format", "(", "query", ",", "clause", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qcri_rdfframes.client.http_client.HttpClient.__endpoint_liveness_check": [[318, 339], ["urllib.parse.urlparse", "urllib.parse.urlparse.netloc.split", "int", "socket.socket", "socket.socket.connect_ex", "print", "len"], "methods", ["None"], ["", "def", "__endpoint_liveness_check", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        checks if the endpoint is alive\n        :return: True if alive, False if not\n        \"\"\"", "\n", "url_comps", "=", "urlparse", "(", "self", ".", "endpoint_url", ")", "\n", "netloc_comps", "=", "url_comps", ".", "netloc", ".", "split", "(", "':'", ")", "\n", "\n", "url_port", "=", "int", "(", "netloc_comps", "[", "1", "]", ")", "if", "len", "(", "netloc_comps", ")", "==", "2", "else", "None", "\n", "port", "=", "url_port", "if", "url_port", "else", "self", ".", "port", "\n", "url", "=", "netloc_comps", "[", "0", "]", "\n", "\n", "is_valid", "=", "False", "\n", "\n", "if", "self", ".", "endpoint_url", "and", "port", ":", "\n", "            ", "sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "result", "=", "sock", ".", "connect_ex", "(", "(", "url", ",", "port", ")", ")", "\n", "is_valid", "=", "(", "result", "==", "0", ")", "\n", "\n", "", "if", "not", "is_valid", ":", "\n", "            ", "print", "(", "'missing endpoint data: endpoint {}, port {}'", ".", "format", "(", "self", ".", "endpoint_url", ",", "port", ")", ")", "\n", "\n"]]}