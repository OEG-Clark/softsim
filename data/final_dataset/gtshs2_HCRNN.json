{"home.repos.pwc.inspect_result.gtshs2_HCRNN.None.config.str2bool": [[6, 8], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ",", "'1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.config.add_argument_group": [[9, 13], ["parser.add_argument_group", "arg_lists.append"], "function", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.config.add_argument_group"], ["", "def", "add_argument_group", "(", "name", ")", ":", "\n", "    ", "arg", "=", "parser", ".", "add_argument_group", "(", "name", ")", "\n", "arg_lists", ".", "append", "(", "arg", ")", "\n", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.config.get_config": [[64, 67], ["parser.parse_known_args"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "    ", "config", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "return", "config", ",", "unparsed", "\n", "", ""]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.main.main": [[15, 94], ["time.time", "config.get_config", "tensorflow.set_random_seed", "numpy.random.seed", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.getLogger.addHandler", "vars().keys", "logging.StreamHandler", "logging.getLogger.addHandler", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "tensorflow.random_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "utils.preprocessing_data", "print", "tensorflow.ConfigProto", "os.makedirs", "logging.getLogger.info", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.Session", "models.HCRNN.HCRNN.run", "str", "os.path.exists", "vars", "models.NARM.NARM", "models.GRU4REC.GRU4REC", "models.STAMP.STAMP", "str", "vars", "models.HCRNN.HCRNN", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.config.get_config", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.preprocessing_data", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run"], ["def", "main", "(", ")", ":", "\n", "    ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "configs", ",", "_", "=", "get_config", "(", ")", "\n", "tf", ".", "set_random_seed", "(", "configs", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "configs", ".", "random_seed", ")", "\n", "\n", "PATH_LOG", "=", "'logs/'", "+", "configs", ".", "model_name", "+", "\"_\"", "+", "configs", ".", "data", "+", "\"_\"", "+", "str", "(", "configs", ".", "rnn_hidden_size", ")", "+", "\"_\"", "+", "str", "(", "\n", "configs", ".", "random_seed", ")", "+", "\"_\"", "+", "str", "(", "configs", ".", "two_phase_learning", ")", "+", "\"_\"", "+", "str", "(", "configs", ".", "num_topics", ")", "+", "'_'", "+", "str", "(", "configs", ".", "reg_lambda", ")", "+", "'_'", "+", "str", "(", "configs", ".", "att_type", ")", "+", "\"_\"", "+", "str", "(", "configs", ".", "is_prior_reg", ")", "+", "'_'", "+", "str", "(", "configs", ".", "loss_type", ")", "+", "'_'", "+", "str", "(", "current_time", ")", "+", "'.txt'", "\n", "os", ".", "makedirs", "(", "\"logs/\"", ")", "if", "not", "os", ".", "path", ".", "exists", "(", "\"logs/\"", ")", "else", "1", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'Result_log'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "PATH_LOG", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "for", "param", "in", "vars", "(", "configs", ")", ".", "keys", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'--{0} {1}'", ".", "format", "(", "param", ",", "vars", "(", "configs", ")", "[", "param", "]", ")", ")", "\n", "", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "\n", "k", "=", "[", "3", ",", "5", ",", "10", ",", "20", ",", "50", ",", "100", "]", "\n", "print", "(", "\"=\"", "*", "20", ")", "\n", "print", "(", "'current_time :  {0}'", ".", "format", "(", "current_time", ")", ")", "\n", "print", "(", "'dataset :  {0}'", ".", "format", "(", "configs", ".", "data", ")", ")", "\n", "print", "(", "'model_name :  {0}'", ".", "format", "(", "configs", ".", "model_name", ")", ")", "\n", "print", "(", "'rnn_hidden_size :  {0}'", ".", "format", "(", "configs", ".", "rnn_hidden_size", ")", ")", "\n", "print", "(", "'embedding_size :  {0}'", ".", "format", "(", "configs", ".", "embedding_size", ")", ")", "\n", "\n", "print", "(", "'n_epochs :  {0}'", ".", "format", "(", "configs", ".", "n_epochs", ")", ")", "\n", "print", "(", "'lr :  {0}'", ".", "format", "(", "configs", ".", "lr", ")", ")", "\n", "print", "(", "'lr_decay :  {0}'", ".", "format", "(", "configs", ".", "lr_decay", ")", ")", "\n", "print", "(", "'clip_grad :  {0}'", ".", "format", "(", "configs", ".", "clip_grad", ")", ")", "\n", "print", "(", "'clip_grad_threshold :  {0}'", ".", "format", "(", "configs", ".", "clip_grad_threshold", ")", ")", "\n", "print", "(", "'drop_prob_input :  {0}'", ".", "format", "(", "configs", ".", "drop_prob_input", ")", ")", "\n", "print", "(", "'drop_prob_recurrent :  {0}'", ".", "format", "(", "configs", ".", "drop_prob_recurrent", ")", ")", "\n", "print", "(", "'drop_prob_ho :  {0}'", ".", "format", "(", "configs", ".", "drop_prob_ho", ")", ")", "\n", "print", "(", "'is_shuffle :  {0}'", ".", "format", "(", "configs", ".", "is_shuffle", ")", ")", "\n", "print", "(", "'loss_type :  {0}'", ".", "format", "(", "configs", ".", "loss_type", ")", ")", "\n", "print", "(", "'max_patience : {0}'", ".", "format", "(", "configs", ".", "max_patience", ")", ")", "\n", "print", "(", "'num_topics :  {0}'", ".", "format", "(", "configs", ".", "num_topics", ")", ")", "\n", "print", "(", "'two_phase_learning :  {0}'", ".", "format", "(", "configs", ".", "two_phase_learning", ")", ")", "\n", "print", "(", "'is_prior_reg :  {0}'", ".", "format", "(", "configs", ".", "is_prior_reg", ")", ")", "\n", "print", "(", "'att_type :  {0}'", ".", "format", "(", "configs", ".", "att_type", ")", ")", "\n", "print", "(", "'reg_lambda :  {0}'", ".", "format", "(", "configs", ".", "reg_lambda", ")", ")", "\n", "print", "(", "'random_seed :  {0}'", ".", "format", "(", "configs", ".", "random_seed", ")", ")", "\n", "print", "(", "\"=\"", "*", "20", ")", "\n", "\n", "item_key", "=", "'item_idx'", "\n", "sess_key", "=", "'sess_idx'", "\n", "\n", "#  initializer = tf.random_normal_initializer(mean=0, stddev=0.1)", "\n", "embed_init", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0", ",", "stddev", "=", "0.1", ")", "# tf.random_uniform_initializer(minval=-1.0,maxval=1.0) #tf.random_normal_initializer(mean=0, stddev=0.1)", "\n", "weight_init", "=", "None", "\n", "bias_init", "=", "tf", ".", "zeros_initializer", "(", ")", "# tf.ones_initializer()", "\n", "if", "configs", ".", "zero_init", ":", "\n", "        ", "gate_bias_init", "=", "tf", ".", "zeros_initializer", "(", ")", "\n", "", "else", ":", "\n", "        ", "gate_bias_init", "=", "tf", ".", "ones_initializer", "(", ")", "\n", "", "kern_init", "=", "tf", ".", "ones_initializer", "(", ")", "\n", "init_way", "=", "[", "embed_init", ",", "weight_init", ",", "bias_init", ",", "gate_bias_init", ",", "kern_init", "]", "\n", "\n", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", "=", "preprocessing_data", "(", "configs", ",", "item_key", ",", "sess_key", ")", "\n", "print", "(", "\"End of data preprocessing\"", ")", "\n", "gpu_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "if", "(", "configs", ".", "gpu_fraction", "==", "1.0", ")", ":", "\n", "        ", "gpu_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "", "else", ":", "\n", "        ", "gpu_config", ".", "gpu_options", ".", "per_process_gpu_memory_fraction", "=", "configs", ".", "gpu_fraction", "\n", "", "with", "tf", ".", "Session", "(", "config", "=", "gpu_config", ")", "as", "sess", ":", "\n", "        ", "if", "configs", ".", "model_name", "==", "\"NARM\"", ":", "\n", "            ", "model", "=", "NARM", "(", "sess", ",", "k", ",", "configs", ",", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", ",", "init_way", ",", "logger", ")", "\n", "", "if", "configs", ".", "model_name", "==", "\"GRU4REC\"", ":", "\n", "            ", "model", "=", "GRU4REC", "(", "sess", ",", "k", ",", "configs", ",", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", ",", "init_way", ",", "logger", ")", "\n", "", "elif", "configs", ".", "model_name", "==", "\"STAMP\"", ":", "\n", "            ", "model", "=", "STAMP", "(", "sess", ",", "k", ",", "configs", ",", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", ",", "init_way", ",", "logger", ")", "\n", "", "elif", "\"HCRNN\"", "in", "configs", ".", "model_name", ":", "\n", "            ", "model", "=", "HCRNN", "(", "sess", ",", "k", ",", "configs", ",", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", ",", "init_way", ",", "logger", ")", "\n", "", "model", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.EarlyStopping.__init__": [[312, 316], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "patience", "=", "0", ")", ":", "\n", "        ", "self", ".", "patience", "=", "patience", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "max_recall_20", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.EarlyStopping.validate": [[317, 326], ["None"], "methods", ["None"], ["", "def", "validate", "(", "self", ",", "val_recall_20", ")", ":", "\n", "        ", "if", "self", ".", "max_recall_20", ">", "val_recall_20", ":", "\n", "            ", "self", ".", "step", "+=", "1", "\n", "if", "self", ".", "step", "==", "self", ".", "patience", ":", "\n", "                ", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "step", "=", "0", "\n", "self", ".", "max_recall_20", "=", "val_recall_20", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.preprocessing_data": [[8, 47], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "utils.df_to_array", "utils.df_to_array", "utils.df_to_array", "[].nunique", "pd.read_csv.head", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "df_tr[].unique", "df_val[].unique", "df_te[].unique", "df_tr[].unique", "df_val[].unique", "df_te[].unique", "len", "len", "df_te[].unique", "len", "df_tr[].unique", "float", "pandas.concat", "df_tr[].unique", "df_val[].unique", "len", "len", "len", "len", "len", "len", "len", "len", "df_te[].unique", "df_tr[].unique", "df_val[].unique"], "function", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.df_to_array", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.df_to_array", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.df_to_array"], ["def", "preprocessing_data", "(", "configs", ",", "item_key", ",", "sess_key", ")", ":", "\n", "    ", "if", "(", "\"NARM\"", "in", "configs", ".", "model_name", ")", "or", "(", "\"STAMP\"", "in", "configs", ".", "model_name", ")", "or", "(", "\"HCRNN\"", "in", "configs", ".", "model_name", ")", "or", "(", "\"GRU4REC\"", "in", "configs", ".", "model_name", ")", ":", "\n", "        ", "PATH_TRAIN", "=", "configs", ".", "data_dir", "+", "configs", ".", "data", "+", "'/NARM_train.txt'", "\n", "PATH_VALID", "=", "configs", ".", "data_dir", "+", "configs", ".", "data", "+", "'/NARM_valid.txt'", "\n", "PATH_TEST", "=", "configs", ".", "data_dir", "+", "configs", ".", "data", "+", "'/NARM_test.txt'", "\n", "\n", "", "df_tr", "=", "pd", ".", "read_csv", "(", "PATH_TRAIN", ",", "sep", "=", "'\\t'", ")", "\n", "df_val", "=", "pd", ".", "read_csv", "(", "PATH_VALID", ",", "sep", "=", "'\\t'", ")", "\n", "df_te", "=", "pd", ".", "read_csv", "(", "PATH_TEST", ",", "sep", "=", "'\\t'", ")", "\n", "\n", "num_items", "=", "pd", ".", "concat", "(", "[", "df_tr", ",", "df_val", ",", "df_te", "]", ")", "[", "item_key", "]", ".", "nunique", "(", ")", "+", "1", "\n", "# num_items = df_tr[item_key].nunique() + 1 # for zero padding (zero padding idx : 0)", "\n", "\n", "print", "(", "df_tr", ".", "head", "(", "n", "=", "5", ")", ")", "\n", "print", "(", "\"=\"", "*", "10", ")", "\n", "print", "(", "\"# of Train sessions : {0}\"", ".", "format", "(", "len", "(", "df_tr", "[", "sess_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of Valid sessions : {0}\"", ".", "format", "(", "len", "(", "df_val", "[", "sess_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of Test sessions : {0}\"", ".", "format", "(", "len", "(", "df_te", "[", "sess_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of Train items : {0}\"", ".", "format", "(", "len", "(", "df_tr", "[", "item_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of Valid items : {0}\"", ".", "format", "(", "len", "(", "df_val", "[", "item_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of Test items : {0}\"", ".", "format", "(", "len", "(", "df_te", "[", "item_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of Train events : {0}\"", ".", "format", "(", "len", "(", "df_tr", ")", ")", ")", "\n", "print", "(", "\"# of Valid events : {0}\"", ".", "format", "(", "len", "(", "df_val", ")", ")", ")", "\n", "print", "(", "\"# of Test events : {0}\"", ".", "format", "(", "len", "(", "df_te", ")", ")", ")", "\n", "print", "(", "\"=\"", "*", "10", ")", "\n", "\n", "print", "(", "\"!\"", "*", "10", ")", "\n", "print", "(", "\"# of Train sessions : {0}\"", ".", "format", "(", "len", "(", "df_tr", "[", "sess_key", "]", ".", "unique", "(", ")", ")", "+", "len", "(", "df_val", "[", "sess_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of Test sessions : {0}\"", ".", "format", "(", "len", "(", "df_te", "[", "sess_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of Events : {0}\"", ".", "format", "(", "len", "(", "df_tr", ")", "+", "len", "(", "df_val", ")", "+", "len", "(", "df_te", ")", ")", ")", "\n", "print", "(", "\"# of Items : {0}\"", ".", "format", "(", "len", "(", "df_tr", "[", "item_key", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "\"# of avg length : {0}\"", ".", "format", "(", "(", "len", "(", "df_tr", ")", "+", "len", "(", "df_val", ")", "+", "len", "(", "df_te", ")", ")", "/", "float", "(", "len", "(", "df_tr", "[", "sess_key", "]", ".", "unique", "(", ")", ")", "+", "len", "(", "df_val", "[", "sess_key", "]", ".", "unique", "(", ")", ")", "+", "len", "(", "df_te", "[", "sess_key", "]", ".", "unique", "(", ")", ")", ")", ")", ")", "\n", "print", "(", "\"!\"", "*", "10", ")", "\n", "\n", "tr_x", ",", "tr_y", "=", "df_to_array", "(", "df_tr", ",", "sess_key", ",", "item_key", ")", "\n", "val_x", ",", "val_y", "=", "df_to_array", "(", "df_val", ",", "sess_key", ",", "item_key", ")", "\n", "te_x", ",", "te_y", "=", "df_to_array", "(", "df_te", ",", "sess_key", ",", "item_key", ")", "\n", "del", "df_tr", ",", "df_val", ",", "df_te", "\n", "return", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.df_to_array": [[48, 57], ["[].apply", "[].apply.to_dict", "temp.to_dict.keys", "x_array.append", "y_array.append", "numpy.asarray", "numpy.asarray", "df.groupby"], "function", ["None"], ["", "def", "df_to_array", "(", "df", ",", "sess_key", ",", "item_key", ")", ":", "\n", "    ", "temp", "=", "df", ".", "groupby", "(", "sess_key", ")", "[", "item_key", "]", ".", "apply", "(", "list", ")", "\n", "temp_dict", "=", "temp", ".", "to_dict", "(", ")", "\n", "x_array", "=", "[", "]", "\n", "y_array", "=", "[", "]", "\n", "for", "key", "in", "temp_dict", ".", "keys", "(", ")", ":", "\n", "        ", "x_array", ".", "append", "(", "temp_dict", "[", "key", "]", "[", ":", "-", "1", "]", ")", "\n", "y_array", ".", "append", "(", "temp_dict", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "", "return", "np", ".", "asarray", "(", "x_array", ")", ",", "np", ".", "asarray", "(", "y_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha": [[58, 63], ["tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose"], "function", ["None"], ["", "def", "compute_alpha", "(", "state1", ",", "state2", ",", "W_encoder", ",", "W_decoder", ",", "Bi_vector", ")", ":", "\n", "    ", "tmp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "W_encoder", ",", "tf", ".", "transpose", "(", "state1", ")", ")", "+", "tf", ".", "matmul", "(", "W_decoder", ",", "tf", ".", "transpose", "(", "state2", ")", ")", ")", "\n", "alpha", "=", "tf", ".", "matmul", "(", "Bi_vector", ",", "tmp", ")", "# 1x512", "\n", "res", "=", "tf", ".", "reduce_sum", "(", "alpha", ",", "axis", "=", "0", ")", "# 512,", "\n", "return", "res", "# 512,", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha_mat": [[64, 71], ["tensorflow.reshape", "tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.tile", "tensorflow.matmul"], "function", ["None"], ["", "def", "compute_alpha_mat", "(", "outputs", ",", "real_last_hidden", ",", "W_encoder", ",", "W_decoder", ",", "Bi_vector", ",", "hidden_size", ",", "real_max_len", ")", ":", "\n", "# outputs (batch * num_topic)", "\n", "    ", "outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "-", "1", ",", "hidden_size", "]", ")", "\n", "temp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "outputs", ",", "W_encoder", ")", "+", "tf", ".", "tile", "(", "tf", ".", "matmul", "(", "real_last_hidden", ",", "W_decoder", ")", ",", "[", "real_max_len", ",", "1", "]", ")", ")", "\n", "alpha", "=", "tf", ".", "matmul", "(", "temp", ",", "tf", ".", "transpose", "(", "Bi_vector", ")", ")", "\n", "res", "=", "tf", ".", "reshape", "(", "alpha", ",", "[", "real_max_len", ",", "-", "1", "]", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_local_alpha": [[73, 78], ["tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose"], "function", ["None"], ["", "def", "compute_local_alpha", "(", "state1", ",", "state2", ",", "W_encoder", ",", "W_decoder", ",", "Bi_vector", ")", ":", "\n", "    ", "tmp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "W_encoder", ",", "tf", ".", "transpose", "(", "state1", ")", ")", "+", "tf", ".", "matmul", "(", "W_decoder", ",", "tf", ".", "transpose", "(", "state2", ")", ")", ")", "\n", "alpha", "=", "tf", ".", "matmul", "(", "Bi_vector", ",", "tmp", ")", "\n", "res", "=", "tf", ".", "reduce_sum", "(", "alpha", ",", "axis", "=", "0", ")", "\n", "return", "res", "# 512,", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_global_alpha": [[79, 83], ["tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose"], "function", ["None"], ["", "def", "compute_global_alpha", "(", "state1", ",", "state2", ",", "W_encoder", ",", "W_decoder", ")", ":", "# state : batch * num_topic", "\n", "    ", "tmp", "=", "tf", ".", "multiply", "(", "tf", ".", "matmul", "(", "W_encoder", ",", "tf", ".", "transpose", "(", "state1", ")", ")", ",", "tf", ".", "matmul", "(", "W_decoder", ",", "tf", ".", "transpose", "(", "state2", ")", ")", ")", "# rnn_hidden * batch_size", "\n", "res", "=", "tf", ".", "reduce_sum", "(", "tmp", ",", "axis", "=", "0", ")", "#/ tf.sqrt(tf.cast(tf.shape(W_encoder)[1], tf.float32))", "\n", "return", "res", "# 512,", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_global_alpha_norm": [[84, 88], ["tensorflow.multiply", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.cast", "tensorflow.shape"], "function", ["None"], ["", "def", "compute_global_alpha_norm", "(", "state1", ",", "state2", ",", "W_encoder", ",", "W_decoder", ")", ":", "# state : batch * num_topic", "\n", "    ", "tmp", "=", "tf", ".", "multiply", "(", "tf", ".", "matmul", "(", "W_encoder", ",", "tf", ".", "transpose", "(", "state1", ")", ")", ",", "tf", ".", "matmul", "(", "W_decoder", ",", "tf", ".", "transpose", "(", "state2", ")", ")", ")", "# rnn_hidden * batch_size", "\n", "res", "=", "tf", ".", "reduce_sum", "(", "tmp", ",", "axis", "=", "0", ")", "/", "tf", ".", "sqrt", "(", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "W_encoder", ")", "[", "1", "]", ",", "tf", ".", "float32", ")", ")", "\n", "return", "res", "# 512,", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha_STAMP": [[89, 94], ["tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "function", ["None"], ["", "def", "compute_alpha_STAMP", "(", "xi", ",", "xt", ",", "ms", ",", "w0", ",", "w1", ",", "w2", ",", "w3", ",", "ba", ")", ":", "\n", "    ", "pre_alpha", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xi", ",", "w1", ")", "+", "tf", ".", "matmul", "(", "xt", ",", "w2", ")", "+", "tf", ".", "matmul", "(", "ms", ",", "w3", ")", "+", "ba", ")", "# batch_size * rnn_hidden", "\n", "unnormalized_alpha", "=", "tf", ".", "matmul", "(", "pre_alpha", ",", "w0", ")", "# batch_size * 1", "\n", "unnormalized_alpha", "=", "tf", ".", "squeeze", "(", "unnormalized_alpha", ",", "axis", "=", "1", ")", "# batch_size", "\n", "return", "unnormalized_alpha", "# 512", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_trilinear_STAMP": [[95, 103], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.squeeze", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid", "tensorflow.multiply"], "function", ["None"], ["", "def", "compute_trilinear_STAMP", "(", "x", ",", "hs", ",", "ht", ")", ":", "\n", "    ", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "1", ")", "# 100 * 1", "\n", "left", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "hs", ",", "ht", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "right", "=", "tf", ".", "matmul", "(", "hs", ",", "x", ")", "\n", "pre_z_hat", "=", "tf", ".", "multiply", "(", "left", ",", "right", ")", "\n", "# pre_z_hat = tf.reduce_sum(tf.multiply(hs,tf.multiply(ht,x)),axis=1)", "\n", "z_hat", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pre_z_hat", ")", ",", "axis", "=", "1", ")", "\n", "return", "z_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_cov_theta": [[104, 118], ["tensorflow.cast", "tensorflow.tile", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.norm", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "def", "compute_cov_theta", "(", "state", ")", ":", "# https://github.com/changun/CollMetric/blob/master/CML.py", "\n", "    ", "theta", ",", "mask", "=", "state", "\n", "num_topics", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "theta", ")", "[", "1", "]", ",", "tf", ".", "int32", ")", "\n", "tiled_mask", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "mask", ",", "1", ")", ",", "[", "1", ",", "num_topics", "]", ")", "\n", "masked_theta", "=", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "theta", ",", "tiled_mask", ")", ")", "\n", "real_length", "=", "tf", ".", "reduce_sum", "(", "mask", ")", "\n", "row_mean", "=", "tf", ".", "reduce_sum", "(", "masked_theta", ",", "axis", "=", "0", ")", "/", "real_length", "\n", "\n", "n_rows", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "masked_theta", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "post_theta", "=", "masked_theta", "-", "row_mean", "\n", "cov_theta", "=", "tf", ".", "matmul", "(", "post_theta", ",", "post_theta", ",", "transpose_a", "=", "True", ")", "/", "n_rows", "\n", "cov_theta_norm", "=", "tf", ".", "norm", "(", "cov_theta", ",", "ord", "=", "'fro'", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "return", "(", "cov_theta_norm", ",", "cov_theta_norm", ")", "# 1x512", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.write_log": [[119, 143], ["range", "range", "logger.info", "len", "len", "time.time"], "function", ["None"], ["", "def", "write_log", "(", "logger", ",", "epoch", ",", "tr_pred_loss", ",", "val_pred_loss", ",", "te_pred_loss", ",", "k", ",", "val_recall_list", ",", "val_mrr_list", ",", "te_recall_list", ",", "te_mrr_list", ",", "max_val_recall", ",", "\n", "max_te_recall", ",", "best_epoch", ",", "start_time", ")", ":", "\n", "    ", "wall_clock", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "best_check", "=", "False", "\n", "if", "max_val_recall", "[", "3", "]", "==", "val_recall_list", "[", "3", "]", ":", "\n", "        ", "best_epoch", "=", "epoch", "+", "1", "\n", "best_check", "=", "True", "\n", "", "logger_str", "=", "\"=\"", "*", "50", "\n", "logger_str", "+=", "\"\\n\"", "\n", "logger_str", "=", "logger_str", "+", "'Epoch:{0:2d}| Tr Pred_Loss:{1:0.3f}|Val Pred_Loss:{2:0.3f}|'", "'Te Pred_Loss:{3:0.3f}|'", ".", "format", "(", "epoch", "+", "1", ",", "tr_pred_loss", ",", "val_pred_loss", ",", "te_pred_loss", ",", "te_pred_loss", ")", "\n", "logger_str", "=", "logger_str", "+", "' Best Valid Recall@20 Epoch: {0:2d}|'", ".", "format", "(", "best_epoch", ")", "\n", "logger_str", "=", "logger_str", "+", "' Epoch Time: {0: 0.3f}(min)'", ".", "format", "(", "wall_clock", ")", "\n", "logger_str", "+=", "\"\\n\"", "\n", "for", "itr", "in", "range", "(", "len", "(", "k", ")", ")", ":", "\n", "        ", "logger_str", "=", "logger_str", "+", "' Recall @ {0: 1d}: {1: 0.4f} | '", ".", "format", "(", "k", "[", "itr", "]", ",", "100", "*", "val_recall_list", "[", "itr", "]", ")", "\n", "logger_str", "=", "logger_str", "+", "' MRR @ {0: 1d}: {1: 0.4f} | '", ".", "format", "(", "k", "[", "itr", "]", ",", "100", "*", "val_mrr_list", "[", "itr", "]", ")", "\n", "", "logger_str", "+=", "\"\\n\"", "\n", "for", "itr", "in", "range", "(", "len", "(", "k", ")", ")", ":", "\n", "        ", "logger_str", "=", "logger_str", "+", "' Recall @ {0: 1d}: {1: 0.4f} | '", ".", "format", "(", "k", "[", "itr", "]", ",", "100", "*", "te_recall_list", "[", "itr", "]", ")", "\n", "logger_str", "=", "logger_str", "+", "' MRR @ {0: 1d}: {1: 0.4f} | '", ".", "format", "(", "k", "[", "itr", "]", ",", "100", "*", "te_mrr_list", "[", "itr", "]", ")", "\n", "\n", "", "logger", ".", "info", "(", "logger_str", ")", "\n", "return", "best_epoch", ",", "best_check", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.loss_fn": [[144, 160], ["tensorflow.argmax", "tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.diag_part", "tensorflow.tile", "tensorflow.gather", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.gather", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.eye", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "def", "loss_fn", "(", "rnn_y", ",", "logits", ",", "loss_type", ")", ":", "\n", "# rnn_y : batch_size * num_item", "\n", "# logits : batch_size * num_item", "\n", "    ", "y_label", "=", "tf", ".", "argmax", "(", "rnn_y", ",", "axis", "=", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "if", "loss_type", "==", "\"CE\"", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "rnn_y", ",", "logits", "=", "logits", ")", ")", "\n", "", "elif", "\"TOP1\"", "in", "loss_type", ":", "\n", "        ", "diag_true_logits", "=", "tf", ".", "diag_part", "(", "tf", ".", "gather", "(", "logits", ",", "y_label", ",", "axis", "=", "1", ")", ")", "# batch_size", "\n", "expand_true_logits", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "diag_true_logits", ",", "1", ")", ",", "[", "1", ",", "tf", ".", "shape", "(", "rnn_y", ")", "[", "0", "]", "]", ")", "# batch_size * batch_size", "\n", "logits_for_loss", "=", "tf", ".", "gather", "(", "logits", ",", "y_label", ",", "axis", "=", "1", ")", "# batch_size * batch_size", "\n", "top1_mask", "=", "tf", ".", "ones", "(", "[", "tf", ".", "shape", "(", "rnn_y", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "rnn_y", ")", "[", "0", "]", "]", ")", "-", "tf", ".", "eye", "(", "tf", ".", "shape", "(", "rnn_y", ")", "[", "0", "]", ")", "# batch_size * batch_size", "\n", "pre_loss1", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid", "(", "logits_for_loss", "-", "expand_true_logits", ")", ",", "top1_mask", ")", "# batch_size * batch_size", "\n", "pre_loss2", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "multiply", "(", "logits_for_loss", ",", "logits_for_loss", ")", ")", ",", "top1_mask", ")", "# batch_size * batch_size", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "pre_loss1", ")", "+", "tf", ".", "reduce_mean", "(", "pre_loss2", ")", "# scalar", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data": [[161, 191], ["len", "numpy.zeros().astype", "numpy.ones().astype", "enumerate", "len", "numpy.max", "numpy.zeros", "y_.append", "numpy.zeros", "numpy.ones"], "function", ["None"], ["", "def", "convert_batch_data", "(", "seqs", ",", "labels", ",", "n_items", ",", "maxlen", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create the matrices from the datasets.\n\n    This pad each sequence to the same lenght: the lenght of the\n    longuest sequence or maxlen.\n\n    if maxlen is set, we will cut all sequence to this maximum\n    lenght.\n\n    This swap the axis!\n    \"\"\"", "\n", "# x: a list of sentences", "\n", "\n", "lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "seqs", "]", "\n", "n_samples", "=", "len", "(", "seqs", ")", "\n", "if", "maxlen", "is", "None", ":", "\n", "        ", "maxlen", "=", "np", ".", "max", "(", "lengths", ")", "\n", "", "x", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "maxlen", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "x_mask", "=", "np", ".", "ones", "(", "(", "n_samples", ",", "maxlen", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "seqs", ")", ":", "\n", "        ", "x", "[", "idx", ",", ":", "lengths", "[", "idx", "]", "]", "=", "s", "\n", "", "x_mask", "*=", "(", "1", "-", "(", "x", "==", "0", ")", ")", "\n", "\n", "y_", "=", "[", "]", "\n", "for", "i", "in", "labels", ":", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "[", "n_items", "]", ")", "\n", "temp", "[", "i", "]", "=", "1", "\n", "y_", ".", "append", "(", "temp", ")", "\n", "\n", "", "return", "x", ",", "y_", ",", "x_mask", ",", "labels", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data_HCRNN": [[192, 224], ["len", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.ones().astype", "enumerate", "len", "numpy.max", "numpy.zeros", "y_.append", "numpy.zeros", "numpy.zeros", "numpy.ones"], "function", ["None"], ["", "def", "convert_batch_data_HCRNN", "(", "seqs", ",", "labels", ",", "n_items", ",", "maxlen", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create the matrices from the datasets.\n\n    This pad each sequence to the same lenght: the lenght of the\n    longuest sequence or maxlen.\n\n    if maxlen is set, we will cut all sequence to this maximum\n    lenght.\n\n    This swap the axis!\n    \"\"\"", "\n", "# x: a list of sentences", "\n", "\n", "lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "seqs", "]", "\n", "n_samples", "=", "len", "(", "seqs", ")", "\n", "if", "maxlen", "is", "None", ":", "\n", "        ", "maxlen", "=", "np", ".", "max", "(", "lengths", ")", "\n", "", "x", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "maxlen", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "topic_x", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "n_items", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "x_mask", "=", "np", ".", "ones", "(", "(", "n_samples", ",", "maxlen", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "seqs", ")", ":", "\n", "        ", "x", "[", "idx", ",", ":", "lengths", "[", "idx", "]", "]", "=", "s", "\n", "topic_x", "[", "idx", ",", "s", "]", "+=", "1", "\n", "", "x_mask", "*=", "(", "1", "-", "(", "x", "==", "0", ")", ")", "\n", "\n", "y_", "=", "[", "]", "\n", "for", "i", "in", "labels", ":", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "[", "n_items", "]", ")", "\n", "temp", "[", "i", "]", "=", "1", "\n", "y_", ".", "append", "(", "temp", ")", "\n", "\n", "", "return", "x", ",", "topic_x", ",", "y_", ",", "x_mask", ",", "labels", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data_stamp": [[225, 260], ["len", "numpy.zeros().astype", "numpy.ones().astype", "numpy.zeros().astype", "numpy.ones().astype", "enumerate", "len", "numpy.max", "numpy.zeros", "y_.append", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.ones"], "function", ["None"], ["", "def", "convert_batch_data_stamp", "(", "seqs", ",", "labels", ",", "n_items", ",", "maxlen", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create the matrices from the datasets.\n\n    This pad each sequence to the same lenght: the lenght of the\n    longuest sequence or maxlen.\n\n    if maxlen is set, we will cut all sequence to this maximum\n    lenght.\n\n    This swap the axis!\n    \"\"\"", "\n", "# x: a list of sentences", "\n", "\n", "lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "seqs", "]", "\n", "n_samples", "=", "len", "(", "seqs", ")", "\n", "if", "maxlen", "is", "None", ":", "\n", "        ", "maxlen", "=", "np", ".", "max", "(", "lengths", ")", "\n", "", "x1", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "maxlen", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "x1_mask", "=", "np", ".", "ones", "(", "(", "n_samples", ",", "maxlen", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "x2", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", "1", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "x2_mask", "=", "np", ".", "ones", "(", "(", "n_samples", ",", "1", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "seqs", ")", ":", "\n", "        ", "x1", "[", "idx", ",", ":", "lengths", "[", "idx", "]", "]", "=", "s", "\n", "x2", "[", "idx", ",", "0", "]", "=", "s", "[", "-", "1", "]", "\n", "\n", "", "x1_mask", "*=", "(", "1", "-", "(", "x1", "==", "0", ")", ")", "\n", "x2_mask", "*=", "(", "1", "-", "(", "x2", "==", "0", ")", ")", "\n", "y_", "=", "[", "]", "\n", "for", "i", "in", "labels", ":", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "[", "n_items", "]", ")", "\n", "temp", "[", "i", "]", "=", "1", "\n", "y_", ".", "append", "(", "temp", ")", "\n", "\n", "", "return", "x1", ",", "x2", ",", "y_", ",", "x1_mask", ",", "x2_mask", ",", "labels", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.kl_normal_reg_loss": [[261, 263], ["tensorflow.reduce_sum", "tensorflow.log", "tensorflow.square", "tensorflow.square", "tensorflow.square"], "function", ["None"], ["", "def", "kl_normal_reg_loss", "(", "mu", ",", "std", ")", ":", "\n", "    ", "return", "0.5", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "mu", ")", "+", "tf", ".", "square", "(", "std", ")", "-", "tf", ".", "log", "(", "1e-8", "+", "tf", ".", "square", "(", "std", ")", ")", "-", "1", ",", "axis", "=", "1", ")", "\n", "# return -0.5 * tf.reduce_sum(1+logvar - tf.square(mu) - tf.exp(logvar+(1e-6)),axis=1)", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.tf_kl_gaussgauss": [[266, 274], ["tensorflow.variable_scope", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.log", "tensorflow.log", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.maximum", "tensorflow.maximum"], "function", ["None"], ["", "def", "tf_kl_gaussgauss", "(", "mu_1", ",", "sigma_1", ",", "mu_2", ",", "sigma_2", ")", ":", "\n", "# https://github.com/phreeza/tensorflow-vrnn/blob/master/model_vrnn.py", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"kl_gaussgauss\"", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "0.5", "*", "(", "\n", "2", "*", "tf", ".", "log", "(", "tf", ".", "maximum", "(", "1e-9", ",", "sigma_2", ")", ",", "name", "=", "'log_sigma_2'", ")", "\n", "-", "2", "*", "tf", ".", "log", "(", "tf", ".", "maximum", "(", "1e-9", ",", "sigma_1", ")", ",", "name", "=", "'log_sigma_1'", ")", "\n", "+", "(", "tf", ".", "square", "(", "sigma_1", ")", "+", "tf", ".", "square", "(", "mu_1", "-", "mu_2", ")", ")", "/", "tf", ".", "maximum", "(", "1e-9", ",", "(", "tf", ".", "square", "(", "sigma_2", ")", ")", ")", "-", "1", "\n", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.rbf_kernel": [[275, 277], ["tensorflow.exp", "utils.scaled_square_dist"], "function", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.scaled_square_dist"], ["", "", "def", "rbf_kernel", "(", "x1", ",", "x2", ",", "k_sigma", ",", "k_length", ")", ":", "\n", "    ", "return", "k_sigma", "*", "tf", ".", "exp", "(", "-", "1", "*", "scaled_square_dist", "(", "x1", ",", "x2", ",", "k_length", ")", "/", "2", "+", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.per_kernel": [[278, 288], ["tensorflow.square", "tensorflow.exp", "tensorflow.sin"], "function", ["None"], ["", "def", "per_kernel", "(", "x1", ",", "x2", ",", "k_sigma", ",", "k_length", ",", "k_p", ")", ":", "# https://github.com/GPflow/GPflow/blob/master/gpflow/kernels.py", "\n", "# Introduce dummy dimension so we can use broadcasting", "\n", "# f = tf.expand_dims(x1, 1)  # now N x 1 x D", "\n", "# f2 = tf.expand_dims(x2, 0)  # now 1 x M x D", "\n", "    ", "f", "=", "x1", "\n", "f2", "=", "x2", "\n", "r", "=", "np", ".", "pi", "*", "(", "f", "-", "f2", ")", "/", "k_p", "\n", "# r = tf.reduce_sum(tf.square(tf.sin(r) / k_length), 2)", "\n", "r", "=", "tf", ".", "square", "(", "tf", ".", "sin", "(", "r", ")", "/", "k_length", ")", "\n", "return", "k_sigma", "*", "tf", ".", "exp", "(", "-", "0.5", "*", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.scaled_square_dist": [[289, 297], ["tensorflow.square"], "function", ["None"], ["", "def", "scaled_square_dist", "(", "x1", ",", "x2", ",", "k_length", ")", ":", "\n", "# X = X / self.lengthscales", "\n", "    ", "X1", "=", "x1", "/", "(", "k_length", "+", "1e-6", ")", "\n", "\n", "# X2 = X2 / self.lengthscales", "\n", "X2", "=", "x2", "/", "(", "k_length", "+", "1e-6", ")", "\n", "dist", "=", "tf", ".", "square", "(", "X1", "-", "X2", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.evaluation": [[298, 310], ["range", "len", "rank_ok.sum", "len", "numpy.diag"], "function", ["None"], ["", "def", "evaluation", "(", "labels", ",", "preds", ",", "recalls", ",", "mrrs", ",", "evaluation_point_count", ",", "k", ")", ":", "\n", "    ", "targets", "=", "labels", "\n", "\n", "ranks", "=", "(", "preds", ".", "T", ">", "np", ".", "diag", "(", "preds", ".", "T", "[", "targets", "]", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", "+", "1", "\n", "for", "temp_itr", "in", "range", "(", "len", "(", "k", ")", ")", ":", "\n", "        ", "temp_cut", "=", "k", "[", "temp_itr", "]", "\n", "rank_ok", "=", "(", "ranks", "<=", "temp_cut", ")", "\n", "recalls", "[", "temp_itr", "]", "+=", "rank_ok", ".", "sum", "(", ")", "\n", "mrrs", "[", "temp_itr", "]", "+=", "(", "1.0", "/", "ranks", "[", "rank_ok", "]", ")", ".", "sum", "(", ")", "\n", "evaluation_point_count", "[", "temp_itr", "]", "+=", "len", "(", "ranks", ")", "\n", "\n", "", "return", "recalls", ",", "mrrs", ",", "evaluation_point_count", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.variable_parser": [[327, 341], ["varname.split", "len", "ret_list.append"], "function", ["None"], ["", "", "def", "variable_parser", "(", "var_list", ",", "prefix", ")", ":", "\n", "    ", "\"\"\"return a subset of the all_variables by prefix.\"\"\"", "\n", "ret_list", "=", "[", "]", "\n", "for", "var", "in", "var_list", ":", "\n", "        ", "varname", "=", "var", ".", "name", "\n", "splitted_varname", "=", "varname", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "splitted_varname", ")", "==", "3", ":", "\n", "            ", "varprefix", "=", "splitted_varname", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "varprefix", "=", "splitted_varname", "[", "0", "]", "\n", "\n", "", "if", "varprefix", "==", "prefix", ":", "\n", "            ", "ret_list", ".", "append", "(", "var", ")", "\n", "", "", "return", "ret_list", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.get_all_data": [[342, 588], ["range", "int", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "range", "print", "enumerate", "real_sequence_idx.append", "print", "print", "print", "print", "print", "print", "dict", "len", "dict", "range", "len", "recalls.append", "mrrs.append", "evaluation_point_count.append", "math.ceil", "int", "numpy.minimum", "utils.convert_batch_data", "numpy.concatenate", "numpy.concatenate", "model.sess.run", "utils.evaluation", "open", "range", "len", "recall_list.append", "mrr_list.append", "len", "model.sess.run", "numpy.concatenate", "numpy.concatenate", "real_sequence_idx.append", "str", "str", "len", "f.write", "f.write", "range", "f.write", "f.write", "f.write", "f.write", "range", "f.write", "range", "f.write", "f.write", "numpy.asarray", "numpy.asarray", "numpy.float32", "model.sess.run", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "f.write", "f.write", "f.write", "range", "f.write", "range", "f.write", "range", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "len", "numpy.array", "numpy.array", "model.sess.run", "numpy.concatenate", "str", "str", "str", "int", "f.write", "f.write", "int", "f.write", "f.write", "int", "f.write", "f.write", "int", "f.write", "f.write", "range", "f.write", "range", "f.write", "int", "numpy.linalg.norm", "f.write", "f.write", "int", "numpy.mean", "f.write", "f.write", "model.sess.run", "numpy.concatenate", "numpy.concatenate", "str", "str", "str", "str", "int", "f.write", "f.write", "str", "str", "int", "numpy.linalg.norm", "f.write", "f.write", "int", "numpy.mean", "f.write", "f.write", "numpy.arange", "str", "str", "str", "int", "f.write", "f.write", "int", "f.write", "f.write", "str", "str", "len", "numpy.array", "str", "str"], "function", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run"], ["", "def", "get_all_data", "(", "model", ",", "idx2item", ",", "item2label", ")", ":", "\n", "    ", "sess_idx", "=", "model", ".", "te_sess_idx", "\n", "df_x", "=", "model", ".", "te_x", "\n", "df_y", "=", "model", ".", "te_y", "\n", "recalls", "=", "[", "]", "\n", "mrrs", "=", "[", "]", "\n", "evaluation_point_count", "=", "[", "]", "\n", "\n", "for", "itr", "in", "range", "(", "len", "(", "model", ".", "k", ")", ")", ":", "\n", "        ", "recalls", ".", "append", "(", "0", ")", "\n", "mrrs", ".", "append", "(", "0", ")", "\n", "evaluation_point_count", ".", "append", "(", "0", ")", "\n", "\n", "", "num_batch", "=", "int", "(", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "sess_idx", ")", ")", "/", "model", ".", "batch_size", ")", ")", "\n", "maxlen", "=", "99", "\n", "###### outputs ######", "\n", "inputs", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", "+", "1", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "NARM_att", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ")", ")", "\n", "NARM_reset", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ",", "model", ".", "rnn_hidden_size", ")", ")", "\n", "\n", "CSREC_topic_last", "=", "np", ".", "empty", "(", "(", "0", ",", "model", ".", "num_topics", ")", ")", "\n", "CSREC_topic_all", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ",", "model", ".", "num_topics", ")", ")", "\n", "CSREC_attention_topic", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ")", ")", "\n", "CSREC_t2", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ",", "model", ".", "rnn_hidden_size", ")", ")", "\n", "CSREC_reset", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ",", "model", ".", "rnn_hidden_size", ")", ")", "\n", "CSREC_attention_normal", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ")", ")", "\n", "CSREC_attention_local", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ")", ")", "\n", "CSREC_attention_global", "=", "np", ".", "empty", "(", "(", "0", ",", "maxlen", ")", ")", "\n", "lengths_all", "=", "[", "]", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "        ", "start_itr", "=", "model", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "model", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "sess_idx", ")", ")", "\n", "temp_batch_x", "=", "df_x", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "temp_batch_y", "=", "df_y", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "batch_x", ",", "batch_y", ",", "mask", ",", "labels", ",", "lengths", "=", "convert_batch_data", "(", "temp_batch_x", ",", "temp_batch_y", ",", "model", ".", "num_items", ",", "maxlen", ")", "\n", "lengths_all", "=", "lengths_all", "+", "lengths", "\n", "batch_all", "=", "np", ".", "concatenate", "(", "[", "batch_x", ",", "np", ".", "array", "(", "[", "temp_batch_y", "]", ")", ".", "T", "]", ",", "axis", "=", "1", ")", "\n", "inputs", "=", "np", ".", "concatenate", "(", "[", "inputs", ",", "idx2item", "[", "batch_all", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "if", "model", ".", "configs", ".", "model_name", "==", "\"NARM\"", ":", "\n", "            ", "feed_dict", "=", "{", "model", ".", "rnn_x", ":", "batch_x", ",", "model", ".", "rnn_y", ":", "batch_y", ",", "model", ".", "mask", ":", "mask", ",", "model", ".", "keep_prob_input", ":", "1.0", ",", "model", ".", "keep_prob_ho", ":", "1.0", ",", "\n", "model", ".", "batch_var_length", ":", "lengths", "}", "\n", "", "elif", "\"CSREC\"", "in", "model", ".", "configs", ".", "model_name", ":", "\n", "            ", "lengths", "=", "np", ".", "array", "(", "[", "np", ".", "arange", "(", "len", "(", "lengths", ")", ")", ",", "np", ".", "array", "(", "lengths", ")", "-", "1", "]", ")", ".", "T", "\n", "feed_dict", "=", "{", "model", ".", "rnn_x", ":", "batch_x", ",", "model", ".", "rnn_y", ":", "batch_y", ",", "model", ".", "mask", ":", "mask", ",", "model", ".", "keep_prob_input", ":", "1.0", ",", "model", ".", "keep_prob_ho", ":", "1.0", ",", "\n", "model", ".", "batch_var_length", ":", "lengths", ",", "model", ".", "is_training", ":", "False", "}", "\n", "", "preds", ",", "pred_loss_", "=", "model", ".", "sess", ".", "run", "(", "[", "model", ".", "pred", ",", "model", ".", "cost", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "recalls", ",", "mrrs", ",", "evaluation_point_count", "=", "evaluation", "(", "labels", ",", "preds", ",", "recalls", ",", "mrrs", ",", "evaluation_point_count", ",", "model", ".", "k", ")", "\n", "\n", "if", "model", ".", "configs", ".", "model_name", "==", "\"NARM\"", ":", "\n", "            ", "NARM_att_temp", ",", "NARM_reset_temp", "=", "model", ".", "sess", ".", "run", "(", "[", "model", ".", "weight", ",", "model", ".", "reset", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "NARM_att", "=", "np", ".", "concatenate", "(", "[", "NARM_att", ",", "NARM_att_temp", "]", ",", "axis", "=", "0", ")", "\n", "NARM_reset", "=", "np", ".", "concatenate", "(", "[", "NARM_reset", ",", "NARM_reset_temp", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "elif", "\"CSREC\"", "in", "model", ".", "configs", ".", "model_name", ":", "\n", "            ", "topic_last", ",", "topic_all", ",", "attention_topic", ",", "t2", ",", "reset", "=", "model", ".", "sess", ".", "run", "(", "\n", "[", "model", ".", "real_last_topic", ",", "model", ".", "theta_ta_final", ",", "model", ".", "real_alpha_topic", ",", "model", ".", "t2_final", ",", "model", ".", "reset_final", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "CSREC_topic_last", "=", "np", ".", "concatenate", "(", "[", "CSREC_topic_last", ",", "topic_last", "]", ",", "axis", "=", "0", ")", "\n", "CSREC_topic_all", "=", "np", ".", "concatenate", "(", "[", "CSREC_topic_all", ",", "topic_all", "]", ",", "axis", "=", "0", ")", "\n", "CSREC_attention_topic", "=", "np", ".", "concatenate", "(", "[", "CSREC_attention_topic", ",", "attention_topic", "]", ",", "axis", "=", "0", ")", "\n", "CSREC_t2", "=", "np", ".", "concatenate", "(", "[", "CSREC_t2", ",", "t2", "]", ",", "axis", "=", "0", ")", "\n", "CSREC_reset", "=", "np", ".", "concatenate", "(", "[", "CSREC_reset", ",", "reset", "]", ",", "axis", "=", "0", ")", "\n", "if", "model", ".", "configs", ".", "att_type", "==", "'normal_att'", ":", "\n", "                ", "normal_attention", "=", "model", ".", "sess", ".", "run", "(", "model", ".", "weight", ",", "feed_dict", "=", "feed_dict", ")", "\n", "CSREC_attention_normal", "=", "np", ".", "concatenate", "(", "[", "CSREC_attention_normal", ",", "normal_attention", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "model", ".", "configs", ".", "att_type", "==", "'gl_att'", ":", "\n", "                ", "global_attention", ",", "local_attention", "=", "model", ".", "sess", ".", "run", "(", "[", "model", ".", "global_weight", ",", "model", ".", "local_weight", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "CSREC_attention_local", "=", "np", ".", "concatenate", "(", "[", "CSREC_attention_local", ",", "local_attention", "]", ",", "axis", "=", "0", ")", "\n", "CSREC_attention_global", "=", "np", ".", "concatenate", "(", "[", "CSREC_attention_global", ",", "global_attention", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "print", "(", "\"End of Test dataset feedforward\"", ")", "\n", "real_sequence_idx", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "lengths_all", ")", ":", "\n", "        ", "if", "leng", "==", "1", "and", "i", "!=", "0", ":", "\n", "            ", "real_sequence_idx", ".", "append", "(", "i", "-", "1", ")", "\n", "", "", "real_sequence_idx", ".", "append", "(", "i", ")", "\n", "\n", "print", "(", "CSREC_topic_all", "[", "real_sequence_idx", "[", "0", "]", ",", "0", ",", "0", ":", "7", "]", ")", "\n", "print", "(", "CSREC_topic_all", "[", "real_sequence_idx", "[", "1", "]", ",", "0", ",", "0", ":", "7", "]", ")", "\n", "print", "(", "CSREC_topic_all", "[", "real_sequence_idx", "[", "2", "]", ",", "0", ",", "0", ":", "7", "]", ")", "\n", "print", "(", "CSREC_topic_all", "[", "real_sequence_idx", "[", "3", "]", ",", "0", ",", "0", ":", "7", "]", ")", "\n", "print", "(", "CSREC_topic_all", "[", "real_sequence_idx", "[", "4", "]", ",", "0", ",", "0", ":", "7", "]", ")", "\n", "print", "(", "CSREC_topic_all", "[", "real_sequence_idx", "[", "5", "]", ",", "0", ",", "0", ":", "7", "]", ")", "\n", "\n", "\n", "\n", "\n", "sess_id_to_value_dict", "=", "dict", "(", ")", "\n", "num_sequence", "=", "len", "(", "real_sequence_idx", ")", "\n", "\n", "result_log_path", "=", "'results/table/'", "+", "str", "(", "model", ".", "configs", ".", "model_name", ")", "+", "\"_\"", "+", "str", "(", "model", ".", "configs", ".", "att_type", ")", "+", "\"_\"", "+", "str", "(", "model", ".", "configs", ".", "data", ")", "+", "\"_value.txt\"", "\n", "result_summary_log_path", "=", "'results/table/'", "+", "str", "(", "model", ".", "configs", ".", "model_name", ")", "+", "\"_\"", "+", "str", "(", "model", ".", "configs", ".", "att_type", ")", "+", "\"_\"", "+", "str", "(", "\n", "model", ".", "configs", ".", "data", ")", "+", "\"_summary.txt\"", "\n", "result_summary_dict", "=", "dict", "(", ")", "# key : 1,2,3 / value : (att_", "\n", "if", "model", ".", "configs", ".", "model_name", "==", "\"NARM\"", ":", "\n", "        ", "att_tensor", "=", "NARM_att", "\n", "reset_tensor", "=", "NARM_reset", "\n", "", "elif", "model", ".", "configs", ".", "model_name", "==", "\"CSREC_v3\"", ":", "\n", "        ", "local_att_tensor", "=", "CSREC_attention_local", "\n", "global_att_tensor", "=", "CSREC_attention_global", "\n", "reset_tensor", "=", "CSREC_reset", "\n", "", "with", "open", "(", "result_log_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "temp_itr", "in", "range", "(", "num_sequence", ")", ":", "\n", "            ", "result_summary_dict", "[", "temp_itr", "]", "=", "[", "]", "\n", "sess_id_to_value_dict", "[", "temp_itr", "]", "=", "[", "]", "\n", "seq_id", "=", "real_sequence_idx", "[", "temp_itr", "]", "\n", "current_seq", "=", "inputs", "[", "seq_id", ",", ":", "]", "\n", "current_seq_len", "=", "len", "(", "current_seq", ")", "\n", "f", ".", "write", "(", "\"Ssession id\"", "+", "\"\\t\"", "+", "str", "(", "temp_itr", "+", "1", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "# write item_id", "\n", "for", "current_item_id_temp_idx", "in", "range", "(", "current_seq_len", ")", ":", "\n", "                ", "current_item_id", "=", "current_seq", "[", "current_item_id_temp_idx", "]", "\n", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "current_item_id_temp_idx", "+", "1", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "current_item_id", "in", "current_seq", ":", "\n", "                ", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "current_item_id", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "current_item_id", "in", "current_seq", ":", "\n", "                ", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                    ", "title", "=", "item2label", "[", "current_item_id", "]", "[", "0", "]", "\n", "f", ".", "write", "(", "str", "(", "title", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "current_item_id", "in", "current_seq", ":", "\n", "                ", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                    ", "genre", "=", "item2label", "[", "current_item_id", "]", "[", "1", "]", "\n", "f", ".", "write", "(", "str", "(", "genre", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "if", "model", ".", "configs", ".", "model_name", "==", "\"CSREC_v3\"", ":", "\n", "                ", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "if", "model", ".", "configs", ".", "model_name", "==", "\"NARM\"", ":", "\n", "                ", "for", "current_item_id_temp_idx", "in", "range", "(", "current_seq_len", ")", ":", "\n", "                    ", "current_item_id", "=", "current_seq", "[", "current_item_id_temp_idx", "]", "\n", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                        ", "hidden_att", "=", "att_tensor", "[", "seq_id", ",", "current_item_id_temp_idx", "]", "\n", "f", ".", "write", "(", "str", "(", "hidden_att", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "if", "current_item_id_temp_idx", "==", "98", ":", "\n", "                        ", "break", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "", "elif", "model", ".", "configs", ".", "model_name", "==", "\"CSREC_v3\"", ":", "\n", "                ", "for", "current_item_id_temp_idx", "in", "range", "(", "current_seq_len", ")", ":", "\n", "                    ", "current_item_id", "=", "current_seq", "[", "current_item_id_temp_idx", "]", "\n", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                        ", "hidden_att", "=", "local_att_tensor", "[", "seq_id", ",", "current_item_id_temp_idx", "]", "\n", "f", ".", "write", "(", "str", "(", "hidden_att", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "if", "current_item_id_temp_idx", "==", "98", ":", "\n", "                        ", "break", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "current_item_id_temp_idx", "in", "range", "(", "current_seq_len", ")", ":", "\n", "                    ", "current_item_id", "=", "current_seq", "[", "current_item_id_temp_idx", "]", "\n", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                        ", "hidden_att", "=", "global_att_tensor", "[", "seq_id", ",", "current_item_id_temp_idx", "]", "\n", "f", ".", "write", "(", "str", "(", "hidden_att", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "if", "current_item_id_temp_idx", "==", "98", ":", "\n", "                        ", "break", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "for", "current_item_id_temp_idx", "in", "range", "(", "current_seq_len", ")", ":", "\n", "                ", "current_item_id", "=", "current_seq", "[", "current_item_id_temp_idx", "]", "\n", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                    ", "reset_value", "=", "reset_tensor", "[", "seq_id", ",", "current_item_id_temp_idx", ",", ":", "]", "\n", "reset_value_norm", "=", "LA", ".", "norm", "(", "reset_value", ",", "2", ")", "\n", "f", ".", "write", "(", "str", "(", "reset_value_norm", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "if", "current_item_id_temp_idx", "==", "98", ":", "\n", "                    ", "break", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "current_item_id_temp_idx", "in", "range", "(", "current_seq_len", ")", ":", "\n", "                ", "current_item_id", "=", "current_seq", "[", "current_item_id_temp_idx", "]", "\n", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                    ", "reset_value", "=", "reset_tensor", "[", "seq_id", ",", "current_item_id_temp_idx", ",", ":", "]", "\n", "reset_value_mean", "=", "np", ".", "mean", "(", "reset_value", ")", "\n", "f", ".", "write", "(", "str", "(", "reset_value_mean", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "if", "current_item_id_temp_idx", "==", "98", ":", "\n", "                    ", "break", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "if", "model", ".", "configs", ".", "model_name", "==", "\"CSREC_v3\"", ":", "\n", "                ", "for", "current_item_id_temp_idx", "in", "range", "(", "current_seq_len", ")", ":", "\n", "                    ", "current_item_id", "=", "current_seq", "[", "current_item_id_temp_idx", "]", "\n", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                        ", "t2_value", "=", "CSREC_t2", "[", "seq_id", ",", "current_item_id_temp_idx", ",", ":", "]", "\n", "t2_value_norm", "=", "LA", ".", "norm", "(", "t2_value", ",", "2", ")", "\n", "f", ".", "write", "(", "str", "(", "t2_value_norm", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "if", "current_item_id_temp_idx", "==", "98", ":", "\n", "                        ", "break", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "current_item_id_temp_idx", "in", "range", "(", "current_seq_len", ")", ":", "\n", "                    ", "current_item_id", "=", "current_seq", "[", "current_item_id_temp_idx", "]", "\n", "if", "int", "(", "current_item_id", ")", "!=", "-", "1", ":", "\n", "                        ", "t2_value", "=", "CSREC_t2", "[", "seq_id", ",", "current_item_id_temp_idx", ",", ":", "]", "\n", "t2_value_mean", "=", "np", ".", "mean", "(", "t2_value", ")", "\n", "f", ".", "write", "(", "str", "(", "t2_value_mean", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "if", "current_item_id_temp_idx", "==", "98", ":", "\n", "                        ", "break", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "if", "model", ".", "configs", ".", "model_name", "==", "\"NARM\"", ":", "\n", "                ", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "", "'''\n    print(inputs.shape) # (34682, 100)\n    print(NARM_att[real_sequence_idx].shape) # (928, 99)\n    print(NARM_reset.shape) # overall_seq * maxlen * hidden\n    print(CSREC_topic_last.shape)\n    print(CSREC_topic_all.shape)\n    print(CSREC_attention_topic.shape)\n    print(CSREC_t2.shape)\n    print(CSREC_reset.shape)\n    print(CSREC_attention_normal.shape)\n    print(CSREC_attention_local.shape)\n    print(CSREC_attention_global.shape)\n    '''", "\n", "\n", "recall_list", "=", "[", "]", "\n", "mrr_list", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "model", ".", "k", ")", ")", ":", "\n", "        ", "recall", "=", "np", ".", "asarray", "(", "recalls", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "mrr", "=", "np", ".", "asarray", "(", "mrrs", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "mrr_list", ".", "append", "(", "mrr", ")", "\n", "\n", "", "return", "recall_list", ",", "mrr_list", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.get_topic_feature": [[589, 680], ["model.sess.run", "model.sess.run", "numpy.eye", "numpy.matmul", "utils.get_topic_feature.cosine_similarity"], "function", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run"], ["", "def", "get_topic_feature", "(", "model", ",", "idx2item", ",", "item2label", ",", "genre2idx", ",", "num_similar", "=", "50", ")", ":", "\n", "    ", "from", "scipy", "import", "spatial", "\n", "from", "sklearn", ".", "manifold", "import", "TSNE", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "def", "eucllidean_distance", "(", "a", ",", "A", ")", ":", "\n", "        ", "sq_dist", "=", "(", "A", "**", "2", ")", ".", "sum", "(", "1", ")", "+", "a", ".", "dot", "(", "a", ")", "-", "2", "*", "A", ".", "dot", "(", "a", ")", "\n", "return", "sq_dist", "\n", "\n", "", "def", "cosine_similarity", "(", "a", ",", "A", ")", ":", "\n", "        ", "cos_dist", "=", "[", "]", "\n", "for", "item", "in", "A", ":", "\n", "            ", "cos_dist", ".", "append", "(", "1", "-", "spatial", ".", "distance", ".", "cosine", "(", "a", ",", "item", ")", ")", "\n", "", "return", "np", ".", "array", "(", "cos_dist", ")", "\n", "\n", "", "def", "l2_normalize", "(", "mat", ")", ":", "\n", "        ", "res", "=", "(", "mat", "-", "mat", ".", "mean", "(", "axis", "=", "0", ")", ")", "/", "mat", ".", "std", "(", "axis", "=", "0", ")", "\n", "return", "res", "\n", "", "num_topics", "=", "model", ".", "num_topics", "\n", "Wemb", "=", "model", ".", "sess", ".", "run", "(", "\"CSREC/Wemb:0\"", ")", "# (num_item+1) * embedding", "\n", "W_thetat2", "=", "model", ".", "sess", ".", "run", "(", "\"CSREC/W_thetat2:0\"", ")", "# num_topic * embedding", "\n", "topic_onehot", "=", "np", ".", "eye", "(", "num_topics", ")", "\n", "topic_vector", "=", "np", ".", "matmul", "(", "topic_onehot", ",", "W_thetat2", ")", "\n", "cosine_similarity", "(", "topic_vector", "[", "0", "]", ",", "Wemb", ")", "\n", "\n", "top_items", "=", "[", "]", "\n", "for", "vector", "in", "topic_vector", ":", "\n", "#top_items.append(idx2item[np.argsort(cosine_similarity(l2_normalize(vector), l2_normalize(Wemb[1:,:])))[::-1][:num_similar]])", "\n", "        ", "top_items", ".", "append", "(", "idx2item", "[", "np", ".", "argsort", "(", "cosine_similarity", "(", "vector", ",", "Wemb", "[", "1", ":", ",", ":", "]", ")", ")", "[", ":", ":", "-", "1", "]", "[", ":", "num_similar", "]", "]", ")", "\n", "\n", "#for items in top_items:", "\n", "#    for item in items:", "\n", "#        print(item, end=',')", "\n", "#    print()", "\n", "\n", "", "X", "=", "np", ".", "concatenate", "(", "[", "l2_normalize", "(", "topic_vector", ")", ",", "l2_normalize", "(", "Wemb", "[", "1", ":", ",", ":", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "X_embedded", "=", "TSNE", "(", "n_components", "=", "2", ")", ".", "fit_transform", "(", "X", ")", "\n", "\n", "genre_list", "=", "[", "]", "\n", "genre_idx_list", "=", "[", "]", "\n", "item_list", "=", "[", "]", "\n", "for", "temp_itr", "in", "range", "(", "len", "(", "X_embedded", "[", "50", ":", "]", ")", ")", ":", "# start from 0", "\n", "        ", "item", "=", "idx2item", "[", "temp_itr", "+", "1", "]", "# ml data item idx", "\n", "title", "=", "item2label", "[", "item", "]", "[", "0", "]", "\n", "genre", "=", "item2label", "[", "item", "]", "[", "1", "]", "\n", "genre_idx", "=", "genre2idx", "[", "genre", "]", "\n", "item_list", ".", "append", "(", "item", ")", "\n", "genre_list", ".", "append", "(", "genre", ")", "\n", "genre_idx_list", ".", "append", "(", "genre_idx", ")", "\n", "\n", "", "item_x", "=", "X_embedded", "[", "50", ":", "]", "[", ":", ",", "0", "]", "\n", "item_y", "=", "X_embedded", "[", "50", ":", "]", "[", ":", ",", "1", "]", "\n", "topic_x", "=", "X_embedded", "[", ":", "50", "]", "[", ":", ",", "0", "]", "\n", "topic_y", "=", "X_embedded", "[", ":", "50", "]", "[", ":", ",", "1", "]", "\n", "unique", "=", "np", ".", "unique", "(", "genre_list", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "\n", "colors", "=", "[", "plt", ".", "cm", ".", "jet", "(", "i", "/", "float", "(", "len", "(", "unique", ")", "-", "1", "+", "1", ")", ")", "for", "i", "in", "range", "(", "len", "(", "unique", ")", "+", "1", ")", "]", "\n", "for", "i", ",", "u", "in", "enumerate", "(", "unique", ")", ":", "\n", "        ", "xi", "=", "[", "item_x", "[", "j", "]", "for", "j", "in", "range", "(", "len", "(", "item_x", ")", ")", "if", "genre_list", "[", "j", "]", "==", "u", "]", "\n", "yi", "=", "[", "item_y", "[", "j", "]", "for", "j", "in", "range", "(", "len", "(", "item_x", ")", ")", "if", "genre_list", "[", "j", "]", "==", "u", "]", "\n", "ax", ".", "scatter", "(", "xi", ",", "yi", ",", "c", "=", "colors", "[", "i", "]", ",", "label", "=", "str", "(", "u", ")", ",", "marker", "=", "'o'", ",", "s", "=", "5", ")", "\n", "#plt.scatter(X_embedded[50:][:,0], X_embedded[50:][:,1], marker='o',s=5,c=np.asarray(genre_idx_list),label=np.asarray(genre_list))", "\n", "", "ax", ".", "scatter", "(", "topic_x", ",", "topic_y", ",", "marker", "=", "'x'", ",", "s", "=", "5", ",", "c", "=", "colors", "[", "-", "1", "]", ",", "label", "=", "\"Global Context\"", ")", "\n", "# https://stackoverflow.com/questions/4700614/how-to-put-the-legend-out-of-the-plot", "\n", "\n", "box", "=", "ax", ".", "get_position", "(", ")", "\n", "ax", ".", "set_position", "(", "[", "box", ".", "x0", ",", "box", ".", "y0", "+", "box", ".", "height", "*", "0.1", ",", "\n", "box", ".", "width", ",", "box", ".", "height", "*", "0.9", "]", ")", "\n", "\n", "# Put a legend below current axis", "\n", "ax", ".", "legend", "(", "loc", "=", "'upper center'", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "-", "0.05", ")", ",", "\n", "fancybox", "=", "True", ",", "shadow", "=", "True", ",", "ncol", "=", "5", ")", "\n", "\n", "\n", "#plt.legend(loc=\"upper right\",fontsize =10) # https://matplotlib.org/api/legend_api.html", "\n", "plt", ".", "savefig", "(", "\"results/figs/Item_Topic_Embedding_2d(without_annot).pdf\"", ",", "bbox_inches", "=", "'tight'", ",", "dpi", "=", "1000", ")", "\n", "\n", "topic_list", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "50", ")", ":", "\n", "        ", "topic_name", "=", "\"t\"", "+", "str", "(", "itr", "+", "1", ")", "\n", "topic_list", ".", "append", "(", "topic_name", ")", "\n", "", "for", "i", ",", "txt", "in", "enumerate", "(", "item_list", ")", ":", "\n", "        ", "ax", ".", "annotate", "(", "txt", ",", "(", "item_x", "[", "i", "]", ",", "item_y", "[", "i", "]", ")", ",", "fontsize", "=", "2", ")", "\n", "", "for", "i", ",", "txt", "in", "enumerate", "(", "topic_list", ")", ":", "\n", "        ", "ax", ".", "annotate", "(", "txt", ",", "(", "topic_x", "[", "i", "]", ",", "topic_y", "[", "i", "]", ")", ",", "fontsize", "=", "2", ")", "\n", "", "plt", ".", "savefig", "(", "\"results/figs/Item_Topic_Embedding_2d(with_annot).pdf\"", ",", "bbox_inches", "=", "'tight'", ",", "dpi", "=", "1000", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.CustomGRUCell.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rnn_hidden_size", ",", "embedding_size", ")", ":", "\n", "        ", "self", ".", "rnn_hidden_size", "=", "rnn_hidden_size", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.CustomGRUCell.state_size": [[12, 15], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rnn_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.CustomGRUCell.output_size": [[16, 19], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.CustomGRUCell.__call__": [[20, 39], ["tensorflow.concat", "tensorflow.nn.sigmoid", "tensorflow.split", "tensorflow.nn.tanh", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "type", "tensorflow.multiply"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "embedded_rnn_x", ",", "rnn_hidden", ",", "scope", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "\n", "# update gate", "\n", "            ", "self", ".", "w", "=", "tf", ".", "get_variable", "(", "'w_xi'", ",", "shape", "=", "[", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "2", "*", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "None", ")", "\n", "self", ".", "b", "=", "tf", ".", "get_variable", "(", "'b_z'", ",", "shape", "=", "[", "2", "*", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "None", ")", "\n", "\n", "# output gate variable", "\n", "self", ".", "w_xh", "=", "tf", ".", "get_variable", "(", "'w_xh'", ",", "shape", "=", "[", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "None", ")", "\n", "self", ".", "w_hh", "=", "tf", ".", "get_variable", "(", "'w_hh'", ",", "shape", "=", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "None", ")", "\n", "self", ".", "b_h", "=", "tf", ".", "get_variable", "(", "'b_h'", ",", "shape", "=", "[", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "None", ")", "\n", "\n", "", "xh", "=", "tf", ".", "concat", "(", "[", "embedded_rnn_x", ",", "rnn_hidden", "]", ",", "axis", "=", "1", ")", "\n", "value", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "self", ".", "w", ")", "+", "self", ".", "b", ")", "\n", "r_g", ",", "z_g", "=", "tf", ".", "split", "(", "value", "=", "value", ",", "num_or_size_splits", "=", "2", ",", "axis", "=", "1", ")", "\n", "\n", "new_rnn_hidden_tilda", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "embedded_rnn_x", ",", "self", ".", "w_xh", ")", "+", "tf", ".", "matmul", "(", "tf", ".", "multiply", "(", "r_g", ",", "rnn_hidden", ")", ",", "self", ".", "w_hh", ")", "+", "self", ".", "b_h", ")", "\n", "new_rnn_hidden", "=", "tf", ".", "multiply", "(", "z_g", ",", "rnn_hidden", ")", "+", "tf", ".", "multiply", "(", "1", "-", "z_g", ",", "new_rnn_hidden_tilda", ")", "\n", "\n", "return", "(", "new_rnn_hidden", ",", "r_g", ")", ",", "new_rnn_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v1.__init__": [[41, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rnn_hidden_size", ",", "embedding_size", ",", "num_topics", ",", "theta", ",", "W_thetatv", ",", "weight_init", "=", "None", ",", "bias_init", "=", "None", ",", "gate_bias_init", "=", "None", ")", ":", "\n", "        ", "self", ".", "rnn_hidden_size", "=", "rnn_hidden_size", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "num_topics", "=", "num_topics", "\n", "self", ".", "weight_init", "=", "weight_init", "\n", "self", ".", "bias_init", "=", "bias_init", "\n", "self", ".", "gate_bias_init", "=", "gate_bias_init", "\n", "self", ".", "W_thetatv", "=", "W_thetatv", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v1.state_size": [[51, 54], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v1.output_size": [[55, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v1.__call__": [[59, 120], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.einsum", "tensorflow.transpose", "utils.compute_alpha_mat", "tensorflow.nn.softmax", "tensorflow.einsum", "tensorflow.concat", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.multiply", "tensorflow.concat", "tensorflow.nn.sigmoid", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.tanh", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha_mat"], ["", "def", "__call__", "(", "self", ",", "rnn_x", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "rnn_hidden", "=", "state", "[", "0", "]", "\n", "rnn_state", "=", "state", "[", "1", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"HCRNN\"", ")", ":", "\n", "############ topic attention ###################", "\n", "            ", "W_theta_alpha", "=", "tf", ".", "get_variable", "(", "'W_theta_alpha'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_h_alpha", "=", "tf", ".", "get_variable", "(", "'W_h_alpha'", ",", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "Bi_alpha_vector", "=", "tf", ".", "get_variable", "(", "'Bi_alpha_vector'", ",", "[", "1", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "\n", "############ T1 (Topic) gate ###################", "\n", "W_xht", "=", "tf", ".", "get_variable", "(", "'W_xht'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_ct1", "=", "tf", ".", "get_variable", "(", "'W_ct1'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_t1", "=", "tf", ".", "get_variable", "(", "'b_t1'", ",", "self", ".", "embedding_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "############### reset gate ################", "\n", "W_xhr", "=", "tf", ".", "get_variable", "(", "'W_xhr'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_cr", "=", "tf", ".", "get_variable", "(", "'W_cr'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_r", "=", "tf", ".", "get_variable", "(", "'b_r'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "gate_bias_init", ")", "\n", "\n", "################ h_tilda ##################", "\n", "Whxh", "=", "tf", ".", "get_variable", "(", "'Whxh'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_h", "=", "tf", ".", "get_variable", "(", "'b_h'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "############## z gate #############", "\n", "W_xhz", "=", "tf", ".", "get_variable", "(", "'W_xhz'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_cz", "=", "tf", ".", "get_variable", "(", "'W_cz'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_z", "=", "tf", ".", "get_variable", "(", "'b_z'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "gate_bias_init", ")", "\n", "\n", "############################################ Attention (rnn_state_tilda) ############################################", "\n", "theta_embedding_stack", "=", "tf", ".", "einsum", "(", "'ij,jk->ijk'", ",", "self", ".", "theta", ",", "self", ".", "W_thetatv", ")", "# batch * topic * hidden", "\n", "theta_embedding_stack", "=", "tf", ".", "transpose", "(", "theta_embedding_stack", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# topic * batch * hidden", "\n", "\n", "squares", "=", "compute_alpha_mat", "(", "theta_embedding_stack", ",", "rnn_hidden", ",", "W_theta_alpha", ",", "W_h_alpha", ",", "Bi_alpha_vector", ",", "self", ".", "embedding_size", ",", "self", ".", "num_topics", ")", "\n", "# squares : num_topic x batch_size", "\n", "\n", "self", ".", "weight", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "squares", ")", ",", "axis", "=", "1", ")", "# batch_size * num_topic", "\n", "new_rnn_state_tilda", "=", "tf", ".", "einsum", "(", "'ij,jk->ik'", ",", "self", ".", "weight", ",", "self", ".", "W_thetatv", ")", "\n", "\n", "############################################ Recurrent Operation ############################################", "\n", "xh", "=", "tf", ".", "concat", "(", "[", "rnn_x", ",", "rnn_hidden", "]", ",", "axis", "=", "1", ")", "\n", "T1", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xht", ")", "+", "tf", ".", "matmul", "(", "rnn_state", ",", "W_ct1", ")", "+", "b_t1", ")", "\n", "new_rnn_state", "=", "tf", ".", "multiply", "(", "(", "1", "-", "T1", ")", ",", "rnn_state", ")", "+", "tf", ".", "multiply", "(", "T1", ",", "new_rnn_state_tilda", ")", "\n", "\n", "r", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xhr", ")", "+", "tf", ".", "matmul", "(", "rnn_state", ",", "W_cr", ")", "+", "b_r", ")", "\n", "rh_1", "=", "tf", ".", "multiply", "(", "r", ",", "rnn_hidden", ")", "\n", "xrh_1", "=", "tf", ".", "concat", "(", "[", "rnn_x", ",", "rh_1", "]", ",", "axis", "=", "1", ")", "\n", "h_tilda", "=", "tf", ".", "matmul", "(", "xrh_1", ",", "Whxh", ")", "+", "b_h", "\n", "z", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xhz", ")", "+", "tf", ".", "matmul", "(", "new_rnn_state", ",", "W_cz", ")", "+", "b_z", ")", "\n", "new_rnn_hidden", "=", "tf", ".", "multiply", "(", "(", "1", "-", "z", ")", ",", "rnn_hidden", ")", "+", "tf", ".", "multiply", "(", "z", ",", "tf", ".", "nn", ".", "tanh", "(", "h_tilda", ")", ")", "\n", "\n", "", "return", "(", "new_rnn_hidden", ",", "new_rnn_state", ",", "r", ")", ",", "(", "new_rnn_hidden", ",", "new_rnn_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v2.__init__": [[122, 131], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rnn_hidden_size", ",", "embedding_size", ",", "num_topics", ",", "theta", ",", "W_thetatv", ",", "weight_init", "=", "None", ",", "bias_init", "=", "None", ",", "gate_bias_init", "=", "None", ")", ":", "\n", "        ", "self", ".", "rnn_hidden_size", "=", "rnn_hidden_size", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "num_topics", "=", "num_topics", "\n", "self", ".", "weight_init", "=", "weight_init", "\n", "self", ".", "bias_init", "=", "bias_init", "\n", "self", ".", "gate_bias_init", "=", "gate_bias_init", "\n", "self", ".", "W_thetatv", "=", "W_thetatv", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v2.state_size": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v2.output_size": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v2.__call__": [[140, 203], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.einsum", "tensorflow.transpose", "utils.compute_alpha_mat", "tensorflow.nn.softmax", "tensorflow.einsum", "tensorflow.concat", "tensorflow.nn.sigmoid", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.multiply", "tensorflow.concat", "tensorflow.nn.sigmoid", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.tanh", "tensorflow.clip_by_value", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha_mat"], ["", "def", "__call__", "(", "self", ",", "rnn_x", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "rnn_hidden", "=", "state", "[", "0", "]", "\n", "rnn_state", "=", "state", "[", "1", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"HCRNN\"", ")", ":", "\n", "############ topic attention ###################", "\n", "            ", "W_theta_alpha", "=", "tf", ".", "get_variable", "(", "'W_theta_alpha'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_h_alpha", "=", "tf", ".", "get_variable", "(", "'W_h_alpha'", ",", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "Bi_alpha_vector", "=", "tf", ".", "get_variable", "(", "'Bi_alpha_vector'", ",", "[", "1", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "\n", "############ T1 (Topic) gate ###################", "\n", "W_xht", "=", "tf", ".", "get_variable", "(", "'W_xht'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_ct1", "=", "tf", ".", "get_variable", "(", "'W_ct1'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_t1", "=", "tf", ".", "get_variable", "(", "'b_t1'", ",", "self", ".", "embedding_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "############### reset gate ################", "\n", "W_xhr", "=", "tf", ".", "get_variable", "(", "'W_xhr'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_ct2", "=", "tf", ".", "get_variable", "(", "'W_ct2'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ",", "\n", "constraint", "=", "lambda", "x", ":", "tf", ".", "clip_by_value", "(", "x", ",", "1e-12", ",", "np", ".", "infty", ")", ")", "\n", "b_r", "=", "tf", ".", "get_variable", "(", "'b_r'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "gate_bias_init", ")", "\n", "\n", "################ h_tilda ##################", "\n", "Whxh", "=", "tf", ".", "get_variable", "(", "'Whxh'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_h", "=", "tf", ".", "get_variable", "(", "'b_h'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "############## z gate #############", "\n", "W_xhz", "=", "tf", ".", "get_variable", "(", "'W_xhz'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_cz", "=", "tf", ".", "get_variable", "(", "'W_cz'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_z", "=", "tf", ".", "get_variable", "(", "'b_z'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "gate_bias_init", ")", "\n", "\n", "############################################ Attention (rnn_state_tilda) ############################################", "\n", "theta_embedding_stack", "=", "tf", ".", "einsum", "(", "'ij,jk->ijk'", ",", "self", ".", "theta", ",", "self", ".", "W_thetatv", ")", "# batch * topic * hidden", "\n", "theta_embedding_stack", "=", "tf", ".", "transpose", "(", "theta_embedding_stack", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# topic * batch * hidden", "\n", "\n", "squares", "=", "compute_alpha_mat", "(", "theta_embedding_stack", ",", "rnn_hidden", ",", "W_theta_alpha", ",", "W_h_alpha", ",", "Bi_alpha_vector", ",", "self", ".", "embedding_size", ",", "self", ".", "num_topics", ")", "\n", "# squares : num_topic x batch_size", "\n", "\n", "self", ".", "weight", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "squares", ")", ",", "axis", "=", "1", ")", "# batch_size * num_topic", "\n", "new_rnn_state_tilda", "=", "tf", ".", "einsum", "(", "'ij,jk->ik'", ",", "self", ".", "weight", ",", "self", ".", "W_thetatv", ")", "\n", "\n", "############################################ Recurrent Operation ############################################", "\n", "xh", "=", "tf", ".", "concat", "(", "[", "rnn_x", ",", "rnn_hidden", "]", ",", "axis", "=", "1", ")", "\n", "T1", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xht", ")", "+", "tf", ".", "matmul", "(", "rnn_state", ",", "W_ct1", ")", "+", "b_t1", ")", "\n", "new_rnn_state", "=", "tf", ".", "multiply", "(", "(", "1", "-", "T1", ")", ",", "rnn_state", ")", "+", "tf", ".", "multiply", "(", "T1", ",", "new_rnn_state_tilda", ")", "\n", "\n", "x_state_sim", "=", "tf", ".", "multiply", "(", "rnn_x", ",", "new_rnn_state", ")", "\n", "r", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xhr", ")", "+", "tf", ".", "matmul", "(", "x_state_sim", ",", "W_ct2", ")", "+", "b_r", ")", "\n", "rh_1", "=", "tf", ".", "multiply", "(", "r", ",", "rnn_hidden", ")", "\n", "xrh_1", "=", "tf", ".", "concat", "(", "[", "rnn_x", ",", "rh_1", "]", ",", "axis", "=", "1", ")", "\n", "h_tilda", "=", "tf", ".", "matmul", "(", "xrh_1", ",", "Whxh", ")", "+", "b_h", "\n", "z", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xhz", ")", "+", "tf", ".", "matmul", "(", "new_rnn_state", ",", "W_cz", ")", "+", "b_z", ")", "\n", "new_rnn_hidden", "=", "tf", ".", "multiply", "(", "(", "1", "-", "z", ")", ",", "rnn_hidden", ")", "+", "tf", ".", "multiply", "(", "z", ",", "tf", ".", "nn", ".", "tanh", "(", "h_tilda", ")", ")", "\n", "\n", "", "return", "(", "new_rnn_hidden", ",", "new_rnn_state", ",", "r", ")", ",", "(", "new_rnn_hidden", ",", "new_rnn_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v3.__init__": [[205, 214], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rnn_hidden_size", ",", "embedding_size", ",", "num_topics", ",", "theta", ",", "W_thetatv", ",", "weight_init", "=", "None", ",", "bias_init", "=", "None", ",", "gate_bias_init", "=", "None", ")", ":", "\n", "        ", "self", ".", "rnn_hidden_size", "=", "rnn_hidden_size", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "theta", "=", "theta", "\n", "self", ".", "num_topics", "=", "num_topics", "\n", "self", ".", "weight_init", "=", "weight_init", "\n", "self", ".", "bias_init", "=", "bias_init", "\n", "self", ".", "gate_bias_init", "=", "gate_bias_init", "\n", "self", ".", "W_thetatv", "=", "W_thetatv", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v3.state_size": [[215, 218], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v3.output_size": [[219, 222], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN_cell.HCRNN_cell_v3.__call__": [[223, 291], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.einsum", "tensorflow.transpose", "utils.compute_alpha_mat", "tensorflow.nn.softmax", "tensorflow.einsum", "tensorflow.concat", "tensorflow.nn.sigmoid", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.multiply", "tensorflow.concat", "tensorflow.nn.sigmoid", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.tanh", "tensorflow.clip_by_value", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha_mat"], ["", "def", "__call__", "(", "self", ",", "rnn_x", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "rnn_hidden", "=", "state", "[", "0", "]", "\n", "rnn_state", "=", "state", "[", "1", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"HCRNN\"", ")", ":", "\n", "############ topic attention ###################", "\n", "            ", "W_theta_alpha", "=", "tf", ".", "get_variable", "(", "'W_theta_alpha'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_h_alpha", "=", "tf", ".", "get_variable", "(", "'W_h_alpha'", ",", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "Bi_alpha_vector", "=", "tf", ".", "get_variable", "(", "'Bi_alpha_vector'", ",", "[", "1", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "\n", "############ T1 (Topic) gate ###################", "\n", "W_xht", "=", "tf", ".", "get_variable", "(", "'W_xht'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_ct1", "=", "tf", ".", "get_variable", "(", "'W_ct1'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_t1", "=", "tf", ".", "get_variable", "(", "'b_t1'", ",", "self", ".", "embedding_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "############## T2 gate ####################", "\n", "W_ct2", "=", "tf", ".", "get_variable", "(", "'W_ct2'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ",", "\n", "constraint", "=", "lambda", "x", ":", "tf", ".", "clip_by_value", "(", "x", ",", "1e-12", ",", "np", ".", "infty", ")", ")", "\n", "b_t2", "=", "tf", ".", "get_variable", "(", "'b_t2'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "gate_bias_init", ")", "\n", "\n", "############### reset gate ################", "\n", "W_xhr", "=", "tf", ".", "get_variable", "(", "'W_xhr'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_r", "=", "tf", ".", "get_variable", "(", "'b_r'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "gate_bias_init", ")", "\n", "\n", "################ h_tilda ##################", "\n", "Whxh", "=", "tf", ".", "get_variable", "(", "'Whxh'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_h", "=", "tf", ".", "get_variable", "(", "'b_h'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "############## z gate #############", "\n", "W_xhz", "=", "tf", ".", "get_variable", "(", "'W_xhz'", ",", "(", "self", ".", "embedding_size", "+", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_cz", "=", "tf", ".", "get_variable", "(", "'W_cz'", ",", "(", "self", ".", "embedding_size", ",", "self", ".", "rnn_hidden_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_z", "=", "tf", ".", "get_variable", "(", "'b_z'", ",", "self", ".", "rnn_hidden_size", ",", "tf", ".", "float32", ",", "initializer", "=", "self", ".", "gate_bias_init", ")", "\n", "\n", "############################################ Attention (rnn_state_tilda) ############################################", "\n", "theta_embedding_stack", "=", "tf", ".", "einsum", "(", "'ij,jk->ijk'", ",", "self", ".", "theta", ",", "self", ".", "W_thetatv", ")", "# batch * topic * hidden", "\n", "theta_embedding_stack", "=", "tf", ".", "transpose", "(", "theta_embedding_stack", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# topic * batch * hidden", "\n", "\n", "squares", "=", "compute_alpha_mat", "(", "theta_embedding_stack", ",", "rnn_hidden", ",", "W_theta_alpha", ",", "W_h_alpha", ",", "Bi_alpha_vector", ",", "self", ".", "embedding_size", ",", "self", ".", "num_topics", ")", "\n", "# squares : num_topic x batch_size", "\n", "\n", "self", ".", "topic_att", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "squares", ")", ",", "axis", "=", "1", ")", "# batch_size * num_topic", "\n", "new_rnn_state_tilda", "=", "tf", ".", "einsum", "(", "'ij,jk->ik'", ",", "self", ".", "topic_att", ",", "self", ".", "W_thetatv", ")", "\n", "\n", "############################################ Recurrent Operation ############################################", "\n", "xh", "=", "tf", ".", "concat", "(", "[", "rnn_x", ",", "rnn_hidden", "]", ",", "axis", "=", "1", ")", "\n", "T1", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xht", ")", "+", "tf", ".", "matmul", "(", "rnn_state", ",", "W_ct1", ")", "+", "b_t1", ")", "\n", "new_rnn_state", "=", "tf", ".", "multiply", "(", "(", "1", "-", "T1", ")", ",", "rnn_state", ")", "+", "tf", ".", "multiply", "(", "T1", ",", "new_rnn_state_tilda", ")", "\n", "\n", "x_state_sim", "=", "tf", ".", "multiply", "(", "rnn_x", ",", "new_rnn_state", ")", "\n", "T2", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "x_state_sim", ",", "W_ct2", ")", "+", "b_t2", ")", "\n", "\n", "r", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xhr", ")", "+", "b_r", ")", "\n", "rh_1", "=", "tf", ".", "multiply", "(", "r", ",", "tf", ".", "multiply", "(", "T2", ",", "rnn_hidden", ")", ")", "\n", "xrh_1", "=", "tf", ".", "concat", "(", "[", "rnn_x", ",", "rh_1", "]", ",", "axis", "=", "1", ")", "\n", "h_tilda", "=", "tf", ".", "matmul", "(", "xrh_1", ",", "Whxh", ")", "+", "b_h", "\n", "z", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "xh", ",", "W_xhz", ")", "+", "tf", ".", "matmul", "(", "new_rnn_state", ",", "W_cz", ")", "+", "b_z", ")", "\n", "new_rnn_hidden", "=", "tf", ".", "multiply", "(", "(", "1", "-", "z", ")", ",", "rnn_hidden", ")", "+", "tf", ".", "multiply", "(", "z", ",", "tf", ".", "nn", ".", "tanh", "(", "h_tilda", ")", ")", "\n", "\n", "", "return", "(", "new_rnn_hidden", ",", "new_rnn_state", ",", "r", ")", ",", "(", "new_rnn_hidden", ",", "new_rnn_state", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.NSTOPIC.NSTOPIC": [[3, 35], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.elu", "tensorflow.cond", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.zeros_like", "tensorflow.matmul", "tensorflow.nn.softplus", "tensorflow.multiply", "NSTOPIC.NSTOPIC.train_theta"], "function", ["None"], ["def", "NSTOPIC", "(", "emb_topic_x", ",", "num_topics", ",", "embedding_size", ",", "weight_init", ",", "bias_init", ",", "is_training", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"NSTOPIC\"", ")", ":", "\n", "# prior variable", "\n", "############ hidden prior ######################", "\n", "# https://lirnli.wordpress.com/2017/09/27/variational-recurrent-neural-network-vrnn-with-pytorch/", "\n", "# topic variable", "\n", "        ", "w_e_theta", "=", "tf", ".", "get_variable", "(", "'w_e_theta'", ",", "shape", "=", "[", "embedding_size", ",", "embedding_size", "]", ",", "\n", "initializer", "=", "weight_init", ")", "\n", "b_e_theta", "=", "tf", ".", "get_variable", "(", "'b_e_theta'", ",", "shape", "=", "[", "embedding_size", "]", ",", "\n", "initializer", "=", "bias_init", ")", "\n", "\n", "w_theta_mu", "=", "tf", ".", "get_variable", "(", "'w_theta_mu'", ",", "shape", "=", "[", "embedding_size", ",", "num_topics", "]", ",", "initializer", "=", "weight_init", ")", "\n", "b_theta_mu", "=", "tf", ".", "get_variable", "(", "'b_tehta_mu'", ",", "shape", "=", "[", "num_topics", "]", ",", "initializer", "=", "bias_init", ")", "\n", "w_theta_std", "=", "tf", ".", "get_variable", "(", "'w_theta_std'", ",", "shape", "=", "[", "embedding_size", ",", "num_topics", "]", ",", "initializer", "=", "weight_init", ")", "\n", "b_theta_std", "=", "tf", ".", "get_variable", "(", "'b_theta_std'", ",", "shape", "=", "[", "num_topics", "]", ",", "initializer", "=", "bias_init", ")", "\n", "\n", "############################################ Topic Generation ############################################", "\n", "encoder_for_theta", "=", "tf", ".", "nn", ".", "elu", "(", "tf", ".", "matmul", "(", "emb_topic_x", ",", "w_e_theta", ")", "+", "b_e_theta", ")", "\n", "mu_theta", "=", "tf", ".", "matmul", "(", "encoder_for_theta", ",", "w_theta_mu", ")", "+", "b_theta_mu", "\n", "\n", "def", "train_theta", "(", ")", ":", "\n", "            ", "std_theta", "=", "1e-6", "+", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "matmul", "(", "encoder_for_theta", ",", "w_theta_std", ")", "+", "b_theta_std", ")", "\n", "pre_theta", "=", "mu_theta", "+", "tf", ".", "multiply", "(", "std_theta", ",", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "mu_theta", ")", ",", "0", ",", "1", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "return", "std_theta", ",", "pre_theta", "\n", "", "def", "evaluate_theta", "(", ")", ":", "\n", "            ", "std_theta", "=", "tf", ".", "zeros_like", "(", "mu_theta", ")", "\n", "return", "std_theta", ",", "mu_theta", "\n", "\n", "############################################ Prior Generation ############################################", "\n", "", "std_theta", ",", "pre_theta", "=", "tf", ".", "cond", "(", "is_training", ",", "lambda", ":", "train_theta", "(", ")", ",", "lambda", ":", "evaluate_theta", "(", ")", ")", "\n", "theta", "=", "tf", ".", "nn", ".", "softmax", "(", "pre_theta", ")", "\n", "", "return", "theta", ",", "mu_theta", ",", "std_theta", "\n", "", ""]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.GRU4REC.GRU4REC.__init__": [[8, 65], ["utils.EarlyStopping", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "len", "len", "len", "len", "len", "len", "range", "range", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "k", ",", "configs", ",", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", ",", "init_way", ",", "logger", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "tr_x", "=", "tr_x", "\n", "self", ".", "tr_y", "=", "tr_y", "\n", "self", ".", "val_x", "=", "val_x", "\n", "self", ".", "val_y", "=", "val_y", "\n", "self", ".", "te_x", "=", "te_x", "\n", "self", ".", "te_y", "=", "te_y", "\n", "self", ".", "num_items", "=", "num_items", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "rnn_hidden_size", "=", "configs", ".", "rnn_hidden_size", "\n", "self", ".", "batch_size", "=", "configs", ".", "batch_size", "\n", "self", ".", "num_layers", "=", "configs", ".", "num_layers", "\n", "\n", "# Initialize the optimizer", "\n", "self", ".", "optimizer_type", "=", "configs", ".", "optimizer_type", "\n", "self", ".", "weight_decay", "=", "configs", ".", "weight_decay", "\n", "self", ".", "momentum", "=", "configs", ".", "momentum", "\n", "self", ".", "lr", "=", "configs", ".", "lr", "\n", "self", ".", "eps", "=", "configs", ".", "eps", "\n", "\n", "self", ".", "clip_grad", "=", "configs", ".", "clip_grad", "\n", "self", ".", "clip_grad_threshold", "=", "configs", ".", "clip_grad_threshold", "\n", "self", ".", "lr_decay_step", "=", "configs", ".", "lr_decay_step", "\n", "self", ".", "lr_decay", "=", "configs", ".", "lr_decay", "\n", "self", ".", "lr_decay_rate", "=", "configs", ".", "lr_decay_rate", "\n", "self", ".", "drop_prob_ho", "=", "configs", ".", "drop_prob_ho", "\n", "self", ".", "drop_prob_input", "=", "configs", ".", "drop_prob_input", "\n", "self", ".", "drop_prob_recurrent", "=", "configs", ".", "drop_prob_recurrent", "\n", "\n", "# etc", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "time_sort", "=", "configs", ".", "time_sort", "\n", "self", ".", "loss_type", "=", "configs", ".", "loss_type", "\n", "self", ".", "n_epochs", "=", "configs", ".", "n_epochs", "\n", "self", ".", "is_shuffle", "=", "configs", ".", "is_shuffle", "\n", "self", ".", "embedding_size", "=", "configs", ".", "embedding_size", "\n", "self", ".", "num_topics", "=", "configs", ".", "num_topics", "\n", "self", ".", "early_stop", "=", "EarlyStopping", "(", "configs", ".", "max_patience", ")", "\n", "\n", "# batch_iterator", "\n", "self", ".", "tr_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "tr_y", ")", ")", "\n", "self", ".", "val_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "val_y", ")", ")", "\n", "self", ".", "te_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "te_y", ")", ")", "\n", "\n", "# record best epoch", "\n", "self", ".", "max_val_recall", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", "]", "\n", "self", ".", "max_te_recall", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", "]", "\n", "self", ".", "best_epoch", "=", "0", "\n", "\n", "tr_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "tr_x", "]", ";", "val_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "val_x", "]", ";", "te_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "te_x", "]", "\n", "tr_maxlen", "=", "np", ".", "max", "(", "tr_lengths", ")", ";", "val_maxlen", "=", "np", ".", "max", "(", "val_lengths", ")", ";", "te_maxlen", "=", "np", ".", "max", "(", "te_lengths", ")", "\n", "self", ".", "maxlen", "=", "np", ".", "max", "(", "[", "tr_maxlen", ",", "val_maxlen", ",", "te_maxlen", "]", ")", "\n", "self", ".", "maxlen", "=", "None", "\n", "self", ".", "embed_init", ",", "self", ".", "weight_init", ",", "self", ".", "bias_init", ",", "self", ".", "gate_bias_init", ",", "self", ".", "kern_init", "=", "init_way", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.GRU4REC.GRU4REC.run": [[66, 81], ["GRU4REC.GRU4REC.prepare_model", "tensorflow.global_variables_initializer().run", "print", "range", "time.time", "GRU4REC.GRU4REC.train_model", "GRU4REC.GRU4REC.pred_evaluation", "GRU4REC.GRU4REC.pred_evaluation", "utils.write_log", "GRU4REC.GRU4REC.early_stop.validate", "tensorflow.global_variables_initializer", "GRU4REC.GRU4REC.logger.info"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.prepare_model", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.train_model", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.write_log", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.EarlyStopping.validate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "prepare_model", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "print", "(", "\"End of model prepare\"", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tr_pred_loss", "=", "self", ".", "train_model", "(", ")", "\n", "val_pred_loss", ",", "val_recall_list", ",", "val_mrr_list", "=", "self", ".", "pred_evaluation", "(", "mode", "=", "\"valid\"", ")", "\n", "te_pred_loss", ",", "te_recall_list", ",", "te_mrr_list", "=", "self", ".", "pred_evaluation", "(", "mode", "=", "\"test\"", ")", "\n", "\n", "self", ".", "best_epoch", ",", "best_check", "=", "write_log", "(", "self", ".", "logger", ",", "epoch", ",", "tr_pred_loss", ",", "val_pred_loss", ",", "te_pred_loss", ",", "self", ".", "k", ",", "val_recall_list", ",", "val_mrr_list", ",", "\n", "te_recall_list", ",", "te_mrr_list", ",", "self", ".", "max_val_recall", ",", "self", ".", "max_te_recall", ",", "self", ".", "best_epoch", ",", "start_time", ")", "\n", "if", "self", ".", "early_stop", ".", "validate", "(", "val_recall_list", "[", "3", "]", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Training process is stopped early\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.GRU4REC.GRU4REC.prepare_model": [[82, 116], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.dropout", "tensorflow.contrib.rnn.GRUCell", "tensorflow.nn.dynamic_rnn", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.nn.dropout", "tensorflow.nn.tanh", "utils.loss_fn", "tensorflow.matmul", "tensorflow.nn.dropout", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.matmul", "tensorflow.nn.softmax_cross_entropy_with_logits_v2"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.loss_fn"], ["", "", "", "def", "prepare_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "rnn_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "'input'", ")", "\n", "self", ".", "rnn_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'output'", ")", "\n", "self", ".", "mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "'mask'", ")", "\n", "self", ".", "keep_prob_input", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob_input'", ")", "\n", "self", ".", "keep_prob_ho", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob_ho'", ")", "\n", "self", ".", "batch_var_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"variable_length\"", ")", "\n", "\n", "Wemb", "=", "tf", ".", "get_variable", "(", "'Wemb'", ",", "[", "self", ".", "num_items", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "embed_init", ")", "\n", "W_output", "=", "tf", ".", "get_variable", "(", "'W_output'", ",", "[", "1", "*", "self", ".", "rnn_hidden_size", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_output", "=", "tf", ".", "get_variable", "(", "'b_output'", ",", "[", "1", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "Wemb", ",", "self", ".", "rnn_x", ")", "\n", "emb", "=", "tf", ".", "nn", ".", "dropout", "(", "emb", ",", "self", ".", "keep_prob_input", ")", "\n", "\n", "custom_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "num_units", "=", "self", ".", "rnn_hidden_size", ")", "\n", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "custom_cell", ",", "emb", ",", "sequence_length", "=", "self", ".", "batch_var_length", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "last_hidden", "=", "states", "# 512 x 100", "\n", "\n", "# num_items x 2*100", "\n", "if", "self", ".", "loss_type", "==", "\"TOP1\"", ":", "\n", "            ", "proj", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "last_hidden", ",", "self", ".", "keep_prob_ho", ")", "\n", "pred", "=", "tf", ".", "matmul", "(", "proj", ",", "W_output", ")", "+", "b_output", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "tanh", "(", "pred", ")", "\n", "self", ".", "cost", "=", "loss_fn", "(", "self", ".", "rnn_y", ",", "self", ".", "pred", ",", "self", ".", "loss_type", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"CE\"", ":", "\n", "            ", "proj", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "last_hidden", ",", "self", ".", "keep_prob_ho", ")", "\n", "pred", "=", "tf", ".", "matmul", "(", "proj", ",", "W_output", ")", "+", "b_output", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "softmax", "(", "pred", ")", "\n", "self", ".", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "pred", ",", "labels", "=", "self", ".", "rnn_y", ")", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.GRU4REC.GRU4REC.train_model": [[117, 137], ["math.ceil", "range", "numpy.mean", "numpy.random.permutation", "int", "numpy.minimum", "utils.convert_batch_data", "GRU4REC.GRU4REC.sess.run", "batch_loss_list.append", "numpy.float32", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "configs", ".", "is_shuffle", ":", "\n", "            ", "self", ".", "tr_sess_idx", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "tr_sess_idx", ")", "\n", "", "batch_loss_list", "=", "[", "]", "\n", "num_batch", "=", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "self", ".", "tr_sess_idx", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "            ", "start_itr", "=", "self", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "self", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "self", ".", "tr_sess_idx", ")", ")", "\n", "temp_batch_x", "=", "self", ".", "tr_x", "[", "self", ".", "tr_sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "temp_batch_y", "=", "self", ".", "tr_y", "[", "self", ".", "tr_sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "batch_x", ",", "batch_y", ",", "mask", ",", "labels", ",", "lengths", "=", "convert_batch_data", "(", "temp_batch_x", ",", "temp_batch_y", ",", "self", ".", "num_items", ",", "maxlen", "=", "None", ")", "\n", "temp_keep_prob_ho", "=", "1.0", "-", "self", ".", "drop_prob_ho", "\n", "temp_keep_prob_input", "=", "1.0", "-", "self", ".", "drop_prob_input", "\n", "feed_dict", "=", "{", "self", ".", "rnn_x", ":", "batch_x", ",", "self", ".", "rnn_y", ":", "batch_y", ",", "self", ".", "mask", ":", "mask", ",", "\n", "self", ".", "keep_prob_input", ":", "temp_keep_prob_input", ",", "self", ".", "keep_prob_ho", ":", "temp_keep_prob_ho", ",", "\n", "self", ".", "batch_var_length", ":", "lengths", "}", "\n", "_", ",", "pred_loss_", ",", "preds2", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer", ",", "self", ".", "cost", ",", "self", ".", "pred", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "batch_loss_list", ".", "append", "(", "pred_loss_", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "batch_loss_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.GRU4REC.GRU4REC.pred_evaluation": [[138, 178], ["range", "math.ceil", "range", "range", "len", "recalls.append", "mrrs.append", "evaluation_point_count.append", "int", "numpy.minimum", "utils.convert_batch_data", "GRU4REC.GRU4REC.sess.run", "batch_loss_list.append", "utils.evaluation", "len", "recall_list.append", "mrr_list.append", "numpy.mean", "numpy.float32", "len", "numpy.asarray", "numpy.asarray", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.evaluation"], ["", "def", "pred_evaluation", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"valid\"", ":", "\n", "            ", "sess_idx", "=", "self", ".", "val_sess_idx", "\n", "df_x", "=", "self", ".", "val_x", "\n", "df_y", "=", "self", ".", "val_y", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "sess_idx", "=", "self", ".", "te_sess_idx", "\n", "df_x", "=", "self", ".", "te_x", "\n", "df_y", "=", "self", ".", "te_y", "\n", "\n", "", "batch_loss_list", "=", "[", "]", "\n", "recalls", "=", "[", "]", ";", "mrrs", "=", "[", "]", ";", "evaluation_point_count", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", ":", "\n", "            ", "recalls", ".", "append", "(", "0", ")", ";", "mrrs", ".", "append", "(", "0", ")", ";", "evaluation_point_count", ".", "append", "(", "0", ")", "\n", "", "num_batch", "=", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "sess_idx", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "            ", "start_itr", "=", "self", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "self", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "sess_idx", ")", ")", "\n", "temp_batch_x", "=", "df_x", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "temp_batch_y", "=", "df_y", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "batch_x", ",", "batch_y", ",", "mask", ",", "labels", ",", "lengths", "=", "convert_batch_data", "(", "temp_batch_x", ",", "temp_batch_y", ",", "self", ".", "num_items", ",", "maxlen", "=", "None", ")", "\n", "feed_dict", "=", "{", "self", ".", "rnn_x", ":", "batch_x", ",", "self", ".", "rnn_y", ":", "batch_y", ",", "self", ".", "mask", ":", "mask", ",", "\n", "self", ".", "keep_prob_input", ":", "1.0", ",", "self", ".", "keep_prob_ho", ":", "1.0", ",", "\n", "self", ".", "batch_var_length", ":", "lengths", "}", "\n", "preds", ",", "pred_loss_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred", ",", "self", ".", "cost", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "batch_loss_list", ".", "append", "(", "pred_loss_", ")", "\n", "\n", "recalls", ",", "mrrs", ",", "evaluation_point_count", "=", "evaluation", "(", "labels", ",", "preds", ",", "recalls", ",", "mrrs", ",", "evaluation_point_count", ",", "self", ".", "k", ")", "\n", "\n", "", "recall_list", "=", "[", "]", "\n", "mrr_list", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", ":", "\n", "            ", "recall", "=", "np", ".", "asarray", "(", "recalls", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "mrr", "=", "np", ".", "asarray", "(", "mrrs", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "if", "self", ".", "max_val_recall", "[", "itr", "]", "<", "recall", "and", "mode", "==", "\"valid\"", ":", "self", ".", "max_val_recall", "[", "itr", "]", "=", "recall", "\n", "if", "self", ".", "max_te_recall", "[", "itr", "]", "<", "recall", "and", "mode", "==", "\"test\"", ":", "self", ".", "max_te_recall", "[", "itr", "]", "=", "recall", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "mrr_list", ".", "append", "(", "mrr", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "batch_loss_list", ")", ",", "recall_list", ",", "mrr_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.NARM.NARM.__init__": [[8, 65], ["utils.EarlyStopping", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "len", "len", "len", "len", "len", "len", "range", "range", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "k", ",", "configs", ",", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", ",", "init_way", ",", "logger", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "tr_x", "=", "tr_x", "\n", "self", ".", "tr_y", "=", "tr_y", "\n", "self", ".", "val_x", "=", "val_x", "\n", "self", ".", "val_y", "=", "val_y", "\n", "self", ".", "te_x", "=", "te_x", "\n", "self", ".", "te_y", "=", "te_y", "\n", "self", ".", "num_items", "=", "num_items", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "rnn_hidden_size", "=", "configs", ".", "rnn_hidden_size", "\n", "self", ".", "batch_size", "=", "configs", ".", "batch_size", "\n", "self", ".", "num_layers", "=", "configs", ".", "num_layers", "\n", "\n", "# Initialize the optimizer", "\n", "self", ".", "optimizer_type", "=", "configs", ".", "optimizer_type", "\n", "self", ".", "weight_decay", "=", "configs", ".", "weight_decay", "\n", "self", ".", "momentum", "=", "configs", ".", "momentum", "\n", "self", ".", "lr", "=", "configs", ".", "lr", "\n", "self", ".", "eps", "=", "configs", ".", "eps", "\n", "\n", "self", ".", "clip_grad", "=", "configs", ".", "clip_grad", "\n", "self", ".", "clip_grad_threshold", "=", "configs", ".", "clip_grad_threshold", "\n", "self", ".", "lr_decay_step", "=", "configs", ".", "lr_decay_step", "\n", "self", ".", "lr_decay", "=", "configs", ".", "lr_decay", "\n", "self", ".", "lr_decay_rate", "=", "configs", ".", "lr_decay_rate", "\n", "self", ".", "drop_prob_ho", "=", "configs", ".", "drop_prob_ho", "\n", "self", ".", "drop_prob_input", "=", "configs", ".", "drop_prob_input", "\n", "self", ".", "drop_prob_recurrent", "=", "configs", ".", "drop_prob_recurrent", "\n", "\n", "# etc", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "time_sort", "=", "configs", ".", "time_sort", "\n", "self", ".", "loss_type", "=", "configs", ".", "loss_type", "\n", "self", ".", "n_epochs", "=", "configs", ".", "n_epochs", "\n", "self", ".", "is_shuffle", "=", "configs", ".", "is_shuffle", "\n", "self", ".", "embedding_size", "=", "configs", ".", "embedding_size", "\n", "self", ".", "num_topics", "=", "configs", ".", "num_topics", "\n", "self", ".", "early_stop", "=", "EarlyStopping", "(", "configs", ".", "max_patience", ")", "\n", "\n", "# batch_iterator", "\n", "self", ".", "tr_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "tr_y", ")", ")", "\n", "self", ".", "val_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "val_y", ")", ")", "\n", "self", ".", "te_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "te_y", ")", ")", "\n", "\n", "# record best epoch", "\n", "self", ".", "max_val_recall", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", "]", "\n", "self", ".", "max_te_recall", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", "]", "\n", "self", ".", "best_epoch", "=", "0", "\n", "\n", "tr_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "tr_x", "]", ";", "val_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "val_x", "]", ";", "te_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "te_x", "]", "\n", "tr_maxlen", "=", "np", ".", "max", "(", "tr_lengths", ")", ";", "val_maxlen", "=", "np", ".", "max", "(", "val_lengths", ")", ";", "te_maxlen", "=", "np", ".", "max", "(", "te_lengths", ")", "\n", "self", ".", "maxlen", "=", "np", ".", "max", "(", "[", "tr_maxlen", ",", "val_maxlen", ",", "te_maxlen", "]", ")", "\n", "self", ".", "maxlen", "=", "None", "\n", "self", ".", "embed_init", ",", "self", ".", "weight_init", ",", "self", ".", "bias_init", ",", "self", ".", "gate_bias_init", ",", "self", ".", "kern_init", "=", "init_way", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.NARM.NARM.run": [[66, 81], ["NARM.NARM.prepare_model", "tensorflow.global_variables_initializer().run", "print", "range", "time.time", "NARM.NARM.train_model", "NARM.NARM.pred_evaluation", "NARM.NARM.pred_evaluation", "utils.write_log", "NARM.NARM.early_stop.validate", "tensorflow.global_variables_initializer", "NARM.NARM.logger.info"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.prepare_model", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.train_model", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.write_log", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.EarlyStopping.validate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "prepare_model", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "print", "(", "\"End of model prepare\"", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tr_pred_loss", "=", "self", ".", "train_model", "(", ")", "\n", "val_pred_loss", ",", "val_recall_list", ",", "val_mrr_list", "=", "self", ".", "pred_evaluation", "(", "mode", "=", "\"valid\"", ")", "\n", "te_pred_loss", ",", "te_recall_list", ",", "te_mrr_list", "=", "self", ".", "pred_evaluation", "(", "mode", "=", "\"test\"", ")", "\n", "\n", "self", ".", "best_epoch", ",", "best_check", "=", "write_log", "(", "self", ".", "logger", ",", "epoch", ",", "tr_pred_loss", ",", "val_pred_loss", ",", "te_pred_loss", ",", "self", ".", "k", ",", "val_recall_list", ",", "val_mrr_list", ",", "\n", "te_recall_list", ",", "te_mrr_list", ",", "self", ".", "max_val_recall", ",", "self", ".", "max_te_recall", ",", "self", ".", "best_epoch", ",", "start_time", ")", "\n", "if", "self", ".", "early_stop", ".", "validate", "(", "val_recall_list", "[", "3", "]", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Training process is stopped early\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.NARM.NARM.prepare_model": [[82, 152], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.dropout", "tensorflow.contrib.rnn.GRUCell", "tensorflow.nn.dynamic_rnn", "tensorflow.transpose", "tensorflow.map_fn", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "utils.compute_alpha", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.nn.sigmoid", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.nn.tanh", "utils.loss_fn", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.tanh", "utils.loss_fn", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.loss_fn", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.loss_fn"], ["", "", "", "def", "prepare_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "rnn_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "'input'", ")", "\n", "self", ".", "rnn_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'output'", ")", "\n", "self", ".", "mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "'mask'", ")", "\n", "self", ".", "keep_prob_input", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob_input'", ")", "\n", "self", ".", "keep_prob_ho", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob_ho'", ")", "\n", "self", ".", "batch_var_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"variable_length\"", ")", "\n", "\n", "Wemb", "=", "tf", ".", "get_variable", "(", "'Wemb'", ",", "[", "self", ".", "num_items", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "embed_init", ")", "\n", "W_encoder", "=", "tf", ".", "get_variable", "(", "'W_encoder'", ",", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_decoder", "=", "tf", ".", "get_variable", "(", "'W_decoder'", ",", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "Bi_vector", "=", "tf", ".", "get_variable", "(", "'Bi_vector'", ",", "[", "1", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "if", "self", ".", "loss_type", "==", "'EMB'", ":", "\n", "            ", "bili", "=", "tf", ".", "get_variable", "(", "'bili'", ",", "[", "self", ".", "embedding_size", ",", "2", "*", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"Trilinear\"", ":", "\n", "            ", "ws", "=", "tf", ".", "get_variable", "(", "'ws'", ",", "[", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "bs", "=", "tf", ".", "get_variable", "(", "'bs'", ",", "[", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "wt", "=", "tf", ".", "get_variable", "(", "'wt'", ",", "[", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "bt", "=", "tf", ".", "get_variable", "(", "'bt'", ",", "[", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"TOP1\"", ":", "\n", "            ", "W_top1", "=", "tf", ".", "get_variable", "(", "'W_top1'", ",", "[", "2", "*", "self", ".", "rnn_hidden_size", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_top1", "=", "tf", ".", "get_variable", "(", "'b_top1'", ",", "[", "1", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"TOP1_variant\"", ":", "\n", "            ", "bili", "=", "tf", ".", "get_variable", "(", "'bili'", ",", "[", "self", ".", "embedding_size", ",", "2", "*", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_top1", "=", "tf", ".", "get_variable", "(", "'W_top1'", ",", "[", "2", "*", "self", ".", "rnn_hidden_size", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_top1", "=", "tf", ".", "get_variable", "(", "'b_top1'", ",", "[", "1", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "", "emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "Wemb", ",", "self", ".", "rnn_x", ")", "\n", "emb", "=", "tf", ".", "nn", ".", "dropout", "(", "emb", ",", "self", ".", "keep_prob_input", ")", "\n", "\n", "custom_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "num_units", "=", "self", ".", "rnn_hidden_size", ")", "\n", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "custom_cell", ",", "emb", ",", "sequence_length", "=", "self", ".", "batch_var_length", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "last_hidden", "=", "states", "# 512 x 100", "\n", "outputs", "=", "tf", ".", "transpose", "(", "outputs", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# 19x512x100", "\n", "\n", "squares", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "compute_alpha", "(", "x", ",", "self", ".", "last_hidden", ",", "W_encoder", ",", "W_decoder", ",", "Bi_vector", ")", ",", "outputs", ")", "# 19x512", "\n", "weight", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "squares", ")", "+", "100000000.", "*", "(", "self", ".", "mask", "-", "1", ")", ",", "axis", "=", "1", ")", "# batch_size * max_len", "\n", "attention_proj", "=", "tf", ".", "reduce_sum", "(", "outputs", "*", "tf", ".", "transpose", "(", "weight", ")", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# num_items x 2*100", "\n", "if", "self", ".", "loss_type", "==", "'EMB'", ":", "\n", "            ", "proj", "=", "tf", ".", "concat", "(", "[", "attention_proj", ",", "states", "]", ",", "1", ")", "\n", "proj", "=", "tf", ".", "nn", ".", "dropout", "(", "proj", ",", "self", ".", "keep_prob_ho", ")", "\n", "ytem", "=", "tf", ".", "matmul", "(", "Wemb", ",", "bili", ")", "\n", "pred", "=", "tf", ".", "matmul", "(", "proj", ",", "tf", ".", "transpose", "(", "ytem", ")", ")", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "softmax", "(", "pred", ")", "\n", "self", ".", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "pred", ",", "labels", "=", "self", ".", "rnn_y", ")", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"Trilinear\"", ":", "\n", "            ", "hs", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "attention_proj", ",", "ws", ")", "+", "bs", ")", "# batch * hidden", "\n", "ht", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "states", ",", "wt", ")", "+", "bt", ")", "# batch * hidden", "\n", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "tf", ".", "multiply", "(", "ht", ",", "hs", ")", ",", "tf", ".", "transpose", "(", "Wemb", ")", ")", ")", "# batch * n_item", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "softmax", "(", "pred", ")", "\n", "self", ".", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "pred", ",", "labels", "=", "self", ".", "rnn_y", ")", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"TOP1\"", ":", "\n", "            ", "proj", "=", "tf", ".", "concat", "(", "[", "attention_proj", ",", "states", "]", ",", "1", ")", "\n", "proj", "=", "tf", ".", "nn", ".", "dropout", "(", "proj", ",", "self", ".", "keep_prob_ho", ")", "\n", "pred", "=", "tf", ".", "matmul", "(", "proj", ",", "W_top1", ")", "+", "b_top1", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "tanh", "(", "pred", ")", "\n", "self", ".", "cost", "=", "loss_fn", "(", "self", ".", "rnn_y", ",", "self", ".", "pred", ",", "self", ".", "loss_type", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"TOP1_variant\"", ":", "\n", "            ", "proj", "=", "tf", ".", "concat", "(", "[", "attention_proj", ",", "states", "]", ",", "1", ")", "\n", "proj", "=", "tf", ".", "nn", ".", "dropout", "(", "proj", ",", "self", ".", "keep_prob_ho", ")", "\n", "ytem", "=", "tf", ".", "matmul", "(", "Wemb", ",", "bili", ")", "\n", "pred", "=", "tf", ".", "matmul", "(", "proj", ",", "tf", ".", "transpose", "(", "ytem", ")", ")", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "tanh", "(", "pred", ")", "\n", "self", ".", "cost", "=", "loss_fn", "(", "self", ".", "rnn_y", ",", "self", ".", "pred", ",", "self", ".", "loss_type", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.NARM.NARM.train_model": [[153, 173], ["math.ceil", "range", "numpy.mean", "numpy.random.permutation", "int", "numpy.minimum", "utils.convert_batch_data", "NARM.NARM.sess.run", "batch_loss_list.append", "numpy.float32", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "configs", ".", "is_shuffle", ":", "\n", "            ", "self", ".", "tr_sess_idx", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "tr_sess_idx", ")", "\n", "", "batch_loss_list", "=", "[", "]", "\n", "num_batch", "=", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "self", ".", "tr_sess_idx", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "            ", "start_itr", "=", "self", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "self", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "self", ".", "tr_sess_idx", ")", ")", "\n", "temp_batch_x", "=", "self", ".", "tr_x", "[", "self", ".", "tr_sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "temp_batch_y", "=", "self", ".", "tr_y", "[", "self", ".", "tr_sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "batch_x", ",", "batch_y", ",", "mask", ",", "labels", ",", "lengths", "=", "convert_batch_data", "(", "temp_batch_x", ",", "temp_batch_y", ",", "self", ".", "num_items", ",", "maxlen", "=", "None", ")", "\n", "temp_keep_prob_ho", "=", "1.0", "-", "self", ".", "drop_prob_ho", "\n", "temp_keep_prob_input", "=", "1.0", "-", "self", ".", "drop_prob_input", "\n", "feed_dict", "=", "{", "self", ".", "rnn_x", ":", "batch_x", ",", "self", ".", "rnn_y", ":", "batch_y", ",", "self", ".", "mask", ":", "mask", ",", "\n", "self", ".", "keep_prob_input", ":", "temp_keep_prob_input", ",", "self", ".", "keep_prob_ho", ":", "temp_keep_prob_ho", ",", "\n", "self", ".", "batch_var_length", ":", "lengths", "}", "\n", "_", ",", "pred_loss_", ",", "preds2", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer", ",", "self", ".", "cost", ",", "self", ".", "pred", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "batch_loss_list", ".", "append", "(", "pred_loss_", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "batch_loss_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.NARM.NARM.pred_evaluation": [[174, 214], ["range", "math.ceil", "range", "range", "len", "recalls.append", "mrrs.append", "evaluation_point_count.append", "int", "numpy.minimum", "utils.convert_batch_data", "NARM.NARM.sess.run", "batch_loss_list.append", "utils.evaluation", "len", "recall_list.append", "mrr_list.append", "numpy.mean", "numpy.float32", "len", "numpy.asarray", "numpy.asarray", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.evaluation"], ["", "def", "pred_evaluation", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"valid\"", ":", "\n", "            ", "sess_idx", "=", "self", ".", "val_sess_idx", "\n", "df_x", "=", "self", ".", "val_x", "\n", "df_y", "=", "self", ".", "val_y", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "sess_idx", "=", "self", ".", "te_sess_idx", "\n", "df_x", "=", "self", ".", "te_x", "\n", "df_y", "=", "self", ".", "te_y", "\n", "\n", "", "batch_loss_list", "=", "[", "]", "\n", "recalls", "=", "[", "]", ";", "mrrs", "=", "[", "]", ";", "evaluation_point_count", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", ":", "\n", "            ", "recalls", ".", "append", "(", "0", ")", ";", "mrrs", ".", "append", "(", "0", ")", ";", "evaluation_point_count", ".", "append", "(", "0", ")", "\n", "", "num_batch", "=", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "sess_idx", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "            ", "start_itr", "=", "self", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "self", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "sess_idx", ")", ")", "\n", "temp_batch_x", "=", "df_x", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "temp_batch_y", "=", "df_y", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "batch_x", ",", "batch_y", ",", "mask", ",", "labels", ",", "lengths", "=", "convert_batch_data", "(", "temp_batch_x", ",", "temp_batch_y", ",", "self", ".", "num_items", ",", "maxlen", "=", "None", ")", "\n", "feed_dict", "=", "{", "self", ".", "rnn_x", ":", "batch_x", ",", "self", ".", "rnn_y", ":", "batch_y", ",", "self", ".", "mask", ":", "mask", ",", "\n", "self", ".", "keep_prob_input", ":", "1.0", ",", "self", ".", "keep_prob_ho", ":", "1.0", ",", "\n", "self", ".", "batch_var_length", ":", "lengths", "}", "\n", "preds", ",", "pred_loss_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred", ",", "self", ".", "cost", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "batch_loss_list", ".", "append", "(", "pred_loss_", ")", "\n", "\n", "recalls", ",", "mrrs", ",", "evaluation_point_count", "=", "evaluation", "(", "labels", ",", "preds", ",", "recalls", ",", "mrrs", ",", "evaluation_point_count", ",", "self", ".", "k", ")", "\n", "\n", "", "recall_list", "=", "[", "]", "\n", "mrr_list", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", ":", "\n", "            ", "recall", "=", "np", ".", "asarray", "(", "recalls", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "mrr", "=", "np", ".", "asarray", "(", "mrrs", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "if", "self", ".", "max_val_recall", "[", "itr", "]", "<", "recall", "and", "mode", "==", "\"valid\"", ":", "self", ".", "max_val_recall", "[", "itr", "]", "=", "recall", "\n", "if", "self", ".", "max_te_recall", "[", "itr", "]", "<", "recall", "and", "mode", "==", "\"test\"", ":", "self", ".", "max_te_recall", "[", "itr", "]", "=", "recall", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "mrr_list", ".", "append", "(", "mrr", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "batch_loss_list", ")", ",", "recall_list", ",", "mrr_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.STAMP.STAMP.__init__": [[8, 66], ["utils.EarlyStopping", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "len", "len", "len", "len", "len", "len", "range", "range", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "k", ",", "configs", ",", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", ",", "init_way", ",", "logger", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "tr_x", "=", "tr_x", "\n", "self", ".", "tr_y", "=", "tr_y", "\n", "self", ".", "val_x", "=", "val_x", "\n", "self", ".", "val_y", "=", "val_y", "\n", "self", ".", "te_x", "=", "te_x", "\n", "self", ".", "te_y", "=", "te_y", "\n", "#self.num_items = 37484 #num_items", "\n", "self", ".", "num_items", "=", "num_items", "# num_items", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "rnn_hidden_size", "=", "configs", ".", "rnn_hidden_size", "\n", "self", ".", "batch_size", "=", "configs", ".", "batch_size", "\n", "self", ".", "num_layers", "=", "configs", ".", "num_layers", "\n", "\n", "# Initialize the optimizer", "\n", "self", ".", "optimizer_type", "=", "configs", ".", "optimizer_type", "\n", "self", ".", "weight_decay", "=", "configs", ".", "weight_decay", "\n", "self", ".", "momentum", "=", "configs", ".", "momentum", "\n", "self", ".", "lr", "=", "configs", ".", "lr", "\n", "self", ".", "eps", "=", "configs", ".", "eps", "\n", "\n", "self", ".", "clip_grad", "=", "configs", ".", "clip_grad", "\n", "self", ".", "clip_grad_threshold", "=", "configs", ".", "clip_grad_threshold", "\n", "self", ".", "lr_decay_step", "=", "configs", ".", "lr_decay_step", "\n", "self", ".", "lr_decay", "=", "configs", ".", "lr_decay", "\n", "self", ".", "lr_decay_rate", "=", "configs", ".", "lr_decay_rate", "\n", "self", ".", "drop_prob_ho", "=", "configs", ".", "drop_prob_ho", "\n", "self", ".", "drop_prob_input", "=", "configs", ".", "drop_prob_input", "\n", "self", ".", "drop_prob_recurrent", "=", "configs", ".", "drop_prob_recurrent", "\n", "\n", "# etc", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "time_sort", "=", "configs", ".", "time_sort", "\n", "self", ".", "loss_type", "=", "configs", ".", "loss_type", "\n", "self", ".", "n_epochs", "=", "configs", ".", "n_epochs", "\n", "self", ".", "is_shuffle", "=", "configs", ".", "is_shuffle", "\n", "self", ".", "embedding_size", "=", "configs", ".", "embedding_size", "\n", "self", ".", "num_topics", "=", "configs", ".", "num_topics", "\n", "self", ".", "early_stop", "=", "EarlyStopping", "(", "configs", ".", "max_patience", ")", "\n", "\n", "# batch_iterator", "\n", "self", ".", "tr_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "tr_y", ")", ")", "\n", "self", ".", "val_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "val_y", ")", ")", "\n", "self", ".", "te_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "te_y", ")", ")", "\n", "\n", "# record best epoch", "\n", "self", ".", "max_val_recall", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", "]", "\n", "self", ".", "max_te_recall", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", "]", "\n", "self", ".", "best_epoch", "=", "0", "\n", "\n", "tr_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "tr_x", "]", ";", "val_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "val_x", "]", ";", "te_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "te_x", "]", "\n", "tr_maxlen", "=", "np", ".", "max", "(", "tr_lengths", ")", ";", "val_maxlen", "=", "np", ".", "max", "(", "val_lengths", ")", ";", "te_maxlen", "=", "np", ".", "max", "(", "te_lengths", ")", "\n", "self", ".", "maxlen", "=", "np", ".", "max", "(", "[", "tr_maxlen", ",", "val_maxlen", ",", "te_maxlen", "]", ")", "\n", "self", ".", "maxlen", "=", "None", "\n", "self", ".", "embed_init", ",", "self", ".", "weight_init", ",", "self", ".", "bias_init", ",", "self", ".", "gate_bias_init", ",", "self", ".", "kern_init", "=", "init_way", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.STAMP.STAMP.run": [[67, 82], ["STAMP.STAMP.prepare_model", "tensorflow.global_variables_initializer().run", "print", "range", "time.time", "STAMP.STAMP.train_model", "STAMP.STAMP.pred_evaluation", "STAMP.STAMP.pred_evaluation", "utils.write_log", "STAMP.STAMP.early_stop.validate", "tensorflow.global_variables_initializer", "STAMP.STAMP.logger.info"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.prepare_model", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.train_model", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.write_log", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.EarlyStopping.validate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "prepare_model", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "print", "(", "\"End of model prepare\"", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tr_pred_loss", "=", "self", ".", "train_model", "(", ")", "\n", "val_pred_loss", ",", "val_recall_list", ",", "val_mrr_list", "=", "self", ".", "pred_evaluation", "(", "mode", "=", "\"valid\"", ")", "\n", "te_pred_loss", ",", "te_recall_list", ",", "te_mrr_list", "=", "self", ".", "pred_evaluation", "(", "mode", "=", "\"test\"", ")", "\n", "\n", "self", ".", "best_epoch", ",", "best_check", "=", "write_log", "(", "self", ".", "logger", ",", "epoch", ",", "tr_pred_loss", ",", "val_pred_loss", ",", "te_pred_loss", ",", "self", ".", "k", ",", "val_recall_list", ",", "val_mrr_list", ",", "\n", "te_recall_list", ",", "te_mrr_list", ",", "self", ".", "max_val_recall", ",", "self", ".", "max_te_recall", ",", "self", ".", "best_epoch", ",", "start_time", ")", "\n", "if", "self", ".", "early_stop", ".", "validate", "(", "val_recall_list", "[", "3", "]", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Training process is stopped early\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.STAMP.STAMP.prepare_model": [[83, 158], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.squeeze", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.tile", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.map_fn", "tensorflow.multiply", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.reshape", "tensorflow.div", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "utils.compute_alpha_STAMP", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.sigmoid", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.nn.tanh", "utils.loss_fn", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.multiply", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "utils.loss_fn", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha_STAMP", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.loss_fn", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.loss_fn"], ["", "", "", "def", "prepare_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "rnn_x1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "self", ".", "maxlen", "]", ",", "name", "=", "'input1'", ")", "\n", "self", ".", "rnn_x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "1", "]", ",", "name", "=", "'input2'", ")", "\n", "self", ".", "rnn_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'output'", ")", "\n", "self", ".", "mask_x1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "maxlen", "]", ",", "name", "=", "'mask_x1'", ")", "# batch_size * maxlen", "\n", "self", ".", "mask_x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "1", "]", ",", "name", "=", "'mask_x2'", ")", "\n", "self", ".", "keep_prob_input", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob_input'", ")", "\n", "self", ".", "keep_prob_ho", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob_ho'", ")", "\n", "self", ".", "batch_var_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"variable_length\"", ")", "\n", "\n", "Wemb", "=", "tf", ".", "get_variable", "(", "'Wemb'", ",", "[", "self", ".", "num_items", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "embed_init", ")", "\n", "w0", "=", "tf", ".", "get_variable", "(", "'w0'", ",", "[", "self", ".", "embedding_size", ",", "1", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "w1", "=", "tf", ".", "get_variable", "(", "'w1'", ",", "[", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "w2", "=", "tf", ".", "get_variable", "(", "'w2'", ",", "[", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "w3", "=", "tf", ".", "get_variable", "(", "'w3'", ",", "[", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "ba", "=", "tf", ".", "get_variable", "(", "'ba'", ",", "[", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "if", "self", ".", "loss_type", "==", "'EMB'", ":", "\n", "            ", "bili", "=", "tf", ".", "get_variable", "(", "'bili'", ",", "[", "self", ".", "embedding_size", ",", "2", "*", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"Trilinear\"", ":", "\n", "            ", "ws", "=", "tf", ".", "get_variable", "(", "'ws'", ",", "[", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "bs", "=", "tf", ".", "get_variable", "(", "'bs'", ",", "[", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "wt", "=", "tf", ".", "get_variable", "(", "'wt'", ",", "[", "self", ".", "embedding_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "bt", "=", "tf", ".", "get_variable", "(", "'bt'", ",", "[", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"TOP1\"", ":", "\n", "            ", "W_top1", "=", "tf", ".", "get_variable", "(", "'W_top1'", ",", "[", "2", "*", "self", ".", "rnn_hidden_size", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_top1", "=", "tf", ".", "get_variable", "(", "'b_top1'", ",", "[", "1", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"TOP1_variant\"", ":", "\n", "            ", "bili", "=", "tf", ".", "get_variable", "(", "'bili'", ",", "[", "self", ".", "embedding_size", ",", "2", "*", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_top1", "=", "tf", ".", "get_variable", "(", "'W_top1'", ",", "[", "2", "*", "self", ".", "rnn_hidden_size", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "b_top1", "=", "tf", ".", "get_variable", "(", "'b_top1'", ",", "[", "1", ",", "self", ".", "num_items", "]", ",", "initializer", "=", "self", ".", "bias_init", ")", "\n", "\n", "", "emb_x1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "Wemb", ",", "self", ".", "rnn_x1", ")", "# xi (batch_size * maxlen * num_hidden)", "\n", "emb_x2", "=", "tf", ".", "squeeze", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "Wemb", ",", "self", ".", "rnn_x2", ")", ",", "axis", "=", "1", ")", "# xt (batch_size * num_hidden)", "\n", "tiled_mask", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "self", ".", "mask_x1", ",", "2", ")", ",", "[", "1", ",", "1", ",", "self", ".", "rnn_hidden_size", "]", ")", "# xt (batch_size * maxlen * num_hidden)", "\n", "ms", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "emb_x1", ",", "tiled_mask", ")", ",", "axis", "=", "1", ")", "# batch_size * num_hidden", "\n", "tiled_var_length", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "self", ".", "batch_var_length", ",", "[", "-", "1", ",", "1", "]", ")", ",", "[", "1", ",", "self", ".", "rnn_hidden_size", "]", ")", "# (batch_size * num_hidden)", "\n", "ms", "=", "tf", ".", "reshape", "(", "tf", ".", "div", "(", "ms", ",", "tiled_var_length", ")", ",", "[", "-", "1", ",", "self", ".", "rnn_hidden_size", "]", ")", "# batch_size * num_hidden", "\n", "\n", "outputs1", "=", "tf", ".", "transpose", "(", "emb_x1", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# maxlen * batch_size * num_hidden", "\n", "unnormalized_alpha", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "compute_alpha_STAMP", "(", "x", ",", "emb_x2", ",", "ms", ",", "w0", ",", "w1", ",", "w2", ",", "w3", ",", "ba", ")", ",", "outputs1", ")", "# maxlen * batch_size", "\n", "unnormalized_alpha", "=", "tf", ".", "multiply", "(", "tf", ".", "transpose", "(", "unnormalized_alpha", ")", ",", "self", ".", "mask_x1", ")", "# batch_size * maxlen", "\n", "self", ".", "unnormalized_alpha", "=", "unnormalized_alpha", "\n", "alpha", "=", "unnormalized_alpha", "# batch_size * maxlen", "\n", "#alpha = tf.nn.softmax(unnormalized_alpha + 100000000. * (self.mask_x1 - 1), dim=1)  # batch_size * max_len", "\n", "self", ".", "alpha", "=", "alpha", "\n", "tiled_alpha", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "alpha", ",", "axis", "=", "2", ")", ",", "[", "1", ",", "1", ",", "self", ".", "rnn_hidden_size", "]", ")", "# batch_size * maxlen * hidden_size", "\n", "self", ".", "tiled_alpha", "=", "tiled_alpha", "\n", "ma", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "emb_x1", ",", "tiled_alpha", ")", ",", "axis", "=", "1", ")", "# batch * hidden", "\n", "hs", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "ma", ",", "ws", ")", "+", "bs", ")", "# batch * hidden", "\n", "ht", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "emb_x2", ",", "wt", ")", "+", "bt", ")", "# batch * hidden", "\n", "\n", "if", "self", ".", "loss_type", "==", "'EMB'", ":", "\n", "            ", "proj", "=", "tf", ".", "concat", "(", "[", "hs", ",", "ht", "]", ",", "1", ")", "\n", "proj", "=", "tf", ".", "nn", ".", "dropout", "(", "proj", ",", "self", ".", "keep_prob_ho", ")", "\n", "ytem", "=", "tf", ".", "matmul", "(", "Wemb", ",", "bili", ")", "\n", "pred", "=", "tf", ".", "matmul", "(", "proj", ",", "tf", ".", "transpose", "(", "ytem", ")", ")", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "softmax", "(", "pred", ")", "\n", "self", ".", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "pred", ",", "labels", "=", "self", ".", "rnn_y", ")", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"Trilinear\"", ":", "\n", "            ", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "tf", ".", "multiply", "(", "ht", ",", "hs", ")", ",", "tf", ".", "transpose", "(", "Wemb", ")", ")", ")", "# batch * n_item", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "softmax", "(", "pred", ")", "\n", "self", ".", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "pred", ",", "labels", "=", "self", ".", "rnn_y", ")", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"TOP1\"", ":", "\n", "            ", "proj", "=", "tf", ".", "concat", "(", "[", "hs", ",", "ht", "]", ",", "1", ")", "\n", "proj", "=", "tf", ".", "nn", ".", "dropout", "(", "proj", ",", "self", ".", "keep_prob_ho", ")", "\n", "pred", "=", "tf", ".", "matmul", "(", "proj", ",", "W_top1", ")", "+", "b_top1", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "tanh", "(", "pred", ")", "\n", "self", ".", "cost", "=", "loss_fn", "(", "self", ".", "rnn_y", ",", "self", ".", "pred", ",", "self", ".", "loss_type", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "\"TOP1_variant\"", ":", "\n", "            ", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "tf", ".", "multiply", "(", "ht", ",", "hs", ")", ",", "tf", ".", "transpose", "(", "Wemb", ")", ")", ")", "# batch * n_item", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "tanh", "(", "pred", ")", "\n", "self", ".", "cost", "=", "loss_fn", "(", "self", ".", "rnn_y", ",", "self", ".", "pred", ",", "self", ".", "loss_type", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.STAMP.STAMP.train_model": [[159, 180], ["math.ceil", "range", "numpy.mean", "numpy.random.permutation", "int", "numpy.minimum", "utils.convert_batch_data_stamp", "STAMP.STAMP.sess.run", "batch_loss_list.append", "numpy.float32", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data_stamp", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "configs", ".", "is_shuffle", ":", "\n", "            ", "self", ".", "tr_sess_idx", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "tr_sess_idx", ")", "\n", "", "batch_loss_list", "=", "[", "]", "\n", "num_batch", "=", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "self", ".", "tr_sess_idx", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "            ", "start_itr", "=", "self", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "self", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "self", ".", "tr_sess_idx", ")", ")", "\n", "temp_batch_x", "=", "self", ".", "tr_x", "[", "self", ".", "tr_sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "#", "\n", "temp_batch_y", "=", "self", ".", "tr_y", "[", "self", ".", "tr_sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "#", "\n", "batch_x1", ",", "batch_x2", ",", "batch_y", ",", "mask_x1", ",", "mask_x2", ",", "labels", ",", "lengths", "=", "convert_batch_data_stamp", "(", "temp_batch_x", ",", "temp_batch_y", ",", "self", ".", "num_items", ",", "maxlen", "=", "self", ".", "maxlen", ")", "\n", "\n", "temp_keep_prob_ho", "=", "1.0", "-", "self", ".", "drop_prob_ho", "\n", "temp_keep_prob_input", "=", "1.0", "-", "self", ".", "drop_prob_input", "\n", "feed_dict", "=", "{", "self", ".", "rnn_x1", ":", "batch_x1", ",", "self", ".", "rnn_x2", ":", "batch_x2", ",", "self", ".", "rnn_y", ":", "batch_y", ",", "self", ".", "mask_x1", ":", "mask_x1", ",", "self", ".", "mask_x2", ":", "mask_x2", ",", "\n", "self", ".", "keep_prob_input", ":", "temp_keep_prob_input", ",", "self", ".", "keep_prob_ho", ":", "temp_keep_prob_ho", ",", "\n", "self", ".", "batch_var_length", ":", "lengths", "}", "\n", "_", ",", "pred_loss_", ",", "preds2", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer", ",", "self", ".", "cost", ",", "self", ".", "pred", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "batch_loss_list", ".", "append", "(", "pred_loss_", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "batch_loss_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.STAMP.STAMP.pred_evaluation": [[181, 225], ["range", "math.ceil", "range", "range", "len", "recalls.append", "mrrs.append", "evaluation_point_count.append", "int", "numpy.minimum", "utils.convert_batch_data_stamp", "STAMP.STAMP.sess.run", "batch_loss_list.append", "utils.evaluation", "len", "recall_list.append", "mrr_list.append", "numpy.mean", "numpy.float32", "len", "numpy.asarray", "numpy.asarray", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data_stamp", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.evaluation"], ["", "def", "pred_evaluation", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"valid\"", ":", "\n", "            ", "sess_idx", "=", "self", ".", "val_sess_idx", "\n", "df_x", "=", "self", ".", "val_x", "\n", "df_y", "=", "self", ".", "val_y", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "sess_idx", "=", "self", ".", "te_sess_idx", "\n", "df_x", "=", "self", ".", "te_x", "\n", "df_y", "=", "self", ".", "te_y", "\n", "\n", "", "batch_loss_list", "=", "[", "]", "\n", "recalls", "=", "[", "]", ";", "mrrs", "=", "[", "]", ";", "evaluation_point_count", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", ":", "\n", "            ", "recalls", ".", "append", "(", "0", ")", ";", "mrrs", ".", "append", "(", "0", ")", ";", "evaluation_point_count", ".", "append", "(", "0", ")", "\n", "", "num_batch", "=", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "sess_idx", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "            ", "start_itr", "=", "self", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "self", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "sess_idx", ")", ")", "\n", "temp_batch_x", "=", "df_x", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "temp_batch_y", "=", "df_y", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "batch_x1", ",", "batch_x2", ",", "batch_y", ",", "mask_x1", ",", "mask_x2", ",", "labels", ",", "lengths", "=", "convert_batch_data_stamp", "(", "temp_batch_x", ",", "temp_batch_y", ",", "self", ".", "num_items", ",", "maxlen", "=", "self", ".", "maxlen", ")", "\n", "\n", "feed_dict", "=", "{", "self", ".", "rnn_x1", ":", "batch_x1", ",", "self", ".", "rnn_x2", ":", "batch_x2", ",", "self", ".", "rnn_y", ":", "batch_y", ",", "self", ".", "mask_x1", ":", "mask_x1", ",", "self", ".", "mask_x2", ":", "mask_x2", ",", "\n", "self", ".", "keep_prob_input", ":", "1.0", ",", "self", ".", "keep_prob_ho", ":", "1.0", ",", "\n", "self", ".", "batch_var_length", ":", "lengths", "}", "\n", "preds", ",", "pred_loss_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred", ",", "self", ".", "cost", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "batch_loss_list", ".", "append", "(", "pred_loss_", ")", "\n", "\n", "recalls", ",", "mrrs", ",", "evaluation_point_count", "=", "evaluation", "(", "labels", ",", "preds", ",", "recalls", ",", "mrrs", ",", "evaluation_point_count", ",", "self", ".", "k", ")", "\n", "\n", "", "recall_list", "=", "[", "]", "\n", "mrr_list", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", ":", "\n", "            ", "recall", "=", "np", ".", "asarray", "(", "recalls", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "mrr", "=", "np", ".", "asarray", "(", "mrrs", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "if", "self", ".", "max_val_recall", "[", "itr", "]", "<", "recall", "and", "mode", "==", "\"valid\"", ":", "self", ".", "max_val_recall", "[", "itr", "]", "=", "recall", "\n", "if", "self", ".", "max_te_recall", "[", "itr", "]", "<", "recall", "and", "mode", "==", "\"test\"", ":", "self", ".", "max_te_recall", "[", "itr", "]", "=", "recall", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "mrr_list", ".", "append", "(", "mrr", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "batch_loss_list", ")", ",", "recall_list", ",", "mrr_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.__init__": [[10, 73], ["utils.EarlyStopping", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.max", "numpy.max", "numpy.max", "HCRNN.HCRNN.prepare_model", "tensorflow.global_variables_initializer().run", "tensorflow.train.Saver", "print", "len", "len", "len", "len", "len", "len", "tensorflow.trainable_variables", "range", "range", "tensorflow.global_variables_initializer", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.prepare_model", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "k", ",", "configs", ",", "tr_x", ",", "tr_y", ",", "val_x", ",", "val_y", ",", "te_x", ",", "te_y", ",", "num_items", ",", "init_way", ",", "logger", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "tr_x", "=", "tr_x", "\n", "self", ".", "tr_y", "=", "tr_y", "\n", "self", ".", "val_x", "=", "val_x", "\n", "self", ".", "val_y", "=", "val_y", "\n", "self", ".", "te_x", "=", "te_x", "\n", "self", ".", "te_y", "=", "te_y", "\n", "self", ".", "num_items", "=", "num_items", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "rnn_hidden_size", "=", "configs", ".", "rnn_hidden_size", "\n", "self", ".", "batch_size", "=", "configs", ".", "batch_size", "\n", "self", ".", "num_layers", "=", "configs", ".", "num_layers", "\n", "\n", "# Initialize the optimizer", "\n", "self", ".", "optimizer_type", "=", "configs", ".", "optimizer_type", "\n", "self", ".", "weight_decay", "=", "configs", ".", "weight_decay", "\n", "self", ".", "momentum", "=", "configs", ".", "momentum", "\n", "self", ".", "lr", "=", "configs", ".", "lr", "\n", "self", ".", "eps", "=", "configs", ".", "eps", "\n", "\n", "self", ".", "clip_grad", "=", "configs", ".", "clip_grad", "\n", "self", ".", "clip_grad_threshold", "=", "configs", ".", "clip_grad_threshold", "\n", "self", ".", "lr_decay_step", "=", "configs", ".", "lr_decay_step", "\n", "self", ".", "lr_decay", "=", "configs", ".", "lr_decay", "\n", "self", ".", "lr_decay_rate", "=", "configs", ".", "lr_decay_rate", "\n", "self", ".", "drop_prob_ho", "=", "configs", ".", "drop_prob_ho", "\n", "self", ".", "drop_prob_input", "=", "configs", ".", "drop_prob_input", "\n", "self", ".", "drop_prob_recurrent", "=", "configs", ".", "drop_prob_recurrent", "\n", "self", ".", "reg_lambda", "=", "configs", ".", "reg_lambda", "\n", "self", ".", "att_type", "=", "configs", ".", "att_type", "\n", "# etc", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "time_sort", "=", "configs", ".", "time_sort", "\n", "self", ".", "loss_type", "=", "configs", ".", "loss_type", "\n", "self", ".", "n_epochs", "=", "configs", ".", "n_epochs", "\n", "self", ".", "is_shuffle", "=", "configs", ".", "is_shuffle", "\n", "self", ".", "embedding_size", "=", "configs", ".", "embedding_size", "\n", "self", ".", "num_topics", "=", "configs", ".", "num_topics", "\n", "self", ".", "early_stop", "=", "EarlyStopping", "(", "configs", ".", "max_patience", ")", "\n", "\n", "# batch_iterator", "\n", "self", ".", "tr_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "tr_y", ")", ")", "\n", "self", ".", "val_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "val_y", ")", ")", "\n", "self", ".", "te_sess_idx", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "te_y", ")", ")", "\n", "\n", "# record best epoch", "\n", "self", ".", "max_val_recall", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", "]", "\n", "self", ".", "max_te_recall", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", "]", "\n", "self", ".", "best_epoch", "=", "0", "\n", "self", ".", "two_phase_learning", "=", "self", ".", "configs", ".", "two_phase_learning", "\n", "tr_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "tr_x", "]", ";", "val_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "val_x", "]", ";", "te_lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "te_x", "]", "\n", "tr_maxlen", "=", "np", ".", "max", "(", "tr_lengths", ")", ";", "val_maxlen", "=", "np", ".", "max", "(", "val_lengths", ")", ";", "te_maxlen", "=", "np", ".", "max", "(", "te_lengths", ")", "\n", "#self.maxlen = np.max([tr_maxlen,val_maxlen,te_maxlen])", "\n", "self", ".", "maxlen", "=", "None", "\n", "self", ".", "embed_init", ",", "self", ".", "weight_init", ",", "self", ".", "bias_init", ",", "self", ".", "gate_bias_init", ",", "self", ".", "kern_init", "=", "init_way", "\n", "\n", "self", ".", "prepare_model", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "print", "(", "\"End of model prepare\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run": [[74, 89], ["range", "time.time", "HCRNN.HCRNN.train_model", "HCRNN.HCRNN.pred_evaluation", "HCRNN.HCRNN.pred_evaluation", "utils.write_log", "HCRNN.HCRNN.early_stop.validate", "HCRNN.HCRNN.logger.info"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.train_model", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.write_log", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.EarlyStopping.validate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "n_epochs", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tr_pred_loss", "=", "self", ".", "train_model", "(", ")", "\n", "val_pred_loss", ",", "val_recall_list", ",", "val_mrr_list", "=", "self", ".", "pred_evaluation", "(", "mode", "=", "\"valid\"", ")", "\n", "te_pred_loss", ",", "te_recall_list", ",", "te_mrr_list", "=", "self", ".", "pred_evaluation", "(", "mode", "=", "\"test\"", ")", "\n", "\n", "self", ".", "best_epoch", ",", "best_check", "=", "write_log", "(", "self", ".", "logger", ",", "epoch", ",", "tr_pred_loss", ",", "val_pred_loss", ",", "te_pred_loss", ",", "self", ".", "k", ",", "val_recall_list", ",", "val_mrr_list", ",", "\n", "te_recall_list", ",", "te_mrr_list", ",", "self", ".", "max_val_recall", ",", "self", ".", "max_te_recall", ",", "self", ".", "best_epoch", ",", "start_time", ")", "\n", "# if best_check:", "\n", "#     if (self.configs.model_name == \"HCRNN_v3\") and (self.configs.random_seed == 10):", "\n", "#         self.saver.save(self.sess, self.save_path + '/model')", "\n", "if", "self", ".", "early_stop", ".", "validate", "(", "val_recall_list", "[", "3", "]", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Training process is stopped early\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.prepare_model": [[90, 187], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "models.NSTOPIC.NSTOPIC", "tensorflow.nn.dynamic_rnn", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.trainable_variables", "utils.variable_parser", "utils.variable_parser", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.shape", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "models.HCRNN_cell.HCRNN_cell_v1", "tensorflow.map_fn", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "models.HCRNN_cell.HCRNN_cell_v2", "tensorflow.map_fn", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.map_fn", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.transpose", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "utils.kl_normal_reg_loss", "zip", "zip", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "models.HCRNN_cell.HCRNN_cell_v3", "utils.compute_alpha", "tensorflow.transpose", "tensorflow.transpose", "utils.compute_global_alpha_norm", "tensorflow.transpose", "utils.compute_alpha", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.models.NSTOPIC.NSTOPIC", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.variable_parser", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.variable_parser", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.kl_normal_reg_loss", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_global_alpha_norm", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.compute_alpha"], ["", "", "", "def", "prepare_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "rnn_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "self", ".", "maxlen", "]", ",", "name", "=", "'input'", ")", "\n", "self", ".", "rnn_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'output'", ")", "\n", "self", ".", "topic_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'topic_x'", ")", "\n", "self", ".", "mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ",", "name", "=", "'mask'", ")", "\n", "self", ".", "keep_prob_input", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob_input'", ")", "\n", "self", ".", "keep_prob_ho", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob_ho'", ")", "\n", "self", ".", "batch_var_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"variable_length\"", ")", "\n", "self", ".", "is_training", "=", "tf", ".", "placeholder_with_default", "(", "True", ",", "shape", "=", "(", ")", ")", "\n", "real_batch_size", "=", "tf", ".", "shape", "(", "self", ".", "rnn_x", ")", "[", "0", "]", "\n", "real_maxlen", "=", "tf", ".", "shape", "(", "self", ".", "rnn_x", ")", "[", "1", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\"HCRNN\"", ")", ":", "\n", "            ", "Wemb", "=", "tf", ".", "get_variable", "(", "'Wemb'", ",", "[", "self", ".", "num_items", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "embed_init", ")", "\n", "self", ".", "W_thetatv", "=", "tf", ".", "get_variable", "(", "'W_thetatv'", ",", "(", "self", ".", "num_topics", ",", "self", ".", "embedding_size", ")", ",", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "if", "self", ".", "att_type", "==", "\"normal_att\"", ":", "\n", "                ", "W_encoder", "=", "tf", ".", "get_variable", "(", "'W_encoder'", ",", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_decoder", "=", "tf", ".", "get_variable", "(", "'W_decoder'", ",", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "Bi_vector", "=", "tf", ".", "get_variable", "(", "'Bi_vector'", ",", "[", "1", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "bili", "=", "tf", ".", "get_variable", "(", "'bili'", ",", "[", "self", ".", "embedding_size", ",", "2", "*", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "", "elif", "self", ".", "att_type", "==", "\"bi_att\"", ":", "\n", "                ", "W_g1", "=", "tf", ".", "get_variable", "(", "'W_g1'", ",", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_g2", "=", "tf", ".", "get_variable", "(", "'W_g2'", ",", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_l1", "=", "tf", ".", "get_variable", "(", "'W_l1'", ",", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "W_l2", "=", "tf", ".", "get_variable", "(", "'W_l2'", ",", "[", "self", ".", "rnn_hidden_size", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "Bi_l_vector", "=", "tf", ".", "get_variable", "(", "'Bi_l_vector'", ",", "[", "1", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "Bi_g_vector", "=", "tf", ".", "get_variable", "(", "'Bi_g_vector'", ",", "[", "1", ",", "self", ".", "rnn_hidden_size", "]", ",", "initializer", "=", "self", ".", "weight_init", ")", "\n", "bili", "=", "tf", ".", "get_variable", "(", "'bili'", ",", "[", "self", ".", "embedding_size", ",", "3", "*", "self", ".", "rnn_hidden_size", "]", ",", "\n", "initializer", "=", "self", ".", "weight_init", ")", "\n", "\n", "############## Topic Model #########################", "\n", "", "", "emb_rnn_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "Wemb", ",", "self", ".", "rnn_x", ")", "\n", "emb_topic_x", "=", "tf", ".", "matmul", "(", "self", ".", "topic_x", ",", "Wemb", ")", "\n", "emb_rnn_x", "=", "tf", ".", "nn", ".", "dropout", "(", "emb_rnn_x", ",", "self", ".", "keep_prob_input", ")", "# batch_size * maxlen * hidden", "\n", "emb_topic_x", "=", "tf", ".", "nn", ".", "dropout", "(", "emb_topic_x", ",", "self", ".", "keep_prob_input", ")", "# batch_size * hidden", "\n", "self", ".", "theta", ",", "mu_theta", ",", "std_theta", "=", "NSTOPIC", "(", "emb_topic_x", ",", "self", ".", "num_topics", ",", "self", ".", "embedding_size", ",", "self", ".", "weight_init", ",", "self", ".", "bias_init", ",", "self", ".", "is_training", ")", "\n", "\n", "if", "self", ".", "configs", ".", "model_name", "==", "\"HCRNN_v1\"", ":", "\n", "            ", "custom_cell", "=", "HCRNN_cell_v1", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ",", "self", ".", "num_topics", ",", "self", ".", "theta", ",", "self", ".", "W_thetatv", ",", "self", ".", "weight_init", ",", "self", ".", "bias_init", ",", "\n", "self", ".", "gate_bias_init", ")", "\n", "", "elif", "self", ".", "configs", ".", "model_name", "==", "\"HCRNN_v2\"", ":", "\n", "            ", "custom_cell", "=", "HCRNN_cell_v2", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ",", "self", ".", "num_topics", ",", "self", ".", "theta", ",", "self", ".", "W_thetatv", ",", "self", ".", "weight_init", ",", "self", ".", "bias_init", ",", "\n", "self", ".", "gate_bias_init", ")", "\n", "", "elif", "self", ".", "configs", ".", "model_name", "==", "\"HCRNN_v3\"", ":", "\n", "            ", "custom_cell", "=", "HCRNN_cell_v3", "(", "self", ".", "rnn_hidden_size", ",", "self", ".", "embedding_size", ",", "self", ".", "num_topics", ",", "self", ".", "theta", ",", "self", ".", "W_thetatv", ",", "self", ".", "weight_init", ",", "self", ".", "bias_init", ",", "\n", "self", ".", "gate_bias_init", ")", "\n", "", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", "=", "custom_cell", ",", "inputs", "=", "emb_rnn_x", ",", "sequence_length", "=", "self", ".", "batch_var_length", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "all_hidden", "=", "outputs", "[", "0", "]", "\n", "self", ".", "all_state", "=", "outputs", "[", "1", "]", "\n", "self", ".", "reset", "=", "outputs", "[", "2", "]", "\n", "\n", "self", ".", "last_hidden", "=", "states", "[", "0", "]", "# 512 x 100", "\n", "self", ".", "last_state", "=", "states", "[", "1", "]", "# 512 x 100", "\n", "\n", "self", ".", "all_hidden", "=", "tf", ".", "transpose", "(", "self", ".", "all_hidden", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# 19x512x100", "\n", "self", ".", "all_state", "=", "tf", ".", "transpose", "(", "self", ".", "all_state", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# 19x512x100", "\n", "\n", "if", "self", ".", "att_type", "==", "\"normal_att\"", ":", "\n", "            ", "squares", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "compute_alpha", "(", "x", ",", "self", ".", "last_hidden", ",", "W_encoder", ",", "W_decoder", ",", "Bi_vector", ")", ",", "\n", "self", ".", "all_hidden", ")", "# 19x512", "\n", "self", ".", "local_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "squares", ")", "+", "100000000.", "*", "(", "self", ".", "mask", "-", "1", ")", ",", "\n", "axis", "=", "1", ")", "# batch_size * max_len", "\n", "attention_proj", "=", "tf", ".", "reduce_sum", "(", "self", ".", "all_hidden", "*", "tf", ".", "transpose", "(", "self", ".", "local_weight", ")", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "elif", "self", ".", "att_type", "==", "\"bi_att\"", ":", "\n", "            ", "global_squares", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "compute_global_alpha_norm", "(", "x", ",", "self", ".", "last_state", ",", "W_g1", ",", "W_g2", ")", ",", "self", ".", "all_state", ")", "\n", "self", ".", "global_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "global_squares", ")", "+", "100000000.", "*", "(", "self", ".", "mask", "-", "1", ")", ",", "\n", "axis", "=", "1", ")", "# batch_size * max_len", "\n", "global_attention_proj", "=", "tf", ".", "reduce_sum", "(", "self", ".", "all_hidden", "*", "tf", ".", "transpose", "(", "self", ".", "global_weight", ")", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "0", ")", "\n", "local_squares", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "compute_alpha", "(", "x", ",", "self", ".", "last_hidden", ",", "W_l1", ",", "W_l2", ",", "Bi_l_vector", ")", ",", "self", ".", "all_hidden", ")", "\n", "self", ".", "local_weight", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "local_squares", ")", "+", "100000000.", "*", "(", "self", ".", "mask", "-", "1", ")", ",", "\n", "axis", "=", "1", ")", "# batch_size * max_len", "\n", "local_attention_proj", "=", "tf", ".", "reduce_sum", "(", "self", ".", "all_hidden", "*", "tf", ".", "transpose", "(", "self", ".", "local_weight", ")", "[", ":", ",", ":", ",", "None", "]", ",", "axis", "=", "0", ")", "\n", "attention_proj", "=", "tf", ".", "concat", "(", "[", "global_attention_proj", ",", "local_attention_proj", "]", ",", "1", ")", "\n", "# num_items x 2*100", "\n", "", "if", "self", ".", "loss_type", "==", "'EMB'", ":", "\n", "            ", "proj", "=", "tf", ".", "concat", "(", "[", "attention_proj", ",", "self", ".", "last_hidden", "]", ",", "1", ")", "\n", "proj", "=", "tf", ".", "nn", ".", "dropout", "(", "proj", ",", "self", ".", "keep_prob_ho", ")", "\n", "ytem", "=", "tf", ".", "matmul", "(", "Wemb", ",", "bili", ")", "\n", "pred", "=", "tf", ".", "matmul", "(", "proj", ",", "tf", ".", "transpose", "(", "ytem", ")", ")", "\n", "self", ".", "pred", "=", "tf", ".", "nn", ".", "softmax", "(", "pred", ")", "\n", "self", ".", "pred_cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "pred", ",", "labels", "=", "self", ".", "rnn_y", ")", ")", "\n", "\n", "", "self", ".", "reg_cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reshape", "(", "kl_normal_reg_loss", "(", "mu_theta", ",", "std_theta", ")", ",", "[", "-", "1", ",", "1", "]", ")", ")", "\n", "self", ".", "cost", "=", "self", ".", "pred_cost", "+", "self", ".", "reg_lambda", "*", "self", ".", "reg_cost", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "fullvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "topic_vars", "=", "variable_parser", "(", "fullvars", ",", "'NSTOPIC'", ")", "\n", "rnn_vars", "=", "variable_parser", "(", "fullvars", ",", "'HCRNN'", ")", "\n", "topic_grads", "=", "tf", ".", "gradients", "(", "self", ".", "cost", ",", "topic_vars", ")", "\n", "rnn_grads", "=", "tf", ".", "gradients", "(", "self", ".", "cost", ",", "rnn_vars", ")", "\n", "if", "self", ".", "two_phase_learning", ":", "\n", "            ", "self", ".", "optimizer_rnn", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "rnn_grads", ",", "rnn_vars", ")", ")", "\n", "self", ".", "optimizer_topic", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "topic_grads", ",", "topic_vars", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer_total", "=", "optimizer", ".", "minimize", "(", "self", ".", "cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.train_model": [[189, 213], ["math.ceil", "range", "numpy.mean", "numpy.random.permutation", "int", "numpy.minimum", "utils.convert_batch_data_HCRNN", "batch_loss_list.append", "numpy.float32", "len", "HCRNN.HCRNN.sess.run", "HCRNN.HCRNN.sess.run", "HCRNN.HCRNN.sess.run", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data_HCRNN", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run"], ["", "", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "configs", ".", "is_shuffle", ":", "\n", "            ", "self", ".", "tr_sess_idx", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "tr_sess_idx", ")", "\n", "", "batch_loss_list", "=", "[", "]", "\n", "num_batch", "=", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "self", ".", "tr_sess_idx", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "            ", "start_itr", "=", "self", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "self", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "self", ".", "tr_sess_idx", ")", ")", "\n", "temp_batch_x", "=", "self", ".", "tr_x", "[", "self", ".", "tr_sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "temp_batch_y", "=", "self", ".", "tr_y", "[", "self", ".", "tr_sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "batch_x", ",", "batch_topic_x", ",", "batch_y", ",", "mask", ",", "labels", ",", "lengths", "=", "convert_batch_data_HCRNN", "(", "temp_batch_x", ",", "temp_batch_y", ",", "self", ".", "num_items", ",", "maxlen", "=", "self", ".", "maxlen", ")", "\n", "temp_keep_prob_ho", "=", "1.0", "-", "self", ".", "drop_prob_ho", "\n", "temp_keep_prob_input", "=", "1.0", "-", "self", ".", "drop_prob_input", "\n", "feed_dict", "=", "{", "self", ".", "rnn_x", ":", "batch_x", ",", "self", ".", "rnn_y", ":", "batch_y", ",", "self", ".", "topic_x", ":", "batch_topic_x", ",", "self", ".", "mask", ":", "mask", ",", "\n", "self", ".", "keep_prob_input", ":", "temp_keep_prob_input", ",", "self", ".", "keep_prob_ho", ":", "temp_keep_prob_ho", ",", "\n", "self", ".", "batch_var_length", ":", "lengths", "}", "\n", "if", "self", ".", "two_phase_learning", ":", "\n", "                ", "_", ",", "pred_loss_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer_topic", ",", "self", ".", "cost", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "_", ",", "pred_loss_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer_rnn", ",", "self", ".", "cost", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "pred_loss_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer_total", ",", "self", ".", "cost", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "batch_loss_list", ".", "append", "(", "pred_loss_", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "batch_loss_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.pred_evaluation": [[214, 255], ["range", "math.ceil", "range", "range", "len", "recalls.append", "mrrs.append", "evaluation_point_count.append", "int", "numpy.minimum", "utils.convert_batch_data_HCRNN", "HCRNN.HCRNN.sess.run", "batch_loss_list.append", "utils.evaluation", "len", "recall_list.append", "mrr_list.append", "numpy.mean", "numpy.float32", "len", "numpy.asarray", "numpy.asarray", "len"], "methods", ["home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.convert_batch_data_HCRNN", "home.repos.pwc.inspect_result.gtshs2_HCRNN.models.HCRNN.HCRNN.run", "home.repos.pwc.inspect_result.gtshs2_HCRNN.None.utils.evaluation"], ["", "def", "pred_evaluation", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "\"valid\"", ":", "\n", "            ", "sess_idx", "=", "self", ".", "val_sess_idx", "\n", "df_x", "=", "self", ".", "val_x", "\n", "df_y", "=", "self", ".", "val_y", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "            ", "sess_idx", "=", "self", ".", "te_sess_idx", "\n", "df_x", "=", "self", ".", "te_x", "\n", "df_y", "=", "self", ".", "te_y", "\n", "\n", "", "batch_loss_list", "=", "[", "]", "\n", "recalls", "=", "[", "]", ";", "mrrs", "=", "[", "]", ";", "evaluation_point_count", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", ":", "\n", "            ", "recalls", ".", "append", "(", "0", ")", ";", "mrrs", ".", "append", "(", "0", ")", ";", "evaluation_point_count", ".", "append", "(", "0", ")", "\n", "", "num_batch", "=", "math", ".", "ceil", "(", "np", ".", "float32", "(", "len", "(", "sess_idx", ")", ")", "/", "self", ".", "batch_size", ")", "\n", "#argmax_dict = dict()", "\n", "for", "batch_itr", "in", "range", "(", "int", "(", "num_batch", ")", ")", ":", "\n", "            ", "start_itr", "=", "self", ".", "batch_size", "*", "batch_itr", "\n", "end_itr", "=", "np", ".", "minimum", "(", "self", ".", "batch_size", "*", "(", "batch_itr", "+", "1", ")", ",", "len", "(", "sess_idx", ")", ")", "\n", "temp_batch_x", "=", "df_x", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "temp_batch_y", "=", "df_y", "[", "sess_idx", "[", "start_itr", ":", "end_itr", "]", "]", "\n", "batch_x", ",", "batch_topic_x", ",", "batch_y", ",", "mask", ",", "labels", ",", "lengths", "=", "convert_batch_data_HCRNN", "(", "temp_batch_x", ",", "temp_batch_y", ",", "self", ".", "num_items", ",", "maxlen", "=", "self", ".", "maxlen", ")", "\n", "feed_dict", "=", "{", "self", ".", "rnn_x", ":", "batch_x", ",", "self", ".", "rnn_y", ":", "batch_y", ",", "self", ".", "topic_x", ":", "batch_topic_x", ",", "self", ".", "mask", ":", "mask", ",", "\n", "self", ".", "keep_prob_input", ":", "1.0", ",", "self", ".", "keep_prob_ho", ":", "1.0", ",", "\n", "self", ".", "batch_var_length", ":", "lengths", ",", "self", ".", "is_training", ":", "False", "}", "\n", "preds", ",", "pred_loss_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "pred", ",", "self", ".", "cost", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "batch_loss_list", ".", "append", "(", "pred_loss_", ")", "\n", "\n", "recalls", ",", "mrrs", ",", "evaluation_point_count", "=", "evaluation", "(", "labels", ",", "preds", ",", "recalls", ",", "mrrs", ",", "evaluation_point_count", ",", "self", ".", "k", ")", "\n", "\n", "", "recall_list", "=", "[", "]", "\n", "mrr_list", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "len", "(", "self", ".", "k", ")", ")", ":", "\n", "            ", "recall", "=", "np", ".", "asarray", "(", "recalls", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "mrr", "=", "np", ".", "asarray", "(", "mrrs", "[", "itr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "/", "evaluation_point_count", "[", "itr", "]", "\n", "if", "self", ".", "max_val_recall", "[", "itr", "]", "<", "recall", "and", "mode", "==", "\"valid\"", ":", "self", ".", "max_val_recall", "[", "itr", "]", "=", "recall", "\n", "if", "self", ".", "max_te_recall", "[", "itr", "]", "<", "recall", "and", "mode", "==", "\"test\"", ":", "self", ".", "max_te_recall", "[", "itr", "]", "=", "recall", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "mrr_list", ".", "append", "(", "mrr", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "batch_loss_list", ")", ",", "recall_list", ",", "mrr_list", "\n", "", "", ""]]}