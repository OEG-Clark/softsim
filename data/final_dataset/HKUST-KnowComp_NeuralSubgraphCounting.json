{"home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rnn.RNNLayer.__init__": [[12, 33], ["torch.Module.__init__", "rnn_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "NotImplementedError", "getattr", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "getattr", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "rnn_type", ",", "bidirectional", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "RNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "rnn_type", "==", "\"GRU\"", ":", "\n", "            ", "rnn_layer", "=", "nn", ".", "GRU", "\n", "", "elif", "rnn_type", "==", "\"LSTM\"", ":", "\n", "            ", "rnn_layer", "=", "nn", ".", "LSTM", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Currently, %s is not supported!\"", "%", "(", "rnn_type", ")", ")", "\n", "", "self", ".", "rnn", "=", "rnn_layer", "(", "input_dim", ",", "hidden_dim", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "# init", "\n", "for", "layer_weights", "in", "self", ".", "rnn", ".", "_all_weights", ":", "\n", "            ", "for", "w", "in", "layer_weights", ":", "\n", "                ", "if", "\"weight\"", "in", "w", ":", "\n", "                    ", "weight", "=", "getattr", "(", "self", ".", "rnn", ",", "w", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "weight", ")", "\n", "", "elif", "\"bias\"", "in", "w", ":", "\n", "                    ", "bias", "=", "getattr", "(", "self", ".", "rnn", ",", "w", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rnn.RNNLayer.forward": [[34, 38], ["rnn.RNNLayer.rnn", "rnn.RNNLayer.drop"], "methods", ["None"], ["", "", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "h", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rnn.RNN.__init__": [[40, 65], ["basemodel.EdgeSeqModel.__init__", "rnn.RNN.get_emb_dim", "rnn.RNN.create_net", "rnn.RNN.create_predict_net", "rnn.RNN.create_net", "rnn.RNN.get_enc_dim"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_predict_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# create networks", "\n", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "self", ".", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "g_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rnn_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rnn_graph_num_layers\"", "]", ",", "\n", "rnn_type", "=", "config", "[", "\"rnn_type\"", "]", ",", "bidirectional", "=", "config", "[", "\"rnn_bidirectional\"", "]", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "p_net", ",", "p_dim", "=", "(", "self", ".", "g_net", ",", "g_dim", ")", "if", "self", ".", "share_arch", "else", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "p_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rnn_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rnn_pattern_num_layers\"", "]", ",", "\n", "rnn_type", "=", "config", "[", "\"rnn_type\"", "]", ",", "bidirectional", "=", "config", "[", "\"rnn_bidirectional\"", "]", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# create predict layers", "\n", "if", "self", ".", "add_enc", ":", "\n", "            ", "p_enc_dim", ",", "g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "p_dim", "+=", "p_enc_dim", "\n", "g_dim", "+=", "g_enc_dim", "\n", "", "self", ".", "predict_net", "=", "self", ".", "create_predict_net", "(", "config", "[", "\"predict_net\"", "]", ",", "\n", "pattern_dim", "=", "p_dim", ",", "graph_dim", "=", "g_dim", ",", "hidden_dim", "=", "config", "[", "\"predict_net_hidden_dim\"", "]", ",", "\n", "num_heads", "=", "config", "[", "\"predict_net_num_heads\"", "]", ",", "recurrent_steps", "=", "config", "[", "\"predict_net_recurrent_steps\"", "]", ",", "\n", "mem_len", "=", "config", "[", "\"predict_net_mem_len\"", "]", ",", "mem_init", "=", "config", "[", "\"predict_net_mem_init\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rnn.RNN.create_net": [[66, 82], ["kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.add_module", "rnn.RNNLayer"], "methods", ["None"], ["", "def", "create_net", "(", "self", ",", "name", ",", "input_dim", ",", "**", "kw", ")", ":", "\n", "        ", "num_layers", "=", "kw", ".", "get", "(", "\"num_layers\"", ",", "3", ")", "\n", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "rnn_type", "=", "kw", ".", "get", "(", "\"rnn_type\"", ",", "\"LSTM\"", ")", "\n", "bidirectional", "=", "kw", ".", "get", "(", "\"bidirectional\"", ",", "\"False\"", ")", "\n", "dropout", "=", "kw", ".", "get", "(", "\"dropout\"", ",", "0.0", ")", "\n", "\n", "num_features", "=", "hidden_dim", "*", "2", "if", "bidirectional", "else", "hidden_dim", "\n", "rnns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "rnns", ".", "add_module", "(", "\"%s_rnn%d\"", "%", "(", "name", ",", "i", ")", ",", "RNNLayer", "(", "\n", "input_dim", "=", "input_dim", "if", "i", "==", "0", "else", "num_features", ",", "hidden_dim", "=", "hidden_dim", ",", "\n", "rnn_type", "=", "rnn_type", ",", "bidirectional", "=", "bidirectional", ",", "\n", "dropout", "=", "dropout", ")", ")", "\n", "\n", "", "return", "rnns", ",", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rnn.RNN.increase_input_size": [[83, 93], ["rnn.RNN.get_enc_dim", "super().increase_input_size", "rnn.RNN.get_enc_dim", "rnn.RNN.predict_net.increase_input_size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size"], ["", "def", "increase_input_size", "(", "self", ",", "config", ")", ":", "\n", "        ", "old_p_enc_dim", ",", "old_g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "super", "(", "RNN", ",", "self", ")", ".", "increase_input_size", "(", "config", ")", "\n", "new_p_enc_dim", ",", "new_g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "\n", "# increase predict network", "\n", "if", "self", ".", "add_enc", "and", "(", "new_g_enc_dim", "!=", "old_g_enc_dim", "or", "new_p_enc_dim", "!=", "old_p_enc_dim", ")", ":", "\n", "            ", "self", ".", "predict_net", ".", "increase_input_size", "(", "\n", "self", ".", "predict_net", ".", "pattern_dim", "+", "new_p_enc_dim", "-", "old_p_enc_dim", ",", "\n", "self", ".", "predict_net", ".", "graph_dim", "+", "new_g_enc_dim", "-", "old_g_enc_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rnn.RNN.increase_net": [[94, 122], ["rnn.RNN.get_emb_dim", "rnn.RNN.create_net", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "rnn.RNN.create_net", "new_g_rnn.load_state_dict", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "old_g_rnn.state_dict", "new_p_rnn.load_state_dict", "old_p_rnn.state_dict"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net"], ["", "", "def", "increase_net", "(", "self", ",", "config", ")", ":", "\n", "        ", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "g_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rnn_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rnn_graph_num_layers\"", "]", ",", "\n", "rnn_type", "=", "config", "[", "\"rnn_type\"", "]", ",", "bidirectional", "=", "config", "[", "\"rnn_bidirectional\"", "]", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "g_net", ")", ">=", "len", "(", "self", ".", "g_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "old_g_rnn", ",", "new_g_rnn", "in", "zip", "(", "self", ".", "g_net", ",", "g_net", ")", ":", "\n", "                ", "new_g_rnn", ".", "load_state_dict", "(", "old_g_rnn", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "g_net", "\n", "self", ".", "g_net", "=", "g_net", "\n", "\n", "if", "self", ".", "share_arch", ":", "\n", "            ", "self", ".", "p_net", "=", "self", ".", "g_net", "\n", "", "else", ":", "\n", "            ", "p_net", ",", "p_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "p_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rnn_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rnn_graph_num_layers\"", "]", ",", "\n", "rnn_type", "=", "config", "[", "\"rnn_type\"", "]", ",", "bidirectional", "=", "config", "[", "\"rnn_bidirectional\"", "]", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "p_net", ")", ">=", "len", "(", "self", ".", "p_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "old_p_rnn", ",", "new_p_rnn", "in", "zip", "(", "self", ".", "p_net", ",", "p_net", ")", ":", "\n", "                    ", "new_p_rnn", ".", "load_state_dict", "(", "old_p_rnn", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "p_net", "\n", "self", ".", "p_net", "=", "p_net", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rnn.RNN.forward": [[123, 158], ["pattern_len.size", "rnn.RNN.get_filter_gate", "rnn.RNN.get_emb", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "rnn.RNN.predict_net", "graph_emb.masked_fill_", "p_rnn", "g_rnn", "rnn.RNN.get_enc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "graph_enc.masked_fill_", "utils.batch_convert_len_to_mask", "utils.batch_convert_len_to_mask"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_filter_gate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_emb", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "\n", "gate", "=", "self", ".", "get_filter_gate", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "zero_mask", "=", "(", "gate", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "if", "gate", "is", "not", "None", "else", "None", "\n", "pattern_emb", ",", "graph_emb", "=", "self", ".", "get_emb", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "            ", "graph_emb", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "\n", "", "pattern_output", "=", "pattern_emb", "\n", "for", "p_rnn", "in", "self", ".", "p_net", ":", "\n", "            ", "o", "=", "p_rnn", "(", "pattern_output", ")", "\n", "pattern_output", "=", "o", "+", "pattern_output", "\n", "", "pattern_mask", "=", "(", "batch_convert_len_to_mask", "(", "pattern_len", ")", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pattern_output", ".", "masked_fill_", "(", "pattern_mask", ",", "0.0", ")", "\n", "\n", "graph_output", "=", "graph_emb", "\n", "for", "g_rnn", "in", "self", ".", "g_net", ":", "\n", "            ", "o", "=", "g_rnn", "(", "graph_output", ")", "\n", "graph_output", "=", "o", "+", "graph_output", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_output", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "", "", "graph_mask", "=", "(", "batch_convert_len_to_mask", "(", "graph_len", ")", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "graph_output", ".", "masked_fill_", "(", "graph_mask", ",", "0.0", ")", "\n", "\n", "if", "self", ".", "add_enc", ":", "\n", "            ", "pattern_enc", ",", "graph_enc", "=", "self", ".", "get_enc", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_enc", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "", "pattern_output", "=", "torch", ".", "cat", "(", "[", "pattern_enc", ",", "pattern_output", "]", ",", "dim", "=", "2", ")", "\n", "graph_output", "=", "torch", ".", "cat", "(", "[", "graph_enc", ",", "graph_output", "]", ",", "dim", "=", "2", ")", "\n", "\n", "", "pred", "=", "self", ".", "predict_net", "(", "pattern_output", ",", "pattern_len", ",", "graph_output", ",", "graph_len", ")", "\n", "\n", "return", "pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgcn.RGCN.__init__": [[14, 44], ["basemodel.GraphAdjModel.__init__", "rgcn.RGCN.get_emb_dim", "rgcn.RGCN.create_net", "rgcn.RGCN.create_predict_net", "rgcn.RGCN.create_net", "rgcn.RGCN.get_enc_dim"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_predict_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RGCN", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "ignore_norm", "=", "config", "[", "\"rgcn_ignore_norm\"", "]", "\n", "\n", "# create networks", "\n", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "self", ".", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "g_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rgcn_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rgcn_graph_num_layers\"", "]", ",", "\n", "num_rels", "=", "self", ".", "max_ngel", ",", "num_bases", "=", "config", "[", "\"rgcn_num_bases\"", "]", ",", "regularizer", "=", "config", "[", "\"rgcn_regularizer\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "p_net", ",", "p_dim", "=", "(", "self", ".", "g_net", ",", "g_dim", ")", "if", "self", ".", "share_arch", "else", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "p_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rgcn_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rgcn_pattern_num_layers\"", "]", ",", "\n", "num_rels", "=", "self", ".", "max_npel", ",", "num_bases", "=", "config", "[", "\"rgcn_num_bases\"", "]", ",", "regularizer", "=", "config", "[", "\"rgcn_regularizer\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# create predict layers", "\n", "if", "self", ".", "add_enc", ":", "\n", "            ", "p_enc_dim", ",", "g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "p_dim", "+=", "p_enc_dim", "\n", "g_dim", "+=", "g_enc_dim", "\n", "", "if", "self", ".", "add_degree", ":", "\n", "            ", "p_dim", "+=", "1", "\n", "g_dim", "+=", "1", "\n", "", "self", ".", "predict_net", "=", "self", ".", "create_predict_net", "(", "config", "[", "\"predict_net\"", "]", ",", "\n", "pattern_dim", "=", "p_dim", ",", "graph_dim", "=", "g_dim", ",", "hidden_dim", "=", "config", "[", "\"predict_net_hidden_dim\"", "]", ",", "\n", "num_heads", "=", "config", "[", "\"predict_net_num_heads\"", "]", ",", "recurrent_steps", "=", "config", "[", "\"predict_net_recurrent_steps\"", "]", ",", "\n", "mem_len", "=", "config", "[", "\"predict_net_mem_len\"", "]", ",", "mem_init", "=", "config", "[", "\"predict_net_mem_init\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgcn.RGCN.create_net": [[45, 73], ["kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.modules", "torch.ModuleList.add_module", "isinstance", "dgl.nn.pytorch.conv.RelGraphConv", "dgl.nn.pytorch.conv.RelGraphConv", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "utils.map_activation_str_to_layer"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["", "def", "create_net", "(", "self", ",", "name", ",", "input_dim", ",", "**", "kw", ")", ":", "\n", "        ", "num_layers", "=", "kw", ".", "get", "(", "\"num_layers\"", ",", "1", ")", "\n", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "num_rels", "=", "kw", ".", "get", "(", "\"num_rels\"", ",", "1", ")", "\n", "num_bases", "=", "kw", ".", "get", "(", "\"num_bases\"", ",", "8", ")", "\n", "regularizer", "=", "kw", ".", "get", "(", "\"regularizer\"", ",", "\"basis\"", ")", "\n", "act_func", "=", "kw", ".", "get", "(", "\"act_func\"", ",", "\"relu\"", ")", "\n", "dropout", "=", "kw", ".", "get", "(", "\"dropout\"", ",", "0.0", ")", "\n", "\n", "rgcns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "rgcns", ".", "add_module", "(", "\"%s_rgc%d\"", "%", "(", "name", ",", "i", ")", ",", "RelGraphConv", "(", "\n", "in_feat", "=", "hidden_dim", "if", "i", ">", "0", "else", "input_dim", ",", "out_feat", "=", "hidden_dim", ",", "num_rels", "=", "num_rels", ",", "\n", "regularizer", "=", "regularizer", ",", "num_bases", "=", "num_bases", ",", "\n", "activation", "=", "map_activation_str_to_layer", "(", "act_func", ")", ",", "self_loop", "=", "True", ",", "dropout", "=", "dropout", ")", ")", "\n", "\n", "", "for", "m", "in", "rgcns", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "RelGraphConv", ")", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.0", ",", "1", "/", "(", "hidden_dim", ")", "**", "0.5", ")", "\n", "", "if", "hasattr", "(", "m", ",", "\"w_comp\"", ")", "and", "m", ".", "w_comp", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "w_comp", ",", "0.0", ",", "1", "/", "(", "hidden_dim", ")", "**", "0.5", ")", "\n", "", "if", "hasattr", "(", "m", ",", "\"loop_weight\"", ")", "and", "m", ".", "loop_weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "loop_weight", ",", "0.0", ",", "1", "/", "(", "hidden_dim", ")", "**", "0.5", ")", "\n", "", "if", "hasattr", "(", "m", ",", "\"h_bias\"", ")", "and", "m", ".", "h_bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "h_bias", ")", "\n", "\n", "", "", "", "return", "rgcns", ",", "hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgcn.RGCN.increase_input_size": [[74, 148], ["rgcn.RGCN.get_enc_dim", "super().increase_input_size", "rgcn.RGCN.get_enc_dim", "rgcn.RGCN.predict_net.increase_input_size", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_w_comp[].data.copy_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "np.diag_indices", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_weight[].data.copy_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_w_comp[].data.copy_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "np.diap_indices", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_weight[].data.copy_", "g_rgcn.weight.size", "p_rgcn.weight.size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size"], ["", "def", "increase_input_size", "(", "self", ",", "config", ")", ":", "\n", "        ", "old_p_enc_dim", ",", "old_g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "old_max_npel", ",", "old_max_ngel", "=", "self", ".", "max_npel", ",", "self", ".", "max_ngel", "\n", "super", "(", "RGCN", ",", "self", ")", ".", "increase_input_size", "(", "config", ")", "\n", "new_p_enc_dim", ",", "new_g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "new_max_npel", ",", "new_max_ngel", "=", "self", ".", "max_npel", ",", "self", ".", "max_ngel", "\n", "\n", "# increase networks", "\n", "if", "new_max_ngel", "!=", "old_max_ngel", ":", "\n", "            ", "for", "g_rgcn", "in", "self", ".", "g_net", ":", "\n", "                ", "num_bases", "=", "g_rgcn", ".", "num_bases", "\n", "device", "=", "g_rgcn", ".", "weight", ".", "device", "\n", "regularizer", "=", "g_rgcn", ".", "regularizer", "\n", "if", "regularizer", "==", "\"basis\"", ":", "\n", "                    ", "if", "num_bases", "<", "old_max_ngel", ":", "\n", "                        ", "new_w_comp", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_ngel", ",", "num_bases", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "new_w_comp", "[", ":", "old_max_ngel", "]", ".", "data", ".", "copy_", "(", "g_rgcn", ".", "w_comp", ")", "\n", "", "", "else", ":", "\n", "                        ", "new_w_comp", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_ngel", ",", "num_bases", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "ind", "=", "np", ".", "diag_indices", "(", "num_bases", ")", "\n", "new_w_comp", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "1.0", "\n", "", "", "del", "g_rgcn", ".", "w_comp", "\n", "g_rgcn", ".", "w_comp", "=", "new_w_comp", "\n", "", "elif", "regularizer", "==", "\"bdd\"", ":", "\n", "                    ", "new_weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_ngel", ",", "g_rgcn", ".", "weight", ".", "size", "(", "1", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "new_weight", "[", ":", "old_max_ngel", "]", ".", "data", ".", "copy_", "(", "g_rgcn", ".", "weight", ")", "\n", "", "del", "g_rgcn", ".", "weight", "\n", "g_rgcn", ".", "weight", "=", "new_weight", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "", "if", "self", ".", "share_arch", ":", "\n", "            ", "del", "self", ".", "p_net", "\n", "self", ".", "p_net", "=", "self", ".", "g_net", "\n", "", "elif", "new_max_npel", "!=", "old_max_npel", ":", "\n", "            ", "for", "p_rgcn", "in", "self", ".", "p_net", ":", "\n", "                ", "num_bases", "=", "p_rgcn", ".", "num_bases", "\n", "device", "=", "p_rgcn", ".", "weight", ".", "device", "\n", "regularizer", "=", "p_rgcn", ".", "regularizer", "\n", "if", "regularizer", "==", "\"basis\"", ":", "\n", "                    ", "if", "num_bases", "<", "old_max_npel", ":", "\n", "                        ", "new_w_comp", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_npel", ",", "num_bases", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "new_w_comp", "[", ":", "old_max_npel", "]", ".", "data", ".", "copy_", "(", "p_rgcn", ".", "w_comp", ")", "\n", "", "", "else", ":", "\n", "                        ", "new_w_comp", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_npel", ",", "num_bases", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "ind", "=", "np", ".", "diap_indices", "(", "num_bases", ")", "\n", "new_w_comp", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "1.0", "\n", "", "", "del", "p_rgcn", ".", "w_comp", "\n", "p_rgcn", ".", "w_comp", "=", "new_w_comp", "\n", "", "elif", "regularizer", "==", "\"bdd\"", ":", "\n", "                    ", "new_weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "max_npel", ",", "p_rgcn", ".", "weight", ".", "size", "(", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "new_weight", "[", ":", "old_max_npel", "]", ".", "data", ".", "copy_", "(", "p_rgcn", ".", "weight", ")", "\n", "", "del", "p_rgcn", ".", "weight", "\n", "p_rgcn", ".", "weight", "=", "new_weight", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "# increase predict network", "\n", "", "", "", "if", "self", ".", "add_enc", "and", "(", "new_g_enc_dim", "!=", "old_g_enc_dim", "or", "new_p_enc_dim", "!=", "old_p_enc_dim", ")", ":", "\n", "            ", "self", ".", "predict_net", ".", "increase_input_size", "(", "\n", "self", ".", "predict_net", ".", "pattern_dim", "+", "new_p_enc_dim", "-", "old_p_enc_dim", ",", "\n", "self", ".", "predict_net", ".", "graph_dim", "+", "new_g_enc_dim", "-", "old_g_enc_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgcn.RGCN.increase_net": [[149, 177], ["rgcn.RGCN.get_emb_dim", "rgcn.RGCN.create_net", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "rgcn.RGCN.create_net", "new_g_rgcn.load_state_dict", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "old_g_rgcn.state_dict", "new_p_rgcn.load_state_dict", "old_p_rgcn.state_dict"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net"], ["", "", "def", "increase_net", "(", "self", ",", "config", ")", ":", "\n", "        ", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "g_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rgcn_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rgcn_graph_num_layers\"", "]", ",", "\n", "num_rels", "=", "self", ".", "max_ngel", ",", "num_bases", "=", "config", "[", "\"rgcn_num_bases\"", "]", ",", "regularizer", "=", "config", "[", "\"rgcn_regularizer\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "g_net", ")", ">=", "len", "(", "self", ".", "g_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "old_g_rgcn", ",", "new_g_rgcn", "in", "zip", "(", "self", ".", "g_net", ",", "g_net", ")", ":", "\n", "                ", "new_g_rgcn", ".", "load_state_dict", "(", "old_g_rgcn", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "g_net", "\n", "self", ".", "g_net", "=", "g_net", "\n", "\n", "if", "self", ".", "share_arch", ":", "\n", "            ", "self", ".", "p_net", "=", "self", ".", "g_net", "\n", "", "else", ":", "\n", "            ", "p_net", ",", "p_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "p_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rgcn_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rgcn_pattern_num_layers\"", "]", ",", "\n", "num_rels", "=", "self", ".", "max_npel", ",", "num_bases", "=", "config", "[", "\"rgcn_num_bases\"", "]", ",", "regularizer", "=", "config", "[", "\"rgcn_regularizer\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "p_net", ")", ">=", "len", "(", "self", ".", "p_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "old_p_rgcn", ",", "new_p_rgcn", "in", "zip", "(", "self", ".", "p_net", ",", "p_net", ")", ":", "\n", "                    ", "new_p_rgcn", ".", "load_state_dict", "(", "old_p_rgcn", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "p_net", "\n", "self", ".", "p_net", "=", "p_net", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgcn.RGCN.forward": [[178, 240], ["pattern_len.size", "rgcn.RGCN.get_filter_gate", "rgcn.RGCN.get_emb", "rgcn.RGCN.predict_net", "graph_emb.masked_fill_", "p_rgcn", "g_rgcn", "rgcn.RGCN.get_enc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern.apply_edges", "pattern.edata[].masked_fill_", "pattern.edata[].unsqueeze", "graph.apply_edges", "graph.edata[].masked_fill_", "graph.edata[].unsqueeze", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "graph_enc.masked_fill_", "rgcn.RGCN.get_enc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.split_and_batchify_graph_feats", "utils.split_and_batchify_graph_feats", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "pattern.ndata[].unsqueeze", "graph.ndata[].unsqueeze", "graph_enc.masked_fill_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern.ndata[].unsqueeze", "graph.ndata[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_filter_gate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_emb", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.split_and_batchify_graph_feats", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.split_and_batchify_graph_feats"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "\n", "gate", "=", "self", ".", "get_filter_gate", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "zero_mask", "=", "(", "gate", "==", "0", ")", "if", "gate", "is", "not", "None", "else", "None", "\n", "pattern_emb", ",", "graph_emb", "=", "self", ".", "get_emb", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "            ", "graph_emb", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "\n", "", "pattern_output", "=", "pattern_emb", "\n", "if", "self", ".", "ignore_norm", ":", "\n", "            ", "pattern_norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "\"norm\"", "in", "pattern", ".", "edata", ":", "\n", "                ", "pattern_norm", "=", "pattern", ".", "edata", "[", "\"norm\"", "]", "\n", "", "else", ":", "\n", "                ", "pattern", ".", "apply_edges", "(", "lambda", "e", ":", "{", "\"norm\"", ":", "1.0", "/", "e", ".", "dst", "[", "\"indeg\"", "]", "}", ")", "\n", "pattern", ".", "edata", "[", "\"norm\"", "]", ".", "masked_fill_", "(", "torch", ".", "isinf", "(", "pattern", ".", "edata", "[", "\"norm\"", "]", ")", ",", "0.0", ")", "\n", "pattern", ".", "edata", "[", "\"norm\"", "]", "=", "pattern", ".", "edata", "[", "\"norm\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pattern_norm", "=", "pattern", ".", "edata", "[", "\"norm\"", "]", "\n", "", "", "for", "p_rgcn", "in", "self", ".", "p_net", ":", "\n", "            ", "o", "=", "p_rgcn", "(", "pattern", ",", "pattern_output", ",", "pattern", ".", "edata", "[", "\"label\"", "]", ",", "pattern_norm", ")", "\n", "pattern_output", "=", "o", "+", "pattern_output", "\n", "\n", "", "graph_output", "=", "graph_emb", "\n", "if", "self", ".", "ignore_norm", ":", "\n", "            ", "graph_norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "\"norm\"", "in", "graph", ".", "edata", ":", "\n", "                ", "graph_norm", "=", "graph", ".", "edata", "[", "\"norm\"", "]", "\n", "", "else", ":", "\n", "                ", "graph", ".", "apply_edges", "(", "lambda", "e", ":", "{", "\"norm\"", ":", "1.0", "/", "e", ".", "dst", "[", "\"indeg\"", "]", "}", ")", "\n", "graph", ".", "edata", "[", "\"norm\"", "]", ".", "masked_fill_", "(", "torch", ".", "isinf", "(", "graph", ".", "edata", "[", "\"norm\"", "]", ")", ",", "0.0", ")", "\n", "graph", ".", "edata", "[", "\"norm\"", "]", "=", "graph", ".", "edata", "[", "\"norm\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "graph_norm", "=", "graph", ".", "edata", "[", "\"norm\"", "]", "\n", "", "", "for", "g_rgcn", "in", "self", ".", "g_net", ":", "\n", "            ", "o", "=", "g_rgcn", "(", "graph", ",", "graph_output", ",", "graph", ".", "edata", "[", "\"label\"", "]", ",", "graph_norm", ")", "\n", "graph_output", "=", "o", "+", "graph_output", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_output", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "\n", "", "", "if", "self", ".", "add_enc", "and", "self", ".", "add_degree", ":", "\n", "            ", "pattern_enc", ",", "graph_enc", "=", "self", ".", "get_enc", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_enc", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "", "pattern_output", "=", "torch", ".", "cat", "(", "[", "pattern_enc", ",", "pattern_output", ",", "pattern", ".", "ndata", "[", "\"indeg\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "graph_output", "=", "torch", ".", "cat", "(", "[", "graph_enc", ",", "graph_output", ",", "graph", ".", "ndata", "[", "\"indeg\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "add_enc", ":", "\n", "            ", "pattern_enc", ",", "graph_enc", "=", "self", ".", "get_enc", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_enc", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "", "pattern_output", "=", "torch", ".", "cat", "(", "[", "pattern_enc", ",", "pattern_output", "]", ",", "dim", "=", "1", ")", "\n", "graph_output", "=", "torch", ".", "cat", "(", "[", "graph_enc", ",", "graph_output", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "add_degree", ":", "\n", "            ", "pattern_output", "=", "torch", ".", "cat", "(", "[", "pattern_output", ",", "pattern", ".", "ndata", "[", "\"indeg\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "graph_output", "=", "torch", ".", "cat", "(", "[", "graph_output", ",", "graph", ".", "ndata", "[", "\"indeg\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "pred", "=", "self", ".", "predict_net", "(", "\n", "split_and_batchify_graph_feats", "(", "pattern_output", ",", "pattern_len", ")", "[", "0", "]", ",", "pattern_len", ",", "\n", "split_and_batchify_graph_feats", "(", "graph_output", ",", "graph_len", ")", "[", "0", "]", ",", "graph_len", ")", "\n", "\n", "return", "pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.__init__": [[17, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "act_func", "=", "config", "[", "\"activation_function\"", "]", "\n", "self", ".", "init_emb", "=", "config", "[", "\"init_emb\"", "]", "\n", "self", ".", "share_emb", "=", "config", "[", "\"share_emb\"", "]", "\n", "self", ".", "share_arch", "=", "config", "[", "\"share_arch\"", "]", "\n", "self", ".", "base", "=", "config", "[", "\"base\"", "]", "\n", "self", ".", "max_ngv", "=", "config", "[", "\"max_ngv\"", "]", "\n", "self", ".", "max_ngvl", "=", "config", "[", "\"max_ngvl\"", "]", "\n", "self", ".", "max_nge", "=", "config", "[", "\"max_nge\"", "]", "\n", "self", ".", "max_ngel", "=", "config", "[", "\"max_ngel\"", "]", "\n", "self", ".", "max_npv", "=", "config", "[", "\"max_npv\"", "]", "\n", "self", ".", "max_npvl", "=", "config", "[", "\"max_npvl\"", "]", "\n", "self", ".", "max_npe", "=", "config", "[", "\"max_npe\"", "]", "\n", "self", ".", "max_npel", "=", "config", "[", "\"max_npel\"", "]", "\n", "\n", "self", ".", "emb_dim", "=", "config", "[", "\"emb_dim\"", "]", "\n", "self", ".", "dropout", "=", "config", "[", "\"dropout\"", "]", "\n", "self", ".", "dropatt", "=", "config", "[", "\"dropatt\"", "]", "\n", "self", ".", "add_enc", "=", "config", "[", "\"predict_net_add_enc\"", "]", "\n", "\n", "# create encoding layer", "\n", "# create filter layers", "\n", "# create embedding layers", "\n", "# create networks", "\n", "self", ".", "p_net", ",", "self", ".", "g_net", "=", "None", ",", "None", "\n", "# create predict layers", "\n", "self", ".", "predict_net", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.get_emb_dim": [[47, 52], ["basemodel.BaseModel.get_enc_dim"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim"], ["", "def", "get_emb_dim", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "init_emb", "==", "\"None\"", ":", "\n", "            ", "return", "self", ".", "get_enc_dim", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.get_enc": [[53, 55], ["None"], "methods", ["None"], ["", "", "def", "get_enc", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.get_emb": [[56, 58], ["None"], "methods", ["None"], ["", "def", "get_emb", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.get_filter_gate": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_filter_gate", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_filter": [[62, 70], ["filternet.MaxGatedFilterNet", "NotImplementedError"], "methods", ["None"], ["", "def", "create_filter", "(", "self", ",", "filter_type", ")", ":", "\n", "        ", "if", "filter_type", "==", "\"None\"", ":", "\n", "            ", "filter_net", "=", "None", "\n", "", "elif", "filter_type", "==", "\"MaxGatedFilterNet\"", ":", "\n", "            ", "filter_net", "=", "MaxGatedFilterNet", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Currently, %s is not supported!\"", "%", "(", "filter_type", ")", ")", "\n", "", "return", "filter_net", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc": [[71, 78], ["utils.get_enc_len", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.int2onehot", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.int2onehot"], ["", "def", "create_enc", "(", "self", ",", "max_n", ",", "base", ")", ":", "\n", "        ", "enc_len", "=", "get_enc_len", "(", "max_n", "-", "1", ",", "base", ")", "\n", "enc_dim", "=", "enc_len", "*", "base", "\n", "enc", "=", "nn", ".", "Embedding", "(", "max_n", ",", "enc_dim", ")", "\n", "enc", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "int2onehot", "(", "np", ".", "arange", "(", "0", ",", "max_n", ")", ",", "enc_len", ",", "base", ")", ")", ")", "\n", "enc", ".", "weight", ".", "requires_grad", "=", "False", "\n", "return", "enc", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_emb": [[79, 91], ["embedding.OrthogonalEmbedding", "embedding.NormalEmbedding", "embedding.EquivariantEmbedding"], "methods", ["None"], ["", "def", "create_emb", "(", "self", ",", "input_dim", ",", "emb_dim", ",", "init_emb", "=", "\"Orthogonal\"", ")", ":", "\n", "        ", "if", "init_emb", "==", "\"None\"", ":", "\n", "            ", "emb", "=", "None", "\n", "", "elif", "init_emb", "==", "\"Orthogonal\"", ":", "\n", "            ", "emb", "=", "OrthogonalEmbedding", "(", "input_dim", ",", "emb_dim", ")", "\n", "", "elif", "init_emb", "==", "\"Normal\"", ":", "\n", "            ", "emb", "=", "NormalEmbedding", "(", "input_dim", ",", "emb_dim", ")", "\n", "", "elif", "init_emb", "==", "\"Equivariant\"", ":", "\n", "            ", "emb", "=", "EquivariantEmbedding", "(", "input_dim", ",", "emb_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_net": [[92, 94], ["None"], "methods", ["None"], ["", "def", "create_net", "(", "self", ",", "name", ",", "input_dim", ",", "**", "kw", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_predict_net": [[95, 178], ["kw.get", "predictnet.MeanPredictNet", "kw.get", "predictnet.SumPredictNet", "kw.get", "predictnet.MaxPredictNet", "kw.get", "kw.get", "kw.get", "predictnet.MeanAttnPredictNet", "kw.get", "kw.get", "kw.get", "predictnet.SumAttnPredictNet", "kw.get", "kw.get", "kw.get", "predictnet.MaxAttnPredictNet", "kw.get", "kw.get", "kw.get", "kw.get", "predictnet.MeanMemAttnPredictNet", "kw.get", "kw.get", "kw.get", "kw.get", "predictnet.SumMemAttnPredictNet", "kw.get", "kw.get", "kw.get", "kw.get", "predictnet.MaxMemAttnPredictNet", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "predictnet.DIAMNet", "NotImplementedError"], "methods", ["None"], ["", "def", "create_predict_net", "(", "self", ",", "predict_type", ",", "pattern_dim", ",", "graph_dim", ",", "**", "kw", ")", ":", "\n", "        ", "if", "predict_type", "==", "\"None\"", ":", "\n", "            ", "predict_net", "=", "None", "\n", "", "elif", "predict_type", "==", "\"MeanPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "predict_net", "=", "MeanPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "predict_type", "==", "\"SumPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "predict_net", "=", "SumPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "predict_type", "==", "\"MaxPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "predict_net", "=", "MaxPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "elif", "predict_type", "==", "\"MeanAttnPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "recurrent_steps", "=", "kw", ".", "get", "(", "\"recurrent_steps\"", ",", "1", ")", "\n", "num_heads", "=", "kw", ".", "get", "(", "\"num_heads\"", ",", "1", ")", "\n", "predict_net", "=", "MeanAttnPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "\n", "num_heads", "=", "num_heads", ",", "recurrent_steps", "=", "recurrent_steps", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "", "elif", "predict_type", "==", "\"SumAttnPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "recurrent_steps", "=", "kw", ".", "get", "(", "\"recurrent_steps\"", ",", "1", ")", "\n", "num_heads", "=", "kw", ".", "get", "(", "\"num_heads\"", ",", "1", ")", "\n", "predict_net", "=", "SumAttnPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "\n", "num_heads", "=", "num_heads", ",", "recurrent_steps", "=", "recurrent_steps", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "", "elif", "predict_type", "==", "\"MaxAttnPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "recurrent_steps", "=", "kw", ".", "get", "(", "\"recurrent_steps\"", ",", "1", ")", "\n", "num_heads", "=", "kw", ".", "get", "(", "\"num_heads\"", ",", "1", ")", "\n", "predict_net", "=", "MaxAttnPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "\n", "num_heads", "=", "num_heads", ",", "recurrent_steps", "=", "recurrent_steps", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "", "elif", "predict_type", "==", "\"MeanMemAttnPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "recurrent_steps", "=", "kw", ".", "get", "(", "\"recurrent_steps\"", ",", "1", ")", "\n", "num_heads", "=", "kw", ".", "get", "(", "\"num_heads\"", ",", "1", ")", "\n", "mem_len", "=", "kw", ".", "get", "(", "\"mem_len\"", ",", "4", ")", "\n", "predict_net", "=", "MeanMemAttnPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "\n", "num_heads", "=", "num_heads", ",", "recurrent_steps", "=", "recurrent_steps", ",", "\n", "mem_len", "=", "mem_len", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "", "elif", "predict_type", "==", "\"SumMemAttnPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "recurrent_steps", "=", "kw", ".", "get", "(", "\"recurrent_steps\"", ",", "1", ")", "\n", "num_heads", "=", "kw", ".", "get", "(", "\"num_heads\"", ",", "1", ")", "\n", "mem_len", "=", "kw", ".", "get", "(", "\"mem_len\"", ",", "4", ")", "\n", "predict_net", "=", "SumMemAttnPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "\n", "num_heads", "=", "num_heads", ",", "recurrent_steps", "=", "recurrent_steps", ",", "\n", "mem_len", "=", "mem_len", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "", "elif", "predict_type", "==", "\"MaxMemAttnPredictNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "recurrent_steps", "=", "kw", ".", "get", "(", "\"recurrent_steps\"", ",", "1", ")", "\n", "num_heads", "=", "kw", ".", "get", "(", "\"num_heads\"", ",", "1", ")", "\n", "mem_len", "=", "kw", ".", "get", "(", "\"mem_len\"", ",", "4", ")", "\n", "predict_net", "=", "MaxMemAttnPredictNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "\n", "num_heads", "=", "num_heads", ",", "recurrent_steps", "=", "recurrent_steps", ",", "\n", "mem_len", "=", "mem_len", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "", "elif", "predict_type", "==", "\"DIAMNet\"", ":", "\n", "            ", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "recurrent_steps", "=", "kw", ".", "get", "(", "\"recurrent_steps\"", ",", "1", ")", "\n", "num_heads", "=", "kw", ".", "get", "(", "\"num_heads\"", ",", "1", ")", "\n", "mem_len", "=", "kw", ".", "get", "(", "\"mem_len\"", ",", "4", ")", "\n", "mem_init", "=", "kw", ".", "get", "(", "\"mem_init\"", ",", "\"mean\"", ")", "\n", "predict_net", "=", "DIAMNet", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "\n", "num_heads", "=", "num_heads", ",", "recurrent_steps", "=", "recurrent_steps", ",", "\n", "mem_len", "=", "mem_len", ",", "mem_init", "=", "mem_init", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Currently, %s is not supported!\"", "%", "(", "predict_type", ")", ")", "\n", "", "return", "predict_net", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.increase_input_size": [[179, 191], ["None"], "methods", ["None"], ["", "def", "increase_input_size", "(", "self", ",", "config", ")", ":", "\n", "        ", "assert", "config", "[", "\"base\"", "]", "==", "self", ".", "base", "\n", "assert", "config", "[", "\"max_npv\"", "]", ">=", "self", ".", "max_npv", "\n", "assert", "config", "[", "\"max_npvl\"", "]", ">=", "self", ".", "max_npvl", "\n", "assert", "config", "[", "\"max_npe\"", "]", ">=", "self", ".", "max_npe", "\n", "assert", "config", "[", "\"max_npel\"", "]", ">=", "self", ".", "max_npel", "\n", "assert", "config", "[", "\"max_ngv\"", "]", ">=", "self", ".", "max_ngv", "\n", "assert", "config", "[", "\"max_ngvl\"", "]", ">=", "self", ".", "max_ngvl", "\n", "assert", "config", "[", "\"max_nge\"", "]", ">=", "self", ".", "max_nge", "\n", "assert", "config", "[", "\"max_ngel\"", "]", ">=", "self", ".", "max_ngel", "\n", "assert", "config", "[", "\"predict_net_add_enc\"", "]", "or", "not", "self", ".", "add_enc", "\n", "assert", "config", "[", "\"predict_net_add_degree\"", "]", "or", "not", "self", ".", "add_degree", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.increase_net": [[197, 199], ["None"], "methods", ["None"], ["", "def", "increase_net", "(", "self", ",", "config", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.__init__": [[202, 230], ["basemodel.BaseModel.__init__", "basemodel.EdgeSeqModel.create_enc", "basemodel.EdgeSeqModel.create_filter", "basemodel.EdgeSeqModel.create_emb", "basemodel.EdgeSeqModel.create_enc", "range", "basemodel.EdgeSeqModel.create_emb"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_filter", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_emb", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_emb"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "EdgeSeqModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "# create encoding layer", "\n", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", ",", "self", ".", "g_el_enc", "=", "[", "self", ".", "create_enc", "(", "max_n", ",", "self", ".", "base", ")", "for", "max_n", "in", "[", "self", ".", "max_ngv", ",", "self", ".", "max_ngvl", ",", "self", ".", "max_ngel", "]", "]", "\n", "self", ".", "g_u_enc", ",", "self", ".", "g_ul_enc", "=", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", "\n", "if", "self", ".", "share_emb", ":", "\n", "            ", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", ",", "self", ".", "p_el_enc", "=", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", ",", "self", ".", "g_el_enc", "\n", "", "else", ":", "\n", "            ", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", ",", "self", ".", "p_el_enc", "=", "[", "self", ".", "create_enc", "(", "max_n", ",", "self", ".", "base", ")", "for", "max_n", "in", "[", "self", ".", "max_npv", ",", "self", ".", "max_npvl", ",", "self", ".", "max_npel", "]", "]", "\n", "", "self", ".", "p_u_enc", ",", "self", ".", "p_ul_enc", "=", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", "\n", "\n", "# create filter layers", "\n", "self", ".", "ul_flt", ",", "self", ".", "el_flt", ",", "self", ".", "vl_flt", "=", "[", "self", ".", "create_filter", "(", "config", "[", "\"filter_net\"", "]", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "\n", "# create embedding layers", "\n", "self", ".", "g_u_emb", ",", "self", ".", "g_v_emb", ",", "self", ".", "g_ul_emb", ",", "self", ".", "g_el_emb", ",", "self", ".", "g_vl_emb", "=", "[", "self", ".", "create_emb", "(", "enc", ".", "embedding_dim", ",", "self", ".", "emb_dim", ",", "init_emb", "=", "self", ".", "init_emb", ")", "for", "enc", "in", "[", "self", ".", "g_u_enc", ",", "self", ".", "g_v_enc", ",", "self", ".", "g_ul_enc", ",", "self", ".", "g_el_enc", ",", "self", ".", "g_vl_enc", "]", "]", "\n", "if", "self", ".", "share_emb", ":", "\n", "            ", "self", ".", "p_u_emb", ",", "self", ".", "p_v_emb", ",", "self", ".", "p_ul_emb", ",", "self", ".", "p_el_emb", ",", "self", ".", "p_vl_emb", "=", "self", ".", "g_u_emb", ",", "self", ".", "g_v_emb", ",", "self", ".", "g_ul_emb", ",", "self", ".", "g_el_emb", ",", "self", ".", "g_vl_emb", "\n", "", "else", ":", "\n", "            ", "self", ".", "p_u_emb", ",", "self", ".", "p_v_emb", ",", "self", ".", "p_ul_emb", ",", "self", ".", "p_el_emb", ",", "self", ".", "p_vl_emb", "=", "[", "self", ".", "create_emb", "(", "enc", ".", "embedding_dim", ",", "self", ".", "emb_dim", ",", "init_emb", "=", "self", ".", "init_emb", ")", "for", "enc", "in", "[", "self", ".", "p_u_enc", ",", "self", ".", "p_v_enc", ",", "self", ".", "p_ul_enc", ",", "self", ".", "p_el_enc", ",", "self", ".", "p_vl_enc", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_enc_dim": [[234, 245], ["utils.get_enc_len", "utils.get_enc_len", "utils.get_enc_len", "utils.get_enc_len", "utils.get_enc_len", "utils.get_enc_len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len"], ["", "", "def", "get_enc_dim", "(", "self", ")", ":", "\n", "        ", "g_dim", "=", "self", ".", "base", "*", "(", "get_enc_len", "(", "self", ".", "max_ngv", "-", "1", ",", "self", ".", "base", ")", "*", "2", "+", "get_enc_len", "(", "self", ".", "max_ngvl", "-", "1", ",", "self", ".", "base", ")", "*", "2", "+", "get_enc_len", "(", "self", ".", "max_ngel", "-", "1", ",", "self", ".", "base", ")", ")", "\n", "if", "self", ".", "share_emb", ":", "\n", "            ", "return", "g_dim", ",", "g_dim", "\n", "", "else", ":", "\n", "            ", "p_dim", "=", "self", ".", "base", "*", "(", "get_enc_len", "(", "self", ".", "max_npv", "-", "1", ",", "self", ".", "base", ")", "*", "2", "+", "get_enc_len", "(", "self", ".", "max_npvl", "-", "1", ",", "self", ".", "base", ")", "*", "2", "+", "get_enc_len", "(", "self", ".", "max_npel", "-", "1", ",", "self", ".", "base", ")", ")", "\n", "return", "p_dim", ",", "g_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim": [[246, 251], ["basemodel.EdgeSeqModel.get_enc_dim"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim"], ["", "", "def", "get_emb_dim", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "init_emb", "==", "\"None\"", ":", "\n", "            ", "return", "self", ".", "get_enc_dim", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_enc": [[252, 271], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basemodel.EdgeSeqModel.p_u_enc", "basemodel.EdgeSeqModel.p_v_enc", "basemodel.EdgeSeqModel.p_ul_enc", "basemodel.EdgeSeqModel.p_el_enc", "basemodel.EdgeSeqModel.p_vl_enc", "basemodel.EdgeSeqModel.g_u_enc", "basemodel.EdgeSeqModel.g_v_enc", "basemodel.EdgeSeqModel.g_ul_enc", "basemodel.EdgeSeqModel.g_el_enc", "basemodel.EdgeSeqModel.g_vl_enc"], "methods", ["None"], ["", "", "def", "get_enc", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "pattern_u", ",", "pattern_v", ",", "pattern_ul", ",", "pattern_el", ",", "pattern_vl", "=", "self", ".", "p_u_enc", "(", "pattern", ".", "u", ")", ",", "self", ".", "p_v_enc", "(", "pattern", ".", "v", ")", ",", "self", ".", "p_ul_enc", "(", "pattern", ".", "ul", ")", ",", "self", ".", "p_el_enc", "(", "pattern", ".", "el", ")", ",", "self", ".", "p_vl_enc", "(", "pattern", ".", "vl", ")", "\n", "graph_u", ",", "graph_v", ",", "graph_ul", ",", "graph_el", ",", "graph_vl", "=", "self", ".", "g_u_enc", "(", "graph", ".", "u", ")", ",", "self", ".", "g_v_enc", "(", "graph", ".", "v", ")", ",", "self", ".", "g_ul_enc", "(", "graph", ".", "ul", ")", ",", "self", ".", "g_el_enc", "(", "graph", ".", "el", ")", ",", "self", ".", "g_vl_enc", "(", "graph", ".", "vl", ")", "\n", "\n", "p_enc", "=", "torch", ".", "cat", "(", "[", "\n", "pattern_u", ",", "\n", "pattern_v", ",", "\n", "pattern_ul", ",", "\n", "pattern_el", ",", "\n", "pattern_vl", "]", ",", "dim", "=", "2", ")", "\n", "g_enc", "=", "torch", ".", "cat", "(", "[", "\n", "graph_u", ",", "\n", "graph_v", ",", "\n", "graph_ul", ",", "\n", "graph_el", ",", "\n", "graph_vl", "]", ",", "dim", "=", "2", ")", "\n", "return", "p_enc", ",", "g_enc", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb": [[272, 294], ["pattern_len.size", "basemodel.EdgeSeqModel.p_u_enc", "basemodel.EdgeSeqModel.p_v_enc", "basemodel.EdgeSeqModel.p_ul_enc", "basemodel.EdgeSeqModel.p_el_enc", "basemodel.EdgeSeqModel.p_vl_enc", "basemodel.EdgeSeqModel.g_u_enc", "basemodel.EdgeSeqModel.g_v_enc", "basemodel.EdgeSeqModel.g_ul_enc", "basemodel.EdgeSeqModel.g_el_enc", "basemodel.EdgeSeqModel.g_vl_enc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basemodel.EdgeSeqModel.p_vl_emb", "basemodel.EdgeSeqModel.g_vl_emb", "basemodel.EdgeSeqModel.p_el_emb", "basemodel.EdgeSeqModel.g_el_emb", "basemodel.EdgeSeqModel.p_ul_emb", "basemodel.EdgeSeqModel.g_ul_emb", "basemodel.EdgeSeqModel.p_u_emb", "basemodel.EdgeSeqModel.p_v_emb", "basemodel.EdgeSeqModel.g_u_emb", "basemodel.EdgeSeqModel.g_v_emb"], "methods", ["None"], ["", "def", "get_emb", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "pattern_u", ",", "pattern_v", ",", "pattern_ul", ",", "pattern_el", ",", "pattern_vl", "=", "self", ".", "p_u_enc", "(", "pattern", ".", "u", ")", ",", "self", ".", "p_v_enc", "(", "pattern", ".", "v", ")", ",", "self", ".", "p_ul_enc", "(", "pattern", ".", "ul", ")", ",", "self", ".", "p_el_enc", "(", "pattern", ".", "el", ")", ",", "self", ".", "p_vl_enc", "(", "pattern", ".", "vl", ")", "\n", "graph_u", ",", "graph_v", ",", "graph_ul", ",", "graph_el", ",", "graph_vl", "=", "self", ".", "g_u_enc", "(", "graph", ".", "u", ")", ",", "self", ".", "g_v_enc", "(", "graph", ".", "v", ")", ",", "self", ".", "g_ul_enc", "(", "graph", ".", "ul", ")", ",", "self", ".", "g_el_enc", "(", "graph", ".", "el", ")", ",", "self", ".", "g_vl_enc", "(", "graph", ".", "vl", ")", "\n", "\n", "if", "self", ".", "init_emb", "==", "\"None\"", ":", "\n", "            ", "p_emb", "=", "torch", ".", "cat", "(", "[", "pattern_u", ",", "pattern_v", ",", "pattern_ul", ",", "pattern_el", ",", "pattern_vl", "]", ",", "dim", "=", "2", ")", "\n", "g_emb", "=", "torch", ".", "cat", "(", "[", "graph_u", ",", "graph_v", ",", "graph_ul", ",", "graph_el", ",", "graph_vl", "]", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "p_emb", "=", "self", ".", "p_u_emb", "(", "pattern_u", ")", "+", "self", ".", "p_v_emb", "(", "pattern_v", ")", "+", "self", ".", "p_ul_emb", "(", "pattern_ul", ")", "+", "self", ".", "p_el_emb", "(", "pattern_el", ")", "+", "self", ".", "p_vl_emb", "(", "pattern_vl", ")", "\n", "g_emb", "=", "self", ".", "g_u_emb", "(", "graph_u", ")", "+", "self", ".", "g_v_emb", "(", "graph_v", ")", "+", "self", ".", "g_ul_emb", "(", "graph_ul", ")", "+", "self", ".", "g_el_emb", "(", "graph_el", ")", "+", "self", ".", "g_vl_emb", "(", "graph_vl", ")", "\n", "", "return", "p_emb", ",", "g_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_filter_gate": [[295, 313], ["basemodel.EdgeSeqModel.ul_flt", "basemodel.EdgeSeqModel.ul_flt", "basemodel.EdgeSeqModel.el_flt", "basemodel.EdgeSeqModel.el_flt", "basemodel.EdgeSeqModel.vl_flt", "basemodel.EdgeSeqModel.vl_flt"], "methods", ["None"], ["", "def", "get_filter_gate", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "gate", "=", "None", "\n", "if", "self", ".", "ul_flt", "is", "not", "None", ":", "\n", "            ", "if", "gate", "is", "not", "None", ":", "\n", "                ", "gate", "&=", "self", ".", "ul_flt", "(", "pattern", ".", "ul", ",", "graph", ".", "ul", ")", "\n", "", "else", ":", "\n", "                ", "gate", "=", "self", ".", "ul_flt", "(", "pattern", ".", "ul", ",", "graph", ".", "ul", ")", "\n", "", "", "if", "self", ".", "el_flt", "is", "not", "None", ":", "\n", "            ", "if", "gate", "is", "not", "None", ":", "\n", "                ", "gate", "&=", "self", ".", "el_flt", "(", "pattern", ".", "el", ",", "graph", ".", "el", ")", "\n", "", "else", ":", "\n", "                ", "gate", "=", "self", ".", "el_flt", "(", "pattern", ".", "el", ",", "graph", ".", "el", ")", "\n", "", "", "if", "self", ".", "vl_flt", "is", "not", "None", ":", "\n", "            ", "if", "gate", "is", "not", "None", ":", "\n", "                ", "gate", "&=", "self", ".", "vl_flt", "(", "pattern", ".", "vl", ",", "graph", ".", "vl", ")", "\n", "", "else", ":", "\n", "                ", "gate", "=", "self", ".", "vl_flt", "(", "pattern", ".", "vl", ",", "graph", ".", "vl", ")", "\n", "", "", "return", "gate", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.increase_input_size": [[314, 357], ["basemodel.BaseModel.increase_input_size", "basemodel.EdgeSeqModel.g_u_emb.increase_input_size", "basemodel.EdgeSeqModel.g_v_emb.increase_input_size", "basemodel.EdgeSeqModel.g_ul_emb.increase_input_size", "basemodel.EdgeSeqModel.g_vl_emb.increase_input_size", "basemodel.EdgeSeqModel.g_el_emb.increase_input_size", "basemodel.EdgeSeqModel.create_enc", "basemodel.EdgeSeqModel.p_u_emb.increase_input_size", "basemodel.EdgeSeqModel.p_v_emb.increase_input_size", "basemodel.EdgeSeqModel.p_ul_emb.increase_input_size", "basemodel.EdgeSeqModel.p_vl_emb.increase_input_size", "basemodel.EdgeSeqModel.p_el_emb.increase_input_size", "basemodel.EdgeSeqModel.create_enc"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc"], ["", "def", "increase_input_size", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "EdgeSeqModel", ",", "self", ")", ".", "increase_input_size", "(", "config", ")", "\n", "\n", "# create encoding layers", "\n", "new_g_v_enc", ",", "new_g_vl_enc", ",", "new_g_el_enc", "=", "[", "self", ".", "create_enc", "(", "max_n", ",", "self", ".", "base", ")", "for", "max_n", "in", "[", "config", "[", "\"max_ngv\"", "]", ",", "config", "[", "\"max_ngvl\"", "]", ",", "config", "[", "\"max_ngel\"", "]", "]", "]", "\n", "if", "self", ".", "share_emb", ":", "\n", "            ", "new_p_v_enc", ",", "new_p_vl_enc", ",", "new_p_el_enc", "=", "new_g_v_enc", ",", "new_g_vl_enc", ",", "new_g_el_enc", "\n", "", "else", ":", "\n", "            ", "new_p_v_enc", ",", "new_p_vl_enc", ",", "new_p_el_enc", "=", "[", "self", ".", "create_enc", "(", "max_n", ",", "self", ".", "base", ")", "for", "max_n", "in", "[", "config", "[", "\"max_npv\"", "]", ",", "config", "[", "\"max_npvl\"", "]", ",", "config", "[", "\"max_npel\"", "]", "]", "]", "\n", "", "del", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", ",", "self", ".", "g_el_enc", ",", "self", ".", "g_u_enc", ",", "self", ".", "g_ul_enc", "\n", "del", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", ",", "self", ".", "p_el_enc", ",", "self", ".", "p_u_enc", ",", "self", ".", "p_ul_enc", "\n", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", ",", "self", ".", "g_el_enc", "=", "new_g_v_enc", ",", "new_g_vl_enc", ",", "new_g_el_enc", "\n", "self", ".", "g_u_enc", ",", "self", ".", "g_ul_enc", "=", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", "\n", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", ",", "self", ".", "p_el_enc", "=", "new_p_v_enc", ",", "new_p_vl_enc", ",", "new_p_el_enc", "\n", "self", ".", "p_u_enc", ",", "self", ".", "p_ul_enc", "=", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", "\n", "\n", "# increase embedding layers", "\n", "self", ".", "g_u_emb", ".", "increase_input_size", "(", "self", ".", "g_u_enc", ".", "embedding_dim", ")", "\n", "self", ".", "g_v_emb", ".", "increase_input_size", "(", "self", ".", "g_v_enc", ".", "embedding_dim", ")", "\n", "self", ".", "g_ul_emb", ".", "increase_input_size", "(", "self", ".", "g_ul_enc", ".", "embedding_dim", ")", "\n", "self", ".", "g_vl_emb", ".", "increase_input_size", "(", "self", ".", "g_vl_enc", ".", "embedding_dim", ")", "\n", "self", ".", "g_el_emb", ".", "increase_input_size", "(", "self", ".", "g_el_enc", ".", "embedding_dim", ")", "\n", "if", "not", "self", ".", "share_emb", ":", "\n", "            ", "self", ".", "p_u_emb", ".", "increase_input_size", "(", "self", ".", "p_u_enc", ".", "embedding_dim", ")", "\n", "self", ".", "p_v_emb", ".", "increase_input_size", "(", "self", ".", "p_v_enc", ".", "embedding_dim", ")", "\n", "self", ".", "p_ul_emb", ".", "increase_input_size", "(", "self", ".", "p_ul_enc", ".", "embedding_dim", ")", "\n", "self", ".", "p_vl_emb", ".", "increase_input_size", "(", "self", ".", "p_vl_enc", ".", "embedding_dim", ")", "\n", "self", ".", "p_el_emb", ".", "increase_input_size", "(", "self", ".", "p_el_enc", ".", "embedding_dim", ")", "\n", "\n", "# increase predict network", "\n", "\n", "# set new parameters", "\n", "", "self", ".", "max_npv", "=", "config", "[", "\"max_npv\"", "]", "\n", "self", ".", "max_npvl", "=", "config", "[", "\"max_npvl\"", "]", "\n", "self", ".", "max_npe", "=", "config", "[", "\"max_npe\"", "]", "\n", "self", ".", "max_npel", "=", "config", "[", "\"max_npel\"", "]", "\n", "self", ".", "max_ngv", "=", "config", "[", "\"max_ngv\"", "]", "\n", "self", ".", "max_ngvl", "=", "config", "[", "\"max_ngvl\"", "]", "\n", "self", ".", "max_nge", "=", "config", "[", "\"max_nge\"", "]", "\n", "self", ".", "max_ngel", "=", "config", "[", "\"max_ngel\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.__init__": [[361, 385], ["basemodel.BaseModel.__init__", "basemodel.GraphAdjModel.create_filter", "basemodel.GraphAdjModel.create_emb", "basemodel.GraphAdjModel.create_enc", "basemodel.GraphAdjModel.create_emb", "basemodel.GraphAdjModel.create_enc"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_filter", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_emb", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_emb", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GraphAdjModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "add_degree", "=", "config", "[", "\"predict_net_add_degree\"", "]", "\n", "\n", "# create encoding layer", "\n", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", "=", "[", "self", ".", "create_enc", "(", "max_n", ",", "self", ".", "base", ")", "for", "max_n", "in", "[", "self", ".", "max_ngv", ",", "self", ".", "max_ngvl", "]", "]", "\n", "if", "self", ".", "share_emb", ":", "\n", "            ", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", "=", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", "\n", "", "else", ":", "\n", "            ", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", "=", "[", "self", ".", "create_enc", "(", "max_n", ",", "self", ".", "base", ")", "for", "max_n", "in", "[", "self", ".", "max_npv", ",", "self", ".", "max_npvl", "]", "]", "\n", "\n", "# create filter layers", "\n", "", "self", ".", "vl_flt", "=", "self", ".", "create_filter", "(", "config", "[", "\"filter_net\"", "]", ")", "\n", "\n", "# create embedding layers", "\n", "self", ".", "g_vl_emb", "=", "self", ".", "create_emb", "(", "self", ".", "g_vl_enc", ".", "embedding_dim", ",", "self", ".", "emb_dim", ",", "init_emb", "=", "self", ".", "init_emb", ")", "\n", "if", "self", ".", "share_emb", ":", "\n", "            ", "self", ".", "p_vl_emb", "=", "self", ".", "g_vl_emb", "\n", "", "else", ":", "\n", "            ", "self", ".", "p_vl_emb", "=", "self", ".", "create_emb", "(", "self", ".", "p_vl_enc", ".", "embedding_dim", ",", "self", ".", "emb_dim", ",", "init_emb", "=", "self", ".", "init_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim": [[389, 396], ["utils.get_enc_len", "utils.get_enc_len", "utils.get_enc_len", "utils.get_enc_len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len"], ["", "", "def", "get_enc_dim", "(", "self", ")", ":", "\n", "        ", "g_dim", "=", "self", ".", "base", "*", "(", "get_enc_len", "(", "self", ".", "max_ngv", "-", "1", ",", "self", ".", "base", ")", "+", "get_enc_len", "(", "self", ".", "max_ngvl", "-", "1", ",", "self", ".", "base", ")", ")", "\n", "if", "self", ".", "share_emb", ":", "\n", "            ", "return", "g_dim", ",", "g_dim", "\n", "", "else", ":", "\n", "            ", "p_dim", "=", "self", ".", "base", "*", "(", "get_enc_len", "(", "self", ".", "max_npv", "-", "1", ",", "self", ".", "base", ")", "+", "get_enc_len", "(", "self", ".", "max_npvl", "-", "1", ",", "self", ".", "base", ")", ")", "\n", "return", "p_dim", ",", "g_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc": [[397, 406], ["pattern_len.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basemodel.GraphAdjModel.p_v_enc", "basemodel.GraphAdjModel.p_vl_enc", "basemodel.GraphAdjModel.g_v_enc", "basemodel.GraphAdjModel.g_vl_enc"], "methods", ["None"], ["", "", "def", "get_enc", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "\n", "pattern_v", ",", "pattern_vl", "=", "self", ".", "p_v_enc", "(", "pattern", ".", "ndata", "[", "\"id\"", "]", ")", ",", "self", ".", "p_vl_enc", "(", "pattern", ".", "ndata", "[", "\"label\"", "]", ")", "\n", "graph_v", ",", "graph_vl", "=", "self", ".", "g_v_enc", "(", "graph", ".", "ndata", "[", "\"id\"", "]", ")", ",", "self", ".", "g_vl_enc", "(", "graph", ".", "ndata", "[", "\"label\"", "]", ")", "\n", "\n", "p_enc", "=", "torch", ".", "cat", "(", "[", "pattern_v", ",", "pattern_vl", "]", ",", "dim", "=", "1", ")", "\n", "g_enc", "=", "torch", ".", "cat", "(", "[", "graph_v", ",", "graph_vl", "]", ",", "dim", "=", "1", ")", "\n", "return", "p_enc", ",", "g_enc", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_emb": [[407, 420], ["pattern_len.size", "basemodel.GraphAdjModel.p_v_enc", "basemodel.GraphAdjModel.p_vl_enc", "basemodel.GraphAdjModel.g_v_enc", "basemodel.GraphAdjModel.g_vl_enc", "basemodel.GraphAdjModel.p_vl_emb", "basemodel.GraphAdjModel.g_vl_emb"], "methods", ["None"], ["", "def", "get_emb", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "\n", "pattern_v", ",", "pattern_vl", "=", "self", ".", "p_v_enc", "(", "pattern", ".", "ndata", "[", "\"id\"", "]", ")", ",", "self", ".", "p_vl_enc", "(", "pattern", ".", "ndata", "[", "\"label\"", "]", ")", "\n", "graph_v", ",", "graph_vl", "=", "self", ".", "g_v_enc", "(", "graph", ".", "ndata", "[", "\"id\"", "]", ")", ",", "self", ".", "g_vl_enc", "(", "graph", ".", "ndata", "[", "\"label\"", "]", ")", "\n", "\n", "if", "self", ".", "init_emb", "==", "\"None\"", ":", "\n", "            ", "p_emb", "=", "pattern_vl", "\n", "g_emb", "=", "graph_vl", "\n", "", "else", ":", "\n", "            ", "p_emb", "=", "self", ".", "p_vl_emb", "(", "pattern_vl", ")", "\n", "g_emb", "=", "self", ".", "g_vl_emb", "(", "graph_vl", ")", "\n", "", "return", "p_emb", ",", "g_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_filter_gate": [[421, 436], ["basemodel.GraphAdjModel.vl_flt", "graph_len.size", "graph_len.max", "graph.number_of_nodes", "utils.batch_convert_len_to_mask", "gate.view.view.masked_select().view", "gate.view.view.view", "utils.split_and_batchify_graph_feats", "utils.split_and_batchify_graph_feats", "pattern.ndata[].unsqueeze", "graph.ndata[].unsqueeze", "gate.view.view.masked_select", "utils.batch_convert_len_to_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.split_and_batchify_graph_feats", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.split_and_batchify_graph_feats"], ["", "def", "get_filter_gate", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "gate", "=", "None", "\n", "if", "self", ".", "vl_flt", "is", "not", "None", ":", "\n", "            ", "gate", "=", "self", ".", "vl_flt", "(", "\n", "split_and_batchify_graph_feats", "(", "pattern", ".", "ndata", "[", "\"label\"", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "pattern_len", ")", "[", "0", "]", ",", "\n", "split_and_batchify_graph_feats", "(", "graph", ".", "ndata", "[", "\"label\"", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "graph_len", ")", "[", "0", "]", ")", "\n", "", "if", "gate", "is", "not", "None", ":", "\n", "            ", "bsz", "=", "graph_len", ".", "size", "(", "0", ")", "\n", "max_g_len", "=", "graph_len", ".", "max", "(", ")", "\n", "if", "bsz", "*", "max_g_len", "!=", "graph", ".", "number_of_nodes", "(", ")", ":", "\n", "                ", "graph_mask", "=", "batch_convert_len_to_mask", "(", "graph_len", ")", "# bsz x max_len", "\n", "gate", "=", "gate", ".", "masked_select", "(", "graph_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "gate", "=", "gate", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "", "return", "gate", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.increase_input_size": [[437, 472], ["basemodel.BaseModel.increase_input_size", "basemodel.GraphAdjModel.g_vl_emb.increase_input_size", "basemodel.GraphAdjModel.create_enc", "basemodel.GraphAdjModel.p_vl_emb.increase_input_size", "basemodel.GraphAdjModel.create_enc"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_enc"], ["", "def", "increase_input_size", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GraphAdjModel", ",", "self", ")", ".", "increase_input_size", "(", "config", ")", "\n", "\n", "# create encoding layers", "\n", "new_g_v_enc", ",", "new_g_vl_enc", "=", "[", "self", ".", "create_enc", "(", "max_n", ",", "self", ".", "base", ")", "for", "max_n", "in", "[", "config", "[", "\"max_ngv\"", "]", ",", "config", "[", "\"max_ngvl\"", "]", "]", "]", "\n", "if", "self", ".", "share_emb", ":", "\n", "            ", "new_p_v_enc", ",", "new_p_vl_enc", "=", "new_g_v_enc", ",", "new_g_vl_enc", "\n", "", "else", ":", "\n", "            ", "new_p_v_enc", ",", "new_p_vl_enc", "=", "[", "self", ".", "create_enc", "(", "max_n", ",", "self", ".", "base", ")", "for", "max_n", "in", "[", "config", "[", "\"max_npv\"", "]", ",", "config", "[", "\"max_npvl\"", "]", "]", "]", "\n", "", "del", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", "\n", "del", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", "\n", "self", ".", "g_v_enc", ",", "self", ".", "g_vl_enc", "=", "new_g_v_enc", ",", "new_g_vl_enc", "\n", "self", ".", "p_v_enc", ",", "self", ".", "p_vl_enc", "=", "new_p_v_enc", ",", "new_p_vl_enc", "\n", "\n", "# increase embedding layers", "\n", "self", ".", "g_vl_emb", ".", "increase_input_size", "(", "self", ".", "g_vl_enc", ".", "embedding_dim", ")", "\n", "if", "not", "self", ".", "share_emb", ":", "\n", "            ", "self", ".", "p_vl_emb", ".", "increase_input_size", "(", "self", ".", "p_vl_enc", ".", "embedding_dim", ")", "\n", "\n", "# increase networks", "\n", "\n", "# increase predict network", "\n", "\n", "# set new parameters", "\n", "", "self", ".", "max_npv", "=", "config", "[", "\"max_npv\"", "]", "\n", "self", ".", "max_npvl", "=", "config", "[", "\"max_npvl\"", "]", "\n", "self", ".", "max_npe", "=", "config", "[", "\"max_npe\"", "]", "\n", "self", ".", "max_npel", "=", "config", "[", "\"max_npel\"", "]", "\n", "self", ".", "max_ngv", "=", "config", "[", "\"max_ngv\"", "]", "\n", "self", ".", "max_ngvl", "=", "config", "[", "\"max_ngvl\"", "]", "\n", "self", ".", "max_nge", "=", "config", "[", "\"max_nge\"", "]", "\n", "self", ".", "max_ngel", "=", "config", "[", "\"max_ngel\"", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgin.RGINLayer.__init__": [[15, 46], ["torch.Module.__init__", "dgl.nn.pytorch.conv.RelGraphConv", "dgl.nn.pytorch.conv.RelGraphConv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "rgin.RGINLayer.mlp.modules", "torch.Linear", "torch.Linear", "torch.Linear", "utils.map_activation_str_to_layer", "torch.Linear", "torch.Linear", "torch.Linear", "utils.map_activation_str_to_layer", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "hasattr", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_feat", ",", "out_feat", ",", "num_rels", ",", "regularizer", "=", "\"basis\"", ",", "num_bases", "=", "None", ",", "act_func", "=", "\"relu\"", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "RGINLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rgc_layer", "=", "RelGraphConv", "(", "\n", "in_feat", "=", "in_feat", ",", "out_feat", "=", "out_feat", ",", "num_rels", "=", "num_rels", ",", "\n", "regularizer", "=", "regularizer", ",", "num_bases", "=", "num_bases", ",", "\n", "activation", "=", "None", ",", "self_loop", "=", "True", ",", "dropout", "=", "0.0", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "out_feat", ",", "out_feat", ")", ",", "\n", "# nn.BatchNorm1d(out_feat),", "\n", "map_activation_str_to_layer", "(", "act_func", ")", ",", "\n", "nn", ".", "Linear", "(", "out_feat", ",", "out_feat", ")", ",", "\n", "map_activation_str_to_layer", "(", "act_func", ")", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "# init", "\n", "if", "hasattr", "(", "self", ".", "rgc_layer", ",", "\"weight\"", ")", "and", "self", ".", "rgc_layer", ".", "weight", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "rgc_layer", ".", "weight", ",", "0.0", ",", "1", "/", "(", "out_feat", ")", "**", "0.5", ")", "\n", "", "if", "hasattr", "(", "self", ".", "rgc_layer", ",", "\"w_comp\"", ")", "and", "self", ".", "rgc_layer", ".", "w_comp", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "rgc_layer", ".", "w_comp", ",", "0.0", ",", "1", "/", "(", "out_feat", ")", "**", "0.5", ")", "\n", "", "if", "hasattr", "(", "self", ".", "rgc_layer", ",", "\"loop_weight\"", ")", "and", "self", ".", "rgc_layer", ".", "loop_weight", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "rgc_layer", ".", "loop_weight", ",", "0.0", ",", "1", "/", "(", "out_feat", ")", "**", "0.5", ")", "\n", "", "if", "hasattr", "(", "self", ".", "rgc_layer", ",", "\"h_bias\"", ")", "and", "self", ".", "rgc_layer", ".", "h_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "rgc_layer", ".", "h_bias", ")", "\n", "", "for", "m", "in", "self", ".", "mlp", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.0", ",", "1", "/", "(", "out_feat", ")", "**", "0.5", ")", "\n", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgin.RGINLayer.forward": [[47, 52], ["rgin.RGINLayer.rgc_layer", "rgin.RGINLayer.mlp", "rgin.RGINLayer.drop"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "g", ",", "x", ",", "etypes", ")", ":", "\n", "        ", "g", "=", "self", ".", "rgc_layer", "(", "g", ",", "x", ",", "etypes", ",", "norm", "=", "None", ")", "\n", "g", "=", "self", ".", "mlp", "(", "g", ")", "\n", "g", "=", "self", ".", "drop", "(", "g", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgin.RGIN.__init__": [[55, 82], ["basemodel.GraphAdjModel.__init__", "rgin.RGIN.get_emb_dim", "rgin.RGIN.create_net", "rgin.RGIN.create_predict_net", "rgin.RGIN.create_net", "rgin.RGIN.get_enc_dim"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_predict_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RGIN", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# create networks", "\n", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "self", ".", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "g_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rgin_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rgin_graph_num_layers\"", "]", ",", "\n", "num_rels", "=", "self", ".", "max_ngel", ",", "num_bases", "=", "config", "[", "\"rgin_num_bases\"", "]", ",", "regularizer", "=", "config", "[", "\"rgin_regularizer\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "p_net", ",", "p_dim", "=", "(", "self", ".", "g_net", ",", "g_dim", ")", "if", "self", ".", "share_arch", "else", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "p_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rgin_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rgin_pattern_num_layers\"", "]", ",", "\n", "num_rels", "=", "self", ".", "max_npel", ",", "num_bases", "=", "config", "[", "\"rgin_num_bases\"", "]", ",", "regularizer", "=", "config", "[", "\"rgin_regularizer\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "if", "self", ".", "add_enc", ":", "\n", "            ", "p_enc_dim", ",", "g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "p_dim", "+=", "p_enc_dim", "\n", "g_dim", "+=", "g_enc_dim", "\n", "", "if", "self", ".", "add_degree", ":", "\n", "            ", "p_dim", "+=", "1", "\n", "g_dim", "+=", "1", "\n", "", "self", ".", "predict_net", "=", "self", ".", "create_predict_net", "(", "config", "[", "\"predict_net\"", "]", ",", "\n", "pattern_dim", "=", "p_dim", ",", "graph_dim", "=", "g_dim", ",", "hidden_dim", "=", "config", "[", "\"predict_net_hidden_dim\"", "]", ",", "\n", "num_heads", "=", "config", "[", "\"predict_net_num_heads\"", "]", ",", "recurrent_steps", "=", "config", "[", "\"predict_net_recurrent_steps\"", "]", ",", "\n", "mem_len", "=", "config", "[", "\"predict_net_mem_len\"", "]", ",", "mem_init", "=", "config", "[", "\"predict_net_mem_init\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgin.RGIN.create_net": [[83, 100], ["kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.add_module", "rgin.RGINLayer"], "methods", ["None"], ["", "def", "create_net", "(", "self", ",", "name", ",", "input_dim", ",", "**", "kw", ")", ":", "\n", "        ", "num_layers", "=", "kw", ".", "get", "(", "\"num_layers\"", ",", "1", ")", "\n", "hidden_dim", "=", "kw", ".", "get", "(", "\"hidden_dim\"", ",", "64", ")", "\n", "num_rels", "=", "kw", ".", "get", "(", "\"num_rels\"", ",", "1", ")", "\n", "num_bases", "=", "kw", ".", "get", "(", "\"num_bases\"", ",", "8", ")", "\n", "regularizer", "=", "kw", ".", "get", "(", "\"regularizer\"", ",", "\"basis\"", ")", "\n", "act_func", "=", "kw", ".", "get", "(", "\"act_func\"", ",", "\"relu\"", ")", "\n", "dropout", "=", "kw", ".", "get", "(", "\"dropout\"", ",", "0.0", ")", "\n", "\n", "rgins", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "rgins", ".", "add_module", "(", "\"%s_rgi%d\"", "%", "(", "name", ",", "i", ")", ",", "RGINLayer", "(", "\n", "in_feat", "=", "hidden_dim", "if", "i", ">", "0", "else", "input_dim", ",", "out_feat", "=", "hidden_dim", ",", "num_rels", "=", "num_rels", ",", "\n", "regularizer", "=", "regularizer", ",", "num_bases", "=", "num_bases", ",", "\n", "act_func", "=", "act_func", ",", "dropout", "=", "dropout", ")", ")", "\n", "\n", "", "return", "rgins", ",", "hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgin.RGIN.increase_input_size": [[101, 175], ["rgin.RGIN.get_enc_dim", "super().increase_input_size", "rgin.RGIN.get_enc_dim", "rgin.RGIN.predict_net.increase_input_size", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_w_comp[].data.copy_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.diag_indices", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_weight[].data.copy_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_w_comp[].data.copy_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.diap_indices", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_weight[].data.copy_", "g_rgin.rgc_layer.weight.size", "p_rgin.rgc_layer.weight.size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size"], ["", "def", "increase_input_size", "(", "self", ",", "config", ")", ":", "\n", "        ", "old_p_enc_dim", ",", "old_g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "old_max_npel", ",", "old_max_ngel", "=", "self", ".", "max_npel", ",", "self", ".", "max_ngel", "\n", "super", "(", "RGIN", ",", "self", ")", ".", "increase_input_size", "(", "config", ")", "\n", "new_p_enc_dim", ",", "new_g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "new_max_npel", ",", "new_max_ngel", "=", "self", ".", "max_npel", ",", "self", ".", "max_ngel", "\n", "\n", "# increase networks", "\n", "if", "new_max_ngel", "!=", "old_max_ngel", ":", "\n", "            ", "for", "g_rgin", "in", "self", ".", "g_net", ":", "\n", "                ", "num_bases", "=", "g_rgin", ".", "rgc_layer", ".", "num_bases", "\n", "device", "=", "g_rgin", ".", "rgc_layer", ".", "weight", ".", "device", "\n", "regularizer", "=", "g_rgin", ".", "rgc_layer", ".", "regularizer", "\n", "if", "regularizer", "==", "\"basis\"", ":", "\n", "                    ", "if", "num_bases", "<", "old_max_ngel", ":", "\n", "                        ", "new_w_comp", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_ngel", ",", "num_bases", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "new_w_comp", "[", ":", "old_max_ngel", "]", ".", "data", ".", "copy_", "(", "g_rgin", ".", "rgc_layer", ".", "w_comp", ")", "\n", "", "", "else", ":", "\n", "                        ", "new_w_comp", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_ngel", ",", "num_bases", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "ind", "=", "np", ".", "diag_indices", "(", "num_bases", ")", "\n", "new_w_comp", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "1.0", "\n", "", "", "del", "g_rgin", ".", "rgc_layer", ".", "w_comp", "\n", "g_rgin", ".", "rgc_layer", ".", "w_comp", "=", "new_w_comp", "\n", "", "elif", "regularizer", "==", "\"bdd\"", ":", "\n", "                    ", "new_weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_ngel", ",", "g_rgin", ".", "rgc_layer", ".", "weight", ".", "size", "(", "1", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "new_weight", "[", ":", "old_max_ngel", "]", ".", "data", ".", "copy_", "(", "g_rgin", ".", "rgc_layer", ".", "weight", ")", "\n", "", "del", "g_rgin", ".", "rgc_layer", ".", "weight", "\n", "g_rgin", ".", "rgc_layer", ".", "weight", "=", "new_weight", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "", "if", "self", ".", "share_arch", ":", "\n", "            ", "del", "self", ".", "p_net", "\n", "self", ".", "p_net", "=", "self", ".", "g_net", "\n", "", "elif", "new_max_npel", "!=", "old_max_npel", ":", "\n", "            ", "for", "p_rgin", "in", "self", ".", "p_net", ":", "\n", "                ", "num_bases", "=", "p_rgin", ".", "rgc_layer", ".", "num_bases", "\n", "device", "=", "p_rgin", ".", "rgc_layer", ".", "weight", ".", "device", "\n", "regularizer", "=", "p_rgin", ".", "rgc_layer", ".", "regularizer", "\n", "if", "regularizer", "==", "\"basis\"", ":", "\n", "                    ", "if", "num_bases", "<", "old_max_npel", ":", "\n", "                        ", "new_w_comp", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_npel", ",", "num_bases", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "new_w_comp", "[", ":", "old_max_npel", "]", ".", "data", ".", "copy_", "(", "p_rgin", ".", "rgc_layer", ".", "w_comp", ")", "\n", "", "", "else", ":", "\n", "                        ", "new_w_comp", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "new_max_npel", ",", "num_bases", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "ind", "=", "np", ".", "diap_indices", "(", "num_bases", ")", "\n", "new_w_comp", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "1.0", "\n", "", "", "del", "p_rgin", ".", "rgc_layer", ".", "w_comp", "\n", "p_rgin", ".", "rgc_layer", ".", "w_comp", "=", "new_w_comp", "\n", "", "elif", "regularizer", "==", "\"bdd\"", ":", "\n", "                    ", "new_weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "max_npel", ",", "p_rgin", ".", "rgc_layer", ".", "weight", ".", "size", "(", "1", ")", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "new_weight", "[", ":", "old_max_npel", "]", ".", "data", ".", "copy_", "(", "p_rgin", ".", "rgc_layer", ".", "weight", ")", "\n", "", "del", "p_rgin", ".", "rgc_layer", ".", "weight", "\n", "p_rgin", ".", "rgc_layer", ".", "weight", "=", "new_weight", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "# increase predict network", "\n", "", "", "", "if", "self", ".", "add_enc", "and", "(", "new_g_enc_dim", "!=", "old_g_enc_dim", "or", "new_p_enc_dim", "!=", "old_p_enc_dim", ")", ":", "\n", "            ", "self", ".", "predict_net", ".", "increase_input_size", "(", "\n", "self", ".", "predict_net", ".", "pattern_dim", "+", "new_p_enc_dim", "-", "old_p_enc_dim", ",", "\n", "self", ".", "predict_net", ".", "graph_dim", "+", "new_g_enc_dim", "-", "old_g_enc_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgin.RGIN.increase_net": [[176, 204], ["rgin.RGIN.get_emb_dim", "rgin.RGIN.create_net", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "rgin.RGIN.create_net", "new_g_rgin.load_state_dict", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "old_g_rgin.state_dict", "new_p_rgin.load_state_dict", "old_p_rgin.state_dict"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net"], ["", "", "def", "increase_net", "(", "self", ",", "config", ")", ":", "\n", "        ", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "g_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rgin_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rgin_graph_num_layers\"", "]", ",", "\n", "num_rels", "=", "self", ".", "max_ngel", ",", "num_bases", "=", "config", "[", "\"rgin_num_bases\"", "]", ",", "regularizer", "=", "config", "[", "\"rgin_regularizer\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "g_net", ")", ">=", "len", "(", "self", ".", "g_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "old_g_rgin", ",", "new_g_rgin", "in", "zip", "(", "self", ".", "g_net", ",", "g_net", ")", ":", "\n", "                ", "new_g_rgin", ".", "load_state_dict", "(", "old_g_rgin", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "g_net", "\n", "self", ".", "g_net", "=", "g_net", "\n", "\n", "if", "self", ".", "share_arch", ":", "\n", "            ", "self", ".", "p_net", "=", "self", ".", "g_net", "\n", "", "else", ":", "\n", "            ", "p_net", ",", "p_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "p_emb_dim", ",", "hidden_dim", "=", "config", "[", "\"rgin_hidden_dim\"", "]", ",", "\n", "num_layers", "=", "config", "[", "\"rgin_pattern_num_layers\"", "]", ",", "\n", "num_rels", "=", "self", ".", "max_npel", ",", "num_bases", "=", "config", "[", "\"rgin_num_bases\"", "]", ",", "regularizer", "=", "config", "[", "\"rgin_regularizer\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "p_net", ")", ">=", "len", "(", "self", ".", "p_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "old_p_rgin", ",", "new_p_rgin", "in", "zip", "(", "self", ".", "p_net", ",", "p_net", ")", ":", "\n", "                    ", "new_p_rgin", ".", "load_state_dict", "(", "old_p_rgin", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "p_net", "\n", "self", ".", "p_net", "=", "p_net", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.rgin.RGIN.forward": [[205, 247], ["pattern_len.size", "rgin.RGIN.get_filter_gate", "rgin.RGIN.get_emb", "rgin.RGIN.predict_net", "graph_emb.masked_fill_", "p_rgin", "g_rgin", "rgin.RGIN.get_enc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "graph_enc.masked_fill_", "rgin.RGIN.get_enc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.split_and_batchify_graph_feats", "utils.split_and_batchify_graph_feats", "pattern.ndata[].unsqueeze", "graph.ndata[].unsqueeze", "graph_enc.masked_fill_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern.ndata[].unsqueeze", "graph.ndata[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_filter_gate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_emb", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.split_and_batchify_graph_feats", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.split_and_batchify_graph_feats"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "\n", "gate", "=", "self", ".", "get_filter_gate", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "zero_mask", "=", "(", "gate", "==", "0", ")", "if", "gate", "is", "not", "None", "else", "None", "\n", "pattern_emb", ",", "graph_emb", "=", "self", ".", "get_emb", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "            ", "graph_emb", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "\n", "", "pattern_output", "=", "pattern_emb", "\n", "for", "p_rgin", "in", "self", ".", "p_net", ":", "\n", "            ", "o", "=", "p_rgin", "(", "pattern", ",", "pattern_output", ",", "pattern", ".", "edata", "[", "\"label\"", "]", ")", "\n", "pattern_output", "=", "o", "+", "pattern_output", "\n", "\n", "", "graph_output", "=", "graph_emb", "\n", "for", "g_rgin", "in", "self", ".", "g_net", ":", "\n", "            ", "o", "=", "g_rgin", "(", "graph", ",", "graph_output", ",", "graph", ".", "edata", "[", "\"label\"", "]", ")", "\n", "graph_output", "=", "o", "+", "graph_output", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_output", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "\n", "", "", "if", "self", ".", "add_enc", "and", "self", ".", "add_degree", ":", "\n", "            ", "pattern_enc", ",", "graph_enc", "=", "self", ".", "get_enc", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_enc", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "", "pattern_output", "=", "torch", ".", "cat", "(", "[", "pattern_enc", ",", "pattern_output", ",", "pattern", ".", "ndata", "[", "\"indeg\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "graph_output", "=", "torch", ".", "cat", "(", "[", "graph_enc", ",", "graph_output", ",", "graph", ".", "ndata", "[", "\"indeg\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "add_enc", ":", "\n", "            ", "pattern_enc", ",", "graph_enc", "=", "self", ".", "get_enc", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_enc", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "", "pattern_output", "=", "torch", ".", "cat", "(", "[", "pattern_enc", ",", "pattern_output", "]", ",", "dim", "=", "1", ")", "\n", "graph_output", "=", "torch", ".", "cat", "(", "[", "graph_enc", ",", "graph_output", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "add_degree", ":", "\n", "            ", "pattern_output", "=", "torch", ".", "cat", "(", "[", "pattern_output", ",", "pattern", ".", "ndata", "[", "\"indeg\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "graph_output", "=", "torch", ".", "cat", "(", "[", "graph_output", ",", "graph", ".", "ndata", "[", "\"indeg\"", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "pred", "=", "self", ".", "predict_net", "(", "\n", "split_and_batchify_graph_feats", "(", "pattern_output", ",", "pattern_len", ")", "[", "0", "]", ",", "pattern_len", ",", "\n", "split_and_batchify_graph_feats", "(", "graph_output", ",", "graph_len", ")", "[", "0", "]", ",", "graph_len", ")", "\n", "\n", "return", "pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.train.train": [[134, 216], ["len", "model.train", "enumerate", "gc.collect", "pattern.to", "graph.to", "model", "reg_crit", "isinstance", "bp_crit", "reg_crit.item", "bp_crit.item", "bp_crit.backward", "writer.add_scalar", "writer.add_scalar", "logger.info", "torch.l1_loss", "torch.l1_loss", "pattern_len.to", "graph_len.to", "counts.to", "float", "config[].rsplit", "utils.anneal_fn", "writer.add_scalar", "writer.add_scalar", "logger.info", "optimizer.step", "optimizer.zero_grad", "torch.relu", "torch.mse_loss", "torch.leaky_relu", "torch.mse_loss", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "scheduler.step", "torch.relu", "torch.smooth_l1_loss", "torch.leaky_relu", "torch.smooth_l1_loss", "float", "float", "counts[].item", "pred[].item", "model.parameters", "torch.relu", "torch.leaky_relu"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.train.train", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.anneal_fn"], ["def", "train", "(", "model", ",", "optimizer", ",", "scheduler", ",", "data_type", ",", "data_loader", ",", "device", ",", "config", ",", "epoch", ",", "logger", "=", "None", ",", "writer", "=", "None", ")", ":", "\n", "    ", "epoch_step", "=", "len", "(", "data_loader", ")", "\n", "total_step", "=", "config", "[", "\"epochs\"", "]", "*", "epoch_step", "\n", "total_reg_loss", "=", "0", "\n", "total_bp_loss", "=", "0", "\n", "total_cnt", "=", "1e-6", "\n", "\n", "if", "config", "[", "\"reg_loss\"", "]", "==", "\"MAE\"", ":", "\n", "        ", "reg_crit", "=", "lambda", "pred", ",", "target", ":", "F", ".", "l1_loss", "(", "F", ".", "relu", "(", "pred", ")", ",", "target", ")", "\n", "", "elif", "config", "[", "\"reg_loss\"", "]", "==", "\"MSE\"", ":", "\n", "        ", "reg_crit", "=", "lambda", "pred", ",", "target", ":", "F", ".", "mse_loss", "(", "F", ".", "relu", "(", "pred", ")", ",", "target", ")", "\n", "", "elif", "config", "[", "\"reg_loss\"", "]", "==", "\"SMSE\"", ":", "\n", "        ", "reg_crit", "=", "lambda", "pred", ",", "target", ":", "F", ".", "smooth_l1_loss", "(", "F", ".", "relu", "(", "pred", ")", ",", "target", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "config", "[", "\"bp_loss\"", "]", "==", "\"MAE\"", ":", "\n", "        ", "bp_crit", "=", "lambda", "pred", ",", "target", ",", "neg_slp", ":", "F", ".", "l1_loss", "(", "F", ".", "leaky_relu", "(", "pred", ",", "neg_slp", ")", ",", "target", ")", "\n", "", "elif", "config", "[", "\"bp_loss\"", "]", "==", "\"MSE\"", ":", "\n", "        ", "bp_crit", "=", "lambda", "pred", ",", "target", ",", "neg_slp", ":", "F", ".", "mse_loss", "(", "F", ".", "leaky_relu", "(", "pred", ",", "neg_slp", ")", ",", "target", ")", "\n", "", "elif", "config", "[", "\"bp_loss\"", "]", "==", "\"SMSE\"", ":", "\n", "        ", "bp_crit", "=", "lambda", "pred", ",", "target", ",", "neg_slp", ":", "F", ".", "smooth_l1_loss", "(", "F", ".", "leaky_relu", "(", "pred", ",", "neg_slp", ")", ",", "target", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "for", "batch_id", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "ids", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ",", "counts", "=", "batch", "\n", "cnt", "=", "counts", ".", "shape", "[", "0", "]", "\n", "total_cnt", "+=", "cnt", "\n", "\n", "pattern", ".", "to", "(", "device", ")", "\n", "graph", ".", "to", "(", "device", ")", "\n", "pattern_len", ",", "graph_len", ",", "counts", "=", "pattern_len", ".", "to", "(", "device", ")", ",", "graph_len", ".", "to", "(", "device", ")", ",", "counts", ".", "to", "(", "device", ")", "\n", "\n", "pred", "=", "model", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "\n", "reg_loss", "=", "reg_crit", "(", "pred", ",", "counts", ")", "\n", "\n", "if", "isinstance", "(", "config", "[", "\"bp_loss_slp\"", "]", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "neg_slp", "=", "float", "(", "config", "[", "\"bp_loss_slp\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "bp_loss_slp", ",", "l0", ",", "l1", "=", "config", "[", "\"bp_loss_slp\"", "]", ".", "rsplit", "(", "\"$\"", ",", "3", ")", "\n", "neg_slp", "=", "anneal_fn", "(", "bp_loss_slp", ",", "batch_id", "+", "epoch", "*", "epoch_step", ",", "T", "=", "total_step", "//", "4", ",", "lambda0", "=", "float", "(", "l0", ")", ",", "lambda1", "=", "float", "(", "l1", ")", ")", "\n", "", "bp_loss", "=", "bp_crit", "(", "pred", ",", "counts", ",", "neg_slp", ")", "\n", "\n", "reg_loss_item", "=", "reg_loss", ".", "item", "(", ")", "\n", "bp_loss_item", "=", "bp_loss", ".", "item", "(", ")", "\n", "total_reg_loss", "+=", "reg_loss_item", "*", "cnt", "\n", "total_bp_loss", "+=", "bp_loss_item", "*", "cnt", "\n", "\n", "if", "writer", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\"%s/REG-%s\"", "%", "(", "data_type", ",", "config", "[", "\"reg_loss\"", "]", ")", ",", "reg_loss_item", ",", "epoch", "*", "epoch_step", "+", "batch_id", ")", "\n", "writer", ".", "add_scalar", "(", "\"%s/BP-%s\"", "%", "(", "data_type", ",", "config", "[", "\"bp_loss\"", "]", ")", ",", "bp_loss_item", ",", "epoch", "*", "epoch_step", "+", "batch_id", ")", "\n", "\n", "", "if", "logger", "and", "(", "batch_id", "%", "config", "[", "\"print_every\"", "]", "==", "0", "or", "batch_id", "==", "epoch_step", "-", "1", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"epoch: {:0>3d}/{:0>3d}\\tdata_type: {:<5s}\\tbatch: {:0>5d}/{:0>5d}\\treg loss: {:0>10.3f}\\tbp loss: {:0>16.3f}\\tground: {:.3f}\\tpredict: {:.3f}\"", ".", "format", "(", "\n", "epoch", ",", "config", "[", "\"epochs\"", "]", ",", "data_type", ",", "batch_id", ",", "epoch_step", ",", "\n", "reg_loss_item", ",", "bp_loss_item", ",", "\n", "counts", "[", "0", "]", ".", "item", "(", ")", ",", "pred", "[", "0", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "bp_loss", ".", "backward", "(", ")", "\n", "if", "(", "config", "[", "\"update_every\"", "]", "<", "2", "or", "batch_id", "%", "config", "[", "\"update_every\"", "]", "==", "0", "or", "batch_id", "==", "epoch_step", "-", "1", ")", ":", "\n", "            ", "if", "config", "[", "\"max_grad_norm\"", "]", ">", "0", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", "[", "\"max_grad_norm\"", "]", ")", "\n", "", "if", "scheduler", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "step", "(", "epoch", "*", "epoch_step", "+", "batch_id", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "mean_reg_loss", "=", "total_reg_loss", "/", "total_cnt", "\n", "mean_bp_loss", "=", "total_bp_loss", "/", "total_cnt", "\n", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "\"%s/REG-%s-epoch\"", "%", "(", "data_type", ",", "config", "[", "\"reg_loss\"", "]", ")", ",", "mean_reg_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "\"%s/BP-%s-epoch\"", "%", "(", "data_type", ",", "config", "[", "\"bp_loss\"", "]", ")", ",", "mean_bp_loss", ",", "epoch", ")", "\n", "", "if", "logger", ":", "\n", "        ", "logger", ".", "info", "(", "\"epoch: {:0>3d}/{:0>3d}\\tdata_type: {:<5s}\\treg loss: {:0>10.3f}\\tbp loss: {:0>16.3f}\"", ".", "format", "(", "\n", "epoch", ",", "config", "[", "\"epochs\"", "]", ",", "data_type", ",", "mean_reg_loss", ",", "mean_bp_loss", ")", ")", "\n", "\n", "", "gc", ".", "collect", "(", ")", "\n", "return", "mean_reg_loss", ",", "mean_bp_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.train.evaluate": [[217, 309], ["len", "model.eval", "gc.collect", "torch.no_grad", "torch.no_grad", "enumerate", "list", "list", "list", "list", "torch.l1_loss", "torch.l1_loss", "[].extend", "[].extend", "pattern.to", "graph.to", "time.time", "model", "time.time", "[].extend", "[].extend", "reg_crit", "isinstance", "bp_crit", "reg_crit.mean().item", "bp_crit.mean().item", "torch.l1_loss().sum().item", "torch.mse_loss().sum().item", "writer.add_scalar", "writer.add_scalar", "logger.info", "torch.relu", "torch.mse_loss", "torch.leaky_relu", "torch.mse_loss", "counts.view().tolist", "pattern_len.to", "graph_len.to", "counts.to", "model.cpu().view().tolist", "float", "config[].rsplit", "utils.anneal_fn", "writer.add_scalar", "writer.add_scalar", "logger.info", "torch.relu", "torch.smooth_l1_loss", "torch.leaky_relu", "torch.smooth_l1_loss", "reg_crit.mean", "bp_crit.mean", "torch.l1_loss().sum", "torch.mse_loss().sum", "torch.relu", "torch.leaky_relu", "counts.view", "model.cpu().view", "float", "float", "counts[].item", "pred[].item", "torch.l1_loss", "torch.mse_loss", "model.cpu", "torch.relu", "torch.relu"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.anneal_fn"], ["", "def", "evaluate", "(", "model", ",", "data_type", ",", "data_loader", ",", "device", ",", "config", ",", "epoch", ",", "logger", "=", "None", ",", "writer", "=", "None", ")", ":", "\n", "    ", "epoch_step", "=", "len", "(", "data_loader", ")", "\n", "total_step", "=", "config", "[", "\"epochs\"", "]", "*", "epoch_step", "\n", "total_reg_loss", "=", "0", "\n", "total_bp_loss", "=", "0", "\n", "total_cnt", "=", "1e-6", "\n", "\n", "evaluate_results", "=", "{", "\"data\"", ":", "{", "\"id\"", ":", "list", "(", ")", ",", "\"counts\"", ":", "list", "(", ")", ",", "\"pred\"", ":", "list", "(", ")", "}", ",", "\n", "\"error\"", ":", "{", "\"mae\"", ":", "INF", ",", "\"mse\"", ":", "INF", "}", ",", "\n", "\"time\"", ":", "{", "\"avg\"", ":", "list", "(", ")", ",", "\"total\"", ":", "0.0", "}", "}", "\n", "\n", "if", "config", "[", "\"reg_loss\"", "]", "==", "\"MAE\"", ":", "\n", "        ", "reg_crit", "=", "lambda", "pred", ",", "target", ":", "F", ".", "l1_loss", "(", "F", ".", "relu", "(", "pred", ")", ",", "target", ",", "reduce", "=", "\"none\"", ")", "\n", "", "elif", "config", "[", "\"reg_loss\"", "]", "==", "\"MSE\"", ":", "\n", "        ", "reg_crit", "=", "lambda", "pred", ",", "target", ":", "F", ".", "mse_loss", "(", "F", ".", "relu", "(", "pred", ")", ",", "target", ",", "reduce", "=", "\"none\"", ")", "\n", "", "elif", "config", "[", "\"reg_loss\"", "]", "==", "\"SMSE\"", ":", "\n", "        ", "reg_crit", "=", "lambda", "pred", ",", "target", ":", "F", ".", "smooth_l1_loss", "(", "F", ".", "relu", "(", "pred", ")", ",", "target", ",", "reduce", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "config", "[", "\"bp_loss\"", "]", "==", "\"MAE\"", ":", "\n", "        ", "bp_crit", "=", "lambda", "pred", ",", "target", ",", "neg_slp", ":", "F", ".", "l1_loss", "(", "F", ".", "leaky_relu", "(", "pred", ",", "neg_slp", ")", ",", "target", ",", "reduce", "=", "\"none\"", ")", "\n", "", "elif", "config", "[", "\"bp_loss\"", "]", "==", "\"MSE\"", ":", "\n", "        ", "bp_crit", "=", "lambda", "pred", ",", "target", ",", "neg_slp", ":", "F", ".", "mse_loss", "(", "F", ".", "leaky_relu", "(", "pred", ",", "neg_slp", ")", ",", "target", ",", "reduce", "=", "\"none\"", ")", "\n", "", "elif", "config", "[", "\"bp_loss\"", "]", "==", "\"SMSE\"", ":", "\n", "        ", "bp_crit", "=", "lambda", "pred", ",", "target", ",", "neg_slp", ":", "F", ".", "smooth_l1_loss", "(", "F", ".", "leaky_relu", "(", "pred", ",", "neg_slp", ")", ",", "target", ",", "reduce", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_id", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "ids", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ",", "counts", "=", "batch", "\n", "cnt", "=", "counts", ".", "shape", "[", "0", "]", "\n", "total_cnt", "+=", "cnt", "\n", "\n", "evaluate_results", "[", "\"data\"", "]", "[", "\"id\"", "]", ".", "extend", "(", "ids", ")", "\n", "evaluate_results", "[", "\"data\"", "]", "[", "\"counts\"", "]", ".", "extend", "(", "counts", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "pattern", ".", "to", "(", "device", ")", "\n", "graph", ".", "to", "(", "device", ")", "\n", "pattern_len", ",", "graph_len", ",", "counts", "=", "pattern_len", ".", "to", "(", "device", ")", ",", "graph_len", ".", "to", "(", "device", ")", ",", "counts", ".", "to", "(", "device", ")", "\n", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "pred", "=", "model", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "et", "=", "time", ".", "time", "(", ")", "\n", "evaluate_results", "[", "\"time\"", "]", "[", "\"total\"", "]", "+=", "(", "et", "-", "st", ")", "\n", "avg_t", "=", "(", "et", "-", "st", ")", "/", "(", "cnt", "+", "1e-8", ")", "\n", "evaluate_results", "[", "\"time\"", "]", "[", "\"avg\"", "]", ".", "extend", "(", "[", "avg_t", "]", "*", "cnt", ")", "\n", "evaluate_results", "[", "\"data\"", "]", "[", "\"pred\"", "]", ".", "extend", "(", "pred", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "reg_loss", "=", "reg_crit", "(", "pred", ",", "counts", ")", "\n", "\n", "if", "isinstance", "(", "config", "[", "\"bp_loss_slp\"", "]", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "neg_slp", "=", "float", "(", "config", "[", "\"bp_loss_slp\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "bp_loss_slp", ",", "l0", ",", "l1", "=", "config", "[", "\"bp_loss_slp\"", "]", ".", "rsplit", "(", "\"$\"", ",", "3", ")", "\n", "neg_slp", "=", "anneal_fn", "(", "bp_loss_slp", ",", "batch_id", "+", "epoch", "*", "epoch_step", ",", "T", "=", "total_step", "//", "4", ",", "lambda0", "=", "float", "(", "l0", ")", ",", "lambda1", "=", "float", "(", "l1", ")", ")", "\n", "", "bp_loss", "=", "bp_crit", "(", "pred", ",", "counts", ",", "neg_slp", ")", "\n", "\n", "reg_loss_item", "=", "reg_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "bp_loss_item", "=", "bp_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "total_reg_loss", "+=", "reg_loss_item", "*", "cnt", "\n", "total_bp_loss", "+=", "bp_loss_item", "*", "cnt", "\n", "\n", "evaluate_results", "[", "\"error\"", "]", "[", "\"mae\"", "]", "+=", "F", ".", "l1_loss", "(", "F", ".", "relu", "(", "pred", ")", ",", "counts", ",", "reduce", "=", "\"none\"", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "evaluate_results", "[", "\"error\"", "]", "[", "\"mse\"", "]", "+=", "F", ".", "mse_loss", "(", "F", ".", "relu", "(", "pred", ")", ",", "counts", ",", "reduce", "=", "\"none\"", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "writer", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\"%s/REG-%s\"", "%", "(", "data_type", ",", "config", "[", "\"reg_loss\"", "]", ")", ",", "reg_loss_item", ",", "epoch", "*", "epoch_step", "+", "batch_id", ")", "\n", "writer", ".", "add_scalar", "(", "\"%s/BP-%s\"", "%", "(", "data_type", ",", "config", "[", "\"bp_loss\"", "]", ")", ",", "bp_loss_item", ",", "epoch", "*", "epoch_step", "+", "batch_id", ")", "\n", "\n", "", "if", "logger", "and", "batch_id", "==", "epoch_step", "-", "1", ":", "\n", "                ", "logger", ".", "info", "(", "\"epoch: {:0>3d}/{:0>3d}\\tdata_type: {:<5s}\\tbatch: {:0>5d}/{:0>5d}\\treg loss: {:0>10.3f}\\tbp loss: {:0>16.3f}\\tground: {:.3f}\\tpredict: {:.3f}\"", ".", "format", "(", "\n", "epoch", ",", "config", "[", "\"epochs\"", "]", ",", "data_type", ",", "batch_id", ",", "epoch_step", ",", "\n", "reg_loss_item", ",", "bp_loss_item", ",", "\n", "counts", "[", "0", "]", ".", "item", "(", ")", ",", "pred", "[", "0", "]", ".", "item", "(", ")", ")", ")", "\n", "", "", "mean_reg_loss", "=", "total_reg_loss", "/", "total_cnt", "\n", "mean_bp_loss", "=", "total_bp_loss", "/", "total_cnt", "\n", "if", "writer", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\"%s/REG-%s-epoch\"", "%", "(", "data_type", ",", "config", "[", "\"reg_loss\"", "]", ")", ",", "mean_reg_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "\"%s/BP-%s-epoch\"", "%", "(", "data_type", ",", "config", "[", "\"bp_loss\"", "]", ")", ",", "mean_bp_loss", ",", "epoch", ")", "\n", "", "if", "logger", ":", "\n", "            ", "logger", ".", "info", "(", "\"epoch: {:0>3d}/{:0>3d}\\tdata_type: {:<5s}\\treg loss: {:0>10.3f}\\tbp loss: {:0>16.3f}\"", ".", "format", "(", "\n", "epoch", ",", "config", "[", "\"epochs\"", "]", ",", "data_type", ",", "mean_reg_loss", ",", "mean_bp_loss", ")", ")", "\n", "\n", "", "evaluate_results", "[", "\"error\"", "]", "[", "\"mae\"", "]", "=", "evaluate_results", "[", "\"error\"", "]", "[", "\"mae\"", "]", "/", "total_cnt", "\n", "evaluate_results", "[", "\"error\"", "]", "[", "\"mse\"", "]", "=", "evaluate_results", "[", "\"error\"", "]", "[", "\"mse\"", "]", "/", "total_cnt", "\n", "\n", "", "gc", ".", "collect", "(", ")", "\n", "return", "mean_reg_loss", ",", "mean_bp_loss", ",", "evaluate_results", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.Sampler.__init__": [[25, 46], ["torch.Sampler.__init__", "isinstance", "len", "copy.copy", "dataset.Sampler.order.append", "setattr", "list", "isinstance", "getattr().append", "hasattr", "value.number_of_nodes", "getattr().append", "getattr().append", "getattr", "len", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["def", "__init__", "(", "self", ",", "dataset", ",", "group_by", ",", "batch_size", ",", "shuffle", ",", "drop_last", ")", ":", "\n", "        ", "super", "(", "Sampler", ",", "self", ")", ".", "__init__", "(", "dataset", ")", "\n", "if", "isinstance", "(", "group_by", ",", "str", ")", ":", "\n", "            ", "group_by", "=", "[", "group_by", "]", "\n", "", "for", "attr", "in", "group_by", ":", "\n", "            ", "setattr", "(", "self", ",", "attr", ",", "list", "(", ")", ")", "\n", "", "self", ".", "data_size", "=", "len", "(", "dataset", ".", "data", ")", "\n", "for", "x", "in", "dataset", ".", "data", ":", "\n", "            ", "for", "attr", "in", "group_by", ":", "\n", "                ", "value", "=", "x", "[", "attr", "]", "\n", "if", "isinstance", "(", "value", ",", "dgl", ".", "DGLGraph", ")", ":", "\n", "                    ", "getattr", "(", "self", ",", "attr", ")", ".", "append", "(", "value", ".", "number_of_nodes", "(", ")", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "\"__len__\"", ")", ":", "\n", "                    ", "getattr", "(", "self", ",", "attr", ")", ".", "append", "(", "len", "(", "value", ")", ")", "\n", "", "else", ":", "\n", "                    ", "getattr", "(", "self", ",", "attr", ")", ".", "append", "(", "value", ")", "\n", "", "", "", "self", ".", "order", "=", "copy", ".", "copy", "(", "group_by", ")", "\n", "self", ".", "order", ".", "append", "(", "\"rand\"", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.Sampler.make_array": [[47, 59], ["numpy.random.rand().astype", "list", "numpy.array", "zip", "list", "numpy.random.rand", "len", "type", "Sampler._type_map.get", "zip", "getattr", "getattr"], "methods", ["None"], ["", "def", "make_array", "(", "self", ")", ":", "\n", "        ", "self", ".", "rand", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data_size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "data_size", "==", "0", ":", "\n", "            ", "types", "=", "[", "np", ".", "float32", "]", "*", "len", "(", "self", ".", "order", ")", "\n", "", "else", ":", "\n", "            ", "types", "=", "[", "type", "(", "getattr", "(", "self", ",", "attr", ")", "[", "0", "]", ")", "for", "attr", "in", "self", ".", "order", "]", "\n", "types", "=", "[", "Sampler", ".", "_type_map", ".", "get", "(", "t", ",", "t", ")", "for", "t", "in", "types", "]", "\n", "", "dtype", "=", "list", "(", "zip", "(", "self", ".", "order", ",", "types", ")", ")", "\n", "array", "=", "np", ".", "array", "(", "\n", "list", "(", "zip", "(", "*", "[", "getattr", "(", "self", ",", "attr", ")", "for", "attr", "in", "self", ".", "order", "]", ")", ")", ",", "\n", "dtype", "=", "dtype", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.Sampler.__iter__": [[60, 72], ["dataset.Sampler.make_array", "numpy.argsort", "numpy.random.shuffle", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.Sampler.make_array"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "array", "=", "self", ".", "make_array", "(", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "array", ",", "axis", "=", "0", ",", "order", "=", "self", ".", "order", ")", "\n", "batches", "=", "[", "indices", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "indices", ")", ",", "self", ".", "batch_size", ")", "]", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "batches", ")", "\n", "", "batch_idx", "=", "0", "\n", "while", "batch_idx", "<", "len", "(", "batches", ")", "-", "1", ":", "\n", "            ", "yield", "batches", "[", "batch_idx", "]", "\n", "batch_idx", "+=", "1", "\n", "", "if", "len", "(", "batches", ")", ">", "0", "and", "(", "len", "(", "batches", "[", "batch_idx", "]", ")", "==", "self", ".", "batch_size", "or", "not", "self", ".", "drop_last", ")", ":", "\n", "            ", "yield", "batches", "[", "batch_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.Sampler.__len__": [[73, 78], ["math.floor", "math.ceil"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "math", ".", "floor", "(", "self", ".", "data_size", "/", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "return", "math", ".", "ceil", "(", "self", ".", "data_size", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.__init__": [[84, 90], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "code", ")", ":", "\n", "        ", "self", ".", "u", "=", "code", "[", ":", ",", "0", "]", "\n", "self", ".", "v", "=", "code", "[", ":", ",", "1", "]", "\n", "self", ".", "ul", "=", "code", "[", ":", ",", "2", "]", "\n", "self", ".", "el", "=", "code", "[", ":", ",", "3", "]", "\n", "self", ".", "vl", "=", "code", "[", ":", ",", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.__len__": [[91, 96], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "u", ".", "shape", ")", "==", "2", ":", "# single code", "\n", "            ", "return", "self", ".", "u", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "# batch code", "\n", "            ", "return", "self", ".", "u", ".", "shape", "[", "0", "]", "*", "self", ".", "u", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.batch": [[97, 106], ["dataset.EdgeSeq", "utils.batch_convert_tensor_to_tensor", "utils.batch_convert_tensor_to_tensor", "utils.batch_convert_tensor_to_tensor", "utils.batch_convert_tensor_to_tensor", "utils.batch_convert_tensor_to_tensor", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_tensor_to_tensor", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_tensor_to_tensor", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_tensor_to_tensor", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_tensor_to_tensor", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_tensor_to_tensor"], ["", "", "@", "staticmethod", "\n", "def", "batch", "(", "data", ")", ":", "\n", "        ", "b", "=", "EdgeSeq", "(", "torch", ".", "empty", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "b", ".", "u", "=", "batch_convert_tensor_to_tensor", "(", "[", "x", ".", "u", "for", "x", "in", "data", "]", ")", "\n", "b", ".", "v", "=", "batch_convert_tensor_to_tensor", "(", "[", "x", ".", "v", "for", "x", "in", "data", "]", ")", "\n", "b", ".", "ul", "=", "batch_convert_tensor_to_tensor", "(", "[", "x", ".", "ul", "for", "x", "in", "data", "]", ")", "\n", "b", ".", "el", "=", "batch_convert_tensor_to_tensor", "(", "[", "x", ".", "el", "for", "x", "in", "data", "]", ")", "\n", "b", ".", "vl", "=", "batch_convert_tensor_to_tensor", "(", "[", "x", ".", "vl", "for", "x", "in", "data", "]", ")", "\n", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to": [[107, 113], ["dataset.EdgeSeq.u.to", "dataset.EdgeSeq.v.to", "dataset.EdgeSeq.ul.to", "dataset.EdgeSeq.el.to", "dataset.EdgeSeq.vl.to"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "u", "=", "self", ".", "u", ".", "to", "(", "device", ")", "\n", "self", ".", "v", "=", "self", ".", "v", ".", "to", "(", "device", ")", "\n", "self", ".", "ul", "=", "self", ".", "ul", ".", "to", "(", "device", ")", "\n", "self", ".", "el", "=", "self", ".", "el", ".", "to", "(", "device", ")", "\n", "self", ".", "vl", "=", "self", ".", "vl", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.__init__": [[119, 127], ["torch.Dataset.__init__", "dataset.EdgeSeqDataset._to_tensor", "dataset.EdgeSeqDataset.preprocess_batch", "list"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset._to_tensor", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.preprocess_batch"], ["    ", "def", "__init__", "(", "self", ",", "data", "=", "None", ")", ":", "\n", "        ", "super", "(", "EdgeSeqDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "data", ":", "\n", "            ", "self", ".", "data", "=", "EdgeSeqDataset", ".", "preprocess_batch", "(", "data", ",", "use_tqdm", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "list", "(", ")", "\n", "", "self", ".", "_to_tensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset._to_tensor": [[128, 133], ["isinstance", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "_to_tensor", "(", "self", ")", ":", "\n", "        ", "for", "x", "in", "self", ".", "data", ":", "\n", "            ", "for", "k", "in", "[", "\"pattern\"", ",", "\"graph\"", ",", "\"subisomorphisms\"", "]", ":", "\n", "                ", "if", "isinstance", "(", "x", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "x", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "x", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.__len__": [[134, 136], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.__getitem__": [[137, 139], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.save": [[140, 153], ["collections.defaultdict", "list", "open", "torch.save", "torch.save", "torch.save", "torch.save", "len", "collections.defaultdict.keys", "range", "x.keys", "k.startswith", "len", "cache[].append", "x.pop"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "cache", "=", "defaultdict", "(", "list", ")", "\n", "for", "x", "in", "self", ".", "data", ":", "\n", "            ", "for", "k", "in", "list", "(", "x", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "                    ", "cache", "[", "k", "]", ".", "append", "(", "x", ".", "pop", "(", "k", ")", ")", "\n", "", "", "", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "data", ",", "f", ",", "pickle_protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "if", "len", "(", "cache", ")", ">", "0", ":", "\n", "            ", "keys", "=", "cache", ".", "keys", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "                ", "for", "k", "in", "keys", ":", "\n", "                    ", "self", ".", "data", "[", "i", "]", "[", "k", "]", "=", "cache", "[", "k", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.load": [[154, 161], ["open", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load"], ["", "", "", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "torch", ".", "load", "(", "f", ")", "\n", "", "del", "self", ".", "data", "\n", "self", ".", "data", "=", "data", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.graph2edgeseq": [[162, 175], ["list", "numpy.array", "numpy.array.view().sort", "numpy.array.append", "numpy.array.view"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "@", "staticmethod", "\n", "def", "graph2edgeseq", "(", "graph", ")", ":", "\n", "        ", "labels", "=", "graph", ".", "vs", "[", "\"label\"", "]", "\n", "graph_code", "=", "list", "(", ")", "\n", "\n", "for", "edge", "in", "graph", ".", "es", ":", "\n", "            ", "v", ",", "u", "=", "edge", ".", "tuple", "\n", "graph_code", ".", "append", "(", "(", "v", ",", "u", ",", "labels", "[", "v", "]", ",", "edge", "[", "\"label\"", "]", ",", "labels", "[", "u", "]", ")", ")", "\n", "", "graph_code", "=", "np", ".", "array", "(", "graph_code", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "graph_code", ".", "view", "(", "\n", "[", "(", "\"v\"", ",", "\"int64\"", ")", ",", "(", "\"u\"", ",", "\"int64\"", ")", ",", "(", "\"vl\"", ",", "\"int64\"", ")", ",", "(", "\"el\"", ",", "\"int64\"", ")", ",", "(", "\"ul\"", ",", "\"int64\"", ")", "]", ")", ".", "sort", "(", "\n", "axis", "=", "0", ",", "order", "=", "[", "\"v\"", ",", "\"u\"", ",", "\"el\"", "]", ")", "\n", "return", "graph_code", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.preprocess": [[176, 189], ["dataset.EdgeSeqDataset.graph2edgeseq", "dataset.EdgeSeqDataset.graph2edgeseq", "numpy.array().reshape", "x[].vcount", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.graph2edgeseq", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.graph2edgeseq"], ["", "@", "staticmethod", "\n", "def", "preprocess", "(", "x", ")", ":", "\n", "        ", "pattern_code", "=", "EdgeSeqDataset", ".", "graph2edgeseq", "(", "x", "[", "\"pattern\"", "]", ")", "\n", "graph_code", "=", "EdgeSeqDataset", ".", "graph2edgeseq", "(", "x", "[", "\"graph\"", "]", ")", "\n", "subisomorphisms", "=", "np", ".", "array", "(", "x", "[", "\"subisomorphisms\"", "]", ",", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "-", "1", ",", "x", "[", "\"pattern\"", "]", ".", "vcount", "(", ")", ")", "\n", "\n", "x", "=", "{", "\n", "\"id\"", ":", "x", "[", "\"id\"", "]", ",", "\n", "\"pattern\"", ":", "pattern_code", ",", "\n", "\"graph\"", ":", "graph_code", ",", "\n", "\"counts\"", ":", "x", "[", "\"counts\"", "]", ",", "\n", "\"subisomorphisms\"", ":", "subisomorphisms", "}", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.preprocess_batch": [[190, 198], ["list", "tqdm.tqdm.tqdm", "list.append", "dataset.EdgeSeqDataset.preprocess", "torch.data"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.preprocess"], ["", "@", "staticmethod", "\n", "def", "preprocess_batch", "(", "data", ",", "use_tqdm", "=", "False", ")", ":", "\n", "        ", "d", "=", "list", "(", ")", "\n", "if", "use_tqdm", ":", "\n", "            ", "data", "=", "tqdm", "(", "data", ")", "\n", "", "for", "x", "in", "data", ":", "\n", "            ", "d", ".", "append", "(", "EdgeSeqDataset", ".", "preprocess", "(", "x", ")", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeqDataset.batchify": [[199, 208], ["dataset.EdgeSeq.batch", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "dataset.EdgeSeq.batch", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "dataset.EdgeSeq", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dataset.EdgeSeq", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.batch", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.batch"], ["", "@", "staticmethod", "\n", "def", "batchify", "(", "batch", ")", ":", "\n", "        ", "_id", "=", "[", "x", "[", "\"id\"", "]", "for", "x", "in", "batch", "]", "\n", "pattern", "=", "EdgeSeq", ".", "batch", "(", "[", "EdgeSeq", "(", "x", "[", "\"pattern\"", "]", ")", "for", "x", "in", "batch", "]", ")", "\n", "pattern_len", "=", "torch", ".", "tensor", "(", "[", "x", "[", "\"pattern\"", "]", ".", "shape", "[", "0", "]", "for", "x", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "graph", "=", "EdgeSeq", ".", "batch", "(", "[", "EdgeSeq", "(", "x", "[", "\"graph\"", "]", ")", "for", "x", "in", "batch", "]", ")", "\n", "graph_len", "=", "torch", ".", "tensor", "(", "[", "x", "[", "\"graph\"", "]", ".", "shape", "[", "0", "]", "for", "x", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "counts", "=", "torch", ".", "tensor", "(", "[", "x", "[", "\"counts\"", "]", "for", "x", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "_id", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ",", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.__init__": [[214, 222], ["torch.Dataset.__init__", "dataset.GraphAdjDataset._to_tensor", "dataset.GraphAdjDataset.preprocess_batch", "list"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset._to_tensor", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.preprocess_batch"], ["    ", "def", "__init__", "(", "self", ",", "data", "=", "None", ")", ":", "\n", "        ", "super", "(", "GraphAdjDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "data", ":", "\n", "            ", "self", ".", "data", "=", "GraphAdjDataset", ".", "preprocess_batch", "(", "data", ",", "use_tqdm", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "list", "(", ")", "\n", "", "self", ".", "_to_tensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset._to_tensor": [[223, 235], ["isinstance", "y.ndata.items", "y.edata.items", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "isinstance", "isinstance", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "_to_tensor", "(", "self", ")", ":", "\n", "        ", "for", "x", "in", "self", ".", "data", ":", "\n", "            ", "for", "k", "in", "[", "\"pattern\"", ",", "\"graph\"", "]", ":", "\n", "                ", "y", "=", "x", "[", "k", "]", "\n", "for", "k", ",", "v", "in", "y", ".", "ndata", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                        ", "y", ".", "ndata", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "", "", "for", "k", ",", "v", "in", "y", ".", "edata", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                        ", "y", ".", "edata", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "", "", "", "if", "isinstance", "(", "x", "[", "\"subisomorphisms\"", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "x", "[", "\"subisomorphisms\"", "]", "=", "torch", ".", "from_numpy", "(", "x", "[", "\"subisomorphisms\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.__len__": [[236, 238], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.__getitem__": [[239, 241], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save": [[242, 255], ["collections.defaultdict", "list", "open", "torch.save", "torch.save", "torch.save", "torch.save", "len", "collections.defaultdict.keys", "range", "x.keys", "k.startswith", "len", "cache[].append", "x.pop"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.save", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "        ", "cache", "=", "defaultdict", "(", "list", ")", "\n", "for", "x", "in", "self", ".", "data", ":", "\n", "            ", "for", "k", "in", "list", "(", "x", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "                    ", "cache", "[", "k", "]", ".", "append", "(", "x", ".", "pop", "(", "k", ")", ")", "\n", "", "", "", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "data", ",", "f", ",", "pickle_protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "if", "len", "(", "cache", ")", ">", "0", ":", "\n", "            ", "keys", "=", "cache", ".", "keys", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "                ", "for", "k", "in", "keys", ":", "\n", "                    ", "self", ".", "data", "[", "i", "]", "[", "k", "]", "=", "cache", "[", "k", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load": [[256, 263], ["open", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load"], ["", "", "", "", "def", "load", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "torch", ".", "load", "(", "f", ")", "\n", "", "del", "self", ".", "data", "\n", "self", ".", "data", "=", "data", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.comp_indeg_norm": [[264, 277], ["isinstance", "numpy.array", "isinstance", "graph.indegree", "graph.in_degrees().float().numpy", "numpy.isinf", "graph.in_degrees().float", "graph.in_degrees", "range", "graph.number_of_nodes"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "comp_indeg_norm", "(", "graph", ")", ":", "\n", "        ", "import", "igraph", "as", "ig", "\n", "if", "isinstance", "(", "graph", ",", "ig", ".", "Graph", ")", ":", "\n", "# 10x faster  ", "\n", "            ", "in_deg", "=", "np", ".", "array", "(", "graph", ".", "indegree", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "isinstance", "(", "graph", ",", "dgl", ".", "DGLGraph", ")", ":", "\n", "            ", "in_deg", "=", "graph", ".", "in_degrees", "(", "range", "(", "graph", ".", "number_of_nodes", "(", ")", ")", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "norm", "=", "1.0", "/", "in_deg", "\n", "norm", "[", "np", ".", "isinf", "(", "norm", ")", "]", "=", "0", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.graph2dglgraph": [[278, 286], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "graph.get_edgelist", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.readonly", "graph.vcount"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges"], ["", "@", "staticmethod", "\n", "def", "graph2dglgraph", "(", "graph", ")", ":", "\n", "        ", "dglgraph", "=", "dgl", ".", "DGLGraph", "(", "multigraph", "=", "True", ")", "\n", "dglgraph", ".", "add_nodes", "(", "graph", ".", "vcount", "(", ")", ")", "\n", "edges", "=", "graph", ".", "get_edgelist", "(", ")", "\n", "dglgraph", ".", "add_edges", "(", "[", "e", "[", "0", "]", "for", "e", "in", "edges", "]", ",", "[", "e", "[", "1", "]", "for", "e", "in", "edges", "]", ")", "\n", "dglgraph", ".", "readonly", "(", "True", ")", "\n", "return", "dglgraph", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.preprocess": [[287, 312], ["dataset.GraphAdjDataset.graph2dglgraph", "numpy.array", "numpy.array", "numpy.arange", "numpy.array", "dataset.GraphAdjDataset.graph2dglgraph", "numpy.array", "numpy.array", "numpy.arange", "numpy.array", "numpy.array().reshape", "pattern.indegree", "pattern.vcount", "graph.indegree", "graph.vcount", "x[].vcount", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.graph2dglgraph", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.graph2dglgraph"], ["", "@", "staticmethod", "\n", "def", "preprocess", "(", "x", ")", ":", "\n", "        ", "pattern", "=", "x", "[", "\"pattern\"", "]", "\n", "pattern_dglgraph", "=", "GraphAdjDataset", ".", "graph2dglgraph", "(", "pattern", ")", "\n", "pattern_dglgraph", ".", "ndata", "[", "\"indeg\"", "]", "=", "np", ".", "array", "(", "pattern", ".", "indegree", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pattern_dglgraph", ".", "ndata", "[", "\"label\"", "]", "=", "np", ".", "array", "(", "pattern", ".", "vs", "[", "\"label\"", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "pattern_dglgraph", ".", "ndata", "[", "\"id\"", "]", "=", "np", ".", "arange", "(", "0", ",", "pattern", ".", "vcount", "(", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "pattern_dglgraph", ".", "edata", "[", "\"label\"", "]", "=", "np", ".", "array", "(", "pattern", ".", "es", "[", "\"label\"", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "graph", "=", "x", "[", "\"graph\"", "]", "\n", "graph_dglgraph", "=", "GraphAdjDataset", ".", "graph2dglgraph", "(", "graph", ")", "\n", "graph_dglgraph", ".", "ndata", "[", "\"indeg\"", "]", "=", "np", ".", "array", "(", "graph", ".", "indegree", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "graph_dglgraph", ".", "ndata", "[", "\"label\"", "]", "=", "np", ".", "array", "(", "graph", ".", "vs", "[", "\"label\"", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "graph_dglgraph", ".", "ndata", "[", "\"id\"", "]", "=", "np", ".", "arange", "(", "0", ",", "graph", ".", "vcount", "(", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "graph_dglgraph", ".", "edata", "[", "\"label\"", "]", "=", "np", ".", "array", "(", "graph", ".", "es", "[", "\"label\"", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "subisomorphisms", "=", "np", ".", "array", "(", "x", "[", "\"subisomorphisms\"", "]", ",", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "-", "1", ",", "x", "[", "\"pattern\"", "]", ".", "vcount", "(", ")", ")", "\n", "\n", "x", "=", "{", "\n", "\"id\"", ":", "x", "[", "\"id\"", "]", ",", "\n", "\"pattern\"", ":", "pattern_dglgraph", ",", "\n", "\"graph\"", ":", "graph_dglgraph", ",", "\n", "\"counts\"", ":", "x", "[", "\"counts\"", "]", ",", "\n", "\"subisomorphisms\"", ":", "subisomorphisms", "}", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.preprocess_batch": [[313, 321], ["list", "tqdm.tqdm.tqdm", "list.append", "dataset.GraphAdjDataset.preprocess", "torch.data"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.preprocess"], ["", "@", "staticmethod", "\n", "def", "preprocess_batch", "(", "data", ",", "use_tqdm", "=", "False", ")", ":", "\n", "        ", "d", "=", "list", "(", ")", "\n", "if", "use_tqdm", ":", "\n", "            ", "data", "=", "tqdm", "(", "data", ")", "\n", "", "for", "x", "in", "data", ":", "\n", "            ", "d", ".", "append", "(", "GraphAdjDataset", ".", "preprocess", "(", "x", ")", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.batchify": [[322, 331], ["dgl.batch", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "dgl.batch", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "x[].number_of_nodes", "x[].number_of_nodes"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.batch", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.EdgeSeq.batch"], ["", "@", "staticmethod", "\n", "def", "batchify", "(", "batch", ")", ":", "\n", "        ", "_id", "=", "[", "x", "[", "\"id\"", "]", "for", "x", "in", "batch", "]", "\n", "pattern", "=", "dgl", ".", "batch", "(", "[", "x", "[", "\"pattern\"", "]", "for", "x", "in", "batch", "]", ")", "\n", "pattern_len", "=", "torch", ".", "tensor", "(", "[", "x", "[", "\"pattern\"", "]", ".", "number_of_nodes", "(", ")", "for", "x", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "graph", "=", "dgl", ".", "batch", "(", "[", "x", "[", "\"graph\"", "]", "for", "x", "in", "batch", "]", ")", "\n", "graph_len", "=", "torch", ".", "tensor", "(", "[", "x", "[", "\"graph\"", "]", ".", "number_of_nodes", "(", ")", "for", "x", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "counts", "=", "torch", ".", "tensor", "(", "[", "x", "[", "\"counts\"", "]", "for", "x", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "_id", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ",", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.NormalEmbedding.__init__": [[8, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "emb_dim", ")", ":", "\n", "        ", "super", "(", "NormalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "emb_layer", "=", "nn", ".", "Linear", "(", "input_dim", ",", "emb_dim", ",", "bias", "=", "False", ")", "\n", "\n", "# init", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "emb_layer", ".", "weight", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.NormalEmbedding.increase_input_size": [[17, 24], ["utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_input_dim", ")", ":", "\n", "        ", "assert", "new_input_dim", ">=", "self", ".", "input_dim", "\n", "if", "new_input_dim", "!=", "self", ".", "input_dim", ":", "\n", "            ", "new_emb_layer", "=", "extend_dimensions", "(", "self", ".", "emb_layer", ",", "new_input_dim", "=", "new_input_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "emb_layer", "\n", "self", ".", "emb_layer", "=", "new_emb_layer", "\n", "self", ".", "input_dim", "=", "new_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.NormalEmbedding.forward": [[25, 28], ["embedding.NormalEmbedding.emb_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "emb", "=", "self", ".", "emb_layer", "(", "x", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.OrthogonalEmbedding.__init__": [[30, 38], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "emb_dim", ")", ":", "\n", "        ", "super", "(", "OrthogonalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "emb_layer", "=", "nn", ".", "Linear", "(", "input_dim", ",", "emb_dim", ",", "bias", "=", "False", ")", "\n", "\n", "# init", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "emb_layer", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.OrthogonalEmbedding.increase_input_size": [[39, 46], ["utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_input_dim", ")", ":", "\n", "        ", "assert", "new_input_dim", ">=", "self", ".", "input_dim", "\n", "if", "new_input_dim", "!=", "self", ".", "input_dim", ":", "\n", "            ", "new_emb_layer", "=", "extend_dimensions", "(", "self", ".", "emb_layer", ",", "new_input_dim", "=", "new_input_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "emb_layer", "\n", "self", ".", "emb_layer", "=", "new_emb_layer", "\n", "self", ".", "input_dim", "=", "new_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.OrthogonalEmbedding.forward": [[47, 50], ["embedding.OrthogonalEmbedding.emb_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "emb", "=", "self", ".", "emb_layer", "(", "x", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.EquivariantEmbedding.__init__": [[52, 64], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "embedding.EquivariantEmbedding.emb_layer.weight[].data.copy_", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "emb_dim", ")", ":", "\n", "        ", "super", "(", "EquivariantEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "emb_layer", "=", "nn", ".", "Linear", "(", "input_dim", ",", "emb_dim", ",", "bias", "=", "False", ")", "\n", "\n", "# init", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "emb_layer", ".", "weight", "[", ":", ",", "0", "]", ",", "0.0", ",", "1.0", ")", "\n", "emb_column", "=", "self", ".", "emb_layer", ".", "weight", "[", ":", ",", "0", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "input_dim", ")", ":", "\n", "                ", "self", ".", "emb_layer", ".", "weight", "[", ":", ",", "i", "]", ".", "data", ".", "copy_", "(", "torch", ".", "roll", "(", "emb_column", ",", "i", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.EquivariantEmbedding.increase_input_size": [[65, 72], ["utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "", "", "def", "increase_input_size", "(", "self", ",", "new_input_dim", ")", ":", "\n", "        ", "assert", "new_input_dim", ">=", "self", ".", "input_dim", "\n", "if", "new_input_dim", "!=", "self", ".", "input_dim", ":", "\n", "            ", "new_emb_layer", "=", "extend_dimensions", "(", "self", ".", "emb_layer", ",", "new_input_dim", "=", "new_input_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "emb_layer", "\n", "self", ".", "emb_layer", "=", "new_emb_layer", "\n", "self", ".", "input_dim", "=", "new_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.embedding.EquivariantEmbedding.forward": [[73, 76], ["embedding.EquivariantEmbedding.emb_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "emb", "=", "self", ".", "emb_layer", "(", "x", ")", "\n", "return", "emb", "", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MultiHeadAttn.__init__": [[36, 73], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "utils.map_activation_str_to_layer", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["    ", "def", "__init__", "(", "self", ",", "query_dim", ",", "key_dim", ",", "value_dim", ",", "hidden_dim", ",", "num_heads", ",", "\n", "dropatt", "=", "0.0", ",", "act_func", "=", "\"softmax\"", ",", "add_zero_attn", "=", "False", ",", "\n", "pre_lnorm", "=", "False", ",", "post_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "hidden_dim", "%", "num_heads", "==", "0", "\n", "assert", "act_func", "in", "[", "\"softmax\"", ",", "\"sigmoid\"", "]", "\n", "\n", "self", ".", "query_dim", "=", "query_dim", "\n", "self", ".", "key_dim", "=", "key_dim", "\n", "self", ".", "value_dim", "=", "value_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "\n", "head_dim", "=", "hidden_dim", "//", "num_heads", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "query_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "k_net", "=", "nn", ".", "Linear", "(", "key_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "v_net", "=", "nn", ".", "Linear", "(", "value_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "query_dim", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "act", "=", "map_activation_str_to_layer", "(", "act_func", ")", "\n", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "self", ".", "post_lnorm", "=", "post_lnorm", "\n", "\n", "if", "pre_lnorm", ":", "\n", "            ", "self", ".", "q_layer_norm", "=", "nn", ".", "LayerNorm", "(", "query_dim", ")", "\n", "self", ".", "k_layer_norm", "=", "nn", ".", "LayerNorm", "(", "key_dim", ")", "\n", "self", ".", "v_layer_norm", "=", "nn", ".", "LayerNorm", "(", "value_dim", ")", "\n", "", "if", "post_lnorm", ":", "\n", "            ", "self", ".", "o_layer_norm", "=", "nn", ".", "LayerNorm", "(", "query_dim", ")", "\n", "\n", "# init", "\n", "", "scale", "=", "1", "/", "(", "head_dim", "**", "0.5", ")", "\n", "for", "m", "in", "[", "self", ".", "q_net", ",", "self", ".", "k_net", ",", "self", ".", "v_net", ",", "self", ".", "o_net", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.0", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MultiHeadAttn.forward": [[74, 113], ["predictnet.MultiHeadAttn.size", "predictnet.MultiHeadAttn.q_net().view", "predictnet.MultiHeadAttn.k_net().view", "predictnet.MultiHeadAttn.v_net().view", "predictnet.get_multi_head_attn_vec", "predictnet.MultiHeadAttn.o_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predictnet.MultiHeadAttn.size", "predictnet.MultiHeadAttn.size", "predictnet.MultiHeadAttn.size", "predictnet.MultiHeadAttn.q_layer_norm", "predictnet.MultiHeadAttn.k_layer_norm", "predictnet.MultiHeadAttn.v_layer_norm", "predictnet.MultiHeadAttn.o_layer_norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predictnet.MultiHeadAttn.q_net", "predictnet.MultiHeadAttn.k_net", "predictnet.MultiHeadAttn.v_net", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "predictnet.MultiHeadAttn.size", "predictnet.MultiHeadAttn.size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.get_multi_head_attn_vec"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "attn_mask", "=", "None", ")", ":", "\n", "##### multihead attention", "\n", "# [bsz x hlen x num_heads x head_dim]", "\n", "        ", "bsz", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "if", "self", ".", "add_zero_attn", ":", "\n", "            ", "key", "=", "torch", ".", "cat", "(", "[", "key", ",", "\n", "torch", ".", "zeros", "(", "(", "bsz", ",", "1", ")", "+", "key", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "key", ".", "dtype", ",", "device", "=", "key", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "value", "=", "torch", ".", "cat", "(", "[", "value", ",", "\n", "torch", ".", "zeros", "(", "(", "bsz", ",", "1", ")", "+", "value", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "value", ".", "dtype", ",", "device", "=", "value", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "\n", "torch", ".", "ones", "(", "(", "bsz", ",", "1", ")", ",", "dtype", "=", "attn_mask", ".", "dtype", ",", "device", "=", "attn_mask", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "qlen", ",", "klen", ",", "vlen", "=", "query", ".", "size", "(", "1", ")", ",", "key", ".", "size", "(", "1", ")", ",", "value", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "query", "=", "self", ".", "q_layer_norm", "(", "query", ")", "\n", "key", "=", "self", ".", "k_layer_norm", "(", "key", ")", "\n", "value", "=", "self", ".", "v_layer_norm", "(", "value", ")", "\n", "\n", "# linear projection", "\n", "", "head_q", "=", "self", ".", "q_net", "(", "query", ")", ".", "view", "(", "bsz", ",", "qlen", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ")", "\n", "head_k", "=", "self", ".", "k_net", "(", "key", ")", ".", "view", "(", "bsz", ",", "klen", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ")", "\n", "head_v", "=", "self", ".", "v_net", "(", "value", ")", ".", "view", "(", "bsz", ",", "vlen", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ")", "\n", "\n", "# multi head attention", "\n", "attn_vec", "=", "get_multi_head_attn_vec", "(", "\n", "head_q", "=", "head_q", ",", "head_k", "=", "head_k", ",", "head_v", "=", "head_v", ",", "\n", "attn_mask", "=", "attn_mask", ",", "act_layer", "=", "self", ".", "act", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "\n", "if", "self", ".", "post_lnorm", ":", "\n", "            ", "attn_out", "=", "self", ".", "o_layer_norm", "(", "attn_out", ")", "\n", "\n", "", "return", "attn_out", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MultiHeadAttn.increase_input_size": [[114, 152], ["utils.extend_dimensions", "utils.extend_dimensions", "utils.extend_dimensions", "utils.extend_dimensions", "utils.extend_dimensions", "utils.extend_dimensions", "utils.extend_dimensions", "utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_query_dim", ",", "new_key_dim", ",", "new_value_dim", ")", ":", "\n", "        ", "assert", "new_query_dim", ">=", "self", ".", "query_dim", "and", "new_key_dim", ">=", "self", ".", "key_dim", "and", "new_value_dim", ">=", "new_value_dim", "\n", "\n", "if", "new_query_dim", "!=", "self", ".", "query_dim", ":", "\n", "            ", "new_q_net", "=", "extend_dimensions", "(", "self", ".", "q_net", ",", "new_input_dim", "=", "new_query_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "q_net", "\n", "self", ".", "q_net", "=", "new_q_net", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "new_q_layer_norm", "=", "extend_dimensions", "(", "self", ".", "q_layer_norm", ",", "new_input_dim", "=", "new_query_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "q_layer_norm", "\n", "self", ".", "q_layer_norm", "=", "new_q_layer_norm", "\n", "\n", "", "new_o_net", "=", "extend_dimensions", "(", "self", ".", "o_net", ",", "new_output_dim", "=", "new_query_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "o_net", "\n", "self", ".", "o_net", "=", "new_o_net", "\n", "if", "self", ".", "post_lnorm", ":", "\n", "                ", "new_o_layer_norm", "=", "extend_dimensions", "(", "self", ".", "o_layer_norm", ",", "new_input_dim", "=", "new_query_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "o_layer_norm", "\n", "self", ".", "o_layer_norm", "=", "new_o_layer_norm", "\n", "", "", "if", "new_key_dim", "!=", "self", ".", "key_dim", ":", "\n", "            ", "new_k_net", "=", "extend_dimensions", "(", "self", ".", "k_net", ",", "new_input_dim", "=", "new_key_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "k_net", "\n", "self", ".", "k_net", "=", "new_k_net", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "new_k_layer_norm", "=", "extend_dimensions", "(", "self", ".", "k_layer_norm", ",", "new_input_dim", "=", "new_key_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "k_layer_norm", "\n", "self", ".", "k_layer_norm", "=", "new_k_layer_norm", "\n", "", "", "if", "new_value_dim", "!=", "self", ".", "value_dim", ":", "\n", "            ", "new_v_net", "=", "extend_dimensions", "(", "self", ".", "v_net", ",", "new_input_dim", "=", "new_value_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "v_net", "\n", "self", ".", "v_net", "=", "new_v_net", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "new_v_layer_norm", "=", "extend_dimensions", "(", "self", ".", "v_layer_norm", ",", "new_input_dim", "=", "new_value_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "v_layer_norm", "\n", "self", ".", "v_layer_norm", "=", "new_v_layer_norm", "\n", "", "", "self", ".", "query_dim", "=", "new_query_dim", "\n", "self", ".", "key_dim", "=", "new_key_dim", "\n", "self", ".", "value_dim", "=", "new_value_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.GatedMultiHeadAttn.__init__": [[155, 195], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "utils.map_activation_str_to_layer", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["    ", "def", "__init__", "(", "self", ",", "query_dim", ",", "key_dim", ",", "value_dim", ",", "hidden_dim", ",", "num_heads", ",", "\n", "dropatt", "=", "0.0", ",", "act_func", "=", "\"softmax\"", ",", "add_zero_attn", "=", "False", ",", "\n", "pre_lnorm", "=", "False", ",", "post_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "GatedMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "hidden_dim", "%", "num_heads", "==", "0", "\n", "\n", "self", ".", "query_dim", "=", "query_dim", "\n", "self", ".", "key_dim", "=", "key_dim", "\n", "self", ".", "value_dim", "=", "value_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "\n", "head_dim", "=", "hidden_dim", "//", "num_heads", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "query_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "k_net", "=", "nn", ".", "Linear", "(", "key_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "v_net", "=", "nn", ".", "Linear", "(", "value_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "query_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "g_net", "=", "nn", ".", "Linear", "(", "2", "*", "query_dim", ",", "query_dim", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "act", "=", "map_activation_str_to_layer", "(", "act_func", ")", "\n", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "self", ".", "post_lnorm", "=", "post_lnorm", "\n", "\n", "if", "pre_lnorm", ":", "\n", "            ", "self", ".", "q_layer_norm", "=", "nn", ".", "LayerNorm", "(", "query_dim", ")", "\n", "self", ".", "k_layer_norm", "=", "nn", ".", "LayerNorm", "(", "key_dim", ")", "\n", "self", ".", "v_layer_norm", "=", "nn", ".", "LayerNorm", "(", "value_dim", ")", "\n", "", "if", "post_lnorm", ":", "\n", "            ", "self", ".", "o_layer_norm", "=", "nn", ".", "LayerNorm", "(", "query_dim", ")", "\n", "\n", "# init", "\n", "", "scale", "=", "1", "/", "(", "head_dim", "**", "0.5", ")", "\n", "for", "m", "in", "[", "self", ".", "q_net", ",", "self", ".", "k_net", ",", "self", ".", "v_net", ",", "self", ".", "o_net", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.0", ",", "scale", ")", "\n", "# when new data comes, it prefers to output 1 so that the gate is 1", "\n", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "g_net", ".", "weight", ",", "0.0", ",", "scale", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "g_net", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.GatedMultiHeadAttn.forward": [[196, 239], ["predictnet.GatedMultiHeadAttn.size", "predictnet.GatedMultiHeadAttn.q_net().view", "predictnet.GatedMultiHeadAttn.k_net().view", "predictnet.GatedMultiHeadAttn.v_net().view", "predictnet.get_multi_head_attn_vec", "predictnet.GatedMultiHeadAttn.o_net", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predictnet.GatedMultiHeadAttn.size", "predictnet.GatedMultiHeadAttn.size", "predictnet.GatedMultiHeadAttn.size", "predictnet.GatedMultiHeadAttn.q_layer_norm", "predictnet.GatedMultiHeadAttn.k_layer_norm", "predictnet.GatedMultiHeadAttn.v_layer_norm", "predictnet.GatedMultiHeadAttn.g_net", "predictnet.GatedMultiHeadAttn.o_layer_norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predictnet.GatedMultiHeadAttn.q_net", "predictnet.GatedMultiHeadAttn.k_net", "predictnet.GatedMultiHeadAttn.v_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "predictnet.GatedMultiHeadAttn.size", "predictnet.GatedMultiHeadAttn.size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.get_multi_head_attn_vec"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "attn_mask", "=", "None", ")", ":", "\n", "##### multihead attention", "\n", "# [bsz x hlen x num_heads x head_dim]", "\n", "        ", "bsz", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "if", "self", ".", "add_zero_attn", ":", "\n", "            ", "key", "=", "torch", ".", "cat", "(", "[", "key", ",", "\n", "torch", ".", "zeros", "(", "(", "bsz", ",", "1", ")", "+", "key", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "key", ".", "dtype", ",", "device", "=", "key", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "value", "=", "torch", ".", "cat", "(", "[", "value", ",", "\n", "torch", ".", "zeros", "(", "(", "bsz", ",", "1", ")", "+", "value", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "value", ".", "dtype", ",", "device", "=", "value", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "\n", "torch", ".", "ones", "(", "(", "bsz", ",", "1", ")", ",", "dtype", "=", "attn_mask", ".", "dtype", ",", "device", "=", "attn_mask", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "qlen", ",", "klen", ",", "vlen", "=", "query", ".", "size", "(", "1", ")", ",", "key", ".", "size", "(", "1", ")", ",", "value", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "query", "=", "self", ".", "q_layer_norm", "(", "query", ")", "\n", "key", "=", "self", ".", "k_layer_norm", "(", "key", ")", "\n", "value", "=", "self", ".", "v_layer_norm", "(", "value", ")", "\n", "\n", "# linear projection", "\n", "", "head_q", "=", "self", ".", "q_net", "(", "query", ")", ".", "view", "(", "bsz", ",", "qlen", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ")", "\n", "head_k", "=", "self", ".", "k_net", "(", "key", ")", ".", "view", "(", "bsz", ",", "klen", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ")", "\n", "head_v", "=", "self", ".", "v_net", "(", "value", ")", ".", "view", "(", "bsz", ",", "vlen", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ")", "\n", "\n", "# multi head attention", "\n", "attn_vec", "=", "get_multi_head_attn_vec", "(", "\n", "head_q", "=", "head_q", ",", "head_k", "=", "head_k", ",", "head_v", "=", "head_v", ",", "\n", "attn_mask", "=", "attn_mask", ",", "act_layer", "=", "self", ".", "act", ",", "dropatt", "=", "self", ".", "dropatt", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "\n", "##### gate", "\n", "gate", "=", "F", ".", "sigmoid", "(", "self", ".", "g_net", "(", "torch", ".", "cat", "(", "[", "query", ",", "attn_out", "]", ",", "dim", "=", "2", ")", ")", ")", "\n", "attn_out", "=", "gate", "*", "query", "+", "(", "1", "-", "gate", ")", "*", "attn_out", "\n", "\n", "if", "self", ".", "post_lnorm", ":", "\n", "            ", "attn_out", "=", "self", ".", "o_layer_norm", "(", "attn_out", ")", "\n", "\n", "", "return", "attn_out", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.GatedMultiHeadAttn.increase_input_size": [[240, 290], ["utils.extend_dimensions", "utils.extend_dimensions", "torch.Linear", "torch.Linear", "torch.Linear", "utils.extend_dimensions", "utils.extend_dimensions", "utils.extend_dimensions", "utils.extend_dimensions", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.Linear.weight[].data.copy_", "torch.Linear.weight[].data.copy_", "torch.Linear.bias[].data.copy_", "torch.Linear.bias[].data.copy_", "utils.extend_dimensions", "utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_query_dim", ",", "new_key_dim", ",", "new_value_dim", ")", ":", "\n", "        ", "assert", "new_query_dim", ">=", "self", ".", "query_dim", "and", "new_key_dim", ">=", "self", ".", "key_dim", "and", "new_value_dim", ">=", "new_value_dim", "\n", "\n", "if", "new_query_dim", "!=", "self", ".", "query_dim", ":", "\n", "            ", "new_q_net", "=", "extend_dimensions", "(", "self", ".", "q_net", ",", "new_input_dim", "=", "new_query_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "q_net", "\n", "self", ".", "q_net", "=", "new_q_net", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "new_q_layer_norm", "=", "extend_dimensions", "(", "self", ".", "q_layer_norm", ",", "new_input_dim", "=", "new_query_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "q_layer_norm", "\n", "self", ".", "q_layer_norm", "=", "new_q_layer_norm", "\n", "\n", "", "new_o_net", "=", "extend_dimensions", "(", "self", ".", "o_net", ",", "new_output_dim", "=", "new_query_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "o_net", "\n", "self", ".", "o_net", "=", "new_o_net", "\n", "if", "self", ".", "post_lnorm", ":", "\n", "                ", "new_o_layer_norm", "=", "extend_dimensions", "(", "self", ".", "o_layer_norm", ",", "new_input_dim", "=", "new_query_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "o_layer_norm", "\n", "self", ".", "o_layer_norm", "=", "new_o_layer_norm", "\n", "\n", "", "new_g_net", "=", "nn", ".", "Linear", "(", "2", "*", "new_query_dim", ",", "new_query_dim", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "new_g_net", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "new_g_net", ".", "bias", ")", "\n", "new_g_net", ".", "weight", "[", "-", "self", ".", "query_dim", ":", ",", "new_query_dim", "-", "self", ".", "query_dim", ":", "new_query_dim", "]", ".", "data", ".", "copy_", "(", "self", ".", "g_net", ".", "weight", "[", ":", ",", ":", "self", ".", "query_dim", "]", ")", "\n", "new_g_net", ".", "weight", "[", "-", "self", ".", "query_dim", ":", ",", "-", "self", ".", "query_dim", ":", "]", ".", "data", ".", "copy_", "(", "self", ".", "g_net", ".", "weight", "[", ":", ",", "-", "self", ".", "query_dim", ":", "]", ")", "\n", "new_g_net", ".", "bias", "[", "new_query_dim", "-", "self", ".", "query_dim", ":", "new_query_dim", "]", ".", "data", ".", "copy_", "(", "self", ".", "g_net", ".", "bias", "[", ":", "self", ".", "query_dim", "]", ")", "\n", "new_g_net", ".", "bias", "[", "-", "self", ".", "query_dim", ":", "]", ".", "data", ".", "copy_", "(", "self", ".", "g_net", ".", "bias", "[", "-", "self", ".", "query_dim", ":", "]", ")", "\n", "del", "self", ".", "g_net", "\n", "self", ".", "g_net", "=", "new_g_net", "\n", "\n", "", "", "if", "new_key_dim", "!=", "self", ".", "key_dim", ":", "\n", "            ", "new_k_net", "=", "extend_dimensions", "(", "self", ".", "k_net", ",", "new_input_dim", "=", "new_key_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "k_net", "\n", "self", ".", "k_net", "=", "new_k_net", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "new_k_layer_norm", "=", "extend_dimensions", "(", "self", ".", "k_layer_norm", ",", "new_input_dim", "=", "new_key_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "k_layer_norm", "\n", "self", ".", "k_layer_norm", "=", "new_k_layer_norm", "\n", "", "", "if", "new_value_dim", "!=", "self", ".", "value_dim", ":", "\n", "            ", "new_v_net", "=", "extend_dimensions", "(", "self", ".", "v_net", ",", "new_input_dim", "=", "new_value_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "v_net", "\n", "self", ".", "v_net", "=", "new_v_net", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "new_v_layer_norm", "=", "extend_dimensions", "(", "self", ".", "v_layer_norm", ",", "new_input_dim", "=", "new_value_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "v_layer_norm", "\n", "self", ".", "v_layer_norm", "=", "new_v_layer_norm", "\n", "", "", "self", ".", "query_dim", "=", "new_query_dim", "\n", "self", ".", "key_dim", "=", "new_key_dim", "\n", "self", ".", "value_dim", "=", "new_value_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MultiHeadMemAttn.__init__": [[361, 373], ["torch.Module.__init__", "predictnet.MultiHeadAttn"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "query_dim", ",", "mem_dim", ",", "hidden_dim", ",", "num_heads", ",", "\n", "mem_len", ",", "mem_init", "=", "\"mean\"", ",", "m_layer", "=", "None", ",", "\n", "dropatt", "=", "0.0", ",", "act_func", "=", "\"softmax\"", ",", "add_zero_attn", "=", "False", ",", "\n", "pre_lnorm", "=", "False", ",", "post_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadMemAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "mem_init", "=", "mem_init", "\n", "self", ".", "m_layer", "=", "m_layer", "\n", "\n", "self", ".", "attn", "=", "MultiHeadAttn", "(", "query_dim", ",", "mem_dim", ",", "mem_dim", ",", "hidden_dim", ",", "num_heads", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "act_func", ",", "add_zero_attn", "=", "add_zero_attn", ",", "\n", "pre_lnorm", "=", "pre_lnorm", ",", "post_lnorm", "=", "post_lnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MultiHeadMemAttn.forward": [[374, 405], ["keyvalue.size", "predictnet.MultiHeadMemAttn.attn", "attn_mask.sum", "list", "list", "utils.gather_indices_by_lens", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predictnet.MultiHeadMemAttn.mem_init.endswith", "predictnet.MultiHeadMemAttn.mem_init.endswith", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "predictnet.init_mem", "predictnet.MultiHeadMemAttn.mem_init.endswith", "predictnet.init_mem", "predictnet.MultiHeadMemAttn.mem_init.endswith", "predictnet.init_mem", "predictnet.init_mem", "predictnet.init_mem", "predictnet.init_mem"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.gather_indices_by_lens", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem"], ["", "def", "forward", "(", "self", ",", "query", ",", "keyvalue", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "bsz", "=", "keyvalue", ".", "size", "(", "0", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "keyvalue_len", "=", "attn_mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "mem", "=", "list", "(", ")", "\n", "mem_mask", "=", "list", "(", ")", "\n", "for", "idx", "in", "gather_indices_by_lens", "(", "keyvalue_len", ")", ":", "\n", "                ", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "keyvalue", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "attn_mask", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "attn", "=", "self", ".", "m_layer", ")", "\n", "", "elif", "self", ".", "mem_init", ".", "endswith", "(", "\"lstm\"", ")", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "keyvalue", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "attn_mask", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "lstm", "=", "self", ".", "m_layer", ")", "\n", "", "else", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "keyvalue", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "attn_mask", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "post_proj", "=", "self", ".", "m_layer", ")", "\n", "", "mem", ".", "append", "(", "m", ")", "\n", "mem_mask", ".", "append", "(", "mk", ")", "\n", "", "mem", "=", "torch", ".", "cat", "(", "mem", ",", "dim", "=", "0", ")", "\n", "mem_mask", "=", "torch", ".", "cat", "(", "mem_mask", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "attn", "=", "self", ".", "m_layer", ")", "\n", "", "elif", "self", ".", "mem_init", ".", "endswith", "(", "\"lstm\"", ")", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "lstm", "=", "self", ".", "m_layer", ")", "\n", "", "else", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "post_proj", "=", "self", ".", "m_layer", ")", "\n", "", "", "return", "self", ".", "attn", "(", "query", ",", "mem", ",", "mem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MultiHeadMemAttn.increase_input_size": [[406, 414], ["predictnet.MultiHeadMemAttn.mem_init.endswith", "predictnet.MultiHeadMemAttn.attn.increase_input_size", "predictnet.MultiHeadMemAttn.m_layer.increase_input_size", "utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_query_dim", ",", "new_key_dim", ",", "new_value_dim", ",", "new_mem_dim", ")", ":", "\n", "        ", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "            ", "self", ".", "m_layer", ".", "increase_input_size", "(", "new_query_dim", ",", "new_key_dim", ",", "new_value_dim", ")", "\n", "", "else", ":", "\n", "            ", "new_m_layer", "=", "extend_dimensions", "(", "self", ".", "m_layer", ",", "new_input_dim", "=", "new_key_dim", ",", "new_output_dim", "=", "new_mem_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "m_layer", "\n", "self", ".", "m_layer", "=", "new_m_layer", "\n", "", "self", ".", "attn", ".", "increase_input_size", "(", "new_query_dim", ",", "new_mem_dim", ",", "new_mem_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.GatedMultiHeadMemAttn.__init__": [[417, 429], ["torch.Module.__init__", "predictnet.GatedMultiHeadAttn"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "query_dim", ",", "mem_dim", ",", "hidden_dim", ",", "num_heads", ",", "\n", "mem_len", ",", "mem_init", "=", "\"mean\"", ",", "m_layer", "=", "None", ",", "\n", "dropatt", "=", "0.0", ",", "act_func", "=", "\"softmax\"", ",", "add_zero_attn", "=", "False", ",", "\n", "pre_lnorm", "=", "False", ",", "post_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "GatedMultiHeadMemAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "mem_init", "=", "mem_init", "\n", "self", ".", "m_layer", "=", "m_layer", "\n", "\n", "self", ".", "attn", "=", "GatedMultiHeadAttn", "(", "query_dim", ",", "mem_dim", ",", "mem_dim", ",", "hidden_dim", ",", "num_heads", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "act_func", ",", "add_zero_attn", "=", "add_zero_attn", ",", "\n", "pre_lnorm", "=", "pre_lnorm", ",", "post_lnorm", "=", "post_lnorm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.GatedMultiHeadMemAttn.forward": [[430, 461], ["keyvalue.size", "predictnet.GatedMultiHeadMemAttn.attn", "attn_mask.sum", "list", "list", "utils.gather_indices_by_lens", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predictnet.GatedMultiHeadMemAttn.mem_init.endswith", "predictnet.GatedMultiHeadMemAttn.mem_init.endswith", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "predictnet.init_mem", "predictnet.GatedMultiHeadMemAttn.mem_init.endswith", "predictnet.init_mem", "predictnet.GatedMultiHeadMemAttn.mem_init.endswith", "predictnet.init_mem", "predictnet.init_mem", "predictnet.init_mem", "predictnet.init_mem"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.gather_indices_by_lens", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem"], ["", "def", "forward", "(", "self", ",", "query", ",", "keyvalue", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "bsz", "=", "keyvalue", ".", "size", "(", "0", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "keyvalue_len", "=", "attn_mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "mem", "=", "list", "(", ")", "\n", "mem_mask", "=", "list", "(", ")", "\n", "for", "idx", "in", "gather_indices_by_lens", "(", "keyvalue_len", ")", ":", "\n", "                ", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "keyvalue", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "attn_mask", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "attn", "=", "self", ".", "m_layer", ")", "\n", "", "elif", "self", ".", "mem_init", ".", "endswith", "(", "\"lstm\"", ")", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "keyvalue", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "attn_mask", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "lstm", "=", "self", ".", "m_layer", ")", "\n", "", "else", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "keyvalue", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "attn_mask", "[", "idx", ",", ":", "keyvalue_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "post_proj", "=", "self", ".", "m_layer", ")", "\n", "", "mem", ".", "append", "(", "m", ")", "\n", "mem_mask", ".", "append", "(", "mk", ")", "\n", "", "mem", "=", "torch", ".", "cat", "(", "mem", ",", "dim", "=", "0", ")", "\n", "mem_mask", "=", "torch", ".", "cat", "(", "mem_mask", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "attn", "=", "self", ".", "m_layer", ")", "\n", "", "elif", "self", ".", "mem_init", ".", "endswith", "(", "\"lstm\"", ")", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "lstm", "=", "self", ".", "m_layer", ")", "\n", "", "else", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "post_proj", "=", "self", ".", "m_layer", ")", "\n", "", "", "return", "self", ".", "attn", "(", "query", ",", "mem", ",", "mem", ",", "attn_mask", "=", "mem_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.GatedMultiHeadMemAttn.increase_input_size": [[462, 470], ["predictnet.GatedMultiHeadMemAttn.mem_init.endswith", "predictnet.GatedMultiHeadMemAttn.attn.increase_input_size", "predictnet.GatedMultiHeadMemAttn.m_layer.increase_input_size", "utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_query_dim", ",", "new_key_dim", ",", "new_value_dim", ",", "new_mem_dim", ")", ":", "\n", "        ", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "            ", "self", ".", "m_layer", ".", "increase_input_size", "(", "new_query_dim", ",", "new_key_dim", ",", "new_value_dim", ")", "\n", "", "else", ":", "\n", "            ", "new_m_layer", "=", "extend_dimensions", "(", "self", ".", "m_layer", ",", "new_input_dim", "=", "new_key_dim", ",", "new_output_dim", "=", "new_mem_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "m_layer", "\n", "self", ".", "m_layer", "=", "new_m_layer", "\n", "", "self", ".", "attn", ".", "increase_input_size", "(", "new_query_dim", ",", "new_mem_dim", ",", "new_mem_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BasePoolPredictNet.__init__": [[473, 494], ["torch.Module.__init__", "utils.map_activation_str_to_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasePoolPredictNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pattern_dim", "=", "pattern_dim", "\n", "self", ".", "graph_dim", "=", "graph_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "act", "=", "map_activation_str_to_layer", "(", "act_func", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "p_layer", "=", "nn", ".", "Linear", "(", "pattern_dim", ",", "hidden_dim", ")", "\n", "self", ".", "g_layer", "=", "nn", ".", "Linear", "(", "graph_dim", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "pred_layer1", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "*", "4", "+", "4", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "pred_layer2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "+", "4", ",", "1", ")", "\n", "\n", "# init", "\n", "for", "layer", "in", "[", "self", ".", "p_layer", ",", "self", ".", "g_layer", ",", "self", ".", "pred_layer1", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "0.0", ",", "1", "/", "(", "self", ".", "hidden_dim", "**", "0.5", ")", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "", "for", "layer", "in", "[", "self", ".", "pred_layer2", "]", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BasePoolPredictNet.forward": [[495, 497], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BasePoolPredictNet.increase_input_size": [[498, 510], ["utils.extend_dimensions", "utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_pattern_dim", ",", "new_graph_dim", ")", ":", "\n", "        ", "assert", "new_pattern_dim", ">=", "self", ".", "pattern_dim", "and", "new_graph_dim", ">=", "self", ".", "graph_dim", "\n", "if", "new_pattern_dim", "!=", "self", ".", "pattern_dim", ":", "\n", "            ", "new_p_layer", "=", "extend_dimensions", "(", "self", ".", "p_layer", ",", "new_input_dim", "=", "new_pattern_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "p_layer", "\n", "self", ".", "p_layer", "=", "new_p_layer", "\n", "", "if", "new_graph_dim", "!=", "self", ".", "graph_dim", ":", "\n", "            ", "new_g_layer", "=", "extend_dimensions", "(", "self", ".", "g_layer", ",", "new_input_dim", "=", "new_graph_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "g_layer", "\n", "self", ".", "g_layer", "=", "new_g_layer", "\n", "", "self", ".", "pattern_dim", "=", "new_pattern_dim", "\n", "self", ".", "graph_dim", "=", "new_graph_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MeanPredictNet.__init__": [[513, 515], ["predictnet.BasePoolPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "MeanPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MeanPredictNet.forward": [[516, 532], ["pattern_len.size", "predictnet.MeanPredictNet.drop", "predictnet.MeanPredictNet.drop", "p.squeeze.squeeze.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "predictnet.MeanPredictNet.pred_layer1", "predictnet.MeanPredictNet.act", "predictnet.MeanPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "predictnet.MeanPredictNet.p_layer", "predictnet.MeanPredictNet.g_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "\n", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "mean", "(", "pattern", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "graph", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "mean", "(", "g", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.SumPredictNet.__init__": [[535, 537], ["predictnet.BasePoolPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "SumPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.SumPredictNet.forward": [[538, 554], ["pattern_len.size", "predictnet.SumPredictNet.drop", "predictnet.SumPredictNet.drop", "p.squeeze.squeeze.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "predictnet.SumPredictNet.pred_layer1", "predictnet.SumPredictNet.act", "predictnet.SumPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "predictnet.SumPredictNet.p_layer", "predictnet.SumPredictNet.g_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "\n", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "sum", "(", "pattern", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "graph", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "sum", "(", "g", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MaxPredictNet.__init__": [[557, 559], ["predictnet.BasePoolPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "MaxPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MaxPredictNet.forward": [[560, 576], ["pattern_len.size", "predictnet.MaxPredictNet.drop", "predictnet.MaxPredictNet.drop", "p.squeeze.squeeze.squeeze", "predictnet.MaxPredictNet.pred_layer1", "predictnet.MaxPredictNet.act", "predictnet.MaxPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "predictnet.MaxPredictNet.p_layer", "predictnet.MaxPredictNet.g_layer", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "\n", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "max", "(", "pattern", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "graph", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "max", "(", "g", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BaseAttnPredictNet.__init__": [[579, 613], ["torch.Module.__init__", "utils.map_activation_str_to_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "predictnet.GatedMultiHeadAttn", "predictnet.GatedMultiHeadAttn", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "num_heads", "=", "4", ",", "recurrent_steps", "=", "1", ",", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BaseAttnPredictNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pattern_dim", "=", "pattern_dim", "\n", "self", ".", "grpah_dim", "=", "graph_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "recurrent_steps", "=", "recurrent_steps", "\n", "\n", "self", ".", "act", "=", "map_activation_str_to_layer", "(", "act_func", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "p_layer", "=", "nn", ".", "Linear", "(", "pattern_dim", ",", "hidden_dim", ")", "\n", "self", ".", "g_layer", "=", "nn", ".", "Linear", "(", "graph_dim", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "p_attn", "=", "GatedMultiHeadAttn", "(", "\n", "query_dim", "=", "graph_dim", ",", "key_dim", "=", "pattern_dim", ",", "value_dim", "=", "pattern_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "num_heads", "=", "num_heads", ",", "\n", "pre_lnorm", "=", "True", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "\"softmax\"", ")", "\n", "self", ".", "g_attn", "=", "GatedMultiHeadAttn", "(", "\n", "query_dim", "=", "graph_dim", ",", "key_dim", "=", "graph_dim", ",", "value_dim", "=", "graph_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "num_heads", "=", "num_heads", ",", "\n", "pre_lnorm", "=", "True", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "\"softmax\"", ")", "\n", "\n", "self", ".", "pred_layer1", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "*", "4", "+", "4", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "pred_layer2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "+", "4", ",", "1", ")", "\n", "\n", "# init", "\n", "for", "layer", "in", "[", "self", ".", "p_layer", ",", "self", ".", "g_layer", ",", "self", ".", "pred_layer1", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "0.0", ",", "1", "/", "(", "self", ".", "hidden_dim", "**", "0.5", ")", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "", "for", "layer", "in", "[", "self", ".", "pred_layer2", "]", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BaseAttnPredictNet.forward": [[614, 616], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BaseAttnPredictNet.increase_input_size": [[617, 632], ["predictnet.BaseAttnPredictNet.p_attn.increase_input_size", "predictnet.BaseAttnPredictNet.g_attn.increase_input_size", "utils.extend_dimensions", "utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_pattern_dim", ",", "new_graph_dim", ")", ":", "\n", "        ", "assert", "new_pattern_dim", ">=", "self", ".", "pattern_dim", "and", "new_graph_dim", ">=", "self", ".", "graph_dim", "\n", "if", "new_pattern_dim", "!=", "self", ".", "pattern_dim", ":", "\n", "            ", "new_p_layer", "=", "extend_dimensions", "(", "self", ".", "p_layer", ",", "new_input_dim", "=", "new_pattern_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "p_layer", "\n", "self", ".", "p_layer", "=", "new_p_layer", "\n", "", "if", "new_graph_dim", "!=", "self", ".", "graph_dim", ":", "\n", "            ", "new_g_layer", "=", "extend_dimensions", "(", "self", ".", "g_layer", ",", "new_input_dim", "=", "new_graph_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "g_layer", "\n", "self", ".", "g_layer", "=", "new_g_layer", "\n", "", "self", ".", "p_attn", ".", "increase_input_size", "(", "new_graph_dim", ",", "new_pattern_dim", ",", "new_pattern_dim", ")", "\n", "self", ".", "g_attn", ".", "increase_input_size", "(", "new_graph_dim", ",", "new_graph_dim", ",", "new_graph_dim", ")", "\n", "\n", "self", ".", "pattern_dim", "=", "new_pattern_dim", "\n", "self", ".", "graph_dim", "=", "new_graph_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MeanAttnPredictNet.__init__": [[635, 639], ["predictnet.BaseAttnPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "num_heads", "=", "4", ",", "recurrent_steps", "=", "1", ",", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "MeanAttnPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "\n", "num_heads", ",", "recurrent_steps", ",", "dropout", ",", "dropatt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MeanAttnPredictNet.forward": [[640, 663], ["pattern_len.size", "range", "predictnet.MeanAttnPredictNet.drop", "predictnet.MeanAttnPredictNet.drop", "p.squeeze.squeeze.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "predictnet.MeanAttnPredictNet.pred_layer1", "predictnet.MeanAttnPredictNet.act", "predictnet.MeanAttnPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "utils.batch_convert_len_to_mask", "utils.batch_convert_len_to_mask", "predictnet.MeanAttnPredictNet.p_attn", "predictnet.MeanAttnPredictNet.g_attn", "predictnet.MeanAttnPredictNet.p_layer", "predictnet.MeanAttnPredictNet.g_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern_len.max", "graph_len.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "p_mask", "=", "batch_convert_len_to_mask", "(", "pattern_len", ")", "if", "p_len", "==", "pattern_len", ".", "max", "(", ")", "else", "None", "\n", "g_mask", "=", "batch_convert_len_to_mask", "(", "graph_len", ")", "if", "g_len", "==", "graph_len", ".", "max", "(", ")", "else", "None", "\n", "\n", "p", ",", "g", "=", "pattern", ",", "graph", "\n", "for", "i", "in", "range", "(", "self", ".", "recurrent_steps", ")", ":", "\n", "            ", "g", "=", "self", ".", "p_attn", "(", "g", ",", "p", ",", "p", ",", "p_mask", ")", "\n", "g", "=", "self", ".", "g_attn", "(", "g", ",", "g", ",", "g", ",", "g_mask", ")", "\n", "\n", "", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "mean", "(", "p", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "g", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "mean", "(", "g", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.SumAttnPredictNet.__init__": [[665, 669], ["predictnet.BaseAttnPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "num_heads", "=", "4", ",", "recurrent_steps", "=", "1", ",", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "SumAttnPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "\n", "num_heads", ",", "recurrent_steps", ",", "dropout", ",", "dropatt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.SumAttnPredictNet.forward": [[670, 693], ["pattern_len.size", "range", "predictnet.SumAttnPredictNet.drop", "predictnet.SumAttnPredictNet.drop", "p.squeeze.squeeze.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "predictnet.SumAttnPredictNet.pred_layer1", "predictnet.SumAttnPredictNet.act", "predictnet.SumAttnPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "utils.batch_convert_len_to_mask", "utils.batch_convert_len_to_mask", "predictnet.SumAttnPredictNet.p_attn", "predictnet.SumAttnPredictNet.g_attn", "predictnet.SumAttnPredictNet.p_layer", "predictnet.SumAttnPredictNet.g_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern_len.max", "graph_len.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "p_mask", "=", "batch_convert_len_to_mask", "(", "pattern_len", ")", "if", "p_len", "==", "pattern_len", ".", "max", "(", ")", "else", "None", "\n", "g_mask", "=", "batch_convert_len_to_mask", "(", "graph_len", ")", "if", "g_len", "==", "graph_len", ".", "max", "(", ")", "else", "None", "\n", "\n", "p", ",", "g", "=", "pattern", ",", "graph", "\n", "for", "i", "in", "range", "(", "self", ".", "recurrent_steps", ")", ":", "\n", "            ", "g", "=", "self", ".", "p_attn", "(", "g", ",", "p", ",", "p", ",", "p_mask", ")", "\n", "g", "=", "self", ".", "g_attn", "(", "g", ",", "g", ",", "g", ",", "g_mask", ")", "\n", "\n", "", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "sum", "(", "p", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "g", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "sum", "(", "g", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MaxAttnPredictNet.__init__": [[695, 699], ["predictnet.BaseAttnPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "num_heads", "=", "4", ",", "recurrent_steps", "=", "1", ",", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "MaxAttnPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "\n", "num_heads", ",", "recurrent_steps", ",", "dropout", ",", "dropatt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MaxAttnPredictNet.forward": [[700, 723], ["pattern_len.size", "range", "predictnet.MaxAttnPredictNet.drop", "predictnet.MaxAttnPredictNet.drop", "p.squeeze.squeeze.squeeze", "predictnet.MaxAttnPredictNet.pred_layer1", "predictnet.MaxAttnPredictNet.act", "predictnet.MaxAttnPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "utils.batch_convert_len_to_mask", "utils.batch_convert_len_to_mask", "predictnet.MaxAttnPredictNet.p_attn", "predictnet.MaxAttnPredictNet.g_attn", "predictnet.MaxAttnPredictNet.p_layer", "predictnet.MaxAttnPredictNet.g_layer", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern_len.max", "graph_len.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "p_mask", "=", "batch_convert_len_to_mask", "(", "pattern_len", ")", "if", "p_len", "==", "pattern_len", ".", "max", "(", ")", "else", "None", "\n", "g_mask", "=", "batch_convert_len_to_mask", "(", "graph_len", ")", "if", "g_len", "==", "graph_len", ".", "max", "(", ")", "else", "None", "\n", "\n", "p", ",", "g", "=", "pattern", ",", "graph", "\n", "for", "i", "in", "range", "(", "self", ".", "recurrent_steps", ")", ":", "\n", "            ", "g", "=", "self", ".", "p_attn", "(", "g", ",", "p", ",", "p", ",", "p_mask", ")", "\n", "g", "=", "self", ".", "g_attn", "(", "g", ",", "g", ",", "g", ",", "g_mask", ")", "\n", "\n", "", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "max", "(", "p", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "g", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "max", "(", "g", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BaseMemAttnPredictNet.__init__": [[726, 764], ["torch.Module.__init__", "utils.map_activation_str_to_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "predictnet.GatedMultiHeadMemAttn", "predictnet.GatedMultiHeadMemAttn", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "recurrent_steps", "=", "1", ",", "num_heads", "=", "4", ",", "mem_len", "=", "4", ",", "mem_init", "=", "\"mean\"", ",", "\n", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BaseMemAttnPredictNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pattern_dim", "=", "pattern_dim", "\n", "self", ".", "graph_dim", "=", "graph_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "mem_init", "=", "mem_init", "\n", "self", ".", "recurrent_steps", "=", "recurrent_steps", "\n", "\n", "self", ".", "act", "=", "map_activation_str_to_layer", "(", "act_func", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "p_layer", "=", "nn", ".", "Linear", "(", "pattern_dim", ",", "hidden_dim", ")", "\n", "self", ".", "g_layer", "=", "nn", ".", "Linear", "(", "graph_dim", ",", "hidden_dim", ")", "\n", "self", ".", "p_attn", "=", "GatedMultiHeadMemAttn", "(", "\n", "query_dim", "=", "graph_dim", ",", "mem_dim", "=", "hidden_dim", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "m_layer", "=", "self", ".", "p_layer", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "num_heads", "=", "num_heads", ",", "\n", "pre_lnorm", "=", "True", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "\"softmax\"", ")", "\n", "self", ".", "g_attn", "=", "GatedMultiHeadMemAttn", "(", "\n", "query_dim", "=", "graph_dim", ",", "mem_dim", "=", "hidden_dim", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "m_layer", "=", "self", ".", "g_layer", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "num_heads", "=", "num_heads", ",", "\n", "pre_lnorm", "=", "True", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "\"softmax\"", ")", "\n", "\n", "self", ".", "pred_layer1", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "*", "4", "+", "4", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "pred_layer2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "+", "4", ",", "1", ")", "\n", "\n", "# init", "\n", "for", "layer", "in", "[", "self", ".", "p_layer", ",", "self", ".", "g_layer", ",", "self", ".", "pred_layer1", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "0.0", ",", "1", "/", "(", "self", ".", "hidden_dim", "**", "0.5", ")", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "", "for", "layer", "in", "[", "self", ".", "pred_layer2", "]", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BaseMemAttnPredictNet.forward": [[765, 767], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.BaseMemAttnPredictNet.increase_input_size": [[768, 784], ["predictnet.BaseMemAttnPredictNet.p_attn.increase_input_size", "predictnet.BaseMemAttnPredictNet.g_attn.increase_input_size", "utils.extend_dimensions", "utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_pattern_dim", ",", "new_graph_dim", ")", ":", "\n", "        ", "assert", "new_pattern_dim", ">=", "self", ".", "pattern_dim", "and", "new_graph_dim", ">=", "self", ".", "graph_dim", "\n", "if", "new_pattern_dim", "!=", "self", ".", "pattern_dim", ":", "\n", "            ", "new_p_layer", "=", "extend_dimensions", "(", "self", ".", "p_layer", ",", "new_input_dim", "=", "new_pattern_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "p_layer", "\n", "self", ".", "p_layer", "=", "new_p_layer", "\n", "", "if", "new_graph_dim", "!=", "self", ".", "graph_dim", ":", "\n", "            ", "new_g_layer", "=", "extend_dimensions", "(", "self", ".", "g_layer", ",", "new_input_dim", "=", "new_graph_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "g_layer", "\n", "self", ".", "g_layer", "=", "new_g_layer", "\n", "\n", "", "self", ".", "p_attn", ".", "increase_input_size", "(", "new_graph_dim", ",", "new_pattern_dim", ",", "new_pattern_dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "g_attn", ".", "increase_input_size", "(", "new_graph_dim", ",", "new_graph_dim", ",", "new_graph_dim", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "self", ".", "pattern_dim", "=", "new_pattern_dim", "\n", "self", ".", "graph_dim", "=", "new_graph_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MeanMemAttnPredictNet.__init__": [[787, 792], ["predictnet.BaseMemAttnPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "recurrent_steps", "=", "1", ",", "num_heads", "=", "4", ",", "mem_len", "=", "4", ",", "mem_init", "=", "\"mean\"", ",", "\n", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "MeanMemAttnPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "\n", "recurrent_steps", ",", "num_heads", ",", "mem_len", ",", "mem_init", ",", "dropout", ",", "dropatt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MeanMemAttnPredictNet.forward": [[793, 816], ["pattern_len.size", "range", "predictnet.MeanMemAttnPredictNet.drop", "predictnet.MeanMemAttnPredictNet.drop", "p.squeeze.squeeze.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "predictnet.MeanMemAttnPredictNet.pred_layer1", "predictnet.MeanMemAttnPredictNet.act", "predictnet.MeanMemAttnPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "utils.batch_convert_len_to_mask", "utils.batch_convert_len_to_mask", "predictnet.MeanMemAttnPredictNet.p_attn", "predictnet.MeanMemAttnPredictNet.g_attn", "predictnet.MeanMemAttnPredictNet.p_layer", "predictnet.MeanMemAttnPredictNet.g_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern_len.max", "graph_len.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "p_mask", "=", "batch_convert_len_to_mask", "(", "pattern_len", ")", "if", "p_len", "==", "pattern_len", ".", "max", "(", ")", "else", "None", "\n", "g_mask", "=", "batch_convert_len_to_mask", "(", "graph_len", ")", "if", "g_len", "==", "graph_len", ".", "max", "(", ")", "else", "None", "\n", "\n", "p", ",", "g", "=", "pattern", ",", "graph", "\n", "for", "i", "in", "range", "(", "self", ".", "recurrent_steps", ")", ":", "\n", "            ", "g", "=", "self", ".", "p_attn", "(", "g", ",", "p", ",", "p_mask", ")", "\n", "g", "=", "self", ".", "g_attn", "(", "g", ",", "g", ",", "g_mask", ")", "\n", "\n", "", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "mean", "(", "p", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "g", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "mean", "(", "g", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.SumMemAttnPredictNet.__init__": [[818, 823], ["predictnet.BaseMemAttnPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "recurrent_steps", "=", "1", ",", "num_heads", "=", "4", ",", "mem_len", "=", "4", ",", "mem_init", "=", "\"sum\"", ",", "\n", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "SumMemAttnPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "\n", "recurrent_steps", ",", "num_heads", ",", "mem_len", ",", "mem_init", ",", "dropout", ",", "dropatt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.SumMemAttnPredictNet.forward": [[824, 847], ["pattern_len.size", "range", "predictnet.SumMemAttnPredictNet.drop", "predictnet.SumMemAttnPredictNet.drop", "p.squeeze.squeeze.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "predictnet.SumMemAttnPredictNet.pred_layer1", "predictnet.SumMemAttnPredictNet.act", "predictnet.SumMemAttnPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "utils.batch_convert_len_to_mask", "utils.batch_convert_len_to_mask", "predictnet.SumMemAttnPredictNet.p_attn", "predictnet.SumMemAttnPredictNet.g_attn", "predictnet.SumMemAttnPredictNet.p_layer", "predictnet.SumMemAttnPredictNet.g_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern_len.max", "graph_len.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "p_mask", "=", "batch_convert_len_to_mask", "(", "pattern_len", ")", "if", "p_len", "==", "pattern_len", ".", "max", "(", ")", "else", "None", "\n", "g_mask", "=", "batch_convert_len_to_mask", "(", "graph_len", ")", "if", "g_len", "==", "graph_len", ".", "max", "(", ")", "else", "None", "\n", "\n", "p", ",", "g", "=", "pattern", ",", "graph", "\n", "for", "i", "in", "range", "(", "self", ".", "recurrent_steps", ")", ":", "\n", "            ", "g", "=", "self", ".", "p_attn", "(", "g", ",", "p", ",", "p_mask", ")", "\n", "g", "=", "self", ".", "g_attn", "(", "g", ",", "g", ",", "g_mask", ")", "\n", "\n", "", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "sum", "(", "p", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "g", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "sum", "(", "g", ",", "dim", "=", "1", ")", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MaxMemAttnPredictNet.__init__": [[850, 855], ["predictnet.BaseMemAttnPredictNet.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "recurrent_steps", "=", "1", ",", "num_heads", "=", "4", ",", "mem_len", "=", "4", ",", "mem_init", "=", "\"max\"", ",", "\n", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "MaxMemAttnPredictNet", ",", "self", ")", ".", "__init__", "(", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", ",", "\n", "recurrent_steps", ",", "num_heads", ",", "mem_len", ",", "mem_init", ",", "dropout", ",", "dropatt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.MaxMemAttnPredictNet.forward": [[856, 879], ["pattern_len.size", "range", "predictnet.MaxMemAttnPredictNet.drop", "predictnet.MaxMemAttnPredictNet.drop", "p.squeeze.squeeze.squeeze", "predictnet.MaxMemAttnPredictNet.pred_layer1", "predictnet.MaxMemAttnPredictNet.act", "predictnet.MaxMemAttnPredictNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "utils.batch_convert_len_to_mask", "utils.batch_convert_len_to_mask", "predictnet.MaxMemAttnPredictNet.p_attn", "predictnet.MaxMemAttnPredictNet.g_attn", "predictnet.MaxMemAttnPredictNet.p_layer", "predictnet.MaxMemAttnPredictNet.g_layer", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern_len.max", "graph_len.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "p_mask", "=", "batch_convert_len_to_mask", "(", "pattern_len", ")", "if", "p_len", "==", "pattern_len", ".", "max", "(", ")", "else", "None", "\n", "g_mask", "=", "batch_convert_len_to_mask", "(", "graph_len", ")", "if", "g_len", "==", "graph_len", ".", "max", "(", ")", "else", "None", "\n", "\n", "p", ",", "g", "=", "pattern", ",", "graph", "\n", "for", "i", "in", "range", "(", "self", ".", "recurrent_steps", ")", ":", "\n", "            ", "g", "=", "self", ".", "p_attn", "(", "g", ",", "p", ",", "p_mask", ")", "\n", "g", "=", "self", ".", "g_attn", "(", "g", ",", "g", ",", "g_mask", ")", "\n", "\n", "", "p", "=", "self", ".", "drop", "(", "self", ".", "p_layer", "(", "torch", ".", "max", "(", "p", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", ")", "\n", "g", "=", "self", ".", "drop", "(", "self", ".", "g_layer", "(", "g", ")", ")", "\n", "\n", "p", "=", "p", ".", "squeeze", "(", "1", ")", "\n", "g", "=", "torch", ".", "max", "(", "g", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "p", ",", "g", ",", "g", "-", "p", ",", "g", "*", "p", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.DIAMNet.__init__": [[882, 947], ["torch.Module.__init__", "utils.map_activation_str_to_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "mem_init.endswith", "predictnet.GatedMultiHeadAttn", "predictnet.GatedMultiHeadAttn", "predictnet.GatedMultiHeadAttn", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "predictnet.MultiHeadAttn", "mem_init.endswith", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "isinstance", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "getattr", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "getattr", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["    ", "def", "__init__", "(", "self", ",", "pattern_dim", ",", "graph_dim", ",", "hidden_dim", ",", "act_func", "=", "\"relu\"", ",", "\n", "recurrent_steps", "=", "1", ",", "num_heads", "=", "4", ",", "mem_len", "=", "4", ",", "mem_init", "=", "\"mean\"", ",", "\n", "dropout", "=", "0.0", ",", "dropatt", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "DIAMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pattern_dim", "=", "pattern_dim", "\n", "self", ".", "graph_dim", "=", "graph_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "mem_init", "=", "mem_init", "\n", "self", ".", "recurrent_steps", "=", "recurrent_steps", "\n", "\n", "self", ".", "act", "=", "map_activation_str_to_layer", "(", "act_func", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "p_layer", "=", "nn", ".", "Linear", "(", "pattern_dim", ",", "hidden_dim", ")", "\n", "self", ".", "g_layer", "=", "nn", ".", "Linear", "(", "graph_dim", ",", "hidden_dim", ")", "\n", "if", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "            ", "self", ".", "m_layer", "=", "MultiHeadAttn", "(", "\n", "query_dim", "=", "hidden_dim", ",", "key_dim", "=", "graph_dim", ",", "value_dim", "=", "graph_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "num_heads", "=", "num_heads", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "\"softmax\"", ")", "\n", "", "elif", "mem_init", ".", "endswith", "(", "\"lstm\"", ")", ":", "\n", "            ", "self", ".", "m_layer", "=", "nn", ".", "LSTM", "(", "graph_dim", ",", "hidden_dim", ",", "batch_first", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "m_layer", "=", "self", ".", "g_layer", "\n", "", "self", ".", "p_attn", "=", "GatedMultiHeadAttn", "(", "\n", "query_dim", "=", "hidden_dim", ",", "key_dim", "=", "pattern_dim", ",", "value_dim", "=", "pattern_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "num_heads", "=", "num_heads", ",", "\n", "pre_lnorm", "=", "True", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "\"softmax\"", ")", "\n", "self", ".", "g_attn", "=", "GatedMultiHeadAttn", "(", "\n", "query_dim", "=", "hidden_dim", ",", "key_dim", "=", "graph_dim", ",", "value_dim", "=", "graph_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "num_heads", "=", "num_heads", ",", "\n", "pre_lnorm", "=", "True", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "\"softmax\"", ")", "\n", "self", ".", "m_attn", "=", "GatedMultiHeadAttn", "(", "\n", "query_dim", "=", "hidden_dim", ",", "key_dim", "=", "hidden_dim", ",", "value_dim", "=", "hidden_dim", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "num_heads", "=", "num_heads", ",", "\n", "pre_lnorm", "=", "True", ",", "\n", "dropatt", "=", "dropatt", ",", "act_func", "=", "\"softmax\"", ")", "\n", "\n", "self", ".", "pred_layer1", "=", "nn", ".", "Linear", "(", "self", ".", "mem_len", "*", "self", ".", "hidden_dim", "+", "4", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "pred_layer2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", "+", "4", ",", "1", ")", "\n", "\n", "# init", "\n", "scale", "=", "1", "/", "(", "self", ".", "hidden_dim", "**", "0.5", ")", "\n", "for", "layer", "in", "[", "self", ".", "p_layer", ",", "self", ".", "g_layer", ",", "self", ".", "pred_layer1", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "0.0", ",", "scale", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "", "for", "layer", "in", "[", "self", ".", "pred_layer2", "]", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "m_layer", ",", "nn", ".", "LSTM", ")", ":", "\n", "            ", "for", "layer_weights", "in", "self", ".", "m_layer", ".", "_all_weights", ":", "\n", "                ", "for", "w", "in", "layer_weights", ":", "\n", "                    ", "if", "\"weight\"", "in", "w", ":", "\n", "                        ", "weight", "=", "getattr", "(", "self", ".", "m_layer", ",", "w", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "weight", ")", "\n", "", "elif", "\"bias\"", "in", "w", ":", "\n", "                        ", "bias", "=", "getattr", "(", "self", ".", "m_layer", ",", "w", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                            ", "nn", ".", "init", ".", "zeros_", "(", "bias", ")", "\n", "", "", "", "", "", "elif", "isinstance", "(", "self", ".", "m_layer", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "0.0", ",", "scale", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "layer", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.DIAMNet.forward": [[948, 994], ["pattern_len.size", "range", "predictnet.DIAMNet.view", "predictnet.DIAMNet.pred_layer1", "predictnet.DIAMNet.act", "predictnet.DIAMNet.pred_layer2", "pattern.size", "graph.size", "pattern_len.float", "graph_len.float", "utils.batch_convert_len_to_mask", "utils.batch_convert_len_to_mask", "list", "list", "utils.gather_indices_by_lens", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predictnet.DIAMNet.mem_init.endswith", "predictnet.DIAMNet.p_attn", "predictnet.DIAMNet.g_attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pattern_len.max", "graph_len.max", "predictnet.DIAMNet.mem_init.endswith", "predictnet.DIAMNet.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "predictnet.init_mem", "predictnet.DIAMNet.mem_init.endswith", "predictnet.init_mem", "predictnet.DIAMNet.mem_init.endswith", "predictnet.init_mem", "predictnet.init_mem", "predictnet.init_mem", "predictnet.init_mem"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.gather_indices_by_lens", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "p_len", ",", "g_len", "=", "pattern", ".", "size", "(", "1", ")", ",", "graph", ".", "size", "(", "1", ")", "\n", "plf", ",", "glf", "=", "pattern_len", ".", "float", "(", ")", ",", "graph_len", ".", "float", "(", ")", "\n", "inv_plf", ",", "inv_glf", "=", "1.0", "/", "plf", ",", "1.0", "/", "glf", "\n", "p_mask", "=", "batch_convert_len_to_mask", "(", "pattern_len", ")", "if", "p_len", "==", "pattern_len", ".", "max", "(", ")", "else", "None", "\n", "g_mask", "=", "batch_convert_len_to_mask", "(", "graph_len", ")", "if", "g_len", "==", "graph_len", ".", "max", "(", ")", "else", "None", "\n", "\n", "p", ",", "g", "=", "pattern", ",", "graph", "\n", "if", "g_mask", "is", "not", "None", ":", "\n", "            ", "mem", "=", "list", "(", ")", "\n", "mem_mask", "=", "list", "(", ")", "\n", "for", "idx", "in", "gather_indices_by_lens", "(", "graph_len", ")", ":", "\n", "                ", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "g", "[", "idx", ",", ":", "graph_len", "[", "idx", "[", "0", "]", "]", "]", ",", "g_mask", "[", "idx", ",", ":", "graph_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "attn", "=", "self", ".", "m_layer", ")", "\n", "", "elif", "self", ".", "mem_init", ".", "endswith", "(", "\"lstm\"", ")", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "g", "[", "idx", ",", ":", "graph_len", "[", "idx", "[", "0", "]", "]", "]", ",", "g_mask", "[", "idx", ",", ":", "graph_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "lstm", "=", "self", ".", "m_layer", ")", "\n", "", "else", ":", "\n", "                    ", "m", ",", "mk", "=", "init_mem", "(", "g", "[", "idx", ",", ":", "graph_len", "[", "idx", "[", "0", "]", "]", "]", ",", "g_mask", "[", "idx", ",", ":", "graph_len", "[", "idx", "[", "0", "]", "]", "]", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "post_proj", "=", "self", ".", "m_layer", ")", "\n", "", "mem", ".", "append", "(", "m", ")", "\n", "mem_mask", ".", "append", "(", "mk", ")", "\n", "", "mem", "=", "torch", ".", "cat", "(", "mem", ",", "dim", "=", "0", ")", "\n", "mem_mask", "=", "torch", ".", "cat", "(", "mem_mask", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "attn", "=", "self", ".", "m_layer", ")", "\n", "", "elif", "self", ".", "mem_init", ".", "endswith", "(", "\"lstm\"", ")", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "lstm", "=", "self", ".", "m_layer", ")", "\n", "", "else", ":", "\n", "                ", "mem", ",", "mem_mask", "=", "init_mem", "(", "keyvalue", ",", "None", ",", "\n", "mem_len", "=", "self", ".", "mem_len", ",", "mem_init", "=", "self", ".", "mem_init", ",", "post_proj", "=", "self", ".", "m_layer", ")", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "recurrent_steps", ")", ":", "\n", "            ", "mem", "=", "self", ".", "p_attn", "(", "mem", ",", "p", ",", "p", ",", "p_mask", ")", "\n", "mem", "=", "self", ".", "g_attn", "(", "mem", ",", "g", ",", "g", ",", "g_mask", ")", "\n", "\n", "", "mem", "=", "mem", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "pred_layer1", "(", "torch", ".", "cat", "(", "[", "mem", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "y", "=", "self", ".", "act", "(", "y", ")", "\n", "y", "=", "self", ".", "pred_layer2", "(", "torch", ".", "cat", "(", "[", "y", ",", "plf", ",", "glf", ",", "inv_plf", ",", "inv_glf", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.DIAMNet.increase_input_size": [[995, 1017], ["predictnet.DIAMNet.mem_init.endswith", "predictnet.DIAMNet.p_attn.increase_input_size", "predictnet.DIAMNet.g_attn.increase_input_size", "utils.extend_dimensions", "utils.extend_dimensions", "predictnet.DIAMNet.m_layer.increase_input_size", "utils.extend_dimensions"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions"], ["", "def", "increase_input_size", "(", "self", ",", "new_pattern_dim", ",", "new_graph_dim", ")", ":", "\n", "        ", "assert", "new_pattern_dim", ">=", "self", ".", "pattern_dim", "and", "new_graph_dim", ">=", "self", ".", "graph_dim", "\n", "if", "new_pattern_dim", "!=", "self", ".", "pattern_dim", ":", "\n", "            ", "new_p_layer", "=", "extend_dimensions", "(", "self", ".", "p_layer", ",", "new_input_dim", "=", "new_pattern_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "p_layer", "\n", "self", ".", "p_layer", "=", "new_p_layer", "\n", "", "if", "new_graph_dim", "!=", "self", ".", "graph_dim", ":", "\n", "            ", "new_g_layer", "=", "extend_dimensions", "(", "self", ".", "g_layer", ",", "new_input_dim", "=", "new_graph_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "g_layer", "\n", "self", ".", "g_layer", "=", "new_g_layer", "\n", "\n", "", "if", "self", ".", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "            ", "self", ".", "m_layer", ".", "increase_input_size", "(", "self", ".", "hidden_dim", ",", "new_graph_dim", ",", "new_graph_dim", ")", "\n", "", "else", ":", "\n", "            ", "new_m_layer", "=", "extend_dimensions", "(", "self", ".", "m_layer", ",", "new_input_dim", "=", "new_graph_dim", ",", "upper", "=", "False", ")", "\n", "del", "self", ".", "m_layer", "\n", "self", ".", "m_layer", "=", "new_m_layer", "\n", "", "self", ".", "p_attn", ".", "increase_input_size", "(", "self", ".", "hidden_dim", ",", "new_pattern_dim", ",", "new_pattern_dim", ")", "\n", "self", ".", "g_attn", ".", "increase_input_size", "(", "self", ".", "hidden_dim", ",", "new_graph_dim", ",", "new_graph_dim", ")", "\n", "\n", "self", ".", "pattern_dim", "=", "new_pattern_dim", "\n", "self", ".", "graph_dim", "=", "new_graph_dim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.get_multi_head_attn_vec": [[10, 34], ["head_q.size", "torch.einsum", "torch.einsum", "torch.einsum", "dropatt.mul_", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view", "act_layer", "dropatt", "attn_mask.dim", "dropatt.masked_fill_", "attn_vec.contiguous().view.contiguous", "attn_mask.dim", "dropatt.masked_fill_"], "function", ["None"], ["def", "get_multi_head_attn_vec", "(", "head_q", ",", "head_k", ",", "head_v", ",", "attn_mask", "=", "None", ",", "act_layer", "=", "None", ",", "dropatt", "=", "None", ")", ":", "\n", "    ", "bsz", ",", "qlen", ",", "num_heads", ",", "head_dim", "=", "head_q", ".", "size", "(", ")", "\n", "scale", "=", "1", "/", "(", "head_dim", "**", "0.5", ")", "\n", "\n", "# [bsz x qlen x klen x num_heads]", "\n", "attn_score", "=", "torch", ".", "einsum", "(", "\"bind,bjnd->bijn\"", ",", "(", "head_q", ",", "head_k", ")", ")", "\n", "attn_score", ".", "mul_", "(", "scale", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "        ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "attn_score", ".", "masked_fill_", "(", "(", "attn_mask", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "_INF", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "attn_score", ".", "masked_fill_", "(", "(", "attn_mask", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "_INF", ")", "\n", "\n", "# [bsz x qlen x klen x num_heads]", "\n", "", "", "if", "act_layer", "is", "not", "None", ":", "\n", "        ", "attn_score", "=", "act_layer", "(", "attn_score", ")", "\n", "", "if", "dropatt", "is", "not", "None", ":", "\n", "        ", "attn_score", "=", "dropatt", "(", "attn_score", ")", "\n", "\n", "# [bsz x qlen x klen x num_heads] x [bsz x klen x num_heads x head_dim] -> [bsz x qlen x num_heads x head_dim]", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "\"bijn,bjnd->bind\"", ",", "(", "attn_score", ",", "head_v", ")", ")", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", ",", "qlen", ",", "-", "1", ")", "\n", "\n", "return", "attn_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.init_mem": [[292, 358], ["kw.get", "kw.get", "F.pad().transpose.size", "kw.get.", "torch.cat", "torch.cat", "torch.cat", "kw.get.", "torch.cat", "torch.cat", "torch.cat", "mem_init.startswith", "mem_init.endswith", "torch.zeros", "torch.zeros", "torch.zeros", "torch.pad().transpose", "torch.avg_pool1d().transpose", "mem_init.endswith", "torch.max_pool1d().squeeze().byte", "torch.zeros", "torch.zeros", "torch.zeros", "math.ceil", "torch.pad().squeeze", "torch.max_pool1d().transpose", "mem_init.endswith", "torch.pad", "torch.avg_pool1d", "mem_init.endswith", "torch.max_pool1d().squeeze", "F.pad().transpose.transpose", "torch.pad", "F.pad().transpose.transpose", "torch.max_pool1d", "torch.avg_pool1d().transpose", "list", "kw.get", "torch.ones().mul_", "torch.ones().mul_", "torch.ones().mul_", "range", "torch.cat", "torch.cat", "torch.cat", "mem_init.endswith", "F.pad().squeeze.unsqueeze", "F.pad().transpose.transpose", "torch.cat.append", "list", "range", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool1d", "torch.avg_pool1d", "torch.ones", "torch.ones", "torch.ones", "kw.get.", "m.unsqueeze.unsqueeze", "predictnet.get_multi_head_attn_vec", "lstm", "torch.cat.append", "F.pad().squeeze.float().unsqueeze", "F.pad().transpose.transpose", "hx[].view", "torch.Softmax", "F.pad().squeeze.float"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.predictnet.get_multi_head_attn_vec", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "", "def", "init_mem", "(", "x", ",", "x_mask", "=", "None", ",", "mem_len", "=", "4", ",", "mem_init", "=", "\"mean\"", ",", "**", "kw", ")", ":", "\n", "    ", "assert", "mem_init", "in", "[", "\"mean\"", ",", "\"sum\"", ",", "\"max\"", ",", "\"attn\"", ",", "\"lstm\"", ",", "\n", "\"circular_mean\"", ",", "\"circular_sum\"", ",", "\"circular_max\"", ",", "\"circular_attn\"", ",", "\"circular_lstm\"", "]", "\n", "pre_proj", "=", "kw", ".", "get", "(", "\"pre_proj\"", ",", "None", ")", "\n", "post_proj", "=", "kw", ".", "get", "(", "\"post_proj\"", ",", "None", ")", "\n", "if", "pre_proj", ":", "\n", "        ", "x", "=", "pre_proj", "(", "x", ")", "\n", "\n", "", "bsz", ",", "seq_len", ",", "hidden_dim", "=", "x", ".", "size", "(", ")", "\n", "if", "seq_len", "<", "mem_len", ":", "\n", "        ", "mem", "=", "torch", ".", "cat", "(", "[", "x", ",", "torch", ".", "zeros", "(", "(", "bsz", ",", "mem_len", "-", "seq_len", ",", "hidden_dim", ")", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "x_mask", "is", "not", "None", ":", "\n", "            ", "mem_mask", "=", "torch", ".", "cat", "(", "[", "x_mask", ",", "torch", ".", "zeros", "(", "(", "bsz", ",", "mem_len", "-", "seq_len", ")", ",", "device", "=", "x_mask", ".", "device", ",", "dtype", "=", "x_mask", ".", "dtype", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "mem_mask", "=", "None", "\n", "", "", "elif", "seq_len", "==", "mem_len", ":", "\n", "        ", "mem", ",", "mem_mask", "=", "x", ",", "x_mask", "\n", "", "else", ":", "\n", "        ", "if", "mem_init", ".", "startswith", "(", "\"circular\"", ")", ":", "\n", "            ", "pad_len", "=", "math", ".", "ceil", "(", "(", "seq_len", "+", "1", ")", "/", "2", ")", "-", "1", "\n", "x", "=", "F", ".", "pad", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ",", "pad", "=", "(", "0", ",", "pad_len", ")", ",", "mode", "=", "\"circular\"", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "if", "x_mask", "is", "not", "None", ":", "\n", "                ", "x_mask", "=", "F", ".", "pad", "(", "x_mask", ".", "unsqueeze", "(", "1", ")", ",", "pad", "=", "(", "0", ",", "pad_len", ")", ",", "mode", "=", "\"circular\"", ")", ".", "squeeze", "(", "1", ")", "\n", "", "seq_len", "+=", "pad_len", "\n", "", "stride", "=", "seq_len", "//", "mem_len", "\n", "kernel_size", "=", "seq_len", "-", "(", "mem_len", "-", "1", ")", "*", "stride", "\n", "if", "mem_init", ".", "endswith", "(", "\"mean\"", ")", ":", "\n", "            ", "mem", "=", "F", ".", "avg_pool1d", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "elif", "mem_init", ".", "endswith", "(", "\"max\"", ")", ":", "\n", "            ", "mem", "=", "F", ".", "max_pool1d", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "elif", "mem_init", ".", "endswith", "(", "\"sum\"", ")", ":", "\n", "            ", "mem", "=", "F", ".", "avg_pool1d", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", ".", "transpose", "(", "1", ",", "2", ")", "*", "kernel_size", "\n", "", "elif", "mem_init", ".", "endswith", "(", "\"attn\"", ")", ":", "\n", "# split and self attention", "\n", "            ", "mem", "=", "list", "(", ")", "\n", "attn", "=", "kw", ".", "get", "(", "\"attn\"", ",", "None", ")", "\n", "hidden_dim", "=", "attn", ".", "query_dim", "\n", "h", "=", "torch", ".", "ones", "(", "(", "bsz", ",", "1", ",", "hidden_dim", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ",", "requires_grad", "=", "False", ")", ".", "mul_", "(", "1", "/", "(", "hidden_dim", "**", "0.5", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "seq_len", "-", "kernel_size", "+", "1", ",", "stride", ")", ":", "\n", "                ", "j", "=", "i", "+", "kernel_size", "\n", "m", "=", "x", "[", ":", ",", "i", ":", "j", "]", "\n", "mk", "=", "x_mask", "[", ":", ",", "i", ":", "j", "]", "if", "x_mask", "is", "not", "None", "else", "None", "\n", "if", "attn", ":", "\n", "                    ", "h", "=", "attn", "(", "h", ",", "m", ",", "m", ",", "attn_mask", "=", "mk", ")", "\n", "", "else", ":", "\n", "                    ", "m", "=", "m", ".", "unsqueeze", "(", "2", ")", "\n", "h", "=", "get_multi_head_attn_vec", "(", "h", ",", "m", ",", "m", ",", "attn_mask", "=", "mk", ",", "act_layer", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ")", "\n", "", "mem", ".", "append", "(", "h", ")", "\n", "", "mem", "=", "torch", ".", "cat", "(", "mem", ",", "dim", "=", "1", ")", "\n", "", "elif", "mem_init", ".", "endswith", "(", "\"lstm\"", ")", ":", "\n", "            ", "mem", "=", "list", "(", ")", "\n", "lstm", "=", "kw", "[", "\"lstm\"", "]", "\n", "hx", "=", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "seq_len", "-", "kernel_size", "+", "1", ",", "stride", ")", ":", "\n", "                ", "j", "=", "i", "+", "kernel_size", "\n", "m", "=", "x", "[", ":", ",", "i", ":", "j", "]", "\n", "_", ",", "hx", "=", "lstm", "(", "m", ",", "hx", ")", "\n", "mem", ".", "append", "(", "hx", "[", "0", "]", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", ")", "\n", "", "mem", "=", "torch", ".", "cat", "(", "mem", ",", "dim", "=", "1", ")", "\n", "", "if", "x_mask", "is", "not", "None", ":", "\n", "            ", "mem_mask", "=", "F", ".", "max_pool1d", "(", "x_mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", ".", "squeeze", "(", "1", ")", ".", "byte", "(", ")", "\n", "", "else", ":", "\n", "            ", "mem_mask", "=", "None", "\n", "", "", "if", "post_proj", ":", "\n", "        ", "mem", "=", "post_proj", "(", "mem", ")", "\n", "", "return", "mem", ",", "mem_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.PositionalEmbedding.__init__": [[11, 18], ["torch.Module.__init__", "txl.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_emb", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_emb", "=", "d_emb", "\n", "\n", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "torch", ".", "arange", "(", "0.0", ",", "d_emb", ",", "2.0", ")", "/", "d_emb", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"inv_freq\"", ",", "inv_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.PositionalEmbedding.forward": [[19, 27], ["torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.ger.sin", "torch.ger.sin", "torch.ger.sin", "torch.ger.cos", "torch.ger.cos", "torch.ger.cos", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "ger", "(", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "sinusoid_inp", ".", "sin", "(", ")", ",", "sinusoid_inp", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "pos_emb", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bsz", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.PositionwiseFF.__init__": [[30, 52], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "txl.PositionwiseFF.CoreNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "utils.map_activation_str_to_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "act_func", "=", "\"relu\"", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "PositionwiseFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "CoreNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", ",", "\n", "map_activation_str_to_layer", "(", "act_func", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "# init", "\n", "for", "m", "in", "self", ".", "CoreNet", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.0", ",", "1", "/", "(", "d_model", "**", "0.5", ")", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.PositionwiseFF.forward": [[53, 68], ["txl.PositionwiseFF.CoreNet", "txl.PositionwiseFF.layer_norm", "txl.PositionwiseFF.layer_norm"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "inp", "=", "self", ".", "layer_norm", "(", "inp", ")", "\n", "\n", "", "core_out", "=", "self", ".", "CoreNet", "(", "inp", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "\n", "if", "not", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.MultiHeadAttn.__init__": [[71, 97], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "k_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "v_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "# init", "\n", "for", "m", "in", "[", "self", ".", "q_net", ",", "self", ".", "k_net", ",", "self", ".", "v_net", ",", "self", ".", "o_net", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.0", ",", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.MultiHeadAttn.forward": [[98, 149], ["txl.MultiHeadAttn.size", "txl.MultiHeadAttn.q_net().view", "txl.MultiHeadAttn.k_net().view", "txl.MultiHeadAttn.v_net().view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.mul_", "torch.einsum.mul_", "torch.einsum.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "txl.MultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "txl.MultiHeadAttn.o_net", "txl.MultiHeadAttn.drop", "txl.MultiHeadAttn.size", "txl.MultiHeadAttn.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "txl.MultiHeadAttn.layer_norm", "txl.MultiHeadAttn.layer_norm", "txl.MultiHeadAttn.size", "txl.MultiHeadAttn.size", "txl.MultiHeadAttn.size", "txl.MultiHeadAttn.size", "txl.MultiHeadAttn.size", "txl.MultiHeadAttn.size", "attn_mask.any().item", "txl.MultiHeadAttn.layer_norm", "txl.MultiHeadAttn.q_net", "txl.MultiHeadAttn.k_net", "txl.MultiHeadAttn.v_net", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "attn_mask.any", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "h", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "##### multihead attention", "\n", "# [bsz x hlen x n_head x d_head]", "\n", "        ", "bsz", ",", "qlen", "=", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "c", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "h", "\n", "", "klen", "=", "c", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "h", "=", "self", ".", "layer_norm", "(", "h", ")", "\n", "c", "=", "self", ".", "layer_norm", "(", "c", ")", "\n", "\n", "", "head_q", "=", "self", ".", "q_net", "(", "h", ")", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_k", "=", "self", ".", "k_net", "(", "c", ")", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_v", "=", "self", ".", "v_net", "(", "c", ")", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "# [bsz x qlen x klen x n_head]", "\n", "attn_score", "=", "torch", ".", "einsum", "(", "\"bind,bjnd->bijn\"", ",", "(", "head_q", ",", "head_k", ")", ")", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "# [bsz x klen] -> [bsz x qlen x klen x n_head]", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "(", "attn_mask", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "_INF", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "# [bsz x qlen x klen] -> [bsz x qlen x klen x n_head]", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "(", "attn_mask", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "_INF", ")", "\n", "\n", "# [bsz x qlen x klen x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "2", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# klen = vlen", "\n", "# [bsz x qlen x klen x n_head] + [bsz x vlen x n_head x d_head] -> [bsz x qlen x n_head x d_head]", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "\"bijn,bjnd->bind\"", ",", "(", "attn_prob", ",", "head_v", ")", ")", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "bsz", ",", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "h", "+", "attn_out", "\n", "\n", "if", "not", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelMultiHeadAttn.__init__": [[152, 179], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ",", "**", "kw", ")", ":", "\n", "        ", "super", "(", "RelMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "k_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "v_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "# self.qkv_net = nn.Linear(d_model, 3 * n_head * d_head, bias=False)", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "# init", "\n", "for", "m", "in", "[", "self", ".", "q_net", ",", "self", ".", "k_net", ",", "self", ".", "v_net", ",", "self", ".", "o_net", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0.0", ",", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelMultiHeadAttn._rel_shift": [[180, 193], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.size", "x.size", "x.size", "torch.tril().unsqueeze().unsqueeze", "torch.tril().unsqueeze().unsqueeze", "torch.tril().unsqueeze().unsqueeze", "torch.tril().unsqueeze().unsqueeze", "torch.tril().unsqueeze().unsqueeze", "torch.tril().unsqueeze().unsqueeze", "torch.tril().unsqueeze().unsqueeze", "torch.tril().unsqueeze().unsqueeze", "torch.tril().unsqueeze().unsqueeze", "x.size", "x.size", "torch.tril().unsqueeze", "torch.tril().unsqueeze", "torch.tril().unsqueeze", "torch.tril().unsqueeze", "torch.tril().unsqueeze", "torch.tril().unsqueeze", "torch.tril().unsqueeze", "torch.tril().unsqueeze", "torch.tril().unsqueeze", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "x.size", "x.size"], "methods", ["None"], ["", "", "def", "_rel_shift", "(", "self", ",", "x", ",", "zero_triu", "=", "False", ")", ":", "\n", "# x: bsz x qlen x klen x n_head", "\n", "        ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ",", "requires_grad", "=", "False", ")", "# bsz x qlen x 1 x n_head", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "x", ",", "zero_pad", "]", ",", "dim", "=", "2", ")", "# bsz x qlen x (klen+1) x n_head", "\n", "\n", "x", "=", "x_padded", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "\n", "if", "zero_triu", ":", "\n", "            ", "ones", "=", "torch", ".", "ones", "(", "(", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ",", "requires_grad", "=", "False", ")", "\n", "x", "=", "x", "*", "torch", ".", "tril", "(", "ones", ",", "diagonal", "=", "x", ".", "size", "(", "2", ")", "-", "x", ".", "size", "(", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelMultiHeadAttn.forward": [[194, 196], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelPartialLearnableMultiHeadAttn.__init__": [[199, 206], ["txl.RelMultiHeadAttn.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kw", ")", "\n", "\n", "self", ".", "r_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "# init", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "r_net", ".", "weight", ",", "0.0", ",", "1", "/", "(", "(", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "**", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelPartialLearnableMultiHeadAttn.forward": [[207, 278], ["txl.RelPartialLearnableMultiHeadAttn.size", "txl.RelPartialLearnableMultiHeadAttn.r_net", "txl.RelPartialLearnableMultiHeadAttn.q_net", "txl.RelPartialLearnableMultiHeadAttn.k_net", "txl.RelPartialLearnableMultiHeadAttn.v_net", "r_head_k.view.view.view", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "txl.RelPartialLearnableMultiHeadAttn._rel_shift", "attn_score.masked_fill_.masked_fill_.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "txl.RelPartialLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "txl.RelPartialLearnableMultiHeadAttn.o_net", "txl.RelPartialLearnableMultiHeadAttn.drop", "txl.RelPartialLearnableMultiHeadAttn.size", "txl.RelPartialLearnableMultiHeadAttn.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "txl.RelPartialLearnableMultiHeadAttn.layer_norm", "txl.RelPartialLearnableMultiHeadAttn.layer_norm", "attn_mask.any().item", "txl.RelPartialLearnableMultiHeadAttn.layer_norm", "attn_mask.dim", "attn_score.masked_fill_.masked_fill_.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "attn_mask.any", "attn_mask.dim", "attn_score.masked_fill_.masked_fill_.masked_fill_"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelMultiHeadAttn._rel_shift"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "# r: [bsz, klen, d_model], used for term B", "\n", "# r_w_bias: [n_head, d_head], used for term C", "\n", "# r_r_bias: [klen, n_head], used for term D", "\n", "        ", "bsz", ",", "qlen", "=", "w", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "c", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "w", "\n", "", "klen", "=", "c", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "w", "=", "self", ".", "layer_norm", "(", "w", ")", "\n", "c", "=", "self", ".", "layer_norm", "(", "c", ")", "\n", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "w_head_q", "=", "self", ".", "q_net", "(", "w", ")", "\n", "w_head_k", "=", "self", ".", "k_net", "(", "c", ")", "\n", "w_head_v", "=", "self", ".", "v_net", "(", "c", ")", "\n", "\n", "r_head_k", "=", "r_head_k", ".", "view", "(", "klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# klen x n_head x d_head", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "bsz", ",", "qlen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# bsz x qlen x n_head x d_head", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "bsz", ",", "klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# bsz x klen x n_head x d_head", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "bsz", ",", "klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# bsz x klen x n_head x d_head", "\n", "\n", "#### compute attention score", "\n", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "# bsz x qlen x n_head x d_head", "\n", "AC", "=", "torch", ".", "einsum", "(", "\"bind,bjnd->bijn\"", ",", "(", "rw_head_q", ",", "w_head_k", ")", ")", "# bsz x qlen x klen x n_head", "\n", "\n", "rr_head_q", "=", "w_head_q", "+", "r_r_bias", "# bsz x qlen x n_head x d_head", "\n", "BD", "=", "torch", ".", "einsum", "(", "\"bind,jnd->bijn\"", ",", "(", "rr_head_q", ",", "r_head_k", ")", ")", "# bsz x qlen x klen x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "BD", ")", "\n", "\n", "# [bsz x qlen x klen x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "# bsz x klen -> bsz x qlen x klen x n_head", "\n", "                ", "attn_score", "=", "attn_score", ".", "masked_fill_", "(", "(", "attn_mask", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "_INF", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "# bsz x qlen x klen -> bsz x qlen x klen x n_head", "\n", "                ", "attn_score", "=", "attn_score", ".", "masked_fill_", "(", "(", "attn_mask", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "_INF", ")", "\n", "\n", "# [bsz x qlen x klen x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "2", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "#### compute attention vector", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "\"bijn,bjnd->bind\"", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [bsz x qlen x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "bsz", ",", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "w", "+", "attn_out", "\n", "\n", "if", "not", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelLearnableMultiHeadAttn.__init__": [[281, 283], ["txl.RelMultiHeadAttn.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "super", "(", "RelLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelLearnableMultiHeadAttn.forward": [[284, 365], ["txl.RelLearnableMultiHeadAttn.size", "txl.RelLearnableMultiHeadAttn.q_net", "txl.RelLearnableMultiHeadAttn.k_net", "txl.RelLearnableMultiHeadAttn.v_net", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "txl.RelLearnableMultiHeadAttn._rel_shift", "attn_score.masked_fill.masked_fill.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "txl.RelLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "txl.RelLearnableMultiHeadAttn.o_net", "txl.RelLearnableMultiHeadAttn.drop", "txl.RelLearnableMultiHeadAttn.size", "txl.RelLearnableMultiHeadAttn.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "txl.RelLearnableMultiHeadAttn.layer_norm", "txl.RelLearnableMultiHeadAttn.layer_norm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "r_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "r_bias[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "r_w_bias.unsqueeze().unsqueeze", "attn_mask.any().item", "txl.RelLearnableMultiHeadAttn.layer_norm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "attn_mask.dim", "attn_score.masked_fill.masked_fill.masked_fill", "attn_vec.contiguous().view.contiguous().view.contiguous", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "r_w_bias.unsqueeze", "attn_mask.any", "attn_mask.unsqueeze().unsqueeze", "attn_mask.dim", "attn_score.masked_fill.masked_fill.masked_fill", "attn_mask.unsqueeze", "attn_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelMultiHeadAttn._rel_shift"], ["", "def", "forward", "(", "self", ",", "w", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "# r_emb: [klen, n_head, d_head], used for term B", "\n", "# r_w_bias: [n_head, d_head], used for term C", "\n", "# r_bias: [klen, n_head], used for term D", "\n", "\n", "        ", "bsz", ",", "qlen", "=", "w", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "c", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "w", "\n", "", "klen", "=", "c", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "w", "=", "self", ".", "layer_norm", "(", "w", ")", "\n", "c", "=", "self", ".", "layer_norm", "(", "c", ")", "\n", "\n", "", "w_head_q", "=", "self", ".", "q_net", "(", "w", ")", "\n", "w_head_k", "=", "self", ".", "k_net", "(", "c", ")", "\n", "w_head_v", "=", "self", ".", "v_net", "(", "c", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "bsz", ",", "qlen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# bsz x qlen x n_head x d_head", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "bsz", ",", "klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# bsz x qlen x n_head x d_head", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "bsz", ",", "klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# bsz x qlen x n_head x d_head", "\n", "\n", "if", "klen", ">", "r_emb", ".", "size", "(", "0", ")", ":", "\n", "            ", "r_emb_pad", "=", "r_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_emb", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "r_emb", "=", "torch", ".", "cat", "(", "[", "r_emb_pad", ",", "r_emb", "]", ",", "dim", "=", "0", ")", "\n", "r_bias_pad", "=", "r_bias", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_bias", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "r_bias", "=", "torch", ".", "cat", "(", "[", "r_bias_pad", ",", "r_bias", "]", ",", "dim", "=", "0", ")", "\n", "", "elif", "klen", "<", "r_emb", ".", "size", "(", "0", ")", ":", "\n", "            ", "r_emb", "=", "r_emb", "[", "-", "klen", ":", "]", "\n", "r_bias", "=", "r_bias", "[", "-", "klen", ":", "]", "\n", "\n", "#### compute attention score", "\n", "", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# bsz x qlen x n_head x d_head", "\n", "\n", "AC", "=", "torch", ".", "einsum", "(", "\"bind,bjnd->bijn\"", ",", "(", "rw_head_q", ",", "w_head_k", ")", ")", "# bsz x qlen x klen x n_head", "\n", "B_", "=", "torch", ".", "einsum", "(", "\"bind,jnd->bijn\"", ",", "(", "w_head_q", ",", "r_emb", ")", ")", "# bsz x qlen x klen x n_head", "\n", "D_", "=", "r_bias", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# 1 x 1 x klen x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "B_", "+", "D_", ")", "\n", "\n", "# [bsz x qlen x klen x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "# bsz x klen -> bsz x qlen x klen x n_head", "\n", "                ", "attn_score", "=", "attn_score", ".", "masked_fill", "(", "\n", "attn_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "_INF", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "# bsz x qlen x klen -> bsz x qlen x klen x n_head", "\n", "                ", "attn_score", "=", "attn_score", ".", "masked_fill", "(", "\n", "attn_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "_INF", ")", "\n", "\n", "# [bsz x qlen x klen x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "2", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "#### compute attention vector", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "\"bijn,bjnd->bind\"", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [bsz x qlen x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "bsz", ",", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "w", "+", "attn_out", "\n", "\n", "if", "not", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TransformerLayer.__init__": [[368, 374], ["torch.Module.__init__", "txl.MultiHeadAttn", "txl.PositionwiseFF", "kw.get", "kw.get"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "**", "kw", ")", ":", "\n", "        ", "super", "(", "TransformerLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "MultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "**", "kw", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "act_func", "=", "kw", ".", "get", "(", "\"act_func\"", ",", "\"relu\"", ")", ",", "pre_lnorm", "=", "kw", ".", "get", "(", "\"pre_lnorm\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TransformerLayer.forward": [[375, 382], ["txl.TransformerLayer.dec_attn", "txl.TransformerLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelLearnableTransformerLayer.__init__": [[385, 391], ["torch.Module.__init__", "txl.RelLearnableMultiHeadAttn", "txl.PositionwiseFF", "kw.get", "kw.get"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "**", "kw", ")", ":", "\n", "        ", "super", "(", "RelLearnableTransformerLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "**", "kw", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "act_func", "=", "kw", ".", "get", "(", "\"act_func\"", ",", "\"relu\"", ")", ",", "pre_lnorm", "=", "kw", ".", "get", "(", "\"pre_lnorm\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelLearnableTransformerLayer.forward": [[392, 400], ["txl.RelLearnableTransformerLayer.dec_attn", "txl.RelLearnableTransformerLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelPartialLearnableTransformerLayer.__init__": [[403, 409], ["torch.Module.__init__", "txl.RelPartialLearnableMultiHeadAttn", "txl.PositionwiseFF", "kw.get", "kw.get"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "**", "kw", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableTransformerLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "**", "kw", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "act_func", "=", "kw", ".", "get", "(", "\"act_func\"", ",", "\"relu\"", ")", ",", "pre_lnorm", "=", "kw", ".", "get", "(", "\"pre_lnorm\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.RelPartialLearnableTransformerLayer.forward": [[410, 418], ["txl.RelPartialLearnableTransformerLayer.dec_attn", "txl.RelPartialLearnableTransformerLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.__init__": [[421, 479], ["basemodel.EdgeSeqModel.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "txl.TXL.get_emb_dim", "torch.Linear", "torch.Linear", "torch.Linear", "txl.PositionalEmbedding", "txl.TXL.create_net", "txl.TXL.create_params", "txl.TXL.create_predict_net", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.Linear", "torch.Linear", "torch.Linear", "txl.TXL.create_net", "txl.TXL.create_params", "txl.TXL.get_enc_dim"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.create_params", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_predict_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.create_params", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TXL", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "self", ".", "tgt_len", "=", "config", "[", "\"txl_tgt_len\"", "]", "\n", "self", ".", "mem_len", "=", "config", "[", "\"txl_mem_len\"", "]", "\n", "self", ".", "ext_len", "=", "config", "[", "\"txl_ext_len\"", "]", "\n", "self", ".", "max_tgt_len", "=", "self", ".", "tgt_len", "+", "self", ".", "ext_len", "+", "self", ".", "mem_len", "\n", "self", ".", "clamp_len", "=", "config", "[", "\"txl_clamp_len\"", "]", "\n", "self", ".", "same_length", "=", "config", "[", "\"txl_same_len\"", "]", "\n", "self", ".", "attn_type", "=", "config", "[", "\"txl_attn_type\"", "]", "\n", "self", ".", "d_model", "=", "config", "[", "\"txl_d_model\"", "]", "\n", "\n", "# embedding layers", "\n", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "self", ".", "emb_scale", "=", "1", "/", "(", "config", "[", "\"txl_d_head\"", "]", "**", "0.5", ")", "\n", "self", ".", "g_emb_proj", "=", "nn", ".", "Linear", "(", "g_emb_dim", ",", "self", ".", "d_model", ")", "\n", "self", ".", "p_emb_proj", "=", "self", ".", "g_emb_proj", "if", "self", ".", "share_emb", "else", "nn", ".", "Linear", "(", "p_emb_dim", ",", "self", ".", "d_model", ")", "\n", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "\n", "# transformer layers", "\n", "self", ".", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "self", ".", "d_model", ",", "num_layers", "=", "config", "[", "\"txl_graph_num_layers\"", "]", ",", "\n", "d_model", "=", "self", ".", "d_model", ",", "d_inner", "=", "config", "[", "\"txl_d_inner\"", "]", ",", "\n", "n_head", "=", "config", "[", "\"txl_n_head\"", "]", ",", "d_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "\n", "tgt_len", "=", "self", ".", "tgt_len", ",", "ext_len", "=", "self", ".", "ext_len", ",", "mem_len", "=", "self", ".", "mem_len", ",", "\n", "attn_type", "=", "self", ".", "attn_type", ",", "pre_lnorm", "=", "config", "[", "\"txl_pre_lnorm\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropout", ")", "\n", "self", ".", "p_net", ",", "p_dim", "=", "(", "self", ".", "g_net", ",", "g_dim", ")", "if", "self", ".", "share_arch", "else", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "self", ".", "d_model", ",", "num_layers", "=", "config", "[", "\"txl_pattern_num_layers\"", "]", ",", "\n", "d_model", "=", "self", ".", "d_model", ",", "d_inner", "=", "config", "[", "\"txl_d_inner\"", "]", ",", "\n", "n_head", "=", "config", "[", "\"txl_n_head\"", "]", ",", "d_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "\n", "tgt_len", "=", "self", ".", "tgt_len", ",", "ext_len", "=", "self", ".", "ext_len", ",", "mem_len", "=", "self", ".", "mem_len", ",", "\n", "attn_type", "=", "self", ".", "attn_type", ",", "pre_lnorm", "=", "config", "[", "\"txl_pre_lnorm\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropout", ")", "\n", "\n", "self", ".", "g_params", "=", "self", ".", "create_params", "(", "\n", "num_layers", "=", "config", "[", "\"txl_graph_num_layers\"", "]", ",", "attn_type", "=", "self", ".", "attn_type", ",", "\n", "n_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "d_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "max_tgt_len", "=", "self", ".", "max_tgt_len", ")", "\n", "self", ".", "p_params", "=", "self", ".", "g_params", "if", "self", ".", "share_arch", "else", "self", ".", "create_params", "(", "\n", "num_layers", "=", "config", "[", "\"txl_pattern_num_layers\"", "]", ",", "attn_type", "=", "self", ".", "attn_type", ",", "\n", "n_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "d_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "max_tgt_len", "=", "self", ".", "max_tgt_len", ")", "\n", "\n", "# predict layers", "\n", "if", "self", ".", "add_enc", ":", "\n", "            ", "p_enc_dim", ",", "g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "p_dim", "+=", "p_enc_dim", "\n", "g_dim", "+=", "g_enc_dim", "\n", "", "self", ".", "predict_net", "=", "self", ".", "create_predict_net", "(", "config", "[", "\"predict_net\"", "]", ",", "\n", "pattern_dim", "=", "p_dim", ",", "graph_dim", "=", "g_dim", ",", "hidden_dim", "=", "config", "[", "\"predict_net_hidden_dim\"", "]", ",", "\n", "num_heads", "=", "config", "[", "\"predict_net_num_heads\"", "]", ",", "recurrent_steps", "=", "config", "[", "\"predict_net_recurrent_steps\"", "]", ",", "\n", "mem_len", "=", "config", "[", "\"predict_net_mem_len\"", "]", ",", "mem_init", "=", "config", "[", "\"predict_net_mem_init\"", "]", ")", "\n", "\n", "# init", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "g_emb_proj", ".", "weight", ",", "0.0", ",", "self", ".", "emb_scale", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "g_emb_proj", ".", "bias", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "p_emb_proj", ".", "weight", ",", "0.0", ",", "self", ".", "emb_scale", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "p_emb_proj", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.create_net": [[480, 515], ["kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.add_module", "range", "nn.ModuleList.RelPartialLearnableTransformerLayer", "torch.ModuleList.add_module", "range", "nn.ModuleList.RelLearnableTransformerLayer", "torch.ModuleList.add_module", "nn.ModuleList.TransformerLayer"], "methods", ["None"], ["", "def", "create_net", "(", "self", ",", "name", ",", "input_dim", ",", "**", "kw", ")", ":", "\n", "        ", "num_layers", "=", "kw", ".", "get", "(", "\"num_layers\"", ",", "1", ")", "\n", "d_model", "=", "kw", ".", "get", "(", "\"d_model\"", ",", "64", ")", "\n", "n_head", "=", "kw", ".", "get", "(", "\"n_head\"", ",", "8", ")", "\n", "d_head", "=", "kw", ".", "get", "(", "\"d_head\"", ",", "8", ")", "\n", "d_inner", "=", "kw", ".", "get", "(", "\"d_inner\"", ",", "64", ")", "\n", "tgt_len", "=", "kw", ".", "get", "(", "\"tgt_len\"", ",", "64", ")", "\n", "ext_len", "=", "kw", ".", "get", "(", "\"ext_len\"", ",", "0", ")", "\n", "mem_len", "=", "kw", ".", "get", "(", "\"mem_len\"", ",", "64", ")", "\n", "attn_type", "=", "kw", ".", "get", "(", "\"attn_type\"", ",", "0", ")", "\n", "pre_lnorm", "=", "kw", ".", "get", "(", "\"pre_lnorm\"", ",", "True", ")", "\n", "act_func", "=", "kw", ".", "get", "(", "\"act_func\"", ",", "\"relu\"", ")", "\n", "dropatt", "=", "kw", ".", "get", "(", "\"dropatt\"", ",", "0.0", ")", "\n", "dropout", "=", "kw", ".", "get", "(", "\"dropout\"", ",", "0.0", ")", "\n", "\n", "txl", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "txl", ".", "add_module", "(", "\"%s_txl(%d)%d\"", "%", "(", "name", ",", "attn_type", ",", "i", ")", ",", "RelPartialLearnableTransformerLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "act_func", "=", "act_func", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", ")", "\n", "", "", "elif", "attn_type", "==", "1", ":", "# learnable embeddings", "\n", "            ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "txl", ".", "add_module", "(", "\"%s_txl(%d)%d\"", "%", "(", "name", ",", "attn_type", ",", "i", ")", ",", "RelLearnableTransformerLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "act_func", "=", "act_func", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", ")", "\n", "", "", "elif", "attn_type", "in", "[", "2", ",", "3", "]", ":", "# absolute embeddings", "\n", "            ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "txl", ".", "add_module", "(", "\"%s_txl(%d)%d\"", "%", "(", "name", ",", "attn_type", ",", "i", ")", ",", "TransformerLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "act_func", "=", "act_func", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", ")", "\n", "", "", "num_features", "=", "d_model", "\n", "return", "txl", ",", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.create_params": [[516, 551], ["kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "torch.ParameterDict", "torch.ParameterDict", "torch.ParameterDict", "hasattr", "hasattr", "hasattr", "hasattr", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "create_params", "(", "self", ",", "**", "kw", ")", ":", "\n", "        ", "num_layers", "=", "kw", ".", "get", "(", "\"num_layers\"", ",", "6", ")", "\n", "attn_type", "=", "kw", ".", "get", "(", "\"attn_type\"", ",", "0", ")", "\n", "n_head", "=", "kw", ".", "get", "(", "\"n_head\"", ",", "8", ")", "\n", "d_head", "=", "kw", ".", "get", "(", "\"d_head\"", ",", "8", ")", "\n", "max_tgt_len", "=", "kw", ".", "get", "(", "\"max_tgt_len\"", ",", "128", ")", "\n", "\n", "params", "=", "nn", ".", "ParameterDict", "(", ")", "\n", "if", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "params", "[", "\"r_w_bias\"", "]", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "d_head", ")", ")", "\n", "params", "[", "\"r_r_bias\"", "]", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_head", ",", "d_head", ")", ")", "\n", "", "elif", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "params", "[", "\"r_emb\"", "]", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "num_layers", ",", "max_tgt_len", ",", "n_head", ",", "d_head", ")", ")", "\n", "params", "[", "\"r_w_bias\"", "]", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "num_layers", ",", "n_head", ",", "d_head", ")", ")", "\n", "params", "[", "\"r_bias\"", "]", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "num_layers", ",", "max_tgt_len", ",", "n_head", ")", ")", "\n", "", "elif", "attn_type", "==", "2", ":", "# absolute standard", "\n", "            ", "pass", "\n", "", "elif", "attn_type", "==", "3", ":", "# absolute deeper SA", "\n", "            ", "params", "[", "\"r_emb\"", "]", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "num_layers", ",", "max_tgt_len", ",", "n_head", ",", "d_head", ")", ")", "\n", "\n", "# init", "\n", "", "if", "hasattr", "(", "params", ",", "\"r_emb\"", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "params", ".", "r_emb", ",", "0.0", ",", "1", "/", "(", "d_head", "**", "0.5", ")", ")", "\n", "", "if", "hasattr", "(", "params", ",", "\"r_w_bias\"", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "params", ".", "r_w_bias", ",", "0.0", ",", "1", "/", "(", "d_head", "**", "0.5", ")", ")", "\n", "", "if", "hasattr", "(", "params", ",", "\"r_r_bias\"", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "params", ".", "r_r_bias", ",", "0.0", ",", "1", "/", "(", "d_head", "**", "0.5", ")", ")", "\n", "", "if", "hasattr", "(", "params", ",", "\"r_bias\"", ")", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "params", ".", "r_bias", ")", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.reset_length": [[552, 559], ["None"], "methods", ["None"], ["", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "# If the model does not use memory at all, make the ext_len longer.", "\n", "# Otherwise, make the mem_len longer and keep the ext_len the same.", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "assert", "self", ".", "max_tgt_len", "==", "self", ".", "tgt_len", "+", "self", ".", "ext_len", "+", "self", ".", "mem_len", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.init_mems": [[560, 570], ["range", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "mems.append", "x.size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "init_mems", "(", "self", ",", "num_layers", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", "+", "1", ")", ":", "\n", "                ", "empty", "=", "torch", ".", "empty", "(", "(", "x", ".", "size", "(", "0", ")", ",", "0", ",", "self", ".", "d_model", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.update_mems": [[571, 591], ["max", "range", "max", "len", "new_mems.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mems.append", "[].detach", "cat[].detach"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "", "def", "update_mems", "(", "self", ",", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "            ", "if", "mems", "is", "None", "or", "mlen", "==", "0", ":", "\n", "                ", "new_mems", ".", "append", "(", "hids", "[", "i", "]", "[", ":", ",", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "dim", "=", "1", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", ":", ",", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "", "", "return", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL._forward": [[592, 669], ["txl.TXL.drop", "txl.TXL.update_mems", "x.size", "x.size", "mems[].size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "txl.TXL.pos_emb", "txl.TXL.drop", "txl.TXL.drop", "hids.append", "enumerate", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "layer", "hids.append", "txl.TXL.drop", "hids.append", "enumerate", "layer", "hids.append", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "txl.TXL.pos_emb", "txl.TXL.drop", "hids.append", "enumerate", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "layer", "hids.append", "txl.TXL.drop", "hids.append", "enumerate", "[].view", "layer", "hids.append", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.view", "torch.cat.view", "torch.cat.view", "cur_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.update_mems", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "_forward", "(", "self", ",", "x", ",", "x_len", ",", "txl", ",", "params", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "bsz", ",", "qlen", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "1", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "hids", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "x", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ")", "\n", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "txl", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "core_out", "=", "layer", "(", "core_out", ",", "pos_emb", ",", "params", "[", "\"r_w_bias\"", "]", ",", "params", "[", "\"r_r_bias\"", "]", ",", "\n", "dec_attn_mask", "=", "attn_mask", ",", "mems", "=", "mems_i", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "", "", "elif", "self", ".", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "core_out", "=", "self", ".", "drop", "(", "x", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "txl", ")", ":", "\n", "                ", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                    ", "r_emb", "=", "params", "[", "\"r_emb\"", "]", "[", "i", "]", "[", "-", "self", ".", "clamp_len", ":", "]", "\n", "r_bias", "=", "params", "[", "\"r_bias\"", "]", "[", "i", "]", "[", "-", "self", ".", "clamp_len", ":", "]", "\n", "", "else", ":", "\n", "                    ", "r_emb", ",", "r_bias", "=", "params", "[", "\"r_emb\"", "]", "[", "i", "]", ",", "params", "[", "\"r_bias\"", "]", "[", "i", "]", "\n", "", "r_w_bias", "=", "params", "[", "\"r_w_bias\"", "]", "[", "i", "]", "\n", "\n", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "core_out", "=", "layer", "(", "core_out", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "\n", "dec_attn_mask", "=", "attn_mask", ",", "mems", "=", "mems_i", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "", "", "elif", "self", ".", "attn_type", "==", "2", ":", "# absolute", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "x", "+", "pos_emb", "[", "-", "qlen", ":", "]", ")", "\n", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "txl", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "if", "mems_i", "is", "not", "None", "and", "i", "==", "0", ":", "\n", "                    ", "mems_i", "+=", "pos_emb", "[", ":", "mlen", "]", "\n", "", "core_out", "=", "layer", "(", "core_out", ",", "dec_attn_mask", "=", "attn_mask", ",", "mems", "=", "mems_i", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "", "", "elif", "self", ".", "attn_type", "==", "3", ":", "\n", "            ", "core_out", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "txl", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "if", "mems_i", "is", "not", "None", "and", "mlen", ">", "0", ":", "\n", "                    ", "cur_emb", "=", "params", "[", "\"r_emb\"", "]", "[", "i", "]", "[", ":", "-", "qlen", "]", "\n", "cur_size", "=", "cur_emb", ".", "size", "(", "0", ")", "\n", "if", "cur_size", "<", "mlen", ":", "\n", "                        ", "cur_emb_pad", "=", "cur_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "mlen", "-", "cur_size", ",", "-", "1", ",", "-", "1", ")", "\n", "cur_emb", "=", "torch", ".", "cat", "(", "[", "cur_emb_pad", ",", "cur_emb", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "                        ", "cur_emb", "=", "cur_emb", "[", "-", "mlen", ":", "]", "\n", "", "mems_i", "+=", "cur_emb", ".", "view", "(", "mlen", ",", "1", ",", "-", "1", ")", "\n", "", "core_out", "+=", "params", "[", "\"r_emb\"", "]", "[", "i", "]", "[", "-", "qlen", ":", "]", ".", "view", "(", "qlen", ",", "1", ",", "-", "1", ")", "\n", "\n", "core_out", "=", "layer", "(", "core_out", ",", "dec_attn_mask", "=", "attn_mask", ",", "mems", "=", "mems_i", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "\n", "", "", "core_out", "=", "self", ".", "drop", "(", "core_out", ")", "\n", "\n", "new_mems", "=", "self", ".", "update_mems", "(", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", "\n", "\n", "return", "core_out", ",", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.encoder_forward": [[670, 676], ["enc_inp.size", "utils.batch_convert_len_to_mask", "txl.TXL._forward", "mems[].size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL._forward"], ["", "def", "encoder_forward", "(", "self", ",", "enc_inp", ",", "enc_len", ",", "enc_txl", ",", "enc_params", ",", "mems", "=", "None", ")", ":", "\n", "        ", "qlen", "=", "enc_inp", ".", "size", "(", "1", ")", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "1", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "enc_attn_mask", "=", "batch_convert_len_to_mask", "(", "enc_len", "+", "mlen", ",", "max_seq_len", "=", "qlen", "+", "mlen", ")", "\n", "\n", "return", "self", ".", "_forward", "(", "enc_inp", ",", "enc_len", ",", "enc_txl", ",", "enc_params", ",", "attn_mask", "=", "enc_attn_mask", ",", "mems", "=", "mems", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.decoder_forward": [[677, 693], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "txl.TXL._forward", "dec_inp.size", "dec_inp.size", "mems[].size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL._forward"], ["", "def", "decoder_forward", "(", "self", ",", "dec_inp", ",", "dec_len", ",", "dec_txl", ",", "dec_params", ",", "mems", "=", "None", ")", ":", "\n", "        ", "bsz", ",", "qlen", "=", "dec_inp", ".", "size", "(", "0", ")", ",", "dec_inp", ".", "size", "(", "1", ")", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "1", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "ones", "=", "torch", ".", "ones", "(", "(", "qlen", ",", "klen", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "dec_inp", ".", "device", ",", "requires_grad", "=", "False", ")", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "mask_len", "=", "klen", "-", "self", ".", "tgt_mem_len", "\n", "if", "mask_len", ">", "0", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "-", "mask_len", "\n", "", "else", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "\n", "", "dec_attn_mask", "=", "(", "1", "-", "(", "torch", ".", "triu", "(", "ones", ",", "diagonal", "=", "1", "+", "mlen", ")", "+", "torch", ".", "tril", "(", "ones", ",", "-", "mask_shift_len", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "dec_attn_mask", "=", "(", "1", "-", "torch", ".", "triu", "(", "ones", ",", "diagonal", "=", "1", "+", "mlen", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "self", ".", "_forward", "(", "dec_inp", ",", "dec_len", ",", "dec_txl", ",", "dec_params", ",", "attn_mask", "=", "dec_attn_mask", ",", "mems", "=", "mems", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.increase_input_size": [[694, 704], ["txl.TXL.get_enc_dim", "super().increase_input_size", "txl.TXL.get_enc_dim", "txl.TXL.predict_net.increase_input_size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size"], ["", "def", "increase_input_size", "(", "self", ",", "config", ")", ":", "\n", "        ", "old_p_enc_dim", ",", "old_g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "super", "(", "TXL", ",", "self", ")", ".", "increase_input_size", "(", "config", ")", "\n", "new_p_enc_dim", ",", "new_g_enc_dim", "=", "self", ".", "get_enc_dim", "(", ")", "\n", "\n", "# increase predict network", "\n", "if", "self", ".", "add_enc", "and", "(", "new_g_enc_dim", "!=", "old_g_enc_dim", "or", "new_p_enc_dim", "!=", "old_p_enc_dim", ")", ":", "\n", "            ", "self", ".", "predict_net", ".", "increase_input_size", "(", "\n", "self", ".", "predict_net", ".", "pattern_dim", "+", "new_p_enc_dim", "-", "old_p_enc_dim", ",", "\n", "self", ".", "predict_net", ".", "graph_dim", "+", "new_g_enc_dim", "-", "old_g_enc_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.increase_net": [[705, 758], ["txl.TXL.get_emb_dim", "txl.TXL.create_net", "txl.TXL.create_params", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "txl.TXL.create_net", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "new_g_rnn.load_state_dict", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "g_params[].data.copy_", "txl.TXL.create_params", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "old_g_rnn.state_dict", "new_p_rnn.load_state_dict", "p_params[].data.copy_", "old_p_rnn.state_dict"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.create_params", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.create_params"], ["", "", "def", "increase_net", "(", "self", ",", "config", ")", ":", "\n", "        ", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "self", ".", "d_model", ",", "num_layers", "=", "config", "[", "\"txl_graph_num_layers\"", "]", ",", "\n", "d_model", "=", "self", ".", "d_model", ",", "d_inner", "=", "config", "[", "\"txl_d_inner\"", "]", ",", "\n", "n_head", "=", "config", "[", "\"txl_n_head\"", "]", ",", "d_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "\n", "tgt_len", "=", "self", ".", "tgt_len", ",", "ext_len", "=", "self", ".", "ext_len", ",", "mem_len", "=", "self", ".", "mem_len", ",", "\n", "attn_type", "=", "self", ".", "attn_type", ",", "pre_lnorm", "=", "config", "[", "\"txl_pre_lnorm\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "g_net", ")", ">=", "len", "(", "self", ".", "g_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "old_g_rnn", ",", "new_g_rnn", "in", "zip", "(", "self", ".", "g_net", ",", "g_net", ")", ":", "\n", "                ", "new_g_rnn", ".", "load_state_dict", "(", "old_g_rnn", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "g_net", "\n", "self", ".", "g_net", "=", "g_net", "\n", "\n", "if", "self", ".", "share_arch", ":", "\n", "            ", "self", ".", "p_net", "=", "self", ".", "g_net", "\n", "", "else", ":", "\n", "            ", "p_net", ",", "p_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "self", ".", "d_model", ",", "num_layers", "=", "config", "[", "\"txl_pattern_num_layers\"", "]", ",", "\n", "d_model", "=", "self", ".", "d_model", ",", "d_inner", "=", "config", "[", "\"txl_d_inner\"", "]", ",", "\n", "n_head", "=", "config", "[", "\"txl_n_head\"", "]", ",", "d_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "\n", "tgt_len", "=", "self", ".", "tgt_len", ",", "ext_len", "=", "self", ".", "ext_len", ",", "mem_len", "=", "self", ".", "mem_len", ",", "\n", "attn_type", "=", "self", ".", "attn_type", ",", "pre_lnorm", "=", "config", "[", "\"txl_pre_lnorm\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ",", "dropatt", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "p_net", ")", ">=", "len", "(", "self", ".", "p_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "old_p_rnn", ",", "new_p_rnn", "in", "zip", "(", "self", ".", "p_net", ",", "p_net", ")", ":", "\n", "                    ", "new_p_rnn", ".", "load_state_dict", "(", "old_p_rnn", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "p_net", "\n", "self", ".", "p_net", "=", "p_net", "\n", "\n", "", "g_params", "=", "self", ".", "create_params", "(", "\n", "num_layers", "=", "config", "[", "\"txl_graph_num_layers\"", "]", ",", "attn_type", "=", "self", ".", "attn_type", ",", "\n", "n_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "d_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "max_tgt_len", "=", "self", ".", "max_tgt_len", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "k", "in", "self", ".", "g_params", ":", "\n", "                ", "g_params", "[", "k", "]", ".", "data", ".", "copy_", "(", "self", ".", "g_params", "[", "k", "]", ")", "\n", "", "", "del", "self", ".", "g_params", "\n", "self", ".", "g_params", "=", "g_params", "\n", "\n", "if", "self", ".", "share_arch", ":", "\n", "            ", "self", ".", "p_params", "=", "self", ".", "g_params", "\n", "", "else", ":", "\n", "            ", "p_params", "=", "self", ".", "g_params", "if", "self", ".", "share_arch", "else", "self", ".", "create_params", "(", "\n", "num_layers", "=", "config", "[", "\"txl_pattern_num_layers\"", "]", ",", "attn_type", "=", "self", ".", "attn_type", ",", "\n", "n_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "d_head", "=", "config", "[", "\"txl_d_head\"", "]", ",", "max_tgt_len", "=", "self", ".", "max_tgt_len", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "k", "in", "self", ".", "p_params", ":", "\n", "                    ", "p_params", "[", "k", "]", ".", "data", ".", "copy_", "(", "self", ".", "p_params", "[", "k", "]", ")", "\n", "", "", "del", "self", ".", "p_params", "\n", "self", ".", "p_params", "=", "p_params", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.forward": [[759, 813], ["pattern_len.size", "txl.TXL.get_filter_gate", "txl.TXL.get_emb", "txl.TXL.p_emb_proj().mul_", "txl.TXL.g_emb_proj().mul_", "utils.segment_data", "utils.segment_length", "utils.segment_data", "utils.segment_length", "list", "enumerate", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "list", "enumerate", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "txl.TXL.predict_net", "txl.TXL.masked_fill_", "zip", "txl.TXL.encoder_forward", "list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip", "txl.TXL.encoder_forward", "list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "txl.TXL.get_enc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "txl.TXL.p_emb_proj", "txl.TXL.g_emb_proj", "txl.TXL.init_mems", "txl.TXL.init_mems", "graph_enc.masked_fill_", "len", "txl.TXL.size", "utils.batch_convert_len_to_mask", "len", "txl.TXL.size", "utils.batch_convert_len_to_mask", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_filter_gate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_emb", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.segment_data", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.segment_length", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.segment_data", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.segment_length", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.encoder_forward", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.encoder_forward", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_enc", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.init_mems", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.txl.TXL.init_mems", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "# data, target, *mems", "\n", "# nn.DataParallel does not allow size(0) tensors to be broadcasted.", "\n", "# So, have to initialize size(0) mems inside the model forward.", "\n", "# Moreover, have to return new_mems to allow nn.DataParallel to piece", "\n", "# them together.", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "\n", "gate", "=", "self", ".", "get_filter_gate", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "zero_mask", "=", "(", "gate", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "if", "gate", "is", "not", "None", "else", "None", "\n", "pattern_emb", ",", "graph_emb", "=", "self", ".", "get_emb", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "            ", "graph_emb", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "\n", "", "pattern_emb", "=", "self", ".", "p_emb_proj", "(", "pattern_emb", ")", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "graph_emb", "=", "self", ".", "g_emb_proj", "(", "graph_emb", ")", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "\n", "pattern_segments", "=", "segment_data", "(", "pattern_emb", ",", "self", ".", "tgt_len", ")", "\n", "pattern_seg_lens", "=", "segment_length", "(", "pattern_len", ",", "self", ".", "tgt_len", ")", "\n", "graph_segments", "=", "segment_data", "(", "graph_emb", ",", "self", ".", "tgt_len", ")", "\n", "graph_seg_lens", "=", "segment_length", "(", "graph_len", ",", "self", ".", "tgt_len", ")", "\n", "\n", "pattern_outputs", "=", "list", "(", ")", "\n", "for", "i", ",", "(", "pattern_seg", ",", "pattern_seg_len", ")", "in", "enumerate", "(", "zip", "(", "pattern_segments", ",", "pattern_seg_lens", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "pattern_mems", "=", "self", ".", "init_mems", "(", "len", "(", "self", ".", "p_net", ")", ",", "pattern_seg", ")", "\n", "", "pattern_output", ",", "pattern_mems", "=", "self", ".", "encoder_forward", "(", "pattern_seg", ",", "pattern_seg_len", ",", "self", ".", "p_net", ",", "self", ".", "p_params", ",", "mems", "=", "pattern_mems", ")", "\n", "pattern_outputs", ".", "append", "(", "pattern_output", ")", "\n", "", "pattern_output", "=", "torch", ".", "cat", "(", "pattern_outputs", ",", "dim", "=", "1", ")", "[", ":", ",", ":", "pattern_emb", ".", "size", "(", "1", ")", "]", "\n", "# some segments may only have padded elements, we need to set them as 0 manually", "\n", "pattern_mask", "=", "(", "batch_convert_len_to_mask", "(", "pattern_len", ",", "max_seq_len", "=", "pattern_output", ".", "size", "(", "1", ")", ")", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pattern_output", ".", "masked_fill_", "(", "pattern_mask", ",", "0.0", ")", "\n", "\n", "graph_outputs", "=", "list", "(", ")", "\n", "for", "i", ",", "(", "graph_seg", ",", "graph_seg_len", ")", "in", "enumerate", "(", "zip", "(", "graph_segments", ",", "graph_seg_lens", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "graph_mems", "=", "self", ".", "init_mems", "(", "len", "(", "self", ".", "g_net", ")", ",", "graph_seg", ")", "\n", "", "graph_output", ",", "graph_mems", "=", "self", ".", "encoder_forward", "(", "graph_seg", ",", "graph_seg_len", ",", "self", ".", "g_net", ",", "self", ".", "g_params", ",", "mems", "=", "graph_mems", ")", "\n", "graph_outputs", ".", "append", "(", "graph_output", ")", "\n", "", "graph_output", "=", "torch", ".", "cat", "(", "graph_outputs", ",", "dim", "=", "1", ")", "[", ":", ",", ":", "graph_emb", ".", "size", "(", "1", ")", "]", "\n", "# some segments may only have padded elements, we need to set them as 0 manually", "\n", "graph_mask", "=", "(", "batch_convert_len_to_mask", "(", "graph_len", ",", "max_seq_len", "=", "graph_output", ".", "size", "(", "1", ")", ")", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "graph_output", ".", "masked_fill_", "(", "graph_mask", ",", "0.0", ")", "\n", "\n", "if", "self", ".", "add_enc", ":", "\n", "            ", "pattern_enc", ",", "graph_enc", "=", "self", ".", "get_enc", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "                ", "graph_enc", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "", "pattern_output", "=", "torch", ".", "cat", "(", "[", "pattern_enc", ",", "pattern_output", "]", ",", "dim", "=", "2", ")", "\n", "graph_output", "=", "torch", ".", "cat", "(", "[", "graph_enc", ",", "graph_output", "]", ",", "dim", "=", "2", ")", "\n", "\n", "", "pred", "=", "self", ".", "predict_net", "(", "pattern_output", ",", "pattern_len", ",", "graph_output", ",", "graph_len", ")", "\n", "\n", "return", "pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.filternet.MaxGatedFilterNet.__init__": [[25, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaxGatedFilterNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.filternet.MaxGatedFilterNet.forward": [[28, 34], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "max_x.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "p_x", ",", "g_x", ")", ":", "\n", "        ", "max_x", "=", "torch", ".", "max", "(", "p_x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "if", "max_x", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "return", "g_x", "<=", "max_x", "\n", "", "else", ":", "\n", "            ", "return", "(", "g_x", "<=", "max_x", ")", ".", "all", "(", "keepdim", "=", "True", ",", "dim", "=", "2", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.__init__": [[10, 44], ["basemodel.EdgeSeqModel.__init__", "cnn.CNN.get_emb_dim", "cnn.CNN.create_net", "cnn.CNN.create_predict_net", "len", "len", "ValueError", "len", "len", "ValueError", "len", "len", "ValueError", "cnn.CNN.create_net"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.BaseModel.create_predict_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "len", "(", "config", "[", "\"cnn_conv_kernel_sizes\"", "]", ")", "!=", "len", "(", "config", "[", "\"cnn_pool_kernel_sizes\"", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Error: the size of cnn_conv_kernel_sizes is not equal to that of cnn_pool_kernel_sizes.\"", ")", "\n", "", "if", "len", "(", "config", "[", "\"cnn_conv_strides\"", "]", ")", "!=", "len", "(", "config", "[", "\"cnn_pool_strides\"", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Error: the size of cnn_conv_strides is not equal to that of cnn_pool_strides.\"", ")", "\n", "", "if", "len", "(", "config", "[", "\"cnn_conv_kernel_sizes\"", "]", ")", "!=", "len", "(", "config", "[", "\"cnn_conv_strides\"", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Error: the size of cnn_conv_kernel_sizes is not equal to that of cnn_conv_strides.\"", ")", "\n", "\n", "# create networks", "\n", "", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "self", ".", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "g_emb_dim", ",", "\n", "conv_channels", "=", "config", "[", "\"cnn_conv_channels\"", "]", ",", "\n", "conv_kernel_sizes", "=", "config", "[", "\"cnn_conv_kernel_sizes\"", "]", ",", "conv_paddings", "=", "config", "[", "\"cnn_conv_paddings\"", "]", ",", "\n", "conv_strides", "=", "config", "[", "\"cnn_conv_strides\"", "]", ",", "\n", "pool_kernel_sizes", "=", "config", "[", "\"cnn_pool_kernel_sizes\"", "]", ",", "pool_paddings", "=", "config", "[", "\"cnn_pool_paddings\"", "]", ",", "\n", "pool_strides", "=", "config", "[", "\"cnn_pool_strides\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "p_net", ",", "p_dim", "=", "(", "self", ".", "g_net", ",", "g_dim", ")", "if", "self", ".", "share_arch", "else", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "p_emb_dim", ",", "\n", "conv_channels", "=", "config", "[", "\"cnn_conv_channels\"", "]", ",", "\n", "conv_kernel_sizes", "=", "config", "[", "\"cnn_conv_kernel_sizes\"", "]", ",", "conv_paddings", "=", "config", "[", "\"cnn_conv_paddings\"", "]", ",", "\n", "conv_strides", "=", "config", "[", "\"cnn_conv_strides\"", "]", ",", "\n", "pool_kernel_sizes", "=", "config", "[", "\"cnn_pool_kernel_sizes\"", "]", ",", "pool_paddings", "=", "config", "[", "\"cnn_pool_paddings\"", "]", ",", "\n", "pool_strides", "=", "config", "[", "\"cnn_pool_strides\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# create predict layers", "\n", "self", ".", "predict_net", "=", "self", ".", "create_predict_net", "(", "config", "[", "\"predict_net\"", "]", ",", "\n", "pattern_dim", "=", "p_dim", ",", "graph_dim", "=", "g_dim", ",", "hidden_dim", "=", "config", "[", "\"predict_net_hidden_dim\"", "]", ",", "\n", "num_heads", "=", "config", "[", "\"predict_net_num_heads\"", "]", ",", "recurrent_steps", "=", "config", "[", "\"predict_net_recurrent_steps\"", "]", ",", "\n", "mem_len", "=", "config", "[", "\"predict_net_mem_len\"", "]", ",", "mem_init", "=", "config", "[", "\"predict_net_mem_init\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net": [[45, 89], ["kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.ModuleList.modules", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList.add_module", "isinstance", "collections.OrderedDict", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "isinstance", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "utils.map_activation_str_to_layer", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer"], ["", "def", "create_net", "(", "self", ",", "name", ",", "input_dim", ",", "**", "kw", ")", ":", "\n", "        ", "conv_kernel_sizes", "=", "kw", ".", "get", "(", "\"conv_kernel_sizes\"", ",", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "conv_paddings", "=", "kw", ".", "get", "(", "\"conv_paddings\"", ",", "(", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "conv_channels", "=", "kw", ".", "get", "(", "\"conv_channels\"", ",", "(", "64", ",", "64", ",", "64", ")", ")", "\n", "conv_strides", "=", "kw", ".", "get", "(", "\"conv_strides\"", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "pool_kernel_sizes", "=", "kw", ".", "get", "(", "\"pool_kernel_sizes\"", ",", "(", "2", ",", "3", ",", "4", ")", ")", "\n", "pool_strides", "=", "kw", ".", "get", "(", "\"pool_strides\"", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "pool_paddings", "=", "kw", ".", "get", "(", "\"pool_paddings\"", ",", "(", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "act_func", "=", "kw", ".", "get", "(", "\"act_func\"", ",", "\"relu\"", ")", "\n", "dropout", "=", "kw", ".", "get", "(", "\"dropout\"", ",", "0.0", ")", "\n", "\n", "cnns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "conv_kernel_size", "in", "enumerate", "(", "conv_kernel_sizes", ")", ":", "\n", "            ", "conv_stride", "=", "conv_strides", "[", "i", "]", "\n", "conv_padding", "=", "conv_paddings", "[", "i", "]", "\n", "if", "conv_padding", "==", "-", "1", ":", "\n", "                ", "conv_padding", "=", "conv_kernel_size", "//", "2", "\n", "\n", "", "pool_kernel_size", "=", "pool_kernel_sizes", "[", "i", "]", "\n", "pool_padding", "=", "pool_paddings", "[", "i", "]", "\n", "pool_stride", "=", "pool_strides", "[", "i", "]", "\n", "if", "pool_padding", "==", "-", "1", ":", "\n", "                ", "pool_padding", "=", "pool_kernel_size", "//", "2", "\n", "\n", "", "cnn", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"conv\"", ",", "nn", ".", "Conv1d", "(", "conv_channels", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "input_dim", ",", "conv_channels", "[", "i", "]", ",", "\n", "kernel_size", "=", "conv_kernel_size", ",", "stride", "=", "conv_stride", ",", "padding", "=", "conv_padding", ")", ")", ",", "\n", "(", "\"act\"", ",", "map_activation_str_to_layer", "(", "act_func", ")", ")", ",", "\n", "(", "\"pool\"", ",", "nn", ".", "MaxPool1d", "(", "\n", "kernel_size", "=", "pool_kernel_size", ",", "stride", "=", "pool_stride", ",", "padding", "=", "pool_padding", ")", ")", ",", "\n", "# (\"norm\", nn.BatchNorm1d(conv_channels[i])),", "\n", "(", "\"drop\"", ",", "nn", ".", "Dropout", "(", "dropout", ")", ")", "]", ")", ")", "\n", "cnns", ".", "add_module", "(", "\"%s_cnn%d\"", "%", "(", "name", ",", "i", ")", ",", "cnn", ")", "\n", "num_features", "=", "conv_channels", "[", "i", "]", "\n", "\n", "# init", "\n", "", "for", "m", "in", "cnns", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "act_func", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "return", "cnns", ",", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size": [[90, 92], ["super().increase_input_size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_input_size"], ["", "def", "increase_input_size", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CNN", ",", "self", ")", ".", "increase_input_size", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.increase_net": [[93, 127], ["cnn.CNN.get_emb_dim", "cnn.CNN.create_net", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "cnn.CNN.create_net", "new_g_cnn.load_state_dict", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "old_g_cnn.state_dict", "new_p_cnn.load_state_dict", "old_p_cnn.state_dict"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.EdgeSeqModel.get_emb_dim", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.create_net"], ["", "def", "increase_net", "(", "self", ",", "config", ")", ":", "\n", "        ", "p_emb_dim", ",", "g_emb_dim", "=", "self", ".", "get_emb_dim", "(", ")", "\n", "g_net", ",", "g_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"graph\"", ",", "input_dim", "=", "g_emb_dim", ",", "\n", "conv_channels", "=", "config", "[", "\"cnn_conv_channels\"", "]", ",", "\n", "conv_kernel_sizes", "=", "config", "[", "\"cnn_conv_kernel_sizes\"", "]", ",", "conv_paddings", "=", "config", "[", "\"cnn_conv_paddings\"", "]", ",", "\n", "conv_strides", "=", "config", "[", "\"cnn_conv_strides\"", "]", ",", "\n", "pool_kernel_sizes", "=", "config", "[", "\"cnn_pool_kernel_sizes\"", "]", ",", "pool_paddings", "=", "config", "[", "\"cnn_pool_paddings\"", "]", ",", "\n", "pool_strides", "=", "config", "[", "\"cnn_pool_strides\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "g_net", ")", ">=", "len", "(", "self", ".", "g_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "old_g_cnn", ",", "new_g_cnn", "in", "zip", "(", "self", ".", "g_net", ",", "g_net", ")", ":", "\n", "                ", "new_g_cnn", ".", "load_state_dict", "(", "old_g_cnn", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "g_net", "\n", "self", ".", "g_net", "=", "g_net", "\n", "\n", "if", "self", ".", "share_arch", ":", "\n", "            ", "self", ".", "p_net", "=", "self", ".", "g_net", "\n", "", "else", ":", "\n", "            ", "p_net", ",", "p_dim", "=", "self", ".", "create_net", "(", "\n", "name", "=", "\"pattern\"", ",", "input_dim", "=", "p_emb_dim", ",", "\n", "conv_channels", "=", "config", "[", "\"cnn_conv_channels\"", "]", ",", "\n", "conv_kernel_sizes", "=", "config", "[", "\"cnn_conv_kernel_sizes\"", "]", ",", "conv_paddings", "=", "config", "[", "\"cnn_conv_paddings\"", "]", ",", "\n", "conv_strides", "=", "config", "[", "\"cnn_conv_strides\"", "]", ",", "\n", "pool_kernel_sizes", "=", "config", "[", "\"cnn_pool_kernel_sizes\"", "]", ",", "pool_paddings", "=", "config", "[", "\"cnn_pool_paddings\"", "]", ",", "\n", "pool_strides", "=", "config", "[", "\"cnn_pool_strides\"", "]", ",", "\n", "act_func", "=", "self", ".", "act_func", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "assert", "len", "(", "p_net", ")", ">=", "len", "(", "self", ".", "p_net", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "old_p_cnn", ",", "new_p_cnn", "in", "zip", "(", "self", ".", "p_net", ",", "p_net", ")", ":", "\n", "                    ", "new_p_cnn", ".", "load_state_dict", "(", "old_p_cnn", ".", "state_dict", "(", ")", ")", "\n", "", "", "del", "self", ".", "p_net", "\n", "self", ".", "p_net", "=", "p_net", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.cnn.CNN.forward": [[128, 158], ["pattern_len.size", "cnn.CNN.get_filter_gate", "cnn.CNN.get_emb", "pattern_emb.transpose", "pattern_output.transpose.transpose.transpose", "graph_emb.transpose", "graph_output.transpose.transpose.transpose", "cnn.CNN.predict_net", "graph_emb.masked_fill_", "p_cnn", "g_cnn", "g_cnn.size", "pattern_output.transpose.transpose.size", "g_cnn.size", "graph_output.transpose.transpose.size"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_filter_gate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.basemodel.GraphAdjModel.get_emb"], ["", "", "def", "forward", "(", "self", ",", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", ":", "\n", "        ", "bsz", "=", "pattern_len", ".", "size", "(", "0", ")", "\n", "\n", "gate", "=", "self", ".", "get_filter_gate", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "zero_mask", "=", "(", "gate", "==", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "if", "gate", "is", "not", "None", "else", "None", "\n", "pattern_emb", ",", "graph_emb", "=", "self", ".", "get_emb", "(", "pattern", ",", "pattern_len", ",", "graph", ",", "graph_len", ")", "\n", "if", "zero_mask", "is", "not", "None", ":", "\n", "            ", "graph_emb", ".", "masked_fill_", "(", "zero_mask", ",", "0.0", ")", "\n", "\n", "", "pattern_output", "=", "pattern_emb", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "p_cnn", "in", "self", ".", "p_net", ":", "\n", "            ", "o", "=", "p_cnn", "(", "pattern_output", ")", "\n", "if", "o", ".", "size", "(", ")", "==", "pattern_output", ".", "size", "(", ")", ":", "\n", "                ", "pattern_output", "=", "o", "+", "pattern_output", "\n", "", "else", ":", "\n", "                ", "pattern_output", "=", "o", "\n", "", "", "pattern_output", "=", "pattern_output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "graph_output", "=", "graph_emb", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "g_cnn", "in", "self", ".", "g_net", ":", "\n", "            ", "o", "=", "g_cnn", "(", "graph_output", ")", "\n", "if", "o", ".", "size", "(", ")", "==", "graph_output", ".", "size", "(", ")", ":", "\n", "                ", "graph_output", "=", "o", "+", "graph_output", "\n", "", "else", ":", "\n", "                ", "graph_output", "=", "o", "\n", "", "", "graph_output", "=", "graph_output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "pred", "=", "self", ".", "predict_net", "(", "pattern_output", ",", "pattern_len", ",", "graph_output", ",", "graph_len", ")", "\n", "\n", "return", "pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.compute_mae": [[19, 22], ["numpy.absolute", "np.absolute.mean"], "function", ["None"], ["def", "compute_mae", "(", "predict", ",", "count", ")", ":", "\n", "    ", "error", "=", "np", ".", "absolute", "(", "predict", "-", "count", ")", "\n", "return", "error", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.compute_rmse": [[23, 26], ["numpy.power", "numpy.power", "np.power.mean"], "function", ["None"], ["", "def", "compute_rmse", "(", "predict", ",", "count", ")", ":", "\n", "    ", "error", "=", "np", ".", "power", "(", "predict", "-", "count", ",", "2", ")", "\n", "return", "np", ".", "power", "(", "error", ".", "mean", "(", ")", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.compute_p_r_f1": [[27, 30], ["sklearn.metrics.precision_recall_fscore_support"], "function", ["None"], ["", "def", "compute_p_r_f1", "(", "predict", ",", "count", ")", ":", "\n", "    ", "p", ",", "r", ",", "f1", ",", "_", "=", "precision_recall_fscore_support", "(", "predict", ",", "count", ",", "average", "=", "\"binary\"", ")", "\n", "return", "p", ",", "r", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.compute_tp": [[31, 36], ["numpy.count_nonzero", "numpy.count_nonzero"], "function", ["None"], ["", "def", "compute_tp", "(", "predict", ",", "count", ")", ":", "\n", "    ", "true_count", "=", "count", "==", "1", "\n", "true_pred", "=", "predict", "==", "1", "\n", "true_pred_count", "=", "true_count", "*", "true_pred", "\n", "return", "np", ".", "count_nonzero", "(", "true_pred_count", ")", "/", "np", ".", "count_nonzero", "(", "true_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.parse_pattern_info": [[40, 43], ["re.findall", "int", "int", "int", "int"], "function", ["None"], ["", "def", "parse_pattern_info", "(", "x", ")", ":", "\n", "    ", "p", "=", "re", ".", "findall", "(", "r\"N(\\d+)_E(\\d+)_NL(\\d+)_EL(\\d+)\"", ",", "x", ")", "[", "0", "]", "\n", "return", "{", "\"V\"", ":", "int", "(", "p", "[", "0", "]", ")", ",", "\"E\"", ":", "int", "(", "p", "[", "1", "]", ")", ",", "\"VL\"", ":", "int", "(", "p", "[", "2", "]", ")", ",", "\"EL\"", ":", "int", "(", "p", "[", "3", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.parse_graph_info": [[44, 47], ["re.findall", "int", "int", "int", "int", "float"], "function", ["None"], ["", "def", "parse_graph_info", "(", "x", ")", ":", "\n", "    ", "g", "=", "re", ".", "findall", "(", "r\"N(\\d+)_E(\\d+)_NL(\\d+)_EL(\\d+)_A([\\d\\.]+)\"", ",", "x", ")", "[", "0", "]", "\n", "return", "{", "\"V\"", ":", "int", "(", "g", "[", "0", "]", ")", ",", "\"E\"", ":", "int", "(", "g", "[", "1", "]", ")", ",", "\"VL\"", ":", "int", "(", "g", "[", "2", "]", ")", ",", "\"EL\"", ":", "int", "(", "g", "[", "3", "]", ")", ",", "\"alpha\"", ":", "float", "(", "g", "[", "4", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_enc_len": [[51, 58], ["None"], "function", ["None"], ["", "def", "get_enc_len", "(", "x", ",", "base", "=", "10", ")", ":", "\n", "# return math.floor(math.log(x, base)+1.0)", "\n", "    ", "l", "=", "0", "\n", "while", "x", ":", "\n", "        ", "l", "+=", "1", "\n", "x", "=", "x", "//", "base", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.int2onehot": [[59, 77], ["isinstance", "np.array.reshape", "numpy.zeros", "numpy.any", "one_hot.transpose().reshape.transpose().reshape", "numpy.array", "numpy.where", "y.reshape", "numpy.arange().reshape", "one_hot.transpose().reshape.transpose", "numpy.arange"], "function", ["None"], ["", "def", "int2onehot", "(", "x", ",", "len_x", ",", "base", "=", "10", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "(", "int", ",", "list", ")", ")", ":", "\n", "        ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "", "x_shape", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ")", "\n", "one_hot", "=", "np", ".", "zeros", "(", "(", "len_x", "*", "base", ",", "x", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x", "=", "x", "%", "(", "base", "**", "len_x", ")", "\n", "idx", "=", "one_hot", ".", "shape", "[", "0", "]", "-", "base", "\n", "while", "np", ".", "any", "(", "x", ")", ":", "\n", "        ", "x", ",", "y", "=", "x", "//", "base", ",", "x", "%", "base", "\n", "cond", "=", "y", ".", "reshape", "(", "1", ",", "-", "1", ")", "==", "np", ".", "arange", "(", "0", ",", "base", ",", "dtype", "=", "y", ".", "dtype", ")", ".", "reshape", "(", "base", ",", "1", ")", "\n", "one_hot", "[", "idx", ":", "idx", "+", "base", "]", "=", "np", ".", "where", "(", "cond", ",", "1.0", ",", "0.0", ")", "\n", "idx", "-=", "base", "\n", "", "while", "idx", ">=", "0", ":", "\n", "        ", "one_hot", "[", "idx", "]", "=", "1.0", "\n", "idx", "-=", "base", "\n", "", "one_hot", "=", "one_hot", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "*", "x_shape", ",", "len_x", "*", "base", ")", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.segment_data": [[81, 90], ["torch.cat.size", "torch.split", "torch.split", "torch.split", "torch.split", "list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "def", "segment_data", "(", "data", ",", "max_len", ")", ":", "\n", "    ", "bsz", "=", "data", ".", "size", "(", "0", ")", "\n", "pad_len", "=", "max_len", "-", "data", ".", "size", "(", "1", ")", "%", "max_len", "\n", "if", "pad_len", "!=", "max_len", ":", "\n", "        ", "pad_size", "=", "list", "(", "data", ".", "size", "(", ")", ")", "\n", "pad_size", "[", "1", "]", "=", "pad_len", "\n", "zero_pad", "=", "torch", ".", "zeros", "(", "pad_size", ",", "device", "=", "data", ".", "device", ",", "dtype", "=", "data", ".", "dtype", ",", "requires_grad", "=", "False", ")", "\n", "data", "=", "torch", ".", "cat", "(", "[", "data", ",", "zero_pad", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "torch", ".", "split", "(", "data", ",", "max_len", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.segment_length": [[91, 101], ["data_len.size", "math.ceil", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "diff.masked_fill", "diff.masked_fill.masked_fill_", "torch.split", "torch.split", "torch.split", "torch.split", "data_len.view", "diff.masked_fill.view", "data_len.max().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "data_len.max"], "function", ["None"], ["", "def", "segment_length", "(", "data_len", ",", "max_len", ")", ":", "\n", "    ", "bsz", "=", "data_len", ".", "size", "(", "0", ")", "\n", "list_len", "=", "math", ".", "ceil", "(", "data_len", ".", "max", "(", ")", ".", "float", "(", ")", "/", "max_len", ")", "\n", "segment_lens", "=", "torch", ".", "arange", "(", "0", ",", "max_len", "*", "list_len", ",", "max_len", ",", "dtype", "=", "data_len", ".", "dtype", ",", "device", "=", "data_len", ".", "device", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "1", ",", "list_len", ")", "\n", "diff", "=", "data_len", ".", "view", "(", "-", "1", ",", "1", ")", "-", "segment_lens", "\n", "fill_max", "=", "diff", ">", "max_len", "\n", "fill_zero", "=", "diff", "<", "0", "\n", "segment_lens", "=", "diff", ".", "masked_fill", "(", "fill_max", ",", "max_len", ")", "\n", "segment_lens", ".", "masked_fill_", "(", "fill_zero", ",", "0", ")", "\n", "return", "torch", ".", "split", "(", "segment_lens", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "1", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.clones": [[102, 105], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "\"Produce N identical layers.\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.split_and_batchify_graph_feats": [[106, 128], ["graph_sizes.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "batched_graph_feats.size", "graph_sizes.min", "graph_sizes.max", "graph_sizes.view().tolist", "list", "enumerate", "batched_graph_feats.view", "torch.split", "torch.split", "torch.split", "torch.split", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "graph_sizes.view", "mask[].fill_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "split_and_batchify_graph_feats", "(", "batched_graph_feats", ",", "graph_sizes", ")", ":", "\n", "    ", "bsz", "=", "graph_sizes", ".", "size", "(", "0", ")", "\n", "dim", ",", "dtype", ",", "device", "=", "batched_graph_feats", ".", "size", "(", "-", "1", ")", ",", "batched_graph_feats", ".", "dtype", ",", "batched_graph_feats", ".", "device", "\n", "\n", "min_size", ",", "max_size", "=", "graph_sizes", ".", "min", "(", ")", ",", "graph_sizes", ".", "max", "(", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "bsz", ",", "max_size", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "min_size", "==", "max_size", ":", "\n", "        ", "return", "batched_graph_feats", ".", "view", "(", "bsz", ",", "max_size", ",", "-", "1", ")", ",", "mask", "\n", "", "else", ":", "\n", "        ", "graph_sizes_list", "=", "graph_sizes", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "unbatched_graph_feats", "=", "list", "(", "torch", ".", "split", "(", "batched_graph_feats", ",", "graph_sizes_list", ",", "dim", "=", "0", ")", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "graph_sizes_list", ")", ":", "\n", "            ", "if", "l", "==", "max_size", ":", "\n", "                ", "continue", "\n", "", "elif", "l", ">", "max_size", ":", "\n", "                ", "unbatched_graph_feats", "[", "i", "]", "=", "unbatched_graph_feats", "[", "i", "]", "[", ":", "max_size", "]", "\n", "", "else", ":", "\n", "                ", "mask", "[", "i", ",", "l", ":", "]", ".", "fill_", "(", "0", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "max_size", "-", "l", ",", "dim", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "unbatched_graph_feats", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "unbatched_graph_feats", "[", "i", "]", ",", "zeros", "]", ",", "dim", "=", "0", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "unbatched_graph_feats", ",", "dim", "=", "0", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.gather_indices_by_lens": [[129, 142], ["list", "len", "numpy.arange", "list.append", "list.append"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "", "def", "gather_indices_by_lens", "(", "lens", ")", ":", "\n", "    ", "result", "=", "list", "(", ")", "\n", "i", ",", "j", "=", "0", ",", "1", "\n", "max_j", "=", "len", "(", "lens", ")", "\n", "indices", "=", "np", ".", "arange", "(", "0", ",", "max_j", ")", "\n", "while", "j", "<", "max_j", ":", "\n", "        ", "if", "lens", "[", "i", "]", "!=", "lens", "[", "j", "]", ":", "\n", "            ", "result", ".", "append", "(", "indices", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "j", "+=", "1", "\n", "", "if", "i", "!=", "j", ":", "\n", "        ", "result", ".", "append", "(", "indices", "[", "i", ":", "j", "]", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_array_to_array": [[143, 157], ["numpy.zeros", "enumerate", "max", "len", "list"], "function", ["None"], ["", "def", "batch_convert_array_to_array", "(", "batch_array", ",", "max_seq_len", "=", "-", "1", ")", ":", "\n", "    ", "batch_lens", "=", "[", "v", ".", "shape", "[", "0", "]", "for", "v", "in", "batch_array", "]", "\n", "if", "max_seq_len", "==", "-", "1", ":", "\n", "        ", "max_seq_len", "=", "max", "(", "batch_lens", ")", "\n", "", "result", "=", "np", ".", "zeros", "(", "[", "len", "(", "batch_array", ")", ",", "max_seq_len", "]", "+", "list", "(", "batch_array", "[", "0", "]", ".", "shape", ")", "[", "1", ":", "]", ",", "dtype", "=", "batch_array", "[", "0", "]", ".", "dtype", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "batch_array", ")", ":", "\n", "        ", "len_t", "=", "batch_lens", "[", "i", "]", "\n", "if", "len_t", "<", "max_seq_len", ":", "\n", "            ", "result", "[", "i", ",", ":", "len_t", "]", "=", "t", "\n", "", "elif", "len_t", "==", "max_seq_len", ":", "\n", "            ", "result", "[", "i", "]", "=", "t", "\n", "", "else", ":", "\n", "            ", "result", "[", "i", "]", "=", "t", "[", ":", "max_seq_len", "]", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_tensor_to_tensor": [[158, 172], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "max", "result[].data.copy_", "len", "list", "result[].data.copy_", "result[].data.copy_", "batch_tensor[].size"], "function", ["None"], ["", "def", "batch_convert_tensor_to_tensor", "(", "batch_tensor", ",", "max_seq_len", "=", "-", "1", ")", ":", "\n", "    ", "batch_lens", "=", "[", "v", ".", "shape", "[", "0", "]", "for", "v", "in", "batch_tensor", "]", "\n", "if", "max_seq_len", "==", "-", "1", ":", "\n", "        ", "max_seq_len", "=", "max", "(", "batch_lens", ")", "\n", "", "result", "=", "torch", ".", "zeros", "(", "[", "len", "(", "batch_tensor", ")", ",", "max_seq_len", "]", "+", "list", "(", "batch_tensor", "[", "0", "]", ".", "size", "(", ")", ")", "[", "1", ":", "]", ",", "dtype", "=", "batch_tensor", "[", "0", "]", ".", "dtype", ",", "requires_grad", "=", "False", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "batch_tensor", ")", ":", "\n", "        ", "len_t", "=", "batch_lens", "[", "i", "]", "\n", "if", "len_t", "<", "max_seq_len", ":", "\n", "            ", "result", "[", "i", ",", ":", "len_t", "]", ".", "data", ".", "copy_", "(", "t", ")", "\n", "", "elif", "len_t", "==", "max_seq_len", ":", "\n", "            ", "result", "[", "i", "]", ".", "data", ".", "copy_", "(", "t", ")", "\n", "", "else", ":", "\n", "            ", "result", "[", "i", "]", ".", "data", ".", "copy_", "(", "t", "[", ":", "max_seq_len", "]", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask": [[173, 180], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "enumerate", "max", "mask[].fill_", "len"], "function", ["None"], ["", "def", "batch_convert_len_to_mask", "(", "batch_lens", ",", "max_seq_len", "=", "-", "1", ")", ":", "\n", "    ", "if", "max_seq_len", "==", "-", "1", ":", "\n", "        ", "max_seq_len", "=", "max", "(", "batch_lens", ")", "\n", "", "mask", "=", "torch", ".", "ones", "(", "(", "len", "(", "batch_lens", ")", ",", "max_seq_len", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "batch_lens", "[", "0", "]", ".", "device", ",", "requires_grad", "=", "False", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "batch_lens", ")", ":", "\n", "        ", "mask", "[", "i", ",", "l", ":", "]", ".", "fill_", "(", "0", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.convert_dgl_graph_to_edgeseq": [[181, 189], ["graph.all_edges", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_len.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "convert_dgl_graph_to_edgeseq", "(", "graph", ",", "x_emb", ",", "x_len", ",", "e_emb", ")", ":", "\n", "    ", "uid", ",", "vid", ",", "eid", "=", "graph", ".", "all_edges", "(", "form", "=", "\"all\"", ",", "order", "=", "\"srcdst\"", ")", "\n", "e", "=", "e_emb", "[", "eid", "]", "\n", "if", "x_emb", "is", "not", "None", ":", "\n", "        ", "u", ",", "v", "=", "x_emb", "[", "uid", "]", ",", "x_emb", "[", "vid", "]", "\n", "e", "=", "torch", ".", "cat", "(", "[", "u", ",", "v", ",", "e", "]", ",", "dim", "=", "1", ")", "\n", "", "e_len", "=", "torch", ".", "tensor", "(", "graph", ".", "batch_num_edges", ",", "dtype", "=", "x_len", ".", "dtype", ",", "device", "=", "x_len", ".", "device", ")", ".", "view", "(", "x_len", ".", "size", "(", ")", ")", "\n", "return", "e", ",", "e_len", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.mask_seq_by_len": [[190, 197], ["list", "x.size", "len_x.max", "utils.batch_convert_len_to_mask", "batch_convert_len_to_mask.view", "len"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.batch_convert_len_to_mask"], ["", "def", "mask_seq_by_len", "(", "x", ",", "len_x", ")", ":", "\n", "    ", "x_size", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "if", "x_size", "[", "1", "]", "==", "len_x", ".", "max", "(", ")", ":", "\n", "        ", "mask", "=", "batch_convert_len_to_mask", "(", "len_x", ")", "\n", "mask_size", "=", "x_size", "[", "0", ":", "2", "]", "+", "[", "1", "]", "*", "(", "len", "(", "x_size", ")", "-", "2", ")", "\n", "x", "=", "x", "*", "mask", ".", "view", "(", "*", "mask_size", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.extend_dimensions": [[198, 276], ["isinstance", "old_layer.weight.size", "isinstance", "torch.Linear", "isinstance", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.init.zeros_", "len", "torch.LayerNorm", "nn.LSTM.weight[].data.copy_", "nn.LSTM.weight[].data.copy_", "torch.init.zeros_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.init.ones_", "torch.init.zeros_", "torch.LSTM", "nn.LSTM.bias[].data.copy_", "nn.LSTM.bias[].data.copy_", "nn.LSTM.weight[].data.copy_", "nn.LSTM.bias[].data.copy_", "nn.LSTM.weight[].data.copy_", "nn.LSTM.bias[].data.copy_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "getattr", "getattr", "torch.init.zeros_", "getattr", "getattr", "new_weight[].data.copy_", "new_weight[].data.copy_", "torch.init.zeros_", "new_bias[].data.copy_", "new_bias[].data.copy_"], "function", ["None"], ["", "def", "extend_dimensions", "(", "old_layer", ",", "new_input_dim", "=", "-", "1", ",", "new_output_dim", "=", "-", "1", ",", "upper", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "old_layer", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "old_output_dim", ",", "old_input_dim", "=", "old_layer", ".", "weight", ".", "size", "(", ")", "\n", "if", "new_input_dim", "==", "-", "1", ":", "\n", "            ", "new_input_dim", "=", "old_input_dim", "\n", "", "if", "new_output_dim", "==", "-", "1", ":", "\n", "            ", "new_output_dim", "=", "old_output_dim", "\n", "", "assert", "new_input_dim", ">=", "old_input_dim", "and", "new_output_dim", ">=", "old_output_dim", "\n", "\n", "if", "new_input_dim", "!=", "old_input_dim", "or", "new_output_dim", "!=", "old_output_dim", ":", "\n", "            ", "use_bias", "=", "old_layer", ".", "bias", "is", "not", "None", "\n", "new_layer", "=", "nn", ".", "Linear", "(", "new_input_dim", ",", "new_output_dim", ",", "bias", "=", "use_bias", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "new_layer", ".", "weight", ")", "\n", "if", "upper", ":", "\n", "                    ", "new_layer", ".", "weight", "[", ":", "old_output_dim", ",", ":", "old_input_dim", "]", ".", "data", ".", "copy_", "(", "old_layer", ".", "weight", ")", "\n", "", "else", ":", "\n", "                    ", "new_layer", ".", "weight", "[", "-", "old_output_dim", ":", ",", "-", "old_input_dim", ":", "]", ".", "data", ".", "copy_", "(", "old_layer", ".", "weight", ")", "\n", "", "if", "use_bias", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "new_layer", ".", "bias", ")", "\n", "if", "upper", ":", "\n", "                        ", "new_layer", ".", "bias", "[", ":", "old_output_dim", "]", ".", "data", ".", "copy_", "(", "old_layer", ".", "bias", ")", "\n", "", "else", ":", "\n", "                        ", "new_layer", ".", "bias", "[", "-", "old_output_dim", ":", "]", ".", "data", ".", "copy_", "(", "old_layer", ".", "bias", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "new_layer", "=", "old_layer", "\n", "", "", "elif", "isinstance", "(", "old_layer", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "old_input_dim", "=", "old_layer", ".", "normalized_shape", "\n", "if", "len", "(", "old_input_dim", ")", "!=", "1", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "old_input_dim", "=", "old_input_dim", "[", "0", "]", "\n", "assert", "new_input_dim", ">=", "old_input_dim", "\n", "if", "new_input_dim", "!=", "old_input_dim", "and", "old_layer", ".", "elementwise_affine", ":", "\n", "            ", "new_layer", "=", "nn", ".", "LayerNorm", "(", "new_input_dim", ",", "elementwise_affine", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "new_layer", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "new_layer", ".", "bias", ")", "\n", "if", "upper", ":", "\n", "                    ", "new_layer", ".", "weight", "[", ":", "old_input_dim", "]", ".", "data", ".", "copy_", "(", "old_layer", ".", "weight", ")", "\n", "new_layer", ".", "bias", "[", ":", "old_input_dim", "]", ".", "data", ".", "copy_", "(", "old_layer", ".", "bias", ")", "\n", "", "else", ":", "\n", "                    ", "new_layer", ".", "weight", "[", "-", "old_input_dim", ":", "]", ".", "data", ".", "copy_", "(", "old_layer", ".", "weight", ")", "\n", "new_layer", ".", "bias", "[", "-", "old_input_dim", ":", "]", ".", "data", ".", "copy_", "(", "old_layer", ".", "bias", ")", "\n", "", "", "", "else", ":", "\n", "            ", "new_layer", "=", "old_layer", "\n", "", "", "elif", "isinstance", "(", "old_layer", ",", "nn", ".", "LSTM", ")", ":", "\n", "        ", "old_input_dim", ",", "old_output_dim", "=", "old_layer", ".", "input_size", ",", "old_layer", ".", "hidden_size", "\n", "if", "new_input_dim", "==", "-", "1", ":", "\n", "            ", "new_input_dim", "=", "old_input_dim", "\n", "", "if", "new_output_dim", "==", "-", "1", ":", "\n", "            ", "new_output_dim", "=", "old_output_dim", "\n", "", "assert", "new_input_dim", ">=", "old_input_dim", "and", "new_output_dim", ">=", "old_output_dim", "\n", "\n", "if", "new_input_dim", "!=", "old_input_dim", "or", "new_output_dim", "!=", "old_output_dim", ":", "\n", "            ", "new_layer", "=", "nn", ".", "LSTM", "(", "new_input_dim", ",", "new_output_dim", ",", "\n", "num_layers", "=", "old_layer", ".", "num_layers", ",", "bidirectional", "=", "old_layer", ".", "bidirectional", ",", "\n", "batch_first", "=", "old_layer", ".", "batch_first", ",", "bias", "=", "old_layer", ".", "bias", ")", "\n", "for", "layer_weights", "in", "new_layer", ".", "_all_weights", ":", "\n", "                ", "for", "w", "in", "layer_weights", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "if", "\"weight\"", "in", "w", ":", "\n", "                            ", "new_weight", "=", "getattr", "(", "new_layer", ",", "w", ")", "\n", "old_weight", "=", "getattr", "(", "old_layer", ",", "w", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "new_weight", ")", "\n", "if", "upper", ":", "\n", "                                ", "new_weight", "[", ":", "old_weight", ".", "shape", "[", "0", "]", ",", ":", "old_weight", ".", "shape", "[", "1", "]", "]", ".", "data", ".", "copy_", "(", "old_weight", ")", "\n", "", "else", ":", "\n", "                                ", "new_weight", "[", "-", "old_weight", ".", "shape", "[", "0", "]", ":", ",", "-", "old_weight", ".", "shape", "[", "1", "]", ":", "]", ".", "data", ".", "copy_", "(", "old_weight", ")", "\n", "", "", "if", "\"bias\"", "in", "w", ":", "\n", "                            ", "new_bias", "=", "getattr", "(", "new_layer", ",", "w", ")", "\n", "old_bias", "=", "getattr", "(", "old_layer", ",", "w", ")", "\n", "if", "new_bias", "is", "not", "None", ":", "\n", "                                ", "nn", ".", "init", ".", "zeros_", "(", "new_bias", ")", "\n", "if", "upper", ":", "\n", "                                    ", "new_bias", "[", ":", "old_bias", ".", "shape", "[", "0", "]", "]", ".", "data", ".", "copy_", "(", "old_bias", ")", "\n", "", "else", ":", "\n", "                                    ", "new_bias", "[", "-", "old_bias", ".", "shape", "[", "0", "]", ":", "]", ".", "data", ".", "copy_", "(", "old_bias", ")", "\n", "", "", "", "", "", "", "", "", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.map_activation_str_to_layer": [[287, 292], ["NotImplementedError"], "function", ["None"], ["def", "map_activation_str_to_layer", "(", "act_str", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "_act_map", "[", "act_str", "]", "\n", "", "except", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Error: %s activation fuction is not supported now.\"", "%", "(", "act_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.anneal_fn": [[293, 319], ["float", "float", "float", "fn.startswith", "fn.startswith", "numpy.exp", "utils.anneal_fn", "utils.anneal_fn", "utils.anneal_fn", "fn.split", "fn.split", "math.cos", "fn.split"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.anneal_fn", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.anneal_fn", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.anneal_fn"], ["", "", "def", "anneal_fn", "(", "fn", ",", "t", ",", "T", ",", "lambda0", "=", "0.0", ",", "lambda1", "=", "1.0", ")", ":", "\n", "    ", "if", "not", "fn", "or", "fn", "==", "\"none\"", ":", "\n", "        ", "return", "lambda1", "\n", "", "elif", "fn", "==", "\"logistic\"", ":", "\n", "        ", "K", "=", "8", "/", "T", "\n", "return", "float", "(", "lambda0", "+", "(", "lambda1", "-", "lambda0", ")", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "K", "*", "(", "t", "-", "T", "/", "2", ")", ")", ")", ")", "\n", "", "elif", "fn", "==", "\"linear\"", ":", "\n", "        ", "return", "float", "(", "lambda0", "+", "(", "lambda1", "-", "lambda0", ")", "*", "t", "/", "T", ")", "\n", "", "elif", "fn", "==", "\"cosine\"", ":", "\n", "        ", "return", "float", "(", "lambda0", "+", "(", "lambda1", "-", "lambda0", ")", "*", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "*", "t", "/", "T", ")", ")", "/", "2", ")", "\n", "", "elif", "fn", ".", "startswith", "(", "\"cyclical\"", ")", ":", "\n", "        ", "R", "=", "0.5", "\n", "t", "=", "t", "%", "T", "\n", "if", "t", "<=", "R", "*", "T", ":", "\n", "            ", "return", "anneal_fn", "(", "fn", ".", "split", "(", "\"_\"", ",", "1", ")", "[", "1", "]", ",", "t", ",", "R", "*", "T", ",", "lambda0", ",", "lambda1", ")", "\n", "", "else", ":", "\n", "            ", "return", "anneal_fn", "(", "fn", ".", "split", "(", "\"_\"", ",", "1", ")", "[", "1", "]", ",", "t", "-", "R", "*", "T", ",", "R", "*", "T", ",", "lambda1", ",", "lambda0", ")", "\n", "", "", "elif", "fn", ".", "startswith", "(", "\"anneal\"", ")", ":", "\n", "        ", "R", "=", "0.5", "\n", "t", "=", "t", "%", "T", "\n", "if", "t", "<=", "R", "*", "T", ":", "\n", "            ", "return", "anneal_fn", "(", "fn", ".", "split", "(", "\"_\"", ",", "1", ")", "[", "1", "]", ",", "t", ",", "R", "*", "T", ",", "lambda0", ",", "lambda1", ")", "\n", "", "else", ":", "\n", "            ", "return", "lambda1", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_constant_schedule": [[320, 324], ["torch.optim.lr_scheduler.LambdaLR"], "function", ["None"], ["", "", "def", "get_constant_schedule", "(", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a constant learning rate.\n    \"\"\"", "\n", "return", "LambdaLR", "(", "optimizer", ",", "lambda", "_", ":", "1", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_constant_schedule_with_warmup": [[326, 337], ["torch.optim.lr_scheduler.LambdaLR", "float", "float", "max"], "function", ["None"], ["", "def", "get_constant_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a constant learning rate preceded by a warmup\n    period during which the learning rate increases linearly between 0 and 1.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1.0", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "1.0", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_linear_schedule_with_warmup": [[338, 349], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max"], "function", ["None"], ["", "def", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "last_epoch", "=", "-", "1", ",", "min_percent", "=", "0.0", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases linearly after\n    linearly increasing during a warmup period.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "max", "(", "min_percent", ",", "float", "(", "num_training_steps", "-", "current_step", ")", "/", "float", "(", "max", "(", "1.0", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_cosine_schedule_with_warmup": [[350, 363], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "function", ["None"], ["", "def", "get_cosine_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "num_cycles", "=", "0.5", ",", "last_epoch", "=", "-", "1", ",", "min_percent", "=", "0.0", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases following the\n    values of the cosine function between 0 and `pi * cycles` after a warmup\n    period during which it increases linearly between 0 and 1.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "return", "max", "(", "min_percent", ",", "0.5", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "float", "(", "num_cycles", ")", "*", "2.0", "*", "progress", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_cosine_with_hard_restarts_schedule_with_warmup": [[364, 380], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "function", ["None"], ["", "def", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "num_cycles", "=", "1.0", ",", "last_epoch", "=", "-", "1", ",", "min_percent", "=", "0.0", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases following the\n    values of the cosine function with several hard restarts, after a warmup\n    period during which it increases linearly between 0 and 1.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "if", "progress", ">=", "1.0", ":", "\n", "            ", "return", "min_percent", "\n", "", "return", "max", "(", "min_percent", ",", "0.5", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "(", "float", "(", "num_cycles", ")", "*", "progress", ")", "%", "1.0", ")", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils._get_subdirs": [[384, 394], ["list", "os.listdir", "os.path.isdir", "list.append", "os.path.join", "list.extend", "utils._get_subdirs", "os.path.join"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils._get_subdirs"], ["", "def", "_get_subdirs", "(", "dirpath", ",", "leaf_only", "=", "True", ")", ":", "\n", "    ", "subdirs", "=", "list", "(", ")", "\n", "is_leaf", "=", "True", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "dirpath", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", ")", ":", "\n", "            ", "is_leaf", "=", "False", "\n", "subdirs", ".", "extend", "(", "_get_subdirs", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", ",", "leaf_only", "=", "leaf_only", ")", ")", "\n", "", "", "if", "not", "leaf_only", "or", "is_leaf", ":", "\n", "        ", "subdirs", ".", "append", "(", "dirpath", ")", "\n", "", "return", "subdirs", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils._read_graphs_from_dir": [[395, 413], ["dict", "os.listdir", "os.path.isdir", "os.path.splitext", "os.path.join", "os.path.basename", "ig.read", "os.path.join", "int", "int", "int", "print"], "function", ["None"], ["", "def", "_read_graphs_from_dir", "(", "dirpath", ")", ":", "\n", "    ", "import", "igraph", "as", "ig", "\n", "graphs", "=", "dict", "(", ")", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "dirpath", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", ")", ":", "\n", "            ", "names", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "\n", "if", "names", "[", "1", "]", "!=", "\".gml\"", ":", "\n", "                ", "continue", "\n", "", "try", ":", "\n", "                ", "graph", "=", "ig", ".", "read", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", ")", "\n", "graph", ".", "vs", "[", "\"label\"", "]", "=", "[", "int", "(", "x", ")", "for", "x", "in", "graph", ".", "vs", "[", "\"label\"", "]", "]", "\n", "graph", ".", "es", "[", "\"label\"", "]", "=", "[", "int", "(", "x", ")", "for", "x", "in", "graph", ".", "es", "[", "\"label\"", "]", "]", "\n", "graph", ".", "es", "[", "\"key\"", "]", "=", "[", "int", "(", "x", ")", "for", "x", "in", "graph", ".", "es", "[", "\"key\"", "]", "]", "\n", "graphs", "[", "names", "[", "0", "]", "]", "=", "graph", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "break", "\n", "", "", "", "return", "graphs", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.read_graphs_from_dir": [[414, 427], ["dict", "utils._get_subdirs", "multiprocessing.Pool", "list", "pool.close", "tqdm.tqdm", "list.append", "x.get.get", "os.cpu_count", "pool.apply_async", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils._get_subdirs", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "read_graphs_from_dir", "(", "dirpath", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "graphs", "=", "dict", "(", ")", "\n", "subdirs", "=", "_get_subdirs", "(", "dirpath", ")", "\n", "with", "Pool", "(", "num_workers", "if", "num_workers", ">", "0", "else", "os", ".", "cpu_count", "(", ")", ")", "as", "pool", ":", "\n", "        ", "results", "=", "list", "(", ")", "\n", "for", "subdir", "in", "subdirs", ":", "\n", "            ", "results", ".", "append", "(", "(", "subdir", ",", "pool", ".", "apply_async", "(", "_read_graphs_from_dir", ",", "args", "=", "(", "subdir", ",", ")", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "\n", "for", "subdir", ",", "x", "in", "tqdm", "(", "results", ")", ":", "\n", "            ", "x", "=", "x", ".", "get", "(", ")", "\n", "graphs", "[", "os", ".", "path", ".", "basename", "(", "subdir", ")", "]", "=", "x", "\n", "", "", "return", "graphs", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.read_patterns_from_dir": [[428, 441], ["dict", "utils._get_subdirs", "multiprocessing.Pool", "list", "pool.close", "tqdm.tqdm", "list.append", "x.get.get", "dict.update", "os.cpu_count", "pool.apply_async"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils._get_subdirs", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "read_patterns_from_dir", "(", "dirpath", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "patterns", "=", "dict", "(", ")", "\n", "subdirs", "=", "_get_subdirs", "(", "dirpath", ")", "\n", "with", "Pool", "(", "num_workers", "if", "num_workers", ">", "0", "else", "os", ".", "cpu_count", "(", ")", ")", "as", "pool", ":", "\n", "        ", "results", "=", "list", "(", ")", "\n", "for", "subdir", "in", "subdirs", ":", "\n", "            ", "results", ".", "append", "(", "(", "subdir", ",", "pool", ".", "apply_async", "(", "_read_graphs_from_dir", ",", "args", "=", "(", "subdir", ",", ")", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "\n", "for", "subdir", ",", "x", "in", "tqdm", "(", "results", ")", ":", "\n", "            ", "x", "=", "x", ".", "get", "(", ")", "\n", "patterns", ".", "update", "(", "x", ")", "\n", "", "", "return", "patterns", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils._read_metadata_from_dir": [[442, 455], ["dict", "os.listdir", "os.path.isdir", "os.path.splitext", "os.path.join", "os.path.basename", "open", "json.load", "print", "os.path.join"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.dataset.GraphAdjDataset.load"], ["", "def", "_read_metadata_from_dir", "(", "dirpath", ")", ":", "\n", "    ", "meta", "=", "dict", "(", ")", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "dirpath", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", ")", ":", "\n", "            ", "names", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "\n", "if", "names", "[", "1", "]", "!=", "\".meta\"", ":", "\n", "                ", "continue", "\n", "", "try", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                    ", "meta", "[", "names", "[", "0", "]", "]", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "except", "BaseException", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "", "", "", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.read_metadata_from_dir": [[456, 469], ["dict", "utils._get_subdirs", "multiprocessing.Pool", "list", "pool.close", "tqdm.tqdm", "list.append", "x.get.get", "os.cpu_count", "pool.apply_async", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils._get_subdirs", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "read_metadata_from_dir", "(", "dirpath", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "meta", "=", "dict", "(", ")", "\n", "subdirs", "=", "_get_subdirs", "(", "dirpath", ")", "\n", "with", "Pool", "(", "num_workers", "if", "num_workers", ">", "0", "else", "os", ".", "cpu_count", "(", ")", ")", "as", "pool", ":", "\n", "        ", "results", "=", "list", "(", ")", "\n", "for", "subdir", "in", "subdirs", ":", "\n", "            ", "results", ".", "append", "(", "(", "subdir", ",", "pool", ".", "apply_async", "(", "_read_metadata_from_dir", ",", "args", "=", "(", "subdir", ",", ")", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "\n", "for", "subdir", ",", "x", "in", "tqdm", "(", "results", ")", ":", "\n", "            ", "x", "=", "x", ".", "get", "(", ")", "\n", "meta", "[", "os", ".", "path", ".", "basename", "(", "subdir", ")", "]", "=", "x", "\n", "", "", "return", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.load_data": [[470, 510], ["utils.read_patterns_from_dir", "utils.read_graphs_from_dir", "utils.read_metadata_from_dir", "read_patterns_from_dir.items", "collections.OrderedDict", "list", "list", "list", "graphs[].items", "dict", "int", "graphs[].items", "dev_data.append", "len", "read_graphs_from_dir.keys", "dict", "int", "g.rsplit", "test_data.append", "train_data.append", "dev_data.append", "g.rsplit", "test_data.append", "train_data.append"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.read_patterns_from_dir", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.read_graphs_from_dir", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.read_metadata_from_dir", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "load_data", "(", "graph_dir", ",", "pattern_dir", ",", "metadata_dir", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "patterns", "=", "read_patterns_from_dir", "(", "pattern_dir", ",", "num_workers", "=", "num_workers", ")", "\n", "graphs", "=", "read_graphs_from_dir", "(", "graph_dir", ",", "num_workers", "=", "num_workers", ")", "\n", "meta", "=", "read_metadata_from_dir", "(", "metadata_dir", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "train_data", ",", "dev_data", ",", "test_data", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "p", ",", "pattern", "in", "patterns", ".", "items", "(", ")", ":", "\n", "        ", "if", "p", "in", "graphs", ":", "\n", "            ", "for", "g", ",", "graph", "in", "graphs", "[", "p", "]", ".", "items", "(", ")", ":", "\n", "                ", "x", "=", "dict", "(", ")", "\n", "x", "[", "\"id\"", "]", "=", "(", "\"%s-%s\"", "%", "(", "p", ",", "g", ")", ")", "\n", "x", "[", "\"pattern\"", "]", "=", "pattern", "\n", "x", "[", "\"graph\"", "]", "=", "graph", "\n", "x", "[", "\"subisomorphisms\"", "]", "=", "meta", "[", "p", "]", "[", "g", "]", "[", "\"subisomorphisms\"", "]", "\n", "x", "[", "\"counts\"", "]", "=", "meta", "[", "p", "]", "[", "g", "]", "[", "\"counts\"", "]", "\n", "\n", "g_idx", "=", "int", "(", "g", ".", "rsplit", "(", "\"_\"", ",", "1", ")", "[", "-", "1", "]", ")", "\n", "if", "g_idx", "%", "10", "==", "0", ":", "\n", "                    ", "dev_data", ".", "append", "(", "x", ")", "\n", "", "elif", "g_idx", "%", "10", "==", "1", ":", "\n", "                    ", "test_data", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "train_data", ".", "append", "(", "x", ")", "\n", "", "", "", "elif", "len", "(", "graphs", ")", "==", "1", "and", "\"raw\"", "in", "graphs", ".", "keys", "(", ")", ":", "\n", "            ", "for", "g", ",", "graph", "in", "graphs", "[", "\"raw\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "x", "=", "dict", "(", ")", "\n", "x", "[", "\"id\"", "]", "=", "(", "\"%s-%s\"", "%", "(", "p", ",", "g", ")", ")", "\n", "x", "[", "\"pattern\"", "]", "=", "pattern", "\n", "x", "[", "\"graph\"", "]", "=", "graph", "\n", "x", "[", "\"subisomorphisms\"", "]", "=", "meta", "[", "p", "]", "[", "g", "]", "[", "\"subisomorphisms\"", "]", "\n", "x", "[", "\"counts\"", "]", "=", "meta", "[", "p", "]", "[", "g", "]", "[", "\"counts\"", "]", "\n", "\n", "g_idx", "=", "int", "(", "g", ".", "rsplit", "(", "\"_\"", ",", "1", ")", "[", "-", "1", "]", ")", "\n", "if", "g_idx", "%", "3", "==", "0", ":", "\n", "                    ", "dev_data", ".", "append", "(", "x", ")", "\n", "", "elif", "g_idx", "%", "3", "==", "1", ":", "\n", "                    ", "test_data", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "                    ", "train_data", ".", "append", "(", "x", ")", "\n", "", "", "", "", "return", "OrderedDict", "(", "{", "\"train\"", ":", "train_data", ",", "\"dev\"", ":", "dev_data", ",", "\"test\"", ":", "test_data", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.src.utils.get_best_epochs": [[511, 534], ["re.compile", "dict", "print", "re.compile.findall", "len", "subprocess.check_output().decode().split", "re.compile.findall", "open", "f.readlines", "int", "subprocess.check_output().decode", "int", "subprocess.check_output"], "function", ["None"], ["", "def", "get_best_epochs", "(", "log_file", ")", ":", "\n", "    ", "regex", "=", "re", ".", "compile", "(", "r\"data_type:\\s+(\\w+)\\s+best\\s+([\\s\\w\\-]+).*?\\(epoch:\\s+(\\d+)\\)\"", ")", "\n", "best_epochs", "=", "dict", "(", ")", "\n", "# get the best epoch", "\n", "try", ":", "\n", "        ", "lines", "=", "subprocess", ".", "check_output", "(", "[", "\"tail\"", ",", "log_file", ",", "\"-n3\"", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "\"\\n\"", ")", "[", "0", ":", "-", "1", "]", "\n", "print", "(", "lines", ")", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "log_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "", "for", "line", "in", "lines", "[", "-", "3", ":", "]", ":", "\n", "        ", "matched_results", "=", "regex", ".", "findall", "(", "line", ")", "\n", "for", "matched_result", "in", "matched_results", ":", "\n", "            ", "if", "\"loss\"", "in", "matched_result", "[", "1", "]", ":", "\n", "                ", "best_epochs", "[", "matched_result", "[", "0", "]", "]", "=", "int", "(", "matched_result", "[", "2", "]", ")", "\n", "", "", "", "if", "len", "(", "best_epochs", ")", "!=", "3", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "matched_results", "=", "regex", ".", "findall", "(", "line", ")", "\n", "for", "matched_result", "in", "matched_results", ":", "\n", "                ", "if", "\"loss\"", "in", "matched_result", "[", "1", "]", ":", "\n", "                    ", "best_epochs", "[", "matched_result", "[", "0", "]", "]", "=", "int", "(", "matched_result", "[", "2", "]", ")", "\n", "", "", "", "", "return", "best_epochs", "\n", "", ""]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.mutag_generator.generate_graphs": [[14, 33], ["graph_generator.GraphGenerator", "list", "range", "math.log2", "math.log2", "math.log2", "math.log2", "numpy.random.randint", "numpy.random.randint", "math.floor", "math.floor", "graph_generator.GraphGenerator.generate", "print", "list.append", "max", "math.pow", "math.pow", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.generate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["def", "generate_graphs", "(", "pattern", ",", "min_number_of_vertices", ",", "max_number_of_vertices", ",", "min_number_of_edges", ",", "max_number_of_edges", ",", "min_number_of_vertex_labels", ",", "max_number_of_vertex_labels", ",", "min_number_of_edge_labels", ",", "max_number_of_edge_labels", ",", "alpha", ",", "max_pattern_counts", ",", "max_subgraph", ",", "return_subisomorphisms", ",", "number_of_graphs", ")", ":", "\n", "    ", "graph_generator", "=", "GraphGenerator", "(", "pattern", ")", "\n", "results", "=", "list", "(", ")", "\n", "vl1", ",", "vl2", "=", "math", ".", "log2", "(", "min_number_of_vertex_labels", ")", ",", "math", ".", "log2", "(", "max_number_of_vertex_labels", ")", "\n", "el1", ",", "el2", "=", "math", ".", "log2", "(", "min_number_of_edge_labels", ")", ",", "math", ".", "log2", "(", "max_number_of_edge_labels", ")", "\n", "for", "g", "in", "range", "(", "number_of_graphs", ")", ":", "\n", "        ", "number_of_vertices", "=", "np", ".", "random", ".", "randint", "(", "min_number_of_vertices", ",", "max_number_of_vertices", "+", "1", ")", "\n", "number_of_edges", "=", "np", ".", "random", ".", "randint", "(", "max", "(", "min_number_of_edges", ",", "number_of_vertices", ")", ",", "max_number_of_edges", "+", "1", ")", "\n", "number_of_vertex_labels", "=", "math", ".", "floor", "(", "math", ".", "pow", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "vl2", "-", "vl1", ")", "+", "vl1", ",", "2", ")", ")", "\n", "number_of_edge_labels", "=", "math", ".", "floor", "(", "math", ".", "pow", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "el2", "-", "el1", ")", "+", "el1", ",", "2", ")", ")", "\n", "graph", ",", "metadata", "=", "graph_generator", ".", "generate", "(", "\n", "number_of_vertices", ",", "number_of_edges", ",", "number_of_vertex_labels", ",", "number_of_edge_labels", ",", "\n", "alpha", ",", "max_pattern_counts", "=", "max_pattern_counts", ",", "max_subgraph", "=", "max_subgraph", ",", "\n", "return_subisomorphisms", "=", "return_subisomorphisms", ")", "\n", "print", "(", "\"%d/%d\"", "%", "(", "g", "+", "1", ",", "number_of_graphs", ")", ",", "\"number of subisomorphisms: %d\"", "%", "(", "metadata", "[", "\"counts\"", "]", ")", ")", "\n", "results", ".", "append", "(", "(", "graph", ",", "metadata", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.__init__": [[16, 30], ["list", "iter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", "=", "None", ",", "adj", "=", "None", ",", "inter_adj", "=", "None", ",", "vertex_label", "=", "None", ",", "is_clique", "=", "False", ",", "nec_id", "=", "0", ")", ":", "\n", "        ", "if", "data", "is", "None", ":", "\n", "            ", "self", ".", "data", "=", "list", "(", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "iterator", "=", "iter", "(", "data", ")", "\n", "self", ".", "data", "=", "data", "\n", "", "except", "TypeError", "as", "e", ":", "\n", "                ", "self", ".", "data", "=", "[", "data", "]", "\n", "", "", "self", ".", "adj", "=", "adj", "\n", "self", ".", "inter_adj", "=", "inter_adj", "\n", "self", ".", "vertex_label", "=", "vertex_label", "\n", "self", ".", "is_clique", "=", "False", "\n", "self", ".", "nec_id", "=", "nec_id", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append": [[31, 33], ["graph_generator.NEC.data.append"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "append", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "data", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend": [[34, 36], ["graph_generator.NEC.data.extend"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend"], ["", "def", "extend", "(", "self", ",", "items", ")", ":", "\n", "        ", "self", ".", "data", ".", "extend", "(", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.__len__": [[37, 39], ["graph_generator.NEC.data.__len__"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.__setitem__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "idx", ",", "v", ")", ":", "\n", "          ", "self", ".", "data", "[", "idx", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.__getitem__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "          ", "return", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NECTree.__init__": [[47, 52], ["igraph.Graph", "dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vcount", ",", "directed", "=", "True", ")", ":", "\n", "        ", "self", ".", "tree", "=", "ig", ".", "Graph", "(", "directed", "=", "directed", ")", "\n", "self", ".", "NEC_by_adj", "=", "dict", "(", ")", "\n", "self", ".", "NEC_by_vertex_label", "=", "dict", "(", ")", "\n", "self", ".", "NEC_by_vertex_index", "=", "[", "None", "]", "*", "vcount", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NECTree.add_nec": [[53, 71], ["graph_generator.NECTree.tree.vcount", "graph_generator.NECTree.tree.add_vertex", "graph_generator.NECTree.NEC_by_adj[].append", "graph_generator.NECTree.NEC_by_vertex_label[].append", "list", "list"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "add_nec", "(", "self", ",", "nec", ")", ":", "\n", "        ", "adj", "=", "nec", ".", "adj", "\n", "vertex_label", "=", "nec", ".", "vertex_label", "\n", "is_clique", "=", "nec", ".", "is_clique", "\n", "\n", "nec", ".", "nec_id", "=", "self", ".", "tree", ".", "vcount", "(", ")", "\n", "self", ".", "tree", ".", "add_vertex", "(", "label", "=", "vertex_label", ")", "\n", "\n", "if", "adj", "not", "in", "self", ".", "NEC_by_adj", ":", "\n", "            ", "self", ".", "NEC_by_adj", "[", "adj", "]", "=", "list", "(", ")", "\n", "", "self", ".", "NEC_by_adj", "[", "adj", "]", ".", "append", "(", "nec", ")", "\n", "\n", "if", "vertex_label", "not", "in", "self", ".", "NEC_by_vertex_label", ":", "\n", "            ", "self", ".", "NEC_by_vertex_label", "[", "vertex_label", "]", "=", "list", "(", ")", "\n", "", "self", ".", "NEC_by_vertex_label", "[", "vertex_label", "]", ".", "append", "(", "nec", ")", "\n", "\n", "for", "vertex_index", "in", "nec", ":", "\n", "            ", "self", ".", "NEC_by_vertex_index", "[", "vertex_index", "]", "=", "nec", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NECTree.add_edge": [[72, 74], ["graph_generator.NECTree.tree.add_edge"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NECTree.add_edge"], ["", "", "def", "add_edge", "(", "self", ",", "source", ",", "target", ",", "edge_label", ")", ":", "\n", "        ", "self", ".", "tree", ".", "add_edge", "(", "source", ",", "target", ",", "label", "=", "edge_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.__init__": [[76, 100], ["graph_generator.GraphGenerator.pattern.vcount", "graph_generator.GraphGenerator.pattern.ecount", "collections.Counter", "collections.Counter", "collections.defaultdict", "collections.defaultdict", "graph_generator.GraphGenerator.rewrite_to_nec_tree", "collections.defaultdict", "pattern_checker.PatternChecker", "igraph.Graph", "graph_generator.GraphGenerator.pattern_edge_label_mapping[].add", "graph_generator.GraphGenerator.pattern_vertex_edge_label_mapping[].add", "int", "int", "graph_generator.GraphGenerator.pattern_nec_tree_vertex_edge_label_mapping[].add", "max", "max"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.rewrite_to_nec_tree"], ["    ", "def", "__init__", "(", "self", ",", "pattern", ")", ":", "\n", "        ", "self", ".", "pattern", "=", "pattern", "if", "pattern", "else", "ig", ".", "Graph", "(", "directed", "=", "True", ")", "\n", "self", ".", "number_of_pattern_vertices", "=", "self", ".", "pattern", ".", "vcount", "(", ")", "\n", "self", ".", "number_of_pattern_edges", "=", "self", ".", "pattern", ".", "ecount", "(", ")", "\n", "self", ".", "pattern_vertex_label_counter", "=", "Counter", "(", "self", ".", "pattern", ".", "vs", "[", "\"label\"", "]", ")", "\n", "self", ".", "pattern_edge_label_counter", "=", "Counter", "(", "self", ".", "pattern", ".", "es", "[", "\"label\"", "]", ")", "\n", "\n", "self", ".", "pattern_edge_label_mapping", "=", "defaultdict", "(", "set", ")", "\n", "self", ".", "pattern_vertex_edge_label_mapping", "=", "defaultdict", "(", "set", ")", "\n", "for", "edge", "in", "self", ".", "pattern", ".", "es", ":", "\n", "            ", "self", ".", "pattern_edge_label_mapping", "[", "edge", ".", "tuple", "]", ".", "add", "(", "edge", "[", "\"label\"", "]", ")", "\n", "key", "=", "(", "self", ".", "pattern", ".", "vs", "[", "edge", ".", "source", "]", "[", "\"label\"", "]", ",", "self", ".", "pattern", ".", "vs", "[", "edge", ".", "target", "]", "[", "\"label\"", "]", ")", "\n", "self", ".", "pattern_vertex_edge_label_mapping", "[", "key", "]", ".", "add", "(", "edge", "[", "\"label\"", "]", ")", "\n", "\n", "", "self", ".", "number_of_pattern_vertex_labels", "=", "int", "(", "max", "(", "self", ".", "pattern", ".", "vs", "[", "\"label\"", "]", ")", ")", "+", "1", "\n", "self", ".", "number_of_pattern_edge_labels", "=", "int", "(", "max", "(", "self", ".", "pattern", ".", "es", "[", "\"label\"", "]", ")", ")", "+", "1", "\n", "\n", "self", ".", "pattern_nec_tree", "=", "self", ".", "rewrite_to_nec_tree", "(", ")", "\n", "self", ".", "pattern_nec_tree_vertex_edge_label_mapping", "=", "defaultdict", "(", "set", ")", "\n", "for", "edge", "in", "self", ".", "pattern_nec_tree", ".", "tree", ".", "es", ":", "\n", "            ", "key", "=", "(", "self", ".", "pattern_nec_tree", ".", "tree", ".", "vs", "[", "edge", ".", "source", "]", "[", "\"label\"", "]", ",", "self", ".", "pattern_nec_tree", ".", "tree", ".", "vs", "[", "edge", ".", "target", "]", "[", "\"label\"", "]", ")", "\n", "self", ".", "pattern_nec_tree_vertex_edge_label_mapping", "[", "key", "]", ".", "add", "(", "edge", "[", "\"label\"", "]", ")", "\n", "\n", "", "self", ".", "pattern_checker", "=", "PatternChecker", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.choose_start_q_vertex": [[101, 110], ["list", "list.sort", "v.degree", "list.append"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "choose_start_q_vertex", "(", "self", ")", ":", "\n", "        ", "vs", "=", "list", "(", ")", "\n", "for", "v", "in", "self", ".", "pattern", ".", "vs", ":", "\n", "            ", "freq", "=", "self", ".", "pattern_vertex_label_counter", "[", "v", "[", "\"label\"", "]", "]", "\n", "# freq = self.graph_vertex_label_counter[v[\"label\"]]", "\n", "deg", "=", "v", ".", "degree", "(", ")", "\n", "vs", ".", "append", "(", "(", "freq", "/", "deg", ",", "v", ".", "index", ")", ")", "\n", "", "vs", ".", "sort", "(", ")", "\n", "return", "vs", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.find_cliques": [[111, 139], ["list", "set", "utils.powerset", "set.update", "len", "len", "collections.Counter", "collections.Counter", "list.append", "all", "all", "collections.Counter.values", "collections.Counter.values"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.powerset", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "find_cliques", "(", "self", ",", "edges", ")", ":", "\n", "        ", "cliques", "=", "list", "(", ")", "\n", "vs", "=", "set", "(", ")", "\n", "for", "edge", "in", "edges", ":", "\n", "            ", "vs", ".", "update", "(", "edge", ")", "\n", "", "if", "len", "(", "vs", ")", "<", "2", ":", "\n", "            ", "return", "cliques", "\n", "", "for", "clique_vs", "in", "powerset", "(", "vs", ",", "min_size", "=", "2", ")", ":", "\n", "            ", "n", "=", "len", "(", "clique_vs", ")", "\n", "in_degrees", "=", "Counter", "(", ")", "\n", "out_degrees", "=", "Counter", "(", ")", "\n", "for", "edge", "in", "edges", ":", "\n", "                ", "if", "edge", "[", "0", "]", "in", "clique_vs", "and", "edge", "[", "1", "]", "in", "clique_vs", ":", "\n", "# 0 -> 1", "\n", "                    ", "out_degrees", "[", "edge", "[", "0", "]", "]", "+=", "1", "\n", "in_degrees", "[", "edge", "[", "1", "]", "]", "+=", "1", "\n", "# a clique requires all vertices have the same in degrees and out degrees", "\n", "", "", "in_d", "=", "in_degrees", "[", "clique_vs", "[", "0", "]", "]", "\n", "out_d", "=", "out_degrees", "[", "clique_vs", "[", "0", "]", "]", "\n", "if", "in_d", "==", "0", "or", "(", "in_d", "%", "(", "n", "-", "1", ")", "!=", "0", ")", ":", "\n", "                ", "continue", "\n", "", "if", "in_d", "!=", "out_d", ":", "\n", "                ", "continue", "\n", "", "if", "not", "(", "all", "(", "[", "in_d", "==", "in_degree", "for", "in_degree", "in", "in_degrees", ".", "values", "(", ")", "]", ")", "and", "all", "(", "[", "out_d", "==", "out_degree", "for", "out_degree", "in", "out_degrees", ".", "values", "(", ")", "]", ")", ")", ":", "\n", "                ", "continue", "\n", "", "cliques", ".", "append", "(", "clique_vs", ")", "\n", "", "return", "cliques", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.find_necs": [[140, 261], ["collections.defaultdict", "dict", "list", "collections.defaultdict.items", "collections.defaultdict", "dict.items", "collections.defaultdict.items", "list", "graph_generator.GraphGenerator.pattern.incident", "graph_generator.GraphGenerator.pattern.incident", "tuple", "groups_by_adj[].append", "len", "groups_by_degree[].append", "tuple.append", "tuple.append", "sorted", "len", "list.append", "len", "len", "list.append", "collections.defaultdict", "set", "dict", "collections.defaultdict.items", "set.intersection", "dict", "list", "sorted", "set().difference", "graph_generator.NEC", "graph_generator.NEC", "graph_generator.GraphGenerator.find_cliques", "len", "len", "dict", "dict", "next", "next", "len", "dict.keys", "sorted", "list.append", "set.union", "list.append", "sorted", "len", "set", "list.append", "dict.values", "list.append", "sorted", "sorted", "iter", "all", "iter", "list.append", "sorted.issuperset", "list.append", "graph_generator.NEC", "set", "graph_generator.NEC", "inter_edges_by_edge_labels[].add", "graph_generator.NEC", "graph_generator.NEC", "dict.values", "dict.values", "graph_generator.NEC", "set", "tuple", "tuple", "tuple", "dict.values", "len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.find_cliques", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "find_necs", "(", "self", ",", "group", ")", ":", "\n", "# each vertex in the same group has the same label", "\n", "# so we do not need to care the vertex label here", "\n", "        ", "groups_by_adj", "=", "defaultdict", "(", "list", ")", "# key: adj, value: vertices", "\n", "for", "v", "in", "group", ":", "\n", "            ", "adj", "=", "list", "(", ")", "# [(mode, e_label, v_id), ...]", "\n", "for", "out_e", "in", "self", ".", "pattern", ".", "incident", "(", "v", ",", "mode", "=", "ig", ".", "OUT", ")", ":", "\n", "                ", "edge", "=", "self", ".", "pattern", ".", "es", "[", "out_e", "]", "\n", "u", "=", "edge", ".", "target", "\n", "adj", ".", "append", "(", "(", "ig", ".", "OUT", ",", "edge", "[", "\"label\"", "]", ",", "u", ")", ")", "\n", "", "for", "in_e", "in", "self", ".", "pattern", ".", "incident", "(", "v", ",", "mode", "=", "ig", ".", "IN", ")", ":", "\n", "                ", "edge", "=", "self", ".", "pattern", ".", "es", "[", "in_e", "]", "\n", "u", "=", "edge", ".", "source", "\n", "adj", ".", "append", "(", "(", "ig", ".", "IN", ",", "edge", "[", "\"label\"", "]", ",", "u", ")", ")", "\n", "", "adj", "=", "tuple", "(", "sorted", "(", "adj", ")", ")", "\n", "groups_by_adj", "[", "adj", "]", ".", "append", "(", "v", ")", "\n", "\n", "\n", "# NECs with same adj", "\n", "", "singleton_group_mapping", "=", "dict", "(", ")", "# key: v_id, value: adj", "\n", "necs", "=", "list", "(", ")", "\n", "for", "adj", ",", "vs", "in", "groups_by_adj", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "vs", ")", ">", "1", ":", "\n", "                ", "necs", ".", "append", "(", "NEC", "(", "sorted", "(", "vs", ")", ",", "adj", "=", "adj", ",", "is_clique", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "singleton_group_mapping", "[", "vs", "[", "0", "]", "]", "=", "adj", "\n", "\n", "# NECs with cliques and same adj-N_q", "\n", "# firstly check the indegree and outdegree", "\n", "", "", "groups_by_degree", "=", "defaultdict", "(", "list", ")", "\n", "for", "v", ",", "adj", "in", "singleton_group_mapping", ".", "items", "(", ")", ":", "\n", "            ", "in_degree", "=", "len", "(", "[", "x", "[", "0", "]", "==", "ig", ".", "IN", "for", "x", "in", "adj", "]", ")", "\n", "out_degree", "=", "len", "(", "adj", ")", "-", "in_degree", "\n", "groups_by_degree", "[", "(", "in_degree", ",", "out_degree", ")", "]", ".", "append", "(", "v", ")", "\n", "", "for", "key", ",", "vs", "in", "groups_by_degree", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "vs", ")", "==", "1", ":", "\n", "                ", "necs", ".", "append", "(", "NEC", "(", "vs", ",", "adj", "=", "singleton_group_mapping", "[", "vs", "[", "0", "]", "]", ",", "is_clique", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "# check whether to form a clique", "\n", "                ", "inter_edges_by_edge_labels", "=", "defaultdict", "(", "set", ")", "# key: e_label, value: edges", "\n", "edge_label_set", "=", "set", "(", ")", "\n", "for", "v", "in", "vs", ":", "\n", "                    ", "for", "x", "in", "singleton_group_mapping", "[", "v", "]", ":", "\n", "                        ", "if", "x", "[", "2", "]", "in", "vs", ":", "\n", "                            ", "if", "x", "[", "0", "]", "==", "ig", ".", "OUT", ":", "\n", "                                ", "src_tgt", "=", "(", "v", ",", "x", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                                ", "src_tgt", "=", "(", "x", "[", "2", "]", ",", "v", ")", "\n", "", "inter_edges_by_edge_labels", "[", "x", "[", "1", "]", "]", ".", "add", "(", "src_tgt", ")", "\n", "\n", "", "", "", "cliques_by_edge_labels", "=", "dict", "(", ")", "# key: e_label, value: cliques", "\n", "for", "edge_label", ",", "edges", "in", "inter_edges_by_edge_labels", ".", "items", "(", ")", ":", "\n", "                    ", "cliques", "=", "self", ".", "find_cliques", "(", "edges", ")", "\n", "if", "len", "(", "cliques", ")", ">", "0", ":", "\n", "                        ", "cliques_by_edge_labels", "[", "edge_label", "]", "=", "set", "(", "cliques", ")", "\n", "", "", "if", "len", "(", "cliques_by_edge_labels", ")", "==", "0", ":", "\n", "                    ", "for", "v", "in", "vs", ":", "\n", "                        ", "necs", ".", "append", "(", "NEC", "(", "[", "v", "]", ",", "adj", "=", "singleton_group_mapping", "[", "v", "]", ",", "is_clique", "=", "False", ")", ")", "\n", "", "continue", "\n", "\n", "# find mixed cliques", "\n", "# if a clique with edge_label A appears in cliques with edge_label B, it is valid", "\n", "# A: (0,1), (1,2), (0,2), (0,1,2)", "\n", "# B: (0,1), (1,2), (0,2), (0,1,2)", "\n", "# result: (0,1), (1,2), (0,2), (0,1,2)", "\n", "\n", "# if a clique with edge_label A does not appear in cliques with edge_label B, it is invalid", "\n", "# A: (0,1), (1,2), (0,2), (0,1,2)", "\n", "# B: empty", "\n", "# result: empty", "\n", "", "mixed_cliques", "=", "set", ".", "intersection", "(", "*", "cliques_by_edge_labels", ".", "values", "(", ")", ")", "\n", "if", "len", "(", "mixed_cliques", ")", "==", "0", ":", "\n", "                    ", "for", "v", "in", "vs", ":", "\n", "                        ", "necs", ".", "append", "(", "NEC", "(", "[", "v", "]", ",", "adj", "=", "singleton_group_mapping", "[", "v", "]", ",", "is_clique", "=", "False", ")", ")", "\n", "", "continue", "\n", "\n", "# check the same outer adj", "\n", "", "valid_cliques", "=", "dict", "(", ")", "# key: clique, value: (outer_adj, inter_adj)", "\n", "for", "clique", "in", "mixed_cliques", ":", "\n", "# get inter_adj and outer_adj", "\n", "                    ", "inter_adjs", "=", "dict", "(", ")", "# key: v_id, value: inter_adj", "\n", "outer_adjs", "=", "dict", "(", ")", "# key: v_id, value: outer_adj", "\n", "for", "v", "in", "clique", ":", "\n", "                        ", "adj", "=", "singleton_group_mapping", "[", "v", "]", "\n", "inter_adjs", "[", "v", "]", "=", "sorted", "(", "[", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "adj", "if", "x", "[", "2", "]", "in", "clique", "]", ")", "# x[2] is useless because it is a clique", "\n", "outer_adjs", "[", "v", "]", "=", "sorted", "(", "[", "x", "for", "x", "in", "adj", "if", "x", "[", "2", "]", "not", "in", "clique", "]", ")", "\n", "\n", "# check same outer adj", "\n", "", "o_adj", "=", "next", "(", "iter", "(", "outer_adjs", ".", "values", "(", ")", ")", ")", "\n", "if", "not", "all", "(", "[", "o_adj", "==", "outer_adj", "for", "outer_adj", "in", "outer_adjs", ".", "values", "(", ")", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "i_adj", "=", "next", "(", "iter", "(", "inter_adjs", ".", "values", "(", ")", ")", ")", "\n", "valid_cliques", "[", "clique", "]", "=", "(", "o_adj", ",", "i_adj", ")", "\n", "", "if", "len", "(", "valid_cliques", ")", "==", "0", ":", "\n", "                    ", "for", "v", "in", "vs", ":", "\n", "                        ", "necs", ".", "append", "(", "NEC", "(", "[", "v", "]", ",", "adj", "=", "singleton_group_mapping", "[", "v", "]", ",", "is_clique", "=", "False", ")", ")", "\n", "", "continue", "\n", "\n", "# choose the larger cliques and remove subcliques", "\n", "# valid_cliques: (0,1), (1,2), (0,2), (0,1,2), (3,4,5)", "\n", "# result: (0,1,2), (3,4,5)", "\n", "", "final_cliques", "=", "list", "(", ")", "\n", "for", "valid_clique", "in", "sorted", "(", "valid_cliques", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "(", "-", "len", "(", "x", ")", ",", "x", ")", ")", ":", "\n", "                    ", "is_subclique", "=", "False", "\n", "for", "final_clique", "in", "final_cliques", ":", "\n", "                        ", "if", "final_clique", ".", "issuperset", "(", "valid_clique", ")", ":", "\n", "                            ", "is_subclique", "=", "True", "\n", "break", "\n", "", "", "if", "not", "is_subclique", ":", "\n", "                        ", "final_cliques", ".", "append", "(", "set", "(", "valid_clique", ")", ")", "\n", "\n", "# merge vertices in one final cliques", "\n", "", "", "for", "final_clique", "in", "final_cliques", ":", "\n", "                    ", "final_clique", "=", "sorted", "(", "final_clique", ")", "\n", "outer_adj", ",", "inter_adj", "=", "valid_cliques", "[", "tuple", "(", "final_clique", ")", "]", "\n", "necs", ".", "append", "(", "NEC", "(", "final_clique", ",", "adj", "=", "tuple", "(", "outer_adj", ")", ",", "inter_adj", "=", "tuple", "(", "inter_adj", ")", ",", "is_clique", "=", "True", ")", ")", "\n", "\n", "# add the left singleton NECs", "\n", "", "for", "v", "in", "set", "(", "vs", ")", ".", "difference", "(", "set", ".", "union", "(", "*", "final_cliques", ")", ")", ":", "\n", "                    ", "necs", ".", "append", "(", "NEC", "(", "[", "v", "]", ",", "adj", "=", "singleton_group_mapping", "[", "v", "]", ",", "is_clique", "=", "False", ")", ")", "\n", "", "", "", "return", "necs", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.rewrite_to_nec_tree": [[262, 314], ["graph_generator.NECTree", "graph_generator.GraphGenerator.choose_start_q_vertex", "list", "utils.retrieve_multiple_edges", "utils.retrieve_multiple_edges", "tuple.extend", "tuple.extend", "tuple", "graph_generator.NEC", "graph_generator.NECTree.add_nec", "list", "sorted", "len", "v_next.sort", "list", "collections.defaultdict", "collections.defaultdict.items", "utils.retrieve_multiple_edges", "utils.retrieve_multiple_edges", "sorted", "sorted", "graph_generator.GraphGenerator.find_necs", "graph_generator.NECTree.add_nec", "v_next.append", "groups[].append", "groups[].append", "graph_generator.NECTree.add_edge", "graph_generator.NECTree.add_edge"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.choose_start_q_vertex", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.retrieve_multiple_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.retrieve_multiple_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NECTree.add_nec", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.retrieve_multiple_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.retrieve_multiple_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.find_necs", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NECTree.add_nec", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NECTree.add_edge", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NECTree.add_edge"], ["", "def", "rewrite_to_nec_tree", "(", "self", ")", ":", "\n", "        ", "nec_tree", "=", "NECTree", "(", "self", ".", "number_of_pattern_vertices", ",", "directed", "=", "True", ")", "\n", "\n", "start_v", "=", "self", ".", "choose_start_q_vertex", "(", ")", "\n", "visited", "=", "[", "0", "]", "*", "self", ".", "number_of_pattern_vertices", "\n", "visited", "[", "start_v", "]", "=", "1", "\n", "adj", "=", "list", "(", ")", "# [(mode, e_label, v_id), ...]", "\n", "out_edges", "=", "retrieve_multiple_edges", "(", "self", ".", "pattern", ",", "source", "=", "start_v", ")", "\n", "in_edges", "=", "retrieve_multiple_edges", "(", "self", ".", "pattern", ",", "target", "=", "start_v", ")", "\n", "adj", ".", "extend", "(", "[", "(", "ig", ".", "OUT", ",", "edge", "[", "\"label\"", "]", ",", "edge", ".", "target", ")", "for", "edge", "in", "out_edges", "]", ")", "\n", "adj", ".", "extend", "(", "[", "(", "ig", ".", "IN", ",", "edge", "[", "\"label\"", "]", ",", "edge", ".", "source", ")", "for", "edge", "in", "in_edges", "]", ")", "\n", "adj", "=", "tuple", "(", "sorted", "(", "adj", ")", ")", "\n", "\n", "root", "=", "NEC", "(", "data", "=", "[", "start_v", "]", ",", "adj", "=", "adj", ",", "vertex_label", "=", "self", ".", "pattern", ".", "vs", "[", "start_v", "]", "[", "\"label\"", "]", ",", "is_clique", "=", "False", ",", "nec_id", "=", "0", ")", "\n", "nec_tree", ".", "add_nec", "(", "root", ")", "\n", "\n", "v_current", "=", "list", "(", ")", "\n", "v_next", "=", "[", "root", "]", "\n", "\n", "while", "len", "(", "v_next", ")", ">", "0", ":", "\n", "            ", "v_current", ",", "v_next", "=", "v_next", ",", "list", "(", ")", "\n", "for", "nec", "in", "v_current", ":", "\n", "                ", "groups", "=", "defaultdict", "(", "list", ")", "# key: (mode, edge_label, vertex_label), value: [v_id, ...]", "\n", "for", "v", "in", "nec", ":", "\n", "# group by (edge_mode, edge_label, vertex_label)", "\n", "                    ", "out_edges", "=", "retrieve_multiple_edges", "(", "self", ".", "pattern", ",", "source", "=", "v", ")", "\n", "in_edges", "=", "retrieve_multiple_edges", "(", "self", ".", "pattern", ",", "target", "=", "v", ")", "\n", "for", "edge", "in", "sorted", "(", "out_edges", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"label\"", "]", ")", ":", "\n", "                        ", "u", "=", "edge", ".", "target", "\n", "if", "not", "visited", "[", "u", "]", ":", "\n", "                            ", "key", "=", "(", "ig", ".", "OUT", ",", "edge", "[", "\"label\"", "]", ",", "self", ".", "pattern", ".", "vs", "[", "u", "]", "[", "\"label\"", "]", ")", "\n", "groups", "[", "key", "]", ".", "append", "(", "u", ")", "\n", "visited", "[", "u", "]", "=", "1", "\n", "", "", "for", "edge", "in", "sorted", "(", "in_edges", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"label\"", "]", ")", ":", "\n", "                        ", "u", "=", "edge", ".", "source", "\n", "if", "not", "visited", "[", "u", "]", ":", "\n", "                            ", "key", "=", "(", "ig", ".", "IN", ",", "edge", "[", "\"label\"", "]", ",", "self", ".", "pattern", ".", "vs", "[", "u", "]", "[", "\"label\"", "]", ")", "\n", "groups", "[", "key", "]", ".", "append", "(", "u", ")", "\n", "visited", "[", "u", "]", "=", "1", "\n", "", "", "", "for", "key", ",", "group", "in", "groups", ".", "items", "(", ")", ":", "\n", "                    ", "mode", ",", "edge_label", ",", "vertex_label", "=", "key", "\n", "new_necs", "=", "self", ".", "find_necs", "(", "group", ")", "\n", "for", "new_nec", "in", "new_necs", ":", "\n", "                        ", "new_nec", ".", "vertex_label", "=", "vertex_label", "\n", "nec_tree", ".", "add_nec", "(", "new_nec", ")", "\n", "if", "mode", "==", "ig", ".", "OUT", ":", "\n", "                            ", "nec_tree", ".", "add_edge", "(", "nec", ".", "nec_id", ",", "new_nec", ".", "nec_id", ",", "edge_label", "=", "edge_label", ")", "\n", "", "else", ":", "\n", "                            ", "nec_tree", ".", "add_edge", "(", "new_nec", ".", "nec_id", ",", "nec", ".", "nec_id", ",", "edge_label", "=", "edge_label", ")", "\n", "", "v_next", ".", "append", "(", "new_nec", ")", "\n", "", "", "", "v_next", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "vertex_label", ")", "\n", "", "return", "nec_tree", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.update_subgraphs": [[315, 333], ["graph_edge_label_mapping.items", "enumerate", "list", "list", "list", "subgraph.add_edges", "range", "range", "range", "new_edges_in_subgraphs[].extend", "new_edge_keys_in_subgraphs[].extend", "new_edge_labels_in_subgraphs[].extend", "len", "len", "len", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend"], ["", "def", "update_subgraphs", "(", "self", ",", "subgraphs", ",", "graph_edge_label_mapping", ")", ":", "\n", "        ", "new_edges_in_subgraphs", "=", "[", "list", "(", ")", "for", "i", "in", "range", "(", "len", "(", "subgraphs", ")", ")", "]", "\n", "new_edge_keys_in_subgraphs", "=", "[", "list", "(", ")", "for", "i", "in", "range", "(", "len", "(", "subgraphs", ")", ")", "]", "\n", "new_edge_labels_in_subgraphs", "=", "[", "list", "(", ")", "for", "i", "in", "range", "(", "len", "(", "subgraphs", ")", ")", "]", "\n", "subgraphs_vlabels", "=", "[", "subgraph", ".", "vs", "[", "\"label\"", "]", "for", "subgraph", "in", "subgraphs", "]", "\n", "for", "(", "sg1", ",", "v1", ",", "sg2", ",", "v2", ")", ",", "edge_labels", "in", "graph_edge_label_mapping", ".", "items", "(", ")", ":", "\n", "            ", "if", "sg1", "==", "sg2", ":", "\n", "                ", "src_tgt", "=", "(", "v1", ",", "v2", ")", "\n", "key", "=", "(", "subgraphs_vlabels", "[", "sg1", "]", "[", "v1", "]", ",", "subgraphs_vlabels", "[", "sg2", "]", "[", "v2", "]", ")", "\n", "pattern_edge_labels", "=", "self", ".", "pattern_vertex_edge_label_mapping", "[", "key", "]", "\n", "edge_labels", "=", "[", "edge_label", "for", "edge_label", "in", "edge_labels", "if", "edge_label", "in", "pattern_edge_labels", "]", "\n", "new_edges_in_subgraphs", "[", "sg1", "]", ".", "extend", "(", "[", "src_tgt", "]", "*", "len", "(", "edge_labels", ")", ")", "\n", "new_edge_keys_in_subgraphs", "[", "sg1", "]", ".", "extend", "(", "range", "(", "len", "(", "edge_labels", ")", ")", ")", "\n", "new_edge_labels_in_subgraphs", "[", "sg1", "]", ".", "extend", "(", "edge_labels", ")", "\n", "", "", "for", "sg", ",", "subgraph", "in", "enumerate", "(", "subgraphs", ")", ":", "\n", "            ", "subgraph", ".", "add_edges", "(", "new_edges_in_subgraphs", "[", "sg", "]", ")", "\n", "subgraph", ".", "es", "[", "\"label\"", "]", "=", "new_edge_labels_in_subgraphs", "[", "sg", "]", "\n", "subgraph", ".", "es", "[", "\"key\"", "]", "=", "new_edge_keys_in_subgraphs", "[", "sg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.merge_subgraphs": [[334, 362], ["igraph.Graph", "list", "dict", "enumerate", "numpy.random.shuffle", "enumerate", "list", "list", "list", "graph_edge_label_mapping.items", "igraph.Graph.add_edges", "range", "igraph.Graph.add_vertex", "list.extend", "list.extend", "list.extend", "subgraph.vcount", "list.append", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "", "def", "merge_subgraphs", "(", "self", ",", "subgraphs", ",", "graph_edge_label_mapping", ")", ":", "\n", "        ", "graph", "=", "ig", ".", "Graph", "(", "directed", "=", "True", ")", "\n", "graph_vertex_mapping", "=", "list", "(", ")", "\n", "graph_vertex_mapping_reversed", "=", "dict", "(", ")", "\n", "for", "sg", ",", "subgraph", "in", "enumerate", "(", "subgraphs", ")", ":", "\n", "            ", "for", "v_id", "in", "range", "(", "subgraph", ".", "vcount", "(", ")", ")", ":", "\n", "                ", "graph_vertex_mapping", ".", "append", "(", "(", "sg", ",", "v_id", ")", ")", "\n", "", "", "np", ".", "random", ".", "shuffle", "(", "graph_vertex_mapping", ")", "\n", "\n", "for", "v_id", ",", "x", "in", "enumerate", "(", "graph_vertex_mapping", ")", ":", "\n", "            ", "graph_vertex_mapping_reversed", "[", "x", "]", "=", "v_id", "\n", "graph", ".", "add_vertex", "(", "label", "=", "subgraphs", "[", "x", "[", "0", "]", "]", ".", "vs", "[", "x", "[", "1", "]", "]", "[", "\"label\"", "]", ")", "\n", "\n", "", "new_edges_in_graph", "=", "list", "(", ")", "\n", "new_edge_keys_in_graph", "=", "list", "(", ")", "\n", "new_edge_labels_in_graph", "=", "list", "(", ")", "\n", "for", "(", "sg1", ",", "v1", ",", "sg2", ",", "v2", ")", ",", "edge_labels", "in", "graph_edge_label_mapping", ".", "items", "(", ")", ":", "\n", "            ", "u", "=", "graph_vertex_mapping_reversed", "[", "(", "sg1", ",", "v1", ")", "]", "\n", "v", "=", "graph_vertex_mapping_reversed", "[", "(", "sg2", ",", "v2", ")", "]", "\n", "src_tgt", "=", "(", "u", ",", "v", ")", "\n", "new_edges_in_graph", ".", "extend", "(", "[", "src_tgt", "]", "*", "len", "(", "edge_labels", ")", ")", "\n", "new_edge_keys_in_graph", ".", "extend", "(", "range", "(", "len", "(", "edge_labels", ")", ")", ")", "\n", "new_edge_labels_in_graph", ".", "extend", "(", "edge_labels", ")", "\n", "", "graph", ".", "add_edges", "(", "new_edges_in_graph", ")", "\n", "graph", ".", "es", "[", "\"label\"", "]", "=", "new_edge_labels_in_graph", "\n", "graph", ".", "es", "[", "\"key\"", "]", "=", "new_edge_keys_in_graph", "\n", "\n", "return", "graph", ",", "graph_vertex_mapping", ",", "graph_vertex_mapping_reversed", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.generate": [[363, 505], ["print", "print", "utils.generate_labels", "utils.generate_labels", "utils.generate_tree", "collections.defaultdict", "enumerate", "utils.generate_tree.ecount", "list", "utils.generate_tree.add_edges", "graph_edge_label_mapping[].add", "numpy.random.randint", "numpy.random.randint", "list.append", "edge_keys.append", "graph_edge_labels.add", "list", "graph_generator.GraphGenerator.generate", "list", "math.ceil", "numpy.array", "collections.defaultdict", "collections.defaultdict", "range", "utils.generate_tree().get_edgelist", "graph_generator.GraphGenerator.update_subgraphs", "graph_generator.GraphGenerator.merge_subgraphs", "len", "numpy.array.sum", "utils.generate_labels", "utils.generate_labels", "utils.generate_tree", "list.append", "enumerate", "enumerate", "utils.generate_tree.delete_edges", "collections.Counter", "graph_generator.GraphGenerator.pattern_vertex_label_counter.items", "graph_generator.GraphGenerator.add_edges", "numpy.random.randint", "numpy.random.randint", "graph_generator.GraphGenerator.generate", "list", "enumerate", "graph_generator.GraphGenerator.generate", "numpy.random.dirichlet", "graph_vertex_label_mapping_reversed[].append", "utils.generate_tree.get_edgelist", "graph_edge_label_mapping[].add", "utils.generate_tree", "graph_generator.GraphGenerator.add_edges", "graph_generator.GraphGenerator.pattern_checker.get_subisomorphisms", "len", "graph_generator.GraphGenerator.pattern_checker.count_subisomorphisms", "list", "graph_generator.GraphGenerator.add_pattern", "graph_generator.GraphGenerator.add_edges", "list.append", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_labels", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_labels", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_tree", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.generate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.update_subgraphs", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.merge_subgraphs", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_labels", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_labels", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_tree", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.generate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.generate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_tree", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_subisomorphisms", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.count_subisomorphisms", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_pattern", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "generate", "(", "self", ",", "number_of_vertices", ",", "number_of_edges", ",", "number_of_vertex_labels", ",", "number_of_edge_labels", ",", "\n", "alpha", ",", "max_pattern_counts", "=", "-", "1", ",", "max_subgraph", "=", "512", ",", "return_subisomorphisms", "=", "False", ")", ":", "\n", "        ", "assert", "number_of_edges", ">=", "number_of_vertices", "-", "1", "\n", "\n", "graph_pattern_valid", "=", "True", "\n", "if", "number_of_vertex_labels", "<", "self", ".", "number_of_pattern_vertex_labels", ":", "\n", "            ", "print", "(", "\"WARNING: the number of graph vertex labels (%d) is less than the number of pattern vertex labels (%d).\"", "%", "(", "\n", "number_of_vertex_labels", ",", "self", ".", "number_of_pattern_vertex_labels", ")", ")", "\n", "graph_pattern_valid", "=", "False", "\n", "", "if", "number_of_edge_labels", "<", "self", ".", "number_of_pattern_edge_labels", ":", "\n", "            ", "print", "(", "\"WARNING: the number of graph edge labels (%d) is less than the number of pattern edge labels (%d).\"", "%", "(", "\n", "number_of_edge_labels", ",", "self", ".", "number_of_pattern_edge_labels", ")", ")", "\n", "graph_pattern_valid", "=", "False", "\n", "\n", "", "if", "not", "graph_pattern_valid", ":", "\n", "# no subisomorphism in this setting", "\n", "# we can generate the graph randomly", "\n", "            ", "vertex_labels", "=", "generate_labels", "(", "number_of_vertices", ",", "number_of_vertex_labels", ")", "\n", "edge_labels", "=", "generate_labels", "(", "number_of_edges", ",", "number_of_edge_labels", ")", "\n", "graph", "=", "generate_tree", "(", "number_of_vertices", ",", "directed", "=", "True", ")", "\n", "graph_edge_label_mapping", "=", "defaultdict", "(", "set", ")", "# key: (0, v1, 0, v2), value: e_labels", "\n", "for", "e", ",", "edge", "in", "enumerate", "(", "graph", ".", "es", ")", ":", "\n", "                ", "graph_edge_label_mapping", "[", "(", "0", ",", "edge", ".", "source", ",", "0", ",", "edge", ".", "target", ")", "]", ".", "add", "(", "edge_labels", "[", "e", "]", ")", "\n", "", "ecount", "=", "graph", ".", "ecount", "(", ")", "\n", "edge_keys", "=", "[", "0", "]", "*", "ecount", "\n", "\n", "# second, random add edges ", "\n", "new_edges", "=", "list", "(", ")", "\n", "while", "ecount", "<", "number_of_edges", ":", "\n", "                ", "u", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "number_of_vertices", ")", "\n", "v", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "number_of_vertices", ")", "\n", "edge_label", "=", "edge_labels", "[", "ecount", "]", "\n", "# # we do not generate edges between two same vertices with same labels", "\n", "graph_edge_labels", "=", "graph_edge_label_mapping", "[", "(", "0", ",", "u", ",", "0", ",", "v", ")", "]", "\n", "if", "edge_label", "in", "graph_edge_labels", ":", "\n", "                    ", "continue", "\n", "", "new_edges", ".", "append", "(", "(", "u", ",", "v", ")", ")", "\n", "edge_keys", ".", "append", "(", "len", "(", "graph_edge_labels", ")", ")", "\n", "graph_edge_labels", ".", "add", "(", "edge_label", ")", "\n", "ecount", "+=", "1", "\n", "", "graph", ".", "add_edges", "(", "new_edges", ")", "\n", "graph", ".", "vs", "[", "\"label\"", "]", "=", "vertex_labels", "\n", "graph", ".", "es", "[", "\"label\"", "]", "=", "edge_labels", "\n", "graph", ".", "es", "[", "\"key\"", "]", "=", "edge_keys", "\n", "\n", "metadata", "=", "{", "\"counts\"", ":", "0", ",", "\"subisomorphisms\"", ":", "list", "(", ")", "}", "\n", "return", "graph", ",", "metadata", "\n", "", "elif", "max_pattern_counts", "!=", "-", "1", "and", "number_of_edges", "*", "alpha", ">", "max_pattern_counts", "*", "self", ".", "number_of_pattern_edges", ":", "\n", "            ", "alpha", "=", "max_pattern_counts", "*", "self", ".", "number_of_pattern_edges", "/", "number_of_edges", "*", "DECAY", "\n", "return", "self", ".", "generate", "(", "number_of_vertices", ",", "number_of_edges", ",", "number_of_vertex_labels", ",", "number_of_edge_labels", ",", "\n", "alpha", "=", "alpha", ",", "max_pattern_counts", "=", "max_pattern_counts", ",", "max_subgraph", "=", "max_subgraph", ",", "\n", "return_subisomorphisms", "=", "return_subisomorphisms", ")", "\n", "", "else", ":", "\n", "# split the graph into small subgraphs to speed the subisomorphism searching", "\n", "            ", "subgraphs", "=", "list", "(", ")", "\n", "number_of_subgraphs", "=", "math", ".", "ceil", "(", "number_of_vertices", "/", "max_subgraph", ")", "\n", "numbers_of_subgraph_vertices", "=", "np", ".", "array", "(", "np", ".", "random", ".", "dirichlet", "(", "\n", "[", "number_of_vertices", "/", "number_of_subgraphs", "]", "*", "number_of_subgraphs", ")", "*", "number_of_vertices", ",", "dtype", "=", "np", ".", "int", ")", "\n", "diff", "=", "number_of_vertices", "-", "numbers_of_subgraph_vertices", ".", "sum", "(", ")", "\n", "numbers_of_subgraph_vertices", "[", "-", "1", "]", "+=", "diff", "\n", "\n", "ecount", "=", "0", "\n", "graph_vertex_label_mapping_reversed", "=", "defaultdict", "(", "list", ")", "# key: (sg, v_label), value: v_ids", "\n", "graph_edge_label_mapping", "=", "defaultdict", "(", "set", ")", "# key: (sg1, v1, sg2, v2), value: e_labels", "\n", "\n", "for", "sg", "in", "range", "(", "number_of_subgraphs", ")", ":", "\n", "# construct a directed tree", "\n", "                ", "number_of_subgraph_vertices", "=", "numbers_of_subgraph_vertices", "[", "sg", "]", "\n", "subgraph_vertex_labels", "=", "generate_labels", "(", "number_of_subgraph_vertices", ",", "number_of_vertex_labels", ")", "\n", "subgraph_edge_labels", "=", "generate_labels", "(", "number_of_subgraph_vertices", "-", "1", ",", "number_of_edge_labels", ")", "# tree label", "\n", "subgraph", "=", "generate_tree", "(", "number_of_subgraph_vertices", ",", "directed", "=", "True", ")", "\n", "subgraph", "[", "\"sg\"", "]", "=", "sg", "\n", "subgraph", ".", "vs", "[", "\"label\"", "]", "=", "subgraph_vertex_labels", "\n", "\n", "ecount", "+=", "(", "number_of_subgraph_vertices", "-", "1", ")", "\n", "subgraphs", ".", "append", "(", "subgraph", ")", "\n", "for", "v_id", ",", "v_label", "in", "enumerate", "(", "subgraph_vertex_labels", ")", ":", "\n", "                    ", "graph_vertex_label_mapping_reversed", "[", "(", "sg", ",", "v_label", ")", "]", ".", "append", "(", "v_id", ")", "\n", "", "for", "e", ",", "(", "v1", ",", "v2", ")", "in", "enumerate", "(", "subgraph", ".", "get_edgelist", "(", ")", ")", ":", "\n", "                    ", "graph_edge_label_mapping", "[", "(", "sg", ",", "v1", ",", "sg", ",", "v2", ")", "]", ".", "add", "(", "subgraph_edge_labels", "[", "e", "]", ")", "\n", "", "subgraph", ".", "delete_edges", "(", "None", ")", "\n", "\n", "subgraph_pattern_valid", "=", "True", "\n", "subgraph_vertex_label_counter", "=", "Counter", "(", "subgraph_vertex_labels", ")", "# key; label, value: count", "\n", "for", "vertex_label", ",", "cnt", "in", "self", ".", "pattern_vertex_label_counter", ".", "items", "(", ")", ":", "\n", "                    ", "if", "subgraph_vertex_label_counter", "[", "vertex_label", "]", "<", "cnt", ":", "\n", "                        ", "subgraph_pattern_valid", "=", "False", "\n", "break", "\n", "", "", "subgraph", "[", "\"pattern_valid\"", "]", "=", "subgraph_pattern_valid", "\n", "\n", "", "for", "(", "sg1", ",", "sg2", ")", "in", "generate_tree", "(", "number_of_subgraphs", ",", "directed", "=", "True", ")", ".", "get_edgelist", "(", ")", ":", "\n", "# add an edge between two subgraphs", "\n", "                ", "self", ".", "add_edges", "(", "subgraphs", "[", "sg1", "]", ",", "subgraphs", "[", "sg2", "]", ",", "graph_edge_label_mapping", ",", "number_of_edge_labels", ",", "1", ")", "\n", "ecount", "+=", "1", "\n", "\n", "", "invalid_cnt", "=", "0", "\n", "while", "invalid_cnt", "<", "10", "and", "ecount", "<", "number_of_edges", ":", "\n", "                ", "sg1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "number_of_subgraphs", ")", "\n", "sg2", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "number_of_subgraphs", ")", "\n", "diff", "=", "number_of_edges", "-", "ecount", "\n", "\n", "if", "diff", ">=", "self", ".", "number_of_pattern_edges", ":", "\n", "                    ", "if", "subgraphs", "[", "sg1", "]", "[", "\"pattern_valid\"", "]", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "alpha", ":", "\n", "                        ", "new_ecount", "=", "self", ".", "add_pattern", "(", "subgraphs", "[", "sg1", "]", ",", "graph_vertex_label_mapping_reversed", ",", "graph_edge_label_mapping", ")", "\n", "", "else", ":", "\n", "                        ", "new_ecount", "=", "self", ".", "add_edges", "(", "subgraphs", "[", "sg1", "]", ",", "subgraphs", "[", "sg2", "]", ",", "\n", "graph_edge_label_mapping", ",", "number_of_edge_labels", ",", "self", ".", "number_of_pattern_edges", ")", "\n", "", "", "else", ":", "\n", "                    ", "new_ecount", "=", "self", ".", "add_edges", "(", "subgraphs", "[", "sg1", "]", ",", "subgraphs", "[", "sg2", "]", ",", "\n", "graph_edge_label_mapping", ",", "number_of_edge_labels", ",", "diff", ")", "\n", "", "if", "new_ecount", "==", "0", ":", "\n", "                    ", "invalid_cnt", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "invalid_cnt", "=", "0", "\n", "ecount", "+=", "new_ecount", "\n", "", "", "if", "ecount", "<", "number_of_edges", ":", "\n", "                ", "alpha", "=", "alpha", "*", "ecount", "/", "number_of_edges", "*", "DECAY", "\n", "return", "self", ".", "generate", "(", "number_of_vertices", ",", "number_of_edges", ",", "number_of_vertex_labels", ",", "number_of_edge_labels", ",", "\n", "alpha", "=", "alpha", ",", "max_pattern_counts", "=", "max_pattern_counts", ",", "max_subgraph", "=", "max_subgraph", ",", "\n", "return_subisomorphisms", "=", "return_subisomorphisms", ")", "\n", "\n", "", "self", ".", "update_subgraphs", "(", "subgraphs", ",", "graph_edge_label_mapping", ")", "\n", "graph", ",", "graph_vertex_mapping", ",", "graph_vertex_mapping_reversed", "=", "self", ".", "merge_subgraphs", "(", "subgraphs", ",", "graph_edge_label_mapping", ")", "\n", "if", "return_subisomorphisms", ":", "\n", "                ", "subisomorphisms", "=", "list", "(", ")", "\n", "for", "sg", ",", "subgraph", "in", "enumerate", "(", "subgraphs", ")", ":", "\n", "                    ", "for", "subisomorphism", "in", "self", ".", "pattern_checker", ".", "get_subisomorphisms", "(", "subgraph", ",", "self", ".", "pattern", ")", ":", "\n", "                        ", "subisomorphism", "=", "[", "graph_vertex_mapping_reversed", "[", "(", "sg", ",", "v", ")", "]", "for", "v", "in", "subisomorphism", "]", "\n", "subisomorphisms", ".", "append", "(", "subisomorphism", ")", "\n", "", "", "metadata", "=", "{", "\"counts\"", ":", "len", "(", "subisomorphisms", ")", ",", "\"subisomorphisms\"", ":", "subisomorphisms", "}", "\n", "", "else", ":", "\n", "                ", "counts", "=", "0", "\n", "for", "subgraph", "in", "subgraphs", ":", "\n", "                    ", "counts", "+=", "self", ".", "pattern_checker", ".", "count_subisomorphisms", "(", "subgraph", ",", "self", ".", "pattern", ")", "\n", "", "metadata", "=", "{", "\"counts\"", ":", "counts", ",", "\"subisomorphisms\"", ":", "list", "(", ")", "}", "\n", "", "if", "metadata", "[", "\"counts\"", "]", ">", "max_pattern_counts", ":", "\n", "                ", "alpha", "=", "alpha", "*", "max_pattern_counts", "/", "metadata", "[", "\"counts\"", "]", "*", "DECAY", "\n", "return", "self", ".", "generate", "(", "number_of_vertices", ",", "number_of_edges", ",", "number_of_vertex_labels", ",", "number_of_edge_labels", ",", "\n", "alpha", "=", "alpha", ",", "max_subgraph", "=", "max_subgraph", ",", "max_pattern_counts", "=", "max_pattern_counts", ",", "\n", "return_subisomorphisms", "=", "return_subisomorphisms", ")", "\n", "# assert(metadata[\"counts\"] == self.pattern_checker.count_subisomorphisms(graph, self.pattern))", "\n", "", "return", "graph", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_pattern": [[506, 521], ["list", "graph_generator.GraphGenerator.pattern_edge_label_mapping.items", "list.append", "len", "utils.sample_element", "graph_edge_labels.add"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.sample_element"], ["", "", "def", "add_pattern", "(", "self", ",", "subgraph", ",", "graph_vertex_label_mapping_reversed", ",", "graph_edge_label_mapping", ")", ":", "\n", "        ", "sg", "=", "subgraph", "[", "\"sg\"", "]", "\n", "subisomorphism", "=", "list", "(", ")", "\n", "for", "vertex_label", "in", "self", ".", "pattern", ".", "vs", "[", "\"label\"", "]", ":", "\n", "            ", "subisomorphism", ".", "append", "(", "sample_element", "(", "graph_vertex_label_mapping_reversed", "[", "(", "sg", ",", "vertex_label", ")", "]", ")", ")", "\n", "", "new_ecount", "=", "0", "\n", "for", "(", "pattern_u", ",", "pattern_v", ")", ",", "pattern_edge_labels", "in", "self", ".", "pattern_edge_label_mapping", ".", "items", "(", ")", ":", "\n", "            ", "graph_u", "=", "subisomorphism", "[", "pattern_u", "]", "\n", "graph_v", "=", "subisomorphism", "[", "pattern_v", "]", "\n", "graph_edge_labels", "=", "graph_edge_label_mapping", "[", "(", "sg", ",", "graph_u", ",", "sg", ",", "graph_v", ")", "]", "\n", "edge_label_diff", "=", "pattern_edge_labels", "-", "graph_edge_labels", "\n", "for", "edge_label", "in", "edge_label_diff", ":", "\n", "                ", "graph_edge_labels", ".", "add", "(", "edge_label", ")", "\n", "", "new_ecount", "+=", "len", "(", "edge_label_diff", ")", "\n", "", "return", "new_ecount", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges": [[522, 555], ["subgraph1.vcount", "subgraph2.vcount", "list", "list", "list", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "utils.get_direction", "graph_edge_labels.add"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.get_direction"], ["", "def", "add_edges", "(", "self", ",", "subgraph1", ",", "subgraph2", ",", "graph_edge_label_mapping", ",", "graph_number_of_edge_labels", ",", "number_of_edges", ")", ":", "\n", "        ", "sg1", "=", "subgraph1", "[", "\"sg\"", "]", "\n", "sg2", "=", "subgraph2", "[", "\"sg\"", "]", "\n", "g1_vcount", "=", "subgraph1", ".", "vcount", "(", ")", "\n", "g2_vcount", "=", "subgraph2", ".", "vcount", "(", ")", "\n", "new_ecount", "=", "0", "\n", "invalid_cnt", "=", "0", "\n", "new_edges_in_sg1", "=", "list", "(", ")", "\n", "new_edge_labels_in_sg1", "=", "list", "(", ")", "\n", "new_edge_keys_in_sg1", "=", "list", "(", ")", "\n", "while", "invalid_cnt", "<", "10", "and", "new_ecount", "<", "number_of_edges", ":", "\n", "            ", "v1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "g1_vcount", ")", "\n", "v2", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "g2_vcount", ")", "\n", "edge_label", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "graph_number_of_edge_labels", ")", "\n", "if", "get_direction", "(", ")", ":", "\n", "                ", "x", "=", "(", "subgraph1", ".", "vs", "[", "v1", "]", "[", "\"label\"", "]", ",", "subgraph2", ".", "vs", "[", "v2", "]", "[", "\"label\"", "]", ")", "\n", "y", "=", "(", "sg1", ",", "v1", ",", "sg2", ",", "v2", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "(", "subgraph2", ".", "vs", "[", "v2", "]", "[", "\"label\"", "]", ",", "subgraph1", ".", "vs", "[", "v1", "]", "[", "\"label\"", "]", ")", "\n", "y", "=", "(", "sg2", ",", "v2", ",", "sg1", ",", "v1", ")", "\n", "\n", "", "if", "edge_label", "in", "self", ".", "pattern_nec_tree_vertex_edge_label_mapping", "[", "x", "]", ":", "\n", "                ", "invalid_cnt", "+=", "1", "\n", "continue", "\n", "\n", "", "graph_edge_labels", "=", "graph_edge_label_mapping", "[", "y", "]", "\n", "if", "edge_label", "in", "graph_edge_labels", ":", "\n", "                ", "invalid_cnt", "+=", "1", "\n", "continue", "\n", "", "graph_edge_labels", ".", "add", "(", "edge_label", ")", "\n", "invalid_cnt", "=", "0", "\n", "new_ecount", "+=", "1", "\n", "", "return", "new_ecount", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.generate_graphs": [[557, 569], ["graph_generator.GraphGenerator", "list", "range", "graph_generator.GraphGenerator.generate", "print", "list.append"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.generate", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "", "def", "generate_graphs", "(", "pattern", ",", "number_of_vertices", ",", "number_of_edges", ",", "number_of_vertex_labels", ",", "number_of_edge_labels", ",", "alpha", ",", "max_pattern_counts", ",", "max_subgraph", ",", "return_subisomorphisms", ",", "number_of_graphs", ")", ":", "\n", "    ", "graph_generator", "=", "GraphGenerator", "(", "pattern", ")", "\n", "results", "=", "list", "(", ")", "\n", "for", "g", "in", "range", "(", "number_of_graphs", ")", ":", "\n", "        ", "graph", ",", "metadata", "=", "graph_generator", ".", "generate", "(", "\n", "number_of_vertices", ",", "number_of_edges", ",", "number_of_vertex_labels", ",", "number_of_edge_labels", ",", "\n", "alpha", ",", "max_pattern_counts", "=", "max_pattern_counts", ",", "max_subgraph", "=", "max_subgraph", ",", "\n", "return_subisomorphisms", "=", "return_subisomorphisms", ")", "\n", "print", "(", "\"%d/%d\"", "%", "(", "g", "+", "1", ",", "number_of_graphs", ")", ",", "\"number of subisomorphisms: %d\"", "%", "(", "metadata", "[", "\"counts\"", "]", ")", ")", "\n", "results", ".", "append", "(", "(", "graph", ",", "metadata", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.draw": [[570, 610], ["igraph.plot", "igraph.plot", "graph.copy", "igraph.drawing.colors.ClusterColoringPalette", "enumerate", "igraph.plot", "plt.subplot", "plt.imshow", "plt.axis", "plt.subplot", "plt.imshow", "plt.axis", "plt.subplot", "plt.imshow", "plt.axis", "plt.text", "plt.axis", "plt.show", "enumerate", "plt.imread", "plt.imread", "plt.imread", "len", "ig.drawing.colors.ClusterColoringPalette.get", "graph.incident", "dict", "pattern.incident", "len", "ig.drawing.colors.ClusterColoringPalette.get"], "function", ["None"], ["", "def", "draw", "(", "graph", ",", "pattern", ",", "subisomorphisms", ")", ":", "\n", "    ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "matplotlib", ".", "colors", "as", "mcolors", "\n", "ig", ".", "plot", "(", "graph", ",", "\"graph.png\"", ")", "\n", "ig", ".", "plot", "(", "pattern", ",", "\"pattern.png\"", ")", "\n", "\n", "graph_pattern", "=", "graph", ".", "copy", "(", ")", "\n", "pal", "=", "ig", ".", "drawing", ".", "colors", ".", "ClusterColoringPalette", "(", "len", "(", "subisomorphisms", ")", "+", "1", ")", "\n", "# graph_pattern.vs[\"color\"] = pal.get(0)", "\n", "# graph_pattern.es[\"color\"] = pal.get(0)", "\n", "for", "i", ",", "subisomorphism", "in", "enumerate", "(", "subisomorphisms", ")", ":", "\n", "        ", "for", "pattern_vertex", ",", "graph_vertex", "in", "enumerate", "(", "subisomorphism", ")", ":", "\n", "            ", "graph_pattern", ".", "vs", "[", "graph_vertex", "]", "[", "\"color\"", "]", "=", "pal", ".", "get", "(", "i", "+", "1", ")", "\n", "graph_edges", "=", "graph", ".", "incident", "(", "graph_vertex", ")", "\n", "graph_edge_dict", "=", "dict", "(", ")", "\n", "for", "graph_edge", "in", "graph_edges", ":", "\n", "                ", "graph_edge", "=", "graph_pattern", ".", "es", "[", "graph_edge", "]", "\n", "graph_edge_dict", "[", "(", "graph_edge", ".", "target", ",", "graph_edge", "[", "\"label\"", "]", ")", "]", "=", "graph_edge", "\n", "", "for", "pattern_edge", "in", "pattern", ".", "incident", "(", "pattern_vertex", ")", ":", "\n", "                ", "pattern_edge", "=", "pattern", ".", "es", "[", "pattern_edge", "]", "\n", "pattern_tgt", "=", "pattern_edge", ".", "target", "\n", "edge_label", "=", "pattern_edge", "[", "\"label\"", "]", "\n", "graph_edge_dict", "[", "(", "subisomorphism", "[", "pattern_tgt", "]", ",", "edge_label", ")", "]", "[", "\"color\"", "]", "=", "pal", ".", "get", "(", "i", "+", "1", ")", "\n", "", "", "", "ig", ".", "plot", "(", "graph_pattern", ",", "\"graph_pattern.png\"", ",", "palette", "=", "pal", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "plt", ".", "imread", "(", "\"graph.png\"", ")", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "plt", ".", "imread", "(", "\"pattern.png\"", ")", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "plt", ".", "imread", "(", "\"graph_pattern.png\"", ")", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "plt", ".", "text", "(", "0", ",", "0", ",", "\"#isomorphic subgraphs: %d\"", "%", "(", "len", "(", "subisomorphisms", ")", ")", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_checker.get_subisomorphisms": [[16, 23], ["dict", "pattern_checker.PatternChecker", "graphs.items", "pattern_checker.PatternChecker.get_subisomorphisms"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_subisomorphisms"], ["def", "get_subisomorphisms", "(", "pattern", ",", "graphs", ")", ":", "\n", "    ", "results", "=", "dict", "(", ")", "\n", "pattern_checker", "=", "PatternChecker", "(", ")", "\n", "for", "gid", ",", "graph", "in", "graphs", ".", "items", "(", ")", ":", "\n", "        ", "subisomorphisms", "=", "pattern_checker", ".", "get_subisomorphisms", "(", "graph", ",", "pattern", ")", "\n", "results", "[", "gid", "]", "=", "subisomorphisms", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.node_compat_fn": [[12, 17], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "node_compat_fn", "(", "cls", ",", "g1", ",", "g2", ",", "v1", ",", "v2", ")", ":", "\n", "        ", "vertex1", "=", "g1", ".", "vs", "[", "v1", "]", "\n", "vertex2", "=", "g2", ".", "vs", "[", "v2", "]", "\n", "return", "vertex1", "[", "\"label\"", "]", "==", "vertex2", "[", "\"label\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.edge_compat_fn": [[18, 34], ["utils.retrieve_multiple_edges", "utils.retrieve_multiple_edges", "set", "edge1.is_loop", "edge2.is_loop", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.retrieve_multiple_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.retrieve_multiple_edges"], ["", "@", "classmethod", "\n", "def", "edge_compat_fn", "(", "cls", ",", "g1", ",", "g2", ",", "e1", ",", "e2", ")", ":", "\n", "        ", "edge1", "=", "g1", ".", "es", "[", "e1", "]", "\n", "edge2", "=", "g2", ".", "es", "[", "e2", "]", "\n", "if", "edge1", ".", "is_loop", "(", ")", "!=", "edge2", ".", "is_loop", "(", ")", ":", "\n", "            ", "return", "False", "\n", "# for multiedges", "\n", "", "edges1", "=", "retrieve_multiple_edges", "(", "g1", ",", "edge1", ".", "source", ",", "edge1", ".", "target", ")", "\n", "edges2", "=", "retrieve_multiple_edges", "(", "g2", ",", "edge2", ".", "source", ",", "edge2", ".", "target", ")", "\n", "if", "len", "(", "edges1", ")", "<", "len", "(", "edges2", ")", ":", "\n", "            ", "return", "False", "\n", "", "edge1_labels", "=", "set", "(", "edges1", "[", "\"label\"", "]", ")", "\n", "for", "el", "in", "edges2", "[", "\"label\"", "]", ":", "\n", "            ", "if", "el", "not", "in", "edge1_labels", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_vertex_color_vectors": [[35, 69], ["g1.vcount", "g2.vcount", "list", "list.append", "enumerate", "enumerate", "list.append", "list.append", "list.append"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "@", "classmethod", "\n", "def", "get_vertex_color_vectors", "(", "cls", ",", "g1", ",", "g2", ",", "seed_v1", "=", "-", "1", ",", "seed_v2", "=", "-", "1", ")", ":", "\n", "        ", "N1", "=", "g1", ".", "vcount", "(", ")", "\n", "N2", "=", "g2", ".", "vcount", "(", ")", "\n", "color_vectors", "=", "list", "(", ")", "\n", "if", "seed_v1", "==", "-", "1", "and", "seed_v2", "==", "-", "1", ":", "\n", "            ", "color_vectors", ".", "append", "(", "(", "None", ",", "None", ")", ")", "\n", "", "elif", "seed_v1", "==", "-", "1", "and", "seed_v2", "!=", "-", "1", ":", "\n", "            ", "vertex", "=", "g1", ".", "vs", "[", "seed_v1", "]", "\n", "seed_label", "=", "vertex", "[", "\"label\"", "]", "\n", "for", "seed_v1", ",", "vertex", "in", "enumerate", "(", "g1", ".", "vs", ")", ":", "\n", "                ", "if", "vertex", "[", "\"label\"", "]", "==", "seed_label", ":", "\n", "                    ", "color1", "=", "[", "0", "]", "*", "N1", "\n", "color1", "[", "seed_v1", "]", "=", "1", "\n", "color2", "=", "[", "0", "]", "*", "N2", "\n", "color2", "[", "seed_v2", "]", "=", "1", "\n", "color_vectors", ".", "append", "(", "(", "color1", ",", "color2", ")", ")", "\n", "", "", "", "elif", "seed_v1", "!=", "-", "1", "and", "seed_v2", "==", "-", "1", ":", "\n", "            ", "seed_label", "=", "g1", ".", "vs", "[", "seed_v1", "]", "[", "\"label\"", "]", "\n", "for", "seed_v2", ",", "vertex", "in", "enumerate", "(", "g2", ".", "vs", ")", ":", "\n", "                ", "if", "vertex", "[", "\"label\"", "]", "==", "seed_label", ":", "\n", "                    ", "color1", "=", "[", "0", "]", "*", "N1", "\n", "color1", "[", "seed_v1", "]", "=", "1", "\n", "color2", "=", "[", "0", "]", "*", "N2", "\n", "color2", "[", "seed_v2", "]", "=", "1", "\n", "color_vectors", ".", "append", "(", "(", "color1", ",", "color2", ")", ")", "\n", "", "", "", "else", ":", "# seed_v1 != -1 and seed_v2 != -1:", "\n", "            ", "if", "g1", ".", "vs", "[", "seed_v1", "]", "[", "\"label\"", "]", "==", "g2", ".", "vs", "[", "seed_v2", "]", "[", "\"label\"", "]", ":", "\n", "                ", "color1", "=", "[", "0", "]", "*", "N1", "\n", "color1", "[", "seed_v1", "]", "=", "1", "\n", "color2", "=", "[", "0", "]", "*", "N2", "\n", "color2", "[", "seed_v2", "]", "=", "1", "\n", "color_vectors", ".", "append", "(", "(", "color1", ",", "color2", ")", ")", "\n", "", "", "return", "color_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_edge_color_vectors": [[70, 109], ["len", "len", "list", "list.append", "edge.is_loop", "enumerate", "edge.is_loop", "enumerate", "list.append", "list.append", "edge.is_loop", "list.append", "edge1.is_loop", "edge2.is_loop", "edge.is_loop"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "@", "classmethod", "\n", "def", "get_edge_color_vectors", "(", "cls", ",", "g1", ",", "g2", ",", "seed_e1", "=", "-", "1", ",", "seed_e2", "=", "-", "1", ")", ":", "\n", "        ", "E1", "=", "len", "(", "g1", ".", "es", ")", "\n", "E2", "=", "len", "(", "g2", ".", "es", ")", "\n", "edge_color_vectors", "=", "list", "(", ")", "\n", "if", "seed_e1", "==", "-", "1", "and", "seed_e2", "==", "-", "1", ":", "\n", "            ", "edge_color_vectors", ".", "append", "(", "(", "None", ",", "None", ")", ")", "\n", "", "elif", "seed_e1", "==", "-", "1", "and", "seed_e2", "!=", "-", "1", ":", "\n", "            ", "edge", "=", "g2", ".", "es", "[", "seed_e2", "]", "\n", "color2", "=", "[", "0", "]", "*", "E2", "\n", "color2", "[", "seed_e2", "]", "=", "1", "\n", "seed_label", "=", "edge", "[", "\"label\"", "]", "\n", "is_loop", "=", "edge", ".", "is_loop", "(", ")", "\n", "for", "seed_e1", ",", "edge", "in", "enumerate", "(", "g1", ".", "es", ")", ":", "\n", "                ", "if", "edge", "[", "\"label\"", "]", "==", "seed_label", "and", "is_loop", "==", "edge", ".", "is_loop", "(", ")", ":", "\n", "                    ", "color1", "=", "[", "0", "]", "*", "E1", "\n", "color1", "[", "seed_e1", "]", "=", "1", "\n", "edge_color_vectors", ".", "append", "(", "(", "color1", ",", "color2", ")", ")", "\n", "", "", "", "elif", "seed_e1", "!=", "-", "1", "and", "seed_e2", "==", "-", "1", ":", "\n", "            ", "edge", "=", "g1", ".", "es", "[", "seed_e1", "]", "\n", "color1", "=", "[", "0", "]", "*", "E1", "\n", "color1", "[", "seed_e1", "]", "=", "1", "\n", "seed_label", "=", "edge", "[", "\"label\"", "]", "\n", "is_loop", "=", "edge", ".", "is_loop", "(", ")", "\n", "for", "seed_e2", ",", "edge", "in", "enumerate", "(", "g2", ".", "es", ")", ":", "\n", "                ", "if", "edge", "[", "\"label\"", "]", "==", "seed_label", "and", "is_loop", "==", "edge", ".", "is_loop", "(", ")", ":", "\n", "                    ", "color2", "=", "[", "0", "]", "*", "E2", "\n", "color2", "[", "seed_e2", "]", "=", "1", "\n", "edge_color_vectors", ".", "append", "(", "(", "color1", ",", "color2", ")", ")", "\n", "", "", "", "else", ":", "# seed_e1 != -1 and seed_e2 != -1:", "\n", "            ", "edge1", "=", "g1", ".", "es", "[", "seed_e1", "]", "\n", "edge2", "=", "g2", ".", "es", "[", "seed_e2", "]", "\n", "color1", "=", "[", "0", "]", "*", "E1", "\n", "color1", "[", "seed_e1", "]", "=", "1", "\n", "color2", "=", "[", "0", "]", "*", "E2", "\n", "color2", "[", "seed_e2", "]", "=", "1", "\n", "if", "edge1", "[", "\"label\"", "]", "==", "edge2", "[", "\"label\"", "]", "and", "edge1", ".", "is_loop", "(", ")", "==", "edge2", ".", "is_loop", "(", ")", ":", "\n", "                ", "edge_color_vectors", ".", "append", "(", "(", "color1", ",", "color2", ")", ")", "\n", "", "", "return", "edge_color_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.check": [[110, 135], ["collections.Counter", "collections.Counter", "collections.Counter.most_common", "collections.Counter", "collections.Counter", "collections.Counter.most_common", "graph.vcount", "pattern.vcount", "graph.ecount", "pattern.ecount", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "check", "(", "self", ",", "graph", ",", "pattern", ",", "**", "kw", ")", ":", "\n", "# valid or not", "\n", "        ", "if", "graph", ".", "vcount", "(", ")", "<", "pattern", ".", "vcount", "(", ")", ":", "\n", "            ", "return", "False", "\n", "", "if", "graph", ".", "ecount", "(", ")", "<", "pattern", ".", "ecount", "(", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "graph_vlabels", "=", "Counter", "(", "graph", ".", "vs", "[", "\"label\"", "]", ")", "\n", "pattern_vlabels", "=", "Counter", "(", "pattern", ".", "vs", "[", "\"label\"", "]", ")", "\n", "if", "len", "(", "graph_vlabels", ")", "<", "len", "(", "pattern_vlabels", ")", ":", "\n", "            ", "return", "False", "\n", "", "for", "vertex_label", ",", "pv_cnt", "in", "pattern_vlabels", ".", "most_common", "(", ")", ":", "\n", "            ", "diff", "=", "graph_vlabels", "[", "vertex_label", "]", "-", "pv_cnt", "\n", "if", "diff", "<", "0", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "graph_elabels", "=", "Counter", "(", "graph", ".", "es", "[", "\"label\"", "]", ")", "\n", "pattern_elabels", "=", "Counter", "(", "pattern", ".", "es", "[", "\"label\"", "]", ")", "\n", "if", "len", "(", "graph_elabels", ")", "<", "len", "(", "pattern_elabels", ")", ":", "\n", "            ", "return", "False", "\n", "", "for", "edge_label", ",", "pe_cnt", "in", "pattern_elabels", ".", "most_common", "(", ")", ":", "\n", "            ", "diff", "=", "graph_elabels", "[", "edge_label", "]", "-", "pe_cnt", "\n", "if", "diff", "<", "0", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_subisomorphisms": [[136, 164], ["kw.get", "kw.get", "kw.get", "kw.get", "pattern_checker.PatternChecker.get_vertex_color_vectors", "pattern_checker.PatternChecker.get_edge_color_vectors", "list", "list", "pattern_checker.PatternChecker.check", "list", "list.append", "list.extend", "graph.get_subisomorphisms_vf2", "all", "list.append", "len"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_vertex_color_vectors", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_edge_color_vectors", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.check", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["", "def", "get_subisomorphisms", "(", "self", ",", "graph", ",", "pattern", ",", "**", "kw", ")", ":", "\n", "        ", "if", "not", "self", ".", "check", "(", "graph", ",", "pattern", ")", ":", "\n", "            ", "return", "list", "(", ")", "\n", "\n", "", "seed_v1", "=", "kw", ".", "get", "(", "\"seed_v1\"", ",", "-", "1", ")", "\n", "seed_v2", "=", "kw", ".", "get", "(", "\"seed_v2\"", ",", "-", "1", ")", "\n", "seed_e1", "=", "kw", ".", "get", "(", "\"seed_e1\"", ",", "-", "1", ")", "\n", "seed_e2", "=", "kw", ".", "get", "(", "\"seed_e2\"", ",", "-", "1", ")", "\n", "\n", "vertex_color_vectors", "=", "PatternChecker", ".", "get_vertex_color_vectors", "(", "graph", ",", "pattern", ",", "seed_v1", "=", "seed_v1", ",", "seed_v2", "=", "seed_v2", ")", "\n", "edge_color_vectors", "=", "PatternChecker", ".", "get_edge_color_vectors", "(", "graph", ",", "pattern", ",", "seed_e1", "=", "seed_e1", ",", "seed_e2", "=", "seed_e2", ")", "\n", "\n", "vertices_in_graph", "=", "list", "(", ")", "\n", "if", "seed_v1", "!=", "-", "1", ":", "\n", "            ", "vertices_in_graph", ".", "append", "(", "seed_v1", ")", "\n", "", "if", "seed_e1", "!=", "-", "1", ":", "\n", "            ", "vertices_in_graph", ".", "extend", "(", "graph", ".", "es", "[", "seed_e1", "]", ".", "tuple", ")", "\n", "", "subisomorphisms", "=", "list", "(", ")", "# [(component, mapping), ...]", "\n", "for", "vertex_colors", "in", "vertex_color_vectors", ":", "\n", "            ", "for", "edge_colors", "in", "edge_color_vectors", ":", "\n", "                ", "for", "subisomorphism", "in", "graph", ".", "get_subisomorphisms_vf2", "(", "pattern", ",", "\n", "color1", "=", "vertex_colors", "[", "0", "]", ",", "color2", "=", "vertex_colors", "[", "1", "]", ",", "\n", "edge_color1", "=", "edge_colors", "[", "0", "]", ",", "edge_color2", "=", "edge_colors", "[", "1", "]", ",", "\n", "node_compat_fn", "=", "PatternChecker", ".", "node_compat_fn", ",", "\n", "edge_compat_fn", "=", "PatternChecker", ".", "edge_compat_fn", ")", ":", "\n", "                    ", "if", "len", "(", "vertices_in_graph", ")", "==", "0", "or", "all", "(", "[", "v", "in", "subisomorphism", "for", "v", "in", "vertices_in_graph", "]", ")", ":", "\n", "                        ", "subisomorphisms", ".", "append", "(", "subisomorphism", ")", "\n", "", "", "", "", "return", "subisomorphisms", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.count_subisomorphisms": [[165, 204], ["kw.get", "kw.get", "kw.get", "kw.get", "pattern_checker.PatternChecker.get_vertex_color_vectors", "pattern_checker.PatternChecker.get_edge_color_vectors", "list", "pattern_checker.PatternChecker.check", "list.append", "list.extend", "len", "graph.count_subisomorphisms_vf2", "graph.get_subisomorphisms_vf2", "all"], "methods", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_vertex_color_vectors", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.get_edge_color_vectors", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_checker.PatternChecker.check", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.extend"], ["", "def", "count_subisomorphisms", "(", "self", ",", "graph", ",", "pattern", ",", "**", "kw", ")", ":", "\n", "        ", "if", "not", "self", ".", "check", "(", "graph", ",", "pattern", ")", ":", "\n", "            ", "return", "0", "\n", "\n", "", "seed_v1", "=", "kw", ".", "get", "(", "\"seed_v1\"", ",", "-", "1", ")", "\n", "seed_v2", "=", "kw", ".", "get", "(", "\"seed_v2\"", ",", "-", "1", ")", "\n", "seed_e1", "=", "kw", ".", "get", "(", "\"seed_e1\"", ",", "-", "1", ")", "\n", "seed_e2", "=", "kw", ".", "get", "(", "\"seed_e2\"", ",", "-", "1", ")", "\n", "\n", "vertex_color_vectors", "=", "PatternChecker", ".", "get_vertex_color_vectors", "(", "graph", ",", "pattern", ",", "seed_v1", "=", "seed_v1", ",", "seed_v2", "=", "seed_v2", ")", "\n", "edge_color_vectors", "=", "PatternChecker", ".", "get_edge_color_vectors", "(", "graph", ",", "pattern", ",", "seed_e1", "=", "seed_e1", ",", "seed_e2", "=", "seed_e2", ")", "\n", "\n", "vertices_in_graph", "=", "list", "(", ")", "\n", "if", "seed_v1", "!=", "-", "1", ":", "\n", "            ", "vertices_in_graph", ".", "append", "(", "seed_v1", ")", "\n", "", "if", "seed_e1", "!=", "-", "1", ":", "\n", "            ", "vertices_in_graph", ".", "extend", "(", "graph", ".", "es", "[", "seed_e1", "]", ".", "tuple", ")", "\n", "", "if", "len", "(", "vertices_in_graph", ")", "==", "0", ":", "\n", "            ", "counts", "=", "0", "\n", "for", "vertex_colors", "in", "vertex_color_vectors", ":", "\n", "                ", "for", "edge_colors", "in", "edge_color_vectors", ":", "\n", "                    ", "counts", "+=", "graph", ".", "count_subisomorphisms_vf2", "(", "pattern", ",", "\n", "color1", "=", "vertex_colors", "[", "0", "]", ",", "color2", "=", "vertex_colors", "[", "1", "]", ",", "\n", "edge_color1", "=", "edge_colors", "[", "0", "]", ",", "edge_color2", "=", "edge_colors", "[", "1", "]", ",", "\n", "node_compat_fn", "=", "PatternChecker", ".", "node_compat_fn", ",", "\n", "edge_compat_fn", "=", "PatternChecker", ".", "edge_compat_fn", ")", "\n", "", "", "return", "counts", "\n", "", "else", ":", "\n", "            ", "counts", "=", "0", "\n", "for", "vertex_colors", "in", "vertex_color_vectors", ":", "\n", "                ", "for", "edge_colors", "in", "edge_color_vectors", ":", "\n", "                    ", "for", "subisomorphism", "in", "graph", ".", "get_subisomorphisms_vf2", "(", "pattern", ",", "\n", "color1", "=", "vertex_colors", "[", "0", "]", ",", "color2", "=", "vertex_colors", "[", "1", "]", ",", "\n", "edge_color1", "=", "edge_colors", "[", "0", "]", ",", "edge_color2", "=", "edge_colors", "[", "1", "]", ",", "\n", "node_compat_fn", "=", "PatternChecker", ".", "node_compat_fn", ",", "\n", "edge_compat_fn", "=", "PatternChecker", ".", "edge_compat_fn", ")", ":", "\n", "                        ", "if", "all", "(", "[", "v", "in", "subisomorphism", "for", "v", "in", "vertices_in_graph", "]", ")", ":", "\n", "                            ", "counts", "+=", "1", "\n", "", "", "", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.pattern_generator.generate_patterns": [[10, 52], ["range", "time.time", "igraph.Graph", "utils.generate_labels", "utils.generate_labels", "utils.generate_tree", "collections.defaultdict", "enumerate", "utils.generate_tree.ecount", "list", "utils.generate_tree.add_edges", "patterns.append", "edge_label_mapping[].add", "numpy.random.randint", "numpy.random.randint", "list.append", "edge_keys.append", "edge_label_mapping[].add", "len"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_labels", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_labels", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_tree", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["def", "generate_patterns", "(", "number_of_vertices", ",", "number_of_edges", ",", "number_of_vertex_labels", ",", "number_of_edge_labels", ",", "number_of_patterns", ")", ":", "\n", "    ", "patterns", "=", "[", "]", "\n", "\n", "for", "p", "in", "range", "(", "number_of_patterns", ")", ":", "\n", "        ", "start", "=", "time", "(", ")", "\n", "\n", "pattern", "=", "ig", ".", "Graph", "(", "directed", "=", "True", ")", "\n", "\n", "# vertex labels", "\n", "vertex_labels", "=", "generate_labels", "(", "number_of_vertices", ",", "number_of_vertex_labels", ")", "\n", "# edge labels", "\n", "edge_labels", "=", "generate_labels", "(", "number_of_edges", ",", "number_of_edge_labels", ")", "\n", "\n", "# first, generate a tree", "\n", "pattern", "=", "generate_tree", "(", "number_of_vertices", ",", "directed", "=", "True", ")", "\n", "edge_label_mapping", "=", "defaultdict", "(", "set", ")", "\n", "for", "e", ",", "edge", "in", "enumerate", "(", "pattern", ".", "es", ")", ":", "\n", "            ", "edge_label_mapping", "[", "edge", ".", "tuple", "]", ".", "add", "(", "edge_labels", "[", "e", "]", ")", "\n", "", "edge_keys", "=", "[", "0", "]", "*", "(", "number_of_vertices", "-", "1", ")", "\n", "\n", "# second, random add edges ", "\n", "ecount", "=", "pattern", ".", "ecount", "(", ")", "\n", "new_edges", "=", "list", "(", ")", "\n", "while", "ecount", "<", "number_of_edges", ":", "\n", "            ", "u", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "number_of_vertices", ")", "\n", "v", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "number_of_vertices", ")", "\n", "src_tgt", "=", "(", "u", ",", "v", ")", "\n", "edge_label", "=", "edge_labels", "[", "ecount", "]", "\n", "# # we do not generate edges between two same vertices with same labels", "\n", "if", "edge_label", "in", "edge_label_mapping", "[", "src_tgt", "]", ":", "\n", "                ", "continue", "\n", "", "new_edges", ".", "append", "(", "src_tgt", ")", "\n", "edge_keys", ".", "append", "(", "len", "(", "edge_label_mapping", "[", "src_tgt", "]", ")", ")", "\n", "edge_label_mapping", "[", "src_tgt", "]", ".", "add", "(", "edge_label", ")", "\n", "ecount", "+=", "1", "\n", "", "pattern", ".", "add_edges", "(", "new_edges", ")", "\n", "pattern", ".", "vs", "[", "\"label\"", "]", "=", "vertex_labels", "\n", "pattern", ".", "es", "[", "\"label\"", "]", "=", "edge_labels", "\n", "pattern", ".", "es", "[", "\"key\"", "]", "=", "edge_keys", "\n", "\n", "patterns", ".", "append", "(", "pattern", ")", "\n", "", "return", "patterns", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.run.generate_graphs": [[89, 102], ["range", "graph_generator.generate", "graph.write", "os.path.join", "open", "json.dump", "os.path.join"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.generate"], ["def", "generate_graphs", "(", "graph_generator", ",", "number_of_graph_vertices", ",", "number_of_graph_edges", ",", "number_of_graph_vertex_labels", ",", "number_of_graph_edge_labels", ",", "\n", "alpha", ",", "max_pattern_counts", ",", "max_subgraph", ",", "number_of_graphs", ",", "save_graph_dir", ",", "save_metadata_dir", ")", ":", "\n", "    ", "graphs_id", "=", "\"G_N%d_E%d_NL%d_EL%d_A%.2f\"", "%", "(", "\n", "number_of_graph_vertices", ",", "number_of_graph_edges", ",", "number_of_graph_vertex_labels", ",", "number_of_graph_edge_labels", ",", "alpha", ")", "\n", "# print(graphs_id)", "\n", "for", "g", "in", "range", "(", "number_of_graphs", ")", ":", "\n", "        ", "graph", ",", "metadata", "=", "graph_generator", ".", "generate", "(", "\n", "number_of_graph_vertices", ",", "number_of_graph_edges", ",", "number_of_graph_vertex_labels", ",", "number_of_graph_edge_labels", ",", "\n", "alpha", ",", "max_pattern_counts", "=", "max_pattern_counts", ",", "max_subgraph", "=", "max_subgraph", ",", "return_subisomorphisms", "=", "True", ")", "\n", "graph", ".", "write", "(", "os", ".", "path", ".", "join", "(", "save_graph_dir", ",", "graphs_id", "+", "\"_%d.gml\"", "%", "(", "g", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_metadata_dir", ",", "graphs_id", "+", "\"_%d.meta\"", "%", "(", "g", ")", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "metadata", ",", "f", ")", "\n", "", "", "return", "graphs_id", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_png": [[6, 10], ["os.system", "dot_filename.replace"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "import", "re", "\n", "import", "os", "\n", "import", "json", "\n", "from", "torch", ".", "optim", ".", "lr_scheduler", "import", "LambdaLR", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_labels": [[11, 21], ["list", "range", "numpy.random.shuffle", "range", "numpy.random.shuffle", "list.append", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["from", "collections", "import", "OrderedDict", "\n", "from", "multiprocessing", "import", "Pool", "\n", "from", "tqdm", "import", "tqdm", "\n", "from", "sklearn", ".", "metrics", "import", "precision_recall_fscore_support", "\n", "\n", "##########################################################", "\n", "################## Evaluation Functions ##################", "\n", "##########################################################", "\n", "def", "compute_mae", "(", "predict", ",", "count", ")", ":", "\n", "    ", "error", "=", "np", ".", "absolute", "(", "predict", "-", "count", ")", "\n", "return", "error", ".", "mean", "(", ")", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.generate_tree": [[22, 44], ["list", "numpy.random.shuffle", "list", "range", "igraph.Graph", "ig.Graph.add_vertices", "ig.Graph.add_edges", "range", "utils.get_direction", "list.append", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.GraphGenerator.add_edges", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.get_direction", "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.graph_generator.NEC.append"], ["\n", "", "def", "compute_rmse", "(", "predict", ",", "count", ")", ":", "\n", "    ", "error", "=", "np", ".", "power", "(", "predict", "-", "count", ",", "2", ")", "\n", "return", "np", ".", "power", "(", "error", ".", "mean", "(", ")", ",", "0.5", ")", "\n", "\n", "", "def", "compute_p_r_f1", "(", "predict", ",", "count", ")", ":", "\n", "    ", "p", ",", "r", ",", "f1", ",", "_", "=", "precision_recall_fscore_support", "(", "predict", ",", "count", ",", "average", "=", "\"binary\"", ")", "\n", "return", "p", ",", "r", ",", "f1", "\n", "\n", "", "def", "compute_tp", "(", "predict", ",", "count", ")", ":", "\n", "    ", "true_count", "=", "count", "==", "1", "\n", "true_pred", "=", "predict", "==", "1", "\n", "true_pred_count", "=", "true_count", "*", "true_pred", "\n", "return", "np", ".", "count_nonzero", "(", "true_pred_count", ")", "/", "np", ".", "count_nonzero", "(", "true_count", ")", "\n", "\n", "##########################################################", "\n", "#################### Parsing Functions ###################", "\n", "##########################################################", "\n", "", "def", "parse_pattern_info", "(", "x", ")", ":", "\n", "    ", "p", "=", "re", ".", "findall", "(", "r\"N(\\d+)_E(\\d+)_NL(\\d+)_EL(\\d+)\"", ",", "x", ")", "[", "0", "]", "\n", "return", "{", "\"V\"", ":", "int", "(", "p", "[", "0", "]", ")", ",", "\"E\"", ":", "int", "(", "p", "[", "1", "]", ")", ",", "\"VL\"", ":", "int", "(", "p", "[", "2", "]", ")", ",", "\"EL\"", ":", "int", "(", "p", "[", "3", "]", ")", "}", "\n", "\n", "", "def", "parse_graph_info", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.get_direction": [[45, 47], ["numpy.random.randint"], "function", ["None"], ["    ", "g", "=", "re", ".", "findall", "(", "r\"N(\\d+)_E(\\d+)_NL(\\d+)_EL(\\d+)_A([\\d\\.]+)\"", ",", "x", ")", "[", "0", "]", "\n", "return", "{", "\"V\"", ":", "int", "(", "g", "[", "0", "]", ")", ",", "\"E\"", ":", "int", "(", "g", "[", "1", "]", ")", ",", "\"VL\"", ":", "int", "(", "g", "[", "2", "]", ")", ",", "\"EL\"", ":", "int", "(", "g", "[", "3", "]", ")", ",", "\"alpha\"", ":", "float", "(", "g", "[", "4", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.retrieve_multiple_edges": [[48, 60], ["graph.incident", "igraph.EdgeSeq", "igraph.EdgeSeq", "set().intersection", "graph.incident", "list", "graph.incident", "set"], "function", ["None"], ["##########################################################", "\n", "######### Representation and Encoding Functions ##########", "\n", "##########################################################", "\n", "", "def", "get_enc_len", "(", "x", ",", "base", "=", "10", ")", ":", "\n", "# return math.floor(math.log(x, base)+1.0)", "\n", "    ", "l", "=", "0", "\n", "while", "x", ":", "\n", "        ", "l", "+=", "1", "\n", "x", "=", "x", "//", "base", "\n", "", "return", "l", "\n", "\n", "", "def", "int2onehot", "(", "x", ",", "len_x", ",", "base", "=", "10", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "(", "int", ",", "list", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.str2bool": [[61, 64], ["x.lower.lower"], "function", ["None"], ["        ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "", "x_shape", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ")", "\n", "one_hot", "=", "np", ".", "zeros", "(", "(", "len_x", "*", "base", ",", "x", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.sample_element": [[65, 68], ["numpy.random.randint", "len"], "function", ["None"], ["x", "=", "x", "%", "(", "base", "**", "len_x", ")", "\n", "idx", "=", "one_hot", ".", "shape", "[", "0", "]", "-", "base", "\n", "while", "np", ".", "any", "(", "x", ")", ":", "\n", "        ", "x", ",", "y", "=", "x", "//", "base", ",", "x", "%", "base", "\n"]], "home.repos.pwc.inspect_result.HKUST-KnowComp_NeuralSubgraphCounting.generator.utils.powerset": [[69, 75], ["sorted", "itertools.chain.from_iterable", "len", "itertools.combinations", "range"], "function", ["None"], ["cond", "=", "y", ".", "reshape", "(", "1", ",", "-", "1", ")", "==", "np", ".", "arange", "(", "0", ",", "base", ",", "dtype", "=", "y", ".", "dtype", ")", ".", "reshape", "(", "base", ",", "1", ")", "\n", "one_hot", "[", "idx", ":", "idx", "+", "base", "]", "=", "np", ".", "where", "(", "cond", ",", "1.0", ",", "0.0", ")", "\n", "idx", "-=", "base", "\n", "", "while", "idx", ">=", "0", ":", "\n", "        ", "one_hot", "[", "idx", "]", "=", "1.0", "\n", "idx", "-=", "base", "\n", "", "one_hot", "=", "one_hot", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "*", "x_shape", ",", "len_x", "*", "base", ")", "\n"]]}