{"home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.gen_data_for_genia.batch_stat": [[11, 33], ["zip", "print", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "collections.defaultdict.items", "start_dic[].append", "end_dic[].append", "len", "len", "len", "len"], "function", ["None"], ["def", "batch_stat", "(", "batches", ":", "Tuple", "[", "List", "[", "List", "[", "List", "[", "str", "]", "]", "]", ",", "\n", "List", "[", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", "]", ",", "\n", "List", "[", "List", "[", "List", "[", "bool", "]", "]", "]", "]", ")", "->", "None", ":", "\n", "    ", "all_num", "=", "0", "\n", "start_num", "=", "0", "\n", "end_num", "=", "0", "\n", "for", "token_batch", ",", "label_batch", ",", "mask_batch", "in", "zip", "(", "*", "batches", ")", ":", "\n", "        ", "for", "labels", "in", "label_batch", ":", "\n", "            ", "start_dic", "=", "defaultdict", "(", "list", ")", "\n", "end_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "ent", "in", "labels", ":", "\n", "                ", "start_dic", "[", "(", "ent", "[", "0", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "end_dic", "[", "(", "ent", "[", "1", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "all_num", "+=", "1", "\n", "", "for", "k", ",", "v", "in", "start_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "start_num", "+=", "len", "(", "v", ")", "\n", "", "", "for", "k", ",", "v", "in", "end_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "end_num", "+=", "len", "(", "v", ")", "\n", "\n", "", "", "", "", "print", "(", "\"All {}, start {}, end {}\"", ".", "format", "(", "all_num", ",", "start_num", ",", "end_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Stat.__init__": [[19, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "total", ":", "int", "=", "0", "\n", "self", ".", "layer", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "self", ".", "ignored", ":", "int", "=", "0", "\n", "self", ".", "num_labels", ":", "int", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.EntityAnnotation.__init__": [[37, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start", ":", "int", ",", "end", ":", "int", ",", "type", ":", "str", ",", "mention", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "start", ":", "int", "=", "start", "\n", "self", ".", "end", ":", "int", "=", "end", "\n", "self", ".", "type", ":", "str", "=", "type", "\n", "self", ".", "mention", ":", "str", "=", "mention", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Token.__init__": [[46, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "word", ":", "str", ",", "begin", ":", "int", ",", "end", ":", "int", ")", "->", "None", ":", "\n", "        ", "self", ".", "word", ":", "str", "=", "word", "\n", "self", ".", "begin", ":", "int", "=", "begin", "\n", "self", ".", "end", ":", "int", "=", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Sentence.__init__": [[54, 59], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "text", ":", "str", ",", "begin", ":", "int", ",", "end", ":", "int", ")", "->", "None", ":", "\n", "        ", "self", ".", "text", ":", "str", "=", "text", "\n", "self", ".", "begin", ":", "int", "=", "begin", "\n", "self", ".", "end", ":", "int", "=", "end", "\n", "self", ".", "tokens", ":", "Optional", "[", "List", "[", "Token", "]", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Tokenizer.__init__": [[63, 67], ["stanfordnlp.server.CoreNLPClient", "parse_ace2005.Tokenizer.client.ensure_alive"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "os", ".", "environ", "[", "'CORENLP_HOME'", "]", "=", "'{}/stanford-corenlp-full-2018-10-05'", ".", "format", "(", "os", ".", "environ", "[", "'HOME'", "]", ")", "\n", "self", ".", "client", ":", "CoreNLPClient", "=", "CoreNLPClient", "(", ")", "\n", "self", ".", "client", ".", "ensure_alive", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Tokenizer.__del__": [[68, 72], ["glob.glob", "os.path.isfile", "os.remove"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "p", "in", "glob", ".", "glob", "(", "'corenlp_server-*.props'", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "p", ")", ":", "\n", "                ", "os", ".", "remove", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Tokenizer.tokenize": [[73, 104], ["parse_ace2005.Tokenizer.client.annotate", "parse_ace2005.Tokenizer.fix_split", "doc.index", "parse_ace2005.Tokenizer.append", "parse_ace2005.Tokenizer.client.annotate", "parse_ace2005.Tokenizer.fix_tokens", "parse_ace2005.Sentence", "parse_ace2005.Tokenizer.append", "doc.index", "len", "parse_ace2005.Token"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.fix_split", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.fix_tokens"], ["", "", "", "def", "tokenize", "(", "self", ",", "doc", ":", "str", ")", "->", "List", "[", "Sentence", "]", ":", "\n", "        ", "splitter_annotation", "=", "self", ".", "client", ".", "annotate", "(", "doc", ",", "annotators", "=", "[", "'ssplit'", "]", ",", "\n", "properties", "=", "{", "'tokenize.options'", ":", "'ptb3Escaping=false,invertible=true'", "}", ")", "\n", "end", "=", "0", "\n", "sentences", "=", "[", "]", "\n", "for", "sentence", "in", "splitter_annotation", ".", "sentence", ":", "\n", "            ", "begin", "=", "doc", ".", "index", "(", "sentence", ".", "token", "[", "0", "]", ".", "originalText", ",", "end", ")", "\n", "for", "token", "in", "sentence", ".", "token", ":", "\n", "                ", "end", "=", "doc", ".", "index", "(", "token", ".", "originalText", ",", "end", ")", "+", "len", "(", "token", ".", "originalText", ")", "\n", "", "text", "=", "doc", "[", "begin", ":", "end", "]", "\n", "sentences", ".", "append", "(", "Sentence", "(", "text", ",", "begin", ",", "end", ")", ")", "\n", "", "sentences", "=", "self", ".", "fix_split", "(", "sentences", ")", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "tokenizer_annotation", "=", "self", ".", "client", ".", "annotate", "(", "sentence", ".", "text", ",", "annotators", "=", "[", "'tokenize'", "]", ",", "\n", "properties", "=", "{", "'tokenize.options'", ":", "'normalizeParentheses=false,'", "\n", "'normalizeOtherBrackets=false,'", "\n", "'latexQuotes=false,'", "\n", "'unicodeQuotes=false,'", "\n", "'invertible=true'", "}", ")", "\n", "tokens", "=", "[", "]", "\n", "for", "token", "in", "tokenizer_annotation", ".", "sentencelessToken", ":", "\n", "                ", "word", "=", "token", ".", "originalText", "\n", "begin", "=", "sentence", ".", "begin", "+", "token", ".", "beginChar", "\n", "end", "=", "sentence", ".", "begin", "+", "token", ".", "endChar", "\n", "assert", "word", "==", "doc", "[", "begin", ":", "end", "]", "\n", "tokens", ".", "append", "(", "Token", "(", "word", ",", "begin", ",", "end", ")", ")", "\n", "", "tokens", "=", "self", ".", "fix_tokens", "(", "tokens", ")", "\n", "sentence", ".", "tokens", "=", "tokens", "\n", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Tokenizer.fix_split": [[105, 129], ["len", "sentence.text.index", "parse_ace2005.Sentence", "result.append", "re.search().end", "result.append", "len", "re.search"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fix_split", "(", "sentences", ":", "List", "[", "Sentence", "]", ")", "->", "List", "[", "Sentence", "]", ":", "\n", "        ", "result", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "sentences", ")", ":", "\n", "            ", "sentence", "=", "sentences", "[", "i", "]", "\n", "while", "True", ":", "\n", "                ", "next_sentence", "=", "sentences", "[", "i", "+", "1", "]", "if", "i", "<", "len", "(", "sentences", ")", "-", "1", "else", "None", "\n", "if", "'\\n\\n'", "in", "sentence", ".", "text", ":", "\n", "                    ", "index", "=", "sentence", ".", "text", ".", "index", "(", "'\\n\\n'", ")", "\n", "new_sentence", "=", "Sentence", "(", "sentence", ".", "text", "[", ":", "index", "]", ",", "sentence", ".", "begin", ",", "sentence", ".", "begin", "+", "index", ")", "\n", "result", ".", "append", "(", "new_sentence", ")", "\n", "index", "+=", "re", ".", "search", "(", "r'[\\n\\t ]+'", ",", "sentence", ".", "text", "[", "index", ":", "]", ")", ".", "end", "(", ")", "\n", "sentence", ".", "text", "=", "sentence", ".", "text", "[", "index", ":", "]", "\n", "sentence", ".", "begin", "+=", "index", "\n", "", "elif", "next_sentence", "is", "not", "None", "and", "next_sentence", ".", "begin", "==", "sentence", ".", "end", ":", "\n", "                    ", "sentence", ".", "text", "+=", "next_sentence", ".", "text", "\n", "sentence", ".", "end", "=", "next_sentence", ".", "end", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "result", ".", "append", "(", "sentence", ")", "\n", "break", "\n", "", "", "i", "+=", "1", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Tokenizer.fix_tokens": [[130, 154], ["result.append", "result.append", "re.search", "token.word.index", "parse_ace2005.Token", "result.append", "token.word.index", "parse_ace2005.Token", "result.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fix_tokens", "(", "tokens", ":", "List", "[", "Token", "]", ")", "->", "List", "[", "Token", "]", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "while", "re", ".", "search", "(", "r'([^-]+-[A-Z].*|[^-]*[A-Z][^-]*-[^-]+-[^-]*)'", ",", "token", ".", "word", ")", "is", "not", "None", ":", "\n", "                ", "index", "=", "token", ".", "word", ".", "index", "(", "'-'", ")", "\n", "new_token", "=", "Token", "(", "token", ".", "word", "[", ":", "index", "]", ",", "token", ".", "begin", ",", "token", ".", "begin", "+", "index", ")", "\n", "result", ".", "append", "(", "new_token", ")", "\n", "index", "+=", "1", "\n", "token", ".", "word", "=", "token", ".", "word", "[", "index", ":", "]", "\n", "token", ".", "begin", "+=", "index", "\n", "", "result", ".", "append", "(", "token", ")", "\n", "", "tokens", "=", "result", "\n", "result", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "while", "' '", "in", "token", ".", "word", ":", "\n", "                ", "index", "=", "token", ".", "word", ".", "index", "(", "' '", ")", "\n", "new_token", "=", "Token", "(", "token", ".", "word", "[", ":", "index", "]", ",", "token", ".", "begin", ",", "token", ".", "begin", "+", "index", ")", "\n", "result", ".", "append", "(", "new_token", ")", "\n", "index", "+=", "1", "\n", "token", ".", "word", "=", "token", ".", "word", "[", "index", ":", "]", "\n", "token", ".", "begin", "+=", "index", "\n", "", "result", ".", "append", "(", "token", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Label.__init__": [[158, 162], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "start", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "end", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "tag", ":", "Optional", "[", "str", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Label.__eq__": [[163, 165], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "start", "==", "other", ".", "start", "and", "self", ".", "end", "==", "other", ".", "end", "and", "self", ".", "tag", "==", "other", ".", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.Label.__str__": [[166, 168], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "str", "(", "self", ".", "start", ")", "+", "','", "+", "str", "(", "self", ".", "end", ")", "+", "' '", "+", "self", ".", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.calc_stat": [[170, 205], ["sorted", "TAG_SET.items", "len", "range", "sum", "len", "range", "len", "stat.layer.append"], "function", ["None"], ["", "", "def", "calc_stat", "(", "words", ":", "List", "[", "str", "]", ",", "labels", ":", "List", "[", "Label", "]", ")", "->", "None", ":", "\n", "    ", "labels", "=", "sorted", "(", "labels", ",", "key", "=", "lambda", "x", ":", "(", "x", ".", "start", ",", "-", "x", ".", "end", ",", "x", ".", "tag", ")", ")", "\n", "for", "tag", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "        ", "sequence_label", "=", "[", "0", "]", "*", "len", "(", "words", ")", "\n", "prev_label", "=", "None", "\n", "for", "label", "in", "labels", ":", "\n", "\n", "            ", "if", "label", ".", "tag", "!=", "tag", ":", "\n", "                ", "continue", "\n", "", "stat", ".", "total", "+=", "1", "\n", "\n", "if", "prev_label", "is", "not", "None", "and", "label", "==", "prev_label", ":", "\n", "                ", "depth", "=", "sequence_label", "[", "label", ".", "start", "]", "-", "1", "\n", "stat", ".", "layer", "[", "depth", "]", "+=", "1", "\n", "continue", "\n", "\n", "", "flag", "=", "True", "\n", "depth", "=", "sequence_label", "[", "label", ".", "start", "]", "\n", "for", "index", "in", "range", "(", "label", ".", "start", "+", "1", ",", "label", ".", "end", ")", ":", "\n", "                ", "if", "sequence_label", "[", "index", "]", "!=", "depth", ":", "\n", "                    ", "flag", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "flag", ":", "\n", "                ", "for", "index", "in", "range", "(", "label", ".", "start", ",", "label", ".", "end", ")", ":", "\n", "                    ", "sequence_label", "[", "index", "]", "+=", "1", "\n", "", "if", "len", "(", "stat", ".", "layer", ")", "==", "depth", ":", "\n", "                    ", "stat", ".", "layer", ".", "append", "(", "0", ")", "\n", "", "stat", ".", "layer", "[", "depth", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "stat", ".", "ignored", "+=", "1", "\n", "\n", "", "prev_label", "=", "label", "\n", "\n", "", "stat", ".", "num_labels", "+=", "sum", "(", "sequence_label", ")", "+", "len", "(", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.parse_document": [[222, 353], ["entity_annotations.sort", "tokenizer.tokenize", "open", "open", "f.read", "re.sub", "f.read.index", "re.sub", "re.sub.index", "mention.replace.replace", "mention.replace.replace().replace", "list", "list", "output_lines.append", "list", "output_lines.append", "output_lines.append", "parse_ace2005.calc_stat", "f.read.index", "len", "len", "mention.replace.replace", "list.append", "list.append", "parse_ace2005.Label", "list.append", "next.find", "next.index", "next.find", "mention.replace.replace", "len", "len", "next.index", "len", "next.find", "next.find", "next.find", "next.index", "int", "next.index", "next.index", "line[].strip", "mention.replace.replace", "mention.replace.replace().replace", "parse_ace2005.EntityAnnotation", "entity_annotations.append", "str", "next.index", "len", "next.index", "len", "int", "next.index", "next.find", "next", "mention.replace.replace", "line[].strip", "mention.replace.replace"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.tokenize", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.calc_stat"], ["def", "parse_document", "(", "basename", ":", "str", ",", "tokenizer", ":", "Tokenizer", ")", "->", "List", "[", "str", "]", ":", "\n", "\n", "    ", "entity_annotations", "=", "[", "]", "\n", "with", "open", "(", "basename", "+", "'.apf.xml'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "entity_flag", "=", "False", "\n", "extent_flag", "=", "False", "\n", "tag", "=", "None", "\n", "for", "line", "in", "f", ":", "\n", "\n", "            ", "if", "line", ".", "find", "(", "ENTITY_BEGIN_TAG", ")", ">", "-", "1", ":", "\n", "                ", "entity_flag", "=", "True", "\n", "bi", "=", "line", ".", "index", "(", "TYPE_ATTRIBUTE", ")", "+", "len", "(", "TYPE_ATTRIBUTE", ")", "\n", "ei", "=", "line", ".", "index", "(", "'\"'", ",", "bi", ")", "\n", "tag", "=", "line", "[", "bi", ":", "ei", "]", "\n", "\n", "", "if", "entity_flag", ":", "\n", "                ", "if", "line", ".", "find", "(", "EXTENT_BEGIN_TAG", ")", ">", "-", "1", ":", "\n", "                    ", "extent_flag", "=", "True", "\n", "\n", "", "if", "extent_flag", ":", "\n", "                    ", "if", "line", ".", "find", "(", "CHARSEQ_BEGIN_TAG", ")", ">", "-", "1", ":", "\n", "                        ", "bi", "=", "line", ".", "index", "(", "START_ATTRIBUTE", ")", "+", "len", "(", "START_ATTRIBUTE", ")", "\n", "ei", "=", "line", ".", "index", "(", "'\"'", ",", "bi", ")", "\n", "start", "=", "int", "(", "line", "[", "bi", ":", "ei", "]", ")", "\n", "bi", "=", "line", ".", "index", "(", "END_ATTRIBUTE", ")", "+", "len", "(", "END_ATTRIBUTE", ")", "\n", "ei", "=", "line", ".", "index", "(", "'\"'", ",", "bi", ")", "\n", "end", "=", "int", "(", "line", "[", "bi", ":", "ei", "]", ")", "+", "1", "\n", "mention", "=", "\"\"", "\n", "bi", "=", "line", ".", "index", "(", "'>'", ")", "+", "1", "\n", "while", "line", ".", "find", "(", "CHARSEQ_END_TAG", ")", "<", "0", ":", "\n", "                            ", "mention", "+=", "line", "[", "bi", ":", "]", ".", "strip", "(", ")", "+", "' '", "\n", "bi", "=", "0", "\n", "line", "=", "next", "(", "f", ")", "\n", "", "ei", "=", "line", ".", "index", "(", "CHARSEQ_END_TAG", ")", "\n", "mention", "+=", "line", "[", "bi", ":", "ei", "]", ".", "strip", "(", ")", "\n", "mention", "=", "mention", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "while", "'  '", "in", "mention", ":", "\n", "                            ", "mention", "=", "mention", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "", "mention", "=", "mention", ".", "replace", "(", "'&AMP;'", ",", "'&'", ")", ".", "replace", "(", "'&amp;'", ",", "'&'", ")", "\n", "entity_annotation", "=", "EntityAnnotation", "(", "start", ",", "end", ",", "tag", ",", "mention", ")", "\n", "entity_annotations", ".", "append", "(", "entity_annotation", ")", "\n", "\n", "", "", "if", "line", ".", "find", "(", "EXTENT_END_TAG", ")", ">", "-", "1", ":", "\n", "                    ", "extent_flag", "=", "False", "\n", "\n", "", "", "if", "line", ".", "find", "(", "ENTITY_END_TAG", ")", ">", "-", "1", ":", "\n", "                ", "extent_flag", "=", "False", "\n", "entity_flag", "=", "False", "\n", "\n", "", "", "", "entity_annotations", ".", "sort", "(", "key", "=", "lambda", "x", ":", "(", "x", ".", "start", ",", "x", ".", "end", ")", ")", "\n", "\n", "index_map", "=", "{", "}", "\n", "with", "open", "(", "basename", "+", "'.sgm'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "doc_org", "=", "f", ".", "read", "(", ")", "\n", "\n", "doc_tmp", "=", "re", ".", "sub", "(", "r'<[^>]+>'", ",", "''", ",", "doc_org", ")", "\n", "\n", "bi", "=", "doc_org", ".", "index", "(", "TEXT_BEGIN_TAG", ")", "+", "len", "(", "TEXT_BEGIN_TAG", ")", "\n", "ei", "=", "doc_org", ".", "index", "(", "TEXT_END_TAG", ")", "\n", "doc_modified", "=", "re", ".", "sub", "(", "r'<[^>]+>'", ",", "''", ",", "doc_org", "[", "bi", ":", "ei", "]", ")", "\n", "\n", "offset", "=", "doc_tmp", ".", "index", "(", "doc_modified", ")", "\n", "\n", "index", "=", "0", "\n", "while", "index", "<", "len", "(", "doc_modified", ")", ":", "\n", "            ", "if", "doc_modified", "[", "index", ":", "index", "+", "5", "]", "in", "[", "'&AMP;'", ",", "'&amp;'", "]", ":", "\n", "                ", "doc_modified", "=", "doc_modified", "[", ":", "index", "]", "+", "'&'", "+", "doc_modified", "[", "index", "+", "5", ":", "]", "\n", "offset", "+=", "4", "\n", "", "index_map", "[", "index", "+", "offset", "]", "=", "index", "\n", "index", "+=", "1", "\n", "\n", "", "", "for", "entity_annotation", "in", "entity_annotations", ":", "\n", "        ", "entity_annotation", ".", "start", "=", "index_map", "[", "entity_annotation", ".", "start", "]", "\n", "entity_annotation", ".", "end", "=", "index_map", "[", "entity_annotation", ".", "end", "]", "\n", "mention", "=", "doc_modified", "[", "entity_annotation", ".", "start", ":", "entity_annotation", ".", "end", "]", "\n", "mention", "=", "mention", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "while", "'  '", "in", "mention", ":", "\n", "            ", "mention", "=", "mention", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "", "mention", "=", "mention", ".", "replace", "(", "'&AMP;'", ",", "'&'", ")", ".", "replace", "(", "'&amp;'", ",", "'&'", ")", "\n", "assert", "(", "entity_annotation", ".", "mention", "==", "mention", ")", "\n", "\n", "", "sentences", "=", "tokenizer", ".", "tokenize", "(", "doc_modified", ")", "\n", "\n", "output_lines", "=", "[", "]", "\n", "for", "sentence", "in", "sentences", ":", "\n", "\n", "        ", "tokens", "=", "list", "(", ")", "\n", "for", "token", "in", "sentence", ".", "tokens", ":", "\n", "            ", "tokens", ".", "append", "(", "token", ")", "\n", "\n", "", "words", "=", "list", "(", ")", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "words", ".", "append", "(", "token", ".", "word", ")", "\n", "", "output_lines", ".", "append", "(", "' '", ".", "join", "(", "words", ")", "+", "'\\n'", ")", "\n", "\n", "s_start", "=", "tokens", "[", "0", "]", ".", "begin", "\n", "s_end", "=", "tokens", "[", "-", "1", "]", ".", "end", "\n", "labels", "=", "list", "(", ")", "\n", "for", "entity_annotation", "in", "entity_annotations", ":", "\n", "            ", "if", "entity_annotation", ".", "start", "<", "s_start", ":", "\n", "                ", "continue", "\n", "", "elif", "entity_annotation", ".", "start", ">=", "s_end", ":", "\n", "                ", "break", "\n", "", "elif", "entity_annotation", ".", "end", ">", "s_end", ":", "\n", "                ", "continue", "\n", "", "label", "=", "Label", "(", ")", "\n", "index", "=", "0", "\n", "while", "index", "<", "len", "(", "tokens", ")", ":", "\n", "                ", "token", "=", "tokens", "[", "index", "]", "\n", "if", "token", ".", "begin", "<=", "entity_annotation", ".", "start", "<", "token", ".", "end", ":", "\n", "                    ", "label", ".", "start", "=", "index", "\n", "break", "\n", "", "index", "+=", "1", "\n", "", "while", "index", "<", "len", "(", "tokens", ")", ":", "\n", "                ", "token", "=", "tokens", "[", "index", "]", "\n", "if", "token", ".", "begin", "<", "entity_annotation", ".", "end", "<=", "token", ".", "end", ":", "\n", "                    ", "label", ".", "end", "=", "index", "+", "1", "\n", "break", "\n", "", "index", "+=", "1", "\n", "\n", "", "assert", "(", "label", ".", "start", "is", "not", "None", ")", "\n", "assert", "(", "label", ".", "end", "is", "not", "None", ")", "\n", "label", ".", "tag", "=", "entity_annotation", ".", "type", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "output_lines", ".", "append", "(", "'|'", ".", "join", "(", "[", "str", "(", "label", ")", "for", "label", "in", "labels", "]", ")", "+", "'\\n'", ")", "\n", "\n", "output_lines", ".", "append", "(", "'\\n'", ")", "\n", "\n", "calc_stat", "(", "words", ",", "labels", ")", "\n", "\n", "", "return", "output_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2005.parse_ace_2005": [[355, 406], ["os.makedirs", "zip", "print", "print", "print", "print", "print", "TAG_SET.items", "print", "TAG_SET.items", "TAG_SET.items", "print", "parse_ace2005.Stat", "open", "open", "f.writelines", "enumerate", "print", "len", "parse_ace2005.parse_document", "output_lines.extend", "range", "line.strip", "len", "len", "len", "len", "total_layer.append", "output_lines_doc[].split"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.parse_document"], ["", "def", "parse_ace_2005", "(", "tokenizer", ":", "Tokenizer", ")", "->", "None", ":", "\n", "\n", "    ", "output_dir_path", "=", "\"data/ace2005/\"", "\n", "os", ".", "makedirs", "(", "output_dir_path", ",", "mode", "=", "0o755", ",", "exist_ok", "=", "True", ")", "\n", "\n", "output_file_list", "=", "[", "\"ace2005.train\"", ",", "\"ace2005.dev\"", ",", "\"ace2005.test\"", "]", "\n", "\n", "for", "split_info_file", ",", "output_file", "in", "zip", "(", "SPLIT_INFO_FILE_LIST", ",", "output_file_list", ")", ":", "\n", "        ", "output_lines", "=", "[", "]", "\n", "doc_count", "=", "0", "\n", "sent_count", "=", "0", "\n", "token_count", "=", "0", "\n", "for", "tag", "in", "TAG_SET", ":", "\n", "            ", "TAG_SET", "[", "tag", "]", "=", "Stat", "(", ")", "\n", "", "with", "open", "(", "SPLIT_INFO_DIR_PATH", "+", "split_info_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "basename", "=", "CORPUS_DIR_PATH", "+", "line", ".", "strip", "(", ")", "\n", "output_lines_doc", "=", "parse_document", "(", "basename", ",", "tokenizer", ")", "\n", "output_lines", ".", "extend", "(", "output_lines_doc", ")", "\n", "doc_count", "+=", "1", "\n", "sent_count", "+=", "len", "(", "output_lines_doc", ")", "//", "3", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "output_lines_doc", ")", ",", "3", ")", ":", "\n", "                    ", "token_count", "+=", "len", "(", "output_lines_doc", "[", "idx", "]", ".", "split", "(", "' '", ")", ")", "\n", "\n", "", "", "", "with", "open", "(", "output_dir_path", "+", "output_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "output_lines", ")", "\n", "\n", "", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--- {}\"", ".", "format", "(", "output_file", ")", ")", "\n", "print", "(", "\"# of documents:\\t{:6d}\"", ".", "format", "(", "doc_count", ")", ")", "\n", "print", "(", "\"# of sentences:\\t{:6d}\"", ".", "format", "(", "sent_count", ")", ")", "\n", "print", "(", "\"# of tokens:\\t{:6d}\"", ".", "format", "(", "token_count", ")", ")", "\n", "total", "=", "0", "\n", "total_layer", "=", "[", "]", "\n", "total_ignored", "=", "0", "\n", "for", "_", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "            ", "total", "+=", "stat", ".", "total", "\n", "for", "depth", ",", "num", "in", "enumerate", "(", "stat", ".", "layer", ")", ":", "\n", "                ", "if", "len", "(", "total_layer", ")", "==", "depth", ":", "\n", "                    ", "total_layer", ".", "append", "(", "0", ")", "\n", "", "total_layer", "[", "depth", "]", "+=", "num", "\n", "", "total_ignored", "+=", "stat", ".", "ignored", "\n", "", "print", "(", "\"total # of mentions:\\t{}\\t(layer:\\t{},\\tignored:\\t{})\"", ".", "format", "(", "total", ",", "total_layer", ",", "total_ignored", ")", ")", "\n", "for", "tag", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"\\t{}:\\t{:5d}\\t(layer:\\t{},\\tignored:\\t{})\"", "\n", ".", "format", "(", "tag", ",", "stat", ".", "total", ",", "stat", ".", "layer", ",", "stat", ".", "ignored", ")", ")", "\n", "", "ave_labels", "=", "0", "\n", "for", "_", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "            ", "ave_labels", "+=", "stat", ".", "num_labels", "\n", "", "ave_labels", "/=", "token_count", "*", "len", "(", "TAG_SET", ")", "\n", "print", "(", "\"average # of labels:\\t{:.2f}\"", ".", "format", "(", "ave_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.config.Config.__init__": [[8, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "root_path", ":", "str", "=", "\".\"", "\n", "\n", "# for data loader", "\n", "self", ".", "data_set", ":", "str", "=", "\"sample\"", "\n", "self", ".", "batch_size", ":", "int", "=", "32", "\n", "self", ".", "if_shuffle", ":", "bool", "=", "True", "\n", "\n", "# override when loading data", "\n", "self", ".", "label_size", ":", "Optional", "[", "int", "]", "=", "None", "\n", "\n", "# embed size", "\n", "self", ".", "char_embed", ":", "int", "=", "128", "\n", "self", ".", "num_filters", ":", "int", "=", "128", "\n", "self", ".", "word_dropout", ":", "float", "=", "0.05", "\n", "\n", "# for lstm", "\n", "self", ".", "hidden_size", ":", "int", "=", "256", "\n", "self", ".", "layers", ":", "int", "=", "2", "\n", "self", ".", "lstm_dropout", ":", "float", "=", "0.50", "\n", "\n", "# for training", "\n", "self", ".", "embed_path", ":", "str", "=", "self", ".", "root_path", "+", "\"/data/word_vec_{}.bin\"", ".", "format", "(", "self", ".", "data_set", ")", "\n", "self", ".", "epoch", ":", "int", "=", "500", "\n", "self", ".", "if_gpu", ":", "bool", "=", "True", "\n", "self", ".", "opt", ":", "Optimizer", "=", "Optimizer", ".", "AdaBound", "\n", "self", ".", "lr", ":", "float", "=", "0.001", "if", "self", ".", "opt", "!=", "Optimizer", ".", "SGD", "else", "0.1", "\n", "self", ".", "final_lr", ":", "float", "=", "0.1", "if", "self", ".", "opt", "==", "Optimizer", ".", "AdaBound", "else", "None", "\n", "self", ".", "l2", ":", "float", "=", "0.", "\n", "self", ".", "check_every", ":", "int", "=", "1", "\n", "self", ".", "clip_norm", ":", "int", "=", "5", "\n", "\n", "# for early stop", "\n", "self", ".", "lr_patience", ":", "int", "=", "3", "if", "self", ".", "opt", "!=", "Optimizer", ".", "SGD", "else", "5", "\n", "\n", "self", ".", "data_path", ":", "str", "=", "self", ".", "root_path", "+", "\"/data/{}\"", ".", "format", "(", "self", ".", "data_set", ")", "\n", "self", ".", "train_data_path", ":", "str", "=", "self", ".", "data_path", "+", "\"_train.pkl\"", "\n", "self", ".", "dev_data_path", ":", "str", "=", "self", ".", "data_path", "+", "\"_dev.pkl\"", "\n", "self", ".", "test_data_path", ":", "str", "=", "self", ".", "data_path", "+", "\"_test.pkl\"", "\n", "self", ".", "config_data_path", ":", "str", "=", "self", ".", "data_path", "+", "\"_config.pkl\"", "\n", "self", ".", "model_root_path", ":", "str", "=", "self", ".", "root_path", "+", "\"/dumps\"", "\n", "self", ".", "model_path", ":", "str", "=", "self", ".", "model_root_path", "+", "\"/{}_model\"", ".", "format", "(", "self", ".", "data_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.config.Config.__repr__": [[51, 53], ["str", "vars"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "str", "(", "vars", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Stat.__init__": [[19, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "total", ":", "int", "=", "0", "\n", "self", ".", "layer", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "self", ".", "ignored", ":", "int", "=", "0", "\n", "self", ".", "num_labels", ":", "int", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.EntityAnnotation.__init__": [[37, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start", ":", "int", ",", "end", ":", "int", ",", "type", ":", "str", ",", "mention", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "start", ":", "int", "=", "start", "\n", "self", ".", "end", ":", "int", "=", "end", "\n", "self", ".", "type", ":", "str", "=", "type", "\n", "self", ".", "mention", ":", "str", "=", "mention", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Token.__init__": [[46, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "word", ":", "str", ",", "begin", ":", "int", ",", "end", ":", "int", ")", "->", "None", ":", "\n", "        ", "self", ".", "word", ":", "str", "=", "word", "\n", "self", ".", "begin", ":", "int", "=", "begin", "\n", "self", ".", "end", ":", "int", "=", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Sentence.__init__": [[54, 59], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "text", ":", "str", ",", "begin", ":", "int", ",", "end", ":", "int", ")", "->", "None", ":", "\n", "        ", "self", ".", "text", ":", "str", "=", "text", "\n", "self", ".", "begin", ":", "int", "=", "begin", "\n", "self", ".", "end", ":", "int", "=", "end", "\n", "self", ".", "tokens", ":", "Optional", "[", "List", "[", "Token", "]", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.__init__": [[63, 67], ["stanfordnlp.server.CoreNLPClient", "parse_ace2004.Tokenizer.client.ensure_alive"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "os", ".", "environ", "[", "'CORENLP_HOME'", "]", "=", "'{}/stanford-corenlp-full-2018-10-05'", ".", "format", "(", "os", ".", "environ", "[", "'HOME'", "]", ")", "\n", "self", ".", "client", ":", "CoreNLPClient", "=", "CoreNLPClient", "(", ")", "\n", "self", ".", "client", ".", "ensure_alive", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.__del__": [[68, 72], ["glob.glob", "os.path.isfile", "os.remove"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "p", "in", "glob", ".", "glob", "(", "'corenlp_server-*.props'", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "p", ")", ":", "\n", "                ", "os", ".", "remove", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.tokenize": [[73, 104], ["parse_ace2004.Tokenizer.client.annotate", "parse_ace2004.Tokenizer.fix_split", "doc.index", "parse_ace2004.Tokenizer.append", "parse_ace2004.Tokenizer.client.annotate", "parse_ace2004.Tokenizer.fix_tokens", "parse_ace2004.Sentence", "parse_ace2004.Tokenizer.append", "doc.index", "len", "parse_ace2004.Token"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.fix_split", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.fix_tokens"], ["", "", "", "def", "tokenize", "(", "self", ",", "doc", ":", "str", ")", "->", "List", "[", "Sentence", "]", ":", "\n", "        ", "splitter_annotation", "=", "self", ".", "client", ".", "annotate", "(", "doc", ",", "annotators", "=", "[", "'ssplit'", "]", ",", "\n", "properties", "=", "{", "'tokenize.options'", ":", "'ptb3Escaping=false,invertible=true'", "}", ")", "\n", "end", "=", "0", "\n", "sentences", "=", "[", "]", "\n", "for", "sentence", "in", "splitter_annotation", ".", "sentence", ":", "\n", "            ", "begin", "=", "doc", ".", "index", "(", "sentence", ".", "token", "[", "0", "]", ".", "originalText", ",", "end", ")", "\n", "for", "token", "in", "sentence", ".", "token", ":", "\n", "                ", "end", "=", "doc", ".", "index", "(", "token", ".", "originalText", ",", "end", ")", "+", "len", "(", "token", ".", "originalText", ")", "\n", "", "text", "=", "doc", "[", "begin", ":", "end", "]", "\n", "sentences", ".", "append", "(", "Sentence", "(", "text", ",", "begin", ",", "end", ")", ")", "\n", "", "sentences", "=", "self", ".", "fix_split", "(", "sentences", ")", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "tokenizer_annotation", "=", "self", ".", "client", ".", "annotate", "(", "sentence", ".", "text", ",", "annotators", "=", "[", "'tokenize'", "]", ",", "\n", "properties", "=", "{", "'tokenize.options'", ":", "'normalizeParentheses=false,'", "\n", "'normalizeOtherBrackets=false,'", "\n", "'latexQuotes=false,'", "\n", "'unicodeQuotes=false,'", "\n", "'invertible=true'", "}", ")", "\n", "tokens", "=", "[", "]", "\n", "for", "token", "in", "tokenizer_annotation", ".", "sentencelessToken", ":", "\n", "                ", "word", "=", "token", ".", "originalText", "\n", "begin", "=", "sentence", ".", "begin", "+", "token", ".", "beginChar", "\n", "end", "=", "sentence", ".", "begin", "+", "token", ".", "endChar", "\n", "assert", "word", "==", "doc", "[", "begin", ":", "end", "]", "\n", "tokens", ".", "append", "(", "Token", "(", "word", ",", "begin", ",", "end", ")", ")", "\n", "", "tokens", "=", "self", ".", "fix_tokens", "(", "tokens", ")", "\n", "sentence", ".", "tokens", "=", "tokens", "\n", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.fix_split": [[105, 129], ["len", "sentence.text.index", "parse_ace2004.Sentence", "result.append", "re.search().end", "result.append", "len", "re.search"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fix_split", "(", "sentences", ":", "List", "[", "Sentence", "]", ")", "->", "List", "[", "Sentence", "]", ":", "\n", "        ", "result", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "sentences", ")", ":", "\n", "            ", "sentence", "=", "sentences", "[", "i", "]", "\n", "while", "True", ":", "\n", "                ", "next_sentence", "=", "sentences", "[", "i", "+", "1", "]", "if", "i", "<", "len", "(", "sentences", ")", "-", "1", "else", "None", "\n", "if", "'\\n\\n'", "in", "sentence", ".", "text", ":", "\n", "                    ", "index", "=", "sentence", ".", "text", ".", "index", "(", "'\\n\\n'", ")", "\n", "new_sentence", "=", "Sentence", "(", "sentence", ".", "text", "[", ":", "index", "]", ",", "sentence", ".", "begin", ",", "sentence", ".", "begin", "+", "index", ")", "\n", "result", ".", "append", "(", "new_sentence", ")", "\n", "index", "+=", "re", ".", "search", "(", "r'[\\n\\t ]+'", ",", "sentence", ".", "text", "[", "index", ":", "]", ")", ".", "end", "(", ")", "\n", "sentence", ".", "text", "=", "sentence", ".", "text", "[", "index", ":", "]", "\n", "sentence", ".", "begin", "+=", "index", "\n", "", "elif", "next_sentence", "is", "not", "None", "and", "next_sentence", ".", "begin", "==", "sentence", ".", "end", ":", "\n", "                    ", "sentence", ".", "text", "+=", "next_sentence", ".", "text", "\n", "sentence", ".", "end", "=", "next_sentence", ".", "end", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "result", ".", "append", "(", "sentence", ")", "\n", "break", "\n", "", "", "i", "+=", "1", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.fix_tokens": [[130, 154], ["result.append", "result.append", "re.search", "token.word.index", "parse_ace2004.Token", "result.append", "token.word.index", "parse_ace2004.Token", "result.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fix_tokens", "(", "tokens", ":", "List", "[", "Token", "]", ")", "->", "List", "[", "Token", "]", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "while", "re", ".", "search", "(", "r'([^-]+-[A-Z].*|[^-]*[A-Z][^-]*-[^-]+-[^-]*)'", ",", "token", ".", "word", ")", "is", "not", "None", ":", "\n", "                ", "index", "=", "token", ".", "word", ".", "index", "(", "'-'", ")", "\n", "new_token", "=", "Token", "(", "token", ".", "word", "[", ":", "index", "]", ",", "token", ".", "begin", ",", "token", ".", "begin", "+", "index", ")", "\n", "result", ".", "append", "(", "new_token", ")", "\n", "index", "+=", "1", "\n", "token", ".", "word", "=", "token", ".", "word", "[", "index", ":", "]", "\n", "token", ".", "begin", "+=", "index", "\n", "", "result", ".", "append", "(", "token", ")", "\n", "", "tokens", "=", "result", "\n", "result", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "while", "' '", "in", "token", ".", "word", ":", "\n", "                ", "index", "=", "token", ".", "word", ".", "index", "(", "' '", ")", "\n", "new_token", "=", "Token", "(", "token", ".", "word", "[", ":", "index", "]", ",", "token", ".", "begin", ",", "token", ".", "begin", "+", "index", ")", "\n", "result", ".", "append", "(", "new_token", ")", "\n", "index", "+=", "1", "\n", "token", ".", "word", "=", "token", ".", "word", "[", "index", ":", "]", "\n", "token", ".", "begin", "+=", "index", "\n", "", "result", ".", "append", "(", "token", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Label.__init__": [[158, 162], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "start", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "end", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "tag", ":", "Optional", "[", "str", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Label.__eq__": [[163, 165], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "start", "==", "other", ".", "start", "and", "self", ".", "end", "==", "other", ".", "end", "and", "self", ".", "tag", "==", "other", ".", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Label.__str__": [[166, 168], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "str", "(", "self", ".", "start", ")", "+", "','", "+", "str", "(", "self", ".", "end", ")", "+", "' '", "+", "self", ".", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.calc_stat": [[170, 205], ["sorted", "TAG_SET.items", "len", "range", "sum", "len", "range", "len", "stat.layer.append"], "function", ["None"], ["", "", "def", "calc_stat", "(", "words", ":", "List", "[", "str", "]", ",", "labels", ":", "List", "[", "Label", "]", ")", "->", "None", ":", "\n", "    ", "labels", "=", "sorted", "(", "labels", ",", "key", "=", "lambda", "x", ":", "(", "x", ".", "start", ",", "-", "x", ".", "end", ",", "x", ".", "tag", ")", ")", "\n", "for", "tag", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "        ", "sequence_label", "=", "[", "0", "]", "*", "len", "(", "words", ")", "\n", "prev_label", "=", "None", "\n", "for", "label", "in", "labels", ":", "\n", "\n", "            ", "if", "label", ".", "tag", "!=", "tag", ":", "\n", "                ", "continue", "\n", "", "stat", ".", "total", "+=", "1", "\n", "\n", "if", "prev_label", "is", "not", "None", "and", "label", "==", "prev_label", ":", "\n", "                ", "depth", "=", "sequence_label", "[", "label", ".", "start", "]", "-", "1", "\n", "stat", ".", "layer", "[", "depth", "]", "+=", "1", "\n", "continue", "\n", "\n", "", "flag", "=", "True", "\n", "depth", "=", "sequence_label", "[", "label", ".", "start", "]", "\n", "for", "index", "in", "range", "(", "label", ".", "start", "+", "1", ",", "label", ".", "end", ")", ":", "\n", "                ", "if", "sequence_label", "[", "index", "]", "!=", "depth", ":", "\n", "                    ", "flag", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "flag", ":", "\n", "                ", "for", "index", "in", "range", "(", "label", ".", "start", ",", "label", ".", "end", ")", ":", "\n", "                    ", "sequence_label", "[", "index", "]", "+=", "1", "\n", "", "if", "len", "(", "stat", ".", "layer", ")", "==", "depth", ":", "\n", "                    ", "stat", ".", "layer", ".", "append", "(", "0", ")", "\n", "", "stat", ".", "layer", "[", "depth", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "stat", ".", "ignored", "+=", "1", "\n", "\n", "", "prev_label", "=", "label", "\n", "\n", "", "stat", ".", "num_labels", "+=", "sum", "(", "sequence_label", ")", "+", "len", "(", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.parse_document": [[222, 356], ["entity_annotations.sort", "tokenizer.tokenize", "open", "open", "f.read", "re.sub", "f.read.index", "re.sub", "re.sub.index", "mention.replace.replace", "mention.replace.replace().replace", "list", "list", "output_lines.append", "list", "output_lines.append", "output_lines.append", "parse_ace2004.calc_stat", "f.read.index", "len", "len", "mention.replace.replace", "list.append", "list.append", "parse_ace2004.Label", "list.append", "next.find", "next.index", "next.find", "mention.replace.replace", "len", "len", "next.index", "len", "next.find", "next.find", "next.find", "next.index", "int", "next.index", "next.index", "line[].strip", "mention.replace.replace", "mention.replace.replace().replace", "parse_ace2004.EntityAnnotation", "entity_annotations.append", "str", "next.index", "len", "next.index", "len", "int", "next.index", "next.find", "next", "mention.replace.replace", "line[].strip", "mention.replace.replace"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.tokenize", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.calc_stat"], ["def", "parse_document", "(", "basename", ":", "str", ",", "tokenizer", ":", "Tokenizer", ")", "->", "List", "[", "str", "]", ":", "\n", "\n", "    ", "entity_annotations", "=", "[", "]", "\n", "with", "open", "(", "basename", "+", "'.apf.xml'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "entity_flag", "=", "False", "\n", "extent_flag", "=", "False", "\n", "tag", "=", "None", "\n", "for", "line", "in", "f", ":", "\n", "\n", "            ", "if", "line", ".", "find", "(", "ENTITY_BEGIN_TAG", ")", ">", "-", "1", ":", "\n", "                ", "entity_flag", "=", "True", "\n", "bi", "=", "line", ".", "index", "(", "TYPE_ATTRIBUTE", ")", "+", "len", "(", "TYPE_ATTRIBUTE", ")", "\n", "ei", "=", "line", ".", "index", "(", "'\"'", ",", "bi", ")", "\n", "tag", "=", "line", "[", "bi", ":", "ei", "]", "\n", "\n", "", "if", "entity_flag", ":", "\n", "                ", "if", "line", ".", "find", "(", "EXTENT_BEGIN_TAG", ")", ">", "-", "1", ":", "\n", "                    ", "extent_flag", "=", "True", "\n", "\n", "", "if", "extent_flag", ":", "\n", "                    ", "if", "line", ".", "find", "(", "CHARSEQ_BEGIN_TAG", ")", ">", "-", "1", ":", "\n", "                        ", "bi", "=", "line", ".", "index", "(", "START_ATTRIBUTE", ")", "+", "len", "(", "START_ATTRIBUTE", ")", "\n", "ei", "=", "line", ".", "index", "(", "'\"'", ",", "bi", ")", "\n", "start", "=", "int", "(", "line", "[", "bi", ":", "ei", "]", ")", "\n", "bi", "=", "line", ".", "index", "(", "END_ATTRIBUTE", ")", "+", "len", "(", "END_ATTRIBUTE", ")", "\n", "ei", "=", "line", ".", "index", "(", "'\"'", ",", "bi", ")", "\n", "end", "=", "int", "(", "line", "[", "bi", ":", "ei", "]", ")", "+", "1", "\n", "mention", "=", "\"\"", "\n", "bi", "=", "line", ".", "index", "(", "'>'", ")", "+", "1", "\n", "while", "line", ".", "find", "(", "CHARSEQ_END_TAG", ")", "<", "0", ":", "\n", "                            ", "mention", "+=", "line", "[", "bi", ":", "]", ".", "strip", "(", ")", "+", "' '", "\n", "bi", "=", "0", "\n", "line", "=", "next", "(", "f", ")", "\n", "", "ei", "=", "line", ".", "index", "(", "CHARSEQ_END_TAG", ")", "\n", "mention", "+=", "line", "[", "bi", ":", "ei", "]", ".", "strip", "(", ")", "\n", "mention", "=", "mention", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "while", "'  '", "in", "mention", ":", "\n", "                            ", "mention", "=", "mention", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "", "mention", "=", "mention", ".", "replace", "(", "'&AMP;'", ",", "'&'", ")", ".", "replace", "(", "'&amp;'", ",", "'&'", ")", "\n", "entity_annotation", "=", "EntityAnnotation", "(", "start", ",", "end", ",", "tag", ",", "mention", ")", "\n", "entity_annotations", ".", "append", "(", "entity_annotation", ")", "\n", "\n", "", "", "if", "line", ".", "find", "(", "EXTENT_END_TAG", ")", ">", "-", "1", ":", "\n", "                    ", "extent_flag", "=", "False", "\n", "\n", "", "", "if", "line", ".", "find", "(", "ENTITY_END_TAG", ")", ">", "-", "1", ":", "\n", "                ", "extent_flag", "=", "False", "\n", "entity_flag", "=", "False", "\n", "\n", "", "", "", "entity_annotations", ".", "sort", "(", "key", "=", "lambda", "x", ":", "(", "x", ".", "start", ",", "x", ".", "end", ")", ")", "\n", "\n", "index_map", "=", "{", "}", "\n", "with", "open", "(", "basename", "+", "'.sgm'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "doc_org", "=", "f", ".", "read", "(", ")", "\n", "\n", "doc_tmp", "=", "re", ".", "sub", "(", "r'<[^>]+>'", ",", "''", ",", "doc_org", ")", "\n", "\n", "bi", "=", "doc_org", ".", "index", "(", "TEXT_BEGIN_TAG", ")", "+", "len", "(", "TEXT_BEGIN_TAG", ")", "\n", "ei", "=", "doc_org", ".", "index", "(", "TEXT_END_TAG", ")", "\n", "doc_modified", "=", "re", ".", "sub", "(", "r'<[^>]+>'", ",", "''", ",", "doc_org", "[", "bi", ":", "ei", "]", ")", "\n", "\n", "offset", "=", "doc_tmp", ".", "index", "(", "doc_modified", ")", "\n", "\n", "index", "=", "0", "\n", "while", "index", "<", "len", "(", "doc_modified", ")", ":", "\n", "            ", "if", "doc_modified", "[", "index", ":", "index", "+", "5", "]", "in", "[", "'&AMP;'", ",", "'&amp;'", "]", ":", "\n", "                ", "doc_modified", "=", "doc_modified", "[", ":", "index", "]", "+", "'&'", "+", "doc_modified", "[", "index", "+", "5", ":", "]", "\n", "offset", "+=", "4", "\n", "", "index_map", "[", "index", "+", "offset", "]", "=", "index", "\n", "index", "+=", "1", "\n", "\n", "", "", "entity_annotations", "=", "[", "entity_annotation", "for", "entity_annotation", "in", "entity_annotations", "\n", "if", "entity_annotation", ".", "start", "in", "index_map", "]", "\n", "\n", "for", "entity_annotation", "in", "entity_annotations", ":", "\n", "        ", "entity_annotation", ".", "start", "=", "index_map", "[", "entity_annotation", ".", "start", "]", "\n", "entity_annotation", ".", "end", "=", "index_map", "[", "entity_annotation", ".", "end", "]", "\n", "mention", "=", "doc_modified", "[", "entity_annotation", ".", "start", ":", "entity_annotation", ".", "end", "]", "\n", "mention", "=", "mention", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "while", "'  '", "in", "mention", ":", "\n", "            ", "mention", "=", "mention", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "", "mention", "=", "mention", ".", "replace", "(", "'&AMP;'", ",", "'&'", ")", ".", "replace", "(", "'&amp;'", ",", "'&'", ")", "\n", "assert", "(", "entity_annotation", ".", "mention", "==", "mention", ")", "\n", "\n", "", "sentences", "=", "tokenizer", ".", "tokenize", "(", "doc_modified", ")", "\n", "\n", "output_lines", "=", "[", "]", "\n", "for", "sentence", "in", "sentences", ":", "\n", "\n", "        ", "tokens", "=", "list", "(", ")", "\n", "for", "token", "in", "sentence", ".", "tokens", ":", "\n", "            ", "tokens", ".", "append", "(", "token", ")", "\n", "\n", "", "words", "=", "list", "(", ")", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "words", ".", "append", "(", "token", ".", "word", ")", "\n", "", "output_lines", ".", "append", "(", "' '", ".", "join", "(", "words", ")", "+", "'\\n'", ")", "\n", "\n", "s_start", "=", "tokens", "[", "0", "]", ".", "begin", "\n", "s_end", "=", "tokens", "[", "-", "1", "]", ".", "end", "\n", "labels", "=", "list", "(", ")", "\n", "for", "entity_annotation", "in", "entity_annotations", ":", "\n", "            ", "if", "entity_annotation", ".", "start", "<", "s_start", ":", "\n", "                ", "continue", "\n", "", "elif", "entity_annotation", ".", "start", ">=", "s_end", ":", "\n", "                ", "break", "\n", "", "elif", "entity_annotation", ".", "end", ">", "s_end", ":", "\n", "                ", "continue", "\n", "", "label", "=", "Label", "(", ")", "\n", "index", "=", "0", "\n", "while", "index", "<", "len", "(", "tokens", ")", ":", "\n", "                ", "token", "=", "tokens", "[", "index", "]", "\n", "if", "token", ".", "begin", "<=", "entity_annotation", ".", "start", "<", "token", ".", "end", ":", "\n", "                    ", "label", ".", "start", "=", "index", "\n", "break", "\n", "", "index", "+=", "1", "\n", "", "while", "index", "<", "len", "(", "tokens", ")", ":", "\n", "                ", "token", "=", "tokens", "[", "index", "]", "\n", "if", "token", ".", "begin", "<", "entity_annotation", ".", "end", "<=", "token", ".", "end", ":", "\n", "                    ", "label", ".", "end", "=", "index", "+", "1", "\n", "break", "\n", "", "index", "+=", "1", "\n", "\n", "", "assert", "(", "label", ".", "start", "is", "not", "None", ")", "\n", "assert", "(", "label", ".", "end", "is", "not", "None", ")", "\n", "label", ".", "tag", "=", "entity_annotation", ".", "type", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "output_lines", ".", "append", "(", "'|'", ".", "join", "(", "[", "str", "(", "label", ")", "for", "label", "in", "labels", "]", ")", "+", "'\\n'", ")", "\n", "\n", "output_lines", ".", "append", "(", "'\\n'", ")", "\n", "\n", "calc_stat", "(", "words", ",", "labels", ")", "\n", "\n", "", "return", "output_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.parse_ace_2004": [[358, 409], ["os.makedirs", "zip", "print", "print", "print", "print", "print", "TAG_SET.items", "print", "TAG_SET.items", "TAG_SET.items", "print", "parse_ace2004.Stat", "open", "open", "f.writelines", "enumerate", "print", "len", "parse_ace2004.parse_document", "output_lines.extend", "range", "line.strip", "len", "len", "len", "len", "total_layer.append", "output_lines_doc[].split"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.parse_document"], ["", "def", "parse_ace_2004", "(", "tokenizer", ":", "Tokenizer", ")", "->", "None", ":", "\n", "\n", "    ", "output_dir_path", "=", "\"data/ace2004/\"", "\n", "os", ".", "makedirs", "(", "output_dir_path", ",", "mode", "=", "0o755", ",", "exist_ok", "=", "True", ")", "\n", "\n", "output_file_list", "=", "[", "\"ace2004.train\"", ",", "\"ace2004.dev\"", ",", "\"ace2004.test\"", "]", "\n", "\n", "for", "split_info_file", ",", "output_file", "in", "zip", "(", "SPLIT_INFO_FILE_LIST", ",", "output_file_list", ")", ":", "\n", "        ", "output_lines", "=", "[", "]", "\n", "doc_count", "=", "0", "\n", "sent_count", "=", "0", "\n", "token_count", "=", "0", "\n", "for", "tag", "in", "TAG_SET", ":", "\n", "            ", "TAG_SET", "[", "tag", "]", "=", "Stat", "(", ")", "\n", "", "with", "open", "(", "SPLIT_INFO_DIR_PATH", "+", "split_info_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "basename", "=", "CORPUS_DIR_PATH", "+", "line", ".", "strip", "(", ")", "\n", "output_lines_doc", "=", "parse_document", "(", "basename", ",", "tokenizer", ")", "\n", "output_lines", ".", "extend", "(", "output_lines_doc", ")", "\n", "doc_count", "+=", "1", "\n", "sent_count", "+=", "len", "(", "output_lines_doc", ")", "//", "3", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "output_lines_doc", ")", ",", "3", ")", ":", "\n", "                    ", "token_count", "+=", "len", "(", "output_lines_doc", "[", "idx", "]", ".", "split", "(", "' '", ")", ")", "\n", "\n", "", "", "", "with", "open", "(", "output_dir_path", "+", "output_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "output_lines", ")", "\n", "\n", "", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--- {}\"", ".", "format", "(", "output_file", ")", ")", "\n", "print", "(", "\"# of documents:\\t{:6d}\"", ".", "format", "(", "doc_count", ")", ")", "\n", "print", "(", "\"# of sentences:\\t{:6d}\"", ".", "format", "(", "sent_count", ")", ")", "\n", "print", "(", "\"# of tokens:\\t{:6d}\"", ".", "format", "(", "token_count", ")", ")", "\n", "total", "=", "0", "\n", "total_layer", "=", "[", "]", "\n", "total_ignored", "=", "0", "\n", "for", "_", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "            ", "total", "+=", "stat", ".", "total", "\n", "for", "depth", ",", "num", "in", "enumerate", "(", "stat", ".", "layer", ")", ":", "\n", "                ", "if", "len", "(", "total_layer", ")", "==", "depth", ":", "\n", "                    ", "total_layer", ".", "append", "(", "0", ")", "\n", "", "total_layer", "[", "depth", "]", "+=", "num", "\n", "", "total_ignored", "+=", "stat", ".", "ignored", "\n", "", "print", "(", "\"total # of mentions:\\t{}\\t(layer:\\t{},\\tignored:\\t{})\"", ".", "format", "(", "total", ",", "total_layer", ",", "total_ignored", ")", ")", "\n", "for", "tag", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"\\t{}:\\t{:5d}\\t(layer:\\t{},\\tignored:\\t{})\"", "\n", ".", "format", "(", "tag", ",", "stat", ".", "total", ",", "stat", ".", "layer", ",", "stat", ".", "ignored", ")", ")", "\n", "", "ave_labels", "=", "0", "\n", "for", "_", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "            ", "ave_labels", "+=", "stat", ".", "num_labels", "\n", "", "ave_labels", "/=", "token_count", "*", "len", "(", "TAG_SET", ")", "\n", "print", "(", "\"average # of labels:\\t{:.2f}\"", ".", "format", "(", "ave_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.train.get_f1": [[24, 91], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "logger.info", "zip", "open", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "model.predict", "training.utils.unpack_prediction", "util.evaluate.evaluate", "open.close", "zip", "numpy.array", "mask_batch_var.cuda.cuda", "zip", "open.write", "sorted", "open.write", "sorted", "open.write", "open.write", "labels.append", "labels.append", "label_dict.get_instance", "label_dict.get_instance"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.predict", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.utils.unpack_prediction", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.evaluate.evaluate", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.cuda", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.get_instance", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.get_instance"], ["def", "get_f1", "(", "model", ":", "BiRecurrentConvCRF4NestedNER", ",", "mode", ":", "str", ",", "file_path", ":", "str", "=", "None", ")", "->", "float", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "pred_all", ",", "pred", ",", "recall_all", ",", "recall", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "gold_cross_num", "=", "0", "\n", "pred_cross_num", "=", "0", "\n", "if", "mode", "==", "'dev'", ":", "\n", "            ", "batch_zip", "=", "zip", "(", "dev_token_batches", ",", "\n", "dev_label_batches", ",", "\n", "dev_mask_batches", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "batch_zip", "=", "zip", "(", "test_token_batches", ",", "\n", "test_label_batches", ",", "\n", "test_mask_batches", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "f", "=", "None", "\n", "if", "file_path", "is", "not", "None", ":", "\n", "            ", "f", "=", "open", "(", "file_path", ",", "'w'", ")", "\n", "\n", "", "for", "token_batch", ",", "label_batch", ",", "mask_batch", "in", "batch_zip", ":", "\n", "            ", "mask_batch_var", "=", "torch", ".", "ByteTensor", "(", "np", ".", "array", "(", "mask_batch", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "if", "config", ".", "if_gpu", ":", "\n", "                ", "mask_batch_var", "=", "mask_batch_var", ".", "cuda", "(", ")", "\n", "\n", "", "pred_sequence_entities", "=", "model", ".", "predict", "(", "token_batch", ",", "mask_batch_var", ")", "\n", "pred_entities", "=", "unpack_prediction", "(", "model", ",", "pred_sequence_entities", ")", "\n", "p_a", ",", "p", ",", "r_a", ",", "r", "=", "evaluate", "(", "label_batch", ",", "pred_entities", ")", "\n", "\n", "gold_cross_num", "+=", "0", "\n", "pred_cross_num", "+=", "0", "\n", "\n", "pred_all", "+=", "p_a", "\n", "pred", "+=", "p", "\n", "recall_all", "+=", "r_a", "\n", "recall", "+=", "r", "\n", "\n", "if", "file_path", "is", "not", "None", ":", "\n", "                ", "for", "token", ",", "mask", ",", "label", ",", "preds", "in", "zip", "(", "token_batch", ",", "mask_batch", ",", "label_batch", ",", "pred_entities", ")", ":", "\n", "                    ", "f", ".", "write", "(", "' '", ".", "join", "(", "token", ")", "+", "'\\n'", ")", "\n", "\n", "labels", "=", "[", "]", "\n", "for", "l", "in", "sorted", "(", "label", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ")", ")", ":", "\n", "                        ", "labels", ".", "append", "(", "\"{},{} {}\"", ".", "format", "(", "l", "[", "0", "]", ",", "l", "[", "1", "]", ",", "label_dict", ".", "get_instance", "(", "l", "[", "2", "]", ")", ")", ")", "\n", "", "f", ".", "write", "(", "'|'", ".", "join", "(", "labels", ")", "+", "'\\n'", ")", "\n", "\n", "labels", "=", "[", "]", "\n", "for", "p", "in", "sorted", "(", "preds", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ")", ")", ":", "\n", "                        ", "labels", ".", "append", "(", "\"{},{} {}\"", ".", "format", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "label_dict", ".", "get_instance", "(", "p", "[", "2", "]", ")", ")", ")", "\n", "", "f", ".", "write", "(", "'|'", ".", "join", "(", "labels", ")", "+", "'\\n'", ")", "\n", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "if", "file_path", "is", "not", "None", ":", "\n", "            ", "f", ".", "close", "(", ")", "\n", "\n", "", "pred", "=", "pred", "/", "pred_all", "if", "pred_all", ">", "0", "else", "1.", "\n", "recall", "=", "recall", "/", "recall_all", "if", "recall_all", ">", "0", "else", "1.", "\n", "f1", "=", "2", "/", "(", "(", "1.", "/", "pred", ")", "+", "(", "1.", "/", "recall", ")", ")", "if", "pred", ">", "0.", "and", "recall", ">", "0.", "else", "0.", "\n", "logger", ".", "info", "(", "\"{} precision: {:.2f}%, recall: {:.2f}%, F1: {:.2f}%\"", "\n", ".", "format", "(", "mode", ",", "pred", "*", "100.", ",", "recall", "*", "100.", ",", "f1", "*", "100.", ")", ")", "\n", "# logger.info(\"Prediction Crossing: \", pred_cross_num)", "\n", "# logger.info(\"Gold Crossing: \", gold_cross_num)", "\n", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.gen_data.batch_stat": [[11, 33], ["zip", "print", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "collections.defaultdict.items", "start_dic[].append", "end_dic[].append", "len", "len", "len", "len"], "function", ["None"], ["def", "batch_stat", "(", "batches", ":", "Tuple", "[", "List", "[", "List", "[", "List", "[", "str", "]", "]", "]", ",", "\n", "List", "[", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", "]", ",", "\n", "List", "[", "List", "[", "List", "[", "bool", "]", "]", "]", "]", ")", "->", "None", ":", "\n", "    ", "all_num", "=", "0", "\n", "start_num", "=", "0", "\n", "end_num", "=", "0", "\n", "for", "token_batch", ",", "label_batch", ",", "mask_batch", "in", "zip", "(", "*", "batches", ")", ":", "\n", "        ", "for", "labels", "in", "label_batch", ":", "\n", "            ", "start_dic", "=", "defaultdict", "(", "list", ")", "\n", "end_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "ent", "in", "labels", ":", "\n", "                ", "start_dic", "[", "(", "ent", "[", "0", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "end_dic", "[", "(", "ent", "[", "1", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "all_num", "+=", "1", "\n", "", "for", "k", ",", "v", "in", "start_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "start_num", "+=", "len", "(", "v", ")", "\n", "", "", "for", "k", ",", "v", "in", "end_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "end_num", "+=", "len", "(", "v", ")", "\n", "\n", "", "", "", "", "print", "(", "\"All {}, start {}, end {}\"", ".", "format", "(", "all_num", ",", "start_num", ",", "end_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.gen_data_for_ace2004.batch_stat": [[11, 33], ["zip", "print", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "collections.defaultdict.items", "start_dic[].append", "end_dic[].append", "len", "len", "len", "len"], "function", ["None"], ["def", "batch_stat", "(", "batches", ":", "Tuple", "[", "List", "[", "List", "[", "List", "[", "str", "]", "]", "]", ",", "\n", "List", "[", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", "]", ",", "\n", "List", "[", "List", "[", "List", "[", "bool", "]", "]", "]", "]", ")", "->", "None", ":", "\n", "    ", "all_num", "=", "0", "\n", "start_num", "=", "0", "\n", "end_num", "=", "0", "\n", "for", "token_batch", ",", "label_batch", ",", "mask_batch", "in", "zip", "(", "*", "batches", ")", ":", "\n", "        ", "for", "labels", "in", "label_batch", ":", "\n", "            ", "start_dic", "=", "defaultdict", "(", "list", ")", "\n", "end_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "ent", "in", "labels", ":", "\n", "                ", "start_dic", "[", "(", "ent", "[", "0", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "end_dic", "[", "(", "ent", "[", "1", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "all_num", "+=", "1", "\n", "", "for", "k", ",", "v", "in", "start_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "start_num", "+=", "len", "(", "v", ")", "\n", "", "", "for", "k", ",", "v", "in", "end_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "end_num", "+=", "len", "(", "v", ")", "\n", "\n", "", "", "", "", "print", "(", "\"All {}, start {}, end {}\"", ".", "format", "(", "all_num", ",", "start_num", ",", "end_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.gen_data_for_ace2005.batch_stat": [[11, 33], ["zip", "print", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "collections.defaultdict.items", "start_dic[].append", "end_dic[].append", "len", "len", "len", "len"], "function", ["None"], ["def", "batch_stat", "(", "batches", ":", "Tuple", "[", "List", "[", "List", "[", "List", "[", "str", "]", "]", "]", ",", "\n", "List", "[", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", "]", ",", "\n", "List", "[", "List", "[", "List", "[", "bool", "]", "]", "]", "]", ")", "->", "None", ":", "\n", "    ", "all_num", "=", "0", "\n", "start_num", "=", "0", "\n", "end_num", "=", "0", "\n", "for", "token_batch", ",", "label_batch", ",", "mask_batch", "in", "zip", "(", "*", "batches", ")", ":", "\n", "        ", "for", "labels", "in", "label_batch", ":", "\n", "            ", "start_dic", "=", "defaultdict", "(", "list", ")", "\n", "end_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "ent", "in", "labels", ":", "\n", "                ", "start_dic", "[", "(", "ent", "[", "0", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "end_dic", "[", "(", "ent", "[", "1", "]", ",", "ent", "[", "2", "]", ")", "]", ".", "append", "(", "ent", ")", "\n", "all_num", "+=", "1", "\n", "", "for", "k", ",", "v", "in", "start_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "start_num", "+=", "len", "(", "v", ")", "\n", "", "", "for", "k", ",", "v", "in", "end_dic", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                    ", "end_num", "+=", "len", "(", "v", ")", "\n", "\n", "", "", "", "", "print", "(", "\"All {}, start {}, end {}\"", ".", "format", "(", "all_num", ",", "start_num", ",", "end_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.Stat.__init__": [[12, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "total", ":", "int", "=", "0", "\n", "self", ".", "layer", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "self", ".", "ignored", ":", "int", "=", "0", "\n", "self", ".", "num_labels", ":", "int", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.Label.__init__": [[28, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "start", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "end", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "tag", ":", "Optional", "[", "str", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.Label.__eq__": [[33, 35], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "start", "==", "other", ".", "start", "and", "self", ".", "end", "==", "other", ".", "end", "and", "self", ".", "tag", "==", "other", ".", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.Label.__str__": [[36, 38], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "str", "(", "self", ".", "start", ")", "+", "','", "+", "str", "(", "self", ".", "end", ")", "+", "' '", "+", "self", ".", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.calc_stat": [[40, 75], ["sorted", "TAG_SET.items", "len", "range", "sum", "len", "range", "len", "stat.layer.append"], "function", ["None"], ["", "", "def", "calc_stat", "(", "words", ":", "List", "[", "str", "]", ",", "labels", ":", "List", "[", "Label", "]", ")", "->", "None", ":", "\n", "    ", "labels", "=", "sorted", "(", "labels", ",", "key", "=", "lambda", "x", ":", "(", "x", ".", "start", ",", "-", "x", ".", "end", ",", "x", ".", "tag", ")", ")", "\n", "for", "tag", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "        ", "sequence_label", "=", "[", "0", "]", "*", "len", "(", "words", ")", "\n", "prev_label", "=", "None", "\n", "for", "label", "in", "labels", ":", "\n", "\n", "            ", "if", "label", ".", "tag", "!=", "tag", ":", "\n", "                ", "continue", "\n", "", "stat", ".", "total", "+=", "1", "\n", "\n", "if", "prev_label", "is", "not", "None", "and", "label", "==", "prev_label", ":", "\n", "                ", "depth", "=", "sequence_label", "[", "label", ".", "start", "]", "-", "1", "\n", "stat", ".", "layer", "[", "depth", "]", "+=", "1", "\n", "continue", "\n", "\n", "", "flag", "=", "True", "\n", "depth", "=", "sequence_label", "[", "label", ".", "start", "]", "\n", "for", "index", "in", "range", "(", "label", ".", "start", "+", "1", ",", "label", ".", "end", ")", ":", "\n", "                ", "if", "sequence_label", "[", "index", "]", "!=", "depth", ":", "\n", "                    ", "flag", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "flag", ":", "\n", "                ", "for", "index", "in", "range", "(", "label", ".", "start", ",", "label", ".", "end", ")", ":", "\n", "                    ", "sequence_label", "[", "index", "]", "+=", "1", "\n", "", "if", "len", "(", "stat", ".", "layer", ")", "==", "depth", ":", "\n", "                    ", "stat", ".", "layer", ".", "append", "(", "0", ")", "\n", "", "stat", ".", "layer", "[", "depth", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "stat", ".", "ignored", "+=", "1", "\n", "\n", "", "prev_label", "=", "label", "\n", "\n", "", "stat", ".", "num_labels", "+=", "sum", "(", "sequence_label", ")", "+", "len", "(", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.parse_line": [[88, 173], ["list", "zip", "zip", "range", "list", "parse_genia.calc_stat", "line.replace.find", "line.replace.replace", "line.replace.find", "word_tags_begin.append", "line.replace.find", "words_begin.append", "line.replace.find", "words_end.append", "len", "len", "list.append", "line.replace.find", "mention_tags_begin.append", "line.replace.find", "mentions_begin.append", "line.replace.find", "mentions_end.append", "len", "len", "line.replace.find", "len", "line.replace.index", "tags.append", "len", "line[].replace", "tags.append", "parse_genia.Label", "len", "tags.pop", "stack.append", "stack.pop", "len", "que.append", "list.append", "str", "stack.pop.tag.find"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.calc_stat"], ["def", "parse_line", "(", "line", ":", "str", ")", "->", "Tuple", "[", "str", ",", "str", "]", ":", "\n", "\n", "    ", "if", "line", ".", "find", "(", "'HMG-I(Y)</cons>'", ")", ">", "-", "1", ":", "\n", "        ", "line", "=", "line", ".", "replace", "(", "'HMG-I(Y)</cons>'", ",", "'<w c=\"NN\">HMG-I(Y)</w></cons>'", ")", "\n", "\n", "# words", "\n", "", "word_tags_begin", "=", "[", "]", "\n", "words_begin", "=", "[", "]", "\n", "index", "=", "-", "1", "\n", "while", "True", ":", "\n", "        ", "index", "=", "line", ".", "find", "(", "WORD_BEGIN_TAG", ",", "index", "+", "1", ")", "\n", "if", "index", "<", "0", ":", "\n", "            ", "break", "\n", "", "word_tags_begin", ".", "append", "(", "index", ")", "\n", "index", "=", "line", ".", "find", "(", "'>'", ",", "index", "+", "1", ")", "\n", "words_begin", ".", "append", "(", "index", "+", "1", ")", "\n", "\n", "", "words_end", "=", "[", "]", "\n", "index", "=", "-", "1", "\n", "while", "True", ":", "\n", "        ", "index", "=", "line", ".", "find", "(", "WORD_END_TAG", ",", "index", "+", "1", ")", "\n", "if", "index", "<", "0", ":", "\n", "            ", "break", "\n", "", "words_end", ".", "append", "(", "index", ")", "\n", "\n", "", "assert", "(", "len", "(", "words_begin", ")", "==", "len", "(", "words_end", ")", ")", "\n", "words", "=", "list", "(", ")", "\n", "for", "bi", ",", "ei", "in", "zip", "(", "words_begin", ",", "words_end", ")", ":", "\n", "        ", "words", ".", "append", "(", "line", "[", "bi", ":", "ei", "]", ".", "replace", "(", "' '", ",", "'\\xa0'", ")", ")", "\n", "\n", "# labels", "\n", "", "mention_tags_begin", "=", "[", "]", "\n", "mentions_begin", "=", "[", "]", "\n", "index", "=", "-", "1", "\n", "while", "True", ":", "\n", "        ", "index", "=", "line", ".", "find", "(", "MENTION_BEGIN_TAG", ",", "index", "+", "1", ")", "\n", "if", "index", "<", "0", ":", "\n", "            ", "break", "\n", "", "mention_tags_begin", ".", "append", "(", "index", ")", "\n", "index", "=", "line", ".", "find", "(", "'>'", ",", "index", "+", "1", ")", "\n", "mentions_begin", ".", "append", "(", "index", ")", "\n", "\n", "", "mentions_end", "=", "[", "]", "\n", "index", "=", "-", "1", "\n", "while", "True", ":", "\n", "        ", "index", "=", "line", ".", "find", "(", "MENTION_END_TAG", ",", "index", "+", "1", ")", "\n", "if", "index", "<", "0", ":", "\n", "            ", "break", "\n", "", "mentions_end", ".", "append", "(", "index", ")", "\n", "\n", "", "assert", "(", "len", "(", "mentions_begin", ")", "==", "len", "(", "mentions_end", ")", ")", "\n", "tags", "=", "[", "]", "\n", "for", "bi", ",", "ei", "in", "zip", "(", "mention_tags_begin", ",", "mentions_begin", ")", ":", "\n", "        ", "bi2", "=", "line", ".", "find", "(", "SEM_ATTRIBUTE", ",", "bi", ",", "ei", ")", "\n", "if", "bi2", "<", "0", ":", "\n", "            ", "tags", ".", "append", "(", "None", ")", "\n", "continue", "\n", "", "bi2", "+=", "len", "(", "SEM_ATTRIBUTE", ")", "\n", "ei2", "=", "line", ".", "index", "(", "'\"'", ",", "bi2", ",", "ei", ")", "\n", "tags", ".", "append", "(", "line", "[", "bi2", ":", "ei2", "]", ")", "\n", "\n", "", "stack", "=", "[", "]", "\n", "que", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "line", ")", ")", ":", "\n", "        ", "if", "index", "in", "mentions_begin", ":", "\n", "            ", "label", "=", "Label", "(", ")", "\n", "label", ".", "start", "=", "len", "(", "[", "i", "for", "i", "in", "words_begin", "if", "i", "<", "index", "]", ")", "\n", "label", ".", "tag", "=", "tags", ".", "pop", "(", "0", ")", "\n", "stack", ".", "append", "(", "label", ")", "\n", "", "elif", "index", "in", "mentions_end", ":", "\n", "            ", "label", "=", "stack", ".", "pop", "(", ")", "\n", "label", ".", "end", "=", "len", "(", "[", "i", "for", "i", "in", "words_end", "if", "i", "<=", "index", "]", ")", "\n", "que", ".", "append", "(", "label", ")", "\n", "\n", "", "", "labels", "=", "list", "(", ")", "\n", "for", "label", "in", "que", ":", "\n", "        ", "for", "tag", "in", "TAG_SET", ":", "\n", "            ", "if", "label", ".", "tag", "is", "not", "None", "and", "label", ".", "tag", ".", "find", "(", "tag", ")", ">", "-", "1", ":", "\n", "                ", "label", ".", "tag", "=", "tag", "\n", "labels", ".", "append", "(", "label", ")", "\n", "break", "\n", "\n", "", "", "", "calc_stat", "(", "words", ",", "labels", ")", "\n", "\n", "return", "' '", ".", "join", "(", "words", ")", ",", "'|'", ".", "join", "(", "[", "str", "(", "label", ")", "for", "label", "in", "labels", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.parse_genia": [[175, 231], ["os.makedirs", "open", "zip", "parse_genia.Stat", "line.strip.strip", "line.strip.find", "parse_genia.parse_line", "output_lines.append", "output_lines.append", "output_lines.append", "len", "line.strip.find", "words.split", "print", "print", "print", "print", "TAG_SET.items", "print", "TAG_SET.items", "TAG_SET.items", "print", "open", "f2.writelines", "enumerate", "print", "len", "len", "total_layer.append"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_genia.parse_line"], ["", "def", "parse_genia", "(", ")", "->", "None", ":", "\n", "\n", "    ", "output_dir_path", "=", "\"data/genia/\"", "\n", "os", ".", "makedirs", "(", "output_dir_path", ",", "mode", "=", "0o755", ",", "exist_ok", "=", "True", ")", "\n", "\n", "output_file_list", "=", "[", "\"genia.train\"", ",", "\"genia.dev\"", ",", "\"genia.test\"", "]", "\n", "dataset_size_list", "=", "[", "15022", ",", "1669", ",", "1855", "]", "\n", "\n", "with", "open", "(", "CORPUS_FILE_PATH", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "output_file", ",", "dataset_size", "in", "zip", "(", "output_file_list", ",", "dataset_size_list", ")", ":", "\n", "            ", "output_lines", "=", "[", "]", "\n", "sent_count", "=", "0", "\n", "token_count", "=", "0", "\n", "for", "tag", "in", "TAG_SET", ":", "\n", "                ", "TAG_SET", "[", "tag", "]", "=", "Stat", "(", ")", "\n", "", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ".", "find", "(", "SENTENCE_BEGIN_TAG", ")", ">", "-", "1", ":", "\n", "                    ", "assert", "(", "line", ".", "find", "(", "SENTENCE_END_TAG", ")", ">", "-", "1", ")", "\n", "words", ",", "labels", "=", "parse_line", "(", "line", ")", "\n", "output_lines", ".", "append", "(", "words", "+", "'\\n'", ")", "\n", "output_lines", ".", "append", "(", "labels", "+", "'\\n'", ")", "\n", "output_lines", ".", "append", "(", "'\\n'", ")", "\n", "sent_count", "+=", "1", "\n", "token_count", "+=", "len", "(", "words", ".", "split", "(", "' '", ")", ")", "\n", "\n", "if", "sent_count", "==", "dataset_size", ":", "\n", "                        ", "with", "open", "(", "output_dir_path", "+", "output_file", ",", "'w'", ")", "as", "f2", ":", "\n", "                            ", "f2", ".", "writelines", "(", "output_lines", ")", "\n", "\n", "", "print", "(", "\"\"", ")", "\n", "print", "(", "\"--- {}\"", ".", "format", "(", "output_file", ")", ")", "\n", "print", "(", "\"# of sentences:\\t{:6d}\"", ".", "format", "(", "sent_count", ")", ")", "\n", "print", "(", "\"# of tokens:\\t{:6d}\"", ".", "format", "(", "token_count", ")", ")", "\n", "total", "=", "0", "\n", "total_layer", "=", "[", "]", "\n", "total_ignored", "=", "0", "\n", "for", "_", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "                            ", "total", "+=", "stat", ".", "total", "\n", "for", "depth", ",", "num", "in", "enumerate", "(", "stat", ".", "layer", ")", ":", "\n", "                                ", "if", "len", "(", "total_layer", ")", "==", "depth", ":", "\n", "                                    ", "total_layer", ".", "append", "(", "0", ")", "\n", "", "total_layer", "[", "depth", "]", "+=", "num", "\n", "", "total_ignored", "+=", "stat", ".", "ignored", "\n", "", "print", "(", "\"total # of mentions:\\t{}\\t(layer:\\t{},\\tignored:\\t{})\"", "\n", ".", "format", "(", "total", ",", "total_layer", ",", "total_ignored", ")", ")", "\n", "for", "tag", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "                            ", "print", "(", "\"\\t{}:\\t{:5d}\\t(layer:\\t{},\\tignored:\\t{})\"", "\n", ".", "format", "(", "tag", ",", "stat", ".", "total", ",", "stat", ".", "layer", ",", "stat", ".", "ignored", ")", ")", "\n", "", "ave_labels", "=", "0", "\n", "for", "_", ",", "stat", "in", "TAG_SET", ".", "items", "(", ")", ":", "\n", "                            ", "ave_labels", "+=", "stat", ".", "num_labels", "\n", "", "ave_labels", "/=", "token_count", "*", "len", "(", "TAG_SET", ")", "\n", "print", "(", "\"average # of labels:\\t{:.2f}\"", ".", "format", "(", "ave_labels", ")", ")", "\n", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.__init__": [[12, 48], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "crf.ChainCRF4NestedNER.get_indices", "crf.ChainCRF4NestedNER.register_buffer", "crf.ChainCRF4NestedNER.register_buffer", "crf.ChainCRF4NestedNER.register_buffer", "crf.ChainCRF4NestedNER.register_buffer", "crf.ChainCRF4NestedNER.reset_parameters", "torch.Tensor", "torch.Tensor", "indices_bs.append", "indices_is.append", "indices_es.append", "indices_ss.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.get_indices", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "num_labels_i", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_size: int\n                the dimension of the input.\n            num_labels_i: int\n                the number of inside labels of the crf layer\n        \"\"\"", "\n", "super", "(", "ChainCRF4NestedNER", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", ":", "int", "=", "input_size", "\n", "self", ".", "num_labels_i", ":", "int", "=", "num_labels_i", "*", "4", "\n", "self", ".", "num_labels", ":", "int", "=", "self", ".", "num_labels_i", "+", "3", "\n", "\n", "# state weight tensor", "\n", "self", ".", "state_nn", ":", "nn", ".", "Linear", "=", "nn", ".", "Linear", "(", "input_size", ",", "self", ".", "num_labels", ")", "\n", "self", ".", "trans_matrix", ":", "Tensor", "=", "Parameter", "(", "Tensor", "(", "self", ".", "num_labels", ",", "self", ".", "num_labels", ")", ",", "False", ")", "\n", "\n", "indices_i", ",", "index_o", ",", "index_eos", ",", "index_bos", "=", "self", ".", "get_indices", "(", ")", "\n", "indices_bs", "=", "[", "]", "\n", "indices_is", "=", "[", "]", "\n", "indices_es", "=", "[", "]", "\n", "indices_ss", "=", "[", "]", "\n", "for", "index_i", "in", "indices_i", ":", "\n", "            ", "indices_bs", ".", "append", "(", "index_i", "[", "'B'", "]", ")", "\n", "indices_is", ".", "append", "(", "index_i", "[", "'I'", "]", ")", "\n", "indices_es", ".", "append", "(", "index_i", "[", "'E'", "]", ")", "\n", "indices_ss", ".", "append", "(", "index_i", "[", "'S'", "]", ")", "\n", "", "self", ".", "register_buffer", "(", "'indices_bs'", ",", "torch", ".", "LongTensor", "(", "indices_bs", ")", ")", "\n", "self", ".", "register_buffer", "(", "'indices_is'", ",", "torch", ".", "LongTensor", "(", "indices_is", ")", ")", "\n", "self", ".", "register_buffer", "(", "'indices_es'", ",", "torch", ".", "LongTensor", "(", "indices_es", ")", ")", "\n", "self", ".", "register_buffer", "(", "'indices_ss'", ",", "torch", ".", "LongTensor", "(", "indices_ss", ")", ")", "\n", "self", ".", "index_o", ":", "int", "=", "index_o", "\n", "self", ".", "index_eos", ":", "int", "=", "index_eos", "\n", "self", ".", "index_bos", ":", "int", "=", "index_bos", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.reset_parameters": [[49, 78], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "negative_inf", "=", "-", "1e4", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "state_nn", ".", "weight", ",", "0.", ")", "\n", "self", ".", "state_nn", ".", "bias", ".", "data", "[", ":", "self", ".", "index_eos", "]", "=", "0.", "\n", "self", ".", "state_nn", ".", "bias", ".", "data", "[", "self", ".", "index_eos", ":", "]", "=", "negative_inf", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "trans_matrix", ",", "0.", ")", "\n", "for", "i", "in", "self", ".", "indices_bs", ":", "\n", "            ", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", ":", "i", "+", "1", "]", "=", "negative_inf", "# B-XXX ->", "\n", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", "i", "+", "3", ":", "]", "=", "negative_inf", "# B-XXX ->", "\n", "", "for", "i", "in", "self", ".", "indices_is", ":", "\n", "            ", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", ":", "i", "]", "=", "negative_inf", "# I-XXX ->", "\n", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", "i", "+", "2", ":", "]", "=", "negative_inf", "# I-XXX ->", "\n", "", "for", "i", "in", "self", ".", "indices_es", ":", "\n", "            ", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", "self", ".", "indices_is", "]", "=", "negative_inf", "# E-XXX -> I-YYY", "\n", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", "self", ".", "indices_es", "]", "=", "negative_inf", "# E-XXX -> E-YYY", "\n", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", "self", ".", "index_bos", "]", "=", "negative_inf", "# E-XXX -> BOS", "\n", "", "for", "i", "in", "self", ".", "indices_ss", ":", "\n", "            ", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", "self", ".", "indices_is", "]", "=", "negative_inf", "# S-XXX -> I-YYY", "\n", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", "self", ".", "indices_es", "]", "=", "negative_inf", "# S-XXX -> E-YYY", "\n", "self", ".", "trans_matrix", ".", "data", "[", "i", ",", "self", ".", "index_bos", "]", "=", "negative_inf", "# S-XXX -> BOS", "\n", "", "self", ".", "trans_matrix", ".", "data", "[", "self", ".", "index_o", ",", "self", ".", "indices_is", "]", "=", "negative_inf", "# O -> I-XXX", "\n", "self", ".", "trans_matrix", ".", "data", "[", "self", ".", "index_o", ",", "self", ".", "indices_es", "]", "=", "negative_inf", "# O -> E-XXX", "\n", "self", ".", "trans_matrix", ".", "data", "[", "self", ".", "index_o", ",", "self", ".", "index_bos", "]", "=", "negative_inf", "# O -> BOS", "\n", "self", ".", "trans_matrix", ".", "data", "[", "self", ".", "index_eos", ",", ":", "self", ".", "index_eos", "]", "=", "negative_inf", "# EOS ->", "\n", "self", ".", "trans_matrix", ".", "data", "[", "self", ".", "index_eos", ",", "self", ".", "index_bos", "]", "=", "negative_inf", "# EOS -> BOS", "\n", "self", ".", "trans_matrix", ".", "data", "[", "self", ".", "index_bos", ",", "self", ".", "indices_is", "]", "=", "negative_inf", "# BOS -> I-XXX", "\n", "self", ".", "trans_matrix", ".", "data", "[", "self", ".", "index_bos", ",", "self", ".", "indices_es", "]", "=", "negative_inf", "# BOS -> E-XXX", "\n", "self", ".", "trans_matrix", ".", "data", "[", "self", ".", "index_bos", ",", "self", ".", "index_bos", "]", "=", "negative_inf", "# BOS -> BOS", "\n", "self", ".", "trans_matrix", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.get_indices": [[79, 92], ["range", "dict", "indices_i.append"], "methods", ["None"], ["", "def", "get_indices", "(", "self", ")", "->", "Tuple", "[", "List", "[", "Dict", "[", "str", ",", "int", "]", "]", ",", "int", ",", "int", ",", "int", "]", ":", "\n", "        ", "indices_i", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_labels_i", ",", "4", ")", ":", "\n", "            ", "index_i", "=", "dict", "(", ")", "\n", "index_i", "[", "'B'", "]", "=", "i", "\n", "index_i", "[", "'I'", "]", "=", "i", "+", "1", "\n", "index_i", "[", "'E'", "]", "=", "i", "+", "2", "\n", "index_i", "[", "'S'", "]", "=", "i", "+", "3", "\n", "indices_i", ".", "append", "(", "index_i", ")", "\n", "", "index_o", "=", "self", ".", "num_labels_i", "\n", "index_eos", "=", "self", ".", "num_labels_i", "+", "1", "\n", "index_bos", "=", "self", ".", "num_labels_i", "+", "2", "\n", "return", "indices_i", ",", "index_o", ",", "index_eos", ",", "index_bos", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.forward": [[93, 118], ["input.size", "crf.ChainCRF4NestedNER.state_nn", "crf.ChainCRF4NestedNER.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ",", "mask", ":", "Tensor", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: Tensor\n                the input tensor with shape = [batch, length, input_size]\n            mask: Tensor or None\n                the mask tensor with shape = [batch, length]\n\n        Returns: Tensor\n            the energy tensor with shape = [batch, length, num_label, num_label]\n\n        \"\"\"", "\n", "batch", ",", "length", ",", "_", "=", "input", ".", "size", "(", ")", "\n", "\n", "# compute out_s by tensor dot [batch, length, input_size] * [input_size, num_label]", "\n", "# thus out_s should be [batch, length, num_label] --> [batch, length, 1, num_label]", "\n", "out_s", "=", "self", ".", "state_nn", "(", "input", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "out_s", "[", ":", ",", ":", ",", "self", ".", "index_eos", "]", "+=", "(", "mask", "==", "0", ")", ".", "float", "(", ")", "*", "2e4", "\n", "\n", "# [batch, length, num_label, num_label]", "\n", "", "output", "=", "self", ".", "trans_matrix", "+", "out_s", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.loss": [[119, 162], ["input.size", "crf.ChainCRF4NestedNER.forward", "crf.ChainCRF4NestedNER.transpose", "target.transpose", "torch.arange().type_as().long", "torch.arange().type_as().long", "torch.arange().type_as().long", "torch.arange().type_as().long", "input.new_full().long", "input.new_zeros", "range", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "input.new_full", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.logsumexp.unsqueeze", "torch.logsumexp.unsqueeze", "crf.ChainCRF4NestedNER.trans_matrix.data[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.forward"], ["", "def", "loss", "(", "self", ",", "input", ":", "Tensor", ",", "target", ":", "Tensor", ",", "mask", ":", "Tensor", "=", "None", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: Tensor\n                the input tensor with shape = [batch, length, input_size]\n            target: Tensor\n                the tensor of target labels with shape [batch, length]\n            mask: Tensor or None\n                the mask tensor with shape = [batch, length]\n\n        Returns: Tensor\n                A 1D tensor for negative log likelihood loss\n        \"\"\"", "\n", "batch", ",", "length", ",", "_", "=", "input", ".", "size", "(", ")", "\n", "energy", "=", "self", ".", "forward", "(", "input", ",", "mask", "=", "mask", ")", "\n", "# shape = [length, batch, num_label, num_label]", "\n", "energy_transpose", "=", "energy", ".", "transpose", "(", "0", ",", "1", ")", "\n", "# shape = [length, batch]", "\n", "target_transpose", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# shape = [batch, num_label]", "\n", "partition", "=", "None", "\n", "\n", "# shape = [batch]", "\n", "batch_index", "=", "torch", ".", "arange", "(", "0", ",", "batch", ")", ".", "type_as", "(", "input", ")", ".", "long", "(", ")", "\n", "prev_label", "=", "input", ".", "new_full", "(", "(", "batch", ",", ")", ",", "self", ".", "index_bos", ")", ".", "long", "(", ")", "\n", "tgt_energy", "=", "input", ".", "new_zeros", "(", "batch", ")", "\n", "\n", "for", "t", "in", "range", "(", "length", ")", ":", "\n", "# shape = [batch, num_label, num_label]", "\n", "            ", "curr_energy", "=", "energy_transpose", "[", "t", "]", "\n", "if", "t", "==", "0", ":", "\n", "                ", "partition", "=", "curr_energy", "[", ":", ",", "self", ".", "index_bos", ",", ":", "]", "\n", "", "else", ":", "\n", "# shape = [batch, num_label]", "\n", "                ", "partition", "=", "torch", ".", "logsumexp", "(", "curr_energy", "+", "partition", ".", "unsqueeze", "(", "2", ")", ",", "dim", "=", "1", ")", "\n", "", "label", "=", "target_transpose", "[", "t", "]", "\n", "tgt_energy", "+=", "curr_energy", "[", "batch_index", ",", "prev_label", ",", "label", "]", "\n", "prev_label", "=", "label", "\n", "\n", "", "return", "torch", ".", "logsumexp", "(", "self", ".", "trans_matrix", ".", "data", "[", ":", ",", "self", ".", "index_eos", "]", ".", "unsqueeze", "(", "0", ")", "+", "partition", ",", "dim", "=", "1", ")", "-", "tgt_energy", ",", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.nests_loss": [[163, 212], ["energy.size", "crf.ChainCRF4NestedNER.indices_is.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "crf.ChainCRF4NestedNER.indices_bs.unsqueeze", "crf.ChainCRF4NestedNER.indices_is.repeat", "crf.ChainCRF4NestedNER.indices_es.unsqueeze", "energy.new_full", "torch.logsumexp.clone", "torch.logsumexp.clone", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp.unsqueeze", "torch.logsumexp.unsqueeze", "torch.logsumexp.clone.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["", "def", "nests_loss", "(", "self", ",", "energy", ":", "Tensor", ",", "target", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            energy: Tensor\n                the energy tensor with shape = [length, num_label, num_label]\n            target: Tensor\n                the tensor of target labels with shape [length]\n\n        Returns: Tensor\n                A 0D tensor for negative log likelihood loss\n        \"\"\"", "\n", "length", ",", "_", ",", "_", "=", "energy", ".", "size", "(", ")", "\n", "\n", "num_label_3", "=", "self", ".", "indices_is", ".", "size", "(", "0", ")", "\n", "\n", "indices_3", "=", "torch", ".", "cat", "(", "(", "self", ".", "indices_bs", ".", "unsqueeze", "(", "0", ")", ",", "\n", "self", ".", "indices_is", ".", "repeat", "(", "(", "length", "-", "2", ",", "1", ")", ")", ",", "\n", "self", ".", "indices_es", ".", "unsqueeze", "(", "0", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "# shape = [num_label]", "\n", "partition_1", "=", "None", "\n", "partition_3", "=", "None", "\n", "\n", "# shape = []", "\n", "prev_label", "=", "self", ".", "index_bos", "\n", "tgt_energy", "=", "0", "\n", "\n", "for", "t", "in", "range", "(", "length", ")", ":", "\n", "# shape = [num_label, num_label]", "\n", "            ", "curr_energy", "=", "energy", "[", "t", "]", "\n", "if", "t", "==", "0", ":", "\n", "                ", "partition_1", "=", "curr_energy", "[", "self", ".", "index_bos", ",", ":", "]", "\n", "partition_3", "=", "energy", ".", "new_full", "(", "(", "num_label_3", ",", ")", ",", "-", "1e4", ")", "\n", "", "else", ":", "\n", "# shape = [num_label]", "\n", "                ", "partition", "=", "partition_1", ".", "clone", "(", ")", "\n", "partition", "[", "indices_3", "[", "t", "-", "1", "]", "]", "=", "partition_3", "\n", "partition_1", "=", "torch", ".", "logsumexp", "(", "curr_energy", "+", "partition_1", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "0", ")", "\n", "partition_3", "=", "torch", ".", "logsumexp", "(", "curr_energy", "[", ":", ",", "indices_3", "[", "t", "]", "]", "+", "partition", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "0", ")", "\n", "", "label", "=", "target", "[", "t", "]", "\n", "tgt_energy", "+=", "curr_energy", "[", "prev_label", ",", "label", "]", "\n", "prev_label", "=", "label", "\n", "\n", "", "t", "=", "length", "-", "1", "\n", "curr_energy", "=", "self", ".", "trans_matrix", ".", "data", "[", ":", ",", "self", ".", "index_eos", "]", "\n", "partition", "=", "curr_energy", "+", "partition_1", "\n", "partition", "[", "indices_3", "[", "t", "]", "]", "=", "curr_energy", "[", "indices_3", "[", "t", "]", "]", "+", "partition_3", "\n", "return", "torch", ".", "logsumexp", "(", "partition", ",", "dim", "=", "0", ")", "-", "tgt_energy", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.decode": [[213, 254], ["crf.ChainCRF4NestedNER.forward", "crf.ChainCRF4NestedNER.transpose", "crf.ChainCRF4NestedNER.transpose.size", "torch.arange().type_as().long", "torch.arange().type_as().long", "torch.arange().type_as().long", "torch.arange().type_as().long", "torch.arange().type_as().long.new_zeros", "torch.arange().type_as().long.new_zeros", "torch.arange().type_as().long.new_zeros", "torch.arange().type_as().long.new_zeros", "range", "torch.max", "torch.max", "torch.max", "torch.max", "reversed", "torch.max", "torch.max", "torch.max", "torch.max", "crf.ChainCRF4NestedNER.trans_matrix.data[].unsqueeze", "range", "torch.arange().type_as().long.new_zeros.transpose", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "pi.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.forward", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["", "def", "decode", "(", "self", ",", "input", ":", "Tensor", ",", "mask", ":", "Tensor", "=", "None", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: Tensor\n                the input tensor with shape = [batch, length, input_size]\n            mask: Tensor or None\n                the mask tensor with shape = [batch, length]\n\n        Returns: Tensor\n            decoding results in shape [batch, length]\n        \"\"\"", "\n", "\n", "energy", "=", "self", ".", "forward", "(", "input", ",", "mask", "=", "mask", ")", "\n", "\n", "# Input should be provided as (n_batch, n_time_steps, num_labels, num_labels)", "\n", "# For convenience, we need to dimshuffle to (n_time_steps, n_batch, num_labels, num_labels)", "\n", "energy_transpose", "=", "energy", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# the last row and column is the tag for pad symbol. reduce these two dimensions by 1 to remove that.", "\n", "# also remove the first #symbolic rows and columns.", "\n", "# now the shape of energies_shuffled is [n_time_steps, b_batch, t, t] where t = num_labels - #symbolic - 1.", "\n", "energy_transpose", "=", "energy_transpose", "[", ":", ",", ":", ",", ":", "self", ".", "index_bos", ",", ":", "self", ".", "index_bos", "]", "\n", "\n", "length", ",", "batch_size", ",", "num_label", ",", "_", "=", "energy_transpose", ".", "size", "(", ")", "\n", "\n", "batch_index", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", ".", "type_as", "(", "input", ")", ".", "long", "(", ")", "\n", "pointer", "=", "batch_index", ".", "new_zeros", "(", "(", "length", ",", "batch_size", ",", "num_label", ")", ")", "\n", "back_pointer", "=", "batch_index", ".", "new_zeros", "(", "(", "length", ",", "batch_size", ")", ")", "\n", "\n", "pi", "=", "energy", "[", ":", ",", "0", ",", "self", ".", "index_bos", ",", ":", "self", ".", "index_bos", "]", "\n", "pointer", "[", "0", "]", "=", "self", ".", "index_bos", "\n", "for", "t", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "            ", "pi", ",", "pointer", "[", "t", "]", "=", "torch", ".", "max", "(", "energy_transpose", "[", "t", "]", "+", "pi", ".", "unsqueeze", "(", "2", ")", ",", "dim", "=", "1", ")", "\n", "", "pi", "=", "self", ".", "trans_matrix", ".", "data", "[", ":", "self", ".", "index_bos", ",", "self", ".", "index_eos", "]", ".", "unsqueeze", "(", "0", ")", "+", "pi", "\n", "\n", "_", ",", "back_pointer", "[", "-", "1", "]", "=", "torch", ".", "max", "(", "pi", ",", "dim", "=", "1", ")", "\n", "for", "t", "in", "reversed", "(", "range", "(", "length", "-", "1", ")", ")", ":", "\n", "            ", "pointer_last", "=", "pointer", "[", "t", "+", "1", "]", "\n", "back_pointer", "[", "t", "]", "=", "pointer_last", "[", "batch_index", ",", "back_pointer", "[", "t", "+", "1", "]", "]", "\n", "\n", "", "return", "back_pointer", ".", "transpose", "(", "0", ",", "1", ")", ",", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.decode_nest": [[255, 312], ["energy_transpose.size", "crf.ChainCRF4NestedNER.indices_is.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "energy.new_zeros().long", "energy.new_zeros().long", "energy.new_zeros().long.new_zeros", "energy.new_full", "range", "torch.max", "torch.max", "torch.max", "torch.max", "pi_1.clone", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "crf.ChainCRF4NestedNER.indices_bs.unsqueeze", "crf.ChainCRF4NestedNER.indices_is.repeat", "crf.ChainCRF4NestedNER.indices_es.unsqueeze", "energy.new_zeros", "energy.new_zeros", "pi_1.unsqueeze", "pi_1.clone.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["", "def", "decode_nest", "(", "self", ",", "energy", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            energy: Tensor\n                the energy tensor with shape = [length, num_label, num_label]\n\n        Returns: Tensor\n            decoding nested results in shape [length]\n        \"\"\"", "\n", "\n", "# the last row and column is the tag for pad symbol. reduce these two dimensions by 1 to remove that.", "\n", "# also remove the first #symbolic rows and columns.", "\n", "# now the shape of energies_shuffled is [n_time_steps, t, t] where t = num_labels - #symbolic - 1.", "\n", "energy_transpose", "=", "energy", "[", ":", ",", ":", "self", ".", "index_bos", ",", ":", "self", ".", "index_bos", "]", "\n", "\n", "length", ",", "num_label", ",", "_", "=", "energy_transpose", ".", "size", "(", ")", "\n", "\n", "num_label_3", "=", "self", ".", "indices_is", ".", "size", "(", "0", ")", "\n", "\n", "indices_3", "=", "torch", ".", "cat", "(", "(", "self", ".", "indices_bs", ".", "unsqueeze", "(", "0", ")", ",", "\n", "self", ".", "indices_is", ".", "repeat", "(", "(", "length", "-", "2", ",", "1", ")", ")", ",", "\n", "self", ".", "indices_es", ".", "unsqueeze", "(", "0", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "pointer_1", "=", "energy", ".", "new_zeros", "(", "(", "length", ",", "num_label", ")", ")", ".", "long", "(", ")", "\n", "pointer_3", "=", "energy", ".", "new_zeros", "(", "(", "length", ",", "num_label", ")", ")", ".", "long", "(", ")", "\n", "back_pointer", "=", "pointer_3", ".", "new_zeros", "(", "length", ")", "\n", "\n", "pi_1", "=", "energy", "[", "0", ",", "self", ".", "index_bos", ",", ":", "self", ".", "index_bos", "]", "\n", "pi_3", "=", "energy", ".", "new_full", "(", "(", "num_label_3", ",", ")", ",", "-", "1e4", ")", "\n", "pointer_1", "[", "0", "]", "=", "self", ".", "index_bos", "\n", "pointer_3", "[", "0", "]", "=", "self", ".", "index_bos", "\n", "for", "t", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "            ", "e_t", "=", "energy_transpose", "[", "t", "]", "\n", "pi", "=", "pi_1", ".", "clone", "(", ")", "\n", "pi", "[", "indices_3", "[", "t", "-", "1", "]", "]", "=", "pi_3", "\n", "pi_1", ",", "pointer_1", "[", "t", "]", "=", "torch", ".", "max", "(", "e_t", "+", "pi_1", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "0", ")", "\n", "pi_3", ",", "pointer_3", "[", "t", ",", "indices_3", "[", "t", "]", "]", "=", "torch", ".", "max", "(", "e_t", "[", ":", ",", "indices_3", "[", "t", "]", "]", "+", "pi", ".", "unsqueeze", "(", "1", ")", ",", "dim", "=", "0", ")", "\n", "", "t", "=", "length", "-", "1", "\n", "e_t", "=", "self", ".", "trans_matrix", ".", "data", "[", ":", "self", ".", "index_bos", ",", "self", ".", "index_eos", "]", "\n", "pi", "=", "e_t", "+", "pi_1", "\n", "pi", "[", "indices_3", "[", "t", "]", "]", "=", "e_t", "[", "indices_3", "[", "t", "]", "]", "+", "pi_3", "\n", "\n", "_", ",", "back_pointer", "[", "-", "1", "]", "=", "torch", ".", "max", "(", "pi", ",", "dim", "=", "0", ")", "\n", "t", "=", "length", "-", "2", "\n", "while", "t", ">", "-", "1", ":", "\n", "            ", "if", "(", "indices_3", "[", "t", "+", "1", "]", "==", "back_pointer", "[", "t", "+", "1", "]", ")", ".", "nonzero", "(", ")", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "pointer_last", "=", "pointer_3", "[", "t", "+", "1", "]", "\n", "back_pointer", "[", "t", "]", "=", "pointer_last", "[", "back_pointer", "[", "t", "+", "1", "]", "]", "\n", "t", "-=", "1", "\n", "", "while", "t", ">", "-", "1", ":", "\n", "            ", "pointer_last", "=", "pointer_1", "[", "t", "+", "1", "]", "\n", "back_pointer", "[", "t", "]", "=", "pointer_last", "[", "back_pointer", "[", "t", "+", "1", "]", "]", "\n", "t", "-=", "1", "\n", "\n", "", "return", "back_pointer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarMaskedFastLSTM.__init__": [[78, 101], ["torch.Module.__init__", "range", "range", "module.function.variational_rnn.VarLSTMCell", "module.function.variational_rnn.VarMaskedFastLSTM.all_cells.append", "module.function.variational_rnn.VarMaskedFastLSTM.add_module"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "hidden_size", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "1", ",", "bias", ":", "bool", "=", "True", ",", "batch_first", ":", "bool", "=", "False", ",", "\n", "dropout", ":", "Tuple", "[", "float", ",", "float", "]", "=", "(", "0.", ",", "0.", ")", ",", "bidirectional", ":", "bool", "=", "False", ",", "\n", "initializer", ":", "Callable", "[", "[", "Tensor", "]", ",", "None", "]", "=", "None", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", "VarMaskedFastLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", ":", "int", "=", "input_size", "\n", "self", ".", "hidden_size", ":", "int", "=", "hidden_size", "\n", "self", ".", "num_layers", ":", "int", "=", "num_layers", "\n", "self", ".", "bias", ":", "bool", "=", "bias", "\n", "self", ".", "batch_first", ":", "bool", "=", "batch_first", "\n", "self", ".", "bidirectional", ":", "bool", "=", "bidirectional", "\n", "num_directions", "=", "2", "if", "bidirectional", "else", "1", "\n", "\n", "self", ".", "all_cells", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "for", "direction", "in", "range", "(", "num_directions", ")", ":", "\n", "                ", "layer_input_size", "=", "input_size", "if", "layer", "==", "0", "else", "hidden_size", "*", "num_directions", "\n", "\n", "cell", "=", "VarLSTMCell", "(", "layer_input_size", ",", "hidden_size", ",", "bias", ",", "p", "=", "dropout", ",", "initializer", "=", "initializer", ")", "\n", "self", ".", "all_cells", ".", "append", "(", "cell", ")", "\n", "self", ".", "add_module", "(", "'cell%d'", "%", "(", "layer", "*", "num_directions", "+", "direction", ")", ",", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarMaskedFastLSTM.reset_parameters": [[102, 106], ["cell.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.reset_parameters"], ["", "", "", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "cell", ":", "VarLSTMCell", "\n", "for", "cell", "in", "self", ".", "all_cells", ":", "\n", "            ", "cell", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarMaskedFastLSTM.reset_noise": [[107, 111], ["cell.reset_noise"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarLSTMCell.reset_noise"], ["", "", "def", "reset_noise", "(", "self", ",", "batch_size", ":", "int", ")", "->", "None", ":", "\n", "        ", "cell", ":", "VarLSTMCell", "\n", "for", "cell", "in", "self", ".", "all_cells", ":", "\n", "            ", "cell", ".", "reset_noise", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarMaskedFastLSTM.forward": [[112, 128], ["module.function.variational_rnn.autograd_var_masked_rnn", "module.function.variational_rnn.VarMaskedFastLSTM.reset_noise", "module.function.variational_rnn.autograd_var_masked_rnn.", "input.size", "input.size", "input.new_zeros", "mask.view", "mask.size"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.autograd_var_masked_rnn", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarLSTMCell.reset_noise", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["", "", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ",", "mask", ":", "Tensor", "=", "None", ",", "hx", ":", "Tuple", "[", "Tensor", ",", "Tensor", "]", "=", "None", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "if", "self", ".", "batch_first", "else", "input", ".", "size", "(", "1", ")", "\n", "if", "hx", "is", "None", ":", "\n", "            ", "num_directions", "=", "2", "if", "self", ".", "bidirectional", "else", "1", "\n", "hx", "=", "input", ".", "new_zeros", "(", "(", "self", ".", "num_layers", "*", "num_directions", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "hx", "=", "(", "hx", ",", "hx", ")", "\n", "\n", "", "func", "=", "rnn_f", ".", "autograd_var_masked_rnn", "(", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "batch_first", "=", "self", ".", "batch_first", ",", "\n", "bidirectional", "=", "self", ".", "bidirectional", ",", "\n", "lstm", "=", "True", ")", "\n", "\n", "self", ".", "reset_noise", "(", "batch_size", ")", "\n", "\n", "output", ",", "hidden", "=", "func", "(", "input", ",", "self", ".", "all_cells", ",", "hx", ",", "None", "if", "mask", "is", "None", "else", "mask", ".", "view", "(", "mask", ".", "size", "(", ")", "+", "(", "1", ",", ")", ")", ")", "\n", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarMaskedFastLSTM.step": [[129, 151], ["input.size", "module.function.variational_rnn.autograd_var_masked_step", "module.function.variational_rnn.autograd_var_masked_step.", "input.new_zeros"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.autograd_var_masked_step"], ["", "def", "step", "(", "self", ",", "input", ":", "Tensor", ",", "hx", ":", "Tuple", "[", "Tensor", ",", "Tensor", "]", "=", "None", ",", "mask", ":", "Tensor", "=", "None", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        execute one step forward (only for one-directional RNN).\n        Args:\n            input (batch, input_size): input tensor of this step.\n            hx (num_layers, batch, hidden_size): the hidden state of last step.\n            mask (batch): the mask tensor of this step.\n\n        Returns:\n            output (batch, hidden_size): tensor containing the output of this step from the last layer of RNN.\n            hn (num_layers, batch, hidden_size): tensor containing the hidden state of this step\n        \"\"\"", "\n", "assert", "not", "self", ".", "bidirectional", ",", "\"step only cannot be applied to bidirectional RNN.\"", "\n", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "if", "hx", "is", "None", ":", "\n", "            ", "hx", "=", "input", ".", "new_zeros", "(", "(", "self", ".", "num_layers", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "hx", "=", "(", "hx", ",", "hx", ")", "\n", "\n", "", "func", "=", "rnn_f", ".", "autograd_var_masked_step", "(", "num_layers", "=", "self", ".", "num_layers", ",", "lstm", "=", "True", ")", "\n", "\n", "output", ",", "hidden", "=", "func", "(", "input", ",", "self", ".", "all_cells", ",", "hx", ",", "mask", ")", "\n", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarLSTMCell.__init__": [[197, 226], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "module.function.variational_rnn.VarLSTMCell.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "module.function.variational_rnn.VarLSTMCell.register_parameter", "module.function.variational_rnn.VarLSTMCell.register_parameter", "variational_rnn.default_initializer", "ValueError", "ValueError", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.reset_parameters", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.default_initializer"], ["def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "hidden_size", ":", "int", ",", "bias", ":", "bool", "=", "True", ",", "p", ":", "Tuple", "[", "float", ",", "float", "]", "=", "(", "0.5", ",", "0.5", ")", ",", "\n", "initializer", ":", "Callable", "[", "[", "Tensor", "]", ",", "None", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "VarLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", ":", "int", "=", "input_size", "\n", "self", ".", "hidden_size", ":", "int", "=", "hidden_size", "\n", "self", ".", "bias", ":", "bool", "=", "bias", "\n", "self", ".", "weight_ih", ":", "Tensor", "=", "Parameter", "(", "Tensor", "(", "4", ",", "input_size", ",", "hidden_size", ")", ",", "True", ")", "\n", "self", ".", "weight_hh", ":", "Tensor", "=", "Parameter", "(", "Tensor", "(", "4", ",", "hidden_size", ",", "hidden_size", ")", ",", "True", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias_ih", ":", "Tensor", "=", "Parameter", "(", "Tensor", "(", "4", ",", "hidden_size", ")", ",", "True", ")", "\n", "self", ".", "bias_hh", ":", "Tensor", "=", "Parameter", "(", "Tensor", "(", "4", ",", "hidden_size", ")", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias_ih'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias_hh'", ",", "None", ")", "\n", "\n", "", "self", ".", "initializer", ":", "Callable", "[", "[", "Tensor", "]", ",", "None", "]", "=", "default_initializer", "(", "self", ".", "hidden_size", ")", "if", "initializer", "is", "None", "else", "initializer", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "p_in", ",", "p_hidden", "=", "p", "\n", "if", "p_in", "<", "0.", "or", "p_in", ">", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "\"input dropout probability has to be between 0 and 1, \"", "\n", "\"but got {}\"", ".", "format", "(", "p_in", ")", ")", "\n", "", "if", "p_hidden", "<", "0.", "or", "p_hidden", ">", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "\"hidden state dropout probability has to be between 0 and 1, \"", "\n", "\"but got {}\"", ".", "format", "(", "p_hidden", ")", ")", "\n", "", "self", ".", "p_in", ":", "float", "=", "p_in", "\n", "self", ".", "p_hidden", ":", "float", "=", "p_hidden", "\n", "self", ".", "noise_in", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", "self", ".", "noise_hidden", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarLSTMCell.__repr__": [[227, 235], ["s.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "s", "=", "'{name}({input_size}, {hidden_size}'", "\n", "if", "'bias'", "in", "self", ".", "__dict__", "and", "self", ".", "bias", "is", "not", "True", ":", "\n", "            ", "s", "+=", "', bias={bias}'", "\n", "", "if", "'nonlinearity'", "in", "self", ".", "__dict__", "and", "self", ".", "nonlinearity", "!=", "\"tanh\"", ":", "\n", "            ", "s", "+=", "', nonlinearity={nonlinearity}'", "\n", "", "s", "+=", "')'", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarLSTMCell.reset_parameters": [[236, 242], ["module.function.variational_rnn.VarLSTMCell.parameters", "weight.dim", "torch.init.constant_", "module.function.variational_rnn.VarLSTMCell.initializer"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "weight", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "weight", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "weight", ",", "0.", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "initializer", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarLSTMCell.reset_noise": [[243, 259], ["module.function.variational_rnn.VarLSTMCell.weight_ih.new_empty", "module.function.variational_rnn.VarLSTMCell.weight_hh.new_empty", "module.function.variational_rnn.VarLSTMCell.bernoulli_", "module.function.variational_rnn.VarLSTMCell.bernoulli_"], "methods", ["None"], ["", "", "", "def", "reset_noise", "(", "self", ",", "batch_size", ":", "int", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "p_in", ":", "\n", "                ", "noise", "=", "self", ".", "weight_ih", ".", "new_empty", "(", "(", "4", ",", "batch_size", ",", "self", ".", "input_size", ")", ")", "\n", "self", ".", "noise_in", "=", "noise", ".", "bernoulli_", "(", "1.0", "-", "self", ".", "p_in", ")", "/", "(", "1.0", "-", "self", ".", "p_in", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "noise_in", "=", "None", "\n", "\n", "", "if", "self", ".", "p_hidden", ":", "\n", "                ", "noise", "=", "self", ".", "weight_hh", ".", "new_empty", "(", "(", "4", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "self", ".", "noise_hidden", "=", "noise", ".", "bernoulli_", "(", "1.0", "-", "self", ".", "p_hidden", ")", "/", "(", "1.0", "-", "self", ".", "p_hidden", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "noise_hidden", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "noise_in", "=", "None", "\n", "self", ".", "noise_hidden", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.VarLSTMCell.forward": [[260, 266], ["module.function.variational_rnn.var_lstm_cell"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.var_lstm_cell"], ["", "", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ",", "hx", ":", "Tuple", "[", "Tensor", ",", "Tensor", "]", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "return", "rnn_f", ".", "var_lstm_cell", "(", "\n", "input", ",", "hx", ",", "\n", "self", ".", "weight_ih", ",", "self", ".", "weight_hh", ",", "\n", "self", ".", "bias_ih", ",", "self", ".", "bias_hh", ",", "\n", "self", ".", "noise_in", ",", "self", ".", "noise_hidden", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.variational_rnn.default_initializer": [[12, 19], ["math.sqrt", "torch.init.uniform_"], "function", ["None"], ["def", "default_initializer", "(", "hidden_size", ":", "int", ")", "->", "Callable", "[", "[", "Tensor", "]", ",", "None", "]", ":", "\n", "    ", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "hidden_size", ")", "\n", "\n", "def", "forward", "(", "tensor", ":", "Tensor", ")", "->", "None", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "tensor", ",", "-", "stdv", ",", "stdv", ")", "\n", "\n", "", "return", "forward", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.WordEmbeddings.__init__": [[18, 29], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__"], ["def", "__init__", "(", "self", ",", "embeddings", ":", "str", ",", "field", ":", "str", "=", "None", ",", "word_dropout", ":", "float", "=", "0.05", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initializes classic word embeddings. Constructor downloads required files if not there.\n        :param embeddings: one of: 'glove', 'extvec', 'crawl' or two-letter language code or custom\n        If you want to use a custom embedding file, just pass the path to the embeddings as embeddings variable.\n        \"\"\"", "\n", "super", "(", "WordEmbeddings", ",", "self", ")", ".", "__init__", "(", "embeddings", "=", "embeddings", ",", "field", "=", "field", ")", "\n", "\n", "self", ".", "static_embeddings", "=", "False", "\n", "\n", "self", ".", "word_dropout", "=", "word_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.WordEmbeddings._add_embeddings_internal": [[30, 59], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "enumerate", "torch.zeros.new_empty().bernoulli_", "torch.zeros.new_empty().bernoulli_", "enumerate", "token.text.replace", "embeddings.WordEmbeddings.get_cached_vec", "token.set_embedding", "torch.zeros.new_empty", "torch.zeros.new_empty", "token.set_embedding", "len"], "methods", ["None"], ["", "def", "_add_embeddings_internal", "(", "self", ",", "sentences", ":", "List", "[", "Sentence", "]", ")", "->", "List", "[", "Sentence", "]", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "\n", "                ", "for", "token_idx", ",", "token", "in", "enumerate", "(", "sentence", ".", "tokens", ")", ":", "\n", "\n", "                    ", "word", "=", "token", ".", "text", ".", "replace", "(", "' '", ",", "'\\xa0'", ")", "\n", "\n", "word_embedding", "=", "self", ".", "get_cached_vec", "(", "word", "=", "word", ")", "\n", "\n", "token", ".", "set_embedding", "(", "self", ".", "name", ",", "word_embedding", ")", "\n", "\n", "", "", "if", "self", ".", "word_dropout", "==", "0.", "or", "not", "self", ".", "training", ":", "\n", "                ", "return", "sentences", "\n", "\n", "", "pre_allocated_zero_tensor", "=", "torch", ".", "zeros", "(", "(", "self", ".", "embedding_length", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "flair", ".", "device", ")", "\n", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "\n", "                ", "m", "=", "pre_allocated_zero_tensor", ".", "new_empty", "(", "(", "len", "(", "sentence", ".", "tokens", ")", ",", ")", ")", ".", "bernoulli_", "(", "1.", "-", "self", ".", "word_dropout", ")", "\n", "\n", "for", "token_idx", ",", "token", "in", "enumerate", "(", "sentence", ".", "tokens", ")", ":", "\n", "\n", "                    ", "if", "m", "[", "token_idx", "]", "==", "0.", ":", "\n", "                        ", "token", ".", "set_embedding", "(", "self", ".", "name", ",", "pre_allocated_zero_tensor", ")", "\n", "\n", "", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.CharacterEmbeddings.__init__": [[64, 83], ["super().__init__", "torch.init.constant_", "torch.init.constant_", "embeddings.CharacterEmbeddings.char_rnn.named_parameters", "torch.init.constant_", "torch.init.constant_", "name.startswith", "name.startswith", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__"], ["def", "__init__", "(", "self", ",", "path_to_char_dict", ":", "str", "=", "None", ",", "char_embedding_dim", ":", "int", "=", "25", ",", "hidden_size_char", ":", "int", "=", "25", ")", "->", "None", ":", "\n", "        ", "\"\"\"Uses the default character dictionary if none provided.\"\"\"", "\n", "super", "(", "CharacterEmbeddings", ",", "self", ")", ".", "__init__", "(", "path_to_char_dict", "=", "path_to_char_dict", ",", "\n", "char_embedding_dim", "=", "char_embedding_dim", ",", "\n", "hidden_size_char", "=", "hidden_size_char", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "char_embedding", ".", "weight", ",", "0.", ")", "\n", "for", "name", ",", "parameter", "in", "self", ".", "char_rnn", ".", "named_parameters", "(", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "parameter", ",", "0.", ")", "\n", "if", "name", ".", "startswith", "(", "'weight_ih'", ")", ":", "\n", "                ", "if", "name", "==", "'weight_ih_l0'", "or", "name", "==", "'weight_ih_l0_reverse'", ":", "\n", "                    ", "bound", "=", "(", "6.", "/", "(", "self", ".", "char_rnn", ".", "input_size", "+", "self", ".", "char_rnn", ".", "hidden_size", ")", ")", "**", "0.5", "\n", "", "else", ":", "\n", "                    ", "bound", "=", "(", "6.", "/", "(", "(", "2", "*", "self", ".", "char_rnn", ".", "hidden_size", ")", "+", "self", ".", "char_rnn", ".", "hidden_size", ")", ")", "**", "0.5", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "parameter", ",", "-", "bound", ",", "bound", ")", "\n", "parameter", ".", "data", "[", ":", "2", "*", "self", ".", "char_rnn", ".", "hidden_size", ",", ":", "]", "=", "0.", "\n", "parameter", ".", "data", "[", "3", "*", "self", ".", "char_rnn", ".", "hidden_size", ":", ",", ":", "]", "=", "0.", "\n", "", "if", "name", ".", "startswith", "(", "'bias_hh'", ")", ":", "\n", "                ", "parameter", ".", "data", "[", "self", ".", "char_rnn", ".", "hidden_size", ":", "2", "*", "self", ".", "char_rnn", ".", "hidden_size", "]", "=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.BertEmbeddings.__init__": [[86, 118], ["super().__init__", "module.dropout.VarDropout4Bert", "range", "embeddings.BertEmbeddings.model.to", "len", "module.dropout.VarDropout4Bert", "module.dropout.VarDropout4Bert", "embeddings.BertEmbeddings.model.named_parameters"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to"], ["    ", "def", "__init__", "(", "self", ",", "bert_model_or_path", ":", "str", "=", "\"bert-base-uncased\"", ",", "layers", ":", "str", "=", "\"-1,-2,-3,-4\"", ",", "\n", "pooling_operation", ":", "str", "=", "\"first\"", ",", "fine_tune", ":", "bool", "=", "False", ",", "use_scalar_mix", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Bidirectional transformer embeddings of words, as proposed in Devlin et al., 2018.\n        :param bert_model_or_path: name of BERT model ('') or directory path containing custom model, configuration file\n        and vocab file (names of three files should be - config.json, pytorch_model.bin/model.chkpt, vocab.txt)\n        :param layers: string indicating which layers to take for embedding\n        :param pooling_operation: how to get from token piece embeddings to token embedding. Either pool them and take\n        the average ('mean') or use first word piece embedding as token embedding ('first')\n        \"\"\"", "\n", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", "bert_model_or_path", "=", "bert_model_or_path", ",", "layers", "=", "layers", ",", "\n", "pooling_operation", "=", "pooling_operation", ",", "use_scalar_mix", "=", "use_scalar_mix", ")", "\n", "\n", "self", ".", "fine_tune", "=", "fine_tune", "\n", "self", ".", "static_embeddings", "=", "False", "\n", "\n", "self", ".", "model", ".", "embeddings", ".", "dropout", "=", "VarDropout4Bert", "(", "self", ".", "model", ".", "embeddings", ".", "dropout", ".", "p", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "self", ".", "model", ".", "encoder", ".", "layer", ")", ")", ":", "\n", "            ", "self", ".", "model", ".", "encoder", ".", "layer", "[", "l", "]", ".", "attention", ".", "output", ".", "dropout", "=", "VarDropout4Bert", "(", "self", ".", "model", ".", "encoder", ".", "layer", "[", "l", "]", ".", "attention", ".", "output", ".", "dropout", ".", "p", ")", "\n", "self", ".", "model", ".", "encoder", ".", "layer", "[", "l", "]", ".", "output", ".", "dropout", "=", "VarDropout4Bert", "(", "self", ".", "model", ".", "encoder", ".", "layer", "[", "l", "]", ".", "output", ".", "dropout", ".", "p", ")", "\n", "\n", "", "if", "fine_tune", ":", "\n", "            ", "self", ".", "model", ".", "embeddings", ".", "word_embeddings", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "model", ".", "embeddings", ".", "position_embeddings", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "model", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "            ", "for", "name", ",", "parameter", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "parameter", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "model", ".", "to", "(", "flair", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.BertEmbeddings._add_embeddings_internal": [[119, 197], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "len", "embeddings.BertEmbeddings._convert_sentences_to_features", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "enumerate", "max", "embeddings.BertEmbeddings.model", "enumerate", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "subtoken_embeddings.append", "embeddings.BertEmbeddings.tokenizer.tokenize", "all_layers.append", "flair.embeddings.ScalarMix", "flair.embeddings.ScalarMix", "flair.embeddings.ScalarMix", "flair.embeddings.ScalarMix", "flair.embeddings.ScalarMix.", "flair.embeddings.ScalarMix.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "token.set_embedding", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "token.set_embedding", "sentence.to_tokenized_string", "embedding.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "int"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.None.parse_ace2004.Tokenizer.tokenize"], ["", "def", "_add_embeddings_internal", "(", "self", ",", "sentences", ":", "List", "[", "Sentence", "]", ")", "->", "List", "[", "Sentence", "]", ":", "\n", "        ", "\"\"\"Add embeddings to all words in a list of sentences. If embeddings are already added,\n        updates only if embeddings are non-static.\"\"\"", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "self", ".", "fine_tune", "and", "torch", ".", "is_grad_enabled", "(", ")", ")", ":", "\n", "\n", "# first, find longest sentence in batch", "\n", "            ", "longest_sentence_in_batch", "=", "len", "(", "\n", "max", "(", "\n", "[", "\n", "self", ".", "tokenizer", ".", "tokenize", "(", "sentence", ".", "to_tokenized_string", "(", ")", ")", "\n", "for", "sentence", "in", "sentences", "\n", "]", ",", "\n", "key", "=", "len", ",", "\n", ")", "\n", ")", "\n", "\n", "# prepare id maps for BERT model", "\n", "features", "=", "self", ".", "_convert_sentences_to_features", "(", "\n", "sentences", ",", "longest_sentence_in_batch", "\n", ")", "\n", "all_input_ids", "=", "torch", ".", "LongTensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "features", "]", ")", ".", "to", "(", "\n", "flair", ".", "device", "\n", ")", "\n", "all_input_masks", "=", "torch", ".", "LongTensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "features", "]", ")", ".", "to", "(", "\n", "flair", ".", "device", "\n", ")", "\n", "\n", "# put encoded batch through BERT model to get all hidden states of all encoder layers", "\n", "all_encoder_layers", "=", "self", ".", "model", "(", "all_input_ids", ",", "attention_mask", "=", "all_input_masks", ")", "[", "\n", "-", "1", "\n", "]", "\n", "\n", "for", "sentence_index", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "\n", "                ", "feature", "=", "features", "[", "sentence_index", "]", "\n", "\n", "# get aggregated embeddings for each BERT-subtoken in sentence", "\n", "subtoken_embeddings", "=", "[", "]", "\n", "for", "token_index", ",", "_", "in", "enumerate", "(", "feature", ".", "tokens", ")", ":", "\n", "                    ", "all_layers", "=", "[", "]", "\n", "for", "layer_index", "in", "self", ".", "layer_indexes", ":", "\n", "                        ", "layer_output", "=", "all_encoder_layers", "[", "int", "(", "layer_index", ")", "]", "[", "\n", "sentence_index", "\n", "]", "\n", "all_layers", ".", "append", "(", "layer_output", "[", "token_index", "]", ")", "\n", "\n", "", "if", "self", ".", "use_scalar_mix", ":", "\n", "                        ", "sm", "=", "flair", ".", "embeddings", ".", "ScalarMix", "(", "mixture_size", "=", "len", "(", "all_layers", ")", ")", "\n", "sm_embeddings", "=", "sm", "(", "all_layers", ")", "\n", "all_layers", "=", "[", "sm_embeddings", "]", "\n", "\n", "", "subtoken_embeddings", ".", "append", "(", "torch", ".", "cat", "(", "all_layers", ")", ")", "\n", "\n", "# get the current sentence object", "\n", "", "token_idx", "=", "0", "\n", "for", "token", "in", "sentence", ":", "\n", "# add concatenated embedding to sentence", "\n", "                    ", "token_idx", "+=", "1", "\n", "\n", "if", "self", ".", "pooling_operation", "==", "\"first\"", ":", "\n", "# use first subword embedding if pooling operation is 'first'", "\n", "                        ", "token", ".", "set_embedding", "(", "self", ".", "name", ",", "subtoken_embeddings", "[", "token_idx", "]", ")", "\n", "", "else", ":", "\n", "# otherwise, do a mean over all subwords in token", "\n", "                        ", "embeddings", "=", "subtoken_embeddings", "[", "\n", "token_idx", ":", "token_idx", "\n", "+", "feature", ".", "token_subtoken_count", "[", "token", ".", "idx", "]", "\n", "]", "\n", "embeddings", "=", "[", "\n", "embedding", ".", "unsqueeze", "(", "0", ")", "for", "embedding", "in", "embeddings", "\n", "]", "\n", "mean", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "embeddings", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "token", ".", "set_embedding", "(", "self", ".", "name", ",", "mean", ")", "\n", "\n", "", "token_idx", "+=", "feature", ".", "token_subtoken_count", "[", "token", ".", "idx", "]", "-", "1", "\n", "\n", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.BertEmbeddings.embedding_length": [[198, 203], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "embedding_length", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Returns the length of the embedding vector.\"\"\"", "\n", "return", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "embedding_length", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.FlairEmbeddings.__init__": [[208, 232], ["super().__init__", "module.dropout.VarDropout4Flair", "embeddings.FlairEmbeddings.lm.to", "embeddings.FlairEmbeddings.lm.named_parameters"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to"], ["def", "__init__", "(", "self", ",", "model", ":", "str", ",", "fine_tune", ":", "bool", "=", "False", ",", "chars_per_chunk", ":", "int", "=", "512", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        initializes contextual string embeddings using a character-level language model.\n        :param model: model string, one of 'news-forward', 'news-backward', 'news-forward-fast', 'news-backward-fast',\n                'mix-forward', 'mix-backward', 'german-forward', 'german-backward', 'polish-backward', 'polish-forward'\n                depending on which character language model is desired.\n        :param fine_tune: if set to True, the gradient will propagate into the language model. This dramatically slows\n                down training and often leads to overfitting, so use with caution.\n        :param  chars_per_chunk: max number of chars per rnn pass to control speed/memory tradeoff. Higher means faster\n                but requires ore memory. Lower means slower but less memory.\n        \"\"\"", "\n", "super", "(", "FlairEmbeddings", ",", "self", ")", ".", "__init__", "(", "model", "=", "model", ",", "fine_tune", "=", "fine_tune", ",", "chars_per_chunk", "=", "chars_per_chunk", ")", "\n", "\n", "self", ".", "static_embeddings", "=", "False", "\n", "\n", "self", ".", "lm", ".", "drop", "=", "VarDropout4Flair", "(", "self", ".", "lm", ".", "drop", ".", "p", ")", "\n", "\n", "if", "fine_tune", ":", "\n", "            ", "self", ".", "lm", ".", "encoder", ".", "weight", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "            ", "for", "name", ",", "parameter", "in", "self", ".", "lm", ".", "named_parameters", "(", ")", ":", "\n", "                ", "parameter", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "lm", ".", "to", "(", "flair", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.FlairEmbeddings.train": [[233, 242], ["super().train"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.FlairEmbeddings.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "\n", "# make compatible with serialized models (TODO: remove)", "\n", "        ", "if", "\"fine_tune\"", "not", "in", "self", ".", "__dict__", ":", "\n", "            ", "self", ".", "fine_tune", "=", "False", "\n", "", "if", "\"chars_per_chunk\"", "not", "in", "self", ".", "__dict__", ":", "\n", "            ", "self", ".", "chars_per_chunk", "=", "512", "\n", "\n", "", "return", "super", "(", "flair", ".", "embeddings", ".", "FlairEmbeddings", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.embeddings.FlairEmbeddings._add_embeddings_internal": [[243, 294], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "embeddings.FlairEmbeddings.lm.get_representation", "enumerate", "sentence.to_tokenized_string", "all_hidden_states_in_lm.detach.detach.detach", "sentence.to_tokenized_string", "len", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "len", "len", "len", "len", "token.set_embedding", "embedding.clone.clone.clone"], "methods", ["None"], ["", "def", "_add_embeddings_internal", "(", "self", ",", "sentences", ":", "List", "[", "Sentence", "]", ")", "->", "List", "[", "Sentence", "]", ":", "\n", "\n", "        ", "with", "torch", ".", "set_grad_enabled", "(", "self", ".", "fine_tune", "and", "torch", ".", "is_grad_enabled", "(", ")", ")", ":", "\n", "\n", "# if this is not possible, use LM to generate embedding. First, get text sentences", "\n", "            ", "text_sentences", "=", "[", "sentence", ".", "to_tokenized_string", "(", ")", "for", "sentence", "in", "sentences", "]", "\n", "\n", "start_marker", "=", "\"\\n\"", "\n", "end_marker", "=", "\" \"", "\n", "\n", "# get hidden states from language model", "\n", "all_hidden_states_in_lm", "=", "self", ".", "lm", ".", "get_representation", "(", "\n", "text_sentences", ",", "start_marker", ",", "end_marker", ",", "self", ".", "chars_per_chunk", "\n", ")", "\n", "\n", "if", "not", "self", ".", "fine_tune", ":", "\n", "                ", "all_hidden_states_in_lm", "=", "all_hidden_states_in_lm", ".", "detach", "(", ")", "\n", "\n", "# take first or last hidden states from language model as word representation", "\n", "", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "                ", "sentence_text", "=", "sentence", ".", "to_tokenized_string", "(", ")", "\n", "\n", "offset_forward", ":", "int", "=", "len", "(", "start_marker", ")", "\n", "offset_backward", ":", "int", "=", "len", "(", "sentence_text", ")", "+", "len", "(", "start_marker", ")", "\n", "\n", "for", "token", "in", "sentence", ".", "tokens", ":", "\n", "\n", "                    ", "offset_forward", "+=", "len", "(", "token", ".", "text", ")", "\n", "\n", "if", "self", ".", "is_forward_lm", ":", "\n", "                        ", "offset", "=", "offset_forward", "\n", "", "else", ":", "\n", "                        ", "offset", "=", "offset_backward", "\n", "\n", "", "embedding", "=", "all_hidden_states_in_lm", "[", "offset", ",", "i", ",", ":", "]", "\n", "\n", "# if self.tokenized_lm or token.whitespace_after:", "\n", "offset_forward", "+=", "1", "\n", "offset_backward", "-=", "1", "\n", "\n", "offset_backward", "-=", "len", "(", "token", ".", "text", ")", "\n", "\n", "# only clone if optimization mode is 'gpu'", "\n", "if", "flair", ".", "embedding_storage_mode", "==", "\"gpu\"", ":", "\n", "                        ", "embedding", "=", "embedding", ".", "clone", "(", ")", "\n", "\n", "", "token", ".", "set_embedding", "(", "self", ".", "name", ",", "embedding", ")", "\n", "\n", "", "", "del", "all_hidden_states_in_lm", "\n", "\n", "", "return", "sentences", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.dropout.VarDropout4Bert.__init__": [[46, 53], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__"], ["def", "__init__", "(", "self", ",", "p", ":", "float", "=", "0.5", ",", "inplace", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "VarDropout4Bert", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "p", "<", "0", "or", "p", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"dropout probability has to be between 0 and 1, \"", "\n", "\"but got {}\"", ".", "format", "(", "p", ")", ")", "\n", "", "self", ".", "p", "=", "p", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.dropout.VarDropout4Bert.extra_repr": [[54, 57], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "inplace_str", "=", "', inplace'", "if", "self", ".", "inplace", "else", "''", "\n", "return", "'p={}{}'", ".", "format", "(", "self", ".", "p", ",", "inplace_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.dropout.VarDropout4Bert.forward": [[58, 60], ["torch.nn.functional.dropout2d().transpose", "torch.nn.functional.dropout2d", "input.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "f", ".", "dropout2d", "(", "input", ".", "transpose", "(", "1", ",", "2", ")", ",", "self", ".", "p", ",", "self", ".", "training", ",", "self", ".", "inplace", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.dropout.VarDropout4Flair.__init__": [[102, 109], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__"], ["def", "__init__", "(", "self", ",", "p", ":", "float", "=", "0.5", ",", "inplace", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "VarDropout4Flair", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "p", "<", "0", "or", "p", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"dropout probability has to be between 0 and 1, \"", "\n", "\"but got {}\"", ".", "format", "(", "p", ")", ")", "\n", "", "self", ".", "p", "=", "p", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.dropout.VarDropout4Flair.extra_repr": [[110, 113], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "inplace_str", "=", "', inplace'", "if", "self", ".", "inplace", "else", "''", "\n", "return", "'p={}{}'", ".", "format", "(", "self", ".", "p", ",", "inplace_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.dropout.VarDropout4Flair.forward": [[114, 116], ["torch.nn.functional.dropout2d().transpose().contiguous", "torch.nn.functional.dropout2d().transpose", "torch.nn.functional.dropout2d", "input.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "f", ".", "dropout2d", "(", "input", ".", "transpose", "(", "0", ",", "2", ")", ",", "self", ".", "p", ",", "self", ".", "training", ",", "self", ".", "inplace", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.var_lstm_cell": [[10, 31], ["torch.add", "torch.add", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.add", "torch.add", "torch.mul", "torch.mul", "input.expand", "hx.expand", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.tanh", "torch.tanh", "input.unsqueeze", "hx.unsqueeze", "b_ih.unsqueeze", "b_hh.unsqueeze", "input.size", "hx.size"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["\n", "\n", "def", "default_initializer", "(", "hidden_size", ":", "int", ")", "->", "Callable", "[", "[", "Tensor", "]", ",", "None", "]", ":", "\n", "    ", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "hidden_size", ")", "\n", "\n", "def", "forward", "(", "tensor", ":", "Tensor", ")", "->", "None", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "tensor", ",", "-", "stdv", ",", "stdv", ")", "\n", "\n", "", "return", "forward", "\n", "\n", "\n", "", "class", "VarMaskedFastLSTM", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.var_masked_recurrent": [[33, 60], ["torch.cat().view", "torch.cat().view", "range", "range", "cell", "torch.cat().view.append", "torch.cat().view.reverse", "input.size", "isinstance", "torch.cat", "torch.cat", "input.size", "input.size", "mask[].data.min", "isinstance", "tuple", "output[].size"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], []], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.stacked_rnn": [[62, 97], ["len", "range", "len", "list", "enumerate", "torch.cat", "torch.cat", "zip", "torch.cat().view", "torch.cat().view", "zip", "inner", "torch.cat().view.append", "all_output.append", "tuple", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat.dim", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tuple", "next_hidden[].size", "next_h[].size", "next_c[].size"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["\n", "\n", "def", "__init__", "(", "self", ",", "input_size", ":", "int", ",", "hidden_size", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "1", ",", "bias", ":", "bool", "=", "True", ",", "batch_first", ":", "bool", "=", "False", ",", "\n", "dropout", ":", "Tuple", "[", "float", ",", "float", "]", "=", "(", "0.", ",", "0.", ")", ",", "bidirectional", ":", "bool", "=", "False", ",", "\n", "initializer", ":", "Callable", "[", "[", "Tensor", "]", ",", "None", "]", "=", "None", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", "VarMaskedFastLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", ":", "int", "=", "input_size", "\n", "self", ".", "hidden_size", ":", "int", "=", "hidden_size", "\n", "self", ".", "num_layers", ":", "int", "=", "num_layers", "\n", "self", ".", "bias", ":", "bool", "=", "bias", "\n", "self", ".", "batch_first", ":", "bool", "=", "batch_first", "\n", "self", ".", "bidirectional", ":", "bool", "=", "bidirectional", "\n", "num_directions", "=", "2", "if", "bidirectional", "else", "1", "\n", "\n", "self", ".", "all_cells", ":", "List", "[", "nn", ".", "Module", "]", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "for", "direction", "in", "range", "(", "num_directions", ")", ":", "\n", "                ", "layer_input_size", "=", "input_size", "if", "layer", "==", "0", "else", "hidden_size", "*", "num_directions", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.autograd_var_masked_rnn": [[99, 127], ["variational_rnn.stacked_rnn", "stacked_rnn.", "rec_factory", "rec_factory", "rec_factory", "input.transpose.transpose", "output.transpose.transpose", "mask.transpose.transpose"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.stacked_rnn"], ["self", ".", "all_cells", ".", "append", "(", "cell", ")", "\n", "self", ".", "add_module", "(", "'cell%d'", "%", "(", "layer", "*", "num_directions", "+", "direction", ")", ",", "cell", ")", "\n", "\n", "", "", "", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "cell", ":", "VarLSTMCell", "\n", "for", "cell", "in", "self", ".", "all_cells", ":", "\n", "            ", "cell", ".", "reset_parameters", "(", ")", "\n", "\n", "", "", "def", "reset_noise", "(", "self", ",", "batch_size", ":", "int", ")", "->", "None", ":", "\n", "        ", "cell", ":", "VarLSTMCell", "\n", "for", "cell", "in", "self", ".", "all_cells", ":", "\n", "            ", "cell", ".", "reset_noise", "(", "batch_size", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ",", "mask", ":", "Tensor", "=", "None", ",", "hx", ":", "Tuple", "[", "Tensor", ",", "Tensor", "]", "=", "None", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "if", "self", ".", "batch_first", "else", "input", ".", "size", "(", "1", ")", "\n", "if", "hx", "is", "None", ":", "\n", "            ", "num_directions", "=", "2", "if", "self", ".", "bidirectional", "else", "1", "\n", "hx", "=", "input", ".", "new_zeros", "(", "(", "self", ".", "num_layers", "*", "num_directions", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "hx", "=", "(", "hx", ",", "hx", ")", "\n", "\n", "", "func", "=", "rnn_f", ".", "autograd_var_masked_rnn", "(", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "batch_first", "=", "self", ".", "batch_first", ",", "\n", "bidirectional", "=", "self", ".", "bidirectional", ",", "\n", "lstm", "=", "True", ")", "\n", "\n", "self", ".", "reset_noise", "(", "batch_size", ")", "\n", "\n", "output", ",", "hidden", "=", "func", "(", "input", ",", "self", ".", "all_cells", ",", "hx", ",", "None", "if", "mask", "is", "None", "else", "mask", ".", "view", "(", "mask", ".", "size", "(", ")", "+", "(", "1", ",", ")", ")", ")", "\n", "return", "output", ",", "hidden", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.var_masked_step": [[129, 148], ["cell", "isinstance", "isinstance", "mask.data.min"], "function", ["None"], ["", "def", "step", "(", "self", ",", "input", ":", "Tensor", ",", "hx", ":", "Tuple", "[", "Tensor", ",", "Tensor", "]", "=", "None", ",", "mask", ":", "Tensor", "=", "None", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        execute one step forward (only for one-directional RNN).\n        Args:\n            input (batch, input_size): input tensor of this step.\n            hx (num_layers, batch, hidden_size): the hidden state of last step.\n            mask (batch): the mask tensor of this step.\n\n        Returns:\n            output (batch, hidden_size): tensor containing the output of this step from the last layer of RNN.\n            hn (num_layers, batch, hidden_size): tensor containing the hidden state of this step\n        \"\"\"", "\n", "assert", "not", "self", ".", "bidirectional", ",", "\"step only cannot be applied to bidirectional RNN.\"", "\n", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "if", "hx", "is", "None", ":", "\n", "            ", "hx", "=", "input", ".", "new_zeros", "(", "(", "self", ".", "num_layers", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "hx", "=", "(", "hx", ",", "hx", ")", "\n", "\n", "", "func", "=", "rnn_f", ".", "autograd_var_masked_step", "(", "num_layers", "=", "self", ".", "num_layers", ",", "lstm", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.stacked_step": [[150, 180], ["range", "len", "list", "layer", "torch.cat().view.append", "zip", "torch.cat().view", "torch.cat().view", "zip", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tuple", "next_hidden[].size", "next_h[].size", "next_c[].size"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["return", "output", ",", "hidden", "\n", "\n", "\n", "", "", "class", "VarLSTMCell", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.autograd_var_masked_step": [[182, 194], ["variational_rnn.var_masked_step", "variational_rnn.stacked_step", "stacked_step."], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.var_masked_step", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.function.variational_rnn.stacked_step"], []], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader.__init__": [[19, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "\n", "        ", "self", ".", "label_alphabet", ":", "Optional", "[", "Alphabet", "]", "=", "None", "\n", "\n", "self", ".", "train", ":", "Optional", "[", "List", "[", "SentInst", "]", "]", "=", "None", "\n", "self", ".", "dev", ":", "Optional", "[", "List", "[", "SentInst", "]", "]", "=", "None", "\n", "self", ".", "test", ":", "Optional", "[", "List", "[", "SentInst", "]", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader._read_file": [[27, 73], ["print", "print", "open", "line.strip.strip.strip", "line.strip.strip.split", "next().strip", "sent_list.append", "list", "SentInst", "entities.split.split.split", "SentInst", "next().strip", "next", "item.split", "pointers.split.split.split", "int", "len", "pdb.set_trace", "int", "int", "int", "int", "entity_list.append", "next"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_read_file", "(", "filename", ":", "str", ",", "mode", ":", "str", "=", "'train'", ")", "->", "List", "[", "SentInst", "]", ":", "\n", "        ", "sent_list", "=", "[", "]", "\n", "max_len", "=", "0", "\n", "num_thresh", "=", "0", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "\"\"", ":", "# last few blank lines", "\n", "                    ", "break", "\n", "\n", "", "raw_tokens", "=", "line", ".", "split", "(", "' '", ")", "\n", "tokens", "=", "raw_tokens", "\n", "chars", "=", "[", "list", "(", "t", ")", "for", "t", "in", "raw_tokens", "]", "\n", "\n", "entities", "=", "next", "(", "f", ")", ".", "strip", "(", ")", "\n", "if", "entities", "==", "\"\"", ":", "# no entities", "\n", "                    ", "sent_inst", "=", "SentInst", "(", "tokens", ",", "chars", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "                    ", "entity_list", "=", "[", "]", "\n", "entities", "=", "entities", ".", "split", "(", "\"|\"", ")", "\n", "for", "item", "in", "entities", ":", "\n", "                        ", "pointers", ",", "label", "=", "item", ".", "split", "(", ")", "\n", "pointers", "=", "pointers", ".", "split", "(", "\",\"", ")", "\n", "if", "int", "(", "pointers", "[", "1", "]", ")", ">", "len", "(", "tokens", ")", ":", "\n", "                            ", "pdb", ".", "set_trace", "(", ")", "\n", "", "span_len", "=", "int", "(", "pointers", "[", "1", "]", ")", "-", "int", "(", "pointers", "[", "0", "]", ")", "\n", "assert", "(", "span_len", ">", "0", ")", "\n", "if", "span_len", ">", "max_len", ":", "\n", "                            ", "max_len", "=", "span_len", "\n", "", "if", "span_len", ">", "6", ":", "\n", "                            ", "num_thresh", "+=", "1", "\n", "\n", "", "new_entity", "=", "(", "int", "(", "pointers", "[", "0", "]", ")", ",", "int", "(", "pointers", "[", "1", "]", ")", ",", "label", ")", "\n", "# may be duplicate entities in some datasets", "\n", "if", "(", "mode", "==", "'train'", "and", "new_entity", "not", "in", "entity_list", ")", "or", "(", "mode", "!=", "'train'", ")", ":", "\n", "                            ", "entity_list", ".", "append", "(", "new_entity", ")", "\n", "\n", "# assert len(entity_list) == len(set(entity_list)) # check duplicate", "\n", "", "", "sent_inst", "=", "SentInst", "(", "tokens", ",", "chars", ",", "entity_list", ")", "\n", "", "assert", "next", "(", "f", ")", ".", "strip", "(", ")", "==", "\"\"", "# separating line", "\n", "\n", "sent_list", ".", "append", "(", "sent_inst", ")", "\n", "", "", "print", "(", "\"Max length: {}\"", ".", "format", "(", "max_len", ")", ")", "\n", "print", "(", "\"Threshold 6: {}\"", ".", "format", "(", "num_thresh", ")", ")", "\n", "return", "sent_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader._gen_dic": [[74, 86], ["set", "util.utils.Alphabet", "print", "len", "set.add"], "methods", ["None"], ["", "def", "_gen_dic", "(", "self", ")", "->", "None", ":", "\n", "        ", "label_set", "=", "set", "(", ")", "\n", "\n", "for", "sent_list", "in", "[", "self", ".", "train", ",", "self", ".", "dev", ",", "self", ".", "test", "]", ":", "\n", "            ", "num_mention", "=", "0", "\n", "for", "sentInst", "in", "sent_list", ":", "\n", "                ", "for", "entity", "in", "sentInst", ".", "entities", ":", "\n", "                    ", "label_set", ".", "add", "(", "entity", "[", "2", "]", ")", "\n", "", "num_mention", "+=", "len", "(", "sentInst", ".", "entities", ")", "\n", "", "print", "(", "\"# mentions: {}\"", ".", "format", "(", "num_mention", ")", ")", "\n", "\n", "", "self", ".", "label_alphabet", "=", "Alphabet", "(", "label_set", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader._pad_batches": [[87, 110], ["len", "len", "range", "mask_batches.append", "len", "mask_batch.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_pad_batches", "(", "token_batches", ":", "List", "[", "List", "[", "List", "[", "str", "]", "]", "]", ")", "->", "List", "[", "List", "[", "List", "[", "bool", "]", "]", "]", ":", "\n", "\n", "        ", "mask_batches", "=", "[", "]", "\n", "\n", "for", "token_batch", "in", "token_batches", ":", "\n", "\n", "            ", "batch_len", "=", "len", "(", "token_batch", ")", "\n", "max_sent_len", "=", "len", "(", "token_batch", "[", "0", "]", ")", "\n", "\n", "mask_batch", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_len", ")", ":", "\n", "\n", "                ", "sent_len", "=", "len", "(", "token_batch", "[", "i", "]", ")", "\n", "\n", "mask", "=", "[", "True", "]", "*", "sent_len", "+", "[", "False", "]", "*", "(", "max_sent_len", "-", "sent_len", ")", "\n", "\n", "mask_batch", ".", "append", "(", "mask", ")", "\n", "\n", "", "mask_batches", ".", "append", "(", "mask_batch", ")", "\n", "\n", "", "return", "mask_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader.to_batch": [[111, 146], ["tuple", "collections.defaultdict", "collections.defaultdict", "sorted", "reader.Reader._pad_batches", "ret_list.append", "token_dic[].append", "label_dic[].append", "collections.defaultdict.keys", "token_batches.extend", "label_batches.extend", "this_token_batches.append", "this_label_batches.append", "range", "range", "reader.Reader.label_alphabet.get_index", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader._pad_batches", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.get_index"], ["", "def", "to_batch", "(", "self", ",", "batch_size", ":", "int", ")", "->", "Tuple", ":", "\n", "        ", "ret_list", "=", "[", "]", "\n", "\n", "for", "sent_list", "in", "[", "self", ".", "train", ",", "self", ".", "dev", ",", "self", ".", "test", "]", ":", "\n", "            ", "token_dic", "=", "defaultdict", "(", "list", ")", "\n", "label_dic", "=", "defaultdict", "(", "list", ")", "\n", "\n", "this_token_batches", "=", "[", "]", "\n", "this_label_batches", "=", "[", "]", "\n", "\n", "for", "sentInst", "in", "sent_list", ":", "\n", "\n", "                ", "token_vec", "=", "[", "t", "for", "t", "in", "sentInst", ".", "tokens", "]", "\n", "\n", "label_list", "=", "[", "(", "u", "[", "0", "]", ",", "u", "[", "1", "]", ",", "self", ".", "label_alphabet", ".", "get_index", "(", "u", "[", "2", "]", ")", ")", "for", "u", "in", "sentInst", ".", "entities", "]", "\n", "\n", "token_dic", "[", "len", "(", "sentInst", ".", "tokens", ")", "]", ".", "append", "(", "token_vec", ")", "\n", "label_dic", "[", "len", "(", "sentInst", ".", "tokens", ")", "]", ".", "append", "(", "label_list", ")", "\n", "\n", "", "token_batches", "=", "[", "]", "\n", "label_batches", "=", "[", "]", "\n", "for", "length", "in", "sorted", "(", "token_dic", ".", "keys", "(", ")", ",", "reverse", "=", "True", ")", ":", "\n", "                ", "token_batches", ".", "extend", "(", "token_dic", "[", "length", "]", ")", "\n", "label_batches", ".", "extend", "(", "label_dic", "[", "length", "]", ")", "\n", "\n", "", "[", "this_token_batches", ".", "append", "(", "token_batches", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "token_batches", ")", ",", "batch_size", ")", "]", "\n", "[", "this_label_batches", ".", "append", "(", "label_batches", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "label_batches", ")", ",", "batch_size", ")", "]", "\n", "\n", "this_mask_batches", "=", "self", ".", "_pad_batches", "(", "this_token_batches", ")", "\n", "\n", "ret_list", ".", "append", "(", "(", "this_token_batches", ",", "this_label_batches", ",", "this_mask_batches", ")", ")", "\n", "\n", "", "return", "tuple", "(", "ret_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader.read_all_data": [[147, 152], ["reader.Reader._read_file", "reader.Reader._read_file", "reader.Reader._read_file", "reader.Reader._gen_dic"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader._read_file", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader._read_file", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader._read_file", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader._gen_dic"], ["", "def", "read_all_data", "(", "self", ",", "file_path", ":", "str", ",", "train_file", ":", "str", ",", "dev_file", ":", "str", ",", "test_file", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "train", "=", "self", ".", "_read_file", "(", "file_path", "+", "train_file", ")", "\n", "self", ".", "dev", "=", "self", ".", "_read_file", "(", "file_path", "+", "dev_file", ",", "mode", "=", "'dev'", ")", "\n", "self", ".", "test", "=", "self", ".", "_read_file", "(", "file_path", "+", "test_file", ",", "mode", "=", "'test'", ")", "\n", "self", ".", "_gen_dic", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader.gen_vectors_google_news_word2vec": [[153, 156], ["shutil.copyfile"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "gen_vectors_google_news_word2vec", "(", "embed_path", ":", "str", ")", "->", "None", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "GOOGLE_NEWS_WORD2VEC_FILE", ",", "embed_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader.gen_vectors_pubmed_word2vec": [[157, 160], ["shutil.copyfile"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "gen_vectors_pubmed_word2vec", "(", "embed_path", ":", "str", ")", "->", "None", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "PUBMED_WORD2VEC_FILE", ",", "embed_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.reader.reader.Reader.debug_single_sample": [[161, 164], ["print", "reader.Reader.label_alphabet.get_instance"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.get_instance"], ["", "def", "debug_single_sample", "(", "self", ",", "label_list", ":", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", ")", "->", "None", ":", "\n", "        ", "for", "label", "in", "label_list", ":", "\n", "            ", "print", "(", "label", "[", "0", "]", ",", "label", "[", "1", "]", ",", "self", ".", "label_alphabet", ".", "get_instance", "(", "label", "[", "2", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.NestedSequenceLabel.__init__": [[18, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start", ":", "int", ",", "end", ":", "int", ",", "label", ":", "Tensor", ",", "children", ":", "List", ")", "->", "None", ":", "\n", "        ", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "children", "=", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.__init__": [[26, 64], ["torch.Module.__init__", "flair.embeddings.StackedEmbeddings", "torch.Dropout2d", "torch.Dropout2d", "module.variational_rnn.VarMaskedFastLSTM", "sequence_labeling.BiRecurrentConvCRF4NestedNER.reset_parameters", "range", "sequence_labeling.BiRecurrentConvCRF4NestedNER.cpu", "module.crf.ChainCRF4NestedNER", "sequence_labeling.BiRecurrentConvCRF4NestedNER.all_crfs.append", "sequence_labeling.BiRecurrentConvCRF4NestedNER.add_module", "module.embeddings.WordEmbeddings", "module.embeddings.CharacterEmbeddings", "module.embeddings.BertEmbeddings", "module.embeddings.FlairEmbeddings", "module.embeddings.FlairEmbeddings"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.reset_parameters", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.cpu"], ["    ", "def", "__init__", "(", "self", ",", "embed_path", ":", "str", ",", "char_embed", ":", "int", ",", "num_filters", ":", "int", ",", "label_size", ":", "int", ",", "hidden_size", ":", "int", "=", "256", ",", "\n", "layers", ":", "int", "=", "1", ",", "word_dropout", ":", "float", "=", "0.20", ",", "lstm_dropout", ":", "float", "=", "0.50", ",", "fine_tune", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "BiRecurrentConvCRF4NestedNER", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embeddings", ":", "StackedEmbeddings", "=", "StackedEmbeddings", "(", "[", "WordEmbeddings", "(", "embed_path", ",", "word_dropout", "=", "word_dropout", ")", ",", "\n", "CharacterEmbeddings", "(", "char_embedding_dim", "=", "char_embed", ",", "hidden_size_char", "=", "num_filters", ")", ",", "\n", "BertEmbeddings", "(", "\"bert-large-uncased\"", ",", "\n", "layers", "=", "\"-1\"", "if", "fine_tune", "else", "\"-1,-2,-3,-4,-5,-6,-7,-8\"", ",", "\n", "pooling_operation", "=", "\"mean\"", ")", ",", "\n", "FlairEmbeddings", "(", "\"news-forward\"", ")", ",", "\n", "FlairEmbeddings", "(", "\"news-backward\"", ")", "]", ")", "\n", "# standard dropout", "\n", "self", ".", "dropout_out", ":", "nn", ".", "Dropout2d", "=", "nn", ".", "Dropout2d", "(", "p", "=", "lstm_dropout", ")", "\n", "\n", "self", ".", "rnn", ":", "VarMaskedFastLSTM", "=", "VarMaskedFastLSTM", "(", "self", ".", "embeddings", ".", "embedding_length", ",", "hidden_size", ",", "\n", "num_layers", "=", "layers", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ",", "\n", "dropout", "=", "(", "lstm_dropout", ",", "lstm_dropout", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "all_crfs", ":", "List", "[", "ChainCRF4NestedNER", "]", "=", "[", "]", "\n", "\n", "for", "label", "in", "range", "(", "label_size", ")", ":", "\n", "            ", "crf", "=", "ChainCRF4NestedNER", "(", "hidden_size", "*", "2", ",", "1", ")", "\n", "self", ".", "all_crfs", ".", "append", "(", "crf", ")", "\n", "self", ".", "add_module", "(", "'crf%d'", "%", "label", ",", "crf", ")", "\n", "\n", "", "self", ".", "b_id", ":", "int", "=", "0", "\n", "self", ".", "i_id", ":", "int", "=", "1", "\n", "self", ".", "e_id", ":", "int", "=", "2", "\n", "self", ".", "s_id", ":", "int", "=", "3", "\n", "self", ".", "o_id", ":", "int", "=", "4", "\n", "self", ".", "eos_id", ":", "int", "=", "5", "\n", "\n", "self", ".", "device", ":", "Optional", "[", "torch", ".", "device", "]", "=", "None", "\n", "self", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.reset_parameters": [[65, 78], ["sequence_labeling.BiRecurrentConvCRF4NestedNER.rnn.named_parameters", "torch.init.constant_", "torch.init.constant_", "name.find", "torch.init.uniform_", "torch.init.uniform_", "name.find", "name.startswith", "name.startswith"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "for", "name", ",", "parameter", "in", "self", ".", "rnn", ".", "named_parameters", "(", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "parameter", ",", "0.", ")", "\n", "if", "name", ".", "find", "(", "'weight_ih'", ")", ">", "0", ":", "\n", "                ", "if", "name", ".", "startswith", "(", "'cell0.weight_ih'", ")", "or", "name", ".", "startswith", "(", "'cell1.weight_ih'", ")", ":", "\n", "                    ", "bound", "=", "(", "6.", "/", "(", "self", ".", "rnn", ".", "input_size", "+", "self", ".", "rnn", ".", "hidden_size", ")", ")", "**", "0.5", "\n", "", "else", ":", "\n", "                    ", "bound", "=", "(", "6.", "/", "(", "(", "2", "*", "self", ".", "rnn", ".", "hidden_size", ")", "+", "self", ".", "rnn", ".", "hidden_size", ")", ")", "**", "0.5", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "parameter", ",", "-", "bound", ",", "bound", ")", "\n", "parameter", ".", "data", "[", ":", "2", ",", ":", ",", ":", "]", "=", "0.", "\n", "parameter", ".", "data", "[", "3", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "", "if", "name", ".", "find", "(", "'bias_hh'", ")", ">", "0", ":", "\n", "                ", "parameter", ".", "data", "[", "1", ",", ":", "]", "=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.cuda": [[79, 85], ["sequence_labeling.BiRecurrentConvCRF4NestedNER.named_children", "torch.device", "torch.device", "torch.device", "torch.device", "isinstance", "module.cuda"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.cuda"], ["", "", "", "def", "cuda", "(", "self", ",", "device", ":", "int", "=", "0", ")", "->", "\"BiRecurrentConvCRF4NestedNER\"", ":", "\n", "        ", "for", "_", ",", "module", "in", "self", ".", "named_children", "(", ")", ":", "# type: str, nn.Module", "\n", "            ", "if", "not", "isinstance", "(", "module", ",", "StackedEmbeddings", ")", ":", "\n", "                ", "module", ".", "cuda", "(", "device", ")", "\n", "", "", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.cpu": [[86, 92], ["sequence_labeling.BiRecurrentConvCRF4NestedNER.named_children", "torch.device", "torch.device", "torch.device", "torch.device", "isinstance", "module.cpu"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.cpu"], ["", "def", "cpu", "(", "self", ")", "->", "\"BiRecurrentConvCRF4NestedNER\"", ":", "\n", "        ", "for", "_", ",", "module", "in", "self", ".", "named_children", "(", ")", ":", "# type: str, nn.Module", "\n", "            ", "if", "not", "isinstance", "(", "module", ",", "StackedEmbeddings", ")", ":", "\n", "                ", "module", ".", "cpu", "(", ")", "\n", "", "", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.to": [[93, 95], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER._get_rnn_output": [[96, 142], ["sequence_labeling.BiRecurrentConvCRF4NestedNER.embeddings.embed", "max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "list", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "sequence_labeling.BiRecurrentConvCRF4NestedNER.rnn", "sequence_labeling.BiRecurrentConvCRF4NestedNER.dropout_out().transpose", "flair.data.Sentence", "sentences.append", "len", "flair.data.Sentence.add_token", "len", "list.append", "token.clear_embeddings", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.device", "torch.device", "torch.device", "torch.device", "input.cpu.cpu.cuda", "input.cpu.cpu.cpu", "sequence_labeling.BiRecurrentConvCRF4NestedNER.dropout_out", "flair.data.Token", "token.get_each_embedding", "sequence_labeling.BiRecurrentConvCRF4NestedNER.transpose", "t.replace"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.cuda", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.cpu"], ["", "def", "_get_rnn_output", "(", "self", ",", "tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "mask", ":", "Tensor", "=", "None", ")", "->", "Tensor", ":", "\n", "\n", "        ", "sentences", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "sentence", "=", "Sentence", "(", ")", "\n", "[", "sentence", ".", "add_token", "(", "Token", "(", "t", ".", "replace", "(", "'\\xa0'", ",", "' '", ")", ")", ")", "for", "t", "in", "token", "]", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "\n", "", "self", ".", "embeddings", ".", "embed", "(", "sentences", ")", "\n", "\n", "lengths", "=", "[", "len", "(", "sentence", ".", "tokens", ")", "for", "sentence", "in", "sentences", "]", "\n", "longest_token_sequence_in_batch", "=", "max", "(", "lengths", ")", "\n", "\n", "pre_allocated_zero_tensor", "=", "torch", ".", "zeros", "(", "self", ".", "embeddings", ".", "embedding_length", "*", "longest_token_sequence_in_batch", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "device", "=", "flair", ".", "device", ")", "\n", "\n", "all_embs", "=", "list", "(", ")", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "all_embs", "+=", "[", "emb", "for", "token", "in", "sentence", ".", "tokens", "for", "emb", "in", "token", ".", "get_each_embedding", "(", ")", "]", "\n", "nb_padding_tokens", "=", "longest_token_sequence_in_batch", "-", "len", "(", "sentence", ")", "\n", "\n", "if", "nb_padding_tokens", ">", "0", ":", "\n", "                ", "t", "=", "pre_allocated_zero_tensor", "[", ":", "self", ".", "embeddings", ".", "embedding_length", "*", "nb_padding_tokens", "]", "\n", "all_embs", ".", "append", "(", "t", ")", "\n", "\n", "", "for", "token", "in", "sentence", ".", "tokens", ":", "\n", "                ", "token", ".", "clear_embeddings", "(", ")", "\n", "\n", "# [batch, length, word_dim]", "\n", "", "", "input", "=", "torch", ".", "cat", "(", "all_embs", ")", ".", "view", "(", "(", "len", "(", "sentences", ")", ",", "longest_token_sequence_in_batch", ",", "self", ".", "embeddings", ".", "embedding_length", ")", ")", "\n", "\n", "if", "self", ".", "device", "!=", "flair", ".", "device", ":", "\n", "            ", "if", "self", ".", "device", "!=", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "input", "=", "input", ".", "cpu", "(", ")", "\n", "\n", "# output from rnn [batch, length, hidden_size]", "\n", "", "", "output", ",", "hn", "=", "self", ".", "rnn", "(", "input", ",", "mask", ")", "\n", "\n", "# apply dropout for the output of rnn", "\n", "# [batch, length, hidden_size] --> [batch, hidden_size, length] --> [batch, length, hidden_size]", "\n", "output", "=", "self", ".", "dropout_out", "(", "output", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.forward": [[143, 180], ["sequence_labeling.BiRecurrentConvCRF4NestedNER._get_rnn_output", "sequence_labeling.BiRecurrentConvCRF4NestedNER.size", "enumerate", "sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "crf.loss", "range", "sum.append", "tuple", "loss_each.append", "sum", "sum", "sequence_labeling.BiRecurrentConvCRF4NestedNER.forward.forward_recursively"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER._get_rnn_output", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.loss"], ["", "def", "forward", "(", "self", ",", "tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "\n", "target", ":", "Union", "[", "List", "[", "List", "[", "NestedSequenceLabel", "]", "]", ",", "List", "[", "NestedSequenceLabel", "]", "]", ",", "mask", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# output from rnn [batch, length, tag_space]", "\n", "        ", "output", "=", "self", ".", "_get_rnn_output", "(", "tokens", ",", "mask", "=", "mask", ")", "\n", "\n", "# [batch, length, num_label, num_label]", "\n", "batch", ",", "length", ",", "_", "=", "output", ".", "size", "(", ")", "\n", "\n", "loss", "=", "[", "]", "\n", "\n", "for", "label", ",", "crf", "in", "enumerate", "(", "self", ".", "all_crfs", ")", ":", "\n", "            ", "target_batch", "=", "torch", ".", "cat", "(", "tuple", "(", "[", "target_each", ".", "label", ".", "unsqueeze", "(", "0", ")", "for", "target_each", "in", "target", "[", "label", "]", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "loss_batch", ",", "energy_batch", "=", "crf", ".", "loss", "(", "output", ",", "target_batch", ",", "mask", "=", "mask", ")", "\n", "\n", "calc_nests_loss", "=", "crf", ".", "nests_loss", "\n", "\n", "def", "forward_recursively", "(", "loss", ":", "Tensor", ",", "energy", ":", "Tensor", ",", "target", ":", "NestedSequenceLabel", ",", "offset", ":", "int", ")", "->", "Tensor", ":", "\n", "                ", "nests_loss_list", "=", "[", "]", "\n", "for", "child", "in", "target", ".", "children", ":", "\n", "                    ", "if", "child", ".", "end", "-", "child", ".", "start", ">", "1", ":", "\n", "                        ", "nests_loss", "=", "calc_nests_loss", "(", "energy", "[", "child", ".", "start", "-", "offset", ":", "child", ".", "end", "-", "offset", ",", ":", ",", ":", "]", ",", "\n", "child", ".", "label", ")", "\n", "nests_loss_list", ".", "append", "(", "forward_recursively", "(", "nests_loss", ",", "\n", "energy", "[", "child", ".", "start", "-", "offset", ":", "child", ".", "end", "-", "offset", ",", ":", ",", ":", "]", ",", "\n", "child", ",", "child", ".", "start", ")", ")", "\n", "", "", "return", "sum", "(", "nests_loss_list", ")", "+", "loss", "\n", "\n", "", "loss_each", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "                ", "loss_each", ".", "append", "(", "forward_recursively", "(", "loss_batch", "[", "i", "]", ",", "energy_batch", "[", "i", "]", ",", "target", "[", "label", "]", "[", "i", "]", ",", "0", ")", ")", "\n", "\n", "", "loss", ".", "append", "(", "sum", "(", "loss_each", ")", ")", "\n", "\n", "", "loss", "=", "sum", "(", "loss", ")", "\n", "\n", "return", "loss", "/", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER.predict": [[181, 236], ["sequence_labeling.BiRecurrentConvCRF4NestedNER._get_rnn_output", "sequence_labeling.BiRecurrentConvCRF4NestedNER.size", "crf.decode", "range", "preds.append", "preds.size", "sequence_labeling.NestedSequenceLabel", "preds_each.append", "sequence_labeling.BiRecurrentConvCRF4NestedNER.predict.predict_recursively"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.model.sequence_labeling.BiRecurrentConvCRF4NestedNER._get_rnn_output", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.module.crf.ChainCRF4NestedNER.decode", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size"], ["", "def", "predict", "(", "self", ",", "tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "mask", ":", "Tensor", ")", "->", "Union", "[", "List", "[", "List", "[", "NestedSequenceLabel", "]", "]", ",", "List", "[", "NestedSequenceLabel", "]", "]", ":", "\n", "# output from rnn [batch, length, tag_space]", "\n", "        ", "output", "=", "self", ".", "_get_rnn_output", "(", "tokens", ",", "mask", "=", "mask", ")", "\n", "\n", "batch", ",", "length", ",", "_", "=", "output", ".", "size", "(", ")", "\n", "\n", "preds", "=", "[", "]", "\n", "\n", "for", "crf", "in", "self", ".", "all_crfs", ":", "\n", "            ", "preds_batch", ",", "energy_batch", "=", "crf", ".", "decode", "(", "output", ",", "mask", "=", "mask", ")", "\n", "\n", "b_id", "=", "self", ".", "b_id", "\n", "i_id", "=", "self", ".", "i_id", "\n", "e_id", "=", "self", ".", "e_id", "\n", "o_id", "=", "self", ".", "o_id", "\n", "eos_id", "=", "self", ".", "eos_id", "\n", "decode_nest", "=", "crf", ".", "decode_nest", "\n", "\n", "def", "predict_recursively", "(", "preds", ":", "Tensor", ",", "energy", ":", "Tensor", ",", "offset", ":", "int", ")", "->", "NestedSequenceLabel", ":", "\n", "                ", "length", "=", "preds", ".", "size", "(", "0", ")", "\n", "nested_preds_list", "=", "[", "]", "\n", "index", "=", "0", "\n", "while", "index", "<", "length", ":", "\n", "                    ", "id", "=", "preds", "[", "index", "]", "\n", "if", "id", "==", "eos_id", ":", "\n", "                        ", "break", "\n", "", "if", "id", "!=", "o_id", ":", "\n", "                        ", "if", "id", "==", "b_id", ":", "# B-XXX", "\n", "                            ", "start_tmp", "=", "index", "\n", "index", "+=", "1", "\n", "if", "index", "==", "length", ":", "\n", "                                ", "break", "\n", "", "id", "=", "preds", "[", "index", "]", "\n", "while", "id", "==", "i_id", ":", "# I-XXX", "\n", "                                ", "index", "+=", "1", "\n", "if", "index", "==", "length", ":", "\n", "                                    ", "break", "\n", "", "id", "=", "preds", "[", "index", "]", "\n", "", "if", "id", "==", "e_id", ":", "# E-XXX", "\n", "                                ", "end_tmp", "=", "index", "+", "1", "\n", "nested_preds", "=", "decode_nest", "(", "energy", "[", "start_tmp", ":", "end_tmp", ",", ":", ",", ":", "]", ")", "\n", "nested_preds_list", ".", "append", "(", "predict_recursively", "(", "nested_preds", ",", "\n", "energy", "[", "start_tmp", ":", "end_tmp", ",", ":", ",", ":", "]", ",", "\n", "start_tmp", "+", "offset", ")", ")", "\n", "", "", "", "index", "+=", "1", "\n", "", "return", "NestedSequenceLabel", "(", "offset", ",", "length", "+", "offset", ",", "preds", ",", "nested_preds_list", ")", "\n", "\n", "", "preds_each", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "                ", "preds_each", ".", "append", "(", "predict_recursively", "(", "preds_batch", "[", "i", ",", ":", "]", ",", "energy_batch", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "0", ")", ")", "\n", "\n", "", "preds", ".", "append", "(", "preds_each", ")", "\n", "\n", "", "return", "preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.adabound.AdaBound.__init__": [[27, 46], ["dict", "torch.optim.optimizer.Optimizer.__init__", "list", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "map"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "final_lr", "=", "0.1", ",", "gamma", "=", "1e-3", ",", "\n", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "amsbound", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "final_lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid final learning rate: {}\"", ".", "format", "(", "final_lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "gamma", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid gamma parameter: {}\"", ".", "format", "(", "gamma", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "final_lr", "=", "final_lr", ",", "gamma", "=", "gamma", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsbound", "=", "amsbound", ")", "\n", "super", "(", "AdaBound", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'lr'", "]", ",", "self", ".", "param_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.adabound.AdaBound.__setstate__": [[47, 51], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.adabound.AdaBound.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdaBound", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsbound'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.adabound.AdaBound.step": [[52, 121], ["zip", "closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "torch.full_like", "torch.full_like.div_().clamp_().mul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "grad.add.add.add", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "torch.full_like.div_().clamp_", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt", "torch.full_like.div_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", ",", "base_lr", "in", "zip", "(", "self", ".", "param_groups", ",", "self", ".", "base_lrs", ")", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsbound", "=", "group", "[", "'amsbound'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsbound", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "grad", "=", "grad", ".", "add", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ",", "alpha", "=", "1", "-", "beta1", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "grad", ",", "grad", ",", "value", "=", "1", "-", "beta2", ")", "\n", "if", "amsbound", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "# Applies bounds on actual learning rate", "\n", "# lr_scheduler cannot affect final_lr, this is a workaround to apply lr decay", "\n", "final_lr", "=", "group", "[", "'final_lr'", "]", "*", "group", "[", "'lr'", "]", "/", "base_lr", "\n", "lower_bound", "=", "final_lr", "*", "(", "1", "-", "1", "/", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", "+", "1", ")", ")", "\n", "upper_bound", "=", "final_lr", "*", "(", "1", "+", "1", "/", "(", "group", "[", "'gamma'", "]", "*", "state", "[", "'step'", "]", ")", ")", "\n", "step_size", "=", "torch", ".", "full_like", "(", "denom", ",", "step_size", ")", "\n", "step_size", ".", "div_", "(", "denom", ")", ".", "clamp_", "(", "lower_bound", ",", "upper_bound", ")", ".", "mul_", "(", "exp_avg", ")", "\n", "\n", "p", ".", "data", ".", "add_", "(", "-", "step_size", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.logger.get_logger": [[7, 26], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_logger", "(", "name", ":", "str", ",", "level", ":", "int", "=", "logging", ".", "INFO", ",", "stream", ":", "TextIOWrapper", "=", "sys", ".", "stdout", ",", "file", ":", "str", "=", "None", ",", "\n", "formatter", ":", "str", "=", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "->", "Logger", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "formatter", ")", "\n", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "stream", ")", "\n", "stream_handler", ".", "setLevel", "(", "level", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "\n", "if", "file", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "file", ")", "\n", "file_handler", ".", "setLevel", "(", "level", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.utils.adjust_learning_rate": [[17, 36], ["isinstance", "isinstance", "isinstance", "lr_scheduler.step", "isinstance", "lr_scheduler.step", "isinstance", "lr_scheduler.step"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.adabound.AdaBound.step", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.adabound.AdaBound.step", "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.adabound.AdaBound.step"], ["", "def", "adjust_learning_rate", "(", "lr_scheduler", ":", "Union", "[", "optim", ".", "lr_scheduler", ".", "StepLR", ",", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "]", ",", "\n", "epoch", ":", "int", ",", "train_loss", ":", "float", ",", "dev_f1", ":", "float", ")", "->", "bool", ":", "\n", "    ", "if", "isinstance", "(", "lr_scheduler", ",", "optim", ".", "lr_scheduler", ".", "StepLR", ")", ":", "\n", "        ", "if", "isinstance", "(", "lr_scheduler", ".", "optimizer", ",", "AdaBound", ")", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "return", "epoch", "<", "200", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "", "elif", "isinstance", "(", "lr_scheduler", ",", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "        ", "if", "isinstance", "(", "lr_scheduler", ".", "optimizer", ",", "optim", ".", "SGD", ")", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", "train_loss", ")", "\n", "return", "lr_scheduler", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ">=", "0.0001", "\n", "", "elif", "isinstance", "(", "lr_scheduler", ".", "optimizer", ",", "optim", ".", "Adam", ")", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", "dev_f1", ")", "\n", "return", "lr_scheduler", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ">=", "0.00001", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.utils.create_opt": [[38, 56], ["training.adabound.AdaBound", "torch.lr_scheduler.StepLR", "torch.SGD", "torch.lr_scheduler.ReduceLROnPlateau", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau"], "function", ["None"], ["", "", "def", "create_opt", "(", "parameters", ":", "Iterator", ",", "opt", ":", "Optimizer", ",", "lr", ":", "float", "=", "None", ",", "l2", ":", "float", "=", "None", ",", "lr_patience", ":", "int", "=", "None", ")", ":", "\n", "    ", "if", "opt", "==", "Optimizer", ".", "AdaBound", ":", "\n", "        ", "optimizer", "=", "AdaBound", "(", "parameters", ",", "lr", "=", "lr", "if", "lr", "is", "not", "None", "else", "0.001", ",", "\n", "weight_decay", "=", "l2", "if", "l2", "is", "not", "None", "else", "0.", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "150", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", "==", "Optimizer", ".", "SGD", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "lr", "if", "lr", "is", "not", "None", "else", "0.1", ",", "\n", "weight_decay", "=", "l2", "if", "l2", "is", "not", "None", "else", "0.", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.5", ",", "\n", "patience", "=", "lr_patience", "if", "lr_patience", "is", "not", "None", "else", "5", ")", "\n", "", "elif", "opt", "==", "Optimizer", ".", "Adam", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "lr", "if", "lr", "is", "not", "None", "else", "0.001", ",", "\n", "weight_decay", "=", "l2", "if", "l2", "is", "not", "None", "else", "0.", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'max'", ",", "factor", "=", "0.1", ",", "\n", "patience", "=", "lr_patience", "if", "lr_patience", "is", "not", "None", "else", "3", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "", "return", "optimizer", ",", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.utils.clip_model_grad": [[58, 60], ["torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "model.parameters"], "function", ["None"], ["", "def", "clip_model_grad", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "clip_norm", ":", "float", ")", "->", "None", ":", "\n", "    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "clip_norm", ",", "norm_type", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.utils.pack_target": [[62, 126], ["zip", "list", "torch.LongTensor", "torch.LongTensor", "model.sequence_labeling.NestedSequenceLabel", "flat_region_label_list.sort", "range", "nested_sequence_label_batch.append", "map", "len", "mask.index", "numpy.array", "len", "utils.pack_target.flat2nested"], "function", ["None"], ["", "def", "pack_target", "(", "model", ":", "BiRecurrentConvCRF4NestedNER", ",", "\n", "flat_region_label_batch", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ",", "mask_batch", ":", "List", "[", "List", "[", "bool", "]", "]", ")", "->", "Union", "[", "List", "[", "List", "[", "NestedSequenceLabel", "]", "]", ",", "List", "[", "NestedSequenceLabel", "]", "]", ":", "\n", "\n", "    ", "def", "flat2nested", "(", "flat_label_list", ":", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", ",", "\n", "nested_label_list", ":", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "List", "]", "]", ",", "\n", "start", ":", "int", ",", "end", ":", "int", ",", "index", ":", "int", ",", "label", ":", "int", ")", "->", "int", ":", "\n", "        ", "while", "index", "<", "len", "(", "flat_label_list", ")", ":", "\n", "            ", "flat_label", "=", "flat_label_list", "[", "index", "]", "\n", "if", "flat_label", "[", "2", "]", "!=", "label", ":", "\n", "                ", "index", "+=", "1", "\n", "continue", "\n", "", "if", "end", "<=", "flat_label", "[", "0", "]", ":", "\n", "                ", "break", "\n", "", "elif", "start", "<=", "flat_label", "[", "0", "]", "and", "flat_label", "[", "1", "]", "<=", "end", ":", "\n", "                ", "index", "+=", "1", "\n", "nested_nested_label_list", "=", "[", "]", "\n", "index", "=", "flat2nested", "(", "flat_label_list", ",", "nested_nested_label_list", ",", "flat_label", "[", "0", "]", ",", "flat_label", "[", "1", "]", ",", "index", ",", "\n", "label", ")", "\n", "nested_label_list", ".", "append", "(", "(", "flat_label", "[", "0", "]", ",", "flat_label", "[", "1", "]", ",", "flat_label", "[", "2", "]", ",", "nested_nested_label_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "index", "+=", "1", "\n", "continue", "\n", "", "", "return", "index", "\n", "\n", "", "b_id", "=", "model", ".", "b_id", "\n", "i_id", "=", "model", ".", "i_id", "\n", "e_id", "=", "model", ".", "e_id", "\n", "s_id", "=", "model", ".", "s_id", "\n", "o_id", "=", "model", ".", "o_id", "\n", "eos_id", "=", "model", ".", "eos_id", "\n", "\n", "def", "region2sequence", "(", "region_label_list", ":", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "List", "]", "]", ",", "start", ":", "int", ",", "end", ":", "int", ",", "\n", "mask", ":", "List", "[", "bool", "]", "=", "None", ")", "->", "NestedSequenceLabel", ":", "\n", "        ", "sequence_label", "=", "[", "o_id", "]", "*", "end", "\n", "if", "mask", "is", "not", "None", "and", "not", "mask", "[", "-", "1", "]", ":", "\n", "            ", "length", "=", "mask", ".", "index", "(", "False", ")", "\n", "sequence_label", "[", "length", ":", "]", "=", "[", "eos_id", "]", "*", "(", "end", "-", "length", ")", "\n", "", "nested_sequence_label_list", "=", "[", "]", "\n", "for", "region_label", "in", "region_label_list", ":", "\n", "            ", "if", "region_label", "[", "1", "]", "-", "region_label", "[", "0", "]", "==", "1", ":", "\n", "                ", "sequence_label", "[", "region_label", "[", "0", "]", "]", "=", "s_id", "# S-XXX", "\n", "nested_sequence_label_list", ".", "append", "(", "\n", "region2sequence", "(", "region_label", "[", "3", "]", ",", "region_label", "[", "0", "]", ",", "region_label", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "sequence_label", "[", "region_label", "[", "0", "]", "]", "=", "b_id", "# B-XXX", "\n", "sequence_label", "[", "region_label", "[", "0", "]", "+", "1", ":", "region_label", "[", "1", "]", "-", "1", "]", "=", "[", "i_id", "]", "*", "(", "region_label", "[", "1", "]", "-", "region_label", "[", "0", "]", "-", "2", ")", "# I-XXX", "\n", "sequence_label", "[", "region_label", "[", "1", "]", "-", "1", "]", "=", "e_id", "# E-XXX", "\n", "nested_sequence_label_list", ".", "append", "(", "\n", "region2sequence", "(", "region_label", "[", "3", "]", ",", "region_label", "[", "0", "]", ",", "region_label", "[", "1", "]", ")", ")", "\n", "", "", "sequence_label", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "sequence_label", "[", "start", ":", "]", ")", ")", "\n", "return", "NestedSequenceLabel", "(", "start", ",", "end", ",", "sequence_label", ",", "nested_sequence_label_list", ")", "\n", "\n", "", "nested_sequence_label_batch", "=", "[", "]", "\n", "for", "flat_region_label_list", ",", "mask", "in", "zip", "(", "flat_region_label_batch", ",", "mask_batch", ")", ":", "\n", "        ", "flat_region_label_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "-", "x", "[", "1", "]", ")", ")", "\n", "nested_sequence_label_batch_each", "=", "[", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "model", ".", "all_crfs", ")", ")", ":", "\n", "            ", "nested_region_label_list", "=", "[", "]", "\n", "flat2nested", "(", "flat_region_label_list", ",", "nested_region_label_list", ",", "0", ",", "len", "(", "mask", ")", ",", "0", ",", "label", ")", "\n", "nested_sequence_label_batch_each", ".", "append", "(", "region2sequence", "(", "nested_region_label_list", ",", "0", ",", "len", "(", "mask", ")", ",", "mask", ")", ")", "\n", "", "nested_sequence_label_batch", ".", "append", "(", "nested_sequence_label_batch_each", ")", "\n", "", "return", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "nested_sequence_label_batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.training.utils.unpack_prediction": [[128, 200], ["list", "sequence_label_tuple.label.cpu().numpy", "map", "range", "utils.unpack_prediction.nested2flat"], "function", ["None"], ["", "def", "unpack_prediction", "(", "model", ":", "BiRecurrentConvCRF4NestedNER", ",", "\n", "nested_sequence_label_batch", ":", "Union", "[", "List", "[", "List", "[", "NestedSequenceLabel", "]", "]", ",", "List", "[", "NestedSequenceLabel", "]", "]", ")", "->", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ":", "\n", "\n", "    ", "b_id", "=", "model", ".", "b_id", "\n", "i_id", "=", "model", ".", "i_id", "\n", "e_id", "=", "model", ".", "e_id", "\n", "s_id", "=", "model", ".", "s_id", "\n", "o_id", "=", "model", ".", "o_id", "\n", "eos_id", "=", "model", ".", "eos_id", "\n", "\n", "def", "sequence2region", "(", "sequence_label_tuple", ":", "NestedSequenceLabel", ",", "label", ":", "int", ")", "->", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "List", "]", "]", ":", "\n", "        ", "start", "=", "sequence_label_tuple", ".", "start", "\n", "sequence_label", "=", "sequence_label_tuple", ".", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "nested_region_label_list", "=", "[", "]", "\n", "index", "=", "0", "\n", "while", "index", "<", "len", "(", "sequence_label", ")", ":", "\n", "            ", "start_tmp", "=", "None", "\n", "end_tmp", "=", "None", "\n", "flag", "=", "False", "\n", "label_tmp", "=", "sequence_label", "[", "index", "]", "\n", "if", "label_tmp", "==", "eos_id", ":", "\n", "                ", "break", "\n", "", "if", "label_tmp", "!=", "o_id", ":", "\n", "                ", "if", "label_tmp", "==", "s_id", ":", "# S-XXX", "\n", "                    ", "start_tmp", "=", "start", "+", "index", "\n", "end_tmp", "=", "start", "+", "index", "+", "1", "\n", "flag", "=", "True", "\n", "", "elif", "label_tmp", "==", "b_id", ":", "# B-XXX", "\n", "                    ", "start_tmp", "=", "start", "+", "index", "\n", "index", "+=", "1", "\n", "if", "index", "==", "len", "(", "sequence_label", ")", ":", "\n", "                        ", "break", "\n", "", "label_tmp", "=", "sequence_label", "[", "index", "]", "\n", "while", "label_tmp", "==", "i_id", ":", "# I-XXX", "\n", "                        ", "index", "+=", "1", "\n", "if", "index", "==", "len", "(", "sequence_label", ")", ":", "\n", "                            ", "break", "\n", "", "label_tmp", "=", "sequence_label", "[", "index", "]", "\n", "", "if", "label_tmp", "==", "e_id", ":", "# E-XXX", "\n", "                        ", "end_tmp", "=", "start", "+", "index", "+", "1", "\n", "flag", "=", "True", "\n", "", "", "", "if", "flag", ":", "\n", "                ", "nested_sequence_tuple", "=", "None", "\n", "for", "nested_sequence_tuple_tmp", "in", "sequence_label_tuple", ".", "children", ":", "\n", "                    ", "if", "nested_sequence_tuple_tmp", ".", "start", "==", "start_tmp", "and", "nested_sequence_tuple_tmp", ".", "end", "==", "end_tmp", ":", "\n", "                        ", "nested_sequence_tuple", "=", "nested_sequence_tuple_tmp", "\n", "break", "\n", "", "", "if", "nested_sequence_tuple", "is", "not", "None", ":", "\n", "                    ", "nested_region_label_list", ".", "append", "(", "(", "start_tmp", ",", "end_tmp", ",", "label", ",", "\n", "sequence2region", "(", "nested_sequence_tuple", ",", "label", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "nested_region_label_list", ".", "append", "(", "(", "start_tmp", ",", "end_tmp", ",", "label", ",", "[", "]", ")", ")", "\n", "", "", "index", "+=", "1", "\n", "", "return", "nested_region_label_list", "\n", "\n", "", "def", "nested2flat", "(", "nested_label_list", ":", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "List", "]", "]", ",", "\n", "flat_label_list", ":", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", ")", "->", "None", ":", "\n", "        ", "for", "nested_label", "in", "nested_label_list", ":", "\n", "            ", "flat_label_list", ".", "append", "(", "(", "nested_label", "[", "0", "]", ",", "nested_label", "[", "1", "]", ",", "nested_label", "[", "2", "]", ")", ")", "\n", "nested2flat", "(", "nested_label", "[", "3", "]", ",", "flat_label_list", ")", "\n", "\n", "", "", "flat_region_label_batch", "=", "[", "]", "\n", "for", "nested_sequence_label_tuple", "in", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "nested_sequence_label_batch", ")", ")", ")", ":", "\n", "        ", "nested_region_label_list", "=", "[", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "model", ".", "all_crfs", ")", ")", ":", "\n", "            ", "nested_region_label_list", ".", "extend", "(", "sequence2region", "(", "nested_sequence_label_tuple", "[", "label", "]", ",", "label", ")", ")", "\n", "", "flat_region_label_list", "=", "[", "]", "\n", "nested2flat", "(", "nested_region_label_list", ",", "flat_region_label_list", ")", "\n", "flat_region_label_batch", ".", "append", "(", "flat_region_label_list", ")", "\n", "", "return", "flat_region_label_batch", "\n", "", ""]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.evaluate.evaluate": [[5, 21], ["zip", "len", "len"], "function", ["None"], ["def", "evaluate", "(", "gold_entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ",", "pred_entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ")", "->", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ":", "\n", "    ", "prec_all_num", ",", "prec_num", ",", "recall_all_num", ",", "recall_num", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "g_ets", ",", "p_ets", "in", "zip", "(", "gold_entities", ",", "pred_entities", ")", ":", "\n", "        ", "recall_all_num", "+=", "len", "(", "g_ets", ")", "\n", "prec_all_num", "+=", "len", "(", "p_ets", ")", "\n", "\n", "for", "et", "in", "g_ets", ":", "\n", "            ", "if", "et", "in", "p_ets", ":", "\n", "                ", "recall_num", "+=", "1", "\n", "\n", "", "", "for", "et", "in", "p_ets", ":", "\n", "            ", "if", "et", "in", "g_ets", ":", "\n", "                ", "prec_num", "+=", "1", "\n", "\n", "", "", "", "return", "prec_all_num", ",", "prec_num", ",", "recall_all_num", ",", "recall_num", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.evaluate.evaluate_detail": [[23, 53], ["zip", "evaluate.if_overlap", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.evaluate.if_overlap"], ["", "def", "evaluate_detail", "(", "gold_entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ",", "pred_entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ")", "->", "Tuple", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ",", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "]", ":", "\n", "    ", "prec_all_num_n", ",", "prec_num_n", ",", "recall_all_num_n", ",", "recall_num_n", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "prec_all_num_o", ",", "prec_num_o", ",", "recall_all_num_o", ",", "recall_num_o", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "g_ets", ",", "p_ets", "in", "zip", "(", "gold_entities", ",", "pred_entities", ")", ":", "\n", "        ", "if", "if_overlap", "(", "g_ets", ")", ":", "\n", "            ", "recall_all_num_o", "+=", "len", "(", "g_ets", ")", "\n", "prec_all_num_o", "+=", "len", "(", "p_ets", ")", "\n", "\n", "for", "et", "in", "g_ets", ":", "\n", "                ", "if", "et", "in", "p_ets", ":", "\n", "                    ", "recall_num_o", "+=", "1", "\n", "\n", "", "", "for", "et", "in", "p_ets", ":", "\n", "                ", "if", "et", "in", "g_ets", ":", "\n", "                    ", "prec_num_o", "+=", "1", "\n", "", "", "", "else", ":", "\n", "            ", "recall_all_num_n", "+=", "len", "(", "g_ets", ")", "\n", "prec_all_num_n", "+=", "len", "(", "p_ets", ")", "\n", "\n", "for", "et", "in", "g_ets", ":", "\n", "                ", "if", "et", "in", "p_ets", ":", "\n", "                    ", "recall_num_n", "+=", "1", "\n", "\n", "", "", "for", "et", "in", "p_ets", ":", "\n", "                ", "if", "et", "in", "g_ets", ":", "\n", "                    ", "prec_num_n", "+=", "1", "\n", "\n", "", "", "", "", "return", "(", "prec_all_num_n", ",", "prec_num_n", ",", "recall_all_num_n", ",", "recall_num_n", ")", ",", "(", "prec_all_num_o", ",", "prec_num_o", ",", "recall_all_num_o", ",", "recall_num_o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.evaluate.if_overlap": [[55, 68], ["len", "range"], "function", ["None"], ["", "def", "if_overlap", "(", "ets", ":", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", ")", "->", "bool", ":", "\n", "    ", "len_ets", "=", "len", "(", "ets", ")", "\n", "if", "len_ets", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "for", "i", "in", "range", "(", "len_ets", "-", "1", ")", ":", "\n", "        ", "candidates", "=", "ets", "[", "i", "+", "1", ":", "]", "\n", "focus", "=", "ets", "[", "i", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "            ", "if", "(", "focus", "[", "0", "]", "<", "cand", "[", "0", "]", "<", "focus", "[", "1", "]", "<", "cand", "[", "1", "]", ")", "or", "(", "focus", "[", "0", "]", "<=", "cand", "[", "0", "]", "and", "cand", "[", "1", "]", "<=", "focus", "[", "1", "]", ")", "or", "(", "cand", "[", "0", "]", "<=", "focus", "[", "0", "]", "and", "focus", "[", "1", "]", "<=", "cand", "[", "1", "]", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.evaluate.count_overlap": [[70, 90], ["len", "range"], "function", ["None"], ["", "", "def", "count_overlap", "(", "entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ")", "->", "Tuple", "[", "int", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    Counting the # of crossing structures\n    Naive way\n    \"\"\"", "\n", "num_cross", "=", "0", "\n", "num_nest", "=", "0", "\n", "for", "ets", "in", "entities", ":", "\n", "        ", "len_ets", "=", "len", "(", "ets", ")", "\n", "if", "len_ets", "==", "0", ":", "\n", "            ", "continue", "\n", "", "for", "i", "in", "range", "(", "len_ets", "-", "1", ")", ":", "\n", "            ", "candidates", "=", "ets", "[", "i", "+", "1", ":", "]", "\n", "focus", "=", "ets", "[", "i", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "                ", "if", "focus", "[", "0", "]", "<", "cand", "[", "0", "]", "<", "focus", "[", "1", "]", "<", "cand", "[", "1", "]", ":", "\n", "                    ", "num_cross", "+=", "1", "\n", "", "if", "(", "focus", "[", "0", "]", "<=", "cand", "[", "0", "]", "and", "cand", "[", "1", "]", "<=", "focus", "[", "1", "]", ")", "or", "(", "cand", "[", "0", "]", "<=", "focus", "[", "0", "]", "and", "focus", "[", "1", "]", "<=", "cand", "[", "1", "]", ")", ":", "\n", "                    ", "num_nest", "+=", "1", "\n", "", "", "", "", "return", "num_cross", ",", "num_nest", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.evaluate.detail_count_overlap": [[92, 128], ["zip", "len", "range"], "function", ["None"], ["", "def", "detail_count_overlap", "(", "g_entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ",", "p_entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ")", "->", "Tuple", "[", "Tuple", "[", "int", ",", "int", "]", ",", "Tuple", "[", "int", ",", "int", "]", ",", "Tuple", "[", "int", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"\n    Counting the # of crossing structures\n    Naive way\n    \"\"\"", "\n", "num_all", "=", "0", "\n", "num_left", "=", "0", "\n", "num_right", "=", "0", "\n", "num_other", "=", "0", "\n", "c_num_left", "=", "0", "\n", "c_num_right", "=", "0", "\n", "c_num_other", "=", "0", "\n", "\n", "for", "ets", ",", "p_ets", "in", "zip", "(", "g_entities", ",", "p_entities", ")", ":", "\n", "        ", "len_ets", "=", "len", "(", "ets", ")", "\n", "if", "len_ets", "==", "0", ":", "\n", "            ", "continue", "\n", "", "for", "i", "in", "range", "(", "len_ets", "-", "1", ")", ":", "\n", "            ", "num_all", "+=", "1", "\n", "candidates", "=", "ets", "[", "i", "+", "1", ":", "]", "\n", "focus", "=", "ets", "[", "i", "]", "\n", "for", "cand", "in", "candidates", ":", "\n", "                ", "if", "cand", "[", "0", "]", "==", "focus", "[", "0", "]", "and", "cand", "[", "1", "]", "!=", "focus", "[", "1", "]", "and", "cand", "[", "2", "]", "==", "focus", "[", "2", "]", ":", "\n", "                    ", "num_left", "+=", "1", "\n", "if", "cand", "in", "p_ets", "and", "focus", "in", "p_ets", ":", "\n", "                        ", "c_num_left", "+=", "1", "\n", "", "", "elif", "cand", "[", "1", "]", "==", "focus", "[", "1", "]", "and", "cand", "[", "0", "]", "!=", "focus", "[", "0", "]", "and", "cand", "[", "2", "]", "==", "focus", "[", "2", "]", ":", "\n", "                    ", "num_right", "+=", "1", "\n", "if", "cand", "in", "p_ets", "and", "focus", "in", "p_ets", ":", "\n", "                        ", "c_num_right", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "num_other", "+=", "1", "\n", "if", "cand", "in", "p_ets", "and", "focus", "in", "p_ets", ":", "\n", "                        ", "c_num_other", "+=", "1", "\n", "", "", "", "", "", "return", "(", "num_left", ",", "c_num_left", ")", ",", "(", "num_right", ",", "c_num_right", ")", ",", "(", "num_other", ",", "c_num_other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.evaluate.detail_count_overlap_b": [[130, 169], ["zip", "len", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "collections.defaultdict.items", "start_dic[].append", "end_dic[].append", "len", "len", "len", "len"], "function", ["None"], ["", "def", "detail_count_overlap_b", "(", "g_entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ",", "p_entities", ":", "List", "[", "List", "[", "Tuple", "[", "int", ",", "int", ",", "int", "]", "]", "]", ")", "->", "Tuple", "[", "Tuple", "[", "int", ",", "int", "]", ",", "Tuple", "[", "int", ",", "int", "]", ",", "Tuple", "[", "int", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"\n    Counting the # of crossing structures\n    # of the mentions with the same boudaries\n    \"\"\"", "\n", "num_left", "=", "0", "\n", "num_right", "=", "0", "\n", "num_other", "=", "0", "\n", "c_num_left", "=", "0", "\n", "c_num_right", "=", "0", "\n", "c_num_other", "=", "0", "\n", "\n", "for", "ets", ",", "p_ets", "in", "zip", "(", "g_entities", ",", "p_entities", ")", ":", "\n", "        ", "len_ets", "=", "len", "(", "ets", ")", "\n", "if", "len_ets", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "start_dic", "=", "defaultdict", "(", "list", ")", "\n", "end_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "e", "in", "ets", ":", "\n", "            ", "start_dic", "[", "(", "e", "[", "0", "]", ",", "e", "[", "2", "]", ")", "]", ".", "append", "(", "e", ")", "\n", "end_dic", "[", "(", "e", "[", "1", "]", ",", "e", "[", "2", "]", ")", "]", ".", "append", "(", "e", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "start_dic", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                ", "num_left", "+=", "len", "(", "v", ")", "\n", "for", "e", "in", "v", ":", "\n", "                    ", "if", "e", "in", "p_ets", ":", "\n", "                        ", "c_num_left", "+=", "1", "\n", "\n", "", "", "", "", "for", "k", ",", "v", "in", "end_dic", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                ", "num_right", "+=", "len", "(", "v", ")", "\n", "for", "e", "in", "v", ":", "\n", "                    ", "if", "e", "in", "p_ets", ":", "\n", "                        ", "c_num_right", "+=", "1", "\n", "\n", "", "", "", "", "", "return", "(", "num_left", ",", "c_num_left", ")", ",", "(", "num_right", ",", "c_num_right", ")", ",", "(", "num_other", ",", "c_num_other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.__init__": [[7, 12], ["list", "enumerate"], "methods", ["None"], ["from", "training", ".", "adabound", "import", "AdaBound", "\n", "from", "model", ".", "sequence_labeling", "import", "NestedSequenceLabel", ",", "BiRecurrentConvCRF4NestedNER", "\n", "\n", "\n", "class", "Optimizer", "(", "Enum", ")", ":", "\n", "    ", "AdaBound", "=", "'AdaBound'", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.get_index": [[13, 21], ["KeyError"], "methods", ["None"], ["SGD", "=", "'SGD'", "\n", "Adam", "=", "'Adam'", "\n", "\n", "\n", "", "def", "adjust_learning_rate", "(", "lr_scheduler", ":", "Union", "[", "optim", ".", "lr_scheduler", ".", "StepLR", ",", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "]", ",", "\n", "epoch", ":", "int", ",", "train_loss", ":", "float", ",", "dev_f1", ":", "float", ")", "->", "bool", ":", "\n", "    ", "if", "isinstance", "(", "lr_scheduler", ",", "optim", ".", "lr_scheduler", ".", "StepLR", ")", ":", "\n", "        ", "if", "isinstance", "(", "lr_scheduler", ".", "optimizer", ",", "AdaBound", ")", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.get_instance": [[22, 31], ["IndexError"], "methods", ["None"], ["return", "epoch", "<", "200", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "", "elif", "isinstance", "(", "lr_scheduler", ",", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "        ", "if", "isinstance", "(", "lr_scheduler", ".", "optimizer", ",", "optim", ".", "SGD", ")", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", "train_loss", ")", "\n", "return", "lr_scheduler", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ">=", "0.0001", "\n", "", "elif", "isinstance", "(", "lr_scheduler", ".", "optimizer", ",", "optim", ".", "Adam", ")", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", "dev_f1", ")", "\n", "return", "lr_scheduler", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ">=", "0.00001", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.Alphabet.size": [[32, 34], ["len"], "methods", ["None"], ["", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.load_dynamic_config": [[37, 41], ["None"], "function", ["None"], ["\n", "", "", "def", "create_opt", "(", "parameters", ":", "Iterator", ",", "opt", ":", "Optimizer", ",", "lr", ":", "float", "=", "None", ",", "l2", ":", "float", "=", "None", ",", "lr_patience", ":", "int", "=", "None", ")", ":", "\n", "    ", "if", "opt", "==", "Optimizer", ".", "AdaBound", ":", "\n", "        ", "optimizer", "=", "AdaBound", "(", "parameters", ",", "lr", "=", "lr", "if", "lr", "is", "not", "None", "else", "0.001", ",", "\n", "weight_decay", "=", "l2", "if", "l2", "is", "not", "None", "else", "0.", ")", "\n"]], "home.repos.pwc.inspect_result.yahshibu_nested-ner-tacl2020-flair.util.utils.save_dynamic_config": [[43, 48], ["dict"], "function", ["None"], ["", "elif", "opt", "==", "Optimizer", ".", "SGD", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "lr", "if", "lr", "is", "not", "None", "else", "0.1", ",", "\n", "weight_decay", "=", "l2", "if", "l2", "is", "not", "None", "else", "0.", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.5", ",", "\n", "patience", "=", "lr_patience", "if", "lr_patience", "is", "not", "None", "else", "5", ")", "\n", "", "elif", "opt", "==", "Optimizer", ".", "Adam", ":", "\n"]]}