{"home.repos.pwc.inspect_result.Wluper_edm.report.report_creator._compare_to_mean": [[45, 81], ["None"], "function", ["None"], ["", "def", "_compare_to_mean", "(", "stat", ",", "whichStatistic", ")", ":", "\n", "    ", "\"\"\"\n    Compares a statistic to the mean value and returns a severity level of difference. Severity is defined as follows:\n\n    - stat > mu + 2 * sigma : VERY HIGH\n    - stat > mu + sigma     : HIGH\n    - stat > mu + sigma / 2 : SOMEWHAT HIGH\n    - stat < mu             : GOOD\n\n    :param stat          : the value of the statistic to compare\n    :type stat           : float\n\n    :param whichStatistic : which statistic to compare this one to on mean\n    :type whichStatistic  : str\n\n    :return               : a coloured string severity level\n    \"\"\"", "\n", "mu", ",", "sigma", "=", "MEASURE_MEANS_AND_SIGMAS", "[", "whichStatistic", "]", "\n", "\n", "if", "stat", ">", "mu", "+", "2", "*", "sigma", ":", "\n", "\n", "        ", "severity", "=", "Color", ".", "RED", "+", "\"VERY HIGH\"", "+", "Color", ".", "ENDC", "\n", "\n", "", "elif", "stat", ">", "mu", "+", "sigma", ":", "\n", "\n", "        ", "severity", "=", "Color", ".", "ORANGE", "+", "\"HIGH\"", "+", "Color", ".", "ENDC", "\n", "\n", "", "elif", "stat", ">", "mu", "+", "sigma", "/", "2", ":", "\n", "\n", "        ", "severity", "=", "Color", ".", "BLUE", "+", "\"SOMEWHAT HIGH\"", "+", "Color", ".", "ENDC", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "severity", "=", "Color", ".", "GREEN", "+", "\"GOOD\"", "+", "Color", ".", "ENDC", "\n", "\n", "", "return", "severity", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.get_difficulty_estimate": [[83, 127], ["edm.metrics.get_vocab_ratio", "report_creator._compare_to_mean", "edm.metrics.get_class_imbalance", "report_creator._compare_to_mean", "edm.metrics.get_class_diversity", "report_creator._compare_to_mean", "report_creator._compare_to_mean", "edm.metrics.get_avg_mutual_information", "report_creator._compare_to_mean", "report_creator._compare_to_mean", "edm.metrics.get_minimum_hellinger_distance"], "function", ["home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_vocab_ratio", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator._compare_to_mean", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_class_imbalance", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator._compare_to_mean", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_class_diversity", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator._compare_to_mean", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator._compare_to_mean", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_avg_mutual_information", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator._compare_to_mean", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator._compare_to_mean", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_minimum_hellinger_distance"], ["", "def", "get_difficulty_estimate", "(", "labelBow", ",", "wordCounts", ",", "labelCounts", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the five statistics proposed as components of our difficulty measure.\n\n    :param labelBow    : bag of ngrams in a specific format. Keys are the labels of the dataset, and the values are\n                         bag-of-words dictionaries for the sentences in each class.\n    :type labelBow     : dict\n\n    :param wordCounts  : a dictionary mapping words to a count of their occurrences in the data.\n    :type wordCounts   : dict\n\n    :param labelCounts : a dictionary mapping labels to a count of their occurrences in the data.\n    :type labelCounts  : dict\n\n    :return            : a list of tuples with all of the components of the difficulty measure.\n    \"\"\"", "\n", "vocabRatio", "=", "metrics", ".", "get_vocab_ratio", "(", "wordCounts", ")", "\n", "sevVocab", "=", "_compare_to_mean", "(", "vocabRatio", ",", "\"DISTINCT_WORDS__TOTAL_WORDS\"", ")", "\n", "\n", "classImbalance", "=", "metrics", ".", "get_class_imbalance", "(", "labelCounts", ")", "\n", "sevClassImabl", "=", "_compare_to_mean", "(", "classImbalance", ",", "\"CLASS_IMBAL\"", ")", "\n", "\n", "classDiversity", "=", "metrics", ".", "get_class_diversity", "(", "labelCounts", ")", "\n", "sevClassDiv", "=", "_compare_to_mean", "(", "classDiversity", ",", "\"CLASS_DIVERSITY\"", ")", "\n", "\n", "minHellDist", "=", "1", "-", "metrics", ".", "get_minimum_hellinger_distance", "(", "labelBow", ")", "\n", "sevMinHellDist", "=", "_compare_to_mean", "(", "minHellDist", ",", "\"MIN_HELL_DIST\"", ")", "\n", "\n", "minfo", "=", "metrics", ".", "get_avg_mutual_information", "(", "labelBow", ")", "\n", "sevMinfo", "=", "_compare_to_mean", "(", "minfo", ",", "\"MUTUAL_INFO\"", ")", "\n", "\n", "difficulty", "=", "vocabRatio", "+", "classImbalance", "+", "classDiversity", "+", "minHellDist", "+", "minfo", "\n", "sevDiff", "=", "_compare_to_mean", "(", "difficulty", ",", "\"DIFFICULTY\"", ")", "\n", "\n", "valueList", "=", "[", "\n", "(", "\"Distinct Words : Total Words\"", ",", "vocabRatio", ",", "sevVocab", ")", ",", "\n", "(", "\"Class Imbalance\"", ",", "classImbalance", ",", "sevClassImabl", ")", ",", "\n", "(", "\"Class Diversity\"", ",", "classDiversity", ",", "sevClassDiv", ")", ",", "\n", "(", "\"Max. Hellinger Similarity\"", ",", "minHellDist", ",", "sevMinHellDist", ")", ",", "\n", "(", "\"Mutual Information\"", ",", "minfo", ",", "sevMinfo", ")", ",", "\n", "(", "\"Difficulty\"", ",", "difficulty", ",", "sevDiff", ")", "\n", "]", "\n", "\n", "return", "valueList", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.get_generic_statistics": [[129, 171], ["edm.metrics.get_vocab_size", "edm.metrics.get_number_of_classes", "edm.metrics.get_mean_data_items_per_class", "edm.metrics.get_minimum_data_items_in_a_class", "edm.metrics.get_average_sentence_length", "len"], "function", ["home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_vocab_size", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_number_of_classes", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_mean_data_items_per_class", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_minimum_data_items_in_a_class", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_average_sentence_length"], ["", "def", "get_generic_statistics", "(", "wordCounts", ",", "labelCounts", ",", "sentsLens", ")", ":", "\n", "    ", "\"\"\"\n    Gets generic dataset statistics such as average sentence length.\n\n    :param wordCounts  : a dictionary mapping words to a count of their occurrences in the data.\n    :type wordCounts   : dict\n\n    :param labelCounts : a dictionary mapping labels to a count of their occurrences in the data.\n    :type labelCounts  : dict\n\n    :param sentsLens   : a list of the lengths of sentences.\n    :type sentsLens    : list\n\n    :return            : a dictionary with all of the components of a difficulty measure.\n    \"\"\"", "\n", "vocabSize", "=", "metrics", ".", "get_vocab_size", "(", "wordCounts", ")", "\n", "\n", "numClasses", "=", "metrics", ".", "get_number_of_classes", "(", "labelCounts", ")", "\n", "\n", "meanItemPerClass", "=", "metrics", ".", "get_mean_data_items_per_class", "(", "labelCounts", ")", "\n", "\n", "minItemInClass", "=", "metrics", ".", "get_minimum_data_items_in_a_class", "(", "labelCounts", ")", "\n", "\n", "if", "minItemInClass", ">", "meanItemPerClass", "/", "2", ":", "\n", "        ", "severity", "=", "Color", ".", "GREEN", "+", "\"GOOD\"", "+", "Color", ".", "ENDC", "\n", "", "elif", "meanItemPerClass", "/", "4", "<", "minItemInClass", "<", "meanItemPerClass", "/", "2", ":", "\n", "        ", "severity", "=", "Color", ".", "ORANGE", "+", "\"SLIGHTLY LOW\"", "+", "Color", ".", "ENDC", "\n", "", "elif", "minItemInClass", "<", "meanItemPerClass", "/", "4", ":", "\n", "        ", "severity", "=", "Color", ".", "RED", "+", "\"EXTREMELY LOW\"", "+", "Color", ".", "ENDC", "\n", "\n", "", "averageSentLen", "=", "metrics", ".", "get_average_sentence_length", "(", "sentsLens", ")", "\n", "\n", "valueList", "=", "[", "\n", "(", "\"Dataset Size\"", ",", "len", "(", "sentsLens", ")", ",", "\"-\"", ")", ",", "\n", "(", "\"Vocab Size\"", ",", "vocabSize", ",", "\"-\"", ")", ",", "\n", "(", "\"Number of Classes\"", ",", "numClasses", ",", "\"-\"", ")", ",", "\n", "(", "\"Mean Items Per Class\"", ",", "meanItemPerClass", ",", "\"-\"", ")", ",", "\n", "(", "\"Min. Items in a Class\"", ",", "minItemInClass", ",", "severity", ")", ",", "\n", "(", "\"Average Sentence Length\"", ",", "averageSentLen", ",", "\"-\"", ")", "\n", "]", "\n", "\n", "return", "valueList", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.generate_report": [[173, 213], ["max", "max", "len", "str", "len", "str", "len", "len", "str"], "function", ["None"], ["", "def", "generate_report", "(", "statsList", ")", ":", "\n", "    ", "\"\"\"\n    Generates a string representation of a list of stats.\n\n    :param statsList : list of stats to go in a report. They are a list of tuples where each tuple has a string\n                       description and a float value.\n    :type statsList  : list\n\n    :return          : a string report of the statistics.\n    \"\"\"", "\n", "report", "=", "\"\\n\\n\"", "\n", "\n", "maxStatLen", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", ",", "_", ",", "_", "in", "statsList", "]", ")", "+", "1", "\n", "maxValLen", "=", "max", "(", "[", "len", "(", "str", "(", "y", ")", ")", "for", "_", ",", "y", ",", "_", "in", "statsList", "]", ")", "+", "1", "\n", "\n", "for", "stat", ",", "value", ",", "sev", "in", "statsList", ":", "\n", "\n", "        ", "report", "+=", "stat", "\n", "\n", "added", "=", "len", "(", "stat", ")", "\n", "\n", "while", "added", "<", "maxStatLen", ":", "\n", "\n", "            ", "report", "+=", "\" \"", "\n", "added", "+=", "1", "\n", "\n", "", "report", "+=", "str", "(", "value", ")", "\n", "\n", "added", "=", "len", "(", "str", "(", "value", ")", ")", "\n", "\n", "while", "added", "<", "maxValLen", ":", "\n", "\n", "            ", "report", "+=", "\" \"", "\n", "added", "+=", "1", "\n", "\n", "", "report", "+=", "sev", "+", "\"\\n\"", "\n", "\n", "", "report", "+=", "\"\\n\\n\"", "\n", "\n", "return", "report", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.get_difficulty_report": [[215, 242], ["print", "edm.datastructures.get_bags_of_words", "print", "print", "report_creator.get_difficulty_estimate", "print", "print", "report_creator.get_generic_statistics", "print", "report_creator.generate_report"], "function", ["home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures.get_bags_of_words", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.get_difficulty_estimate", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.get_generic_statistics", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.generate_report"], ["", "def", "get_difficulty_report", "(", "sents", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Coordinates the creation of a difficulty report for a sentence classification task.\n\n    :param sents  : a list of the sentences in the dataset. Each sentence is an untokenized string.\n    :type sents   : list\n\n    :param labels : a list of the labels in the dataset. There is one label for every sentence.\n    :type labels  : list\n\n    :return       : a string describing the difficulty of a dataset.\n    \"\"\"", "\n", "print", "(", "\"----> Building bag of words representations...\"", ")", "\n", "labelBow", ",", "wordCounts", ",", "labelCounts", ",", "sentsLenList", "=", "datastructures", ".", "get_bags_of_words", "(", "sents", ",", "labels", ")", "\n", "print", "(", "\"----> Done.\"", ")", "\n", "\n", "print", "(", "\"----> Getting difficulty metrics...\"", ")", "\n", "difficultyAnalysis", "=", "get_difficulty_estimate", "(", "labelBow", ",", "wordCounts", ",", "labelCounts", ")", "\n", "print", "(", "\"----> Done.\"", ")", "\n", "\n", "print", "(", "\"----> Getting generic statistics...\"", ")", "\n", "genericStats", "=", "get_generic_statistics", "(", "wordCounts", ",", "labelCounts", ",", "sentsLenList", ")", "\n", "print", "(", "\"----> Done.\"", ")", "\n", "\n", "report", "=", "generate_report", "(", "genericStats", "+", "difficultyAnalysis", ")", "\n", "\n", "return", "report", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.get_difficulty_components_dict": [[244, 267], ["print", "edm.datastructures.get_bags_of_words", "print", "print", "report_creator.get_difficulty_estimate", "print"], "function", ["home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures.get_bags_of_words", "home.repos.pwc.inspect_result.Wluper_edm.report.report_creator.get_difficulty_estimate"], ["", "def", "get_difficulty_components_dict", "(", "sents", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Coordinates the creation of a difficulty report for a sentence classification task, but returns the results as a\n    dictionary rather than a string.\n\n    :param sents  : a list of the sentences in the dataset. Each sentence is an untokenized string.\n    :type sents   : list\n\n    :param labels : a list of the labels in the dataset. There is one label for every sentence.\n    :type labels  : list\n\n    :return       : a dictionary of difficulty statistics about the dataset.\n    \"\"\"", "\n", "\n", "print", "(", "\"----> Building bag of words representations...\"", ")", "\n", "labelBow", ",", "wordCounts", ",", "labelCounts", ",", "sentsLenList", "=", "datastructures", ".", "get_bags_of_words", "(", "sents", ",", "labels", ")", "\n", "print", "(", "\"----> Done.\"", ")", "\n", "\n", "print", "(", "\"----> Getting difficulty metrics...\"", ")", "\n", "difficultyAnalysis", "=", "get_difficulty_estimate", "(", "labelBow", ",", "wordCounts", ",", "labelCounts", ")", "\n", "print", "(", "\"----> Done.\"", ")", "\n", "\n", "return", "{", "name", ":", "(", "val", ",", "sev", ")", "for", "name", ",", "val", ",", "sev", "in", "difficultyAnalysis", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_class_diversity": [[28, 47], ["sum", "labelCounts.items", "math.log", "labelCounts.items"], "function", ["None"], ["def", "get_class_diversity", "(", "labelCounts", ")", ":", "\n", "    ", "\"\"\"\n    Calculates Shannon label diversity i.e. the Class Diversity. The Shannon Diversity is the diversity measure used.\n\n    :param labelCounts : dictionary mapping labels to a count of their occurences in the data.\n    :type labelCounts  : dict\n\n    :return            : shannon label diversity (class diversity)\n    \"\"\"", "\n", "totalLabels", "=", "sum", "(", "[", "val", "for", "key", ",", "val", "in", "labelCounts", ".", "items", "(", ")", "]", ")", "\n", "\n", "shannonDivIndex", "=", "0", "\n", "for", "label", ",", "count", "in", "labelCounts", ".", "items", "(", ")", ":", "\n", "        ", "p", "=", "count", "/", "totalLabels", "\n", "shannonDivIndex", "+=", "p", "*", "ln", "(", "p", ")", "\n", "\n", "", "shannonDivIndex", "*=", "-", "1", "\n", "\n", "return", "shannonDivIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures._get_hellinger_distance": [[49, 79], ["sum", "sum", "ngramCounts1.items", "math.sqrt", "ngramCounts2.keys", "math.sqrt", "ngramCounts1.items", "ngramCounts2.items", "math.sqrt", "math.sqrt"], "function", ["None"], ["", "def", "_get_hellinger_distance", "(", "ngramCounts1", ",", "ngramCounts2", ")", ":", "\n", "    ", "\"\"\"\n    Gets the hellinger distance between the two sets of ngrams and counts.\n\n    :param ngramCounts1 : dictionary mapping word to count\n    :type ngramCounts1  : dict\n\n    :param ngramCounts2 : dictionary mapping word to count\n    :type ngramCounts2  : dict\n\n    :return             : hellinger distance between the classes\n    \"\"\"", "\n", "totalWords1", "=", "sum", "(", "[", "val", "for", "key", ",", "val", "in", "ngramCounts1", ".", "items", "(", ")", "]", ")", "\n", "\n", "totalWords2", "=", "sum", "(", "[", "val", "for", "key", ",", "val", "in", "ngramCounts2", ".", "items", "(", ")", "]", ")", "\n", "\n", "hellingerDist", "=", "0", "\n", "for", "ngram", ",", "count", "in", "ngramCounts1", ".", "items", "(", ")", ":", "\n", "        ", "p", "=", "count", "/", "totalWords1", "\n", "\n", "if", "ngram", "not", "in", "ngramCounts2", ".", "keys", "(", ")", ":", "\n", "            ", "q", "=", "0", "\n", "", "else", ":", "\n", "            ", "q", "=", "ngramCounts2", "[", "ngram", "]", "/", "totalWords2", "\n", "\n", "", "hellingerDist", "+=", "(", "sqrt", "(", "p", ")", "-", "sqrt", "(", "q", ")", ")", "**", "2", "\n", "\n", "", "hellingerDist", "=", "(", "1", "/", "sqrt", "(", "2", ")", ")", "*", "sqrt", "(", "hellingerDist", ")", "\n", "\n", "return", "hellingerDist", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_minimum_hellinger_distance": [[81, 109], ["set", "labelBagOfWords.items", "min", "labelBagOfWords.items", "difficulty_measures._get_hellinger_distance", "set.add", "set.add", "hellingerDists.items"], "function", ["home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures._get_hellinger_distance"], ["", "def", "get_minimum_hellinger_distance", "(", "labelBagOfWords", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the minimum Hellinger distance between classes.\n\n    :param labelBagOfWords : bag of ngrams in a specific format. Keys are the labels of the dataset, and the values are\n                             bag-of-words dictionaries for the sentences in each class.\n    :type labelBagOfWords  : dict\n\n    :return                : the minimum Hellinger distance between classes\n    \"\"\"", "\n", "\n", "done", "=", "set", "(", ")", "\n", "\n", "hellingerDists", "=", "{", "}", "\n", "\n", "for", "label", ",", "ngramCounts", "in", "labelBagOfWords", ".", "items", "(", ")", ":", "\n", "        ", "for", "checkLabel", ",", "checkNGramCounts", "in", "labelBagOfWords", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "(", "label", ",", "checkLabel", ")", "in", "done", "or", "label", "==", "checkLabel", ":", "\n", "                ", "continue", "\n", "\n", "", "dist", "=", "_get_hellinger_distance", "(", "ngramCounts", ",", "checkNGramCounts", ")", "\n", "\n", "hellingerDists", "[", "(", "label", ",", "checkLabel", ")", "]", "=", "dist", "\n", "done", ".", "add", "(", "(", "label", ",", "checkLabel", ")", ")", "\n", "done", ".", "add", "(", "(", "checkLabel", ",", "label", ")", ")", "\n", "\n", "", "", "return", "min", "(", "[", "val", "for", "_", ",", "val", "in", "hellingerDists", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_mutual_information_from_count_dict": [[111, 159], ["sum", "sum", "set", "sum", "dict1.items", "dict1.get", "dict2.get", "numpy.log", "dict1.items", "dict2.items", "dict1.items", "dict1.items", "dict2.items", "numpy.log", "numpy.log", "numpy.log"], "function", ["None"], ["", "def", "get_mutual_information_from_count_dict", "(", "dict1", ",", "dict2", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Computes the mutual information of input dict 1 and 2, or entropy of dict1\n\n    :param dict1 : dictionary of keys and counts\n    :type  dict1 : dict\n\n    :param dict2 : dictionary of keys and associated probabilities.\n    :type  dict2 : dict\n\n    :return      : a matrix of cross mutual informations\n    \"\"\"", "\n", "out", "=", "0.0", "\n", "\n", "# mutual information case", "\n", "if", "dict2", ":", "\n", "        ", "total1", "=", "sum", "(", "[", "count", "for", "_", ",", "count", "in", "dict1", ".", "items", "(", ")", "]", ")", "\n", "total2", "=", "sum", "(", "[", "count", "for", "_", ",", "count", "in", "dict2", ".", "items", "(", ")", "]", ")", "\n", "\n", "totalNgrams", "=", "set", "(", "[", "x", "for", "x", ",", "_", "in", "dict1", ".", "items", "(", ")", "]", "+", "[", "x", "for", "x", ",", "_", "in", "dict2", ".", "items", "(", ")", "]", ")", "\n", "\n", "for", "ngram", "in", "totalNgrams", ":", "\n", "\n", "            ", "if", "dict1", ".", "get", "(", "ngram", ")", ":", "\n", "                ", "count1", "=", "dict1", "[", "ngram", "]", "\n", "\n", "if", "dict2", ".", "get", "(", "ngram", ")", ":", "\n", "                    ", "count2", "=", "dict2", "[", "ngram", "]", "\n", "\n", "prob1", "=", "count1", "/", "total1", "\n", "prob2", "=", "count2", "/", "total2", "\n", "prob12", "=", "(", "count1", "+", "count2", ")", "/", "(", "total1", "+", "total2", ")", "\n", "out", "+=", "prob12", "*", "(", "np", ".", "log", "(", "prob12", ")", "-", "np", ".", "log", "(", "prob1", ")", "-", "np", ".", "log", "(", "prob2", ")", ")", "\n", "\n", "# entropy case", "\n", "", "", "", "", "else", ":", "\n", "\n", "        ", "total1", "=", "sum", "(", "[", "count", "for", "_", ",", "count", "in", "dict1", ".", "items", "(", ")", "]", ")", "\n", "\n", "for", "_", ",", "x", "in", "dict1", ".", "items", "(", ")", ":", "\n", "\n", "            ", "prob", "=", "x", "/", "total1", "\n", "\n", "out", "+=", "prob", "*", "np", ".", "log", "(", "prob", ")", "\n", "\n", "", "out", "=", "-", "out", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_avg_mutual_information": [[161, 192], ["numpy.zeros", "edm.datastructures.filter_top_words", "enumerate", "numpy.mean", "difficulty_measures.get_mutual_information_from_count_dict", "len", "len", "datastructures.filter_top_words.items", "enumerate", "len", "difficulty_measures.get_mutual_information_from_count_dict"], "function", ["home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures.filter_top_words", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_mutual_information_from_count_dict", "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_mutual_information_from_count_dict"], ["", "def", "get_avg_mutual_information", "(", "labelBagOfWords", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the average mutual information statistic between classes.\n\n    :param labelBagOfWords : bag of ngrams in a specific format. Keys are the labels of the dataset, and the values are\n                             bag-of-words dictionaries for the sentences in each class.\n    :type labelBagOfWords  : dict\n\n    :return                : the average mutual information between classes.\n    \"\"\"", "\n", "outMat", "=", "np", ".", "zeros", "(", "[", "len", "(", "labelBagOfWords", ")", ",", "len", "(", "labelBagOfWords", ")", "]", ")", "\n", "\n", "filteredLBow", "=", "datastructures", ".", "filter_top_words", "(", "labelBagOfWords", ")", "\n", "\n", "labels", "=", "[", "key", "for", "key", ",", "_", "in", "filteredLBow", ".", "items", "(", ")", "]", "\n", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "\n", "        ", "outMat", "[", "idx", ",", "idx", "]", "=", "get_mutual_information_from_count_dict", "(", "filteredLBow", "[", "label", "]", ")", "\n", "\n", "if", "idx", "<", "len", "(", "filteredLBow", ")", "-", "1", ":", "\n", "\n", "            ", "for", "jdx", ",", "label2", "in", "enumerate", "(", "labels", ")", ":", "\n", "\n", "                ", "if", "jdx", ">", "idx", ":", "\n", "\n", "                    ", "outMat", "[", "idx", ",", "jdx", "]", "=", "get_mutual_information_from_count_dict", "(", "filteredLBow", "[", "label", "]", ",", "filteredLBow", "[", "label2", "]", ")", "\n", "\n", "outMat", "[", "jdx", ",", "idx", "]", "=", "outMat", "[", "idx", ",", "jdx", "]", "\n", "\n", "", "", "", "", "return", "np", ".", "mean", "(", "outMat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_class_imbalance": [[194, 214], ["len", "sum", "labelCounts.items", "numpy.sum", "classVals.append", "abs", "labelCounts.items"], "function", ["None"], ["", "def", "get_class_imbalance", "(", "labelCounts", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the imbalance in classes in the data.\n\n    :param labelCounts : dictionary mapping labels to a count of their occurences in the data.\n    :type labelCounts  : dict\n\n    :return         : class imbalance metric\n    \"\"\"", "\n", "\n", "numClasses", "=", "len", "(", "labelCounts", ")", "\n", "totalData", "=", "sum", "(", "[", "val", "for", "key", ",", "val", "in", "labelCounts", ".", "items", "(", ")", "]", ")", "\n", "classVals", "=", "[", "]", "\n", "\n", "for", "lab", ",", "count", "in", "labelCounts", ".", "items", "(", ")", ":", "\n", "        ", "classVals", ".", "append", "(", "abs", "(", "(", "1", "/", "numClasses", ")", "-", "(", "count", "/", "totalData", ")", ")", ")", "\n", "\n", "", "total", "=", "np", ".", "sum", "(", "classVals", ")", "\n", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_number_of_classes": [[216, 226], ["len"], "function", ["None"], ["", "def", "get_number_of_classes", "(", "labelsCounts", ")", ":", "\n", "    ", "\"\"\"\n    Counts how many classes there are in the dataset.\n\n    :param labelsCounts : a dictionary mapping labels to a count of their occurrences.\n    :type labelsCounts  : dict\n\n    :return             : the number of different labels in the dataset.\n    \"\"\"", "\n", "return", "len", "(", "labelsCounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_vocab_size": [[228, 238], ["len"], "function", ["None"], ["", "def", "get_vocab_size", "(", "bow", ")", ":", "\n", "    ", "\"\"\"\n    Gets the vocab size from a traditional bag of words\n\n    :param bow : traditional bag of words mapping words to a count of their occurences.\n    :type  bow : dict\n\n    :return    : the vocab size of the dataset\n    \"\"\"", "\n", "return", "len", "(", "bow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_vocab_ratio": [[240, 250], ["len", "sum", "bow.items"], "function", ["None"], ["", "def", "get_vocab_ratio", "(", "bow", ")", ":", "\n", "    ", "\"\"\"\n    Gets unique word count from a traditional bag of words\n\n    :param sents : traditional bag of words\n    :type  sents : dict\n\n    :return      : the count of unique word\n    \"\"\"", "\n", "return", "len", "(", "bow", ")", "/", "sum", "(", "[", "val", "for", "key", ",", "val", "in", "bow", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_mean_data_items_per_class": [[252, 266], ["sum", "len", "labelCounts.items"], "function", ["None"], ["", "def", "get_mean_data_items_per_class", "(", "labelCounts", ")", ":", "\n", "    ", "\"\"\"\n    Gets the mean number of data items per class by dividing the number of data items by the number of classes.\n\n    :param labelCounts : dictionary mapping labels to a count of their occurences in the data.\n    :type labelCounts  : dict\n\n    :return            : mean data items per class\n    \"\"\"", "\n", "\n", "totalItem", "=", "sum", "(", "[", "val", "for", "key", ",", "val", "in", "labelCounts", ".", "items", "(", ")", "]", ")", "\n", "meanItemPerClass", "=", "totalItem", "/", "len", "(", "labelCounts", ")", "\n", "\n", "return", "meanItemPerClass", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_minimum_data_items_in_a_class": [[268, 281], ["min", "labelCounts.items"], "function", ["None"], ["", "def", "get_minimum_data_items_in_a_class", "(", "labelCounts", ")", ":", "\n", "    ", "\"\"\"\n    Calculating which class has the smallest number of data items.\n\n    :param labelCounts : dictionary mapping labels to a count of their occurrences in the data.\n    :type labelCounts  : dict\n\n    :return            : minimum data items in classes\n    \"\"\"", "\n", "\n", "minItem", "=", "min", "(", "[", "val", "for", "key", ",", "val", "in", "labelCounts", ".", "items", "(", ")", "]", ")", "\n", "\n", "return", "minItem", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.metrics.difficulty_measures.get_average_sentence_length": [[283, 294], ["sum", "len"], "function", ["None"], ["", "def", "get_average_sentence_length", "(", "sentsLenList", ")", ":", "\n", "    ", "\"\"\"\n    calculating the average sentence length of the sentences in the dataset.\n\n    :param sentsLenList : a list of sentence length\n    :type sentsLenList  : list\n\n    :return             : average sentence length\n    \"\"\"", "\n", "\n", "return", "sum", "(", "sentsLenList", ")", "/", "len", "(", "sentsLenList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures.tokenize_sentence": [[42, 64], ["sentence.encode().decode.encode().decode", "sentence.encode().decode.translate", "sentence.translate.lower", "sentenceNoPunctuation.lower.split", "str.maketrans", "sentence.encode().decode.encode", "ord"], "function", ["None"], ["def", "tokenize_sentence", "(", "sentence", ")", ":", "\n", "    ", "\"\"\"\n    Splits a sentence into words, strips punctuation and turns it to lowercase.\n\n    :param sentence           : the sentence to tokenize.\n    :type sentence            : str\n\n    :return                   : list of words\n    \"\"\"", "\n", "\n", "# Get rid of non-ascii characters to avoid errors with unrecognised characters", "\n", "sentence", "=", "\"\"", ".", "join", "(", "[", "c", "for", "c", "in", "sentence", "if", "0", "<", "ord", "(", "c", ")", "<", "127", "]", ")", "\n", "\n", "sentence", "=", "sentence", ".", "encode", "(", "\"ascii\"", ",", "errors", "=", "\"ignore\"", ")", ".", "decode", "(", ")", "\n", "\n", "# Only works in Python 3", "\n", "sentenceNoPunctuation", "=", "sentence", ".", "translate", "(", "str", ".", "maketrans", "(", "\"\"", ",", "\"\"", ",", "string", ".", "punctuation", ")", ")", "\n", "\n", "sentenceLower", "=", "sentenceNoPunctuation", ".", "lower", "(", ")", "\n", "sentenceWords", "=", "sentenceLower", ".", "split", "(", ")", "\n", "\n", "return", "sentenceWords", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures.get_bags_of_words": [[66, 117], ["isinstance", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "zip", "print", "len", "len", "len", "len", "time.time", "data_structures._loading_bar", "data_structures.tokenize_sentence", "sentsLenList.append", "collections.defaultdict", "len"], "function", ["home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures._loading_bar", "home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures.tokenize_sentence"], ["", "def", "get_bags_of_words", "(", "sents", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Creates a \"label bag-of-words\" representation of the dataset and a normal bag of words for the dataset.\n    Also counts the occurences of each class. A \"label bag-of-words\" is a dictionary where the keys are the labels of\n    the dataset, and the values are bag-of-words dictionaries for the sentences in each class. For example for a\n    sentiment analysis task this could be:\n\n    {\n        \"positive\": {\"good\": 10, \"great\": 5, \"awesome\": 7, ...},\n        \"negative\": {\"bad\": 12, \"awful\": 3, \"abismal\": 5, ...}\n    }\n\n    A bag-of-words dictionary has keys as words and values as the count of occurrences of those words in the dataset.\n\n    :param sents  : a list of the sentences in the dataset. Each sentence is an untokenized string.\n    :type sents   : list\n\n    :param labels : a list of the labels in the dataset. There is one label for every sentence.\n    :type labels  : list\n\n    :return       : a label bag-of-words dictionary, a traditional bag of words, count of the labels, a list of sentence lengths\n    \"\"\"", "\n", "\n", "assert", "len", "(", "sents", ")", ">", "0", ",", "\"You must provide at least one item of data\"", "\n", "assert", "len", "(", "sents", ")", "==", "len", "(", "labels", ")", ",", "\"The lists of sentences and labels must be the same length\"", "\n", "assert", "isinstance", "(", "sents", "[", "0", "]", ",", "str", ")", ",", "\"The sentence list must be a list of strings\"", "\n", "\n", "labelBow", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "bow", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "labelCount", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "sentsLenList", "=", "[", "]", "\n", "count", ",", "numSents", ",", "startTime", "=", "0", ",", "len", "(", "sents", ")", ",", "time", ".", "time", "(", ")", "\n", "\n", "for", "sent", ",", "label", "in", "zip", "(", "sents", ",", "labels", ")", ":", "\n", "\n", "        ", "count", "=", "_loading_bar", "(", "count", ",", "30", ",", "numSents", ",", "startTime", ")", "\n", "\n", "words", "=", "tokenize_sentence", "(", "sent", ")", "\n", "\n", "labelCount", "[", "label", "]", "+=", "1", "\n", "\n", "sentsLenList", ".", "append", "(", "len", "(", "sent", ")", ")", "\n", "\n", "for", "word", "in", "words", ":", "\n", "\n", "            ", "labelBow", "[", "label", "]", "[", "word", "]", "+=", "1", "\n", "bow", "[", "word", "]", "+=", "1", "\n", "\n", "", "", "print", "(", ")", "\n", "\n", "return", "labelBow", ",", "bow", ",", "labelCount", ",", "sentsLenList", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures.count_labels": [[119, 141], ["collections.defaultdict", "print", "len", "time.time", "data_structures._loading_bar"], "function", ["home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures._loading_bar"], ["", "def", "count_labels", "(", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Counts the occurrences of labels in the dataset.\n\n    :param labels : a list of the labels in the dataset. There is one label for every sentence.\n    :type labels  : list\n\n    :return       : a mapping from classes to the count of their occurences.\n    \"\"\"", "\n", "labelCount", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "\n", "count", ",", "numLabels", ",", "startTime", "=", "0", ",", "len", "(", "labels", ")", ",", "time", ".", "time", "(", ")", "\n", "\n", "for", "label", "in", "labels", ":", "\n", "\n", "        ", "count", "=", "_loading_bar", "(", "count", ",", "30", ",", "numLabels", ",", "startTime", ")", "\n", "\n", "labelCount", "[", "label", "]", "+=", "1", "\n", "\n", "", "print", "(", ")", "\n", "\n", "return", "labelCount", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures.filter_top_words": [[143, 167], ["collections.defaultdict", "labelBagOfWords.items", "sorted", "dict", "operator.itemgetter", "bow.items"], "function", ["None"], ["", "def", "filter_top_words", "(", "labelBagOfWords", ",", "filterNum", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Filters all words out of the bag of words counts for each bag of words in the provided dictionary except for the\n    top N words. After this function runs, only the top N most frequent words will remain. Only non-stopword words will\n    be retained.\n\n    :param labelBagOfWords : bag of ngrams in a specific format. Keys are the labels of the dataset, and the values are\n                             bag-of-words dictionaries for the sentences in each class.\n    :type labelBagOfWords  : dict\n\n    :param filterNum       : top N frequent words to keep, default 10.\n    :type filterNum        : int\n\n    :return                : labelBagOfWords with filtered counts.\n    \"\"\"", "\n", "filteredBow", "=", "collections", ".", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "label", ",", "bow", "in", "labelBagOfWords", ".", "items", "(", ")", ":", "\n", "\n", "        ", "sortedBowList", "=", "sorted", "(", "[", "(", "key", ",", "val", ")", "for", "key", ",", "val", "in", "bow", ".", "items", "(", ")", "]", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", "\n", "newBowList", "=", "[", "x", "for", "x", "in", "sortedBowList", "if", "x", "[", "0", "]", "not", "in", "STOPWORDS", "]", "[", ":", "filterNum", "]", "\n", "filteredBow", "[", "label", "]", "=", "dict", "(", "newBowList", ")", "\n", "\n", "", "return", "filteredBow", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.datastructures.data_structures._loading_bar": [[177, 217], ["int", "print", "round", "print", "print", "round", "print", "print", "time.time"], "function", ["None"], ["", "def", "_loading_bar", "(", "count", ",", "numSections", ",", "total", ",", "startTime", ")", ":", "\n", "    ", "\"\"\"\n    Prints a loading bar.\n    \"\"\"", "\n", "numPerSection", "=", "int", "(", "total", "/", "numSections", ")", "\n", "\n", "sections", "=", "0", "\n", "i", "=", "0", "\n", "while", "i", "<", "count", ":", "\n", "        ", "sections", "+=", "1", "\n", "i", "+=", "numPerSection", "\n", "\n", "", "print", "(", "\"[\"", ",", "end", "=", "\"\"", ")", "\n", "\n", "numPrinted", "=", "0", "\n", "while", "numPrinted", "<", "sections", ":", "\n", "        ", "print", "(", "\"-\"", ",", "end", "=", "\"\"", ")", "\n", "numPrinted", "+=", "1", "\n", "\n", "", "while", "numPrinted", "<", "numSections", ":", "\n", "        ", "print", "(", "\" \"", ",", "end", "=", "\"\"", ")", "\n", "numPrinted", "+=", "1", "\n", "\n", "", "percentDone", "=", "round", "(", "count", "*", "100", "/", "total", ",", "1", ")", "\n", "\n", "if", "percentDone", ">", "0", ":", "\n", "\n", "        ", "timeTaken", "=", "time", ".", "time", "(", ")", "-", "startTime", "\n", "\n", "secsRemaining", "=", "(", "(", "(", "100", "/", "percentDone", ")", "*", "timeTaken", ")", "-", "timeTaken", ")", "\n", "\n", "minsRemaining", "=", "round", "(", "secsRemaining", "/", "60", ",", "1", ")", "\n", "\n", "print", "(", "\"] : {} of {}, {}% : Est. {} mins Remaining\"", ".", "format", "(", "count", ",", "total", ",", "percentDone", ",", "minsRemaining", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "print", "(", "\"] : {} of {} {}% : Est. -- mins Remaining\"", ".", "format", "(", "count", ",", "total", ",", "percentDone", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "", "return", "count", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Wluper_edm.tests.test_data_structures.load_data": [[31, 45], ["open", "csv.reader", "data.append"], "function", ["None"], ["def", "load_data", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Loads the dataset from a .csv file. Assumes that the first item in each row is the text and the second is the\n    label.\n    \"\"\"", "\n", "data", "=", "[", "]", "\n", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "line", "in", "reader", ":", "\n", "            ", "if", "line", ":", "\n", "                ", "data", ".", "append", "(", "line", ")", "\n", "\n", "", "", "", "return", "[", "x", "[", "0", "]", "for", "x", "in", "data", "]", ",", "[", "x", "[", "2", "]", "for", "x", "in", "data", "]", "\n", "\n"]]}