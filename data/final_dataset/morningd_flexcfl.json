{"home.repos.pwc.inspect_result.morningd_flexcfl.None.main.main": [[7, 12], ["utils.trainer_utils.TrainConfig", "flearn.trainer.fedavg.FedAvg", "flearn.trainer.fedavg.FedAvg.train"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train"], ["def", "main", "(", ")", ":", "\n", "    ", "config", "=", "TrainConfig", "(", "'femnist'", ",", "'mlp'", ",", "'fedavg'", ")", "\n", "config", ".", "trainer_config", "[", "'dynamic'", "]", "=", "False", "\n", "trainer", "=", "FedAvg", "(", "config", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "#trainer.train_locally()", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.None.main.main_flexcfl": [[14, 21], ["utils.trainer_utils.TrainConfig", "flearn.trainer.fedgroup.FedGroup", "flearn.trainer.fedgroup.FedGroup.train"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train"], ["", "def", "main_flexcfl", "(", ")", ":", "\n", "    ", "config", "=", "TrainConfig", "(", "'femnist'", ",", "'mlp'", ",", "'fedgroup'", ")", "\n", "config", ".", "trainer_config", "[", "'dynamic'", "]", "=", "True", "\n", "config", ".", "trainer_config", "[", "'shift_type'", "]", "=", "\"all\"", "\n", "config", ".", "trainer_config", "[", "'swap_p'", "]", "=", "0.05", "\n", "trainer", "=", "FedGroup", "(", "config", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.__init__": [[6, 27], ["export_result.ResultWriter.make_filename", "os.path.join", "export_result.ResultWriter.make_header", "export_result.ResultWriter.make_index", "pandas.Index", "pandas.DataFrame", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.make_filename", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.make_header", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.make_index"], ["    ", "def", "__init__", "(", "self", ",", "train_config", ")", ":", "\n", "        ", "filename", "=", "self", ".", "make_filename", "(", "train_config", ")", "\n", "dir", "=", "train_config", ".", "results_path", "\n", "self", ".", "filepath", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "# Write the file every 10 entry", "\n", "", "self", ".", "write_every", "=", "10", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "num_rounds", "=", "train_config", ".", "trainer_config", "[", "'num_rounds'", "]", "\n", "self", ".", "eval_every", "=", "train_config", ".", "trainer_config", "[", "'eval_every'", "]", "\n", "self", ".", "trainer_type", "=", "train_config", ".", "trainer_type", "\n", "self", ".", "migration", "=", "train_config", ".", "trainer_config", "[", "'dynamic'", "]", "\n", "if", "'num_group'", "in", "train_config", ".", "trainer_config", ":", "\n", "            ", "self", ".", "num_group", "=", "train_config", ".", "trainer_config", "[", "'num_group'", "]", "\n", "\n", "", "header", "=", "self", ".", "make_header", "(", ")", "\n", "index", "=", "self", ".", "make_index", "(", ")", "\n", "idx", "=", "pd", ".", "Index", "(", "index", ",", "name", "=", "'Round'", ")", "\n", "self", ".", "df", "=", "pd", ".", "DataFrame", "(", "index", "=", "idx", ",", "columns", "=", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.make_header": [[28, 37], ["range"], "methods", ["None"], ["", "def", "make_header", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "trainer_type", "==", "'fedavg'", ":", "\n", "            ", "header", "=", "[", "'TestAcc'", ",", "'TrainAcc'", ",", "'TrainLoss'", ",", "'NumClient'", ",", "'Discrepancy'", "]", "\n", "", "if", "self", ".", "trainer_type", "in", "[", "'fedgroup'", ",", "'ifca'", ",", "'fesem'", "]", ":", "\n", "            ", "header", "=", "[", "'WeightedTestAcc'", ",", "'WeightedTrainAcc'", ",", "'WeightedTrainLoss'", ",", "'NumGroup'", ",", "'Discrepancy'", "]", "\n", "if", "self", ".", "migration", "==", "True", ":", "header", "+=", "[", "'Shift'", ",", "'Migration'", "]", "\n", "for", "gid", "in", "range", "(", "self", ".", "num_group", ")", ":", "\n", "                ", "header", "+=", "[", "f'G{gid}TestAcc'", ",", "f'G{gid}TrainAcc'", ",", "f'G{gid}TrainLoss'", ",", "f'G{gid}Diff'", ",", "f'G{gid}NumClinet'", "]", "\n", "", "", "return", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.make_index": [[38, 47], ["list", "list.append", "range", "list.append"], "methods", ["None"], ["", "def", "make_index", "(", "self", ")", ":", "\n", "        ", "eval_rounds", "=", "list", "(", "range", "(", "0", ",", "self", ".", "num_rounds", ",", "self", ".", "eval_every", ")", ")", "\n", "# The last round must be included", "\n", "if", "(", "self", ".", "num_rounds", "-", "1", ")", "not", "in", "eval_rounds", ":", "\n", "            ", "eval_rounds", ".", "append", "(", "self", ".", "num_rounds", "-", "1", ")", "\n", "\n", "# We use (num_rounds+1) row to store the max test accuracy", "\n", "", "eval_rounds", ".", "append", "(", "self", ".", "num_rounds", "+", "1", ")", "\n", "return", "eval_rounds", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.make_filename": [[49, 81], ["None"], "methods", ["None"], ["", "def", "make_filename", "(", "self", ",", "config", ")", ":", "\n", "        ", "filename", "=", "''", "\n", "trainer_type", "=", "config", ".", "trainer_type", "\n", "dataset", "=", "config", ".", "trainer_config", "[", "'dataset'", "]", "\n", "model", "=", "config", ".", "trainer_config", "[", "'model'", "]", "\n", "filename", "=", "filename", "+", "f'{trainer_type}-{dataset}-{model}'", "\n", "shift_type", "=", "config", ".", "trainer_config", "[", "'shift_type'", "]", "\n", "if", "shift_type", "in", "[", "'all'", ",", "'part'", "]", ":", "\n", "            ", "swap", "=", "config", ".", "trainer_config", "[", "'swap_p'", "]", "\n", "if", "swap", ">", "0", "and", "swap", "<", "1", ":", "filename", "+=", "f'-{shift_type}_swap{swap}'", "\n", "", "if", "shift_type", "==", "'increment'", ":", "\n", "            ", "filename", "+=", "f'-incr'", "\n", "", "if", "trainer_type", "==", "'fedgroup'", ":", "\n", "            ", "measure", "=", "config", ".", "trainer_config", "[", "'measure'", "]", "\n", "num_group", "=", "config", ".", "trainer_config", "[", "'num_group'", "]", "\n", "RAC", "=", "config", ".", "trainer_config", "[", "'RAC'", "]", "\n", "RCC", "=", "config", ".", "trainer_config", "[", "'RCC'", "]", "\n", "temp", "=", "config", ".", "client_config", "[", "'temperature'", "]", "\n", "temp_metrics", "=", "config", ".", "trainer_config", "[", "'temp_metrics'", "]", "\n", "temp_func", "=", "config", ".", "trainer_config", "[", "'temp_func'", "]", "\n", "dynamic", "=", "config", ".", "trainer_config", "[", "'dynamic'", "]", "\n", "agglr", "=", "config", ".", "trainer_config", "[", "'group_agg_lr'", "]", "\n", "temp_agg", "=", "config", ".", "trainer_config", "[", "'temp_agg'", "]", "\n", "filename", "=", "filename", "+", "f'-FG{num_group}-{measure}-agglr{agglr}-tempagg{temp_agg}'", "\n", "if", "dynamic", "==", "True", ":", "\n", "               ", "if", "temp", "is", "not", "None", ":", "filename", "+=", "f'-TEMP{temp}-{temp_metrics}-{temp_func}'", "\n", "", "else", ":", "\n", "                ", "filename", "+=", "'-static'", "\n", "", "if", "RAC", "==", "True", ":", "filename", "+=", "'-RAC'", "\n", "if", "RCC", "==", "True", ":", "filename", "+=", "'-RCC'", "\n", "", "filename", "+=", "'.xlsx'", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.write_row": [[83, 102], ["export_result.ResultWriter.df.to_excel", "numpy.max", "print", "export_result.ResultWriter.df.to_excel"], "methods", ["None"], ["", "def", "write_row", "(", "self", ",", "round", ",", "result", ")", ":", "\n", "\n", "        ", "if", "self", ".", "trainer_type", "==", "'fedavg'", ":", "\n", "            ", "test_acc", "=", "'TestAcc'", "\n", "", "if", "self", ".", "trainer_type", "in", "[", "'fedgroup'", ",", "'ifca'", ",", "'fesem'", "]", ":", "\n", "            ", "test_acc", "=", "'WeightedTestAcc'", "\n", "\n", "", "self", ".", "df", ".", "loc", "[", "round", "]", "=", "result", "\n", "if", "self", ".", "count", "%", "self", ".", "write_every", "==", "0", ":", "\n", "            ", "self", ".", "df", ".", "to_excel", "(", "self", ".", "filepath", ")", "\n", "", "self", ".", "count", "+=", "1", "\n", "# Summary the result and write", "\n", "if", "round", "==", "(", "self", ".", "num_rounds", "-", "1", ")", ":", "\n", "            ", "max_test_acc", "=", "np", ".", "max", "(", "self", ".", "df", "[", "test_acc", "]", ")", "\n", "print", "(", "f\"The Max Test Accuracy is {max_test_acc}!\"", ")", "\n", "# Save the max accuracy to num_rounds+1 row", "\n", "self", ".", "df", ".", "loc", "[", "self", ".", "num_rounds", "+", "1", "]", "[", "test_acc", "]", "=", "max_test_acc", "\n", "self", ".", "df", ".", "to_excel", "(", "self", ".", "filepath", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.write_summary": [[103, 123], ["range", "export_result.ResultWriter.write_row"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.write_row"], ["", "def", "write_summary", "(", "self", ",", "round", ",", "train_summary", ",", "test_summary", ",", "diffs", ",", "schedule_results", "=", "None", ")", ":", "\n", "        ", "num_sublink", ",", "train_acc", ",", "train_loss", "=", "train_summary", "[", "'Total'", "]", "\n", "_", ",", "test_acc", ",", "_", "=", "test_summary", "[", "'Total'", "]", "\n", "discrepancy", "=", "diffs", "[", "'Total'", "]", "\n", "row", "=", "[", "test_acc", ",", "train_acc", ",", "train_loss", ",", "num_sublink", ",", "discrepancy", "]", "\n", "if", "self", ".", "migration", "==", "True", "and", "schedule_results", "is", "not", "None", ":", "\n", "            ", "shift", ",", "migration", "=", "schedule_results", "[", "'shift'", "]", ",", "schedule_results", "[", "'migration'", "]", "\n", "row", "+=", "[", "shift", ",", "migration", "]", "\n", "", "for", "gid", "in", "range", "(", "self", ".", "num_group", ")", ":", "\n", "            ", "if", "f'G{gid}'", "in", "diffs", ":", "# The group has sublink clients", "\n", "                ", "train_acc", ",", "train_loss", ",", "_", "=", "train_summary", "[", "f'G{gid}'", "]", "\n", "_", ",", "test_acc", ",", "_", "=", "test_summary", "[", "f'G{gid}'", "]", "\n", "num_clients", ",", "discrepancy", "=", "diffs", "[", "f'G{gid}'", "]", "\n", "", "else", ":", "# The group has not client this round", "\n", "                ", "num_clients", "=", "0", "\n", "train_acc", ",", "train_loss", ",", "test_acc", ",", "discrepancy", "=", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", "\n", "\n", "", "row", "+=", "[", "test_acc", ",", "train_acc", ",", "train_loss", ",", "discrepancy", ",", "num_clients", "]", "\n", "", "self", ".", "write_row", "(", "round", ",", "row", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.__del__": [[124, 127], ["export_result.ResultWriter.df.to_excel"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "df", ".", "to_excel", "(", "self", ".", "filepath", ")", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_fedprox_json": [[7, 50], ["pathlib.Path.iterdir", "pathlib.Path.iterdir", "list", "list.extend", "train_npdata.update", "test_npdata.update", "sorted", "open", "json.load", "open", "json.load", "train_npdata.keys"], "function", ["None"], ["def", "read_fedprox_json", "(", "train_data_dir", ",", "test_data_dir", ")", ":", "\n", "    ", "'''parses data in given train and test data directories\n\n    assumes:\n    - the data in the input directories are .json files with \n        keys 'users' and 'user_data'\n    - the set of train set users is the same as the set of test set users\n    \n    Return:\n        clients: list of client ids\n        train_data: dictionary of train (numpy) data\n        test_data: dictionary of test (numpy) data\n    '''", "\n", "clients", "=", "[", "]", "\n", "train_npdata", "=", "{", "}", "\n", "test_npdata", "=", "{", "}", "\n", "\n", "train_files", "=", "Path", ".", "iterdir", "(", "train_data_dir", ")", "\n", "train_files", "=", "[", "f", "for", "f", "in", "train_files", "if", "f", ".", "suffix", "==", "'.json'", "]", "\n", "for", "file_path", "in", "train_files", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "inf", ":", "\n", "            ", "cdata", "=", "json", ".", "load", "(", "inf", ")", "\n", "", "clients", ".", "extend", "(", "cdata", "[", "'users'", "]", ")", "\n", "train_npdata", ".", "update", "(", "cdata", "[", "'user_data'", "]", ")", "\n", "\n", "", "test_files", "=", "Path", ".", "iterdir", "(", "test_data_dir", ")", "\n", "test_files", "=", "[", "f", "for", "f", "in", "test_files", "if", "f", ".", "suffix", "==", "'.json'", "]", "\n", "for", "file_path", "in", "test_files", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "inf", ":", "\n", "            ", "cdata", "=", "json", ".", "load", "(", "inf", ")", "\n", "", "test_npdata", ".", "update", "(", "cdata", "[", "'user_data'", "]", ")", "\n", "\n", "", "clients", "=", "list", "(", "sorted", "(", "train_npdata", ".", "keys", "(", ")", ")", ")", "\n", "\n", "'''\n    # Convert numpy train\\test data to tf.Dataset format\n    train_tfdata, test_tfdata = {}, {}\n    for c in clients:\n        print(\"handling\", c)\n        train_tfdata[c] = tf.data.Dataset.from_tensor_slices((train_npdata[c]['x'], train_npdata[c]['y']))\n        test_tfdata[c] = tf.data.Dataset.from_tensor_slices((test_npdata[c]['x'], test_npdata[c]['y']))\n    '''", "\n", "return", "clients", ",", "train_npdata", ",", "test_npdata", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.text2embs": [[51, 89], ["numpy.array", "open", "json.load", "re.findall", "int", "len", "dataset.items", "new_dataset_list.append", "enumerate", "zip", "len", "_line_to_embs.append", "_line_to_embs.append", "read_data.text2embs._line_to_embs"], "function", ["None"], ["", "def", "text2embs", "(", "dataset_list", ",", "emb_file", ",", "max_words", "=", "20", ")", ":", "\n", "\n", "    ", "with", "open", "(", "emb_file", ",", "'r'", ")", "as", "inf", ":", "\n", "        ", "embs", "=", "json", ".", "load", "(", "inf", ")", "\n", "", "id2word", "=", "embs", "[", "'vocab'", "]", "\n", "word2id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "id2word", ")", "}", "\n", "word_emb", "=", "np", ".", "array", "(", "embs", "[", "'emba'", "]", ")", "\n", "\n", "def", "_line_to_embs", "(", "line", ",", "w2d", ",", "d2e", ",", "max_words", ")", ":", "\n", "        ", "word_list", "=", "re", ".", "findall", "(", "r\"[\\w']+|[.,!?;]\"", ",", "line", ")", "\n", "pad", "=", "int", "(", "max_words", "-", "len", "(", "word_list", ")", ")", "\n", "pad_index", "=", "len", "(", "w2d", ")", "\n", "if", "pad", "<=", "0", ":", "\n", "# Clip to max length", "\n", "            ", "word_list", "=", "word_list", "[", ":", "max_words", "]", "\n", "", "embs", "=", "[", "]", "\n", "for", "word", "in", "word_list", ":", "\n", "            ", "if", "word", "in", "w2d", ":", "\n", "                ", "embs", ".", "append", "(", "d2e", "[", "w2d", "[", "word", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "embs", ".", "append", "(", "d2e", "[", "pad_index", "]", ")", "\n", "", "", "if", "pad", ">", "0", ":", "\n", "# Add padding to the front of emb", "\n", "            ", "embs", "=", "[", "d2e", "[", "pad_index", "]", "]", "*", "pad", "+", "embs", "\n", "", "return", "embs", "\n", "\n", "", "new_dataset_list", "=", "[", "]", "\n", "for", "dataset", "in", "dataset_list", ":", "\n", "        ", "for", "c", ",", "data", "in", "dataset", ".", "items", "(", ")", ":", "\n", "            ", "embs_list", ",", "labels_list", "=", "[", "]", ",", "[", "]", "\n", "for", "post", ",", "label", "in", "zip", "(", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", ")", ":", "\n", "                ", "embs", "=", "_line_to_embs", "(", "post", "[", "4", "]", ",", "word2id", ",", "word_emb", ",", "max_words", ")", "\n", "embs_list", ".", "append", "(", "embs", ")", "\n", "labels_list", "+=", "[", "1", "if", "label", "==", "'4'", "else", "0", "]", "\n", "", "dataset", "[", "c", "]", "[", "'x'", "]", "=", "embs_list", "\n", "dataset", "[", "c", "]", "[", "'y'", "]", "=", "labels_list", "\n", "", "new_dataset_list", ".", "append", "(", "dataset", ")", "\n", "", "return", "new_dataset_list", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_mnist": [[91, 93], ["read_data.read_fedprox_json"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_fedprox_json"], ["", "def", "read_mnist", "(", "train_data_dir", ",", "test_data_dir", ")", ":", "\n", "    ", "return", "read_fedprox_json", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_femnist": [[94, 96], ["read_data.read_fedprox_json"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_fedprox_json"], ["", "def", "read_femnist", "(", "train_data_dir", ",", "test_data_dir", ")", ":", "\n", "    ", "return", "read_fedprox_json", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_fmnist": [[97, 99], ["read_data.read_fedprox_json"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_fedprox_json"], ["", "def", "read_fmnist", "(", "train_data_dir", ",", "test_data_dir", ")", ":", "\n", "    ", "return", "read_fedprox_json", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_synthetic": [[100, 102], ["read_data.read_fedprox_json"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_fedprox_json"], ["", "def", "read_synthetic", "(", "train_data_dir", ",", "test_data_dir", ")", ":", "\n", "    ", "return", "read_fedprox_json", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_sent140": [[103, 105], ["read_data.read_fedprox_json"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_fedprox_json"], ["", "def", "read_sent140", "(", "train_data_dir", ",", "test_data_dir", ")", ":", "\n", "    ", "return", "read_fedprox_json", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_federated_data": [[106, 146], ["pathlib.Path().parent.parent.absolute", "pathlib.Path.joinpath().absolute", "pathlib.Path.joinpath().absolute", "dsname.startswith", "dsname.startswith", "train_data.keys", "test_data.keys", "print", "print", "read_data.read_mnist", "read_data.read_femnist", "read_data.read_fmnist", "read_data.read_synthetic", "pathlib.Path.joinpath().absolute", "read_data.read_sent140", "read_data.text2embs", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pathlib.Path.joinpath", "pathlib.Path.joinpath", "pathlib.Path.joinpath", "len", "len", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_mnist", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_femnist", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_fmnist", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_synthetic", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_sent140", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.text2embs"], ["", "def", "read_federated_data", "(", "dsname", ")", ":", "\n", "    ", "clients", "=", "[", "]", "\n", "train_data", "=", "{", "}", "\n", "test_data", "=", "{", "}", "\n", "train_size", ",", "test_size", "=", "0", ",", "0", "\n", "wspath", "=", "Path", "(", "__file__", ")", ".", "parent", ".", "parent", ".", "absolute", "(", ")", "# The working path of SplitGP", "\n", "# The training data directory", "\n", "train_data_dir", "=", "Path", ".", "joinpath", "(", "wspath", ",", "'data'", ",", "dsname", ",", "'data'", ",", "'train'", ")", ".", "absolute", "(", ")", "\n", "# The testing data directory", "\n", "test_data_dir", "=", "Path", ".", "joinpath", "(", "wspath", ",", "'data'", ",", "dsname", ",", "'data'", ",", "'test'", ")", ".", "absolute", "(", ")", "\n", "\n", "if", "dsname", ".", "startswith", "(", "'mnist'", ")", ":", "\n", "        ", "clients", ",", "train_data", ",", "test_data", "=", "read_mnist", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "", "if", "dsname", "==", "'femnist'", ":", "\n", "        ", "clients", ",", "train_data", ",", "test_data", "=", "read_femnist", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "", "if", "dsname", "==", "'fmnist'", ":", "\n", "        ", "clients", ",", "train_data", ",", "test_data", "=", "read_fmnist", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "", "if", "dsname", ".", "startswith", "(", "'synthetic'", ")", ":", "\n", "        ", "clients", ",", "train_data", ",", "test_data", "=", "read_synthetic", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "", "if", "dsname", "==", "'sent140'", ":", "\n", "        ", "max_words", "=", "25", "\n", "emb_file", "=", "Path", ".", "joinpath", "(", "wspath", ",", "'data'", ",", "dsname", ",", "'embs.json'", ")", ".", "absolute", "(", ")", "\n", "clients", ",", "train_data", ",", "test_data", "=", "read_sent140", "(", "train_data_dir", ",", "test_data_dir", ")", "\n", "embs", "=", "text2embs", "(", "[", "train_data", ",", "test_data", "]", ",", "emb_file", ",", "max_words", ")", "\n", "train_data", ",", "test_data", "=", "embs", "[", "0", "]", ",", "embs", "[", "1", "]", "\n", "\n", "# Convert list to numpy array", "\n", "", "for", "c", "in", "train_data", ".", "keys", "(", ")", ":", "\n", "        ", "train_data", "[", "c", "]", "[", "'x'", "]", "=", "np", ".", "array", "(", "train_data", "[", "c", "]", "[", "'x'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# shape=(num_samples, num_features)", "\n", "train_data", "[", "c", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "train_data", "[", "c", "]", "[", "'y'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "# shape=(num_samples, )", "\n", "train_size", "+=", "train_data", "[", "c", "]", "[", "'y'", "]", ".", "shape", "[", "0", "]", "\n", "", "for", "c", "in", "test_data", ".", "keys", "(", ")", ":", "\n", "        ", "test_data", "[", "c", "]", "[", "'x'", "]", "=", "np", ".", "array", "(", "test_data", "[", "c", "]", "[", "'x'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "test_data", "[", "c", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "test_data", "[", "c", "]", "[", "'y'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "test_size", "+=", "test_data", "[", "c", "]", "[", "'y'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# Print the size of this dataset and client count", "\n", "", "print", "(", "f'The dataset size: {train_size + test_size}, train size: {train_size}, test size: {test_size}.'", ")", "\n", "print", "(", "f'The train client count: {len(train_data)}. The test client count: {len(test_data)}.'", ")", "\n", "return", "clients", ",", "train_data", ",", "test_data", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.test_actor.construct_model": [[15, 30], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "function", ["None"], ["def", "construct_model", "(", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "784", ",", ")", ")", ")", "\n", "# Hidden Layer", "\n", "#model.add(Dense(128, 'relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)))", "\n", "model", ".", "add", "(", "Dense", "(", "16", ",", "'relu'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "#debug", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "0.03", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.test_actor.main": [[31, 47], ["utils.read_data.read_federated_data", "test_actor.construct_model", "flearn.client.Client", "flearn.client.Client.train", "flearn.client.Client.test", "print", "print"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_federated_data", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn.construct_model", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "workspace_path", "=", "'/home/lab/workspace/SplitGP/data'", "\n", "clients", ",", "train_data", ",", "test_data", "=", "read_federated_data", "(", "'mnist'", ")", "\n", "id", "=", "'f_00000'", "\n", "#print(clients[0])", "\n", "#print(len(train_data[id]['x'][0]))", "\n", "\n", "model", "=", "construct_model", "(", ")", "\n", "\n", "#ator = Actor(id, 'client', train_data[id], test_data[id], model)", "\n", "#num_samples, updates = ator.solve_inner()", "\n", "client", "=", "Client", "(", "id", ",", "train_data", "[", "id", "]", ",", "test_data", "[", "id", "]", ",", "model", "=", "model", ")", "\n", "num_samples", ",", "acc", ",", "loss", ",", "updates", "=", "client", ".", "train", "(", ")", "\n", "num", ",", "test_acc", ",", "test_loss", "=", "client", ".", "test", "(", ")", "\n", "print", "(", "'num_samples'", ",", "num", ")", "\n", "print", "(", "test_acc", ",", "test_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.test_read_data.main": [[7, 16], ["test_read_data.test_model", "read_data.read_federated_data", "print", "print", "print", "numpy.shape"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.test_read_data.test_model", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_federated_data"], ["def", "main", "(", ")", ":", "\n", "    ", "dsname", "=", "\"femnist\"", "\n", "test_model", "(", ")", "\n", "\n", "clients", ",", "train_data", ",", "test_data", "=", "read_federated_data", "(", "dsname", ")", "\n", "\n", "print", "(", "clients", ")", "\n", "print", "(", "\"Input shape of first client:\"", ",", "np", ".", "shape", "(", "train_data", "[", "clients", "[", "0", "]", "]", "[", "'x'", "]", ")", ")", "\n", "print", "(", "\"Labels of first client:\"", ",", "train_data", "[", "clients", "[", "0", "]", "]", "[", "'y'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.test_read_data.test_model": [[18, 35], ["test_read_data.test_model._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["", "def", "test_model", "(", ")", ":", "\n", "    ", "def", "_construct_client_model", "(", "lr", ")", ":", "\n", "        ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "25", ",", "300", ")", ")", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "LSTM", "(", "64", ",", "return_sequences", "=", "True", ")", ")", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "LSTM", "(", "32", ")", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "# Output layer", "\n", "model", ".", "add", "(", "Dense", "(", "1", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "BinaryCrossentropy", "(", "from_logits", "=", "True", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n", "", "model", "=", "_construct_client_model", "(", "lr", "=", "0.3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.test_trainer.main": [[7, 14], ["utils.trainer_utils.TrainConfig", "flearn.trainer.fedavg.FedAvg", "flearn.trainer.fedavg.FedAvg.train"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train"], ["def", "main", "(", ")", ":", "\n", "    ", "config", "=", "TrainConfig", "(", "'sent140'", ",", "'gru'", ",", "'fedavg'", ")", "\n", "config", ".", "trainer_config", "[", "'dynamic'", "]", "=", "False", "\n", "config", ".", "trainer_config", "[", "'swap_p'", "]", "=", "0.0", "\n", "trainer", "=", "FedAvg", "(", "config", ")", "\n", "#trainer.train_locally()", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.TrainConfig.__init__": [[8, 96], ["trainer_utils.TrainConfig.trainer_config[].startswith", "trainer_utils.TrainConfig.trainer_config[].startswith", "trainer_utils.TrainConfig.client_config.update", "trainer_utils.TrainConfig.trainer_config.update", "trainer_utils.TrainConfig.client_config.update", "trainer_utils.TrainConfig.trainer_config.update", "trainer_utils.TrainConfig.client_config.update", "trainer_utils.TrainConfig.trainer_config.update", "trainer_utils.TrainConfig.trainer_config.update", "trainer_utils.TrainConfig.client_config.update", "trainer_utils.TrainConfig.trainer_config.update", "trainer_utils.TrainConfig.client_config.update", "trainer_utils.TrainConfig.trainer_config.update", "trainer_utils.TrainConfig.trainer_config.update", "trainer_utils.TrainConfig.trainer_config.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "model", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "trainer_type", "=", "trainer", "\n", "self", ".", "results_path", "=", "f'results/{dataset}/'", "\n", "\n", "self", ".", "trainer_config", "=", "{", "\n", "# This is common config of trainer", "\n", "'dataset'", ":", "dataset", ",", "\n", "'model'", ":", "model", ",", "\n", "'seed'", ":", "2077", ",", "\n", "'num_rounds'", ":", "300", ",", "\n", "'clients_per_round'", ":", "20", ",", "\n", "'eval_every'", ":", "1", ",", "\n", "'eval_locally'", ":", "True", ",", "\n", "'swap_p'", ":", "0", ",", "# Randomly swap two warm clients with probability", "\n", "'shift_type'", ":", "None", "# {all, part, increment}", "\n", "}", "\n", "\n", "self", ".", "client_config", "=", "{", "\n", "# This is common config of client", "\n", "'local_epochs'", ":", "10", ",", "\n", "# However, we compile lr to model", "\n", "'learning_rate'", ":", "0.003", ",", "\n", "'batch_size'", ":", "10", ",", "\n", "# The dynamic reassign clients strategy of FedGroup", "\n", "# temperature = None means disable this function", "\n", "'temperature'", ":", "None", "\n", "}", "\n", "\n", "if", "trainer", "in", "[", "'fedgroup'", ",", "'fesem'", ",", "'ifca'", "]", ":", "\n", "            ", "if", "trainer", "==", "'fedgroup'", ":", "\n", "                ", "self", ".", "trainer_config", ".", "update", "(", "{", "\n", "'num_group'", ":", "3", ",", "\n", "'group_agg_lr'", ":", "0.0", ",", "\n", "'eval_global_model'", ":", "True", ",", "\n", "'pretrain_scale'", ":", "20", ",", "\n", "'measure'", ":", "'EDC'", ",", "# {EDC, MADC}", "\n", "'RAC'", ":", "False", ",", "\n", "'RCC'", ":", "False", ",", "\n", "'dynamic'", ":", "True", ",", "\n", "'temp_metrics'", ":", "'l2'", ",", "# {l2, consine}", "\n", "'temp_func'", ":", "'step'", ",", "# {step, linear, lied, eied} lied-> linear increase&exponential decrease", "\n", "'temp_agg'", ":", "False", ",", "\n", "'recluster_epoch'", ":", "None", "# [50, 100, 150]", "\n", "}", ")", "\n", "\n", "", "if", "trainer", "in", "[", "'fesem'", ",", "'ifca'", "]", ":", "\n", "                ", "self", ".", "trainer_config", ".", "update", "(", "{", "\n", "'num_group'", ":", "3", ",", "\n", "# The iter-group aggregation is disabled", "\n", "'group_agg_lr'", ":", "0.0", ",", "\n", "'eval_global_model'", ":", "True", "\n", "}", ")", "\n", "\n", "", "self", ".", "group_config", "=", "{", "\n", "# Whether the models of all clients in the group are consistent\uff0c", "\n", "# which will greatly affect the test results.", "\n", "'consensus'", ":", "False", ",", "\n", "'max_clients'", ":", "999", ",", "\n", "'allow_empty'", ":", "True", "\n", "}", "\n", "\n", "", "if", "self", ".", "trainer_config", "[", "'dataset'", "]", "==", "'femnist'", ":", "\n", "            ", "self", ".", "client_config", ".", "update", "(", "{", "'learning_rate'", ":", "0.003", "}", ")", "\n", "self", ".", "trainer_config", ".", "update", "(", "{", "'num_group'", ":", "5", "}", ")", "\n", "\n", "", "if", "self", ".", "trainer_config", "[", "'dataset'", "]", ".", "startswith", "(", "'mnist'", ")", ":", "\n", "            ", "self", ".", "client_config", ".", "update", "(", "{", "'learning_rate'", ":", "0.03", "}", ")", "\n", "self", ".", "trainer_config", ".", "update", "(", "{", "'num_group'", ":", "3", "}", ")", "\n", "\n", "", "if", "self", ".", "trainer_config", "[", "'dataset'", "]", "==", "'sent140'", ":", "\n", "            ", "self", ".", "client_config", ".", "update", "(", "{", "'learning_rate'", ":", "0.3", "}", ")", "\n", "self", ".", "trainer_config", ".", "update", "(", "{", "'num_group'", ":", "5", "}", ")", "\n", "self", ".", "trainer_config", ".", "update", "(", "{", "'num_rounds'", ":", "800", "}", ")", "\n", "\n", "", "if", "self", ".", "trainer_config", "[", "'dataset'", "]", ".", "startswith", "(", "'synthetic'", ")", ":", "\n", "            ", "self", ".", "client_config", ".", "update", "(", "{", "'learning_rate'", ":", "0.01", "}", ")", "\n", "self", ".", "trainer_config", ".", "update", "(", "{", "'num_group'", ":", "5", "}", ")", "\n", "\n", "", "if", "self", ".", "trainer_config", "[", "'dataset'", "]", "==", "'fmnist'", ":", "\n", "            ", "self", ".", "client_config", ".", "update", "(", "{", "'learning_rate'", ":", "0.005", "}", ")", "\n", "self", ".", "trainer_config", ".", "update", "(", "{", "'num_group'", ":", "5", "}", ")", "\n", "\n", "", "if", "trainer", "==", "'splitfed'", ":", "\n", "#TODO: plan for split learning", "\n", "            ", "pass", "\n", "", "if", "trainer", "==", "'splitfg'", ":", "\n", "#TODO:", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.process_grad": [[97, 111], ["range", "len", "numpy.append"], "function", ["None"], ["", "", "", "def", "process_grad", "(", "grads", ")", ":", "\n", "    ", "'''\n    Args:\n        grads: grad \n    Return:\n        a flattened grad in numpy (1-D array)\n    '''", "\n", "\n", "client_grads", "=", "grads", "[", "0", "]", "# shape = (784, 10)", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "grads", ")", ")", ":", "\n", "        ", "client_grads", "=", "np", ".", "append", "(", "client_grads", ",", "grads", "[", "i", "]", ")", "# output a flattened array", "\n", "# (784, 10) append (10,)", "\n", "\n", "", "return", "client_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.calculate_cosine_dissimilarity": [[112, 117], ["trainer_utils.process_grad", "trainer_utils.process_grad", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.process_grad", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.process_grad"], ["", "def", "calculate_cosine_dissimilarity", "(", "w1", ",", "w2", ")", ":", "\n", "    ", "flat_w1", ",", "flat_w2", "=", "process_grad", "(", "w1", ")", ",", "process_grad", "(", "w2", ")", "\n", "cosine", "=", "np", ".", "dot", "(", "flat_w1", ",", "flat_w2", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "flat_w1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "flat_w2", ")", ")", "\n", "dissimilarity", "=", "(", "1.0", "-", "cosine", ")", "/", "2.0", "# scale to [0, 1] then flip", "\n", "return", "dissimilarity", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.__init__": [[11, 26], ["flearn.actor.Actor.__init__", "config.items", "len", "group.Group.add_uplink", "setattr"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.__init__", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_uplink"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "config", ",", "train_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "uplink", "=", "[", "]", ",", "model", "=", "None", ")", ":", "\n", "        ", "actor_type", "=", "'group'", "\n", "super", "(", "Group", ",", "self", ")", ".", "__init__", "(", "id", ",", "actor_type", ",", "train_data", ",", "test_data", ",", "model", "=", "model", ")", "\n", "if", "len", "(", "uplink", ")", ">", "0", ":", "\n", "            ", "self", ".", "add_uplink", "(", "uplink", ")", "\n", "\n", "# transfer client config to self", "\n", "", "for", "key", ",", "val", "in", "config", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n", "", "self", ".", "discrepancy", "=", "0", "# The mean discrepancy between this group and sublink node", "\n", "self", ".", "cosine_dissimilarity", "=", "0", "# The mean cosine dissimilarity between this group and sublink node", "\n", "\n", "self", ".", "opt_updates", "=", "None", "\n", "self", ".", "aggregation_strategy", "=", "'fedavg'", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.check_trainable": [[28, 42], ["group.Group.has_downlink", "node.check_trainable"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_trainable"], ["", "def", "check_trainable", "(", "self", ")", ":", "\n", "        ", "'''\n        Check the group whether can be trained and refresh the train size\n        '''", "\n", "self", ".", "trainable", "=", "False", "\n", "if", "self", ".", "has_downlink", "(", ")", ":", "\n", "            ", "self", ".", "train_size", "=", "0", "\n", "for", "node", "in", "self", ".", "downlink", ":", "\n", "                ", "if", "node", ".", "check_trainable", "(", ")", "==", "True", ":", "\n", "                    ", "self", ".", "trainable", "=", "True", "\n", "# Refresh the train size of server,", "\n", "# It is the sum of the train size of all trainable donwlink nodes", "\n", "self", ".", "train_size", "+=", "node", ".", "train_size", "\n", "", "", "", "return", "self", ".", "trainable", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.check_testable": [[43, 52], ["group.Group.has_downlink", "nodes.check_testable"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_testable"], ["", "def", "check_testable", "(", "self", ")", ":", "\n", "        ", "self", ".", "testable", "=", "False", "\n", "if", "self", ".", "has_downlink", "(", ")", ":", "\n", "            ", "self", ".", "test_size", "=", "0", "\n", "for", "nodes", "in", "self", ".", "downlink", ":", "\n", "                ", "if", "nodes", ".", "check_testable", "(", ")", "==", "True", ":", "\n", "                    ", "self", ".", "testable", "=", "True", "\n", "self", ".", "test_size", "+=", "nodes", ".", "test_size", "\n", "", "", "", "return", "self", ".", "testable", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.refresh": [[53, 71], ["group.Group.check_trainable", "group.Group.check_testable", "numpy.vstack", "numpy.hstack", "group_test_data[].append", "group_test_data[].append"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_trainable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_testable"], ["", "def", "refresh", "(", "self", ")", ":", "\n", "        ", "'''\n        The Group should be refreshed after add/delete/clear downlink\n        '''", "\n", "self", ".", "check_trainable", "(", ")", "\n", "self", ".", "check_testable", "(", ")", "\n", "# Refresh the local test set", "\n", "if", "self", ".", "eval_locally", "==", "True", ":", "\n", "            ", "if", "self", ".", "downlink", ":", "\n", "                ", "group_test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "c", "in", "self", ".", "downlink", ":", "\n", "                    ", "group_test_data", "[", "'x'", "]", ".", "append", "(", "c", ".", "test_data", "[", "'x'", "]", ")", "\n", "group_test_data", "[", "'y'", "]", ".", "append", "(", "c", ".", "test_data", "[", "'y'", "]", ")", "\n", "", "self", ".", "test_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "group_test_data", "[", "'x'", "]", ")", "\n", "self", ".", "test_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "group_test_data", "[", "'y'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.add_downlink": [[72, 75], ["super().add_downlink", "group.Group.refresh"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["", "def", "add_downlink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "super", "(", "Group", ",", "self", ")", ".", "add_downlink", "(", "nodes", ")", "\n", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.delete_downlink": [[76, 79], ["super().delete_downlink", "group.Group.refresh"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.delete_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["", "def", "delete_downlink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "super", "(", "Group", ",", "self", ")", ".", "delete_downlink", "(", "nodes", ")", "\n", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.clear_downlink": [[80, 83], ["super().clear_downlink", "group.Group.refresh"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.clear_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["", "def", "clear_downlink", "(", "self", ")", ":", "\n", "        ", "super", "(", "Group", ",", "self", ")", ".", "clear_downlink", "(", ")", "\n", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.federated_averaging_aggregate": [[86, 88], ["group.Group.weighted_aggregate"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.weighted_aggregate"], ["def", "federated_averaging_aggregate", "(", "self", ",", "updates", ",", "nks", ")", ":", "\n", "        ", "return", "self", ".", "weighted_aggregate", "(", "updates", ",", "nks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.federated_averaging_aggregate_with_temperature": [[90, 103], ["len", "zip", "group.Group.federated_averaging_aggregate", "numpy.zeros_like", "temp_nks.append", "temp_nks.append", "math.floor", "max"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.federated_averaging_aggregate"], ["def", "federated_averaging_aggregate_with_temperature", "(", "self", ",", "updates", ",", "nks", ",", "temps", ",", "max_temp", ")", ":", "\n", "        ", "if", "len", "(", "temps", ")", "==", "0", ":", "\n", "            ", "return", "[", "np", ".", "zeros_like", "(", "ws", ")", "for", "ws", "in", "self", ".", "latest_params", "]", "\n", "", "else", ":", "\n", "            ", "temp_nks", ",", "epsilon", "=", "[", "]", ",", "1e-5", "\n", "for", "nk", ",", "temp", "in", "zip", "(", "nks", ",", "temps", ")", ":", "\n", "                ", "if", "temp", "==", "None", ":", "\n", "                    ", "temp_nks", ".", "append", "(", "nk", ")", "\n", "", "else", ":", "\n", "# Prevent divided by 0", "\n", "#print('debug: group.py:100', temp, max_temp, nk)", "\n", "                    ", "temp_nks", ".", "append", "(", "floor", "(", "(", "max", "(", "temp", ",", "0", ")", "/", "(", "max_temp", "+", "epsilon", ")", ")", "*", "nk", ")", ")", "\n", "", "", "return", "self", ".", "federated_averaging_aggregate", "(", "updates", ",", "temp_nks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.weighted_aggregate": [[104, 114], ["len", "range", "numpy.array", "agg_updates.append", "numpy.sum", "numpy.sum", "zip"], "methods", ["None"], ["", "", "def", "weighted_aggregate", "(", "self", ",", "updates", ",", "weights", ")", ":", "\n", "# Aggregate the updates according their weights", "\n", "        ", "epsilon", "=", "1e-5", "# Prevent divided by 0", "\n", "normalws", "=", "np", ".", "array", "(", "weights", ",", "dtype", "=", "float", ")", "/", "(", "np", ".", "sum", "(", "weights", ",", "dtype", "=", "np", ".", "float", ")", "+", "epsilon", ")", "\n", "num_layers", "=", "len", "(", "updates", "[", "0", "]", ")", "\n", "agg_updates", "=", "[", "]", "\n", "for", "la", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "agg_updates", ".", "append", "(", "np", ".", "sum", "(", "[", "up", "[", "la", "]", "*", "pro", "for", "up", ",", "pro", "in", "zip", "(", "updates", ",", "normalws", ")", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "return", "agg_updates", "# -> list", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group._calculate_weighted_metric": [[115, 119], ["numpy.sum", "numpy.array", "numpy.sum"], "methods", ["None"], ["", "def", "_calculate_weighted_metric", "(", "metrics", ",", "nks", ")", ":", "\n", "            ", "normalws", "=", "np", ".", "array", "(", "nks", ")", "/", "np", ".", "sum", "(", "nks", ",", "dtype", "=", "np", ".", "float", ")", "\n", "metric", "=", "np", ".", "sum", "(", "metrics", "*", "normalws", ")", "\n", "return", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.train": [[123, 195], ["group.Group.check_selected_trainable", "len", "print", "group.Group.fresh_latest_params_updates", "numpy.sum", "numpy.average", "numpy.average", "node.train", "train_results.append", "group.Group.federated_averaging_aggregate_with_temperature", "group.Group.federated_averaging_aggregate", "group.Group.federated_averaging_aggregate", "print", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_selected_trainable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.fresh_latest_params_updates", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.federated_averaging_aggregate_with_temperature", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.federated_averaging_aggregate", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.federated_averaging_aggregate"], ["def", "train", "(", "self", ",", "selected_nodes", "=", "None", ")", ":", "\n", "        ", "'''\n        Train on selected downlink clients and aggregate these updates,\n        Default train on all downlink client.\n        Return:\n            results: \n                list of list of training results ->[[result1], [result2], [result3], ...]\n        '''", "\n", "# Group may be empty, we skip the training if this group is empty", "\n", "if", "len", "(", "self", ".", "downlink", ")", "==", "0", ":", "\n", "            ", "print", "(", "f\"Warning: Group {self.id} is empty.\"", ")", "\n", "return", "0", ",", "0", ",", "0", ",", "None", "\n", "\n", "# Default train on all downlink client if there has any selected nodes.", "\n", "", "if", "not", "selected_nodes", ":", "selected_nodes", "=", "self", ".", "downlink", "\n", "\n", "# Check the trainable of selected nodes, those nodes not in the group's downlink are invalid.", "\n", "trainable", ",", "valid_nodes", "=", "self", ".", "check_selected_trainable", "(", "selected_nodes", ")", "\n", "\n", "# 0, Begin training", "\n", "if", "trainable", "==", "True", ":", "\n", "            ", "train_results", "=", "[", "]", "\n", "group_params", "=", "self", ".", "latest_params", "\n", "\n", "# 1, Broadcast group's model to client", "\n", "for", "node", "in", "valid_nodes", ":", "\n", "# Calculate the latest updates of clients", "\n", "                ", "node", ".", "latest_updates", "=", "[", "(", "w1", "-", "w0", ")", "for", "w0", ",", "w1", "in", "zip", "(", "node", ".", "latest_params", ",", "group_params", ")", "]", "\n", "node", ".", "latest_params", "=", "group_params", "\n", "\n", "# 2, Train the neural model of client and save the results", "\n", "", "for", "node", "in", "valid_nodes", ":", "\n", "                ", "num_samples", ",", "train_acc", ",", "train_loss", ",", "soln", ",", "update", "=", "node", ".", "train", "(", ")", "\n", "train_results", ".", "append", "(", "[", "node", ",", "num_samples", ",", "train_acc", ",", "train_loss", ",", "update", "]", ")", "\n", "\n", "# 3, Aggregate the clients using FedAvg", "\n", "", "nks", "=", "[", "rest", "[", "1", "]", "for", "rest", "in", "train_results", "]", "# -> list", "\n", "updates", "=", "[", "rest", "[", "4", "]", "for", "rest", "in", "train_results", "]", "# -> list", "\n", "temps", "=", "[", "rest", "[", "0", "]", ".", "temperature", "for", "rest", "in", "train_results", "]", "\n", "max_temp", "=", "train_results", "[", "0", "]", "[", "0", "]", ".", "max_temp", "\n", "if", "self", ".", "aggregation_strategy", "==", "'temp'", "and", "max_temp", "is", "not", "None", ":", "\n", "                ", "agg_updates", "=", "self", ".", "federated_averaging_aggregate_with_temperature", "(", "updates", ",", "nks", ",", "temps", ",", "max_temp", ")", "\n", "", "if", "self", ".", "aggregation_strategy", "==", "'fedavg'", ":", "\n", "                ", "agg_updates", "=", "self", ".", "federated_averaging_aggregate", "(", "updates", ",", "nks", ")", "\n", "", "if", "self", ".", "aggregation_strategy", "==", "'avg'", ":", "\n", "                ", "agg_updates", "=", "self", ".", "federated_averaging_aggregate", "(", "updates", ",", "[", "1.0", "*", "len", "(", "nks", ")", "]", ")", "\n", "\n", "# 4, Refresh the latest parameter and update of group, the global model instance will not change.", "\n", "", "self", ".", "fresh_latest_params_updates", "(", "agg_updates", ")", "\n", "\n", "\"\"\"\n            # (Optional) Refresh the latest_parameter and update of all downlink clients if this group using consensus policy\n            # Otherwise\uff0c only update the nodes of this round.\n            target_refresh_nodes = self.downlink if self.consensus == True else valid_nodes\n            for node in target_refresh_nodes:\n                node.latest_params = self.latest_params\n                node.latest_updates = agg_updates\n            \"\"\"", "\n", "\n", "# 5, Summary the train result of group then return", "\n", "group_num_samples", "=", "np", ".", "sum", "(", "nks", ",", "dtype", "=", "np", ".", "float", ")", "\n", "group_train_acc", "=", "np", ".", "average", "(", "[", "rest", "[", "2", "]", "for", "rest", "in", "train_results", "]", ",", "weights", "=", "nks", ")", "\n", "group_train_loss", "=", "np", ".", "average", "(", "[", "rest", "[", "3", "]", "for", "rest", "in", "train_results", "]", ",", "weights", "=", "nks", ")", "\n", "\n", "return", "group_num_samples", ",", "group_train_acc", ",", "group_train_loss", ",", "self", ".", "latest_params", ",", "agg_updates", "\n", "\n", "", "elif", "self", ".", "allow_empty", "==", "True", ":", "\n", "            ", "group_num_samples", ",", "group_train_acc", ",", "group_train_loss", ",", "update", "=", "0", ",", "0", ",", "0", ",", "None", "\n", "return", "group_num_samples", ",", "group_train_acc", ",", "group_train_loss", ",", "self", ".", "latest_params", ",", "update", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'ERROR: Group {self.id} has not any valid training clients with training data which is invalid.'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.group.Group.test": [[199, 222], ["group.Group.check_selected_testable", "len", "print", "print", "numpy.sum", "numpy.average", "numpy.average", "group.Group.test_locally", "node.test"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_selected_testable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test_locally", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test"], ["def", "test", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "downlink", ")", "==", "0", ":", "\n", "            ", "print", "(", "f\"Warning: Group {self.id} is empty.\"", ")", "\n", "return", "0", ",", "0", ",", "0", "\n", "\n", "", "testable", ",", "valid_nodes", "=", "self", ".", "check_selected_testable", "(", "self", ".", "downlink", ")", "\n", "if", "testable", "==", "False", ":", "\n", "            ", "print", "(", "f'Warning: Group {self.id} has not test data.'", ")", "\n", "return", "0", ",", "0", ",", "0", "\n", "\n", "", "if", "self", ".", "eval_locally", "==", "False", ":", "\n", "# Test on all clients", "\n", "            ", "test_results", "=", "[", "node", ".", "test", "(", ")", "for", "node", "in", "valid_nodes", "]", "\n", "# Summary the test result", "\n", "nks", "=", "[", "rest", "[", "0", "]", "for", "rest", "in", "test_results", "]", "\n", "group_num_samples", "=", "np", ".", "sum", "(", "nks", ",", "dtype", "=", "np", ".", "float", ")", "\n", "group_test_acc", "=", "np", ".", "average", "(", "[", "rest", "[", "1", "]", "for", "rest", "in", "test_results", "]", ",", "weights", "=", "nks", ")", "\n", "group_test_loss", "=", "np", ".", "average", "(", "[", "rest", "[", "2", "]", "for", "rest", "in", "test_results", "]", ",", "weights", "=", "nks", ")", "\n", "", "else", ":", "\n", "# Test on local test set (Faster)", "\n", "            ", "group_num_samples", ",", "group_test_acc", ",", "group_test_loss", "=", "self", ".", "test_locally", "(", ")", "\n", "\n", "", "return", "group_num_samples", ",", "group_test_acc", ",", "group_test_loss", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.__init__": [[12, 43], ["flearn.actor.Actor.__init__", "config.items", "numpy.zeros", "numpy.unique", "numpy.put", "client.Client.refresh", "len", "client.Client.add_uplink", "setattr", "numpy.copy", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.__init__", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_uplink"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "config", ",", "train_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "uplink", "=", "[", "]", ",", "model", "=", "None", ")", ":", "\n", "        ", "actor_type", "=", "'client'", "\n", "super", "(", "Client", ",", "self", ")", ".", "__init__", "(", "id", ",", "actor_type", ",", "train_data", ",", "test_data", ",", "model", ")", "\n", "if", "len", "(", "uplink", ")", ">", "0", ":", "\n", "            ", "self", ".", "add_uplink", "(", "uplink", ")", "\n", "", "self", ".", "clustering", "=", "False", "# Is the client join the clustering proceudre.", "\n", "self", ".", "discrepancy", "=", "0", "# The discrepancy between this client and its first uplink node", "\n", "# The cosine dissimilarity between this client and its first uplink node", "\n", "# Cosine Dissimilarity, definition: (1-cosine) / 2", "\n", "self", ".", "cosine_dissimilarity", "=", "0", "\n", "\n", "# transfer client config to self", "\n", "for", "key", ",", "val", "in", "config", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n", "", "self", ".", "max_temp", "=", "self", ".", "temperature", "# Save the max temperature", "\n", "self", ".", "original_train_data", "=", "{", "'x'", ":", "np", ".", "copy", "(", "self", ".", "train_data", "[", "'x'", "]", ")", ",", "'y'", ":", "np", ".", "copy", "(", "self", ".", "train_data", "[", "'y'", "]", ")", "}", "\n", "\n", "self", ".", "label_array", "=", "None", "\n", "self", ".", "distribution_shift", "=", "False", "\n", "\n", "self", ".", "train_size", "=", "self", ".", "train_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "test_size", "=", "self", ".", "test_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "num_classes", "=", "self", ".", "model", ".", "layers", "[", "-", "1", "]", ".", "output_shape", "[", "-", "1", "]", "\n", "self", ".", "train_label_count", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "label", ",", "count", "=", "np", ".", "unique", "(", "self", ".", "train_data", "[", "'y'", "]", ",", "return_counts", "=", "True", ")", "\n", "np", ".", "put", "(", "self", ".", "train_label_count", ",", "label", ",", "count", ")", "\n", "self", ".", "emd_threshold", "=", "(", "1.0", "/", "self", ".", "num_classes", ")", "*", "self", ".", "train_size", "*", "0.2", "\n", "\n", "self", ".", "refresh", "(", ")", "\n", "#print(np.unique(self.train_data['y']), np.unique(self.test_data['y'])) ", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.has_downlink": [[46, 48], ["None"], "methods", ["None"], ["", "def", "has_downlink", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.check_trainable": [[50, 57], ["None"], "methods", ["None"], ["", "def", "check_trainable", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "self", ".", "trainable", "=", "True", "\n", "# The train size of client is the size of the local training dataset", "\n", "self", ".", "train_size", "=", "self", ".", "train_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "return", "self", ".", "trainable", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.check_testable": [[58, 63], ["None"], "methods", ["None"], ["", "def", "check_testable", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "test_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "self", ".", "testable", "=", "True", "\n", "self", ".", "test_size", "=", "self", ".", "test_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", "\n", "", "return", "self", ".", "testable", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.train": [[64, 78], ["client.Client.check_trainable", "client.Client.solve_inner"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_trainable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.solve_inner"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "''' \n        Train on local training dataset.\n        Params:\n            None\n        Return: \n            num_sampes: number of training samples\n            acc = training accuracy of last local epoch\n            loss = mean training loss of last local epoch\n            updates = update of weights\n        '''", "\n", "self", ".", "check_trainable", "(", ")", "\n", "num_samples", ",", "acc", ",", "loss", ",", "soln", ",", "update", "=", "self", ".", "solve_inner", "(", "self", ".", "local_epochs", ",", "self", ".", "batch_size", ")", "\n", "return", "num_samples", ",", "acc", "[", "0", "]", ",", "loss", "[", "0", "]", ",", "soln", ",", "update", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.test": [[79, 105], ["client.Client.check_testable", "client.Client.test_locally", "client.Client.test_locally", "len", "print"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_testable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test_locally", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test_locally"], ["", "def", "test", "(", "self", ",", "from_uplink", "=", "False", ")", ":", "\n", "        ", "'''\n        Test on local test dataset\n        Argument: from_uplink indicates the evalutation is based on the model of first uplink node.\n        if from_uplink=False, the test is based on its latest_params.\n        Return:\n            num_samples: number of testing samples\n            acc = test accuracy\n            loss = test loss\n        '''", "\n", "self", ".", "check_testable", "(", ")", "\n", "if", "from_uplink", "==", "True", ":", "\n", "            ", "if", "len", "(", "self", ".", "uplink", ")", "==", "0", ":", "\n", "                ", "print", "(", "f'Warning: Node {self.id} does not have an uplink model for testing.'", ")", "\n", "return", "0", ",", "0", ",", "0", "\n", "\n", "# Temporarily set client's latest_params to first uplink's latest_params", "\n", "", "backup_params", "=", "self", ".", "latest_params", "\n", "self", ".", "latest_params", "=", "self", ".", "uplink", "[", "0", "]", ".", "latest_params", "\n", "test_result", "=", "self", ".", "test_locally", "(", ")", "\n", "# Reset client's latest_params", "\n", "self", ".", "latest_params", "=", "backup_params", "\n", "", "else", ":", "\n", "# Test on client's params", "\n", "            ", "test_result", "=", "self", ".", "test_locally", "(", ")", "\n", "", "return", "test_result", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.pretrain": [[110, 120], ["client.Client.solve_iters"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.solve_iters"], ["def", "pretrain", "(", "self", ",", "model_params", ",", "iterations", "=", "20", ")", ":", "\n", "        ", "backup_params", "=", "self", ".", "latest_params", "\n", "self", ".", "latest_params", "=", "model_params", "\n", "num_samples", ",", "acc", ",", "loss", ",", "soln", ",", "update", "=", "self", ".", "solve_iters", "(", "iterations", ",", "self", ".", "batch_size", ",", "pretrain", "=", "True", ")", "\n", "#num_samples, acc, loss, soln, update = self.solve_inner(1, self.batch_size, pretrain=True)", "\n", "\n", "# Restore latest_params after training", "\n", "self", ".", "latest_params", "=", "backup_params", "\n", "\n", "return", "num_samples", ",", "acc", "[", "-", "1", "]", ",", "loss", "[", "-", "1", "]", ",", "soln", ",", "update", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.update_difference": [[122, 133], ["client.Client.update_difference._calculate_l2_distance"], "methods", ["None"], ["", "def", "update_difference", "(", "self", ")", ":", "\n", "        ", "def", "_calculate_l2_distance", "(", "m1", ",", "m2", ")", ":", "\n", "            ", "v1", ",", "v2", "=", "process_grad", "(", "m1", ")", ",", "process_grad", "(", "m2", ")", "\n", "l2d", "=", "np", ".", "linalg", ".", "norm", "(", "v1", "-", "v2", ")", "\n", "return", "l2d", "\n", "\n", "# Only calcuate the discrepancy between this client and first uplink    ", "\n", "# we use self.local_soln istead of self.latest_params, more safe?", "\n", "", "self", ".", "discrepancy", "=", "_calculate_l2_distance", "(", "self", ".", "local_soln", ",", "self", ".", "uplink", "[", "0", "]", ".", "latest_params", ")", "\n", "self", ".", "cosine_dissimilarity", "=", "calculate_cosine_dissimilarity", "(", "self", ".", "local_gradient", ",", "self", ".", "uplink", "[", "0", "]", ".", "latest_updates", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.refresh": [[134, 140], ["client.Client.check_trainable", "client.Client.check_testable", "numpy.intersect1d"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_trainable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_testable"], ["", "def", "refresh", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_trainable", "(", ")", "\n", "self", ".", "check_testable", "(", ")", "\n", "\n", "self", ".", "label_array", "=", "np", ".", "intersect1d", "(", "self", ".", "train_data", "[", "'y'", "]", ",", "self", ".", "test_data", "[", "'y'", "]", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.check_distribution_shift": [[141, 152], ["numpy.zeros", "numpy.unique", "numpy.put", "scipy.stats.wasserstein_distance"], "methods", ["None"], ["", "def", "check_distribution_shift", "(", "self", ")", ":", "\n", "        ", "curr_count", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "label", ",", "count", "=", "np", ".", "unique", "(", "self", ".", "train_data", "[", "'y'", "]", ",", "return_counts", "=", "True", ")", "\n", "np", ".", "put", "(", "curr_count", ",", "label", ",", "count", ")", "\n", "\n", "emd", "=", "wasserstein_distance", "(", "curr_count", ",", "self", ".", "train_label_count", ")", "\n", "if", "emd", ">", "self", ".", "emd_threshold", ":", "\n", "            ", "self", ".", "distribution_shift", "=", "True", "\n", "return", "curr_count", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.__init__": [[10, 19], ["flearn.actor.Actor.__init__", "server.Server.refresh", "len", "server.Server.add_downlink"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.__init__", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink"], ["    ", "def", "__init__", "(", "self", ",", "train_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "downlink", "=", "[", "]", ",", "model", "=", "None", ")", ":", "\n", "        ", "actor_type", "=", "'server'", "\n", "id", "=", "0", "\n", "super", "(", "Server", ",", "self", ")", ".", "__init__", "(", "id", ",", "actor_type", ",", "train_data", ",", "test_data", ",", "model", ")", "\n", "if", "len", "(", "downlink", ")", ">", "0", ":", "\n", "            ", "self", ".", "add_downlink", "(", "downlink", ")", "\n", "# We need refresh model attribute like ", "\n", "# trainable, train_size, testable, test_size after modify the downlink  ", "\n", "", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.has_uplink": [[21, 23], ["None"], "methods", ["None"], ["", "def", "has_uplink", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.check_trainable": [[25, 39], ["server.Server.has_downlink", "node.check_trainable"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_trainable"], ["", "def", "check_trainable", "(", "self", ")", ":", "\n", "        ", "'''\n        Check the server whether can be trained and refresh the train size\n        '''", "\n", "if", "self", ".", "has_downlink", "(", ")", ":", "\n", "            ", "self", ".", "train_size", "=", "0", "\n", "self", ".", "trainable", "=", "False", "\n", "for", "node", "in", "self", ".", "downlink", ":", "\n", "                ", "if", "node", ".", "check_trainable", "(", ")", "==", "True", ":", "\n", "                    ", "self", ".", "trainable", "=", "True", "\n", "# Refresh the train size of server,", "\n", "# It is the sum of the train size of all trainable donwlink nodes", "\n", "self", ".", "train_size", "+=", "node", ".", "train_size", "\n", "", "", "", "return", "self", ".", "trainable", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.check_testable": [[40, 49], ["server.Server.has_downlink", "nodes.check_testable"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_testable"], ["", "def", "check_testable", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "has_downlink", "(", ")", ":", "\n", "            ", "self", ".", "test_size", "=", "0", "\n", "self", ".", "testable", "=", "False", "\n", "for", "nodes", "in", "self", ".", "downlink", ":", "\n", "                ", "if", "nodes", ".", "check_testable", "(", ")", "==", "True", ":", "\n", "                    ", "self", ".", "testable", "=", "True", "\n", "self", ".", "test_size", "+=", "nodes", ".", "test_size", "\n", "", "", "", "return", "self", ".", "testable", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh": [[50, 56], ["server.Server.check_trainable", "server.Server.check_testable"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_trainable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_testable"], ["", "def", "refresh", "(", "self", ")", ":", "\n", "        ", "'''\n        The server should be refreshed after add/delete downlink\n        '''", "\n", "self", ".", "check_trainable", "(", ")", "\n", "self", ".", "check_testable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.add_downlink": [[57, 61], ["super().add_downlink", "server.Server.refresh"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["", "def", "add_downlink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "super", "(", "Server", ",", "self", ")", ".", "add_downlink", "(", "nodes", ")", "\n", "# Refresh the server", "\n", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.delete_downlink": [[62, 66], ["super().delete_downlink", "server.Server.refresh"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.delete_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["", "def", "delete_downlink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "super", "(", "Server", ",", "self", ")", ".", "delete_downlink", "(", "nodes", ")", "\n", "# Refresh the server", "\n", "self", ".", "refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.train": [[67, 99], ["server.Server.check_selected_trainable", "print", "server.Server.check_selected_trainable", "node.train", "results.append", "group.train", "results.append"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_selected_trainable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_selected_trainable", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train"], ["", "def", "train", "(", "self", ",", "selected_nodes", ")", ":", "\n", "        ", "'''\n        Train on downlink actors like groups and clients\n        Params:\n            selected_nodes: Train the selected clients.\n        Return:\n            results: \n                list of list of training results ->[[result1], [result2], [result3], ...]\n        '''", "\n", "results", "=", "[", "]", "\n", "\n", "if", "self", ".", "downlink", "[", "0", "]", ".", "actor_type", "==", "'client'", ":", "# i.e. FedAvg", "\n", "# Check the trainable of selected clients", "\n", "            ", "trainable", ",", "valid_nodes", "=", "self", ".", "check_selected_trainable", "(", "selected_nodes", ")", "\n", "if", "trainable", "==", "True", ":", "\n", "                ", "for", "node", "in", "valid_nodes", ":", "\n", "                    ", "num_samples", ",", "train_acc", ",", "train_loss", ",", "soln", ",", "update", "=", "node", ".", "train", "(", ")", "\n", "results", ".", "append", "(", "[", "node", ",", "num_samples", ",", "train_acc", ",", "train_loss", ",", "update", "]", ")", "\n", "\n", "", "", "", "elif", "self", ".", "downlink", "[", "0", "]", ".", "actor_type", "==", "'group'", ":", "# i.e. FedGroup", "\n", "# Check the trainable of all groups", "\n", "            ", "trainable", ",", "valid_nodes", "=", "self", ".", "check_selected_trainable", "(", "self", ".", "downlink", ")", "\n", "if", "trainable", "==", "True", ":", "\n", "                ", "for", "group", "in", "valid_nodes", ":", "\n", "# The server will not boardcast the model", "\n", "                    ", "group_num_samples", ",", "group_train_acc", ",", "group_train_loss", ",", "soln", ",", "group_update", "=", "group", ".", "train", "(", "selected_nodes", ")", "\n", "results", ".", "append", "(", "[", "group", ",", "group_num_samples", ",", "group_train_acc", ",", "group_train_loss", ",", "group_update", "]", ")", "\n", "\n", "", "", "", "if", "results", "==", "[", "]", ":", "\n", "            ", "print", "(", "'ERROR: This server has not training clients/groups with training data/clients'", ")", "\n", "return", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.test": [[101, 115], ["server.Server.check_selected_testable", "print", "node.test", "results.append"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_selected_testable", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test"], ["", "def", "test", "(", "self", ",", "selected_nodes", ")", ":", "\n", "        ", "'''\n        Test on selected nodes\n        '''", "\n", "testable", ",", "valid_nodes", "=", "self", ".", "check_selected_testable", "(", "selected_nodes", ")", "\n", "if", "testable", "==", "True", ":", "\n", "            ", "results", "=", "[", "]", "\n", "for", "node", "in", "valid_nodes", ":", "\n", "                ", "num_samples", ",", "test_acc", ",", "test_loss", "=", "node", ".", "test", "(", ")", "\n", "results", ".", "append", "(", "[", "node", ",", "num_samples", ",", "test_acc", ",", "test_loss", "]", ")", "\n", "", "return", "results", "\n", "", "else", ":", "\n", "            ", "print", "(", "'ERROR: This server has not test clients/groups with testing data/clients'", ")", "\n", "return", "", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.__init__": [[11, 34], ["actor.Actor.preprocess"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.preprocess"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "actor_type", ",", "train_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "model", "=", "None", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "train_data", "=", "train_data", "\n", "self", ".", "test_data", "=", "test_data", "\n", "self", ".", "model", "=", "model", "# callable tf.keras.model", "\n", "self", ".", "actor_type", "=", "actor_type", "\n", "self", ".", "name", "=", "'NULL'", "\n", "# The latest model parameter and update of this actor, which will be modified by train, aggregate, refresh, init", "\n", "# The latest params and updates are set by fresh_latest_params_updates(), apply_update(), train()", "\n", "# The global training model will be set to latest params before training.", "\n", "self", ".", "latest_params", ",", "self", ".", "latest_updates", "=", "None", ",", "None", "\n", "# The latest local training solution and traning gradient of this actor", "\n", "# This local variables will be <automatically> set by all <local> training functions <forward propagation>,", "\n", "# which like solve inner and solve iter of actor, train and pretrain of client", "\n", "self", ".", "local_soln", ",", "self", ".", "local_gradient", "=", "None", ",", "None", "\n", "# init train and test size to zero, it will depend on the actor type", "\n", "self", ".", "train_size", ",", "self", ".", "test_size", "=", "0", ",", "0", "\n", "self", ".", "uplink", ",", "self", ".", "downlink", "=", "[", "]", ",", "[", "]", "# init to empty, depend on the actor type", "\n", "# Is this actor can train or test,", "\n", "# Note: This variable have differenct meaning according to differnent type of actor", "\n", "self", ".", "trainable", ",", "self", ".", "testable", "=", "False", ",", "False", "\n", "\n", "self", ".", "preprocess", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.preprocess": [[35, 42], ["str", "str", "actor.Actor.get_params", "actor.Actor.get_params", "numpy.zeros_like", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "# Give the name of actor, for example, 'client01', 'group01'", "\n", "        ", "self", ".", "name", "=", "str", "(", "self", ".", "actor_type", ")", "+", "str", "(", "self", ".", "id", ")", "\n", "# Initialize the latest model weights and updates", "\n", "self", ".", "latest_params", ",", "self", ".", "local_soln", "=", "self", ".", "get_params", "(", ")", ",", "self", ".", "get_params", "(", ")", "\n", "self", ".", "latest_updates", "=", "[", "np", ".", "zeros_like", "(", "ws", ")", "for", "ws", "in", "self", ".", "latest_params", "]", "\n", "self", ".", "local_gradient", "=", "[", "np", ".", "zeros_like", "(", "ws", ")", "for", "ws", "in", "self", ".", "latest_params", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params": [[45, 48], ["actor.Actor.model.get_weights"], "methods", ["None"], ["def", "get_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model", ":", "\n", "            ", "return", "self", ".", "model", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params": [[49, 54], ["actor.Actor.model.set_weights"], "methods", ["None"], ["", "", "def", "set_params", "(", "self", ",", "weights", ")", ":", "\n", "# Set the params of model,", "\n", "# But the latest_params and latest_updates will not be refreshed", "\n", "        ", "if", "self", ".", "model", ":", "\n", "            ", "self", ".", "model", ".", "set_weights", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.solve_inner": [[78, 116], ["actor.Actor.get_params", "actor.Actor.set_params", "actor.Actor.model.fit", "actor.Actor.get_params", "actor.Actor.set_params", "zip", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params"], ["def", "solve_inner", "(", "self", ",", "num_epoch", "=", "1", ",", "batch_size", "=", "10", ",", "pretrain", "=", "False", ")", ":", "\n", "        ", "'''\n        Solve the local optimization base on local training data,\n        This Function will not change the params of model,\n        Call apply_update() to change model\n        \n        Return: num_samples, train_acc, train_loss, update\n        '''", "\n", "if", "self", ".", "train_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "X", ",", "y_true", "=", "self", ".", "train_data", "[", "'x'", "]", ",", "self", ".", "train_data", "[", "'y'", "]", "\n", "num_samples", "=", "y_true", ".", "shape", "[", "0", "]", "\n", "# Backup the current model params", "\n", "backup_params", "=", "self", ".", "get_params", "(", ")", "\n", "# Confirm model params is euqal to latest params", "\n", "t0_weights", "=", "self", ".", "latest_params", "\n", "self", ".", "set_params", "(", "t0_weights", ")", "\n", "# Use model.fit() to train model", "\n", "history", "=", "self", ".", "model", ".", "fit", "(", "X", ",", "y_true", ",", "batch_size", ",", "num_epoch", ",", "verbose", "=", "0", ")", "\n", "t1_weights", "=", "self", ".", "get_params", "(", ")", "\n", "gradient", "=", "[", "(", "w1", "-", "w0", ")", "for", "w0", ",", "w1", "in", "zip", "(", "t0_weights", ",", "t1_weights", ")", "]", "\n", "\n", "# Roll-back the weights of current model", "\n", "self", ".", "set_params", "(", "backup_params", ")", "\n", "if", "pretrain", "==", "False", ":", "\n", "# Store the latest local solution params", "\n", "                ", "self", ".", "local_soln", "=", "t1_weights", "\n", "# Calculate the gradient", "\n", "self", ".", "local_gradient", "=", "gradient", "\n", "# Get the train accuracy and train loss", "\n", "#print(history.history) # Debug", "\n", "", "train_acc", "=", "history", ".", "history", "[", "'accuracy'", "]", "\n", "train_loss", "=", "history", ".", "history", "[", "'loss'", "]", "\n", "#print('actor.py:104', train_acc) # DEBUG", "\n", "return", "num_samples", ",", "train_acc", ",", "train_loss", ",", "t1_weights", ",", "gradient", "\n", "", "else", ":", "\n", "# Return 0,0,0 and all zero updates [0, 0, ...],", "\n", "# if this actor has not training set", "\n", "            ", "return", "0", ",", "[", "0", "]", ",", "[", "0", "]", ",", "self", ".", "latest_params", ",", "[", "np", ".", "zeros_like", "(", "ws", ")", "for", "ws", "in", "self", ".", "latest_params", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.solve_iters": [[117, 173], ["actor.Actor.get_params", "actor.Actor.set_params", "actor.Actor.solve_iters.batch_data_multiple_iters"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params"], ["", "", "def", "solve_iters", "(", "self", ",", "num_iters", "=", "1", ",", "batch_size", "=", "10", ",", "pretrain", "=", "False", ")", ":", "\n", "\n", "        ", "def", "batch_data_multiple_iters", "(", "data", ",", "batch_size", ",", "num_iters", ")", ":", "\n", "            ", "data_x", "=", "data", "[", "'x'", "]", "\n", "data_y", "=", "data", "[", "'y'", "]", "\n", "data_size", "=", "data_y", ".", "shape", "[", "0", "]", "\n", "\n", "random_idx", "=", "np", ".", "arange", "(", "data_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "random_idx", ")", "\n", "# Shuffle the features and labels", "\n", "data_x", ",", "data_y", "=", "data_x", "[", "random_idx", "]", ",", "data_y", "[", "random_idx", "]", "\n", "max_iter", "=", "ceil", "(", "data_size", "/", "batch_size", ")", "\n", "\n", "for", "iter", "in", "range", "(", "num_iters", ")", ":", "\n", "                ", "round_step", "=", "(", "iter", "+", "1", ")", "%", "max_iter", "# round_step: 1, 2, ..., max_iter-1, 0", "\n", "if", "round_step", "==", "0", ":", "\n", "# Exceed 1 epoch", "\n", "                    ", "x_part1", ",", "y_part1", "=", "data_x", "[", "(", "max_iter", "-", "1", ")", "*", "batch_size", ":", "data_size", "]", ",", "data_y", "[", "(", "max_iter", "-", "1", ")", "*", "batch_size", ":", "data_size", "]", "\n", "# Shuffle dataset before we get the next part", "\n", "np", ".", "random", ".", "shuffle", "(", "random_idx", ")", "\n", "data_x", ",", "data_y", "=", "data_x", "[", "random_idx", "]", ",", "data_y", "[", "random_idx", "]", "\n", "x_part2", ",", "y_part2", "=", "data_x", "[", "0", ":", "max_iter", "*", "batch_size", "%", "data_size", "]", ",", "data_y", "[", "0", ":", "max_iter", "*", "batch_size", "%", "data_size", "]", "\n", "\n", "batched_x", "=", "np", ".", "vstack", "(", "[", "x_part1", ",", "x_part2", "]", ")", "\n", "batched_y", "=", "np", ".", "hstack", "(", "[", "y_part1", ",", "y_part2", "]", ")", "\n", "", "else", ":", "\n", "                    ", "batched_x", "=", "data_x", "[", "(", "round_step", "-", "1", ")", "*", "batch_size", ":", "round_step", "*", "batch_size", "]", "\n", "batched_y", "=", "data_y", "[", "(", "round_step", "-", "1", ")", "*", "batch_size", ":", "round_step", "*", "batch_size", "]", "\n", "\n", "", "yield", "(", "batched_x", ",", "batched_y", ")", "\n", "\n", "", "", "num_samples", "=", "self", ".", "train_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_samples", "==", "0", ":", "\n", "            ", "return", "0", ",", "[", "0", "]", ",", "[", "0", "]", ",", "self", ".", "latest_params", ",", "[", "np", ".", "zeros_like", "(", "ws", ")", "for", "ws", "in", "self", ".", "latest_params", "]", "\n", "\n", "", "backup_params", "=", "self", ".", "get_params", "(", ")", "\n", "t0_weights", "=", "self", ".", "latest_params", "\n", "self", ".", "set_params", "(", "t0_weights", ")", "\n", "train_results", "=", "[", "]", "\n", "for", "X", ",", "y", "in", "batch_data_multiple_iters", "(", "self", ".", "train_data", ",", "batch_size", ",", "num_iters", ")", ":", "\n", "            ", "train_results", ".", "append", "(", "self", ".", "model", ".", "train_on_batch", "(", "X", ",", "y", ")", ")", "\n", "", "t1_weights", "=", "self", ".", "get_params", "(", ")", "\n", "gradient", "=", "[", "(", "w1", "-", "w0", ")", "for", "w0", ",", "w1", "in", "zip", "(", "t0_weights", ",", "t1_weights", ")", "]", "\n", "# Roll-back the weights of model", "\n", "self", ".", "set_params", "(", "backup_params", ")", "\n", "if", "pretrain", "==", "False", ":", "\n", "# Store the latest local solution", "\n", "            ", "self", ".", "local_soln", "=", "t1_weights", "\n", "# Calculate the updates", "\n", "self", ".", "local_gradient", "=", "gradient", "\n", "", "train_acc", "=", "[", "rest", "[", "1", "]", "for", "rest", "in", "train_results", "]", "\n", "train_loss", "=", "[", "rest", "[", "0", "]", "for", "rest", "in", "train_results", "]", "\n", "\n", "return", "num_samples", ",", "train_acc", ",", "train_loss", ",", "t1_weights", ",", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.apply_update": [[174, 187], ["actor.Actor.get_params", "actor.Actor.set_params", "zip"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params"], ["", "def", "apply_update", "(", "self", ",", "update", ")", ":", "\n", "        ", "'''\n        Apply update to model and Refresh the latest_params and latest_updates\n        Return:\n            1, Latest model params\n        '''", "\n", "t0_weights", "=", "self", ".", "get_params", "(", ")", "\n", "t1_weights", "=", "[", "(", "w0", "+", "up", ")", "for", "up", ",", "w0", "in", "zip", "(", "update", ",", "t0_weights", ")", "]", "\n", "self", ".", "set_params", "(", "t1_weights", ")", "# The group training model is set to new weights.", "\n", "# Refresh the latest_params and latest_updates attrs", "\n", "self", ".", "latest_updates", "=", "update", "\n", "self", ".", "latest_params", "=", "t1_weights", "\n", "return", "self", ".", "latest_params", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.fresh_latest_params_updates": [[188, 198], ["zip"], "methods", ["None"], ["", "def", "fresh_latest_params_updates", "(", "self", ",", "update", ")", ":", "\n", "        ", "'''\n        Call this function to fresh the latest_params and latst_updates\n        The update will not apply to self.model, compare to apply_update()\n        '''", "\n", "prev_params", "=", "self", ".", "latest_params", "\n", "latest_params", "=", "[", "(", "w0", "+", "up", ")", "for", "up", ",", "w0", "in", "zip", "(", "update", ",", "prev_params", ")", "]", "\n", "self", ".", "latest_updates", "=", "update", "\n", "self", ".", "latest_params", "=", "latest_params", "\n", "return", "self", ".", "latest_params", ",", "self", ".", "latest_updates", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test_locally": [[199, 216], ["actor.Actor.get_params", "actor.Actor.set_params", "actor.Actor.model.evaluate", "actor.Actor.set_params"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params"], ["", "def", "test_locally", "(", "self", ")", ":", "\n", "        ", "'''\n        Test the model (self.latest_params) on local test dataset\n        Return: Number of test samples, test accuracy, test loss\n        '''", "\n", "if", "self", ".", "test_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# Backup the current model params", "\n", "            ", "backup_params", "=", "self", ".", "get_params", "(", ")", "\n", "# Set the current model to actor's params", "\n", "self", ".", "set_params", "(", "self", ".", "latest_params", ")", "\n", "X", ",", "y_true", "=", "self", ".", "test_data", "[", "'x'", "]", ",", "self", ".", "test_data", "[", "'y'", "]", "\n", "loss", ",", "acc", "=", "self", ".", "model", ".", "evaluate", "(", "X", ",", "y_true", ",", "verbose", "=", "0", ")", "\n", "# Recover the model", "\n", "self", ".", "set_params", "(", "backup_params", ")", "\n", "return", "self", ".", "test_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ",", "acc", ",", "loss", "\n", "", "else", ":", "\n", "            ", "return", "0", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink": [[217, 221], ["len"], "methods", ["None"], ["", "", "def", "has_uplink", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "uplink", ")", ">", "0", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_downlink": [[222, 226], ["len"], "methods", ["None"], ["", "def", "has_downlink", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "downlink", ")", ">", "0", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink": [[227, 234], ["isinstance", "isinstance", "list", "list", "set", "set"], "methods", ["None"], ["", "def", "add_downlink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "if", "isinstance", "(", "nodes", ",", "list", ")", ":", "\n", "# Note: The repetitive node is not allow", "\n", "            ", "self", ".", "downlink", "=", "list", "(", "set", "(", "self", ".", "downlink", "+", "nodes", ")", ")", "\n", "", "if", "isinstance", "(", "nodes", ",", "Actor", ")", ":", "\n", "            ", "self", ".", "downlink", "=", "list", "(", "set", "(", "self", ".", "downlink", "+", "[", "nodes", "]", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_uplink": [[235, 241], ["isinstance", "isinstance", "list", "list", "set", "set"], "methods", ["None"], ["", "def", "add_uplink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "if", "isinstance", "(", "nodes", ",", "list", ")", ":", "\n", "            ", "self", ".", "uplink", "=", "list", "(", "set", "(", "self", ".", "uplink", "+", "nodes", ")", ")", "\n", "", "if", "isinstance", "(", "nodes", ",", "Actor", ")", ":", "\n", "            ", "self", ".", "uplink", "=", "list", "(", "set", "(", "self", ".", "uplink", "+", "[", "nodes", "]", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.delete_downlink": [[242, 248], ["isinstance", "isinstance", "actor.Actor.downlink.remove"], "methods", ["None"], ["", "def", "delete_downlink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "if", "isinstance", "(", "nodes", ",", "list", ")", ":", "\n", "            ", "self", ".", "downlink", "=", "[", "c", "for", "c", "in", "self", ".", "downlink", "if", "c", "not", "in", "nodes", "]", "\n", "", "if", "isinstance", "(", "nodes", ",", "Actor", ")", ":", "\n", "            ", "self", ".", "downlink", ".", "remove", "(", "nodes", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.delete_uplink": [[249, 255], ["isinstance", "isinstance", "actor.Actor.uplink.remove"], "methods", ["None"], ["", "def", "delete_uplink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "if", "isinstance", "(", "nodes", ",", "list", ")", ":", "\n", "            ", "self", ".", "uplink", "=", "[", "c", "for", "c", "in", "self", ".", "uplink", "-", "nodes", "if", "c", "not", "in", "nodes", "]", "\n", "", "if", "isinstance", "(", "nodes", ",", "Actor", ")", ":", "\n", "            ", "self", ".", "uplink", ".", "remove", "(", "nodes", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.clear_uplink": [[256, 259], ["actor.Actor.uplink.clear"], "methods", ["None"], ["", "def", "clear_uplink", "(", "self", ")", ":", "\n", "        ", "self", ".", "uplink", ".", "clear", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.clear_downlink": [[260, 263], ["actor.Actor.downlink.clear"], "methods", ["None"], ["", "def", "clear_downlink", "(", "self", ")", ":", "\n", "        ", "self", ".", "downlink", ".", "clear", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_uplink": [[264, 268], ["actor.Actor.clear_uplink", "actor.Actor.add_uplink"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.clear_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_uplink"], ["", "def", "set_uplink", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "self", ".", "clear_uplink", "(", ")", "\n", "self", ".", "add_uplink", "(", "nodes", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_selected_trainable": [[269, 281], ["node.check_trainable", "valid_nodes.append"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_trainable"], ["", "def", "check_selected_trainable", "(", "self", ",", "selected_nodes", ")", ":", "\n", "        ", "''' \n        Check The selected nodes whether can be trained, and return valid trainable nodes\n        '''", "\n", "nodes_trainable", "=", "False", "\n", "valid_nodes", "=", "[", "]", "\n", "for", "node", "in", "selected_nodes", ":", "\n", "            ", "if", "node", "in", "self", ".", "downlink", ":", "\n", "                ", "if", "node", ".", "check_trainable", "(", ")", "==", "True", ":", "\n", "                    ", "nodes_trainable", "=", "True", "\n", "valid_nodes", ".", "append", "(", "node", ")", "\n", "", "", "", "return", "nodes_trainable", ",", "valid_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_selected_testable": [[282, 294], ["node.check_testable", "valid_nodes.append"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_testable"], ["", "def", "check_selected_testable", "(", "self", ",", "selected_nodes", ")", ":", "\n", "        ", "''' \n        Check The selected nodes whether can be tested \n        '''", "\n", "nodes_testable", "=", "False", "\n", "valid_nodes", "=", "[", "]", "\n", "for", "node", "in", "selected_nodes", ":", "\n", "            ", "if", "node", "in", "self", ".", "downlink", ":", "\n", "                ", "if", "node", ".", "check_testable", "(", ")", "==", "True", ":", "\n", "                    ", "nodes_testable", "=", "True", "\n", "valid_nodes", ".", "append", "(", "node", ")", "\n", "", "", "", "return", "nodes_testable", ",", "valid_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test": [[296, 298], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.train": [[299, 301], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_trainable": [[303, 305], ["None"], "methods", ["None"], ["", "def", "check_trainable", "(", ")", ":", "\n", "        ", "return", "\n", "", "def", "check_testable", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.check_testable": [[305, 307], ["None"], "methods", ["None"], ["", "def", "check_testable", "(", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.synthetic.mclr._construct_client_model": [[5, 16], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Dense", "tensorflow.keras.regularizers.l2"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "60", ",", ")", ")", ")", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.synthetic.mclr.construct_model": [[17, 22], ["mclr._construct_client_model", "mclr._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["", "def", "construct_model", "(", "trainer_type", ",", "lr", "=", "0.01", ")", ":", "\n", "    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.mnist.mclr._construct_client_model": [[5, 17], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Dense", "tensorflow.keras.regularizers.l2"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "60", ",", ")", ")", ")", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n", "", "def", "construct_model", "(", "trainer_type", ",", "lr", "=", "0.01", ")", ":", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.mnist.mclr.construct_model": [[18, 23], ["mclr._construct_client_model", "mclr._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.mnist.mlp._construct_client_model": [[5, 18], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "784", ",", ")", ")", ")", "\n", "# Hidden Layer", "\n", "model", ".", "add", "(", "Dense", "(", "128", ",", "'relu'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.mnist.mlp.construct_model": [[19, 24], ["mlp._construct_client_model", "mlp._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["", "def", "construct_model", "(", "trainer_type", ",", "lr", "=", "0.03", ")", ":", "\n", "    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.mnist.cnn._construct_client_model": [[5, 31], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "784", ",", ")", ")", ")", "\n", "# Reshape Layer", "\n", "model", ".", "add", "(", "Reshape", "(", "(", "28", ",", "28", ",", "1", ")", ")", ")", "\n", "# Conv1 Layer", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", ")", "\n", "# MaxPool1 Layer", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "# Conv2 Layer", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", ")", "\n", "# MaxPool2 Layer", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "# Flatten Layer", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "# Dropout Layer", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "#opt = tf.keras.optimizers.Adam(learning_rate=lr)", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.mnist.cnn.construct_model": [[32, 37], ["cnn._construct_client_model", "cnn._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["", "def", "construct_model", "(", "trainer_type", ",", "lr", ")", ":", "\n", "    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.fmnist.cnn._construct_client_model": [[6, 34], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "function", ["None"], ["    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "784", ",", ")", ")", ")", "\n", "# Reshape Layer", "\n", "model", ".", "add", "(", "Reshape", "(", "(", "28", ",", "28", ",", "1", ")", ")", ")", "\n", "# Conv1 Layer", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", ")", "\n", "# MaxPool1 Layer", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "# Conv2 Layer", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", ")", "\n", "# MaxPool2 Layer", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "# Flatten Layer", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "# Dropout Layer", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "#opt = tf.keras.optimizers.Adam(learning_rate=lr)", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n", "", "def", "construct_model", "(", "trainer_type", ",", "lr", ")", ":", "\n", "    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.fmnist.cnn.construct_model": [[35, 40], ["cnn._construct_client_model", "cnn._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.sent140.gru._construct_client_model": [[6, 20], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.GRU"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "25", ",", "300", ")", ")", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "GRU", "(", "64", ",", "return_sequences", "=", "True", ")", ")", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "GRU", "(", "32", ")", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "# Output layer", "\n", "model", ".", "add", "(", "Dense", "(", "2", ",", "'softmax'", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.sent140.gru.construct_model": [[22, 27], ["gru._construct_client_model", "gru._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["", "def", "construct_model", "(", "trainer_type", ",", "lr", ")", ":", "\n", "    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.sent140.lstm._construct_client_model": [[6, 20], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LSTM", "tensorflow.keras.layers.LSTM"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "25", ",", "300", ")", ")", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "LSTM", "(", "64", ",", "return_sequences", "=", "True", ")", ")", ")", "\n", "model", ".", "add", "(", "Bidirectional", "(", "LSTM", "(", "32", ")", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "# Output layer", "\n", "model", ".", "add", "(", "Dense", "(", "2", ",", "'softmax'", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.sent140.lstm.construct_model": [[22, 27], ["lstm._construct_client_model", "lstm._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["", "def", "construct_model", "(", "trainer_type", ",", "lr", ")", ":", "\n", "    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.mclr._construct_client_model": [[5, 17], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Dense", "tensorflow.keras.regularizers.l2"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "60", ",", ")", ")", ")", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n", "", "def", "construct_model", "(", "trainer_type", ",", "lr", "=", "0.01", ")", ":", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.mclr.construct_model": [[18, 23], ["mclr._construct_client_model", "mclr._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.mlp._construct_client_model": [[5, 21], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "784", ",", ")", ")", ")", "\n", "# Hidden Layer", "\n", "model", ".", "add", "(", "Dense", "(", "128", ",", "'relu'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ",", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "l2", "(", "0.001", ")", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n", "", "def", "construct_model", "(", "trainer_type", ",", "lr", "=", "0.03", ")", ":", "\n", "    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.mlp.construct_model": [[22, 27], ["mlp._construct_client_model", "mlp._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], ["", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model": [[5, 58], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.optimizers.SGD", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.Sequential.compile", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.regularizers.l2", "tensorflow.keras.regularizers.l2"], "function", ["None"], ["def", "_construct_client_model", "(", "lr", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "# Input Layer", "\n", "model", ".", "add", "(", "Input", "(", "shape", "=", "(", "784", ",", ")", ")", ")", "\n", "# Reshape Layer", "\n", "model", ".", "add", "(", "Reshape", "(", "(", "28", ",", "28", ",", "1", ")", ")", ")", "\n", "# Conv1 Layer", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", ")", "\n", "# MaxPool1 Layer", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "# Conv2 Layer", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", ")", "\n", "# MaxPool2 Layer", "\n", "model", ".", "add", "(", "MaxPool2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "# Flatten Layer", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "# Dropout Layer", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "# Output Layer", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "'softmax'", ")", ")", "\n", "\n", "opt", "=", "tf", ".", "keras", ".", "optimizers", ".", "SGD", "(", "learning_rate", "=", "lr", ")", "\n", "#opt = tf.keras.optimizers.Adam(learning_rate=lr)", "\n", "loss_fn", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", ")", "\n", "model", ".", "compile", "(", "opt", ",", "loss_fn", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "model", "\n", "\n", "", "def", "construct_model", "(", "trainer_type", ",", "lr", ")", ":", "\n", "    ", "if", "trainer_type", "==", "'fedavg'", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "else", ":", "\n", "        ", "return", "_construct_client_model", "(", "lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn.construct_model": [[59, 64], ["cnn._construct_client_model", "cnn._construct_client_model"], "function", ["home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model", "home.repos.pwc.inspect_result.morningd_flexcfl.femnist.cnn._construct_client_model"], []], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.__init__": [[20, 47], ["train_config.trainer_config.items", "tensorflow.random.set_seed", "numpy.random.seed", "random.seed", "groupbase.GroupBase.construct_actors", "utils.export_result.ResultWriter", "groupbase.GroupBase.server.get_params", "setattr", "groupbase.GroupBase.group_config.update"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.construct_actors", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params"], ["    ", "def", "__init__", "(", "self", ",", "train_config", ")", ":", "\n", "# Transfer trainer config to self, we save the configurations by this trick", "\n", "        ", "for", "key", ",", "val", "in", "train_config", ".", "trainer_config", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "", "self", ".", "trainer_type", "=", "train_config", ".", "trainer_type", "\n", "# Get the config of client", "\n", "self", ".", "client_config", "=", "train_config", ".", "client_config", "\n", "# Get the config of group", "\n", "self", ".", "group_config", "=", "train_config", ".", "group_config", "\n", "if", "self", ".", "eval_locally", "==", "True", ":", "\n", "            ", "self", ".", "group_config", ".", "update", "(", "{", "'eval_locally'", ":", "True", "}", ")", "\n", "\n", "# Set the random set", "\n", "", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "# Construct the actors", "\n", "self", ".", "clients", "=", "[", "]", "\n", "self", ".", "groups", "=", "[", "]", "\n", "self", ".", "construct_actors", "(", ")", "\n", "\n", "# Create results writer", "\n", "self", ".", "writer", "=", "ResultWriter", "(", "train_config", ")", "\n", "\n", "# Store the initial model params", "\n", "self", ".", "init_params", "=", "self", ".", "server", ".", "get_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.construct_actors": [[48, 85], ["utils.read_data.read_federated_data", "groupbase.GroupBase.model_loader", "flearn.server.Server", "range", "groupbase.GroupBase.server.add_downlink", "importlib.import_module", "groupbase.GroupBase.groups.append", "flearn.client.Client", "numpy.vstack", "numpy.hstack", "flearn.group.Group", "server_test_data[].append", "server_test_data[].append", "groupbase.GroupBase.dataset.split"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_federated_data", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink"], ["", "def", "construct_actors", "(", "self", ")", ":", "\n", "# 1, Read dataset", "\n", "        ", "clients", ",", "train_data", ",", "test_data", "=", "read_federated_data", "(", "self", ".", "dataset", ")", "\n", "\n", "# 2, Get model loader according to dataset and model name and construct the model", "\n", "# Set the model loader according to the dataset and model name", "\n", "model_path", "=", "'flearn.model.%s.%s'", "%", "(", "self", ".", "dataset", ".", "split", "(", "'_'", ")", "[", "0", "]", ",", "self", ".", "model", ")", "\n", "self", ".", "model_loader", "=", "importlib", ".", "import_module", "(", "model_path", ")", ".", "construct_model", "\n", "# Construct the model", "\n", "client_model", "=", "self", ".", "model_loader", "(", "self", ".", "trainer_type", ",", "self", ".", "client_config", "[", "'learning_rate'", "]", ")", "\n", "\n", "# 3, Construct server", "\n", "self", ".", "server", "=", "Server", "(", "model", "=", "client_model", ")", "\n", "\n", "# 4, Construct Groups and set their uplink", "\n", "for", "id", "in", "range", "(", "self", ".", "num_group", ")", ":", "\n", "# We need create the empty datasets for each group", "\n", "            ", "empty_train_data", ",", "empty_test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", ",", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "self", ".", "groups", ".", "append", "(", "Group", "(", "id", ",", "self", ".", "group_config", ",", "empty_train_data", ",", "empty_test_data", ",", "\n", "[", "self", ".", "server", "]", ",", "client_model", ")", ")", "\n", "\n", "# 5, Construct clients (don't set their uplink)", "\n", "", "self", ".", "clients", "=", "[", "Client", "(", "id", ",", "self", ".", "client_config", ",", "train_data", "[", "id", "]", ",", "test_data", "[", "id", "]", ",", "\n", "model", "=", "client_model", ")", "for", "id", "in", "clients", "]", "\n", "\n", "# 6, Set the server's downlink to groups", "\n", "self", ".", "server", ".", "add_downlink", "(", "self", ".", "groups", ")", "\n", "\n", "# 7*, We evaluate the auxiliary global model on server", "\n", "# To speed the testing, we need construct a local test dataset for server", "\n", "if", "self", ".", "eval_global_model", "==", "True", ":", "\n", "            ", "server_test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "c", "in", "clients", ":", "\n", "                ", "server_test_data", "[", "'x'", "]", ".", "append", "(", "test_data", "[", "c", "]", "[", "'x'", "]", ")", "\n", "server_test_data", "[", "'y'", "]", ".", "append", "(", "test_data", "[", "c", "]", "[", "'y'", "]", ")", "\n", "", "self", ".", "server", ".", "test_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "server_test_data", "[", "'x'", "]", ")", "\n", "self", ".", "server", ".", "test_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "server_test_data", "[", "'y'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.inter_group_aggregation": [[94, 119], ["len", "enumerate", "enumerate", "sum", "enumerate", "numpy.sum", "len", "enumerate", "zip", "zip", "v.astype", "v.astype"], "methods", ["None"], ["def", "inter_group_aggregation", "(", "self", ",", "train_results", ",", "agg_lr", "=", "0.0", ")", ":", "\n", "        ", "group_num", "=", "len", "(", "train_results", ")", "\n", "groups", "=", "[", "rest", "[", "0", "]", "for", "rest", "in", "train_results", "]", "\n", "gsolns", "=", "[", "g", ".", "latest_params", "for", "g", "in", "groups", "]", "\n", "# Calculate the scale of group models", "\n", "gscale", "=", "[", "0", "]", "*", "group_num", "\n", "for", "i", ",", "gsoln", "in", "enumerate", "(", "gsolns", ")", ":", "\n", "            ", "for", "v", "in", "gsoln", ":", "\n", "                ", "gscale", "[", "i", "]", "+=", "np", ".", "sum", "(", "v", ".", "astype", "(", "np", ".", "float64", ")", "**", "2", ")", "\n", "", "gscale", "[", "i", "]", "=", "gscale", "[", "i", "]", "**", "0.5", "\n", "# Aggregate the models of each group separately", "\n", "", "for", "idx", ",", "g", "in", "enumerate", "(", "groups", ")", ":", "\n", "            ", "base", "=", "[", "0", "]", "*", "len", "(", "gsolns", "[", "idx", "]", ")", "\n", "weights", "=", "[", "agg_lr", "*", "(", "1.0", "/", "scale", ")", "for", "scale", "in", "gscale", "]", "\n", "weights", "[", "idx", "]", "=", "1", "# The weight of the main group is 1", "\n", "total_weights", "=", "sum", "(", "weights", ")", "\n", "for", "j", ",", "gsoln", "in", "enumerate", "(", "gsolns", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "enumerate", "(", "gsoln", ")", ":", "\n", "                    ", "base", "[", "k", "]", "+=", "weights", "[", "j", "]", "*", "v", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "", "averaged_soln", "=", "[", "v", "/", "total_weights", "for", "v", "in", "base", "]", "\n", "# Note: The latest_update accumulated from last fedavg training", "\n", "inter_aggregation_update", "=", "[", "w1", "-", "w0", "for", "w0", ",", "w1", "in", "zip", "(", "g", ".", "latest_params", ",", "averaged_soln", ")", "]", "\n", "g", ".", "latest_updates", "=", "[", "up0", "+", "up1", "for", "up0", ",", "up1", "in", "zip", "(", "g", ".", "latest_updates", ",", "inter_aggregation_update", ")", "]", "\n", "g", ".", "latest_params", "=", "averaged_soln", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.train": [[120, 198], ["range", "print", "groupbase.GroupBase.select_clients", "groupbase.GroupBase.data_distribution_shift", "groupbase.GroupBase.schedule_clients", "groupbase.GroupBase.schedule_groups", "time.time", "groupbase.GroupBase.server.train", "round", "collections.Counter", "sorted", "groupbase.GroupBase.refresh_discrepancy_and_dissmilarity", "groupbase.GroupBase.schedule_clients_after_training", "groupbase.GroupBase.summary_results", "groupbase.GroupBase.update_auxiliary_global_model", "groupbase.GroupBase.server.set_params", "print", "print", "time.time", "groupbase.GroupBase.inter_group_aggregation", "round", "time.time", "groupbase.GroupBase.server.test", "groupbase.GroupBase.summary_results", "round", "groupbase.GroupBase.writer.write_summary", "time.time", "groupbase.GroupBase.server.test_locally", "groupbase.GroupBase.summary_results", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.select_clients", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.data_distribution_shift", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.schedule_clients", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.schedule_groups", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.refresh_discrepancy_and_dissmilarity", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.schedule_clients_after_training", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.summary_results", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.update_auxiliary_global_model", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.inter_group_aggregation", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.summary_results", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.write_summary", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test_locally", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.summary_results"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "comm_round", "in", "range", "(", "self", ".", "num_rounds", ")", ":", "\n", "\n", "            ", "print", "(", "f'---------- Round {comm_round} ----------'", ")", "\n", "# 0, Init time record", "\n", "train_time", ",", "test_time", ",", "agg_time", "=", "0", ",", "0", ",", "0", "\n", "\n", "# 1, Random select clients", "\n", "selected_clients", "=", "self", ".", "select_clients", "(", "comm_round", ",", "self", ".", "clients_per_round", ")", "\n", "#selected_clients = self.clients[:20] # DEBUG, only use first 20 clients to train", "\n", "\n", "# * Change the clients's data distribution", "\n", "self", ".", "data_distribution_shift", "(", "comm_round", ",", "self", ".", "clients", ",", "self", ".", "shift_type", ",", "self", ".", "swap_p", ")", "\n", "\n", "# 2, Schedule clients (for example: reassign) or cold start clients, need selected clients only", "\n", "schedule_results", "=", "self", ".", "schedule_clients", "(", "comm_round", ",", "selected_clients", ",", "self", ".", "groups", ")", "\n", "\n", "# 3, Schedule groups (for example: recluster), need all clients", "\n", "self", ".", "schedule_groups", "(", "comm_round", ",", "self", ".", "clients", ",", "self", ".", "groups", ")", "\n", "\n", "# 4, Train selected clients", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_results", "=", "self", ".", "server", ".", "train", "(", "selected_clients", ")", "\n", "train_time", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "3", ")", "\n", "if", "train_results", "==", "None", ":", "\n", "                ", "continue", "\n", "\n", "# *, Print the grouping information of this round", "\n", "", "gids", "=", "[", "c", ".", "uplink", "[", "0", "]", ".", "id", "for", "c", "in", "selected_clients", "]", "\n", "count", "=", "Counter", "(", "gids", ")", "\n", "for", "id", "in", "sorted", "(", "count", ")", ":", "\n", "                ", "print", "(", "f'Round {comm_round}, Group {id} has {count[id]} client.'", ")", "\n", "\n", "# 5, Inter-group aggregation according to the group learning rate", "\n", "", "if", "self", ".", "group_agg_lr", ">", "0", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "inter_group_aggregation", "(", "train_results", ",", "self", ".", "group_agg_lr", ")", "\n", "agg_time", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "3", ")", "\n", "\n", "# 6, update the discrepancy and dissmilarity between group and client", "\n", "", "diffs", "=", "self", ".", "refresh_discrepancy_and_dissmilarity", "(", "selected_clients", ")", "\n", "\n", "# 7, schedule clients after training", "\n", "self", ".", "schedule_clients_after_training", "(", "comm_round", ",", "selected_clients", ",", "self", ".", "groups", ")", "\n", "\n", "# 7, Summary this round of training", "\n", "train_summary", "=", "self", ".", "summary_results", "(", "comm_round", ",", "train_results", "=", "train_results", ")", "\n", "\n", "# 8, Update the auxiliary global model. Simply average group models without weights", "\n", "# The empty group will not be aggregated", "\n", "self", ".", "update_auxiliary_global_model", "(", "[", "rest", "[", "0", "]", "for", "rest", "in", "train_results", "]", ")", "\n", "# Set the training model to the new server model, however this step is not important", "\n", "self", ".", "server", ".", "set_params", "(", "self", ".", "server", ".", "latest_params", ")", "\n", "\n", "# 9, Test the model (Last round training) every eval_every round and last round", "\n", "if", "comm_round", "%", "self", ".", "eval_every", "==", "0", "or", "comm_round", "==", "self", ".", "num_rounds", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Test model on all groups", "\n", "test_results", "=", "self", ".", "server", ".", "test", "(", "self", ".", "server", ".", "downlink", ")", "\n", "# Summary this test", "\n", "test_summary", "=", "self", ".", "summary_results", "(", "comm_round", ",", "test_results", "=", "test_results", ")", "\n", "\n", "if", "self", ".", "eval_global_model", "==", "True", ":", "\n", "# Test model on the server auxiliary model", "\n", "                    ", "test_samples", ",", "test_acc", ",", "test_loss", "=", "self", ".", "server", ".", "test_locally", "(", ")", "\n", "test_results", "=", "[", "[", "self", ".", "server", ",", "test_samples", ",", "test_acc", ",", "test_loss", "]", "]", "\n", "# Summary this test", "\n", "self", ".", "summary_results", "(", "comm_round", ",", "test_results", "=", "test_results", ")", "\n", "\n", "", "test_time", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "3", ")", "\n", "# Write the training result and test result to file", "\n", "# Note: Only write the complete test accuracy after all client cold start", "\n", "self", ".", "writer", ".", "write_summary", "(", "comm_round", ",", "train_summary", ",", "test_summary", ",", "diffs", ",", "schedule_results", ")", "\n", "\n", "# 10, Print the train, aggregate, test time", "\n", "", "print", "(", "f'Round: {comm_round}, Training time: {train_time}, Test time: {test_time}, \\\n                Inter-Group Aggregate time: {agg_time}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.select_clients": [[199, 225], ["min", "len", "random.seed", "random.sample", "random.seed", "len", "len", "len"], "methods", ["None"], ["", "", "def", "select_clients", "(", "self", ",", "comm_round", ",", "num_clients", "=", "20", ")", ":", "\n", "        ", "'''selects num_clients clients weighted by number of samples from possible_clients\n            For the consideration of test comparability, we first select the client by round robin, and then select by randomly\n        Args:\n            num_clients: number of clients to select; default 20\n                note that within function, num_clients is set to\n                min(num_clients, len(possible_clients))\n        \n        Return:\n            list of selected clients objects\n        '''", "\n", "\n", "num_clients", "=", "min", "(", "num_clients", ",", "len", "(", "self", ".", "clients", ")", ")", "\n", "# Round robin", "\n", "if", "comm_round", "<", "len", "(", "self", ".", "clients", ")", "/", "num_clients", ":", "\n", "            ", "head", "=", "comm_round", "*", "num_clients", "\n", "if", "head", "+", "num_clients", "<=", "len", "(", "self", ".", "clients", ")", ":", "\n", "                ", "selected_clients", "=", "self", ".", "clients", "[", "head", ":", "head", "+", "num_clients", "]", "\n", "", "else", ":", "\n", "                ", "selected_clients", "=", "self", ".", "clients", "[", "head", ":", "]", "+", "self", ".", "clients", "[", ":", "head", "+", "num_clients", "-", "len", "(", "self", ".", "clients", ")", "]", "\n", "# Random selecte clients", "\n", "", "", "else", ":", "\n", "            ", "random", ".", "seed", "(", "comm_round", "+", "self", ".", "seed", ")", "# make sure for each comparison, we are selecting the same clients each round", "\n", "selected_clients", "=", "random", ".", "sample", "(", "self", ".", "clients", ",", "num_clients", ")", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "# Restore the seed", "\n", "", "return", "selected_clients", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.federated_averaging_aggregate": [[226, 228], ["groupbase.GroupBase.weighted_aggregate"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.weighted_aggregate"], ["", "def", "federated_averaging_aggregate", "(", "self", ",", "updates", ",", "nks", ")", ":", "\n", "        ", "return", "self", ".", "weighted_aggregate", "(", "updates", ",", "nks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.simply_averaging_aggregate": [[229, 232], ["groupbase.GroupBase.weighted_aggregate", "len"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.weighted_aggregate"], ["", "def", "simply_averaging_aggregate", "(", "self", ",", "params_list", ")", ":", "\n", "        ", "weights", "=", "[", "1.0", "]", "*", "len", "(", "params_list", ")", "\n", "return", "self", ".", "weighted_aggregate", "(", "params_list", ",", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.weighted_aggregate": [[233, 243], ["len", "len", "range", "numpy.array", "numpy.sum", "agg_updates.append", "numpy.sum", "zip"], "methods", ["None"], ["", "def", "weighted_aggregate", "(", "self", ",", "updates", ",", "weights", ")", ":", "\n", "# Aggregate the updates according their weights", "\n", "        ", "normalws", "=", "np", ".", "array", "(", "weights", ",", "dtype", "=", "float", ")", "/", "np", ".", "sum", "(", "weights", ",", "dtype", "=", "np", ".", "float", ")", "\n", "num_clients", "=", "len", "(", "updates", ")", "\n", "num_layers", "=", "len", "(", "updates", "[", "0", "]", ")", "\n", "agg_updates", "=", "[", "]", "\n", "for", "la", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "agg_updates", ".", "append", "(", "np", ".", "sum", "(", "[", "up", "[", "la", "]", "*", "pro", "for", "up", ",", "pro", "in", "zip", "(", "updates", ",", "normalws", ")", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "return", "agg_updates", "# -> list", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.summary_results": [[247, 295], ["len", "print", "numpy.average", "numpy.average", "print", "termcolor.colored", "enumerate", "print", "len", "min", "round", "round", "len", "round", "round"], "methods", ["None"], ["def", "summary_results", "(", "self", ",", "comm_round", ",", "train_results", "=", "None", ",", "test_results", "=", "None", ")", ":", "\n", "\n", "        ", "partial_test_acc", "=", "False", "\n", "ty2", "=", "''", "\n", "if", "train_results", ":", "\n", "            ", "results", "=", "train_results", "\n", "ty", ",", "cor", "=", "'Train'", ",", "'blue'", "\n", "", "elif", "test_results", ":", "\n", "            ", "results", "=", "test_results", "\n", "ty", ",", "cor", "=", "'Test'", ",", "'red'", "\n", "if", "results", "[", "0", "]", "[", "0", "]", ".", "actor_type", "==", "'server'", ":", "\n", "                ", "ty", ",", "cor", "=", "'Auxiliary Model Test'", ",", "'green'", "\n", "", "if", "comm_round", "<", "len", "(", "self", ".", "clients", ")", "/", "min", "(", "self", ".", "clients_per_round", ",", "len", "(", "self", ".", "clients", ")", ")", ":", "\n", "                ", "ty2", "+=", "'(Partial)'", "\n", "# We do not write the partial test accuracy", "\n", "partial_test_acc", "=", "True", "\n", "", "else", ":", "\n", "                ", "ty2", "+=", "'(Complete)'", "\n", "", "", "else", ":", "\n", "            ", "return", "\n", "\n", "", "nks", "=", "[", "rest", "[", "1", "]", "for", "rest", "in", "results", "]", "\n", "num_sublink", "=", "len", "(", "nks", ")", "# Groups or clients", "\n", "accs", "=", "[", "rest", "[", "2", "]", "for", "rest", "in", "results", "]", "\n", "losses", "=", "[", "rest", "[", "3", "]", "for", "rest", "in", "results", "]", "\n", "print", "(", "'groupbase.py'", ",", "ty", ",", "'NKS:'", ",", "nks", ")", "\n", "weighted_acc", "=", "np", ".", "average", "(", "accs", ",", "weights", "=", "nks", ")", "\n", "weighted_loss", "=", "np", ".", "average", "(", "losses", ",", "weights", "=", "nks", ")", "\n", "print", "(", "colored", "(", "f'Round {comm_round}, {ty+ty2} ACC: {round(weighted_acc, 4)},\\\n            {ty+ty2} Loss: {round(weighted_loss, 4)}'", ",", "cor", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "\n", "summary", "=", "{", "'Total'", ":", "(", "num_sublink", ",", "weighted_acc", ",", "weighted_loss", ")", "}", "\n", "# Clear partial test result on summary", "\n", "if", "partial_test_acc", "==", "True", ":", "summary", "=", "{", "'Total'", ":", "(", "None", ",", "None", ",", "None", ")", "}", "\n", "\n", "# Record group accuracy and loss", "\n", "if", "results", "[", "0", "]", "[", "0", "]", ".", "actor_type", "==", "'group'", ":", "\n", "            ", "groups", "=", "[", "rest", "[", "0", "]", "for", "rest", "in", "results", "]", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "groups", ")", ":", "\n", "                ", "if", "partial_test_acc", "==", "True", ":", "accs", "[", "idx", "]", "\n", "summary", "[", "f'G{g.id}'", "]", "=", "(", "accs", "[", "idx", "]", ",", "losses", "[", "idx", "]", ",", "nks", "[", "idx", "]", ")", "# accuracy, loss, number of samples", "\n", "print", "(", "f'Round {comm_round}, Group: {g.id}, {ty} ACC: {round(accs[idx], 4)},\\\n                    {ty} Loss: {round(losses[idx], 4)}'", ")", "\n", "\n", "# Clear partial group test result on summary", "\n", "if", "partial_test_acc", "==", "True", ":", "summary", "[", "f'G{g.id}'", "]", "=", "(", "None", ",", "None", ",", "None", ")", "\n", "\n", "", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.train_locally": [[296, 330], ["print", "numpy.vstack", "numpy.hstack", "numpy.vstack", "numpy.hstack", "groupbase.GroupBase.server.model.summary", "groupbase.GroupBase.server.solve_inner", "groupbase.GroupBase.server.apply_update", "groupbase.GroupBase.server.test_locally", "print", "print", "server_test_data[].append", "server_test_data[].append", "server_train_data[].append", "server_train_data[].append", "termcolor.colored", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.solve_inner", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.apply_update", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test_locally"], ["", "def", "train_locally", "(", "self", ",", "num_epoch", "=", "20", ",", "batch_size", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n            We can train and test model on server for comparsion or debugging reseason\n        \"\"\"", "\n", "# 1, We collect all data into server", "\n", "print", "(", "\"Collect data.....\"", ")", "\n", "server_test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "server_train_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "c", "in", "self", ".", "clients", ":", "\n", "            ", "server_test_data", "[", "'x'", "]", ".", "append", "(", "c", ".", "test_data", "[", "'x'", "]", ")", "\n", "server_test_data", "[", "'y'", "]", ".", "append", "(", "c", ".", "test_data", "[", "'y'", "]", ")", "\n", "server_train_data", "[", "'x'", "]", ".", "append", "(", "c", ".", "train_data", "[", "'x'", "]", ")", "\n", "server_train_data", "[", "'y'", "]", ".", "append", "(", "c", ".", "train_data", "[", "'y'", "]", ")", "\n", "", "self", ".", "server", ".", "test_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "server_test_data", "[", "'x'", "]", ")", "\n", "self", ".", "server", ".", "test_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "server_test_data", "[", "'y'", "]", ")", "\n", "self", ".", "server", ".", "train_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "server_train_data", "[", "'x'", "]", ")", "\n", "self", ".", "server", ".", "train_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "server_train_data", "[", "'y'", "]", ")", "\n", "\n", "self", ".", "server", ".", "model", ".", "summary", "(", ")", "\n", "\n", "# 2, Server train locally", "\n", "train_size", ",", "train_acc", ",", "train_loss", ",", "soln", ",", "update", "=", "self", ".", "server", ".", "solve_inner", "(", "num_epoch", ",", "batch_size", ")", "\n", "# 3, Server Apply update", "\n", "self", ".", "server", ".", "apply_update", "(", "update", ")", "\n", "# 4, Server test locally", "\n", "test_size", ",", "test_acc", ",", "test_loss", "=", "self", ".", "server", ".", "test_locally", "(", ")", "\n", "\n", "# 5, Print result, we show the accuracy and loss of all training epochs", "\n", "print", "(", "f\"Train size: {train_size} Train ACC: {[round(acc, 4) for acc in train_acc]} \\\n             Train Loss: {[round(loss, 4) for loss in train_loss]}\"", ")", "\n", "print", "(", "colored", "(", "f\"Test size: {test_size}, Test ACC: {round(test_acc, 4)}, \\\n            Test Loss: {round(test_loss, 4)}\"", ",", "'red'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.schedule_clients": [[331, 341], ["client.has_uplink", "random.choice", "client.set_uplink", "random.choice.add_downlink"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink"], ["", "def", "schedule_clients", "(", "self", ",", "round", ",", "clients", ",", "groups", ")", ":", "\n", "        ", "\"\"\" Randomly schedule all clients to gorups\n            Rewrite this function if need\n        \"\"\"", "\n", "for", "client", "in", "clients", ":", "\n", "            ", "if", "client", ".", "has_uplink", "(", ")", "==", "False", ":", "\n", "                ", "assigned_group", "=", "random", ".", "choice", "(", "groups", ")", "\n", "client", ".", "set_uplink", "(", "[", "assigned_group", "]", ")", "\n", "assigned_group", ".", "add_downlink", "(", "client", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.schedule_clients_after_training": [[342, 344], ["None"], "methods", ["None"], ["", "def", "schedule_clients_after_training", "(", "self", ",", "comm_round", ",", "clients", ",", "groups", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.schedule_groups": [[345, 349], ["None"], "methods", ["None"], ["", "def", "schedule_groups", "(", "self", ",", "round", ",", "clients", ",", "groups", ")", ":", "\n", "        ", "\"\"\"rewrite this function if need\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.refresh_discrepancy_and_dissmilarity": [[352, 370], ["set", "c.update_difference", "groupbase.GroupBase.refresh_discrepancy_and_dissmilarity._calculate_mean_diffs"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.update_difference"], ["", "def", "refresh_discrepancy_and_dissmilarity", "(", "self", ",", "clients", ")", ":", "\n", "        ", "def", "_calculate_mean_diffs", "(", "clients", ")", ":", "\n", "            ", "discrepancy", "=", "[", "c", ".", "discrepancy", "for", "c", "in", "clients", "]", "\n", "dissimilarity", "=", "[", "c", ".", "cosine_dissimilarity", "for", "c", "in", "clients", "]", "\n", "return", "np", ".", "mean", "(", "discrepancy", ")", ",", "np", ".", "mean", "(", "dissimilarity", ")", "\n", "\n", "# Call the discrepancy update function of clients", "\n", "", "for", "c", "in", "clients", ":", "c", ".", "update_difference", "(", ")", "\n", "\n", "diffs", "=", "{", "}", "\n", "diffs", "[", "'Total'", "]", "=", "_calculate_mean_diffs", "(", "clients", ")", "[", "0", "]", "# Return discrepancy", "\n", "groups", "=", "set", "(", "[", "c", ".", "uplink", "[", "0", "]", "for", "c", "in", "clients", "]", ")", "\n", "for", "g", "in", "groups", ":", "\n", "            ", "gc", "=", "[", "c", "for", "c", "in", "clients", "if", "c", ".", "uplink", "[", "0", "]", "==", "g", "]", "\n", "g", ".", "discrepancy", ",", "g", ".", "cosine_dissimilarity", "=", "_calculate_mean_diffs", "(", "gc", ")", "\n", "# i.e. { 'G1': (numer of group clients, discrepancy) }", "\n", "diffs", "[", "f'G{g.id}'", "]", "=", "(", "len", "(", "gc", ")", ",", "g", ".", "discrepancy", ")", "\n", "", "return", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.update_auxiliary_global_model": [[373, 379], ["groupbase.GroupBase.simply_averaging_aggregate", "zip"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.simply_averaging_aggregate"], ["def", "update_auxiliary_global_model", "(", "self", ",", "groups", ")", ":", "\n", "        ", "prev_server_params", "=", "self", ".", "server", ".", "latest_params", "\n", "new_server_params", "=", "self", ".", "simply_averaging_aggregate", "(", "[", "g", ".", "latest_params", "for", "g", "in", "groups", "]", ")", "\n", "self", ".", "server", ".", "latest_updates", "=", "[", "(", "new", "-", "prev", ")", "for", "prev", ",", "new", "in", "zip", "(", "prev_server_params", ",", "new_server_params", ")", "]", "\n", "self", ".", "server", ".", "latest_params", "=", "new_server_params", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.swap_data": [[382, 449], ["len", "numpy.random.permutation", "numpy.random.choice", "int", "numpy.nonzero", "zip", "print", "c1.refresh", "c2.refresh", "g1.refresh", "g2.refresh", "print", "numpy.setdiff1d", "numpy.setdiff1d", "numpy.delete", "numpy.vstack", "numpy.delete", "numpy.vstack", "numpy.delete", "numpy.hstack", "numpy.delete", "numpy.hstack", "termcolor.colored", "termcolor.colored", "len", "len", "numpy.random.choice", "numpy.random.choice", "numpy.where", "numpy.where", "numpy.arange", "numpy.arange", "numpy.random.shuffle", "numpy.random.shuffle", "int", "int"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["def", "swap_data", "(", "self", ",", "clients", ",", "swap_p", ",", "scope", "=", "'all'", ")", ":", "\n", "\n", "# Swap the data of warm clients with probability swap_p", "\n", "        ", "clients_size", "=", "len", "(", "clients", ")", "\n", "# Randomly swap two clients' dataset", "\n", "if", "swap_p", ">", "0", "and", "swap_p", "<", "1", ":", "\n", "# Shuffle the client index", "\n", "            ", "shuffle_idx", "=", "np", ".", "random", ".", "permutation", "(", "clients_size", ")", "\n", "swap_flag", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "int", "(", "clients_size", "/", "2", ")", ",", "p", "=", "[", "1", "-", "swap_p", ",", "swap_p", "]", ")", "# Half size of clients_size", "\n", "for", "idx", "in", "np", ".", "nonzero", "(", "swap_flag", ")", "[", "0", "]", ":", "\n", "# Swap clients' data with index are idx and -(idx+1)", "\n", "                ", "cidx1", ",", "cidx2", "=", "shuffle_idx", "[", "idx", "]", ",", "shuffle_idx", "[", "-", "(", "idx", "+", "1", ")", "]", "\n", "c1", ",", "c2", "=", "clients", "[", "cidx1", "]", ",", "clients", "[", "cidx2", "]", "\n", "g1", ",", "g2", "=", "c1", ".", "uplink", "[", "0", "]", ",", "c2", ".", "uplink", "[", "0", "]", "\n", "\n", "# Swap train data and test data", "\n", "if", "scope", "==", "'all'", ":", "\n", "                    ", "c1", ".", "distribution_shift", ",", "c2", ".", "distribution_shift", "=", "True", ",", "True", "\n", "c1", ".", "train_data", ",", "c2", ".", "train_data", "=", "c2", ".", "train_data", ",", "c1", ".", "train_data", "\n", "c1", ".", "test_data", ",", "c2", ".", "test_data", "=", "c2", ".", "test_data", ",", "c1", ".", "test_data", "\n", "if", "g2", "!=", "g1", ":", "\n", "                        ", "print", "(", "colored", "(", "f\"Swap C-{c1.id}@G{g1.id} and C-{c2.id}@G{g2.id} data\"", ",", "'cyan'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "\n", "", "", "if", "scope", "==", "'part'", ":", "\n", "                    ", "if", "len", "(", "c1", ".", "label_array", ")", "==", "0", "or", "len", "(", "c2", ".", "label_array", ")", "==", "0", ":", "return", "\n", "c1_diff", ",", "c2_diff", "=", "np", ".", "setdiff1d", "(", "c1", ".", "label_array", ",", "c2", ".", "label_array", ",", "True", ")", ",", "np", ".", "setdiff1d", "(", "c2", ".", "label_array", ",", "c1", ".", "label_array", ",", "True", ")", "\n", "if", "c1_diff", ".", "size", "==", "0", "or", "c2_diff", ".", "size", "==", "0", ":", "return", "\n", "c1_swap_label", ",", "c2_swap_label", "=", "np", ".", "random", ".", "choice", "(", "c1_diff", ",", "1", ")", "[", "0", "]", ",", "np", ".", "random", ".", "choice", "(", "c2_diff", ",", "1", ")", "[", "0", "]", "\n", "c1", ".", "distribution_shift", ",", "c2", ".", "distribution_shift", "=", "True", ",", "True", "\n", "'''\n                    print('Debug', np.unique(c1.train_data['y']), np.unique(c1.test_data['y']))\n                    print('Debug', np.unique(c2.train_data['y']), np.unique(c2.test_data['y']))\n                    print(c1_swap_label, c2_swap_label)\n                    '''", "\n", "\n", "for", "c1_data", ",", "c2_data", "in", "zip", "(", "[", "c1", ".", "train_data", ",", "c1", ".", "test_data", "]", ",", "[", "c2", ".", "train_data", ",", "c2", ".", "test_data", "]", ")", ":", "\n", "                        ", "label_idx1", "=", "np", ".", "where", "(", "c1_data", "[", "'y'", "]", "==", "c1_swap_label", ")", "[", "0", "]", "\n", "label_idx2", "=", "np", ".", "where", "(", "c2_data", "[", "'y'", "]", "==", "c2_swap_label", ")", "[", "0", "]", "\n", "c1_swap_x", ",", "c2_swap_x", "=", "c1_data", "[", "'x'", "]", "[", "label_idx1", "]", ",", "c2_data", "[", "'x'", "]", "[", "label_idx2", "]", "\n", "c1_swap_y", ",", "c2_swap_y", "=", "c1_data", "[", "'y'", "]", "[", "label_idx1", "]", ",", "c2_data", "[", "'y'", "]", "[", "label_idx2", "]", "\n", "\n", "# Swap the feature", "\n", "c1_data", "[", "'x'", "]", "=", "np", ".", "delete", "(", "c1_data", "[", "'x'", "]", ",", "label_idx1", ",", "axis", "=", "0", ")", "\n", "c1_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "[", "c1_data", "[", "'x'", "]", ",", "c2_swap_x", "]", ")", "\n", "c2_data", "[", "'x'", "]", "=", "np", ".", "delete", "(", "c2_data", "[", "'x'", "]", ",", "label_idx2", ",", "axis", "=", "0", ")", "\n", "c2_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "[", "c2_data", "[", "'x'", "]", ",", "c1_swap_x", "]", ")", "\n", "\n", "# Swap the label", "\n", "c1_data", "[", "'y'", "]", "=", "np", ".", "delete", "(", "c1_data", "[", "'y'", "]", ",", "label_idx1", ")", "\n", "c1_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "[", "c1_data", "[", "'y'", "]", ",", "c2_swap_y", "]", ")", "\n", "c2_data", "[", "'y'", "]", "=", "np", ".", "delete", "(", "c2_data", "[", "'y'", "]", ",", "label_idx2", ")", "\n", "c2_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "[", "c2_data", "[", "'y'", "]", ",", "c1_swap_y", "]", ")", "\n", "\n", "# Shuffle the data", "\n", "random_idx1", ",", "random_idx2", "=", "np", ".", "arange", "(", "c1_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "c2_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "random_idx1", ")", ",", "np", ".", "random", ".", "shuffle", "(", "random_idx2", ")", "\n", "c1_data", "[", "'x'", "]", ",", "c1_data", "[", "'y'", "]", "=", "c1_data", "[", "'x'", "]", "[", "random_idx1", "]", ",", "c1_data", "[", "'y'", "]", "[", "random_idx1", "]", "\n", "c2_data", "[", "'x'", "]", ",", "c2_data", "[", "'y'", "]", "=", "c2_data", "[", "'x'", "]", "[", "random_idx2", "]", ",", "c2_data", "[", "'y'", "]", "[", "random_idx2", "]", "\n", "\n", "", "print", "(", "colored", "(", "f\"Swap C-{c1.id}@G{g1.id}-L{int(c1_swap_label)} and C-{c2.id}@G{g2.id}-L{int(c2_swap_label)} data\"", ",", "'cyan'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "\n", "# Refresh client and group", "\n", "", "_", ",", "_", ",", "_", "=", "c1", ".", "refresh", "(", ")", ",", "c2", ".", "refresh", "(", ")", ",", "g1", ".", "refresh", "(", ")", "\n", "if", "g2", "!=", "g1", ":", "g2", ".", "refresh", "(", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.increase_data": [[450, 475], ["print", "numpy.arange", "numpy.random.shuffle", "math.ceil", "c.refresh", "c.has_uplink", "processing_round.index", "c.uplink[].refresh"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["", "def", "increase_data", "(", "self", ",", "round", ",", "clients", ")", ":", "\n", "        ", "processing_round", "=", "[", "0", ",", "50", ",", "100", ",", "150", "]", "\n", "rate", "=", "[", "1", "/", "4", ",", "1", "/", "2", ",", "3", "/", "4", ",", "1.0", "]", "\n", "\n", "if", "round", "==", "0", ":", "\n", "            ", "self", ".", "shuffle_index_dict", "=", "{", "}", "\n", "# Shuffle the train data", "\n", "for", "c", "in", "clients", ":", "\n", "                ", "cidx", "=", "np", ".", "arange", "(", "c", ".", "train_data", "[", "'y'", "]", ".", "size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "cidx", ")", "\n", "self", ".", "shuffle_index_dict", "[", "c", "]", "=", "cidx", "\n", "\n", "", "", "if", "round", "in", "processing_round", ":", "\n", "            ", "release_rate", "=", "rate", "[", "processing_round", ".", "index", "(", "round", ")", "]", "\n", "print", "(", "'>Round {:3d}, {:.1%} training data release.'", ".", "format", "(", "round", ",", "release_rate", ")", ")", "\n", "for", "c", "in", "clients", ":", "\n", "# Calculate new train size", "\n", "                ", "train_size", "=", "ceil", "(", "c", ".", "train_data", "[", "'y'", "]", ".", "size", "*", "release_rate", ")", "\n", "release_index", "=", "self", ".", "shuffle_index_dict", "[", "c", "]", "[", ":", "train_size", "]", "\n", "c", ".", "train_data", "[", "'x'", "]", "=", "c", ".", "original_train_data", "[", "'x'", "]", "[", "release_index", "]", "\n", "c", ".", "train_data", "[", "'y'", "]", "=", "c", ".", "original_train_data", "[", "'y'", "]", "[", "release_index", "]", "\n", "\n", "c", ".", "refresh", "(", ")", "\n", "if", "c", ".", "has_uplink", "(", ")", ":", "c", ".", "uplink", "[", "0", "]", ".", "refresh", "(", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.data_distribution_shift": [[476, 487], ["groupbase.GroupBase.increase_data", "groupbase.GroupBase.swap_data", "len", "c.has_uplink"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.increase_data", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.swap_data", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink"], ["", "def", "data_distribution_shift", "(", "self", ",", "round", ",", "clients", ",", "shift_type", "=", "None", ",", "swap_p", "=", "0", ")", ":", "\n", "        ", "if", "shift_type", "==", "None", ":", "\n", "            ", "return", "\n", "\n", "", "if", "shift_type", "==", "'increment'", ":", "\n", "            ", "self", ".", "increase_data", "(", "round", ",", "clients", ")", "\n", "", "else", ":", "\n", "            ", "warm_clients", "=", "[", "c", "for", "c", "in", "clients", "if", "c", ".", "has_uplink", "(", ")", "==", "True", "]", "\n", "if", "len", "(", "warm_clients", ")", "==", "0", ":", "return", "\n", "self", ".", "swap_data", "(", "warm_clients", ",", "swap_p", ",", "shift_type", ")", "\n", "", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.__init__": [[17, 38], ["train_config.trainer_config.items", "tensorflow.random.set_seed", "numpy.random.seed", "random.seed", "fedavg.FedAvg.construct_actors", "utils.export_result.ResultWriter", "setattr"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.construct_actors"], ["    ", "def", "__init__", "(", "self", ",", "train_config", ")", ":", "\n", "# Transfer trainer config to self, we save the configurations by this trick", "\n", "        ", "for", "key", ",", "val", "in", "train_config", ".", "trainer_config", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "", "self", ".", "trainer_type", "=", "train_config", ".", "trainer_type", "\n", "# Get the config of client", "\n", "self", ".", "client_config", "=", "train_config", ".", "client_config", "\n", "# Evaluate model on all clients or on this server", "\n", "self", ".", "eval_locally", "=", "True", "\n", "\n", "# Set the random set", "\n", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "\n", "# Construct the actors", "\n", "self", ".", "clients", "=", "None", "\n", "self", ".", "construct_actors", "(", ")", "\n", "\n", "# Create results writer", "\n", "self", ".", "writer", "=", "ResultWriter", "(", "train_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.construct_actors": [[39, 71], ["utils.read_data.read_federated_data", "fedavg.FedAvg.model_loader", "fedavg.FedAvg.summary", "flearn.server.Server", "fedavg.FedAvg.server.add_downlink", "importlib.import_module", "flearn.client.Client", "numpy.vstack", "numpy.hstack", "server_test_data[].append", "server_test_data[].append", "fedavg.FedAvg.dataset.split"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.utils.read_data.read_federated_data", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink"], ["", "def", "construct_actors", "(", "self", ")", ":", "\n", "# 1, Read dataset", "\n", "        ", "clients", ",", "train_data", ",", "test_data", "=", "read_federated_data", "(", "self", ".", "dataset", ")", "\n", "\n", "# 2, Get model loader according to dataset and model name and construct the model", "\n", "# Set the model loader according to the dataset and model name", "\n", "model_path", "=", "'flearn.model.%s.%s'", "%", "(", "self", ".", "dataset", ".", "split", "(", "'_'", ")", "[", "0", "]", ",", "self", ".", "model", ")", "\n", "self", ".", "model_loader", "=", "importlib", ".", "import_module", "(", "model_path", ")", ".", "construct_model", "\n", "# Construct the model", "\n", "client_model", "=", "self", ".", "model_loader", "(", "'fedavg'", ",", "self", ".", "client_config", "[", "'learning_rate'", "]", ")", "\n", "# *Print the summary of model", "\n", "client_model", ".", "summary", "(", ")", "\n", "\n", "# 3, Construct server", "\n", "self", ".", "server", "=", "Server", "(", "model", "=", "client_model", ")", "\n", "\n", "# 4, Construct clients and set their uplink", "\n", "self", ".", "clients", "=", "[", "Client", "(", "id", ",", "self", ".", "client_config", ",", "train_data", "[", "id", "]", ",", "test_data", "[", "id", "]", ",", "\n", "uplink", "=", "[", "self", ".", "server", "]", ",", "model", "=", "client_model", ")", "for", "id", "in", "clients", "]", "\n", "\n", "# 5, Set the downlink of server", "\n", "self", ".", "server", ".", "add_downlink", "(", "self", ".", "clients", ")", "\n", "\n", "# 6*, We can evaluate model on server to speed the testing,", "\n", "# We need construct a total test dataset of server", "\n", "if", "self", ".", "eval_locally", "==", "True", ":", "\n", "            ", "server_test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "c", "in", "clients", ":", "\n", "                ", "server_test_data", "[", "'x'", "]", ".", "append", "(", "test_data", "[", "c", "]", "[", "'x'", "]", ")", "\n", "server_test_data", "[", "'y'", "]", ".", "append", "(", "test_data", "[", "c", "]", "[", "'y'", "]", ")", "\n", "", "self", ".", "server", ".", "test_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "server_test_data", "[", "'x'", "]", ")", "\n", "self", ".", "server", ".", "test_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "server_test_data", "[", "'y'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train": [[72, 148], ["range", "fedavg.FedAvg.select_clients", "fedavg.FedAvg.data_distribution_shift", "time.time", "fedavg.FedAvg.server.train", "round", "fedavg.FedAvg.summary_results", "time.time", "fedavg.FedAvg.federated_averaging_aggregate", "round", "fedavg.FedAvg.server.apply_update", "fedavg.FedAvg.server.set_params", "print", "c.update_difference", "time.time", "round", "fedavg.FedAvg.summary_results", "fedavg.FedAvg.writer.write_row", "time.time", "time.time", "fedavg.FedAvg.server.test", "fedavg.FedAvg.server.test_locally", "zip", "time.time", "fedavg.FedAvg.calculate_mean_discrepancy"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.select_clients", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.data_distribution_shift", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.summary_results", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.federated_averaging_aggregate", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.apply_update", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.update_difference", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.summary_results", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.export_result.ResultWriter.write_row", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test_locally", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.calculate_mean_discrepancy"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "comm_round", "in", "range", "(", "self", ".", "num_rounds", ")", ":", "\n", "\n", "# 0, Init time record", "\n", "            ", "train_time", ",", "test_time", ",", "agg_time", "=", "0", ",", "0", ",", "0", "\n", "\n", "# 1, Random select clients", "\n", "selected_clients", "=", "self", ".", "select_clients", "(", "comm_round", ")", "\n", "#selected_clients = self.clients[:20] # DEBUG, only use first 20 clients to train", "\n", "\n", "# * Change the clients's data distribution", "\n", "self", ".", "data_distribution_shift", "(", "comm_round", ",", "self", ".", "clients", ",", "self", ".", "shift_type", ",", "self", ".", "swap_p", ")", "\n", "\n", "# 2, The server boardcasts the model to clients", "\n", "for", "c", "in", "selected_clients", ":", "\n", "# The selected client calculate the latest_update (This may be many rounds apart)", "\n", "                ", "c", ".", "latest_updates", "=", "[", "(", "w1", "-", "w0", ")", "for", "w0", ",", "w1", "in", "zip", "(", "c", ".", "latest_params", ",", "self", ".", "server", ".", "latest_params", ")", "]", "\n", "# Broadcast the gloabl model to selected clients", "\n", "c", ".", "latest_params", "=", "self", ".", "server", ".", "latest_params", "\n", "\n", "# 3, Train selected clients", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_results", "=", "self", ".", "server", ".", "train", "(", "selected_clients", ")", "\n", "train_time", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "3", ")", "\n", "if", "train_results", "==", "None", ":", "\n", "                ", "continue", "\n", "\n", "# 4, Summary this round of training", "\n", "", "num_train_clients", ",", "weighted_train_acc", ",", "weighted_train_loss", "=", "self", ".", "summary_results", "(", "comm_round", ",", "train_results", "=", "train_results", ")", "\n", "\n", "# 5, Get model updates (list) and number of samples (list) of clients", "\n", "nks", "=", "[", "rest", "[", "1", "]", "for", "rest", "in", "train_results", "]", "# -> list", "\n", "updates", "=", "[", "rest", "[", "4", "]", "for", "rest", "in", "train_results", "]", "# -> list", "\n", "\n", "# 6, Aggregate these client acoording to number of samples (FedAvg)", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "agg_updates", "=", "self", ".", "federated_averaging_aggregate", "(", "updates", ",", "nks", ")", "\n", "agg_time", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "3", ")", "\n", "\n", "# 7, Apply update to the global model. All clients and sever share", "\n", "# the same model instance, so we just apply update to server and refresh", "\n", "# the latest_params and lastest_updates for selected clients. ", "\n", "# Calculate the discrepancy between the global model and client model ", "\n", "self", ".", "server", ".", "apply_update", "(", "agg_updates", ")", "\n", "# Set the training model to the new server model, however this step is not important", "\n", "self", ".", "server", ".", "set_params", "(", "self", ".", "server", ".", "latest_params", ")", "\n", "\n", "for", "c", "in", "selected_clients", ":", "\n", "                ", "''' The latest_params and updates will be refreshed next time they are selected.\n                c.latest_params = self.server.latest_params\n                c.latest_updates = agg_updates\n                '''", "\n", "c", ".", "update_difference", "(", ")", "# Based on latest_soln and latest_gradient", "\n", "\n", "# 8, Test the model every eval_every round and the last round", "\n", "", "if", "comm_round", "%", "self", ".", "eval_every", "==", "0", "or", "comm_round", "==", "self", ".", "num_rounds", "-", "1", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "eval_locally", "==", "False", ":", "\n", "# Test model on all clients,", "\n", "#test_results = self.server.test()", "\n", "                    ", "test_results", "=", "self", ".", "server", ".", "test", "(", "selected_clients", ")", "\n", "", "else", ":", "\n", "# OR Test model on the server (Faster)", "\n", "                    ", "test_samples", ",", "test_acc", ",", "test_loss", "=", "self", ".", "server", ".", "test_locally", "(", ")", "\n", "test_results", "=", "[", "[", "self", ".", "server", ",", "test_samples", ",", "test_acc", ",", "test_loss", "]", "]", "\n", "\n", "", "test_time", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "3", ")", "\n", "# Summary this test", "\n", "_", ",", "weighted_test_acc", ",", "weighted_test_loss", "=", "self", ".", "summary_results", "(", "comm_round", ",", "test_results", "=", "test_results", ")", "\n", "# Write this evalution result ot file", "\n", "self", ".", "writer", ".", "write_row", "(", "comm_round", ",", "[", "weighted_test_acc", ",", "weighted_train_acc", ",", "weighted_train_loss", ",", "num_train_clients", ",", "self", ".", "calculate_mean_discrepancy", "(", "selected_clients", ")", "]", ")", "\n", "\n", "# 9, Print the train, aggregate, test time", "\n", "", "print", "(", "f'Round: {comm_round}, Training time: {train_time}, Test time: {test_time}, Aggregate time: {agg_time}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.select_clients": [[149, 166], ["min", "random.seed", "random.sample", "random.seed", "len"], "methods", ["None"], ["", "", "def", "select_clients", "(", "self", ",", "comm_round", ",", "num_clients", "=", "20", ")", ":", "\n", "        ", "'''selects num_clients clients weighted by number of samples from possible_clients\n        \n        Args:\n            num_clients: number of clients to select; default 20\n                note that within function, num_clients is set to\n                min(num_clients, len(possible_clients))\n        \n        Return:\n            list of selected clients objects\n        '''", "\n", "\n", "num_clients", "=", "min", "(", "num_clients", ",", "len", "(", "self", ".", "clients", ")", ")", "\n", "random", ".", "seed", "(", "comm_round", "+", "self", ".", "seed", ")", "# make sure for each comparison, we are selecting the same clients each round", "\n", "selected_clients", "=", "random", ".", "sample", "(", "self", ".", "clients", ",", "num_clients", ")", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "# Restore the seed", "\n", "return", "selected_clients", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.federated_averaging_aggregate": [[167, 169], ["fedavg.FedAvg.weighted_aggregate"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.weighted_aggregate"], ["", "def", "federated_averaging_aggregate", "(", "self", ",", "updates", ",", "nks", ")", ":", "\n", "        ", "return", "self", ".", "weighted_aggregate", "(", "updates", ",", "nks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.weighted_aggregate": [[171, 187], ["len", "len", "range", "numpy.array", "numpy.sum", "agg_updates.append", "numpy.sum", "zip"], "methods", ["None"], ["", "def", "weighted_aggregate", "(", "self", ",", "updates", ",", "weights", ")", ":", "\n", "# Aggregate the updates according their weights", "\n", "        ", "normalws", "=", "np", ".", "array", "(", "weights", ",", "dtype", "=", "float", ")", "/", "np", ".", "sum", "(", "weights", ",", "dtype", "=", "np", ".", "float", ")", "\n", "num_clients", "=", "len", "(", "updates", ")", "\n", "num_layers", "=", "len", "(", "updates", "[", "0", "]", ")", "\n", "# Shape=(num_clients, num_layers, num_params)", "\n", "# np_updates = np.array(updates, dtype=float).reshape(num_clients, num_layers, -1)", "\n", "agg_updates", "=", "[", "]", "\n", "for", "la", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "agg_updates", ".", "append", "(", "np", ".", "sum", "(", "[", "up", "[", "la", "]", "*", "pro", "for", "up", ",", "pro", "in", "zip", "(", "updates", ",", "normalws", ")", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# np_agg_updates = np.sum(np_updates*normalws, axis=0) #-> shape=(num_layers, num_params)", "\n", "# Convert numpy array to list of array format (keras weights format)", "\n", "#agg_updates = [np_agg_updates[i] for i in range(num_layers)]", "\n", "\n", "", "return", "agg_updates", "# -> list", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.summary_results": [[188, 210], ["len", "numpy.average", "numpy.average", "print", "len", "numpy.average", "numpy.average", "print", "termcolor.colored", "termcolor.colored", "round", "round", "round", "round"], "methods", ["None"], ["", "def", "summary_results", "(", "self", ",", "comm_round", ",", "train_results", "=", "None", ",", "test_results", "=", "None", ")", ":", "\n", "\n", "        ", "if", "train_results", ":", "\n", "            ", "nks", "=", "[", "rest", "[", "1", "]", "for", "rest", "in", "train_results", "]", "\n", "num_clients", "=", "len", "(", "nks", ")", "\n", "train_accs", "=", "[", "rest", "[", "2", "]", "for", "rest", "in", "train_results", "]", "\n", "train_losses", "=", "[", "rest", "[", "3", "]", "for", "rest", "in", "train_results", "]", "\n", "weighted_train_acc", "=", "np", ".", "average", "(", "train_accs", ",", "weights", "=", "nks", ")", "\n", "weighted_train_loss", "=", "np", ".", "average", "(", "train_losses", ",", "weights", "=", "nks", ")", "\n", "print", "(", "colored", "(", "f'Round {comm_round}, Train ACC: {round(weighted_train_acc, 4)},\\\n                Train Loss: {round(weighted_train_loss, 4)}'", ",", "'blue'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "return", "num_clients", ",", "weighted_train_acc", ",", "weighted_train_loss", "\n", "", "if", "test_results", ":", "\n", "            ", "nks", "=", "[", "rest", "[", "1", "]", "for", "rest", "in", "test_results", "]", "\n", "num_clients", "=", "len", "(", "nks", ")", "\n", "test_accs", "=", "[", "rest", "[", "2", "]", "for", "rest", "in", "test_results", "]", "\n", "test_losses", "=", "[", "rest", "[", "3", "]", "for", "rest", "in", "test_results", "]", "\n", "weighted_test_acc", "=", "np", ".", "average", "(", "test_accs", ",", "weights", "=", "nks", ")", "\n", "weighted_test_loss", "=", "np", ".", "average", "(", "test_losses", ",", "weights", "=", "nks", ")", "\n", "print", "(", "colored", "(", "f'Round {comm_round}, Test ACC: {round(weighted_test_acc, 4)},\\\n                Test Loss: {round(weighted_test_loss, 4)}'", ",", "'red'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "return", "num_clients", ",", "weighted_test_acc", ",", "weighted_test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.train_locally": [[211, 243], ["print", "numpy.vstack", "numpy.hstack", "numpy.vstack", "numpy.hstack", "fedavg.FedAvg.server.solve_inner", "fedavg.FedAvg.server.apply_update", "fedavg.FedAvg.server.test_locally", "print", "print", "server_test_data[].append", "server_test_data[].append", "server_train_data[].append", "server_train_data[].append", "termcolor.colored", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.solve_inner", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.apply_update", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.test_locally"], ["", "", "def", "train_locally", "(", "self", ",", "num_epoch", "=", "30", ",", "batch_size", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n            We can train and test model on server for comparsion or debugging reseason\n        \"\"\"", "\n", "# 1, We collect all data into server", "\n", "print", "(", "\"Collect data.....\"", ")", "\n", "server_test_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "server_train_data", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "for", "c", "in", "self", ".", "clients", ":", "\n", "            ", "server_test_data", "[", "'x'", "]", ".", "append", "(", "c", ".", "test_data", "[", "'x'", "]", ")", "\n", "server_test_data", "[", "'y'", "]", ".", "append", "(", "c", ".", "test_data", "[", "'y'", "]", ")", "\n", "server_train_data", "[", "'x'", "]", ".", "append", "(", "c", ".", "train_data", "[", "'x'", "]", ")", "\n", "server_train_data", "[", "'y'", "]", ".", "append", "(", "c", ".", "train_data", "[", "'y'", "]", ")", "\n", "", "self", ".", "server", ".", "test_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "server_test_data", "[", "'x'", "]", ")", "\n", "self", ".", "server", ".", "test_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "server_test_data", "[", "'y'", "]", ")", "\n", "self", ".", "server", ".", "train_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "server_train_data", "[", "'x'", "]", ")", "\n", "self", ".", "server", ".", "train_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "server_train_data", "[", "'y'", "]", ")", "\n", "\n", "#self.server.model.summary()", "\n", "\n", "# 2, Server train locally", "\n", "train_size", ",", "train_acc", ",", "train_loss", ",", "_", ",", "update", "=", "self", ".", "server", ".", "solve_inner", "(", "num_epoch", ",", "batch_size", ")", "\n", "# 3, Server Apply update", "\n", "self", ".", "server", ".", "apply_update", "(", "update", ")", "\n", "# 4, Server test locally", "\n", "test_size", ",", "test_acc", ",", "test_loss", "=", "self", ".", "server", ".", "test_locally", "(", ")", "\n", "\n", "# 5, Print result, we show the accuracy and loss of all training epochs", "\n", "print", "(", "f\"Train size: {train_size} Train ACC: {[round(acc, 4) for acc in train_acc]} \\\n             Train Loss: {[round(loss, 4) for loss in train_loss]}\"", ")", "\n", "print", "(", "colored", "(", "f\"Test size: {test_size}, Test ACC: {round(test_acc, 4)}, \\\n            Test Loss: {round(test_loss, 4)}\"", ",", "'red'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.calculate_mean_discrepancy": [[244, 247], ["numpy.mean"], "methods", ["None"], ["", "def", "calculate_mean_discrepancy", "(", "self", ",", "clients", ")", ":", "\n", "        ", "discrepancy", "=", "[", "c", ".", "discrepancy", "for", "c", "in", "clients", "]", "\n", "return", "np", ".", "mean", "(", "discrepancy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.swap_data": [[250, 316], ["len", "numpy.random.permutation", "numpy.random.choice", "int", "numpy.nonzero", "print", "zip", "print", "c1.refresh", "c2.refresh", "g1.refresh", "g2.refresh", "termcolor.colored", "numpy.setdiff1d", "numpy.setdiff1d", "numpy.delete", "numpy.vstack", "numpy.delete", "numpy.vstack", "numpy.delete", "numpy.hstack", "numpy.delete", "numpy.hstack", "termcolor.colored", "len", "len", "numpy.random.choice", "numpy.random.choice", "numpy.where", "numpy.where", "numpy.arange", "numpy.arange", "numpy.random.shuffle", "numpy.random.shuffle", "int", "int"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["def", "swap_data", "(", "self", ",", "clients", ",", "swap_p", ",", "scope", "=", "'all'", ")", ":", "\n", "\n", "# Swap the data of all clients with probability swap_p", "\n", "        ", "clients_size", "=", "len", "(", "clients", ")", "\n", "# Randomly swap two clients' dataset", "\n", "if", "swap_p", ">", "0", "and", "swap_p", "<", "1", ":", "\n", "# Shuffle the client index", "\n", "            ", "shuffle_idx", "=", "np", ".", "random", ".", "permutation", "(", "clients_size", ")", "\n", "swap_flag", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "int", "(", "clients_size", "/", "2", ")", ",", "p", "=", "[", "1", "-", "swap_p", ",", "swap_p", "]", ")", "# Half size of clients_size", "\n", "for", "idx", "in", "np", ".", "nonzero", "(", "swap_flag", ")", "[", "0", "]", ":", "\n", "# Swap clients' data with index are idx and -(idx+1)", "\n", "                ", "cidx1", ",", "cidx2", "=", "shuffle_idx", "[", "idx", "]", ",", "shuffle_idx", "[", "-", "(", "idx", "+", "1", ")", "]", "\n", "c1", ",", "c2", "=", "clients", "[", "cidx1", "]", ",", "clients", "[", "cidx2", "]", "\n", "g1", ",", "g2", "=", "c1", ".", "uplink", "[", "0", "]", ",", "c2", ".", "uplink", "[", "0", "]", "\n", "\n", "# Swap train data and test data", "\n", "if", "scope", "==", "'all'", ":", "\n", "                    ", "c1", ".", "distribution_shift", ",", "c2", ".", "distribution_shift", "=", "True", ",", "True", "\n", "c1", ".", "train_data", ",", "c2", ".", "train_data", "=", "c2", ".", "train_data", ",", "c1", ".", "train_data", "\n", "c1", ".", "test_data", ",", "c2", ".", "test_data", "=", "c2", ".", "test_data", ",", "c1", ".", "test_data", "\n", "print", "(", "colored", "(", "f\"Swap C-{c1.id}@G{g1.id} and C-{c2.id}@G{g2.id} data\"", ",", "'cyan'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "\n", "", "if", "scope", "==", "'part'", ":", "\n", "                    ", "if", "len", "(", "c1", ".", "label_array", ")", "==", "0", "or", "len", "(", "c2", ".", "label_array", ")", "==", "0", ":", "return", "\n", "c1_diff", ",", "c2_diff", "=", "np", ".", "setdiff1d", "(", "c1", ".", "label_array", ",", "c2", ".", "label_array", ",", "True", ")", ",", "np", ".", "setdiff1d", "(", "c2", ".", "label_array", ",", "c1", ".", "label_array", ",", "True", ")", "\n", "if", "c1_diff", ".", "size", "==", "0", "or", "c2_diff", ".", "size", "==", "0", ":", "return", "\n", "c1_swap_label", ",", "c2_swap_label", "=", "np", ".", "random", ".", "choice", "(", "c1_diff", ",", "1", ")", "[", "0", "]", ",", "np", ".", "random", ".", "choice", "(", "c2_diff", ",", "1", ")", "[", "0", "]", "\n", "c1", ".", "distribution_shift", ",", "c2", ".", "distribution_shift", "=", "True", ",", "True", "\n", "'''\n                    print('Debug', np.unique(c1.train_data['y']), np.unique(c1.test_data['y']))\n                    print('Debug', np.unique(c2.train_data['y']), np.unique(c2.test_data['y']))\n                    print(c1_swap_label, c2_swap_label)\n                    '''", "\n", "\n", "for", "c1_data", ",", "c2_data", "in", "zip", "(", "[", "c1", ".", "train_data", ",", "c1", ".", "test_data", "]", ",", "[", "c2", ".", "train_data", ",", "c2", ".", "test_data", "]", ")", ":", "\n", "                        ", "label_idx1", "=", "np", ".", "where", "(", "c1_data", "[", "'y'", "]", "==", "c1_swap_label", ")", "[", "0", "]", "\n", "label_idx2", "=", "np", ".", "where", "(", "c2_data", "[", "'y'", "]", "==", "c2_swap_label", ")", "[", "0", "]", "\n", "c1_swap_x", ",", "c2_swap_x", "=", "c1_data", "[", "'x'", "]", "[", "label_idx1", "]", ",", "c2_data", "[", "'x'", "]", "[", "label_idx2", "]", "\n", "c1_swap_y", ",", "c2_swap_y", "=", "c1_data", "[", "'y'", "]", "[", "label_idx1", "]", ",", "c2_data", "[", "'y'", "]", "[", "label_idx2", "]", "\n", "\n", "# Swap the feature", "\n", "c1_data", "[", "'x'", "]", "=", "np", ".", "delete", "(", "c1_data", "[", "'x'", "]", ",", "label_idx1", ",", "axis", "=", "0", ")", "\n", "c1_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "[", "c1_data", "[", "'x'", "]", ",", "c2_swap_x", "]", ")", "\n", "c2_data", "[", "'x'", "]", "=", "np", ".", "delete", "(", "c2_data", "[", "'x'", "]", ",", "label_idx2", ",", "axis", "=", "0", ")", "\n", "c2_data", "[", "'x'", "]", "=", "np", ".", "vstack", "(", "[", "c2_data", "[", "'x'", "]", ",", "c1_swap_x", "]", ")", "\n", "\n", "# Swap the label", "\n", "c1_data", "[", "'y'", "]", "=", "np", ".", "delete", "(", "c1_data", "[", "'y'", "]", ",", "label_idx1", ")", "\n", "c1_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "[", "c1_data", "[", "'y'", "]", ",", "c2_swap_y", "]", ")", "\n", "c2_data", "[", "'y'", "]", "=", "np", ".", "delete", "(", "c2_data", "[", "'y'", "]", ",", "label_idx2", ")", "\n", "c2_data", "[", "'y'", "]", "=", "np", ".", "hstack", "(", "[", "c2_data", "[", "'y'", "]", ",", "c1_swap_y", "]", ")", "\n", "\n", "# Shuffle the data", "\n", "random_idx1", ",", "random_idx2", "=", "np", ".", "arange", "(", "c1_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "c2_data", "[", "'y'", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "random_idx1", ")", ",", "np", ".", "random", ".", "shuffle", "(", "random_idx2", ")", "\n", "c1_data", "[", "'x'", "]", ",", "c1_data", "[", "'y'", "]", "=", "c1_data", "[", "'x'", "]", "[", "random_idx1", "]", ",", "c1_data", "[", "'y'", "]", "[", "random_idx1", "]", "\n", "c2_data", "[", "'x'", "]", ",", "c2_data", "[", "'y'", "]", "=", "c2_data", "[", "'x'", "]", "[", "random_idx2", "]", ",", "c2_data", "[", "'y'", "]", "[", "random_idx2", "]", "\n", "\n", "", "print", "(", "colored", "(", "f\"Swap C-{c1.id}@G{g1.id}-L{int(c1_swap_label)} and C-{c2.id}@G{g2.id}-L{int(c2_swap_label)} data\"", ",", "'cyan'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "\n", "# Refresh client and group", "\n", "", "_", ",", "_", ",", "_", "=", "c1", ".", "refresh", "(", ")", ",", "c2", ".", "refresh", "(", ")", ",", "g1", ".", "refresh", "(", ")", "\n", "if", "g2", "!=", "g1", ":", "g2", ".", "refresh", "(", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.increase_data": [[317, 342], ["print", "numpy.arange", "numpy.random.shuffle", "math.ceil", "c.refresh", "c.has_uplink", "processing_round.index", "c.uplink[].refresh"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.server.Server.refresh"], ["", "def", "increase_data", "(", "self", ",", "round", ",", "clients", ")", ":", "\n", "        ", "processing_round", "=", "[", "0", ",", "50", ",", "100", ",", "150", "]", "\n", "rate", "=", "[", "1", "/", "4", ",", "1", "/", "2", ",", "3", "/", "4", ",", "1.0", "]", "\n", "\n", "if", "round", "==", "0", ":", "\n", "            ", "self", ".", "shuffle_index_dict", "=", "{", "}", "\n", "# Shuffle the train data", "\n", "for", "c", "in", "clients", ":", "\n", "                ", "cidx", "=", "np", ".", "arange", "(", "c", ".", "train_data", "[", "'y'", "]", ".", "size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "cidx", ")", "\n", "self", ".", "shuffle_index_dict", "[", "c", "]", "=", "cidx", "\n", "\n", "", "", "if", "round", "in", "processing_round", ":", "\n", "            ", "release_rate", "=", "rate", "[", "processing_round", ".", "index", "(", "round", ")", "]", "\n", "print", "(", "'>Round {:3d}, {:.1%} training data release.'", ".", "format", "(", "round", ",", "release_rate", ")", ")", "\n", "for", "c", "in", "clients", ":", "\n", "# Calculate new train size", "\n", "                ", "train_size", "=", "ceil", "(", "c", ".", "train_data", "[", "'y'", "]", ".", "size", "*", "release_rate", ")", "\n", "release_index", "=", "self", ".", "shuffle_index_dict", "[", "c", "]", "[", ":", "train_size", "]", "\n", "c", ".", "train_data", "[", "'x'", "]", "=", "c", ".", "original_train_data", "[", "'x'", "]", "[", "release_index", "]", "\n", "c", ".", "train_data", "[", "'y'", "]", "=", "c", ".", "original_train_data", "[", "'y'", "]", "[", "release_index", "]", "\n", "\n", "c", ".", "refresh", "(", ")", "\n", "if", "c", ".", "has_uplink", "(", ")", ":", "c", ".", "uplink", "[", "0", "]", ".", "refresh", "(", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.data_distribution_shift": [[343, 353], ["fedavg.FedAvg.increase_data", "fedavg.FedAvg.swap_data", "len"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.increase_data", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedavg.FedAvg.swap_data"], ["", "def", "data_distribution_shift", "(", "self", ",", "round", ",", "clients", ",", "shift_type", "=", "None", ",", "swap_p", "=", "0", ")", ":", "\n", "        ", "if", "shift_type", "==", "None", ":", "\n", "            ", "return", "\n", "\n", "", "if", "shift_type", "==", "'increment'", ":", "\n", "            ", "self", ".", "increase_data", "(", "round", ",", "clients", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "clients", ")", "==", "0", ":", "return", "\n", "self", ".", "swap_data", "(", "clients", ",", "swap_p", ",", "shift_type", ")", "\n", "", "return", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.__init__": [[15, 22], ["flearn.trainer.groupbase.GroupBase.__init__", "fedgroup.FedGroup.group_cold_start"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.__init__", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.group_cold_start"], ["    ", "def", "__init__", "(", "self", ",", "train_config", ")", ":", "\n", "        ", "super", "(", "FedGroup", ",", "self", ")", ".", "__init__", "(", "train_config", ")", "\n", "self", ".", "group_cold_start", "(", "random_centers", "=", "self", ".", "RCC", ")", "\n", "if", "self", ".", "temp_agg", "==", "True", ":", "\n", "            ", "for", "g", "in", "self", ".", "groups", ":", "g", ".", "aggregation_strategy", "=", "'temp'", "\n", "", "else", ":", "\n", "            ", "for", "g", "in", "self", ".", "groups", ":", "g", ".", "aggregation_strategy", "=", "'fedavg'", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.group_cold_start": [[25, 66], ["print", "random.sample", "zip", "random.sample", "fedgroup.FedGroup.clustering_clients", "zip", "fedgroup.FedGroup.update_auxiliary_global_model", "c.pretrain", "c.set_uplink", "g.add_downlink", "fedgroup.FedGroup.keys", "g.add_downlink", "min", "c.set_uplink", "len"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.clustering_clients", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.update_auxiliary_global_model", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.pretrain", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_uplink"], ["def", "group_cold_start", "(", "self", ",", "alpha", "=", "20", ",", "clients", "=", "None", ",", "random_centers", "=", "False", ")", ":", "\n", "\n", "# Clustering with all clients by default", "\n", "        ", "if", "clients", "is", "None", ":", "clients", "=", "self", ".", "clients", "\n", "\n", "# Strategy #1 (RCC): Randomly pre-train num_group clients as cluster centers", "\n", "# It is an optional strategy of FedGroup, named FedGroup-RCC", "\n", "if", "random_centers", "==", "True", ":", "\n", "            ", "print", "(", "'Random Cluster Centers.'", ")", "\n", "selected_clients", "=", "random", ".", "sample", "(", "clients", ",", "k", "=", "self", ".", "num_group", ")", "\n", "for", "c", ",", "g", "in", "zip", "(", "selected_clients", ",", "self", ".", "groups", ")", ":", "\n", "                ", "_", ",", "_", ",", "_", ",", "g", ".", "latest_params", ",", "g", ".", "opt_updates", "=", "c", ".", "pretrain", "(", "self", ".", "init_params", ",", "iterations", "=", "50", ")", "\n", "g", ".", "latest_updates", "=", "g", ".", "opt_updates", "\n", "c", ".", "set_uplink", "(", "[", "g", "]", ")", "\n", "g", ".", "add_downlink", "(", "[", "c", "]", ")", "\n", "\n", "# Strategy #2: Pre-train, then clustering the directions of clients' weights", "\n", "# <FedGroup> and <FedGrouProx> use this strategy", "\n", "", "", "if", "random_centers", "==", "False", ":", "\n", "            ", "selected_clients", "=", "random", ".", "sample", "(", "clients", ",", "k", "=", "min", "(", "self", ".", "num_group", "*", "alpha", ",", "len", "(", "clients", ")", ")", ")", "\n", "\n", "for", "c", "in", "selected_clients", ":", "c", ".", "clustering", "=", "True", "# Mark these clients as clustering client", "\n", "\n", "cluster", "=", "self", ".", "clustering_clients", "(", "selected_clients", ")", "# {Cluster ID: (cm, [c1, c2, ...])}", "\n", "# Init groups accroding to the clustering results", "\n", "for", "g", ",", "id", "in", "zip", "(", "self", ".", "groups", ",", "cluster", ".", "keys", "(", ")", ")", ":", "\n", "# Init the group latest update", "\n", "                ", "g", ".", "latest_params", "=", "cluster", "[", "id", "]", "[", "0", "]", "\n", "g", ".", "opt_updates", "=", "cluster", "[", "id", "]", "[", "1", "]", "\n", "g", ".", "latest_updates", "=", "g", ".", "opt_updates", "\n", "# These clients do not need to be cold-started", "\n", "# Set the \"group\" attr of client only, didn't add the client to group", "\n", "g", ".", "add_downlink", "(", "cluster", "[", "id", "]", "[", "2", "]", ")", "\n", "for", "c", "in", "cluster", "[", "id", "]", "[", "2", "]", ":", "\n", "                    ", "c", ".", "set_uplink", "(", "[", "g", "]", ")", "\n", "\n", "# We aggregate these clustering results and get the new auxiliary global model", "\n", "", "", "self", ".", "update_auxiliary_global_model", "(", "self", ".", "groups", ")", "\n", "# Update the discrepancy of clustering client", "\n", "'''self.refresh_discrepancy_and_dissmilarity(selected_clients)'''", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.clustering_clients": [[70, 161], ["time.time", "print", "numpy.vstack", "time.time", "sklearn.decomposition.TruncatedSVD", "sklearn.decomposition.TruncatedSVD.fit_transform", "print", "time.time", "sklearn.metrics.pairwise.cosine_similarity", "print", "time.time", "sklearn.metrics.pairwise.cosine_similarity", "fedgroup.FedGroup._calculate_data_driven_measure", "print", "time.time", "print", "print", "enumerate", "enumerate", "len", "print", "c.pretrain", "utils.trainer_utils.process_grad", "sklearn.cluster.AgglomerativeClustering().fit", "sklearn.cluster.KMeans().fit", "collections.Counter", "cluster2clients[].append", "cupdates.values", "range", "print", "time.time", "time.time", "time.time", "time.time", "sklearn.cluster.AgglomerativeClustering", "sklearn.cluster.KMeans", "time.time", "fedgroup.FedGroup.simply_averaging_aggregate", "fedgroup.FedGroup.simply_averaging_aggregate"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup._calculate_data_driven_measure", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.pretrain", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.process_grad", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.simply_averaging_aggregate", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.groupbase.GroupBase.simply_averaging_aggregate"], ["def", "clustering_clients", "(", "self", ",", "clients", ",", "n_clusters", "=", "None", ",", "max_iter", "=", "20", ")", ":", "\n", "        ", "if", "n_clusters", "is", "None", ":", "n_clusters", "=", "self", ".", "num_group", "\n", "if", "len", "(", "clients", ")", "<", "n_clusters", ":", "\n", "            ", "print", "(", "\"ERROR: Not enough clients for clustering!!\"", ")", "\n", "return", "\n", "\n", "# Pre-train these clients first", "\n", "", "csolns", ",", "cupdates", "=", "{", "}", ",", "{", "}", "\n", "\n", "# Record the execution time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "c", "in", "clients", ":", "\n", "            ", "_", ",", "_", ",", "_", ",", "csolns", "[", "c", "]", ",", "cupdates", "[", "c", "]", "=", "c", ".", "pretrain", "(", "self", ".", "init_params", ",", "iterations", "=", "50", ")", "\n", "", "print", "(", "\"Pre-training takes {}s seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "update_array", "=", "[", "process_grad", "(", "update", ")", "for", "update", "in", "cupdates", ".", "values", "(", ")", "]", "\n", "delta_w", "=", "np", ".", "vstack", "(", "update_array", ")", "# shape=(n_clients, n_params)", "\n", "\n", "# Record the execution time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# Decomposed the directions of updates to num_group of directional vectors", "\n", "svd", "=", "TruncatedSVD", "(", "n_components", "=", "self", ".", "num_group", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "decomp_updates", "=", "svd", ".", "fit_transform", "(", "delta_w", ".", "T", ")", "# shape=(n_params, n_groups)", "\n", "print", "(", "\"SVD takes {}s seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "n_components", "=", "decomp_updates", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# Record the execution time of EDC calculation", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "decomposed_cossim_matrix", "=", "cosine_similarity", "(", "delta_w", ",", "decomp_updates", ".", "T", ")", "# shape=(n_clients, n_clients)", "\n", "\n", "''' There is no need to normalize the data-driven measure because it is a dissimilarity measure\n        # Normialize it to dissimilarity [0,1]\n        decomposed_dissim_matrix = (1.0 - decomposed_cossim_matrix) / 2.0\n        EDC = decomposed_dissim_matrix\n        '''", "\n", "#EDC = self._calculate_data_driven_measure(decomposed_cossim_matrix, correction=False)", "\n", "print", "(", "\"EDC Matrix calculation takes {}s seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "# Test the excution time of full cosine dissimilarity", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "full_cossim_matrix", "=", "cosine_similarity", "(", "delta_w", ")", "# shape=(n_clients, n_clients)", "\n", "'''\n        # Normialize cossim to [0,1]\n        full_dissim_matrix = (1.0 - full_cossim_matrix) / 2.0\n        '''", "\n", "MADC", "=", "self", ".", "_calculate_data_driven_measure", "(", "full_cossim_matrix", ",", "correction", "=", "True", ")", "# shape=(n_clients, n_clients)", "\n", "print", "(", "\"MADC Matrix calculation takes {}s seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "'''Apply RBF kernel to EDC or MADC\n        gamma=0.2\n        if self.MADC == True:\n            affinity_matrix = np.exp(- MADC ** 2 / (2. * gamma ** 2))\n        else: # Use EDC as default\n            affinity_matrix = np.exp(- EDC ** 2 / (2. * gamma ** 2))\n        '''", "\n", "# Record the execution time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "measure", "==", "'MADC'", ":", "\n", "            ", "affinity_matrix", "=", "MADC", "\n", "#affinity_matrix = (1.0 - full_cossim_matrix) / 2.0", "\n", "#result = AgglomerativeClustering(n_clusters, affinity='euclidean', linkage='ward').fit(full_cossim_matrix)", "\n", "result", "=", "AgglomerativeClustering", "(", "n_clusters", ",", "affinity", "=", "'precomputed'", ",", "linkage", "=", "'complete'", ")", ".", "fit", "(", "affinity_matrix", ")", "\n", "", "if", "self", ".", "measure", "==", "'EDC'", ":", "# Use EDC as default", "\n", "            ", "affinity_matrix", "=", "decomposed_cossim_matrix", "\n", "#result = AgglomerativeClustering(n_clusters, affinity='euclidean', linkage='ward').fit(decomposed_cossim_matrix)", "\n", "#result = AgglomerativeClustering(n_clusters, affinity='precomputed', linkage='average').fit(EDC)", "\n", "result", "=", "KMeans", "(", "n_clusters", ",", "random_state", "=", "self", ".", "seed", ",", "max_iter", "=", "max_iter", ")", ".", "fit", "(", "affinity_matrix", ")", "\n", "#print('EDC', EDC[0][:10], '\\nMADC', MADC[0][:10], '\\naffinity', affinity_matrix[0][:10])", "\n", "#result = SpectralClustering(n_clusters, random_state=self.seed, n_init=max_iter, affinity='precomputed').fit(affinity_matrix)", "\n", "\n", "", "print", "(", "\"Clustering takes {}s seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "print", "(", "'Clustering Results:'", ",", "Counter", "(", "result", ".", "labels_", ")", ")", "\n", "#print('Clustering Inertia:', result.inertia_)", "\n", "\n", "cluster", "=", "{", "}", "# {Cluster ID: (cm, [c1, c2, ...])}", "\n", "cluster2clients", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n_clusters", ")", "]", "# [[c1, c2,...], [c3, c4,...], ...]", "\n", "for", "idx", ",", "cluster_id", "in", "enumerate", "(", "result", ".", "labels_", ")", ":", "\n", "#print(idx, cluster_id, len(cluster2clients), n_clusters) # debug", "\n", "            ", "cluster2clients", "[", "cluster_id", "]", ".", "append", "(", "clients", "[", "idx", "]", ")", "\n", "", "for", "cluster_id", ",", "client_list", "in", "enumerate", "(", "cluster2clients", ")", ":", "\n", "# calculate the means of cluster", "\n", "            ", "params_list", "=", "[", "csolns", "[", "c", "]", "for", "c", "in", "client_list", "]", "\n", "updates_list", "=", "[", "cupdates", "[", "c", "]", "for", "c", "in", "client_list", "]", "\n", "if", "params_list", ":", "\n", "# All client have equal weight", "\n", "                ", "cluster", "[", "cluster_id", "]", "=", "(", "self", ".", "simply_averaging_aggregate", "(", "params_list", ")", ",", "self", ".", "simply_averaging_aggregate", "(", "updates_list", ")", ",", "client_list", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Error, cluster is empty\"", ")", "\n", "\n", "", "", "return", "cluster", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup._calculate_data_driven_measure": [[162, 222], ["numpy.zeros", "numpy.repeat", "numpy.tile", "numpy.abs", "numpy.zeros", "numpy.fill_diagonal", "numpy.repeat", "range", "numpy.sum", "numpy.sum", "numpy.ma.array"], "methods", ["None"], ["", "def", "_calculate_data_driven_measure", "(", "self", ",", "pm", ",", "correction", "=", "False", ")", ":", "\n", "            ", "''' calculate the data-driven measure such as MADD'''", "\n", "# Input: pm-> proximity matrix; Output: dm-> data-driven distance matrix", "\n", "# pm.shape=(n_clients, n_dims), dm.shape=(n_clients, n_clients)", "\n", "n_clients", ",", "n_dims", "=", "pm", ".", "shape", "[", "0", "]", ",", "pm", ".", "shape", "[", "1", "]", "\n", "dm", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_clients", ",", "n_clients", ")", ")", "\n", "\n", "\"\"\" Too Slow, and misunderstanding MADD. Deprecated\n            for i in range(n_clients):\n                for j in range(i+1, n_clients):\n                    for k in range(n_clients):\n                        if k !=i and k != j:\n                            dm[i,j] = dm[j,i] = abs(np.sum((pm[i]-pm[k])**2)**0.5 - \\\n                                np.sum((pm[j]-pm[k])**2)**0.5)\n            \"\"\"", "\n", "# Fast version", "\n", "'''1, Get the repeated proximity matrix.\n                We write Row1 = d11, d12, d13, ... ; and Row2 = d21, d22, d23, ...\n                [   Row1    ]   [   Row2    ]       [   Rown    ]\n                |   Row1    |   |   Row2    |       |   Rown    |\n                |   ...     |   |   ...     |       |   ...     |\n                [   Row1    ],  [   Row2    ], ..., [   Rown    ]\n            '''", "\n", "row_pm_matrix", "=", "np", ".", "repeat", "(", "pm", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "n_clients", ",", "axis", "=", "1", ")", "\n", "#print('row_pm', row_pm_matrix[0][0][:5], row_pm_matrix[0][1][:5])", "\n", "\n", "# Get the repeated colum proximity matrix", "\n", "'''\n                [   Row1    ]   [   Row1    ]       [   Row1    ]\n                |   Row2    |   |   Row2    |       |   Row2    |\n                |   ...     |   |   ...     |       |   ...     |\n                [   Rown    ],  [   Rown    ], ..., [   Rown    ]\n            '''", "\n", "col_pm_matrix", "=", "np", ".", "tile", "(", "pm", ",", "(", "n_clients", ",", "1", ",", "1", ")", ")", "\n", "#print('col_pm', col_pm_matrix[0][0][:5], col_pm_matrix[0][1][:5])", "\n", "\n", "# Calculate the absolute difference of two disstance matrix, It is 'abs(||u-z|| - ||v-z||)' in MADD.", "\n", "# d(1,2) = ||w1-z|| - ||w2-z||, shape=(n_clients,); d(x,x) always equal 0", "\n", "'''\n                [   d(1,1)  ]   [   d(1,2)  ]       [   d(1,n)  ]\n                |   d(2,1)  |   |   d(2,2)  |       |   d(2,n)  |\n                |   ...     |   |   ...     |       |   ...     |\n                [   d(n,1)  ],  [   d(n,2)  ], ..., [   d(n,n)  ]\n            '''", "\n", "absdiff_pm_matrix", "=", "np", ".", "abs", "(", "col_pm_matrix", "-", "row_pm_matrix", ")", "# shape=(n_clients, n_clients, n_clients)", "\n", "# Calculate the sum of absolute differences", "\n", "if", "correction", "==", "True", ":", "\n", "# We should mask these values like sim(1,2), sim(2,1) in d(1,2)", "\n", "                ", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_clients", ",", "n_clients", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "mask", ",", "1", ")", "# Mask all diag", "\n", "mask", "=", "np", ".", "repeat", "(", "mask", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "n_clients", ",", "axis", "=", "0", ")", "\n", "for", "idx", "in", "range", "(", "mask", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "#mask[idx,idx,:] = 1 # Mask all row d(1,1), d(2,2)...; Actually d(1,1)=d(2,2)=0", "\n", "                    ", "mask", "[", "idx", ",", ":", ",", "idx", "]", "=", "1", "# Mask all 0->n colum for 0->n diff matrix,", "\n", "", "dm", "=", "np", ".", "sum", "(", "np", ".", "ma", ".", "array", "(", "absdiff_pm_matrix", ",", "mask", "=", "mask", ")", ",", "axis", "=", "-", "1", ")", "/", "(", "n_dims", "-", "2.0", ")", "\n", "", "else", ":", "\n", "                ", "dm", "=", "np", ".", "sum", "(", "absdiff_pm_matrix", ",", "axis", "=", "-", "1", ")", "/", "(", "n_dims", ")", "\n", "#print('absdiff_pm_matrix', absdiff_pm_matrix[0][0][:5])", "\n", "\n", "", "return", "dm", "# shape=(n_clients, n_clients)", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.schedule_clients": [[226, 256], ["client.check_distribution_shift", "client.has_uplink", "fedgroup.FedGroup.client_cold_start", "prev_g.delete_downlink", "client.clear_uplink", "fedgroup.FedGroup.client_cold_start", "wc.has_uplink", "print", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.check_distribution_shift", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.client_cold_start", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.delete_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.clear_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.client_cold_start", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink"], ["def", "schedule_clients", "(", "self", ",", "round", ",", "selected_clients", ",", "groups", ")", ":", "\n", "        ", "schedule_results", "=", "None", "\n", "if", "self", ".", "dynamic", "==", "True", ":", "\n", "# 1, Redo cold start distribution shift clients", "\n", "            ", "warm_clients", "=", "[", "wc", "for", "wc", "in", "self", ".", "clients", "if", "wc", ".", "has_uplink", "(", ")", "==", "True", "]", "\n", "shift_count", ",", "migration_count", "=", "0", ",", "0", "\n", "for", "client", "in", "warm_clients", ":", "\n", "                ", "count", "=", "client", ".", "check_distribution_shift", "(", ")", "\n", "if", "count", "is", "not", "None", "and", "client", ".", "distribution_shift", "==", "True", ":", "\n", "                    ", "shift_count", "+=", "1", "\n", "prev_g", "=", "client", ".", "uplink", "[", "0", "]", "\n", "prev_g", ".", "delete_downlink", "(", "client", ")", "\n", "client", ".", "clear_uplink", "(", ")", "\n", "self", ".", "client_cold_start", "(", "client", ")", "\n", "new_g", "=", "client", ".", "uplink", "[", "0", "]", "\n", "client", ".", "train_label_count", "=", "count", "\n", "client", ".", "distribution_shift", "=", "False", "\n", "if", "prev_g", "!=", "new_g", ":", "\n", "                        ", "migration_count", "+=", "1", "\n", "print", "(", "colored", "(", "f'Client {client.id} migrate from Group {prev_g.id} \\\n                            to Group {new_g.id}'", ",", "'yellow'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "", "", "", "schedule_results", "=", "{", "'shift'", ":", "shift_count", ",", "'migration'", ":", "migration_count", "}", "\n", "\n", "# 2, Cold start newcomer: pretrain and assign a group", "\n", "", "for", "client", "in", "selected_clients", ":", "\n", "#for client in self.clients:", "\n", "            ", "if", "client", ".", "has_uplink", "(", ")", "==", "False", ":", "\n", "                ", "self", ".", "client_cold_start", "(", "client", ",", "self", ".", "RAC", ")", "\n", "\n", "", "", "return", "schedule_results", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.schedule_groups": [[258, 265], ["fedgroup.FedGroup.recluster", "c.has_uplink"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.recluster", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink"], ["def", "schedule_groups", "(", "self", ",", "round", ",", "clients", ",", "groups", ")", ":", "\n", "        ", "if", "self", ".", "dynamic", "==", "True", "and", "self", ".", "recluster_epoch", "is", "not", "None", ":", "\n", "# Reculster warm client", "\n", "            ", "if", "round", "in", "self", ".", "recluster_epoch", ":", "\n", "                ", "warm_clients", "=", "[", "c", "for", "c", "in", "clients", "if", "c", ".", "has_uplink", "(", ")", "==", "True", "]", "\n", "self", ".", "recluster", "(", "warm_clients", ",", "groups", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.recluster": [[268, 292], ["print", "random.sample", "fedgroup.FedGroup.group_cold_start", "len", "len", "print", "old_group.delete_downlink", "c.clear_uplink", "fedgroup.FedGroup.client_cold_start", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.group_cold_start", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.delete_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.clear_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.client_cold_start"], ["def", "recluster", "(", "self", ",", "clients", ",", "groups", ",", "alpha", "=", "20", ")", ":", "\n", "        ", "if", "len", "(", "groups", ")", "!=", "len", "(", "self", ".", "groups", ")", ":", "\n", "            ", "print", "(", "\"Warning: Group Number is change!\"", ")", "\n", "# TODO: dynamic group num", "\n", "return", "\n", "\n", "", "print", "(", "'Reclustering...'", ")", "\n", "# Clear the clustering mark", "\n", "for", "c", "in", "clients", ":", "c", ".", "clustering", "=", "False", "\n", "\n", "# Select the clients for clustering first", "\n", "selected_clients", "=", "random", ".", "sample", "(", "clients", ",", "k", "=", "min", "(", "len", "(", "groups", ")", "*", "alpha", ",", "len", "(", "clients", ")", ")", ")", "\n", "remain_clients", "=", "[", "c", "for", "c", "in", "clients", "if", "c", "not", "in", "selected_clients", "]", "\n", "self", ".", "group_cold_start", "(", "clients", "=", "selected_clients", ")", "\n", "for", "c", "in", "remain_clients", ":", "\n", "# Reassign (cold start) the remain clients", "\n", "            ", "old_group", "=", "c", ".", "uplink", "[", "0", "]", "\n", "old_group", ".", "delete_downlink", "(", "c", ")", "\n", "c", ".", "clear_uplink", "(", ")", "\n", "self", ".", "client_cold_start", "(", "c", ",", "self", ".", "RAC", ",", "redo", "=", "False", ")", "\n", "\n", "# Refresh the discrepancy of all clients (clustering clients and reassign clients)", "\n", "", "'''self.refresh_discrepancy_and_dissmilarity(clients)'''", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.client_cold_start": [[293, 325], ["client.has_uplink", "print", "client.pretrain", "client.set_uplink", "random.choice.add_downlink", "utils.trainer_utils.calculate_cosine_dissimilarity", "diff_list.append", "random.choice", "numpy.argmin"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.pretrain", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.calculate_cosine_dissimilarity"], ["", "def", "client_cold_start", "(", "self", ",", "client", ",", "random_assign", "=", "False", ",", "redo", "=", "False", ")", ":", "\n", "        ", "if", "client", ".", "has_uplink", "(", ")", "==", "True", ":", "\n", "            ", "print", "(", "\"Warning: Client already has a group: {:2d}.\"", ".", "format", "(", "client", ".", "uplink", "[", "0", "]", ".", "id", ")", ")", "\n", "return", "\n", "\n", "", "else", ":", "\n", "            ", "_", ",", "_", ",", "_", ",", "csoln", ",", "cupdate", "=", "client", ".", "pretrain", "(", "self", ".", "init_params", ",", "iterations", "=", "50", ")", "\n", "\n", "# Calculate the cosine dissimilarity between client's update and group's update", "\n", "diff_list", "=", "[", "]", "\n", "for", "g", "in", "self", ".", "groups", ":", "\n", "                ", "if", "redo", "==", "False", ":", "\n", "                    ", "opt_updates", "=", "g", ".", "opt_updates", "\n", "", "else", ":", "\n", "                    ", "opt_updates", "=", "g", ".", "latest_updates", "\n", "", "diff", "=", "calculate_cosine_dissimilarity", "(", "cupdate", ",", "opt_updates", ")", "\n", "diff_list", ".", "append", "(", "(", "g", ",", "diff", ")", ")", "\n", "", "if", "random_assign", "==", "True", ":", "\n", "# RAC: Randomly assign client", "\n", "                ", "assign_group", "=", "random", ".", "choice", "(", "self", ".", "groups", ")", "\n", "", "else", ":", "\n", "# Minimize the differenct", "\n", "                ", "assign_group", "=", "self", ".", "groups", "[", "np", ".", "argmin", "(", "[", "tup", "[", "1", "]", "for", "tup", "in", "diff_list", "]", ")", "]", "\n", "\n", "# Set the uplink of client, add the downlink of group", "\n", "", "client", ".", "set_uplink", "(", "[", "assign_group", "]", ")", "\n", "assign_group", ".", "add_downlink", "(", "[", "client", "]", ")", "\n", "\n", "# Reset the temperature", "\n", "client", ".", "temperature", "=", "client", ".", "max_temp", "\n", "#print(f'Assign client {client.id} to Group {assign_group.id}!')", "\n", "", "return", "assign_group", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.reassign_clients_by_temperature": [[326, 393], ["min", "min", "min", "min", "min", "fedgroup.FedGroup.reassign_clients_by_temperature._linear_temperature"], "methods", ["None"], ["", "def", "reassign_clients_by_temperature", "(", "self", ",", "clients", ",", "metrics", ",", "func", ")", ":", "\n", "\n", "        ", "def", "_step_temperature", "(", "client_bias", ",", "group_bias", ",", "temp", ",", "max_temp", ")", ":", "\n", "            ", "if", "temp", "<=", "0", ":", "return", "temp", "\n", "if", "client_bias", ">", "group_bias", ":", "\n", "                ", "return", "temp", "-", "1", "\n", "", "else", ":", "\n", "                ", "return", "min", "(", "temp", "+", "1", ",", "max_temp", ")", "\n", "#return min(temp+0, max_temp)", "\n", "\n", "", "", "def", "_linear_temperature", "(", "client_bias", ",", "group_bias", ",", "temp", ",", "max_temp", ")", ":", "\n", "            ", "if", "temp", "<=", "0", ":", "return", "temp", "\n", "if", "group_bias", "==", "0", ":", "return", "temp", "\n", "scale", "=", "client_bias", "/", "(", "group_bias", "+", "1e-5", ")", "\n", "new_temp", "=", "temp", "+", "(", "1", "-", "scale", ")", "*", "max_temp", "\n", "return", "min", "(", "new_temp", ",", "max_temp", ")", "\n", "\n", "", "def", "_lied_temperature", "(", "client_bias", ",", "group_bias", ",", "temp", ",", "max_temp", ")", ":", "\n", "            ", "if", "temp", "<=", "0", ":", "return", "temp", "\n", "if", "client_bias", ">", "group_bias", ":", "# Temperature exponential decrease", "\n", "                ", "rate", "=", "2", "*", "max_temp", "/", "(", "max_temp", "-", "1", ")", "\n", "scale", "=", "min", "(", "client_bias", "/", "(", "group_bias", "+", "1e-5", ")", ",", "10", ")", "# Prevent Overflow", "\n", "new_temp", "=", "temp", "-", "(", "max_temp", "**", "(", "scale", "-", "1", ")", "-", "1", ")", "*", "rate", "\n", "return", "new_temp", "\n", "", "else", ":", "# Temperature linear increase", "\n", "                ", "return", "_linear_temperature", "(", "client_bias", ",", "group_bias", ",", "temp", ",", "max_temp", ")", "\n", "\n", "", "", "def", "_eied_temperature", "(", "client_bias", ",", "group_bias", ",", "temp", ",", "max_temp", ")", ":", "\n", "            ", "if", "temp", "<=", "0", ":", "return", "temp", "\n", "sign", "=", "1", "if", "client_bias", "<=", "group_bias", "else", "-", "1", "\n", "abs_bias", "=", "min", "(", "abs", "(", "client_bias", "-", "group_bias", ")", ",", "10", ")", "# Prevent Overflow", "\n", "rate", "=", "2", "*", "max_temp", "/", "(", "max_temp", "-", "1", ")", "\n", "new_temp", "=", "temp", "+", "sign", "*", "(", "max_temp", "**", "(", "abs_bias", "-", "1", ")", "-", "1", ")", "*", "rate", "\n", "return", "min", "(", "new_temp", ",", "max_temp", ")", "\n", "\n", "# Reassgin selected wram clients when their temperature reduced to zero", "\n", "", "for", "wc", "in", "[", "c", "for", "c", "in", "clients", "if", "c", ".", "has_uplink", "(", ")", "==", "True", "and", "c", ".", "temperature", "is", "not", "None", "]", ":", "\n", "\n", "# L2 distance or Cosine Dissimilarity", "\n", "            ", "if", "metrics", "==", "'l2'", ":", "\n", "                ", "client_bias", ",", "group_bias", "=", "wc", ".", "discrepancy", ",", "wc", ".", "uplink", "[", "0", "]", ".", "discrepancy", "\n", "", "if", "metrics", "==", "'cosine'", ":", "\n", "                ", "client_bias", ",", "group_bias", "=", "wc", ".", "cosine_dissimilarity", ",", "wc", ".", "uplink", "[", "0", "]", ".", "cosine_dissimilarity", "\n", "#print('debug: fedgroup.py:366', client_bias, group_bias)", "\n", "# The discrepancy of this client large than the mean discrepancy of group", "\n", "", "if", "func", "==", "'step'", ":", "\n", "                ", "wc", ".", "temperature", "=", "_step_temperature", "(", "client_bias", ",", "group_bias", ",", "wc", ".", "temperature", ",", "wc", ".", "max_temp", ")", "\n", "", "if", "func", "==", "'linear'", ":", "\n", "                ", "wc", ".", "temperature", "=", "_linear_temperature", "(", "client_bias", ",", "group_bias", ",", "wc", ".", "temperature", ",", "wc", ".", "max_temp", ")", "\n", "", "if", "func", "==", "'lied'", ":", "\n", "                ", "wc", ".", "temperature", "=", "_lied_temperature", "(", "client_bias", ",", "group_bias", ",", "wc", ".", "temperature", ",", "wc", ".", "max_temp", ")", "\n", "", "if", "func", "==", "'eied'", ":", "\n", "                ", "wc", ".", "temperature", "=", "_eied_temperature", "(", "client_bias", ",", "group_bias", ",", "wc", ".", "temperature", ",", "wc", ".", "max_temp", ")", "\n", "\n", "", "if", "wc", ".", "temperature", "<", "0", ":", "wc", ".", "temperature", "=", "0", "\n", "''' Redo cold start if temperature less than 0\n            if wc.temperature <= 0:\n                # Clear the link between client and group if its temperature below 0\n                old_group = wc.uplink[0]\n                old_group.delete_downlink(wc)\n                wc.clear_uplink()\n                # Cold start this client, the temperature will be reset\n                new_group = self.client_cold_start(wc, self.RAC, redo=False)\n                if old_group != new_group:\n                    print(colored(f'Client {wc.id} migrate from Group {old_group.id} to Group {new_group.id}', 'yellow', attrs=['reverse']))\n            '''", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.schedule_clients_after_training": [[394, 398], ["fedgroup.FedGroup.reassign_clients_by_temperature"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fedgroup.FedGroup.reassign_clients_by_temperature"], ["", "def", "schedule_clients_after_training", "(", "self", ",", "comm_round", ",", "clients", ",", "groups", ")", ":", "\n", "# Refresh selected clients' temperature", "\n", "        ", "self", ".", "reassign_clients_by_temperature", "(", "clients", ",", "self", ".", "temp_metrics", ",", "self", ".", "temp_func", ")", "\n", "return", "", "", "", ""]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.ifca.IFCA.__init__": [[16, 24], ["flearn.trainer.groupbase.GroupBase.__init__", "ifca.IFCA.group_cold_start"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.__init__", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.group_cold_start"], ["    ", "def", "__init__", "(", "self", ",", "train_config", ")", ":", "\n", "        ", "super", "(", "IFCA", ",", "self", ")", ".", "__init__", "(", "train_config", ")", "\n", "self", ".", "group_cold_start", "(", ")", "\n", "# Make sure the group aggregation is disabled", "\n", "self", ".", "group_agg_lr", "=", "0.0", "\n", "\n", "# FeSEM uses simply average aggregation strategy", "\n", "for", "g", "in", "self", ".", "groups", ":", "g", ".", "aggregation_strategy", "=", "'avg'", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.ifca.IFCA.group_cold_start": [[26, 44], ["ifca.IFCA.server.get_params", "enumerate", "tensorflow.random.set_seed", "ifca.IFCA.server.set_params", "tensorflow.random.set_seed", "ifca.IFCA.model_loader", "ifca.IFCA.get_weights"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params"], ["", "def", "group_cold_start", "(", "self", ")", ":", "\n", "# Backup the original model params", "\n", "        ", "backup_params", "=", "self", ".", "server", ".", "get_params", "(", ")", "\n", "# Reinitialize num_group clients models as centers models", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "self", ".", "groups", ")", ":", "\n", "# Change the seed of tensorflow", "\n", "            ", "new_seed", "=", "(", "idx", "+", "self", ".", "seed", ")", "*", "888", "\n", "# Reinitialize params of model", "\n", "tf", ".", "random", ".", "set_seed", "(", "new_seed", ")", "\n", "new_model", "=", "self", ".", "model_loader", "(", "self", ".", "trainer_type", ",", "self", ".", "client_config", "[", "'learning_rate'", "]", ")", "\n", "new_params", "=", "new_model", ".", "get_weights", "(", ")", "\n", "del", "new_model", "\n", "g", ".", "latest_params", "=", "new_params", "\n", "\n", "# Restore the seed of tensorflow", "\n", "", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "# Restore the parameter of model", "\n", "self", ".", "server", ".", "set_params", "(", "backup_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.ifca.IFCA.schedule_clients": [[47, 73], ["ifca.IFCA.clients_cold_start", "client.check_distribution_shift", "prev_g.delete_downlink", "client.clear_uplink", "ifca.IFCA.clients_cold_start", "wc.has_uplink", "print", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.clients_cold_start", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.check_distribution_shift", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.delete_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.clear_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.clients_cold_start", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink"], ["def", "schedule_clients", "(", "self", ",", "round", ",", "clients", ",", "groups", ")", ":", "\n", "        ", "schedule_results", "=", "None", "\n", "if", "self", ".", "dynamic", "==", "True", ":", "\n", "# 1, Redo cold start distribution shift clients", "\n", "            ", "warm_clients", "=", "[", "wc", "for", "wc", "in", "self", ".", "clients", "if", "wc", ".", "has_uplink", "(", ")", "==", "True", "]", "\n", "shift_count", ",", "migration_count", "=", "0", ",", "0", "\n", "for", "client", "in", "warm_clients", ":", "\n", "                ", "count", "=", "client", ".", "check_distribution_shift", "(", ")", "\n", "if", "count", "is", "not", "None", "and", "client", ".", "distribution_shift", "==", "True", ":", "\n", "                    ", "shift_count", "+=", "1", "\n", "prev_g", "=", "client", ".", "uplink", "[", "0", "]", "\n", "prev_g", ".", "delete_downlink", "(", "client", ")", "\n", "client", ".", "clear_uplink", "(", ")", "\n", "self", ".", "clients_cold_start", "(", "[", "client", "]", ",", "groups", ")", "\n", "new_g", "=", "client", ".", "uplink", "[", "0", "]", "\n", "client", ".", "train_label_count", "=", "count", "\n", "client", ".", "distribution_shift", "=", "False", "\n", "if", "prev_g", "!=", "new_g", ":", "\n", "                        ", "migration_count", "+=", "1", "\n", "print", "(", "colored", "(", "f'Client {client.id} migrate from Group {prev_g.id} \\\n                            to Group {new_g.id}'", ",", "'yellow'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "", "", "", "schedule_results", "=", "{", "'shift'", ":", "shift_count", ",", "'migration'", ":", "migration_count", "}", "\n", "\n", "", "self", ".", "clients_cold_start", "(", "clients", ",", "groups", ")", "\n", "\n", "return", "schedule_results", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.ifca.IFCA.clients_cold_start": [[74, 106], ["numpy.vstack", "numpy.argmin", "zip", "ifca.IFCA.server.get_params", "ifca.IFCA.server.set_params", "ifca.IFCA.server.set_params", "numpy.vstack.append", "c.has_uplink", "c.set_uplink", "assigned_group.add_downlink", "assgin_results.append", "ifca.IFCA.server.model.evaluate", "loss_dist.append", "ifca.IFCA.clients_cold_start._calculate_loss_distance"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink"], ["", "def", "clients_cold_start", "(", "self", ",", "clients", ",", "groups", ")", ":", "\n", "\n", "        ", "def", "_calculate_loss_distance", "(", "group", ",", "clients", ")", ":", "\n", "            ", "group_params", "=", "group", ".", "latest_params", "\n", "loss_dist", "=", "[", "]", "\n", "# Backup the current parameters", "\n", "backup_params", "=", "self", ".", "server", ".", "get_params", "(", ")", "\n", "self", ".", "server", ".", "set_params", "(", "group_params", ")", "\n", "for", "c", "in", "clients", ":", "\n", "                ", "X", ",", "y_true", "=", "c", ".", "train_data", "[", "'x'", "]", ",", "c", ".", "train_data", "[", "'y'", "]", "\n", "loss", ",", "acc", "=", "self", ".", "server", ".", "model", ".", "evaluate", "(", "X", ",", "y_true", ",", "verbose", "=", "0", ")", "\n", "loss_dist", ".", "append", "(", "loss", ")", "\n", "# Restore the model params", "\n", "", "self", ".", "server", ".", "set_params", "(", "backup_params", ")", "\n", "return", "loss_dist", "\n", "\n", "", "diffs", ",", "assgin_results", "=", "[", "]", ",", "[", "]", "\n", "for", "g", "in", "groups", ":", "\n", "            ", "diffs", ".", "append", "(", "_calculate_loss_distance", "(", "g", ",", "clients", ")", ")", "\n", "", "diffs", "=", "np", ".", "vstack", "(", "diffs", ")", "\n", "assigned", "=", "np", ".", "argmin", "(", "diffs", ",", "axis", "=", "0", ")", "\n", "for", "idx", ",", "c", "in", "zip", "(", "assigned", ",", "clients", ")", ":", "\n", "            ", "assigned_group", "=", "groups", "[", "idx", "]", "\n", "# Delete the original downlink of group if exist", "\n", "if", "c", ".", "has_uplink", "(", ")", ":", "\n", "                ", "c", ".", "uplink", "[", "0", "]", ".", "delete_downlink", "(", "c", ")", "\n", "", "c", ".", "set_uplink", "(", "[", "assigned_group", "]", ")", "\n", "# Add the new downlink", "\n", "assigned_group", ".", "add_downlink", "(", "[", "c", "]", ")", "\n", "assgin_results", ".", "append", "(", "assigned_group", ")", "\n", "\n", "", "return", "assgin_results", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.__init__": [[16, 23], ["flearn.trainer.groupbase.GroupBase.__init__", "fesem.FeSEM.group_cold_start"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.__init__", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.group_cold_start"], ["    ", "def", "__init__", "(", "self", ",", "train_config", ")", ":", "\n", "        ", "super", "(", "FeSEM", ",", "self", ")", ".", "__init__", "(", "train_config", ")", "\n", "self", ".", "group_cold_start", "(", ")", "\n", "# Make sure the group aggregation is disabled", "\n", "self", ".", "group_agg_lr", "=", "0.0", "\n", "# FeSEM uses simply average aggregation strategy", "\n", "for", "g", "in", "self", ".", "groups", ":", "g", ".", "aggregation_strategy", "=", "'avg'", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.group_cold_start": [[25, 43], ["fesem.FeSEM.server.get_params", "enumerate", "tensorflow.random.set_seed", "fesem.FeSEM.server.set_params", "tensorflow.random.set_seed", "fesem.FeSEM.model_loader", "fesem.FeSEM.get_weights"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.get_params", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_params"], ["", "def", "group_cold_start", "(", "self", ")", ":", "\n", "# Backup the original model params", "\n", "        ", "backup_params", "=", "self", ".", "server", ".", "get_params", "(", ")", "\n", "# Reinitialize num_group clients models as centers models", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "self", ".", "groups", ")", ":", "\n", "# Change the seed of tensorflow", "\n", "            ", "new_seed", "=", "(", "idx", "+", "self", ".", "seed", ")", "*", "888", "\n", "# Reinitialize params of model", "\n", "tf", ".", "random", ".", "set_seed", "(", "new_seed", ")", "\n", "new_model", "=", "self", ".", "model_loader", "(", "self", ".", "trainer_type", ",", "self", ".", "client_config", "[", "'learning_rate'", "]", ")", "\n", "new_params", "=", "new_model", ".", "get_weights", "(", ")", "\n", "del", "new_model", "\n", "g", ".", "latest_params", "=", "new_params", "\n", "\n", "# Restore the seed of tensorflow", "\n", "", "tf", ".", "random", ".", "set_seed", "(", "self", ".", "seed", ")", "\n", "# Restore the parameter of model", "\n", "self", ".", "server", ".", "set_params", "(", "backup_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.schedule_clients": [[46, 72], ["fesem.FeSEM.clients_cold_start", "client.check_distribution_shift", "prev_g.delete_downlink", "client.clear_uplink", "fesem.FeSEM.clients_cold_start", "wc.has_uplink", "print", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.clients_cold_start", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.client.Client.check_distribution_shift", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.delete_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.clear_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.clients_cold_start", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink"], ["def", "schedule_clients", "(", "self", ",", "round", ",", "clients", ",", "groups", ")", ":", "\n", "        ", "schedule_results", "=", "None", "\n", "if", "self", ".", "dynamic", "==", "True", ":", "\n", "# 1, Redo cold start distribution shift clients", "\n", "            ", "shift_count", ",", "migration_count", "=", "0", ",", "0", "\n", "warm_clients", "=", "[", "wc", "for", "wc", "in", "self", ".", "clients", "if", "wc", ".", "has_uplink", "(", ")", "==", "True", "]", "\n", "for", "client", "in", "warm_clients", ":", "\n", "                ", "count", "=", "client", ".", "check_distribution_shift", "(", ")", "\n", "if", "count", "is", "not", "None", "and", "client", ".", "distribution_shift", "==", "True", ":", "\n", "                    ", "shift_count", "+=", "1", "\n", "prev_g", "=", "client", ".", "uplink", "[", "0", "]", "\n", "prev_g", ".", "delete_downlink", "(", "client", ")", "\n", "client", ".", "clear_uplink", "(", ")", "\n", "self", ".", "clients_cold_start", "(", "[", "client", "]", ",", "groups", ")", "\n", "new_g", "=", "client", ".", "uplink", "[", "0", "]", "\n", "client", ".", "train_label_count", "=", "count", "\n", "client", ".", "distribution_shift", "=", "False", "\n", "if", "prev_g", "!=", "new_g", ":", "\n", "                        ", "migration_count", "+=", "1", "\n", "print", "(", "colored", "(", "f'Client {client.id} migrate from Group {prev_g.id} \\\n                            to Group {new_g.id}'", ",", "'yellow'", ",", "attrs", "=", "[", "'reverse'", "]", ")", ")", "\n", "", "", "", "schedule_results", "=", "{", "'shift'", ":", "shift_count", ",", "'migration'", ":", "migration_count", "}", "\n", "\n", "", "self", ".", "clients_cold_start", "(", "clients", ",", "groups", ")", "\n", "\n", "return", "schedule_results", "\n", "\n"]], "home.repos.pwc.inspect_result.morningd_flexcfl.trainer.fesem.FeSEM.clients_cold_start": [[73, 90], ["client.has_uplink", "client.set_uplink", "assigned.add_downlink", "assign_results.append", "utils.trainer_utils.process_grad", "utils.trainer_utils.process_grad", "numpy.sum", "fesem.FeSEM.clients_cold_start._calculate_l2_distance"], "methods", ["home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.has_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.set_uplink", "home.repos.pwc.inspect_result.morningd_flexcfl.flearn.actor.Actor.add_downlink", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.process_grad", "home.repos.pwc.inspect_result.morningd_flexcfl.utils.trainer_utils.process_grad"], ["", "def", "clients_cold_start", "(", "self", ",", "clients", ",", "groups", ")", ":", "\n", "        ", "def", "_calculate_l2_distance", "(", "m1", ",", "m2", ")", ":", "\n", "                ", "v1", ",", "v2", "=", "process_grad", "(", "m1", ")", ",", "process_grad", "(", "m2", ")", "\n", "l2d", "=", "np", ".", "sum", "(", "(", "v1", "-", "v2", ")", "**", "2", ")", "**", "0.5", "\n", "return", "l2d", "\n", "", "assign_results", "=", "[", "]", "\n", "for", "client", "in", "clients", ":", "\n", "            ", "diffs", "=", "[", "_calculate_l2_distance", "(", "client", ".", "local_soln", ",", "g", ".", "latest_params", ")", "for", "g", "in", "groups", "]", "\n", "assigned", "=", "self", ".", "groups", "[", "np", ".", "argmin", "(", "diffs", ")", "]", "\n", "# Delete the original downlink of group if exist", "\n", "if", "client", ".", "has_uplink", "(", ")", ":", "\n", "                ", "client", ".", "uplink", "[", "0", "]", ".", "delete_downlink", "(", "client", ")", "\n", "", "client", ".", "set_uplink", "(", "[", "assigned", "]", ")", "\n", "# Add the new downlink", "\n", "assigned", ".", "add_downlink", "(", "[", "client", "]", ")", "\n", "assign_results", ".", "append", "(", "assigned", ")", "\n", "", "return", "assign_results", "\n", "\n"]]}