{"home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.__init__": [[23, 55], ["logger.info", "engine.Engine.inject_default_parser", "engine.Engine.parser.parse_args", "argparse.ArgumentParser", "isinstance", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.init_process_group", "int", "range", "range", "len", "gpus.split"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.inject_default_parser"], ["    ", "def", "__init__", "(", "self", ",", "custom_parser", "=", "None", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"PyTorch Version {}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "self", ".", "devices", "=", "None", "\n", "self", ".", "distributed", "=", "False", "\n", "\n", "if", "custom_parser", "is", "None", ":", "\n", "            ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "custom_parser", ",", "argparse", ".", "ArgumentParser", ")", "\n", "self", ".", "parser", "=", "custom_parser", "\n", "\n", "", "self", ".", "inject_default_parser", "(", ")", "\n", "self", ".", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "\n", "self", ".", "continue_state_object", "=", "self", ".", "args", ".", "continue_fpath", "\n", "\n", "# if not self.args.gpu == 'None':", "\n", "#     os.environ[\"CUDA_VISIBLE_DEVICES\"]=self.args.gpu", "\n", "\n", "if", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "            ", "self", ".", "distributed", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", ">", "1", "\n", "\n", "", "if", "self", ".", "distributed", ":", "\n", "            ", "self", ".", "local_rank", "=", "self", ".", "args", ".", "local_rank", "\n", "self", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "'env://'", ")", "\n", "self", ".", "devices", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "", "else", ":", "\n", "            ", "gpus", "=", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "\n", "self", ".", "devices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "gpus", ".", "split", "(", "','", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.inject_default_parser": [[56, 66], ["p.add_argument", "p.add_argument", "p.add_argument"], "methods", ["None"], ["", "", "def", "inject_default_parser", "(", "self", ")", ":", "\n", "        ", "p", "=", "self", ".", "parser", "\n", "p", ".", "add_argument", "(", "'-d'", ",", "'--devices'", ",", "default", "=", "''", ",", "\n", "help", "=", "'set data parallel training'", ")", "\n", "p", ".", "add_argument", "(", "'-c'", ",", "'--continue'", ",", "type", "=", "extant_file", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "dest", "=", "\"continue_fpath\"", ",", "\n", "help", "=", "'continue from one certain checkpoint'", ")", "\n", "p", ".", "add_argument", "(", "'--local_rank'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'process rank on node'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.data_parallel": [[67, 73], ["DistributedDataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "methods", ["None"], ["", "def", "data_parallel", "(", "self", ",", "model", ")", ":", "\n", "        ", "if", "self", ".", "distributed", ":", "\n", "            ", "model", "=", "DistributedDataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.get_train_loader": [[74, 94], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler"], "methods", ["None"], ["", "def", "get_train_loader", "(", "self", ",", "train_dataset", ")", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "is_shuffle", "=", "True", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "\n", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "//", "self", ".", "world_size", "\n", "is_shuffle", "=", "False", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "\n", "drop_last", "=", "False", ",", "\n", "shuffle", "=", "is_shuffle", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ")", "\n", "\n", "return", "train_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.get_test_loader": [[95, 114], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler"], "methods", ["None"], ["", "def", "get_test_loader", "(", "self", ",", "test_dataset", ")", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "is_shuffle", "=", "False", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "\n", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "test_dataset", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "//", "self", ".", "world_size", "\n", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "\n", "drop_last", "=", "False", ",", "\n", "shuffle", "=", "is_shuffle", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler", ")", "\n", "\n", "return", "test_loader", ",", "test_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.all_reduce_tensor": [[116, 121], ["utils.pyt_utils.all_reduce_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.all_reduce_tensor", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean"], ["", "def", "all_reduce_tensor", "(", "self", ",", "tensor", ",", "norm", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "distributed", ":", "\n", "            ", "return", "all_reduce_tensor", "(", "tensor", ",", "world_size", "=", "self", ".", "world_size", ",", "norm", "=", "norm", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.__enter__": [[123, 125], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.__exit__": [[126, 133], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "logger.warning"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "tb", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "if", "type", "is", "not", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"A exception occurred during Engine initialization, \"", "\n", "\"give up running process\"", ")", "\n", "return", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.get_parser": [[38, 70], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n    \n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLabLFOV Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the PASCAL VOC dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--recurrence\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"choose the number of recurrence.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "\"choose the number of recurrence.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--whole\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"use whole input size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "'None'", ",", "\n", "help", "=", "\"choose model.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.get_palette": [[71, 94], ["range"], "function", ["None"], ["", "def", "get_palette", "(", "num_cls", ")", ":", "\n", "    ", "\"\"\" Returns the color map for visualizing the segmentation mask.\n    Args:\n        num_cls: Number of classes\n    Returns:\n        The color map\n    \"\"\"", "\n", "\n", "n", "=", "num_cls", "\n", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "            ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.pad_image": [[95, 101], ["numpy.pad"], "function", ["None"], ["", "def", "pad_image", "(", "img", ",", "target_size", ")", ":", "\n", "    ", "\"\"\"Pad an image up to the target size.\"\"\"", "\n", "rows_missing", "=", "target_size", "[", "0", "]", "-", "img", ".", "shape", "[", "2", "]", "\n", "cols_missing", "=", "target_size", "[", "1", "]", "-", "img", ".", "shape", "[", "3", "]", "\n", "padded_img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "rows_missing", ")", ",", "(", "0", ",", "cols_missing", ")", ")", ",", "'constant'", ")", "\n", "return", "padded_img", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.predict_sliding": [[102, 144], ["torch.Upsample", "math.ceil", "int", "int", "numpy.zeros", "numpy.zeros", "range", "range", "math.ceil", "math.ceil", "int", "int", "min", "min", "max", "max", "evaluate.pad_image", "net", "isinstance", "nn.Upsample.cpu().numpy().transpose", "int", "int", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "nn.Upsample.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "nn.Upsample.cpu", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.pad_image"], ["", "def", "predict_sliding", "(", "net", ",", "image", ",", "tile_size", ",", "classes", ",", "recurrence", ")", ":", "\n", "    ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "tile_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "image_size", "=", "image", ".", "shape", "\n", "overlap", "=", "1", "/", "3", "\n", "\n", "stride", "=", "ceil", "(", "tile_size", "[", "0", "]", "*", "(", "1", "-", "overlap", ")", ")", "\n", "tile_rows", "=", "int", "(", "ceil", "(", "(", "image_size", "[", "2", "]", "-", "tile_size", "[", "0", "]", ")", "/", "stride", ")", "+", "1", ")", "# strided convolution formula", "\n", "tile_cols", "=", "int", "(", "ceil", "(", "(", "image_size", "[", "3", "]", "-", "tile_size", "[", "1", "]", ")", "/", "stride", ")", "+", "1", ")", "\n", "# print(\"Need %i x %i prediction tiles @ stride %i px\" % (tile_cols, tile_rows, stride))", "\n", "full_probs", "=", "np", ".", "zeros", "(", "(", "image_size", "[", "0", "]", ",", "image_size", "[", "2", "]", ",", "image_size", "[", "3", "]", ",", "classes", ")", ")", "\n", "count_predictions", "=", "np", ".", "zeros", "(", "(", "1", ",", "image_size", "[", "2", "]", ",", "image_size", "[", "3", "]", ",", "classes", ")", ")", "\n", "tile_counter", "=", "0", "\n", "\n", "for", "row", "in", "range", "(", "tile_rows", ")", ":", "\n", "        ", "for", "col", "in", "range", "(", "tile_cols", ")", ":", "\n", "            ", "x1", "=", "int", "(", "col", "*", "stride", ")", "\n", "y1", "=", "int", "(", "row", "*", "stride", ")", "\n", "x2", "=", "min", "(", "x1", "+", "tile_size", "[", "1", "]", ",", "image_size", "[", "3", "]", ")", "\n", "y2", "=", "min", "(", "y1", "+", "tile_size", "[", "0", "]", ",", "image_size", "[", "2", "]", ")", "\n", "x1", "=", "max", "(", "int", "(", "x2", "-", "tile_size", "[", "1", "]", ")", ",", "0", ")", "# for portrait images the x1 underflows sometimes", "\n", "y1", "=", "max", "(", "int", "(", "y2", "-", "tile_size", "[", "0", "]", ")", ",", "0", ")", "# for very few rows y1 underflows", "\n", "\n", "img", "=", "image", "[", ":", ",", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "padded_img", "=", "pad_image", "(", "img", ",", "tile_size", ")", "\n", "# plt.imshow(padded_img)", "\n", "# plt.show()", "\n", "tile_counter", "+=", "1", "\n", "# print(\"Predicting tile %i\" % tile_counter)", "\n", "padded_prediction", "=", "net", "(", "torch", ".", "from_numpy", "(", "padded_img", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "if", "isinstance", "(", "padded_prediction", ",", "list", ")", ":", "\n", "                ", "padded_prediction", "=", "padded_prediction", "[", "0", "]", "\n", "", "padded_prediction", "=", "interp", "(", "padded_prediction", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "prediction", "=", "padded_prediction", "[", "0", ",", "0", ":", "img", ".", "shape", "[", "2", "]", ",", "0", ":", "img", ".", "shape", "[", "3", "]", ",", ":", "]", "\n", "count_predictions", "[", "0", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "1", "\n", "full_probs", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "prediction", "# accumulate the predictions also in the overlapping regions", "\n", "\n", "# average the predictions in the overlapping regions", "\n", "", "", "full_probs", "/=", "count_predictions", "\n", "# visualize normalization Weights", "\n", "# plt.imshow(np.mean(count_predictions, axis=2))", "\n", "# plt.show()", "\n", "return", "full_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.predict_whole": [[145, 154], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Upsample", "net", "isinstance", "nn.Upsample.cpu().numpy().transpose", "torch.from_numpy.cuda", "nn.Upsample.cpu().numpy", "nn.Upsample.cpu", "nn.Upsample."], "function", ["None"], ["", "def", "predict_whole", "(", "net", ",", "image", ",", "tile_size", ",", "recurrence", ")", ":", "\n", "    ", "N_", ",", "C_", ",", "H_", ",", "W_", "=", "image", ".", "shape", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "H_", ",", "W_", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "prediction", "=", "net", "(", "image", ".", "cuda", "(", ")", ")", "\n", "if", "isinstance", "(", "prediction", ",", "list", ")", ":", "\n", "        ", "prediction", "=", "prediction", "[", "0", "]", "\n", "", "prediction", "=", "interp", "(", "prediction", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.predict_multiscale": [[155, 176], ["numpy.zeros", "len", "float", "scipy.ndimage.zoom", "evaluate.predict_sliding", "evaluate.predict_sliding", "scale_image[].copy"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.predict_sliding", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.predict_sliding"], ["", "def", "predict_multiscale", "(", "net", ",", "image", ",", "tile_size", ",", "scales", ",", "classes", ",", "flip_evaluation", ",", "recurrence", ")", ":", "\n", "    ", "\"\"\"\n    Predict an image by looking at it with different scales.\n        We choose the \"predict_whole_img\" for the image with less than the original input size,\n        for the input of larger size, we would choose the cropping method to ensure that GPU memory is enough.\n    \"\"\"", "\n", "image", "=", "image", ".", "data", "\n", "N_", ",", "C_", ",", "H_", ",", "W_", "=", "image", ".", "shape", "\n", "full_probs", "=", "np", ".", "zeros", "(", "(", "N_", ",", "H_", ",", "W_", ",", "classes", ")", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "        ", "scale", "=", "float", "(", "scale", ")", "\n", "scale_image", "=", "ndimage", ".", "zoom", "(", "image", ",", "(", "1.0", ",", "1.0", ",", "scale", ",", "scale", ")", ",", "order", "=", "1", ",", "prefilter", "=", "False", ")", "\n", "# scaled_probs = predict_whole(net, scale_image, tile_size, recurrence)", "\n", "scaled_probs", "=", "predict_sliding", "(", "net", ",", "scale_image", ",", "tile_size", ",", "classes", ",", "recurrence", ")", "\n", "if", "flip_evaluation", "==", "True", ":", "\n", "# flip_scaled_probs = predict_whole(net, scale_image[:,:,:,::-1].copy(), tile_size, recurrence)", "\n", "            ", "flip_scaled_probs", "=", "predict_sliding", "(", "net", ",", "scale_image", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ",", "tile_size", ",", "classes", ",", "recurrence", ")", "\n", "scaled_probs", "=", "0.5", "*", "(", "scaled_probs", "+", "flip_scaled_probs", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", ")", "\n", "", "full_probs", "+=", "scaled_probs", "\n", "", "full_probs", "/=", "len", "(", "scales", ")", "\n", "return", "full_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.get_confusion_matrix": [[177, 196], ["numpy.bincount", "numpy.zeros", "range", "range", "len"], "function", ["None"], ["", "def", "get_confusion_matrix", "(", "gt_label", ",", "pred_label", ",", "class_num", ")", ":", "\n", "        ", "\"\"\"\n        Calcute the confusion matrix by given label and pred\n        :param gt_label: the ground truth label\n        :param pred_label: the pred label\n        :param class_num: the nunber of class\n        :return: the confusion matrix\n        \"\"\"", "\n", "index", "=", "(", "gt_label", "*", "class_num", "+", "pred_label", ")", ".", "astype", "(", "'int32'", ")", "\n", "label_count", "=", "np", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "class_num", ",", "class_num", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "class_num", ")", ":", "\n", "            ", "for", "i_pred_label", "in", "range", "(", "class_num", ")", ":", "\n", "                ", "cur_index", "=", "i_label", "*", "class_num", "+", "i_pred_label", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                    ", "confusion_matrix", "[", "i_label", ",", "i_pred_label", "]", "=", "label_count", "[", "cur_index", "]", "\n", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.main": [[197, 283], ["evaluate.get_parser", "engine.Engine", "get_parser.parse_args", "map", "utils.pyt_utils.load_model", "torch.device", "torch.device", "torch.device", "torch.device", "seg_model.to", "engine.data_parallel", "engine.data_parallel.eval", "dataset.datasets.CSDataSet", "engine.get_test_loader", "numpy.zeros", "evaluate.get_palette", "os.path.join", "tqdm.tqdm", "iter", "torch.from_numpy().contiguous().cuda", "torch.from_numpy().contiguous().cuda", "torch.from_numpy().contiguous().cuda", "torch.from_numpy().contiguous().cuda", "engine.all_reduce_tensor().cpu().numpy", "engine.all_reduce_tensor().cpu().numpy.sum", "engine.all_reduce_tensor().cpu().numpy.sum", "numpy.diag", "IU_array.mean", "parser.parse_args.input_size.split", "eval", "test_sampler.set_epoch", "os.path.dirname", "range", "iter.next", "size[].numpy", "numpy.asarray", "numpy.asarray", "range", "evaluate.get_confusion_matrix", "tqdm.tqdm.set_description", "numpy.maximum", "print", "os.path.dirname", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.exists", "os.makedirs", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "evaluate.predict_multiscale", "numpy.argmax", "image.size", "PIL.Image.fromarray", "PILImage.fromarray.putpalette", "PILImage.fromarray.save", "len", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "engine.all_reduce_tensor().cpu", "open", "f.write", "label.numpy", "os.path.join", "os.path.join", "json.dumps", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "engine.all_reduce_tensor", "IU_array.tolist"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.get_parser", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.load_model", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.data_parallel", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.get_test_loader", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.get_palette", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.get_confusion_matrix", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.evaluate.predict_multiscale", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.all_reduce_tensor"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "parser", "=", "get_parser", "(", ")", "\n", "\n", "with", "Engine", "(", "custom_parser", "=", "parser", ")", "as", "engine", ":", "\n", "        ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "if", "args", ".", "whole", ":", "\n", "            ", "input_size", "=", "(", "1024", ",", "2048", ")", "\n", "", "else", ":", "\n", "            ", "input_size", "=", "(", "h", ",", "w", ")", "\n", "\n", "", "seg_model", "=", "eval", "(", "'networks.'", "+", "args", ".", "model", "+", "'.Seg_Model'", ")", "(", "\n", "num_classes", "=", "args", ".", "num_classes", "\n", ")", "\n", "\n", "load_model", "(", "seg_model", ",", "args", ".", "restore_from", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "seg_model", ".", "to", "(", "device", ")", "\n", "\n", "model", "=", "engine", ".", "data_parallel", "(", "seg_model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "dataset", "=", "CSDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "1024", ",", "2048", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ")", "\n", "test_loader", ",", "test_sampler", "=", "engine", ".", "get_test_loader", "(", "dataset", ")", "\n", "\n", "if", "engine", ".", "distributed", ":", "\n", "            ", "test_sampler", ".", "set_epoch", "(", "0", ")", "\n", "\n", "", "data_list", "=", "[", "]", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_classes", ",", "args", ".", "num_classes", ")", ")", "\n", "palette", "=", "get_palette", "(", "256", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", ",", "'outputs'", ")", "\n", "if", "engine", ".", "distributed", "and", "engine", ".", "local_rank", "==", "0", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "", "bar_format", "=", "'{desc}[{elapsed}<{remaining},{rate_fmt}]'", "\n", "pbar", "=", "tqdm", "(", "range", "(", "len", "(", "test_loader", ")", ")", ",", "file", "=", "sys", ".", "stdout", ",", "\n", "bar_format", "=", "bar_format", ")", "\n", "dataloader", "=", "iter", "(", "test_loader", ")", "\n", "\n", "for", "idx", "in", "pbar", ":", "\n", "            ", "image", ",", "label", ",", "size", ",", "name", "=", "dataloader", ".", "next", "(", ")", "\n", "size", "=", "size", "[", "0", "]", ".", "numpy", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "predict_multiscale", "(", "model", ",", "image", ",", "input_size", ",", "[", "1.0", "]", ",", "args", ".", "num_classes", ",", "False", ",", "0", ")", "\n", "\n", "\n", "", "seg_pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "seg_gt", "=", "np", ".", "asarray", "(", "label", ".", "numpy", "(", ")", "[", ":", ",", ":", "size", "[", "0", "]", ",", ":", "size", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "for", "i", "in", "range", "(", "image", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "output_im", "=", "PILImage", ".", "fromarray", "(", "seg_pred", "[", "i", "]", ")", "\n", "output_im", ".", "putpalette", "(", "palette", ")", "\n", "output_im", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "name", "[", "i", "]", "+", "'.png'", ")", ")", "\n", "\n", "", "ignore_index", "=", "seg_gt", "!=", "255", "\n", "seg_gt", "=", "seg_gt", "[", "ignore_index", "]", "\n", "seg_pred", "=", "seg_pred", "[", "ignore_index", "]", "\n", "# show_all(gt, output)", "\n", "confusion_matrix", "+=", "get_confusion_matrix", "(", "seg_gt", ",", "seg_pred", ",", "args", ".", "num_classes", ")", "\n", "\n", "print_str", "=", "' Iter{}/{}'", ".", "format", "(", "idx", "+", "1", ",", "len", "(", "test_loader", ")", ")", "\n", "pbar", ".", "set_description", "(", "print_str", ",", "refresh", "=", "False", ")", "\n", "\n", "", "confusion_matrix", "=", "torch", ".", "from_numpy", "(", "confusion_matrix", ")", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "confusion_matrix", "=", "engine", ".", "all_reduce_tensor", "(", "confusion_matrix", ",", "norm", "=", "False", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "\n", "IU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IU", "=", "IU_array", ".", "mean", "(", ")", "\n", "\n", "# getConfusionMatrixPlot(confusion_matrix)", "\n", "if", "engine", ".", "distributed", "and", "engine", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "{", "'meanIU'", ":", "mean_IU", ",", "'IU_array'", ":", "IU_array", "}", ")", "\n", "model_path", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "restore_from", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "'result.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "{", "'meanIU'", ":", "mean_IU", ",", "'IU_array'", ":", "IU_array", ".", "tolist", "(", ")", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.str2bool": [[50, 57], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.get_parser": [[58, 127], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "get_parser", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n    \n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the PASCAL VOC dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--start-iters\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--print-frequency\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-num-images\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_NUM_IMAGES", ",", "\n", "help", "=", "\"How many images to save.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "str", ",", "default", "=", "'None'", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "'None'", ",", "\n", "help", "=", "\"choose model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "\"choose the number of workers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ft\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"fine-tune the model with large input size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--reproducible\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"reproducible.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--ohem\"", ",", "type", "=", "str2bool", ",", "default", "=", "'False'", ",", "\n", "help", "=", "\"use hard negative mining\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ohem-thres\"", ",", "type", "=", "float", ",", "default", "=", "0.6", ",", "\n", "help", "=", "\"choose the samples with correct probability underthe threshold.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ohem-keep\"", ",", "type", "=", "int", ",", "default", "=", "200000", ",", "\n", "help", "=", "\"choose the samples with correct probability underthe threshold.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.lr_poly": [[129, 131], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.adjust_learning_rate": [[132, 137], ["train.lr_poly"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "learning_rate", ",", "i_iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR divided by 5 at 60th, 120th and 160th epochs\"\"\"", "\n", "lr", "=", "lr_poly", "(", "learning_rate", ",", "i_iter", ",", "max_iter", ",", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.set_bn_eval": [[138, 142], ["classname.find", "m.eval"], "function", ["None"], ["", "def", "set_bn_eval", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.set_bn_momentum": [[143, 147], ["classname.find", "classname.find"], "function", ["None"], ["", "", "def", "set_bn_momentum", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'InPlaceABN'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "momentum", "=", "0.0003", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.main": [[148, 254], ["train.get_parser", "engine.Engine", "get_parser.parse_args", "map", "dataset.datasets.CSDataSet", "engine.get_train_loader", "torch.SGD", "optim.SGD.zero_grad", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "seg_model.to", "engine.data_parallel", "engine.data_parallel.train", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.random.seed", "parser.parse_args.input_size.split", "loss.criterion.CriterionOhemDSN", "loss.criterion.CriterionDSN", "eval", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "tqdm.tqdm", "iter", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "train_sampler.set_epoch", "range", "iter.next", "images.cuda.cuda", "labels.long().cuda.long().cuda", "optim.SGD.zero_grad", "train.adjust_learning_rate", "engine.data_parallel.", "engine.all_reduce_tensor", "model.backward", "optim.SGD.step", "tqdm.tqdm.set_description", "filter", "len", "seg_model.parameters", "labels.long().cuda.long", "engine.all_reduce_tensor.item", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "seg_model.state_dict", "os.join", "seg_model.state_dict", "os.join", "len", "str"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.get_parser", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.get_train_loader", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.engine.Engine.data_parallel", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.all_reduce_tensor", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.Reduce.backward"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "parser", "=", "get_parser", "(", ")", "\n", "\n", "with", "Engine", "(", "custom_parser", "=", "parser", ")", "as", "engine", ":", "\n", "        ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "reproducible", ":", "\n", "            ", "seed", "=", "args", ".", "random_seed", "\n", "if", "engine", ".", "distributed", ":", "\n", "                ", "seed", "=", "engine", ".", "local_rank", "\n", "", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "\n", "# data loader", "\n", "", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "input_size", "=", "(", "h", ",", "w", ")", "\n", "dataset", "=", "CSDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "None", ",", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", "\n", "train_loader", ",", "train_sampler", "=", "engine", ".", "get_train_loader", "(", "dataset", ")", "\n", "\n", "# config network and criterion", "\n", "if", "args", ".", "ohem", ":", "\n", "            ", "criterion", "=", "CriterionOhemDSN", "(", "thresh", "=", "args", ".", "ohem_thres", ",", "min_kept", "=", "args", ".", "ohem_keep", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "CriterionDSN", "(", ")", "#CriterionCrossEntropy()", "\n", "\n", "# model = Res_Deeplab(args.num_classes, criterion=criterion,", "\n", "#         pretrained_model=args.restore_from)", "\n", "", "seg_model", "=", "eval", "(", "'networks.'", "+", "args", ".", "model", "+", "'.Seg_Model'", ")", "(", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "criterion", "=", "criterion", ",", "\n", "pretrained_model", "=", "args", ".", "restore_from", "\n", ")", "\n", "# seg_model.init_weights()", "\n", "\n", "# group weight and config optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "seg_model", ".", "parameters", "(", ")", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", "]", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# optimizer = optim.Adam([{'params': filter(lambda p: p.requires_grad, seg_model.parameters()), 'lr': args.learning_rate}], ", "\n", "#         lr=args.learning_rate, weight_decay=args.weight_decay)", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "seg_model", ".", "to", "(", "device", ")", "\n", "\n", "model", "=", "engine", ".", "data_parallel", "(", "seg_model", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "", "run", "=", "True", "\n", "global_iteration", "=", "args", ".", "start_iters", "\n", "avgloss", "=", "0", "\n", "\n", "while", "run", ":", "\n", "            ", "epoch", "=", "global_iteration", "//", "len", "(", "train_loader", ")", "\n", "if", "engine", ".", "distributed", ":", "\n", "                ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "bar_format", "=", "'{desc}[{elapsed}<{remaining},{rate_fmt}]'", "\n", "pbar", "=", "tqdm", "(", "range", "(", "len", "(", "train_loader", ")", ")", ",", "file", "=", "sys", ".", "stdout", ",", "\n", "bar_format", "=", "bar_format", ")", "\n", "dataloader", "=", "iter", "(", "train_loader", ")", "\n", "\n", "for", "idx", "in", "pbar", ":", "\n", "                ", "global_iteration", "+=", "1", "\n", "\n", "images", ",", "labels", ",", "_", ",", "_", "=", "dataloader", ".", "next", "(", ")", "\n", "images", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "args", ".", "learning_rate", ",", "global_iteration", "-", "1", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "loss", "=", "model", "(", "images", ",", "labels", ")", "\n", "\n", "reduce_loss", "=", "engine", ".", "all_reduce_tensor", "(", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "print_str", "=", "'Epoch{}/Iters{}'", ".", "format", "(", "epoch", ",", "global_iteration", ")", "+", "' Iter{}/{}:'", ".", "format", "(", "idx", "+", "1", ",", "len", "(", "train_loader", ")", ")", "+", "' lr=%.2e'", "%", "lr", "+", "' loss=%.2f'", "%", "reduce_loss", ".", "item", "(", ")", "\n", "\n", "pbar", ".", "set_description", "(", "print_str", ",", "refresh", "=", "False", ")", "\n", "\n", "if", "(", "not", "engine", ".", "distributed", ")", "or", "(", "engine", ".", "distributed", "and", "engine", ".", "local_rank", "==", "0", ")", ":", "\n", "                    ", "if", "global_iteration", "%", "args", ".", "save_pred_every", "==", "0", "or", "global_iteration", ">=", "args", ".", "num_steps", ":", "\n", "                        ", "print", "(", "'taking snapshot ...'", ")", "\n", "torch", ".", "save", "(", "seg_model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'CS_scenes_'", "+", "str", "(", "global_iteration", ")", "+", "'.pth'", ")", ")", "\n", "\n", "", "if", "global_iteration", "==", "1", ":", "\n", "                        ", "torch", ".", "save", "(", "seg_model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'CS_scenes_init.pth'", ")", ")", "\n", "\n", "", "", "if", "global_iteration", ">=", "args", ".", "num_steps", ":", "\n", "                    ", "run", "=", "False", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.AllReduce.forward": [[33, 44], ["sorted", "torch.reduce_add_coalesced", "torch.reduce_add_coalesced", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "tuple", "inputs[].get_device", "range", "range", "len", "len", "i[].get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "num_inputs", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "num_inputs", "=", "num_inputs", "\n", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "num_inputs", ")", "]", "\n", "inputs", "=", "[", "inputs", "[", "i", ":", "i", "+", "num_inputs", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "num_inputs", ")", "]", "\n", "# sort before reduce sum", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ".", "get_device", "(", ")", ")", "\n", "results", "=", "comm", ".", "reduce_add_coalesced", "(", "inputs", ",", "ctx", ".", "target_gpus", "[", "0", "]", ")", "\n", "outputs", "=", "comm", ".", "broadcast_coalesced", "(", "results", ",", "ctx", ".", "target_gpus", ")", "\n", "return", "tuple", "(", "[", "t", "for", "tensors", "in", "outputs", "for", "t", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.AllReduce.backward": [[45, 53], ["torch.reduce_add_coalesced", "torch.reduce_add_coalesced", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "tuple", "range", "len", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "inputs", "=", "[", "i", ".", "data", "for", "i", "in", "inputs", "]", "\n", "inputs", "=", "[", "inputs", "[", "i", ":", "i", "+", "ctx", ".", "num_inputs", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inputs", ")", ",", "ctx", ".", "num_inputs", ")", "]", "\n", "results", "=", "comm", ".", "reduce_add_coalesced", "(", "inputs", ",", "ctx", ".", "target_gpus", "[", "0", "]", ")", "\n", "outputs", "=", "comm", ".", "broadcast_coalesced", "(", "results", ",", "ctx", ".", "target_gpus", ")", "\n", "return", "(", "None", ",", ")", "+", "tuple", "(", "[", "Variable", "(", "t", ")", "for", "tensors", "in", "outputs", "for", "t", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.Reduce.forward": [[56, 61], ["sorted", "torch.reduce_add", "torch.reduce_add", "inputs[].get_device", "range", "len", "i.get_device"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "inputs", ")", ":", "\n", "        ", "ctx", ".", "target_gpus", "=", "[", "inputs", "[", "i", "]", ".", "get_device", "(", ")", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", "]", "\n", "inputs", "=", "sorted", "(", "inputs", ",", "key", "=", "lambda", "i", ":", "i", ".", "get_device", "(", ")", ")", "\n", "return", "comm", ".", "reduce_add", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.Reduce.backward": [[62, 65], ["torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradOutput", ")", ":", "\n", "        ", "return", "Broadcast", ".", "apply", "(", "ctx", ".", "target_gpus", ",", "gradOutput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.DataParallelModel.gather": [[96, 98], ["None"], "methods", ["None"], ["def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.DataParallelModel.replicate": [[99, 103], ["super().replicate", "encoding.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.DataParallelModel.replicate", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.execute_replication_callbacks"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelModel", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.DataParallelCriterion.forward": [[125, 136], ["encoding.DataParallelCriterion.scatter", "encoding.DataParallelCriterion.replicate", "encoding._criterion_parallel_apply", "encoding.DataParallelCriterion.module", "len", "encoding.DataParallelCriterion.module", "Reduce.apply", "len", "len"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.DataParallelModel.replicate", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding._criterion_parallel_apply"], ["def", "forward", "(", "self", ",", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", ":", "\n", "# input should be already scatterd", "\n", "# scattering the targets instead", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", ",", "**", "kwargs", ")", "\n", "", "targets", ",", "kwargs", "=", "self", ".", "scatter", "(", "targets", ",", "kwargs", ",", "self", ".", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "inputs", ",", "*", "targets", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "_criterion_parallel_apply", "(", "replicas", ",", "inputs", ",", "targets", ",", "kwargs", ")", "\n", "return", "Reduce", ".", "apply", "(", "*", "outputs", ")", "/", "len", "(", "outputs", ")", "\n", "#return self.gather(outputs, self.output_device).mean()", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.allreduce": [[26, 31], ["AllReduce.apply"], "function", ["None"], ["def", "allreduce", "(", "*", "inputs", ")", ":", "\n", "    ", "\"\"\"Cross GPU all reduce autograd operation for calculate mean and\n    variance in SyncBN.\n    \"\"\"", "\n", "return", "AllReduce", ".", "apply", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding._criterion_parallel_apply": [[139, 193], ["threading.Lock", "range", "len", "len", "len", "len", "torch.is_grad_enabled", "torch.is_grad_enabled", "len", "encoding._criterion_parallel_apply._worker"], "function", ["None"], ["", "", "def", "_criterion_parallel_apply", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", "=", "None", ",", "devices", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "modules", ")", "==", "len", "(", "inputs", ")", "\n", "assert", "len", "(", "targets", ")", "==", "len", "(", "inputs", ")", "\n", "if", "kwargs_tup", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "kwargs_tup", ")", "\n", "", "else", ":", "\n", "        ", "kwargs_tup", "=", "(", "{", "}", ",", ")", "*", "len", "(", "modules", ")", "\n", "", "if", "devices", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "devices", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "[", "None", "]", "*", "len", "(", "modules", ")", "\n", "\n", "", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "results", "=", "{", "}", "\n", "if", "torch_ver", "!=", "\"0.3\"", ":", "\n", "        ", "grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "\n", "", "def", "_worker", "(", "i", ",", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", "=", "None", ")", ":", "\n", "        ", "if", "torch_ver", "!=", "\"0.3\"", ":", "\n", "            ", "torch", ".", "set_grad_enabled", "(", "grad_enabled", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "get_a_var", "(", "input", ")", ".", "get_device", "(", ")", "\n", "", "try", ":", "\n", "            ", "if", "not", "isinstance", "(", "input", ",", "tuple", ")", ":", "\n", "                ", "input", "=", "(", "input", ",", ")", "\n", "", "with", "torch", ".", "cuda", ".", "device", "(", "device", ")", ":", "\n", "                ", "output", "=", "module", "(", "*", "(", "input", "+", "target", ")", ",", "**", "kwargs", ")", "\n", "", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "output", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "e", "\n", "\n", "", "", "", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "        ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "_worker", ",", "\n", "args", "=", "(", "i", ",", "module", ",", "input", ",", "target", ",", "\n", "kwargs", ",", "device", ")", ",", ")", "\n", "for", "i", ",", "(", "module", ",", "input", ",", "target", ",", "kwargs", ",", "device", ")", "in", "\n", "enumerate", "(", "zip", "(", "modules", ",", "inputs", ",", "targets", ",", "kwargs_tup", ",", "devices", ")", ")", "]", "\n", "\n", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "_worker", "(", "0", ",", "modules", "[", "0", "]", ",", "inputs", "[", "0", "]", ",", "kwargs_tup", "[", "0", "]", ",", "devices", "[", "0", "]", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "output", "=", "results", "[", "i", "]", "\n", "if", "isinstance", "(", "output", ",", "Exception", ")", ":", "\n", "            ", "raise", "output", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.execute_replication_callbacks": [[203, 225], ["len", "enumerate", "list", "encoding.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["None"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created\n    by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead\n    of calling the callback of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.patch_replication_callback": [[227, 252], ["isinstance", "functools.wraps", "old_replicate", "encoding.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.encoding.execute_replication_callbacks"], ["", "", "", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "", "", ""]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter.format": [[18, 43], ["logger.LogFormatter.__set_fmt", "logging.Formatter.format", "logger.LogFormatter.__set_fmt", "logging.Formatter.format", "logger.LogFormatter._color_date", "mcl"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter.format", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter._color_date"], ["def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "record", ".", "levelno", "==", "logging", ".", "DEBUG", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_dbg", ",", "'DBG'", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_warn", ",", "'WRN'", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_err", ",", "'ERR'", "\n", "", "else", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_normal", ",", "''", "\n", "\n", "", "if", "mtxt", ":", "\n", "            ", "mtxt", "+=", "' '", "\n", "\n", "", "if", "self", ".", "log_fout", ":", "\n", "            ", "self", ".", "__set_fmt", "(", "self", ".", "date_full", "+", "mtxt", "+", "self", ".", "msg", ")", "\n", "formatted", "=", "super", "(", "LogFormatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "# self.log_fout.write(formatted)", "\n", "# self.log_fout.write('\\n')", "\n", "# self.log_fout.flush()", "\n", "return", "formatted", "\n", "\n", "", "self", ".", "__set_fmt", "(", "self", ".", "_color_date", "(", "self", ".", "date", ")", "+", "mcl", "(", "mtxt", "+", "self", ".", "msg", ")", ")", "\n", "formatted", "=", "super", "(", "LogFormatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "\n", "return", "formatted", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter._color_dbg": [[51, 54], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_color_dbg", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[36m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter._color_warn": [[55, 58], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_warn", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[1;31m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter._color_err": [[59, 62], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_err", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[1;4;31m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter._color_omitted": [[63, 66], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_omitted", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[35m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter._color_normal": [[67, 70], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_normal", "(", "msg", ")", ":", "\n", "        ", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.LogFormatter._color_date": [[71, 74], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_date", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[32m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.logger.get_logger": [[76, 95], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "formatter", "os.path.isdir", "os.makedirs"], "function", ["None"], ["", "", "def", "get_logger", "(", "log_dir", "=", "None", ",", "log_file", "=", "None", ",", "formatter", "=", "LogFormatter", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "_default_level", ")", "\n", "del", "logger", ".", "handlers", "[", ":", "]", "\n", "\n", "if", "log_dir", "and", "log_file", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "LogFormatter", ".", "log_fout", "=", "True", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", "(", "datefmt", "=", "'%d %H:%M:%S'", ")", ")", "\n", "stream_handler", ".", "setLevel", "(", "0", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.reduce_tensor": [[29, 36], ["tensor.clone.clone", "torch.reduce", "torch.get_rank", "tensor.clone.div_"], "function", ["None"], ["def", "reduce_tensor", "(", "tensor", ",", "dst", "=", "0", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "world_size", "=", "1", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "reduce", "(", "tensor", ",", "dst", ",", "op", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "dst", ":", "\n", "        ", "tensor", ".", "div_", "(", "world_size", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.all_reduce_tensor": [[38, 45], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_"], "function", ["None"], ["", "def", "all_reduce_tensor", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "world_size", "=", "1", ",", "norm", "=", "True", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ",", "op", ")", "\n", "if", "norm", ":", "\n", "        ", "tensor", ".", "div_", "(", "world_size", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.load_model": [[47, 86], ["time.time", "isinstance", "time.time", "model.load_state_dict", "set", "set", "time.time", "logger.info", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.keys", "model.state_dict().keys", "len", "logger.warning", "len", "logger.warning", "torch.load.keys", "model.state_dict"], "function", ["None"], ["", "def", "load_model", "(", "model", ",", "model_file", ",", "is_restore", "=", "False", ")", ":", "\n", "    ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "isinstance", "(", "model_file", ",", "str", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "device", ")", "\n", "if", "'model'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "", "else", ":", "\n", "        ", "state_dict", "=", "model_file", "\n", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "is_restore", ":", "\n", "        ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "'module.'", "+", "k", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "ckpt_keys", "=", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "own_keys", "=", "set", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "missing_keys", "=", "own_keys", "-", "ckpt_keys", "\n", "unexpected_keys", "=", "ckpt_keys", "-", "own_keys", "\n", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Missing key(s) in state_dict: {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "missing_keys", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Unexpected key(s) in state_dict: {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "unexpected_keys", ")", ")", ")", "\n", "\n", "", "del", "state_dict", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load model, Time usage:\\n\\tIO: {}, initialize parameters: {}\"", ".", "format", "(", "\n", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.parse_devices": [[88, 113], ["input_devices.endswith", "input_devices.split", "logger.info", "list", "range", "range", "int", "list.append", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "list.append", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "d.split", "d.split", "str"], "function", ["None"], ["", "def", "parse_devices", "(", "input_devices", ")", ":", "\n", "    ", "if", "input_devices", ".", "endswith", "(", "'*'", ")", ":", "\n", "        ", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "return", "devices", "\n", "\n", "", "devices", "=", "[", "]", "\n", "for", "d", "in", "input_devices", ".", "split", "(", "','", ")", ":", "\n", "        ", "if", "'-'", "in", "d", ":", "\n", "            ", "start_device", ",", "end_device", "=", "d", ".", "split", "(", "'-'", ")", "[", "0", "]", ",", "d", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "assert", "start_device", "!=", "''", "\n", "assert", "end_device", "!=", "''", "\n", "start_device", ",", "end_device", "=", "int", "(", "start_device", ")", ",", "int", "(", "end_device", ")", "\n", "assert", "start_device", "<", "end_device", "\n", "assert", "end_device", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "for", "sd", "in", "range", "(", "start_device", ",", "end_device", "+", "1", ")", ":", "\n", "                ", "devices", ".", "append", "(", "sd", ")", "\n", "", "", "else", ":", "\n", "            ", "device", "=", "int", "(", "d", ")", "\n", "assert", "device", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "devices", ".", "append", "(", "device", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'using devices {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "[", "str", "(", "d", ")", "for", "d", "in", "devices", "]", ")", ")", ")", "\n", "\n", "return", "devices", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.extant_file": [[115, 124], ["os.path.exists", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "extant_file", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    'Type' for argparse - checks that file exists but does not open.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "x", ")", ":", "\n", "# Argparse uses the ArgumentTypeError to give a rejection message like:", "\n", "# error: argument input: x does not exist", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"{0} does not exist\"", ".", "format", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.link_file": [[126, 130], ["os.system", "os.path.isdir", "os.path.isfile", "os.remove"], "function", ["None"], ["", "def", "link_file", "(", "src", ",", "target", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "target", ")", "or", "os", ".", "path", ".", "isfile", "(", "target", ")", ":", "\n", "        ", "os", ".", "remove", "(", "target", ")", "\n", "", "os", ".", "system", "(", "'ln -s {} {}'", ".", "format", "(", "src", ",", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.ensure_dir": [[132, 135], ["os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "ensure_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils._dbg_interactive": [[137, 140], ["embed"], "function", ["None"], ["", "", "def", "_dbg_interactive", "(", "var", ",", "value", ")", ":", "\n", "    ", "from", "IPython", "import", "embed", "\n", "embed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.decode_labels": [[141, 165], ["mask.data.cpu().numpy.data.cpu().numpy", "np.zeros", "range", "Image.new", "Image.new.load", "enumerate", "np.array", "mask.data.cpu().numpy.data.cpu", "enumerate", "len", "len"], "function", ["None"], ["", "def", "decode_labels", "(", "mask", ",", "num_images", "=", "1", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"Decode batch of segmentation masks.\n    \n    Args:\n      mask: result of inference after taking argmax.\n      num_images: number of images to decode from the batch.\n      num_classes: number of classes to predict (including background).\n    \n    Returns:\n      A batch with num_images RGB images of the same size as the input. \n    \"\"\"", "\n", "mask", "=", "mask", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n", ",", "h", ",", "w", "=", "mask", ".", "shape", "\n", "assert", "(", "n", ">=", "num_images", ")", ",", "'Batch size %d should be greater or equal than number of images to save %d.'", "%", "(", "n", ",", "num_images", ")", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "      ", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "len", "(", "mask", "[", "i", ",", "0", "]", ")", ",", "len", "(", "mask", "[", "i", "]", ")", ")", ")", "\n", "pixels", "=", "img", ".", "load", "(", ")", "\n", "for", "j_", ",", "j", "in", "enumerate", "(", "mask", "[", "i", ",", ":", ",", ":", "]", ")", ":", "\n", "          ", "for", "k_", ",", "k", "in", "enumerate", "(", "j", ")", ":", "\n", "              ", "if", "k", "<", "num_classes", ":", "\n", "                  ", "pixels", "[", "k_", ",", "j_", "]", "=", "label_colours", "[", "k", "]", "\n", "", "", "", "outputs", "[", "i", "]", "=", "np", ".", "array", "(", "img", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.decode_predictions": [[166, 198], ["isinstance", "np.argmax", "np.zeros", "range", "np.concatenate", "preds.data.cpu().numpy.data.cpu().numpy", "Image.new", "Image.new.load", "enumerate", "np.array", "preds_list.append", "enumerate", "pred[].data.cpu().numpy", "preds.data.cpu().numpy.data.cpu", "len", "len", "pred[].data.cpu"], "function", ["None"], ["", "def", "decode_predictions", "(", "preds", ",", "num_images", "=", "1", ",", "num_classes", "=", "21", ")", ":", "\n", "    ", "\"\"\"Decode batch of segmentation masks.\n    \n    Args:\n      mask: result of inference after taking argmax.\n      num_images: number of images to decode from the batch.\n      num_classes: number of classes to predict (including background).\n    \n    Returns:\n      A batch with num_images RGB images of the same size as the input. \n    \"\"\"", "\n", "if", "isinstance", "(", "preds", ",", "list", ")", ":", "\n", "        ", "preds_list", "=", "[", "]", "\n", "for", "pred", "in", "preds", ":", "\n", "            ", "preds_list", ".", "append", "(", "pred", "[", "-", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds_list", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "preds", "=", "preds", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "preds", "=", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", "\n", "n", ",", "h", ",", "w", "=", "preds", ".", "shape", "\n", "assert", "(", "n", ">=", "num_images", ")", ",", "'Batch size %d should be greater or equal than number of images to save %d.'", "%", "(", "n", ",", "num_images", ")", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "      ", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "len", "(", "preds", "[", "i", ",", "0", "]", ")", ",", "len", "(", "preds", "[", "i", "]", ")", ")", ")", "\n", "pixels", "=", "img", ".", "load", "(", ")", "\n", "for", "j_", ",", "j", "in", "enumerate", "(", "preds", "[", "i", ",", ":", ",", ":", "]", ")", ":", "\n", "          ", "for", "k_", ",", "k", "in", "enumerate", "(", "j", ")", ":", "\n", "              ", "if", "k", "<", "num_classes", ":", "\n", "                  ", "pixels", "[", "k_", ",", "j_", "]", "=", "label_colours", "[", "k", "]", "\n", "", "", "", "outputs", "[", "i", "]", "=", "np", ".", "array", "(", "img", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.inv_preprocess": [[199, 218], ["imgs.data.cpu().numpy.data.cpu().numpy", "np.zeros", "range", "imgs.data.cpu().numpy.data.cpu", "np.transpose"], "function", ["None"], ["", "def", "inv_preprocess", "(", "imgs", ",", "num_images", ",", "img_mean", ")", ":", "\n", "    ", "\"\"\"Inverse preprocessing of the batch of images.\n       Add the mean vector and convert from BGR to RGB.\n       \n    Args:\n      imgs: batch of input images.\n      num_images: number of images to apply the inverse transformations on.\n      img_mean: vector of mean colour values.\n  \n    Returns:\n      The batch of the size num_images with the same spatial dimensions as the input.\n    \"\"\"", "\n", "imgs", "=", "imgs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "imgs", ".", "shape", "\n", "assert", "(", "n", ">=", "num_images", ")", ",", "'Batch size %d should be greater or equal than number of images to save %d.'", "%", "(", "n", ",", "num_images", ")", "\n", "outputs", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "h", ",", "w", ",", "c", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "outputs", "[", "i", "]", "=", "(", "np", ".", "transpose", "(", "imgs", "[", "i", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "img_mean", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.VOCDataSet.__init__": [[13, 34], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "datasets.VOCDataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"JPEGImages/%s.jpg\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"SegmentationClassAug/%s.png\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.VOCDataSet.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.VOCDataSet.generate_scale_label": [[39, 44], ["cv2.resize", "cv2.resize", "random.randint"], "methods", ["None"], ["", "def", "generate_scale_label", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "f_scale", "=", "0.5", "+", "random", ".", "randint", "(", "0", ",", "11", ")", "/", "10.0", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.VOCDataSet.__getitem__": [[45, 82], ["cv2.imread", "cv2.imread", "numpy.asarray", "max", "max", "random.randint", "random.randint", "numpy.asarray", "numpy.asarray", "image.transpose.transpose.transpose", "datasets.VOCDataSet.generate_scale_label", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "image.transpose.transpose.copy", "numpy.asarray.copy", "numpy.array", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataSet.generate_scale_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "generate_scale_label", "(", "image", ",", "label", ")", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "-=", "self", ".", "mean", "\n", "img_h", ",", "img_w", "=", "label", ".", "shape", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label_pad", "=", "cv2", ".", "copyMakeBorder", "(", "label", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_pad", ",", "label_pad", "=", "image", ",", "label", "\n", "\n", "", "img_h", ",", "img_w", "=", "label_pad", ".", "shape", "\n", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "crop_h", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "crop_w", ")", "\n", "# roi = cv2.Rect(w_off, h_off, self.crop_w, self.crop_h);", "\n", "image", "=", "np", ".", "asarray", "(", "img_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "#image = image[:, :, ::-1]  # change to BGR", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "if", "self", ".", "is_mirror", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.VOCDataTestSet.__init__": [[85, 98], ["i_id.strip", "os.join", "os.join", "datasets.VOCDataTestSet.files.append", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "crop_size", "=", "(", "505", ",", "505", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "mean", "=", "mean", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "self", ".", "files", "=", "[", "]", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"JPEGImages/%s.jpg\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.VOCDataTestSet.__len__": [[100, 102], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.VOCDataTestSet.__getitem__": [[103, 120], ["cv2.imread", "numpy.asarray", "max", "max", "cv2.copyMakeBorder.transpose", "os.splitext", "os.splitext", "cv2.copyMakeBorder", "os.basename", "os.basename"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "size", "=", "image", ".", "shape", "\n", "name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "datafiles", "[", "\"img\"", "]", ")", ")", "[", "0", "]", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "-=", "self", ".", "mean", "\n", "\n", "img_h", ",", "img_w", ",", "_", "=", "image", ".", "shape", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "image", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "image", ",", "name", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataSet.__init__": [[122, 153], ["print", "i_id.strip().split", "os.join", "os.join", "os.join", "os.join", "datasets.CSDataSet.files.append", "open", "int", "os.splitext", "os.splitext", "len", "i_id.strip", "numpy.ceil", "os.basename", "os.basename", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "                ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "item", "in", "self", ".", "img_ids", ":", "\n", "            ", "image_path", ",", "label_path", "=", "item", "\n", "name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "label_path", ")", ")", "[", "0", "]", "\n", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "image_path", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "label_path", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n", "", "self", ".", "id_to_trainid", "=", "{", "-", "1", ":", "ignore_label", ",", "0", ":", "ignore_label", ",", "1", ":", "ignore_label", ",", "2", ":", "ignore_label", ",", "\n", "3", ":", "ignore_label", ",", "4", ":", "ignore_label", ",", "5", ":", "ignore_label", ",", "6", ":", "ignore_label", ",", "\n", "7", ":", "0", ",", "8", ":", "1", ",", "9", ":", "ignore_label", ",", "10", ":", "ignore_label", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "\n", "14", ":", "ignore_label", ",", "15", ":", "ignore_label", ",", "16", ":", "ignore_label", ",", "17", ":", "5", ",", "\n", "18", ":", "ignore_label", ",", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "26", ":", "13", ",", "27", ":", "14", ",", "\n", "28", ":", "15", ",", "29", ":", "ignore_label", ",", "30", ":", "ignore_label", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "print", "(", "'{} images are loaded!'", ".", "format", "(", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataSet.__len__": [[154, 156], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataSet.generate_scale_label": [[157, 162], ["cv2.resize", "cv2.resize", "random.randint"], "methods", ["None"], ["", "def", "generate_scale_label", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "f_scale", "=", "0.7", "+", "random", ".", "randint", "(", "0", ",", "14", ")", "/", "10.0", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataSet.id2trainId": [[163, 172], ["label.copy", "datasets.CSDataSet.id_to_trainid.items", "datasets.CSDataSet.id_to_trainid.items"], "methods", ["None"], ["", "def", "id2trainId", "(", "self", ",", "label", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "label_copy", "=", "label", ".", "copy", "(", ")", "\n", "if", "reverse", ":", "\n", "            ", "for", "v", ",", "k", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "", "return", "label_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataSet.__getitem__": [[173, 211], ["cv2.imread", "cv2.imread", "datasets.CSDataSet.id2trainId", "numpy.asarray", "max", "max", "random.randint", "random.randint", "numpy.asarray", "numpy.asarray", "image.transpose.transpose.transpose", "datasets.CSDataSet.generate_scale_label", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "image.transpose.transpose.copy", "numpy.asarray.copy", "numpy.array", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataSet.id2trainId", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataSet.generate_scale_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "label", "=", "self", ".", "id2trainId", "(", "label", ")", "\n", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "generate_scale_label", "(", "image", ",", "label", ")", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "-=", "self", ".", "mean", "\n", "img_h", ",", "img_w", "=", "label", ".", "shape", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label_pad", "=", "cv2", ".", "copyMakeBorder", "(", "label", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_pad", ",", "label_pad", "=", "image", ",", "label", "\n", "\n", "", "img_h", ",", "img_w", "=", "label_pad", ".", "shape", "\n", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "crop_h", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "crop_w", ")", "\n", "# roi = cv2.Rect(w_off, h_off, self.crop_w, self.crop_h);", "\n", "image", "=", "np", ".", "asarray", "(", "img_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "#image = image[:, :, ::-1]  # change to BGR", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "if", "self", ".", "is_mirror", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataTestSet.__init__": [[253, 266], ["os.join", "os.join", "datasets.CSDataTestSet.files.append", "i_id.strip().split", "open", "os.splitext", "os.splitext", "os.basename", "os.basename", "i_id.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "crop_size", "=", "(", "505", ",", "505", ")", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "self", ".", "files", "=", "[", "]", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "image_path", "in", "self", ".", "img_ids", ":", "\n", "            ", "name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "image_path", ")", ")", "[", "0", "]", "\n", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "image_path", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataTestSet.__len__": [[268, 270], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.dataset.datasets.CSDataTestSet.__getitem__": [[271, 289], ["cv2.imread", "cv2.resize", "numpy.asarray", "max", "max", "cv2.copyMakeBorder.transpose", "os.splitext", "os.splitext", "cv2.copyMakeBorder", "numpy.array", "os.basename", "os.basename", "cv2.copyMakeBorder.min", "cv2.copyMakeBorder.max", "cv2.copyMakeBorder.min"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "0.5", ",", "fy", "=", "0.5", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "size", "=", "image", ".", "shape", "\n", "name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "datafiles", "[", "\"img\"", "]", ")", ")", "[", "0", "]", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "=", "(", "image", "-", "image", ".", "min", "(", ")", ")", "/", "(", "image", ".", "max", "(", ")", "-", "image", ".", "min", "(", ")", ")", "\n", "\n", "img_h", ",", "img_w", ",", "_", "=", "image", ".", "shape", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "image", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "image", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.Bottleneck.__init__": [[25, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "fist_dilation", "=", "1", ",", "multi_grid", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "*", "multi_grid", ",", "dilation", "=", "dilation", "*", "multi_grid", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_inplace", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.Bottleneck.forward": [[40, 61], ["pspnet.Bottleneck.conv1", "pspnet.Bottleneck.bn1", "pspnet.Bottleneck.relu", "pspnet.Bottleneck.conv2", "pspnet.Bottleneck.bn2", "pspnet.Bottleneck.relu", "pspnet.Bottleneck.conv3", "pspnet.Bottleneck.bn3", "pspnet.Bottleneck.relu_inplace", "pspnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_inplace", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.PSPModule.__init__": [[67, 76], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "pspnet.PSPModule._make_stage", "len"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.PSPModule._make_stage"], ["def", "__init__", "(", "self", ",", "features", ",", "out_features", "=", "512", ",", "sizes", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ")", ":", "\n", "        ", "super", "(", "PSPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_stage", "(", "features", ",", "out_features", ",", "size", ")", "for", "size", "in", "sizes", "]", ")", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", "+", "len", "(", "sizes", ")", "*", "out_features", ",", "out_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_features", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.PSPModule._make_stage": [[78, 83], ["torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "features", ",", "out_features", ",", "size", ")", ":", "\n", "        ", "prior", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "size", ",", "size", ")", ")", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "features", ",", "out_features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "bn", "=", "InPlaceABNSync", "(", "out_features", ")", "\n", "return", "nn", ".", "Sequential", "(", "prior", ",", "conv", ",", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.PSPModule.forward": [[84, 89], ["pspnet.PSPModule.bottleneck", "feats.size", "feats.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "stage"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "h", ",", "w", "=", "feats", ".", "size", "(", "2", ")", ",", "feats", ".", "size", "(", "3", ")", "\n", "priors", "=", "[", "F", ".", "interpolate", "(", "input", "=", "stage", "(", "feats", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "for", "stage", "in", "self", ".", "stages", "]", "+", "[", "feats", "]", "\n", "bottle", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "priors", ",", "1", ")", ")", "\n", "return", "bottle", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.ResNet.__init__": [[91, 122], ["torch.Module.__init__", "pspnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "pspnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "pspnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "pspnet.ResNet._make_layer", "pspnet.ResNet._make_layer", "pspnet.ResNet._make_layer", "pspnet.ResNet._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pspnet.PSPModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "64", ",", "64", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "64", ",", "128", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "multi_grid", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "PSPModule", "(", "2048", ",", "512", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ")", "\n", "\n", "self", ".", "dsn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "InPlaceABNSync", "(", "512", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.ResNet._make_layer": [[123, 139], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "isinstance", "block", "generate_multi_grid", "generate_multi_grid", "len"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "multi_grid", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "generate_multi_grid", "=", "lambda", "index", ",", "grids", ":", "grids", "[", "index", "%", "len", "(", "grids", ")", "]", "if", "isinstance", "(", "grids", ",", "tuple", ")", "else", "1", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ",", "multi_grid", "=", "generate_multi_grid", "(", "0", ",", "multi_grid", ")", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "multi_grid", "=", "generate_multi_grid", "(", "i", ",", "multi_grid", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.ResNet.forward": [[140, 157], ["pspnet.ResNet.relu1", "pspnet.ResNet.relu2", "pspnet.ResNet.relu3", "pspnet.ResNet.maxpool", "pspnet.ResNet.layer1", "pspnet.ResNet.layer2", "pspnet.ResNet.layer3", "pspnet.ResNet.dsn", "pspnet.ResNet.layer4", "pspnet.ResNet.head", "pspnet.ResNet.bn1", "pspnet.ResNet.bn2", "pspnet.ResNet.bn3", "pspnet.ResNet.criterion", "pspnet.ResNet.conv1", "pspnet.ResNet.conv2", "pspnet.ResNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x_dsn", "=", "self", ".", "dsn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "outs", "=", "[", "x", ",", "x_dsn", "]", "\n", "\n", "if", "self", ".", "criterion", "is", "not", "None", "and", "labels", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "criterion", "(", "outs", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.pspnet.Seg_Model": [[160, 179], ["pspnet.ResNet", "utils.pyt_utils.load_model"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.load_model"], ["", "", "", "def", "Seg_Model", "(", "num_classes", ",", "criterion", "=", "None", ",", "pretrained_model", "=", "None", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "criterion", ")", "\n", "\n", "if", "pretrained_model", "is", "not", "None", ":", "\n", "        ", "model", "=", "load_model", "(", "model", ",", "pretrained_model", ")", "\n", "# device = torch.device('cpu')", "\n", "# saved_state_dict = torch.load(pretrained_model, map_location=device)", "\n", "# new_params = model.state_dict().copy()", "\n", "# for i in saved_state_dict:", "\n", "#     #Scale.layer5.conv2d_list.3.weight", "\n", "#     i_parts = i.split('.')", "\n", "#     # print i_parts", "\n", "#     # if not i_parts[1]=='layer5':", "\n", "#     if not i_parts[0]=='fc':", "\n", "#         new_params['.'.join(i_parts[0:])] = saved_state_dict[i] ", "\n", "\n", "# model.load_state_dict(new_params)", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.Bottleneck.__init__": [[28, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "fist_dilation", "=", "1", ",", "multi_grid", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "*", "multi_grid", ",", "dilation", "=", "dilation", "*", "multi_grid", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_inplace", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.Bottleneck.forward": [[43, 64], ["alignseg.Bottleneck.conv1", "alignseg.Bottleneck.bn1", "alignseg.Bottleneck.relu", "alignseg.Bottleneck.conv2", "alignseg.Bottleneck.bn2", "alignseg.Bottleneck.relu", "alignseg.Bottleneck.conv3", "alignseg.Bottleneck.bn3", "alignseg.Bottleneck.relu_inplace", "alignseg.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_inplace", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.RRB.__init__": [[67, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "out_features", "=", "512", ")", ":", "\n", "        ", "super", "(", "RRB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "unify", "=", "nn", ".", "Conv2d", "(", "features", ",", "out_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "out_features", ",", "out_features", "//", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_features", "//", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_features", "//", "4", ",", "out_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "norm", "=", "InPlaceABNSync", "(", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.RRB.forward": [[76, 81], ["alignseg.RRB.unify", "alignseg.RRB.residual", "alignseg.RRB.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "feats", "=", "self", ".", "unify", "(", "feats", ")", "\n", "residual", "=", "self", ".", "residual", "(", "feats", ")", "\n", "feats", "=", "self", ".", "norm", "(", "feats", "+", "residual", ")", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAM.__init__": [[83, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "alignseg.CAM.delta_gen[].weight.data.zero_", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "in_features", ")", ":", "\n", "        ", "super", "(", "CAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", ",", "in_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "in_features", ")", ")", "\n", "\n", "self", ".", "adapt", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", ",", "in_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "in_features", ")", ")", "\n", "\n", "\n", "self", ".", "delta_gen", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_features", "*", "2", ",", "in_features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "in_features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "delta_gen", "[", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAM.bilinear_interpolate_torch_gridsample": [[110, 123], ["torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as().to", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as", "delta.permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid.repeat().type_as().to.repeat().type_as().to.repeat"], "methods", ["None"], ["", "def", "bilinear_interpolate_torch_gridsample", "(", "self", ",", "input", ",", "size", ",", "delta", "=", "0", ")", ":", "\n", "        ", "out_h", ",", "out_w", "=", "size", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "s", "=", "1.0", "\n", "norm", "=", "torch", ".", "tensor", "(", "[", "[", "[", "[", "w", "/", "s", ",", "h", "/", "s", "]", "]", "]", "]", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "w_list", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_h", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "out_w", ")", "\n", "h_list", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_w", ")", ".", "repeat", "(", "out_h", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "h_list", ".", "unsqueeze", "(", "2", ")", ",", "w_list", ".", "unsqueeze", "(", "2", ")", ")", ",", "2", ")", "\n", "grid", "=", "grid", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "grid", "=", "grid", "+", "delta", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "/", "norm", "\n", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAM.bilinear_interpolate_torch_gridsample2": [[124, 137], ["torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as().to", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as", "delta.permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid.repeat().type_as().to.repeat().type_as().to.repeat"], "methods", ["None"], ["", "def", "bilinear_interpolate_torch_gridsample2", "(", "self", ",", "input", ",", "size", ",", "delta", "=", "0", ")", ":", "\n", "        ", "out_h", ",", "out_w", "=", "size", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "s", "=", "2.0", "\n", "norm", "=", "torch", ".", "tensor", "(", "[", "[", "[", "[", "(", "out_w", "-", "1", ")", "/", "s", ",", "(", "out_h", "-", "1", ")", "/", "s", "]", "]", "]", "]", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "# not [h/s, w/s]", "\n", "w_list", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_h", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "out_w", ")", "\n", "h_list", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_w", ")", ".", "repeat", "(", "out_h", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "h_list", ".", "unsqueeze", "(", "2", ")", ",", "w_list", ".", "unsqueeze", "(", "2", ")", ")", ",", "2", ")", "\n", "grid", "=", "grid", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "grid", "=", "grid", "+", "delta", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "/", "norm", "\n", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAM.forward": [[138, 151], ["alignseg.CAM.pool", "alignseg.CAM.adapt", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "alignseg.CAM.delta_gen", "alignseg.CAM.bilinear_interpolate_torch_gridsample"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAB.bilinear_interpolate_torch_gridsample"], ["", "def", "forward", "(", "self", ",", "low_stage", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "low_stage", ".", "shape", "\n", "high_stage", "=", "self", ".", "pool", "(", "low_stage", ")", "\n", "low_stage", "=", "self", ".", "adapt", "(", "low_stage", ")", "\n", "\n", "high_stage_up", "=", "F", ".", "interpolate", "(", "input", "=", "high_stage", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "low_stage", ",", "high_stage_up", ")", ",", "1", ")", "\n", "delta", "=", "self", ".", "delta_gen", "(", "concat", ")", "\n", "high_stage", "=", "self", ".", "bilinear_interpolate_torch_gridsample", "(", "high_stage", ",", "(", "h", ",", "w", ")", ",", "delta", ")", "\n", "\n", "high_stage", "+=", "low_stage", "\n", "\n", "return", "high_stage", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAB.__init__": [[154, 172], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "alignseg.CAB.delta_gen1[].weight.data.zero_", "alignseg.CAB.delta_gen2[].weight.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ")", ":", "\n", "        ", "super", "(", "CAB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "delta_gen1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", "*", "2", ",", "features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", ",", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "delta_gen2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", "*", "2", ",", "features", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", ",", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "delta_gen1", "[", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "delta_gen2", "[", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAB.bilinear_interpolate_torch_gridsample": [[176, 189], ["torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as().to", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as", "delta.permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid.repeat().type_as().to.repeat().type_as().to.repeat"], "methods", ["None"], ["", "def", "bilinear_interpolate_torch_gridsample", "(", "self", ",", "input", ",", "size", ",", "delta", "=", "0", ")", ":", "\n", "        ", "out_h", ",", "out_w", "=", "size", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "s", "=", "1.0", "\n", "norm", "=", "torch", ".", "tensor", "(", "[", "[", "[", "[", "w", "/", "s", ",", "h", "/", "s", "]", "]", "]", "]", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "w_list", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_h", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "out_w", ")", "\n", "h_list", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_w", ")", ".", "repeat", "(", "out_h", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "h_list", ".", "unsqueeze", "(", "2", ")", ",", "w_list", ".", "unsqueeze", "(", "2", ")", ")", ",", "2", ")", "\n", "grid", "=", "grid", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "grid", "=", "grid", "+", "delta", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "/", "norm", "\n", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAB.bilinear_interpolate_torch_gridsample2": [[190, 203], ["torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.tensor().type_as().to", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as().to", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "torch.linspace().view().repeat.unsqueeze", "grid.repeat().type_as().to.repeat().type_as().to.repeat().type_as", "delta.permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid.repeat().type_as().to.repeat().type_as().to.repeat"], "methods", ["None"], ["", "def", "bilinear_interpolate_torch_gridsample2", "(", "self", ",", "input", ",", "size", ",", "delta", "=", "0", ")", ":", "\n", "        ", "out_h", ",", "out_w", "=", "size", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "input", ".", "shape", "\n", "s", "=", "2.0", "\n", "norm", "=", "torch", ".", "tensor", "(", "[", "[", "[", "[", "(", "out_w", "-", "1", ")", "/", "s", ",", "(", "out_h", "-", "1", ")", "/", "s", "]", "]", "]", "]", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "# not [h/s, w/s]", "\n", "w_list", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_h", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "out_w", ")", "\n", "h_list", "=", "torch", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "out_w", ")", ".", "repeat", "(", "out_h", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "h_list", ".", "unsqueeze", "(", "2", ")", ",", "w_list", ".", "unsqueeze", "(", "2", ")", ")", ",", "2", ")", "\n", "grid", "=", "grid", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", ".", "type_as", "(", "input", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "grid", "=", "grid", "+", "delta", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "/", "norm", "\n", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAB.forward": [[204, 216], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "alignseg.CAB.delta_gen1", "alignseg.CAB.delta_gen2", "alignseg.CAB.bilinear_interpolate_torch_gridsample", "alignseg.CAB.bilinear_interpolate_torch_gridsample", "alignseg.CAB.size", "alignseg.CAB.size"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAB.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.CAB.bilinear_interpolate_torch_gridsample"], ["", "def", "forward", "(", "self", ",", "low_stage", ",", "high_stage", ")", ":", "\n", "        ", "h", ",", "w", "=", "low_stage", ".", "size", "(", "2", ")", ",", "low_stage", ".", "size", "(", "3", ")", "\n", "high_stage", "=", "F", ".", "interpolate", "(", "input", "=", "high_stage", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "low_stage", ",", "high_stage", ")", ",", "1", ")", "\n", "delta1", "=", "self", ".", "delta_gen1", "(", "concat", ")", "\n", "delta2", "=", "self", ".", "delta_gen2", "(", "concat", ")", "\n", "high_stage", "=", "self", ".", "bilinear_interpolate_torch_gridsample", "(", "high_stage", ",", "(", "h", ",", "w", ")", ",", "delta1", ")", "\n", "low_stage", "=", "self", ".", "bilinear_interpolate_torch_gridsample", "(", "low_stage", ",", "(", "h", ",", "w", ")", ",", "delta2", ")", "\n", "\n", "high_stage", "+=", "low_stage", "\n", "return", "high_stage", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.ResNet.__init__": [[219, 273], ["torch.Module.__init__", "alignseg.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "alignseg.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "alignseg.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "alignseg.ResNet._make_layer", "alignseg.ResNet._make_layer", "alignseg.ResNet._make_layer", "alignseg.ResNet._make_layer", "alignseg.CAM", "alignseg.RRB", "alignseg.CAB", "alignseg.RRB", "alignseg.RRB", "alignseg.CAB", "alignseg.RRB", "alignseg.RRB", "alignseg.CAB", "alignseg.RRB", "alignseg.RRB", "alignseg.CAB", "alignseg.RRB", "alignseg.RRB", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "64", ",", "64", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "64", ",", "128", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# self.CAM = RCCAModule(2048, 256)", "\n", "# self.CAM = nn.Sequential(", "\n", "#                 nn.AdaptiveAvgPool2d(output_size=(1, 1)),", "\n", "#                 nn.Conv2d(2048, 256, kernel_size=1, bias=False),", "\n", "#                 InPlaceABNSync(256))", "\n", "self", ".", "CAM", "=", "CAM", "(", "2048", ",", "256", ")", "\n", "self", ".", "RRB5a", "=", "RRB", "(", "256", ",", "256", ")", "\n", "self", ".", "CAB5", "=", "CAB", "(", "256", ")", "\n", "self", ".", "RRB5b", "=", "RRB", "(", "256", ",", "256", ")", "\n", "self", ".", "RRB4a", "=", "RRB", "(", "2048", ",", "256", ")", "\n", "self", ".", "CAB4", "=", "CAB", "(", "256", ")", "\n", "self", ".", "RRB4b", "=", "RRB", "(", "256", ",", "256", ")", "\n", "self", ".", "RRB3a", "=", "RRB", "(", "1024", ",", "256", ")", "\n", "self", ".", "CAB3", "=", "CAB", "(", "256", ")", "\n", "self", ".", "RRB3b", "=", "RRB", "(", "256", ",", "256", ")", "\n", "self", ".", "RRB2a", "=", "RRB", "(", "512", ",", "256", ")", "\n", "self", ".", "CAB2", "=", "CAB", "(", "256", ")", "\n", "self", ".", "RRB2b", "=", "RRB", "(", "256", ",", "256", ")", "\n", "self", ".", "RRB1a", "=", "RRB", "(", "256", ",", "256", ")", "\n", "\n", "self", ".", "dsn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "InPlaceABNSync", "(", "256", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "InPlaceABNSync", "(", "256", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.ResNet._make_layer": [[274, 290], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "isinstance", "block", "generate_multi_grid", "generate_multi_grid", "len"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "multi_grid", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "generate_multi_grid", "=", "lambda", "index", ",", "grids", ":", "grids", "[", "index", "%", "len", "(", "grids", ")", "]", "if", "isinstance", "(", "grids", ",", "tuple", ")", "else", "1", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ",", "multi_grid", "=", "generate_multi_grid", "(", "0", ",", "multi_grid", ")", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "multi_grid", "=", "generate_multi_grid", "(", "i", ",", "multi_grid", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.ResNet.forward": [[291, 331], ["alignseg.ResNet.relu1", "alignseg.ResNet.relu2", "alignseg.ResNet.relu3", "alignseg.ResNet.maxpool", "alignseg.ResNet.layer1", "alignseg.ResNet.RRB1a", "alignseg.ResNet.layer2", "alignseg.ResNet.RRB2a", "alignseg.ResNet.CAB2", "alignseg.ResNet.RRB2b", "alignseg.ResNet.layer3", "alignseg.ResNet.RRB3a", "alignseg.ResNet.CAB3", "alignseg.ResNet.RRB3b", "alignseg.ResNet.dsn", "alignseg.ResNet.layer4", "alignseg.ResNet.RRB4a", "alignseg.ResNet.CAB4", "alignseg.ResNet.RRB4b", "alignseg.ResNet.CAM", "alignseg.ResNet.RRB5a", "alignseg.ResNet.CAB5", "alignseg.ResNet.RRB5b", "alignseg.ResNet.head", "alignseg.ResNet.bn1", "alignseg.ResNet.bn2", "alignseg.ResNet.bn3", "alignseg.ResNet.criterion", "alignseg.ResNet.conv1", "alignseg.ResNet.conv2", "alignseg.ResNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "d1", "=", "self", ".", "RRB1a", "(", "x1", ")", "\n", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "d2", "=", "self", ".", "RRB2a", "(", "x2", ")", "\n", "d2", "=", "self", ".", "CAB2", "(", "d1", ",", "d2", ")", "\n", "d2", "=", "self", ".", "RRB2b", "(", "d2", ")", "\n", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "d3", "=", "self", ".", "RRB3a", "(", "x3", ")", "\n", "d3", "=", "self", ".", "CAB3", "(", "d2", ",", "d3", ")", "\n", "d3", "=", "self", ".", "RRB3b", "(", "d3", ")", "\n", "dsn", "=", "self", ".", "dsn", "(", "d3", ")", "\n", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "d4", "=", "self", ".", "RRB4a", "(", "x4", ")", "\n", "d4", "=", "self", ".", "CAB4", "(", "d3", ",", "d4", ")", "\n", "d4", "=", "self", ".", "RRB4b", "(", "d4", ")", "\n", "\n", "# d5 = self.gap(x4)", "\n", "x5", "=", "self", ".", "CAM", "(", "x4", ")", "\n", "d5", "=", "self", ".", "RRB5a", "(", "x5", ")", "\n", "d5", "=", "self", ".", "CAB5", "(", "d4", ",", "d5", ")", "\n", "d5", "=", "self", ".", "RRB5b", "(", "d5", ")", "\n", "\n", "out", "=", "self", ".", "head", "(", "d5", ")", "\n", "\n", "outs", "=", "[", "out", ",", "dsn", "]", "\n", "if", "self", ".", "criterion", "is", "not", "None", "and", "labels", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "criterion", "(", "outs", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "return", "outs", "\n", "\n", "", "return", "[", "out", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.ResNet.init": [[332, 341], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "alignseg.ResNet.state_dict().copy", "alignseg.ResNet.load_state_dict", "i.split", "alignseg.ResNet.state_dict"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "restore_from", ")", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "restore_from", ")", "\n", "new_params", "=", "self", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "            ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "i_parts", "[", "0", "]", "==", "'fc'", ":", "\n", "                ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "0", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "\n", "", "", "self", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.alignseg.Seg_Model": [[343, 350], ["alignseg.ResNet", "utils.pyt_utils.load_model"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.load_model"], ["", "", "def", "Seg_Model", "(", "num_classes", ",", "criterion", "=", "None", ",", "pretrained_model", "=", "None", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "criterion", ")", "\n", "\n", "if", "pretrained_model", "is", "not", "None", ":", "\n", "        ", "model", "=", "load_model", "(", "model", ",", "pretrained_model", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.Bottleneck.__init__": [[25, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "fist_dilation", "=", "1", ",", "multi_grid", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "*", "multi_grid", ",", "dilation", "=", "dilation", "*", "multi_grid", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "relu_inplace", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.Bottleneck.forward": [[40, 61], ["deeplabv3.Bottleneck.conv1", "deeplabv3.Bottleneck.bn1", "deeplabv3.Bottleneck.relu", "deeplabv3.Bottleneck.conv2", "deeplabv3.Bottleneck.bn2", "deeplabv3.Bottleneck.relu", "deeplabv3.Bottleneck.conv3", "deeplabv3.Bottleneck.bn3", "deeplabv3.Bottleneck.relu_inplace", "deeplabv3.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu_inplace", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ASPPModule.__init__": [[67, 86], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "inner_features", "=", "256", ",", "out_features", "=", "512", ",", "dilations", "=", "(", "12", ",", "24", ",", "36", ")", ")", ":", "\n", "        ", "super", "(", "ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", ",", "inner_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "inner_features", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "inner_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "inner_features", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "inner_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilations", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "inner_features", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "inner_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilations", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "inner_features", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "features", ",", "inner_features", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilations", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "inner_features", ")", ")", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inner_features", "*", "5", ",", "out_features", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "InPlaceABNSync", "(", "out_features", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ASPPModule.forward": [[88, 102], ["x.size", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "deeplabv3.ASPPModule.conv2", "deeplabv3.ASPPModule.conv3", "deeplabv3.ASPPModule.conv4", "deeplabv3.ASPPModule.conv5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplabv3.ASPPModule.bottleneck", "deeplabv3.ASPPModule.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "\n", "feat1", "=", "F", ".", "interpolate", "(", "self", ".", "conv1", "(", "x", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "feat2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "feat3", "=", "self", ".", "conv3", "(", "x", ")", "\n", "feat4", "=", "self", ".", "conv4", "(", "x", ")", "\n", "feat5", "=", "self", ".", "conv5", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", ")", ",", "1", ")", "\n", "\n", "bottle", "=", "self", ".", "bottleneck", "(", "out", ")", "\n", "return", "bottle", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet.__init__": [[104, 135], ["torch.Module.__init__", "deeplabv3.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplabv3.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplabv3.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv3.ResNet._make_layer", "deeplabv3.ResNet._make_layer", "deeplabv3.ResNet._make_layer", "deeplabv3.ResNet._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplabv3.ASPPModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inplace_abn.InPlaceABNSync", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "128", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "64", ",", "64", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "64", ",", "128", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "relu3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ",", "multi_grid", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "ASPPModule", "(", "2048", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ")", "\n", "\n", "self", ".", "dsn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "InPlaceABNSync", "(", "512", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet._make_layer": [[136, 152], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "isinstance", "block", "generate_multi_grid", "generate_multi_grid", "len"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "multi_grid", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "generate_multi_grid", "=", "lambda", "index", ",", "grids", ":", "grids", "[", "index", "%", "len", "(", "grids", ")", "]", "if", "isinstance", "(", "grids", ",", "tuple", ")", "else", "1", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ",", "multi_grid", "=", "generate_multi_grid", "(", "0", ",", "multi_grid", ")", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "multi_grid", "=", "generate_multi_grid", "(", "i", ",", "multi_grid", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.ResNet.forward": [[153, 170], ["deeplabv3.ResNet.relu1", "deeplabv3.ResNet.relu2", "deeplabv3.ResNet.relu3", "deeplabv3.ResNet.maxpool", "deeplabv3.ResNet.layer1", "deeplabv3.ResNet.layer2", "deeplabv3.ResNet.layer3", "deeplabv3.ResNet.dsn", "deeplabv3.ResNet.layer4", "deeplabv3.ResNet.head", "deeplabv3.ResNet.bn1", "deeplabv3.ResNet.bn2", "deeplabv3.ResNet.bn3", "deeplabv3.ResNet.criterion", "deeplabv3.ResNet.conv1", "deeplabv3.ResNet.conv2", "deeplabv3.ResNet.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "relu3", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x_dsn", "=", "self", ".", "dsn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "outs", "=", "[", "x", ",", "x_dsn", "]", "\n", "\n", "if", "self", ".", "criterion", "is", "not", "None", "and", "labels", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "criterion", "(", "outs", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.networks.deeplabv3.Seg_Model": [[172, 179], ["deeplabv3.ResNet", "utils.pyt_utils.load_model"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.utils.pyt_utils.load_model"], ["", "", "", "def", "Seg_Model", "(", "num_classes", ",", "criterion", "=", "None", ",", "pretrained_model", "=", "None", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "criterion", ")", "\n", "\n", "if", "pretrained_model", "is", "not", "None", ":", "\n", "        ", "model", "=", "load_model", "(", "model", ",", "pretrained_model", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.StableBCELoss.__init__": [[130, 132], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "         ", "super", "(", "StableBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.StableBCELoss.forward": [[132, 136], ["loss.mean", "input.abs", "input.clamp", "neg_abs.exp"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "         ", "neg_abs", "=", "-", "input", ".", "abs", "(", ")", "\n", "loss", "=", "input", ".", "clamp", "(", "min", "=", "0", ")", "-", "input", "*", "target", "+", "(", "1", "+", "neg_abs", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_grad": [[18, 31], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["None"], ["", "def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    See Alg. 1 in paper\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.iou_binary": [[33, 51], ["zip", "lovasz_losses.mean", "ious.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean"], ["", "def", "iou_binary", "(", "preds", ",", "labels", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    IoU for foreground class\n    binary: 1 foreground, 0 background\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "intersection", "=", "(", "(", "label", "==", "1", ")", "&", "(", "pred", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "1", ")", "|", "(", "(", "pred", "==", "1", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "            ", "iou", "=", "EMPTY", "\n", "", "else", ":", "\n", "            ", "iou", "=", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", "\n", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "iou", "=", "mean", "(", "ious", ")", "# mean accross images if per_image", "\n", "return", "100", "*", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.iou": [[53, 73], ["zip", "range", "ious.append", "lovasz_losses.mean", "numpy.array", "zip", "iou.append", "iou.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean"], ["", "def", "iou", "(", "preds", ",", "labels", ",", "C", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Array of IoU for each (non ignored) class\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "            ", "if", "i", "!=", "ignore", ":", "# The ignored label is sometimes among predicted classes (ENet - CityScapes)", "\n", "                ", "intersection", "=", "(", "(", "label", "==", "i", ")", "&", "(", "pred", "==", "i", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "i", ")", "|", "(", "(", "pred", "==", "i", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "                    ", "iou", ".", "append", "(", "EMPTY", ")", "\n", "", "else", ":", "\n", "                    ", "iou", ".", "append", "(", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", ")", "\n", "", "", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "ious", "=", "[", "mean", "(", "iou", ")", "for", "iou", "in", "zip", "(", "*", "ious", ")", "]", "# mean accross images if per_image", "\n", "return", "100", "*", "np", ".", "array", "(", "ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_hinge": [[78, 92], ["lovasz_losses.mean", "lovasz_losses.lovasz_hinge_flat", "lovasz_losses.lovasz_hinge_flat", "lovasz_losses.flatten_binary_scores", "zip", "lovasz_losses.flatten_binary_scores", "log.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_hinge_flat", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_hinge_flat", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.flatten_binary_scores", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.flatten_binary_scores"], ["", "def", "lovasz_hinge", "(", "logits", ",", "labels", ",", "per_image", "=", "True", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      per_image: compute the loss per image instead of per batch\n      ignore: void class id\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "log", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ")", "\n", "for", "log", ",", "lab", "in", "zip", "(", "logits", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_hinge_flat": [[94, 112], ["torch.sort", "torch.sort", "lovasz_losses.lovasz_grad", "torch.dot", "torch.dot", "len", "torch.relu", "torch.autograd.Variable", "logits.sum", "labels.float", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_grad"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [P] Variable, logits at each prediction (between -\\infty and +\\infty)\n      labels: [P] Tensor, binary ground truth labels (0 or 1)\n      ignore: label to ignore\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "Variable", "(", "signs", ")", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "Variable", "(", "grad", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.flatten_binary_scores": [[114, 127], ["scores.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_scores", "(", "scores", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch (binary case)\n    Remove labels equal to 'ignore'\n    \"\"\"", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "scores", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vscores", "=", "scores", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vscores", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.binary_xloss": [[138, 148], ["lovasz_losses.flatten_binary_scores", "lovasz_losses.StableBCELoss", "torch.autograd.Variable", "labels.float"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.flatten_binary_scores"], ["", "", "def", "binary_xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Cross entropy loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      ignore: void class id\n    \"\"\"", "\n", "logits", ",", "labels", "=", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", "\n", "loss", "=", "StableBCELoss", "(", ")", "(", "logits", ",", "Variable", "(", "labels", ".", "float", "(", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_softmax": [[153, 169], ["lovasz_losses.mean", "lovasz_losses.lovasz_softmax_flat", "lovasz_losses.lovasz_softmax_flat", "lovasz_losses.flatten_probas", "zip", "lovasz_losses.flatten_probas", "prob.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_softmax_flat", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_softmax_flat", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.flatten_probas", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.flatten_probas"], ["", "def", "lovasz_softmax", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ",", "per_image", "=", "False", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1).\n              Interpreted as binary (sigmoid) output with outputs of size [B, H, W].\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "prob", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ",", "classes", "=", "classes", ")", "\n", "for", "prob", ",", "lab", "in", "zip", "(", "probas", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", ")", ",", "classes", "=", "classes", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_softmax_flat": [[171, 200], ["probas.size", "lovasz_losses.mean", "probas.numel", "list", "torch.sort", "torch.sort", "losses.append", "range", "torch.dot", "torch.dot", "fg.sum", "len", "ValueError", "torch.autograd.Variable", "torch.autograd.Variable", "lovasz_losses.lovasz_grad"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [P, C] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [P] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n    \"\"\"", "\n", "if", "probas", ".", "numel", "(", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "probas", "*", "0.", "\n", "", "C", "=", "probas", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "class_to_sum", "=", "list", "(", "range", "(", "C", ")", ")", "if", "classes", "in", "[", "'all'", ",", "'present'", "]", "else", "classes", "\n", "for", "c", "in", "class_to_sum", ":", "\n", "        ", "fg", "=", "(", "labels", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "(", "classes", "is", "'present'", "and", "fg", ".", "sum", "(", ")", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "if", "C", "==", "1", ":", "\n", "            ", "if", "len", "(", "classes", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Sigmoid output possible only with 1 class'", ")", "\n", "", "class_pred", "=", "probas", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "class_pred", "=", "probas", "[", ":", ",", "c", "]", "\n", "", "errors", "=", "(", "Variable", "(", "fg", ")", "-", "class_pred", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "fg_sorted", "=", "fg", "[", "perm", "]", "\n", "losses", ".", "append", "(", "torch", ".", "dot", "(", "errors_sorted", ",", "Variable", "(", "lovasz_grad", "(", "fg_sorted", ")", ")", ")", ")", "\n", "", "return", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.flatten_probas": [[202, 219], ["probas.view.size", "probas.view.permute().contiguous().view", "labels.view.view", "probas.view.dim", "probas.view.size", "probas.view.view", "probas.view.permute().contiguous", "valid.nonzero().squeeze", "probas.view.permute", "valid.nonzero"], "function", ["None"], ["", "def", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch\n    \"\"\"", "\n", "if", "probas", ".", "dim", "(", ")", "==", "3", ":", "\n", "# assumes output of a sigmoid layer", "\n", "        ", "B", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "view", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "C", ")", "# B * H * W, C = P, C", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "probas", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vprobas", "=", "probas", "[", "valid", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vprobas", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.xloss": [[220, 225], ["torch.cross_entropy", "torch.autograd.Variable"], "function", ["None"], ["", "def", "xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Cross entropy loss\n    \"\"\"", "\n", "return", "F", ".", "cross_entropy", "(", "logits", ",", "Variable", "(", "labels", ")", ",", "ignore_index", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.isnan": [[228, 230], ["None"], "function", ["None"], ["", "def", "isnan", "(", "x", ")", ":", "\n", "    ", "return", "x", "!=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.mean": [[232, 251], ["iter", "enumerate", "ifilterfalse", "next", "ValueError", "lovasz_losses.iou"], "function", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.iou"], ["", "def", "mean", "(", "l", ",", "ignore_nan", "=", "False", ",", "empty", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    nanmean compatible with generators.\n    \"\"\"", "\n", "l", "=", "iter", "(", "l", ")", "\n", "if", "ignore_nan", ":", "\n", "        ", "l", "=", "ifilterfalse", "(", "isnan", ",", "l", ")", "\n", "", "try", ":", "\n", "        ", "n", "=", "1", "\n", "acc", "=", "next", "(", "l", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "if", "empty", "==", "'raise'", ":", "\n", "            ", "raise", "ValueError", "(", "'Empty mean'", ")", "\n", "", "return", "empty", "\n", "", "for", "n", ",", "v", "in", "enumerate", "(", "l", ",", "2", ")", ":", "\n", "        ", "acc", "+=", "v", "\n", "", "if", "n", "==", "1", ":", "\n", "        ", "return", "acc", "\n", "", "return", "acc", "/", "n", "\n", "", ""]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.loss.OhemCrossEntropy2d.__init__": [[11, 19], ["torch.Module.__init__", "float", "int", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "255", ",", "thresh", "=", "0.7", ",", "min_kept", "=", "100000", ",", "factor", "=", "8", ")", ":", "\n", "        ", "super", "(", "OhemCrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "thresh", "=", "float", "(", "thresh", ")", "\n", "# self.min_kept_ratio = float(min_kept_ratio)", "\n", "self", ".", "min_kept", "=", "int", "(", "min_kept", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.loss.OhemCrossEntropy2d.find_threshold": [[20, 49], ["scipy.zoom", "scipy.zoom", "scipy.zoom.ravel().astype", "numpy.rollaxis().reshape", "valid_flag.sum", "numpy.where", "scipy.zoom.ravel", "numpy.rollaxis", "numpy.partition", "min", "numpy.arange", "len", "len"], "methods", ["None"], ["", "def", "find_threshold", "(", "self", ",", "np_predict", ",", "np_target", ")", ":", "\n", "# downsample 1/8", "\n", "        ", "factor", "=", "self", ".", "factor", "\n", "predict", "=", "nd", ".", "zoom", "(", "np_predict", ",", "(", "1.0", ",", "1.0", ",", "1.0", "/", "factor", ",", "1.0", "/", "factor", ")", ",", "order", "=", "1", ")", "\n", "target", "=", "nd", ".", "zoom", "(", "np_target", ",", "(", "1.0", ",", "1.0", "/", "factor", ",", "1.0", "/", "factor", ")", ",", "order", "=", "0", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "shape", "\n", "min_kept", "=", "self", ".", "min_kept", "//", "(", "factor", "*", "factor", ")", "#int(self.min_kept_ratio * n * h * w)", "\n", "\n", "input_label", "=", "target", ".", "ravel", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "input_prob", "=", "np", ".", "rollaxis", "(", "predict", ",", "1", ")", ".", "reshape", "(", "(", "c", ",", "-", "1", ")", ")", "\n", "\n", "valid_flag", "=", "input_label", "!=", "self", ".", "ignore_label", "\n", "valid_inds", "=", "np", ".", "where", "(", "valid_flag", ")", "[", "0", "]", "\n", "label", "=", "input_label", "[", "valid_flag", "]", "\n", "num_valid", "=", "valid_flag", ".", "sum", "(", ")", "\n", "if", "min_kept", ">=", "num_valid", ":", "\n", "            ", "threshold", "=", "1.0", "\n", "", "elif", "num_valid", ">", "0", ":", "\n", "            ", "prob", "=", "input_prob", "[", ":", ",", "valid_flag", "]", "\n", "pred", "=", "prob", "[", "label", ",", "np", ".", "arange", "(", "len", "(", "label", ")", ",", "dtype", "=", "np", ".", "int32", ")", "]", "\n", "threshold", "=", "self", ".", "thresh", "\n", "if", "min_kept", ">", "0", ":", "\n", "                ", "k_th", "=", "min", "(", "len", "(", "pred", ")", ",", "min_kept", ")", "-", "1", "\n", "new_array", "=", "np", ".", "partition", "(", "pred", ",", "k_th", ")", "\n", "new_threshold", "=", "new_array", "[", "k_th", "]", "\n", "if", "new_threshold", ">", "self", ".", "thresh", ":", "\n", "                    ", "threshold", "=", "new_threshold", "\n", "", "", "", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.loss.OhemCrossEntropy2d.generate_new_target": [[51, 79], ["predict.data.cpu().numpy", "target.data.cpu().numpy", "loss.OhemCrossEntropy2d.find_threshold", "target.data.cpu().numpy.ravel().astype", "numpy.rollaxis().reshape", "valid_flag.sum", "input_label[].copy", "target.data.cpu().numpy.ravel().astype.fill", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "numpy.where", "print", "target.get_device", "predict.data.cpu", "target.data.cpu", "target.data.cpu().numpy.ravel", "numpy.rollaxis", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "len", "numpy.arange", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "target.data.cpu().numpy.ravel().astype.reshape", "target.size"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.loss.OhemCrossEntropy2d.find_threshold"], ["", "def", "generate_new_target", "(", "self", ",", "predict", ",", "target", ")", ":", "\n", "        ", "np_predict", "=", "predict", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np_target", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "np_predict", ".", "shape", "\n", "\n", "threshold", "=", "self", ".", "find_threshold", "(", "np_predict", ",", "np_target", ")", "\n", "\n", "input_label", "=", "np_target", ".", "ravel", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "input_prob", "=", "np", ".", "rollaxis", "(", "np_predict", ",", "1", ")", ".", "reshape", "(", "(", "c", ",", "-", "1", ")", ")", "\n", "\n", "valid_flag", "=", "input_label", "!=", "self", ".", "ignore_label", "\n", "valid_inds", "=", "np", ".", "where", "(", "valid_flag", ")", "[", "0", "]", "\n", "label", "=", "input_label", "[", "valid_flag", "]", "\n", "num_valid", "=", "valid_flag", ".", "sum", "(", ")", "\n", "\n", "if", "num_valid", ">", "0", ":", "\n", "            ", "prob", "=", "input_prob", "[", ":", ",", "valid_flag", "]", "\n", "pred", "=", "prob", "[", "label", ",", "np", ".", "arange", "(", "len", "(", "label", ")", ",", "dtype", "=", "np", ".", "int32", ")", "]", "\n", "kept_flag", "=", "pred", "<=", "threshold", "\n", "valid_inds", "=", "valid_inds", "[", "kept_flag", "]", "\n", "print", "(", "'Labels: {} {}'", ".", "format", "(", "len", "(", "valid_inds", ")", ",", "threshold", ")", ")", "\n", "\n", "", "label", "=", "input_label", "[", "valid_inds", "]", ".", "copy", "(", ")", "\n", "input_label", ".", "fill", "(", "self", ".", "ignore_label", ")", "\n", "input_label", "[", "valid_inds", "]", "=", "label", "\n", "new_target", "=", "torch", ".", "from_numpy", "(", "input_label", ".", "reshape", "(", "target", ".", "size", "(", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", "target", ".", "get_device", "(", ")", ")", "\n", "\n", "return", "new_target", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.loss.OhemCrossEntropy2d.forward": [[81, 94], ["torch.softmax", "torch.softmax", "torch.softmax", "loss.OhemCrossEntropy2d.generate_new_target", "loss.OhemCrossEntropy2d.criterion"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.loss.OhemCrossEntropy2d.generate_new_target"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "\n", "input_prob", "=", "F", ".", "softmax", "(", "predict", ",", "1", ")", "\n", "target", "=", "self", ".", "generate_new_target", "(", "input_prob", ",", "target", ")", "\n", "return", "self", ".", "criterion", "(", "predict", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionDSN.__init__": [[15, 21], ["torch.Module.__init__", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "print"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", "=", "255", ",", "use_weight", "=", "True", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "CriterionDSN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_index", ",", "reduction", "=", "reduction", ")", "\n", "if", "not", "reduction", ":", "\n", "            ", "print", "(", "\"disabled the reduction.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionDSN.forward": [[22, 36], ["target.size", "target.size", "len", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "criterion.CriterionDSN.criterion", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "criterion.CriterionDSN.criterion", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "criterion.CriterionDSN.criterion"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "preds", ",", "target", ")", ":", "\n", "        ", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "\n", "if", "len", "(", "preds", ")", ">=", "2", ":", "\n", "            ", "scale_pred", "=", "F", ".", "interpolate", "(", "input", "=", "preds", "[", "0", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss1", "=", "self", ".", "criterion", "(", "scale_pred", ",", "target", ")", "\n", "\n", "scale_pred", "=", "F", ".", "interpolate", "(", "input", "=", "preds", "[", "1", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss2", "=", "self", ".", "criterion", "(", "scale_pred", ",", "target", ")", "\n", "return", "loss1", "+", "loss2", "*", "0.1", "\n", "", "else", ":", "\n", "            ", "scale_pred", "=", "F", ".", "interpolate", "(", "input", "=", "preds", "[", "0", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "scale_pred", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN2.__init__": [[41, 46], ["torch.Module.__init__", "loss.OhemCrossEntropy2d", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", "=", "255", ",", "thresh", "=", "0.7", ",", "min_kept", "=", "100000", ",", "use_weight", "=", "True", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "CriterionOhemDSN2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "criterion1", "=", "OhemCrossEntropy2d", "(", "ignore_index", ",", "thresh", ",", "min_kept", ")", "\n", "self", ".", "criterion2", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_index", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN2.forward": [[47, 57], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "criterion.CriterionOhemDSN2.criterion1", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "criterion.CriterionOhemDSN2.criterion2", "target.size", "target.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds", ",", "target", ")", ":", "\n", "        ", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "\n", "scale_pred", "=", "F", ".", "interpolate", "(", "input", "=", "preds", "[", "0", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss1", "=", "self", ".", "criterion1", "(", "scale_pred", ",", "target", ")", "\n", "\n", "scale_pred", "=", "F", ".", "interpolate", "(", "input", "=", "preds", "[", "1", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss2", "=", "self", ".", "criterion2", "(", "scale_pred", ",", "target", ")", "\n", "\n", "return", "loss1", "+", "loss2", "*", "0.4", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__": [[63, 67], ["torch.Module.__init__", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.__init__"], ["def", "__init__", "(", "self", ",", "ignore_index", "=", "255", ",", "thresh", "=", "0.7", ",", "min_kept", "=", "100000", ",", "use_weight", "=", "True", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "CriterionOhemDSN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_index", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.criterion.CriterionOhemDSN.forward": [[68, 85], ["target.size", "target.size", "len", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "criterion.CriterionOhemDSN.criterion", "lovasz_losses.lovasz_softmax", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "criterion.CriterionOhemDSN.criterion", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "criterion.CriterionOhemDSN.criterion", "lovasz_losses.lovasz_softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax"], "methods", ["home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_softmax", "home.repos.pwc.inspect_result.speedinghzl_AlignSeg.loss.lovasz_losses.lovasz_softmax"], ["", "def", "forward", "(", "self", ",", "preds", ",", "target", ")", ":", "\n", "        ", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "\n", "if", "len", "(", "preds", ")", ">=", "2", ":", "\n", "            ", "scale_pred", "=", "F", ".", "interpolate", "(", "input", "=", "preds", "[", "0", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss1", "=", "self", ".", "criterion", "(", "scale_pred", ",", "target", ")", "\n", "loss2", "=", "lovasz_softmax", "(", "F", ".", "softmax", "(", "scale_pred", ",", "dim", "=", "1", ")", ",", "target", ",", "ignore", "=", "self", ".", "ignore_index", ")", "\n", "\n", "scale_pred", "=", "F", ".", "interpolate", "(", "input", "=", "preds", "[", "1", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss3", "=", "self", ".", "criterion", "(", "scale_pred", ",", "target", ")", "\n", "return", "loss1", "+", "loss2", "*", "0.8", "+", "loss3", "*", "0.1", "\n", "", "else", ":", "\n", "            ", "scale_pred", "=", "F", ".", "interpolate", "(", "input", "=", "preds", "[", "0", "]", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "loss1", "=", "self", ".", "criterion", "(", "scale_pred", ",", "target", ")", "\n", "loss2", "=", "lovasz_softmax", "(", "F", ".", "softmax", "(", "scale_pred", ",", "dim", "=", "1", ")", ",", "target", ",", "ignore", "=", "self", ".", "ignore_index", ")", "\n", "\n", "return", "loss1", "+", "loss2", "*", "0.8", "\n", "", "", "", ""]]}