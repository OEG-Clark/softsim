{"home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.main": [[35, 45], ["print", "main.main_worker", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "print", "(", "args", ".", "config", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "", "main_worker", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.main_worker": [[50, 229], ["main.get_trainer", "main.get_model", "main.set_gpu", "main.get_optimizer", "main.get_dataset", "main.get_directories", "torch.utils.tensorboard.SummaryWriter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "time.time", "utils.net_utils.save_checkpoint", "range", "main.write_result_to_csv", "print", "main.pretrained", "main.load_codebook", "utils.schedulers.get_policy", "print", "print", "torch.BCELoss().cuda", "main.resume", "validate", "lr_policy", "modifier", "utils.net_utils.get_lr", "time.time", "train", "utils.logging.AverageMeter.update", "time.time", "validate", "utils.logging.AverageMeter.update", "max", "max", "max", "max", "utils.logging.AverageMeter.update", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.time", "main.export_codebook", "torch.CrossEntropyLoss().cuda", "utils.net_utils.LabelSmoothing", "set_gpu.state_dict", "get_optimizer.state_dict", "utils.net_utils.save_checkpoint", "set_gpu.named_modules", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.BCELoss", "print", "isinstance", "torch.CrossEntropyLoss", "time.time", "time.time", "set_gpu.state_dict", "get_optimizer.state_dict", "time.time", "range", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_trainer", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_model", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.set_gpu", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_optimizer", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_dataset", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_directories", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.save_checkpoint", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.write_result_to_csv", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.pretrained", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.load_codebook", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.get_policy", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.resume", "home.repos.pwc.inspect_result.RAIVNLab_LLC.trainers.default.validate", "home.repos.pwc.inspect_result.RAIVNLab_LLC.trainers.default.modifier", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.get_lr", "home.repos.pwc.inspect_result.RAIVNLab_LLC.trainers.default.train", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.trainers.default.validate", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.export_codebook", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.save_checkpoint"], ["", "def", "main_worker", "(", "args", ")", ":", "\n", "    ", "train", ",", "validate", ",", "modifier", "=", "get_trainer", "(", "args", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "# create model and optimizer", "\n", "", "model", "=", "get_model", "(", "args", ")", "\n", "model", "=", "set_gpu", "(", "args", ",", "model", ")", "\n", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "pretrained", "(", "args", ",", "model", ")", "\n", "\n", "", "if", "args", ".", "load_codebook", "or", "(", "args", ".", "instance_code", "and", "args", ".", "pretrained", ")", ":", "\n", "        ", "codebook", "=", "load_codebook", "(", "args", ",", "model", ")", "\n", "", "else", ":", "\n", "        ", "codebook", "=", "None", "\n", "\n", "", "optimizer", "=", "get_optimizer", "(", "args", ",", "model", ")", "\n", "data", "=", "get_dataset", "(", "args", ")", "\n", "lr_policy", "=", "get_policy", "(", "args", ".", "lr_policy", ")", "(", "optimizer", ",", "args", ")", "\n", "\n", "if", "not", "args", ".", "instance_code", ":", "\n", "        ", "print", "(", "\"Now training codebook\"", ")", "\n", "if", "args", ".", "label_smoothing", "is", "None", ":", "\n", "            ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "LabelSmoothing", "(", "smoothing", "=", "args", ".", "label_smoothing", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"Now training instance codes\"", ")", "\n", "criterion", "=", "nn", ".", "BCELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "best_acc1", "=", "0.0", "\n", "best_acc5", "=", "0.0", "\n", "best_train_acc1", "=", "0.0", "\n", "best_train_acc5", "=", "0.0", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "best_acc1", "=", "resume", "(", "args", ",", "model", ",", "optimizer", ")", "\n", "\n", "# Data loading code", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "acc1", ",", "acc5", "=", "validate", "(", "\n", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", "=", "None", ",", "epoch", "=", "args", ".", "start_epoch", ",", "codebook", "=", "codebook", "\n", ")", "\n", "\n", "return", "\n", "\n", "# Set up directories", "\n", "", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "=", "get_directories", "(", "args", ")", "\n", "args", ".", "ckpt_base_dir", "=", "ckpt_base_dir", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_base_dir", ")", "\n", "epoch_time", "=", "AverageMeter", "(", "\"epoch_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "validation_time", "=", "AverageMeter", "(", "\"validation_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "train_time", "=", "AverageMeter", "(", "\"train_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "progress_overall", "=", "ProgressMeter", "(", "\n", "1", ",", "[", "epoch_time", ",", "validation_time", ",", "train_time", "]", ",", "prefix", "=", "\"Overall Timing\"", "\n", ")", "\n", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "args", ".", "start_epoch", "=", "args", ".", "start_epoch", "or", "0", "\n", "acc1", "=", "0.", "\n", "acc5", "=", "0.", "\n", "\n", "# Save the initial state", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "0", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "\"Not evaluated\"", ",", "\n", "\"curr_acc5\"", ":", "\"Not evaluated\"", ",", "\n", "}", ",", "\n", "True", ",", "# this is technically the best model so far", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"initial.state\"", ",", "\n", "save", "=", "False", ",", "\n", ")", "\n", "\n", "# Start training", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "lr_policy", "(", "epoch", ",", "iteration", "=", "None", ")", "\n", "modifier", "(", "args", ",", "epoch", ",", "model", ")", "\n", "\n", "cur_lr", "=", "get_lr", "(", "optimizer", ")", "\n", "\n", "# train for one epoch", "\n", "start_train", "=", "time", ".", "time", "(", ")", "\n", "train_acc1", ",", "train_acc5", "=", "train", "(", "\n", "data", ".", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", "=", "writer", ",", "codebook", "=", "codebook", "\n", ")", "\n", "train_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_train", ")", "/", "60", ")", "\n", "\n", "# evaluate on validation set", "\n", "start_validation", "=", "time", ".", "time", "(", ")", "\n", "acc1", ",", "acc5", "=", "validate", "(", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ",", "codebook", "=", "codebook", ")", "\n", "validation_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_validation", ")", "/", "60", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "best_acc5", "=", "max", "(", "acc5", ",", "best_acc5", ")", "\n", "best_train_acc1", "=", "max", "(", "train_acc1", ",", "best_train_acc1", ")", "\n", "best_train_acc5", "=", "max", "(", "train_acc5", ",", "best_train_acc5", ")", "\n", "\n", "save", "=", "(", "(", "epoch", "%", "args", ".", "save_every", ")", "==", "0", ")", "and", "args", ".", "save_every", ">", "0", "\n", "if", "is_best", "or", "save", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "if", "is_best", ":", "\n", "                ", "print", "(", "f\"==> New best, saving at {ckpt_base_dir / 'model_best.pth'}\"", ")", "\n", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "acc1", ",", "\n", "\"curr_acc5\"", ":", "acc5", ",", "\n", "}", ",", "\n", "is_best", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"epoch_{epoch}.state\"", ",", "\n", "save", "=", "save", ",", "\n", ")", "\n", "\n", "", "epoch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end_epoch", ")", "/", "60", ")", "\n", "progress_overall", ".", "display", "(", "epoch", ")", "\n", "progress_overall", ".", "write_to_tensorboard", "(", "\n", "writer", ",", "prefix", "=", "\"diagnostics\"", ",", "global_step", "=", "epoch", "\n", ")", "\n", "\n", "if", "args", ".", "conv_type", "==", "\"SampleSubnetConv\"", ":", "\n", "            ", "count", "=", "0", "\n", "sum_pr", "=", "0.0", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "SampleSubnetConv", ")", ":", "\n", "# avg pr across 10 samples", "\n", "                    ", "pr", "=", "0.0", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                        ", "pr", "+=", "(", "\n", "(", "torch", ".", "rand_like", "(", "m", ".", "clamped_scores", ")", ">=", "m", ".", "clamped_scores", ")", "\n", ".", "float", "(", ")", "\n", ".", "mean", "(", ")", "\n", ".", "item", "(", ")", "\n", ")", "\n", "", "pr", "/=", "10.0", "\n", "writer", ".", "add_scalar", "(", "\"pr/{}\"", ".", "format", "(", "n", ")", ",", "pr", ",", "epoch", ")", "\n", "sum_pr", "+=", "pr", "\n", "count", "+=", "1", "\n", "\n", "", "", "args", ".", "prune_rate", "=", "sum_pr", "/", "count", "\n", "writer", ".", "add_scalar", "(", "\"pr/average\"", ",", "args", ".", "prune_rate", ",", "epoch", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "\"test/lr\"", ",", "cur_lr", ",", "epoch", ")", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "args", ".", "save_codebook", "and", "not", "args", ".", "instance_code", ":", "\n", "# take codebook off end of model and save as nn.Embedding", "\n", "        ", "export_codebook", "(", "args", ",", "model", ")", "\n", "\n", "", "write_result_to_csv", "(", "\n", "best_acc1", "=", "best_acc1", ",", "\n", "best_acc5", "=", "best_acc5", ",", "\n", "best_train_acc1", "=", "best_train_acc1", ",", "\n", "best_train_acc5", "=", "best_train_acc5", ",", "\n", "prune_rate", "=", "args", ".", "prune_rate", ",", "\n", "curr_acc1", "=", "acc1", ",", "\n", "curr_acc5", "=", "acc5", ",", "\n", "base_config", "=", "args", ".", "config", ",", "\n", "name", "=", "args", ".", "name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.load_codebook": [[233, 270], ["main.get_default_gpu", "print", "torch.Embedding.from_pretrained", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "nn.Embedding.from_pretrained.weight.size", "numpy.random.normal", "model.state_dict", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "model.load_state_dict", "[].cpu().numpy().reshape", "os.path.isfile", "args.args.load_codebook.endswith", "numpy.load().reshape", "print", "exit", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "[].cpu().numpy", "numpy.load", "[].cpu", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_default_gpu"], ["", "def", "load_codebook", "(", "args", ",", "model", ")", ":", "\n", "    ", "gpu", "=", "get_default_gpu", "(", "args", ")", "\n", "\n", "print", "(", "\"=> loading codebook from '{}'\"", ".", "format", "(", "args", ".", "load_codebook", ")", ")", "\n", "if", "args", ".", "load_codebook", ":", "\n", "        ", "if", "args", ".", "load_codebook", "==", "'random'", ":", "\n", "            ", "label_emb", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "(", "args", ".", "num_classes", ",", "args", ".", "num_bits", ")", ")", "\n", "", "else", ":", "\n", "# Assume codebook is npy file", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "load_codebook", ")", "and", "args", ".", "load_codebook", ".", "endswith", "(", "'.npy'", ")", ":", "\n", "                ", "label_emb", "=", "np", ".", "load", "(", "args", ".", "load_codebook", ")", ".", "reshape", "(", "args", ".", "num_classes", ",", "args", ".", "num_bits", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no codebook found at '{}'\"", ".", "format", "(", "args", ".", "codebook", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# Attach codebook to end of model", "\n", "", "", "if", "(", "(", "not", "args", ".", "instance_code", ")", "and", "(", "args", ".", "load_codebook", "!=", "'random'", ")", ")", ":", "\n", "            ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_state_dict", "[", "'module.fc.weight'", "]", "=", "torch", ".", "from_numpy", "(", "label_emb", ")", ".", "view", "(", "args", ".", "num_classes", ",", "args", ".", "num_bits", ",", "1", ",", "1", ")", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "\n", "", "", "elif", "args", ".", "pretrained", "and", "not", "args", ".", "instance_code", ":", "\n", "# Requires that trained model has codebook. This will not work if the model is an instance embedding funciton", "\n", "        ", "label_emb", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ")", "[", "'state_dict'", "]", "[", "'module.fc.weight'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "args", ".", "num_classes", ",", "args", ".", "num_bits", ")", "\n", "\n", "", "label_emb", "[", "label_emb", ">=", "0", "]", "=", "1", "\n", "label_emb", "[", "label_emb", "<", "0", "]", "=", "-", "1", "\n", "\n", "codebook", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "torch", ".", "FloatTensor", "(", "label_emb", ")", ".", "cuda", "(", "gpu", ")", ")", "\n", "\n", "\n", "# If codebook is None, then invalid combination of commands has been input", "\n", "assert", "codebook", "is", "not", "None", "\n", "assert", "codebook", ".", "weight", ".", "size", "(", ")", "==", "(", "args", ".", "num_classes", ",", "args", ".", "num_bits", ")", "\n", "\n", "return", "codebook", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.export_codebook": [[273, 279], ["print", "model.state_dict", "fc.cpu().numpy().reshape", "numpy.save", "fc.cpu().numpy", "fc.cpu", "args.args"], "function", ["None"], ["", "def", "export_codebook", "(", "args", ",", "model", ")", ":", "\n", "    ", "print", "(", "f\"=> Saving codebook to: {args.save_codebook}\"", ")", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "fc", "=", "state_dict", "[", "'module.fc.weight'", "]", "\n", "label_emb", "=", "fc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "args", ".", "num_classes", ",", "args", ".", "num_bits", ")", "\n", "np", ".", "save", "(", "args", ".", "save_codebook", ",", "label_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_trainer": [[281, 286], ["print", "importlib.import_module", "args.args"], "function", ["None"], ["", "def", "get_trainer", "(", "args", ")", ":", "\n", "    ", "print", "(", "f\"=> Using trainer from trainers.{args.trainer}\"", ")", "\n", "trainer", "=", "importlib", ".", "import_module", "(", "f\"trainers.{args.trainer}\"", ")", "\n", "\n", "return", "trainer", ".", "train", ",", "trainer", ".", "validate", ",", "trainer", ".", "modifier", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_default_gpu": [[288, 290], ["args.args"], "function", ["None"], ["", "def", "get_default_gpu", "(", "args", ")", ":", "\n", "    ", "return", "args", ".", "gpu", "or", "args", ".", "multigpu", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.set_gpu": [[292, 312], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "args.args"], "function", ["None"], ["", "def", "set_gpu", "(", "args", ",", "model", ")", ":", "\n", "    ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"CPU-only experiments currently unsupported\"", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "multigpu", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "print", "(", "f\"=> Parallelizing on {args.multigpu} gpus\"", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "multigpu", "[", "0", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "multigpu", "[", "0", "]", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "multigpu", ")", ".", "cuda", "(", "\n", "args", ".", "multigpu", "[", "0", "]", "\n", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.resume": [[314, 334], ["os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "print", "print", "print", "args.args"], "function", ["None"], ["", "def", "resume", "(", "args", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "print", "(", "f\"=> Loading checkpoint '{args.resume}'\"", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "f\"cuda:{args.multigpu[0]}\"", ")", "\n", "if", "args", ".", "start_epoch", "is", "None", ":", "\n", "            ", "print", "(", "f\"=> Setting new start epoch at {checkpoint['epoch']}\"", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "\n", "", "best_acc1", "=", "checkpoint", "[", "\"best_acc1\"", "]", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "print", "(", "f\"=> Loaded checkpoint '{args.resume}' (epoch {checkpoint['epoch']})\"", ")", "\n", "\n", "return", "best_acc1", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"=> No checkpoint found at '{args.resume}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.pretrained": [[336, 362], ["os.path.isfile", "model.named_modules", "print", "model.state_dict", "pretrained.items", "model.state_dict.update", "model.load_state_dict", "print", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "m.set_subnet", "print", "pretrained.items", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "v.size", "model_state_dict[].size", "v.size", "model_state_dict[].size", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.set_subnet"], ["", "", "def", "pretrained", "(", "args", ",", "model", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "        ", "print", "(", "\"=> loading pretrained weights from '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "pretrained", "=", "torch", ".", "load", "(", "\n", "args", ".", "pretrained", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "multigpu", "[", "0", "]", ")", ")", ",", "\n", ")", "[", "\"state_dict\"", "]", "\n", "\n", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_state_dict", "or", "v", ".", "size", "(", ")", "!=", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                ", "print", "(", "\"IGNORE:\"", ",", "k", ")", "\n", "", "", "pretrained", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", "\n", "if", "(", "k", "in", "model_state_dict", "and", "v", ".", "size", "(", ")", "==", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "}", "\n", "model_state_dict", ".", "update", "(", "pretrained", ")", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> no pretrained weights found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "FixedSubnetConv", ")", ":", "\n", "            ", "m", ".", "set_subnet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_dataset": [[364, 369], ["print", "getattr", "args.args"], "function", ["None"], ["", "", "", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "print", "(", "f\"=> Getting {args.set} dataset\"", ")", "\n", "dataset", "=", "getattr", "(", "data", ",", "args", ".", "set", ")", "(", "args", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_model": [[371, 397], ["print", "utils.net_utils.set_model_prune_rate", "print", "utils.net_utils.freeze_model_weights", "ValueError", "sum", "int", "model.named_parameters", "p.numel", "n.endswith", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.set_model_prune_rate", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.freeze_model_weights"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "first_layer_dense", ":", "\n", "        ", "args", ".", "first_layer_type", "=", "\"DenseConv\"", "\n", "\n", "", "print", "(", "\"=> Creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "# applying sparsity to the network", "\n", "if", "(", "\n", "args", ".", "conv_type", "!=", "\"DenseConv\"", "\n", "and", "args", ".", "conv_type", "!=", "\"SampleSubnetConv\"", "\n", "and", "args", ".", "conv_type", "!=", "\"ContinuousSparseConv\"", "\n", ")", ":", "\n", "        ", "if", "args", ".", "prune_rate", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Need to set a positive prune rate\"", ")", "\n", "\n", "", "set_model_prune_rate", "(", "model", ",", "prune_rate", "=", "args", ".", "prune_rate", ")", "\n", "print", "(", "\n", "f\"=> Rough estimate model params {sum(int(p.numel() * (1-args.prune_rate)) for n, p in model.named_parameters() if not n.endswith('scores'))}\"", "\n", ")", "\n", "\n", "# freezing the weights if we are only doing subnet training", "\n", "", "if", "args", ".", "freeze_weights", ":", "\n", "        ", "freeze_model_weights", "(", "model", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_optimizer": [[399, 430], ["model.named_parameters", "list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "print", "model.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "model.parameters", "args.args"], "function", ["None"], ["", "def", "get_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "for", "n", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "v", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"<DEBUG> gradient to\"", ",", "n", ")", "\n", "\n", "", "if", "not", "v", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"<DEBUG> no gradient to\"", ",", "n", ")", "\n", "\n", "", "", "if", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "        ", "parameters", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "bn_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "rest_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "not", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "[", "\n", "{", "\n", "\"params\"", ":", "bn_params", ",", "\n", "\"weight_decay\"", ":", "0", "if", "args", ".", "no_bn_decay", "else", "args", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\"params\"", ":", "rest_params", ",", "\"weight_decay\"", ":", "args", ".", "weight_decay", "}", ",", "\n", "]", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main._run_dir_exists": [[432, 437], ["log_base_dir.exists", "ckpt_base_dir.exists"], "function", ["None"], ["", "def", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "    ", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "return", "log_base_dir", ".", "exists", "(", ")", "or", "ckpt_base_dir", ".", "exists", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.get_directories": [[439, 471], ["main._run_dir_exists", "ValueError", "pathlib.Path", "pathlib.Path", "pathlib.Path", "main._run_dir_exists", "pathlib.Path.exists", "os.makedirs", "str", "str", "str", "str", "args.args"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main._run_dir_exists", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main._run_dir_exists"], ["", "def", "get_directories", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "config", "is", "None", "or", "args", ".", "name", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must have name and config\"", ")", "\n", "\n", "", "config", "=", "pathlib", ".", "Path", "(", "args", ".", "config", ")", ".", "stem", "\n", "if", "args", ".", "log_dir", "is", "None", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"runs/{config}/{args.name}/prune_rate={args.prune_rate}\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"{args.log_dir}/{config}/{args.name}/prune_rate={args.prune_rate}\"", "\n", ")", "\n", "", "if", "args", ".", "width_mult", "!=", "1.0", ":", "\n", "        ", "run_base_dir", "=", "run_base_dir", "/", "\"width_mult={}\"", ".", "format", "(", "str", "(", "args", ".", "width_mult", ")", ")", "\n", "\n", "", "if", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "        ", "rep_count", "=", "0", "\n", "while", "_run_dir_exists", "(", "run_base_dir", "/", "str", "(", "rep_count", ")", ")", ":", "\n", "            ", "rep_count", "+=", "1", "\n", "\n", "", "run_base_dir", "=", "run_base_dir", "/", "str", "(", "rep_count", ")", "\n", "\n", "", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "if", "not", "run_base_dir", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "run_base_dir", ")", "\n", "\n", "", "(", "run_base_dir", "/", "\"settings.txt\"", ")", ".", "write_text", "(", "str", "(", "args", ")", ")", "\n", "\n", "return", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.main.write_result_to_csv": [[473, 506], ["time.strftime", "pathlib.Path", "results.exists", "results.write_text", "open", "f.write"], "function", ["None"], ["", "def", "write_result_to_csv", "(", "**", "kwargs", ")", ":", "\n", "    ", "results", "=", "pathlib", ".", "Path", "(", "\"runs\"", ")", "/", "\"results.csv\"", "\n", "\n", "if", "not", "results", ".", "exists", "(", ")", ":", "\n", "        ", "results", ".", "write_text", "(", "\n", "\"Date Finished, \"", "\n", "\"Base Config, \"", "\n", "\"Name, \"", "\n", "\"Prune Rate, \"", "\n", "\"Current Val Top 1, \"", "\n", "\"Current Val Top 5, \"", "\n", "\"Best Val Top 1, \"", "\n", "\"Best Val Top 5, \"", "\n", "\"Best Train Top 1, \"", "\n", "\"Best Train Top 5\\n\"", "\n", ")", "\n", "\n", "", "now", "=", "time", ".", "strftime", "(", "\"%m-%d-%y_%H:%M:%S\"", ")", "\n", "\n", "with", "open", "(", "results", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\n", "(", "\n", "\"{now}, \"", "\n", "\"{base_config}, \"", "\n", "\"{name}, \"", "\n", "\"{prune_rate}, \"", "\n", "\"{curr_acc1:.02f}, \"", "\n", "\"{curr_acc5:.02f}, \"", "\n", "\"{best_acc1:.02f}, \"", "\n", "\"{best_acc5:.02f}, \"", "\n", "\"{best_train_acc1:.02f}, \"", "\n", "\"{best_train_acc5:.02f}\\n\"", "\n", ")", ".", "format", "(", "now", "=", "now", ",", "**", "kwargs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.args.parse_arguments": [[12, 258], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "copy.copy", "len", "args.get_config", "args.get_config", "print", "int", "x.split"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.None.args.get_config", "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.args.get_config"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch ImageNet Training\"", ")", "\n", "\n", "# General Config", "\n", "parser", ".", "add_argument", "(", "\n", "\"--instance-code\"", ",", "help", "=", "\"training instance code function. Otherwise, train codebook.\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--decode\"", ",", "help", "=", "\"specify which decoding scheme you want to classify with (mhd, ed)\"", ",", "\n", "type", "=", "str", ",", "default", "=", "\"mhd\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load-codebook\"", ",", "help", "=", "\"skip codebook training by loading the codebook \"", "\n", "\"from saved model (if path ends with .pth) or exported codebook\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "metavar", "=", "\"CODE_OR_MODEL_PATH\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained\"", ",", "\n", "dest", "=", "\"pretrained\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"use pre-trained model\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save-codebook\"", ",", "help", "=", "\"export trained codebook\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data\"", ",", "help", "=", "\"path to dataset base directory\"", ",", "default", "=", "\"/mnt/disk1/datasets\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "help", "=", "\"Which optimizer to use\"", ",", "default", "=", "\"sgd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "help", "=", "\"name of dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"ImageNet\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-a\"", ",", "\"--arch\"", ",", "metavar", "=", "\"ARCH\"", ",", "default", "=", "\"ResNet18\"", ",", "help", "=", "\"model architecture\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config\"", ",", "help", "=", "\"Config file to use (see configs dir)\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--instance-config\"", ",", "help", "=", "\"Config file to use for instance codes (see configs dir)\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-dir\"", ",", "help", "=", "\"Where to save the runs. If None use ./runs\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-j\"", ",", "\n", "\"--workers\"", ",", "\n", "default", "=", "20", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of data loading workers (default: 20)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "default", "=", "90", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of total epochs to run\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--start-epoch\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"manual epoch number (useful on restarts)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-b\"", ",", "\n", "\"--batch-size\"", ",", "\n", "default", "=", "256", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"mini-batch size (default: 256), this is the total \"", "\n", "\"batch size of all GPUs on the current node when \"", "\n", "\"using Data Parallel or Distributed Data Parallel\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "\n", "\"--learning-rate\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"LR\"", ",", "\n", "help", "=", "\"initial learning rate\"", ",", "\n", "dest", "=", "\"lr\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--warmup_length\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Number of warmup iterations\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--momentum\"", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "metavar", "=", "\"M\"", ",", "help", "=", "\"momentum\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wd\"", ",", "\n", "\"--weight-decay\"", ",", "\n", "default", "=", "1e-4", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"W\"", ",", "\n", "help", "=", "\"weight decay (default: 1e-4)\"", ",", "\n", "dest", "=", "\"weight_decay\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-p\"", ",", "\n", "\"--print-freq\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"print frequency (default: 10)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-bits\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", "help", "=", "\"path to latest checkpoint (default: none)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-e\"", ",", "\n", "\"--evaluate\"", ",", "\n", "dest", "=", "\"evaluate\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"evaluate model on validation set\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "\"seed for initializing training. \"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multigpu\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "lambda", "x", ":", "[", "int", "(", "a", ")", "for", "a", "in", "x", ".", "split", "(", "\",\"", ")", "]", ",", "\n", "help", "=", "\"Which GPUs to use for multigpu training\"", ",", "\n", ")", "\n", "\n", "# Learning Rate Policy Specific", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-policy\"", ",", "default", "=", "\"constant_lr\"", ",", "help", "=", "\"Policy for the learning rate.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multistep-lr-adjust\"", ",", "default", "=", "30", ",", "type", "=", "int", ",", "help", "=", "\"Interval to drop lr\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multistep-lr-gamma\"", ",", "default", "=", "0.1", ",", "type", "=", "int", ",", "help", "=", "\"Multistep multiplier\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--name\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"Experiment name to append to filepath\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save-every\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "\"Save every ___ epochs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prune-rate\"", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\"Amount of pruning to do during sparse training\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--low-data\"", ",", "default", "=", "1", ",", "help", "=", "\"Amount of data to use\"", ",", "type", "=", "float", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--width-mult\"", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"How much to vary the width of the network.\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nesterov\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to use nesterov for SGD\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--random-subnet\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to use a random subnet when fine tuning for lottery experiments\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--one-batch\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"One batch train set for debugging purposes (test overfitting)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--conv-type\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"What kind of sparsity to use\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--freeze-weights\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to train only subnet (this freezes weights)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"fan_in\"", ",", "help", "=", "\"Weight initialization mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nonlinearity\"", ",", "default", "=", "\"relu\"", ",", "help", "=", "\"Nonlinearity used by initialization\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn-type\"", ",", "default", "=", "None", ",", "help", "=", "\"BatchNorm type\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init\"", ",", "default", "=", "\"kaiming_normal\"", ",", "help", "=", "\"Weight initialization modifications\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-bn-decay\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"No batchnorm decay\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scale-fan\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"scale fan\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--first-layer-dense\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"First layer dense or sparse\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--last-layer-dense\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Last layer dense or sparse\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--label-smoothing\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Label smoothing to use, default 0.0\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--first-layer-type\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"Conv type of first layer\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trainer\"", ",", "type", "=", "str", ",", "default", "=", "\"default\"", ",", "help", "=", "\"cs, ss, or standard training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--score-init-constant\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Sample Baseline Subnet Init\"", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "instance_args", "=", "copy", ".", "copy", "(", "args", ")", "\n", "\n", "# Allow for use from notebook without config file", "\n", "if", "len", "(", "sys", ".", "argv", ")", ">", "1", ":", "\n", "        ", "if", "args", ".", "config", ":", "\n", "            ", "get_config", "(", "args", ",", "args", ".", "config", ")", "\n", "", "if", "args", ".", "instance_config", ":", "\n", "            ", "get_config", "(", "instance_args", ",", "args", ".", "instance_config", ")", "\n", "print", "(", "'hooooo'", ",", "instance_args", ".", "epochs", ")", "\n", "\n", "", "", "return", "args", ",", "instance_args", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.args.get_config": [[260, 274], ["configs.parser.argv_to_vars", "open().read", "yaml.load", "print", "args.__dict__.update", "getattr", "open"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.configs.parser.argv_to_vars", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update"], ["", "def", "get_config", "(", "args", ",", "config_file", ")", ":", "\n", "# get commands from command line", "\n", "    ", "override_args", "=", "_parser", ".", "argv_to_vars", "(", "sys", ".", "argv", ")", "\n", "\n", "# load yaml file", "\n", "yaml_txt", "=", "open", "(", "config_file", ")", ".", "read", "(", ")", "\n", "\n", "# override args", "\n", "loaded_yaml", "=", "yaml", ".", "load", "(", "yaml_txt", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "for", "v", "in", "override_args", ":", "\n", "        ", "loaded_yaml", "[", "v", "]", "=", "getattr", "(", "args", ",", "v", ")", "\n", "\n", "", "print", "(", "f\"=> Reading YAML config from {args.config}\"", ")", "\n", "args", ".", "__dict__", ".", "update", "(", "loaded_yaml", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.None.args.run_args": [[276, 283], ["args.parse_arguments"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.None.args.parse_arguments"], ["", "def", "run_args", "(", ")", ":", "\n", "    ", "global", "args", ",", "instance_args", "\n", "if", "args", "is", "None", ":", "\n", "        ", "args", ",", "instance_args", "=", "parse_arguments", "(", ")", "\n", "\n", "", "args", ".", "gpu", "=", "None", "\n", "instance_args", ".", "gpu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.get_policy": [[6, 17], ["None"], "function", ["None"], ["def", "get_policy", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "return", "constant_lr", "\n", "\n", "", "out_dict", "=", "{", "\n", "\"constant_lr\"", ":", "constant_lr", ",", "\n", "\"cosine_lr\"", ":", "cosine_lr", ",", "\n", "\"multistep_lr\"", ":", "multistep_lr", ",", "\n", "}", "\n", "\n", "return", "out_dict", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.assign_learning_rate": [[19, 22], ["None"], "function", ["None"], ["", "def", "assign_learning_rate", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.constant_lr": [[24, 36], ["schedulers.assign_learning_rate", "schedulers._warmup_lr"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers._warmup_lr"], ["", "", "def", "constant_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.cosine_lr": [[38, 52], ["schedulers.assign_learning_rate", "schedulers._warmup_lr", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers._warmup_lr"], ["", "def", "cosine_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "e", "=", "epoch", "-", "args", ".", "warmup_length", "\n", "es", "=", "args", ".", "epochs", "-", "args", ".", "warmup_length", "\n", "lr", "=", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "e", "/", "es", ")", ")", "*", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.multistep_lr": [[54, 65], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers.assign_learning_rate"], ["", "def", "multistep_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "args", ".", "lr_gamma", "**", "(", "epoch", "//", "args", ".", "lr_adjust", ")", ")", "\n", "\n", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.schedulers._warmup_lr": [[67, 69], ["None"], "function", ["None"], ["", "def", "_warmup_lr", "(", "base_lr", ",", "warmup_length", ",", "epoch", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.bn_type.NonAffineBatchNorm.__init__": [[7, 9], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "NonAffineBatchNorm", ",", "self", ")", ".", "__init__", "(", "dim", ",", "affine", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.__init__": [[8, 12], ["logging.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.display": [[13, 20], ["str", "print", "tqdm.tqdm.write", "logging.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ",", "tqdm_writer", "=", "True", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "if", "not", "tqdm_writer", ":", "\n", "            ", "print", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "", "else", ":", "\n", "            ", "tqdm", ".", "tqdm", ".", "write", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.write_to_tensorboard": [[21, 35], ["writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "", "def", "write_to_tensorboard", "(", "\n", "self", ",", "writer", ":", "SummaryWriter", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "None", "\n", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ":", "\n", "            ", "avg", "=", "meter", ".", "avg", "\n", "val", "=", "meter", ".", "val", "\n", "if", "meter", ".", "write_val", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\n", "f\"{prefix}/{meter.name}_val\"", ",", "val", ",", "global_step", "=", "global_step", "\n", ")", "\n", "\n", "", "if", "meter", ".", "write_avg", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\n", "f\"{prefix}/{meter.name}_avg\"", ",", "avg", ",", "global_step", "=", "global_step", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter._get_batch_fmtstr": [[37, 41], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "", "", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "\"{:\"", "+", "str", "(", "num_digits", ")", "+", "\"d}\"", "\n", "return", "\"[\"", "+", "fmt", "+", "\"/\"", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "\"]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.Meter.__init__": [[44, 47], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.Meter.reset": [[48, 51], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.Meter.update": [[52, 55], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.Meter.__str__": [[56, 59], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.AverageMeter.__init__": [[64, 71], ["logging.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ",", "write_val", "=", "True", ",", "write_avg", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "write_val", "=", "write_val", "\n", "self", ".", "write_avg", "=", "write_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.AverageMeter.reset": [[72, 77], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.AverageMeter.update": [[78, 83], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.AverageMeter.__str__": [[84, 87], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name} {val\"", "+", "self", ".", "fmt", "+", "\"} ({avg\"", "+", "self", ".", "fmt", "+", "\"})\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.__init__": [[90, 98], ["logging.AverageMeter", "logging.AverageMeter", "logging.VarianceMeter.reset"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ",", "write_val", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_ex_sq", "=", "AverageMeter", "(", "name", "=", "\"_subvariance_1\"", ",", "fmt", "=", "\":.02f\"", ")", "\n", "self", ".", "_sq_ex", "=", "AverageMeter", "(", "name", "=", "\"_subvariance_2\"", ",", "fmt", "=", "\":.02f\"", ")", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "write_val", "=", "False", "\n", "self", ".", "write_avg", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.val": [[99, 102], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ex_sq", ".", "val", "-", "self", ".", "_sq_ex", ".", "val", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.avg": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ex_sq", ".", "avg", "-", "self", ".", "_sq_ex", ".", "avg", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.reset": [[107, 110], ["logging.VarianceMeter._ex_sq.reset", "logging.VarianceMeter._sq_ex.reset"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.reset", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_ex_sq", ".", "reset", "(", ")", "\n", "self", ".", "_sq_ex", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update": [[111, 114], ["logging.VarianceMeter._ex_sq.update", "logging.VarianceMeter._sq_ex.update"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "_ex_sq", ".", "update", "(", "val", "**", "2", ",", "n", "=", "n", ")", "\n", "self", ".", "_sq_ex", ".", "update", "(", "val", ",", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.__str__": [[115, 118], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"{name} (var {avg\"", "+", "self", ".", "fmt", "+", "\"})\"", ")", ".", "format", "(", "\n", "name", "=", "self", ".", "name", ",", "avg", "=", "self", ".", "avg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.Timer.__init__": [[22, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "start", "=", "None", "\n", "self", ".", "end", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.Timer.__enter__": [[27, 30], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.Timer.__exit__": [[31, 36], ["time.time", "print"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time", "=", "self", ".", "end", "-", "self", ".", "start", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Elapsed time: %f ms.\"", "%", "self", ".", "time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.get_params": [[38, 41], ["numpy.sum", "numpy.prod", "list", "profiling..parameters", "w.size"], "function", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "    ", "\"\"\"get number of params in module\"\"\"", "\n", "return", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "list", "(", "w", ".", "size", "(", ")", ")", ")", "for", "w", "in", "self", ".", "parameters", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.run_forward": [[43, 49], ["int", "profiling.Timer", "range", "profiling..forward"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet.forward"], ["", "def", "run_forward", "(", "self", ",", "input", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "with", "Timer", "(", ")", "as", "t", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_forwards", ")", ":", "\n", "            ", "self", ".", "forward", "(", "*", "input", ")", "\n", "# torch.cuda.synchronize()", "\n", "", "", "return", "int", "(", "t", ".", "time", "*", "1e9", "/", "num_forwards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.conv_module_name_filter": [[51, 63], ["name.replace.replace"], "function", ["None"], ["", "def", "conv_module_name_filter", "(", "name", ")", ":", "\n", "    ", "\"\"\"filter module name to have a short view\"\"\"", "\n", "filters", "=", "{", "\n", "\"kernel_size\"", ":", "\"k\"", ",", "\n", "\"stride\"", ":", "\"s\"", ",", "\n", "\"padding\"", ":", "\"pad\"", ",", "\n", "\"bias\"", ":", "\"b\"", ",", "\n", "\"groups\"", ":", "\"g\"", ",", "\n", "}", "\n", "for", "k", "in", "filters", ":", "\n", "        ", "name", "=", "name", ".", "replace", "(", "k", ",", "filters", "[", "k", "]", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.module_profiling": [[65, 157], ["input[].size", "output.size", "type", "isinstance", "int", "int", "profiling.run_forward", "profiling.conv_module_name_filter", "isinstance", "print", "profiling..__repr__", "profiling.get_params", "profiling.run_forward", "profiling.conv_module_name_filter", "isinstance", "profiling.get_params", "profiling..__repr__", "profiling.get_params", "profiling.run_forward", "profiling..__repr__", "isinstance", "profiling.run_forward", "profiling..__repr__", "isinstance", "profiling.run_forward", "profiling..__repr__", "profiling..children", "profiling..name.ljust", "getattr", "getattr", "getattr", "print", "getattr", "type"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.run_forward", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.conv_module_name_filter", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.get_params", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.run_forward", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.conv_module_name_filter", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.get_params", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.get_params", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.run_forward", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.run_forward", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.run_forward"], ["", "def", "module_profiling", "(", "self", ",", "input", ",", "output", ",", "verbose", ")", ":", "\n", "    ", "ins", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "outs", "=", "output", ".", "size", "(", ")", "\n", "# NOTE: There are some difference between type and isinstance, thus please", "\n", "# be careful.", "\n", "t", "=", "type", "(", "self", ")", "\n", "if", "isinstance", "(", "self", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# this is the only modification, to multiply by 1-prune_rate", "\n", "        ", "p", "=", "1", "-", "self", ".", "prune_rate", "\n", "self", ".", "n_macs", "=", "int", "(", "\n", "p", "\n", "*", "(", "\n", "ins", "[", "1", "]", "\n", "*", "outs", "[", "1", "]", "\n", "*", "self", ".", "kernel_size", "[", "0", "]", "\n", "*", "self", ".", "kernel_size", "[", "1", "]", "\n", "*", "outs", "[", "2", "]", "\n", "*", "outs", "[", "3", "]", "\n", "//", "self", ".", "groups", "\n", ")", "\n", "*", "outs", "[", "0", "]", "\n", ")", "\n", "self", ".", "n_params", "=", "int", "(", "p", "*", "get_params", "(", "self", ")", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "conv_module_name_filter", "(", "self", ".", "__repr__", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "self", ".", "n_macs", "=", "(", "\n", "ins", "[", "1", "]", "\n", "*", "outs", "[", "1", "]", "\n", "*", "self", ".", "kernel_size", "[", "0", "]", "\n", "*", "self", ".", "kernel_size", "[", "1", "]", "\n", "*", "outs", "[", "2", "]", "\n", "*", "outs", "[", "3", "]", "\n", "//", "self", ".", "groups", "\n", ")", "*", "outs", "[", "0", "]", "\n", "self", ".", "n_params", "=", "get_params", "(", "self", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "conv_module_name_filter", "(", "self", ".", "__repr__", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "outs", "[", "1", "]", "*", "outs", "[", "0", "]", "\n", "self", ".", "n_params", "=", "get_params", "(", "self", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "# NOTE: this function is correct only when stride == kernel size", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "ins", "[", "2", "]", "*", "ins", "[", "3", "]", "*", "ins", "[", "0", "]", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "AdaptiveAvgPool2d", ")", ":", "\n", "# NOTE: this function is correct only when stride == kernel size", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "ins", "[", "2", "]", "*", "ins", "[", "3", "]", "*", "ins", "[", "0", "]", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "else", ":", "\n", "# This works only in depth-first travel of modules.", "\n", "        ", "self", ".", "n_macs", "=", "0", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "0", "\n", "num_children", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "self", ".", "n_macs", "+=", "getattr", "(", "m", ",", "\"n_macs\"", ",", "0", ")", "\n", "self", ".", "n_params", "+=", "getattr", "(", "m", ",", "\"n_params\"", ",", "0", ")", "\n", "self", ".", "n_seconds", "+=", "getattr", "(", "m", ",", "\"n_seconds\"", ",", "0", ")", "\n", "num_children", "+=", "1", "\n", "", "ignore_zeros_t", "=", "[", "\n", "nn", ".", "BatchNorm2d", ",", "\n", "nn", ".", "Dropout2d", ",", "\n", "nn", ".", "Dropout", ",", "\n", "nn", ".", "Sequential", ",", "\n", "nn", ".", "ReLU6", ",", "\n", "nn", ".", "ReLU", ",", "\n", "nn", ".", "MaxPool2d", ",", "\n", "nn", ".", "modules", ".", "padding", ".", "ZeroPad2d", ",", "\n", "nn", ".", "modules", ".", "activation", ".", "Sigmoid", ",", "\n", "]", "\n", "if", "(", "\n", "not", "getattr", "(", "self", ",", "\"ignore_model_profiling\"", ",", "False", ")", "\n", "and", "self", ".", "n_macs", "==", "0", "\n", "and", "t", "not", "in", "ignore_zeros_t", "\n", ")", ":", "\n", "            ", "print", "(", "\"WARNING: leaf module {} has zero n_macs.\"", ".", "format", "(", "type", "(", "self", ")", ")", ")", "\n", "", "return", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\n", "self", ".", "name", ".", "ljust", "(", "name_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "self", ".", "n_params", ")", ".", "rjust", "(", "params_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "self", ".", "n_macs", ")", ".", "rjust", "(", "macs_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "self", ".", "n_seconds", ")", ".", "rjust", "(", "seconds_space", ",", "\" \"", ")", "\n", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.add_profiling_hooks": [[159, 164], ["model_profiling_hooks.append", "m.register_forward_hook", "profiling.module_profiling"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.module_profiling"], ["", "def", "add_profiling_hooks", "(", "m", ",", "verbose", ")", ":", "\n", "    ", "global", "model_profiling_hooks", "\n", "model_profiling_hooks", ".", "append", "(", "\n", "m", ".", "register_forward_hook", "(", "\n", "lambda", "m", ",", "input", ",", "output", ":", "module_profiling", "(", "m", ",", "input", ",", "output", ",", "verbose", "=", "verbose", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.remove_profiling_hooks": [[168, 173], ["h.remove"], "function", ["None"], ["", "def", "remove_profiling_hooks", "(", ")", ":", "\n", "    ", "global", "model_profiling_hooks", "\n", "for", "h", "in", "model_profiling_hooks", ":", "\n", "        ", "h", ".", "remove", "(", ")", "\n", "", "model_profiling_hooks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.model_profiling": [[175, 225], ["model.to.eval", "torch.rand", "torch.rand", "torch.device", "torch.device", "model.to.to", "data.to.to", "model.to.apply", "print", "model.to.", "print", "profiling.remove_profiling_hooks", "print", "print", "profiling.add_profiling_hooks"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.remove_profiling_hooks", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.profiling.add_profiling_hooks"], ["", "def", "model_profiling", "(", "\n", "model", ",", "height", ",", "width", ",", "batch", "=", "1", ",", "channel", "=", "3", ",", "use_cuda", "=", "True", ",", "verbose", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\" Pytorch model profiling with input image size\n    (batch, channel, height, width).\n    The function exams the number of multiply-accumulates (n_macs).\n    Args:\n        model: pytorch model\n        height: int\n        width: int\n        batch: int\n        channel: int\n        use_cuda: bool\n    Returns:\n        macs: int\n        params: int\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "data", "=", "torch", ".", "rand", "(", "batch", ",", "channel", ",", "height", ",", "width", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "\n", "model", ".", "apply", "(", "lambda", "m", ":", "add_profiling_hooks", "(", "m", ",", "verbose", "=", "verbose", ")", ")", "\n", "\n", "print", "(", "\n", "\"Item\"", ".", "ljust", "(", "name_space", ",", "\" \"", ")", "\n", "+", "\"params\"", ".", "rjust", "(", "macs_space", ",", "\" \"", ")", "\n", "+", "\"macs\"", ".", "rjust", "(", "macs_space", ",", "\" \"", ")", "\n", "+", "\"nanosecs\"", ".", "rjust", "(", "seconds_space", ",", "\" \"", ")", "\n", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"\"", ".", "center", "(", "name_space", "+", "params_space", "+", "macs_space", "+", "seconds_space", ",", "\"-\"", ")", ")", "\n", "\n", "", "model", "(", "data", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"\"", ".", "center", "(", "name_space", "+", "params_space", "+", "macs_space", "+", "seconds_space", ",", "\"-\"", ")", ")", "\n", "\n", "", "print", "(", "\n", "\"Total\"", ".", "ljust", "(", "name_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "model", ".", "n_params", ")", ".", "rjust", "(", "params_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "model", ".", "n_macs", ")", ".", "rjust", "(", "macs_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "model", ".", "n_seconds", ")", ".", "rjust", "(", "seconds_space", ",", "\" \"", ")", "\n", ")", "\n", "\n", "remove_profiling_hooks", "(", ")", "\n", "\n", "return", "model", ".", "n_macs", ",", "model", ".", "n_params", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.LabelSmoothing.__init__": [[108, 117], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.LabelSmoothing.forward": [[118, 126], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.SubnetL1RegLoss.__init__": [[129, 131], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.SubnetL1RegLoss.forward": [[132, 139], ["model.named_parameters", "n.endswith"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "model", ",", "temperature", "=", "1.0", ")", ":", "\n", "        ", "l1_accum", "=", "0.0", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "n", ".", "endswith", "(", "\"scores\"", ")", ":", "\n", "                ", "l1_accum", "+=", "(", "p", "*", "temperature", ")", ".", "sigmoid", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "return", "l1_accum", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.save_checkpoint": [[11, 24], ["pathlib.Path", "torch.save", "torch.save", "pathlib.Path.parent.exists", "os.makedirs", "shutil.copyfile", "str", "os.remove"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "\"checkpoint.pth\"", ",", "save", "=", "False", ")", ":", "\n", "    ", "filename", "=", "pathlib", ".", "Path", "(", "filename", ")", "\n", "\n", "if", "not", "filename", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "filename", ".", "parent", ")", "\n", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "str", "(", "filename", ".", "parent", "/", "\"model_best.pth\"", ")", ")", "\n", "\n", "if", "not", "save", ":", "\n", "            ", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.get_lr": [[26, 28], ["None"], "function", ["None"], ["", "", "", "def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "return", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.freeze_model_weights": [[30, 48], ["print", "model.named_modules", "hasattr", "print", "print", "hasattr", "print", "print"], "function", ["None"], ["", "def", "freeze_model_weights", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"=> Freezing model weights\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "print", "(", "f\"==> No gradient to {n}.weight\"", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "m", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "                ", "print", "(", "f\"==> Setting gradient of {n}.weight to None\"", ")", "\n", "m", ".", "weight", ".", "grad", "=", "None", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "print", "(", "f\"==> No gradient to {n}.bias\"", ")", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "if", "m", ".", "bias", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "print", "(", "f\"==> Setting gradient of {n}.bias to None\"", ")", "\n", "m", ".", "bias", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.freeze_model_subnet": [[50, 60], ["print", "model.named_modules", "hasattr", "print", "print"], "function", ["None"], ["", "", "", "", "", "def", "freeze_model_subnet", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"=> Freezing model subnet\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"scores\"", ")", ":", "\n", "            ", "m", ".", "scores", ".", "requires_grad", "=", "False", "\n", "print", "(", "f\"==> No gradient to {n}.scores\"", ")", "\n", "if", "m", ".", "scores", ".", "grad", "is", "not", "None", ":", "\n", "                ", "print", "(", "f\"==> Setting gradient of {n}.scores to None\"", ")", "\n", "m", ".", "scores", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.unfreeze_model_weights": [[62, 72], ["print", "model.named_modules", "hasattr", "print", "hasattr", "print"], "function", ["None"], ["", "", "", "", "def", "unfreeze_model_weights", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"=> Unfreezing model weights\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "print", "(", "f\"==> Gradient to {n}.weight\"", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "True", "\n", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "print", "(", "f\"==> Gradient to {n}.bias\"", ")", "\n", "m", ".", "bias", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.unfreeze_model_subnet": [[74, 81], ["print", "model.named_modules", "hasattr", "print"], "function", ["None"], ["", "", "", "", "def", "unfreeze_model_subnet", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"=> Unfreezing model subnet\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"scores\"", ")", ":", "\n", "            ", "print", "(", "f\"==> Gradient to {n}.scores\"", ")", "\n", "m", ".", "scores", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.set_model_prune_rate": [[83, 90], ["print", "model.named_modules", "hasattr", "m.set_prune_rate", "print"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.set_prune_rate"], ["", "", "", "def", "set_model_prune_rate", "(", "model", ",", "prune_rate", ")", ":", "\n", "    ", "print", "(", "f\"==> Setting prune rate of network to {prune_rate}\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"set_prune_rate\"", ")", ":", "\n", "            ", "m", ".", "set_prune_rate", "(", "prune_rate", ")", "\n", "print", "(", "f\"==> Setting prune rate of {n} to {prune_rate}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.accumulate": [[92, 101], ["model.children", "f", "net_utils.accumulate"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.net_utils.accumulate"], ["", "", "", "def", "accumulate", "(", "model", ",", "f", ")", ":", "\n", "    ", "acc", "=", "0.0", "\n", "\n", "for", "child", "in", "model", ".", "children", "(", ")", ":", "\n", "        ", "acc", "+=", "accumulate", "(", "child", ",", "f", ")", "\n", "\n", "", "acc", "+=", "f", "(", "model", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "conv_layer", ",", "bn_layer", ",", "first_layer", "=", "None", ")", ":", "\n", "        ", "self", ".", "conv_layer", "=", "conv_layer", "\n", "self", ".", "bn_layer", "=", "bn_layer", "\n", "self", ".", "first_layer", "=", "first_layer", "or", "conv_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv": [[17, 60], ["builder.Builder._init_conv", "print", "conv_layer", "conv_layer", "conv_layer", "str", "conv_layer"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder._init_conv"], ["", "def", "conv", "(", "self", ",", "kernel_size", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "conv_layer", "=", "self", ".", "first_layer", "if", "first_layer", "else", "self", ".", "conv_layer", "\n", "\n", "if", "first_layer", ":", "\n", "            ", "print", "(", "f\"==> Building first layer with {str(self.first_layer)}\"", ")", "\n", "\n", "", "if", "kernel_size", "==", "3", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "1", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "\n", "", "elif", "kernel_size", "==", "5", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "7", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "_init_conv", "(", "conv", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv3x3": [[61, 65], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv"], ["", "def", "conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "3", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv1x1": [[66, 70], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv"], ["", "def", "conv1x1", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"1x1 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "1", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv7x7": [[71, 75], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv"], ["", "def", "conv7x7", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"7x7 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "7", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv5x5": [[76, 80], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv"], ["", "def", "conv5x5", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"5x5 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "5", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.batchnorm": [[81, 83], ["builder.Builder.bn_layer"], "methods", ["None"], ["", "def", "batchnorm", "(", "self", ",", "planes", ",", "last_bn", "=", "False", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "bn_layer", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.activation": [[84, 89], ["ValueError", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "activation", "(", "self", ")", ":", "\n", "        ", "if", "args", ".", "nonlinearity", "==", "\"relu\"", ":", "\n", "            ", "return", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{args.nonlinearity} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder._init_conv": [[90, 142], ["torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "conv.weight.data.sign", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv.weight.data.normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "math.sqrt", "conv.weight.data.sign", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "ValueError", "float", "math.sqrt"], "methods", ["None"], ["", "", "def", "_init_conv", "(", "self", ",", "conv", ")", ":", "\n", "        ", "if", "args", ".", "init", "==", "\"signed_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"unsigned_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "torch", ".", "ones_like", "(", "conv", ".", "weight", ".", "data", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"kaiming_normal\"", ":", "\n", "\n", "            ", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "conv", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "args", ".", "mode", ",", "nonlinearity", "=", "args", ".", "nonlinearity", "\n", ")", "\n", "\n", "", "", "elif", "args", ".", "init", "==", "\"kaiming_uniform\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "args", ".", "mode", ",", "nonlinearity", "=", "args", ".", "nonlinearity", "\n", ")", "\n", "", "elif", "args", ".", "init", "==", "\"xavier_normal\"", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "conv", ".", "weight", ")", "\n", "", "elif", "args", ".", "init", "==", "\"xavier_constant\"", ":", "\n", "\n", "            ", "fan_in", ",", "fan_out", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "conv", ".", "weight", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"standard\"", ":", "\n", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{args.init} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.get_builder": [[144, 161], ["print", "print", "getattr", "getattr", "builder.Builder", "getattr", "print"], "function", ["None"], ["", "", "", "def", "get_builder", "(", ")", ":", "\n", "\n", "    ", "print", "(", "\"==> Conv Type: {}\"", ".", "format", "(", "args", ".", "conv_type", ")", ")", "\n", "print", "(", "\"==> BN Type: {}\"", ".", "format", "(", "args", ".", "bn_type", ")", ")", "\n", "\n", "conv_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "conv_type", ")", "\n", "bn_layer", "=", "getattr", "(", "utils", ".", "bn_type", ",", "args", ".", "bn_type", ")", "\n", "\n", "if", "args", ".", "first_layer_type", "is", "not", "None", ":", "\n", "        ", "first_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "first_layer_type", ")", "\n", "print", "(", "f\"==> First Layer Type: {args.first_layer_type}\"", ")", "\n", "", "else", ":", "\n", "        ", "first_layer", "=", "None", "\n", "\n", "", "builder", "=", "Builder", "(", "conv_layer", "=", "conv_layer", ",", "bn_layer", "=", "bn_layer", ",", "first_layer", "=", "first_layer", ")", "\n", "\n", "return", "builder", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.get_xnor_builder": [[162, 170], ["getattr", "getattr", "builder.Builder"], "function", ["None"], ["", "def", "get_xnor_builder", "(", ")", ":", "\n", "\n", "    ", "conv_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "'XnorConv'", ")", "\n", "bn_layer", "=", "getattr", "(", "utils", ".", "bn_type", ",", "args", ".", "bn_type", ")", "\n", "\n", "builder", "=", "Builder", "(", "conv_layer", "=", "conv_layer", ",", "bn_layer", "=", "bn_layer", ",", "first_layer", "=", "None", ")", "\n", "\n", "return", "builder", "", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.GetSubnet.forward": [[15, 28], ["scores.clone", "scores.flatten().sort", "int", "scores.clone.flatten", "scores.flatten", "scores.numel"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ",", "k", ")", ":", "\n", "# Get the subnetwork by sorting the scores and using the top k%", "\n", "        ", "out", "=", "scores", ".", "clone", "(", ")", "\n", "_", ",", "idx", "=", "scores", ".", "flatten", "(", ")", ".", "sort", "(", ")", "\n", "j", "=", "int", "(", "(", "1", "-", "k", ")", "*", "scores", ".", "numel", "(", ")", ")", "\n", "\n", "# flat_out and out access the same memory.", "\n", "flat_out", "=", "out", ".", "flatten", "(", ")", "\n", "flat_out", "[", "idx", "[", ":", "j", "]", "]", "=", "0", "\n", "flat_out", "[", "idx", "[", "j", ":", "]", "]", "=", "1", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.GetSubnet.backward": [[29, 33], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "g", ")", ":", "\n", "# send the gradient g straight-through on the backward pass.", "\n", "        ", "return", "g", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.SubnetConv.__init__": [[37, 42], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "conv_type.SubnetConv.weight.size", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "scores", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.SubnetConv.set_prune_rate": [[43, 45], ["None"], "methods", ["None"], ["", "def", "set_prune_rate", "(", "self", ",", "prune_rate", ")", ":", "\n", "        ", "self", ".", "prune_rate", "=", "prune_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.SubnetConv.clamped_scores": [[46, 49], ["conv_type.SubnetConv.scores.abs"], "methods", ["None"], ["", "@", "property", "\n", "def", "clamped_scores", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "scores", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.SubnetConv.forward": [[50, 57], ["GetSubnet.apply", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "subnet", "=", "GetSubnet", ".", "apply", "(", "self", ".", "clamped_scores", ",", "self", ".", "prune_rate", ")", "\n", "w", "=", "self", ".", "weight", "*", "subnet", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.BinarizeWeight.forward": [[59, 67], ["scores.clone"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ")", ":", "\n", "# Get the subnetwork by sorting the scores and using the top k%", "\n", "        ", "out", "=", "scores", ".", "clone", "(", ")", "\n", "# flat_out and out access the same memory.", "\n", "out", "[", "out", "<=", "0", "]", "=", "-", "1.0", "\n", "out", "[", "out", ">=", "0", "]", "=", "1.0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.BinarizeWeight.backward": [[68, 72], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "g", ")", ":", "\n", "# send the gradient g straight-through on the backward pass.", "\n", "        ", "return", "g", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.BinarizeActivations.__init__": [[74, 76], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.BinarizeActivations.forward": [[77, 79], ["BinarizeWeight.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "BinarizeWeight", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.XnorConv.__init__": [[81, 83], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.XnorConv.get_weight": [[84, 87], ["BinarizeWeight.apply"], "methods", ["None"], ["", "def", "get_weight", "(", "self", ")", ":", "\n", "        ", "subnet", "=", "BinarizeWeight", ".", "apply", "(", "self", ".", "weight", ")", "\n", "return", "subnet", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.XnorConv.forward": [[88, 94], ["conv_type.XnorConv.get_weight", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.XnorConv.get_weight"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "get_weight", "(", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.StraightThroughBinomialSample.forward": [[101, 105], ["torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ")", ":", "\n", "        ", "output", "=", "(", "torch", ".", "rand_like", "(", "scores", ")", "<", "scores", ")", ".", "float", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.StraightThroughBinomialSample.backward": [[106, 109], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "return", "grad_outputs", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.BinomialSample.forward": [[112, 118], ["ctx.save_for_backward", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ")", ":", "\n", "        ", "output", "=", "(", "torch", ".", "rand_like", "(", "scores", ")", "<", "scores", ")", ".", "float", "(", ")", "\n", "ctx", ".", "save_for_backward", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.BinomialSample.backward": [[119, 127], ["grad_outputs.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "subnet", ",", "=", "ctx", ".", "saved_variables", "\n", "\n", "grad_inputs", "=", "grad_outputs", ".", "clone", "(", ")", "\n", "grad_inputs", "[", "subnet", "==", "0.0", "]", "=", "0.0", "\n", "\n", "return", "grad_inputs", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.SampleSubnetConv.__init__": [[131, 141], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "conv_type.SampleSubnetConv.weight.size", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "if", "parser_args", ".", "score_init_constant", "is", "not", "None", ":", "\n", "            ", "self", ".", "scores", ".", "data", "=", "(", "\n", "torch", ".", "ones_like", "(", "self", ".", "scores", ")", "*", "parser_args", ".", "score_init_constant", "\n", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "scores", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.SampleSubnetConv.clamped_scores": [[142, 145], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "clamped_scores", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "sigmoid", "(", "self", ".", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.SampleSubnetConv.forward": [[146, 154], ["StraightThroughBinomialSample.apply", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "subnet", "=", "StraightThroughBinomialSample", ".", "apply", "(", "self", ".", "clamped_scores", ")", "\n", "w", "=", "self", ".", "weight", "*", "subnet", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.__init__": [[162, 167], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "conv_type.FixedSubnetConv.weight.size", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "scores", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.set_prune_rate": [[168, 171], ["print"], "methods", ["None"], ["", "def", "set_prune_rate", "(", "self", ",", "prune_rate", ")", ":", "\n", "        ", "self", ".", "prune_rate", "=", "prune_rate", "\n", "print", "(", "\"prune_rate_{}\"", ".", "format", "(", "self", ".", "prune_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.set_subnet": [[172, 181], ["conv_type.FixedSubnetConv.clamped_scores().clone", "conv_type.FixedSubnetConv.clamped_scores().flatten().abs().sort", "int", "conv_type.FixedSubnetConv.flatten", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "conv_type.FixedSubnetConv.clamped_scores", "conv_type.FixedSubnetConv.clamped_scores().flatten().abs", "conv_type.FixedSubnetConv.clamped_scores().numel", "conv_type.FixedSubnetConv.clamped_scores().flatten", "conv_type.FixedSubnetConv.clamped_scores", "conv_type.FixedSubnetConv.clamped_scores"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.clamped_scores", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.clamped_scores", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.clamped_scores"], ["", "def", "set_subnet", "(", "self", ")", ":", "\n", "        ", "output", "=", "self", ".", "clamped_scores", "(", ")", ".", "clone", "(", ")", "\n", "_", ",", "idx", "=", "self", ".", "clamped_scores", "(", ")", ".", "flatten", "(", ")", ".", "abs", "(", ")", ".", "sort", "(", ")", "\n", "p", "=", "int", "(", "self", ".", "prune_rate", "*", "self", ".", "clamped_scores", "(", ")", ".", "numel", "(", ")", ")", "\n", "flat_oup", "=", "output", ".", "flatten", "(", ")", "\n", "flat_oup", "[", "idx", "[", ":", "p", "]", "]", "=", "0", "\n", "flat_oup", "[", "idx", "[", "p", ":", "]", "]", "=", "1", "\n", "self", ".", "scores", "=", "torch", ".", "nn", ".", "Parameter", "(", "output", ")", "\n", "self", ".", "scores", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.clamped_scores": [[182, 184], ["conv_type.FixedSubnetConv.scores.abs"], "methods", ["None"], ["", "def", "clamped_scores", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "scores", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.get_subnet": [[185, 187], ["None"], "methods", ["None"], ["", "def", "get_subnet", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weight", "*", "self", ".", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.forward": [[188, 194], ["conv_type.FixedSubnetConv.get_subnet", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.FixedSubnetConv.get_subnet"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "get_subnet", "(", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.eval_utils.accuracy": [[6, 69], ["torch.no_grad", "torch.no_grad", "max", "target.size", "m.topk", "output.clone().detach.t", "output.clone().detach.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "max", "target.size", "m.topk", "output.clone().detach.t", "output.clone().detach.eq", "correct[].reshape().float().sum.mul_().item", "utils.conv_type.BinarizeWeight.apply", "torch.transpose", "torch.transpose", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "torch.Sigmoid", "nn.Sigmoid.", "target.size", "m.clone().detach", "torch.abs().sum", "torch.abs().sum", "target.view", "correct[].reshape().float", "correct[].reshape().float().sum.mul_().item", "torch.abs().sum.numel", "torch.abs().sum.nonzero().size", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "codebook().cuda", "m.clone", "torch.abs", "torch.abs", "correct[].reshape", "correct[].reshape().float().sum.mul_", "torch.abs().sum.nonzero", "correct[].reshape", "codebook"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "args", ",", "codebook", "=", "None", ",", "topk", "=", "(", "1", ",", "5", ")", ")", ":", "\n", "    ", "\"\"\"\n    Computes the accuracy of the output relative to a decoding scheme. Currently supports exact\n    exact decoding and minimum hamming distance decoding schemes.\n    \"\"\"", "\n", "\n", "scheme", "=", "'mhd'", "\n", "if", "args", ".", "decode", ":", "\n", "        ", "scheme", "=", "args", ".", "decode", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "if", "not", "args", ".", "instance_code", ":", "\n", "# Output is num_classes-dim vector with scores representing the confidence", "\n", "# that the model has in that class", "\n", "            ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "                ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", ".", "item", "(", ")", ")", "\n", "", "return", "res", "\n", "\n", "# Returns the accuracy based on the Hamming distance between the output and target", "\n", "", "elif", "scheme", "==", "'mhd'", ":", "\n", "# Output starts as k-bit multilabel vectors. Compare with codebook to find closest", "\n", "# class codes. Resulting output is 'closest' num_classes-dim vector from the codebook", "\n", "            ", "output", "=", "BinarizeWeight", ".", "apply", "(", "output", ")", "@", "torch", ".", "transpose", "(", "codebook", ".", "weight", ",", "0", ",", "1", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "# Returns indices of classes with lowest hamming distance (ie. max dot product)", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "                ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", ".", "item", "(", ")", ")", "\n", "", "return", "res", "\n", "\n", "# Returns the accuracy measured in terms of how many output codes", "\n", "# exactly match the target codes", "\n", "", "elif", "scheme", "==", "'ed'", ":", "\n", "# Make the target label a code rather than a class", "\n", "            ", "target", "=", "(", "codebook", "(", "target", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "+", "1", ")", "/", "2", "\n", "m", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "output", "=", "m", "(", "output", ")", "\n", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "pred", "=", "output", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "pred", "[", "pred", ">=", "0.5", "]", "=", "1", "\n", "pred", "[", "pred", "<", "0.5", "]", "=", "0", "\n", "diff", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", ".", "sum", "(", "1", ")", "\n", "correct", "=", "diff", ".", "numel", "(", ")", "-", "diff", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "                ", "res", ".", "append", "(", "correct", "*", "100.0", "/", "batch_size", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.trainers.default.train": [[15, 79], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.train", "len", "time.time", "tqdm.tqdm", "len", "enumerate", "utils.logging.AverageMeter.update", "target.cuda.cuda", "model", "utils.logging.AverageMeter.update", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.logging.AverageMeter.update", "time.time", "len", "images.cuda.cuda", "criterion", "torch.Sigmoid", "criterion", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "time.time", "nn.Sigmoid.", "target_code.detach", "time.time", "codebook().cuda", "codebook"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.trainers.default.train", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.conv_type.BinomialSample.backward", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.write_to_tensorboard"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", ",", "codebook", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "f\"Epoch: [{epoch}]\"", ",", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_size", "=", "train_loader", ".", "batch_size", "\n", "num_batches", "=", "len", "(", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "train_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "train_loader", ")", "\n", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "# if codebook learning,     output is binary labels (1000 dim)", "\n", "# else                      output is scores (k dims) representing confidence in kth label", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "# compute loss", "\n", "if", "not", "args", ".", "instance_code", ":", "\n", "            ", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "else", ":", "\n", "            ", "sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "target_code", "=", "(", "codebook", "(", "target", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "+", "1", ")", "/", "2", "\n", "loss", "=", "criterion", "(", "sig", "(", "output", ")", ",", "target_code", ".", "detach", "(", ")", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "# measure accuracy", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "args", ",", "codebook", "=", "codebook", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "t", "=", "(", "num_batches", "*", "epoch", "+", "i", ")", "*", "batch_size", "\n", "progress", ".", "display", "(", "i", ")", "\n", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "t", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.trainers.default.validate": [[81, 135], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "time.time", "tqdm.tqdm", "utils.logging.ProgressMeter.display", "enumerate", "target.cuda.cuda", "model", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "time.time", "len", "utils.logging.ProgressMeter.write_to_tensorboard", "len", "images.cuda.cuda", "images.cuda.size", "images.cuda.size", "criterion", "torch.Sigmoid", "criterion", "criterion.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "nn.Sigmoid.", "target_code.detach", "time.time", "codebook().cuda", "codebook"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.logging.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ",", "codebook", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ",", "write_val", "=", "False", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ",", "write_val", "=", "False", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "prefix", "=", "\"Test: \"", "\n", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "val_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "val_loader", ")", "\n", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "# measure accuracy", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "args", ",", "codebook", "=", "codebook", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute loss", "\n", "if", "not", "args", ".", "instance_code", ":", "\n", "                ", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "else", ":", "\n", "                ", "sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "target_code", "=", "(", "codebook", "(", "target", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "+", "1", ")", "/", "2", "\n", "loss", "=", "criterion", "(", "sig", "(", "output", ")", ",", "target_code", ".", "detach", "(", ")", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "progress", ".", "display", "(", "len", "(", "val_loader", ")", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"test\"", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.trainers.default.modifier": [[136, 138], ["None"], "function", ["None"], ["", "def", "modifier", "(", "args", ",", "epoch", ",", "model", ")", ":", "\n", "    ", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.BasicBlock.__init__": [[11, 23], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.activation", "builder.conv3x3", "builder.batchnorm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_width", "/", "64", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Base width >64 does not work for BasicBlock\"", ")", "\n", "\n", "", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.BasicBlock.forward": [[24, 45], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.bn2", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.Bottleneck.__init__": [[54, 66], ["torch.Module.__init__", "int", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "builder.activation"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.activation"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "base_width", "/", "64", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "width", ",", "width", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.Bottleneck.forward": [[67, 89], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet.__init__": [[95, 138], ["torch.Module.__init__", "resnet.ResNet.builder.batchnorm", "resnet.ResNet.builder.activation", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "resnet.ResNet.builder.conv7x7", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet.builder.conv1x1", "resnet.ResNet.xnor_builder.conv1x1", "resnet.ResNet.builder.conv1x1", "resnet.ResNet.xnor_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "builder", "=", "builder", "[", "0", "]", "\n", "self", ".", "xnor_builder", "=", "builder", "[", "1", "]", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "self", ".", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "bn1", "=", "self", ".", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "self", ".", "builder", ".", "activation", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "self", ".", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "self", ".", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "self", ".", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "self", ".", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "not", "args", ".", "instance_code", ":", "\n", "# self.fc is the codebook", "\n", "# self.fc_lr is the projection into num_bits dimensions", "\n", "            ", "if", "args", ".", "last_layer_dense", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "if", "args", ".", "num_bits", "is", "None", ":", "\n", "                    ", "self", ".", "fc", "=", "self", ".", "xnor_builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "fc_lr", "=", "self", ".", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_bits", ")", "\n", "self", ".", "fc", "=", "self", ".", "xnor_builder", ".", "conv1x1", "(", "args", ".", "num_bits", ",", "args", ".", "num_classes", ")", "\n", "", "", "", "else", ":", "\n", "# self.fc_lr is the projection", "\n", "            ", "if", "args", ".", "last_layer_dense", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_bits", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc_lr", "=", "self", ".", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet._make_layer": [[139, 158], ["layers.append", "range", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.Builder.batchnorm"], ["", "", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet.forward": [[159, 187], ["resnet.ResNet.conv1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.bn1", "resnet.ResNet.fc_lr", "resnet.ResNet.size", "resnet.ResNet.fc", "resnet.ResNet.fc_lr", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "if", "not", "args", ".", "instance_code", ":", "\n", "            ", "if", "args", ".", "num_bits", "is", "None", ":", "\n", "                ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "fc_lr", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "fc_lr", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.models.resnet.ResNet50": [[190, 192], ["resnet.ResNet", "utils.builder.get_builder", "utils.builder.get_xnor_builder"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.get_builder", "home.repos.pwc.inspect_result.RAIVNLab_LLC.utils.builder.get_xnor_builder"], ["", "", "def", "ResNet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "[", "get_builder", "(", ")", ",", "get_xnor_builder", "(", ")", "]", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__": [[11, 60], ["super().__init__", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.data.imagenet.ImageNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"imagenet\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"train\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"val\"", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "valdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.data.utils.one_batch_dataset": [[5, 23], ["print", "torch.randperm", "_OneBatchWrapper", "len", "len", "idx.item"], "function", ["None"], ["def", "one_batch_dataset", "(", "dataset", ",", "batch_size", ")", ":", "\n", "    ", "print", "(", "\"==> Grabbing a single batch\"", ")", "\n", "\n", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "one_batch", "=", "[", "dataset", "[", "idx", ".", "item", "(", ")", "]", "for", "idx", "in", "perm", "[", ":", "batch_size", "]", "]", "\n", "\n", "class", "_OneBatchWrapper", "(", "Dataset", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "batch", "=", "one_batch", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "            ", "return", "self", ".", "batch", "[", "index", "]", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "batch", ")", "\n", "\n", "", "", "return", "_OneBatchWrapper", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.configs.parser.trim_preceding_hyphens": [[4, 10], ["None"], "function", ["None"], ["def", "trim_preceding_hyphens", "(", "st", ")", ":", "\n", "    ", "i", "=", "0", "\n", "while", "st", "[", "i", "]", "==", "\"-\"", ":", "\n", "        ", "i", "+=", "1", "\n", "\n", "", "return", "st", "[", "i", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.configs.parser.arg_to_varname": [[12, 17], ["parser.trim_preceding_hyphens", "st.replace.replace", "st.replace.split"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.configs.parser.trim_preceding_hyphens"], ["", "def", "arg_to_varname", "(", "st", ":", "str", ")", ":", "\n", "    ", "st", "=", "trim_preceding_hyphens", "(", "st", ")", "\n", "st", "=", "st", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n", "\n", "return", "st", ".", "split", "(", "\"=\"", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.configs.parser.argv_to_vars": [[19, 26], ["arg.startswith", "var_names.append", "parser.arg_to_varname", "parser.arg_to_varname"], "function", ["home.repos.pwc.inspect_result.RAIVNLab_LLC.configs.parser.arg_to_varname", "home.repos.pwc.inspect_result.RAIVNLab_LLC.configs.parser.arg_to_varname"], ["", "def", "argv_to_vars", "(", "argv", ")", ":", "\n", "    ", "var_names", "=", "[", "]", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "if", "arg", ".", "startswith", "(", "\"-\"", ")", "and", "arg_to_varname", "(", "arg", ")", "!=", "\"config\"", ":", "\n", "            ", "var_names", ".", "append", "(", "arg_to_varname", "(", "arg", ")", ")", "\n", "\n", "", "", "return", "var_names", "\n", "\n"]], "home.repos.pwc.inspect_result.RAIVNLab_LLC.configs.parser.produce_override_string": [[28, 41], ["getattr", "lines.append", "type", "lines.append", "lines.append", "str", "str", "str"], "function", ["None"], ["", "def", "produce_override_string", "(", "args", ",", "override_args", ")", ":", "\n", "    ", "lines", "=", "[", "]", "\n", "for", "v", "in", "override_args", ":", "\n", "        ", "if", "v", "!=", "\"multigpu\"", ":", "\n", "            ", "v_arg", "=", "getattr", "(", "args", ",", "v", ")", "\n", "if", "type", "(", "v_arg", ")", "in", "USABLE_TYPES", ":", "\n", "                ", "lines", ".", "append", "(", "v", "+", "\": \"", "+", "str", "(", "v_arg", ")", ")", "\n", "", "else", ":", "\n", "                ", "lines", ".", "append", "(", "v", "+", "\": \"", "+", "f'\"{str(v_arg)}\"'", ")", "\n", "", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "\"multigpu: \"", "+", "str", "(", "args", ".", "multigpu", ")", ")", "\n", "\n", "", "", "return", "\"\\n# ===== Overrided ===== #\\n\"", "+", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "", ""]]}