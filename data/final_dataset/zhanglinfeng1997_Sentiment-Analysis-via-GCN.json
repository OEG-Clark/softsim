{"home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_fine_grained_classification.LSTM_GCN.__init__": [[100, 117], ["torch.nn.Module.__init__", "torch.nn.Embedding().cuda", "torch.nn.Embedding().cuda", "torch.nn.Embedding().cuda", "torch.nn.Embedding().cuda", "torch.nn.LSTM().cuda", "torch.nn.LSTM().cuda", "torch.nn.LSTM().cuda", "torch.nn.LSTM().cuda", "torch.nn.BatchNorm1d().cuda", "torch.nn.BatchNorm1d().cuda", "torch.nn.BatchNorm1d().cuda", "torch.nn.BatchNorm1d().cuda", "layers.GraphConvolution", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.LSTM_GCN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LSTM_GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "76215", ",", "300", ")", ".", "cuda", "(", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "300", ",", "# dim of word vector", "\n", "hidden_size", "=", "180", ",", "# dim of output of lstm nn`", "\n", "num_layers", "=", "2", ",", "# num of hidden layers", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.5", ",", "\n", "bidirectional", "=", "True", "\n", ")", ".", "cuda", "(", ")", "\n", "self", ".", "batch1", "=", "nn", ".", "BatchNorm1d", "(", "max_document_length", ")", ".", "cuda", "(", ")", "\n", "self", ".", "gc", "=", "GraphConvolution", "(", "360", ",", "7", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ",", "gain", "=", "1", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "1", "]", ",", "gain", "=", "1", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "1", "]", "[", "0", "]", ",", "gain", "=", "1", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "1", "]", "[", "1", "]", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_fine_grained_classification.LSTM_GCN.forward": [[118, 132], ["x_and_adj[].cuda", "train_fine_grained_classification.LSTM_GCN.embedding", "train_fine_grained_classification.LSTM_GCN.lstm", "train_fine_grained_classification.LSTM_GCN.batch1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_fine_grained_classification.LSTM_GCN.gc", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "train_fine_grained_classification.get_sentense_marix"], "methods", ["home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.get_sentense_marix"], ["", "def", "forward", "(", "self", ",", "x_and_adj", ")", ":", "\n", "        ", "x", "=", "x_and_adj", "[", ":", ",", ":", "max_document_length", "]", ".", "cuda", "(", ")", "\n", "adj", "=", "x_and_adj", "[", ":", ",", "-", "max_document_length", ":", "]", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "lstm_out", ",", "_", "=", "self", ".", "lstm", "(", "x", ",", "None", ")", "\n", "out", "=", "self", ".", "batch1", "(", "lstm_out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "adj_Metrix", "=", "[", "]", "\n", "for", "item", "in", "adj", ":", "\n", "            ", "adj_Metrix", ".", "append", "(", "torch", ".", "unsqueeze", "(", "get_sentense_marix", "(", "item", ")", ",", "dim", "=", "0", ")", ")", "\n", "", "adj_Metrix", "=", "torch", ".", "cat", "(", "adj_Metrix", ",", "dim", "=", "0", ")", "\n", "out_g1", "=", "self", ".", "gc", "(", "out", ",", "adj_Metrix", ")", "\n", "out", "=", "torch", ".", "median", "(", "out_g1", ",", "1", ")", "[", "0", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_fine_grained_classification.kmax_pooling": [[17, 20], ["x.gather", "[].sort", "x.topk"], "function", ["None"], ["def", "kmax_pooling", "(", "x", ",", "dim", ",", "k", ")", ":", "\n", "    ", "index", "=", "x", ".", "topk", "(", "k", ",", "dim", "=", "dim", ")", "[", "1", "]", ".", "sort", "(", "dim", "=", "dim", ")", "[", "0", "]", "\n", "return", "x", ".", "gather", "(", "dim", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_fine_grained_classification.get_sentense_marix": [[22, 30], ["numpy.zeros", "enumerate", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "get_sentense_marix", "(", "x", ")", ":", "\n", "    ", "one_matrix", "=", "np", ".", "zeros", "(", "(", "140", ",", "140", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "one_matrix", "[", "index", "]", "[", "index", "]", "=", "1", "\n", "if", "not", "item", ":", "\n", "            ", "one_matrix", "[", "index", ",", "item", "-", "1", "]", "=", "2", "\n", "one_matrix", "[", "item", "-", "1", ",", "index", "]", "=", "3", "\n", "", "", "return", "torch", ".", "FloatTensor", "(", "one_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_fine_grained_classification.get_test": [[143, 171], ["model.eval", "print", "enumerate", "list", "print", "print", "print", "print", "print", "print", "print", "model.train", "model", "list", "record.extend", "test_y.cpu().numpy", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "torch.save", "torch.save", "torch.save", "torch.save", "sklearn.metrics.precision_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "[].cpu().numpy", "test_y.cpu", "[].cpu", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["None"], ["def", "get_test", "(", ")", ":", "\n", "    ", "global", "best", "\n", "model", ".", "eval", "(", ")", "\n", "print", "(", "'start dev test'", ")", "\n", "record", "=", "[", "]", "\n", "for", "index", ",", "(", "batch_x", ",", "batch_y", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "test_output", "=", "model", "(", "batch_x", ")", "\n", "test_output", "=", "list", "(", "torch", ".", "max", "(", "test_output", ",", "dim", "=", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "record", ".", "extend", "(", "test_output", ")", "\n", "", "label", "=", "list", "(", "test_y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y_true", "=", "label", "\n", "y_pred", "=", "record", "\n", "\n", "print", "(", "\"accuracy:\"", ",", "accuracy_score", "(", "y_true", ",", "y_pred", ")", ")", "# Return the number of correctly classified samples", "\n", "if", "accuracy_score", "(", "y_true", ",", "y_pred", ")", ">", "best", ":", "\n", "        ", "torch", ".", "save", "(", "model", ",", "\"best_model.pth\"", ")", "\n", "", "print", "(", "\"macro_precision\"", ",", "precision_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", ")", "\n", "print", "(", "\"micro_precision\"", ",", "precision_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "# Calculate recall score", "\n", "print", "(", "\"macro_recall\"", ",", "recall_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", ")", "\n", "print", "(", "\"micro_recall\"", ",", "recall_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "# Calculate f1 score", "\n", "print", "(", "\"macro_f\"", ",", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", ")", "\n", "print", "(", "\"micro_f\"", ",", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.layers.SparseMM.__init__": [[10, 13], ["super().__init__", "sparse.cuda"], "methods", ["home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.LSTM_GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sparse", ")", ":", "\n", "        ", "super", "(", "SparseMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sparse", "=", "sparse", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.layers.SparseMM.forward": [[14, 16], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dense", ")", ":", "\n", "        ", "return", "torch", ".", "bmm", "(", "self", ".", "sparse", ",", "dense", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.layers.SparseMM.backward": [[17, 26], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "item.t"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "None", "\n", "sparse_t", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "sparse", ":", "\n", "            ", "sparse_t", ".", "append", "(", "torch", ".", "unsqueeze", "(", "item", ".", "t", "(", ")", ",", "dim", "=", "0", ")", ")", "\n", "", "sparse_t", "=", "torch", ".", "cat", "(", "sparse_t", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "torch", ".", "bmm", "(", "sparse_t", ",", "grad_output", ")", "\n", "", "return", "grad_input", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.layers.GraphConvolution.__init__": [[33, 43], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter().cuda", "torch.nn.parameter.Parameter().cuda", "layers.GraphConvolution.reset_parameters", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.LSTM_GCN.__init__", "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.layers.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "None", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", ".", "cuda", "(", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.layers.GraphConvolution.reset_parameters": [[44, 51], ["torch.xavier_uniform", "torch.xavier_uniform", "layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "torch.xavier_uniform", "torch.xavier_uniform", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "init", ".", "xavier_uniform", "(", "self", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "#\u968f\u673a", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "init", ".", "xavier_uniform", "(", "self", ".", "bias", ".", "data", ",", "gain", "=", "1", ")", "\n", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "#\u968f\u673a", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.layers.GraphConvolution.forward": [[52, 63], ["layers.GraphConvolution.weight.repeat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "layers.SparseMM", "layers.GraphConvolution.bias.repeat", "output.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "#   []", "\n", "        ", "weight_matrix", "=", "self", ".", "weight", ".", "repeat", "(", "input", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "support", "=", "torch", ".", "bmm", "(", "input", ",", "weight_matrix", ")", "\n", "#print(adj.shape)", "\n", "#print(type(adj))", "\n", "output", "=", "SparseMM", "(", "adj", ")", "(", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", ".", "repeat", "(", "output", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.layers.GraphConvolution.__repr__": [[64, 68], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.LSTM_GCN.__init__": [[128, 145], ["torch.nn.Module.__init__", "torch.nn.Embedding().cuda", "torch.nn.Embedding().cuda", "torch.nn.Embedding().cuda", "torch.nn.Embedding().cuda", "torch.nn.LSTM().cuda", "torch.nn.LSTM().cuda", "torch.nn.LSTM().cuda", "torch.nn.LSTM().cuda", "torch.nn.BatchNorm1d().cuda", "torch.nn.BatchNorm1d().cuda", "torch.nn.BatchNorm1d().cuda", "torch.nn.BatchNorm1d().cuda", "layers.GraphConvolution", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.LSTM_GCN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LSTM_GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "76215", ",", "300", ")", ".", "cuda", "(", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "300", ",", "# dim of word vector", "\n", "hidden_size", "=", "180", ",", "# dim of output of lstm nn`", "\n", "num_layers", "=", "2", ",", "# num of hidden layers", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "0.5", ",", "\n", "bidirectional", "=", "True", "\n", ")", ".", "cuda", "(", ")", "\n", "self", ".", "batch1", "=", "nn", ".", "BatchNorm1d", "(", "max_document_length", ")", ".", "cuda", "(", ")", "\n", "self", ".", "gc", "=", "GraphConvolution", "(", "360", ",", "2", ")", "#", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ",", "gain", "=", "1", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "1", "]", ",", "gain", "=", "1", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "1", "]", "[", "0", "]", ",", "gain", "=", "1", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "1", "]", "[", "1", "]", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.LSTM_GCN.forward": [[146, 160], ["x_and_adj[].cuda", "train_binary_classification.LSTM_GCN.embedding", "train_binary_classification.LSTM_GCN.lstm", "train_binary_classification.LSTM_GCN.batch1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_binary_classification.LSTM_GCN.gc", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "train_binary_classification.get_sentense_marix"], "methods", ["home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.get_sentense_marix"], ["", "def", "forward", "(", "self", ",", "x_and_adj", ")", ":", "\n", "        ", "x", "=", "x_and_adj", "[", ":", ",", ":", "max_document_length", "]", ".", "cuda", "(", ")", "\n", "adj", "=", "x_and_adj", "[", ":", ",", "-", "max_document_length", ":", "]", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "lstm_out", ",", "_", "=", "self", ".", "lstm", "(", "x", ",", "None", ")", "\n", "out", "=", "self", ".", "batch1", "(", "lstm_out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "adj_Metrix", "=", "[", "]", "\n", "for", "item", "in", "adj", ":", "\n", "            ", "adj_Metrix", ".", "append", "(", "torch", ".", "unsqueeze", "(", "get_sentense_marix", "(", "item", ")", ",", "dim", "=", "0", ")", ")", "\n", "", "adj_Metrix", "=", "torch", ".", "cat", "(", "adj_Metrix", ",", "dim", "=", "0", ")", "\n", "out_g1", "=", "self", ".", "gc", "(", "out", ",", "adj_Metrix", ")", "\n", "out", "=", "torch", ".", "median", "(", "out_g1", ",", "1", ")", "[", "0", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.kmax_pooling": [[17, 20], ["x.gather", "[].sort", "x.topk"], "function", ["None"], ["def", "kmax_pooling", "(", "x", ",", "dim", ",", "k", ")", ":", "\n", "    ", "index", "=", "x", ".", "topk", "(", "k", ",", "dim", "=", "dim", ")", "[", "1", "]", ".", "sort", "(", "dim", "=", "dim", ")", "[", "0", "]", "\n", "return", "x", ".", "gather", "(", "dim", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.get_sentense_marix": [[22, 30], ["numpy.zeros", "enumerate", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "get_sentense_marix", "(", "x", ")", ":", "\n", "    ", "one_matrix", "=", "np", ".", "zeros", "(", "(", "140", ",", "140", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "one_matrix", "[", "index", "]", "[", "index", "]", "=", "1", "\n", "if", "not", "item", ":", "\n", "            ", "one_matrix", "[", "index", ",", "item", "-", "1", "]", "=", "2", "\n", "one_matrix", "[", "item", "-", "1", ",", "index", "]", "=", "3", "\n", "", "", "return", "torch", ".", "FloatTensor", "(", "one_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhanglinfeng1997_Sentiment-Analysis-via-GCN.None.train_binary_classification.get_test": [[170, 200], ["model.eval", "print", "enumerate", "list", "print", "print", "print", "print", "print", "print", "print", "print", "print", "model.train", "model", "list", "record.extend", "test_y.numpy", "len", "len", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "torch.save", "torch.save", "torch.save", "torch.save", "sklearn.metrics.precision_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "[].cpu().numpy", "[].cpu", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["None"], ["def", "get_test", "(", ")", ":", "\n", "    ", "global", "best", "\n", "model", ".", "eval", "(", ")", "\n", "print", "(", "'start dev test'", ")", "\n", "record", "=", "[", "]", "\n", "for", "index", ",", "(", "batch_x", ",", "batch_y", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "test_output", "=", "model", "(", "batch_x", ")", "\n", "test_output", "=", "list", "(", "torch", ".", "max", "(", "test_output", ",", "dim", "=", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "record", ".", "extend", "(", "test_output", ")", "\n", "", "label", "=", "list", "(", "test_y", ".", "numpy", "(", ")", ")", "\n", "y_true", "=", "label", "\n", "y_pred", "=", "record", "\n", "print", "(", "len", "(", "y_true", ")", ")", "\n", "print", "(", "len", "(", "y_pred", ")", ")", "\n", "\n", "print", "(", "\"accuracy:\"", ",", "accuracy_score", "(", "y_true", ",", "y_pred", ")", ")", "# Return the number of correctly classified samples", "\n", "if", "accuracy_score", "(", "y_true", ",", "y_pred", ")", ">", "best", ":", "\n", "        ", "torch", ".", "save", "(", "model", ",", "\"best_model.pth\"", ")", "\n", "", "print", "(", "\"macro_precision\"", ",", "precision_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", ")", "\n", "print", "(", "\"micro_precision\"", ",", "precision_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "# Calculate recall score", "\n", "print", "(", "\"macro_recall\"", ",", "recall_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", ")", "\n", "print", "(", "\"micro_recall\"", ",", "recall_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "# Calculate f1 score", "\n", "print", "(", "\"macro_f\"", ",", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", ")", "\n", "print", "(", "\"micro_f\"", ",", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'micro'", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n"]]}