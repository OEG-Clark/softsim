{"home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.segment_semantic_loss": [[18, 22], ["torch.nn.functional.cross_entropy", "output.float", "target.long().squeeze", "target.long"], "function", ["None"], ["def", "segment_semantic_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "sl", "\n", "sl", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "output", ".", "float", "(", ")", ",", "target", ".", "long", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ",", "ignore_index", "=", "0", ",", "reduction", "=", "'mean'", ")", "\n", "return", "sl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.normal_loss": [[23, 27], ["taskonomy_losses.rotate_loss"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.rotate_loss"], ["", "def", "normal_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "nl", "\n", "nl", "=", "rotate_loss", "(", "output", ",", "target", ",", "mask", ",", "normal_loss_base", ")", "\n", "return", "nl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.normal_loss_simple": [[28, 34], ["torch.nn.functional.l1_loss", "mask.float", "torch.nn.functional.l1_loss.mean"], "function", ["None"], ["", "def", "normal_loss_simple", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "nl", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "out", "*=", "mask", ".", "float", "(", ")", "\n", "nl", "=", "out", ".", "mean", "(", ")", "\n", "return", "nl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.rotate_loss": [[35, 65], ["target[].float", "mask[].float", "output.float.float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "loss.mean.mean", "taskonomy_losses.normal_loss_base", "taskonomy_losses.depth_loss_base"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.normal_loss_base", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.depth_loss_base"], ["", "def", "rotate_loss", "(", "output", ",", "target", ",", "mask", ",", "loss_name", ")", ":", "\n", "    ", "global", "popular_offsets", "\n", "target", "=", "target", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "mask", "=", "mask", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ".", "float", "(", ")", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "val1", "=", "loss", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", ",", "target", ",", "mask", ")", "\n", "\n", "val2", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "0", ":", "-", "2", ",", "1", ":", "-", "1", "]", ",", "target", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "min", "(", "loss", ",", "val2", ")", "\n", "val3", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "0", ":", "-", "2", "]", ",", "target", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "min", "(", "loss", ",", "val3", ")", "\n", "val4", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "2", ":", ",", "1", ":", "-", "1", "]", ",", "target", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "min", "(", "loss", ",", "val4", ")", "\n", "val5", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "2", ":", "]", ",", "target", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "min", "(", "loss", ",", "val5", ")", "\n", "val6", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "0", ":", "-", "2", ",", "0", ":", "-", "2", "]", ",", "target", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "min", "(", "loss", ",", "val6", ")", "\n", "val7", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "2", ":", ",", "2", ":", "]", ",", "target", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "min", "(", "loss", ",", "val7", ")", "\n", "val8", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "0", ":", "-", "2", ",", "2", ":", "]", ",", "target", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "min", "(", "loss", ",", "val8", ")", "\n", "val9", "=", "loss_name", "(", "output", "[", ":", ",", ":", ",", "2", ":", ",", "0", ":", "-", "2", "]", ",", "target", ",", "mask", ")", "\n", "loss", "=", "torch", ".", "min", "(", "loss", ",", "val9", ")", "\n", "\n", "#lst = [val1,val2,val3,val4,val5,val6,val7,val8,val9]", "\n", "\n", "#print(loss.size())", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "#print(loss)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.normal_loss_base": [[67, 72], ["torch.nn.functional.l1_loss", "out.mean.mean"], "function", ["None"], ["", "def", "normal_loss_base", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "out", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "out", "*=", "mask", "\n", "out", "=", "out", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.normal2_loss": [[73, 80], ["torch.abs", "torch.abs.mean", "output.float", "target.float", "mask.float"], "function", ["None"], ["", "def", "normal2_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "nl3", "\n", "diff", "=", "output", ".", "float", "(", ")", "-", "target", ".", "float", "(", ")", "\n", "out", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "out", "=", "out", "*", "mask", ".", "float", "(", ")", "\n", "nl3", "=", "out", ".", "mean", "(", ")", "\n", "return", "nl3", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.depth_loss_simple": [[81, 87], ["torch.nn.functional.l1_loss", "mask.float", "torch.nn.functional.l1_loss.mean"], "function", ["None"], ["", "def", "depth_loss_simple", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "dl", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "out", "*=", "mask", ".", "float", "(", ")", "\n", "dl", "=", "out", ".", "mean", "(", ")", "\n", "return", "dl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.depth_loss": [[88, 92], ["taskonomy_losses.rotate_loss"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.rotate_loss"], ["", "def", "depth_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "dl", "\n", "dl", "=", "rotate_loss", "(", "output", ",", "target", ",", "mask", ",", "depth_loss_base", ")", "\n", "return", "dl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.depth_loss_base": [[93, 98], ["torch.nn.functional.l1_loss", "mask.float", "out.mean.mean"], "function", ["None"], ["", "def", "depth_loss_base", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "out", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "out", "*=", "mask", ".", "float", "(", ")", "\n", "out", "=", "out", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.edge_loss_simple": [[99, 106], ["torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss.mean"], "function", ["None"], ["", "def", "edge_loss_simple", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "el", "\n", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "out", "*=", "mask", "\n", "el", "=", "out", ".", "mean", "(", ")", "\n", "return", "el", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.reshade_loss": [[107, 113], ["torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss.mean"], "function", ["None"], ["", "def", "reshade_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "rl", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "out", "*=", "mask", "\n", "rl", "=", "out", ".", "mean", "(", ")", "\n", "return", "rl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.keypoints2d_loss": [[114, 118], ["torch.nn.functional.l1_loss"], "function", ["None"], ["", "def", "keypoints2d_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "kl", "\n", "kl", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.edge2d_loss": [[119, 123], ["torch.nn.functional.l1_loss"], "function", ["None"], ["", "def", "edge2d_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "tl", "\n", "tl", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "return", "tl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.auto_loss": [[124, 128], ["torch.nn.functional.l1_loss"], "function", ["None"], ["", "def", "auto_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "al", "\n", "al", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "return", "al", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.pc_loss": [[129, 135], ["torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss.mean"], "function", ["None"], ["", "def", "pc_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "cl", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "out", "*=", "mask", "\n", "cl", "=", "out", ".", "mean", "(", ")", "\n", "return", "cl", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.edge_loss": [[136, 142], ["torch.nn.functional.l1_loss", "torch.nn.functional.l1_loss.mean"], "function", ["None"], ["", "def", "edge_loss", "(", "output", ",", "target", ",", "mask", ")", ":", "\n", "    ", "global", "el", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "out", "*=", "mask", "\n", "el", "=", "out", ".", "mean", "(", ")", "\n", "return", "el", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.get_taskonomy_loss": [[144, 165], ["target.items", "output[].float"], "function", ["None"], ["", "def", "get_taskonomy_loss", "(", "losses", ")", ":", "\n", "    ", "def", "taskonomy_loss", "(", "output", ",", "target", ")", ":", "\n", "        ", "if", "'mask'", "in", "target", ":", "\n", "            ", "mask", "=", "target", "[", "'mask'", "]", "\n", "", "else", ":", "\n", "            ", "mask", "=", "None", "\n", "\n", "", "sum_loss", "=", "None", "\n", "num", "=", "0", "\n", "for", "n", ",", "t", "in", "target", ".", "items", "(", ")", ":", "\n", "            ", "if", "n", "in", "losses", ":", "\n", "                ", "o", "=", "output", "[", "n", "]", ".", "float", "(", ")", "\n", "this_loss", "=", "losses", "[", "n", "]", "(", "o", ",", "t", ",", "mask", ")", "\n", "num", "+=", "1", "\n", "if", "sum_loss", ":", "\n", "                    ", "sum_loss", "=", "sum_loss", "+", "this_loss", "\n", "", "else", ":", "\n", "                    ", "sum_loss", "=", "this_loss", "\n", "\n", "", "", "", "return", "sum_loss", "#/num # should not take average when using xception_taskonomy_new", "\n", "", "return", "taskonomy_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.get_losses_and_tasks": [[167, 243], ["taskonomy_losses.get_taskonomy_loss", "taskonomy_tasks.append", "taskonomy_tasks.append", "taskonomy_tasks.append", "taskonomy_tasks.append", "taskonomy_tasks.append", "taskonomy_tasks.append", "taskonomy_tasks.append", "taskonomy_tasks.append", "taskonomy_tasks.append", "taskonomy_tasks.append", "zip", "print", "print", "print", "float", "losses.items", "criteria.items", "args.task_weights.split", "l", "c"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.get_taskonomy_loss"], ["", "def", "get_losses_and_tasks", "(", "args", ")", ":", "\n", "    ", "task_str", "=", "args", ".", "tasks", "\n", "losses", "=", "{", "}", "\n", "criteria", "=", "{", "}", "\n", "taskonomy_tasks", "=", "[", "]", "\n", "\n", "if", "'s'", "in", "task_str", ":", "\n", "        ", "losses", "[", "'segment_semantic'", "]", "=", "segment_semantic_loss", "\n", "criteria", "[", "'ss_l'", "]", "=", "lambda", "x", ",", "y", ":", "sl", "\n", "taskonomy_tasks", ".", "append", "(", "'segment_semantic'", ")", "\n", "", "if", "'d'", "in", "task_str", ":", "\n", "        ", "if", "not", "args", ".", "rotate_loss", ":", "\n", "            ", "losses", "[", "'depth_zbuffer'", "]", "=", "depth_loss_simple", "\n", "", "else", ":", "\n", "            ", "print", "(", "'got rotate loss'", ")", "\n", "losses", "[", "'depth_zbuffer'", "]", "=", "depth_loss", "\n", "", "criteria", "[", "'depth_l'", "]", "=", "lambda", "x", ",", "y", ":", "dl", "\n", "taskonomy_tasks", ".", "append", "(", "'depth_zbuffer'", ")", "\n", "\n", "", "if", "'n'", "in", "task_str", ":", "\n", "        ", "if", "not", "args", ".", "rotate_loss", ":", "\n", "            ", "losses", "[", "'normal'", "]", "=", "normal_loss_simple", "\n", "", "else", ":", "\n", "            ", "print", "(", "'got rotate loss'", ")", "\n", "losses", "[", "'normal'", "]", "=", "normal_loss", "\n", "", "criteria", "[", "'norm_l'", "]", "=", "lambda", "x", ",", "y", ":", "nl", "\n", "#criteria['norm_l2']=lambda x,y : nl2", "\n", "taskonomy_tasks", ".", "append", "(", "'normal'", ")", "\n", "", "if", "'N'", "in", "task_str", ":", "\n", "        ", "losses", "[", "'normal2'", "]", "=", "normal2_loss", "\n", "criteria", "[", "'norm2'", "]", "=", "lambda", "x", ",", "y", ":", "nl3", "\n", "taskonomy_tasks", ".", "append", "(", "'normal2'", ")", "\n", "", "if", "'k'", "in", "task_str", ":", "\n", "        ", "losses", "[", "'keypoints2d'", "]", "=", "keypoints2d_loss", "\n", "criteria", "[", "'key_l'", "]", "=", "lambda", "x", ",", "y", ":", "kl", "\n", "taskonomy_tasks", ".", "append", "(", "'keypoints2d'", ")", "\n", "", "if", "'e'", "in", "task_str", ":", "\n", "        ", "if", "not", "args", ".", "rotate_loss", ":", "\n", "            ", "losses", "[", "'edge_occlusion'", "]", "=", "edge_loss_simple", "\n", "", "else", ":", "\n", "            ", "print", "(", "'got rotate loss'", ")", "\n", "losses", "[", "'edge_occlusion'", "]", "=", "edge_loss", "\n", "#losses['edge_occlusion']=edge_loss", "\n", "", "criteria", "[", "'edge_l'", "]", "=", "lambda", "x", ",", "y", ":", "el", "\n", "taskonomy_tasks", ".", "append", "(", "'edge_occlusion'", ")", "\n", "", "if", "'r'", "in", "task_str", ":", "\n", "        ", "losses", "[", "'reshading'", "]", "=", "reshade_loss", "\n", "criteria", "[", "'shade_l'", "]", "=", "lambda", "x", ",", "y", ":", "rl", "\n", "taskonomy_tasks", ".", "append", "(", "'reshading'", ")", "\n", "", "if", "'t'", "in", "task_str", ":", "\n", "        ", "losses", "[", "'edge_texture'", "]", "=", "edge2d_loss", "\n", "criteria", "[", "'edge2d_l'", "]", "=", "lambda", "x", ",", "y", ":", "tl", "\n", "taskonomy_tasks", ".", "append", "(", "'edge_texture'", ")", "\n", "", "if", "'a'", "in", "task_str", ":", "\n", "        ", "losses", "[", "'rgb'", "]", "=", "auto_loss", "\n", "criteria", "[", "'rgb_l'", "]", "=", "lambda", "x", ",", "y", ":", "al", "\n", "taskonomy_tasks", ".", "append", "(", "'rgb'", ")", "\n", "", "if", "'c'", "in", "task_str", ":", "\n", "        ", "losses", "[", "'principal_curvature'", "]", "=", "pc_loss", "\n", "criteria", "[", "'pc_l'", "]", "=", "lambda", "x", ",", "y", ":", "cl", "\n", "taskonomy_tasks", ".", "append", "(", "'principal_curvature'", ")", "\n", "\n", "#\"nacre\"", "\n", "\n", "", "if", "args", ".", "task_weights", ":", "\n", "        ", "weights", "=", "[", "float", "(", "x", ")", "for", "x", "in", "args", ".", "task_weights", ".", "split", "(", "','", ")", "]", "\n", "losses2", "=", "{", "}", "\n", "criteria2", "=", "{", "}", "\n", "\n", "\n", "for", "l", ",", "w", ",", "c", "in", "zip", "(", "losses", ".", "items", "(", ")", ",", "weights", ",", "criteria", ".", "items", "(", ")", ")", ":", "\n", "            ", "losses", "[", "l", "[", "0", "]", "]", "=", "lambda", "x", ",", "y", ",", "z", ",", "l", "=", "l", "[", "1", "]", ",", "w", "=", "w", ":", "l", "(", "x", ",", "y", ",", "z", ")", "*", "w", "\n", "criteria", "[", "c", "[", "0", "]", "]", "=", "lambda", "x", ",", "y", ",", "c", "=", "c", "[", "1", "]", ",", "w", "=", "w", ":", "c", "(", "x", ",", "y", ")", "*", "w", "\n", "\n", "", "", "taskonomy_loss", "=", "get_taskonomy_loss", "(", "losses", ")", "\n", "return", "taskonomy_loss", ",", "losses", ",", "criteria", ",", "taskonomy_tasks", "\n", "", ""]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.read_training_history.create_model": [[54, 66], ["None"], "function", ["None"], ["def", "create_model", "(", ")", ":", "\n", "    ", "import", "mymodels", "as", "models", "\n", "try", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classification_classes", "=", "1000", ",", "\n", "num_segmentation_classes", "=", "21", ",", "\n", "num_segmentation_classes2", "=", "90", ",", "\n", "normalize", "=", "False", ")", "\n", "", "except", ":", "\n", "        ", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.TaskonomyLoader.__init__": [[23, 74], ["multiprocessing.Manager", "enumerate", "torchvision.ToTensor", "set", "os.walk", "os.walk", "os.walk", "os.walk", "print", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "where.split", "isinstance", "print", "print", "taskonomy_loader.TaskonomyLoader.model_whitelist.add", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "full_paths.sort", "line.strip", "full_paths.sort"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "label_set", "=", "[", "'depth_zbuffer'", ",", "'normal'", ",", "'segment_semantic'", ",", "'edge_occlusion'", ",", "'reshading'", ",", "'keypoints2d'", ",", "'edge_texture'", "]", ",", "\n", "model_whitelist", "=", "None", ",", "\n", "model_limit", "=", "None", ",", "\n", "output_size", "=", "None", ",", "\n", "convert_to_tensor", "=", "True", ",", "\n", "return_filename", "=", "False", ",", "\n", "half_sized_output", "=", "False", ",", "\n", "augment", "=", "False", ")", ":", "\n", "        ", "manager", "=", "Manager", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "model_limit", "=", "model_limit", "\n", "self", ".", "records", "=", "[", "]", "\n", "if", "model_whitelist", "is", "None", ":", "\n", "            ", "self", ".", "model_whitelist", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_whitelist", "=", "set", "(", ")", "\n", "with", "open", "(", "model_whitelist", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "self", ".", "model_whitelist", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "", "for", "i", ",", "(", "where", ",", "subdirs", ",", "files", ")", "in", "enumerate", "(", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'rgb'", ")", ")", ")", ":", "\n", "            ", "if", "subdirs", "!=", "[", "]", ":", "continue", "\n", "model", "=", "where", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "self", ".", "model_whitelist", "is", "None", "or", "model", "in", "self", ".", "model_whitelist", ":", "\n", "                ", "full_paths", "=", "[", "os", ".", "path", ".", "join", "(", "where", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "if", "isinstance", "(", "model_limit", ",", "tuple", ")", ":", "\n", "                    ", "full_paths", ".", "sort", "(", ")", "\n", "full_paths", "=", "full_paths", "[", "model_limit", "[", "0", "]", ":", "model_limit", "[", "1", "]", "]", "\n", "", "elif", "model_limit", "is", "not", "None", ":", "\n", "                    ", "full_paths", ".", "sort", "(", ")", "\n", "full_paths", "=", "full_paths", "[", ":", "model_limit", "]", "\n", "", "self", ".", "records", "+=", "full_paths", "\n", "\n", "#self.records = manager.list(self.records)", "\n", "", "", "self", ".", "label_set", "=", "label_set", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "half_sized_output", "=", "half_sized_output", "\n", "self", ".", "convert_to_tensor", "=", "convert_to_tensor", "\n", "self", ".", "return_filename", "=", "return_filename", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "augment", "=", "augment", "\n", "\n", "if", "augment", "==", "\"aggressive\"", ":", "\n", "            ", "print", "(", "'Data augmentation is on (aggressive).'", ")", "\n", "", "elif", "augment", ":", "\n", "            ", "print", "(", "'Data augmentation is on (flip).'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'no data augmentation'", ")", "\n", "", "self", ".", "last", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.TaskonomyLoader.process_image": [[75, 97], ["taskonomy_loader.TaskonomyLoader.getbands", "taskonomy_loader.TaskonomyLoader.resize", "numpy.array", "taskonomy_loader.TaskonomyLoader.setflags", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "warnings.catch_warnings", "warnings.simplefilter", "taskonomy_loader.TaskonomyLoader.to_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "process_image", "(", "self", ",", "im", ",", "input", "=", "False", ")", ":", "\n", "        ", "output_size", "=", "self", ".", "output_size", "\n", "if", "self", ".", "half_sized_output", "and", "not", "input", ":", "\n", "            ", "if", "output_size", "is", "None", ":", "\n", "                ", "output_size", "=", "(", "128", ",", "128", ")", "\n", "", "else", ":", "\n", "                ", "output_size", "=", "output_size", "[", "0", "]", "//", "2", ",", "output_size", "[", "1", "]", "//", "2", "\n", "", "", "if", "output_size", "is", "not", "None", "and", "output_size", "!=", "im", ".", "size", ":", "\n", "            ", "im", "=", "im", ".", "resize", "(", "output_size", ",", "Image", ".", "BILINEAR", ")", "\n", "\n", "", "bands", "=", "im", ".", "getbands", "(", ")", "\n", "if", "self", ".", "convert_to_tensor", ":", "\n", "            ", "if", "bands", "[", "0", "]", "==", "'L'", ":", "\n", "                ", "im", "=", "np", ".", "array", "(", "im", ")", "\n", "im", ".", "setflags", "(", "write", "=", "1", ")", "\n", "im", "=", "torch", ".", "from_numpy", "(", "im", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                    ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "im", "=", "self", ".", "to_tensor", "(", "im", ")", "\n", "\n", "", "", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.TaskonomyLoader.__getitem__": [[98, 226], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "PIL.Image.open", "taskonomy_loader.TaskonomyLoader.process_image", "PIL.ImageOps.mirror", "PIL.ImageOps.flip", "len", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "file_name.replace", "random.randint", "random.randint", "set().intersection", "file_name.replace", "to_load.append", "PIL.Image.open", "taskonomy_loader.TaskonomyLoader.last[].copy", "yim.mean.mean.copy", "taskonomy_loader.TaskonomyLoader.process_image", "yim.mean.mean.float", "to_load.append", "taskonomy_loader.TaskonomyLoader.last[].copy", "PIL.ImageOps.mirror", "PIL.ImageOps.flip", "taskonomy_loader.TaskonomyLoader.last[].copy", "taskonomy_loader.TaskonomyLoader.process_image", "yim.mean.mean.float", "set", "yim.mean.mean.getbands", "taskonomy_loader.TaskonomyLoader.last[].getbands", "yim.mean.mean.float", "yim.mean.mean.float", "yim.mean.mean.float", "yim.mean.mean.mean", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "yim.mean.mean.bool", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.TaskonomyLoader.process_image", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.TaskonomyLoader.process_image", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.TaskonomyLoader.process_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is an uint8 matrix of integers with the same width and height.\n        If there is an error loading an image or its labels, simply return the previous example.\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "file_name", "=", "self", ".", "records", "[", "index", "]", "\n", "save_filename", "=", "file_name", "\n", "\n", "flip_lr", "=", "(", "random", ".", "randint", "(", "0", ",", "1", ")", ">", ".5", "and", "self", ".", "augment", ")", "\n", "\n", "flip_ud", "=", "(", "random", ".", "randint", "(", "0", ",", "1", ")", ">", ".5", "and", "(", "self", ".", "augment", "==", "\"aggressive\"", ")", ")", "\n", "\n", "\n", "\n", "\n", "pil_im", "=", "Image", ".", "open", "(", "file_name", ")", "\n", "\n", "if", "flip_lr", ":", "\n", "                ", "pil_im", "=", "ImageOps", ".", "mirror", "(", "pil_im", ")", "\n", "", "if", "flip_ud", ":", "\n", "                ", "pil_im", "=", "ImageOps", ".", "flip", "(", "pil_im", ")", "\n", "\n", "", "im", "=", "self", ".", "process_image", "(", "pil_im", ",", "input", "=", "True", ")", "\n", "\n", "error", "=", "False", "\n", "\n", "ys", "=", "{", "}", "\n", "mask", "=", "None", "\n", "to_load", "=", "self", ".", "label_set", "\n", "if", "len", "(", "set", "(", "[", "'edge_occlusion'", ",", "'normal'", ",", "'reshading'", ",", "'principal_curvature'", "]", ")", ".", "intersection", "(", "self", ".", "label_set", ")", ")", "!=", "0", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "file_name", ".", "replace", "(", "'rgb'", ",", "'mask'", ")", ")", ":", "\n", "                    ", "to_load", ".", "append", "(", "'mask'", ")", "\n", "", "elif", "'depth_zbuffer'", "not", "in", "to_load", ":", "\n", "                    ", "to_load", ".", "append", "(", "'depth_zbuffer'", ")", "\n", "\n", "", "", "for", "i", "in", "to_load", ":", "\n", "                ", "if", "i", "==", "'mask'", "and", "mask", "is", "not", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "yfilename", "=", "file_name", ".", "replace", "(", "'rgb'", ",", "i", ")", "\n", "try", ":", "\n", "                    ", "yim", "=", "Image", ".", "open", "(", "yfilename", ")", "\n", "", "except", ":", "\n", "                    ", "yim", "=", "self", ".", "last", "[", "i", "]", ".", "copy", "(", ")", "\n", "error", "=", "True", "\n", "", "if", "(", "i", "in", "self", ".", "last", "and", "yim", ".", "getbands", "(", ")", "!=", "self", ".", "last", "[", "i", "]", ".", "getbands", "(", ")", ")", "or", "error", ":", "\n", "                    ", "yim", "=", "self", ".", "last", "[", "i", "]", ".", "copy", "(", ")", "\n", "", "try", ":", "\n", "                    ", "self", ".", "last", "[", "i", "]", "=", "yim", ".", "copy", "(", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "", "if", "flip_lr", ":", "\n", "                    ", "try", ":", "\n", "                        ", "yim", "=", "ImageOps", ".", "mirror", "(", "yim", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "", "", "if", "flip_ud", ":", "\n", "                    ", "try", ":", "\n", "                        ", "yim", "=", "ImageOps", ".", "flip", "(", "yim", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "", "", "try", ":", "\n", "                    ", "yim", "=", "self", ".", "process_image", "(", "yim", ")", "\n", "", "except", ":", "\n", "                    ", "yim", "=", "self", ".", "last", "[", "i", "]", ".", "copy", "(", ")", "\n", "yim", "=", "self", ".", "process_image", "(", "yim", ")", "\n", "\n", "\n", "", "if", "i", "==", "'depth_zbuffer'", ":", "\n", "                    ", "yim", "=", "yim", ".", "float", "(", ")", "\n", "mask", "=", "yim", "<", "(", "2", "**", "13", ")", "\n", "yim", "-=", "1500.0", "\n", "yim", "/=", "1000.0", "\n", "", "elif", "i", "==", "'edge_occlusion'", ":", "\n", "                    ", "yim", "=", "yim", ".", "float", "(", ")", "\n", "yim", "-=", "56.0248", "\n", "yim", "/=", "239.1265", "\n", "", "elif", "i", "==", "'keypoints2d'", ":", "\n", "                    ", "yim", "=", "yim", ".", "float", "(", ")", "\n", "yim", "-=", "50.0", "\n", "yim", "/=", "100.0", "\n", "", "elif", "i", "==", "'edge_texture'", ":", "\n", "                    ", "yim", "=", "yim", ".", "float", "(", ")", "\n", "yim", "-=", "718.0", "\n", "yim", "/=", "1070.0", "\n", "", "elif", "i", "==", "'normal'", ":", "\n", "                    ", "yim", "=", "yim", ".", "float", "(", ")", "\n", "yim", "-=", ".5", "\n", "yim", "*=", "2.0", "\n", "if", "flip_lr", ":", "\n", "                        ", "yim", "[", "0", "]", "*=", "-", "1.0", "\n", "", "if", "flip_ud", ":", "\n", "                        ", "yim", "[", "1", "]", "*=", "-", "1.0", "\n", "", "", "elif", "i", "==", "'reshading'", ":", "\n", "                    ", "yim", "=", "yim", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "yim", "-=", ".4962", "\n", "yim", "/=", "0.2846", "\n", "#print('reshading',yim.shape,yim.max(),yim.min())", "\n", "", "elif", "i", "==", "'principal_curvature'", ":", "\n", "                    ", "yim", "=", "yim", "[", ":", "2", "]", "\n", "yim", "-=", "torch", ".", "tensor", "(", "[", "0.5175", ",", "0.4987", "]", ")", ".", "view", "(", "2", ",", "1", ",", "1", ")", "\n", "yim", "/=", "torch", ".", "tensor", "(", "[", "0.1373", ",", "0.0359", "]", ")", ".", "view", "(", "2", ",", "1", ",", "1", ")", "\n", "#print('principal_curvature',yim.shape,yim.max(),yim.min())", "\n", "", "elif", "i", "==", "'mask'", ":", "\n", "                    ", "mask", "=", "yim", ".", "bool", "(", ")", "\n", "yim", "=", "mask", "\n", "\n", "", "ys", "[", "i", "]", "=", "yim", "\n", "\n", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "                ", "ys", "[", "'mask'", "]", "=", "mask", "\n", "\n", "# print(self.label_set)", "\n", "# print('rgb' in self.label_set)", "\n", "", "if", "not", "'rgb'", "in", "self", ".", "label_set", ":", "\n", "                ", "ys", "[", "'rgb'", "]", "=", "im", "\n", "\n", "", "if", "self", ".", "return_filename", ":", "\n", "                ", "return", "im", ",", "ys", ",", "file_name", "\n", "", "else", ":", "\n", "                ", "return", "im", ",", "ys", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.TaskonomyLoader.__len__": [[228, 230], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "(", "len", "(", "self", ".", "records", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.show": [[231, 253], ["plt.figure", "plt.subplot().set_title", "im.permute.permute", "plt.imshow", "enumerate", "plt.show", "plt.subplot().set_title", "torch.cat.permute", "torch.cat.squeeze", "plt.imshow", "plt.subplot", "torch.cat", "torch.cat", "numpy.array", "plt.subplot", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.show"], ["", "", "def", "show", "(", "im", ",", "ys", ")", ":", "\n", "    ", "from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "30", ",", "30", ")", ")", "\n", "plt", ".", "subplot", "(", "4", ",", "3", ",", "1", ")", ".", "set_title", "(", "'RGB'", ")", "\n", "im", "=", "im", ".", "permute", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "plt", ".", "imshow", "(", "im", ")", "\n", "#print(im)", "\n", "#print(ys)", "\n", "for", "i", ",", "y", "in", "enumerate", "(", "ys", ")", ":", "\n", "        ", "yim", "=", "ys", "[", "y", "]", "\n", "plt", ".", "subplot", "(", "4", ",", "3", ",", "2", "+", "i", ")", ".", "set_title", "(", "y", ")", "\n", "if", "y", "==", "'normal'", ":", "\n", "            ", "yim", "+=", "1", "\n", "yim", "/=", "2", "\n", "", "if", "yim", ".", "shape", "[", "0", "]", "==", "2", ":", "\n", "            ", "yim", "=", "torch", ".", "cat", "(", "[", "yim", ",", "torch", ".", "zeros", "(", "(", "1", ",", "yim", ".", "shape", "[", "1", "]", ",", "yim", ".", "shape", "[", "2", "]", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "yim", "=", "yim", ".", "permute", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "yim", "=", "yim", ".", "squeeze", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "array", "(", "yim", ")", ")", "\n", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.test": [[254, 286], ["taskonomy_loader.TaskonomyLoader", "list", "random.shuffle", "enumerate", "range", "taskonomy_loader.show", "print", "enumerate", "len", "yim.float.float", "torch.sqrt", "torch.sqrt", "print", "len", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.show"], ["", "def", "test", "(", ")", ":", "\n", "    ", "loader", "=", "TaskonomyLoader", "(", "\n", "'/home/tstand/Desktop/lite_taskonomy/'", ",", "\n", "label_set", "=", "[", "'normal'", ",", "'reshading'", ",", "'principal_curvature'", ",", "'edge_occlusion'", ",", "'depth_zbuffer'", "]", ",", "\n", "augment", "=", "'aggressive'", ")", "\n", "\n", "totals", "=", "{", "}", "\n", "totals2", "=", "{", "}", "\n", "count", "=", "{", "}", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "loader", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "for", "data_count", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "im", ",", "ys", "=", "loader", "[", "index", "]", "\n", "show", "(", "im", ",", "ys", ")", "\n", "mask", "=", "ys", "[", "'mask'", "]", "\n", "#mask = ~mask", "\n", "print", "(", "index", ")", "\n", "for", "i", ",", "y", "in", "enumerate", "(", "ys", ")", ":", "\n", "            ", "yim", "=", "ys", "[", "y", "]", "\n", "yim", "=", "yim", ".", "float", "(", ")", "\n", "if", "y", "not", "in", "totals", ":", "\n", "                ", "totals", "[", "y", "]", "=", "0", "\n", "totals2", "[", "y", "]", "=", "0", "\n", "count", "[", "y", "]", "=", "0", "\n", "\n", "", "totals", "[", "y", "]", "+=", "(", "yim", "*", "mask", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "\n", "totals2", "[", "y", "]", "+=", "(", "(", "yim", "**", "2", ")", "*", "mask", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "\n", "count", "[", "y", "]", "+=", "(", "torch", ".", "ones_like", "(", "yim", ")", "*", "mask", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "#print(y,yim.shape)", "\n", "std", "=", "torch", ".", "sqrt", "(", "(", "totals2", "[", "y", "]", "-", "(", "totals", "[", "y", "]", "**", "2", ")", "/", "count", "[", "y", "]", ")", "/", "count", "[", "y", "]", ")", "\n", "print", "(", "data_count", ",", "'/'", ",", "len", "(", "loader", ")", ",", "y", ",", "'mean:'", ",", "totals", "[", "y", "]", "/", "count", "[", "y", "]", ",", "'std:'", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.output_mask": [[287, 313], ["filename.replace.replace", "filename.replace.replace", "os.path.isfile", "os.path.isfile", "print", "mask.squeeze.squeeze", "PIL.Image.fromarray", "mask_im.convert.convert", "os.path.split", "os.path.split", "os.makedirs", "os.makedirs", "mask_im.convert.save", "mask.squeeze.numpy"], "function", ["None"], ["", "", "", "def", "output_mask", "(", "index", ",", "loader", ")", ":", "\n", "    ", "from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "filename", "=", "loader", ".", "records", "[", "index", "]", "\n", "filename", "=", "filename", ".", "replace", "(", "'rgb'", ",", "'mask'", ")", "\n", "filename", "=", "filename", ".", "replace", "(", "'/intel_nvme/taskonomy_data/'", ",", "'/run/shm/'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "return", "\n", "\n", "\n", "", "print", "(", "filename", ")", "\n", "\n", "\n", "x", ",", "ys", "=", "loader", "[", "index", "]", "\n", "\n", "mask", "=", "ys", "[", "'mask'", "]", "\n", "mask", "=", "mask", ".", "squeeze", "(", ")", "\n", "mask_im", "=", "Image", ".", "fromarray", "(", "mask", ".", "numpy", "(", ")", ")", "\n", "mask_im", "=", "mask_im", ".", "convert", "(", "mode", "=", "'1'", ")", "\n", "# plt.subplot(2,1,1)", "\n", "# plt.imshow(mask)", "\n", "# plt.subplot(2,1,2)", "\n", "# plt.imshow(mask_im)", "\n", "# plt.show()", "\n", "path", ",", "_", "=", "os", ".", "path", ".", "split", "(", "filename", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "mask_im", ".", "save", "(", "filename", ",", "bits", "=", "1", ",", "optimize", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.get_masks": [[319, 336], ["taskonomy_loader.TaskonomyLoader", "list", "random.shuffle", "enumerate", "range", "print", "taskonomy_loader.output_mask", "len", "len"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_loader.output_mask"], ["", "def", "get_masks", "(", ")", ":", "\n", "    ", "import", "multiprocessing", "\n", "\n", "\n", "loader", "=", "TaskonomyLoader", "(", "\n", "'/intel_nvme/taskonomy_data/'", ",", "\n", "label_set", "=", "[", "'depth_zbuffer'", "]", ",", "\n", "augment", "=", "False", ")", "\n", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "loader", ")", ")", ")", "\n", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "\n", "for", "count", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "print", "(", "count", ",", "len", "(", "indices", ")", ")", "\n", "output_mask", "(", "index", ",", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.data_prefetcher.__init__": [[280, 285], ["iter", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "train_taskonomy.data_prefetcher.preload"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.data_prefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "inital_loader", "=", "loader", "\n", "self", ".", "loader", "=", "iter", "(", "loader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.data_prefetcher.preload": [[286, 299], ["train_taskonomy.data_prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.data_prefetcher.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_input", ",", "self", ".", "next_target", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "# self.next_input = None", "\n", "# self.next_target = None", "\n", "            ", "self", ".", "loader", "=", "iter", "(", "self", ".", "inital_loader", ")", "\n", "self", ".", "preload", "(", ")", "\n", "return", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "next_input", "=", "self", ".", "next_input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "#self.next_target = self.next_target.cuda(async=True)", "\n", "self", ".", "next_target", "=", "{", "key", ":", "val", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "(", "key", ",", "val", ")", "in", "self", ".", "next_target", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.data_prefetcher.next": [[300, 306], ["torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "torch.cuda.current_stream().wait_stream", "train_taskonomy.data_prefetcher.preload", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.data_prefetcher.preload"], ["", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "input", "=", "self", ".", "next_input", "\n", "target", "=", "self", ".", "next_target", "\n", "self", ".", "preload", "(", ")", "\n", "return", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.AverageMeter.__init__": [[355, 357], ["train_taskonomy.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.AverageMeter.reset": [[358, 366], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "std", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "sumsq", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "lst", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.AverageMeter.update": [[367, 375], ["float", "train_taskonomy.AverageMeter.lst.append", "numpy.std", "float"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "float", "(", "val", ")", "\n", "self", ".", "sum", "+=", "float", "(", "val", ")", "*", "n", "\n", "#self.sumsq += float(val)**2", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "self", ".", "lst", ".", "append", "(", "self", ".", "val", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "self", ".", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.__init__": [[378, 422], ["train_taskonomy.data_prefetcher", "train_taskonomy.Trainer.get_code_archive", "train_taskonomy.get_average_learning_rate", "train_taskonomy.print_table"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.get_code_archive", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.get_average_learning_rate", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.print_table"], ["    ", "def", "__init__", "(", "self", ",", "train_loader", ",", "val_loader", ",", "model", ",", "optimizer", ",", "criteria", ",", "args", ",", "checkpoint", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "train_prefetcher", "=", "data_prefetcher", "(", "self", ".", "train_loader", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "criteria", "=", "criteria", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "fp16", "=", "args", ".", "fp16", "\n", "self", ".", "code_archive", "=", "self", ".", "get_code_archive", "(", ")", "\n", "if", "checkpoint", ":", "\n", "            ", "if", "'progress_table'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "progress_table", "=", "checkpoint", "[", "'progress_table'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "progress_table", "=", "[", "]", "\n", "", "if", "'epoch'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "start_epoch", "=", "0", "\n", "", "if", "'best_loss'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "best_loss", "=", "checkpoint", "[", "'best_loss'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "best_loss", "=", "9e9", "\n", "", "if", "'stats'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "stats", "=", "checkpoint", "[", "'stats'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "stats", "=", "[", "]", "\n", "", "if", "'loss_history'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "loss_history", "=", "checkpoint", "[", "'loss_history'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss_history", "=", "[", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "progress_table", "=", "[", "]", "\n", "self", ".", "best_loss", "=", "9e9", "\n", "self", ".", "stats", "=", "[", "]", "\n", "self", ".", "start_epoch", "=", "0", "\n", "self", ".", "loss_history", "=", "[", "]", "\n", "\n", "", "self", ".", "lr0", "=", "get_average_learning_rate", "(", "optimizer", ")", "\n", "\n", "print_table", "(", "self", ".", "progress_table", ",", "False", ")", "\n", "self", ".", "ticks", "=", "0", "\n", "self", ".", "last_tick", "=", "0", "\n", "self", ".", "loss_tracking_window", "=", "args", ".", "loss_tracking_window_initial", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.get_code_archive": [[423, 430], ["os.listdir", "open", "file.read"], "methods", ["None"], ["", "def", "get_code_archive", "(", "self", ")", ":", "\n", "        ", "file_contents", "=", "{", "}", "\n", "for", "i", "in", "os", ".", "listdir", "(", "'.'", ")", ":", "\n", "            ", "if", "i", "[", "-", "3", ":", "]", "==", "'.py'", ":", "\n", "                ", "with", "open", "(", "i", ",", "'r'", ")", "as", "file", ":", "\n", "                    ", "file_contents", "[", "i", "]", "=", "file", ".", "read", "(", ")", "\n", "", "", "", "return", "file_contents", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.train": [[431, 448], ["range", "train_taskonomy.get_average_learning_rate", "train_taskonomy.Trainer.train_epoch", "train_taskonomy.Trainer.validate", "print", "train_taskonomy.Trainer.progress_table.append", "train_taskonomy.Trainer.stats.append", "train_taskonomy.Trainer.checkpoint"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.get_average_learning_rate", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.train_epoch", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.validate", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "self", ".", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "args", ".", "epochs", ")", ":", "\n", "            ", "current_learning_rate", "=", "get_average_learning_rate", "(", "self", ".", "optimizer", ")", "\n", "if", "current_learning_rate", "<", "self", ".", "args", ".", "minimum_learning_rate", ":", "\n", "                ", "break", "\n", "# train for one epoch", "\n", "", "train_string", ",", "train_stats", "=", "self", ".", "train_epoch", "(", ")", "\n", "\n", "# evaluate on validation set", "\n", "progress_string", "=", "train_string", "\n", "loss", ",", "progress_string", ",", "val_stats", "=", "self", ".", "validate", "(", "progress_string", ")", "\n", "print", "(", ")", "\n", "\n", "self", ".", "progress_table", ".", "append", "(", "progress_string", ")", "\n", "\n", "self", ".", "stats", ".", "append", "(", "(", "train_stats", ",", "val_stats", ")", ")", "\n", "self", ".", "checkpoint", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.checkpoint": [[449, 479], ["min", "train_taskonomy.Trainer.save_checkpoint", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "train_taskonomy.Trainer.save_checkpoint", "print", "to_save.state_dict", "train_taskonomy.Trainer.optimizer.state_dict", "platform.node"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.save_checkpoint", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.save_checkpoint"], ["", "", "def", "checkpoint", "(", "self", ",", "loss", ")", ":", "\n", "        ", "is_best", "=", "loss", "<", "self", ".", "best_loss", "\n", "self", ".", "best_loss", "=", "min", "(", "loss", ",", "self", ".", "best_loss", ")", "\n", "save_filename", "=", "self", ".", "args", ".", "experiment_name", "+", "'_'", "+", "self", ".", "args", ".", "arch", "+", "'_'", "+", "(", "'p'", "if", "self", ".", "args", ".", "pretrained", "!=", "''", "else", "'np'", ")", "+", "'_'", "+", "self", ".", "args", ".", "tasks", "+", "'_checkpoint.pth.tar'", "\n", "\n", "try", ":", "\n", "            ", "to_save", "=", "self", ".", "model", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "to_save", "=", "to_save", ".", "module", "\n", "", "gpus", "=", "'all'", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "                ", "gpus", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "\n", "", "self", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'info'", ":", "{", "'machine'", ":", "platform", ".", "node", "(", ")", ",", "'GPUS'", ":", "gpus", "}", ",", "\n", "'args'", ":", "self", ".", "args", ",", "\n", "'arch'", ":", "self", ".", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "to_save", ".", "state_dict", "(", ")", ",", "\n", "'best_loss'", ":", "self", ".", "best_loss", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'progress_table'", ":", "self", ".", "progress_table", ",", "\n", "'stats'", ":", "self", ".", "stats", ",", "\n", "'loss_history'", ":", "self", ".", "loss_history", ",", "\n", "'code_archive'", ":", "self", ".", "code_archive", "\n", "}", ",", "False", ",", "self", ".", "args", ".", "model_dir", ",", "save_filename", ")", "\n", "\n", "if", "is_best", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", "None", ",", "True", ",", "self", ".", "args", ".", "model_dir", ",", "save_filename", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "'save checkpoint failed...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.save_checkpoint": [[482, 489], ["os.path.join", "os.path.join", "shutil.copyfile", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "state", ",", "is_best", ",", "directory", "=", "''", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "best_path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "'best_'", "+", "filename", ")", "\n", "shutil", ".", "copyfile", "(", "path", ",", "best_path", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.learning_rate_schedule": [[490, 518], ["sorted", "sorted", "min", "scipy.stats.ttest_rel", "len", "len", "len", "len", "train_taskonomy.Trainer.adjust_learning_rate", "min", "int", "int", "int", "int", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.adjust_learning_rate"], ["", "", "def", "learning_rate_schedule", "(", "self", ")", ":", "\n", "        ", "ttest_p", "=", "0", "\n", "z_diff", "=", "0", "\n", "\n", "#don't reduce learning rate until the second epoch has ended", "\n", "if", "self", ".", "epoch", "<", "2", ":", "\n", "            ", "return", "0", ",", "0", "\n", "\n", "", "wind", "=", "self", ".", "loss_tracking_window", "//", "(", "self", ".", "args", ".", "batch_size", "*", "args", ".", "virtual_batch_multiplier", ")", "\n", "if", "len", "(", "self", ".", "loss_history", ")", "-", "self", ".", "last_tick", ">", "wind", ":", "\n", "            ", "a", "=", "self", ".", "loss_history", "[", "-", "wind", ":", "-", "wind", "*", "5", "//", "8", "]", "\n", "b", "=", "self", ".", "loss_history", "[", "-", "wind", "*", "3", "//", "8", ":", "]", "\n", "#remove outliers", "\n", "a", "=", "sorted", "(", "a", ")", "\n", "b", "=", "sorted", "(", "b", ")", "\n", "a", "=", "a", "[", "int", "(", "len", "(", "a", ")", "*", ".05", ")", ":", "int", "(", "len", "(", "a", ")", "*", ".95", ")", "]", "\n", "b", "=", "b", "[", "int", "(", "len", "(", "b", ")", "*", ".05", ")", ":", "int", "(", "len", "(", "b", ")", "*", ".95", ")", "]", "\n", "length_", "=", "min", "(", "len", "(", "a", ")", ",", "len", "(", "b", ")", ")", "\n", "a", "=", "a", "[", ":", "length_", "]", "\n", "b", "=", "b", "[", ":", "length_", "]", "\n", "z_diff", ",", "ttest_p", "=", "scipy", ".", "stats", ".", "ttest_rel", "(", "a", ",", "b", ",", "nan_policy", "=", "'omit'", ")", "\n", "\n", "if", "z_diff", "<", "0", "or", "ttest_p", ">", ".99", ":", "\n", "                ", "self", ".", "ticks", "+=", "1", "\n", "self", ".", "last_tick", "=", "len", "(", "self", ".", "loss_history", ")", "\n", "self", ".", "adjust_learning_rate", "(", ")", "\n", "self", ".", "loss_tracking_window", "=", "min", "(", "self", ".", "args", ".", "maximum_loss_tracking_window", ",", "self", ".", "loss_tracking_window", "*", "2", ")", "\n", "", "", "return", "ttest_p", ",", "z_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.train_epoch": [[519, 624], ["collections.defaultdict", "train_taskonomy.Trainer.criteria.items", "train_taskonomy.Trainer.model.train", "time.time", "time.time", "time.time", "train_taskonomy.get_average_learning_rate", "display_values.append", "len", "range", "loss_dict.items", "train_taskonomy.Trainer.update", "train_taskonomy.Trainer.loss_history.append", "train_taskonomy.Trainer.learning_rate_schedule", "loss_dict.items", "train_taskonomy.get_average_learning_rate", "time.time", "time.strftime", "time.time", "time.time", "time.time", "train_taskonomy.Trainer.train_prefetcher.next", "average_meters[].update", "train_taskonomy.Trainer.train_batch", "float", "time.time", "time.gmtime", "loss_dict2.items", "average_meters[].update", "time.strftime", "train_taskonomy.print_table", "int", "time.time", "average_meters[].update", "time.gmtime", "time.strftime", "int", "time.gmtime", "int"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.train", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.get_average_learning_rate", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.update", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.learning_rate_schedule", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.get_average_learning_rate", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.data_prefetcher.next", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.update", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.train_batch", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.update", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.print_table", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.update"], ["", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "global", "program_start_time", "\n", "average_meters", "=", "defaultdict", "(", "AverageMeter", ")", "\n", "display_values", "=", "[", "]", "\n", "for", "name", ",", "func", "in", "self", ".", "criteria", ".", "items", "(", ")", ":", "\n", "            ", "display_values", ".", "append", "(", "name", ")", "\n", "\n", "# switch to train mode", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_start_time2", "=", "time", ".", "time", "(", ")", "\n", "\n", "batch_num", "=", "0", "\n", "num_data_points", "=", "len", "(", "self", ".", "train_loader", ")", "//", "self", ".", "args", ".", "virtual_batch_multiplier", "\n", "if", "num_data_points", ">", "10000", ":", "\n", "            ", "num_data_points", "=", "num_data_points", "//", "5", "\n", "\n", "", "starting_learning_rate", "=", "get_average_learning_rate", "(", "self", ".", "optimizer", ")", "\n", "while", "True", ":", "\n", "            ", "if", "batch_num", "==", "0", ":", "\n", "                ", "end", "=", "time", ".", "time", "(", ")", "\n", "epoch_start_time2", "=", "time", ".", "time", "(", ")", "\n", "", "if", "num_data_points", "==", "batch_num", ":", "\n", "                ", "break", "\n", "", "self", ".", "percent", "=", "batch_num", "/", "num_data_points", "\n", "loss_dict", "=", "None", "\n", "loss", "=", "0", "\n", "\n", "# accumulate gradients over multiple runs of input", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "virtual_batch_multiplier", ")", ":", "\n", "                ", "data_start", "=", "time", ".", "time", "(", ")", "\n", "input", ",", "target", "=", "self", ".", "train_prefetcher", ".", "next", "(", ")", "\n", "average_meters", "[", "'data_time'", "]", ".", "update", "(", "time", ".", "time", "(", ")", "-", "data_start", ")", "\n", "loss_dict2", ",", "loss2", "=", "self", ".", "train_batch", "(", "input", ",", "target", ")", "\n", "loss", "+=", "loss2", "\n", "if", "loss_dict", "is", "None", ":", "\n", "                    ", "loss_dict", "=", "loss_dict2", "\n", "", "else", ":", "\n", "                    ", "for", "key", ",", "value", "in", "loss_dict2", ".", "items", "(", ")", ":", "\n", "                        ", "loss_dict", "[", "key", "]", "+=", "value", "\n", "\n", "# divide by the number of accumulations", "\n", "", "", "", "loss", "/=", "self", ".", "args", ".", "virtual_batch_multiplier", "\n", "for", "key", ",", "value", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                ", "loss_dict", "[", "key", "]", "=", "value", "/", "self", ".", "args", ".", "virtual_batch_multiplier", "\n", "\n", "# do the weight updates and set gradients back to zero", "\n", "", "self", ".", "update", "(", ")", "\n", "\n", "self", ".", "loss_history", ".", "append", "(", "float", "(", "loss", ")", ")", "\n", "ttest_p", ",", "z_diff", "=", "self", ".", "learning_rate_schedule", "(", ")", "\n", "\n", "\n", "for", "name", ",", "value", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "average_meters", "[", "name", "]", ".", "update", "(", "value", ".", "data", ")", "\n", "", "except", ":", "\n", "                    ", "average_meters", "[", "name", "]", ".", "update", "(", "value", ")", "\n", "\n", "\n", "\n", "", "", "elapsed_time_for_epoch", "=", "(", "time", ".", "time", "(", ")", "-", "epoch_start_time2", ")", "\n", "eta", "=", "(", "elapsed_time_for_epoch", "/", "(", "batch_num", "+", ".2", ")", ")", "*", "(", "num_data_points", "-", "batch_num", ")", "\n", "if", "eta", ">=", "24", "*", "3600", ":", "\n", "                ", "eta", "=", "24", "*", "3600", "-", "1", "\n", "\n", "\n", "", "batch_num", "+=", "1", "\n", "current_learning_rate", "=", "get_average_learning_rate", "(", "self", ".", "optimizer", ")", "\n", "if", "True", ":", "\n", "\n", "                ", "to_print", "=", "{", "}", "\n", "to_print", "[", "'ep'", "]", "=", "(", "'{0}:'", ")", ".", "format", "(", "self", ".", "epoch", ")", "\n", "to_print", "[", "'#/{0}'", ".", "format", "(", "num_data_points", ")", "]", "=", "(", "'{0}'", ")", ".", "format", "(", "batch_num", ")", "\n", "to_print", "[", "'lr'", "]", "=", "(", "'{0:0.3g}-{1:0.3g}'", ")", ".", "format", "(", "starting_learning_rate", ",", "current_learning_rate", ")", "\n", "to_print", "[", "'eta'", "]", "=", "(", "'{0}'", ")", ".", "format", "(", "time", ".", "strftime", "(", "\"%H:%M:%S\"", ",", "time", ".", "gmtime", "(", "int", "(", "eta", ")", ")", ")", ")", "\n", "\n", "to_print", "[", "'d%'", "]", "=", "(", "'{0:0.2g}'", ")", ".", "format", "(", "100", "*", "average_meters", "[", "'data_time'", "]", ".", "sum", "/", "elapsed_time_for_epoch", ")", "\n", "for", "name", "in", "display_values", ":", "\n", "                    ", "meter", "=", "average_meters", "[", "name", "]", "\n", "to_print", "[", "name", "]", "=", "(", "'{meter.avg:.4g}'", ")", ".", "format", "(", "meter", "=", "meter", ")", "\n", "", "if", "batch_num", "<", "num_data_points", "-", "1", ":", "\n", "                    ", "to_print", "[", "'ETA'", "]", "=", "(", "'{0}'", ")", ".", "format", "(", "time", ".", "strftime", "(", "\"%H:%M:%S\"", ",", "time", ".", "gmtime", "(", "int", "(", "eta", "+", "elapsed_time_for_epoch", ")", ")", ")", ")", "\n", "to_print", "[", "'ttest'", "]", "=", "(", "'{0:0.3g},{1:0.3g}'", ")", ".", "format", "(", "z_diff", ",", "ttest_p", ")", "\n", "", "if", "batch_num", "%", "self", ".", "args", ".", "print_frequency", "==", "0", ":", "\n", "                    ", "print_table", "(", "self", ".", "progress_table", "+", "[", "[", "to_print", "]", "]", ")", "\n", "\n", "\n", "\n", "", "", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_start_time", "\n", "stats", "=", "{", "'batches'", ":", "num_data_points", ",", "\n", "'learning_rate'", ":", "current_learning_rate", ",", "\n", "'Epoch time'", ":", "epoch_time", ",", "\n", "}", "\n", "for", "name", "in", "display_values", ":", "\n", "            ", "meter", "=", "average_meters", "[", "name", "]", "\n", "stats", "[", "name", "]", "=", "meter", ".", "avg", "\n", "\n", "", "data_time", "=", "average_meters", "[", "'data_time'", "]", ".", "sum", "\n", "\n", "to_print", "[", "'eta'", "]", "=", "(", "'{0}'", ")", ".", "format", "(", "time", ".", "strftime", "(", "\"%H:%M:%S\"", ",", "time", ".", "gmtime", "(", "int", "(", "epoch_time", ")", ")", ")", ")", "\n", "\n", "return", "[", "to_print", "]", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.train_batch": [[627, 648], ["input.float.float.float", "train_taskonomy.Trainer.model", "train_taskonomy.Trainer.criteria.items", "loss_dict[].clone", "criterion_fun", "loss_dict[].clone.backward", "apex.amp.scale_loss", "scaled_loss.backward"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.backward", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.backward"], ["", "def", "train_batch", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "\n", "        ", "loss_dict", "=", "{", "}", "\n", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "input", ")", "\n", "first_loss", "=", "None", "\n", "for", "c_name", ",", "criterion_fun", "in", "self", ".", "criteria", ".", "items", "(", ")", ":", "\n", "            ", "if", "first_loss", "is", "None", ":", "first_loss", "=", "c_name", "\n", "loss_dict", "[", "c_name", "]", "=", "criterion_fun", "(", "output", ",", "target", ")", "\n", "\n", "", "loss", "=", "loss_dict", "[", "first_loss", "]", ".", "clone", "(", ")", "\n", "loss", "=", "loss", "/", "self", ".", "args", ".", "virtual_batch_multiplier", "\n", "\n", "if", "self", ".", "args", ".", "fp16", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "return", "loss_dict", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.update": [[650, 653], ["train_taskonomy.Trainer.optimizer.step", "train_taskonomy.Trainer.optimizer.zero_grad"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.validate": [[655, 712], ["collections.defaultdict", "train_taskonomy.Trainer.model.eval", "time.time", "len", "train_taskonomy.data_prefetcher", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "train_taskonomy.Trainer.criteria.keys", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "time.time", "len", "time.strftime", "float", "len", "train_taskonomy.data_prefetcher.next", "train_taskonomy.Trainer.model", "train_taskonomy.Trainer.criteria.items", "loss_dict.items", "train_taskonomy.Trainer.criteria.keys", "time.gmtime", "time.time", "criterion_fun", "time.strftime", "train_taskonomy.print_table", "int", "average_meters[].update", "len", "time.gmtime", "average_meters[].update", "time.time", "int"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.data_prefetcher.next", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.print_table", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.update", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.update"], ["", "def", "validate", "(", "self", ",", "train_table", ")", ":", "\n", "        ", "average_meters", "=", "defaultdict", "(", "AverageMeter", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "batch_num", "=", "0", "\n", "num_data_points", "=", "len", "(", "self", ".", "val_loader", ")", "\n", "\n", "prefetcher", "=", "data_prefetcher", "(", "self", ".", "val_loader", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "val_loader", ")", ")", ":", "\n", "                ", "input", ",", "target", "=", "prefetcher", ".", "next", "(", ")", "\n", "\n", "\n", "if", "batch_num", "==", "0", ":", "\n", "                    ", "epoch_start_time2", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "output", "=", "self", ".", "model", "(", "input", ")", "\n", "\n", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "for", "c_name", ",", "criterion_fun", "in", "self", ".", "criteria", ".", "items", "(", ")", ":", "\n", "                    ", "loss_dict", "[", "c_name", "]", "=", "criterion_fun", "(", "output", ",", "target", ")", "\n", "\n", "", "batch_num", "=", "i", "+", "1", "\n", "\n", "for", "name", ",", "value", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "average_meters", "[", "name", "]", ".", "update", "(", "value", ".", "data", ")", "\n", "", "except", ":", "\n", "                        ", "average_meters", "[", "name", "]", ".", "update", "(", "value", ")", "\n", "", "", "eta", "=", "(", "(", "time", ".", "time", "(", ")", "-", "epoch_start_time2", ")", "/", "(", "batch_num", "+", ".2", ")", ")", "*", "(", "len", "(", "self", ".", "val_loader", ")", "-", "batch_num", ")", "\n", "\n", "to_print", "=", "{", "}", "\n", "to_print", "[", "'#/{0}'", ".", "format", "(", "num_data_points", ")", "]", "=", "(", "'{0}'", ")", ".", "format", "(", "batch_num", ")", "\n", "to_print", "[", "'eta'", "]", "=", "(", "'{0}'", ")", ".", "format", "(", "time", ".", "strftime", "(", "\"%H:%M:%S\"", ",", "time", ".", "gmtime", "(", "int", "(", "eta", ")", ")", ")", ")", "\n", "for", "name", "in", "self", ".", "criteria", ".", "keys", "(", ")", ":", "\n", "                    ", "meter", "=", "average_meters", "[", "name", "]", "\n", "to_print", "[", "name", "]", "=", "(", "'{meter.avg:.4g}'", ")", ".", "format", "(", "meter", "=", "meter", ")", "\n", "", "progress", "=", "train_table", "+", "[", "to_print", "]", "\n", "if", "batch_num", "%", "self", ".", "args", ".", "print_frequency", "==", "0", ":", "\n", "                    ", "print_table", "(", "self", ".", "progress_table", "+", "[", "progress", "]", ")", "\n", "\n", "", "", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_start_time", "\n", "\n", "stats", "=", "{", "'batches'", ":", "len", "(", "self", ".", "val_loader", ")", ",", "\n", "'Epoch time'", ":", "epoch_time", ",", "\n", "}", "\n", "ultimate_loss", "=", "None", "\n", "for", "name", "in", "self", ".", "criteria", ".", "keys", "(", ")", ":", "\n", "            ", "meter", "=", "average_meters", "[", "name", "]", "\n", "stats", "[", "name", "]", "=", "meter", ".", "avg", "\n", "", "ultimate_loss", "=", "stats", "[", "'Loss'", "]", "\n", "to_print", "[", "'eta'", "]", "=", "(", "'{0}'", ")", ".", "format", "(", "time", ".", "strftime", "(", "\"%H:%M:%S\"", ",", "time", ".", "gmtime", "(", "int", "(", "epoch_time", ")", ")", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "float", "(", "ultimate_loss", ")", ",", "progress", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.adjust_learning_rate": [[713, 716], ["train_taskonomy.Trainer.set_learning_rate"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.set_learning_rate"], ["", "def", "adjust_learning_rate", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr", "=", "self", ".", "lr0", "*", "(", "0.50", "**", "(", "self", ".", "ticks", ")", ")", "\n", "self", ".", "set_learning_rate", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.set_learning_rate": [[717, 720], ["None"], "methods", ["None"], ["", "def", "set_learning_rate", "(", "self", ",", "lr", ")", ":", "\n", "        ", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.main": [[105, 243], ["print", "print", "torch.cuda.Stream", "torch.cuda.Stream", "torch.cuda.Stream", "taskonomy_losses.get_losses_and_tasks", "print", "criteria.items", "print", "taskonomy_loader.TaskonomyLoader", "print", "print", "print", "torch.nn.DataParallel().cuda.task_to_decoder.values", "torch.nn.DataParallel().cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train_taskonomy.get_eval_loader", "train_taskonomy.Trainer", "train_taskonomy.Trainer.train", "platform.node", "print", "print", "list", "len", "len", "list", "train_taskonomy.main.get_n_params"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.None.taskonomy_losses.get_losses_and_tasks", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.get_eval_loader", "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.Trainer.train"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "print", "(", "'starting on'", ",", "platform", ".", "node", "(", ")", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "        ", "print", "(", "'cuda gpus:'", ",", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ")", "\n", "\n", "", "main_stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "\n", "if", "args", ".", "fp16", ":", "\n", "        ", "assert", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ",", "\"fp16 mode requires cudnn backend to be enabled.\"", "\n", "print", "(", "'Got fp16!'", ")", "\n", "\n", "", "taskonomy_loss", ",", "losses", ",", "criteria", ",", "taskonomy_tasks", "=", "get_losses_and_tasks", "(", "args", ")", "\n", "\n", "print", "(", "\"including the following tasks:\"", ",", "list", "(", "losses", ".", "keys", "(", ")", ")", ")", "\n", "\n", "criteria2", "=", "{", "'Loss'", ":", "taskonomy_loss", "}", "\n", "for", "key", ",", "value", "in", "criteria", ".", "items", "(", ")", ":", "\n", "        ", "criteria2", "[", "key", "]", "=", "value", "\n", "", "criteria", "=", "criteria2", "\n", "\n", "print", "(", "'data_dir ='", ",", "args", ".", "data_dir", ",", "len", "(", "args", ".", "data_dir", ")", ")", "\n", "\n", "if", "args", ".", "no_augment", ":", "\n", "        ", "augment", "=", "False", "\n", "", "else", ":", "\n", "        ", "augment", "=", "True", "\n", "", "train_dataset", "=", "TaskonomyLoader", "(", "\n", "args", ".", "data_dir", ",", "\n", "label_set", "=", "taskonomy_tasks", ",", "\n", "model_whitelist", "=", "'train_models.txt'", ",", "\n", "model_limit", "=", "args", ".", "model_limit", ",", "\n", "output_size", "=", "(", "args", ".", "image_size", ",", "args", ".", "image_size", ")", ",", "\n", "half_sized_output", "=", "args", ".", "half_sized_output", ",", "\n", "augment", "=", "augment", ")", "\n", "\n", "print", "(", "'Found'", ",", "len", "(", "train_dataset", ")", ",", "'training instances.'", ")", "\n", "\n", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "tasks", "=", "losses", ".", "keys", "(", ")", ",", "half_sized_output", "=", "args", ".", "half_sized_output", ")", "\n", "\n", "def", "get_n_params", "(", "model", ")", ":", "\n", "        ", "pp", "=", "0", "\n", "for", "p", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "#print(p.size())", "\n", "            ", "nn", "=", "1", "\n", "for", "s", "in", "list", "(", "p", ".", "size", "(", ")", ")", ":", "\n", "\n", "                ", "nn", "=", "nn", "*", "s", "\n", "", "pp", "+=", "nn", "\n", "", "return", "pp", "\n", "\n", "", "print", "(", "\"Model has\"", ",", "get_n_params", "(", "model", ")", ",", "\"parameters\"", ")", "\n", "try", ":", "\n", "        ", "print", "(", "\"Encoder has\"", ",", "get_n_params", "(", "model", ".", "encoder", ")", ",", "\"parameters\"", ")", "\n", "#flops, params=get_model_complexity_info(model.encoder,(3,256,256), as_strings=False, print_per_layer_stat=False)", "\n", "#print(\"Encoder has\", flops, \"Flops and\", params, \"parameters,\")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"Each encoder has\"", ",", "get_n_params", "(", "model", ".", "encoders", "[", "0", "]", ")", ",", "\"parameters\"", ")", "\n", "", "for", "decoder", "in", "model", ".", "task_to_decoder", ".", "values", "(", ")", ":", "\n", "        ", "print", "(", "\"Decoder has\"", ",", "get_n_params", "(", "decoder", ")", ",", "\"parameters\"", ")", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "#tested with adamW. Poor results observed", "\n", "#optimizer = adamW.AdamW(model.parameters(),lr= args.lr,weight_decay=args.weight_decay,eps=1e-3)", "\n", "\n", "\n", "# Initialize Amp.  Amp accepts either values or strings for the optional override arguments,", "\n", "# for convenient interoperation with argparse.", "\n", "if", "args", ".", "fp16", ":", "\n", "        ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "opt_level", "=", "'O1'", ",", "\n", "loss_scale", "=", "\"dynamic\"", ",", "\n", "verbosity", "=", "0", "\n", ")", "\n", "print", "(", "'Got fp16!'", ")", "\n", "\n", "#args.lr = args.lr*float(args.batch_size*args.virtual_batch_multiplier)/256.", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "checkpoint", "=", "None", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "if", "args", ".", "pretrained", "!=", "''", ":", "\n", "        ", "print", "(", "'loading pretrained weights for '", "+", "args", ".", "arch", "+", "' ('", "+", "args", ".", "pretrained", "+", "')'", ")", "\n", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "sync_batch_norm", ":", "\n", "            ", "from", "sync_batchnorm", "import", "patch_replication_callback", "\n", "patch_replication_callback", "(", "model", ")", "\n", "\n", "", "", "print", "(", "'Virtual batch size ='", ",", "args", ".", "batch_size", "*", "args", ".", "virtual_batch_multiplier", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", "and", "'optimizer'", "in", "checkpoint", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "None", ")", "\n", "\n", "val_loader", "=", "get_eval_loader", "(", "args", ".", "data_dir", ",", "taskonomy_tasks", ",", "args", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "train_loader", ",", "val_loader", ",", "model", ",", "optimizer", ",", "criteria", ",", "args", ",", "checkpoint", ")", "\n", "if", "args", ".", "validate", ":", "\n", "        ", "trainer", ".", "progress_table", "=", "[", "]", "\n", "trainer", ".", "validate", "(", "[", "{", "}", "]", ")", "\n", "print", "(", ")", "\n", "return", "\n", "\n", "\n", "", "if", "args", ".", "test", ":", "\n", "        ", "trainer", ".", "progress_table", "=", "[", "]", "\n", "# replace val loader with a loader that loads test data", "\n", "trainer", ".", "val_loader", "=", "get_eval_loader", "(", "args", ".", "data_dir", ",", "taskonomy_tasks", ",", "args", ",", "model_limit", "=", "(", "1000", ",", "2000", ")", ")", "\n", "trainer", ".", "validate", "(", "[", "{", "}", "]", ")", "\n", "return", "\n", "\n", "", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.get_eval_loader": [[245, 262], ["print", "taskonomy_loader.TaskonomyLoader", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "max"], "function", ["None"], ["", "def", "get_eval_loader", "(", "datadir", ",", "label_set", ",", "args", ",", "model_limit", "=", "1000", ")", ":", "\n", "    ", "print", "(", "datadir", ")", "\n", "\n", "val_dataset", "=", "TaskonomyLoader", "(", "datadir", ",", "\n", "label_set", "=", "label_set", ",", "\n", "model_whitelist", "=", "'val_models.txt'", ",", "\n", "model_limit", "=", "model_limit", ",", "\n", "output_size", "=", "(", "args", ".", "image_size", ",", "args", ".", "image_size", ")", ",", "\n", "half_sized_output", "=", "args", ".", "half_sized_output", ",", "\n", "augment", "=", "False", ")", "\n", "print", "(", "'Found'", ",", "len", "(", "val_dataset", ")", ",", "'validation instances.'", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "max", "(", "args", ".", "batch_size", "//", "2", ",", "1", ")", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "None", ")", "\n", "return", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.on_keyboared_interrupt": [[265, 268], ["sys.exit"], "function", ["None"], ["def", "on_keyboared_interrupt", "(", "x", ",", "y", ")", ":", "\n", "#print()", "\n", "    ", "sys", ".", "exit", "(", "1", ")", "\n", "", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "on_keyboared_interrupt", ")", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.get_average_learning_rate": [[270, 278], ["len"], "function", ["None"], ["def", "get_average_learning_rate", "(", "optimizer", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "optimizer", ".", "learning_rate", "\n", "", "except", ":", "\n", "        ", "s", "=", "0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "s", "+=", "param_group", "[", "'lr'", "]", "\n", "", "return", "s", "/", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.None.train_taskonomy.print_table": [[320, 351], ["collections.defaultdict", "enumerate", "print", "len", "print", "print", "print", "print", "range", "enumerate", "to_print.items", "print", "enumerate", "len", "print", "print", "to_print.items", "print", "to_print.items", "max", "print", "max", "len", "len"], "function", ["None"], ["", "def", "print_table", "(", "table_list", ",", "go_back", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "table_list", ")", "==", "0", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", ")", "\n", "return", "\n", "", "if", "go_back", ":", "\n", "        ", "print", "(", "\"\\033[F\"", ",", "end", "=", "''", ")", "\n", "print", "(", "\"\\033[K\"", ",", "end", "=", "''", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "table_list", ")", ")", ":", "\n", "            ", "print", "(", "\"\\033[F\"", ",", "end", "=", "''", ")", "\n", "print", "(", "\"\\033[K\"", ",", "end", "=", "''", ")", "\n", "\n", "\n", "", "", "lens", "=", "defaultdict", "(", "int", ")", "\n", "for", "i", "in", "table_list", ":", "\n", "        ", "for", "ii", ",", "to_print", "in", "enumerate", "(", "i", ")", ":", "\n", "            ", "for", "title", ",", "val", "in", "to_print", ".", "items", "(", ")", ":", "\n", "                ", "lens", "[", "(", "title", ",", "ii", ")", "]", "=", "max", "(", "lens", "[", "(", "title", ",", "ii", ")", "]", ",", "max", "(", "len", "(", "title", ")", ",", "len", "(", "val", ")", ")", ")", "\n", "\n", "\n", "# printed_table_list_header = []", "\n", "", "", "", "for", "ii", ",", "to_print", "in", "enumerate", "(", "table_list", "[", "0", "]", ")", ":", "\n", "        ", "for", "title", ",", "val", "in", "to_print", ".", "items", "(", ")", ":", "\n", "\n", "            ", "print", "(", "'{0:^{1}}'", ".", "format", "(", "title", ",", "lens", "[", "(", "title", ",", "ii", ")", "]", ")", ",", "end", "=", "\" \"", ")", "\n", "", "", "for", "i", "in", "table_list", ":", "\n", "        ", "print", "(", ")", "\n", "for", "ii", ",", "to_print", "in", "enumerate", "(", "i", ")", ":", "\n", "            ", "for", "title", ",", "val", "in", "to_print", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "'{0:^{1}}'", ".", "format", "(", "val", ",", "lens", "[", "(", "title", ",", "ii", ")", "]", ")", ",", "end", "=", "\" \"", ",", "flush", "=", "True", ")", "\n", "", "", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 62], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[63, 94], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[95, 104], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[105, 127], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[128, 146], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[204, 209], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[267, 272], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[331, 336], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[338, 351], ["None"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.convert_model": [[353, 395], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__", "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.network_selection.make_plots.make_plot": [[11, 106], ["plotly.Figure", "enumerate", "go.Figure.update_layout", "go.Figure.write_image", "curves.items", "go.Figure.add_trace", "plotly.Scatter", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "len"], "function", ["None"], ["def", "make_plot", "(", "curves", ",", "name", ")", ":", "\n", "#color_list = [\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#D55E00\", \"#0072B2\",  \"#CC79A7\"]", "\n", "    ", "budget", "=", "[", "1", ",", "1.5", ",", "2", ",", "2.5", ",", "3", ",", "3.5", ",", "4", ",", "4.5", ",", "5", "]", "\n", "\n", "name_to_name", "=", "{", "'sener_et_al'", ":", "'Sener et al.'", ",", "\n", "'gradnorm'", ":", "'GradNorm'", ",", "\n", "'worst'", ":", "'Worst Network Choice'", ",", "\n", "'all_in_one'", ":", "'Single Traditional<br>Multi-task Network'", ",", "\n", "'random'", ":", "'Random gropings'", ",", "\n", "'independent'", ":", "'Five Independent Networks'", ",", "\n", "'esa'", ":", "'ESA (ours) 5.3.1'", ",", "\n", "'hoa'", ":", "'HOA (ours) 5.3.2'", ",", "\n", "'optimal'", ":", "'Optimal Network<br>Choice (ours)'", "}", "\n", "\n", "name_to_color", "=", "{", "'sener_et_al'", ":", "7", ",", "\n", "'gradnorm'", ":", "8", ",", "\n", "'worst'", ":", "0", ",", "\n", "'all_in_one'", ":", "1", ",", "\n", "'random'", ":", "2", ",", "\n", "'independent'", ":", "3", ",", "\n", "'esa'", ":", "4", ",", "\n", "'hoa'", ":", "5", ",", "\n", "'optimal'", ":", "6", "}", "\n", "\n", "fig", "=", "go", ".", "Figure", "(", ")", "\n", "\n", "symbols", "=", "[", "'circle'", ",", "'square'", ",", "'diamond'", ",", "'star'", ",", "'hexagram'", ",", "'star-triangle-up'", ",", "'asterisk'", ",", "'y-up'", ",", "'cross'", "]", "\n", "\n", "for", "i", ",", "(", "key", ",", "val", ")", "in", "enumerate", "(", "curves", ".", "items", "(", ")", ")", ":", "\n", "        ", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "x", "=", "budget", ",", "y", "=", "val", ",", "name", "=", "name_to_name", "[", "key", "]", ",", "connectgaps", "=", "True", ",", "marker_symbol", "=", "name_to_color", "[", "key", "]", ",", "marker_size", "=", "10", ",", "line", "=", "dict", "(", "color", "=", "px", ".", "colors", ".", "qualitative", ".", "G10", "[", "name_to_color", "[", "key", "]", "]", ")", ")", ")", "\n", "\n", "#line=dict(color=)", "\n", "\n", "# Create and style traces", "\n", "# if 'sener_et_al' in curves:", "\n", "#     fig.add_trace(go.Scatter(x=budget, y=curves['sener_et_al'], name='Sener et al.',connectgaps=True ,))", "\n", "# if 'gradnorm' in curves:", "\n", "#     fig.add_trace(go.Scatter(x=budget, y=curves['gradnorm'], name='GradNorm',connectgaps=True ))", "\n", "# fig.add_trace(go.Scatter(x=budget, y=curves['worst'], name='Worst Network<br>  Choice',connectgaps=True ))", "\n", "# fig.add_trace(go.Scatter(x=budget, y=curves['all_in_one'], name='Single Traditional<br>  Multi-task Network',connectgaps=True ))", "\n", "# fig.add_trace(go.Scatter(x=budget, y=curves['random'], name='Random Groupings',connectgaps=True ))", "\n", "# fig.add_trace(go.Scatter(x=budget, y=curves['independent'], name='Five Independent<br>  Networks',connectgaps=True ))", "\n", "# fig.add_trace(go.Scatter(x=budget, y=curves['esa'], name='ESA (ours) 3.3.1',connectgaps=True ))", "\n", "# fig.add_trace(go.Scatter(x=budget, y=curves['hoa'], name='HOA (ours) 3.3.2',connectgaps=True ))", "\n", "# fig.add_trace(go.Scatter(x=budget, y=curves['optimal'], name='Optimal Network<br>  Choice (ours)',connectgaps=True ))", "\n", "\n", "\n", "# Edit the layout", "\n", "", "fig", ".", "update_layout", "(", "title", "=", "dict", "(", "text", "=", "'Performance vs Compute'", ",", "font", "=", "dict", "(", "size", "=", "22", ",", "color", "=", "'black'", ")", ")", ",", "\n", "xaxis_title", "=", "dict", "(", "text", "=", "'Inference Time Cost'", ",", "font", "=", "dict", "(", "size", "=", "18", ",", "color", "=", "'black'", ")", ")", ",", "\n", "yaxis_title", "=", "dict", "(", "text", "=", "'Total Loss (lower is better)'", ",", "font", "=", "dict", "(", "size", "=", "18", ",", "color", "=", "'black'", ")", ")", ",", "\n", "legend", "=", "dict", "(", "font", "=", "dict", "(", "color", "=", "'black'", ",", "size", "=", "16", ")", ")", ",", "\n", "#colorway=px.colors.qualitative.G10,", "\n", "xaxis", "=", "dict", "(", "\n", "showline", "=", "True", ",", "\n", "showgrid", "=", "False", ",", "\n", "showticklabels", "=", "True", ",", "\n", "linecolor", "=", "'rgb(0, 0, 0)'", ",", "\n", "linewidth", "=", "1", ",", "\n", "ticks", "=", "'outside'", ",", "\n", "tickfont", "=", "dict", "(", "\n", "family", "=", "'Arial'", ",", "\n", "size", "=", "15", ",", "\n", "color", "=", "'rgb(0, 0, 0)'", ",", "\n", ")", ",", "\n", ")", ",", "\n", "yaxis", "=", "dict", "(", "\n", "showgrid", "=", "True", ",", "\n", "#zeroline=False,", "\n", "ticks", "=", "'outside'", ",", "\n", "showline", "=", "True", ",", "\n", "showticklabels", "=", "True", ",", "\n", "linecolor", "=", "'rgb(0, 0, 0)'", ",", "\n", "linewidth", "=", "1", ",", "\n", "tickfont", "=", "dict", "(", "\n", "family", "=", "'Arial'", ",", "\n", "size", "=", "15", ",", "\n", "color", "=", "'rgb(0, 0, 0)'", ",", "\n", ")", ",", "\n", ")", ",", "\n", "autosize", "=", "False", ",", "\n", "margin", "=", "dict", "(", "\n", "autoexpand", "=", "False", ",", "\n", "l", "=", "58", ",", "\n", "r", "=", "240", ",", "\n", "t", "=", "32", ",", "\n", "b", "=", "47", "\n", ")", ",", "\n", "width", "=", "600", ",", "\n", "height", "=", "100", "+", "27", "*", "len", "(", "curves", ")", ",", "\n", "#showlegend=False,", "\n", "plot_bgcolor", "=", "'white'", "\n", ")", "\n", "\n", "fig", ".", "write_image", "(", "'plots/'", "+", "name", "+", "'.pdf'", ")", "\n", "#fig.show()", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.SeparableConv2d.__init__": [[35, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "max"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "groupsize", "=", "1", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "max", "(", "1", ",", "in_channels", "//", "groupsize", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.SeparableConv2d.forward": [[41, 45], ["xception_taskonomy_small.SeparableConv2d.conv1", "xception_taskonomy_small.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.Block.__init__": [[48, 87], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "rep.append", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_filters", ",", "out_filters", ",", "reps", ",", "strides", "=", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "out_filters", "!=", "in_filters", "or", "strides", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "1", ",", "stride", "=", "strides", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "in_filters", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "rep", "[", "0", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "", "if", "strides", "!=", "1", ":", "\n", "#rep.append(nn.AvgPool2d(3,strides,1))", "\n", "            ", "rep", ".", "append", "(", "nn", ".", "Conv2d", "(", "filters", ",", "filters", ",", "2", ",", "2", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.Block.forward": [[88, 98], ["xception_taskonomy_small.Block.rep", "xception_taskonomy_small.Block.skip", "xception_taskonomy_small.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "", "x", "+=", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.Encoder.__init__": [[100, 129], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "48", ",", "96", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "96", ",", "192", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "192", ",", "512", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "#self.block4=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "#self.block5=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "# self.block6=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "# self.block7=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "512", ",", "512", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "512", ",", "512", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "512", ",", "512", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "512", ",", "512", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "#self.block12=Block(728,1024,2,2,start_with_relu=True,grow_first=False)", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "512", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "#self.conv3 = SeparableConv2d(1024,1536,3,1,1)", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.Encoder.forward": [[135, 167], ["xception_taskonomy_small.Encoder.conv1", "xception_taskonomy_small.Encoder.bn1", "xception_taskonomy_small.Encoder.relu", "xception_taskonomy_small.Encoder.conv2", "xception_taskonomy_small.Encoder.bn2", "xception_taskonomy_small.Encoder.relu", "xception_taskonomy_small.Encoder.block1", "xception_taskonomy_small.Encoder.block2", "xception_taskonomy_small.Encoder.block3", "xception_taskonomy_small.Encoder.block8", "xception_taskonomy_small.Encoder.block9", "xception_taskonomy_small.Encoder.block10", "xception_taskonomy_small.Encoder.block11", "xception_taskonomy_small.Encoder.conv3", "xception_taskonomy_small.Encoder.bn3", "xception_taskonomy_small.Encoder.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "# x = self.block4(x)", "\n", "# x = self.block5(x)", "\n", "# x = self.block6(x)", "\n", "# x = self.block7(x)", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "#x = self.block12(x)", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "#x = self.relu(x)", "\n", "\n", "\n", "#x = self.conv4(x)", "\n", "#x = self.bn4(x)", "\n", "\n", "representation", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.EncoderHalf.__init__": [[169, 198], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EncoderHalf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "24", ",", "48", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "48", ",", "64", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "64", ",", "128", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "128", ",", "360", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "#self.block4=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "#self.block5=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "# self.block6=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "# self.block7=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "360", ",", "360", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "360", ",", "360", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "360", ",", "360", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "360", ",", "360", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "#self.block12=Block(728,1024,2,2,start_with_relu=True,grow_first=False)", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "360", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "#self.conv3 = SeparableConv2d(1024,1536,3,1,1)", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.EncoderHalf.forward": [[204, 236], ["xception_taskonomy_small.EncoderHalf.conv1", "xception_taskonomy_small.EncoderHalf.bn1", "xception_taskonomy_small.EncoderHalf.relu", "xception_taskonomy_small.EncoderHalf.conv2", "xception_taskonomy_small.EncoderHalf.bn2", "xception_taskonomy_small.EncoderHalf.relu", "xception_taskonomy_small.EncoderHalf.block1", "xception_taskonomy_small.EncoderHalf.block2", "xception_taskonomy_small.EncoderHalf.block3", "xception_taskonomy_small.EncoderHalf.block8", "xception_taskonomy_small.EncoderHalf.block9", "xception_taskonomy_small.EncoderHalf.block10", "xception_taskonomy_small.EncoderHalf.block11", "xception_taskonomy_small.EncoderHalf.conv3", "xception_taskonomy_small.EncoderHalf.bn3", "xception_taskonomy_small.EncoderHalf.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "# x = self.block4(x)", "\n", "# x = self.block5(x)", "\n", "# x = self.block6(x)", "\n", "# x = self.block7(x)", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "#x = self.block12(x)", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "#x = self.relu(x)", "\n", "\n", "\n", "#x = self.conv4(x)", "\n", "#x = self.bn4(x)", "\n", "\n", "representation", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.EncoderQuad.__init__": [[239, 269], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EncoderQuad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'entering quad constructor'", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "48", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "48", ",", "96", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "96", ",", "192", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "192", ",", "384", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "384", ",", "1024", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "#self.block4=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "#self.block5=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "# self.block6=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "# self.block7=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "1024", ",", "1024", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "1024", ",", "1024", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "1024", ",", "1024", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "1024", ",", "1024", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "#self.block12=Block(728,1024,2,2,start_with_relu=True,grow_first=False)", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "#self.conv3 = SeparableConv2d(1024,1536,3,1,1)", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.EncoderQuad.forward": [[275, 307], ["xception_taskonomy_small.EncoderQuad.conv1", "xception_taskonomy_small.EncoderQuad.bn1", "xception_taskonomy_small.EncoderQuad.relu", "xception_taskonomy_small.EncoderQuad.conv2", "xception_taskonomy_small.EncoderQuad.bn2", "xception_taskonomy_small.EncoderQuad.relu", "xception_taskonomy_small.EncoderQuad.block1", "xception_taskonomy_small.EncoderQuad.block2", "xception_taskonomy_small.EncoderQuad.block3", "xception_taskonomy_small.EncoderQuad.block8", "xception_taskonomy_small.EncoderQuad.block9", "xception_taskonomy_small.EncoderQuad.block10", "xception_taskonomy_small.EncoderQuad.block11", "xception_taskonomy_small.EncoderQuad.conv3", "xception_taskonomy_small.EncoderQuad.bn3", "xception_taskonomy_small.EncoderQuad.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "# x = self.block4(x)", "\n", "# x = self.block5(x)", "\n", "# x = self.block6(x)", "\n", "# x = self.block7(x)", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "#x = self.block12(x)", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "#x = self.relu(x)", "\n", "\n", "\n", "#x = self.conv4(x)", "\n", "#x = self.bn4(x)", "\n", "\n", "representation", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.EncoderDouble.__init__": [[309, 339], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.Block", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EncoderDouble", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'entering double constructor'", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "#self.block4=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "#self.block5=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "# self.block6=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "# self.block7=Block(768,768,3,1,start_with_relu=True,grow_first=True)", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "2", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "#self.block12=Block(728,1024,2,2,start_with_relu=True,grow_first=False)", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "728", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "#self.conv3 = SeparableConv2d(1024,1536,3,1,1)", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.EncoderDouble.forward": [[345, 377], ["xception_taskonomy_small.EncoderDouble.conv1", "xception_taskonomy_small.EncoderDouble.bn1", "xception_taskonomy_small.EncoderDouble.relu", "xception_taskonomy_small.EncoderDouble.conv2", "xception_taskonomy_small.EncoderDouble.bn2", "xception_taskonomy_small.EncoderDouble.relu", "xception_taskonomy_small.EncoderDouble.block1", "xception_taskonomy_small.EncoderDouble.block2", "xception_taskonomy_small.EncoderDouble.block3", "xception_taskonomy_small.EncoderDouble.block8", "xception_taskonomy_small.EncoderDouble.block9", "xception_taskonomy_small.EncoderDouble.block10", "xception_taskonomy_small.EncoderDouble.block11", "xception_taskonomy_small.EncoderDouble.conv3", "xception_taskonomy_small.EncoderDouble.bn3", "xception_taskonomy_small.EncoderDouble.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "# x = self.block4(x)", "\n", "# x = self.block5(x)", "\n", "# x = self.block6(x)", "\n", "# x = self.block7(x)", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "#x = self.block12(x)", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "#x = self.relu(x)", "\n", "\n", "\n", "#x = self.conv4(x)", "\n", "#x = self.bn4(x)", "\n", "\n", "representation", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.Decoder.__init__": [[388, 421], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "xception_taskonomy_small.SeparableConv2d", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_small.SeparableConv2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", "=", "32", ",", "num_classes", "=", "None", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "256", ",", "num_classes", ")", "\n", "#else:", "\n", "#    self.fc = nn.Linear(256, 1000)", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "\n", "self", ".", "conv_decode_res", "=", "SeparableConv2d", "(", "256", ",", "16", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_decode_res2", "=", "SeparableConv2d", "(", "256", ",", "96", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_conv_decode_res", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "bn_conv_decode_res2", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "96", ",", "96", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv1", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "conv_decode1", "=", "SeparableConv2d", "(", "96", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "64", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv_decode2", "=", "SeparableConv2d", "(", "64", ",", "64", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn_decode2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv3", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv_decode3", "=", "SeparableConv2d", "(", "32", ",", "32", ",", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "bn_decode3", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "32", ",", "32", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv4", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv_decode4", "=", "SeparableConv2d", "(", "48", ",", "output_channels", ",", "5", ",", "padding", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.Decoder.forward": [[423, 471], ["xception_taskonomy_small.Decoder.conv_decode_res", "xception_taskonomy_small.Decoder.bn_conv_decode_res", "xception_taskonomy_small.interpolate", "xception_taskonomy_small.Decoder.conv_decode_res2", "xception_taskonomy_small.Decoder.bn_conv_decode_res2", "xception_taskonomy_small.Decoder.upconv1", "xception_taskonomy_small.Decoder.bn_upconv1", "xception_taskonomy_small.Decoder.relu", "xception_taskonomy_small.Decoder.conv_decode1", "xception_taskonomy_small.Decoder.bn_decode1", "xception_taskonomy_small.Decoder.relu", "xception_taskonomy_small.Decoder.upconv2", "xception_taskonomy_small.Decoder.bn_upconv2", "xception_taskonomy_small.Decoder.relu", "xception_taskonomy_small.Decoder.conv_decode2", "xception_taskonomy_small.Decoder.bn_decode2", "xception_taskonomy_small.Decoder.relu", "xception_taskonomy_small.Decoder.upconv3", "xception_taskonomy_small.Decoder.bn_upconv3", "xception_taskonomy_small.Decoder.relu", "xception_taskonomy_small.Decoder.conv_decode3", "xception_taskonomy_small.Decoder.bn_decode3", "xception_taskonomy_small.Decoder.relu", "xception_taskonomy_small.Decoder.upconv4", "xception_taskonomy_small.Decoder.bn_upconv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xception_taskonomy_small.Decoder.relu", "xception_taskonomy_small.Decoder.conv_decode4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "xception_taskonomy_small.Decoder.view", "xception_taskonomy_small.Decoder.fc", "xception_taskonomy_small.Decoder.size"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.interpolate"], ["", "", "def", "forward", "(", "self", ",", "representation", ")", ":", "\n", "#batch_size=representation.shape[0]", "\n", "        ", "if", "self", ".", "num_classes", "is", "None", ":", "\n", "            ", "x2", "=", "self", ".", "conv_decode_res", "(", "representation", ")", "\n", "x2", "=", "self", ".", "bn_conv_decode_res", "(", "x2", ")", "\n", "x2", "=", "interpolate", "(", "x2", ",", "size", "=", "(", "256", ",", "256", ")", ")", "\n", "x", "=", "self", ".", "conv_decode_res2", "(", "representation", ")", "\n", "x", "=", "self", ".", "bn_conv_decode_res2", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn_decode2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv4", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x2", "]", ",", "1", ")", "\n", "#print(x.shape,self.static.shape)", "\n", "#x = torch.cat([x,x2,input,self.static.expand(batch_size,-1,-1,-1)],1)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode4", "(", "x", ")", "\n", "\n", "#z = x[:,19:22,:,:].clone()", "\n", "#y = (z).norm(2,1,True).clamp(min=1e-12)", "\n", "#print(y.shape,x[:,21:24,:,:].shape)", "\n", "#x[:,19:22,:,:]=z/y", "\n", "\n", "", "else", ":", "\n", "#print(representation.shape)", "\n", "            ", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "representation", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#print(x.shape)", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "#print(x.shape)", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.XceptionTaskonomySmall.__init__": [[477, 529], ["torch.Module.__init__", "print", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "xception_taskonomy_small.XceptionTaskonomySmall.modules", "print", "xception_taskonomy_small.EncoderQuad", "xception_taskonomy_small.Decoder", "xception_taskonomy_small.XceptionTaskonomySmall.task_to_decoder.values", "isinstance", "xception_taskonomy_small.EncoderDouble", "xception_taskonomy_small.Decoder", "m.weight.data.normal_", "isinstance", "xception_taskonomy_small.EncoderHalf", "xception_taskonomy_small.Encoder", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["def", "__init__", "(", "self", ",", "tasks", "=", "None", ",", "num_classes", "=", "None", ",", "ozan", "=", "False", ",", "half", "=", "False", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "XceptionTaskonomySmall", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'half is'", ",", "half", ")", "\n", "if", "half", "==", "'Quad'", ":", "\n", "            ", "print", "(", "'running quad code'", ")", "\n", "self", ".", "encoder", "=", "EncoderQuad", "(", ")", "\n", "", "elif", "half", "==", "'Double'", ":", "\n", "            ", "self", ".", "encoder", "=", "EncoderDouble", "(", ")", "\n", "", "elif", "half", ":", "\n", "            ", "self", ".", "encoder", "=", "EncoderHalf", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "Encoder", "(", ")", "\n", "", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "ozan", "=", "ozan", "\n", "self", ".", "task_to_decoder", "=", "{", "}", "\n", "if", "tasks", "is", "not", "None", ":", "\n", "            ", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "task", "==", "'segment_semantic'", ":", "\n", "                    ", "output_channels", "=", "18", "\n", "", "if", "task", "==", "'depth_zbuffer'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'normal'", ":", "\n", "                    ", "output_channels", "=", "3", "\n", "", "if", "task", "==", "'normal2'", ":", "\n", "                    ", "output_channels", "=", "3", "\n", "", "if", "task", "==", "'edge_occlusion'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'reshading'", ":", "\n", "                    ", "output_channels", "=", "3", "\n", "", "if", "task", "==", "'keypoints2d'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'edge_texture'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "decoder", "=", "Decoder", "(", "output_channels", ",", "num_classes", ")", "\n", "self", ".", "task_to_decoder", "[", "task", "]", "=", "decoder", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "task_to_decoder", "[", "'classification'", "]", "=", "Decoder", "(", "output_channels", "=", "0", ",", "num_classes", "=", "1000", ")", "\n", "\n", "", "self", ".", "decoders", "=", "nn", ".", "ModuleList", "(", "self", ".", "task_to_decoder", ".", "values", "(", ")", ")", "\n", "\n", "#------- init weights --------", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#-----------------------------", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.XceptionTaskonomySmall.input_per_task_losses": [[531, 543], ["open", "myfile.write", "str", "str"], "methods", ["None"], ["def", "input_per_task_losses", "(", "self", ",", "losses", ")", ":", "\n", "# if GradNormRepFunction.inital_task_losses is None:", "\n", "#     GradNormRepFunction.inital_task_losses=losses", "\n", "#     GradNormRepFunction.current_weights=[1 for i in losses]", "\n", "        ", "XceptionTaskonomySmall", ".", "count", "+=", "1", "\n", "if", "XceptionTaskonomySmall", ".", "count", "<", "200", ":", "\n", "            ", "GradNormRepFunction", ".", "inital_task_losses", "=", "losses", "\n", "GradNormRepFunction", ".", "current_weights", "=", "[", "1", "for", "i", "in", "losses", "]", "\n", "", "elif", "XceptionTaskonomySmall", ".", "count", "%", "20", "==", "0", ":", "\n", "            ", "with", "open", "(", "\"gradnorm_weights.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                ", "myfile", ".", "write", "(", "str", "(", "XceptionTaskonomySmall", ".", "count", ")", "+", "': '", "+", "str", "(", "GradNormRepFunction", ".", "current_weights", ")", "+", "'\\n'", ")", "\n", "", "", "GradNormRepFunction", ".", "current_task_losses", "=", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.XceptionTaskonomySmall.forward": [[545, 568], ["xception_taskonomy_small.XceptionTaskonomySmall.encoder", "len", "ozan_rep_fun.gradnorm_rep_function", "enumerate", "zip", "decoder", "len", "ozan_rep_fun.ozan_rep_function", "enumerate", "enumerate", "xception_taskonomy_small.XceptionTaskonomySmall.task_to_decoder.keys", "zip", "decoder", "zip", "decoder", "xception_taskonomy_small.XceptionTaskonomySmall.task_to_decoder.keys", "xception_taskonomy_small.XceptionTaskonomySmall.task_to_decoder.keys"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "rep", "=", "self", ".", "encoder", "(", "input", ")", "\n", "\n", "\n", "if", "self", ".", "tasks", "is", "None", ":", "\n", "            ", "return", "self", ".", "decoders", "[", "0", "]", "(", "rep", ")", "\n", "\n", "", "outputs", "=", "{", "'rep'", ":", "rep", "}", "\n", "if", "self", ".", "ozan", "==", "'gradnorm'", ":", "\n", "            ", "GradNormRepFunction", ".", "n", "=", "len", "(", "self", ".", "decoders", ")", "\n", "rep", "=", "gradnorm_rep_function", "(", "rep", ")", "\n", "for", "i", ",", "(", "task", ",", "decoder", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "task_to_decoder", ".", "keys", "(", ")", ",", "self", ".", "decoders", ")", ")", ":", "\n", "                ", "outputs", "[", "task", "]", "=", "decoder", "(", "rep", "[", "i", "]", ")", "\n", "", "", "elif", "self", ".", "ozan", ":", "\n", "            ", "OzanRepFunction", ".", "n", "=", "len", "(", "self", ".", "decoders", ")", "\n", "rep", "=", "ozan_rep_function", "(", "rep", ")", "\n", "for", "i", ",", "(", "task", ",", "decoder", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "task_to_decoder", ".", "keys", "(", ")", ",", "self", ".", "decoders", ")", ")", ":", "\n", "                ", "outputs", "[", "task", "]", "=", "decoder", "(", "rep", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "(", "task", ",", "decoder", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "task_to_decoder", ".", "keys", "(", ")", ",", "self", ".", "decoders", ")", ")", ":", "\n", "                ", "outputs", "[", "task", "]", "=", "decoder", "(", "rep", ")", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.interpolate": [[378, 385], ["inp.float.type", "inp.float.float", "torch.functional.interpolate", "out.half.type", "out.half.half"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.interpolate"], ["", "", "def", "interpolate", "(", "inp", ",", "size", ")", ":", "\n", "    ", "t", "=", "inp", ".", "type", "(", ")", "\n", "inp", "=", "inp", ".", "float", "(", ")", "\n", "out", "=", "nn", ".", "functional", ".", "interpolate", "(", "inp", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "if", "out", ".", "type", "(", ")", "!=", "t", ":", "\n", "        ", "out", "=", "out", ".", "half", "(", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small": [[571, 604], ["xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "xception_taskonomy_small", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "# try:", "\n", "#     num_classes = kwargs['num_classes']", "\n", "# except:", "\n", "#     num_classes=1000", "\n", "# if pretrained:", "\n", "#     kwargs['num_classes']=1000", "\n", "model", "=", "XceptionTaskonomySmall", "(", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#state_dict = model_zoo.load_url(model_urls['xception_taskonomy'])", "\n", "# for name,weight in state_dict.items():", "\n", "#     if 'pointwise' in name:", "\n", "#         state_dict[name]=weight.unsqueeze(-1).unsqueeze(-1)", "\n", "#     if 'conv1' in name and len(weight.shape)!=4:", "\n", "#         state_dict[name]=weight.unsqueeze(1)", "\n", "#model.load_state_dict(state_dict)", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "# if num_classes !=1000:", "\n", "#     model.fc = nn.Linear(2048, num_classes)", "\n", "# import torch", "\n", "# print(\"writing new state dict\")", "\n", "# torch.save(model.state_dict(),\"xception.pth.tar\")", "\n", "# print(\"done\")", "\n", "# import sys", "\n", "# sys.exit(1)", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small_ozan": [[606, 619], ["xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "xception_taskonomy_small_ozan", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomySmall", "(", "ozan", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small_gradnorm": [[621, 634], ["xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "xception_taskonomy_small_gradnorm", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomySmall", "(", "ozan", "=", "'gradnorm'", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small_half": [[636, 669], ["xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "xception_taskonomy_small_half", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "# try:", "\n", "#     num_classes = kwargs['num_classes']", "\n", "# except:", "\n", "#     num_classes=1000", "\n", "# if pretrained:", "\n", "#     kwargs['num_classes']=1000", "\n", "model", "=", "XceptionTaskonomySmall", "(", "half", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#state_dict = model_zoo.load_url(model_urls['xception_taskonomy'])", "\n", "# for name,weight in state_dict.items():", "\n", "#     if 'pointwise' in name:", "\n", "#         state_dict[name]=weight.unsqueeze(-1).unsqueeze(-1)", "\n", "#     if 'conv1' in name and len(weight.shape)!=4:", "\n", "#         state_dict[name]=weight.unsqueeze(1)", "\n", "#model.load_state_dict(state_dict)", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "# if num_classes !=1000:", "\n", "#     model.fc = nn.Linear(2048, num_classes)", "\n", "# import torch", "\n", "# print(\"writing new state dict\")", "\n", "# torch.save(model.state_dict(),\"xception.pth.tar\")", "\n", "# print(\"done\")", "\n", "# import sys", "\n", "# sys.exit(1)", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small_quad": [[670, 704], ["print", "xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "xception_taskonomy_small_quad", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "# try:", "\n", "#     num_classes = kwargs['num_classes']", "\n", "# except:", "\n", "#     num_classes=1000", "\n", "# if pretrained:", "\n", "#     kwargs['num_classes']=1000", "\n", "print", "(", "'got quad'", ")", "\n", "model", "=", "XceptionTaskonomySmall", "(", "half", "=", "'Quad'", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#state_dict = model_zoo.load_url(model_urls['xception_taskonomy'])", "\n", "# for name,weight in state_dict.items():", "\n", "#     if 'pointwise' in name:", "\n", "#         state_dict[name]=weight.unsqueeze(-1).unsqueeze(-1)", "\n", "#     if 'conv1' in name and len(weight.shape)!=4:", "\n", "#         state_dict[name]=weight.unsqueeze(1)", "\n", "#model.load_state_dict(state_dict)", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "# if num_classes !=1000:", "\n", "#     model.fc = nn.Linear(2048, num_classes)", "\n", "# import torch", "\n", "# print(\"writing new state dict\")", "\n", "# torch.save(model.state_dict(),\"xception.pth.tar\")", "\n", "# print(\"done\")", "\n", "# import sys", "\n", "# sys.exit(1)", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small_double": [[705, 739], ["print", "xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "xception_taskonomy_small_double", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "# try:", "\n", "#     num_classes = kwargs['num_classes']", "\n", "# except:", "\n", "#     num_classes=1000", "\n", "# if pretrained:", "\n", "#     kwargs['num_classes']=1000", "\n", "print", "(", "'got double'", ")", "\n", "model", "=", "XceptionTaskonomySmall", "(", "half", "=", "'Double'", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#state_dict = model_zoo.load_url(model_urls['xception_taskonomy'])", "\n", "# for name,weight in state_dict.items():", "\n", "#     if 'pointwise' in name:", "\n", "#         state_dict[name]=weight.unsqueeze(-1).unsqueeze(-1)", "\n", "#     if 'conv1' in name and len(weight.shape)!=4:", "\n", "#         state_dict[name]=weight.unsqueeze(1)", "\n", "#model.load_state_dict(state_dict)", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "# if num_classes !=1000:", "\n", "#     model.fc = nn.Linear(2048, num_classes)", "\n", "# import torch", "\n", "# print(\"writing new state dict\")", "\n", "# torch.save(model.state_dict(),\"xception.pth.tar\")", "\n", "# print(\"done\")", "\n", "# import sys", "\n", "# sys.exit(1)", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small_quad_ozan": [[740, 774], ["print", "xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "xception_taskonomy_small_quad_ozan", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "# try:", "\n", "#     num_classes = kwargs['num_classes']", "\n", "# except:", "\n", "#     num_classes=1000", "\n", "# if pretrained:", "\n", "#     kwargs['num_classes']=1000", "\n", "print", "(", "'got quad ozan'", ")", "\n", "model", "=", "XceptionTaskonomySmall", "(", "ozan", "=", "True", ",", "half", "=", "'Quad'", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#state_dict = model_zoo.load_url(model_urls['xception_taskonomy'])", "\n", "# for name,weight in state_dict.items():", "\n", "#     if 'pointwise' in name:", "\n", "#         state_dict[name]=weight.unsqueeze(-1).unsqueeze(-1)", "\n", "#     if 'conv1' in name and len(weight.shape)!=4:", "\n", "#         state_dict[name]=weight.unsqueeze(1)", "\n", "#model.load_state_dict(state_dict)", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "# if num_classes !=1000:", "\n", "#     model.fc = nn.Linear(2048, num_classes)", "\n", "# import torch", "\n", "# print(\"writing new state dict\")", "\n", "# torch.save(model.state_dict(),\"xception.pth.tar\")", "\n", "# print(\"done\")", "\n", "# import sys", "\n", "# sys.exit(1)", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small_double_ozan": [[776, 810], ["print", "xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "xception_taskonomy_small_double_ozan", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "# try:", "\n", "#     num_classes = kwargs['num_classes']", "\n", "# except:", "\n", "#     num_classes=1000", "\n", "# if pretrained:", "\n", "#     kwargs['num_classes']=1000", "\n", "print", "(", "'got double'", ")", "\n", "model", "=", "XceptionTaskonomySmall", "(", "ozan", "=", "True", ",", "half", "=", "'Double'", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#state_dict = model_zoo.load_url(model_urls['xception_taskonomy'])", "\n", "# for name,weight in state_dict.items():", "\n", "#     if 'pointwise' in name:", "\n", "#         state_dict[name]=weight.unsqueeze(-1).unsqueeze(-1)", "\n", "#     if 'conv1' in name and len(weight.shape)!=4:", "\n", "#         state_dict[name]=weight.unsqueeze(1)", "\n", "#model.load_state_dict(state_dict)", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "# if num_classes !=1000:", "\n", "#     model.fc = nn.Linear(2048, num_classes)", "\n", "# import torch", "\n", "# print(\"writing new state dict\")", "\n", "# torch.save(model.state_dict(),\"xception.pth.tar\")", "\n", "# print(\"done\")", "\n", "# import sys", "\n", "# sys.exit(1)", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_small.xception_taskonomy_small_half_ozan": [[812, 825], ["xception_taskonomy_small.XceptionTaskonomySmall", "XceptionTaskonomySmall.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "xception_taskonomy_small_half_ozan", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomySmall", "(", "ozan", "=", "True", ",", "half", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "\n", "if", "pretrained", ":", "\n", "#model.load_state_dict(torch.load('xception_taskonomy_small_imagenet_pretrained.pth.tar'))", "\n", "        ", "model", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'xception_taskonomy_small2.encoder.pth.tar'", ")", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.BasicBlock.__init__": [[30, 47], ["torch.Module.__init__", "resnet_taskonomy.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_taskonomy.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.conv3x3", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.BasicBlock.forward": [[48, 65], ["resnet_taskonomy.BasicBlock.conv1", "resnet_taskonomy.BasicBlock.bn1", "resnet_taskonomy.BasicBlock.relu", "resnet_taskonomy.BasicBlock.conv2", "resnet_taskonomy.BasicBlock.bn2", "resnet_taskonomy.BasicBlock.relu", "resnet_taskonomy.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.Bottleneck.__init__": [[70, 86], ["torch.Module.__init__", "resnet_taskonomy.conv1x1", "norm_layer", "resnet_taskonomy.conv3x3", "norm_layer", "resnet_taskonomy.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.conv1x1", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.conv3x3", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.Bottleneck.forward": [[87, 108], ["resnet_taskonomy.Bottleneck.conv1", "resnet_taskonomy.Bottleneck.bn1", "resnet_taskonomy.Bottleneck.relu", "resnet_taskonomy.Bottleneck.conv2", "resnet_taskonomy.Bottleneck.bn2", "resnet_taskonomy.Bottleneck.relu", "resnet_taskonomy.Bottleneck.conv3", "resnet_taskonomy.Bottleneck.bn3", "resnet_taskonomy.Bottleneck.relu", "resnet_taskonomy.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNetEncoder.__init__": [[112, 160], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_taskonomy.ResNetEncoder._make_layer", "resnet_taskonomy.ResNetEncoder._make_layer", "resnet_taskonomy.ResNetEncoder._make_layer", "resnet_taskonomy.ResNetEncoder._make_layer", "resnet_taskonomy.ResNetEncoder.modules", "len", "ValueError", "isinstance", "resnet_taskonomy.ResNetEncoder.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNetEncoder._make_layer", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNetEncoder._make_layer", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNetEncoder._make_layer", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNetEncoder._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "widths", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "widths", "[", "0", "]", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "widths", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "widths", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "widths", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNetEncoder._make_layer": [[161, 184], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_taskonomy.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNetEncoder.forward": [[185, 197], ["resnet_taskonomy.ResNetEncoder.conv1", "resnet_taskonomy.ResNetEncoder.bn1", "resnet_taskonomy.ResNetEncoder.relu", "resnet_taskonomy.ResNetEncoder.maxpool", "resnet_taskonomy.ResNetEncoder.layer1", "resnet_taskonomy.ResNetEncoder.layer2", "resnet_taskonomy.ResNetEncoder.layer3", "resnet_taskonomy.ResNetEncoder.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.Decoder.__init__": [[201, 231], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", "=", "32", ",", "num_classes", "=", "None", ",", "base_match", "=", "512", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upconv0", "=", "nn", ".", "ConvTranspose2d", "(", "base_match", ",", "256", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv0", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv_decode0", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode0", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "128", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv_decode1", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv_decode2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "48", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv3", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "self", ".", "conv_decode3", "=", "nn", ".", "Conv2d", "(", "48", ",", "48", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode3", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "48", ",", "32", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv4", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv_decode4", "=", "nn", ".", "Conv2d", "(", "32", ",", "output_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.Decoder.forward": [[234, 286], ["resnet_taskonomy.Decoder.upconv0", "resnet_taskonomy.Decoder.bn_upconv0", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.conv_decode0", "resnet_taskonomy.Decoder.bn_decode0", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.upconv1", "resnet_taskonomy.Decoder.bn_upconv1", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.conv_decode1", "resnet_taskonomy.Decoder.bn_decode1", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.upconv2", "resnet_taskonomy.Decoder.bn_upconv2", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.conv_decode2", "resnet_taskonomy.Decoder.bn_decode2", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.upconv3", "resnet_taskonomy.Decoder.bn_upconv3", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.conv_decode3", "resnet_taskonomy.Decoder.bn_decode3", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.upconv4", "resnet_taskonomy.Decoder.bn_upconv4", "resnet_taskonomy.Decoder.relu", "resnet_taskonomy.Decoder.conv_decode4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "resnet_taskonomy.Decoder.view", "resnet_taskonomy.Decoder.fc", "resnet_taskonomy.Decoder.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "representation", ")", ":", "\n", "#batch_size=representation.shape[0]", "\n", "        ", "if", "self", ".", "num_classes", "is", "None", ":", "\n", "#x2 = self.conv_decode_res(representation)", "\n", "#x2 = self.bn_conv_decode_res(x2)", "\n", "#x2 = interpolate(x2,size=(256,256))", "\n", "\n", "            ", "x", "=", "self", ".", "upconv0", "(", "representation", ")", "\n", "x", "=", "self", ".", "bn_upconv0", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode0", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode0", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "upconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn_decode2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv4", "(", "x", ")", "\n", "#x = torch.cat([x,x2],1)", "\n", "#print(x.shape,self.static.shape)", "\n", "#x = torch.cat([x,x2,input,self.static.expand(batch_size,-1,-1,-1)],1)", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode4", "(", "x", ")", "\n", "\n", "#z = x[:,19:22,:,:].clone()", "\n", "#y = (z).norm(2,1,True).clamp(min=1e-12)", "\n", "#print(y.shape,x[:,21:24,:,:].shape)", "\n", "#x[:,19:22,:,:]=z/y", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNet.__init__": [[290, 344], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "resnet_taskonomy.ResNet.modules", "resnet_taskonomy.ResNetEncoder", "resnet_taskonomy.Decoder", "resnet_taskonomy.ResNet.task_to_decoder.values", "isinstance", "resnet_taskonomy.ResNetEncoder", "m.weight.data.normal_", "isinstance", "resnet_taskonomy.ResNetEncoder", "resnet_taskonomy.Decoder", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "resnet_taskonomy.ResNetEncoder", "resnet_taskonomy.Decoder", "resnet_taskonomy.Decoder", "resnet_taskonomy.Decoder"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "tasks", "=", "None", ",", "num_classes", "=", "None", ",", "ozan", "=", "False", ",", "size", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "size", "==", "1", ":", "\n", "            ", "self", ".", "encoder", "=", "ResNetEncoder", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "", "elif", "size", "==", "2", ":", "\n", "            ", "self", ".", "encoder", "=", "ResNetEncoder", "(", "block", ",", "layers", ",", "[", "96", ",", "192", ",", "384", ",", "720", "]", ",", "**", "kwargs", ")", "\n", "", "elif", "size", "==", "3", ":", "\n", "            ", "self", ".", "encoder", "=", "ResNetEncoder", "(", "block", ",", "layers", ",", "[", "112", ",", "224", ",", "448", ",", "880", "]", ",", "**", "kwargs", ")", "\n", "", "elif", "size", "==", "0.5", ":", "\n", "            ", "self", ".", "encoder", "=", "ResNetEncoder", "(", "block", ",", "layers", ",", "[", "48", ",", "96", ",", "192", ",", "360", "]", ",", "**", "kwargs", ")", "\n", "", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "ozan", "=", "ozan", "\n", "self", ".", "task_to_decoder", "=", "{", "}", "\n", "\n", "if", "tasks", "is", "not", "None", ":", "\n", "#self.final_conv = nn.Conv2d(728,512,3,1,1)", "\n", "#self.final_conv_bn = nn.BatchNorm2d(512)", "\n", "            ", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "task", "==", "'segment_semantic'", ":", "\n", "                    ", "output_channels", "=", "18", "\n", "", "if", "task", "==", "'depth_zbuffer'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'normal'", ":", "\n", "                    ", "output_channels", "=", "3", "\n", "", "if", "task", "==", "'edge_occlusion'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'reshading'", ":", "\n", "                    ", "output_channels", "=", "3", "\n", "", "if", "task", "==", "'keypoints2d'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'edge_texture'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "size", "==", "1", ":", "\n", "                    ", "decoder", "=", "Decoder", "(", "output_channels", ")", "\n", "", "elif", "size", "==", "2", ":", "\n", "                    ", "decoder", "=", "Decoder", "(", "output_channels", ",", "base_match", "=", "720", ")", "\n", "", "elif", "size", "==", "3", ":", "\n", "                    ", "decoder", "=", "Decoder", "(", "output_channels", ",", "base_match", "=", "880", ")", "\n", "", "elif", "size", "==", "0.5", ":", "\n", "                    ", "decoder", "=", "Decoder", "(", "output_channels", ",", "base_match", "=", "360", ")", "\n", "", "self", ".", "task_to_decoder", "[", "task", "]", "=", "decoder", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "task_to_decoder", "[", "'classification'", "]", "=", "Decoder", "(", "output_channels", "=", "0", ",", "num_classes", "=", "1000", ")", "\n", "\n", "", "self", ".", "decoders", "=", "nn", ".", "ModuleList", "(", "self", ".", "task_to_decoder", ".", "values", "(", ")", ")", "\n", "\n", "#------- init weights --------", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#-----------------------------", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.ResNet.forward": [[345, 368], ["resnet_taskonomy.ResNet.encoder", "len", "ozan_rep_fun.ozan_rep_function", "enumerate", "len", "ozan_rep_fun.trevor_rep_function", "enumerate", "zip", "decoder", "zip", "decoder", "resnet_taskonomy.ResNet.task_to_decoder.keys", "resnet_taskonomy.ResNet.task_to_decoder.keys"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "rep", "=", "self", ".", "encoder", "(", "input", ")", "\n", "\n", "\n", "if", "self", ".", "tasks", "is", "None", ":", "\n", "            ", "return", "self", ".", "decoders", "[", "0", "]", "(", "rep", ")", "\n", "\n", "#rep = self.final_conv(rep)", "\n", "#rep = self.final_conv_bn(rep)", "\n", "\n", "", "outputs", "=", "{", "'rep'", ":", "rep", "}", "\n", "if", "self", ".", "ozan", ":", "\n", "            ", "OzanRepFunction", ".", "n", "=", "len", "(", "self", ".", "decoders", ")", "\n", "rep", "=", "ozan_rep_function", "(", "rep", ")", "\n", "for", "i", ",", "(", "task", ",", "decoder", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "task_to_decoder", ".", "keys", "(", ")", ",", "self", ".", "decoders", ")", ")", ":", "\n", "                ", "outputs", "[", "task", "]", "=", "decoder", "(", "rep", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "TrevorRepFunction", ".", "n", "=", "len", "(", "self", ".", "decoders", ")", "\n", "rep", "=", "trevor_rep_function", "(", "rep", ")", "\n", "for", "i", ",", "(", "task", ",", "decoder", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "task_to_decoder", ".", "keys", "(", ")", ",", "self", ".", "decoders", ")", ")", ":", "\n", "                ", "outputs", "[", "task", "]", "=", "decoder", "(", "rep", ")", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.conv1x1": [[22, 25], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy._resnet": [[369, 376], ["resnet_taskonomy.ResNet"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", "=", "block", ",", "layers", "=", "layers", ",", "**", "kwargs", ")", "\n", "# if pretrained:", "\n", "#     state_dict = load_state_dict_from_url(model_urls[arch],", "\n", "#                                           progress=progress)", "\n", "#     model.load_state_dict(state_dict)", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.resnet18_taskonomy": [[378, 387], ["resnet_taskonomy._resnet"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy._resnet"], ["", "def", "resnet18_taskonomy", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.resnet18_taskonomy_tripple": [[388, 397], ["resnet_taskonomy._resnet"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy._resnet"], ["", "def", "resnet18_taskonomy_tripple", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "size", "=", "3", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.resnet18_taskonomy_half": [[398, 407], ["resnet_taskonomy._resnet"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy._resnet"], ["", "def", "resnet18_taskonomy_half", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "size", "=", "0.5", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.resnet34_taskonomy": [[409, 418], ["resnet_taskonomy._resnet"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy._resnet"], ["", "def", "resnet34_taskonomy", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.resnet50_taskonomy": [[420, 429], ["resnet_taskonomy._resnet"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy._resnet"], ["", "def", "resnet50_taskonomy", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.resnet101_taskonomy": [[431, 440], ["resnet_taskonomy._resnet"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy._resnet"], ["", "def", "resnet101_taskonomy", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy.resnet152_taskonomy": [[442, 451], ["resnet_taskonomy._resnet"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.resnet_taskonomy._resnet"], ["", "def", "resnet152_taskonomy", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.SeparableConv2d.__init__": [[19, 24], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "max"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "groupsize", "=", "1", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "max", "(", "1", ",", "in_channels", "//", "groupsize", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "#self.conv1=nn.Conv2d(in_channels,out_channels,kernel_size,stride,padding,dilation,bias=bias)", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.SeparableConv2d.forward": [[27, 31], ["xception_taskonomy_new.SeparableConv2d.conv1", "xception_taskonomy_new.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.Block.__init__": [[34, 73], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "rep.append", "xception_taskonomy_new.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_new.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_new.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_filters", ",", "out_filters", ",", "reps", ",", "strides", "=", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "out_filters", "!=", "in_filters", "or", "strides", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "1", ",", "stride", "=", "strides", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "in_filters", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "rep", "[", "0", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "", "if", "strides", "!=", "1", ":", "\n", "#rep.append(nn.AvgPool2d(3,strides,1))", "\n", "            ", "rep", ".", "append", "(", "nn", ".", "Conv2d", "(", "filters", ",", "filters", ",", "2", ",", "2", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.Block.forward": [[74, 84], ["xception_taskonomy_new.Block.rep", "xception_taskonomy_new.Block.skip", "xception_taskonomy_new.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "", "x", "+=", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.Encoder.__init__": [[86, 110], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block", "xception_taskonomy_new.Block"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "sizes", "[", "0", "]", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "sizes", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "sizes", "[", "1", "]", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "sizes", "[", "1", "]", ",", "sizes", "[", "2", "]", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "sizes", "[", "2", "]", ",", "sizes", "[", "3", "]", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "sizes", "[", "3", "]", ",", "sizes", "[", "4", "]", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block4", "=", "Block", "(", "sizes", "[", "4", "]", ",", "sizes", "[", "5", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "sizes", "[", "5", "]", ",", "sizes", "[", "6", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "sizes", "[", "6", "]", ",", "sizes", "[", "7", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "sizes", "[", "7", "]", ",", "sizes", "[", "8", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "sizes", "[", "8", "]", ",", "sizes", "[", "9", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "sizes", "[", "9", "]", ",", "sizes", "[", "10", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "sizes", "[", "10", "]", ",", "sizes", "[", "11", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "sizes", "[", "11", "]", ",", "sizes", "[", "12", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.Encoder.forward": [[121, 155], ["xception_taskonomy_new.Encoder.conv1", "xception_taskonomy_new.Encoder.bn1", "xception_taskonomy_new.Encoder.relu", "xception_taskonomy_new.Encoder.conv2", "xception_taskonomy_new.Encoder.bn2", "xception_taskonomy_new.Encoder.relu", "xception_taskonomy_new.Encoder.block1", "xception_taskonomy_new.Encoder.block2", "xception_taskonomy_new.Encoder.block3", "xception_taskonomy_new.Encoder.block4", "xception_taskonomy_new.Encoder.block5", "xception_taskonomy_new.Encoder.block6", "xception_taskonomy_new.Encoder.block7", "xception_taskonomy_new.Encoder.block8", "xception_taskonomy_new.Encoder.block9", "xception_taskonomy_new.Encoder.block10", "xception_taskonomy_new.Encoder.block11", "xception_taskonomy_new.Encoder.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "#x = self.block12(x)", "\n", "\n", "#x = self.conv3(x)", "\n", "#x = self.bn3(x)", "\n", "#x = self.relu(x)", "\n", "\n", "\n", "#x = self.conv4(x)", "\n", "#x = self.bn4(x)", "\n", "\n", "representation", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.Decoder.__init__": [[169, 230], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "xception_taskonomy_new.Block", "xception_taskonomy_new.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_new.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", "=", "32", ",", "num_classes", "=", "None", ",", "half_sized_output", "=", "False", ",", "small_decoder", "=", "True", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "half_sized_output", "=", "half_sized_output", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "block12", "=", "Block", "(", "728", ",", "1024", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "1536", ")", "\n", "\n", "#do relu here", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "2048", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "if", "small_decoder", ":", "\n", "                ", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "128", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv_decode1", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv_decode2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "48", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv3", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "self", ".", "conv_decode3", "=", "nn", ".", "Conv2d", "(", "48", ",", "48", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode3", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "if", "half_sized_output", ":", "\n", "                    ", "self", ".", "upconv4", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "bn_upconv4", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "conv_decode4", "=", "nn", ".", "Conv2d", "(", "48", ",", "output_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "48", ",", "32", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv4", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv_decode4", "=", "nn", ".", "Conv2d", "(", "32", ",", "output_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "256", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv1", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv_decode1", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode1", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "128", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv_decode2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "96", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv3", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "conv_decode3", "=", "nn", ".", "Conv2d", "(", "96", ",", "96", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode3", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "if", "half_sized_output", ":", "\n", "                    ", "self", ".", "upconv4", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "bn_upconv4", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "conv_decode4", "=", "nn", ".", "Conv2d", "(", "96", ",", "output_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "96", ",", "64", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv4", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv_decode4", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.Decoder.forward": [[234, 276], ["xception_taskonomy_new.Decoder.upconv1", "xception_taskonomy_new.Decoder.bn_upconv1", "xception_taskonomy_new.Decoder.relu", "xception_taskonomy_new.Decoder.conv_decode1", "xception_taskonomy_new.Decoder.bn_decode1", "xception_taskonomy_new.Decoder.relu", "xception_taskonomy_new.Decoder.upconv2", "xception_taskonomy_new.Decoder.bn_upconv2", "xception_taskonomy_new.Decoder.relu", "xception_taskonomy_new.Decoder.conv_decode2", "xception_taskonomy_new.Decoder.bn_decode2", "xception_taskonomy_new.Decoder.relu", "xception_taskonomy_new.Decoder.upconv3", "xception_taskonomy_new.Decoder.bn_upconv3", "xception_taskonomy_new.Decoder.relu", "xception_taskonomy_new.Decoder.conv_decode3", "xception_taskonomy_new.Decoder.bn_decode3", "xception_taskonomy_new.Decoder.relu", "xception_taskonomy_new.Decoder.conv_decode4", "xception_taskonomy_new.Decoder.block12", "xception_taskonomy_new.Decoder.conv3", "xception_taskonomy_new.Decoder.bn3", "xception_taskonomy_new.Decoder.relu", "xception_taskonomy_new.Decoder.conv4", "xception_taskonomy_new.Decoder.bn4", "xception_taskonomy_new.Decoder.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "xception_taskonomy_new.Decoder.view", "xception_taskonomy_new.Decoder.fc", "xception_taskonomy_new.Decoder.upconv4", "xception_taskonomy_new.Decoder.bn_upconv4", "xception_taskonomy_new.Decoder.relu", "xception_taskonomy_new.Decoder.size"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "representation", ")", ":", "\n", "        ", "if", "self", ".", "num_classes", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "upconv1", "(", "representation", ")", "\n", "x", "=", "self", ".", "bn_upconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn_decode2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "not", "self", ".", "half_sized_output", ":", "\n", "                ", "x", "=", "self", ".", "upconv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv_decode4", "(", "x", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "block12", "(", "representation", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.XceptionTaskonomy.__init__": [[285, 358], ["torch.Module.__init__", "xception_taskonomy_new.Encoder", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "xception_taskonomy_new.XceptionTaskonomy.modules", "xception_taskonomy_new.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_new.Decoder", "xception_taskonomy_new.XceptionTaskonomy.task_to_decoder.values", "isinstance", "xception_taskonomy_new.Decoder", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "1", ",", "tasks", "=", "None", ",", "num_classes", "=", "None", ",", "ozan", "=", "False", ",", "half_sized_output", "=", "False", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "XceptionTaskonomy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pre_rep_size", "=", "728", "\n", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "if", "size", "==", "1", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", ".2", ":", "\n", "            ", "sizes", "=", "[", "16", ",", "32", ",", "64", ",", "256", ",", "320", ",", "320", ",", "320", ",", "320", ",", "320", ",", "320", ",", "320", ",", "320", ",", "320", "]", "\n", "", "elif", "size", "==", ".3", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", ".4", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", ".5", ":", "\n", "            ", "sizes", "=", "[", "24", ",", "48", ",", "96", ",", "192", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", "\n", "", "elif", "size", "==", ".8", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "248", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", "]", "\n", "", "elif", "size", "==", "2", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", "4", ":", "\n", "            ", "sizes", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", "]", "\n", "\n", "\n", "", "self", ".", "encoder", "=", "Encoder", "(", "sizes", "=", "sizes", ")", "\n", "pre_rep_size", "=", "sizes", "[", "-", "1", "]", "\n", "\n", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "ozan", "=", "ozan", "\n", "self", ".", "task_to_decoder", "=", "{", "}", "\n", "\n", "\n", "\n", "if", "tasks", "is", "not", "None", ":", "\n", "\n", "            ", "self", ".", "final_conv", "=", "SeparableConv2d", "(", "pre_rep_size", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "final_conv_bn", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "task", "==", "'segment_semantic'", ":", "\n", "                    ", "output_channels", "=", "18", "\n", "", "if", "task", "==", "'depth_zbuffer'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'normal'", ":", "\n", "                    ", "output_channels", "=", "3", "\n", "", "if", "task", "==", "'edge_occlusion'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'keypoints2d'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'edge_texture'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'reshading'", ":", "\n", "                    ", "output_channels", "=", "1", "\n", "", "if", "task", "==", "'rgb'", ":", "\n", "                    ", "output_channels", "=", "3", "\n", "", "if", "task", "==", "'principal_curvature'", ":", "\n", "                    ", "output_channels", "=", "2", "\n", "", "decoder", "=", "Decoder", "(", "output_channels", ",", "half_sized_output", "=", "half_sized_output", ")", "\n", "self", ".", "task_to_decoder", "[", "task", "]", "=", "decoder", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "task_to_decoder", "[", "'classification'", "]", "=", "Decoder", "(", "output_channels", "=", "0", ",", "num_classes", "=", "1000", ")", "\n", "\n", "", "self", ".", "decoders", "=", "nn", ".", "ModuleList", "(", "self", ".", "task_to_decoder", ".", "values", "(", ")", ")", "\n", "\n", "#------- init weights --------", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#-----------------------------", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.XceptionTaskonomy.forward": [[361, 384], ["xception_taskonomy_new.XceptionTaskonomy.encoder", "xception_taskonomy_new.XceptionTaskonomy.final_conv", "xception_taskonomy_new.XceptionTaskonomy.final_conv_bn", "len", "ozan_rep_fun.ozan_rep_function", "enumerate", "len", "ozan_rep_fun.trevor_rep_function", "enumerate", "zip", "decoder", "zip", "decoder", "xception_taskonomy_new.XceptionTaskonomy.task_to_decoder.keys", "xception_taskonomy_new.XceptionTaskonomy.task_to_decoder.keys"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "rep", "=", "self", ".", "encoder", "(", "input", ")", "\n", "\n", "\n", "if", "self", ".", "tasks", "is", "None", ":", "\n", "            ", "return", "self", ".", "decoders", "[", "0", "]", "(", "rep", ")", "\n", "\n", "", "rep", "=", "self", ".", "final_conv", "(", "rep", ")", "\n", "rep", "=", "self", ".", "final_conv_bn", "(", "rep", ")", "\n", "\n", "outputs", "=", "{", "'rep'", ":", "rep", "}", "\n", "if", "self", ".", "ozan", ":", "\n", "            ", "OzanRepFunction", ".", "n", "=", "len", "(", "self", ".", "decoders", ")", "\n", "rep", "=", "ozan_rep_function", "(", "rep", ")", "\n", "for", "i", ",", "(", "task", ",", "decoder", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "task_to_decoder", ".", "keys", "(", ")", ",", "self", ".", "decoders", ")", ")", ":", "\n", "                ", "outputs", "[", "task", "]", "=", "decoder", "(", "rep", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "TrevorRepFunction", ".", "n", "=", "len", "(", "self", ".", "decoders", ")", "\n", "rep", "=", "trevor_rep_function", "(", "rep", ")", "\n", "for", "i", ",", "(", "task", ",", "decoder", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "task_to_decoder", ".", "keys", "(", ")", ",", "self", ".", "decoders", ")", ")", ":", "\n", "                ", "outputs", "[", "task", "]", "=", "decoder", "(", "rep", ")", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.interpolate": [[158, 165], ["inp.float.type", "inp.float.float", "torch.functional.interpolate", "out.half.type", "out.half.half"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.interpolate"], ["", "", "def", "interpolate", "(", "inp", ",", "size", ")", ":", "\n", "    ", "t", "=", "inp", ".", "type", "(", ")", "\n", "inp", "=", "inp", ".", "float", "(", ")", "\n", "out", "=", "nn", ".", "functional", ".", "interpolate", "(", "inp", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "if", "out", ".", "type", "(", ")", "!=", "t", ":", "\n", "        ", "out", "=", "out", ".", "half", "(", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.xception_taskonomy_new": [[387, 395], ["xception_taskonomy_new.XceptionTaskonomy"], "function", ["None"], ["", "", "def", "xception_taskonomy_new", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", "1", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.xception_taskonomy_new_fifth": [[396, 404], ["xception_taskonomy_new.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_new_fifth", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", ".2", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.xception_taskonomy_new_quad": [[405, 413], ["xception_taskonomy_new.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_new_quad", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", "4", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.xception_taskonomy_new_half": [[414, 422], ["xception_taskonomy_new.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_new_half", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", ".5", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.xception_taskonomy_new_80": [[423, 431], ["xception_taskonomy_new.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_new_80", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", ".8", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_new.xception_taskonomy_ozan": [[432, 440], ["xception_taskonomy_new.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_ozan", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "ozan", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.SeparableConv2d.__init__": [[35, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "max"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "groupsize", "=", "1", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "max", "(", "1", ",", "in_channels", "//", "groupsize", ")", ",", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "#self.conv1=nn.Conv2d(in_channels,out_channels,kernel_size,stride,padding,dilation,bias=bias)", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.SeparableConv2d.forward": [[43, 47], ["xception_taskonomy_joined_decoder.SeparableConv2d.conv1", "xception_taskonomy_joined_decoder.SeparableConv2d.pointwise"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.Block.__init__": [[50, 89], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "rep.append", "xception_taskonomy_joined_decoder.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_joined_decoder.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_joined_decoder.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_filters", ",", "out_filters", ",", "reps", ",", "strides", "=", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "out_filters", "!=", "in_filters", "or", "strides", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "in_filters", ",", "out_filters", ",", "1", ",", "stride", "=", "strides", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "in_filters", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "in_filters", ",", "out_filters", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "rep", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_filters", ")", ")", "\n", "filters", "=", "out_filters", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "rep", "[", "0", "]", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "", "if", "strides", "!=", "1", ":", "\n", "#rep.append(nn.AvgPool2d(3,strides,1))", "\n", "            ", "rep", ".", "append", "(", "nn", ".", "Conv2d", "(", "filters", ",", "filters", ",", "2", ",", "2", ")", ")", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.Block.forward": [[90, 100], ["xception_taskonomy_joined_decoder.Block.rep", "xception_taskonomy_joined_decoder.Block.skip", "xception_taskonomy_joined_decoder.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "", "x", "+=", "skip", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.Encoder.__init__": [[102, 126], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.Block"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "sizes", "[", "0", "]", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "sizes", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "sizes", "[", "1", "]", ")", "\n", "#do relu here", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "sizes", "[", "1", "]", ",", "sizes", "[", "2", "]", ",", "2", ",", "2", ",", "start_with_relu", "=", "False", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block2", "=", "Block", "(", "sizes", "[", "2", "]", ",", "sizes", "[", "3", "]", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "sizes", "[", "3", "]", ",", "sizes", "[", "4", "]", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block4", "=", "Block", "(", "sizes", "[", "4", "]", ",", "sizes", "[", "5", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "sizes", "[", "5", "]", ",", "sizes", "[", "6", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "sizes", "[", "6", "]", ",", "sizes", "[", "7", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "sizes", "[", "7", "]", ",", "sizes", "[", "8", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "self", ".", "block8", "=", "Block", "(", "sizes", "[", "8", "]", ",", "sizes", "[", "9", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "sizes", "[", "9", "]", ",", "sizes", "[", "10", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "sizes", "[", "10", "]", ",", "sizes", "[", "11", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "sizes", "[", "11", "]", ",", "sizes", "[", "12", "]", ",", "3", ",", "1", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.Encoder.forward": [[137, 171], ["xception_taskonomy_joined_decoder.Encoder.conv1", "xception_taskonomy_joined_decoder.Encoder.bn1", "xception_taskonomy_joined_decoder.Encoder.relu", "xception_taskonomy_joined_decoder.Encoder.conv2", "xception_taskonomy_joined_decoder.Encoder.bn2", "xception_taskonomy_joined_decoder.Encoder.relu", "xception_taskonomy_joined_decoder.Encoder.block1", "xception_taskonomy_joined_decoder.Encoder.block2", "xception_taskonomy_joined_decoder.Encoder.block3", "xception_taskonomy_joined_decoder.Encoder.block4", "xception_taskonomy_joined_decoder.Encoder.block5", "xception_taskonomy_joined_decoder.Encoder.block6", "xception_taskonomy_joined_decoder.Encoder.block7", "xception_taskonomy_joined_decoder.Encoder.block8", "xception_taskonomy_joined_decoder.Encoder.block9", "xception_taskonomy_joined_decoder.Encoder.block10", "xception_taskonomy_joined_decoder.Encoder.block11", "xception_taskonomy_joined_decoder.Encoder.relu2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "#x = self.block12(x)", "\n", "\n", "#x = self.conv3(x)", "\n", "#x = self.bn3(x)", "\n", "#x = self.relu(x)", "\n", "\n", "\n", "#x = self.conv4(x)", "\n", "#x = self.bn4(x)", "\n", "\n", "representation", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.Decoder.__init__": [[185, 219], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "xception_taskonomy_joined_decoder.Block", "xception_taskonomy_joined_decoder.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_joined_decoder.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", "=", "32", ",", "num_classes", "=", "None", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_channels", "=", "output_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "block12", "=", "Block", "(", "728", ",", "1024", ",", "2", ",", "2", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "1536", ")", "\n", "\n", "#do relu here", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "2048", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upconv1", "=", "nn", ".", "ConvTranspose2d", "(", "512", ",", "128", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv_decode1", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv_decode2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "48", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv3", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "self", ".", "conv_decode3", "=", "nn", ".", "Conv2d", "(", "48", ",", "48", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn_decode3", "=", "nn", ".", "BatchNorm2d", "(", "48", ")", "\n", "self", ".", "upconv4", "=", "nn", ".", "ConvTranspose2d", "(", "48", ",", "32", ",", "2", ",", "2", ")", "\n", "self", ".", "bn_upconv4", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "conv_decode4", "=", "nn", ".", "Conv2d", "(", "32", ",", "output_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.Decoder.forward": [[222, 263], ["xception_taskonomy_joined_decoder.Decoder.upconv1", "xception_taskonomy_joined_decoder.Decoder.bn_upconv1", "xception_taskonomy_joined_decoder.Decoder.relu", "xception_taskonomy_joined_decoder.Decoder.conv_decode1", "xception_taskonomy_joined_decoder.Decoder.bn_decode1", "xception_taskonomy_joined_decoder.Decoder.relu", "xception_taskonomy_joined_decoder.Decoder.upconv2", "xception_taskonomy_joined_decoder.Decoder.bn_upconv2", "xception_taskonomy_joined_decoder.Decoder.relu", "xception_taskonomy_joined_decoder.Decoder.conv_decode2", "xception_taskonomy_joined_decoder.Decoder.bn_decode2", "xception_taskonomy_joined_decoder.Decoder.relu", "xception_taskonomy_joined_decoder.Decoder.upconv3", "xception_taskonomy_joined_decoder.Decoder.bn_upconv3", "xception_taskonomy_joined_decoder.Decoder.relu", "xception_taskonomy_joined_decoder.Decoder.conv_decode3", "xception_taskonomy_joined_decoder.Decoder.bn_decode3", "xception_taskonomy_joined_decoder.Decoder.relu", "xception_taskonomy_joined_decoder.Decoder.upconv4", "xception_taskonomy_joined_decoder.Decoder.bn_upconv4", "xception_taskonomy_joined_decoder.Decoder.relu", "xception_taskonomy_joined_decoder.Decoder.conv_decode4", "xception_taskonomy_joined_decoder.Decoder.block12", "xception_taskonomy_joined_decoder.Decoder.conv3", "xception_taskonomy_joined_decoder.Decoder.bn3", "xception_taskonomy_joined_decoder.Decoder.relu", "xception_taskonomy_joined_decoder.Decoder.conv4", "xception_taskonomy_joined_decoder.Decoder.bn4", "xception_taskonomy_joined_decoder.Decoder.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "xception_taskonomy_joined_decoder.Decoder.view", "xception_taskonomy_joined_decoder.Decoder.fc", "xception_taskonomy_joined_decoder.Decoder.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "representation", ")", ":", "\n", "        ", "if", "self", ".", "num_classes", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "upconv1", "(", "representation", ")", "\n", "x", "=", "self", ".", "bn_upconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn_decode2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_decode3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "upconv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn_upconv4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_decode4", "(", "x", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "block12", "(", "representation", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.XceptionTaskonomy.__init__": [[272, 336], ["torch.Module.__init__", "xception_taskonomy_joined_decoder.Encoder", "xception_taskonomy_joined_decoder.XceptionTaskonomy.modules", "xception_taskonomy_joined_decoder.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "xception_taskonomy_joined_decoder.Decoder", "xception_taskonomy_joined_decoder.Decoder", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "1", ",", "tasks", "=", "None", ",", "num_classes", "=", "None", ",", "ozan", "=", "False", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", "XceptionTaskonomy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pre_rep_size", "=", "728", "\n", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "if", "size", "==", "1", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", ".2", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", ".3", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", ".4", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", ".5", ":", "\n", "            ", "sizes", "=", "[", "24", ",", "48", ",", "96", ",", "192", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", "\n", "", "elif", "size", "==", ".8", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "248", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", ",", "648", "]", "\n", "", "elif", "size", "==", "2", ":", "\n", "            ", "sizes", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", ",", "728", "]", "\n", "", "elif", "size", "==", "4", ":", "\n", "            ", "sizes", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", ",", "1456", "]", "\n", "\n", "\n", "", "self", ".", "encoder", "=", "Encoder", "(", "sizes", "=", "sizes", ")", "\n", "pre_rep_size", "=", "sizes", "[", "-", "1", "]", "\n", "\n", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "ozan", "=", "ozan", "\n", "self", ".", "task_to_decoder", "=", "{", "}", "\n", "\n", "\n", "\n", "if", "tasks", "is", "not", "None", ":", "\n", "\n", "            ", "self", ".", "final_conv", "=", "SeparableConv2d", "(", "pre_rep_size", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "final_conv_bn", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "output_channels", "=", "0", "\n", "self", ".", "channels_per_task", "=", "{", "'segment_semantic'", ":", "18", ",", "\n", "'depth_zbuffer'", ":", "1", ",", "\n", "'normal'", ":", "3", ",", "\n", "'edge_occlusion'", ":", "1", ",", "\n", "'reshading'", ":", "3", ",", "\n", "'keypoints2d'", ":", "1", ",", "\n", "'edge_texture'", ":", "1", ",", "\n", "}", "\n", "for", "task", "in", "tasks", ":", "\n", "                ", "output_channels", "+=", "self", ".", "channels_per_task", "[", "task", "]", "\n", "", "self", ".", "decoder", "=", "Decoder", "(", "output_channels", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "decoder", "=", "Decoder", "(", "output_channels", "=", "0", ",", "num_classes", "=", "1000", ")", "\n", "\n", "\n", "#------- init weights --------", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#-----------------------------", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.XceptionTaskonomy.forward": [[339, 359], ["xception_taskonomy_joined_decoder.XceptionTaskonomy.encoder", "xception_taskonomy_joined_decoder.XceptionTaskonomy.final_conv", "xception_taskonomy_joined_decoder.XceptionTaskonomy.final_conv_bn", "xception_taskonomy_joined_decoder.XceptionTaskonomy.decoder", "xception_taskonomy_joined_decoder.XceptionTaskonomy.decoder"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "rep", "=", "self", ".", "encoder", "(", "input", ")", "\n", "\n", "\n", "if", "self", ".", "tasks", "is", "None", ":", "\n", "            ", "return", "self", ".", "decoder", "(", "rep", ")", "\n", "\n", "", "rep", "=", "self", ".", "final_conv", "(", "rep", ")", "\n", "rep", "=", "self", ".", "final_conv_bn", "(", "rep", ")", "\n", "\n", "outputs", "=", "{", "}", "\n", "raw_output", "=", "self", ".", "decoder", "(", "rep", ")", "\n", "\n", "range_start", "=", "0", "\n", "#print(raw_output.shape)", "\n", "for", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "outputs", "[", "task", "]", "=", "raw_output", "[", ":", ",", "range_start", ":", "range_start", "+", "self", ".", "channels_per_task", "[", "task", "]", ",", ":", ",", ":", "]", "\n", "range_start", "+=", "self", ".", "channels_per_task", "[", "task", "]", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.interpolate": [[174, 181], ["inp.float.type", "inp.float.float", "torch.functional.interpolate", "out.half.type", "out.half.half"], "function", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.interpolate"], ["", "", "def", "interpolate", "(", "inp", ",", "size", ")", ":", "\n", "    ", "t", "=", "inp", ".", "type", "(", ")", "\n", "inp", "=", "inp", ".", "float", "(", ")", "\n", "out", "=", "nn", ".", "functional", ".", "interpolate", "(", "inp", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "if", "out", ".", "type", "(", ")", "!=", "t", ":", "\n", "        ", "out", "=", "out", ".", "half", "(", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.xception_taskonomy_joined_decoder": [[362, 370], ["xception_taskonomy_joined_decoder.XceptionTaskonomy"], "function", ["None"], ["", "", "def", "xception_taskonomy_joined_decoder", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", "1", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.xception_taskonomy_joined_decoder_fifth": [[371, 379], ["xception_taskonomy_joined_decoder.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_joined_decoder_fifth", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", ".2", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.xception_taskonomy_joined_decoder_quad": [[380, 388], ["xception_taskonomy_joined_decoder.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_joined_decoder_quad", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", "4", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.xception_taskonomy_joined_decoder_half": [[389, 397], ["xception_taskonomy_joined_decoder.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_joined_decoder_half", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", ".5", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.xception_taskonomy_joined_decoder_80": [[398, 406], ["xception_taskonomy_joined_decoder.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_joined_decoder_80", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "**", "kwargs", ",", "size", "=", ".8", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.xception_taskonomy_joined_decoder.xception_taskonomy_joined_decoder_ozan": [[407, 415], ["xception_taskonomy_joined_decoder.XceptionTaskonomy"], "function", ["None"], ["", "def", "xception_taskonomy_joined_decoder_ozan", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Construct Xception.\n    \"\"\"", "\n", "\n", "model", "=", "XceptionTaskonomy", "(", "ozan", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.OzanRepFunction.__init__": [[12, 14], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OzanRepFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.OzanRepFunction.forward": [[15, 21], ["input.expand", "input.expand.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "\n", "        ", "shape", "=", "input", ".", "shape", "\n", "ret", "=", "input", ".", "expand", "(", "OzanRepFunction", ".", "n", ",", "*", "shape", ")", "\n", "return", "ret", ".", "clone", "(", ")", "# REASON FOR ERROR: forgot to .clone() here", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.OzanRepFunction.backward": [[69, 109], ["range", "ozan_min_norm_solvers.MinNormSolver.find_min_norm_element", "grad_output.clone", "grad_output.clone.sum", "math.sqrt", "range", "grad_output[].view().float", "range", "range", "grad_output[].view"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver.find_min_norm_element"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "num_grads", "=", "grad_output", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "grad_output", ".", "shape", "[", "1", "]", "\n", "# print(num_grads)", "\n", "# print(num_grads)", "\n", "# print(num_grads)", "\n", "#print(grad_output.shape)", "\n", "# print(grad_output.shape)", "\n", "# print(grad_output.shape)", "\n", "# print(num_grads)", "\n", "# print(num_grads)", "\n", "if", "num_grads", ">=", "2", ":", "\n", "#print ('shape in = ',grad_output[0].view(batch_size,-1).float().shape)", "\n", "            ", "try", ":", "\n", "                ", "alphas", ",", "score", "=", "MinNormSolver", ".", "find_min_norm_element", "(", "[", "grad_output", "[", "i", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "float", "(", ")", "for", "i", "in", "range", "(", "num_grads", ")", "]", ")", "\n", "#print(alphas)", "\n", "", "except", "ValueError", "as", "error", ":", "\n", "                ", "alphas", "=", "[", "1", "/", "num_grads", "for", "i", "in", "range", "(", "num_grads", ")", "]", "\n", "#print('outs shape',out.shape)", "\n", "#print('alphas shape',alphas.shape)", "\n", "\n", "#out = out.view()", "\n", "#out = torch.zeros_like(grad_output[0])", "\n", "# print(alphas)", "\n", "# print()", "\n", "# print()", "\n", "", "grad_outputs", "=", "[", "grad_output", "[", "i", "]", "*", "alphas", "[", "i", "]", "*", "math", ".", "sqrt", "(", "num_grads", ")", "for", "i", "in", "range", "(", "num_grads", ")", "]", "\n", "output", "=", "grad_outputs", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_grads", ")", ":", "\n", "                ", "output", "+=", "grad_outputs", "[", "i", "]", "\n", "", "return", "output", "\n", "\n", "\n", "", "elif", "num_grads", "==", "1", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "out", "=", "grad_input", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.TrevorRepFunction.__init__": [[115, 117], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TrevorRepFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.TrevorRepFunction.forward": [[118, 121], ["input.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.TrevorRepFunction.backward": [[122, 130], ["grad_output.clone", "math.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "#num_grads = grad_output.shape[0]", "\n", "#print(num_grads)", "\n", "        ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "mul", "=", "1.0", "/", "math", ".", "sqrt", "(", "TrevorRepFunction", ".", "n", ")", "\n", "out", "=", "grad_input", "*", "mul", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__": [[140, 142], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GradNormRepFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.forward": [[143, 148], ["input.expand", "input.expand.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "shape", "=", "input", ".", "shape", "\n", "ret", "=", "input", ".", "expand", "(", "GradNormRepFunction", ".", "n", ",", "*", "shape", ")", "\n", "return", "ret", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_rep_fun.GradNormRepFunction.backward": [[149, 208], ["grad_output.float.float.float", "torch.mean", "range", "output.half", "torch.stack", "statistics.mean", "sum", "max", "range", "sum", "max", "grad_output.float.float.clone", "grad_output.float.clone.sum", "torch.sqrt", "range", "float", "float", "len", "range", "grad_output[].reshape().dot", "max", "zip", "max", "range", "open", "myfile.write", "math.sqrt", "grad_output[].reshape", "float", "grad_output[].reshape", "max", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "global", "count", "\n", "num_grads", "=", "grad_output", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "grad_output", ".", "shape", "[", "1", "]", "\n", "grad_output", "=", "grad_output", ".", "float", "(", ")", "\n", "if", "num_grads", ">=", "2", ":", "\n", "\n", "            ", "GiW", "=", "[", "torch", ".", "sqrt", "(", "grad_output", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", ".", "dot", "(", "grad_output", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", ")", ")", "*", "GradNormRepFunction", ".", "current_weights", "[", "i", "]", "for", "i", "in", "range", "(", "num_grads", ")", "]", "\n", "GW_bar", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "GiW", ")", ")", "\n", "\n", "try", ":", "\n", "                ", "Li_ratio", "=", "[", "c", "/", "max", "(", "i", ",", ".0000001", ")", "for", "c", ",", "i", "in", "zip", "(", "GradNormRepFunction", ".", "current_task_losses", ",", "GradNormRepFunction", ".", "inital_task_losses", ")", "]", "\n", "mean_ratio", "=", "statistics", ".", "mean", "(", "Li_ratio", ")", "\n", "ri", "=", "[", "lir", "/", "max", "(", "mean_ratio", ",", ".00000001", ")", "for", "lir", "in", "Li_ratio", "]", "\n", "target_grad", "=", "[", "float", "(", "GW_bar", "*", "(", "max", "(", "r_i", ",", ".00000001", ")", "**", "1.5", ")", ")", "for", "r_i", "in", "ri", "]", "\n", "\n", "target_weight", "=", "[", "float", "(", "target_grad", "[", "i", "]", "/", "float", "(", "GiW", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "num_grads", ")", "]", "\n", "total_weight", "=", "sum", "(", "target_weight", ")", "\n", "total_weight", "=", "max", "(", ".0000001", ",", "total_weight", ")", "\n", "target_weight", "=", "[", "i", "*", "num_grads", "/", "total_weight", "for", "i", "in", "target_weight", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "GradNormRepFunction", ".", "current_weights", ")", ")", ":", "\n", "                    ", "wi", "=", "GradNormRepFunction", ".", "current_weights", "[", "i", "]", "\n", "GradNormRepFunction", ".", "current_weights", "[", "i", "]", "+=", "(", ".0001", "*", "wi", "if", "(", "wi", "<", "target_weight", "[", "i", "]", ")", "else", "-", ".0001", "*", "wi", ")", "\n", "\n", "\n", "# print('Li_ratio',Li_ratio)", "\n", "# print('mean_ratio',mean_ratio)", "\n", "# print('ri',ri)", "\n", "# print('target_weight',target_weight)", "\n", "# print('current_weights',GradNormRepFunction.current_weights)", "\n", "# print()", "\n", "# print()", "\n", "\n", "\n", "", "count", "+=", "1", "\n", "if", "count", "%", "80", "==", "0", ":", "\n", "                    ", "with", "open", "(", "\"gradnorm_weights.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                        ", "myfile", ".", "write", "(", "'target: '", "+", "str", "(", "target_weight", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "total_weight", "=", "sum", "(", "GradNormRepFunction", ".", "current_weights", ")", "\n", "total_weight", "=", "max", "(", ".0000001", ",", "total_weight", ")", "\n", "\n", "GradNormRepFunction", ".", "current_weights", "=", "[", "i", "*", "num_grads", "/", "total_weight", "for", "i", "in", "GradNormRepFunction", ".", "current_weights", "]", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "grad_outputs", "=", "[", "grad_output", "[", "i", "]", "*", "GradNormRepFunction", ".", "current_weights", "[", "i", "]", "*", "(", "1", "/", "math", ".", "sqrt", "(", "num_grads", ")", ")", "for", "i", "in", "range", "(", "num_grads", ")", "]", "\n", "output", "=", "grad_outputs", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_grads", ")", ":", "\n", "                ", "output", "+=", "grad_outputs", "[", "i", "]", "\n", "", "return", "output", ".", "half", "(", ")", "\n", "", "elif", "num_grads", "==", "1", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "out", "=", "grad_input", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._min_norm_element_from2": [[10, 32], ["None"], "methods", ["None"], ["def", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", ":", "\n", "        ", "\"\"\"\n        Analytical solution for min_{c} |cx_1 + (1-c)x_2|_2^2\n        d is the distance (objective) optimzed\n        v1v1 = <x1,x1>\n        v1v2 = <x1,x2>\n        v2v2 = <x2,x2>\n        \"\"\"", "\n", "if", "v1v2", ">=", "v1v1", ":", "\n", "# Case: Fig 1, third column", "\n", "            ", "gamma", "=", "0.999", "\n", "cost", "=", "v1v1", "\n", "return", "gamma", ",", "cost", "\n", "", "if", "v1v2", ">=", "v2v2", ":", "\n", "# Case: Fig 1, first column", "\n", "            ", "gamma", "=", "0.001", "\n", "cost", "=", "v2v2", "\n", "return", "gamma", ",", "cost", "\n", "# Case: Fig 1, second column", "\n", "", "gamma", "=", "-", "1.0", "*", "(", "(", "v1v2", "-", "v2v2", ")", "/", "(", "v1v1", "+", "v2v2", "-", "2", "*", "v1v2", ")", ")", "\n", "cost", "=", "v2v2", "+", "gamma", "*", "(", "v1v2", "-", "v2v2", ")", "\n", "return", "gamma", ",", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._min_norm_2d": [[33, 65], ["range", "len", "range", "math.isnan", "ValueError", "len", "ozan_min_norm_solvers.MinNormSolver._min_norm_element_from2", "range", "range", "range", "len", "torch.dot().item", "len", "torch.dot().item", "len", "torch.dot().item", "torch.dot", "torch.dot", "torch.dot"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "def", "_min_norm_2d", "(", "vecs", ",", "dps", ")", ":", "\n", "        ", "\"\"\"\n        Find the minimum norm solution as combination of two points\n        This is correct only in 2D\n        ie. min_c |\\sum c_i x_i|_2^2 st. \\sum c_i = 1 , 1 >= c_1 >= 0 for all i, c_i + c_j = 1.0 for some i, j\n        \"\"\"", "\n", "dmin", "=", "1e99", "\n", "sol", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "vecs", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "vecs", ")", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "i", ",", "j", ")", "]", "=", "0.0", "\n", "for", "k", "in", "range", "(", "len", "(", "vecs", "[", "i", "]", ")", ")", ":", "\n", "                        ", "dps", "[", "(", "i", ",", "j", ")", "]", "+=", "torch", ".", "dot", "(", "vecs", "[", "i", "]", "[", "k", "]", ",", "vecs", "[", "j", "]", "[", "k", "]", ")", ".", "item", "(", ")", "#.data[0]", "\n", "", "dps", "[", "(", "j", ",", "i", ")", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "", "if", "(", "i", ",", "i", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "i", ",", "i", ")", "]", "=", "0.0", "\n", "for", "k", "in", "range", "(", "len", "(", "vecs", "[", "i", "]", ")", ")", ":", "\n", "                        ", "dps", "[", "(", "i", ",", "i", ")", "]", "+=", "torch", ".", "dot", "(", "vecs", "[", "i", "]", "[", "k", "]", ",", "vecs", "[", "i", "]", "[", "k", "]", ")", ".", "item", "(", ")", "#.data[0]", "\n", "", "", "if", "(", "j", ",", "j", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "j", ",", "j", ")", "]", "=", "0.0", "\n", "for", "k", "in", "range", "(", "len", "(", "vecs", "[", "i", "]", ")", ")", ":", "\n", "                        ", "dps", "[", "(", "j", ",", "j", ")", "]", "+=", "torch", ".", "dot", "(", "vecs", "[", "j", "]", "[", "k", "]", ",", "vecs", "[", "j", "]", "[", "k", "]", ")", ".", "item", "(", ")", "#.data[0]", "\n", "", "", "c", ",", "d", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "dps", "[", "(", "i", ",", "i", ")", "]", ",", "dps", "[", "(", "i", ",", "j", ")", "]", ",", "dps", "[", "(", "j", ",", "j", ")", "]", ")", "\n", "#print('c,d',c,d)", "\n", "if", "d", "<", "dmin", ":", "\n", "                    ", "dmin", "=", "d", "\n", "sol", "=", "[", "(", "i", ",", "j", ")", ",", "c", ",", "d", "]", "\n", "\n", "", "", "", "if", "sol", "is", "None", "or", "math", ".", "isnan", "(", "c", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'A numeric instability occured in ozan_min_norm_solvers.'", ")", "\n", "", "return", "sol", ",", "dps", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._projection2simplex": [[66, 81], ["len", "numpy.flip", "range", "numpy.maximum", "numpy.sort", "numpy.zeros", "numpy.sum"], "methods", ["None"], ["", "def", "_projection2simplex", "(", "y", ")", ":", "\n", "        ", "\"\"\"\n        Given y, it solves argmin_z |y-z|_2 st \\sum z = 1 , 1 >= z_i >= 0 for all i\n        \"\"\"", "\n", "m", "=", "len", "(", "y", ")", "\n", "sorted_y", "=", "np", ".", "flip", "(", "np", ".", "sort", "(", "y", ")", ",", "axis", "=", "0", ")", "\n", "tmpsum", "=", "0.0", "\n", "tmax_f", "=", "(", "np", ".", "sum", "(", "y", ")", "-", "1.0", ")", "/", "m", "\n", "for", "i", "in", "range", "(", "m", "-", "1", ")", ":", "\n", "            ", "tmpsum", "+=", "sorted_y", "[", "i", "]", "\n", "tmax", "=", "(", "tmpsum", "-", "1", ")", "/", "(", "i", "+", "1.0", ")", "\n", "if", "tmax", ">", "sorted_y", "[", "i", "+", "1", "]", ":", "\n", "                ", "tmax_f", "=", "tmax", "\n", "break", "\n", "", "", "return", "np", ".", "maximum", "(", "y", "-", "tmax_f", ",", "np", ".", "zeros", "(", "y", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._next_point": [[82, 97], ["ozan_min_norm_solvers.MinNormSolver._projection2simplex", "numpy.sum", "numpy.sum", "len", "numpy.min", "len", "min", "numpy.sum", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._projection2simplex"], ["", "def", "_next_point", "(", "cur_val", ",", "grad", ",", "n", ")", ":", "\n", "        ", "proj_grad", "=", "grad", "-", "(", "np", ".", "sum", "(", "grad", ")", "/", "n", ")", "\n", "tm1", "=", "-", "1.0", "*", "cur_val", "[", "proj_grad", "<", "0", "]", "/", "proj_grad", "[", "proj_grad", "<", "0", "]", "\n", "tm2", "=", "(", "1.0", "-", "cur_val", "[", "proj_grad", ">", "0", "]", ")", "/", "(", "proj_grad", "[", "proj_grad", ">", "0", "]", ")", "\n", "\n", "skippers", "=", "np", ".", "sum", "(", "tm1", "<", "1e-7", ")", "+", "np", ".", "sum", "(", "tm2", "<", "1e-7", ")", "\n", "t", "=", "1", "\n", "if", "len", "(", "tm1", "[", "tm1", ">", "1e-7", "]", ")", ">", "0", ":", "\n", "            ", "t", "=", "np", ".", "min", "(", "tm1", "[", "tm1", ">", "1e-7", "]", ")", "\n", "", "if", "len", "(", "tm2", "[", "tm2", ">", "1e-7", "]", ")", ">", "0", ":", "\n", "            ", "t", "=", "min", "(", "t", ",", "np", ".", "min", "(", "tm2", "[", "tm2", ">", "1e-7", "]", ")", ")", "\n", "\n", "", "next_point", "=", "proj_grad", "*", "t", "+", "cur_val", "\n", "next_point", "=", "MinNormSolver", ".", "_projection2simplex", "(", "next_point", ")", "\n", "return", "next_point", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver.find_min_norm_element": [[98, 144], ["ozan_min_norm_solvers.MinNormSolver._min_norm_2d", "len", "numpy.zeros", "numpy.zeros", "range", "range", "ozan_min_norm_solvers.MinNormSolver._next_point", "range", "ozan_min_norm_solvers.MinNormSolver._min_norm_element_from2", "numpy.dot", "range", "numpy.sum", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._min_norm_2d", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._next_point", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "def", "find_min_norm_element", "(", "vecs", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of vectors (vecs), this method finds the minimum norm element in the convex hull\n        as min |u|_2 st. u = \\sum c_i vecs[i] and \\sum c_i = 1.\n        It is quite geometric, and the main idea is the fact that if d_{ij} = min |u|_2 st u = c x_i + (1-c) x_j; the solution lies in (0, d_{i,j})\n        Hence, we find the best 2-task solution, and then run the projected gradient descent until convergence\n        \"\"\"", "\n", "# Solution lying at the combination of two points", "\n", "dps", "=", "{", "}", "\n", "init_sol", ",", "dps", "=", "MinNormSolver", ".", "_min_norm_2d", "(", "vecs", ",", "dps", ")", "\n", "\n", "n", "=", "len", "(", "vecs", ")", "\n", "sol_vec", "=", "np", ".", "zeros", "(", "n", ")", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "0", "]", "]", "=", "init_sol", "[", "1", "]", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "1", "]", "]", "=", "1", "-", "init_sol", "[", "1", "]", "\n", "\n", "if", "n", "<", "3", ":", "\n", "# This is optimal for n=2, so return the solution", "\n", "            ", "return", "sol_vec", ",", "init_sol", "[", "2", "]", "\n", "\n", "", "iter_count", "=", "0", "\n", "\n", "grad_mat", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_mat", "[", "i", ",", "j", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "\n", "", "", "while", "iter_count", "<", "MinNormSolver", ".", "MAX_ITER", ":", "\n", "            ", "grad_dir", "=", "-", "1.0", "*", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", "\n", "new_point", "=", "MinNormSolver", ".", "_next_point", "(", "sol_vec", ",", "grad_dir", ",", "n", ")", "\n", "# Re-compute the inner products for line search", "\n", "v1v1", "=", "0.0", "\n", "v1v2", "=", "0.0", "\n", "v2v2", "=", "0.0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                    ", "v1v1", "+=", "sol_vec", "[", "i", "]", "*", "sol_vec", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "v1v2", "+=", "sol_vec", "[", "i", "]", "*", "new_point", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "v2v2", "+=", "new_point", "[", "i", "]", "*", "new_point", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "", "", "nc", ",", "nd", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", "\n", "new_sol_vec", "=", "nc", "*", "sol_vec", "+", "(", "1", "-", "nc", ")", "*", "new_point", "\n", "change", "=", "new_sol_vec", "-", "sol_vec", "\n", "if", "np", ".", "sum", "(", "np", ".", "abs", "(", "change", ")", ")", "<", "MinNormSolver", ".", "STOP_CRIT", ":", "\n", "                ", "return", "sol_vec", ",", "nd", "\n", "", "sol_vec", "=", "new_sol_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver.find_min_norm_element_FW": [[145, 187], ["ozan_min_norm_solvers.MinNormSolver._min_norm_2d", "len", "numpy.zeros", "numpy.zeros", "range", "range", "numpy.argmin", "numpy.dot", "numpy.dot", "ozan_min_norm_solvers.MinNormSolver._min_norm_element_from2", "numpy.dot", "numpy.dot", "numpy.sum", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._min_norm_2d", "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "", "def", "find_min_norm_element_FW", "(", "vecs", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of vectors (vecs), this method finds the minimum norm element in the convex hull\n        as min |u|_2 st. u = \\sum c_i vecs[i] and \\sum c_i = 1.\n        It is quite geometric, and the main idea is the fact that if d_{ij} = min |u|_2 st u = c x_i + (1-c) x_j; the solution lies in (0, d_{i,j})\n        Hence, we find the best 2-task solution, and then run the Frank Wolfe until convergence\n        \"\"\"", "\n", "# Solution lying at the combination of two points", "\n", "dps", "=", "{", "}", "\n", "init_sol", ",", "dps", "=", "MinNormSolver", ".", "_min_norm_2d", "(", "vecs", ",", "dps", ")", "\n", "\n", "n", "=", "len", "(", "vecs", ")", "\n", "sol_vec", "=", "np", ".", "zeros", "(", "n", ")", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "0", "]", "]", "=", "init_sol", "[", "1", "]", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "1", "]", "]", "=", "1", "-", "init_sol", "[", "1", "]", "\n", "\n", "if", "n", "<", "3", ":", "\n", "# This is optimal for n=2, so return the solution", "\n", "            ", "return", "sol_vec", ",", "init_sol", "[", "2", "]", "\n", "\n", "", "iter_count", "=", "0", "\n", "\n", "grad_mat", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_mat", "[", "i", ",", "j", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "", "", "while", "iter_count", "<", "MinNormSolver", ".", "MAX_ITER", ":", "\n", "            ", "t_iter", "=", "np", ".", "argmin", "(", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "\n", "v1v1", "=", "np", ".", "dot", "(", "sol_vec", ",", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "v1v2", "=", "np", ".", "dot", "(", "sol_vec", ",", "grad_mat", "[", ":", ",", "t_iter", "]", ")", "\n", "v2v2", "=", "grad_mat", "[", "t_iter", ",", "t_iter", "]", "\n", "\n", "nc", ",", "nd", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", "\n", "new_sol_vec", "=", "nc", "*", "sol_vec", "\n", "new_sol_vec", "[", "t_iter", "]", "+=", "1", "-", "nc", "\n", "\n", "change", "=", "new_sol_vec", "-", "sol_vec", "\n", "if", "np", ".", "sum", "(", "np", ".", "abs", "(", "change", ")", ")", "<", "MinNormSolver", ".", "STOP_CRIT", ":", "\n", "                ", "return", "sol_vec", ",", "nd", "\n", "", "sol_vec", "=", "new_sol_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.tstandley_taskgrouping.model_definitions.ozan_min_norm_solvers.gradient_normalizers": [[189, 206], ["numpy.sqrt", "numpy.sum", "print", "numpy.sqrt", "numpy.sum", "gr.pow().sum", "gr.pow", "gr.pow().sum", "gr.pow"], "function", ["None"], ["", "", "", "def", "gradient_normalizers", "(", "grads", ",", "losses", ",", "normalization_type", ")", ":", "\n", "    ", "gn", "=", "{", "}", "\n", "if", "normalization_type", "==", "'l2'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "[", "gr", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "for", "gr", "in", "grads", "[", "t", "]", "]", ")", ")", "\n", "", "", "elif", "normalization_type", "==", "'loss'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "losses", "[", "t", "]", "\n", "", "", "elif", "normalization_type", "==", "'loss+'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "losses", "[", "t", "]", "*", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "[", "gr", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "for", "gr", "in", "grads", "[", "t", "]", "]", ")", ")", "\n", "", "", "elif", "normalization_type", "==", "'none'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'ERROR: Invalid Normalization Type'", ")", "\n", "", "return", "gn", "", "", ""]]}