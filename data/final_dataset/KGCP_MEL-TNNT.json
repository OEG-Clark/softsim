{"home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.read_file.tryWithConfiFile": [[8, 10], ["os.path.isfile", "os.path.join", "os.path.join", "os.path.abspath", "os.path.abspath", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "tryWithConfiFile", "(", "f", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", ",", "f", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", ",", "f", ")", ")", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.path.findJsonFile": [[326, 364], ["dict", "dict", "list", "enumerate", "str", "app_runner.is_MEL_NER_File", "method.split", "pathlib.Path().joinpath", "pathlib.Path", "app_runner.is_MEL_NER_File", "pathlib.Path", "app_runner.get_file_name", "str", "str", "app_runner.getModel", "app_runner.get_file_name", "str", "app_runner.get_file_name", "str", "str", "len", "app_runner.get_file_name", "str", "str", "app_runner.getModel", "app_runner.get_file_name_except_hash", "dict.keys", "dict.setdefault", "fileinfo.compare_file_date", "app_runner.path.findJsonFile.method_in_file"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.get_file_name", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.getModel", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.get_file_name", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.get_file_name", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.get_file_name", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.getModel", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.get_file_name_except_hash", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.compare_file_date"], ["def", "findJsonFile", "(", "self", ",", "pathname", ",", "fileSet", ",", "filename", ",", "method", ",", "search", ")", ":", "\n", "        ", "def", "method_in_file", "(", "method", ",", "file", ")", ":", "\n", "            ", "for", "i", ",", "ele", "in", "enumerate", "(", "method", ".", "split", "(", "'|'", ")", ")", ":", "\n", "                ", "if", "ele", "not", "in", "file", ":", "\n", "                    ", "return", "False", "\n", "", "", "return", "True", "\n", "\n", "", "pathToFileDict", "=", "dict", "(", ")", "\n", "uniqueFileDict", "=", "dict", "(", ")", "\n", "for", "file", "in", "list", "(", "fileSet", ")", ":", "\n", "            ", "full_path_to_file", "=", "str", "(", "Path", "(", "pathname", ")", ".", "joinpath", "(", "file", ")", ")", "\n", "if", "is_MEL_NER_File", "(", "file", ")", ":", "\n", "                ", "if", "(", "method", "and", "(", "len", "(", "method", ".", "split", "(", "'|'", ")", ")", "==", "1", "and", "pt_dp_name", "not", "in", "file", "or", "len", "(", "method", ".", "split", "(", "'|'", ")", ")", ">", "1", "and", "method_in_file", "(", "method", ",", "file", ")", ")", "and", "get_file_name", "(", "file", ")", "==", "str", "(", "filename", ")", "and", "str", "(", "filename", ")", "in", "file", "and", "is_MEL_NER_File", "(", "method", ")", "and", "method", "==", "getModel", "(", "file", ")", ")", "or", "(", "get_file_name", "(", "file", ")", "==", "str", "(", "filename", ")", "and", "method", "is", "None", "and", "search", "is", "None", ")", "or", "(", "search", "and", "get_file_name", "(", "file", ")", "==", "str", "(", "filename", ")", "and", "method", "is", "None", "and", "str", "(", "search", ")", "in", "file", ")", "or", "(", "method", "and", "len", "(", "method", ".", "split", "(", "'|'", ")", ")", "==", "2", "and", "get_file_name", "(", "file", ")", "==", "str", "(", "filename", ")", "and", "str", "(", "filename", ")", "in", "file", "and", "method", ".", "split", "(", "'|'", ")", "[", "0", "]", "==", "getModel", "(", "file", ")", "and", "method", ".", "split", "(", "'|'", ")", "[", "1", "]", "in", "file", ")", ":", "\n", "# coreference", "\n", "                    ", "pathToFileDict", "[", "file", "]", "=", "full_path_to_file", "\n", "# if the file has suffixes", "\n", "", "", "elif", "(", "Path", "(", "file", ")", ".", "suffix", "!=", "\"\"", ")", ":", "\n", "                ", "if", "method", "and", "(", "len", "(", "method", ".", "split", "(", "'|'", ")", ")", "==", "1", "and", "len", "(", "file", ".", "split", "(", "'--'", ")", ")", "==", "4", "and", "pt_dp_name", "not", "in", "file", "or", "len", "(", "method", ".", "split", "(", "'|'", ")", ")", ">", "1", "and", "method_in_file", "(", "method", ",", "file", ")", ")", "and", "method", ".", "split", "(", "'|'", ")", "[", "0", "]", "==", "getModel", "(", "file", ")", "and", "(", "str", "(", "filename", ")", "==", "get_file_name", "(", "file", ")", "or", "str", "(", "filename", ")", "==", "getHash", "(", "file", ")", ")", "and", "str", "(", "filename", ")", "in", "str", "(", "file", ")", "or", "(", "method", "is", "None", "and", "search", "is", "None", "and", "(", "str", "(", "filename", ")", "==", "get_file_name", "(", "file", ")", "or", "str", "(", "filename", ")", "==", "getHash", "(", "file", ")", ")", ")", "or", "(", "method", "is", "None", "and", "search", "and", "(", "str", "(", "filename", ")", "==", "get_file_name", "(", "file", ")", "or", "str", "(", "filename", ")", "==", "getHash", "(", "file", ")", ")", "and", "str", "(", "search", ")", "in", "file", ")", "or", "(", "method", "and", "len", "(", "method", ".", "split", "(", "'|'", ")", ")", "==", "2", "and", "get_file_name", "(", "file", ")", "==", "str", "(", "filename", ")", "and", "str", "(", "filename", ")", "in", "file", "and", "method", ".", "split", "(", "'|'", ")", "[", "0", "]", "==", "getModel", "(", "file", ")", "and", "method", ".", "split", "(", "'|'", ")", "[", "1", "]", "in", "file", ")", ":", "\n", "                    ", "if", "(", "get_file_name_except_hash", "(", "file", ")", "not", "in", "uniqueFileDict", ".", "keys", "(", ")", ")", ":", "\n", "                        ", "pathToFileDict", "[", "file", "]", "=", "full_path_to_file", "\n", "# set key as the filename without hashes and value as the full directory path to file", "\n", "uniqueFileDict", ".", "setdefault", "(", "get_file_name_except_hash", "(", "file", ")", ",", "full_path_to_file", ")", "\n", "", "else", ":", "\n", "                        ", "latest_file_path", "=", "fileinfo", ".", "compare_file_date", "(", "uniqueFileDict", "[", "get_file_name_except_hash", "(", "file", ")", "]", ",", "full_path_to_file", ")", "\n", "# if the latest_file_path is larger then the original file.", "\n", "if", "latest_file_path", "==", "full_path_to_file", ":", "\n", "                            ", "pathToFileDict", ".", "pop", "(", "str", "(", "Path", "(", "uniqueFileDict", "[", "get_file_name_except_hash", "(", "file", ")", "]", ")", ".", "parts", "[", "-", "1", "]", ")", ")", "\n", "", "uniqueFileDict", "[", "get_file_name_except_hash", "(", "file", ")", "]", "=", "latest_file_path", "\n", "pathToFileDict", "[", "file", "]", "=", "latest_file_path", "\n", "", "", "", "", "return", "pathToFileDict", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.path.get": [[365, 717], ["flask.request.args.get", "app_runner.getpageno", "path_function.extractPathInfo", "app_runner.isSystem", "path_function.traversePathIfExist", "flask.request.args.get", "pathlib.PurePath", "app_runner.http_normalize_slashes", "flask.redirect", "app_runner.readText", "pathlib.Path().joinpath", "app_runner.isAcceptJSON", "app_runner.isAcceptHTMLorDefault", "app_runner.http_normalize_slashes", "set", "set", "pathlib.Path().joinpath.iterdir", "list", "pagination.partionlist", "app_runner.isAcceptJSON", "app_runner.path.findJsonFile", "pathlib.Path", "pathlib.PurePath", "flask.make_response", "len", "len", "flask.make_response", "app_runner.isAcceptHTMLorDefault", "str", "len", "app_runner.path.findJsonFile", "list", "app_runner.isAcceptJSON", "json_function.recursive", "pathlib.PurePath", "flask.make_response", "app_runner.is_all_json", "app_runner.help", "app_runner.is_MEL_NER_File", "allowed_directory.keys", "flask.make_response", "pathlib.Path().joinpath.iterdir", "flask.request.args.get", "flask.request.args.get", "flask.request.args.get", "dict", "flask.make_response", "dict", "app_runner.path.keys", "method.append", "flask.make_response", "app_runner.isAcceptHTMLorDefault", "pathlib.Path", "open", "json.load", "list", "open", "json.load", "app_runner.is_all_json", "app_runner.is_MEL_NER_File", "app_runner.is_in_keyword", "json_function.Json_dict", "flask.make_response", "flask.make_response", "str", "set.add", "set.add", "set.add", "flask.render_template", "app_runner.help", "list", "aggregation.aggregate_jsonfile_summary", "app_runner.is_MEL_NER_File", "i.replace().replace().replace", "json_function.Json_dump", "pagination.partionlist", "pagination.partionlist", "pagination.partionlist", "pagination.partionlist", "flask.make_response", "app_runner.path.values", "pathlib.PurePath", "find_entity.keys", "json_function.Json_dump", "str", "str", "app_runner.extractMELNERFilename", "str", "str", "str", "flask.request.args.get", "flask.request.args.get", "list", "app_runner.path.values", "dict", "len", "fileinfo.createDate", "fileinfo.size", "app_runner.contain_sentence", "flask.render_template", "list", "flask.make_response", "pathlib.Path", "pathlib.Path", "str", "str().split", "str", "str", "str", "len", "len", "app_runner.path.values", "app_runner.path.get.coref_generated"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.getpageno", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.extractPathInfo", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isSystem", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.traversePathIfExist", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.http_normalize_slashes", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.readText", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptJSON", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptHTMLorDefault", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.http_normalize_slashes", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partionlist", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptJSON", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.path.findJsonFile", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptHTMLorDefault", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.path.findJsonFile", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptJSON", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.recursive", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_all_json", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.help", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptHTMLorDefault", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_all_json", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_in_keyword", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.Json_dict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.help", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.aggregate_jsonfile_summary", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.Json_dump", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partionlist", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partionlist", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partionlist", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partionlist", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.Json_dump", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.extractMELNERFilename", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.createDate", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.size", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.contain_sentence"], ["", "def", "get", "(", "self", ",", "pathname", ")", ":", "\n", "# catch the search key words", "\n", "        ", "search", "=", "request", ".", "args", ".", "get", "(", "config", "[", "'request-args'", "]", "[", "'search'", "]", ")", "\n", "page_no", "=", "getpageno", "(", "request", ".", "args", ".", "get", "(", "'page'", ",", "type", "=", "int", ")", ")", "\n", "pathToJson", ",", "filenameandModel", ",", "fileAttribute", "=", "extractPathInfo", "(", "basedir", ",", "pathname", ",", "allowed_attribute", ")", "\n", "# if pathToJson is null do nothing", "\n", "if", "pathToJson", "==", "PurePath", "(", ")", ":", "return", "\n", "if", "not", "(", "isAcceptJSON", "(", ")", "or", "isAcceptHTMLorDefault", "(", ")", ")", ":", "return", "ERROR_ACCEPT", "\n", "# return back to a normal url", "\n", "if", "(", "http_normalize_slashes", "(", "request", ".", "url", ")", "!=", "request", ".", "url", ")", ":", "\n", "            ", "return", "redirect", "(", "http_normalize_slashes", "(", "request", ".", "url", ")", ",", "code", "=", "302", ")", "\n", "\n", "# when the path is in system set-up (e.g. stats/logs)", "\n", "", "if", "isSystem", "(", "pathname", ")", ":", "\n", "            ", "return", "readText", "(", "pathname", ")", "\n", "\n", "# if path is valid then let user for visited", "\n", "", "if", "(", "traversePathIfExist", "(", "basedir", ",", "pathToJson", ",", "allowed_directory", ")", ")", ":", "\n", "            ", "cpltPathtoJson", "=", "Path", "(", "basedir", ")", ".", "joinpath", "(", "pathToJson", ")", "\n", "# if the path depth is not long which means that it only gives the path to json", "\n", "# When dealing with the path _examples/_____/==================================================#", "\n", "if", "filenameandModel", "==", "[", "]", "and", "fileAttribute", "==", "PurePath", "(", ")", ":", "\n", "# dealing with the helping argument", "\n", "                ", "if", "help_request", "in", "request", ".", "args", ":", "\n", "                    ", "response", "=", "make_response", "(", "help", "(", "0", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "\"http-headers\"", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "\n", "", "fileSet", "=", "set", "(", ")", "\n", "directorySet", "=", "set", "(", ")", "\n", "for", "file", "in", "cpltPathtoJson", ".", "iterdir", "(", ")", ":", "\n", "                    ", "if", "(", "(", "Path", "(", "file", ")", ".", "suffix", "==", "'.json'", "and", "search", "is", "None", ")", "or", "(", "Path", "(", "file", ")", ".", "suffix", "==", "'.json'", "and", "search", "and", "str", "(", "search", ")", "in", "str", "(", "file", ".", "parts", "[", "-", "1", "]", ")", ")", ")", ":", "\n", "                        ", "if", "is_MEL_NER_File", "(", "str", "(", "file", ".", "parts", "[", "-", "1", "]", ")", ")", ":", "\n", "                            ", "fileSet", ".", "add", "(", "extractMELNERFilename", "(", "str", "(", "file", ".", "parts", "[", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "fileSet", ".", "add", "(", "str", "(", "file", ".", "parts", "[", "-", "1", "]", ")", ".", "split", "(", "'--'", ")", "[", "0", "]", ")", "\n", "", "", "elif", "(", "(", "Path", "(", "file", ")", ".", "suffix", "==", "''", "and", "search", "is", "None", ")", "or", "(", "Path", "(", "file", ")", ".", "suffix", "==", "''", "and", "search", "and", "str", "(", "search", ")", "in", "str", "(", "file", ".", "parts", "[", "-", "1", "]", ")", ")", ")", ":", "\n", "                        ", "directorySet", ".", "add", "(", "str", "(", "file", ".", "parts", "[", "-", "1", "]", ")", ")", "\n", "# this generate unique filename", "\n", "", "", "listofFilename", "=", "list", "(", "fileSet", "|", "directorySet", ")", "\n", "page_split_list", "=", "partionlist", "(", "listofFilename", ",", "max_elements_in_page", ")", "\n", "# if the page_split_list is less than page_no then return wrong results", "\n", "if", "len", "(", "page_split_list", ")", "<=", "page_no", ":", "return", "EMPTY_RESULTS", "\n", "if", "len", "(", "listofFilename", ")", "<", "1", ":", "return", "EMPTY_RESULTS", "\n", "if", "isAcceptJSON", "(", ")", ":", "\n", "                    ", "response", "=", "make_response", "(", "{", "\n", "\"Filenames\"", ":", "fileSet", ",", "\n", "\"Folders\"", ":", "directorySet", "\n", "}", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "", "elif", "isAcceptHTMLorDefault", "(", ")", ":", "\n", "                    ", "for", "k", "in", "allowed_directory", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "allowed_directory", "[", "k", "]", "==", "str", "(", "cpltPathtoJson", ")", ":", "\n", "                            ", "title", "=", "k", "\n", "", "elif", "allowed_directory", "[", "k", "]", "in", "str", "(", "cpltPathtoJson", ")", ":", "\n", "                            ", "title", "=", "''", "\n", "\n", "", "", "response", "=", "make_response", "(", "render_template", "(", "'pathpages.html'", ",", "\n", "file", "=", "page_split_list", "[", "page_no", "]", ",", "\n", "len", "=", "len", "(", "page_split_list", "[", "page_no", "]", ")", ",", "\n", "pathname", "=", "pathname", ",", "\n", "page_no", "=", "page_no", "+", "1", ",", "\n", "pagenum", "=", "len", "(", "page_split_list", ")", ",", "\n", "title", "=", "title", ",", "\n", "containsentencelist", "=", "None", ",", "\n", "max_pages_in_row", "=", "max_pages_in_row", ",", "\n", "datelist", "=", "None", ",", "\n", "sizelist", "=", "None", ",", "\n", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'html-header'", "]", "\n", "", "return", "response", "\n", "#==========================================================================================================#", "\n", "", "else", ":", "\n", "                ", "filename", "=", "filenameandModel", "[", "0", "]", "\n", "method", "=", "[", "]", "\n", "fileSet", "=", "[", "str", "(", "file", ".", "parts", "[", "-", "1", "]", ")", "for", "file", "in", "cpltPathtoJson", ".", "iterdir", "(", ")", "if", "file", ".", "suffix", "==", "'.json'", "]", "\n", "def", "coref_generated", "(", ")", ":", "\n", "                    ", "flag", "=", "False", "\n", "for", "f", "in", "fileSet", ":", "\n", "                        ", "if", "str", "(", "filename", ")", "in", "f", "and", "'(coref)'", "in", "f", ":", "\n", "                            ", "flag", "=", "True", "\n", "", "", "return", "flag", "\n", "\n", "", "def", "is_retrieve_full", "(", ")", ":", "\n", "                    ", "return", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "==", "'full'", "\n", "\n", "", "def", "is_retrieve_corefs", "(", ")", ":", "\n", "                    ", "return", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "==", "'corefs'", "\n", "\n", "", "def", "is_retrieve_sentences", "(", ")", ":", "\n", "                    ", "return", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "==", "'sentences'", "\n", "\n", "# When only given the filename but without method When dealing _examples/filename/====================#", "\n", "", "if", "len", "(", "filenameandModel", ")", "==", "1", ":", "\n", "                    ", "pathToFileDict", "=", "self", ".", "findJsonFile", "(", "cpltPathtoJson", ",", "fileSet", ",", "filename", ",", "None", ",", "search", ")", "\n", "if", "pathToFileDict", "==", "dict", "(", ")", ":", "return", "EMPTY_RESULTS", "\n", "# during help==============================================================================#", "\n", "if", "help_request", "in", "request", ".", "args", ":", "\n", "                        ", "response", "=", "make_response", "(", "help", "(", "1", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "# coref task =============================================================================#", "\n", "", "if", "'CoRef_task'", "in", "request", ".", "args", "and", "'retrieve'", "in", "request", ".", "args", ":", "\n", "                        ", "if", "request", ".", "args", ".", "get", "(", "coref_args", "[", "'repl'", "]", ")", "in", "[", "'0'", ",", "'1'", "]", "and", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "in", "retrieve_args", ":", "\n", "# Since the file with the same name but with different models have the same \"CLEANTEXT\" to generate", "\n", "                            ", "fileTocoref", "=", "list", "(", "pathToFileDict", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "if", "'MEL'", "in", "fileTocoref", ":", "\n", "                                ", "if", "coref_generated", "(", ")", "and", "request", ".", "args", ".", "get", "(", "coref_args", "[", "'repl'", "]", ")", "==", "'0'", ":", "\n", "                                    ", "return", "ERROR_COREF_IS_EXIST", "\n", "", "else", ":", "\n", "                                    ", "with", "open", "(", "fileTocoref", ",", "'r'", ")", "as", "f", ":", "\n", "                                        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "# if the file is mel_ner file", "\n", "if", "\"Specific-Metadata\"", "in", "data", ".", "keys", "(", ")", ":", "\n", "                                            ", "clean_text", "=", "data", "[", "'Specific-Metadata'", "]", "[", "'text-analysis'", "]", "[", "'clean-text'", "]", "\n", "# When coreference resolution task is performed on specific metadata,", "\n", "# the thread is directly setting to max_thread.", "\n", "cNLP", "=", "coreNLP", "(", "clean_text", ",", "file_size", ")", "\n", "cNLP", "=", "cNLP", ".", "formatjson", "(", ")", "\n", "outputfilename", "=", "f\"{filename}-MEL+NER_output-(coref).json\"", "\n", "#normalise the filename", "\n", "outputfilepath", "=", "str", "(", "os", ".", "path", ".", "join", "(", "cpltPathtoJson", ",", "outputfilename", ")", ")", "\n", "with", "open", "(", "outputfilepath", ",", "'w'", ")", "as", "f", ":", "\n", "                                                ", "json", ".", "dump", "(", "cNLP", ",", "f", ")", "\n", "# full retrieve", "\n", "", "if", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "==", "'full'", ":", "\n", "                                                ", "return", "cNLP", "\n", "# sentence retrieve", "\n", "", "else", ":", "\n", "                                                ", "return", "cNLP", "[", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "]", "\n", "", "", "else", ":", "\n", "                                            ", "return", "ERROR_COREF_NON_EXIST", "\n", "", "", "", "", "", "return", "ERROR_COREF", "\n", "# during aggregation=======================================================================#", "\n", "", "if", "aggr", "in", "request", ".", "args", ":", "\n", "# deal with the situation in MEL+NER situation", "\n", "                        ", "l", "=", "dict", "(", ")", "\n", "try", ":", "\n", "                            ", "for", "file", "in", "list", "(", "pathToFileDict", ".", "values", "(", ")", ")", ":", "\n", "                                ", "if", "not", "(", "is_MEL_NER_File", "(", "file", ")", "or", "is_special_attribute", "(", "file", ")", ")", ":", "\n", "                                    ", "l", ".", "setdefault", "(", "file", ".", "replace", "(", "Path", "(", "file", ")", ".", "parts", "[", "-", "1", "]", ".", "split", "(", "'--'", ")", "[", "2", "]", ",", "''", ")", ",", "[", "]", ")", ".", "append", "(", "file", ")", "\n", "", "", "", "except", ":", "\n", "                            ", "return", "ERROR_AGGR", "\n", "# wait to change summary", "\n", "# if the aggregated file is null then shows the error message.", "\n", "", "if", "(", "aggregate_jsonfile_summary", "(", "l", ")", "==", "[", "dict", "(", ")", "for", "_", "in", "range", "(", "4", ")", "]", ")", ":", "\n", "                            ", "return", "ERROR_AGGR", "\n", "", "else", ":", "\n", "                            ", "return", "SUCCESS_AGGR", "\n", "", "return", "ERROR_AGGR_ALERT", "\n", "#==========================================================================================#", "\n", "", "for", "i", "in", "list", "(", "pathToFileDict", ".", "keys", "(", ")", ")", ":", "\n", "                        ", "if", "not", "is_MEL_NER_File", "(", "i", ")", ":", "\n", "# if the file contains coreference resolution", "\n", "                            ", "if", "'coref'", "not", "in", "i", ":", "\n", "                                ", "i", "=", "i", ".", "replace", "(", "'--NER'", ",", "''", ")", ".", "replace", "(", "i", ".", "split", "(", "'--'", ")", "[", "-", "1", "]", ",", "''", ")", "[", ":", "-", "2", "]", "\n", "", "", "else", ":", "\n", "                            ", "attr", "=", "\"\"", "if", "not", "has_attribute", "(", "allowed_attribute", ",", "i", ")", "else", "f\"--{find_element_in_bracket(i,-1)}\"", "\n", "i", "=", "f\"{extractMELNERFilename(i)}--{extract_file(i)}{attr}\"", "\n", "", "method", ".", "append", "(", "i", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "replace", "(", "\".json\"", ",", "\"\"", ")", ")", "\n", "", "if", "isAcceptJSON", "(", ")", ":", "\n", "                        ", "response", "=", "make_response", "(", "Json_dump", "(", "'Models'", ",", "method", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "", "elif", "isAcceptHTMLorDefault", "(", ")", ":", "\n", "                        ", "page_split_list", "=", "partionlist", "(", "method", ",", "max_elements_in_page", ")", "\n", "if", "len", "(", "page_split_list", ")", "<=", "page_no", ":", "return", "EMPTY_RESULTS", "\n", "datelist", "=", "[", "fileinfo", ".", "createDate", "(", "i", ")", "for", "i", "in", "list", "(", "pathToFileDict", ".", "values", "(", ")", ")", "]", "\n", "date_split_list", "=", "partionlist", "(", "datelist", ",", "max_elements_in_page", ")", "\n", "sizelist", "=", "[", "fileinfo", ".", "size", "(", "i", ")", "for", "i", "in", "list", "(", "pathToFileDict", ".", "values", "(", ")", ")", "]", "\n", "size_split_list", "=", "partionlist", "(", "sizelist", ",", "max_elements_in_page", ")", "\n", "sentence_list", "=", "[", "contain_sentence", "(", "i", ")", "for", "i", "in", "list", "(", "pathToFileDict", ".", "values", "(", ")", ")", "]", "\n", "sentence_split_list", "=", "partionlist", "(", "sentence_list", ",", "max_elements_in_page", ")", "\n", "\n", "response", "=", "make_response", "(", "render_template", "(", "'pathpages.html'", ",", "\n", "file", "=", "page_split_list", "[", "page_no", "]", ",", "\n", "len", "=", "len", "(", "page_split_list", "[", "page_no", "]", ")", ",", "\n", "page_no", "=", "page_no", "+", "1", ",", "\n", "pathname", "=", "pathname", ",", "\n", "containsentencelist", "=", "sentence_split_list", "[", "page_no", "]", ",", "\n", "max_pages_in_row", "=", "max_pages_in_row", ",", "\n", "pagenum", "=", "len", "(", "page_split_list", ")", ",", "\n", "title", "=", "''", ",", "\n", "datelist", "=", "date_split_list", "[", "page_no", "]", ",", "\n", "sizelist", "=", "size_split_list", "[", "page_no", "]", ",", "\n", ")", ")", "\n", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'html-header'", "]", "\n", "", "return", "response", "\n", "#========================================================================================================#", "\n", "#When opening derivative file like coref file ===========================================================#", "\n", "#When dealing with the jsonFile ========================================================================#", "\n", "#under this pathToFileDict should contain only one file ", "\n", "", "model", "=", "\"|\"", ".", "join", "(", "filenameandModel", "[", "1", ":", "]", ")", "\n", "pathToFileDict", "=", "self", ".", "findJsonFile", "(", "cpltPathtoJson", ",", "fileSet", ",", "filename", ",", "model", ",", "search", ")", "\n", "# if url name contains coref then go through that file:", "\n", "if", "'coref'", "in", "Path", "(", "pathname", ")", ".", "parts", ":", "\n", "                    ", "with", "open", "(", "list", "(", "pathToFileDict", ".", "values", "(", ")", ")", "[", "0", "]", ")", "as", "jf", ":", "\n", "                        ", "jsonfile", "=", "json", ".", "load", "(", "jf", ")", "\n", "return", "jsonfile", "\n", "", "return", "EMPTY_RESULTS", "\n", "", "try", ":", "\n", "                    ", "completejsonfilepath", "=", "list", "(", "pathToFileDict", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "with", "open", "(", "completejsonfilepath", ")", "as", "f", ":", "\n", "                        ", "jsonfile", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "except", ":", "\n", "                    ", "return", "EMPTY_RESULTS", "\n", "# summary is demonstrating the whole summary file", "\n", "", "content", "=", "jsonfile", "if", "is_all_json", "(", "model", ")", "and", "fileAttribute", "==", "PurePath", "(", ")", "else", "recursive", "(", "jsonfile", ",", "fileAttribute", ",", "is_MEL_NER_File", "(", "completejsonfilepath", ")", ",", "is_in_keyword", "(", "fileAttribute", ")", ")", "\n", "#When dealing with the args ====================================#   ", "\n", "if", "request", ".", "args", ":", "\n", "                    ", "for", "req", "in", "request", ".", "args", ":", "\n", "                        ", "if", "req", "in", "find_entity", ".", "keys", "(", ")", ":", "\n", "                            ", "try", ":", "\n", "                                ", "response", "=", "make_response", "(", "findEntityValueWithKey", "(", "content", ",", "req", ",", "find_entity", "[", "req", "]", ",", "str", "(", "fileAttribute", ".", "parts", "[", "-", "1", "]", ")", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "", "except", ":", "\n", "                                ", "return", "ERROR_ARGS", "\n", "", "", "elif", "req", "==", "config", "[", "'request-args'", "]", "[", "'search'", "]", ":", "\n", "                            ", "return", "ERROR_SEARCH", "\n", "# to search the substring", "\n", "", "elif", "(", "req", "[", "0", "]", "==", "'*'", "and", "req", "[", "-", "1", "]", "==", "'*'", ")", ":", "\n", "                            ", "response", "=", "make_response", "(", "Json_dict", "(", "\"search: \"", "+", "str", "(", "req", ")", ",", "searchKeyWord", "(", "content", ",", "req", "[", "1", ":", "-", "1", "]", ",", "start", "=", "1", ",", "end", "=", "1", ",", "l", "=", "{", "}", ")", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "", "elif", "req", "[", "0", "]", "==", "'*'", "and", "req", "[", "-", "1", "]", "!=", "'*'", ":", "\n", "                            ", "response", "=", "make_response", "(", "Json_dict", "(", "\"search: \"", "+", "str", "(", "req", ")", ",", "searchKeyWord", "(", "content", ",", "req", "[", "1", ":", "]", ",", "end", "=", "1", ",", "l", "=", "{", "}", ")", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "", "elif", "req", "[", "0", "]", "!=", "'*'", "and", "req", "[", "-", "1", "]", "==", "'*'", ":", "\n", "                            ", "response", "=", "make_response", "(", "Json_dict", "(", "\"search: \"", "+", "str", "(", "req", ")", ",", "searchKeyWord", "(", "content", ",", "req", "[", ":", "-", "1", "]", ",", "start", "=", "1", ",", "l", "=", "{", "}", ")", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "#if the method is summary then can do filtering function or return error=================================#", "\n", "", "elif", "req", "in", "config", "[", "'request-args'", "]", "[", "'filterfunction'", "]", ":", "\n", "                            ", "if", "str", "(", "model", ")", "==", "'summary'", ":", "\n", "                                ", "response", "=", "make_response", "(", "getattr", "(", "filter_summary", ",", "config", "[", "'request-args'", "]", "[", "'filterfunction'", "]", "[", "req", "]", ")", "(", "jsonfile", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "", "else", ":", "\n", "                                ", "return", "ERROR_FILTER", "\n", "\n", "# predict the execution time", "\n", "", "", "elif", "req", "==", "\"predict\"", ":", "\n", "# if predict the tool", "\n", "                            ", "if", "'tool'", "in", "request", ".", "args", ":", "\n", "                                ", "tool", "=", "request", ".", "args", ".", "get", "(", "pt_dp", "[", "'tool'", "]", ")", "\n", "if", "tool", "in", "pt_dp", "[", "'pt-dp-tool'", "]", ".", "keys", "(", ")", ":", "\n", "                                    ", "predict_time", "=", "ReadandPredict", "(", "tool", ",", "fileinfo", ".", "size", "(", "completejsonfilepath", ")", ")", "\n", "return", "make_response", "(", "Json_dict", "(", "f\"predicted elapsed time (minutes) in {tool} tool\"", ",", "predict_time", ")", ")", "\n", "# if is requested to do pos-tagging and dependency parsing=====================#    ", "\n", "", "", "", "elif", "req", "==", "pt_dp", "[", "'PT-DP'", "]", ":", "\n", "                            ", "if", "'tool'", "in", "request", ".", "args", ":", "\n", "                                ", "start", "=", "time", ".", "process_time", "(", ")", "\n", "tool", "=", "request", ".", "args", ".", "get", "(", "pt_dp", "[", "'tool'", "]", ")", "\n", "if", "tool", "in", "pt_dp", "[", "'pt-dp-tool'", "]", ".", "keys", "(", ")", ":", "\n", "                                    ", "methods", "=", "pt_dp", "[", "'pt-dp-tool'", "]", "[", "tool", "]", ".", "split", "(", "'|'", ")", "\n", "toolname", "=", "f\"{pt_dp_name}_all\"", "if", "tool", "==", "''", "or", "tool", "==", "'all'", "else", "f'{pt_dp_name}_{tool}'", "\n", "if", "request", ".", "args", ".", "get", "(", "pt_dp", "[", "'replace'", "]", ")", "==", "\"0\"", ":", "\n", "                                        ", "for", "file", "in", "fileSet", ":", "\n", "                                            ", "if", "(", "get_file_name", "(", "file", ")", "==", "str", "(", "filenameandModel", "[", "0", "]", ")", "and", "str", "(", "filenameandModel", "[", "1", "]", ")", "==", "getModel", "(", "file", ")", ")", ":", "\n", "                                                ", "if", "(", "MEL_NER_METHODS", "not", "in", "file", "and", "find_element_in_bracket", "(", "file", ",", "1", ")", ")", "==", "toolname", "or", "(", "MEL_NER_METHODS", "in", "file", "and", "find_element_in_bracket", "(", "file", ",", "0", ")", ")", "==", "toolname", ":", "\n", "                                                    ", "return", "ERROR_POS_TAG_FILE_EXIST", "\n", "", "", "", "", "if", "request", ".", "args", ".", "get", "(", "pt_dp", "[", "'replace'", "]", ")", "in", "[", "\"0\"", ",", "\"1\"", "]", ":", "\n", "                                        ", "if", "MEL_NER_METHODS", "in", "str", "(", "completejsonfilepath", ")", ":", "\n", "                                            ", "postagfilepath", "=", "str", "(", "completejsonfilepath", ")", "[", ":", "-", "5", "]", "+", "f\"-({toolname})\"", "+", "str", "(", "completejsonfilepath", ")", "[", "-", "5", ":", "]", "\n", "", "else", ":", "\n", "                                            ", "postagfilepath", "=", "f'{\"--\".join(str(completejsonfilepath).split(\"--\")[0:3])}--({toolname})--{str(completejsonfilepath).split(\"--\")[-1]}'", "\n", "", "if", "pos_tag_sentence", "(", "str", "(", "model", ")", ",", "jsonfile", ",", "methods", ")", ":", "\n", "                                            ", "with", "open", "(", "postagfilepath", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "                                                ", "json", ".", "dump", "(", "pos_tag_sentence", "(", "str", "(", "model", ")", ",", "jsonfile", ",", "methods", ")", ",", "outfile", ")", "\n", "", "elapsed_time", "=", "time", ".", "process_time", "(", ")", "-", "start", "\n", "# store the time after execution", "\n", "store", "(", "fileinfo", ".", "size", "(", "completejsonfilepath", ")", ",", "elapsed_time", ",", "tool", ")", "\n", "return", "SUCCESS_POS_TAG", "\n", "", "else", ":", "\n", "                                            ", "return", "FAIL_POS_TAG", "\n", "", "", "", "else", ":", "\n", "                                    ", "return", "ERROR_POS_TAG_NOT_EXIST_TOOL", "\n", "", "", "else", ":", "\n", "                                ", "return", "ERROR_POS_TAG_NO_TOOL", "\n", "\n", "", "", "elif", "req", "in", "\"CoRef_task\"", "and", "request", ".", "args", ".", "get", "(", "coref_args", "[", "'repl'", "]", ")", "in", "[", "'0'", ",", "'1'", "]", ":", "\n", "# if file has been generated:", "\n", "                            ", "if", "coref_generated", "(", ")", "and", "request", ".", "args", ".", "get", "(", "coref_args", "[", "'repl'", "]", ")", "==", "'0'", ":", "\n", "                                ", "return", "ERROR_COREF_IS_EXIST", "\n", "", "else", ":", "\n", "# if the file is mel_ner file", "\n", "                                ", "if", "not", "is_MEL_NER_File", "(", "str", "(", "filename", ")", ")", ":", "\n", "                                    ", "output", "=", "jsonfile", "[", "'NLP-NER'", "]", "[", "model", "]", "[", "'_output'", "]", "\n", "outputfilename", "=", "f\"{filename}--{model}--(coref).json\"", "\n", "coref_output", "=", "{", "}", "\n", "filesize", "=", "fileinfo", ".", "size", "(", "completejsonfilepath", ")", "\n", "for", "catg", ",", "ents", "in", "output", ".", "items", "(", ")", ":", "\n", "                                        ", "for", "ent", "in", "ents", ":", "\n", "                                            ", "if", "'sentence'", "in", "ent", ".", "keys", "(", ")", ":", "\n", "                                                ", "entity", "=", "ent", "[", "'entity'", "]", "\n", "start_index", "=", "ent", "[", "'start_index'", "]", "\n", "sentence", "=", "ent", "[", "'sentence'", "]", "\n", "cNLP", "=", "coreNLP", "(", "sentence", ",", "filesize", ")", "\n", "cNLP", "=", "cNLP", ".", "formatjson", "(", ")", "\n", "\n", "# normalise entity name", "\n", "outputfilepath", "=", "str", "(", "os", ".", "path", ".", "join", "(", "cpltPathtoJson", ",", "outputfilename", ")", ")", "\n", "if", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "==", "'full'", ":", "\n", "                                                    ", "cNLP", "=", "cNLP", "\n", "", "elif", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "in", "[", "'corefs'", ",", "'sentences'", "]", ":", "\n", "                                                    ", "cNLP", "=", "cNLP", "[", "request", ".", "args", ".", "get", "(", "'retrieve'", ")", "]", "\n", "", "else", ":", "\n", "                                                    ", "return", "ERROR_COREF_NON_EXIST", "\n", "\n", "", "coref_result", "=", "{", "\n", "\"sentence\"", ":", "sentence", ",", "\n", "\"results\"", ":", "cNLP", "\n", "}", "\n", "coref_output", ".", "setdefault", "(", "\"co-reference-resolution-results\"", ",", "[", "]", ")", ".", "append", "(", "coref_result", ")", "\n", "\n", "", "", "", "with", "open", "(", "outputfilepath", ",", "'w'", ")", "as", "f", ":", "\n", "                                        ", "json", ".", "dump", "(", "coref_output", ",", "f", ")", "\n", "\n", "", "return", "coref_output", "\n", "", "return", "ERROR_COREF_NON_EXIST", "\n", "#===============================================================================#", "\n", "# jump out of the loop", "\n", "", "break", "\n", "\n", "", "elif", "req", "==", "help_request", ":", "\n", "# during help==============================================================================#", "\n", "                            ", "response", "=", "make_response", "(", "help", "(", "3", ")", ")", "if", "fileAttribute", "!=", "PurePath", "(", ")", "else", "make_response", "(", "help", "(", "2", ")", ")", "\n", "if", "str", "(", "model", ")", "==", "'summary'", ":", "\n", "                                ", "response", "=", "make_response", "(", "help", "(", "4", ")", ")", "\n", "", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "#========================================================================================================", "\n", "", "", "return", "ERROR_ARGS", "\n", "#===============================================================#", "\n", "", "if", "fileAttribute", "!=", "PurePath", "(", ")", ":", "\n", "                    ", "response", "=", "make_response", "(", "Json_dict", "(", "f\"search-keyword: {str(fileAttribute.parts[-1])}| displaying exact matches\"", ",", "content", ")", ")", "\n", "", "else", ":", "\n", "# if the method is summary demonstrates the whole thing", "\n", "                    ", "if", "(", "is_all_json", "(", "model", ")", ")", ":", "\n", "                        ", "response", "=", "make_response", "(", "jsonfile", ")", "\n", "", "else", ":", "\n", "                        ", "response", "=", "make_response", "(", "Json_dump", "(", "'_stats'", ",", "content", ")", ")", "\n", "", "", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "", "", "else", ":", "return", "EMPTY_RESULTS", "\n", "return", "ERROR_ACCEPT", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.index.get": [[721, 752], ["dict", "app_runner.getpageno", "allowed_directory.items", "pagination.partiondict", "app_runner.isAcceptJSON", "flask.request.args.get", "dict.setdefault", "len", "flask.make_response", "app_runner.isAcceptHTMLorDefault", "str", "str().replace", "json_function.Json_dump", "flask.make_response", "list", "flask.render_template", "str", "dict.values", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.getpageno", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partiondict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptJSON", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptHTMLorDefault", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.Json_dump"], ["    ", "def", "get", "(", "self", ")", ":", "\n", "# if request header is application/json", "\n", "        ", "file", "=", "dict", "(", ")", "\n", "page_no", "=", "getpageno", "(", "request", ".", "args", ".", "get", "(", "'page'", ",", "type", "=", "int", ")", ")", "\n", "for", "k", ",", "v", "in", "allowed_directory", ".", "items", "(", ")", ":", "\n", "            ", "file", ".", "setdefault", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ".", "replace", "(", "basedir", ",", "''", ")", ")", "\n", "", "page_split_list", "=", "partiondict", "(", "file", ",", "max_elements_in_page", ")", "\n", "# if the page_split_list is less than page_no then return wrong results", "\n", "if", "len", "(", "page_split_list", ")", "<=", "page_no", ":", "return", "EMPTY_RESULTS", "\n", "if", "isAcceptJSON", "(", ")", ":", "\n", "            ", "response", "=", "make_response", "(", "Json_dump", "(", "'Folders'", ",", "list", "(", "file", ".", "values", "(", ")", ")", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'json-header'", "]", "\n", "return", "response", "\n", "# if request header is text/html or could be ran on google chrome", "\n", "", "elif", "isAcceptHTMLorDefault", "(", ")", ":", "\n", "# set the headers to text/html", "\n", "            ", "response", "=", "make_response", "(", "render_template", "(", "'pathpages.html'", ",", "\n", "file", "=", "page_split_list", "[", "page_no", "]", ",", "\n", "len", "=", "1", ",", "\n", "pathname", "=", "'/'", ",", "\n", "containsentencelist", "=", "None", ",", "\n", "page_no", "=", "page_no", "+", "1", ",", "\n", "max_pages_in_row", "=", "max_pages_in_row", ",", "\n", "pagenum", "=", "len", "(", "page_split_list", ")", ",", "\n", "datelist", "=", "None", ",", "\n", "sizelist", "=", "None", ",", "\n", ")", ")", "\n", "response", ".", "headers", "=", "config", "[", "'http-headers'", "]", "[", "'html-header'", "]", "\n", "return", "response", "\n", "", "else", ":", "\n", "            ", "return", "ERROR_ACCEPT", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.logger": [[91, 101], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "logger", "(", ")", ":", "\n", "    ", "log", "=", "logging", ".", "getLogger", "(", ")", "\n", "log", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "f\"{path_to_logs}/app.log\"", ",", "\n", "mode", "=", "'w'", ",", "\n", "encoding", "=", "'utf-8'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptJSON": [[102, 104], ["None"], "function", ["None"], ["", "def", "isAcceptJSON", "(", ")", ":", "\n", "    ", "return", "(", "request", ".", "headers", "[", "'Accept'", "]", "==", "'application/json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isAcceptHTMLorDefault": [[105, 110], ["None"], "function", ["None"], ["", "def", "isAcceptHTMLorDefault", "(", ")", ":", "\n", "    ", "return", "(", "'text/html'", "in", "request", ".", "headers", "[", "'Accept'", "]", ")", "or", "(", "'*/*'", "in", "request", ".", "headers", "[", "'Accept'", "]", ")", "or", "(", "'*'", "in", "request", ".", "headers", "[", "'Accept'", "]", ")", "or", "(", "''", "in", "request", ".", "headers", "[", "'Accept'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.extractMELNERFilename": [[114, 123], ["len", "range", "jsonfilename.split", "len", "str", "jsonfilename.split", "str"], "function", ["None"], ["def", "extractMELNERFilename", "(", "jsonfilename", ")", ":", "\n", "    ", "length_before_extended_name", "=", "len", "(", "jsonfilename", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "string_before_extended_name", "=", "jsonfilename", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "# iterate to see a '-' symbol then stops", "\n", "for", "char", "in", "range", "(", "length_before_extended_name", ",", "len", "(", "jsonfilename", ")", ")", ":", "\n", "        ", "string_before_extended_name", "+=", "str", "(", "jsonfilename", "[", "char", "]", ")", "\n", "if", "str", "(", "jsonfilename", "[", "char", "]", ")", "==", "'-'", ":", "\n", "            ", "break", "\n", "", "", "return", "string_before_extended_name", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.http_normalize_slashes": [[127, 140], ["str", "str.split", "str", "str.find", "correct_segments.append", "flask.request.url", "flask.request.url"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.find"], ["def", "http_normalize_slashes", "(", "url", ")", ":", "\n", "    ", "url", "=", "str", "(", "url", ")", "\n", "segments", "=", "url", ".", "split", "(", "'/'", ")", "\n", "correct_segments", "=", "[", "]", "\n", "for", "segment", "in", "segments", ":", "\n", "        ", "if", "segment", "!=", "''", ":", "\n", "            ", "correct_segments", ".", "append", "(", "segment", ")", "\n", "", "", "first_segment", "=", "str", "(", "correct_segments", "[", "0", "]", ")", "\n", "if", "first_segment", ".", "find", "(", "'http'", ")", "==", "-", "1", ":", "\n", "        ", "correct_segments", "=", "[", "'http:'", "]", "+", "correct_segments", "\n", "", "correct_segments", "[", "0", "]", "=", "correct_segments", "[", "0", "]", "+", "'/'", "\n", "normalized_url", "=", "'/'", ".", "join", "(", "correct_segments", ")", "\n", "return", "normalized_url", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File": [[141, 143], ["None"], "function", ["None"], ["", "def", "is_MEL_NER_File", "(", "jsonfilename", ")", ":", "\n", "    ", "return", "MEL_NER_METHODS", "in", "jsonfilename", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_PT_DP_File": [[144, 146], ["None"], "function", ["None"], ["", "def", "is_PT_DP_File", "(", "jsonfilename", ")", ":", "\n", "    ", "return", "\"PT_DP\"", "in", "jsonfilename", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.get_file_name": [[147, 150], ["app_runner.is_MEL_NER_File", "app_runner.extractMELNERFilename", "jsonfilename.split"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.extractMELNERFilename"], ["", "def", "get_file_name", "(", "jsonfilename", ")", ":", "\n", "    ", "filename", "=", "extractMELNERFilename", "(", "jsonfilename", ")", "if", "is_MEL_NER_File", "(", "jsonfilename", ")", "else", "jsonfilename", ".", "split", "(", "\"--\"", ")", "[", "0", "]", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.get_file_name_except_hash": [[151, 153], ["jsonfilename.replace", "jsonfilename.split"], "function", ["None"], ["", "def", "get_file_name_except_hash", "(", "jsonfilename", ")", ":", "\n", "    ", "return", "jsonfilename", ".", "replace", "(", "f\"--{jsonfilename.split('--')[-1]}\"", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.extract_file": [[157, 162], ["MEL_NER_FILE.find", "range", "len"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.find"], ["def", "extract_file", "(", "MEL_NER_FILE", ")", ":", "\n", "    ", "MEL_idx", "=", "MEL_NER_FILE", ".", "find", "(", "MEL_NER_METHODS", ")", "\n", "for", "idx", "in", "range", "(", "MEL_idx", ",", "len", "(", "MEL_NER_FILE", ")", ")", ":", "\n", "        ", "if", "MEL_NER_FILE", "[", "idx", "]", "==", "'.'", "or", "MEL_NER_FILE", "[", "idx", "]", "==", "'-'", ":", "\n", "            ", "return", "MEL_NER_FILE", "[", "MEL_idx", ":", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.getModel": [[163, 167], ["app_runner.is_MEL_NER_File", "app_runner.extract_file", "app_runner.find_element_in_bracket"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.extract_file", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.find_element_in_bracket"], ["", "", "", "def", "getModel", "(", "jsonfilename", ")", ":", "\n", "\n", "    ", "model", "=", "extract_file", "(", "jsonfilename", ")", "if", "is_MEL_NER_File", "(", "jsonfilename", ")", "else", "find_element_in_bracket", "(", "jsonfilename", ",", "0", ")", "# the first element in the bracket", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.getHash": [[168, 171], ["app_runner.is_MEL_NER_File", "jsonfilename.split"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File"], ["", "def", "getHash", "(", "jsonfilename", ")", ":", "\n", "    ", "if", "not", "is_MEL_NER_File", "(", "jsonfilename", ")", ":", "\n", "        ", "return", "jsonfilename", ".", "split", "(", "'--'", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.find_element_in_bracket": [[175, 181], ["result.replace().replace", "re.findall", "result.replace"], "function", ["None"], ["def", "find_element_in_bracket", "(", "string", ",", "group_num", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "result", "=", "re", ".", "findall", "(", "r'\\(.*?\\)'", ",", "string", ")", "[", "group_num", "]", "\n", "", "except", ":", "\n", "        ", "return", "\n", "", "return", "result", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.get_PT_DP_method": [[183, 186], ["PT_DP_method.replace().replace", "app_runner.is_MEL_NER_File", "app_runner.find_element_in_bracket", "jsonfilename.split", "PT_DP_method.replace"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.find_element_in_bracket"], ["", "def", "get_PT_DP_method", "(", "jsonfilename", ")", ":", "\n", "    ", "PT_DP_method", "=", "find_element_in_bracket", "(", "jsonfilename", ",", "0", ")", "if", "is_MEL_NER_File", "(", "jsonfilename", ")", "else", "jsonfilename", ".", "split", "(", "\"--\"", ")", "[", "-", "2", "]", "\n", "return", "PT_DP_method", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_in_keyword": [[190, 192], ["pathlib.PurePath", "str", "path_function.get"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get"], ["def", "is_in_keyword", "(", "method", ")", ":", "\n", "    ", "return", "method", "==", "PurePath", "(", ")", "or", "str", "(", "get", "(", "method", ",", "0", ")", ")", "in", "special_NEL_NER", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.pos_tag_sentence": [[193, 218], ["app_runner.is_MEL_NER_File", "output.items", "jsonfile.keys", "dict", "dict", "[].setdefault", "[].setdefault", "v.keys", "dict", "dict", "getattr", "v[].setdefault", "v[].setdefault", "eval", "getattr", "eval"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File"], ["", "def", "pos_tag_sentence", "(", "model", ",", "jsonfile", ",", "methods", ")", ":", "\n", "    ", "if", "not", "is_MEL_NER_File", "(", "model", ")", ":", "\n", "        ", "output", "=", "jsonfile", "[", "'NLP-NER'", "]", "[", "model", "]", "[", "'_output'", "]", "\n", "for", "ks", ",", "vs", "in", "output", ".", "items", "(", ")", ":", "\n", "            ", "for", "v", "in", "vs", ":", "\n", "                ", "if", "'sentence'", "in", "v", ".", "keys", "(", ")", ":", "\n", "                    ", "v", "[", "\"POS-tagging\"", "]", "=", "dict", "(", ")", "\n", "v", "[", "\"dependency-parsing\"", "]", "=", "dict", "(", ")", "\n", "for", "method", "in", "methods", ":", "\n", "                        ", "pos", ",", "dep", "=", "getattr", "(", "eval", "(", "method", ")", ",", "'pt_dp'", ")", "(", "v", "[", "'sentence'", "]", ",", "0", ")", "\n", "v", "[", "\"POS-tagging\"", "]", ".", "setdefault", "(", "method", ",", "pos", ")", "\n", "v", "[", "\"dependency-parsing\"", "]", ".", "setdefault", "(", "method", ",", "dep", ")", "\n", "", "", "else", ":", "\n", "                    ", "return", "\n", "", "", "", "return", "jsonfile", "\n", "", "else", ":", "\n", "        ", "if", "\"Specific-Metadata\"", "in", "jsonfile", ".", "keys", "(", ")", ":", "\n", "            ", "clean_text", "=", "jsonfile", "[", "'Specific-Metadata'", "]", "[", "'text-analysis'", "]", "[", "'clean-text'", "]", "\n", "jsonfile", "[", "'Specific-Metadata'", "]", "[", "'text-analysis'", "]", "[", "'POS-tagging'", "]", "=", "dict", "(", ")", "\n", "jsonfile", "[", "'Specific-Metadata'", "]", "[", "'text-analysis'", "]", "[", "'dependency-parsing'", "]", "=", "dict", "(", ")", "\n", "for", "method", "in", "methods", ":", "\n", "                ", "pos", ",", "dep", "=", "getattr", "(", "eval", "(", "method", ")", ",", "'pt_dp'", ")", "(", "clean_text", ",", "1", ")", "\n", "jsonfile", "[", "'Specific-Metadata'", "]", "[", "'text-analysis'", "]", "[", "'POS-tagging'", "]", ".", "setdefault", "(", "method", ",", "pos", ")", "\n", "jsonfile", "[", "'Specific-Metadata'", "]", "[", "'text-analysis'", "]", "[", "'dependency-parsing'", "]", ".", "setdefault", "(", "method", ",", "pos", ")", "\n", "", "", "return", "jsonfile", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.help": [[227, 229], ["None"], "function", ["None"], ["def", "help", "(", "id", ")", ":", "\n", "    ", "return", "{", "\"Allowed-request\"", ":", "help_info", "[", "id", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.getpageno": [[230, 233], ["None"], "function", ["None"], ["", "def", "getpageno", "(", "page", ")", ":", "\n", "    ", "page", "=", "page", "-", "1", "if", "page", "else", "0", "\n", "return", "page", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.contain_sentence": [[234, 256], ["app_runner.is_MEL_NER_File", "app_runner.is_PT_DP_File", "open", "json.load", "app_runner.contain_sentence.open_file"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_MEL_NER_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_PT_DP_File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["", "def", "contain_sentence", "(", "path", ")", ":", "\n", "    ", "def", "open_file", "(", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "jsonfile", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "jsonfile", "\n", "\n", "# if the file is ", "\n", "", "if", "is_MEL_NER_File", "(", "path", ")", "or", "is_PT_DP_File", "(", "path", ")", ":", "\n", "        ", "return", "\"YES\"", "\n", "", "elif", "\"summary\"", "in", "path", ":", "\n", "        ", "return", "\"NO\"", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "nlp_ner", "=", "open_file", "(", "path", ")", "[", "\"NLP-NER\"", "]", "\n", "first_element", "=", "list", "(", "list", "(", "list", "(", "nlp_ner", ".", "values", "(", ")", ")", "[", "0", "]", ".", "values", "(", ")", ")", "[", "0", "]", ".", "values", "(", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "'sentence'", "in", "first_element", ".", "keys", "(", ")", ":", "\n", "                ", "return", "\"YES\"", "\n", "", "else", ":", "\n", "                ", "return", "\"NO\"", "\n", "", "", "except", ":", "\n", "            ", "return", "\"NO\"", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.store": [[262, 266], ["open", "f.write", "os.path.join", "str", "str"], "function", ["None"], ["def", "store", "(", "size_of_file", ",", "time", ",", "flag", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "codebasedir", ",", "f\"{path_to_stats}/{flag}.txt\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "size_of_file", ")", "+", "\" \"", "+", "str", "(", "time", ")", "+", "\"\\n\"", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.ReadandPredict": [[267, 282], ["numpy.array", "numpy.array().reshape", "sklearn.linear_model.LinearRegression().fit", "open", "f.readline", "round", "os.path.join", "np.array().reshape.append", "np.array.append", "f.readline", "numpy.array", "sklearn.linear_model.LinearRegression", "f.readline.split", "f.readline.split"], "function", ["None"], ["", "def", "ReadandPredict", "(", "flag", ",", "size_of_file", ")", ":", "\n", "    ", "times", "=", "[", "]", ";", "size_of_files", "=", "[", "]", ";", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "codebasedir", ",", "f\"{path_to_stats}/{flag}.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "            ", "size_of_files", ".", "append", "(", "line", ".", "split", "(", "\" \"", ")", "[", "0", "]", ")", "\n", "times", ".", "append", "(", "line", ".", "split", "(", "\" \"", ")", "[", "1", "]", ")", "\n", "line", "=", "f", ".", "readline", "(", ")", "\n", "\n", "", "", "times", "=", "np", ".", "array", "(", "times", ",", "dtype", "=", "np", ".", "float32", ")", ";", "size_of_files", "=", "np", ".", "array", "(", "size_of_files", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "reg", "=", "LinearRegression", "(", ")", ".", "fit", "(", "size_of_files", ",", "times", ")", "\n", "coef_", "=", "reg", ".", "coef_", "[", "0", "]", "\n", "intercept_", "=", "reg", ".", "intercept_", "\n", "y", "=", "round", "(", "(", "coef_", "*", "size_of_file", "+", "intercept_", ")", "/", "60", ")", "if", "(", "coef_", "*", "size_of_file", "+", "intercept_", ")", ">", "0", "else", "\"< 1\"", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_all_json": [[283, 285], ["str"], "function", ["None"], ["", "def", "is_all_json", "(", "model", ")", ":", "\n", "    ", "return", "\"summary\"", "in", "str", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.is_special_attribute": [[286, 291], ["None"], "function", ["None"], ["", "def", "is_special_attribute", "(", "filename", ")", ":", "\n", "    ", "for", "attr", "in", "allowed_attribute", ":", "\n", "        ", "if", "attr", "in", "filename", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.isSystem": [[292, 297], ["directories_system.keys"], "function", ["None"], ["", "def", "isSystem", "(", "pathname", ")", ":", "\n", "    ", "for", "d", "in", "directories_system", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'_'", "+", "d", "==", "pathname", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.app_runner.readText": [[300, 321], ["eval", "pathlib.Path().iterdir", "path_function.tail", "pathlib.Path", "open", "f.readlines", "str", "str"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.tail"], ["", "def", "readText", "(", "sys", ")", ":", "\n", "# head to system files (e.g. stats or logs)", "\n", "    ", "pathtosys", "=", "eval", "(", "f\"path_to{sys}\"", ")", "\n", "# initialise the dictionary", "\n", "sysresult", "=", "{", "\n", "sys", ":", "{", "}", "\n", "}", "\n", "for", "path", "in", "Path", "(", "pathtosys", ")", ".", "iterdir", "(", ")", ":", "\n", "        ", "filename", "=", "tail", "(", "path", ")", "\n", "# set every path to a dictionary", "\n", "sysresult", "[", "sys", "]", "[", "str", "(", "filename", ")", "]", "=", "{", "}", "\n", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "count", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "count", "+=", "1", "\n", "sysresult", "[", "sys", "]", "[", "str", "(", "filename", ")", "]", "[", "f\"line {count}\"", "]", "=", "line", "\n", "\n", "", "", "return", "sysresult", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.divide_chunks": [[2, 6], ["range", "len"], "function", ["None"], ["def", "divide_chunks", "(", "l", ",", "n", ")", ":", "\n", "# looping till length l", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partionlist": [[7, 9], ["list", "pagination.divide_chunks"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.divide_chunks"], ["", "", "def", "partionlist", "(", "l", ",", "n", ")", ":", "\n", "    ", "return", "list", "(", "divide_chunks", "(", "l", ",", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partiondict": [[10, 20], ["pagination.partionlist", "empty_list.append", "dictionary.items", "dict"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER_API.pagination.partionlist"], ["", "def", "partiondict", "(", "dictionary", ",", "n", ")", ":", "\n", "    ", "l", "=", "[", "{", "k", ":", "v", "}", "for", "k", ",", "v", "in", "dictionary", ".", "items", "(", ")", "]", "\n", "partionedlist", "=", "partionlist", "(", "l", ",", "n", ")", "\n", "empty_list", "=", "[", "]", "\n", "for", "ele", "in", "partionedlist", ":", "\n", "        ", "d", "=", "{", "}", "\n", "for", "item", "in", "ele", ":", "\n", "            ", "d", "=", "dict", "(", "d", ",", "**", "item", ")", "\n", "", "empty_list", ".", "append", "(", "d", ")", "\n", "", "return", "empty_list", "\n", "", ""]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.createDate": [[5, 9], ["pathlib.Path", "datetime.datetime.fromtimestamp().replace", "datetime.datetime.fromtimestamp", "pathlib.Path.stat"], "function", ["None"], ["def", "createDate", "(", "filepath", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "filepath", ")", "\n", "mtime", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "fname", ".", "stat", "(", ")", ".", "st_mtime", ")", ".", "replace", "(", "microsecond", "=", "0", ")", "\n", "return", "mtime", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.compare_file_date": [[10, 13], ["fileinfo.createDate", "fileinfo.createDate"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.createDate", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.createDate"], ["", "def", "compare_file_date", "(", "filepath_1", ",", "filepath_2", ")", ":", "\n", "    ", "latest_file", "=", "filepath_1", "if", "createDate", "(", "filepath_1", ")", ">", "createDate", "(", "filepath_2", ")", "else", "filepath_2", "\n", "return", "latest_file", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.createDateList": [[14, 19], ["datelist.append", "fileinfo.createDate"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.createDate"], ["", "def", "createDateList", "(", "filefullpath", ")", ":", "\n", "    ", "datelist", "=", "[", "]", "\n", "for", "i", "in", "filefullpath", ":", "\n", "        ", "datelist", ".", "append", "(", "createDate", "(", "i", ")", ")", "\n", "", "return", "datelist", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.size": [[20, 23], ["pathlib.Path().stat", "pathlib.Path"], "function", ["None"], ["", "def", "size", "(", "filepath", ")", ":", "\n", "    ", "msize", "=", "Path", "(", "filepath", ")", ".", "stat", "(", ")", ".", "st_size", "\n", "return", "msize", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.sizeList": [[24, 29], ["sizeList.append", "fileinfo.size"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.fileinfo.size"], ["", "def", "sizeList", "(", "filefullpath", ")", ":", "\n", "    ", "sizeList", "=", "[", "]", "\n", "for", "i", "in", "filefullpath", ":", "\n", "        ", "sizeList", ".", "append", "(", "size", "(", "i", ")", ")", "\n", "", "return", "sizeList", "\n", "", ""]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.pathExceptHead": [[4, 6], ["pathlib.Path", "pathlib.Path"], "function", ["None"], ["def", "pathExceptHead", "(", "path", ")", ":", "\n", "    ", "return", "Path", "(", "*", "Path", "(", "path", ")", ".", "parts", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.head": [[7, 9], ["pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "head", "(", "path", ")", ":", "\n", "    ", "return", "Path", "(", "Path", "(", "path", ")", ".", "parts", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.pathExceptTail": [[10, 12], ["pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "pathExceptTail", "(", "path", ")", ":", "\n", "    ", "return", "Path", "(", "*", "Path", "(", "path", ")", ".", "parts", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.tail": [[13, 15], ["pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "tail", "(", "path", ")", ":", "\n", "    ", "return", "Path", "(", "Path", "(", "path", ")", ".", "parts", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.get": [[16, 18], ["pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "get", "(", "path", ",", "index", ")", ":", "\n", "    ", "return", "Path", "(", "Path", "(", "path", ")", ".", "parts", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.depth": [[19, 22], ["len", "pathlib.Path"], "function", ["None"], ["", "def", "depth", "(", "pathname", ")", ":", "\n", "    ", "separatepath", "=", "Path", "(", "pathname", ")", ".", "parts", "[", "0", ":", "]", "\n", "return", "len", "(", "separatepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.extractPathInfo": [[26, 47], ["pathlib.PurePath", "pathlib.PurePath", "path_function.head", "path_function.pathExceptHead", "pathlib.PurePath", "pathlib.Path().joinpath", "path_function.depth", "pathlib.Path", "pathlib.Path", "path_function.get", "path_function.get", "str", "path_function.has_attribute", "pathlib.Path", "path_function.get", "path_function.depth", "str", "path_function.get", "str", "str", "path_function.get", "path_function.get", "path_function.get", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.head", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.pathExceptHead", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.depth", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.has_attribute", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.depth", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get"], ["", "def", "extractPathInfo", "(", "base", ",", "path", ",", "allowed_attribute", ")", ":", "\n", "    ", "pathToJson", "=", "PurePath", "(", ")", "\n", "filenameandMethods", "=", "[", "]", "\n", "fileAttribute", "=", "PurePath", "(", ")", "\n", "while", "not", "path", "==", "PurePath", "(", ")", ":", "\n", "        ", "headpath", "=", "head", "(", "path", ")", "\n", "# if the path have suffix then seperate the pathname, the method and its jsonfile", "\n", "if", "(", "headpath", ".", "suffix", "==", "''", ")", ":", "\n", "            ", "pathToJson", "=", "Path", "(", "pathToJson", ")", ".", "joinpath", "(", "headpath", ")", "\n", "", "else", ":", "\n", "            ", "if", "depth", "(", "path", ")", "==", "1", ":", "\n", "                ", "filenameandMethods", "=", "[", "get", "(", "path", ",", "0", ")", "]", "\n", "", "else", ":", "\n", "                ", "filenameandMethods", "=", "[", "get", "(", "path", ",", "0", ")", ",", "str", "(", "get", "(", "path", ",", "1", ")", ")", "]", "\n", "fileAttribute", "=", "Path", "(", "*", "Path", "(", "path", ")", ".", "parts", "[", "2", ":", "]", ")", "\n", "if", "depth", "(", "path", ")", ">", "2", "and", "has_attribute", "(", "allowed_attribute", ",", "str", "(", "get", "(", "path", ",", "2", ")", ")", ")", ":", "\n", "                    ", "filenameandMethods", "=", "[", "get", "(", "path", ",", "0", ")", ",", "str", "(", "get", "(", "path", ",", "1", ")", ")", ",", "str", "(", "get", "(", "path", ",", "2", ")", ")", "]", "\n", "fileAttribute", "=", "Path", "(", "*", "Path", "(", "path", ")", ".", "parts", "[", "3", ":", "]", ")", "\n", "", "", "break", "\n", "", "path", "=", "pathExceptHead", "(", "path", ")", "\n", "", "return", "pathToJson", ",", "filenameandMethods", ",", "fileAttribute", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.traversePathIfExist": [[48, 62], ["path_function.checkIfAllowed", "path_function.head", "pathlib.Path().joinpath", "pathlib.PurePath", "list", "pathlib.Path", "Path().joinpath.iterdir", "path_function.pathExceptHead"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.checkIfAllowed", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.head", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.pathExceptHead"], ["", "def", "traversePathIfExist", "(", "base", ",", "path", ",", "allowedpath", ")", ":", "\n", "# check if the path exists", "\n", "    ", "while", "not", "path", "==", "PurePath", "(", ")", ":", "\n", "        ", "headpath", "=", "head", "(", "path", ")", "\n", "base", "=", "Path", "(", "base", ")", ".", "joinpath", "(", "headpath", ")", "\n", "try", ":", "\n", "            ", "if", "list", "(", "base", ".", "iterdir", "(", ")", ")", ":", "\n", "                ", "path", "=", "pathExceptHead", "(", "path", ")", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "except", ":", "\n", "            ", "return", "False", "\n", "# it checks whether the file is allowed to browse.", "\n", "", "", "return", "checkIfAllowed", "(", "base", ",", "allowedpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.checkIfAllowed": [[63, 69], ["allowedpath.values", "str"], "function", ["None"], ["", "def", "checkIfAllowed", "(", "base", ",", "allowedpath", ")", ":", "\n", "#check if the directory is allowed", "\n", "    ", "for", "value", "in", "allowedpath", ".", "values", "(", ")", ":", "\n", "        ", "if", "value", "in", "str", "(", "base", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.has_attribute": [[70, 76], ["None"], "function", ["None"], ["", "def", "has_attribute", "(", "allowed_attribute", ",", "a", ")", ":", "\n", "# print(\"PT_DP\" in '66459_0.pdf-layout.txt-MEL+NER_output-(PT_DP_stanza).json')", "\n", "    ", "for", "attr", "in", "allowed_attribute", ":", "\n", "        ", "if", "(", "attr", "in", "a", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.Json_dump": [[8, 14], ["isinstance", "len"], "function", ["None"], ["def", "Json_dump", "(", "name", ",", "string_list", ")", ":", "\n", "    ", "if", "len", "(", "string_list", ")", "==", "1", "and", "isinstance", "(", "string_list", ",", "list", ")", ":", "\n", "        ", "js_output", "=", "{", "name", ":", "string_list", "[", "0", "]", "}", "\n", "", "else", ":", "\n", "        ", "js_output", "=", "{", "name", ":", "string_list", "}", "\n", "", "return", "js_output", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.Json_dict": [[15, 17], ["None"], "function", ["None"], ["", "def", "Json_dict", "(", "name", ",", "d", ")", ":", "\n", "    ", "return", "{", "name", ":", "d", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.recursive": [[19, 40], ["dict", "pathlib.PurePath", "json_function.readJson", "path_function.head", "json_function.readJson", "path_function.pathExceptHead", "pathlib.PurePath", "doc.items", "pathlib.PurePath", "dict", "d_v.items", "isinstance", "str", "m_v.keys", "str"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.readJson", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.head", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.readJson", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.pathExceptHead"], ["", "def", "recursive", "(", "jsonfile", ",", "path", ",", "is_MEL_NER", ",", "is_in_keyword", ")", ":", "\n", "    ", "if", "not", "(", "is_MEL_NER", "and", "is_in_keyword", ")", ":", "\n", "        ", "if", "path", "==", "PurePath", "(", ")", ":", "\n", "            ", "return", "readJson", "(", "jsonfile", ",", "'_stats'", ")", "\n", "# iterate the path", "\n", "", "content", "=", "jsonfile", "\n", "while", "not", "path", "==", "PurePath", "(", ")", ":", "\n", "            ", "headpath", "=", "head", "(", "path", ")", "\n", "content", "=", "readJson", "(", "content", ",", "headpath", ")", "\n", "path", "=", "pathExceptHead", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "path", "==", "PurePath", "(", ")", ":", "\n", "            ", "path", "=", "'_stats'", "\n", "", "content", "=", "dict", "(", ")", "\n", "for", "doc", "in", "jsonfile", "[", "'NLP-NER'", "]", ":", "\n", "            ", "for", "d_k", ",", "d_v", "in", "doc", ".", "items", "(", ")", ":", "\n", "                ", "content", "[", "d_k", "]", "=", "dict", "(", ")", "\n", "for", "m_k", ",", "m_v", "in", "d_v", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m_v", ",", "dict", ")", "and", "str", "(", "path", ")", "in", "m_v", ".", "keys", "(", ")", ":", "\n", "                        ", "content", "[", "d_k", "]", "[", "m_k", "]", "=", "m_v", "[", "str", "(", "path", ")", "]", "\n", "", "", "", "", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.readJson": [[41, 67], ["json_function.readJson.extract"], "function", ["None"], ["", "def", "readJson", "(", "obj", ",", "key", ")", ":", "\n", "    ", "value_arr", "=", "[", "]", "\n", "key_arr", "=", "[", "]", "\n", "def", "extract", "(", "obj", ",", "arr", ",", "key", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "obj", ",", "dict", ")", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", ":", "\n", "                ", "if", "str", "(", "k", ")", "==", "str", "(", "key", ")", ":", "\n", "                    ", "key_arr", ".", "append", "(", "v", ")", "\n", "", "if", "str", "(", "v", ")", "==", "str", "(", "key", ")", ":", "\n", "                    ", "value_arr", ".", "append", "(", "obj", ")", "\n", "", "if", "isinstance", "(", "v", ",", "(", "dict", ",", "list", ")", ")", ":", "\n", "                    ", "extract", "(", "v", ",", "arr", ",", "key", ")", "\n", "", "", "", "elif", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "for", "item", "in", "obj", ":", "\n", "                ", "extract", "(", "item", ",", "arr", ",", "key", ")", "\n", "", "", "return", "key_arr", ",", "value_arr", "\n", "", "key_arr", ",", "value_arr", "=", "extract", "(", "obj", ",", "key_arr", ",", "key", ")", "\n", "# avoid of two square bracket", "\n", "if", "value_arr", "==", "[", "]", ":", "\n", "        ", "if", "len", "(", "key_arr", ")", "==", "1", ":", "\n", "            ", "key_arr", "=", "key_arr", "[", "0", "]", "\n", "", "return", "key_arr", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "value_arr", ")", "==", "1", ":", "\n", "            ", "value_arr", "=", "value_arr", "[", "0", "]", "\n", "", "return", "value_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.findEntityValue": [[70, 90], ["entityValue.split.split", "json_function.Json_dict", "len", "isinstance", "isinstance", "isinstance", "isinstance", "dict", "range", "dict.append", "dict", "range", "len", "dict.setdefault", "len", "dict.setdefault"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.Json_dict"], ["", "", "def", "findEntityValue", "(", "obj", ",", "entityKey", ",", "entityValue", ")", ":", "\n", "    ", "entityValue", "=", "entityValue", ".", "split", "(", "'|'", ")", "\n", "if", "len", "(", "entityValue", ")", "==", "1", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "result", "=", "[", "ele", "[", "entityValue", "[", "0", "]", "]", "for", "ele", "in", "obj", "]", "\n", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "result", "=", "obj", "[", "entityValue", "[", "0", "]", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "result", "=", "[", "]", "\n", "for", "ele", "in", "obj", ":", "\n", "                ", "dictInResult", "=", "dict", "(", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "entityValue", ")", ")", ":", "\n", "                    ", "dictInResult", ".", "setdefault", "(", "entityValue", "[", "index", "]", ",", "ele", "[", "entityValue", "[", "index", "]", "]", ")", "\n", "", "result", ".", "append", "(", "dictInResult", ")", "\n", "", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "result", "=", "dict", "(", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "entityValue", ")", ")", ":", "\n", "                ", "result", ".", "setdefault", "(", "entityValue", "[", "index", "]", ",", "obj", "[", "entityValue", "[", "index", "]", "]", ")", "\n", "", "", "", "return", "Json_dict", "(", "entityKey", ",", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.findEntityValueWithKey": [[93, 95], ["json_function.Json_dict", "json_function.findEntityValue"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.Json_dict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.findEntityValue"], ["", "def", "findEntityValueWithKey", "(", "obj", ",", "entityKey", ",", "entityValue", ",", "key", ")", ":", "\n", "    ", "return", "Json_dict", "(", "key", ",", "findEntityValue", "(", "obj", ",", "entityKey", ",", "entityValue", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.searchKeyWord": [[103, 128], ["isinstance", "isinstance", "str().startswith", "json_function.searchKeyWord", "sections.items", "str", "str().endswith", "isinstance", "str", "str", "str", "str", "str", "json_function.searchKeyWord.checkIfcontainSubword"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.json_function.searchKeyWord"], ["def", "searchKeyWord", "(", "sections", ",", "keyword", ",", "start", "=", "None", ",", "end", "=", "None", ",", "l", "=", "{", "}", ")", ":", "\n", "# split every word in the list with the space", "\n", "    ", "def", "checkIfcontainSubword", "(", "keyword", ",", "targetword", ",", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "start", "and", "end", "is", "None", ")", "and", "str", "(", "targetword", ")", ".", "startswith", "(", "str", "(", "keyword", ")", ")", ":", "\n", "            ", "return", "True", "\n", "", "elif", "(", "start", "is", "None", "and", "end", ")", "and", "str", "(", "targetword", ")", ".", "endswith", "(", "str", "(", "keyword", ")", ")", ":", "\n", "            ", "return", "True", "\n", "", "elif", "(", "start", "and", "end", ")", "and", "str", "(", "keyword", ")", "in", "str", "(", "targetword", ")", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n", "# these breaks are used to avoid duplicates", "\n", "", "if", "isinstance", "(", "sections", ",", "list", ")", ":", "\n", "        ", "for", "section", "in", "sections", ":", "\n", "            ", "searchKeyWord", "(", "section", ",", "keyword", ",", "start", ",", "end", ",", "l", ")", "\n", "", "", "elif", "isinstance", "(", "sections", ",", "dict", ")", ":", "\n", "        ", "for", "key", ",", "entities", "in", "sections", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "entities", ",", "list", ")", ":", "\n", "                ", "for", "ent", "in", "entities", ":", "\n", "                    ", "if", "'entity'", "in", "ent", ":", "\n", "                        ", "if", "checkIfcontainSubword", "(", "keyword", ",", "ent", "[", "'entity'", "]", ",", "start", ",", "end", ")", ":", "\n", "                            ", "l", ".", "setdefault", "(", "key", ",", "[", "]", ")", ".", "append", "(", "ent", ")", "\n", "", "break", "\n", "\n", "", "", "", "", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.spacy_PT_DP_task.spacy_PT_DP_task.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sentence", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.spacy_PT_DP_task.spacy_PT_DP_task.remove_blank_at_front": [[17, 19], ["None"], "methods", ["None"], ["", "def", "remove_blank_at_front", "(", "self", ",", "text", ")", ":", "\n", "        ", "return", "text", "if", "text", "[", "0", "]", "!=", "' '", "else", "text", "[", "1", ":", "]", "\n", ""]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.spacy_PT_DP_task.spacy_PT_DP_task.pt_dp": [[23, 73], ["spacy_PT_DP_task.spacy_PT_DP_task.remove_blank_at_front", "spacy.load", "spacy.load.add_pipe", "spacy.load.", "range", "spacy.load.", "len", "spacy_PT_DP_task.spacy_PT_DP_task.sentence.append", "len", "range", "range", "pos_tag.append", "dependency_parser.append", "len", "len", "pos_tag[].append", "dependency_parser[].append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.spacy_PT_DP_task.spacy_PT_DP_task.remove_blank_at_front", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["def", "pt_dp", "(", "self", ",", "text", ",", "flag", ")", ":", "\n", "        ", "text", "=", "self", ".", "remove_blank_at_front", "(", "text", ")", "\n", "# tokenize the sentence", "\n", "nlp", "=", "spacy", ".", "load", "(", "\"en_core_web_sm\"", ")", "\n", "if", "flag", "==", "1", ":", "\n", "# Insert before the parser", "\n", "            ", "nlp", ".", "add_pipe", "(", "\"sentencizer\"", ",", "before", "=", "\"parser\"", ")", "\n", "doc", "=", "nlp", "(", "text", ")", "\n", "for", "sent", "in", "doc", ".", "sents", ":", "\n", "                ", "self", ".", "sentence", ".", "append", "(", "sent", ")", "\n", "", "pos_tag", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "self", ".", "sentence", ")", ")", "]", "\n", "dependency_parser", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "self", ".", "sentence", ")", ")", "]", "\n", "for", "sent", "in", "range", "(", "len", "(", "self", ".", "sentence", ")", ")", ":", "\n", "                ", "for", "token", "in", "self", ".", "sentence", "[", "sent", "]", ":", "\n", "                    ", "if", "not", "token", ".", "_", ".", "is_excluded", ":", "\n", "                        ", "pos_tag", "[", "sent", "]", ".", "append", "(", "{", "\n", "token", ".", "text", ":", "{", "\n", "\"lemma\"", ":", "token", ".", "lemma_", ",", "\n", "\"pos\"", ":", "token", ".", "pos_", ",", "\n", "\"tag\"", ":", "token", ".", "tag_", ",", "\n", "\"alpha\"", ":", "token", ".", "is_alpha", ",", "\n", "\"starts\"", ":", "token", ".", "idx", ",", "\n", "\"ends\"", ":", "token", ".", "idx", "+", "len", "(", "token", ".", "text", ")", ",", "\n", "}", "}", ")", "\n", "dependency_parser", "[", "sent", "]", ".", "append", "(", "{", "\n", "token", ".", "text", ":", "{", "\"dep\"", ":", "token", ".", "dep_", ",", "\n", "}", "}", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "            ", "doc", "=", "nlp", "(", "text", ")", "\n", "pos_tag", "=", "[", "]", ";", "dependency_parser", "=", "[", "]", "\n", "for", "token", "in", "doc", ":", "\n", "                ", "if", "not", "token", ".", "_", ".", "is_excluded", ":", "\n", "                    ", "pos_tag", ".", "append", "(", "{", "\n", "token", ".", "text", ":", "{", "\n", "\"lemma\"", ":", "token", ".", "lemma_", ",", "\n", "\"pos\"", ":", "token", ".", "pos_", ",", "\n", "\"tag\"", ":", "token", ".", "tag_", ",", "\n", "\"alpha\"", ":", "token", ".", "is_alpha", ",", "\n", "\"starts\"", ":", "token", ".", "idx", ",", "\n", "\"ends\"", ":", "token", ".", "idx", "+", "len", "(", "token", ".", "text", ")", ",", "\n", "}", "}", ")", "\n", "dependency_parser", ".", "append", "(", "{", "\n", "token", ".", "text", ":", "{", "\"dep\"", ":", "token", ".", "dep_", ",", "\n", "}", "}", ")", "\n", "\n", "", "", "", "if", "len", "(", "pos_tag", ")", "==", "1", ":", "\n", "            ", "pos_tag", "=", "pos_tag", "[", "0", "]", "\n", "dependency_parser", "=", "dependency_parser", "[", "0", "]", "\n", "", "return", "pos_tag", ",", "dependency_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.spacy_PT_DP_task.excluded": [[7, 10], ["None"], "function", ["None"], ["def", "excluded", "(", "token", ")", ":", "\n", "# Getter function to determine the value of token._.is_excluded", "\n", "    ", "return", "token", ".", "pos_", "in", "[", "'SPACE'", "]", "or", "token", ".", "dep_", "in", "[", "'punct'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.coref_coreNLP.coreNLP.__init__": [[20, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "string", ",", "size", ")", ":", "\n", "        ", "self", ".", "string", "=", "string", "\n", "self", ".", "size", "=", "size", "\n", ""]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.coref_coreNLP.coreNLP.generate": [[26, 38], ["stanza.server.CoreNLPClient", "client.annotate"], "methods", ["None"], ["def", "generate", "(", "self", ")", ":", "\n", "        ", "thread", "=", "regular_thread", "if", "self", ".", "size", "<", "file_boundary", "else", "large_thread", "\n", "with", "CoreNLPClient", "(", "\n", "properties", "=", "\"en\"", ",", "\n", "annotators", "=", "'tokenize,ssplit,pos,lemma,ner,depparse,coref'", ",", "\n", "timeout", "=", "timeout", ",", "\n", "memory", "=", "memorysize", ",", "\n", "max_char_length", "=", "maxcharlength", ",", "\n", "threads", "=", "thread", ",", "\n", "output_format", "=", "'json'", ",", "\n", "be_quiet", "=", "suppress_output", ")", "as", "client", ":", "\n", "            ", "return", "client", ".", "annotate", "(", "self", ".", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.coref_coreNLP.coreNLP.formatjson": [[39, 45], ["coref_coreNLP.coreNLP.generate"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.coref_coreNLP.coreNLP.generate"], ["", "", "def", "formatjson", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n            if format json does not contain coref then flag gives False\n        \"\"\"", "\n", "ann", "=", "self", ".", "generate", "(", ")", "\n", "return", "ann", "\n", "# return ann", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.filter_summary.filternum": [[9, 22], ["copy.deepcopy", "jsonfile.keys", "jsonfile[].keys", "m.isdigit", "jsonresults[].pop"], "function", ["None"], ["def", "filternum", "(", "jsonfile", ")", ":", "\n", "    ", "jsonfile", "=", "jsonfile", "[", "'NLP-NER-Aggregated-Summary'", "]", "\n", "jsonresults", "=", "copy", ".", "deepcopy", "(", "jsonfile", ")", "\n", "for", "doc_key", "in", "jsonfile", ".", "keys", "(", ")", ":", "\n", "        ", "for", "entity", "in", "jsonfile", "[", "doc_key", "]", ".", "keys", "(", ")", ":", "\n", "            ", "flag", "=", "True", "\n", "for", "m", "in", "entity", ":", "\n", "                ", "if", "m", ".", "isdigit", "(", ")", ":", "\n", "                    ", "flag", "=", "False", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                ", "jsonresults", "[", "doc_key", "]", ".", "pop", "(", "entity", ",", "None", ")", "\n", "", "", "", "return", "jsonresults", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.filter_summary.filterOnlyNum": [[25, 34], ["copy.deepcopy", "jsonfile.keys", "jsonfile[].keys", "m.isdigit", "all", "jsonresults[].pop"], "function", ["None"], ["", "def", "filterOnlyNum", "(", "jsonfile", ")", ":", "\n", "    ", "jsonfile", "=", "jsonfile", "[", "'NLP-NER-Aggregated-Summary'", "]", "\n", "jsonresults", "=", "copy", ".", "deepcopy", "(", "jsonfile", ")", "\n", "for", "doc_key", "in", "jsonfile", ".", "keys", "(", ")", ":", "\n", "        ", "for", "entity", "in", "jsonfile", "[", "doc_key", "]", ".", "keys", "(", ")", ":", "\n", "            ", "judgemodel", "=", "[", "m", ".", "isdigit", "(", ")", "for", "m", "in", "entity", "if", "m", "not", "in", "punctuation", "and", "m", "not", "in", "' '", "]", "\n", "if", "not", "all", "(", "judgemodel", ")", ":", "\n", "                ", "jsonresults", "[", "doc_key", "]", ".", "pop", "(", "entity", ",", "None", ")", "\n", "", "", "", "return", "jsonresults", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.filter_summary.filterOnlyString": [[37, 46], ["copy.deepcopy", "jsonfile.keys", "jsonfile[].keys", "m.isalpha", "all", "jsonresults[].pop"], "function", ["None"], ["", "def", "filterOnlyString", "(", "jsonfile", ")", ":", "\n", "    ", "jsonfile", "=", "jsonfile", "[", "'NLP-NER-Aggregated-Summary'", "]", "\n", "jsonresults", "=", "copy", ".", "deepcopy", "(", "jsonfile", ")", "\n", "for", "doc_key", "in", "jsonfile", ".", "keys", "(", ")", ":", "\n", "        ", "for", "entity", "in", "jsonfile", "[", "doc_key", "]", ".", "keys", "(", ")", ":", "\n", "            ", "judgemodel", "=", "[", "m", ".", "isalpha", "(", ")", "for", "m", "in", "entity", "if", "m", "not", "in", "punctuation", "and", "m", "not", "in", "' '", "]", "\n", "if", "not", "all", "(", "judgemodel", ")", ":", "\n", "                ", "jsonresults", "[", "doc_key", "]", ".", "pop", "(", "entity", ",", "None", ")", "\n", "", "", "", "return", "jsonresults", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.filter_summary.filterwebsite": [[49, 58], ["copy.deepcopy", "jsonfile.keys", "jsonfile[].keys", "re.compile", "re.compile.search", "jsonresults[].pop"], "function", ["None"], ["", "def", "filterwebsite", "(", "jsonfile", ")", ":", "\n", "    ", "jsonfile", "=", "jsonfile", "[", "'NLP-NER-Aggregated-Summary'", "]", "\n", "jsonresults", "=", "copy", ".", "deepcopy", "(", "jsonfile", ")", "\n", "for", "doc_key", "in", "jsonfile", ".", "keys", "(", ")", ":", "\n", "        ", "for", "entity", "in", "jsonfile", "[", "doc_key", "]", ".", "keys", "(", ")", ":", "\n", "            ", "regexp", "=", "re", ".", "compile", "(", "'((http|https)\\:\\/\\/)?[a-zA-Z0-9\\.\\/\\?\\:@\\-_=#]+\\.([a-zA-Z]){2,6}([a-zA-Z0-9\\.\\&\\/\\?\\:@\\-_=#])*'", ")", "\n", "if", "(", "not", "regexp", ".", "search", "(", "entity", ")", ")", ":", "\n", "                ", "jsonresults", "[", "doc_key", "]", ".", "pop", "(", "entity", ",", "None", ")", "\n", "", "", "", "return", "jsonresults", "\n", "", ""]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.find_json_file": [[17, 24], ["os.listdir", "os.path.isdir", "os.path.join", "aggregation.find_json_file", "os.path.join().endswith", "os.path.join", "l.append", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.find_json_file"], ["def", "find_json_file", "(", "l", ",", "path", ")", ":", "\n", "    ", "for", "file", "in", "listdir", "(", "path", ")", ":", "\n", "        ", "if", "(", "isdir", "(", "join", "(", "path", ",", "file", ")", ")", ")", ":", "\n", "            ", "find_json_file", "(", "l", ",", "join", "(", "path", ",", "file", ")", ")", "\n", "", "elif", "(", "join", "(", "path", ",", "file", ")", ".", "endswith", "(", "\".json\"", ")", ")", ":", "\n", "            ", "l", ".", "append", "(", "join", "(", "path", ",", "file", ")", ")", "\n", "", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.group_json_file": [[26, 34], ["dict", "dict.setdefault().append", "str().split", "str().split", "str().split", "dict.setdefault", "str", "str", "str"], "function", ["None"], ["", "def", "group_json_file", "(", "path", ")", ":", "\n", "    ", "json_group", "=", "dict", "(", ")", "\n", "for", "p", "in", "path", ":", "\n", "# omit the MEL+MER_output", "\n", "        ", "if", "not", "'MEL+NER_output'", "in", "p", ":", "\n", "            ", "key_dict", "=", "'{}--{}--{}'", ".", "format", "(", "str", "(", "p", ")", ".", "split", "(", "'--'", ")", "[", "0", "]", ",", "str", "(", "p", ")", ".", "split", "(", "'--'", ")", "[", "1", "]", ",", "str", "(", "p", ")", ".", "split", "(", "'--'", ")", "[", "-", "1", "]", ")", "\n", "json_group", ".", "setdefault", "(", "key_dict", ",", "[", "]", ")", ".", "append", "(", "p", ")", "\n", "", "", "return", "json_group", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.move_list_to_dict": [[48, 58], ["count_dict.keys", "count_dict.setdefault().append", "count_dict[].append", "count_dict.setdefault"], "function", ["None"], ["def", "move_list_to_dict", "(", "lst_of_attr", ")", ":", "\n", "    ", "count_dict", "=", "{", "}", "\n", "for", "attr", "in", "lst_of_attr", ":", "\n", "        ", "if", "attr", "[", "'count'", "]", "not", "in", "count_dict", ".", "keys", "(", ")", ":", "\n", "            ", "count_dict", ".", "setdefault", "(", "attr", "[", "'count'", "]", ",", "[", "]", ")", ".", "append", "(", "attr", "[", "'model'", "]", ")", "\n", "", "else", ":", "\n", "# to prevent duplicate word", "\n", "            ", "if", "attr", "[", "'model'", "]", "not", "in", "count_dict", "[", "attr", "[", "'count'", "]", "]", ":", "\n", "                ", "count_dict", "[", "attr", "[", "'count'", "]", "]", ".", "append", "(", "attr", "[", "'model'", "]", ")", "\n", "", "", "", "return", "count_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.normalise_list": [[59, 69], ["lst.keys", "normalise_result.append", "list", "lst.values"], "function", ["None"], ["", "def", "normalise_list", "(", "lst_of_attr", ")", ":", "\n", "# at first remove the last total set", "\n", "    ", "lst_of_attr", "=", "lst_of_attr", "[", ":", "-", "1", "]", "\n", "normalise_result", "=", "[", "]", "\n", "for", "lst", "in", "lst_of_attr", ":", "\n", "        ", "if", "'model'", "not", "in", "lst", ".", "keys", "(", ")", ":", "\n", "            ", "normalise_result", ".", "append", "(", "list", "(", "lst", ".", "values", "(", ")", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "lst_of_attr", "\n", "", "", "return", "normalise_result", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.maximum": [[70, 81], ["maximum_value.append", "max", "len", "max", "max"], "function", ["None"], ["", "def", "maximum", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "maximum_value", "=", "[", "\n", "{", "\n", "\"model\"", ":", "ele", ",", "\n", "\"value\"", ":", "max", "(", "count_dict", ",", "key", "=", "int", ")", ",", "\n", "}", "for", "ele", "in", "count_dict", "[", "max", "(", "count_dict", ",", "key", "=", "int", ")", "]", "\n", "]", "\n", "maximum_value", ".", "append", "(", "{", "\n", "\"total\"", ":", "len", "(", "count_dict", "[", "max", "(", "count_dict", ",", "key", "=", "int", ")", "]", ")", "\n", "}", ")", "\n", "return", "maximum_value", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.minimum": [[82, 94], ["minimum_value.append", "min", "len", "min", "min"], "function", ["None"], ["", "def", "minimum", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "minimum_value", "=", "[", "\n", "{", "\n", "\"model\"", ":", "ele", ",", "\n", "\"value\"", ":", "min", "(", "count_dict", ",", "key", "=", "int", ")", ",", "\n", "}", "for", "ele", "in", "count_dict", "[", "min", "(", "count_dict", ",", "key", "=", "int", ")", "]", "\n", "]", "\n", "minimum_value", ".", "append", "(", "{", "\n", "\"total\"", ":", "\n", "len", "(", "count_dict", "[", "min", "(", "count_dict", ",", "key", "=", "int", ")", "]", ")", "\n", "}", ")", "\n", "return", "minimum_value", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies": [[95, 97], ["None"], "function", ["None"], ["", "def", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "return", "[", "ele", "[", "'count'", "]", "for", "ele", "in", "lst_of_attr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.mean": [[98, 101], ["sum", "len", "aggregation.frequencies"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies"], ["", "def", "mean", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "avg", "=", "sum", "(", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", ")", "/", "len", "(", "lst_of_attr", ")", "\n", "return", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.median": [[102, 105], ["int", "statistics.median", "aggregation.frequencies"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.median", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies"], ["", "def", "median", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "median", "=", "int", "(", "statistics", ".", "median", "(", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", ")", ")", "\n", "return", "median", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.mode": [[107, 117], ["int", "mode_result.append", "statistics.mode", "aggregation.frequencies", "int", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.mode", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies"], ["", "def", "mode", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "mode_value", "=", "int", "(", "statistics", ".", "mode", "(", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", ")", ")", "\n", "mode_result", "=", "[", "{", "\n", "\"model\"", ":", "ele", ",", "\n", "\"value\"", ":", "int", "(", "mode_value", ")", ",", "\n", "}", "for", "ele", "in", "count_dict", "[", "int", "(", "mode_value", ")", "]", "]", "\n", "mode_result", ".", "append", "(", "{", "\n", "\"total\"", ":", "len", "(", "count_dict", "[", "int", "(", "mode_value", ")", "]", ")", "\n", "}", ")", "\n", "return", "mode_result", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.multimode": [[118, 121], ["statistics.multimode", "aggregation.frequencies"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.multimode", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies"], ["", "def", "multimode", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "multi_mode", "=", "statistics", ".", "multimode", "(", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", ")", "\n", "return", "multi_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.std": [[122, 128], ["aggregation.frequencies", "len", "statistics.stdev", "aggregation.frequencies"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies"], ["", "def", "std", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "lst", "=", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", "\n", "if", "len", "(", "lst", ")", ">", "2", ":", "\n", "        ", "standard_deviation", "=", "statistics", ".", "stdev", "(", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", ")", "\n", "", "else", ":", "return", "None", "\n", "return", "standard_deviation", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.var": [[129, 135], ["aggregation.frequencies", "len", "statistics.variance"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies"], ["", "def", "var", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "lst", "=", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", "\n", "if", "len", "(", "lst", ")", ">", "2", ":", "\n", "        ", "variance", "=", "statistics", ".", "variance", "(", "lst", ")", "\n", "", "else", ":", "return", "None", "\n", "return", "variance", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.quartile": [[136, 142], ["aggregation.frequencies", "len", "list", "map", "statistics.quantiles"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies"], ["", "def", "quartile", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "lst", "=", "frequencies", "(", "lst_of_attr", ",", "count_dict", ")", "\n", "if", "len", "(", "lst", ")", ">", "4", ":", "\n", "        ", "quartiles", "=", "list", "(", "map", "(", "round", ",", "statistics", ".", "quantiles", "(", "lst", ",", "n", "=", "4", ")", ")", ")", "\n", "", "else", ":", "return", "None", "\n", "return", "quartiles", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.geomean": [[143, 147], ["aggregation.frequencies", "round", "statistics.geometric_mean"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.frequencies"], ["", "def", "geomean", "(", "lst_of_attr", ",", "count_dict", ")", ":", "\n", "    ", "lst", "=", "frequencies", "(", "lst", ")", "\n", "geo_mean", "=", "round", "(", "statistics", ".", "geometric_mean", "(", "lst", ")", ",", "1", ")", "\n", "return", "geo_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.aggregate_jsonfile_summary": [[156, 296], ["str", "path_function.pathExceptTail", "range", "aggregation.aggregate_jsonfile_summary.insert_general_metadata"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.interface.path_function.pathExceptTail"], ["", "def", "aggregate_jsonfile_summary", "(", "l", ")", ":", "\n", "    ", "def", "getAggregatedNER_JSONobj", "(", "_json", ")", ":", "\n", "        ", "if", "(", "'NLP-NER-Aggregated-Summary'", "in", "_json", ".", "keys", "(", ")", ")", ":", "\n", "            ", "return", "_json", "[", "'NLP-NER-Aggregated-Summary'", "]", "\n", "", "elif", "(", "'NLP-NER-Aggregated-Summary-By-Category'", "in", "_json", ".", "keys", "(", ")", ")", ":", "\n", "            ", "return", "_json", "[", "'NLP-NER-Aggregated-Summary-By-Category'", "]", "\n", "", "return", "None", "\n", "\n", "", "def", "isAggregatedNER_JSONobj", "(", "_json", ")", ":", "\n", "        ", "if", "(", "'NLP-NER-Aggregated-Summary'", "in", "_json", ".", "keys", "(", ")", ")", ":", "\n", "            ", "return", "True", "\n", "", "elif", "(", "'NLP-NER-Aggregated-Summary-By-Category'", "in", "_json", ".", "keys", "(", ")", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "None", "\n", "\n", "# @sergio(2021-03-15): Handling different versions of the JSON structure for the \"Summary\" object.", "\n", "", "def", "getSummaryNER_JSONobj", "(", "_json", ")", ":", "\n", "        ", "if", "(", "'NLP-NER-Summary'", "in", "_json", ")", ":", "\n", "            ", "return", "_json", "[", "'NLP-NER-Summary'", "]", "\n", "", "elif", "(", "'NLP-NER-Summary-(From-Last-Run)'", "in", "_json", ")", ":", "\n", "            ", "return", "_json", "[", "'NLP-NER-Summary-(From-Last-Run)'", "]", "\n", "", "return", "None", "\n", "\n", "", "def", "insert_general_metadata", "(", "file", ",", "file_summary", ")", ":", "\n", "        ", "_gm", "=", "file", "[", "'General-Metadata'", "]", "\n", "file_summary", "=", "jf", ".", "Json_dict", "(", "'NLP-NER-Aggregated-Summary'", ",", "file_summary", ")", "\n", "file_summary", ".", "update", "(", "{", "'General-Metadata'", ":", "_gm", "}", ")", "\n", "file_summary", "[", "'NLP-NER-Aggregated-Summary'", "]", "=", "file_summary", ".", "pop", "(", "'NLP-NER-Aggregated-Summary'", ")", "\n", "return", "file_summary", "\n", "\n", "", "def", "summary_stats", "(", "_json", ")", ":", "\n", "        ", "count_list", "=", "[", "]", "\n", "count_dict", "=", "None", "\n", "_json_", "=", "deepcopy", "(", "_json", ")", "\n", "temp", "=", "None", "\n", "cate_name", "=", "'NLP-NER-Aggregated-Summary'", "if", "isAggregatedNER_JSONobj", "(", "_json", ")", "else", "'NLP-NER-Aggregated-Summary-By-Category'", "\n", "for", "doc", ",", "values", "in", "getAggregatedNER_JSONobj", "(", "_json", ")", ".", "items", "(", ")", ":", "\n", "            ", "for", "entity", ",", "models", "in", "values", ".", "items", "(", ")", ":", "\n", "                ", "_json_", "[", "cate_name", "]", "[", "doc", "]", "[", "entity", "]", "=", "{", "}", "\n", "# append list onto the count_list", "\n", "count_list", "+=", "normalise_list", "(", "models", ")", "\n", "for", "func", "in", "allowed_aggregation_function", ":", "\n", "# use different function", "\n", "                    ", "key", "=", "func", "\n", "try", ":", "\n", "                        ", "temp", "=", "move_list_to_dict", "(", "normalise_list", "(", "models", ")", ")", "\n", "value", "=", "eval", "(", "key", ")", "(", "normalise_list", "(", "models", ")", ",", "temp", ")", "\n", "_json_", "[", "cate_name", "]", "[", "doc", "]", "[", "entity", "]", "[", "key", "]", "=", "value", "\n", "", "except", ":", "\n", "                        ", "print", "(", "f\"Your function request {key} does not exist\"", ")", "\n", "\n", "", "", "", "", "if", "cate_name", "==", "'NLP-NER-Aggregated-Summary-By-Category'", ":", "\n", "            ", "for", "doc", ",", "values", "in", "getAggregatedNER_JSONobj", "(", "_json", ")", ".", "items", "(", ")", ":", "\n", "                ", "_json_", "[", "cate_name", "]", "[", "doc", "]", ".", "setdefault", "(", "\"General-Stats\"", ",", "{", "}", ")", "\n", "for", "func", "in", "allowed_aggregation_function", ":", "\n", "                    ", "key", "=", "func", "\n", "try", ":", "\n", "                        ", "value", "=", "eval", "(", "key", ")", "(", "count_list", ",", "move_list_to_dict", "(", "count_list", ")", ")", "\n", "_json_", "[", "cate_name", "]", "[", "doc", "]", "[", "\"General-Stats\"", "]", "[", "key", "]", "=", "value", "\n", "", "except", ":", "\n", "                        ", "print", "(", "f\"Your function request {key} does not exist\"", ")", "\n", "", "", "", "", "return", "_json_", "\n", "\n", "\n", "", "def", "aggregated_Summary_By_Category", "(", "summarised_file", ")", ":", "\n", "        ", "summarised_file", "=", "deepcopy", "(", "summarised_file", ")", "\n", "nnas", "=", "summarised_file", "[", "'NLP-NER-Aggregated-Summary'", "]", "\n", "gm_file", "=", "summarised_file", "[", "'General-Metadata'", "]", "\n", "gm_file", "[", "'NLP-NER-Aggregated-Summary-By-Category'", "]", "=", "{", "}", "\n", "gm_dict", "=", "{", "}", "\n", "gm_count", "=", "{", "}", "\n", "# get the label classification", "\n", "for", "doc_num", ",", "entities", "in", "nnas", ".", "items", "(", ")", ":", "\n", "            ", "gm_file", "[", "'NLP-NER-Aggregated-Summary-By-Category'", "]", ".", "setdefault", "(", "doc_num", ",", "{", "}", ")", "\n", "for", "cat", ",", "entity_list", "in", "entities", ".", "items", "(", ")", ":", "\n", "                ", "for", "ent", "in", "entity_list", ":", "\n", "# if the model is in TNNT", "\n", "                    ", "for", "tnnt", ",", "model", "in", "label_classification", ".", "items", "(", ")", ":", "\n", "                        ", "for", "key", ",", "val", "in", "model", ".", "items", "(", ")", ":", "\n", "                            ", "if", "'model'", "in", "ent", ".", "keys", "(", ")", "and", "ent", "[", "'category'", "]", "==", "val", "and", "ent", "[", "'model'", "]", "==", "key", ":", "\n", "                                ", "gm_file", "[", "'NLP-NER-Aggregated-Summary-By-Category'", "]", "[", "doc_num", "]", ".", "setdefault", "(", "tnnt", ",", "[", "]", ")", "\n", "# calculate the total number of ", "\n", "gm_count", "[", "tnnt", "]", "=", "gm_count", ".", "setdefault", "(", "tnnt", ",", "0", ")", "+", "ent", "[", "'count'", "]", "\n", "gm_file", "[", "'NLP-NER-Aggregated-Summary-By-Category'", "]", "[", "doc_num", "]", "[", "tnnt", "]", ".", "append", "(", "{", "cat", ":", "{", "\n", "\"model\"", ":", "ent", "[", "'model'", "]", ",", "\n", "\"count\"", ":", "ent", "[", "'count'", "]", "\n", "}", "}", ")", "\n", "\n", "", "", "", "", "", "", "for", "doc_num", ",", "entities", "in", "nnas", ".", "items", "(", ")", ":", "\n", "            ", "for", "tnnt", ",", "model", "in", "label_classification", ".", "items", "(", ")", ":", "\n", "                ", "if", "tnnt", "in", "gm_count", ".", "keys", "(", ")", ":", "\n", "                    ", "gm_file", "[", "'NLP-NER-Aggregated-Summary-By-Category'", "]", "[", "doc_num", "]", "[", "tnnt", "]", ".", "append", "(", "{", "'total'", ":", "gm_count", "[", "tnnt", "]", "}", ")", "\n", "\n", "", "", "", "return", "gm_file", "\n", "\n", "", "file_summaries", "=", "[", "dict", "(", ")", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "\"\"\"\n    file_summaries[0] is summary by entity\n    file_summaries[1] is summary by category\n    file_summaries[2] is summary by entity with stats\n    file_summaries[3] is summary by category with stats \n    \"\"\"", "\n", "key", "=", "list", "(", "l", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "tailpath", "=", "str", "(", "Path", "(", "key", ")", ".", "parts", "[", "-", "1", "]", ")", "\n", "jsonpath", "=", "pf", ".", "pathExceptTail", "(", "key", ")", "\n", "# generate the summary json file", "\n", "summary_names", "=", "[", "'{}--{}--(summary)--{}'", ".", "format", "(", "tailpath", ".", "split", "(", "'--'", ")", "[", "0", "]", ",", "tailpath", ".", "split", "(", "'--'", ")", "[", "1", "]", ",", "tailpath", ".", "split", "(", "'--'", ")", "[", "-", "1", "]", ")", ",", "'{}--{}--(summary-by-category)--{}'", ".", "format", "(", "tailpath", ".", "split", "(", "'--'", ")", "[", "0", "]", ",", "tailpath", ".", "split", "(", "'--'", ")", "[", "1", "]", ",", "tailpath", ".", "split", "(", "'--'", ")", "[", "-", "1", "]", ")", ",", "'{}--{}--(summary)--(stats)--{}'", ".", "format", "(", "tailpath", ".", "split", "(", "'--'", ")", "[", "0", "]", ",", "tailpath", ".", "split", "(", "'--'", ")", "[", "1", "]", ",", "tailpath", ".", "split", "(", "'--'", ")", "[", "-", "1", "]", ")", ",", "'{}--{}--(summary-by-category)--(stats)--{}'", ".", "format", "(", "tailpath", ".", "split", "(", "'--'", ")", "[", "0", "]", ",", "tailpath", ".", "split", "(", "'--'", ")", "[", "1", "]", ",", "tailpath", ".", "split", "(", "'--'", ")", "[", "-", "1", "]", ")", "]", "\n", "summary_paths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "summary_paths", ".", "append", "(", "Path", "(", "jsonpath", ")", ".", "joinpath", "(", "summary_names", "[", "i", "]", ")", ")", "\n", "\n", "# if file exists then do nothing", "\n", "", "if", "summary_paths", "[", "0", "]", ".", "exists", "(", ")", "or", "summary_paths", "[", "1", "]", ".", "exists", "(", ")", "or", "summary_paths", "[", "2", "]", ".", "exists", "(", ")", "or", "summary_paths", "[", "3", "]", ".", "exists", "(", ")", ":", "\n", "# return two empty dictionaries", "\n", "        ", "return", "[", "dict", "(", ")", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "\n", "", "for", "value", "in", "l", "[", "key", "]", ":", "\n", "        ", "with", "open", "(", "value", ")", "as", "file", ":", "\n", "            ", "jsonfile", "=", "json", ".", "load", "(", "file", ")", "\n", "# jsonfilepath => summary_paths[0], filename_summary => file_summaries[0] ", "\n", "if", "str", "(", "summary_paths", "[", "0", "]", ")", "not", "in", "file_summaries", "[", "0", "]", ":", "\n", "                ", "file_summaries", "[", "0", "]", ".", "update", "(", "{", "str", "(", "summary_paths", "[", "0", "]", ")", ":", "getSummaryNER_JSONobj", "(", "jsonfile", ")", "}", ")", "\n", "", "else", ":", "\n", "                ", "file_summaries", "[", "0", "]", "[", "str", "(", "summary_paths", "[", "0", "]", ")", "]", "=", "update_aggregation", "(", "file_summaries", "[", "0", "]", "[", "str", "(", "summary_paths", "[", "0", "]", ")", "]", ",", "getSummaryNER_JSONobj", "(", "jsonfile", ")", ")", "\n", "# calculate each file summaries", "\n", "", "", "", "file_summaries", "[", "0", "]", "=", "file_summaries", "[", "0", "]", "[", "str", "(", "summary_paths", "[", "0", "]", ")", "]", "\n", "file_summaries", "[", "0", "]", "=", "insert_general_metadata", "(", "jsonfile", ",", "file_summaries", "[", "0", "]", ")", "\n", "file_summaries", "[", "1", "]", "=", "aggregated_Summary_By_Category", "(", "file_summaries", "[", "0", "]", ")", "\n", "file_summaries", "[", "2", "]", "=", "summary_stats", "(", "file_summaries", "[", "0", "]", ")", "\n", "file_summaries", "[", "3", "]", "=", "summary_stats", "(", "file_summaries", "[", "1", "]", ")", "\n", "# generate summary file and summary_by_category_file", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "with", "open", "(", "summary_paths", "[", "i", "]", ",", "'w'", ")", "as", "output", ":", "\n", "            ", "json", ".", "dump", "(", "file_summaries", "[", "i", "]", ",", "output", ")", "\n", "# generate stats summary file and summary_by_category_file", "\n", "", "", "return", "file_summaries", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.aggregation.update_aggregation": [[298, 326], ["data.keys", "data[].keys", "summary[].keys", "summary[].update", "range", "len", "[].values", "[].insert", "aggregation.update_aggregation.updatedict"], "function", ["None"], ["", "def", "update_aggregation", "(", "summary", ",", "data", ")", ":", "\n", "# no need to update", "\n", "    ", "def", "updatedict", "(", "model", ",", "category", ",", "count", ")", ":", "\n", "        ", "return", "{", "\n", "\"model\"", ":", "model", ",", "\n", "\"category\"", ":", "category", ",", "\n", "\"count\"", ":", "count", "\n", "}", "\n", "\n", "", "if", "summary", "==", "data", ":", "\n", "        ", "return", "summary", "\n", "\n", "", "for", "data_key", "in", "data", ".", "keys", "(", ")", ":", "\n", "        ", "for", "entity", "in", "data", "[", "data_key", "]", ".", "keys", "(", ")", ":", "\n", "# if the model does not exist in current summary", "\n", "            ", "if", "entity", "not", "in", "summary", "[", "data_key", "]", ".", "keys", "(", ")", ":", "\n", "                ", "summary", "[", "data_key", "]", ".", "update", "(", "{", "entity", ":", "data", "[", "data_key", "]", "[", "entity", "]", "}", ")", "\n", "", "else", ":", "\n", "                ", "for", "index", "in", "range", "(", "len", "(", "data", "[", "data_key", "]", "[", "entity", "]", "[", ":", "-", "1", "]", ")", ")", ":", "\n", "                    ", "if", "data", "[", "data_key", "]", "[", "entity", "]", "[", "index", "]", "[", "'model'", "]", "not", "in", "summary", "[", "data_key", "]", "[", "entity", "]", "[", "index", "]", ".", "values", "(", ")", ":", "\n", "# append the model", "\n", "                        ", "summary", "[", "data_key", "]", "[", "entity", "]", ".", "insert", "(", "-", "2", ",", "updatedict", "(", "\n", "data", "[", "data_key", "]", "[", "entity", "]", "[", "index", "]", "[", "'model'", "]", ",", "\n", "data", "[", "data_key", "]", "[", "entity", "]", "[", "index", "]", "[", "'category'", "]", ",", "\n", "data", "[", "data_key", "]", "[", "entity", "]", "[", "index", "]", "[", "'count'", "]", ",", "\n", ")", ")", "\n", "summary", "[", "data_key", "]", "[", "entity", "]", "[", "-", "1", "]", "[", "'total'", "]", "+=", "data", "[", "data_key", "]", "[", "entity", "]", "[", "index", "]", "[", "'count'", "]", "\n", "", "", "", "", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.stanza_PT_DP_task.stanza_PT_DP_task.create_pipeline": [[12, 16], ["stanza.Pipeline", "stanza.Pipeline."], "methods", ["None"], ["def", "create_pipeline", "(", "self", ",", "sentences", ")", ":", "\n", "        ", "nlp", "=", "stanza", ".", "Pipeline", "(", "lang", "=", "'en'", ",", "dir", "=", "config", "[", "'package-settings'", "]", "[", "'stanza'", "]", "[", "'resources-directory'", "]", ",", "processors", "=", "'tokenize,pos,lemma,depparse'", ",", "verbose", "=", "False", ")", "\n", "doc", "=", "nlp", "(", "sentences", ")", "\n", "return", "doc", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.stanza_PT_DP_task.stanza_PT_DP_task.is_alpha": [[17, 19], ["word.isalpha"], "methods", ["None"], ["", "def", "is_alpha", "(", "self", ",", "word", ")", ":", "\n", "        ", "return", "word", ".", "isalpha", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.stanza_PT_DP_task.stanza_PT_DP_task.is_stop": [[20, 22], ["None"], "methods", ["None"], ["", "def", "is_stop", "(", "self", ",", "word", ")", ":", "\n", "        ", "return", "(", "word", "in", "punctuation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.stanza_PT_DP_task.stanza_PT_DP_task.pt_dp": [[24, 56], ["stanza_PT_DP_task.stanza_PT_DP_task.create_pipeline", "enumerate", "len", "range", "range", "stanza_PT_DP_task.stanza_PT_DP_task.is_stop", "pos_tag.append", "dependency_parser.append", "len", "len", "stanza_PT_DP_task.stanza_PT_DP_task.is_alpha", "int", "int"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.stanza_PT_DP_task.stanza_PT_DP_task.create_pipeline", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.stanza_PT_DP_task.stanza_PT_DP_task.is_stop", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.analysis.stanza_PT_DP_task.stanza_PT_DP_task.is_alpha"], ["", "def", "pt_dp", "(", "self", ",", "sentences", ",", "flag", ")", ":", "\n", "        ", "doc", "=", "self", ".", "create_pipeline", "(", "sentences", ")", "\n", "# when there are multiple sentences like articles", "\n", "if", "flag", "==", "1", ":", "\n", "            ", "pos_tag", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "doc", ".", "sentences", ")", ")", "]", "\n", "dependency_parser", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "doc", ".", "sentences", ")", ")", "]", "\n", "# there is only one sentence", "\n", "", "else", ":", "\n", "            ", "pos_tag", "=", "[", "]", "\n", "dependency_parser", "=", "[", "]", "\n", "", "for", "i", ",", "sentence", "in", "enumerate", "(", "doc", ".", "sentences", ")", ":", "\n", "            ", "for", "word", "in", "sentence", ".", "words", ":", "\n", "                ", "if", "not", "self", ".", "is_stop", "(", "word", ".", "text", ")", ":", "\n", "# print(word)", "\n", "# print(type(word.text))", "\n", "                    ", "pos_tag", ".", "append", "(", "{", "\n", "word", ".", "text", ":", "{", "\n", "\"lemma\"", ":", "word", ".", "lemma", ",", "\n", "\"pos\"", ":", "word", ".", "upos", ",", "\n", "\"tag\"", ":", "word", ".", "xpos", ",", "\n", "\"alpha\"", ":", "self", ".", "is_alpha", "(", "word", ".", "text", ")", ",", "\n", "\"starts\"", ":", "int", "(", "word", ".", "start_char", ")", ",", "\n", "# or int(word.misc.split(\"|\")[0].split(\"=\")[-1])", "\n", "\"ends\"", ":", "int", "(", "word", ".", "end_char", ")", ",", "\n", "# or int(word.misc.split(\"|\")[1].split(\"=\")[-1])", "\n", "}", "\n", "}", ")", "\n", "dependency_parser", ".", "append", "(", "{", "word", ".", "text", ":", "{", "\"dep\"", ":", "word", ".", "deprel", "}", "}", ")", "\n", "", "", "", "if", "len", "(", "pos_tag", ")", "==", "1", ":", "\n", "            ", "pos_tag", "=", "pos_tag", "[", "0", "]", "\n", "dependency_parser", "=", "dependency_parser", "[", "0", "]", "\n", "", "return", "pos_tag", ",", "dependency_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NERUtils.garbage_collector": [[111, 115], ["gc.collect"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "garbage_collector", "(", ")", ":", "\n", "# gc.get_count() - to get the number of objects. can check before and after gc.collect() to see how much is cleaned", "\n", "        ", "collected", "=", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Polyglot.get_polyglot_entities": [[119, 141], ["datetime.datetime.now", "polyglot.text.Text", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists", "polyglot_entities.append", "entity_list.append", "entity.tag.split"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["    ", "@", "staticmethod", "\n", "def", "get_polyglot_entities", "(", "text", ")", ":", "\n", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "polyglot_ner_model", "=", "{", "}", "\n", "text_ner", "=", "Text", "(", "text", ")", "\n", "polyglot_entities", "=", "[", "]", "\n", "\n", "for", "sent", "in", "text_ner", ".", "sentences", ":", "\n", "            ", "for", "entity", "in", "sent", ".", "entities", ":", "\n", "                ", "entity_list", "=", "[", "]", "\n", "for", "item", "in", "entity", ":", "\n", "                    ", "item_tuple", "=", "(", "item", ",", "entity", ".", "tag", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "\n", "entity_list", ".", "append", "(", "item_tuple", ")", "\n", "", "polyglot_entities", ".", "append", "(", "entity_list", ")", "\n", "\n", "", "", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "polyglot_entities", ",", "NERUtils", ".", "polyglot_categories", ")", "\n", "polyglot_ner_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "polyglot_ner_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "return", "polyglot_ner_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.load_ner_model": [[148, 152], ["allennlp.predictors.predictor.Predictor.from_path"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "load_ner_model", "(", ")", ":", "\n", "        ", "AllennlpNer", ".", "ner_predictor", "=", "Predictor", ".", "from_path", "(", "NERUtils", ".", "allennlp_ner_path", ")", "\n", "AllennlpNer", ".", "ner_predictor", ".", "_dataset_reader", ".", "_token_indexers", "[", "'token_characters'", "]", ".", "_min_padding_length", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.load_finegrained_ner_model": [[153, 157], ["allennlp.predictors.predictor.Predictor.from_path"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_finegrained_ner_model", "(", ")", ":", "\n", "        ", "AllennlpNer", ".", "finegrained_ner_predictor", "=", "Predictor", ".", "from_path", "(", "NERUtils", ".", "allennlp_finegrained_ner_path", ")", "\n", "AllennlpNer", ".", "finegrained_ner_predictor", ".", "_dataset_reader", ".", "_token_indexers", "[", "'token_characters'", "]", ".", "_min_padding_length", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.get_continuous_chunks": [[158, 174], ["continuous_chunk.append", "current_chunk.append", "continuous_chunk.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_continuous_chunks", "(", "tagged_sent", ")", ":", "\n", "        ", "continuous_chunk", "=", "[", "]", "\n", "current_chunk", "=", "[", "]", "\n", "\n", "for", "token", ",", "tag", "in", "tagged_sent", ":", "\n", "            ", "if", "tag", "!=", "\"O\"", ":", "\n", "                ", "current_chunk", ".", "append", "(", "(", "token", ",", "tag", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "current_chunk", ":", "# if the current chunk is not empty", "\n", "                    ", "continuous_chunk", ".", "append", "(", "current_chunk", ")", "\n", "current_chunk", "=", "[", "]", "\n", "# Flush the final current_chunk into the continuous_chunk, if any.", "\n", "", "", "", "if", "current_chunk", ":", "\n", "            ", "continuous_chunk", ".", "append", "(", "current_chunk", ")", "\n", "", "return", "continuous_chunk", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.get_allennlp_ner": [[175, 199], ["datetime.datetime.now", "predictor.predict", "EntityRecognition.AllennlpNer.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists", "range", "len", "len", "tags[].split"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_allennlp_ner", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "allennlp_ner_model", "=", "{", "}", "\n", "\n", "predictor", "=", "AllennlpNer", ".", "ner_predictor", "\n", "predictor", ".", "max_length", "=", "5402555", "\n", "\n", "output", "=", "predictor", ".", "predict", "(", "text", ")", "\n", "concepts", "=", "output", "[", "\"words\"", "]", "\n", "tags", "=", "output", "[", "\"tags\"", "]", "\n", "\n", "sentence_chunks", "=", "[", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "if", "len", "(", "tags", "[", "i", "]", ")", ">", "1", "else", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "concepts", ")", ")", "]", "\n", "\n", "named_entities", "=", "AllennlpNer", ".", "get_continuous_chunks", "(", "sentence_chunks", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities", ",", "NERUtils", ".", "allennlp_ner_categories", ")", "\n", "allennlp_ner_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "allennlp_ner_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "allennlp_ner_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.get_allennlp_fine_grained_ner": [[200, 225], ["datetime.datetime.now", "predictor.predict", "EntityRecognition.AllennlpNer.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists", "range", "len", "len", "tags[].split"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_allennlp_fine_grained_ner", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "allennlp_fine_grained_ner_model", "=", "{", "}", "\n", "\n", "predictor", "=", "AllennlpNer", ".", "finegrained_ner_predictor", "\n", "predictor", ".", "max_length", "=", "5402555", "\n", "\n", "\n", "output", "=", "predictor", ".", "predict", "(", "text", ")", "\n", "concepts", "=", "output", "[", "\"words\"", "]", "\n", "tags", "=", "output", "[", "\"tags\"", "]", "\n", "\n", "sentence_chunks", "=", "[", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "if", "len", "(", "tags", "[", "i", "]", ")", ">", "1", "else", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "concepts", ")", ")", "]", "\n", "\n", "named_entities", "=", "AllennlpNer", ".", "get_continuous_chunks", "(", "sentence_chunks", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities", ",", "NERUtils", ".", "allennlp_finegrained_ner_categories", ")", "\n", "allennlp_fine_grained_ner_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "allennlp_fine_grained_ner_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "allennlp_fine_grained_ner_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.load_onto_bert_model": [[234, 237], ["deeppavlov.build_model"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "load_onto_bert_model", "(", ")", ":", "\n", "        ", "Deeppavlov", ".", "onto_bert_model", "=", "build_model", "(", "configs", ".", "ner", ".", "ner_ontonotes_bert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.load_onto_model": [[238, 241], ["deeppavlov.build_model"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_onto_model", "(", ")", ":", "\n", "        ", "Deeppavlov", ".", "onto_model", "=", "build_model", "(", "configs", ".", "ner", ".", "ner_ontonotes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.load_conll_bert_model": [[242, 246], ["deeppavlov.build_model"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_conll_bert_model", "(", ")", ":", "\n", "#  Deeppavlov.conll_bert_model = build_model(configs.ner.ner_conll2003_bert, download=True) first run -  should download the models", "\n", "        ", "Deeppavlov", ".", "conll_bert_model", "=", "build_model", "(", "configs", ".", "ner", ".", "ner_conll2003_bert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.load_conll_model": [[247, 250], ["deeppavlov.build_model"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_conll_model", "(", ")", ":", "\n", "        ", "Deeppavlov", ".", "conll_model", "=", "build_model", "(", "configs", ".", "ner", ".", "ner_conll2003", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_entity_by_punctuation": [[252, 275], ["text.split", "len", "EntityRecognition.Deeppavlov.get_entity_by_punctuation", "output_entities.extend", "output_tags.extend", "model", "output_entities.extend", "output_tags.extend"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_entity_by_punctuation"], ["", "@", "staticmethod", "\n", "def", "get_entity_by_punctuation", "(", "text", ",", "index", ",", "model", ")", ":", "\n", "        ", "output_entities", "=", "[", "]", "\n", "output_tags", "=", "[", "]", "\n", "if", "(", "index", "!=", "4", ")", ":", "\n", "            ", "sentences", "=", "text", ".", "split", "(", "NERUtils", ".", "punctuation_marks", "[", "index", "]", ")", "\n", "\n", "for", "sentence", "in", "sentences", ":", "\n", "                ", "if", "(", "len", "(", "sentence", ")", "<", "NERUtils", ".", "bert_max_length", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "ner_tagged", "=", "model", "(", "[", "sentence", "]", ")", "\n", "concepts", "=", "ner_tagged", "[", "0", "]", "[", "0", "]", "\n", "tags", "=", "ner_tagged", "[", "1", "]", "[", "0", "]", "\n", "output_entities", ".", "extend", "(", "concepts", ")", "\n", "output_tags", ".", "extend", "(", "tags", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "output", ",", "tags", "=", "Deeppavlov", ".", "get_entity_by_punctuation", "(", "sentence", ",", "index", "+", "1", ",", "model", ")", "\n", "output_entities", ".", "extend", "(", "output", ")", "\n", "output_tags", ".", "extend", "(", "tags", ")", "\n", "\n", "", "", "", "return", "output_entities", ",", "output_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_continuous_chunks": [[276, 292], ["continuous_chunk.append", "current_chunk.append", "continuous_chunk.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_continuous_chunks", "(", "tagged_sent", ")", ":", "\n", "        ", "continuous_chunk", "=", "[", "]", "\n", "current_chunk", "=", "[", "]", "\n", "\n", "for", "token", ",", "tag", "in", "tagged_sent", ":", "\n", "            ", "if", "tag", "!=", "\"O\"", ":", "\n", "                ", "current_chunk", ".", "append", "(", "(", "token", ",", "tag", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "current_chunk", ":", "# if the current chunk is not empty", "\n", "                    ", "continuous_chunk", ".", "append", "(", "current_chunk", ")", "\n", "current_chunk", "=", "[", "]", "\n", "# Flush the final current_chunk into the continuous_chunk, if any.", "\n", "", "", "", "if", "current_chunk", ":", "\n", "            ", "continuous_chunk", ".", "append", "(", "current_chunk", ")", "\n", "", "return", "continuous_chunk", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_deeppavlov_ontobert_entities": [[293, 311], ["datetime.datetime.now", "EntityRecognition.Deeppavlov.get_entity_by_punctuation", "EntityRecognition.Deeppavlov.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists", "range", "len", "len", "tags[].split"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_entity_by_punctuation", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_deeppavlov_ontobert_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "deeppavolov_model", "=", "{", "}", "\n", "\n", "concepts", ",", "tags", "=", "Deeppavlov", ".", "get_entity_by_punctuation", "(", "text", ",", "0", ",", "Deeppavlov", ".", "onto_bert_model", ")", "\n", "sentence_chunks", "=", "[", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "if", "len", "(", "tags", "[", "i", "]", ")", ">", "1", "else", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "concepts", ")", ")", "]", "\n", "\n", "named_entities", "=", "Deeppavlov", ".", "get_continuous_chunks", "(", "sentence_chunks", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities", ",", "NERUtils", ".", "deeppavlov_onto_bert_categories", ")", "\n", "deeppavolov_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "deeppavolov_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "deeppavolov_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_deeppavlov_onto_entities": [[312, 332], ["datetime.datetime.now", "Deeppavlov.onto_model", "EntityRecognition.Deeppavlov.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists", "range", "len", "len", "tags[].split"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_deeppavlov_onto_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "deeppavolov_model", "=", "{", "}", "\n", "\n", "ner_tagged", "=", "Deeppavlov", ".", "onto_model", "(", "[", "text", "]", ")", "\n", "concepts", "=", "ner_tagged", "[", "0", "]", "[", "0", "]", "\n", "tags", "=", "ner_tagged", "[", "1", "]", "[", "0", "]", "\n", "sentence_chunks", "=", "[", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "if", "len", "(", "tags", "[", "i", "]", ")", ">", "1", "else", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "concepts", ")", ")", "]", "\n", "\n", "named_entities", "=", "Deeppavlov", ".", "get_continuous_chunks", "(", "sentence_chunks", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities", ",", "NERUtils", ".", "deeppavlov_onto_categories", ")", "\n", "deeppavolov_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "deeppavolov_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "deeppavolov_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_deeppavlov_conll2003_bert_entities": [[333, 350], ["datetime.datetime.now", "EntityRecognition.Deeppavlov.get_entity_by_punctuation", "EntityRecognition.Deeppavlov.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists", "range", "len", "len", "tags[].split"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_entity_by_punctuation", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_deeppavlov_conll2003_bert_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "deeppavolov_model", "=", "{", "}", "\n", "concepts", ",", "tags", "=", "Deeppavlov", ".", "get_entity_by_punctuation", "(", "text", ",", "0", ",", "Deeppavlov", ".", "conll_bert_model", ")", "\n", "sentence_chunks", "=", "[", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "if", "len", "(", "tags", "[", "i", "]", ")", ">", "1", "else", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "concepts", ")", ")", "]", "\n", "\n", "named_entities", "=", "Deeppavlov", ".", "get_continuous_chunks", "(", "sentence_chunks", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities", ",", "NERUtils", ".", "deeppavlov_conll2003_bert_categories", ")", "\n", "deeppavolov_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "deeppavolov_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "deeppavolov_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_deeppavlov_conll2003_entities": [[351, 370], ["datetime.datetime.now", "Deeppavlov.conll_model", "EntityRecognition.Deeppavlov.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists", "range", "len", "len", "tags[].split"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_deeppavlov_conll2003_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "deeppavolov_model", "=", "{", "}", "\n", "ner_tagged", "=", "Deeppavlov", ".", "conll_model", "(", "[", "text", "]", ")", "\n", "concepts", "=", "ner_tagged", "[", "0", "]", "[", "0", "]", "\n", "tags", "=", "ner_tagged", "[", "1", "]", "[", "0", "]", "\n", "sentence_chunks", "=", "[", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "if", "len", "(", "tags", "[", "i", "]", ")", ">", "1", "else", "(", "concepts", "[", "i", "]", ",", "tags", "[", "i", "]", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "concepts", ")", ")", "]", "\n", "\n", "named_entities", "=", "Deeppavlov", ".", "get_continuous_chunks", "(", "sentence_chunks", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities", ",", "NERUtils", ".", "deeppavlov_conll2003_categories", ")", "\n", "deeppavolov_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "deeppavolov_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "deeppavolov_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_model": [[380, 383], ["flair.models.SequenceTagger.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["@", "staticmethod", "\n", "def", "load_flair_model", "(", ")", ":", "\n", "        ", "FlairNer", ".", "tagger", "=", "SequenceTagger", ".", "load", "(", "'ner'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_ontonotes_model": [[384, 387], ["flair.models.SequenceTagger.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["", "@", "staticmethod", "\n", "def", "load_flair_ontonotes_model", "(", ")", ":", "\n", "        ", "FlairNer", ".", "ontonotes_tagger", "=", "SequenceTagger", ".", "load", "(", "'ner-ontonotes'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_ontonotes_fast_model": [[388, 391], ["flair.models.SequenceTagger.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["", "@", "staticmethod", "\n", "def", "load_flair_ontonotes_fast_model", "(", ")", ":", "\n", "        ", "FlairNer", ".", "fast_ontonotes_tagger", "=", "SequenceTagger", ".", "load", "(", "'ner-ontonotes-fast'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_fast_model": [[392, 395], ["flair.models.SequenceTagger.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["", "@", "staticmethod", "\n", "def", "load_flair_fast_model", "(", ")", ":", "\n", "        ", "FlairNer", ".", "fast_tagger", "=", "SequenceTagger", ".", "load", "(", "'ner-fast'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_pooled_model": [[396, 399], ["flair.models.SequenceTagger.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["", "@", "staticmethod", "\n", "def", "load_flair_pooled_model", "(", ")", ":", "\n", "        ", "FlairNer", ".", "pooled_tagger", "=", "SequenceTagger", ".", "load", "(", "'ner-pooled'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_fast_entities": [[400, 419], ["datetime.datetime.now", "FlairNer.fast_tagger.predict", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "flair.data.Sentence", "sent.get_spans", "EntityRecognition.NER.get_entity_label_lists", "segtok.segmenter.split_single", "flair_entities.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_flair_fast_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "sentences", "=", "[", "Sentence", "(", "sent", ",", "use_tokenizer", "=", "True", ")", "for", "sent", "in", "split_single", "(", "text", ")", "]", "\n", "FlairNer", ".", "fast_tagger", ".", "predict", "(", "sentences", ")", "\n", "\n", "flair_fast_model", "=", "{", "}", "\n", "categories", "=", "NERUtils", ".", "flair_categories", "\n", "flair_entities", "=", "[", "]", "\n", "\n", "for", "sent", "in", "sentences", ":", "\n", "            ", "for", "entity", "in", "sent", ".", "get_spans", "(", "'ner'", ")", ":", "\n", "                ", "flair_entities", ".", "append", "(", "entity", ")", "\n", "\n", "", "", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "flair_entities", ",", "categories", ")", "\n", "flair_fast_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "flair_fast_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "return", "flair_fast_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_ontonotes_fast_entities": [[420, 439], ["datetime.datetime.now", "FlairNer.fast_ontonotes_tagger.predict", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "flair.data.Sentence", "sent.get_spans", "EntityRecognition.NER.get_entity_label_lists", "segtok.segmenter.split_single", "flair_entities.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_flair_ontonotes_fast_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "sentences", "=", "[", "Sentence", "(", "sent", ",", "use_tokenizer", "=", "True", ")", "for", "sent", "in", "split_single", "(", "text", ")", "]", "\n", "FlairNer", ".", "fast_ontonotes_tagger", ".", "predict", "(", "sentences", ")", "\n", "\n", "flair_ontonotes_fast_model", "=", "{", "}", "\n", "categories", "=", "NERUtils", ".", "flair_ontonotes_categories", "\n", "flair_entities", "=", "[", "]", "\n", "\n", "for", "sent", "in", "sentences", ":", "\n", "            ", "for", "entity", "in", "sent", ".", "get_spans", "(", "'ner'", ")", ":", "\n", "                ", "flair_entities", ".", "append", "(", "entity", ")", "\n", "\n", "", "", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "flair_entities", ",", "categories", ")", "\n", "flair_ontonotes_fast_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "flair_ontonotes_fast_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "return", "flair_ontonotes_fast_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_entities": [[440, 459], ["datetime.datetime.now", "FlairNer.tagger.predict", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "flair.data.Sentence", "sent.get_spans", "EntityRecognition.NER.get_entity_label_lists", "segtok.segmenter.split_single", "flair_entities.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_flair_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "sentences", "=", "[", "Sentence", "(", "sent", ",", "use_tokenizer", "=", "True", ")", "for", "sent", "in", "split_single", "(", "text", ")", "]", "\n", "FlairNer", ".", "tagger", ".", "predict", "(", "sentences", ")", "\n", "\n", "flair_model", "=", "{", "}", "\n", "categories", "=", "NERUtils", ".", "flair_categories", "\n", "flair_entities", "=", "[", "]", "\n", "\n", "for", "sent", "in", "sentences", ":", "\n", "            ", "for", "entity", "in", "sent", ".", "get_spans", "(", "'ner'", ")", ":", "\n", "                ", "flair_entities", ".", "append", "(", "entity", ")", "\n", "\n", "", "", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "flair_entities", ",", "categories", ")", "\n", "flair_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "flair_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "return", "flair_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_ontonotes_entities": [[460, 479], ["datetime.datetime.now", "FlairNer.ontonotes_tagger.predict", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "flair.data.Sentence", "sent.get_spans", "EntityRecognition.NER.get_entity_label_lists", "segtok.segmenter.split_single", "flair_entities.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_flair_ontonotes_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "sentences", "=", "[", "Sentence", "(", "sent", ",", "use_tokenizer", "=", "True", ")", "for", "sent", "in", "split_single", "(", "text", ")", "]", "\n", "FlairNer", ".", "ontonotes_tagger", ".", "predict", "(", "sentences", ")", "\n", "\n", "flair_ontonotes_model", "=", "{", "}", "\n", "categories", "=", "NERUtils", ".", "flair_ontonotes_categories", "\n", "flair_entities", "=", "[", "]", "\n", "\n", "for", "sent", "in", "sentences", ":", "\n", "            ", "for", "entity", "in", "sent", ".", "get_spans", "(", "'ner'", ")", ":", "\n", "                ", "flair_entities", ".", "append", "(", "entity", ")", "\n", "\n", "", "", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "flair_entities", ",", "categories", ")", "\n", "flair_ontonotes_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "flair_ontonotes_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "return", "flair_ontonotes_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_pooled_entities": [[480, 499], ["datetime.datetime.now", "FlairNer.pooled_tagger.predict", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "flair.data.Sentence", "sent.get_spans", "EntityRecognition.NER.get_entity_label_lists", "segtok.segmenter.split_single", "flair_entities.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_flair_pooled_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "sentences", "=", "[", "Sentence", "(", "sent", ",", "use_tokenizer", "=", "True", ")", "for", "sent", "in", "split_single", "(", "text", ")", "]", "\n", "FlairNer", ".", "pooled_tagger", ".", "predict", "(", "sentences", ")", "\n", "\n", "flair_pooled_model", "=", "{", "}", "\n", "categories", "=", "NERUtils", ".", "flair_pooled_categories", "\n", "flair_entities", "=", "[", "]", "\n", "\n", "for", "sent", "in", "sentences", ":", "\n", "            ", "for", "entity", "in", "sent", ".", "get_spans", "(", "'ner'", ")", ":", "\n", "                ", "flair_entities", ".", "append", "(", "entity", ")", "\n", "\n", "", "", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "flair_entities", ",", "categories", ")", "\n", "flair_pooled_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "flair_pooled_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "return", "flair_pooled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.load_spacy_sm_model": [[507, 511], ["spacy.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["@", "staticmethod", "\n", "def", "load_spacy_sm_model", "(", ")", ":", "\n", "        ", "SpacyNer", ".", "nlp_sm", "=", "spacy", ".", "load", "(", "NERUtils", ".", "nlp_sm", ")", "\n", "SpacyNer", ".", "nlp_sm", ".", "max_length", "=", "NERUtils", ".", "nlp_sm_len", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.load_spacy_md_model": [[512, 516], ["spacy.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["", "@", "staticmethod", "\n", "def", "load_spacy_md_model", "(", ")", ":", "\n", "        ", "SpacyNer", ".", "nlp_md", "=", "spacy", ".", "load", "(", "NERUtils", ".", "nlp_md", ")", "\n", "SpacyNer", ".", "nlp_md", ".", "max_length", "=", "NERUtils", ".", "nlp_md_len", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.load_spacy_lg_model": [[517, 521], ["spacy.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["", "@", "staticmethod", "\n", "def", "load_spacy_lg_model", "(", ")", ":", "\n", "        ", "SpacyNer", ".", "nlp_lg", "=", "spacy", ".", "load", "(", "NERUtils", ".", "nlp_lg", ")", "\n", "SpacyNer", ".", "nlp_lg", ".", "max_length", "=", "NERUtils", ".", "nlp_lg_len", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.get_spacy_sm_entities": [[522, 536], ["datetime.datetime.now", "SpacyNer.nlp_sm", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_spacy_sm_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "spacy_sm_model", "=", "{", "}", "\n", "doc_sm", "=", "SpacyNer", ".", "nlp_sm", "(", "text", ")", "\n", "categories", "=", "NERUtils", ".", "nlp_sm_categories", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "doc_sm", ".", "ents", ",", "categories", ")", "\n", "\n", "spacy_sm_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "spacy_sm_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "spacy_sm_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.get_spacy_md_entities": [[537, 551], ["datetime.datetime.now", "SpacyNer.nlp_md", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_spacy_md_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "spacy_md_model", "=", "{", "}", "\n", "doc_md", "=", "SpacyNer", ".", "nlp_md", "(", "text", ")", "\n", "categories", "=", "NERUtils", ".", "nlp_md_categories", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "doc_md", ".", "ents", ",", "categories", ")", "\n", "\n", "spacy_md_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "spacy_md_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "spacy_md_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.get_spacy_lg_entities": [[552, 566], ["datetime.datetime.now", "SpacyNer.nlp_lg", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_spacy_lg_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "spacy_lg_model", "=", "{", "}", "\n", "doc_lg", "=", "SpacyNer", ".", "nlp_lg", "(", "text", ")", "\n", "categories", "=", "NERUtils", ".", "nlp_lg_categories", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "doc_lg", ".", "ents", ",", "categories", ")", "\n", "\n", "spacy_lg_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "spacy_lg_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "spacy_lg_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanzaNer.load_stanza_model": [[574, 579], ["stanza.Pipeline", "spacy_stanza.StanzaLanguage"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "load_stanza_model", "(", ")", ":", "\n", "        ", "StanzaNer", ".", "snlp", "=", "stanza", ".", "Pipeline", "(", "lang", "=", "\"en\"", ")", "\n", "StanzaNer", ".", "nlp", "=", "StanzaLanguage", "(", "StanzaNer", ".", "snlp", ")", "\n", "StanzaNer", ".", "nlp", ".", "max_length", "=", "NERUtils", ".", "stanza_max_length", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanzaNer.get_stanza_entities": [[580, 593], ["datetime.datetime.now", "StanzaNer.snlp", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_stanza_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "stanza_model", "=", "{", "}", "\n", "doc", "=", "StanzaNer", ".", "snlp", "(", "text", ")", "\n", "categories", "=", "NERUtils", ".", "stanza_categories", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "doc", ".", "ents", ",", "categories", ")", "\n", "\n", "stanza_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "stanza_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "stanza_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.load_bert_model": [[599, 602], ["NLP_NER.bert.Ner"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "load_bert_model", "(", ")", ":", "\n", "        ", "BERTNer", ".", "bert_model_path", "=", "Ner", "(", "NERUtils", ".", "bert_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_continuous_chunks_bert": [[603, 619], ["continuous_chunk.append", "current_chunk.append", "continuous_chunk.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_continuous_chunks_bert", "(", "tagged_sent", ")", ":", "\n", "        ", "continuous_chunk", "=", "[", "]", "\n", "current_chunk", "=", "[", "]", "\n", "\n", "for", "sent", "in", "tagged_sent", ":", "\n", "            ", "if", "sent", "[", "'tag'", "]", "!=", "\"O\"", ":", "\n", "                ", "current_chunk", ".", "append", "(", "(", "sent", "[", "'word'", "]", ",", "sent", "[", "'tag'", "]", "[", "2", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "current_chunk", ":", "# if the current chunk is not empty", "\n", "                    ", "continuous_chunk", ".", "append", "(", "current_chunk", ")", "\n", "current_chunk", "=", "[", "]", "\n", "# Flush the final current_chunk into the continuous_chunk, if any.", "\n", "", "", "", "if", "current_chunk", ":", "\n", "            ", "continuous_chunk", ".", "append", "(", "current_chunk", ")", "\n", "", "return", "continuous_chunk", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_bert_entities": [[620, 633], ["datetime.datetime.now", "EntityRecognition.BERTNer.get_entity_by_punctuation", "EntityRecognition.BERTNer.get_continuous_chunks_bert", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "EntityRecognition.NER.get_entity_label_lists"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_entity_by_punctuation", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_continuous_chunks_bert", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_bert_entities", "(", "text", ",", "index", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "bert_model", "=", "{", "}", "\n", "final_output", "=", "BERTNer", ".", "get_entity_by_punctuation", "(", "text", ",", "index", ")", "\n", "final_output", "=", "BERTNer", ".", "get_continuous_chunks_bert", "(", "final_output", ")", "\n", "categories", "=", "NERUtils", ".", "bert_categories", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "final_output", ",", "categories", ")", "\n", "bert_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "bert_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "bert_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_entity_by_punctuation": [[634, 647], ["text.split", "len", "final_output.extend", "EntityRecognition.BERTNer.get_entity_by_punctuation", "final_output.extend", "BERTNer.bert_model_path.predict"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_entity_by_punctuation", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict"], ["", "@", "staticmethod", "\n", "def", "get_entity_by_punctuation", "(", "text", ",", "index", ")", ":", "\n", "        ", "final_output", "=", "[", "]", "\n", "if", "(", "index", "!=", "4", ")", ":", "\n", "            ", "sentences", "=", "text", ".", "split", "(", "NERUtils", ".", "punctuation_marks", "[", "index", "]", ")", "\n", "\n", "for", "sentence", "in", "sentences", ":", "\n", "                ", "if", "(", "len", "(", "sentence", ")", "<", "NERUtils", ".", "bert_max_length", ")", ":", "\n", "                    ", "final_output", ".", "extend", "(", "BERTNer", ".", "bert_model_path", ".", "predict", "(", "sentence", ")", ")", "\n", "", "else", ":", "\n", "                    ", "output", "=", "BERTNer", ".", "get_entity_by_punctuation", "(", "sentence", ",", "index", "+", "1", ")", "\n", "final_output", ".", "extend", "(", "output", ")", "\n", "", "", "", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NLTKNer.get_nltk_entities": [[652, 685], ["datetime.datetime.now", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "nltk.ne_chunk", "entities_nltk.copy", "nltk.pos_tag", "hasattr", "nltk.word_tokenize", "chunk.label", "text.find", "len", "len", "EntityRecognition.NER.get_context_sentence", "entities_nltk[].append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.find", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_context_sentence"], ["    ", "@", "staticmethod", "\n", "def", "get_nltk_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "nltk_model", "=", "{", "}", "\n", "\n", "entities_nltk", "=", "{", "}", "\n", "for", "category", "in", "NERUtils", ".", "nltk_categories", ":", "\n", "            ", "offset", "=", "0", "\n", "for", "chunk", "in", "nltk", ".", "ne_chunk", "(", "nltk", ".", "pos_tag", "(", "nltk", ".", "word_tokenize", "(", "text", ")", ")", ")", ":", "\n", "                ", "if", "hasattr", "(", "chunk", ",", "'label'", ")", ":", "\n", "                    ", "if", "chunk", ".", "label", "(", ")", "==", "category", ":", "\n", "\n", "                        ", "entity_text", "=", "' '", ".", "join", "(", "c", "[", "0", "]", "for", "c", "in", "chunk", ")", "\n", "offset", "=", "text", ".", "find", "(", "entity_text", ",", "offset", ")", "\n", "item", "=", "{", "}", "\n", "item", "[", "\"entity\"", "]", "=", "entity_text", "\n", "item", "[", "\"start_char\"", "]", "=", "offset", "\n", "item", "[", "\"end_char\"", "]", "=", "offset", "+", "len", "(", "entity_text", ")", "\n", "if", "(", "NERUtils", ".", "sentence_include", "==", "1", ")", ":", "\n", "                            ", "item", "[", "\"sentence\"", "]", "=", "NER", ".", "get_context_sentence", "(", "offset", ",", "text", ")", "\n", "", "offset", "+=", "len", "(", "entity_text", ")", "\n", "\n", "try", ":", "\n", "                            ", "entities_nltk", "[", "category", "]", ".", "append", "(", "item", ")", "\n", "", "except", ":", "\n", "# entities_nltk[category] = [' '.join(c[0] for c in chunk)]", "\n", "                            ", "entities_nltk", "[", "category", "]", "=", "[", "item", "]", "\n", "\n", "", "", "", "", "", "nltk_model", "[", "\"_output\"", "]", "=", "entities_nltk", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "nltk_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entities_nltk", ".", "copy", "(", ")", ")", "\n", "\n", "return", "nltk_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.load_stanford_class3_model": [[693, 696], ["nltk.tag.stanford.StanfordNERTagger"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "load_stanford_class3_model", "(", ")", ":", "\n", "        ", "StanfordNer", ".", "st_3class", "=", "StanfordNERTagger", "(", "NERUtils", ".", "stanford_class3", ",", "NERUtils", ".", "stanford_ner_path", ",", "encoding", "=", "'utf8'", ")", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.load_stanford_class4_model": [[696, 700], ["nltk.tag.stanford.StanfordNERTagger"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_stanford_class4_model", "(", ")", ":", "\n", "        ", "StanfordNer", ".", "st_4class", "=", "StanfordNERTagger", "(", "NERUtils", ".", "stanford_class4", ",", "NERUtils", ".", "stanford_ner_path", ",", "\n", "encoding", "=", "'utf8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.load_stanford_class7_model": [[701, 705], ["nltk.tag.stanford.StanfordNERTagger"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_stanford_class7_model", "(", ")", ":", "\n", "        ", "StanfordNer", ".", "st_7class", "=", "StanfordNERTagger", "(", "NERUtils", ".", "stanford_class7", ",", "NERUtils", ".", "stanford_ner_path", ",", "\n", "encoding", "=", "'utf8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks": [[708, 724], ["continuous_chunk.append", "current_chunk.append", "continuous_chunk.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_continuous_chunks", "(", "tagged_sent", ")", ":", "\n", "        ", "continuous_chunk", "=", "[", "]", "\n", "current_chunk", "=", "[", "]", "\n", "\n", "for", "token", ",", "tag", "in", "tagged_sent", ":", "\n", "            ", "if", "tag", "!=", "\"O\"", ":", "\n", "                ", "current_chunk", ".", "append", "(", "(", "token", ",", "tag", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "current_chunk", ":", "# if the current chunk is not empty", "\n", "                    ", "continuous_chunk", ".", "append", "(", "current_chunk", ")", "\n", "current_chunk", "=", "[", "]", "\n", "# Flush the final current_chunk into the continuous_chunk, if any.", "\n", "", "", "", "if", "current_chunk", ":", "\n", "            ", "continuous_chunk", ".", "append", "(", "current_chunk", ")", "\n", "", "return", "continuous_chunk", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_class3_entities": [[725, 741], ["datetime.datetime.now", "StanfordNer.st_3class.tag", "EntityRecognition.StanfordNer.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "text.split", "EntityRecognition.NER.get_entity_label_lists"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_class3_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "stanford_class3_model", "=", "{", "}", "\n", "\n", "tagged_sent_class3", "=", "StanfordNer", ".", "st_3class", ".", "tag", "(", "text", ".", "split", "(", ")", ")", "\n", "\n", "named_entities_class3", "=", "StanfordNer", ".", "get_continuous_chunks", "(", "tagged_sent_class3", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities_class3", ",", "NERUtils", ".", "stanford_class3_categories", ")", "\n", "stanford_class3_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "stanford_class3_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "stanford_class3_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_class4_entities": [[742, 757], ["datetime.datetime.now", "StanfordNer.st_4class.tag", "EntityRecognition.StanfordNer.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "text.split", "EntityRecognition.NER.get_entity_label_lists"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_class4_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "stanford_class4_model", "=", "{", "}", "\n", "\n", "tagged_sent_class4", "=", "StanfordNer", ".", "st_4class", ".", "tag", "(", "text", ".", "split", "(", ")", ")", "\n", "named_entities_class4", "=", "StanfordNer", ".", "get_continuous_chunks", "(", "tagged_sent_class4", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities_class4", ",", "NERUtils", ".", "stanford_class4_categories", ")", "\n", "stanford_class4_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "stanford_class4_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "stanford_class4_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_class7_entities": [[758, 773], ["datetime.datetime.now", "StanfordNer.st_7class.tag", "EntityRecognition.StanfordNer.get_continuous_chunks", "EntityRecognition.NER.get_entity_label_lists", "datetime.datetime.now", "EntityRecognition.NER.get_statistics", "text.split", "EntityRecognition.NER.get_entity_label_lists"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_continuous_chunks", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "get_class7_entities", "(", "text", ")", ":", "\n", "        ", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "stanford_class7_model", "=", "{", "}", "\n", "\n", "tagged_sent_class7", "=", "StanfordNer", ".", "st_7class", ".", "tag", "(", "text", ".", "split", "(", ")", ")", "\n", "named_entities_class7", "=", "StanfordNer", ".", "get_continuous_chunks", "(", "tagged_sent_class7", ")", "\n", "\n", "entity_labels", "=", "NER", ".", "get_entity_label_lists", "(", "text", ",", "named_entities_class7", ",", "NERUtils", ".", "stanford_class7_categories", ")", "\n", "\n", "stanford_class7_model", "[", "\"_output\"", "]", "=", "entity_labels", "\n", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "stanford_class7_model", "[", "\"_stats\"", "]", "=", "NER", ".", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_labels", ".", "copy", "(", ")", ")", "\n", "\n", "return", "stanford_class7_model", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.csv_preprocess": [[778, 787], ["re.sub", "regex.compile.sub.replace", "regex.compile", "regex.compile.sub", "regex.compile.sub.split"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "csv_preprocess", "(", "file", ")", ":", "\n", "        ", "text", "=", "file", "[", "\"Specific-Metadata\"", "]", "[", "\"text-analysis\"", "]", "[", "\"clean-text\"", "]", "\n", "text", "=", "re", ".", "sub", "(", "r\"[-()<=>~`|{}@#?!&$]+\\ *\"", ",", "\" \"", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\n\"", ",", "\",\"", ")", "\n", "RE_BAD_CHARS", "=", "regex", ".", "compile", "(", "r\"\\p{Cc}|\\p{Cs}\"", ")", "\n", "text", "=", "RE_BAD_CHARS", ".", "sub", "(", "\"\"", ",", "text", ")", "\n", "all_text", "=", "text", ".", "split", "(", "\",\"", ")", "\n", "return", "all_text", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.preprocess_text": [[788, 798], ["regex.compile.sub.replace().replace().replace", "re.sub", "regex.compile.sub.replace", "regex.compile.sub.replace", "regex.compile", "regex.compile.sub", "regex.compile.sub.split", "regex.compile.sub.replace().replace", "regex.compile.sub.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "preprocess_text", "(", "text", ")", ":", "\n", "        ", "text", "=", "text", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ".", "replace", "(", "\"\\\\r\\\\n\"", ",", "\" \"", ")", ".", "replace", "(", "\"\\r\"", ",", "\" \"", ")", "\n", "text", "=", "re", ".", "sub", "(", "r\"[-()<=>~`|{}@#?!&$]+\\ *\"", ",", "\" \"", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"[\"", ",", "\"\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"]\"", ",", "\"\"", ")", "\n", "RE_BAD_CHARS", "=", "regex", ".", "compile", "(", "r\"\\p{Cc}|\\p{Cs}\"", ")", "\n", "text", "=", "RE_BAD_CHARS", ".", "sub", "(", "\"\"", ",", "text", ")", "\n", "text", "=", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_statistics": [[799, 809], ["dt_begin.strftime", "dt_end.strftime", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_statistics", "(", "dt_begin", ",", "dt_end", ",", "entity_list", ")", ":", "\n", "        ", "_stats", "=", "{", "}", "\n", "_stats", "[", "\"start-timestamp\"", "]", "=", "dt_begin", ".", "strftime", "(", "NERUtils", ".", "datetime2string_format", ")", "\n", "_stats", "[", "\"end-timestamp\"", "]", "=", "dt_end", ".", "strftime", "(", "NERUtils", ".", "datetime2string_format", ")", "\n", "_stats", "[", "\"duration\"", "]", "=", "(", "dt_end", "-", "dt_begin", ")", ".", "total_seconds", "(", ")", "\n", "for", "item", "in", "entity_list", ":", "\n", "            ", "entity_list", "[", "item", "]", "=", "len", "(", "entity_list", "[", "item", "]", ")", "\n", "", "_stats", "[", "\"number-of-entities\"", "]", "=", "entity_list", "\n", "return", "_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_context_sentence": [[810, 818], ["text.split", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_context_sentence", "(", "start_char", ",", "text", ")", ":", "\n", "        ", "total_length", "=", "0", "\n", "sentences", "=", "text", ".", "split", "(", "\".\"", ")", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "total_length", "=", "len", "(", "sentence", ")", "+", "total_length", "+", "1", "# 1 to add the length of a period in a sentence", "\n", "if", "start_char", "<", "total_length", ":", "\n", "                ", "return", "sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists": [[819, 878], ["hasattr", "hasattr", "hasattr", "EntityRecognition.NER.get_context_sentence", "entity_labels[].append", "EntityRecognition.NER.get_context_sentence", "entity_labels[].append", "text.find", "len", "EntityRecognition.NER.get_context_sentence", "entity_labels[].append", "len", "EntityRecognition.NER.get_context_sentence", "entity_labels[].append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_context_sentence", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_context_sentence", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.find", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_context_sentence", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_context_sentence"], ["", "", "", "@", "staticmethod", "\n", "def", "get_entity_label_lists", "(", "text", ",", "doc", ",", "categories", ")", ":", "\n", "        ", "entity_labels", "=", "{", "}", "\n", "for", "category", "in", "categories", ":", "\n", "            ", "offset", "=", "0", "\n", "for", "entity", "in", "doc", ":", "\n", "                ", "if", "hasattr", "(", "entity", ",", "'label_'", ")", ":", "\n", "                    ", "if", "category", "==", "entity", ".", "label_", ":", "\n", "                        ", "item", "=", "{", "}", "\n", "item", "[", "\"entity\"", "]", "=", "entity", ".", "text", "\n", "item", "[", "\"start_index\"", "]", "=", "entity", ".", "start_char", "\n", "item", "[", "\"end_index\"", "]", "=", "entity", ".", "end_char", "\n", "if", "(", "NERUtils", ".", "sentence_include", "==", "1", ")", ":", "\n", "                            ", "item", "[", "\"sentence\"", "]", "=", "NER", ".", "get_context_sentence", "(", "entity", ".", "start_char", ",", "text", ")", "\n", "", "try", ":", "\n", "                            ", "entity_labels", "[", "category", "]", ".", "append", "(", "item", ")", "\n", "", "except", ":", "\n", "                            ", "entity_labels", "[", "category", "]", "=", "[", "item", "]", "\n", "", "", "", "elif", "hasattr", "(", "entity", ",", "'tag'", ")", ":", "\n", "                    ", "if", "category", "==", "entity", ".", "tag", ":", "\n", "                        ", "item", "=", "{", "}", "\n", "item", "[", "\"entity\"", "]", "=", "entity", ".", "text", "\n", "item", "[", "\"start_index\"", "]", "=", "entity", ".", "start_pos", "\n", "item", "[", "\"end_index\"", "]", "=", "entity", ".", "end_pos", "\n", "if", "(", "NERUtils", ".", "sentence_include", "==", "1", ")", ":", "\n", "                            ", "item", "[", "\"sentence\"", "]", "=", "NER", ".", "get_context_sentence", "(", "entity", ".", "start_pos", ",", "text", ")", "\n", "", "try", ":", "\n", "                            ", "entity_labels", "[", "category", "]", ".", "append", "(", "item", ")", "\n", "", "except", ":", "\n", "                            ", "entity_labels", "[", "category", "]", "=", "[", "item", "]", "\n", "\n", "", "", "", "elif", "hasattr", "(", "entity", ",", "'type'", ")", ":", "\n", "                    ", "if", "category", "==", "entity", ".", "type", ":", "\n", "                        ", "item", "=", "{", "}", "\n", "item", "[", "\"entity\"", "]", "=", "entity", ".", "text", "\n", "item", "[", "\"start_index\"", "]", "=", "entity", ".", "start_char", "\n", "item", "[", "\"end_index\"", "]", "=", "entity", ".", "end_char", "\n", "if", "(", "NERUtils", ".", "sentence_include", "==", "1", ")", ":", "\n", "                            ", "item", "[", "\"sentence\"", "]", "=", "NER", ".", "get_context_sentence", "(", "entity", ".", "start_char", ",", "text", ")", "\n", "", "try", ":", "\n", "                            ", "entity_labels", "[", "category", "]", ".", "append", "(", "item", ")", "\n", "", "except", ":", "\n", "                            ", "entity_labels", "[", "category", "]", "=", "[", "item", "]", "\n", "", "", "", "else", ":", "\n", "                    ", "if", "category", "==", "entity", "[", "0", "]", "[", "1", "]", ":", "\n", "                        ", "entity_text", "=", "\" \"", ".", "join", "(", "[", "token", "for", "token", ",", "tag", "in", "entity", "]", ")", "\n", "offset", "=", "text", ".", "find", "(", "entity_text", ",", "offset", ")", "\n", "item", "=", "{", "}", "\n", "item", "[", "\"entity\"", "]", "=", "entity_text", "\n", "item", "[", "\"start_index\"", "]", "=", "offset", "\n", "item", "[", "\"end_index\"", "]", "=", "offset", "+", "len", "(", "entity_text", ")", "\n", "if", "(", "NERUtils", ".", "sentence_include", "==", "1", ")", ":", "\n", "                            ", "item", "[", "\"sentence\"", "]", "=", "NER", ".", "get_context_sentence", "(", "offset", ",", "text", ")", "\n", "", "offset", "+=", "len", "(", "entity_text", ")", "\n", "try", ":", "\n", "                            ", "entity_labels", "[", "category", "]", ".", "append", "(", "item", ")", "\n", "", "except", ":", "\n", "                            ", "entity_labels", "[", "category", "]", "=", "[", "item", "]", "\n", "", "", "", "", "", "return", "entity_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_text_values": [[879, 884], ["EntityRecognition.NER.preprocess_text"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.preprocess_text"], ["", "@", "staticmethod", "\n", "def", "get_text_values", "(", "file", ")", ":", "\n", "        ", "text", "=", "file", "[", "\"Specific-Metadata\"", "]", "[", "\"text-analysis\"", "]", "[", "\"clean-text\"", "]", "\n", "text", "=", "NER", ".", "preprocess_text", "(", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_attachment_texts": [[885, 901], ["EntityRecognition.NER.preprocess_text", "attachment_texts.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.preprocess_text"], ["", "@", "staticmethod", "\n", "def", "get_attachment_texts", "(", "file", ")", ":", "\n", "        ", "attachment_texts", "=", "[", "]", "\n", "if", "'attachments'", "in", "file", "[", "\"Specific-Metadata\"", "]", ":", "\n", "            ", "for", "attachment", "in", "file", "[", "\"Specific-Metadata\"", "]", "[", "\"attachments\"", "]", ":", "\n", "                ", "attachment_obj", "=", "{", "}", "\n", "attachment_obj", "[", "\"filename\"", "]", "=", "file", "[", "\"Specific-Metadata\"", "]", "[", "\"attachments\"", "]", "[", "attachment", "]", "[", "\"filename\"", "]", "\n", "if", "(", "(", "'Specific-Metadata'", "in", "file", "[", "\"Specific-Metadata\"", "]", "[", "\"attachments\"", "]", "[", "attachment", "]", "[", "\"metadata\"", "]", ")", "and", "(", "'text-analysis'", "in", "file", "[", "\"Specific-Metadata\"", "]", "[", "\"attachments\"", "]", "[", "attachment", "]", "[", "\"metadata\"", "]", "[", "\"Specific-Metadata\"", "]", ")", ")", ":", "\n", "                    ", "attachment_text", "=", "file", "[", "\"Specific-Metadata\"", "]", "[", "\"attachments\"", "]", "[", "attachment", "]", "[", "\"metadata\"", "]", "[", "\"Specific-Metadata\"", "]", "[", "\"text-analysis\"", "]", "[", "\"clean-text\"", "]", "\n", "attachment_text", "=", "NER", ".", "preprocess_text", "(", "attachment_text", ")", "\n", "attachment_obj", "[", "\"text\"", "]", "=", "attachment_text", "\n", "attachment_texts", ".", "append", "(", "attachment_obj", ")", "\n", "", "", "", "return", "attachment_texts", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.time_details_for_csv": [[902, 919], ["datetime.datetime.strptime", "datetime.datetime.strptime", "datetime.datetime.strptime", "datetime.datetime.strptime", "min().strftime", "max().strftime", "min", "max", "max", "min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "time_details_for_csv", "(", "doc1", ",", "ner_object", ")", ":", "\n", "        ", "start_time_in_doc1", "=", "doc1", "[", "\"_stats\"", "]", "[", "\"start-timestamp\"", "]", "\n", "end_time_in_doc1", "=", "doc1", "[", "\"_stats\"", "]", "[", "\"end-timestamp\"", "]", "\n", "start_time_in_ner", "=", "ner_object", "[", "\"_stats\"", "]", "[", "\"start-timestamp\"", "]", "\n", "end_time_in_ner", "=", "ner_object", "[", "\"_stats\"", "]", "[", "\"end-timestamp\"", "]", "\n", "\n", "start_doc1", "=", "datetime", ".", "datetime", ".", "strptime", "(", "start_time_in_doc1", ",", "NERUtils", ".", "datetime2string_format", ")", "\n", "end_doc1", "=", "datetime", ".", "datetime", ".", "strptime", "(", "end_time_in_doc1", ",", "NERUtils", ".", "datetime2string_format", ")", "\n", "start_ner", "=", "datetime", ".", "datetime", ".", "strptime", "(", "start_time_in_ner", ",", "NERUtils", ".", "datetime2string_format", ")", "\n", "end_ner", "=", "datetime", ".", "datetime", ".", "strptime", "(", "end_time_in_ner", ",", "NERUtils", ".", "datetime2string_format", ")", "\n", "\n", "times", "=", "[", "start_doc1", ",", "end_doc1", ",", "start_ner", ",", "end_ner", "]", "\n", "start_time", "=", "min", "(", "times", ")", ".", "strftime", "(", "NERUtils", ".", "datetime2string_format", ")", "\n", "end_time", "=", "max", "(", "times", ")", ".", "strftime", "(", "NERUtils", ".", "datetime2string_format", ")", "\n", "duration", "=", "(", "max", "(", "times", ")", "-", "min", "(", "times", ")", ")", ".", "total_seconds", "(", ")", "\n", "return", "start_time", ",", "end_time", ",", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_csv_ner_from_models": [[920, 978], ["doc.copy", "EntityRecognition.NER.get_ner_from_models", "[].copy", "len", "[].append", "EntityRecognition.NER.time_details_for_csv", "[].append", "EntityRecognition.NER.time_details_for_csv"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.time_details_for_csv", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.time_details_for_csv"], ["", "@", "staticmethod", "\n", "def", "get_csv_ner_from_models", "(", "all_text", ",", "doc", ",", "models", ")", ":", "\n", "# print(f\"* models={models}\")", "\n", "# print(f\"* all_text={all_text}\")", "\n", "\n", "        ", "doc1", "=", "doc", ".", "copy", "(", ")", "\n", "for", "model", "in", "models", ":", "\n", "            ", "doc1", "[", "model", "]", "=", "{", "}", "\n", "doc1", "[", "model", "]", "[", "\"_output\"", "]", "=", "{", "}", "\n", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "=", "{", "}", "\n", "\n", "", "for", "text", "in", "all_text", ":", "\n", "            ", "ner_object", "=", "NER", ".", "get_ner_from_models", "(", "text", ",", "doc", ",", "models", ")", "\n", "\n", "for", "model", "in", "models", ":", "\n", "                ", "categories", "=", "NERUtils", ".", "_config", "[", "model", "]", "[", "\"categories\"", "]", "\n", "\n", "for", "category", "in", "categories", ":", "\n", "                    ", "if", "category", "in", "ner_object", "[", "model", "]", "[", "\"_output\"", "]", ":", "\n", "                        ", "if", "category", "in", "doc1", "[", "model", "]", "[", "\"_output\"", "]", ":", "\n", "                            ", "for", "i", "in", "ner_object", "[", "model", "]", "[", "\"_output\"", "]", "[", "category", "]", ":", "\n", "                                ", "doc1", "[", "model", "]", "[", "\"_output\"", "]", "[", "category", "]", ".", "append", "(", "i", ")", "\n", "\n", "if", "\"start-timestamp\"", "in", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", ":", "\n", "                                    ", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"start-timestamp\"", "]", ",", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"end-timestamp\"", "]", ",", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"duration\"", "]", "=", "NER", ".", "time_details_for_csv", "(", "doc1", "[", "model", "]", ",", "\n", "ner_object", "[", "model", "]", ")", "\n", "", "else", ":", "\n", "                                    ", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"start-timestamp\"", "]", "=", "ner_object", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\n", "\"start-timestamp\"", "]", "\n", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"end-timestamp\"", "]", "=", "ner_object", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"end-timestamp\"", "]", "\n", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"duration\"", "]", "=", "ner_object", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"duration\"", "]", "\n", "\n", "", "", "", "else", ":", "\n", "                            ", "for", "i", "in", "ner_object", "[", "model", "]", "[", "\"_output\"", "]", "[", "category", "]", ":", "\n", "                                ", "try", ":", "\n", "                                    ", "doc1", "[", "model", "]", "[", "\"_output\"", "]", "[", "category", "]", ".", "append", "(", "i", ")", "\n", "", "except", ":", "\n", "                                    ", "doc1", "[", "model", "]", "[", "\"_output\"", "]", "[", "category", "]", "=", "[", "ner_object", "[", "model", "]", "[", "\"_output\"", "]", "[", "category", "]", "[", "0", "]", "]", "\n", "\n", "", "if", "\"start-timestamp\"", "in", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", ":", "\n", "                                    ", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"start-timestamp\"", "]", ",", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"end-timestamp\"", "]", ",", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"duration\"", "]", "=", "NER", ".", "time_details_for_csv", "(", "doc1", "[", "model", "]", ",", "\n", "ner_object", "[", "model", "]", ")", "\n", "", "else", ":", "\n", "                                    ", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"start-timestamp\"", "]", "=", "ner_object", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\n", "\"start-timestamp\"", "]", "\n", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"end-timestamp\"", "]", "=", "ner_object", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"end-timestamp\"", "]", "\n", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"duration\"", "]", "=", "ner_object", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"duration\"", "]", "\n", "\n", "", "", "", "", "", "", "", "for", "model", "in", "models", ":", "\n", "            ", "entity_list", "=", "doc1", "[", "model", "]", "[", "\"_output\"", "]", ".", "copy", "(", ")", "\n", "for", "item", "in", "entity_list", ":", "\n", "                ", "entity_list", "[", "item", "]", "=", "len", "(", "entity_list", "[", "item", "]", ")", "\n", "\n", "", "doc1", "[", "model", "]", "[", "\"_stats\"", "]", "[", "\"number-of-entities\"", "]", "=", "entity_list", "\n", "\n", "", "return", "doc1", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models": [[980, 1027], ["len", "EntityRecognition.StanfordNer.get_class7_entities", "EntityRecognition.StanfordNer.get_class4_entities", "EntityRecognition.StanfordNer.get_class3_entities", "EntityRecognition.StanzaNer.get_stanza_entities", "EntityRecognition.SpacyNer.get_spacy_sm_entities", "EntityRecognition.SpacyNer.get_spacy_md_entities", "EntityRecognition.SpacyNer.get_spacy_lg_entities", "EntityRecognition.NLTKNer.get_nltk_entities", "EntityRecognition.BERTNer.get_bert_entities", "EntityRecognition.FlairNer.get_flair_entities", "EntityRecognition.FlairNer.get_flair_ontonotes_entities", "EntityRecognition.FlairNer.get_flair_fast_entities", "EntityRecognition.FlairNer.get_flair_ontonotes_fast_entities", "EntityRecognition.FlairNer.get_flair_pooled_entities", "EntityRecognition.Deeppavlov.get_deeppavlov_onto_entities", "EntityRecognition.Deeppavlov.get_deeppavlov_ontobert_entities", "EntityRecognition.Deeppavlov.get_deeppavlov_conll2003_entities", "EntityRecognition.Deeppavlov.get_deeppavlov_conll2003_bert_entities", "EntityRecognition.AllennlpNer.get_allennlp_ner", "EntityRecognition.AllennlpNer.get_allennlp_fine_grained_ner", "EntityRecognition.Polyglot.get_polyglot_entities"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_class7_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_class4_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.get_class3_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanzaNer.get_stanza_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.get_spacy_sm_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.get_spacy_md_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.get_spacy_lg_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NLTKNer.get_nltk_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.get_bert_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_ontonotes_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_fast_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_ontonotes_fast_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.get_flair_pooled_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_deeppavlov_onto_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_deeppavlov_ontobert_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_deeppavlov_conll2003_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.get_deeppavlov_conll2003_bert_entities", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.get_allennlp_ner", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.get_allennlp_fine_grained_ner", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Polyglot.get_polyglot_entities"], ["", "@", "staticmethod", "\n", "def", "get_ner_from_models", "(", "text", ",", "doc", ",", "models", ")", ":", "\n", "        ", "if", "len", "(", "text", ")", "==", "0", ":", "\n", "            ", "return", "doc", "\n", "", "if", "NERUtils", ".", "stanford_class7_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "stanford_class7_name", "]", "=", "StanfordNer", ".", "get_class7_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "stanford_class4_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "stanford_class4_name", "]", "=", "StanfordNer", ".", "get_class4_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "stanford_class3_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "stanford_class3_name", "]", "=", "StanfordNer", ".", "get_class3_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "stanza_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "stanza_name", "]", "=", "StanzaNer", ".", "get_stanza_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "spacy_sm_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "spacy_sm_name", "]", "=", "SpacyNer", ".", "get_spacy_sm_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "spacy_md_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "spacy_md_name", "]", "=", "SpacyNer", ".", "get_spacy_md_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "spacy_lg_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "spacy_lg_name", "]", "=", "SpacyNer", ".", "get_spacy_lg_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "nltk_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "nltk_name", "]", "=", "NLTKNer", ".", "get_nltk_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "bert_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "bert_name", "]", "=", "BERTNer", ".", "get_bert_entities", "(", "text", ",", "0", ")", "\n", "", "if", "NERUtils", ".", "flair_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "flair_name", "]", "=", "FlairNer", ".", "get_flair_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "flair_ontonotes_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "flair_ontonotes_name", "]", "=", "FlairNer", ".", "get_flair_ontonotes_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "flair_fast_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "flair_fast_name", "]", "=", "FlairNer", ".", "get_flair_fast_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "flair_fast_ontonotes_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "flair_fast_ontonotes_name", "]", "=", "FlairNer", ".", "get_flair_ontonotes_fast_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "flair_pooled_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "flair_pooled_name", "]", "=", "FlairNer", ".", "get_flair_pooled_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "deeppavlov_onto_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "deeppavlov_onto_name", "]", "=", "Deeppavlov", ".", "get_deeppavlov_onto_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "deeppavlov_onto_bert_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "deeppavlov_onto_bert_name", "]", "=", "Deeppavlov", ".", "get_deeppavlov_ontobert_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "deeppavlov_conll2003_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "deeppavlov_conll2003_name", "]", "=", "Deeppavlov", ".", "get_deeppavlov_conll2003_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "deeppavlov_conll2003_bert_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "deeppavlov_conll2003_bert_name", "]", "=", "Deeppavlov", ".", "get_deeppavlov_conll2003_bert_entities", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "allennlp_ner_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "allennlp_ner_name", "]", "=", "AllennlpNer", ".", "get_allennlp_ner", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "allennlp_finegrained_ner_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "allennlp_finegrained_ner_name", "]", "=", "AllennlpNer", ".", "get_allennlp_fine_grained_ner", "(", "text", ")", "\n", "", "if", "NERUtils", ".", "polyglot_name", "in", "models", ":", "\n", "            ", "doc", "[", "NERUtils", ".", "polyglot_name", "]", "=", "Polyglot", ".", "get_polyglot_entities", "(", "text", ")", "\n", "", "return", "doc", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.load_models": [[1029, 1073], ["EntityRecognition.StanfordNer.load_stanford_class7_model", "EntityRecognition.StanfordNer.load_stanford_class4_model", "EntityRecognition.StanfordNer.load_stanford_class3_model", "EntityRecognition.StanzaNer.load_stanza_model", "EntityRecognition.SpacyNer.load_spacy_sm_model", "EntityRecognition.SpacyNer.load_spacy_md_model", "EntityRecognition.SpacyNer.load_spacy_lg_model", "EntityRecognition.BERTNer.load_bert_model", "EntityRecognition.FlairNer.load_flair_model", "EntityRecognition.FlairNer.load_flair_ontonotes_model", "EntityRecognition.FlairNer.load_flair_fast_model", "EntityRecognition.FlairNer.load_flair_ontonotes_fast_model", "EntityRecognition.FlairNer.load_flair_pooled_model", "EntityRecognition.Deeppavlov.load_onto_model", "EntityRecognition.Deeppavlov.load_onto_bert_model", "EntityRecognition.Deeppavlov.load_conll_model", "EntityRecognition.Deeppavlov.load_conll_bert_model", "EntityRecognition.AllennlpNer.load_ner_model", "EntityRecognition.AllennlpNer.load_finegrained_ner_model"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.load_stanford_class7_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.load_stanford_class4_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanfordNer.load_stanford_class3_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.StanzaNer.load_stanza_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.load_spacy_sm_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.load_spacy_md_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.SpacyNer.load_spacy_lg_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.BERTNer.load_bert_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_ontonotes_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_fast_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_ontonotes_fast_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.FlairNer.load_flair_pooled_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.load_onto_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.load_onto_bert_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.load_conll_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.Deeppavlov.load_conll_bert_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.load_ner_model", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.AllennlpNer.load_finegrained_ner_model"], ["", "@", "staticmethod", "\n", "def", "load_models", "(", "models", ")", ":", "\n", "        ", "if", "NERUtils", ".", "stanford_class7_name", "in", "models", ":", "\n", "            ", "StanfordNer", ".", "load_stanford_class7_model", "(", ")", "\n", "", "if", "NERUtils", ".", "stanford_class4_name", "in", "models", ":", "\n", "            ", "StanfordNer", ".", "load_stanford_class4_model", "(", ")", "\n", "", "if", "NERUtils", ".", "stanford_class3_name", "in", "models", ":", "\n", "           ", "StanfordNer", ".", "load_stanford_class3_model", "(", ")", "\n", "", "if", "NERUtils", ".", "stanza_name", "in", "models", ":", "\n", "            ", "StanzaNer", ".", "load_stanza_model", "(", ")", "\n", "", "if", "NERUtils", ".", "spacy_sm_name", "in", "models", ":", "\n", "            ", "SpacyNer", ".", "load_spacy_sm_model", "(", ")", "\n", "", "if", "NERUtils", ".", "spacy_md_name", "in", "models", ":", "\n", "            ", "SpacyNer", ".", "load_spacy_md_model", "(", ")", "\n", "", "if", "NERUtils", ".", "spacy_lg_name", "in", "models", ":", "\n", "            ", "SpacyNer", ".", "load_spacy_lg_model", "(", ")", "\n", "", "if", "NERUtils", ".", "nltk_name", "in", "models", ":", "\n", "            ", "pass", "\n", "", "if", "NERUtils", ".", "bert_name", "in", "models", ":", "\n", "            ", "BERTNer", ".", "load_bert_model", "(", ")", "\n", "", "if", "NERUtils", ".", "flair_name", "in", "models", ":", "\n", "            ", "FlairNer", ".", "load_flair_model", "(", ")", "\n", "", "if", "NERUtils", ".", "flair_ontonotes_name", "in", "models", ":", "\n", "            ", "FlairNer", ".", "load_flair_ontonotes_model", "(", ")", "\n", "", "if", "NERUtils", ".", "flair_fast_name", "in", "models", ":", "\n", "            ", "FlairNer", ".", "load_flair_fast_model", "(", ")", "\n", "", "if", "NERUtils", ".", "flair_fast_ontonotes_name", "in", "models", ":", "\n", "            ", "FlairNer", ".", "load_flair_ontonotes_fast_model", "(", ")", "\n", "", "if", "NERUtils", ".", "flair_pooled_name", "in", "models", ":", "\n", "            ", "FlairNer", ".", "load_flair_pooled_model", "(", ")", "\n", "", "if", "NERUtils", ".", "deeppavlov_onto_name", "in", "models", ":", "\n", "            ", "Deeppavlov", ".", "load_onto_model", "(", ")", "\n", "", "if", "NERUtils", ".", "deeppavlov_onto_bert_name", "in", "models", ":", "\n", "            ", "Deeppavlov", ".", "load_onto_bert_model", "(", ")", "\n", "", "if", "NERUtils", ".", "deeppavlov_conll2003_name", "in", "models", ":", "\n", "            ", "Deeppavlov", ".", "load_conll_model", "(", ")", "\n", "", "if", "NERUtils", ".", "deeppavlov_conll2003_bert_name", "in", "models", ":", "\n", "            ", "Deeppavlov", ".", "load_conll_bert_model", "(", ")", "\n", "", "if", "NERUtils", ".", "allennlp_ner_name", "in", "models", ":", "\n", "            ", "AllennlpNer", ".", "load_ner_model", "(", ")", "\n", "", "if", "NERUtils", ".", "allennlp_finegrained_ner_name", "in", "models", ":", "\n", "            ", "AllennlpNer", ".", "load_finegrained_ner_model", "(", ")", "\n", "", "if", "NERUtils", ".", "polyglot_name", "in", "models", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.ner_for_all_files": [[1075, 1113], ["outputs.append", "EntityRecognition.NERUtils.garbage_collector", "EntityRecognition.NER.csv_preprocess", "EntityRecognition.NER.get_csv_ner_from_models", "EntityRecognition.NER.get_text_values", "EntityRecognition.NER.get_ner_from_models", "EntityRecognition.NER.get_attachment_texts", "range", "len", "EntityRecognition.NER.get_ner_from_models", "print", "NER.get_attachement_texts", "range", "len", "EntityRecognition.NER.get_ner_from_models"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NERUtils.garbage_collector", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.csv_preprocess", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_csv_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_text_values", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_attachment_texts", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models"], ["", "", "@", "staticmethod", "\n", "def", "ner_for_all_files", "(", "r", ",", "models", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "n", "=", "0", "\n", "for", "file", "in", "r", "[", "\"docs\"", "]", ":", "\n", "            ", "NLP_NER", "=", "{", "}", "\n", "n", "+=", "1", "\n", "if", "(", "'text-analysis'", "in", "file", "[", "\"Specific-Metadata\"", "]", ")", ":", "\n", "                ", "doc_0", "=", "{", "}", "\n", "doc_0", "[", "\"filename\"", "]", "=", "file", "[", "\"General-Metadata\"", "]", "[", "\"FILENAME\"", "]", "\n", "if", "(", "file", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"csv\"", ")", ":", "# only CSV | doesn't apply to XLSX", "\n", "                    ", "text", "=", "NER", ".", "csv_preprocess", "(", "file", ")", "\n", "NLP_NER", "[", "\"doc-0\"", "]", "=", "NER", ".", "get_csv_ner_from_models", "(", "text", ",", "doc_0", ",", "models", ")", "\n", "", "else", ":", "\n", "                    ", "text", "=", "NER", ".", "get_text_values", "(", "file", ")", "\n", "NLP_NER", "[", "\"doc-0\"", "]", "=", "NER", ".", "get_ner_from_models", "(", "text", ",", "doc_0", ",", "models", ")", "\n", "\n", "", "if", "(", "file", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"msg\"", ")", ":", "\n", "\n", "                    ", "attachment_texts", "=", "NER", ".", "get_attachment_texts", "(", "file", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "attachment_texts", ")", ")", ":", "\n", "                        ", "attachment", "=", "{", "}", "\n", "attachment", "[", "\"filename\"", "]", "=", "attachment_texts", "[", "i", "]", "[", "\"filename\"", "]", "\n", "attachment_text", "=", "attachment_texts", "[", "i", "]", "[", "\"text\"", "]", "\n", "NLP_NER", "[", "f\"doc-{i + 1}\"", "]", "=", "NER", ".", "get_ner_from_models", "(", "attachment_text", ",", "attachment", ",", "\n", "models", ")", "\n", "\n", "", "", "elif", "(", "file", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"zip\"", ")", ":", "\n", "                    ", "print", "(", ")", "\n", "attachment_texts", "=", "NER", ".", "get_attachement_texts", "(", "file", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "attachment_texts", ")", ")", ":", "\n", "                        ", "attachment", "=", "{", "}", "\n", "NLP_NER", "[", "f\"doc-{i + 1}\"", "]", "=", "NER", ".", "get_ner_from_models", "(", "attachment_texts", "[", "i", "]", ",", "attachment", ",", "models", ")", "\n", "\n", "", "", "", "outputs", ".", "append", "(", "NLP_NER", ")", "\n", "NERUtils", ".", "garbage_collector", "(", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.spacy_model_ensemble": [[1114, 1142], ["spacy.load", "spacy.load.", "EntityRecognition.NER.get_entity_label_lists", "spacy.load", "spacy.load.", "EntityRecognition.NER.get_entity_label_lists", "print", "print", "print", "print", "EntityRecognition.NER.get_entity_label_lists", "results[].append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "spacy_model_ensemble", "(", "text", ")", ":", "\n", "        ", "nlp_sm", "=", "spacy", ".", "load", "(", "NERUtils", ".", "nlp_sm", ")", "\n", "nlp_sm", ".", "max_length", "=", "NERUtils", ".", "nlp_sm_len", "\n", "doc_sm", "=", "nlp_sm", "(", "text", ")", "\n", "categories_sm", "=", "NERUtils", ".", "nlp_sm_categories", "\n", "entity_labels_sm", "=", "NER", ".", "get_entity_label_lists", "(", "doc_sm", ".", "ents", ",", "categories_sm", ")", "\n", "\n", "nlp_md", "=", "spacy", ".", "load", "(", "NERUtils", ".", "nlp_md", ")", "\n", "nlp_md", ".", "max_length", "=", "NERUtils", ".", "nlp_md_len", "\n", "doc_md", "=", "nlp_md", "(", "text", ")", "\n", "categories_md", "=", "NERUtils", ".", "nlp_md_categories", "\n", "entity_labels_md", "=", "NER", ".", "get_entity_label_lists", "(", "doc_md", ".", "ents", ",", "categories_md", ")", "\n", "\n", "results", "=", "{", "}", "\n", "for", "category", "in", "entity_labels_sm", ":", "\n", "            ", "print", "(", "category", ")", "\n", "if", "category", "in", "entity_labels_md", ".", "keys", "(", ")", ":", "\n", "                ", "for", "item", "in", "entity_labels_sm", "[", "category", "]", ":", "\n", "                    ", "if", "item", "in", "entity_labels_md", "[", "category", "]", ":", "\n", "                        ", "try", ":", "\n", "                            ", "results", "[", "category", "]", ".", "append", "(", "item", ")", "\n", "", "except", ":", "\n", "                            ", "results", "[", "category", "]", "=", "[", "item", "]", "\n", "\n", "", "", "", "", "", "print", "(", "entity_labels_sm", ")", "\n", "print", "(", "entity_labels_md", ")", "\n", "print", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.spacy_stanza_model_ensemble": [[1143, 1170], ["spacy.load", "spacy.load.", "EntityRecognition.NER.get_entity_label_lists", "stanza.Pipeline", "spacy_stanza.StanzaLanguage", "StanzaNer.snlp", "EntityRecognition.NER.get_entity_label_lists", "EntityRecognition.NER.get_entity_label_lists", "results[].append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_entity_label_lists"], ["", "@", "staticmethod", "\n", "def", "spacy_stanza_model_ensemble", "(", "text", ")", ":", "\n", "\n", "        ", "nlp_md", "=", "spacy", ".", "load", "(", "NERUtils", ".", "nlp_md", ")", "\n", "nlp_md", ".", "max_length", "=", "NERUtils", ".", "nlp_md_len", "\n", "\n", "doc_md", "=", "nlp_md", "(", "text", ")", "\n", "categories_md", "=", "NERUtils", ".", "nlp_md_categories", "\n", "entity_labels_md", "=", "NER", ".", "get_entity_label_lists", "(", "doc_md", ".", "ents", ",", "categories_md", ")", "\n", "\n", "snlp", "=", "stanza", ".", "Pipeline", "(", "lang", "=", "\"en\"", ")", "\n", "nlp", "=", "StanzaLanguage", "(", "snlp", ")", "\n", "nlp", ".", "max_length", "=", "NERUtils", ".", "stanza_max_length", "\n", "\n", "doc", "=", "StanzaNer", ".", "snlp", "(", "text", ")", "\n", "categories", "=", "NERUtils", ".", "stanza_categories", "\n", "entity_labels_stanza", "=", "NER", ".", "get_entity_label_lists", "(", "doc", ".", "ents", ",", "categories", ")", "\n", "\n", "results", "=", "{", "}", "\n", "for", "category", "in", "entity_labels_stanza", ":", "\n", "            ", "if", "category", "in", "entity_labels_md", ".", "keys", "(", ")", ":", "\n", "                ", "for", "item", "in", "entity_labels_stanza", "[", "category", "]", ":", "\n", "                    ", "if", "item", "in", "entity_labels_md", "[", "category", "]", ":", "\n", "                        ", "try", ":", "\n", "                            ", "results", "[", "category", "]", ".", "append", "(", "item", ")", "\n", "", "except", ":", "\n", "                            ", "results", "[", "category", "]", "=", "[", "item", "]", "\n", "", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.BertNer.forward": [[17, 31], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "bert.BertNer.dropout", "bert.BertNer.classifier", "bert.BertNer.bert", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "[].item"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "valid_ids", "=", "None", ")", ":", "\n", "        ", "sequence_output", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "head_mask", "=", "None", ")", "[", "0", "]", "\n", "batch_size", ",", "max_len", ",", "feat_dim", "=", "sequence_output", ".", "shape", "\n", "valid_output", "=", "torch", ".", "zeros", "(", "batch_size", ",", "max_len", ",", "feat_dim", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "jj", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "max_len", ")", ":", "\n", "                    ", "if", "valid_ids", "[", "i", "]", "[", "j", "]", ".", "item", "(", ")", "==", "1", ":", "\n", "                        ", "jj", "+=", "1", "\n", "valid_output", "[", "i", "]", "[", "jj", "]", "=", "sequence_output", "[", "i", "]", "[", "j", "]", "\n", "", "", "", "sequence_output", "=", "self", ".", "dropout", "(", "valid_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.__init__": [[34, 42], ["bert.Ner.load_model", "bert.Ner.model.to", "bert.Ner.model.eval", "int", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "bert.Ner.label_map.items"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.load_model"], ["    ", "def", "__init__", "(", "self", ",", "model_dir", ":", "str", ")", ":", "\n", "        ", "self", ".", "model", ",", "self", ".", "tokenizer", ",", "self", ".", "model_config", "=", "self", ".", "load_model", "(", "model_dir", ")", "\n", "self", ".", "label_map", "=", "self", ".", "model_config", "[", "\"label_map\"", "]", "\n", "self", ".", "max_seq_length", "=", "self", ".", "model_config", "[", "\"max_seq_length\"", "]", "\n", "self", ".", "label_map", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "self", ".", "label_map", ".", "items", "(", ")", "}", "\n", "self", ".", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.load_model": [[43, 49], ["os.path.join", "json.load", "BertNer.from_pretrained", "pytorch_transformers.BertTokenizer.from_pretrained", "open"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["", "def", "load_model", "(", "self", ",", "model_dir", ":", "str", ",", "model_config", ":", "str", "=", "\"model_config.json\"", ")", ":", "\n", "        ", "model_config", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "model_config", ")", "\n", "model_config", "=", "json", ".", "load", "(", "open", "(", "model_config", ")", ")", "\n", "model", "=", "BertNer", ".", "from_pretrained", "(", "model_dir", ")", "\n", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "model_dir", ",", "do_lower_case", "=", "model_config", "[", "\"do_lower\"", "]", ")", "\n", "return", "model", ",", "tokenizer", ",", "model_config", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.tokenize": [[50, 64], ["nltk.word_tokenize", "enumerate", "bert.Ner.tokenizer.tokenize", "tokens.extend", "range", "len", "valid_positions.append", "valid_positions.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ":", "str", ")", ":", "\n", "        ", "\"\"\" tokenize input\"\"\"", "\n", "words", "=", "word_tokenize", "(", "text", ")", "\n", "tokens", "=", "[", "]", "\n", "valid_positions", "=", "[", "]", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "            ", "token", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "tokens", ".", "extend", "(", "token", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "token", ")", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "valid_positions", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "valid_positions", ".", "append", "(", "0", ")", "\n", "", "", "", "return", "tokens", ",", "valid_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.preprocess": [[65, 89], ["bert.Ner.tokenize", "tokens.insert", "valid_positions.insert", "tokens.append", "valid_positions.append", "range", "bert.Ner.tokenizer.convert_tokens_to_ids", "len", "segment_ids.append", "len", "len", "bert.Ner.append", "input_mask.append", "segment_ids.append", "valid_positions.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.tokenize"], ["", "def", "preprocess", "(", "self", ",", "text", ":", "str", ")", ":", "\n", "        ", "\"\"\" preprocess \"\"\"", "\n", "tokens", ",", "valid_positions", "=", "self", ".", "tokenize", "(", "text", ")", "\n", "\n", "# if len(tokens)> self.max_seq_length:", "\n", "#     tokens = tokens[:self.max_seq_length]", "\n", "\n", "## insert \"[CLS]\"", "\n", "tokens", ".", "insert", "(", "0", ",", "\"[CLS]\"", ")", "\n", "valid_positions", ".", "insert", "(", "0", ",", "1", ")", "\n", "## insert \"[SEP]\"", "\n", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "valid_positions", ".", "append", "(", "1", ")", "\n", "segment_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "            ", "segment_ids", ".", "append", "(", "0", ")", "\n", "", "input_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "while", "len", "(", "input_ids", ")", "<", "self", ".", "max_seq_length", ":", "\n", "            ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "valid_positions", ".", "append", "(", "0", ")", "\n", "", "return", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "valid_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.predict": [[90, 120], ["bert.Ner.preprocess", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.softmax", "torch.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "enumerate", "bert.Ner.pop", "nltk.word_tokenize", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bert.Ner.model", "torch.argmax.detach().cpu().numpy().tolist", "torch.argmax.detach().cpu().numpy().tolist", "values[].item", "len", "len", "zip", "bert.Ner.append", "zip", "torch.argmax.detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "torch.argmax.detach().cpu", "torch.argmax.detach().cpu", "torch.argmax.detach", "torch.argmax.detach"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.bert.Ner.preprocess"], ["", "def", "predict", "(", "self", ",", "text", ":", "str", ")", ":", "\n", "        ", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "valid_ids", "=", "self", ".", "preprocess", "(", "text", ")", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "[", "input_ids", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "input_mask", "=", "torch", ".", "tensor", "(", "[", "input_mask", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "segment_ids", "=", "torch", ".", "tensor", "(", "[", "segment_ids", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "valid_ids", "=", "torch", ".", "tensor", "(", "[", "valid_ids", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "self", ".", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "valid_ids", ")", "\n", "", "logits", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "2", ")", "\n", "logits_label", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "2", ")", "\n", "logits_label", "=", "logits_label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n", "logits_confidence", "=", "[", "values", "[", "label", "]", ".", "item", "(", ")", "for", "values", ",", "label", "in", "zip", "(", "logits", "[", "0", "]", ",", "logits_label", ")", "]", "\n", "\n", "logits", "=", "[", "]", "\n", "pos", "=", "0", "\n", "for", "index", ",", "mask", "in", "enumerate", "(", "valid_ids", "[", "0", "]", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "mask", "==", "1", ":", "\n", "                ", "logits", ".", "append", "(", "(", "logits_label", "[", "index", "-", "pos", "]", ",", "logits_confidence", "[", "index", "-", "pos", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "pos", "+=", "1", "\n", "", "", "logits", ".", "pop", "(", ")", "\n", "\n", "labels", "=", "[", "(", "self", ".", "label_map", "[", "label", "]", ",", "confidence", ")", "for", "label", ",", "confidence", "in", "logits", "]", "\n", "words", "=", "word_tokenize", "(", "text", ")", "\n", "assert", "len", "(", "labels", ")", "==", "len", "(", "words", ")", "\n", "output", "=", "[", "{", "\"word\"", ":", "word", ",", "\"tag\"", ":", "label", ",", "\"confidence\"", ":", "confidence", "}", "for", "word", ",", "(", "label", ",", "confidence", ")", "in", "zip", "(", "words", ",", "labels", ")", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.sampleByExtension": [[24, 69], ["extension_files.append", "range", "round", "random.randrange", "outputs.append", "[].lower", "extension.append", "len", "len", "NLP_NER.EntityRecognition.NER.csv_preprocess", "NLP_NER.EntityRecognition.NER.get_csv_ner_from_models", "NLP_NER.EntityRecognition.NER.get_text_values", "NLP_NER.EntityRecognition.NER.get_ner_from_models", "NLP_NER.EntityRecognition.NER.get_attachment_texts", "range", "len", "NLP_NER.EntityRecognition.NER.get_ner_from_models", "print"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.csv_preprocess", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_csv_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_text_values", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_attachment_texts", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print"], ["    ", "@", "staticmethod", "\n", "def", "sampleByExtension", "(", "files", ",", "extensions", ",", "models", ")", ":", "\n", "        ", "for", "folder", "in", "files", ":", "\n", "            ", "extension_files", "=", "[", "]", "\n", "\n", "for", "ext", "in", "extensions", ":", "\n", "                ", "extension", "=", "[", "]", "\n", "for", "file", "in", "folder", ":", "\n", "                    ", "if", "file", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", ".", "lower", "(", ")", "in", "ext", ":", "\n", "                        ", "extension", ".", "append", "(", "file", ")", "\n", "", "", "extension_files", ".", "append", "(", "extension", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "sorted_files", "in", "extension_files", ":", "\n", "                ", "for", "i", "in", "range", "(", "round", "(", "len", "(", "sorted_files", ")", "*", "SamplingUtils", ".", "constant", ")", ")", ":", "\n", "\n", "                    ", "NLP_NER", "=", "{", "}", "\n", "index", "=", "random", ".", "randrange", "(", "len", "(", "sorted_files", ")", "-", "1", ")", "\n", "\n", "if", "(", "'text-analysis'", "in", "sorted_files", "[", "index", "]", "[", "\"Specific-Metadata\"", "]", ")", ":", "\n", "                        ", "doc_0", "=", "{", "}", "\n", "doc_0", "[", "\"filename\"", "]", "=", "sorted_files", "[", "index", "]", "[", "\"General-Metadata\"", "]", "[", "\"FILENAME\"", "]", "\n", "\n", "if", "(", "sorted_files", "[", "index", "]", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"csv\"", ")", ":", "# only CSV | doesn't apply to XLSX", "\n", "                            ", "text", "=", "NER", ".", "csv_preprocess", "(", "sorted_files", "[", "index", "]", ")", "\n", "NLP_NER", "[", "\"doc-0\"", "]", "=", "NER", ".", "get_csv_ner_from_models", "(", "text", ",", "doc_0", ",", "models", ")", "\n", "", "else", ":", "\n", "                            ", "text", "=", "NER", ".", "get_text_values", "(", "sorted_files", "[", "index", "]", ")", "\n", "NLP_NER", "[", "\"doc-0\"", "]", "=", "NER", ".", "get_ner_from_models", "(", "text", ",", "doc_0", ",", "models", ")", "\n", "\n", "", "if", "(", "sorted_files", "[", "index", "]", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"msg\"", ")", ":", "\n", "\n", "                            ", "attachment_texts", "=", "NER", ".", "get_attachment_texts", "(", "sorted_files", "[", "index", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "attachment_texts", ")", ")", ":", "\n", "                                ", "attachment", "=", "{", "}", "\n", "attachment", "[", "\"filename\"", "]", "=", "attachment_texts", "[", "i", "]", "[", "\"filename\"", "]", "\n", "attachment_text", "=", "attachment_texts", "[", "i", "]", "[", "\"text\"", "]", "\n", "NLP_NER", "[", "f\"doc-{i + 1}\"", "]", "=", "NER", ".", "get_ner_from_models", "(", "attachment_text", ",", "attachment", ",", "models", ")", "\n", "\n", "", "", "elif", "(", "sorted_files", "[", "index", "]", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"zip\"", ")", ":", "\n", "                            ", "print", "(", ")", "\n", "\n", "", "", "outputs", ".", "append", "(", "NLP_NER", ")", "\n", "\n", "", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.sampleByFileLength": [[71, 123], ["all_files.append", "all_files.append", "all_files.append", "range", "file_size_below_100000.append", "round", "random.randrange", "outputs.append", "file_size_below_1000000.append", "file_size_above.append", "len", "len", "NLP_NER.EntityRecognition.NER.csv_preprocess", "NLP_NER.EntityRecognition.NER.get_csv_ner_from_models", "NLP_NER.EntityRecognition.NER.get_text_values", "NLP_NER.EntityRecognition.NER.get_ner_from_models", "NLP_NER.EntityRecognition.NER.get_attachment_texts", "range", "len", "NLP_NER.EntityRecognition.NER.get_ner_from_models", "print"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.csv_preprocess", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_csv_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_text_values", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_attachment_texts", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.get_ner_from_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print"], ["", "@", "staticmethod", "\n", "def", "sampleByFileLength", "(", "object", ",", "models", ")", ":", "\n", "\n", "        ", "file_size_below_100000", "=", "[", "]", "\n", "file_size_below_1000000", "=", "[", "]", "\n", "file_size_above", "=", "[", "]", "\n", "all_files", "=", "[", "]", "\n", "for", "file", "in", "object", "[", "\"docs\"", "]", ":", "\n", "            ", "file_length", "=", "file", "[", "\"General-Metadata\"", "]", "[", "\"FILELENGTH\"", "]", "\n", "if", "file_length", "<", "100000", ":", "\n", "                ", "file_size_below_100000", ".", "append", "(", "file", ")", "\n", "", "elif", "file_length", "<", "1000000", ":", "\n", "                ", "file_size_below_1000000", ".", "append", "(", "file", ")", "\n", "", "else", ":", "\n", "                ", "file_size_above", ".", "append", "(", "file", ")", "\n", "\n", "", "", "outputs", "=", "[", "]", "\n", "all_files", ".", "append", "(", "file_size_below_100000", ")", "\n", "all_files", ".", "append", "(", "file_size_below_1000000", ")", "\n", "all_files", ".", "append", "(", "file_size_above", ")", "\n", "\n", "for", "file_list", "in", "all_files", ":", "\n", "            ", "for", "i", "in", "range", "(", "round", "(", "len", "(", "file_list", ")", "*", "SamplingUtils", ".", "constant", ")", ")", ":", "\n", "                ", "NLP_NER", "=", "{", "}", "\n", "index", "=", "random", ".", "randrange", "(", "len", "(", "file_list", ")", "-", "1", ")", "\n", "\n", "if", "(", "'text-analysis'", "in", "file_list", "[", "index", "]", "[", "\"Specific-Metadata\"", "]", ")", ":", "\n", "                    ", "doc_0", "=", "{", "}", "\n", "doc_0", "[", "\"filename\"", "]", "=", "file_list", "[", "index", "]", "[", "\"General-Metadata\"", "]", "[", "\"FILENAME\"", "]", "\n", "\n", "if", "(", "file_list", "[", "index", "]", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"csv\"", ")", ":", "\n", "                        ", "text", "=", "NER", ".", "csv_preprocess", "(", "file_list", "[", "index", "]", ")", "\n", "NLP_NER", "[", "\"doc-0\"", "]", "=", "NER", ".", "get_csv_ner_from_models", "(", "text", ",", "doc_0", ",", "models", ")", "\n", "", "else", ":", "\n", "                        ", "text", "=", "NER", ".", "get_text_values", "(", "file_list", "[", "index", "]", ")", "\n", "NLP_NER", "[", "\"doc-0\"", "]", "=", "NER", ".", "get_ner_from_models", "(", "text", ",", "doc_0", ",", "models", ")", "\n", "\n", "", "if", "(", "file_list", "[", "index", "]", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"msg\"", ")", ":", "\n", "\n", "                        ", "attachment_texts", "=", "NER", ".", "get_attachment_texts", "(", "file_list", "[", "index", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "attachment_texts", ")", ")", ":", "\n", "                            ", "attachment", "=", "{", "}", "\n", "attachment", "[", "\"filename\"", "]", "=", "attachment_texts", "[", "i", "]", "[", "\"filename\"", "]", "\n", "attachment_text", "=", "attachment_texts", "[", "i", "]", "[", "\"text\"", "]", "\n", "NLP_NER", "[", "f\"doc-{i + 1}\"", "]", "=", "NER", ".", "get_ner_from_models", "(", "attachment_text", ",", "attachment", ",", "\n", "models", ")", "\n", "\n", "", "", "elif", "(", "file_list", "[", "index", "]", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", "==", "\"zip\"", ")", ":", "\n", "                        ", "print", "(", ")", "\n", "", "", "outputs", ".", "append", "(", "NLP_NER", ")", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_length": [[125, 145], ["all_files.append", "all_files.append", "all_files.append", "range", "file_list_by_len.append", "round", "random.randrange", "files.append", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_samples_by_length", "(", "docs", ",", "constant", ")", ":", "\n", "        ", "file_list_by_len", "=", "[", "]", "\n", "file_size_below_100000", "=", "[", "file", "for", "file", "in", "docs", "if", "file", "[", "\"General-Metadata\"", "]", "[", "\"FILELENGTH\"", "]", "<", "100000", "]", "\n", "file_size_below_1000000", "=", "[", "file", "for", "file", "in", "docs", "if", "\n", "file", "[", "\"General-Metadata\"", "]", "[", "\"FILELENGTH\"", "]", "<", "1000000", "and", "file", "[", "\"General-Metadata\"", "]", "[", "\n", "\"FILELENGTH\"", "]", ">=", "100000", "]", "\n", "file_size_above", "=", "[", "file", "for", "file", "in", "docs", "if", "file", "[", "\"General-Metadata\"", "]", "[", "\"FILELENGTH\"", "]", ">=", "1000000", "]", "\n", "all_files", "=", "[", "]", "\n", "all_files", ".", "append", "(", "file_size_below_100000", ")", "\n", "all_files", ".", "append", "(", "file_size_below_1000000", ")", "\n", "all_files", ".", "append", "(", "file_size_above", ")", "\n", "\n", "for", "file_list", "in", "all_files", ":", "\n", "            ", "files", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "round", "(", "len", "(", "file_list", ")", "*", "constant", ")", ")", ":", "\n", "                ", "index", "=", "random", ".", "randrange", "(", "len", "(", "file_list", ")", "-", "1", ")", "\n", "files", ".", "append", "(", "file_list", "[", "index", "]", ")", "\n", "", "file_list_by_len", ".", "append", "(", "files", ")", "\n", "", "return", "file_list_by_len", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_doc_Structure": [[147, 150], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_samples_by_doc_Structure", "(", "docs", ",", "constant", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_extension": [[152, 167], ["files_by_extension.append", "range", "file_list.append", "round", "random.randrange", "ext_list.append", "[].lower", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_samples_by_extension", "(", "docs", ",", "constant", ",", "extensions", ")", ":", "\n", "        ", "file_list", "=", "[", "]", "\n", "files_by_extension", "=", "[", "]", "\n", "for", "ext", "in", "extensions", ":", "\n", "            ", "files", "=", "[", "i", "for", "i", "in", "docs", "if", "i", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", ".", "lower", "(", ")", "==", "ext", "]", "\n", "files_by_extension", ".", "append", "(", "files", ")", "\n", "\n", "", "for", "ext", "in", "files_by_extension", ":", "\n", "            ", "ext_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "round", "(", "len", "(", "ext", ")", "*", "constant", ")", ")", ":", "\n", "                ", "index", "=", "random", ".", "randrange", "(", "len", "(", "ext", ")", "-", "1", ")", "\n", "ext_list", ".", "append", "(", "ext", "[", "index", "]", ")", "\n", "", "file_list", ".", "append", "(", "ext_list", ")", "\n", "", "return", "file_list", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_folders_and_extensions": [[169, 183], ["print", "paths.append", "[].lower", "extensions.append", "[].lower"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print"], ["", "@", "staticmethod", "\n", "def", "get_folders_and_extensions", "(", "object", ")", ":", "\n", "        ", "n", "=", "0", "\n", "paths", "=", "[", "]", "\n", "extensions", "=", "[", "]", "\n", "for", "file", "in", "object", "[", "\"docs\"", "]", ":", "\n", "            ", "n", "+=", "1", "\n", "if", "file", "[", "\"General-Metadata\"", "]", "[", "\"PARENT\"", "]", "not", "in", "paths", "and", "file", "[", "\"General-Metadata\"", "]", "[", "\"PARENT\"", "]", ":", "\n", "                ", "paths", ".", "append", "(", "file", "[", "\"General-Metadata\"", "]", "[", "\"PARENT\"", "]", ")", "\n", "", "if", "file", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", ".", "lower", "(", ")", "not", "in", "extensions", ":", "\n", "                ", "extensions", ".", "append", "(", "file", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", ".", "lower", "(", ")", ")", "\n", "", "", "print", "(", "*", "extensions", ")", "\n", "\n", "return", "paths", ",", "extensions", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_files_by_folder": [[185, 197], ["all_files.append", "len", "folder.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_files_by_folder", "(", "file_paths", ",", "object", ")", ":", "\n", "        ", "n", "=", "0", "\n", "all_files", "=", "[", "]", "\n", "for", "path", "in", "file_paths", ":", "\n", "            ", "folder", "=", "[", "]", "\n", "for", "x", "in", "object", "[", "\"docs\"", "]", ":", "\n", "                ", "if", "path", "in", "x", "[", "\"General-Metadata\"", "]", "[", "\"PARENT\"", "]", ":", "\n", "                    ", "folder", ".", "append", "(", "x", ")", "\n", "", "", "all_files", ".", "append", "(", "folder", ")", "\n", "n", "+=", "len", "(", "folder", ")", "\n", "", "return", "all_files", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.main_sampling": [[200, 226], ["NLP_NER.EntityRecognition.NER.load_models", "print", "print", "MEL.CouchDB.queryDocs", "bool", "bool", "bool", "Sampling.get_folders_and_extensions", "Sampling.get_files_by_folder", "print", "Sampling.sampleByExtension", "print", "Sampling.sampleByFileLength", "print", "Sampling.sampleByDocStructure", "print"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.load_models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_folders_and_extensions", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_files_by_folder", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.sampleByExtension", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.sampleByFileLength", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print"], ["", "", "def", "main_sampling", "(", "_models", "=", "[", "NERUtils", ".", "stanford_class3_name", "]", ",", "_dataset_names", "=", "[", "]", ")", ":", "\n", "    ", "NER", ".", "load_models", "(", "_models", ")", "\n", "\n", "selector", "=", "{", "}", "\n", "fields", "=", "[", "\"_id\"", ",", "\"General-Metadata\"", ",", "\"Specific-Metadata\"", "]", "\n", "\n", "for", "dataset", "in", "SamplingUtils", ".", "datasets", ":", "\n", "        ", "if", "(", "_dataset_names", "and", "(", "dataset", "[", "\"name\"", "]", "not", "in", "_dataset_names", ")", ")", ":", "\n", "            ", "continue", "# skip...", "\n", "", "print", "(", "f\"@dataset={dataset['name']}\"", ")", "\n", "DB", "=", "dataset", "[", "\"CouchDB-db\"", "]", "\n", "SamplingUtils", ".", "constant", "=", "dataset", "[", "\"sampling_constant\"", "]", "\n", "print", "(", "f\"Querying all docs of database '{DB}'...\"", ")", "\n", "r", "=", "MEL", ".", "CouchDB", ".", "queryDocs", "(", "DB", ",", "selector", ",", "False", ",", "fields", ")", "\n", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_extension\"", "]", ")", ":", "\n", "            ", "file_paths", ",", "extensions", "=", "Sampling", ".", "get_folders_and_extensions", "(", "r", ")", "\n", "file_lists", "=", "Sampling", ".", "get_files_by_folder", "(", "file_paths", ",", "r", ")", "\n", "print", "(", "file_lists", ")", "\n", "ext_results", "=", "Sampling", ".", "sampleByExtension", "(", "file_lists", ",", "extensions", ",", "_models", ")", "\n", "print", "(", "ext_results", ")", "\n", "", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_file_length\"", "]", ")", ":", "\n", "            ", "len_results", "=", "Sampling", ".", "sampleByFileLength", "(", "r", ",", "_models", ")", "\n", "print", "(", "len_results", ")", "\n", "", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_doc_structure\"", "]", ")", ":", "\n", "            ", "structure_results", "=", "Sampling", ".", "sampleByDocStructure", "(", ")", "\n", "print", "(", "structure_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.get_samples_not_in_ner_db": [[228, 273], ["MEL.CouchDB.queryDocs", "bool", "bool", "bool", "MEL.CouchDB.queryDocs", "Sampling.get_folders_and_extensions", "Sampling.get_samples_by_extension", "Sampling.get_samples_by_length", "Sampling.get_samples_by_doc_Structure", "DB.split", "docs.append"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_folders_and_extensions", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_extension", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_length", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_doc_Structure"], ["", "", "", "def", "get_samples_not_in_ner_db", "(", "_models", ",", "_datasets", "=", "[", "]", ")", ":", "\n", "    ", "selector", "=", "{", "}", "\n", "fields", "=", "[", "\"_id\"", ",", "\"_rev\"", ",", "\"General-Metadata\"", ",", "\"Use-Case$Folder\"", "]", "\n", "fields_ner", "=", "[", "\"_id\"", ",", "\"_rev\"", ",", "\"General-Metadata\"", ",", "\"NLP-NER\"", "]", "\n", "datasets", "=", "{", "}", "\n", "\n", "for", "dataset", "in", "SamplingUtils", ".", "datasets", ":", "\n", "        ", "name", "=", "dataset", "[", "\"name\"", "]", "\n", "if", "(", "_datasets", ")", "and", "(", "name", "not", "in", "_datasets", ")", ":", "# skipping dataset", "\n", "            ", "continue", "\n", "", "DB", "=", "dataset", "[", "\"CouchDB-db\"", "]", "\n", "r", "=", "MEL", ".", "CouchDB", ".", "queryDocs", "(", "DB", ",", "selector", ",", "False", ",", "fields", ")", "\n", "\n", "# change name according to the respective ner database. changes in the sampling config file", "\n", "DB_ner", "=", "\"/nlp-ner-\"", "+", "DB", ".", "split", "(", "\"/\"", ")", "[", "1", "]", "\n", "\n", "r_ner", "=", "MEL", ".", "CouchDB", ".", "queryDocs", "(", "DB_ner", ",", "selector", ",", "False", ",", "fields_ner", ")", "[", "\"docs\"", "]", "\n", "r_ner_ids", "=", "[", "doc", "[", "\"General-Metadata\"", "]", "[", "\"ABSOLUTEPATH\"", "]", "for", "doc", "in", "r_ner", "]", "\n", "\n", "docs", "=", "[", "doc", "for", "doc", "in", "r", "[", "\"docs\"", "]", "if", "doc", "[", "\"General-Metadata\"", "]", "[", "\"ABSOLUTEPATH\"", "]", "not", "in", "r_ner_ids", "]", "\n", "docs_in_ner", "=", "[", "doc", "for", "doc", "in", "r_ner", "if", "doc", "[", "\"General-Metadata\"", "]", "[", "\"ABSOLUTEPATH\"", "]", "in", "r_ner_ids", "]", "\n", "for", "doc", "in", "docs_in_ner", ":", "\n", "            ", "for", "model", "in", "_models", ":", "\n", "# if at leaset one model in the models is not processed, the document is considered.", "\n", "                ", "if", "model", "not", "in", "doc", "[", "\"NLP-NER\"", "]", ":", "\n", "                    ", "docs", ".", "append", "(", "doc", ")", "\n", "break", "\n", "\n", "", "", "", "datasets", "[", "name", "]", "=", "{", "}", "\n", "samples", "=", "{", "}", "\n", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_extension\"", "]", ")", ":", "\n", "            ", "file_paths", ",", "extensions", "=", "Sampling", ".", "get_folders_and_extensions", "(", "r", ")", "\n", "samples", "[", "\"by_extension\"", "]", "=", "Sampling", ".", "get_samples_by_extension", "(", "docs", ",", "dataset", "[", "\"sampling_constant\"", "]", ",", "extensions", ")", "\n", "\n", "", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_file_length\"", "]", ")", ":", "\n", "            ", "len_samples", "=", "Sampling", ".", "get_samples_by_length", "(", "docs", ",", "dataset", "[", "\"sampling_constant\"", "]", ")", "\n", "samples", "[", "\"by_length\"", "]", "=", "len_samples", "\n", "\n", "", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_doc_structure\"", "]", ")", ":", "\n", "            ", "doc_structure_samples", "=", "Sampling", ".", "get_samples_by_doc_Structure", "(", "docs", ",", "dataset", "[", "\"sampling_constant\"", "]", ")", "\n", "samples", "[", "\"by_doc_structure\"", "]", "=", "doc_structure_samples", "\n", "\n", "", "datasets", "[", "name", "]", "=", "samples", "\n", "\n", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.get_samples": [[275, 302], ["MEL.CouchDB.queryDocs", "bool", "bool", "bool", "Sampling.get_folders_and_extensions", "Sampling.get_samples_by_extension", "Sampling.get_samples_by_length", "Sampling.get_samples_by_doc_Structure"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_folders_and_extensions", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_extension", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_length", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.Sampling.get_samples_by_doc_Structure"], ["", "def", "get_samples", "(", "_datasets", "=", "[", "]", ")", ":", "\n", "    ", "selector", "=", "{", "}", "\n", "fields", "=", "[", "\"_id\"", ",", "\"_rev\"", ",", "\"General-Metadata\"", ",", "\"Use-Case$Folder\"", "]", "\n", "datasets", "=", "{", "}", "\n", "for", "dataset", "in", "SamplingUtils", ".", "datasets", ":", "\n", "        ", "if", "(", "_datasets", ")", "and", "(", "dataset", "[", "\"name\"", "]", "not", "in", "_datasets", ")", ":", "# skipping dataset", "\n", "            ", "continue", "\n", "", "DB", "=", "dataset", "[", "\"CouchDB-db\"", "]", "\n", "r", "=", "MEL", ".", "CouchDB", ".", "queryDocs", "(", "DB", ",", "selector", ",", "False", ",", "fields", ")", "\n", "\n", "datasets", "[", "DB", "]", "=", "{", "}", "\n", "samples", "=", "{", "}", "\n", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_extension\"", "]", ")", ":", "\n", "            ", "file_paths", ",", "extensions", "=", "Sampling", ".", "get_folders_and_extensions", "(", "r", ")", "\n", "samples", "[", "\"by_extension\"", "]", "=", "Sampling", ".", "get_samples_by_extension", "(", "r", "[", "\"docs\"", "]", ",", "dataset", "[", "\"sampling_constant\"", "]", ",", "\n", "extensions", ")", "\n", "\n", "", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_file_length\"", "]", ")", ":", "\n", "            ", "len_samples", "=", "Sampling", ".", "get_samples_by_length", "(", "r", "[", "\"docs\"", "]", ",", "dataset", "[", "\"sampling_constant\"", "]", ")", "\n", "samples", "[", "\"by_length\"", "]", "=", "len_samples", "\n", "\n", "", "if", "bool", "(", "dataset", "[", "\"sampling\"", "]", "[", "\"by_doc_structure\"", "]", ")", ":", "\n", "            ", "doc_structure_samples", "=", "Sampling", ".", "get_samples_by_doc_Structure", "(", "r", "[", "\"docs\"", "]", ",", "dataset", "[", "\"sampling_constant\"", "]", ")", "\n", "samples", "[", "\"by_doc_structure\"", "]", "=", "doc_structure_samples", "\n", "\n", "", "datasets", "[", "DB", "]", "=", "samples", "\n", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.__init__.load_models": [[19, 21], ["NLP_NER.NER.load_models"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.load_models"], ["def", "load_models", "(", "models", "=", "[", "_NLP_NER", ".", "NERUtils", ".", "stanza_name", "]", ")", ":", "# default: stanza", "\n", "    ", "_NLP_NER", ".", "NER", ".", "load_models", "(", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.__init__.NER_main": [[23, 44], ["MEL.Utils.output", "NLP_NER.NER.ner_for_all_files", "MEL.Utils.output", "json.dumps", "json.dumps"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.EntityRecognition.NER.ner_for_all_files", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], ["", "def", "NER_main", "(", "models", "=", "[", "_NLP_NER", ".", "NERUtils", ".", "stanford_class3_name", "]", ",", "docs", "=", "{", "}", ")", ":", "\n", "    ", "import", "MEL", "# prevent circular referencing from MEL", "\n", "''' --------------------------------------- NER ---------------------------------------\n    _models = [\n        _NLP_NER.NERUtils.stanford_class3_name,      _NLP_NER.NERUtils.stanford_class4_name, _NLP_NER.NERUtils.stanford_class7_name,\n        _NLP_NER.NERUtils.spacy_sm_name,             _NLP_NER.NERUtils.spacy_md_name,        _NLP_NER.NERUtils.spacy_lg_name,\n        _NLP_NER.NERUtils.stanza_name,               _NLP_NER.NERUtils.nltk_name,            _NLP_NER.NERUtils.bert_name,\n        _NLP_NER.NERUtils.flair_name,                _NLP_NER.NERUtils.flair_ontonotes_name, _NLP_NER.NERUtils.flair_fast_name,\n        _NLP_NER.NERUtils.flair_fast_ontonotes_name, _NLP_NER.NERUtils.flair_pooled_name,\n        _NLP_NER.NERUtils.deeppavlov_onto_name,      _NLP_NER.NERUtils.deeppavlov_onto_bert_name,\n        _NLP_NER.NERUtils.deeppavlov_conll2003_name, _NLP_NER.NERUtils.deeppavlov_conll2003_bert_name,\n        _NLP_NER.NERUtils.allennlp_ner_name,         _NLP_NER.NERUtils.allennlp_finegrained_ner_name,\n        _NLP_NER.NERUtils.polyglot_name\n    ]\n    _models = [_NLP_NER.NERUtils.spacy_sm_name]\n    '''", "\n", "r", "=", "docs", "if", "(", "\"docs\"", "in", "docs", ")", "else", "{", "\"docs\"", ":", "[", "docs", "]", "}", "# converts input into proper expected structure: r[\"docs\"]", "\n", "MEL", ".", "Utils", ".", "output", "(", "f\"{json.dumps(r, indent=4)}\"", ",", "_print", "=", "False", ")", "\n", "output", "=", "_NLP_NER", ".", "NER", ".", "ner_for_all_files", "(", "r", ",", "models", ")", "\n", "MEL", ".", "Utils", ".", "output", "(", "f\"{json.dumps(output, indent=4)}\"", ",", "_print", "=", "False", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.__init__.sampling_main": [[46, 49], ["Sampling.main_sampling"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.main_sampling"], ["", "def", "sampling_main", "(", "models", "=", "[", "_NLP_NER", ".", "NERUtils", ".", "stanford_class3_name", "]", ",", "dataset_names", "=", "[", "]", ")", ":", "\n", "    ", "import", "NLP_NER", ".", "Sampling", "as", "Sampling", "# prevent circular referencing from MEL", "\n", "Sampling", ".", "main_sampling", "(", "models", ",", "dataset_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.__init__.sampling_get_samples": [[51, 54], ["Sampling.get_samples"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.get_samples"], ["", "def", "sampling_get_samples", "(", ")", ":", "\n", "    ", "import", "NLP_NER", ".", "Sampling", "as", "Sampling", "# prevent circular referencing from MEL", "\n", "return", "Sampling", ".", "get_samples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.__init__.sampling_get_samples_not_in_ner_db": [[56, 60], ["Sampling.get_samples_not_in_ner_db"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.Sampling.get_samples_not_in_ner_db"], ["", "def", "sampling_get_samples_not_in_ner_db", "(", "datasets", "=", "[", "]", ",", "models", "=", "[", "_NLP_NER", ".", "NERUtils", ".", "stanza_name", "]", ")", ":", "# default: stanza", "\n", "    ", "import", "NLP_NER", ".", "Sampling", "as", "Sampling", "# prevent circular referencing from MEL", "\n", "# to get samples which have not been previously processed for the specified ner models", "\n", "return", "Sampling", ".", "get_samples_not_in_ner_db", "(", "_models", "=", "models", ",", "_datasets", "=", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.load": [[58, 96], ["MEL.AssociatedMetadata.load", "DoEE_Species.CAsAndRPs.load.setUpperBoundFor"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], ["@", "staticmethod", "\n", "def", "load", "(", ")", ":", "\n", "        ", "'''\n        OBSERVATIONS:\n        1) It seems that the lexicographic sorting in Excel works differently as in Python.\n        Excel:\n            1378-conservation-advice.pdf\n            13792-conservation-advice-16122016.pdf\n            137-conservation-advice.pdf\n        Python:\n            137-conservation-advice.pdf\n            1378-conservation-advice.pdf\n            13792-conservation-advice-16122016.pdf\n        2) Due that the lexicographic comparison between strings is not giving correct results,\n        the \"CA\" data sets were sorted based on the second field and not based on the filename.\n        3) The upper bound list calculation applies only to the \"RP_ps\" data set.\n        '''", "\n", "# Set the upper bound for a data set:", "\n", "def", "setUpperBoundFor", "(", "key", ")", ":", "\n", "            ", "a", "=", "CAsAndRPs", ".", "DATA", "[", "\"Specific-Metadata\"", "]", "[", "\"workbooks\"", "]", "[", "CAsAndRPs", ".", "BASE", "[", "key", "]", "[", "\"wb\"", "]", "]", "\n", "p", "=", "-", "1", "\n", "if", "(", "key", "==", "\"RP_ps\"", ")", ":", "\n", "# Looks for '~None' in the LAST FIELD of the data set:", "\n", "                ", "p", "=", "MEL", ".", "AssociatedMetadata", ".", "binarySearch", "(", "a", ",", "CAsAndRPs", ".", "BASE", "[", "\"NONE\"", "]", ",", "\"str\"", ",", "len", "(", "a", "[", "0", "]", ")", "-", "1", ",", "1", ",", "len", "(", "a", ")", "-", "1", ")", "\n", "MEL", ".", "Utils", ".", "output", "(", "f\"key={key}; upper-bound={p}\"", ",", "_print", "=", "False", ")", "\n", "# if found: sets the proper upper bound (ignore all \"Blank\" values)", "\n", "# default value: the length of the list.", "\n", "", "CAsAndRPs", ".", "BASE", "[", "key", "]", "[", "\"upper-bound\"", "]", "=", "(", "p", "-", "1", ")", "if", "(", "p", "!=", "-", "1", ")", "else", "(", "len", "(", "a", ")", "-", "1", ")", "\n", "\n", "", "CAsAndRPs", ".", "RESULT", "=", "[", "]", "# The RESULT array is cleared (reset).", "\n", "if", "(", "not", "CAsAndRPs", ".", "LOADED", ")", ":", "# checks if the file is already loaded.", "\n", "            ", "CAsAndRPs", ".", "DATA", "=", "MEL", ".", "AssociatedMetadata", ".", "load", "(", "\"DoEE_Species_CAsAndRPs\"", ")", "\n", "setUpperBoundFor", "(", "\"CA_ps\"", ")", "\n", "setUpperBoundFor", "(", "\"CA_tc\"", ")", "\n", "setUpperBoundFor", "(", "\"RP_ps\"", ")", "\n", "setUpperBoundFor", "(", "\"RP_tc\"", ")", "\n", "MEL", ".", "Utils", ".", "output", "(", "json", ".", "dumps", "(", "CAsAndRPs", ".", "BASE", ",", "indent", "=", "4", ")", ",", "_print", "=", "False", ")", "\n", "CAsAndRPs", ".", "LOADED", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.find": [[99, 116], ["MEL.Utils.output", "MEL.AssociatedMetadata.binarySearch", "MEL.AssociatedMetadata.simpleSearch", "MEL.AssociatedMetadata.simpleSearch", "MEL.Utils.output", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.binarySearch", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.simpleSearch", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.simpleSearch", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], ["", "", "@", "staticmethod", "\n", "def", "find", "(", "dataset", ",", "x", ",", "else_x", "=", "\"\"", ")", ":", "\n", "        ", "a", "=", "CAsAndRPs", ".", "DATA", "[", "\"Specific-Metadata\"", "]", "[", "\"workbooks\"", "]", "[", "CAsAndRPs", ".", "BASE", "[", "dataset", "]", "[", "\"wb\"", "]", "]", "\n", "# Sorting field: CA=(second)|(int), RP=(last)|(str)", "\n", "i", "=", "(", "len", "(", "a", "[", "0", "]", ")", "-", "1", ")", "if", "(", "dataset", "[", ":", "2", "]", "==", "\"RP\"", ")", "else", "1", "# index", "\n", "d", "=", "\"str\"", "if", "(", "dataset", "[", ":", "2", "]", "==", "\"RP\"", ")", "else", "\"int\"", "# data type", "\n", "u", "=", "CAsAndRPs", ".", "BASE", "[", "dataset", "]", "[", "\"upper-bound\"", "]", "\n", "p", "=", "MEL", ".", "AssociatedMetadata", ".", "binarySearch", "(", "a", ",", "x", ",", "d", ",", "i", ",", "1", ",", "u", ")", "if", "(", "dataset", "!=", "\"RP_ps\"", ")", "else", "MEL", ".", "AssociatedMetadata", ".", "simpleSearch", "(", "a", ",", "x", ",", "d", ",", "i", ",", "1", ",", "u", ",", "\"++\"", ")", "\n", "if", "(", "(", "dataset", "==", "\"CA_ps\"", ")", "and", "(", "p", "==", "-", "1", ")", ")", ":", "\n", "            ", "''' For 91 entries in *CA_ps*, the filename ID prefix doesn't match with the *listed_id* field.\n            Therefore, we proceed to perform a simple search based on the filename field (d=\"str\", i=5),\n            in order to retrieve the entries from the spreadsheet. '''", "\n", "p", "=", "MEL", ".", "AssociatedMetadata", ".", "simpleSearch", "(", "a", ",", "else_x", ",", "\"str\"", ",", "5", ",", "1", ",", "u", ",", "\"++\"", ")", "\n", "MEL", ".", "Utils", ".", "output", "(", "f\"dataset={dataset}; value={else_x}; position={p}\"", ",", "_print", "=", "False", ")", "\n", "", "MEL", ".", "Utils", ".", "output", "(", "f\"dataset={dataset}; value={x}; position={p}\"", ",", "_print", "=", "False", ")", "\n", "return", "(", "a", ",", "p", ")", "if", "(", "p", "!=", "-", "1", ")", "else", "(", "[", "]", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.getCA": [[119, 157], ["int", "DoEE_Species.CAsAndRPs.find", "MEL.Utils.output", "x.split", "[].strip", "[].strip", "[].strip", "json.dumps", "CAsAndRPs.RESULT.append", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "DoEE_Species.CAsAndRPs.WikiData_getSpeciesEntityURI", "DoEE_Species.CAsAndRPs.WikiData_getConservationStatusEntityURI", "len", "[].strip", "[].strip"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.find", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.WikiData_getSpeciesEntityURI", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.WikiData_getConservationStatusEntityURI"], ["", "@", "staticmethod", "\n", "def", "getCA", "(", "dataset", ",", "x", ")", ":", "\n", "        ", "listed_id", "=", "int", "(", "x", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", "# gets the \"listed_id\" number from the filename.", "\n", "a", ",", "p", "=", "CAsAndRPs", ".", "find", "(", "dataset", ",", "listed_id", ",", "x", ")", "# For *CA_ps*, if not found then tries to search with the filename.", "\n", "if", "(", "p", "!=", "-", "1", ")", ":", "\n", "# traverse the list of associated data: multiple rows.", "\n", "            ", "field_3_name", "=", "\"Sci_Name\"", "if", "(", "dataset", "[", "3", ":", "]", "==", "\"ps\"", ")", "else", "\"Status\"", "\n", "asset_type", "=", "\"\"", "\n", "field_3_value", "=", "\"\"", "\n", "ref_type", "=", "\"\"", "\n", "data", "=", "{", "}", "\n", "while", "True", ":", "\n", "                ", "if", "(", "(", "asset_type", "!=", "a", "[", "p", "]", "[", "0", "]", ".", "strip", "(", ")", ")", "or", "(", "field_3_value", "!=", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", ")", "or", "(", "ref_type", "!=", "a", "[", "p", "]", "[", "3", "]", ".", "strip", "(", ")", ")", ")", ":", "# only when at least one value is different", "\n", "                    ", "data", "=", "{", "\n", "\"asset_type\"", ":", "a", "[", "p", "]", "[", "0", "]", ".", "strip", "(", ")", ",", "\n", "\"listed_id\"", ":", "a", "[", "p", "]", "[", "1", "]", ",", "\n", "field_3_name", ":", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", ",", "\n", "\"ref_type\"", ":", "a", "[", "p", "]", "[", "3", "]", ".", "strip", "(", ")", ",", "\n", "\"url\"", ":", "a", "[", "p", "]", "[", "4", "]", ".", "strip", "(", ")", ",", "\n", "\"file_name\"", ":", "a", "[", "p", "]", "[", "5", "]", ".", "strip", "(", ")", ",", "\n", "\"Row_Number_in_Spreadsheet\"", ":", "(", "p", "+", "1", ")", "\n", "}", "\n", "if", "(", "field_3_name", "==", "\"Sci_Name\"", ")", ":", "\n", "                        ", "data", "[", "\"Species_WikiData_Entity_URI\"", "]", "=", "CAsAndRPs", ".", "WikiData_getSpeciesEntityURI", "(", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", ")", "\n", "", "if", "(", "field_3_name", "==", "\"Status\"", ")", ":", "\n", "                        ", "data", "[", "\"ConservationStatus_WikiData_Entity_URI\"", "]", "=", "CAsAndRPs", ".", "WikiData_getConservationStatusEntityURI", "(", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", ")", "\n", "", "CAsAndRPs", ".", "RESULT", ".", "append", "(", "data", ")", "\n", "", "asset_type", "=", "a", "[", "p", "]", "[", "0", "]", ".", "strip", "(", ")", "\n", "field_3_value", "=", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", "\n", "ref_type", "=", "a", "[", "p", "]", "[", "3", "]", ".", "strip", "(", ")", "\n", "p", "+=", "1", "\n", "if", "(", "p", "==", "len", "(", "a", ")", ")", "or", "not", "(", "a", "[", "p", "]", "[", "1", "]", "==", "listed_id", ")", ":", "# short-circuit evaluation", "\n", "                    ", "break", "\n", "", "", "MEL", ".", "Utils", ".", "output", "(", "json", ".", "dumps", "(", "CAsAndRPs", ".", "RESULT", ",", "indent", "=", "4", ")", ",", "_print", "=", "False", ")", "\n", "# if not found (p == -1): return an empty JSON structure (initial).", "\n", "", "return", "CAsAndRPs", ".", "RESULT", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.getRP": [[160, 199], ["DoEE_Species.CAsAndRPs.find", "MEL.Utils.output", "[].strip", "[].strip", "[].strip", "json.dumps", "CAsAndRPs.RESULT.append", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "[].strip", "DoEE_Species.CAsAndRPs.WikiData_getSpeciesEntityURI", "len", "[].strip", "[].strip"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.find", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.WikiData_getSpeciesEntityURI"], ["", "@", "staticmethod", "\n", "def", "getRP", "(", "dataset", ",", "x", ")", ":", "\n", "        ", "a", ",", "p", "=", "CAsAndRPs", ".", "find", "(", "dataset", ",", "x", ")", "\n", "if", "(", "p", "!=", "-", "1", ")", ":", "\n", "# traverse the list of associated data: multiple rows.", "\n", "            ", "field_3_name", "=", "\"Sci_Name\"", "if", "(", "dataset", "[", "3", ":", "]", "==", "\"ps\"", ")", "else", "\"Description\"", "\n", "asset_type", "=", "\"\"", "\n", "listed_id", "=", "0", "\n", "field_3_value", "=", "\"\"", "\n", "ref_type", "=", "\"\"", "\n", "data", "=", "{", "}", "\n", "while", "True", ":", "\n", "                ", "if", "(", "(", "asset_type", "!=", "a", "[", "p", "]", "[", "0", "]", ".", "strip", "(", ")", ")", "or", "(", "listed_id", "!=", "a", "[", "p", "]", "[", "1", "]", ")", "or", "(", "field_3_value", "!=", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", ")", "or", "(", "ref_type", "!=", "a", "[", "p", "]", "[", "3", "]", ".", "strip", "(", ")", ")", ")", ":", "# only when at least one value is different", "\n", "                    ", "data", "=", "{", "\n", "\"asset_type\"", ":", "a", "[", "p", "]", "[", "0", "]", ".", "strip", "(", ")", ",", "\n", "\"listed_id\"", ":", "a", "[", "p", "]", "[", "1", "]", ",", "\n", "field_3_name", ":", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", ",", "\n", "\"ref_type\"", ":", "a", "[", "p", "]", "[", "3", "]", ".", "strip", "(", ")", ",", "\n", "\"url\"", ":", "a", "[", "p", "]", "[", "4", "]", ".", "strip", "(", ")", ",", "\n", "\"Web_location\"", ":", "a", "[", "p", "]", "[", "5", "]", ".", "strip", "(", ")", ",", "\n", "\"file_name\"", ":", "a", "[", "p", "]", "[", "6", "]", ".", "strip", "(", ")", ",", "\n", "\"Row_Number_in_Spreadsheet\"", ":", "(", "p", "+", "1", ")", "\n", "}", "\n", "if", "(", "field_3_name", "==", "\"Sci_Name\"", ")", ":", "\n", "                        ", "data", "[", "\"Species_WikiData_Entity_URI\"", "]", "=", "CAsAndRPs", ".", "WikiData_getSpeciesEntityURI", "(", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", ")", "\n", "", "CAsAndRPs", ".", "RESULT", ".", "append", "(", "data", ")", "\n", "", "asset_type", "=", "a", "[", "p", "]", "[", "0", "]", ".", "strip", "(", ")", "\n", "listed_id", "=", "a", "[", "p", "]", "[", "1", "]", "\n", "field_3_value", "=", "a", "[", "p", "]", "[", "2", "]", ".", "strip", "(", ")", "\n", "ref_type", "=", "a", "[", "p", "]", "[", "3", "]", ".", "strip", "(", ")", "\n", "p", "+=", "1", "\n", "if", "(", "p", "==", "len", "(", "a", ")", ")", "or", "not", "(", "a", "[", "p", "]", "[", "6", "]", ".", "strip", "(", ")", "==", "x", ")", ":", "# short-circuit evaluation", "\n", "                    ", "break", "\n", "", "", "MEL", ".", "Utils", ".", "output", "(", "json", ".", "dumps", "(", "CAsAndRPs", ".", "RESULT", ",", "indent", "=", "4", ")", ",", "_print", "=", "False", ")", "\n", "# if not found (p == -1): return an empty JSON structure (initial).", "\n", "", "return", "CAsAndRPs", ".", "RESULT", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get": [[202, 221], ["DoEE_Species.CAsAndRPs.load", "re.search", "MEL.Utils.output", "DoEE_Species.CAsAndRPs.get.match_in"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], ["", "@", "staticmethod", "\n", "def", "get", "(", "_path", ",", "_filename", ")", ":", "\n", "\n", "        ", "def", "match_in", "(", "key", ")", ":", "\n", "# matches the file location to the specific workbook:", "\n", "            ", "match", "=", "re", ".", "search", "(", "CAsAndRPs", ".", "BASE", "[", "key", "]", "[", "\"dir\"", "]", ",", "_path", ")", "\n", "MEL", ".", "Utils", ".", "output", "(", "f\"match: {match}\"", ",", "_print", "=", "False", ")", "\n", "if", "(", "match", ")", ":", "\n", "                ", "method", "=", "getattr", "(", "globals", "(", ")", "[", "\"CAsAndRPs\"", "]", ",", "(", "\"get\"", "+", "key", "[", ":", "2", "]", ")", ",", "lambda", "key", ",", "_filename", ":", "{", "}", ")", "\n", "CAsAndRPs", ".", "RESULT", "=", "method", "(", "key", ",", "_filename", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "CAsAndRPs", ".", "load", "(", ")", "\n", "# short-circuit evaluation:", "\n", "if", "(", "match_in", "(", "\"CA_ps\"", ")", ")", "or", "(", "match_in", "(", "\"CA_tc\"", ")", ")", "or", "(", "match_in", "(", "\"RP_ps\"", ")", ")", "or", "(", "match_in", "(", "\"RP_tc\"", ")", ")", ":", "\n", "            ", "return", "CAsAndRPs", ".", "RESULT", "\n", "", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.WikiData_execSPARQLquery": [[224, 241], ["SPARQLWrapper.SPARQLWrapper.SPARQLWrapper", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.setQuery", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.setReturnFormat", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.query().convert", "MEL.Utils.output", "SPARQLWrapper.SPARQLWrapper.SPARQLWrapper.query"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.query"], ["", "@", "staticmethod", "\n", "def", "WikiData_execSPARQLquery", "(", "query", ")", ":", "\n", "        ", "C_ENDPOINT_URL", "=", "\"https://query.wikidata.org/sparql\"", "\n", "# <https://www.mediawiki.org/wiki/Wikidata_Query_Service/User_Manual#Basics_-_Understanding_Prefixes>", "\n", "# // C_WIKIDATA_ENTITY_URL_PREFIX = \"http://www.wikidata.org/entity/\"", "\n", "\n", "sparql", "=", "SPARQLWrapper", "(", "C_ENDPOINT_URL", ")", "\n", "sparql", ".", "setQuery", "(", "query", ")", "\n", "sparql", ".", "setReturnFormat", "(", "JSON", ")", "\n", "results", "=", "sparql", ".", "query", "(", ")", ".", "convert", "(", ")", "\n", "# // client = Client()", "\n", "for", "result", "in", "results", "[", "\"results\"", "]", "[", "\"bindings\"", "]", ":", "\n", "# // entity_id = str(result[\"item\"][\"value\"]).split(C_WIKIDATA_ENTITY_URL_PREFIX, 1)[1]", "\n", "# // entity = client.get(entity_id, load=True)", "\n", "            ", "MEL", ".", "Utils", ".", "output", "(", "f\"{result}\\n{{entity.id}}\\n{{entity.label}}\\n{{json.dumps(entity.attributes, indent=4)}}\"", ",", "_print", "=", "False", ")", "\n", "return", "result", "[", "\"item\"", "]", "[", "\"value\"", "]", "# // entity.attributes # returns only the first result.", "\n", "", "return", "\"\"", "# // {}", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.WikiData_getSpeciesEntityURI": [[244, 251], ["DoEE_Species.CAsAndRPs.WikiData_execSPARQLquery", "sci_name.strip"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.WikiData_execSPARQLquery"], ["", "@", "staticmethod", "\n", "def", "WikiData_getSpeciesEntityURI", "(", "sci_name", ")", ":", "\n", "        ", "query", "=", "f\"\"\"# Specie by taxonname (scientific name).\n        SELECT ?item ?taxonname WHERE {{\n          ?item wdt:P225 \"{sci_name.strip()}\" .\n        }}\"\"\"", "# it's expected only one result.", "\n", "return", "CAsAndRPs", ".", "WikiData_execSPARQLquery", "(", "query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.WikiData_getConservationStatusEntityURI": [[254, 275], ["cs_name.lower.lower.lower", "DoEE_Species.CAsAndRPs.WikiData_execSPARQLquery"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.WikiData_execSPARQLquery"], ["", "@", "staticmethod", "\n", "def", "WikiData_getConservationStatusEntityURI", "(", "cs_name", ")", ":", "\n", "        ", "'''\n        <https://www.wikidata.org/wiki/Property:P31> <instance of>.\n        <https://www.wikidata.org/wiki/Q82673>    \"conservation status\".  Instances:\n        * <https://www.wikidata.org/wiki/Q278113> \"vulnerable\".\n        * <https://www.wikidata.org/wiki/Q219127> \"critically endangered\".\n        * <https://www.wikidata.org/wiki/Q11394>  \"endangered species\".\n        '''", "\n", "cs_name", "=", "cs_name", ".", "lower", "(", ")", "\n", "cs_name", "+=", "\" species\"", "if", "(", "cs_name", "==", "\"endangered\"", ")", "else", "\"\"", "\n", "query", "=", "f\"\"\"# conservation status as defined by IUCN.\n        SELECT ?item ?desc\n        WHERE {{\n          ?item wdt:P31 wd:Q82673 ;\n            rdfs:label \"{cs_name}\"@en ;\n            schema:description ?desc .\n          FILTER (lang(?desc) = \"en\") .\n          FILTER regex(?desc, \"(.*)(IUCN)(.*)\", \"i\") .\n        }}\"\"\"", "# it's expected only one result.", "\n", "return", "CAsAndRPs", ".", "WikiData_execSPARQLquery", "(", "query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.DoEE_Species_Sci_Names_In_Assessments": [[279, 394], ["datetime.datetime.now", "print", "MEL.Utils.printStartTimeStamp", "MEL.CouchDB.queryDocs", "set", "len", "print", "MEL.CouchDB.queryDocs", "len", "print", "print", "print", "datetime.datetime.now", "MEL.Utils.printEndTimeStamp", "[].lower", "len", "set.add", "print", "print", "DoEE_Species.DoEE_Species_Sci_Names_In_Assessments.checkSciNameInText"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.printStartTimeStamp", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.printEndTimeStamp", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print"], ["", "", "def", "DoEE_Species_Sci_Names_In_Assessments", "(", "startsFromSpeciesNum", ")", ":", "\n", "\n", "    ", "def", "existsInArray", "(", "arr", ",", "key", ")", ":", "\n", "        ", "for", "e", "in", "arr", ":", "\n", "            ", "if", "(", "e", "[", "\"Sci_Name\"", "]", "==", "key", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "", "def", "checkSciNameInText", "(", "s_json", ",", "x", ",", "label", ",", "_num", ",", "_len", ")", ":", "\n", "        ", "found", "=", "False", "\n", "indent", "=", "\">> \"", "if", "(", "(", "label", "==", "\"attachment\"", ")", "or", "(", "label", "==", "\"file-in-zip\"", ")", ")", "else", "\"\"", "\n", "if", "(", "\"text-analysis\"", "in", "x", "[", "\"Specific-Metadata\"", "]", ")", ":", "\n", "            ", "text", "=", "x", "[", "\"Specific-Metadata\"", "]", "[", "\"text-analysis\"", "]", "[", "\"ascii-text\"", "]", ".", "lower", "(", ")", "\n", "if", "(", "s_json", "[", "\"Sci_Name\"", "]", "in", "text", ")", ":", "# adds the information about the species in the assessments doc.", "\n", "                ", "if", "not", "(", "\"about-DoEE-Species\"", "in", "x", "[", "\"Associated-Metadata\"", "]", ")", ":", "# creates an array.", "\n", "                    ", "x", "[", "\"Associated-Metadata\"", "]", "[", "\"about-DoEE-Species\"", "]", "=", "[", "]", "\n", "", "if", "not", "(", "existsInArray", "(", "x", "[", "\"Associated-Metadata\"", "]", "[", "\"about-DoEE-Species\"", "]", ",", "s_json", "[", "\"Sci_Name\"", "]", ")", ")", ":", "\n", "                    ", "x", "[", "\"Associated-Metadata\"", "]", "[", "\"about-DoEE-Species\"", "]", ".", "append", "(", "{", "# multiple species referenced in a document.", "\n", "\"Sci_Name\"", ":", "s_json", "[", "\"Sci_Name\"", "]", ",", "\n", "\"WikiData_Entity_URI\"", ":", "s_json", "[", "\"Species_WikiData_Entity_URI\"", "]", "\n", "}", ")", "\n", "", "print", "(", "f\"\"\"|... {indent}{label} #{_num}/{_len}: {x[\"General-Metadata\"][\"FILENAME\"]}; id=({_id})\"\"\"", ")", "\n", "found", "=", "True", "\n", "", "", "_num", "+=", "1", "\n", "return", "_num", ",", "found", "\n", "\n", "", "def", "lookInContent", "(", "extension", ",", "l", ")", ":", "\n", "        ", "foundAtLeastOne", "=", "False", "\n", "if", "(", "(", "extension", "==", "\"msg\"", ")", "or", "(", "extension", "==", "\"zip\"", ")", ")", ":", "\n", "            ", "num", ",", "found", "=", "1", ",", "False", "\n", "l", "=", "l", "[", "\"attachments\"", "]", "if", "(", "extension", "==", "\"msg\"", ")", "else", "l", "\n", "for", "a", "in", "l", ":", "\n", "                ", "num", ",", "found", "=", "checkSciNameInText", "(", "s_json", ",", "l", "[", "a", "]", "[", "\"metadata\"", "]", ",", "\n", "\"attachment\"", "if", "(", "extension", "==", "\"msg\"", ")", "else", "\"file-in-zip\"", ",", "\n", "num", ",", "len", "(", "l", ")", ")", "\n", "foundAtLeastOne", "=", "True", "if", "(", "found", ")", "else", "foundAtLeastOne", "\n", "", "if", "(", "foundAtLeastOne", ")", ":", "\n", "                ", "desc", "=", "\"attachments above are found in file\"", "if", "(", "extension", "==", "\"msg\"", ")", "else", "\"files above are found in zip\"", "\n", "print", "(", "f\"\"\"|... ({desc}) #{num_files}/{len_docs}: {x[\"General-Metadata\"][\"FILENAME\"]}; id=({_id})\"\"\"", ")", "\n", "", "", "return", "foundAtLeastOne", "\n", "\n", "", "dt_begin", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "\"Project AGRIF | MEL: Metadata Extractor & Loader | DoEE: Species references in Assessment docs.\"", ")", "\n", "MEL", ".", "Utils", ".", "printStartTimeStamp", "(", "dt_begin", ")", "\n", "DB", "=", "\"/doee-species\"", "\n", "selector", "=", "{", "\n", "\"General-Metadata\"", ":", "{", "\n", "\"ABSOLUTEPATH\"", ":", "{", "\n", "\"$regex\"", ":", "\"(.*)(\\\\\\\\ps\\\\\\\\)(.*)\"", "\n", "}", "\n", "}", "\n", "}", "\n", "fields", "=", "[", "\"Associated-Metadata\"", "]", "\n", "r", "=", "MEL", ".", "CouchDB", ".", "queryDocs", "(", "DB", ",", "selector", ",", "False", ",", "fields", ")", "\n", "speciesSet", "=", "set", "(", ")", "\n", "for", "x", "in", "r", "[", "\"docs\"", "]", ":", "\n", "        ", "if", "(", "len", "(", "x", "[", "\"Associated-Metadata\"", "]", ")", "==", "1", ")", ":", "\n", "            ", "speciesSet", ".", "add", "(", "x", "[", "\"Associated-Metadata\"", "]", "[", "0", "]", "[", "\"Sci_Name\"", "]", ".", "lower", "(", ")", "+", "\"|\"", "+", "x", "[", "\"Associated-Metadata\"", "]", "[", "0", "]", "[", "\"Species_WikiData_Entity_URI\"", "]", ")", "\n", "", "", "len_speciesSet", "=", "len", "(", "speciesSet", ")", "\n", "print", "(", "f\"\\nSet of species scientific names @{{{DB}}} | Length={len_speciesSet}:\"", ")", "\n", "#print(f\"{speciesSet}\")", "\n", "DB", "=", "\"/doee-assessments\"", "\n", "'''\n    \"ABSOLUTEPATH\": {\n        \"$regex\": \"(.*)(\\\\\\\\DoEE_assessments\\\\\\\\)(.*)\" # only the last version of the documents\n    },\n    '''", "\n", "selector", "=", "{", "\n", "\"General-Metadata\"", ":", "{", "# retrieve _all_ documents (latest version and history):", "\n", "\"$or\"", ":", "[", "# only the following file formats:", "\n", "{", "\"EXTENSION\"", ":", "\"docx\"", "}", ",", "\n", "{", "\"EXTENSION\"", ":", "\"docm\"", "}", ",", "\n", "{", "\"EXTENSION\"", ":", "\"doc\"", "}", ",", "\n", "{", "\"EXTENSION\"", ":", "\"pdf\"", "}", ",", "\n", "{", "\"EXTENSION\"", ":", "\"msg\"", "}", "\n", "]", "\n", "}", "\n", "}", "\n", "# retrieve all the JSON structure.", "\n", "fields", "=", "[", "\"_id\"", ",", "\"_rev\"", ",", "\"General-Metadata\"", ",", "\"Use-Case$Folder\"", ",", "\"Specific-Metadata\"", ",", "\"Associated-Metadata\"", ",", "\"_attachments\"", "]", "\n", "r", "=", "MEL", ".", "CouchDB", ".", "queryDocs", "(", "DB", ",", "selector", ",", "False", ",", "fields", ")", "\n", "len_docs", "=", "len", "(", "r", "[", "\"docs\"", "]", ")", "\n", "print", "(", "f\"Analysis in documents' text @{{{DB}}} | Length={len_docs} | (only displaying found occurrences)\"", ")", "\n", "print", "(", "f\"MANGO Query for retrieval: {json.dumps(selector, indent=4)}\"", ")", "\n", "print", "(", "f\"Starting processing from species number: {startsFromSpeciesNum}\\n\"", ")", "\n", "num_sci_names", "=", "1", "\n", "s_json", "=", "{", "}", "\n", "for", "s", "in", "speciesSet", ":", "\n", "        ", "if", "(", "num_sci_names", ">=", "startsFromSpeciesNum", ")", ":", "\n", "            ", "num_files", ",", "foundInFile", ",", "display", "=", "1", ",", "False", ",", "False", "\n", "s_json", "=", "{", "\n", "\"Sci_Name\"", ":", "s", ".", "split", "(", "\"|\"", ")", "[", "0", "]", ",", "\n", "\"Species_WikiData_Entity_URI\"", ":", "s", ".", "split", "(", "\"|\"", ")", "[", "1", "]", "\n", "}", "\n", "#MEL.Utils.output(json.dumps(s_json, indent=4), _print=True)", "\n", "for", "x", "in", "r", "[", "\"docs\"", "]", ":", "\n", "                ", "_id", "=", "x", "[", "\"_id\"", "]", "\n", "num_files", ",", "foundInFile", "=", "checkSciNameInText", "(", "s_json", ",", "x", ",", "\"filename\"", ",", "num_files", ",", "len_docs", ")", "\n", "if", "(", "foundInFile", ")", ":", "\n", "                    ", "num_files", "-=", "1", "# for displaying purposes in next function", "\n", "", "foundInComponent", "=", "lookInContent", "(", "x", "[", "\"General-Metadata\"", "]", "[", "\"EXTENSION\"", "]", ",", "x", "[", "\"Specific-Metadata\"", "]", ")", "\n", "if", "(", "foundInFile", ")", "or", "(", "foundInComponent", ")", ":", "\n", "                    ", "MEL", ".", "CouchDB", ".", "updateDocument", "(", "_id", ",", "x", ")", "# update the JSON object on CouchDB.", "\n", "print", "(", "f\"\"\"| (document updated)\"\"\"", ")", "\n", "display", "=", "True", "\n", "", "if", "(", "foundInFile", ")", ":", "\n", "                    ", "num_files", "+=", "1", "# restores the correct value", "\n", "", "", "if", "(", "display", ")", ":", "\n", "                ", "print", "(", "f\"|__ Sci_Name #{num_sci_names}/{len_speciesSet}: {s}\\n\\n\"", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "f\"|__ ... skipping processing of: Sci_Name #{num_sci_names}/{len_speciesSet}: {s}\\n\\n\"", ")", "\n", "", "num_sci_names", "+=", "1", "\n", "", "dt_end", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "delta", "=", "(", "dt_end", "-", "dt_begin", ")", ".", "total_seconds", "(", ")", "\n", "MEL", ".", "Utils", ".", "printEndTimeStamp", "(", "dt_end", ",", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.loadConfigFile": [[165, 182], ["str", "__init__.Dataset.loadDefault", "str", "os.path.exists", "open", "json.loads", "__init__.Utils.displayConfigFile", "Utils.CONFIG_JSON_FILE.endswith", "__init__.Utils.displayConfigFile", "_config_json_f.read", "str"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.loadDefault", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.displayConfigFile", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.displayConfigFile"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.displayConfigFile": [[183, 188], ["print", "__init__.Utils.output", "print"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFormattedDT": [[193, 199], ["__init__.Utils.output", "dt.isoformat"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFolder": [[201, 208], ["Dataset._f.get"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getClassNameFromFrame": [[209, 212], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.output": [[214, 231], ["bool", "inspect.currentframe", "msg.strip", "print", "__init__.Utils.getClassNameFromFrame", "print", "Utils._log.info", "print", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getClassNameFromFrame", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.printStartTimeStamp": [[233, 236], ["Utils._log.info"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.printEndTimeStamp": [[238, 242], ["Utils._log.info", "Utils._log.info"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.addItemInCountingList": [[243, 249], ["_list.keys", "docx.oxml.text.run.text", "docx.oxml.text.run.text", "docx.oxml.text.run.text", "docx.oxml.text.run.hyperlink.address", "docx.oxml.text.run.text", "docx.oxml.text.run.text", "docx.oxml.text.run.text"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.all_encodings": [[250, 256], ["set", "set", "set.union", "encodings.aliases.aliases.values", "pkgutil.walk_packages", "os.path.dirname"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getValidEncoding": [[257, 267], ["__init__.Utils.all_encodings", "text.decode", "len", "Utils._log.info"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.all_encodings"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.isJSON": [[268, 275], ["json.loads", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.tryPrettyfiedJSON": [[276, 284], ["json.dumps", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.dict_update": [[285, 293], ["u.items", "isinstance", "__init__.Utils.dict_update", "d.get"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.dict_update", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.initLogging": [[294, 313], ["Utils._log.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "Utils._log.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "Utils._log.addHandler"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.load": [[329, 347], ["__init__.CouchDB.getEndPoint", "__init__.CouchDB.getEndPoint", "__init__.Utils.output"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getEndPoint", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getEndPoint", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.loadDefault": [[348, 351], ["__init__.Dataset.load"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.couchDBenabled": [[352, 355], ["bool", "bool"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NERenabled": [[356, 359], ["bool", "bool"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_Complete": [[360, 363], ["__init__.Dataset.NERenabled"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NERenabled"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_OnlyNER": [[364, 367], ["__init__.Dataset.NERenabled"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NERenabled"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_storeOutputOnCouchDB": [[368, 371], ["__init__.Dataset.NERenabled", "bool"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NERenabled"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.isGenerateOutputFileEnabled": [[372, 375], ["bool"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.hasAssociatedMetadata": [[376, 379], ["bool"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.isViewFilePrintEnabled": [[380, 383], ["bool"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.pdftotext_preserveLayout": [[384, 387], ["bool"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.writeOutputFile": [[388, 395], ["__init__.Dataset.isGenerateOutputFileEnabled", "__init__.Utils.output", "open", "outfile.write", "__init__.Utils.tryPrettyfiedJSON"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.isGenerateOutputFileEnabled", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.tryPrettyfiedJSON"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateMergedOutput": [[395, 399], ["__init__.Dataset.NER_Complete", "__init__.Dataset.writeOutputFile"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_Complete", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.writeOutputFile"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateNERoutput": [[399, 403], ["__init__.Dataset.NER_OnlyNER", "__init__.Dataset.writeOutputFile"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_OnlyNER", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.writeOutputFile"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateOutputFile": [[404, 425], ["__init__.Dataset.isGenerateOutputFileEnabled", "isinstance", "isinstance", "__init__.Dataset.NER_OnlyNER", "obj.extractMetadata", "__init__.Dataset.NER_Complete", "__init__.Dataset.NER_OnlyNER", "__init__.NER.process", "__init__.Dataset.generateNERoutput", "__init__.Dataset.NER_Complete", "__init__.Dataset.generateMergedOutput", "obj.extractMetadata.update", "__init__.Dataset.generateMergedOutput", "__init__.Dataset.writeOutputFile"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.isGenerateOutputFileEnabled", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_OnlyNER", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMetadata", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_Complete", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_OnlyNER", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.process", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateNERoutput", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_Complete", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateMergedOutput", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateMergedOutput", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.writeOutputFile"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.storeOutputOnCouchDB": [[426, 429], ["__init__.Dataset.NERenabled", "bool"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NERenabled"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.reloadFile": [[430, 434], ["bool", "bool", "extension.upper", "Dataset._db[].strip().upper", "Dataset._db[].strip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_regenerateOutput": [[435, 438], ["__init__.Dataset.NERenabled", "bool"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NERenabled"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.shortPrint": [[439, 443], ["Utils._log.info", "Utils._log.info", "bool", "bool", "__init__.Utils.getFolder"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFolder"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getEndPoint": [[455, 458], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.query": [[459, 481], ["__init__.Utils.output", "requests.post", "json.loads", "json.dumps", "__init__.Utils.output", "__init__.Utils.output", "__init__.Utils.output", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs": [[482, 494], ["__init__.Utils.output", "__init__.CouchDB.query", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.query"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentSet": [[495, 535], ["__init__.CouchDB.getDocumentSet._re"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.applyREresults": [[536, 541], ["isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getCompletePattern": [[543, 558], ["re.compile", "__init__.Utils.output", "__init__.Utils.output"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getFirstChunk": [[559, 587], ["__init__.CouchDB.getCompletePattern", "__init__.CouchDB.getDocumentSet", "__init__.Utils.output", "_re_txt_search_pattern.search", "doc.update", "__init__.Utils.output", "doc_set.append", "__init__.CouchDB.applyREresults", "__init__.Utils.output", "__init__.Utils.output", "len", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getCompletePattern", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentSet", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.applyREresults", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getAllChunks": [[588, 618], ["__init__.CouchDB.getCompletePattern", "__init__.CouchDB.getDocumentSet", "Utils._log.info", "_re_txt_search_pattern.finditer", "doc.update", "__init__.Utils.output", "doc_set.append", "__init__.CouchDB.applyREresults", "__init__.Utils.output", "__init__.Utils.output", "matches.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getCompletePattern", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentSet", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.applyREresults", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.searchFirstMatch": [[619, 646], ["__init__.CouchDB.getDocumentSet", "Utils._log.info", "__init__.Utils.output", "doc_set.append", "isinstance", "_re_txt_search_pattern.search", "doc.update", "__init__.Utils.output", "__init__.Utils.output", "__init__.CouchDB.applyREresults", "len", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentSet", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.applyREresults"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.searchAllMatches": [[647, 676], ["__init__.CouchDB.getDocumentSet", "Utils._log.info", "__init__.Utils.output", "doc_set.append", "isinstance", "_re_txt_search_pattern.finditer", "doc.update", "__init__.Utils.output", "__init__.Utils.output", "__init__.CouchDB.applyREresults", "len", "len", "matches.append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentSet", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.applyREresults"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.checkDuplicateDocs": [[677, 703], ["__init__.Utils.output", "__init__.CouchDB.queryDocs", "set", "__init__.Utils.output", "len", "Utils._log.info", "set.add", "Utils._log.info", "Utils._log.info", "set.add"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.countDocsXsubPath": [[704, 714], ["__init__.CouchDB.queryDocs", "re.sub"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.findDocument": [[715, 744], ["__init__.Utils.output", "__init__.CouchDB.query", "isinstance", "__init__.Utils.output", "json.dumps", "re.sub", "re.sub"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.query", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentGivenID": [[745, 762], ["__init__.Utils.output", "requests.get", "json.loads", "__init__.Utils.output", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentGivenFilename": [[763, 777], ["filename.replace().replace().replace", "__init__.CouchDB.queryDocs", "__init__.Utils.output", "filename.replace().replace", "json.dumps", "filename.replace"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.deleteDocument": [[778, 789], ["requests.delete", "json.loads", "__init__.Utils.output", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.updateDocument": [[790, 798], ["requests.put", "json.loads", "__init__.Utils.output", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.addDocument": [[799, 818], ["file.extractMetadata", "file.occurredCriticalException", "file.extractContent", "__init__.Utils.output", "requests.post", "json.loads", "__init__.Utils.output", "isinstance", "__init__.Utils.output", "__init__.Utils.output", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMetadata", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.occurredCriticalException", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractContent", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load": [[823, 833], ["__init__.Directory.scanAndBuildStructure", "__init__.File", "__init__.File.extractMetadata", "__init__.Utils.output", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Directory.scanAndBuildStructure", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMetadata", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast": [[835, 845], ["str().strip", "int", "str", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.movePositionToFirstElement": [[849, 858], ["__init__.Utils.output", "__init__.AssociatedMetadata.cast", "__init__.AssociatedMetadata.cast"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.simpleSearch": [[867, 880], ["__init__.AssociatedMetadata.cast", "__init__.AssociatedMetadata.cast", "__init__.AssociatedMetadata.movePositionToFirstElement", "__init__.AssociatedMetadata.cast", "__init__.AssociatedMetadata.cast"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.movePositionToFirstElement", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.binarySearch": [[890, 910], ["__init__.Utils.output", "__init__.AssociatedMetadata.cast", "__init__.AssociatedMetadata.cast", "__init__.AssociatedMetadata.movePositionToFirstElement", "len", "__init__.AssociatedMetadata.cast", "__init__.AssociatedMetadata.cast", "__init__.AssociatedMetadata.binarySearch", "__init__.AssociatedMetadata.binarySearch", "len", "len", "__init__.AssociatedMetadata.simpleSearch", "len", "len", "__init__.AssociatedMetadata.simpleSearch", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.movePositionToFirstElement", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.cast", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.binarySearch", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.binarySearch", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.simpleSearch", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.simpleSearch"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.__init__": [[916, 921], ["str", "unicodedata.normalize().encode().decode", "__init__.Text.cleanText", "unicodedata.normalize().encode", "unicodedata.normalize"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.cleanText"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.extractKeywords": [[924, 935], ["nltk.tokenize.word_tokenize", "nltk.corpus.stopwords.words", "re.search", "__init__.Utils.addItemInCountingList"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.addItemInCountingList"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.cleanText": [[936, 947], ["__init__.Text._ascii_text.replace().replace().replace().replace", "__init__.Text._ascii_text.replace().replace().replace", "__init__.Text._ascii_text.replace().replace", "__init__.Text._ascii_text.replace"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.applyPatternMatching": [[948, 963], ["Utils._config[].items", "__init__.Utils.output", "re.compile", "re.compile.findall", "json.dumps", "__init__.Utils.addItemInCountingList", "isinstance"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.addItemInCountingList"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis": [[964, 976], ["__init__.Text.applyPatternMatching", "str", "__init__.Text.extractKeywords", "str", "__init__.Text._text.__len__", "__init__.Text.__len__"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.applyPatternMatching", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.extractKeywords"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.__init__": [[1001, 1033], ["os.path.isfile", "__init__.File.setAttributes", "__init__.Utils.output"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.setAttributes", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.setAttributes": [[1035, 1070], ["os.path.isfile", "os.path.splitext", "os.path.dirname", "os.path.basename", "Utils._config[].get", "__init__.Utils.output", "__init__.Utils.output", "__init__.File.extension.translate", "__init__.File.extension.upper", "__init__.Utils.output", "platform.system", "mimetypes.MimeTypes().guess_type", "__init__.Utils.getFolder", "len", "__init__.Utils.output", "ord", "__init__.Utils.output", "shutil.copy2", "mimetypes.MimeTypes", "__init__.File.extension.upper", "__init__.File.extension.upper", "len", "str", "len", "len", "random.randint", "len", "__init__.Utils.getFolder"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFolder", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFolder"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print": [[1072, 1085], ["__init__.Utils.output", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.isEmpty": [[1087, 1092], ["__init__.File.defaultDirAttributes.get", "__init__.Utils.output"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.isProtected": [[1094, 1099], ["__init__.Utils.output", "__init__.File.defaultDirAttributes.get"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.occurredCriticalException": [[1101, 1103], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMetadata": [[1105, 1158], ["__init__.File.extract_ext_info", "__init__.File.extract_associated_info", "__init__.Utils.output", "__init__.File.isEmpty", "__init__.File.isProtected", "__init__.Utils.output", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.findall", "__init__.File.JSONmetadata.update", "json.dumps", "os.path.abspath", "__init__.Dataset.NER_Complete", "__init__.NER.process", "xmljson.parker.data", "item.findall"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extract_ext_info", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extract_associated_info", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.isEmpty", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.isProtected", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_Complete", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.process"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractPDFinfo": [[1160, 1362], ["range", "__init__.Utils.output", "__init__.Utils.output", "__init__.Dataset.pdftotext_preserveLayout", "__init__.Utils.output", "PyPDF4.PdfFileReader.outlines.__str__.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "__init__.Utils.output", "__init__.Text", "__init__.Text.analysis", "json.dumps", "matchObj.group", "matchObj.group", "matchObj.group", "open", "PyPDF4.PdfFileReader", "PyPDF4.PdfFileReader.getDocumentInfo", "PyPDF4.PdfFileReader.getNumPages", "PyPDF4.PdfFileReader.outlines.__str__", "str", "str", "__init__.Utils.output", "__init__.Utils.getFolder", "__init__.File.extractPDFinfo.getStrInEnglishCharacterSet"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.pdftotext_preserveLayout", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFolder"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMSOfficeFileProps": [[1365, 1383], ["__init__.Utils.getFormattedDT", "__init__.Utils.getFormattedDT", "__init__.Utils.getFormattedDT"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFormattedDT", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFormattedDT", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFormattedDT"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractPPTXinfo": [[1386, 1536], ["pptx.Presentation", "__init__.File.extractMSOfficeFileProps", "__init__.Text", "__init__.Text.analysis", "__init__.Utils.output", "__init__.File.extractPPTXinfo.extractShapes"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMSOfficeFileProps", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractDOCXinfo": [[1538, 1635], ["docx.Document", "__init__.File.extractMSOfficeFileProps", "__init__.Text", "__init__.Text.analysis", "__init__.Utils.output", "__init__.File.extractDOCXinfo.extractSectionPart"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMSOfficeFileProps", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractDOCMinfo": [[1637, 1650], ["os.popen().read", "__init__.Utils.output", "os.popen().read.split", "__init__.Utils.output", "__init__.File.extractDOCXinfo", "re.search", "os.popen", "line.split"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractDOCXinfo"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractOLEinfo": [[1652, 1716], ["olefile.isOleFile", "__init__.Utils.output", "os.popen().read", "os.popen().read.split", "json.dumps", "re.search", "olefile.OleFileIO", "ole.listdir", "ole.listdir.copy", "__init__.Text", "__init__.Text.analysis", "__init__.File.extension.upper", "win32.gencache.EnsureDispatch", "win32.gencache.EnsureDispatch.Documents.Open", "__init__.Text", "__init__.Text.analysis", "win32.gencache.EnsureDispatch.Quit", "__init__.Utils.output", "os.popen", "line.split", "ole.openstream().read", "platform.system", "__init__.Utils.output", "key_value[].strip", "__init__.File.extension.upper", "doc.Range", "json.dumps", "key_value[].strip", "key_value[].strip", "key_value[].strip", "__init__.File.extension.upper", "ole.openstream", "platform.system", "key_value[].strip", "map", "platform.system"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMSGinfo": [[1718, 1846], ["win32.Dispatch().GetNamespace", "__init__.File.isEmpty", "win32.Dispatch().GetNamespace.OpenSharedItem", "__init__.Utils.getFormattedDT", "__init__.Utils.getFormattedDT", "__init__.Utils.getFormattedDT", "__init__.Utils.getFormattedDT", "__init__.Text", "__init__.Text.analysis", "__init__.File.extractOLEinfo", "__init__.Utils.output", "platform.system", "__init__.Utils.output", "range", "json.dumps", "win32.Dispatch", "platform.system", "win32.Dispatch().GetNamespace.OpenSharedItem.Attachments.Item", "win32.Dispatch().GetNamespace.OpenSharedItem.Attachments.Item", "win32.Dispatch().GetNamespace.OpenSharedItem.Attachments.Item", "len", "win32.Dispatch().GetNamespace.OpenSharedItem.Attachments.Item().SaveAsFile", "__init__.File", "__init__.File.extractMetadata", "platform.system", "win32.Dispatch().GetNamespace.OpenSharedItem.Attachments.Item", "win32.Dispatch().GetNamespace.OpenSharedItem.Attachments.Item", "win32.Dispatch().GetNamespace.OpenSharedItem.Attachments.Item", "__init__.Utils.getFolder", "win32.Dispatch().GetNamespace.OpenSharedItem.Attachments.Item"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.isEmpty", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFormattedDT", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFormattedDT", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFormattedDT", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFormattedDT", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractOLEinfo", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMetadata", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFolder"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractCSVinfo": [[1848, 1884], ["__init__.Utils.output", "collections.defaultdict", "__init__.Utils.output", "__init__.Text", "__init__.Text.analysis", "__init__.Utils.output", "open", "csv.DictReader", "json.dumps", "open", "csv.DictReader", "json.dumps", "__init__.File.getRawText", "json.dumps", "row.items", "csvCols[].append"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.getRawText"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractXLSXinfo": [[1885, 1914], ["pyexcel.get_book_dict", "pyexcel.get_book_dict.items", "__init__.Utils.output", "__init__.Text", "__init__.Text.analysis", "__init__.Utils.output", "isinstance", "__init__.File.extractXLSXinfo.formatValueToString"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.isTextBased": [[1916, 1918], ["bool", "re.search", "__init__.File.extension.upper"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.getRawText": [[1920, 1953], ["__init__.File.isTextBased", "range", "__init__.Utils.output", "open", "f.read().encode().decode", "str", "f.read().encode", "f.read"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.isTextBased", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractZIPinfo": [[1955, 1981], ["os.walk", "__init__.Utils.output", "str", "os.path.isdir", "__init__.Utils.output", "__init__.Utils.output", "os.path.basename", "__init__.Utils.output", "json.dumps", "random.randint", "os.path.dirname", "zipfile.ZipFile", "zip_ref.extractall", "__init__.Utils.output", "__init__.File", "__init__.File.extractMetadata", "__init__.Utils.output", "__init__.Utils.getFolder", "__init__.File.isTextBased", "__init__.File.getRawText", "__init__.File.extractContent", "json.dumps", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMetadata", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFolder", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.isTextBased", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.getRawText", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractContent"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractTXTinfo": [[1983, 1989], ["__init__.Text", "__init__.Text.analysis", "__init__.Utils.output", "json.dumps", "__init__.File.getRawText"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Text.analysis", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.getRawText"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractRTFinfo": [[1991, 2007], ["__init__.File.getRawText", "striprtf.striprtf.rtf_to_text", "RTF_content.update", "__init__.File.extractTXTinfo"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.getRawText", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractTXTinfo"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extract_ext_info": [[2009, 2016], ["__init__.Utils.output", "__init__.File.extension.upper", "Utils._config[].get", "getattr", "getattr."], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extract_associated_NHMRC_info": [[2018, 2043], ["__init__.Utils.output", "NHMRC_Grants.FoR_App_Data.get", "__init__.Utils.output", "str", "Utils.IMPORTED_PACKAGES.append", "__init__.Utils.output", "json.dumps", "sys._getframe", "sys._getframe"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extract_associated_DoEE_Species_CAsAndRPs_info": [[2045, 2061], ["DoEE_Species.CAsAndRPs.get", "__init__.Utils.output", "str", "Utils.IMPORTED_PACKAGES.append", "json.dumps", "sys._getframe", "sys._getframe"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.DoEE_Species.CAsAndRPs.get", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extract_associated___JSON___info": [[2063, 2071], ["__init__.File.extension.upper", "__init__.File.getRawText", "__init__.Utils.isJSON", "json.loads", "__init__.Utils.output", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.getRawText", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.isJSON", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extract_associated_info": [[2074, 2084], ["__init__.Dataset.hasAssociatedMetadata", "[].items", "re.search", "__init__.Utils.output", "getattr", "getattr."], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.hasAssociatedMetadata", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractContent": [[2086, 2100], ["__init__.Utils.output", "base64.b64encode.decode", "__init__.Utils.output", "open", "base64.b64encode", "json.dumps", "f.read"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Directory.scanAndBuildStructure": [[2108, 2144], ["__init__.Utils.output", "os.scandir", "__init__.Utils.output", "json.dumps", "entry.stat", "datetime.datetime.fromtimestamp", "datetime.datetime.fromtimestamp", "entry.is_file", "__init__.File", "entry.is_file", "entry.is_dir", "datetime.datetime.fromtimestamp.strftime", "datetime.datetime.fromtimestamp.strftime", "datetime.datetime.fromtimestamp.strftime", "datetime.datetime.fromtimestamp.strftime"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.File"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Directory.process": [[2148, 2271], ["Dataset._f[].strip", "Dataset._f[].strip", "Dataset._f[].strip", "Dataset._f[].strip", "os.walk", "Utils._log.info", "Utils._log.info", "[].translate", "Dataset._db[].strip", "__init__.Directory.process.getExtension"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models": [[2288, 2353], ["__init__.Utils.output", "bool", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "bool", "__init__.NER.models", "block_names.append", "NER.processing_block.extend"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.load_models": [[2355, 2361], ["__init__.Dataset.NERenabled", "__init__.NER.models", "NLP_NER.load_models"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NERenabled", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.load_models"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.process": [[2363, 2373], ["__init__.Dataset.NERenabled", "__init__.Utils.output", "NLP_NER.NER_main", "__init__.NER.postProcessing"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NERenabled", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.__init__.NER_main", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.postProcessing"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output": [[2375, 2406], ["__init__.Utils.output", "hashlib.blake2s", "hashlib.blake2s.update", "hashlib.blake2s.hexdigest", "results.items", "__init__.Utils.output", "[].encode", "json.dumps", "Utils._log.info", "NER._last_output_filename_template.replace", "__init__.Dataset.NER_regenerateOutput", "output.update", "NER._last_output[].update", "os.path.exists", "open", "outfile.write", "json.dumps", "len"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_regenerateOutput"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.processFromToCouchDB_forOneDoc": [[2408, 2480], ["__init__.Utils.output", "__init__.Dataset.NER_storeOutputOnCouchDB", "__init__.Dataset.generateOutputFile", "__init__.Utils.output", "__init__.Utils.output", "__init__.NER.models", "__init__.NER.process", "__init__.NER.output", "NER._last_output[].items", "__init__.File", "__init__.CouchDB.addDocument", "__init__.Dataset.couchDBenabled", "json.dumps", "__init__.File", "__init__.CouchDB.findDocument", "__init__.NER.processFromToCouchDB_forOneDoc.processingNER"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_storeOutputOnCouchDB", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateOutputFile", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.models", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.process", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.addDocument", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.couchDBenabled", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.findDocument"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.processFromAndToCouchDB_forDocSet": [[2482, 2495], ["__init__.Utils.output", "__init__.CouchDB.queryDocs", "__init__.Dataset.couchDBenabled", "Utils._log.info", "__init__.NER.processFromToCouchDB_forOneDoc", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.queryDocs", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.couchDBenabled", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.processFromToCouchDB_forOneDoc"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.postProcessing": [[2497, 2542], ["__init__.Utils.output", "_fineGrained.items", "_totals.items", "__init__.Utils.output", "doc_set.items", "r.items", "r.items", "__init__.Utils.output", "r.items", "k.split", "[].append", "[].append", "__init__.Utils.output", "o[].items", "json.dumps", "json.dumps", "__init__.Utils.output", "__init__.Utils.output", "__init__.Utils.addItemInCountingList", "__init__.Utils.addItemInCountingList"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.addItemInCountingList", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.addItemInCountingList"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.Sampling_getSamplesNOTinNERdb": [[2544, 2551], ["NLP_NER.sampling_get_samples_not_in_ner_db", "__init__.Utils.output", "__init__.Dataset.writeOutputFile", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.__init__.sampling_get_samples_not_in_ner_db", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.writeOutputFile"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.processSamplingSet": [[2553, 2605], ["__init__.NER.Sampling_getSamplesNOTinNERdb", "__init__.NER.Sampling_getSamplesNOTinNERdb", "Utils._log.info", "__init__.Dataset.loadDefault", "Utils._log.info", "Utils._log.info", "__init__.Dataset.load", "sampling_type.items", "Utils._log.info", "Utils._log.info", "Utils._log.info", "[].lower", "__init__.CouchDB.getDocumentGivenID", "__init__.NER.processSamplingSet.displayProcessingDoc"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.Sampling_getSamplesNOTinNERdb", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.Sampling_getSamplesNOTinNERdb", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.loadDefault", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.AssociatedMetadata.load", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentGivenID"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.VirtuosoUS.execSPARQL": [[2627, 2667], ["__init__.Utils.output", "requests.post", "__init__.Utils.output", "json.loads", "__init__.Utils.output", "json.loads", "__init__.Utils.output", "json.dumps", "str", "json.dumps", "__init__.Utils.output", "__init__.Utils.output", "__init__.Utils.output", "json.dumps", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Support.NHMRC_EmptyFolders": [[2739, 2755], ["open", "Utils._log.info", "open.close", "line.strip", "line.strip", "Utils._log.info", "line.strip", "line.strip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.VUS_query": [[2762, 2767], ["__init__.VirtuosoUS.execSPARQL"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.VirtuosoUS.execSPARQL"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.File": [[2768, 2785], ["__init__.Directory.scanAndBuildStructure", "__init__.File", "__init__.File.extractMetadata", "__init__.Dataset.isViewFilePrintEnabled", "__init__.Dataset.generateOutputFile", "__init__.File.print", "__init__.Dataset.NER_Complete"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Directory.scanAndBuildStructure", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.File", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.extractMetadata", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.isViewFilePrintEnabled", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateOutputFile", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.File.print", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.NER_Complete"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.CouchDB": [[2786, 2988], ["__init__.Test.CouchDB.NHMRC_pruneMetadata"], "methods", ["None"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.NER_process": [[2999, 3008], ["__init__.CouchDB.getDocumentGivenFilename", "__init__.NER.process", "__init__.Dataset.generateOutputFile", "__init__.Utils.output", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.getDocumentGivenFilename", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.process", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.generateOutputFile", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.NER.output"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Test.NER_sampling": [[3009, 3013], ["NLP_NER.sampling_main"], "methods", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.NLP_NER.__init__.sampling_main"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.init": [[128, 131], ["__init__.Utils.loadConfigFile", "__init__.Utils.initLogging"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.loadConfigFile", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.initLogging"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.header": [[2701, 2714], ["__init__.init", "Utils._log.info", "Utils._log.info", "datetime.datetime.now", "__init__.Utils.printStartTimeStamp", "Utils._log.info", "__init__.Dataset.shortPrint", "Utils._log.info", "platform.system"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.init", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.printStartTimeStamp", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.shortPrint"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.process": [[2715, 2720], ["__init__.header", "__init__.Utils.getFolder", "__init__.Directory.process", "__init__.footer"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.header", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.getFolder", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.process", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.footer"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.footer": [[2721, 2732], ["Utils._log.info", "datetime.datetime.now", "__init__.Utils.printEndTimeStamp", "__init__.Dataset.couchDBenabled", "__init__.CouchDB.checkDuplicateDocs"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Utils.printEndTimeStamp", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.Dataset.couchDBenabled", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.CouchDB.checkDuplicateDocs"], []], "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.main": [[3016, 3037], ["__init__.header", "__init__.footer"], "function", ["home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.header", "home.repos.pwc.inspect_result.KGCP_MEL-TNNT.MEL.__init__.footer"], []]}