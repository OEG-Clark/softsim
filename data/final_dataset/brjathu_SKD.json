{"home.repos.pwc.inspect_result.brjathu_SKD.None.eval_fewshot.parse_option": [[30, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'argument for training'", ")", "\n", "\n", "# load pretrained model", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'resnet12'", ",", "choices", "=", "model_pool", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'absolute path to .pth model'", ")", "\n", "#     parser.add_argument('--model_path', type=str, default=\"/raid/data/IncrementLearn/imagenet/neurips20/model/maml_miniimagenet_test_5shot_step_5_5ways_5shots/pretrain_maml_miniimagenet_test_5shot_step_5_5ways_5shots.pt\", help='absolute path to .pth model')", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'miniImageNet'", ",", "choices", "=", "[", "'miniImageNet'", ",", "'tieredImageNet'", ",", "\n", "'CIFAR-FS'", ",", "'FC100'", ",", "\"toy\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--transform'", ",", "type", "=", "str", ",", "default", "=", "'A'", ",", "choices", "=", "transforms_list", ")", "\n", "\n", "# specify data_root", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'/raid/data/IncrementLearn/imagenet/Datasets/MiniImagenet/'", ",", "help", "=", "'path to data root'", ")", "\n", "parser", ".", "add_argument", "(", "'--simclr'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'use simple contrastive learning representation'", ")", "\n", "\n", "# meta setting", "\n", "parser", ".", "add_argument", "(", "'--n_test_runs'", ",", "type", "=", "int", ",", "default", "=", "600", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of test runs'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_ways'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of classes for doing each classification run'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_shots'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of shots in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_queries'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of query in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_aug_support_samples'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "\n", "help", "=", "'The number of augmented samples for each meta test sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of workers for dataloader'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'test_batch_size'", ",", "\n", "help", "=", "'Size of test batch)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch_size'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "opt", ".", "dataset", "==", "'CIFAR-FS'", "or", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "        ", "opt", ".", "transform", "=", "'D'", "\n", "\n", "", "if", "'trainval'", "in", "opt", ".", "model_path", ":", "\n", "        ", "opt", ".", "use_trainval", "=", "True", "\n", "", "else", ":", "\n", "        ", "opt", ".", "use_trainval", "=", "False", "\n", "\n", "# set the path according to the environment", "\n", "", "if", "not", "opt", ".", "data_root", ":", "\n", "        ", "opt", ".", "data_root", "=", "'./data/{}'", ".", "format", "(", "opt", ".", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "if", "(", "opt", ".", "dataset", "==", "\"toy\"", ")", ":", "\n", "            ", "opt", ".", "data_root", "=", "'{}/{}'", ".", "format", "(", "opt", ".", "data_root", ",", "\"CIFAR-FS\"", ")", "\n", "", "else", ":", "\n", "            ", "opt", ".", "data_root", "=", "'{}/{}'", ".", "format", "(", "opt", ".", "data_root", ",", "opt", ".", "dataset", ")", "\n", "", "", "opt", ".", "data_aug", "=", "True", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.eval_fewshot.main": [[89, 115], ["eval_fewshot.parse_option", "dataloader.get_dataloaders", "models.util.create_model", "torch.load", "torch.load", "model.cuda.load_state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "time.time", "eval.meta_eval.meta_test", "print", "time.time", "eval.meta_eval.meta_test", "print", "model.cuda.cuda", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.parse_option", "home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.models.util.create_model", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "opt", "=", "parse_option", "(", ")", "\n", "\n", "opt", ".", "n_test_runs", "=", "600", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "n_cls", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "# load model", "\n", "model", "=", "create_model", "(", "opt", ".", "model", ",", "n_cls", ",", "opt", ".", "dataset", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "opt", ".", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "\"model\"", "]", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "test_acc", ",", "test_std", "=", "meta_test", "(", "model", ",", "meta_testloader", ")", "\n", "test_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'test_acc: {:.4f}, test_std: {:.4f}, time: {:.1f}'", ".", "format", "(", "test_acc", ",", "test_std", ",", "test_time", ")", ")", "\n", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "test_acc_feat", ",", "test_std_feat", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "False", ")", "\n", "test_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'test_acc_feat: {:.4f}, test_std: {:.4f}, time: {:.1f}'", ".", "format", "(", "test_acc_feat", ",", "test_std_feat", ",", "test_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.Wrapper.__init__": [[56, 63], ["torch.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "list", "list", "train_distillation.Wrapper.model.children", "train_distillation.Wrapper.model.children"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "        ", "super", "(", "Wrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "feat", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", ")", "\n", "\n", "self", ".", "last", "=", "torch", ".", "nn", ".", "Linear", "(", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", "-", "2", "]", ".", "in_features", ",", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.Wrapper.forward": [[64, 70], ["train_distillation.Wrapper.feat", "feat.view.view.view", "train_distillation.Wrapper.last", "images.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "feat", "=", "self", ".", "feat", "(", "images", ")", "\n", "feat", "=", "feat", ".", "view", "(", "images", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "last", "(", "feat", ")", "\n", "\n", "return", "feat", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.get_freer_gpu": [[44, 48], ["os.system", "numpy.argmax", "int", "open().readlines", "x.split", "open"], "function", ["None"], ["def", "get_freer_gpu", "(", ")", ":", "\n", "    ", "os", ".", "system", "(", "'nvidia-smi -q -d Memory |grep -A4 GPU|grep Free >tmp'", ")", "\n", "memory_available", "=", "[", "int", "(", "x", ".", "split", "(", ")", "[", "2", "]", ")", "for", "x", "in", "open", "(", "'tmp'", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "return", "np", ".", "argmax", "(", "memory_available", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.parse_option": [[73, 199], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.tags.split", "list", "parser.parse_args.lr_decay_epochs.split", "list", "os.path.join", "os.path.join", "parser.parse_args.tags.append", "parser.parse_args.lr_decay_epochs.append", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "int"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "", "def", "parse_option", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'argument for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--eval_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'meta-eval frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_freq'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'tb frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of training epochs'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'60,80'", ",", "help", "=", "'where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "\n", "# dataset and model", "\n", "parser", ".", "add_argument", "(", "'--model_s'", ",", "type", "=", "str", ",", "default", "=", "'resnet12'", ",", "choices", "=", "model_pool", ")", "\n", "parser", ".", "add_argument", "(", "'--model_t'", ",", "type", "=", "str", ",", "default", "=", "'resnet12'", ",", "choices", "=", "model_pool", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'miniImageNet'", ",", "choices", "=", "[", "'miniImageNet'", ",", "'tieredImageNet'", ",", "\n", "'CIFAR-FS'", ",", "'FC100'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--simclr'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'use simple contrastive learning representation'", ")", "\n", "parser", ".", "add_argument", "(", "'--ssl'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'use self supervised learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--tags'", ",", "type", "=", "str", ",", "default", "=", "\"gen1, ssl\"", ",", "help", "=", "'add tags for the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--transform'", ",", "type", "=", "str", ",", "default", "=", "'A'", ",", "choices", "=", "transforms_list", ")", "\n", "\n", "# path to teacher model", "\n", "parser", ".", "add_argument", "(", "'--path_t'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'teacher model snapshot'", ")", "\n", "\n", "# distillation", "\n", "parser", ".", "add_argument", "(", "'--distill'", ",", "type", "=", "str", ",", "default", "=", "'kd'", ",", "choices", "=", "[", "'kd'", ",", "'contrast'", ",", "'hint'", ",", "'attention'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--trial'", ",", "type", "=", "str", ",", "default", "=", "'1'", ",", "help", "=", "'trial id'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'weight for classification'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'weight balance for KD'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'weight balance for other losses'", ")", "\n", "\n", "# KL distillation", "\n", "parser", ".", "add_argument", "(", "'--kd_T'", ",", "type", "=", "float", ",", "default", "=", "2", ",", "help", "=", "'temperature for KD distillation'", ")", "\n", "# NCE distillation", "\n", "parser", ".", "add_argument", "(", "'--feat_dim'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "'feature dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_k'", ",", "default", "=", "16384", ",", "type", "=", "int", ",", "help", "=", "'number of negative samples for NCE'", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_t'", ",", "default", "=", "0.07", ",", "type", "=", "float", ",", "help", "=", "'temperature parameter for softmax'", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_m'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "help", "=", "'momentum for non-parametric updates'", ")", "\n", "\n", "# cosine annealing", "\n", "parser", ".", "add_argument", "(", "'--cosine'", ",", "action", "=", "'store_true'", ",", "help", "=", "'using cosine annealing'", ")", "\n", "\n", "# specify folder", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "'save/'", ",", "help", "=", "'path to save model'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_path'", ",", "type", "=", "str", ",", "default", "=", "'tb/'", ",", "help", "=", "'path to tensorboard'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'/raid/data/IncrementLearn/imagenet/Datasets/MiniImagenet/'", ",", "help", "=", "'path to data root'", ")", "\n", "\n", "# setting for meta-learning", "\n", "parser", ".", "add_argument", "(", "'--n_test_runs'", ",", "type", "=", "int", ",", "default", "=", "600", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of test runs'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_ways'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of classes for doing each classification run'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_shots'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of shots in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_queries'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of query in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_aug_support_samples'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "\n", "help", "=", "'The number of augmented samples for each meta test sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'test_batch_size'", ",", "\n", "help", "=", "'Size of test batch)'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "opt", ".", "dataset", "==", "'CIFAR-FS'", "or", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "        ", "opt", ".", "transform", "=", "'D'", "\n", "\n", "", "if", "'trainval'", "in", "opt", ".", "path_t", ":", "\n", "        ", "opt", ".", "use_trainval", "=", "True", "\n", "", "else", ":", "\n", "        ", "opt", ".", "use_trainval", "=", "False", "\n", "\n", "", "if", "opt", ".", "use_trainval", ":", "\n", "        ", "opt", ".", "trial", "=", "opt", ".", "trial", "+", "'_trainval'", "\n", "\n", "# set the path according to the environment", "\n", "", "if", "not", "opt", ".", "model_path", ":", "\n", "        ", "opt", ".", "model_path", "=", "'./models_distilled'", "\n", "", "if", "not", "opt", ".", "tb_path", ":", "\n", "        ", "opt", ".", "tb_path", "=", "'./tensorboard'", "\n", "", "if", "not", "opt", ".", "data_root", ":", "\n", "        ", "opt", ".", "data_root", "=", "'./data/{}'", ".", "format", "(", "opt", ".", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "data_root", "=", "'{}/{}'", ".", "format", "(", "opt", ".", "data_root", ",", "opt", ".", "dataset", ")", "\n", "", "opt", ".", "data_aug", "=", "True", "\n", "\n", "tags", "=", "opt", ".", "tags", ".", "split", "(", "','", ")", "\n", "opt", ".", "tags", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "tags", ":", "\n", "        ", "opt", ".", "tags", ".", "append", "(", "it", ")", "\n", "\n", "", "iterations", "=", "opt", ".", "lr_decay_epochs", ".", "split", "(", "','", ")", "\n", "opt", ".", "lr_decay_epochs", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "iterations", ":", "\n", "        ", "opt", ".", "lr_decay_epochs", ".", "append", "(", "int", "(", "it", ")", ")", "\n", "\n", "", "opt", ".", "model_name", "=", "'S:{}_T:{}_{}_{}_r:{}_a:{}_b:{}_trans_{}'", ".", "format", "(", "opt", ".", "model_s", ",", "opt", ".", "model_t", ",", "opt", ".", "dataset", ",", "\n", "opt", ".", "distill", ",", "opt", ".", "gamma", ",", "opt", ".", "alpha", ",", "opt", ".", "beta", ",", "\n", "opt", ".", "transform", ")", "\n", "\n", "if", "opt", ".", "cosine", ":", "\n", "        ", "opt", ".", "model_name", "=", "'{}_cosine'", ".", "format", "(", "opt", ".", "model_name", ")", "\n", "\n", "", "opt", ".", "model_name", "=", "'{}_{}'", ".", "format", "(", "opt", ".", "model_name", ",", "opt", ".", "trial", ")", "\n", "\n", "opt", ".", "tb_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tb_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "tb_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "tb_folder", ")", "\n", "\n", "", "opt", ".", "save_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "save_folder", ")", "\n", "\n", "#extras", "\n", "", "opt", ".", "fresh_start", "=", "True", "\n", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.load_teacher": [[204, 212], ["print", "print", "models.util.create_model", "models.util.create_model.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.models.util.create_model"], ["", "def", "load_teacher", "(", "model_path", ",", "model_name", ",", "n_cls", ",", "dataset", "=", "'miniImageNet'", ")", ":", "\n", "    ", "\"\"\"load the teacher model\"\"\"", "\n", "print", "(", "'==> loading teacher model'", ")", "\n", "print", "(", "model_name", ")", "\n", "model", "=", "create_model", "(", "model_name", ",", "n_cls", ",", "dataset", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", "[", "'model'", "]", ")", "\n", "print", "(", "'==> done'", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.main": [[214, 331], ["train_distillation.parse_option", "wandb.init", "wandb.config.update", "wandb.save", "wandb.run.save", "dataloader.get_dataloaders", "copy.deepcopy", "torch.CrossEntropyLoss", "distill.criterion.DistillKL", "distill.criterion.DistillKL", "torch.SGD", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "train_distillation.generate_final_report", "os.path.join", "os.path.isfile", "parse_option.path_t.split", "model_t.append", "copy.deepcopy.parameters", "copy.deepcopy.cuda", "criterion_cls.cuda.cuda", "criterion_div.cuda.cuda", "criterion_kd.cuda.cuda", "print", "time.time", "train_distillation.train", "time.time", "print", "time.time", "eval.meta_eval.meta_test", "print", "wandb.log", "os.remove", "print", "model_t.append", "train_distillation.load_teacher", "m.cuda", "scheduler.step", "util.adjust_learning_rate", "time.time", "print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "parse_option.model_path.split", "train_distillation.load_teacher", "copy.deepcopy.state_dict", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.parse_option", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.generate_final_report", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.train", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.load_teacher", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.adjust_learning_rate", "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.load_teacher"], ["", "def", "main", "(", ")", ":", "\n", "    ", "best_acc", "=", "0", "\n", "\n", "opt", "=", "parse_option", "(", ")", "\n", "wandb", ".", "init", "(", "project", "=", "opt", ".", "model_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "tags", "=", "opt", ".", "tags", ")", "\n", "wandb", ".", "config", ".", "update", "(", "opt", ")", "\n", "wandb", ".", "save", "(", "'*.py'", ")", "\n", "wandb", ".", "run", ".", "save", "(", ")", "\n", "\n", "\n", "# dataloader", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "n_cls", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "# model", "\n", "model_t", "=", "[", "]", "\n", "if", "(", "\",\"", "in", "opt", ".", "path_t", ")", ":", "\n", "        ", "for", "path", "in", "opt", ".", "path_t", ".", "split", "(", "\",\"", ")", ":", "\n", "            ", "model_t", ".", "append", "(", "load_teacher", "(", "path", ",", "opt", ".", "model_t", ",", "n_cls", ",", "opt", ".", "dataset", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "model_t", ".", "append", "(", "load_teacher", "(", "opt", ".", "path_t", ",", "opt", ".", "model_t", ",", "n_cls", ",", "opt", ".", "dataset", ")", ")", "\n", "\n", "#     model_s = create_model(opt.model_s, n_cls, opt.dataset, dropout=0.4)", "\n", "#     model_s = Wrapper(model_, opt)", "\n", "", "model_s", "=", "copy", ".", "deepcopy", "(", "model_t", "[", "0", "]", ")", "\n", "\n", "criterion_cls", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion_div", "=", "DistillKL", "(", "opt", ".", "kd_T", ")", "\n", "criterion_kd", "=", "DistillKL", "(", "opt", ".", "kd_T", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model_s", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "learning_rate", ",", "\n", "momentum", "=", "opt", ".", "momentum", ",", "\n", "weight_decay", "=", "opt", ".", "weight_decay", ")", "\n", "\n", "\n", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "for", "m", "in", "model_t", ":", "\n", "            ", "m", ".", "cuda", "(", ")", "\n", "", "model_s", ".", "cuda", "(", ")", "\n", "criterion_cls", "=", "criterion_cls", ".", "cuda", "(", ")", "\n", "criterion_div", "=", "criterion_div", ".", "cuda", "(", ")", "\n", "criterion_kd", "=", "criterion_kd", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "\n", "", "meta_test_acc", "=", "0", "\n", "meta_test_std", "=", "0", "\n", "# routine: supervised model distillation", "\n", "for", "epoch", "in", "range", "(", "1", ",", "opt", ".", "epochs", "+", "1", ")", ":", "\n", "\n", "        ", "if", "opt", ".", "cosine", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "adjust_learning_rate", "(", "epoch", ",", "opt", ",", "optimizer", ")", "\n", "", "print", "(", "\"==> training...\"", ")", "\n", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_loss", "=", "train", "(", "epoch", ",", "train_loader", ",", "model_s", ",", "model_t", ",", "criterion_cls", ",", "criterion_div", ",", "criterion_kd", ",", "optimizer", ",", "opt", ")", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "val_acc", "=", "0", "\n", "val_loss", "=", "0", "\n", "meta_val_acc", "=", "0", "\n", "meta_val_std", "=", "0", "\n", "#         val_acc, val_acc_top5, val_loss = validate(val_loader, model_s, criterion_cls, opt)", "\n", "\n", "\n", "#         #evaluate", "\n", "#         start = time.time()", "\n", "#         meta_val_acc, meta_val_std = meta_test(model_s, meta_valloader)", "\n", "#         test_time = time.time() - start", "\n", "#         print('Meta Val Acc: {:.4f}, Meta Val std: {:.4f}, Time: {:.1f}'.format(meta_val_acc, meta_val_std, test_time))", "\n", "\n", "#evaluate", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "meta_test_acc", ",", "meta_test_std", "=", "meta_test", "(", "model_s", ",", "meta_testloader", ",", "use_logit", "=", "False", ")", "\n", "test_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Meta Test Acc: {:.4f}, Meta Test std: {:.4f}, Time: {:.1f}'", ".", "format", "(", "meta_test_acc", ",", "meta_test_std", ",", "test_time", ")", ")", "\n", "\n", "\n", "# regular saving", "\n", "if", "epoch", "%", "opt", ".", "save_freq", "==", "0", "or", "epoch", "==", "opt", ".", "epochs", ":", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "model_s", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_folder", ",", "'model_'", "+", "str", "(", "wandb", ".", "run", ".", "name", ")", "+", "'.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "\n", "#wandb saving", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "wandb", ".", "run", ".", "dir", ",", "\"model.pth\"", ")", ")", "\n", "\n", "", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'Train Acc'", ":", "train_acc", ",", "\n", "'Train Loss'", ":", "train_loss", ",", "\n", "'Val Acc'", ":", "val_acc", ",", "\n", "'Val Loss'", ":", "val_loss", ",", "\n", "'Meta Test Acc'", ":", "meta_test_acc", ",", "\n", "'Meta Test std'", ":", "meta_test_std", ",", "\n", "'Meta Val Acc'", ":", "meta_val_acc", ",", "\n", "'Meta Val std'", ":", "meta_val_std", "\n", "}", ")", "\n", "\n", "#final report ", "\n", "", "generate_final_report", "(", "model_s", ",", "opt", ",", "wandb", ")", "\n", "\n", "#remove output.txt log file ", "\n", "output_log_file", "=", "os", ".", "path", ".", "join", "(", "wandb", ".", "run", ".", "dir", ",", "\"output.log\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_log_file", ")", ":", "\n", "        ", "os", ".", "remove", "(", "output_log_file", ")", "\n", "", "else", ":", "## Show an error ##", "\n", "        ", "print", "(", "\"Error: %s file not found\"", "%", "output_log_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.train": [[335, 419], ["model_s.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "print", "m.eval", "tqdm.tqdm", "enumerate", "util.AverageMeter.update", "inputs.cuda.float", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "x.transpose().flip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_s", "criterion_div", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "util.AverageMeter.update", "time.time", "pbar.set_postfix", "len", "inputs.cuda.cuda", "targets.cuda.cuda", "inputs.cuda.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "loss.item", "inputs.cuda.size", "inputs.cuda.size", "inputs.cuda.size", "time.time", "x.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "time.time", "util.AverageMeter.avg.cpu().numpy", "util.AverageMeter.avg.cpu().numpy", "util.AverageMeter.avg.cpu", "util.AverageMeter.avg.cpu"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.train", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.accuracy", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "train", "(", "epoch", ",", "train_loader", ",", "model_s", ",", "model_t", ",", "criterion_cls", ",", "criterion_div", ",", "criterion_kd", ",", "optimizer", ",", "opt", ")", ":", "\n", "    ", "\"\"\"One epoch training\"\"\"", "\n", "model_s", ".", "train", "(", ")", "\n", "for", "m", "in", "model_t", ":", "\n", "        ", "m", ".", "eval", "(", ")", "\n", "\n", "", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "tqdm", "(", "train_loader", ",", "total", "=", "len", "(", "train_loader", ")", ")", "as", "pbar", ":", "\n", "        ", "for", "idx", ",", "data", "in", "enumerate", "(", "pbar", ")", ":", "\n", "\n", "            ", "inputs", ",", "targets", ",", "_", "=", "data", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "inputs", ".", "float", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "", "batch_size", "=", "inputs", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "inputs", "\n", "\n", "x_90", "=", "x", ".", "transpose", "(", "2", ",", "3", ")", ".", "flip", "(", "2", ")", "\n", "#             x_180 = x.flip(2).flip(3)", "\n", "#             x_270 = x.flip(2).transpose(2,3)", "\n", "#             inputs_aug = torch.cat((x_90, x_180, x_270),0)", "\n", "\n", "\n", "#             sampled_inputs = inputs_aug[torch.randperm(3*batch_size)[:batch_size]]", "\n", "inputs_all", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_180", ",", "x_90", ",", "x_270", ")", ",", "0", ")", "\n", "\n", "# ===================forward=====================", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "(", "_", ",", "_", ",", "_", ",", "_", ",", "feat_t", ")", ",", "(", "logit_t", ",", "rot_t", ")", "=", "model_t", "[", "0", "]", "(", "inputs_all", "[", ":", "batch_size", "]", ",", "rot", "=", "True", ")", "\n", "\n", "", "(", "_", ",", "_", ",", "_", ",", "_", ",", "feat_s_all", ")", ",", "(", "logit_s_all", ",", "rot_s_all", ")", "=", "model_s", "(", "inputs_all", "[", ":", "4", "*", "batch_size", "]", ",", "rot", "=", "True", ")", "\n", "\n", "loss_div", "=", "criterion_div", "(", "logit_s_all", "[", ":", "batch_size", "]", ",", "logit_t", "[", ":", "batch_size", "]", ")", "\n", "\n", "d_90", "=", "logit_s_all", "[", "batch_size", ":", "2", "*", "batch_size", "]", "-", "logit_s_all", "[", ":", "batch_size", "]", "\n", "loss_a", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "(", "d_90", ")", "**", "2", ",", "dim", "=", "1", ")", ")", ")", "\n", "#             d_180 = logit_s_all[2*batch_size:3*batch_size] - logit_s_all[:batch_size]", "\n", "#             loss_a += torch.mean(torch.sqrt(torch.sum((d_180)**2, dim=1)))", "\n", "#             d_270 = logit_s_all[3*batch_size:4*batch_size] - logit_s_all[:batch_size]", "\n", "#             loss_a += torch.mean(torch.sqrt(torch.sum((d_270)**2, dim=1)))", "\n", "\n", "\n", "if", "(", "torch", ".", "isnan", "(", "loss_a", ")", ".", "any", "(", ")", ")", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_div", "+", "opt", ".", "gamma", "*", "loss_a", "/", "3", "\n", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "logit_s_all", "[", ":", "batch_size", "]", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# ===================backward=====================", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# ===================meters=====================", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "pbar", ".", "set_postfix", "(", "{", "\"Acc@1\"", ":", "'{0:.2f}'", ".", "format", "(", "top1", ".", "avg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Acc@5\"", ":", "'{0:.2f}'", ".", "format", "(", "top5", ".", "avg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "2", ")", ",", "\n", "\"Loss\"", ":", "'{0:.2f}'", ".", "format", "(", "losses", ".", "avg", ",", "2", ")", ",", "\n", "}", ")", "\n", "\n", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_distillation.generate_final_report": [[421, 480], ["dataloader.get_dataloaders", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "print", "print", "print", "print", "wandb.log", "dataloader.get_dataloaders", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "print", "print", "print", "print", "wandb.log"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test"], ["", "def", "generate_final_report", "(", "model", ",", "opt", ",", "wandb", ")", ":", "\n", "\n", "\n", "    ", "opt", ".", "n_shots", "=", "1", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "_", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "#validate", "\n", "meta_val_acc", ",", "meta_val_std", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "True", ")", "\n", "\n", "meta_val_acc_feat", ",", "meta_val_std_feat", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "#evaluate", "\n", "meta_test_acc", ",", "meta_test_std", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "True", ")", "\n", "\n", "meta_test_acc_feat", ",", "meta_test_std_feat", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "print", "(", "'Meta Val Acc : {:.4f}, Meta Val std: {:.4f}'", ".", "format", "(", "meta_val_acc", ",", "meta_val_std", ")", ")", "\n", "print", "(", "'Meta Val Acc (feat): {:.4f}, Meta Val std (feat): {:.4f}'", ".", "format", "(", "meta_val_acc_feat", ",", "meta_val_std_feat", ")", ")", "\n", "print", "(", "'Meta Test Acc: {:.4f}, Meta Test std: {:.4f}'", ".", "format", "(", "meta_test_acc", ",", "meta_test_std", ")", ")", "\n", "print", "(", "'Meta Test Acc (feat): {:.4f}, Meta Test std (feat): {:.4f}'", ".", "format", "(", "meta_test_acc_feat", ",", "meta_test_std_feat", ")", ")", "\n", "\n", "\n", "wandb", ".", "log", "(", "{", "'Final Meta Test Acc @1'", ":", "meta_test_acc", ",", "\n", "'Final Meta Test std @1'", ":", "meta_test_std", ",", "\n", "'Final Meta Test Acc  (feat) @1'", ":", "meta_test_acc_feat", ",", "\n", "'Final Meta Test std  (feat) @1'", ":", "meta_test_std_feat", ",", "\n", "'Final Meta Val Acc @1'", ":", "meta_val_acc", ",", "\n", "'Final Meta Val std @1'", ":", "meta_val_std", ",", "\n", "'Final Meta Val Acc   (feat) @1'", ":", "meta_val_acc_feat", ",", "\n", "'Final Meta Val std   (feat) @1'", ":", "meta_val_std_feat", "\n", "}", ")", "\n", "\n", "\n", "opt", ".", "n_shots", "=", "5", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "_", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "#validate", "\n", "meta_val_acc", ",", "meta_val_std", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "True", ")", "\n", "\n", "meta_val_acc_feat", ",", "meta_val_std_feat", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "#evaluate", "\n", "meta_test_acc", ",", "meta_test_std", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "True", ")", "\n", "\n", "meta_test_acc_feat", ",", "meta_test_std_feat", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "print", "(", "'Meta Val Acc : {:.4f}, Meta Val std: {:.4f}'", ".", "format", "(", "meta_val_acc", ",", "meta_val_std", ")", ")", "\n", "print", "(", "'Meta Val Acc (feat): {:.4f}, Meta Val std (feat): {:.4f}'", ".", "format", "(", "meta_val_acc_feat", ",", "meta_val_std_feat", ")", ")", "\n", "print", "(", "'Meta Test Acc: {:.4f}, Meta Test std: {:.4f}'", ".", "format", "(", "meta_test_acc", ",", "meta_test_std", ")", ")", "\n", "print", "(", "'Meta Test Acc (feat): {:.4f}, Meta Test std (feat): {:.4f}'", ".", "format", "(", "meta_test_acc_feat", ",", "meta_test_std_feat", ")", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "'Final Meta Test Acc @5'", ":", "meta_test_acc", ",", "\n", "'Final Meta Test std @5'", ":", "meta_test_std", ",", "\n", "'Final Meta Test Acc  (feat) @5'", ":", "meta_test_acc_feat", ",", "\n", "'Final Meta Test std  (feat) @5'", ":", "meta_test_std_feat", ",", "\n", "'Final Meta Val Acc @5'", ":", "meta_val_acc", ",", "\n", "'Final Meta Val std @5'", ":", "meta_val_std", ",", "\n", "'Final Meta Val Acc   (feat) @5'", ":", "meta_val_acc_feat", ",", "\n", "'Final Meta Val std   (feat) @5'", ":", "meta_val_std_feat", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders": [[27, 160], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.cifar.CIFAR100_toy", "dataset.cifar.CIFAR100_toy", "dataset.mini_imagenet.ImageNet", "dataset.mini_imagenet.ImageNet", "dataset.mini_imagenet.MetaImageNet", "dataset.mini_imagenet.MetaImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.tiered_imagenet.TieredImageNet", "dataset.tiered_imagenet.TieredImageNet", "dataset.tiered_imagenet.MetaTieredImageNet", "dataset.tiered_imagenet.MetaTieredImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "NotImplementedError", "dataset.cifar.CIFAR100", "dataset.cifar.CIFAR100", "dataset.cifar.MetaCIFAR100", "dataset.cifar.MetaCIFAR100", "dataset.cifar.MetaCIFAR100", "NotImplementedError"], "function", ["None"], ["def", "get_dataloaders", "(", "opt", ")", ":", "\n", "# dataloader", "\n", "    ", "train_partition", "=", "'trainval'", "if", "opt", ".", "use_trainval", "else", "'train'", "\n", "\n", "if", "opt", ".", "dataset", "==", "'toy'", ":", "\n", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "'D'", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "CIFAR100_toy", "(", "args", "=", "opt", ",", "partition", "=", "train_partition", ",", "transform", "=", "train_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "val_loader", "=", "DataLoader", "(", "CIFAR100_toy", "(", "args", "=", "opt", ",", "partition", "=", "'train'", ",", "transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", "//", "2", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", "//", "2", ")", "\n", "\n", "#         train_trans, test_trans = transforms_test_options[opt.transform]", "\n", "\n", "#         meta_testloader = DataLoader(MetaCIFAR100(args=opt, partition='test',", "\n", "#                                                   train_transform=train_trans,", "\n", "#                                                   test_transform=test_trans),", "\n", "#                                      batch_size=opt.test_batch_size, shuffle=False, drop_last=False,", "\n", "#                                      num_workers=opt.num_workers)", "\n", "#         meta_valloader = DataLoader(MetaCIFAR100(args=opt, partition='val', ", "\n", "#                                                  train_transform=train_trans,", "\n", "#                                                  test_transform=test_trans),", "\n", "#                                     batch_size=opt.test_batch_size, shuffle=False, drop_last=False,", "\n", "#                                     num_workers=opt.num_workers)", "\n", "n_cls", "=", "5", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "5", ",", "5", ",", "n_cls", "\n", "\n", "\n", "", "if", "opt", ".", "dataset", "==", "'miniImageNet'", ":", "\n", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "opt", ".", "transform", "]", "\n", "train_loader", "=", "DataLoader", "(", "ImageNet", "(", "args", "=", "opt", ",", "partition", "=", "train_partition", ",", "transform", "=", "train_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "val_loader", "=", "DataLoader", "(", "ImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", "//", "2", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", "//", "2", ")", "\n", "\n", "train_trans", ",", "test_trans", "=", "transforms_test_options", "[", "opt", ".", "transform", "]", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "80", "\n", "", "else", ":", "\n", "            ", "n_cls", "=", "64", "\n", "", "", "elif", "opt", ".", "dataset", "==", "'tieredImageNet'", ":", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "opt", ".", "transform", "]", "\n", "train_loader", "=", "DataLoader", "(", "TieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "train_partition", ",", "transform", "=", "train_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "val_loader", "=", "DataLoader", "(", "TieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'train_phase_val'", ",", "transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", "//", "2", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", "//", "2", ")", "\n", "\n", "train_trans", ",", "test_trans", "=", "transforms_test_options", "[", "opt", ".", "transform", "]", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaTieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaTieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "448", "\n", "", "else", ":", "\n", "            ", "n_cls", "=", "351", "\n", "", "", "elif", "opt", ".", "dataset", "==", "'CIFAR-FS'", "or", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "'D'", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "CIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "train_partition", ",", "transform", "=", "train_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "val_loader", "=", "DataLoader", "(", "CIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'train'", ",", "transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", "//", "2", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", "//", "2", ")", "\n", "\n", "train_trans", ",", "test_trans", "=", "transforms_test_options", "[", "opt", ".", "transform", "]", "\n", "\n", "\n", "#         ns = [opt.n_shots].copy()", "\n", "#         opt.n_ways = 32", "\n", "#         opt.n_shots = 5", "\n", "#         opt.n_aug_support_samples = 2", "\n", "meta_trainloader", "=", "DataLoader", "(", "MetaCIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'train'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "\n", "#         opt.n_ways = 5", "\n", "#         opt.n_shots = ns[0]", "\n", "#         print(opt.n_shots)", "\n", "#         opt.n_aug_support_samples = 5", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaCIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaCIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "80", "\n", "", "else", ":", "\n", "            ", "if", "opt", ".", "dataset", "==", "'CIFAR-FS'", ":", "\n", "                ", "n_cls", "=", "64", "\n", "", "elif", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "                ", "n_cls", "=", "60", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'dataset not supported: {}'", ".", "format", "(", "opt", ".", "dataset", ")", ")", "\n", "#         return train_loader, val_loader, meta_trainloader, meta_testloader, meta_valloader, n_cls        ", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "opt", ".", "dataset", ")", "\n", "\n", "", "return", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "n_cls", "", "", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.LabelSmoothing.__init__": [[15, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.LabelSmoothing.forward": [[24, 32], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.BCEWithLogitsLoss.__init__": [[35, 43], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ",", "pos_weight", "=", "None", ",", "num_classes", "=", "64", ")", ":", "\n", "        ", "super", "(", "BCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", "weight", "=", "weight", ",", "\n", "size_average", "=", "size_average", ",", "\n", "reduce", "=", "reduce", ",", "\n", "reduction", "=", "reduction", ",", "\n", "pos_weight", "=", "pos_weight", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.BCEWithLogitsLoss.forward": [[43, 46], ["F.one_hot", "util.BCEWithLogitsLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target_onehot", "=", "F", ".", "one_hot", "(", "target", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "return", "self", ".", "criterion", "(", "input", ",", "target_onehot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.AverageMeter.__init__": [[50, 52], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.AverageMeter.reset": [[53, 58], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.AverageMeter.update": [[59, 64], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.__init__": [[96, 117], ["open", "util.Logger.file.readline", "util.Logger.rstrip().split", "enumerate", "util.Logger.file.close", "open", "open", "numbers.rstrip().split.rstrip().split.rstrip().split", "range", "util.Logger.rstrip", "len", "util.Logger.numbers[].append", "numbers.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.close", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["def", "__init__", "(", "self", ",", "fpath", ",", "title", "=", "None", ",", "resume", "=", "False", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "self", ".", "resume", "=", "resume", "\n", "self", ".", "title", "=", "''", "if", "title", "==", "None", "else", "title", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "if", "resume", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'r'", ")", "\n", "name", "=", "self", ".", "file", ".", "readline", "(", ")", "\n", "self", ".", "names", "=", "name", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "=", "{", "}", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "                    ", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "for", "numbers", "in", "self", ".", "file", ":", "\n", "                    ", "numbers", "=", "numbers", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "numbers", ")", ")", ":", "\n", "                        ", "self", ".", "numbers", "[", "self", ".", "names", "[", "i", "]", "]", ".", "append", "(", "numbers", "[", "i", "]", ")", "\n", "", "", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'a'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.set_names": [[118, 130], ["enumerate", "util.Logger.file.write", "util.Logger.file.flush", "util.Logger.file.write", "util.Logger.file.write"], "methods", ["None"], ["", "", "", "def", "set_names", "(", "self", ",", "names", ")", ":", "\n", "        ", "if", "self", ".", "resume", ":", "\n", "            ", "pass", "\n", "# initialize numbers as empty list", "\n", "", "self", ".", "numbers", "=", "{", "}", "\n", "self", ".", "names", "=", "names", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "name", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append": [[132, 140], ["enumerate", "util.Logger.file.write", "util.Logger.file.flush", "len", "len", "util.Logger.file.write", "util.Logger.file.write", "util.Logger.numbers[].append"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "def", "append", "(", "self", ",", "numbers", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "names", ")", "==", "len", "(", "numbers", ")", ",", "'Numbers do not match names'", "\n", "for", "index", ",", "num", "in", "enumerate", "(", "numbers", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "\"{0:.6f}\"", ".", "format", "(", "num", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "self", ".", "names", "[", "index", "]", "]", ".", "append", "(", "num", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.plot": [[141, 149], ["enumerate", "matplotlib.legend", "matplotlib.grid", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.plot"], ["", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "names", "=", "self", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "self", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "            ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "plt", ".", "legend", "(", "[", "self", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.close": [[151, 154], ["util.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.adjust_learning_rate": [[66, 73], ["numpy.sum", "numpy.asarray"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "epoch", ",", "opt", ",", "optimizer", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by decay rate every steep step\"\"\"", "\n", "steps", "=", "np", ".", "sum", "(", "epoch", ">", "np", ".", "asarray", "(", "opt", ".", "lr_decay_epochs", ")", ")", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "new_lr", "=", "opt", ".", "learning_rate", "*", "(", "opt", ".", "lr_decay_rate", "**", "steps", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.accuracy": [[75, 90], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.util.generate_final_report": [[160, 219], ["dataloader.get_dataloaders", "meta_test", "meta_test", "meta_test", "meta_test", "print", "print", "print", "print", "wandb.log", "dataloader.get_dataloaders", "meta_test", "meta_test", "meta_test", "meta_test", "print", "print", "print", "print", "wandb.log"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test"], ["", "", "", "def", "generate_final_report", "(", "model", ",", "opt", ",", "wandb", ")", ":", "\n", "    ", "from", "eval", ".", "meta_eval", "import", "meta_test", "\n", "\n", "opt", ".", "n_shots", "=", "1", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "_", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "#validate", "\n", "meta_val_acc", ",", "meta_val_std", "=", "meta_test", "(", "model", ",", "meta_valloader", ")", "\n", "\n", "meta_val_acc_feat", ",", "meta_val_std_feat", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "#evaluate", "\n", "meta_test_acc", ",", "meta_test_std", "=", "meta_test", "(", "model", ",", "meta_testloader", ")", "\n", "\n", "meta_test_acc_feat", ",", "meta_test_std_feat", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "print", "(", "'Meta Val Acc : {:.4f}, Meta Val std: {:.4f}'", ".", "format", "(", "meta_val_acc", ",", "meta_val_std", ")", ")", "\n", "print", "(", "'Meta Val Acc (feat): {:.4f}, Meta Val std (feat): {:.4f}'", ".", "format", "(", "meta_val_acc_feat", ",", "meta_val_std_feat", ")", ")", "\n", "print", "(", "'Meta Test Acc: {:.4f}, Meta Test std: {:.4f}'", ".", "format", "(", "meta_test_acc", ",", "meta_test_std", ")", ")", "\n", "print", "(", "'Meta Test Acc (feat): {:.4f}, Meta Test std (feat): {:.4f}'", ".", "format", "(", "meta_test_acc_feat", ",", "meta_test_std_feat", ")", ")", "\n", "\n", "\n", "wandb", ".", "log", "(", "{", "'Final Meta Test Acc @1'", ":", "meta_test_acc", ",", "\n", "'Final Meta Test std @1'", ":", "meta_test_std", ",", "\n", "'Final Meta Test Acc  (feat) @1'", ":", "meta_test_acc_feat", ",", "\n", "'Final Meta Test std  (feat) @1'", ":", "meta_test_std_feat", ",", "\n", "'Final Meta Val Acc @1'", ":", "meta_val_acc", ",", "\n", "'Final Meta Val std @1'", ":", "meta_val_std", ",", "\n", "'Final Meta Val Acc   (feat) @1'", ":", "meta_val_acc_feat", ",", "\n", "'Final Meta Val std   (feat) @1'", ":", "meta_val_std_feat", "\n", "}", ")", "\n", "\n", "\n", "opt", ".", "n_shots", "=", "5", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "_", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "#validate", "\n", "meta_val_acc", ",", "meta_val_std", "=", "meta_test", "(", "model", ",", "meta_valloader", ")", "\n", "\n", "meta_val_acc_feat", ",", "meta_val_std_feat", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "#evaluate", "\n", "meta_test_acc", ",", "meta_test_std", "=", "meta_test", "(", "model", ",", "meta_testloader", ")", "\n", "\n", "meta_test_acc_feat", ",", "meta_test_std_feat", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "print", "(", "'Meta Val Acc : {:.4f}, Meta Val std: {:.4f}'", ".", "format", "(", "meta_val_acc", ",", "meta_val_std", ")", ")", "\n", "print", "(", "'Meta Val Acc (feat): {:.4f}, Meta Val std (feat): {:.4f}'", ".", "format", "(", "meta_val_acc_feat", ",", "meta_val_std_feat", ")", ")", "\n", "print", "(", "'Meta Test Acc: {:.4f}, Meta Test std: {:.4f}'", ".", "format", "(", "meta_test_acc", ",", "meta_test_std", ")", ")", "\n", "print", "(", "'Meta Test Acc (feat): {:.4f}, Meta Test std (feat): {:.4f}'", ".", "format", "(", "meta_test_acc_feat", ",", "meta_test_std_feat", ")", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "'Final Meta Test Acc @5'", ":", "meta_test_acc", ",", "\n", "'Final Meta Test std @5'", ":", "meta_test_std", ",", "\n", "'Final Meta Test Acc  (feat) @5'", ":", "meta_test_acc_feat", ",", "\n", "'Final Meta Test std  (feat) @5'", ":", "meta_test_std_feat", ",", "\n", "'Final Meta Val Acc @5'", ":", "meta_val_acc", ",", "\n", "'Final Meta Val std @5'", ":", "meta_val_std", ",", "\n", "'Final Meta Val Acc   (feat) @5'", ":", "meta_val_acc_feat", ",", "\n", "'Final Meta Val std   (feat) @5'", ":", "meta_val_std_feat", "\n", "}", ")", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.get_freer_gpu": [[38, 42], ["os.system", "numpy.argmax", "int", "open().readlines", "x.split", "open"], "function", ["None"], ["def", "get_freer_gpu", "(", ")", ":", "\n", "    ", "os", ".", "system", "(", "'nvidia-smi -q -d Memory |grep -A4 GPU|grep Free >tmp'", ")", "\n", "memory_available", "=", "[", "int", "(", "x", ".", "split", "(", ")", "[", "2", "]", ")", "for", "x", "in", "open", "(", "'tmp'", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "return", "np", ".", "argmax", "(", "memory_available", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.parse_option": [[47, 163], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.lr_decay_epochs.split", "list", "parser.parse_args.tags.split", "list", "os.path.join", "os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "parser.parse_args.lr_decay_epochs.append", "parser.parse_args.tags.append", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "int"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["def", "parse_option", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'argument for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--eval_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'meta-eval frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_freq'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'tb frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of training epochs'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'60,80'", ",", "help", "=", "'where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--simclr'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'use simple contrastive learning representation'", ")", "\n", "parser", ".", "add_argument", "(", "'--ssl'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'use self supervised learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--tags'", ",", "type", "=", "str", ",", "default", "=", "\"gen0, ssl\"", ",", "help", "=", "'add tags for the experiment'", ")", "\n", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'resnet12'", ",", "choices", "=", "model_pool", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'miniImageNet'", ",", "choices", "=", "[", "'miniImageNet'", ",", "'tieredImageNet'", ",", "\n", "'CIFAR-FS'", ",", "'FC100'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--transform'", ",", "type", "=", "str", ",", "default", "=", "'A'", ",", "choices", "=", "transforms_list", ")", "\n", "parser", ".", "add_argument", "(", "'--use_trainval'", ",", "type", "=", "bool", ",", "help", "=", "'use trainval set'", ")", "\n", "\n", "# cosine annealing", "\n", "parser", ".", "add_argument", "(", "'--cosine'", ",", "action", "=", "'store_true'", ",", "help", "=", "'using cosine annealing'", ")", "\n", "\n", "# specify folder", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "'save/'", ",", "help", "=", "'path to save model'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_path'", ",", "type", "=", "str", ",", "default", "=", "'tb/'", ",", "help", "=", "'path to tensorboard'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'/raid/data/IncrementLearn/imagenet/Datasets/MiniImagenet/'", ",", "help", "=", "'path to data root'", ")", "\n", "\n", "# meta setting", "\n", "parser", ".", "add_argument", "(", "'--n_test_runs'", ",", "type", "=", "int", ",", "default", "=", "600", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of test runs'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_ways'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of classes for doing each classification run'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_shots'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of shots in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_queries'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of query in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_aug_support_samples'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "\n", "help", "=", "'The number of augmented samples for each meta test sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'test_batch_size'", ",", "\n", "help", "=", "'Size of test batch)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--trial'", ",", "type", "=", "str", ",", "default", "=", "'1'", ",", "help", "=", "'the experiment id'", ")", "\n", "\n", "\n", "\n", "#hyper parameters", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "2", ",", "help", "=", "'loss cofficient for ssl loss'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "opt", ".", "dataset", "==", "'CIFAR-FS'", "or", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "        ", "opt", ".", "transform", "=", "'D'", "\n", "\n", "", "if", "opt", ".", "use_trainval", ":", "\n", "        ", "opt", ".", "trial", "=", "opt", ".", "trial", "+", "'_trainval'", "\n", "\n", "# set the path according to the environment", "\n", "", "if", "not", "opt", ".", "model_path", ":", "\n", "        ", "opt", ".", "model_path", "=", "'./models_pretrained'", "\n", "", "if", "not", "opt", ".", "tb_path", ":", "\n", "        ", "opt", ".", "tb_path", "=", "'./tensorboard'", "\n", "", "if", "not", "opt", ".", "data_root", ":", "\n", "        ", "opt", ".", "data_root", "=", "'./data/{}'", ".", "format", "(", "opt", ".", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "data_root", "=", "'{}/{}'", ".", "format", "(", "opt", ".", "data_root", ",", "opt", ".", "dataset", ")", "\n", "", "opt", ".", "data_aug", "=", "True", "\n", "\n", "iterations", "=", "opt", ".", "lr_decay_epochs", ".", "split", "(", "','", ")", "\n", "opt", ".", "lr_decay_epochs", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "iterations", ":", "\n", "        ", "opt", ".", "lr_decay_epochs", ".", "append", "(", "int", "(", "it", ")", ")", "\n", "\n", "", "tags", "=", "opt", ".", "tags", ".", "split", "(", "','", ")", "\n", "opt", ".", "tags", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "tags", ":", "\n", "        ", "opt", ".", "tags", ".", "append", "(", "it", ")", "\n", "\n", "", "opt", ".", "model_name", "=", "'{}_{}_lr_{}_decay_{}_trans_{}'", ".", "format", "(", "opt", ".", "model", ",", "opt", ".", "dataset", ",", "opt", ".", "learning_rate", ",", "\n", "opt", ".", "weight_decay", ",", "opt", ".", "transform", ")", "\n", "\n", "if", "opt", ".", "cosine", ":", "\n", "        ", "opt", ".", "model_name", "=", "'{}_cosine'", ".", "format", "(", "opt", ".", "model_name", ")", "\n", "\n", "", "if", "opt", ".", "adam", ":", "\n", "        ", "opt", ".", "model_name", "=", "'{}_useAdam'", ".", "format", "(", "opt", ".", "model_name", ")", "\n", "\n", "", "opt", ".", "model_name", "=", "'{}_trial_{}'", ".", "format", "(", "opt", ".", "model_name", ",", "opt", ".", "trial", ")", "\n", "\n", "opt", ".", "tb_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tb_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "tb_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "tb_folder", ")", "\n", "\n", "", "opt", ".", "save_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "save_folder", ")", "\n", "\n", "", "opt", ".", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "\n", "#extras", "\n", "opt", ".", "fresh_start", "=", "True", "\n", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.main": [[165, 278], ["train_selfsupervison.parse_option", "wandb.init", "wandb.config.update", "wandb.save", "wandb.run.save", "dataloader.get_dataloaders", "models.util.create_model", "wandb.watch", "torch.CrossEntropyLoss", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "train_selfsupervison.generate_final_report", "os.path.join", "os.path.isfile", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "print", "torch.SGD", "nn.DataParallel.cuda", "criterion.cuda.cuda", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "print", "time.time", "train_selfsupervison.train", "time.time", "print", "time.time", "print", "time.time", "print", "wandb.log", "os.remove", "print", "nn.DataParallel.parameters", "nn.DataParallel.parameters", "torch.DataParallel", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "util.adjust_learning_rate", "time.time", "time.time", "print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "parse_option.model_path.split", "optim.SGD.state_dict", "nn.DataParallel.state_dict", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.parse_option", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.models.util.create_model", "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.generate_final_report", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.train", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.adjust_learning_rate"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "opt", "=", "parse_option", "(", ")", "\n", "wandb", ".", "init", "(", "project", "=", "opt", ".", "model_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ",", "tags", "=", "opt", ".", "tags", ")", "\n", "wandb", ".", "config", ".", "update", "(", "opt", ")", "\n", "wandb", ".", "save", "(", "'*.py'", ")", "\n", "wandb", ".", "run", ".", "save", "(", ")", "\n", "\n", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "n_cls", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "# model", "\n", "model", "=", "create_model", "(", "opt", ".", "model", ",", "n_cls", ",", "opt", ".", "dataset", ")", "\n", "wandb", ".", "watch", "(", "model", ")", "\n", "\n", "# optimizer", "\n", "if", "opt", ".", "adam", ":", "\n", "        ", "print", "(", "\"Adam\"", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "learning_rate", ",", "\n", "weight_decay", "=", "0.0005", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"SGD\"", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "learning_rate", ",", "\n", "momentum", "=", "opt", ".", "momentum", ",", "\n", "weight_decay", "=", "opt", ".", "weight_decay", ")", "\n", "\n", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "opt", ".", "n_gpu", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# set cosine annealing scheduler", "\n", "", "if", "opt", ".", "cosine", ":", "\n", "        ", "eta_min", "=", "opt", ".", "learning_rate", "*", "(", "opt", ".", "lr_decay_rate", "**", "3", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "opt", ".", "epochs", ",", "eta_min", ",", "-", "1", ")", "\n", "\n", "# routine: supervised pre-training", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "opt", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "if", "opt", ".", "cosine", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "adjust_learning_rate", "(", "epoch", ",", "opt", ",", "optimizer", ")", "\n", "", "print", "(", "\"==> training...\"", ")", "\n", "\n", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_loss", "=", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "opt", ")", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "\n", "val_acc", ",", "val_acc_top5", ",", "val_loss", "=", "0", ",", "0", ",", "0", "#validate(val_loader, model, criterion, opt)", "\n", "\n", "\n", "#validate", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "meta_val_acc", ",", "meta_val_std", "=", "0", ",", "0", "#meta_test(model, meta_valloader)", "\n", "test_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Meta Val Acc : {:.4f}, Meta Val std: {:.4f}, Time: {:.1f}'", ".", "format", "(", "meta_val_acc", ",", "meta_val_std", ",", "test_time", ")", ")", "\n", "\n", "#evaluate", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "meta_test_acc", ",", "meta_test_std", "=", "0", ",", "0", "#meta_test(model, meta_testloader)", "\n", "test_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Meta Test Acc: {:.4f}, Meta Test std: {:.4f}, Time: {:.1f}'", ".", "format", "(", "meta_test_acc", ",", "meta_test_std", ",", "test_time", ")", ")", "\n", "\n", "\n", "# regular saving", "\n", "if", "epoch", "%", "opt", ".", "save_freq", "==", "0", "or", "epoch", "==", "opt", ".", "epochs", ":", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_folder", ",", "'model_'", "+", "str", "(", "wandb", ".", "run", ".", "name", ")", "+", "'.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "\n", "#wandb saving", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "wandb", ".", "run", ".", "dir", ",", "\"model.pth\"", ")", ")", "\n", "\n", "## onnx saving", "\n", "#dummy_input = torch.autograd.Variable(torch.randn(1, 3, 32, 32)).cuda()", "\n", "#torch.onnx.export(model, dummy_input, os.path.join(wandb.run.dir, \"model.onnx\"))", "\n", "\n", "", "wandb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "\n", "'Train Acc'", ":", "train_acc", ",", "\n", "'Train Loss'", ":", "train_loss", ",", "\n", "'Val Acc'", ":", "val_acc", ",", "\n", "'Val Loss'", ":", "val_loss", ",", "\n", "'Meta Test Acc'", ":", "meta_test_acc", ",", "\n", "'Meta Test std'", ":", "meta_test_std", ",", "\n", "'Meta Val Acc'", ":", "meta_val_acc", ",", "\n", "'Meta Val std'", ":", "meta_val_std", "\n", "}", ")", "\n", "\n", "#final report ", "\n", "", "generate_final_report", "(", "model", ",", "opt", ",", "wandb", ")", "\n", "\n", "#remove output.txt log file ", "\n", "output_log_file", "=", "os", ".", "path", ".", "join", "(", "wandb", ".", "run", ".", "dir", ",", "\"output.log\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_log_file", ")", ":", "\n", "        ", "os", ".", "remove", "(", "output_log_file", ")", "\n", "", "else", ":", "## Show an error ##", "\n", "        ", "print", "(", "\"Error: %s file not found\"", "%", "output_log_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.train": [[281, 355], ["model.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "print", "tqdm.tqdm", "enumerate", "util.AverageMeter.update", "input.cuda.float", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "x.transpose().flip", "x.flip().flip", "x.flip().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "target.cuda.repeat", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "range", "model", "torch.one_hot().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "criterion", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "util.AverageMeter.update", "time.time", "pbar.set_postfix", "len", "input.cuda.cuda", "target.cuda.cuda", "input.cuda.size", "torch.binary_cross_entropy_with_logits", "loss.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "time.time", "x.transpose", "x.flip", "x.flip", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.one_hot", "time.time", "F.one_hot().float.to", "util.AverageMeter.avg.cpu().numpy", "util.AverageMeter.avg.cpu().numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "util.AverageMeter.avg.cpu", "util.AverageMeter.avg.cpu"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.train", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.accuracy", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "opt", ")", ":", "\n", "    ", "\"\"\"One epoch training\"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "tqdm", "(", "train_loader", ",", "total", "=", "len", "(", "train_loader", ")", ")", "as", "pbar", ":", "\n", "        ", "for", "idx", ",", "(", "input", ",", "target", ",", "_", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "batch_size", "=", "input", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "input", "\n", "x_90", "=", "x", ".", "transpose", "(", "2", ",", "3", ")", ".", "flip", "(", "2", ")", "\n", "x_180", "=", "x", ".", "flip", "(", "2", ")", ".", "flip", "(", "3", ")", "\n", "x_270", "=", "x", ".", "flip", "(", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "generated_data", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_90", ",", "x_180", ",", "x_270", ")", ",", "0", ")", "\n", "train_targets", "=", "target", ".", "repeat", "(", "4", ")", "\n", "\n", "rot_labels", "=", "torch", ".", "zeros", "(", "4", "*", "batch_size", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "4", "*", "batch_size", ")", ":", "\n", "                ", "if", "i", "<", "batch_size", ":", "\n", "                    ", "rot_labels", "[", "i", "]", "=", "0", "\n", "", "elif", "i", "<", "2", "*", "batch_size", ":", "\n", "                    ", "rot_labels", "[", "i", "]", "=", "1", "\n", "", "elif", "i", "<", "3", "*", "batch_size", ":", "\n", "                    ", "rot_labels", "[", "i", "]", "=", "2", "\n", "", "else", ":", "\n", "                    ", "rot_labels", "[", "i", "]", "=", "3", "\n", "\n", "# ===================forward=====================", "\n", "\n", "", "", "(", "_", ",", "_", ",", "_", ",", "_", ",", "feat", ")", ",", "(", "train_logit", ",", "rot_logits", ")", "=", "model", "(", "generated_data", ",", "rot", "=", "True", ")", "\n", "\n", "rot_labels", "=", "F", ".", "one_hot", "(", "rot_labels", ".", "to", "(", "torch", ".", "int64", ")", ",", "4", ")", ".", "float", "(", ")", "\n", "loss_ss", "=", "torch", ".", "sum", "(", "F", ".", "binary_cross_entropy_with_logits", "(", "input", "=", "rot_logits", ",", "target", "=", "rot_labels", ")", ")", "\n", "loss_ce", "=", "criterion", "(", "train_logit", ",", "train_targets", ")", "\n", "\n", "loss", "=", "opt", ".", "gamma", "*", "loss_ss", "+", "loss_ce", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "train_logit", ",", "train_targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# ===================backward=====================", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# ===================meters=====================", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "pbar", ".", "set_postfix", "(", "{", "\"Acc@1\"", ":", "'{0:.2f}'", ".", "format", "(", "top1", ".", "avg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Acc@5\"", ":", "'{0:.2f}'", ".", "format", "(", "top5", ".", "avg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "2", ")", ",", "\n", "\"Loss\"", ":", "'{0:.2f}'", ".", "format", "(", "losses", ".", "avg", ",", "2", ")", ",", "\n", "}", ")", "\n", "\n", "", "", "print", "(", "'Train_Acc@1 {top1.avg:.3f} Train_Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.None.train_selfsupervison.generate_final_report": [[358, 417], ["dataloader.get_dataloaders", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "print", "print", "print", "print", "wandb.log", "dataloader.get_dataloaders", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "eval.meta_eval.meta_test", "print", "print", "print", "print", "wandb.log"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.None.dataloader.get_dataloaders", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test"], ["", "def", "generate_final_report", "(", "model", ",", "opt", ",", "wandb", ")", ":", "\n", "\n", "\n", "    ", "opt", ".", "n_shots", "=", "1", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "_", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "#validate", "\n", "meta_val_acc", ",", "meta_val_std", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "True", ")", "\n", "\n", "meta_val_acc_feat", ",", "meta_val_std_feat", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "#evaluate", "\n", "meta_test_acc", ",", "meta_test_std", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "True", ")", "\n", "\n", "meta_test_acc_feat", ",", "meta_test_std_feat", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "print", "(", "'Meta Val Acc : {:.4f}, Meta Val std: {:.4f}'", ".", "format", "(", "meta_val_acc", ",", "meta_val_std", ")", ")", "\n", "print", "(", "'Meta Val Acc (feat): {:.4f}, Meta Val std (feat): {:.4f}'", ".", "format", "(", "meta_val_acc_feat", ",", "meta_val_std_feat", ")", ")", "\n", "print", "(", "'Meta Test Acc: {:.4f}, Meta Test std: {:.4f}'", ".", "format", "(", "meta_test_acc", ",", "meta_test_std", ")", ")", "\n", "print", "(", "'Meta Test Acc (feat): {:.4f}, Meta Test std (feat): {:.4f}'", ".", "format", "(", "meta_test_acc_feat", ",", "meta_test_std_feat", ")", ")", "\n", "\n", "\n", "wandb", ".", "log", "(", "{", "'Final Meta Test Acc @1'", ":", "meta_test_acc", ",", "\n", "'Final Meta Test std @1'", ":", "meta_test_std", ",", "\n", "'Final Meta Test Acc  (feat) @1'", ":", "meta_test_acc_feat", ",", "\n", "'Final Meta Test std  (feat) @1'", ":", "meta_test_std_feat", ",", "\n", "'Final Meta Val Acc @1'", ":", "meta_val_acc", ",", "\n", "'Final Meta Val std @1'", ":", "meta_val_std", ",", "\n", "'Final Meta Val Acc   (feat) @1'", ":", "meta_val_acc_feat", ",", "\n", "'Final Meta Val std   (feat) @1'", ":", "meta_val_std_feat", "\n", "}", ")", "\n", "\n", "\n", "opt", ".", "n_shots", "=", "5", "\n", "train_loader", ",", "val_loader", ",", "meta_testloader", ",", "meta_valloader", ",", "_", "=", "get_dataloaders", "(", "opt", ")", "\n", "\n", "#validate", "\n", "meta_val_acc", ",", "meta_val_std", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "True", ")", "\n", "\n", "meta_val_acc_feat", ",", "meta_val_std_feat", "=", "meta_test", "(", "model", ",", "meta_valloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "#evaluate", "\n", "meta_test_acc", ",", "meta_test_std", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "True", ")", "\n", "\n", "meta_test_acc_feat", ",", "meta_test_std_feat", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "False", ")", "\n", "\n", "print", "(", "'Meta Val Acc : {:.4f}, Meta Val std: {:.4f}'", ".", "format", "(", "meta_val_acc", ",", "meta_val_std", ")", ")", "\n", "print", "(", "'Meta Val Acc (feat): {:.4f}, Meta Val std (feat): {:.4f}'", ".", "format", "(", "meta_val_acc_feat", ",", "meta_val_std_feat", ")", ")", "\n", "print", "(", "'Meta Test Acc: {:.4f}, Meta Test std: {:.4f}'", ".", "format", "(", "meta_test_acc", ",", "meta_test_std", ")", ")", "\n", "print", "(", "'Meta Test Acc (feat): {:.4f}, Meta Test std (feat): {:.4f}'", ".", "format", "(", "meta_test_acc_feat", ",", "meta_test_std_feat", ")", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "'Final Meta Test Acc @5'", ":", "meta_test_acc", ",", "\n", "'Final Meta Test std @5'", ":", "meta_test_std", ",", "\n", "'Final Meta Test Acc  (feat) @5'", ":", "meta_test_acc_feat", ",", "\n", "'Final Meta Test std  (feat) @5'", ":", "meta_test_std_feat", ",", "\n", "'Final Meta Val Acc @5'", ":", "meta_val_acc", ",", "\n", "'Final Meta Val std @5'", ":", "meta_val_std", ",", "\n", "'Final Meta Val Acc   (feat) @5'", ":", "meta_val_acc_feat", ",", "\n", "'Final Meta Val std   (feat) @5'", ":", "meta_val_std_feat", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.CIFAR100.__init__": [[15, 94], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "open", "pickle.load", "enumerate", "enumerate", "numpy.asarray", "range", "range", "numpy.asarray", "numpy.asarray", "torchvision.Compose", "torchvision.Compose", "os.path.join", "new_labels.append", "numpy.min", "numpy.max", "len", "cifar.CIFAR100.cls_positive[].append", "range", "numpy.asarray", "numpy.asarray", "range", "range", "cifar.CIFAR100.cls_negative[].extend", "range", "range", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "args", ".", "data_root", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", "\n", "self", ".", "std", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "self", ".", "simclr", "=", "args", ".", "simclr", "\n", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'%s.pickle'", "\n", "", "else", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'%s.pickle'", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "file_pattern", "%", "partition", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "self", ".", "imgs", "=", "data", "[", "'data'", "]", "\n", "labels", "=", "data", "[", "'labels'", "]", "\n", "# adjust sparse labels to labels from 0 to n.", "\n", "cur_class", "=", "0", "\n", "label2label", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "if", "label", "not", "in", "label2label", ":", "\n", "                    ", "label2label", "[", "label", "]", "=", "cur_class", "\n", "cur_class", "+=", "1", "\n", "", "", "new_labels", "=", "[", "]", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "new_labels", ".", "append", "(", "label2label", "[", "label", "]", ")", "\n", "", "self", ".", "labels", "=", "new_labels", "\n", "\n", "\n", "# pre-process for contrastive sampling", "\n", "", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "if", "self", ".", "is_sample", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "-", "np", ".", "min", "(", "self", ".", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "\n", "self", ".", "cls_positive", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "self", ".", "cls_positive", "[", "self", ".", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "cls_negative", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "if", "j", "==", "i", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "cls_negative", "[", "i", "]", ".", "extend", "(", "self", ".", "cls_positive", "[", "j", "]", ")", "\n", "\n", "", "", "self", ".", "cls_positive", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_positive", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_negative", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_negative", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_positive", "=", "np", ".", "asarray", "(", "self", ".", "cls_positive", ")", "\n", "self", ".", "cls_negative", "=", "np", ".", "asarray", "(", "self", ".", "cls_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.CIFAR100.__getitem__": [[95, 113], ["numpy.asarray().astype", "cifar.CIFAR100.transform", "min", "cifar.CIFAR100.transform", "cifar.CIFAR100.transform", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "(", "self", ".", "simclr", ")", ":", "\n", "            ", "img1", "=", "self", ".", "transform", "(", "img", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "(", "img1", ",", "img2", ")", ",", "target", ",", "item", "\n", "\n", "", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.CIFAR100.__len__": [[114, 116], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.CIFAR100_toy.__init__": [[122, 189], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "numpy.array", "numpy.array", "print", "print", "open", "pickle.load", "enumerate", "enumerate", "numpy.where", "torchvision.Compose", "torchvision.Compose", "os.path.join", "new_labels.append", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "args", ".", "data_root", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", "\n", "self", ".", "std", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "self", ".", "simclr", "=", "args", ".", "simclr", "\n", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'%s.pickle'", "\n", "", "else", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'%s.pickle'", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "file_pattern", "%", "partition", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "self", ".", "imgs", "=", "data", "[", "'data'", "]", "\n", "labels", "=", "data", "[", "'labels'", "]", "\n", "# adjust sparse labels to labels from 0 to n.", "\n", "cur_class", "=", "0", "\n", "label2label", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "if", "label", "not", "in", "label2label", ":", "\n", "                    ", "label2label", "[", "label", "]", "=", "cur_class", "\n", "cur_class", "+=", "1", "\n", "", "", "new_labels", "=", "[", "]", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "new_labels", ".", "append", "(", "label2label", "[", "label", "]", ")", "\n", "", "self", ".", "labels", "=", "new_labels", "\n", "\n", "", "self", ".", "labels", "=", "np", ".", "array", "(", "self", ".", "labels", ")", "\n", "self", ".", "imgs", "=", "np", ".", "array", "(", "self", ".", "imgs", ")", "\n", "print", "(", "self", ".", "labels", ".", "shape", ")", "\n", "print", "(", "self", ".", "imgs", ".", "shape", ")", "\n", "\n", "loc", "=", "np", ".", "where", "(", "self", ".", "labels", "<", "5", ")", "[", "0", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "loc", "]", "\n", "self", ".", "imgs", "=", "self", ".", "imgs", "[", "loc", "]", "\n", "\n", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.CIFAR100_toy.__getitem__": [[190, 208], ["numpy.asarray().astype", "cifar.CIFAR100_toy.transform", "min", "cifar.CIFAR100_toy.transform", "cifar.CIFAR100_toy.transform", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "(", "self", ".", "simclr", ")", ":", "\n", "            ", "img1", "=", "self", ".", "transform", "(", "img", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "(", "img1", ",", "img2", ")", ",", "target", ",", "item", "\n", "\n", "", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.CIFAR100_toy.__len__": [[209, 211], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.MetaCIFAR100.__init__": [[218, 255], ["cifar.CIFAR100.__init__", "list", "range", "list", "cifar.MetaCIFAR100.data.keys", "torchvision.Compose", "torchvision.Compose", "cifar.MetaCIFAR100.data[].append", "cifar.MetaCIFAR100.data.keys", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "fix_seed", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaCIFAR100", ",", "self", ")", ".", "__init__", "(", "args", ",", "partition", ",", "False", ")", "\n", "self", ".", "fix_seed", "=", "fix_seed", "\n", "self", ".", "n_ways", "=", "args", ".", "n_ways", "\n", "self", ".", "n_shots", "=", "args", ".", "n_shots", "\n", "self", ".", "n_queries", "=", "args", ".", "n_queries", "\n", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_test_runs", "=", "args", ".", "n_test_runs", "\n", "self", ".", "n_aug_support_samples", "=", "args", ".", "n_aug_support_samples", "\n", "if", "train_transform", "is", "None", ":", "\n", "            ", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_transform", "=", "train_transform", "\n", "\n", "", "if", "test_transform", "is", "None", ":", "\n", "            ", "self", ".", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_transform", "=", "test_transform", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "self", ".", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "idx", "]", "not", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "[", "]", "\n", "", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", ".", "append", "(", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.MetaCIFAR100.__getitem__": [[256, 306], ["numpy.random.choice", "enumerate", "numpy.tile.reshape", "numpy.tile.reshape", "numpy.tile.reshape", "numpy.tile.reshape", "numpy.split", "numpy.tile.reshape", "numpy.split", "torch.stack", "torch.stack", "numpy.random.seed", "numpy.asarray().astype", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.tile.append", "numpy.setxor1d", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.tile.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "list", "list", "range", "numpy.arange", "numpy.tile.reshape", "numpy.tile.reshape", "numpy.tile.reshape", "numpy.tile.reshape", "map", "map", "numpy.asarray", "cifar.MetaCIFAR100.train_transform", "cifar.MetaCIFAR100.test_transform", "x.squeeze", "x.squeeze"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "fix_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ",", "self", ".", "n_ways", ",", "False", ")", "\n", "\n", "support_xs", "=", "[", "]", "\n", "support_ys", "=", "[", "]", "\n", "support_ts", "=", "[", "]", "\n", "query_xs", "=", "[", "]", "\n", "query_ys", "=", "[", "]", "\n", "query_ts", "=", "[", "]", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "cls_sampled", ")", ":", "\n", "            ", "imgs", "=", "np", ".", "asarray", "(", "self", ".", "data", "[", "cls", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "support_xs_ids_sampled", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "n_shots", ",", "False", ")", "\n", "support_xs", ".", "append", "(", "imgs", "[", "support_xs_ids_sampled", "]", ")", "\n", "support_ys", ".", "append", "(", "[", "idx", "]", "*", "self", ".", "n_shots", ")", "\n", "support_ts", ".", "append", "(", "[", "cls", "]", "*", "self", ".", "n_shots", ")", "\n", "query_xs_ids", "=", "np", ".", "setxor1d", "(", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "support_xs_ids_sampled", ")", "\n", "query_xs_ids", "=", "np", ".", "random", ".", "choice", "(", "query_xs_ids", ",", "self", ".", "n_queries", ",", "False", ")", "\n", "query_xs", ".", "append", "(", "imgs", "[", "query_xs_ids", "]", ")", "\n", "query_ys", ".", "append", "(", "[", "idx", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "query_ts", ".", "append", "(", "[", "cls", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "np", ".", "array", "(", "support_xs", ")", ",", "np", ".", "array", "(", "support_ys", ")", ",", "np", ".", "array", "(", "\n", "query_xs", ")", ",", "np", ".", "array", "(", "query_ys", ")", "\n", "support_ts", ",", "query_ts", "=", "np", ".", "array", "(", "support_ts", ")", ",", "np", ".", "array", "(", "query_ts", ")", "\n", "num_ways", ",", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", "=", "query_xs", ".", "shape", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_ys", "=", "query_ys", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "query_ts", "=", "query_ts", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "support_xs", "=", "np", ".", "tile", "(", "support_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "support_ys", "=", "np", ".", "tile", "(", "support_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "support_ts", "=", "np", ".", "tile", "(", "support_ts", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "support_xs", "=", "np", ".", "split", "(", "support_xs", ",", "support_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "query_xs", "=", "np", ".", "tile", "(", "query_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "query_ys", "=", "np", ".", "tile", "(", "query_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "query_ts", "=", "np", ".", "tile", "(", "query_ts", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "query_xs", "=", "np", ".", "split", "(", "query_xs", ",", "query_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "support_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "train_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "support_xs", ")", ")", ")", "\n", "query_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "test_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "query_xs", ")", ")", ")", "\n", "\n", "return", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.cifar.MetaCIFAR100.__len__": [[307, 309], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.tiered_imagenet.TieredImageNet.__init__": [[11, 81], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "os.path.join", "os.path.join", "numpy.load", "tiered_imagenet.TieredImageNet._load_labels", "numpy.asarray", "range", "range", "numpy.asarray", "numpy.asarray", "torchvision.Compose", "torchvision.Compose", "numpy.min", "numpy.max", "len", "tiered_imagenet.TieredImageNet.cls_positive[].append", "range", "numpy.asarray", "numpy.asarray", "range", "range", "tiered_imagenet.TieredImageNet.cls_negative[].extend", "range", "range", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.dataset.tiered_imagenet.TieredImageNet._load_labels", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "args", ".", "data_root", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "120.39586422", "/", "255.0", ",", "115.59361427", "/", "255.0", ",", "104.54012653", "/", "255.0", "]", "\n", "self", ".", "std", "=", "[", "70.68188272", "/", "255.0", ",", "68.27635443", "/", "255.0", ",", "72.54505529", "/", "255.0", "]", "\n", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "image_file_pattern", "=", "'%s_images.npz'", "\n", "self", ".", "label_file_pattern", "=", "'%s_labels.pkl'", "\n", "", "else", ":", "\n", "            ", "self", ".", "image_file_pattern", "=", "'%s_images.npz'", "\n", "self", ".", "label_file_pattern", "=", "'%s_labels.pkl'", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "\n", "# modified code to load tieredImageNet", "\n", "image_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "image_file_pattern", "%", "partition", ")", "\n", "self", ".", "imgs", "=", "np", ".", "load", "(", "image_file", ")", "[", "'images'", "]", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "label_file_pattern", "%", "partition", ")", "\n", "self", ".", "labels", "=", "self", ".", "_load_labels", "(", "label_file", ")", "[", "'labels'", "]", "\n", "\n", "# pre-process for contrastive sampling", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "if", "self", ".", "is_sample", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "-", "np", ".", "min", "(", "self", ".", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "\n", "self", ".", "cls_positive", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "self", ".", "cls_positive", "[", "self", ".", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "cls_negative", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "if", "j", "==", "i", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "cls_negative", "[", "i", "]", ".", "extend", "(", "self", ".", "cls_positive", "[", "j", "]", ")", "\n", "\n", "", "", "self", ".", "cls_positive", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_positive", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_negative", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_negative", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_positive", "=", "np", ".", "asarray", "(", "self", ".", "cls_positive", ")", "\n", "self", ".", "cls_negative", "=", "np", ".", "asarray", "(", "self", ".", "cls_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.tiered_imagenet.TieredImageNet.__getitem__": [[82, 95], ["numpy.asarray().astype", "tiered_imagenet.TieredImageNet.transform", "min", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.tiered_imagenet.TieredImageNet.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.tiered_imagenet.TieredImageNet._load_labels": [[99, 111], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_load_labels", "(", "file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "            ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.tiered_imagenet.MetaTieredImageNet.__init__": [[115, 152], ["tiered_imagenet.TieredImageNet.__init__", "list", "range", "list", "tiered_imagenet.MetaTieredImageNet.data.keys", "torchvision.Compose", "torchvision.Compose", "tiered_imagenet.MetaTieredImageNet.data[].append", "tiered_imagenet.MetaTieredImageNet.data.keys", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "fix_seed", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaTieredImageNet", ",", "self", ")", ".", "__init__", "(", "args", ",", "partition", ",", "False", ")", "\n", "self", ".", "fix_seed", "=", "fix_seed", "\n", "self", ".", "n_ways", "=", "args", ".", "n_ways", "\n", "self", ".", "n_shots", "=", "args", ".", "n_shots", "\n", "self", ".", "n_queries", "=", "args", ".", "n_queries", "\n", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_test_runs", "=", "args", ".", "n_test_runs", "\n", "self", ".", "n_aug_support_samples", "=", "args", ".", "n_aug_support_samples", "\n", "if", "train_transform", "is", "None", ":", "\n", "            ", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_transform", "=", "train_transform", "\n", "\n", "", "if", "test_transform", "is", "None", ":", "\n", "            ", "self", ".", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_transform", "=", "test_transform", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "self", ".", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "idx", "]", "not", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "[", "]", "\n", "", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", ".", "append", "(", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.tiered_imagenet.MetaTieredImageNet.__getitem__": [[153, 188], ["numpy.random.choice", "enumerate", "torch.stack.reshape", "query_ys.reshape.reshape.reshape", "numpy.tile.reshape", "numpy.split", "torch.stack.reshape", "numpy.split", "torch.stack", "torch.stack", "numpy.random.seed", "numpy.asarray().astype", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.setxor1d", "numpy.random.choice", "torch.stack.append", "query_ys.reshape.reshape.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "list", "list", "range", "numpy.arange", "numpy.tile.reshape", "map", "map", "numpy.asarray", "tiered_imagenet.MetaTieredImageNet.train_transform", "tiered_imagenet.MetaTieredImageNet.test_transform", "x.squeeze", "x.squeeze"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "fix_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ",", "self", ".", "n_ways", ",", "False", ")", "\n", "support_xs", "=", "[", "]", "\n", "support_ys", "=", "[", "]", "\n", "query_xs", "=", "[", "]", "\n", "query_ys", "=", "[", "]", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "cls_sampled", ")", ":", "\n", "            ", "imgs", "=", "np", ".", "asarray", "(", "self", ".", "data", "[", "cls", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "support_xs_ids_sampled", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "n_shots", ",", "False", ")", "\n", "support_xs", ".", "append", "(", "imgs", "[", "support_xs_ids_sampled", "]", ")", "\n", "support_ys", ".", "append", "(", "[", "idx", "]", "*", "self", ".", "n_shots", ")", "\n", "query_xs_ids", "=", "np", ".", "setxor1d", "(", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "support_xs_ids_sampled", ")", "\n", "query_xs_ids", "=", "np", ".", "random", ".", "choice", "(", "query_xs_ids", ",", "self", ".", "n_queries", ",", "False", ")", "\n", "query_xs", ".", "append", "(", "imgs", "[", "query_xs_ids", "]", ")", "\n", "query_ys", ".", "append", "(", "[", "idx", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "np", ".", "array", "(", "support_xs", ")", ",", "np", ".", "array", "(", "support_ys", ")", ",", "np", ".", "array", "(", "\n", "query_xs", ")", ",", "np", ".", "array", "(", "query_ys", ")", "\n", "num_ways", ",", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", "=", "query_xs", ".", "shape", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_ys", "=", "query_ys", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "support_xs", "=", "np", ".", "tile", "(", "support_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "support_ys", "=", "np", ".", "tile", "(", "support_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "support_xs", "=", "np", ".", "split", "(", "support_xs", ",", "support_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_xs", "=", "np", ".", "split", "(", "query_xs", ",", "query_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "support_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "train_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "support_xs", ")", ")", ")", "\n", "query_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "test_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "query_xs", ")", ")", ")", "\n", "\n", "return", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.tiered_imagenet.MetaTieredImageNet.__len__": [[189, 191], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.mini_imagenet.ImageNet.__init__": [[11, 79], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "open", "pickle.load", "numpy.asarray", "range", "range", "numpy.asarray", "numpy.asarray", "torchvision.Compose", "torchvision.Compose", "os.path.join", "numpy.min", "numpy.max", "len", "mini_imagenet.ImageNet.cls_positive[].append", "range", "numpy.asarray", "numpy.asarray", "range", "range", "mini_imagenet.ImageNet.cls_negative[].extend", "range", "range", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "args", ".", "data_root", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "120.39586422", "/", "255.0", ",", "115.59361427", "/", "255.0", ",", "104.54012653", "/", "255.0", "]", "\n", "self", ".", "std", "=", "[", "70.68188272", "/", "255.0", ",", "68.27635443", "/", "255.0", ",", "72.54505529", "/", "255.0", "]", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'miniImageNet_category_split_train_phase_%s.pickle'", "\n", "", "else", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'miniImageNet_category_split_%s.pickle'", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "file_pattern", "%", "partition", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "self", ".", "imgs", "=", "data", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data", "[", "'labels'", "]", "\n", "\n", "\n", "\n", "\n", "\n", "# pre-process for contrastive sampling", "\n", "", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "if", "self", ".", "is_sample", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "-", "np", ".", "min", "(", "self", ".", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "\n", "self", ".", "cls_positive", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "self", ".", "cls_positive", "[", "self", ".", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "cls_negative", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "if", "j", "==", "i", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "cls_negative", "[", "i", "]", ".", "extend", "(", "self", ".", "cls_positive", "[", "j", "]", ")", "\n", "\n", "", "", "self", ".", "cls_positive", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_positive", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_negative", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_negative", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_positive", "=", "np", ".", "asarray", "(", "self", ".", "cls_positive", ")", "\n", "self", ".", "cls_negative", "=", "np", ".", "asarray", "(", "self", ".", "cls_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.mini_imagenet.ImageNet.__getitem__": [[80, 93], ["numpy.asarray().astype", "mini_imagenet.ImageNet.transform", "min", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.mini_imagenet.ImageNet.__len__": [[94, 96], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.mini_imagenet.MetaImageNet.__init__": [[100, 137], ["mini_imagenet.ImageNet.__init__", "list", "range", "list", "mini_imagenet.MetaImageNet.data.keys", "torchvision.Compose", "torchvision.Compose", "mini_imagenet.MetaImageNet.data[].append", "mini_imagenet.MetaImageNet.data.keys", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "fix_seed", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaImageNet", ",", "self", ")", ".", "__init__", "(", "args", ",", "partition", ",", "False", ")", "\n", "self", ".", "fix_seed", "=", "fix_seed", "\n", "self", ".", "n_ways", "=", "args", ".", "n_ways", "\n", "self", ".", "n_shots", "=", "args", ".", "n_shots", "\n", "self", ".", "n_queries", "=", "args", ".", "n_queries", "\n", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_test_runs", "=", "args", ".", "n_test_runs", "\n", "self", ".", "n_aug_support_samples", "=", "args", ".", "n_aug_support_samples", "\n", "if", "train_transform", "is", "None", ":", "\n", "            ", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_transform", "=", "train_transform", "\n", "\n", "", "if", "test_transform", "is", "None", ":", "\n", "            ", "self", ".", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_transform", "=", "test_transform", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "self", ".", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "idx", "]", "not", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "[", "]", "\n", "", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", ".", "append", "(", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.mini_imagenet.MetaImageNet.__getitem__": [[138, 173], ["numpy.random.choice", "enumerate", "torch.stack.reshape", "query_ys.reshape.reshape.reshape", "numpy.tile.reshape", "numpy.split", "torch.stack.reshape", "numpy.split", "torch.stack", "torch.stack", "numpy.random.seed", "numpy.asarray().astype", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.setxor1d", "numpy.random.choice", "torch.stack.append", "query_ys.reshape.reshape.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "list", "list", "range", "numpy.arange", "numpy.tile.reshape", "map", "map", "numpy.asarray", "mini_imagenet.MetaImageNet.train_transform", "mini_imagenet.MetaImageNet.test_transform", "x.squeeze", "x.squeeze"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "fix_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ",", "self", ".", "n_ways", ",", "False", ")", "\n", "support_xs", "=", "[", "]", "\n", "support_ys", "=", "[", "]", "\n", "query_xs", "=", "[", "]", "\n", "query_ys", "=", "[", "]", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "cls_sampled", ")", ":", "\n", "            ", "imgs", "=", "np", ".", "asarray", "(", "self", ".", "data", "[", "cls", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "support_xs_ids_sampled", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "n_shots", ",", "False", ")", "\n", "support_xs", ".", "append", "(", "imgs", "[", "support_xs_ids_sampled", "]", ")", "\n", "support_ys", ".", "append", "(", "[", "idx", "]", "*", "self", ".", "n_shots", ")", "\n", "query_xs_ids", "=", "np", ".", "setxor1d", "(", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "support_xs_ids_sampled", ")", "\n", "query_xs_ids", "=", "np", ".", "random", ".", "choice", "(", "query_xs_ids", ",", "self", ".", "n_queries", ",", "False", ")", "\n", "query_xs", ".", "append", "(", "imgs", "[", "query_xs_ids", "]", ")", "\n", "query_ys", ".", "append", "(", "[", "idx", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "np", ".", "array", "(", "support_xs", ")", ",", "np", ".", "array", "(", "support_ys", ")", ",", "np", ".", "array", "(", "\n", "query_xs", ")", ",", "np", ".", "array", "(", "query_ys", ")", "\n", "num_ways", ",", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", "=", "query_xs", ".", "shape", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_ys", "=", "query_ys", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "support_xs", "=", "np", ".", "tile", "(", "support_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "support_ys", "=", "np", ".", "tile", "(", "support_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "support_xs", "=", "np", ".", "split", "(", "support_xs", ",", "support_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_xs", "=", "np", ".", "split", "(", "query_xs", ",", "query_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "support_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "train_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "support_xs", ")", ")", ")", "\n", "query_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "test_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "query_xs", ")", ")", ")", "\n", "\n", "return", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.mini_imagenet.MetaImageNet.__len__": [[174, 176], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.SSDatasetWrapper.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dset", ",", "opt", ")", ":", "\n", "        ", "self", ".", "dset", "=", "dset", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.SSDatasetWrapper.__getitem__": [[11, 40], ["numpy.random.randint", "numpy.random.randint", "dataset_selfsupervision.tensor_rot_90", "image.size", "image.size", "dataset_selfsupervision.tensor_rot_180", "dataset_selfsupervision.tensor_rot_270"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.tensor_rot_90", "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.tensor_rot_180", "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.tensor_rot_270"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", ",", "target", ",", "item", "=", "self", ".", "dset", "[", "index", "]", "\n", "\n", "if", "(", "not", "(", "self", ".", "opt", ".", "ssl", ")", ")", ":", "\n", "            ", "return", "image", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "opt", ".", "ssl_rot", ")", ":", "\n", "                ", "label", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "if", "label", "==", "1", ":", "\n", "                    ", "image_rot", "=", "tensor_rot_90", "(", "image", ")", "\n", "", "elif", "label", "==", "2", ":", "\n", "                    ", "image_rot", "=", "tensor_rot_180", "(", "image", ")", "\n", "", "elif", "label", "==", "3", ":", "\n", "                    ", "image_rot", "=", "tensor_rot_270", "(", "image", ")", "\n", "", "else", ":", "\n", "                    ", "image_rot", "=", "image", "\n", "\n", "", "return", "(", "image", ",", "image_rot", ")", ",", "(", "target", ",", "label", ")", ",", "item", "\n", "\n", "", "if", "(", "self", ".", "opt", ".", "ssl_quad", ")", ":", "\n", "                ", "label", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "\n", "horstr", "=", "image", ".", "size", "(", "1", ")", "//", "2", "\n", "verstr", "=", "image", ".", "size", "(", "2", ")", "//", "2", "\n", "horlab", "=", "label", "//", "2", "\n", "verlab", "=", "label", "%", "2", "\n", "\n", "image_quad", "=", "image", "[", ":", ",", "horlab", "*", "horstr", ":", "(", "horlab", "+", "1", ")", "*", "horstr", ",", "verlab", "*", "verstr", ":", "(", "verlab", "+", "1", ")", "*", "verstr", ",", "]", "\n", "return", "(", "image", ",", "image_quad", ")", ",", "(", "target", ",", "label", ")", ",", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.SSDatasetWrapper.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.tensor_rot_90": [[45, 47], ["x.flip().transpose", "x.flip"], "function", ["None"], ["", "", "def", "tensor_rot_90", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "flip", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "def", "tensor_rot_90_digit", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.tensor_rot_90_digit": [[47, 49], ["x.transpose"], "function", ["None"], ["", "def", "tensor_rot_90_digit", "(", "x", ")", ":", "\n", "\t", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.tensor_rot_180": [[50, 52], ["x.flip().flip", "x.flip"], "function", ["None"], ["", "def", "tensor_rot_180", "(", "x", ")", ":", "\n", "\t", "return", "x", ".", "flip", "(", "2", ")", ".", "flip", "(", "1", ")", "\n", "", "def", "tensor_rot_180_digit", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.tensor_rot_180_digit": [[52, 54], ["x.flip"], "function", ["None"], ["", "def", "tensor_rot_180_digit", "(", "x", ")", ":", "\n", "\t", "return", "x", ".", "flip", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.dataset.dataset_selfsupervision.tensor_rot_270": [[55, 57], ["x.transpose().flip", "x.transpose"], "function", ["None"], ["", "def", "tensor_rot_270", "(", "x", ")", ":", "\n", "\t", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "flip", "(", "2", ")", "", "", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.mean_confidence_interval": [[26, 32], ["len", "numpy.array", "numpy.mean", "scipy.stats.sem", "scipy.stats.t._ppf"], "function", ["None"], ["def", "mean_confidence_interval", "(", "data", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "a", "=", "100.0", "*", "np", ".", "array", "(", "data", ")", "\n", "n", "=", "len", "(", "a", ")", "\n", "m", ",", "se", "=", "np", ".", "mean", "(", "a", ")", ",", "scipy", ".", "stats", ".", "sem", "(", "a", ")", "\n", "h", "=", "se", "*", "t", ".", "_ppf", "(", "(", "1", "+", "confidence", ")", "/", "2.", ",", "n", "-", "1", ")", "\n", "return", "m", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize": [[34, 38], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "function", ["None"], ["", "def", "normalize", "(", "x", ")", ":", "\n", "    ", "norm", "=", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "2", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test": [[40, 137], ["net.eval.eval", "meta_eval.mean_confidence_interval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "enumerate", "support_xs.view.cuda", "query_xs.view.cuda", "support_xs.view.size", "support_xs.view.view", "query_xs.view.view", "normalize.detach().cpu().numpy", "normalize.detach().cpu().numpy", "support_ys.view().numpy.view().numpy", "query_ys.view().numpy.view().numpy", "acc.append", "pbar.set_postfix", "len", "net.eval.view", "net.eval.view", "net.eval.", "feat_support[].view", "net.eval.", "feat_query[].view", "meta_eval.normalize", "meta_eval.normalize", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.predict", "sklearn.metrics.accuracy_score", "support_xs.view.size", "query_xs.view.size", "support_xs.view.size", "query_xs.view.size", "normalize.detach().cpu", "normalize.detach().cpu", "support_ys.view().numpy.view", "query_ys.view().numpy.view", "meta_eval.NN", "net.eval.", "net.eval.", "meta_eval.Cosine", "NotImplementedError", "sklearn.metrics.accuracy_score", "normalize.detach", "normalize.detach"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.mean_confidence_interval", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.NN", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.Cosine"], ["", "def", "meta_test", "(", "net", ",", "testloader", ",", "use_logit", "=", "False", ",", "is_norm", "=", "True", ",", "classifier", "=", "'LR'", ")", ":", "\n", "    ", "net", "=", "net", ".", "eval", "(", ")", "\n", "acc", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "tqdm", "(", "testloader", ",", "total", "=", "len", "(", "testloader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "idx", ",", "data", "in", "enumerate", "(", "pbar", ")", ":", "\n", "                ", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "data", "\n", "\n", "support_xs", "=", "support_xs", ".", "cuda", "(", ")", "\n", "query_xs", "=", "query_xs", ".", "cuda", "(", ")", "\n", "batch_size", ",", "_", ",", "height", ",", "width", ",", "channel", "=", "support_xs", ".", "size", "(", ")", "\n", "support_xs", "=", "support_xs", ".", "view", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", "\n", "query_xs", "=", "query_xs", ".", "view", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", "\n", "\n", "\n", "\n", "#                 batch_size = support_xs.size()[0]", "\n", "#                 x = support_xs", "\n", "#                 x_90 = x.transpose(2,3).flip(2)", "\n", "#                 x_180 = x.flip(2).flip(3)", "\n", "#                 x_270 = x.flip(2).transpose(2,3)", "\n", "#                 generated_data = torch.cat((x, x_90, x_180, x_270),0)", "\n", "#                 support_ys = support_ys.repeat(1,4)", "\n", "#                 support_xs = generated_data", "\n", "\n", "#                 print(support_xs.size())", "\n", "#                 print(support_ys.size())", "\n", "\n", "\n", "\n", "if", "use_logit", ":", "\n", "                    ", "support_features", "=", "net", "(", "support_xs", ")", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "query_features", "=", "net", "(", "query_xs", ")", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "feat_support", ",", "_", "=", "net", "(", "support_xs", ",", "is_feat", "=", "True", ")", "\n", "support_features", "=", "feat_support", "[", "-", "1", "]", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat_query", ",", "_", "=", "net", "(", "query_xs", ",", "is_feat", "=", "True", ")", "\n", "query_features", "=", "feat_query", "[", "-", "1", "]", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "#                     feat_support, _ = net(support_xs)", "\n", "#                     support_features = feat_support.view(support_xs.size(0), -1)", "\n", "#                     feat_query, _ = net(query_xs)", "\n", "#                     query_features = feat_query.view(query_xs.size(0), -1)", "\n", "\n", "\n", "", "if", "is_norm", ":", "\n", "                    ", "support_features", "=", "normalize", "(", "support_features", ")", "\n", "query_features", "=", "normalize", "(", "query_features", ")", "\n", "\n", "", "support_features", "=", "support_features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_features", "=", "query_features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "support_ys", "=", "support_ys", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "query_ys", "=", "query_ys", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "\n", "if", "classifier", "==", "'LR'", ":", "\n", "                    ", "clf", "=", "LogisticRegression", "(", "random_state", "=", "0", ",", "solver", "=", "'lbfgs'", ",", "max_iter", "=", "1000", ",", "penalty", "=", "'l2'", ",", "\n", "multi_class", "=", "'multinomial'", ")", "\n", "clf", ".", "fit", "(", "support_features", ",", "support_ys", ")", "\n", "query_ys_pred", "=", "clf", ".", "predict", "(", "query_features", ")", "\n", "", "elif", "classifier", "==", "'NN'", ":", "\n", "                    ", "query_ys_pred", "=", "NN", "(", "support_features", ",", "support_ys", ",", "query_features", ")", "\n", "", "elif", "classifier", "==", "'Cosine'", ":", "\n", "                    ", "query_ys_pred", "=", "Cosine", "(", "support_features", ",", "support_ys", ",", "query_features", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'classifier not supported: {}'", ".", "format", "(", "classifier", ")", ")", "\n", "\n", "\n", "#                 bs = query_features.shape[0]//opt.n_aug_support_samples", "\n", "#                 a = np.reshape(query_ys_pred[:bs], (-1,1))", "\n", "#                 c = query_ys[:bs]", "\n", "#                 for i in range(1,opt.n_aug_support_samples):", "\n", "#                     a = np.hstack([a, np.reshape(query_ys_pred[i*bs:(i+1)*bs], (-1,1))])", "\n", "\n", "#                 d = [] ", "\n", "#                 for i in range(a.shape[0]):", "\n", "#                     b = Counter(a[i,:])", "\n", "#                     d.append(b.most_common(1)[0][0])", "\n", "\n", "# #                 (values,counts) = np.unique(a,axis=1, return_counts=True)", "\n", "# #                 print(counts)", "\n", "# # ind=np.argmax(counts)", "\n", "# # print values[ind]  # pr", "\n", "\n", "\n", "# # #                 a = np.argmax", "\n", "# #                 print(a.shape)", "\n", "# #                 print(c.shape)", "\n", "\n", "", "acc", ".", "append", "(", "metrics", ".", "accuracy_score", "(", "query_ys", ",", "query_ys_pred", ")", ")", "\n", "\n", "pbar", ".", "set_postfix", "(", "{", "\"FSL_Acc\"", ":", "'{0:.2f}'", ".", "format", "(", "metrics", ".", "accuracy_score", "(", "query_ys", ",", "query_ys_pred", ")", ")", "}", ")", "\n", "\n", "", "", "", "return", "mean_confidence_interval", "(", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test_tune": [[141, 234], ["net.eval.eval", "meta_eval.mean_confidence_interval", "tqdm.tqdm", "enumerate", "support_xs.view.cuda", "support_ys.view.cuda", "query_ys.view.cuda", "query_xs.view.cuda", "support_xs.view.size", "support_xs.view.view", "support_ys.view.view", "query_ys.view.view", "query_xs.view.view", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda.zero_", "torch.FloatTensor().cuda.scatter_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.Sigmoid", "nn.Sigmoid.", "util.accuracy", "acc.append", "pbar.set_postfix", "len", "net.eval.view", "net.eval.view", "net.eval.", "feat_support[].view", "net.eval.", "feat_query[].view", "meta_eval.normalize", "meta_eval.normalize", "torch.t", "torch.t", "torch.t", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "support_xs.view.size", "query_xs.view.size", "support_xs.view.size", "query_xs.view.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.t", "torch.t", "torch.t", "torch.FloatTensor().cuda.float", "acc1.item", "net.eval.", "net.eval.", "numpy.mean", "support_ys.view.size", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.mean_confidence_interval", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.accuracy", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "def", "meta_test_tune", "(", "net", ",", "testloader", ",", "use_logit", "=", "False", ",", "is_norm", "=", "True", ",", "classifier", "=", "'LR'", ",", "lamda", "=", "0.2", ")", ":", "\n", "    ", "net", "=", "net", ".", "eval", "(", ")", "\n", "acc", "=", "[", "]", "\n", "\n", "with", "tqdm", "(", "testloader", ",", "total", "=", "len", "(", "testloader", ")", ")", "as", "pbar", ":", "\n", "        ", "for", "idx", ",", "data", "in", "enumerate", "(", "pbar", ")", ":", "\n", "            ", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", ",", "support_ts", ",", "query_ts", "=", "data", "\n", "\n", "support_xs", "=", "support_xs", ".", "cuda", "(", ")", "\n", "support_ys", "=", "support_ys", ".", "cuda", "(", ")", "\n", "query_ys", "=", "query_ys", ".", "cuda", "(", ")", "\n", "query_xs", "=", "query_xs", ".", "cuda", "(", ")", "\n", "batch_size", ",", "_", ",", "height", ",", "width", ",", "channel", "=", "support_xs", ".", "size", "(", ")", "\n", "support_xs", "=", "support_xs", ".", "view", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", "\n", "support_ys", "=", "support_ys", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "query_ys", "=", "query_ys", ".", "view", "(", "-", "1", ")", "\n", "query_xs", "=", "query_xs", ".", "view", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", "\n", "\n", "if", "use_logit", ":", "\n", "                ", "support_features", "=", "net", "(", "support_xs", ")", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "query_features", "=", "net", "(", "query_xs", ")", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "feat_support", ",", "_", "=", "net", "(", "support_xs", ",", "is_feat", "=", "True", ")", "\n", "support_features", "=", "feat_support", "[", "-", "1", "]", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat_query", ",", "_", "=", "net", "(", "query_xs", ",", "is_feat", "=", "True", ")", "\n", "query_features", "=", "feat_query", "[", "-", "1", "]", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "is_norm", ":", "\n", "                ", "support_features", "=", "normalize", "(", "support_features", ")", "\n", "query_features", "=", "normalize", "(", "query_features", ")", "\n", "\n", "", "y_onehot", "=", "torch", ".", "FloatTensor", "(", "support_ys", ".", "size", "(", ")", "[", "0", "]", ",", "5", ")", ".", "cuda", "(", ")", "\n", "\n", "# In your for loop", "\n", "y_onehot", ".", "zero_", "(", ")", "\n", "y_onehot", ".", "scatter_", "(", "1", ",", "support_ys", ",", "1", ")", "\n", "\n", "\n", "X", "=", "support_features", "\n", "XTX", "=", "torch", ".", "matmul", "(", "torch", ".", "t", "(", "X", ")", ",", "X", ")", "\n", "\n", "B", "=", "torch", ".", "matmul", "(", "(", "XTX", "+", "lamda", "*", "torch", ".", "eye", "(", "640", ")", ".", "cuda", "(", ")", ")", ".", "inverse", "(", ")", ",", "torch", ".", "matmul", "(", "torch", ".", "t", "(", "X", ")", ",", "y_onehot", ".", "float", "(", ")", ")", ")", "\n", "#             print(B.size())", "\n", "m", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "Y_pred", "=", "m", "(", "torch", ".", "matmul", "(", "query_features", ",", "B", ")", ")", "\n", "\n", "\n", "#             print(Y_pred, query_ys)", "\n", "#             model = nn.Sequential(nn.Linear(64, 10),nn.LogSoftmax(dim=1))", "\n", "#             optimizer = torch.optim.Adam(model.parameters(), lr=0.001)", "\n", "#             criterion = nn.CrossEntropyLoss()", "\n", "\n", "#             model.cuda()", "\n", "#             criterion.cuda()", "\n", "#             model.train()", "\n", "\n", "#             for i in range(5):", "\n", "#                 output = model(support_features)", "\n", "#                 loss = criterion(output, support_ys)", "\n", "#                 optimizer.zero_grad()", "\n", "#                 loss.backward(retain_graph=True) # auto-grad ", "\n", "#                 optimizer.step() # update  weights ", "\n", "\n", "#             model.eval()", "\n", "#             query_ys_pred = model(query_features)", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "Y_pred", ",", "query_ys", ",", "topk", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "\n", "#             support_features = support_features.detach().cpu().numpy()", "\n", "#             query_features = query_features.detach().cpu().numpy()", "\n", "\n", "#             support_ys = support_ys.view(-1).numpy()", "\n", "#             query_ys = query_ys.view(-1).numpy()", "\n", "\n", "#             if classifier == 'LR':", "\n", "#                 clf = LogisticRegression(random_state=0, solver='lbfgs', max_iter=1000,", "\n", "#                                          multi_class='multinomial')", "\n", "#                 clf.fit(support_features, support_ys)", "\n", "#                 query_ys_pred = clf.predict(query_features)", "\n", "#             elif classifier == 'NN':", "\n", "#                 query_ys_pred = NN(support_features, support_ys, query_features)", "\n", "#             elif classifier == 'Cosine':", "\n", "#                 query_ys_pred = Cosine(support_features, support_ys, query_features)", "\n", "#             else:", "\n", "#                 raise NotImplementedError('classifier not supported: {}'.format(classifier))", "\n", "\n", "acc", ".", "append", "(", "acc1", ".", "item", "(", ")", "/", "100.0", ")", "\n", "\n", "pbar", ".", "set_postfix", "(", "{", "\"FSL_Acc\"", ":", "'{0:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "acc", ")", ")", "}", ")", "\n", "\n", "\n", "", "", "return", "mean_confidence_interval", "(", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.meta_test_ensamble": [[237, 292], ["meta_eval.mean_confidence_interval", "n.eval.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "enumerate", "support_xs.view.cuda", "query_xs.view.cuda", "support_xs.view.size", "support_xs.view.view", "query_xs.view.view", "normalize.detach().cpu().numpy", "normalize.detach().cpu().numpy", "support_ys.view().numpy.view().numpy", "query_ys.view().numpy.view().numpy", "acc.append", "pbar.set_postfix", "len", "net", "feat_support[].view", "net", "feat_query[].view", "meta_eval.normalize", "meta_eval.normalize", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.predict", "sklearn.metrics.accuracy_score", "support_xs.view.size", "query_xs.view.size", "n.eval.view", "n.eval.view", "support_xs.view.size", "query_xs.view.size", "normalize.detach().cpu", "normalize.detach().cpu", "support_ys.view().numpy.view", "query_ys.view().numpy.view", "meta_eval.NN", "support_xs.view.size", "query_xs.view.size", "meta_eval.Cosine", "NotImplementedError", "sklearn.metrics.accuracy_score", "n.eval.", "n.eval.", "normalize.detach", "normalize.detach"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.mean_confidence_interval", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.NN", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.Cosine"], ["", "def", "meta_test_ensamble", "(", "net", ",", "testloader", ",", "use_logit", "=", "True", ",", "is_norm", "=", "True", ",", "classifier", "=", "'LR'", ")", ":", "\n", "    ", "for", "n", "in", "net", ":", "\n", "        ", "n", "=", "n", ".", "eval", "(", ")", "\n", "", "acc", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "tqdm", "(", "testloader", ",", "total", "=", "len", "(", "testloader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "idx", ",", "data", "in", "enumerate", "(", "pbar", ")", ":", "\n", "                ", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "data", "\n", "\n", "support_xs", "=", "support_xs", ".", "cuda", "(", ")", "\n", "query_xs", "=", "query_xs", ".", "cuda", "(", ")", "\n", "batch_size", ",", "_", ",", "height", ",", "width", ",", "channel", "=", "support_xs", ".", "size", "(", ")", "\n", "support_xs", "=", "support_xs", ".", "view", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", "\n", "query_xs", "=", "query_xs", ".", "view", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", "\n", "\n", "if", "use_logit", ":", "\n", "                    ", "support_features", "=", "net", "[", "0", "]", "(", "support_xs", ")", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "query_features", "=", "net", "[", "0", "]", "(", "query_xs", ")", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "n", "in", "net", "[", "1", ":", "]", ":", "\n", "                        ", "support_features", "+=", "n", "(", "support_xs", ")", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "query_features", "+=", "n", "(", "query_xs", ")", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                    ", "feat_support", ",", "_", "=", "net", "(", "support_xs", ",", "is_feat", "=", "True", ")", "\n", "support_features", "=", "feat_support", "[", "-", "1", "]", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat_query", ",", "_", "=", "net", "(", "query_xs", ",", "is_feat", "=", "True", ")", "\n", "query_features", "=", "feat_query", "[", "-", "1", "]", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "is_norm", ":", "\n", "                    ", "support_features", "=", "normalize", "(", "support_features", ")", "\n", "query_features", "=", "normalize", "(", "query_features", ")", "\n", "\n", "", "support_features", "=", "support_features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_features", "=", "query_features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "support_ys", "=", "support_ys", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "query_ys", "=", "query_ys", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "classifier", "==", "'LR'", ":", "\n", "                    ", "clf", "=", "LogisticRegression", "(", "random_state", "=", "0", ",", "solver", "=", "'lbfgs'", ",", "max_iter", "=", "1000", ",", "\n", "multi_class", "=", "'multinomial'", ")", "\n", "clf", ".", "fit", "(", "support_features", ",", "support_ys", ")", "\n", "query_ys_pred", "=", "clf", ".", "predict", "(", "query_features", ")", "\n", "", "elif", "classifier", "==", "'NN'", ":", "\n", "                    ", "query_ys_pred", "=", "NN", "(", "support_features", ",", "support_ys", ",", "query_features", ")", "\n", "", "elif", "classifier", "==", "'Cosine'", ":", "\n", "                    ", "query_ys_pred", "=", "Cosine", "(", "support_features", ",", "support_ys", ",", "query_features", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'classifier not supported: {}'", ".", "format", "(", "classifier", ")", ")", "\n", "\n", "", "acc", ".", "append", "(", "metrics", ".", "accuracy_score", "(", "query_ys", ",", "query_ys_pred", ")", ")", "\n", "\n", "pbar", ".", "set_postfix", "(", "{", "\"FSL_Acc\"", ":", "'{0:.2f}'", ".", "format", "(", "metrics", ".", "accuracy_score", "(", "query_ys", ",", "query_ys_pred", ")", ")", "}", ")", "\n", "\n", "", "", "", "return", "mean_confidence_interval", "(", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.NN": [[294, 304], ["numpy.expand_dims", "numpy.expand_dims", "numpy.multiply", "np.multiply.sum", "numpy.argmin", "np.expand_dims.transpose"], "function", ["None"], ["", "def", "NN", "(", "support", ",", "support_ys", ",", "query", ")", ":", "\n", "    ", "\"\"\"nearest classifier\"\"\"", "\n", "support", "=", "np", ".", "expand_dims", "(", "support", ".", "transpose", "(", ")", ",", "0", ")", "\n", "query", "=", "np", ".", "expand_dims", "(", "query", ",", "2", ")", "\n", "\n", "diff", "=", "np", ".", "multiply", "(", "query", "-", "support", ",", "query", "-", "support", ")", "\n", "distance", "=", "diff", ".", "sum", "(", "1", ")", "\n", "min_idx", "=", "np", ".", "argmin", "(", "distance", ",", "axis", "=", "1", ")", "\n", "pred", "=", "[", "support_ys", "[", "idx", "]", "for", "idx", "in", "min_idx", "]", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.Cosine": [[306, 317], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.argmax", "support.transpose"], "function", ["None"], ["", "def", "Cosine", "(", "support", ",", "support_ys", ",", "query", ")", ":", "\n", "    ", "\"\"\"Cosine classifier\"\"\"", "\n", "support_norm", "=", "np", ".", "linalg", ".", "norm", "(", "support", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "support", "=", "support", "/", "support_norm", "\n", "query_norm", "=", "np", ".", "linalg", ".", "norm", "(", "query", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "query", "=", "query", "/", "query_norm", "\n", "\n", "cosine_distance", "=", "query", "@", "support", ".", "transpose", "(", ")", "\n", "max_idx", "=", "np", ".", "argmax", "(", "cosine_distance", ",", "axis", "=", "1", ")", "\n", "pred", "=", "[", "support_ys", "[", "idx", "]", "for", "idx", "in", "max_idx", "]", "\n", "return", "pred", "\n", "", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.cls_eval.validate": [[9, 64], ["util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "model.eval", "torch.no_grad", "tqdm.tqdm", "time.time", "enumerate", "print", "torch.cuda.is_available", "model", "criterion", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "pbar.set_postfix", "len", "input[].float", "input.cuda.float", "input.cuda.cuda", "target.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "time.time", "util.AverageMeter.avg.cpu().numpy", "util.AverageMeter.avg.cpu().numpy", "util.AverageMeter.avg.cpu", "util.AverageMeter.avg.cpu"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.eval.util.accuracy", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "opt", ")", ":", "\n", "    ", "\"\"\"One epoch validation\"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "tqdm", "(", "val_loader", ",", "total", "=", "len", "(", "val_loader", ")", ")", "as", "pbar", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "input", ",", "target", ",", "_", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "\n", "                ", "if", "(", "opt", ".", "simclr", ")", ":", "\n", "                    ", "input", "=", "input", "[", "0", "]", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                    ", "input", "=", "input", ".", "float", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "pbar", ".", "set_postfix", "(", "{", "\"Acc@1\"", ":", "'{0:.2f}'", ".", "format", "(", "top1", ".", "avg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Acc@5\"", ":", "'{0:.2f}'", ".", "format", "(", "top1", ".", "avg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "2", ")", ",", "\n", "\"Loss\"", ":", "'{0:.2f}'", ".", "format", "(", "losses", ".", "avg", ",", "2", ")", ",", "\n", "}", ")", "\n", "#                 if idx % opt.print_freq == 0:", "\n", "#                     print('Test: [{0}/{1}]\\t'", "\n", "#                           'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "#                           'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "#                           'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "#                           'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'.format(", "\n", "#                            idx, len(val_loader), batch_time=batch_time, loss=losses,", "\n", "#                            top1=top1, top5=top5))", "\n", "\n", "", "print", "(", "'Val_Acc@1 {top1.avg:.3f} Val_Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.cls_eval.embedding": [[68, 203], ["util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "model.eval", "torch.no_grad", "tqdm.tqdm", "time.time", "enumerate", "print", "print", "print", "numpy.save", "numpy.save", "torch.cuda.is_available", "x.transpose().flip", "x.flip().flip", "x.flip().transpose", "torch.cat", "target.cuda.repeat", "model", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "pbar.set_postfix", "torch.cat.size", "torch.cat.size", "torch.cat.detach().cpu().numpy", "torch.cat.detach().cpu().numpy", "len", "input[].float", "input.cuda.float", "input.cuda.cuda", "target.cuda.cuda", "input.cuda.size", "input.cuda.size", "input.cuda.size", "torch.cat", "torch.cat", "x.transpose", "x.flip", "x.flip", "time.time", "torch.cat.detach().cpu", "torch.cat.detach().cpu", "util.AverageMeter.avg.cpu().numpy", "util.AverageMeter.avg.cpu().numpy", "torch.cat.detach", "torch.cat.detach", "util.AverageMeter.avg.cpu", "util.AverageMeter.avg.cpu"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.eval.util.accuracy", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "def", "embedding", "(", "val_loader", ",", "model", ",", "opt", ")", ":", "\n", "    ", "\"\"\"One epoch validation\"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "tqdm", "(", "val_loader", ",", "total", "=", "len", "(", "val_loader", ")", ")", "as", "pbar", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "input", ",", "target", ",", "_", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "\n", "                ", "if", "(", "opt", ".", "simclr", ")", ":", "\n", "                    ", "input", "=", "input", "[", "0", "]", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                    ", "input", "=", "input", ".", "float", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "", "batch_size", "=", "input", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "input", "\n", "x_90", "=", "x", ".", "transpose", "(", "2", ",", "3", ")", ".", "flip", "(", "2", ")", "\n", "x_180", "=", "x", ".", "flip", "(", "2", ")", ".", "flip", "(", "3", ")", "\n", "x_270", "=", "x", ".", "flip", "(", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "generated_data", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_90", ",", "x_180", ",", "x_270", ")", ",", "0", ")", "\n", "train_targets", "=", "target", ".", "repeat", "(", "4", ")", "\n", "\n", "# compute output", "\n", "#                 output = model(input)", "\n", "(", "_", ",", "_", ",", "_", ",", "_", ",", "feat", ")", ",", "(", "output", ",", "rot_logits", ")", "=", "model", "(", "generated_data", ",", "rot", "=", "True", ")", "\n", "#                 loss = criterion(output, target)", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", "[", ":", "batch_size", "]", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "#                 losses.update(loss.item(), input.size(0))", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "idx", "==", "0", ")", ":", "\n", "                    ", "embeddings", "=", "output", "\n", "classes", "=", "train_targets", "\n", "", "else", ":", "\n", "                    ", "embeddings", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "output", ")", ",", "0", ")", "\n", "classes", "=", "torch", ".", "cat", "(", "(", "classes", ",", "train_targets", ")", ",", "0", ")", "\n", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "pbar", ".", "set_postfix", "(", "{", "\"Acc@1\"", ":", "'{0:.2f}'", ".", "format", "(", "top1", ".", "avg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "\"Acc@5\"", ":", "'{0:.2f}'", ".", "format", "(", "top1", ".", "avg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "2", ")", "\n", "}", ")", "\n", "#                 if idx % opt.print_freq == 0:", "\n", "#                     print('Test: [{0}/{1}]\\t'", "\n", "#                           'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "#                           'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "#                           'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "#                           'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'.format(", "\n", "#                            idx, len(val_loader), batch_time=batch_time, loss=losses,", "\n", "#                            top1=top1, top5=top5))", "\n", "\n", "", "print", "(", "'Val_Acc@1 {top1.avg:.3f} Val_Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "embeddings", ".", "size", "(", ")", ")", "\n", "print", "(", "classes", ".", "size", "(", ")", ")", "\n", "\n", "np", ".", "save", "(", "\"embeddings.npy\"", ",", "embeddings", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "save", "(", "\"classes.npy\"", ",", "classes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "\n", "#         with tqdm(val_loader, total=len(val_loader)) as pbar:", "\n", "#             end = time.time()", "\n", "#             for idx, (input, target, _) in enumerate(pbar):", "\n", "\n", "#                 if(opt.simclr):", "\n", "#                     input = input[0].float()", "\n", "#                 else:", "\n", "#                     input = input.float()", "\n", "\n", "#                 if torch.cuda.is_available():", "\n", "#                     input = input.cuda()", "\n", "#                     target = target.cuda()", "\n", "\n", "#                 generated_data = torch.cat((x, x_180),0)", "\n", "#                 # compute output", "\n", "# #                 output = model(input)", "\n", "#                 (_,_,_,_, feat), (output, rot_logits) = model(input, rot=True)", "\n", "# #                 loss = criterion(output, target)", "\n", "\n", "#                 # measure accuracy and record loss", "\n", "#                 acc1, acc5 = accuracy(output, target, topk=(1, 5))", "\n", "# #                 losses.update(loss.item(), input.size(0))", "\n", "#                 top1.update(acc1[0], input.size(0))", "\n", "#                 top5.update(acc5[0], input.size(0))", "\n", "\n", "#                 if(idx==0):", "\n", "#                     embeddings = output", "\n", "#                     classes    = target", "\n", "#                 else:", "\n", "#                     embeddings = torch.cat((embeddings, output),0)", "\n", "#                     classes    = torch.cat((classes, target),0)", "\n", "\n", "\n", "#                 # measure elapsed time", "\n", "#                 batch_time.update(time.time() - end)", "\n", "#                 end = time.time()", "\n", "\n", "#                 pbar.set_postfix({\"Acc@1\":'{0:.2f}'.format(top1.avg.cpu().numpy()), ", "\n", "#                                   \"Acc@5\":'{0:.2f}'.format(top1.avg.cpu().numpy(),2)", "\n", "#                                  })", "\n", "# #                 if idx % opt.print_freq == 0:", "\n", "# #                     print('Test: [{0}/{1}]\\t'", "\n", "# #                           'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "# #                           'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "# #                           'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "# #                           'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'.format(", "\n", "# #                            idx, len(val_loader), batch_time=batch_time, loss=losses,", "\n", "# #                            top1=top1, top5=top5))", "\n", "\n", "#             print('Val_Acc@1 {top1.avg:.3f} Val_Acc@5 {top5.avg:.3f}'", "\n", "#                   .format(top1=top1, top5=top5))", "\n", "#             print(embeddings.size())", "\n", "#             print(classes.size())", "\n", "\n", "#             np.save(\"embeddings.npy\", embeddings.detach().cpu().numpy())", "\n", "#             np.save(\"classes.npy\", classes.detach().cpu().numpy())", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.__init__": [[7, 9], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.reset"], ["import", "sys", "\n", "from", "dataloader", "import", "get_dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.reset": [[10, 15], ["None"], "methods", ["None"], ["\n", "class", "LabelSmoothing", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    NLL loss with label smoothing.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.AverageMeter.update": [[16, 21], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.eval.util.accuracy": [[23, 38], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n", "\n", "", "", "class", "BCEWithLogitsLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ",", "pos_weight", "=", "None", ",", "num_classes", "=", "64", ")", ":", "\n", "        ", "super", "(", "BCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", "weight", "=", "weight", ",", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "resnet_selfdist.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_selfdist.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.BasicBlock.forward": [[38, 54], ["resnet_selfdist.BasicBlock.BasicBlock.conv1", "resnet_selfdist.BasicBlock.BasicBlock.bn1", "resnet_selfdist.BasicBlock.BasicBlock.relu", "resnet_selfdist.BasicBlock.BasicBlock.conv2", "resnet_selfdist.BasicBlock.BasicBlock.bn2", "resnet_selfdist.BasicBlock.BasicBlock.relu", "resnet_selfdist.BasicBlock.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "output", "=", "self", ".", "conv1", "(", "x", ")", "\n", "output", "=", "self", ".", "bn1", "(", "output", ")", "\n", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv2", "(", "output", ")", "\n", "output", "=", "self", ".", "bn2", "(", "output", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "output", "+=", "residual", "\n", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.BottleneckBlock.__init__": [[57, 71], ["torch.Module.__init__", "resnet_selfdist.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_selfdist.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_selfdist.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.BottleneckBlock.forward": [[72, 93], ["resnet_selfdist.BottleneckBlock.BottleneckBlock.conv1", "resnet_selfdist.BottleneckBlock.BottleneckBlock.bn1", "resnet_selfdist.BottleneckBlock.BottleneckBlock.relu", "resnet_selfdist.BottleneckBlock.BottleneckBlock.conv2", "resnet_selfdist.BottleneckBlock.BottleneckBlock.bn2", "resnet_selfdist.BottleneckBlock.BottleneckBlock.relu", "resnet_selfdist.BottleneckBlock.BottleneckBlock.conv3", "resnet_selfdist.BottleneckBlock.BottleneckBlock.bn3", "resnet_selfdist.BottleneckBlock.BottleneckBlock.relu", "resnet_selfdist.BottleneckBlock.BottleneckBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "output", "=", "self", ".", "conv1", "(", "x", ")", "\n", "output", "=", "self", ".", "bn1", "(", "output", ")", "\n", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv2", "(", "output", ")", "\n", "output", "=", "self", ".", "bn2", "(", "output", ")", "\n", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "self", ".", "conv3", "(", "output", ")", "\n", "output", "=", "self", ".", "bn3", "(", "output", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "output", "+=", "residual", "\n", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.Multi_ResNet.__init__": [[103, 151], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_selfdist.Multi_ResNet.Multi_ResNet._make_layer", "resnet_selfdist.Multi_ResNet.Multi_ResNet._make_layer", "resnet_selfdist.Multi_ResNet.Multi_ResNet._make_layer", "resnet_selfdist.Multi_ResNet.Multi_ResNet._make_layer", "torch.Sequential", "torch.Sequential", "resnet_selfdist.branchBottleNeck", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "resnet_selfdist.branchBottleNeck", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "resnet_selfdist.branchBottleNeck", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_selfdist.Multi_ResNet.Multi_ResNet.modules", "resnet_selfdist.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_selfdist.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_selfdist.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.branchBottleNeck", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.branchBottleNeck", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.branchBottleNeck", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "Multi_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "downsample1_1", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "64", "*", "block", ".", "expansion", ",", "512", "*", "block", ".", "expansion", ",", "stride", "=", "8", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "self", ".", "bottleneck1_1", "=", "branchBottleNeck", "(", "64", "*", "block", ".", "expansion", ",", "512", "*", "block", ".", "expansion", ",", "kernel_size", "=", "8", ")", "\n", "self", ".", "avgpool1", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "middle_fc1", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "\n", "self", ".", "downsample2_1", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "128", "*", "block", ".", "expansion", ",", "512", "*", "block", ".", "expansion", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "self", ".", "bottleneck2_1", "=", "branchBottleNeck", "(", "128", "*", "block", ".", "expansion", ",", "512", "*", "block", ".", "expansion", ",", "kernel_size", "=", "4", ")", "\n", "self", ".", "avgpool2", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "middle_fc2", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "\n", "self", ".", "downsample3_1", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "256", "*", "block", ".", "expansion", ",", "512", "*", "block", ".", "expansion", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "self", ".", "bottleneck3_1", "=", "branchBottleNeck", "(", "256", "*", "block", ".", "expansion", ",", "512", "*", "block", ".", "expansion", ",", "kernel_size", "=", "2", ")", "\n", "self", ".", "avgpool3", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "middle_fc3", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.Multi_ResNet._make_layer": [[152, 174], ["layer.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layer.append", "resnet_selfdist.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "layers", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"A block with 'layers' layers\n\n        Args:\n            block (class): block type\n            planes (int): output channels = planes * expansion\n            layers (int): layer num in the block\n            stride (int): the first layer stride in the block\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "layer", "=", "[", "]", "\n", "layer", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "layers", ")", ":", "\n", "            ", "layer", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.Multi_ResNet.forward": [[175, 216], ["resnet_selfdist.Multi_ResNet.Multi_ResNet.conv1", "resnet_selfdist.Multi_ResNet.Multi_ResNet.bn1", "resnet_selfdist.Multi_ResNet.Multi_ResNet.relu", "resnet_selfdist.Multi_ResNet.Multi_ResNet.layer1", "resnet_selfdist.Multi_ResNet.Multi_ResNet.bottleneck1_1", "resnet_selfdist.Multi_ResNet.Multi_ResNet.avgpool1", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_selfdist.Multi_ResNet.Multi_ResNet.middle_fc1", "resnet_selfdist.Multi_ResNet.Multi_ResNet.layer2", "resnet_selfdist.Multi_ResNet.Multi_ResNet.bottleneck2_1", "resnet_selfdist.Multi_ResNet.Multi_ResNet.avgpool2", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_selfdist.Multi_ResNet.Multi_ResNet.middle_fc2", "resnet_selfdist.Multi_ResNet.Multi_ResNet.layer3", "resnet_selfdist.Multi_ResNet.Multi_ResNet.bottleneck3_1", "resnet_selfdist.Multi_ResNet.Multi_ResNet.avgpool3", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_selfdist.Multi_ResNet.Multi_ResNet.middle_fc3", "resnet_selfdist.Multi_ResNet.Multi_ResNet.layer4", "resnet_selfdist.Multi_ResNet.Multi_ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_selfdist.Multi_ResNet.Multi_ResNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ",", "is_dist", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "# x = self.maxpool(x)", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "middle_output1", "=", "self", ".", "bottleneck1_1", "(", "x", ")", "\n", "middle_output1", "=", "self", ".", "avgpool1", "(", "middle_output1", ")", "\n", "middle1_fea", "=", "middle_output1", "\n", "middle_output1", "=", "torch", ".", "flatten", "(", "middle_output1", ",", "1", ")", "\n", "middle_output1", "=", "self", ".", "middle_fc1", "(", "middle_output1", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "middle_output2", "=", "self", ".", "bottleneck2_1", "(", "x", ")", "\n", "middle_output2", "=", "self", ".", "avgpool2", "(", "middle_output2", ")", "\n", "middle2_fea", "=", "middle_output2", "\n", "middle_output2", "=", "torch", ".", "flatten", "(", "middle_output2", ",", "1", ")", "\n", "middle_output2", "=", "self", ".", "middle_fc2", "(", "middle_output2", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "middle_output3", "=", "self", ".", "bottleneck3_1", "(", "x", ")", "\n", "middle_output3", "=", "self", ".", "avgpool3", "(", "middle_output3", ")", "\n", "middle3_fea", "=", "middle_output3", "\n", "middle_output3", "=", "torch", ".", "flatten", "(", "middle_output3", ",", "1", ")", "\n", "middle_output3", "=", "self", ".", "middle_fc3", "(", "middle_output3", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "final_fea", "=", "x", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "\n", "if", "is_dist", ":", "\n", "            ", "return", "x", ",", "middle_output1", ",", "middle_output2", ",", "middle_output3", ",", "final_fea", ",", "middle1_fea", ",", "middle2_fea", ",", "middle3_fea", "\n", "\n", "", "if", "is_feat", ":", "\n", "            ", "return", "[", "final_fea", ",", "final_fea", ",", "final_fea", ",", "final_fea", ",", "final_fea", "]", ",", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.conv3x3": [[4, 7], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.conv1x1": [[8, 10], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.branchBottleNeck": [[11, 25], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["", "def", "branchBottleNeck", "(", "channel_in", ",", "channel_out", ",", "kernel_size", ")", ":", "\n", "    ", "middle_channel", "=", "channel_out", "//", "4", "\n", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel_in", ",", "middle_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "middle_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "middle_channel", ",", "middle_channel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "kernel_size", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "middle_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "middle_channel", ",", "channel_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_out", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.multi_resnet50_kd": [[218, 220], ["resnet_selfdist.Multi_ResNet"], "function", ["None"], ["", "", "", "def", "multi_resnet50_kd", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "Multi_ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.multi_resnet18_kd": [[221, 223], ["resnet_selfdist.Multi_ResNet"], "function", ["None"], ["", "def", "multi_resnet18_kd", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "return", "Multi_ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_selfdist.multi_resnet12_kd": [[225, 227], ["resnet_selfdist.Multi_ResNet"], "function", ["None"], ["", "def", "multi_resnet12_kd", "(", "num_classes", "=", "64", ")", ":", "\n", "    ", "return", "Multi_ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.convnet.ConvNet.__init__": [[9, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "convnet.ConvNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "# nn.BatchNorm2d(64, momentum=1, affine=True, track_running_stats=False),", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", ",", "self", ".", "num_classes", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.convnet.ConvNet.forward": [[45, 65], ["convnet.ConvNet.layer1", "convnet.ConvNet.layer2", "convnet.ConvNet.layer3", "convnet.ConvNet.layer4", "convnet.ConvNet.avgpool", "convnet.ConvNet.view", "convnet.ConvNet.size", "convnet.ConvNet.classifier"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "f0", "=", "out", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "f1", "=", "out", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "f2", "=", "out", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "f3", "=", "out", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "out", "\n", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "", "if", "is_feat", ":", "\n", "            ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "feat", "]", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.convnet.convnet4": [[67, 72], ["convnet.ConvNet"], "function", ["None"], ["", "", "", "def", "convnet4", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Four layer ConvNet\n    \"\"\"", "\n", "model", "=", "ConvNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.StoDepth_BasicBlock.__init__": [[32, 44], ["torch.Module.__init__", "resnet_sd.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_sd.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "prob", ",", "multFlag", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "StoDepth_BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "m", "=", "torch", ".", "distributions", ".", "bernoulli", ".", "Bernoulli", "(", "torch", ".", "Tensor", "(", "[", "self", ".", "prob", "]", ")", ")", "\n", "self", ".", "multFlag", "=", "multFlag", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.StoDepth_BasicBlock.forward": [[45, 94], ["x.clone", "resnet_sd.StoDepth_BasicBlock.relu", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "resnet_sd.StoDepth_BasicBlock.conv1", "resnet_sd.StoDepth_BasicBlock.bn1", "resnet_sd.StoDepth_BasicBlock.relu", "resnet_sd.StoDepth_BasicBlock.conv2", "resnet_sd.StoDepth_BasicBlock.bn2", "resnet_sd.StoDepth_BasicBlock.m.sample", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "resnet_sd.StoDepth_BasicBlock.conv1", "resnet_sd.StoDepth_BasicBlock.bn1", "resnet_sd.StoDepth_BasicBlock.relu", "resnet_sd.StoDepth_BasicBlock.conv2", "resnet_sd.StoDepth_BasicBlock.bn2", "resnet_sd.StoDepth_BasicBlock.downsample", "resnet_sd.StoDepth_BasicBlock.downsample", "resnet_sd.StoDepth_BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "identity", "=", "x", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "torch", ".", "equal", "(", "self", ".", "m", ".", "sample", "(", ")", ",", "torch", ".", "ones", "(", "1", ")", ")", ":", "\n", "\n", "                ", "self", ".", "conv1", ".", "weight", ".", "requires_grad", "=", "True", "\n", "self", ".", "conv2", ".", "weight", ".", "requires_grad", "=", "True", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "", "else", ":", "\n", "# Resnet does not use bias terms", "\n", "                ", "self", ".", "conv1", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "conv2", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "identity", "\n", "", "", "else", ":", "\n", "\n", "\n", "            ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "multFlag", ":", "\n", "                ", "out", "=", "self", ".", "prob", "*", "out", "+", "identity", "\n", "", "else", ":", "\n", "                ", "out", "=", "out", "+", "identity", "\n", "\n", "", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.StoDepth_Bottleneck.__init__": [[99, 113], ["torch.Module.__init__", "resnet_sd.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_sd.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_sd.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.distributions.bernoulli.Bernoulli", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1"], ["def", "__init__", "(", "self", ",", "prob", ",", "multFlag", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "StoDepth_Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "m", "=", "torch", ".", "distributions", ".", "bernoulli", ".", "Bernoulli", "(", "torch", ".", "Tensor", "(", "[", "self", ".", "prob", "]", ")", ")", "\n", "self", ".", "multFlag", "=", "multFlag", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.StoDepth_Bottleneck.forward": [[114, 172], ["x.clone", "resnet_sd.StoDepth_Bottleneck.relu", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "resnet_sd.StoDepth_Bottleneck.conv1", "resnet_sd.StoDepth_Bottleneck.bn1", "resnet_sd.StoDepth_Bottleneck.relu", "resnet_sd.StoDepth_Bottleneck.conv2", "resnet_sd.StoDepth_Bottleneck.bn2", "resnet_sd.StoDepth_Bottleneck.relu", "resnet_sd.StoDepth_Bottleneck.conv3", "resnet_sd.StoDepth_Bottleneck.bn3", "resnet_sd.StoDepth_Bottleneck.m.sample", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "resnet_sd.StoDepth_Bottleneck.conv1", "resnet_sd.StoDepth_Bottleneck.bn1", "resnet_sd.StoDepth_Bottleneck.relu", "resnet_sd.StoDepth_Bottleneck.conv2", "resnet_sd.StoDepth_Bottleneck.bn2", "resnet_sd.StoDepth_Bottleneck.relu", "resnet_sd.StoDepth_Bottleneck.conv3", "resnet_sd.StoDepth_Bottleneck.bn3", "resnet_sd.StoDepth_Bottleneck.downsample", "resnet_sd.StoDepth_Bottleneck.downsample", "resnet_sd.StoDepth_Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "identity", "=", "x", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "torch", ".", "equal", "(", "self", ".", "m", ".", "sample", "(", ")", ",", "torch", ".", "ones", "(", "1", ")", ")", ":", "\n", "                ", "self", ".", "conv1", ".", "weight", ".", "requires_grad", "=", "True", "\n", "self", ".", "conv2", ".", "weight", ".", "requires_grad", "=", "True", "\n", "self", ".", "conv3", ".", "weight", ".", "requires_grad", "=", "True", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "", "else", ":", "\n", "# Resnet does not use bias terms", "\n", "                ", "self", ".", "conv1", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "conv2", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "conv3", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "identity", "\n", "", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "multFlag", ":", "\n", "                ", "out", "=", "self", ".", "prob", "*", "out", "+", "identity", "\n", "", "else", ":", "\n", "                ", "out", "=", "out", "+", "identity", "\n", "\n", "", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.ResNet_StoDepth_lineardecay.__init__": [[176, 213], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_sd.ResNet_StoDepth_lineardecay._make_layer", "resnet_sd.ResNet_StoDepth_lineardecay._make_layer", "resnet_sd.ResNet_StoDepth_lineardecay._make_layer", "resnet_sd.ResNet_StoDepth_lineardecay._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_sd.ResNet_StoDepth_lineardecay.modules", "isinstance", "resnet_sd.ResNet_StoDepth_lineardecay.modules", "sum", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "prob_0_L", ",", "multFlag", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet_StoDepth_lineardecay", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "multFlag", "=", "multFlag", "\n", "self", ".", "prob_now", "=", "prob_0_L", "[", "0", "]", "\n", "self", ".", "prob_delta", "=", "prob_0_L", "[", "0", "]", "-", "prob_0_L", "[", "1", "]", "\n", "self", ".", "prob_step", "=", "self", ".", "prob_delta", "/", "(", "sum", "(", "layers", ")", "-", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "320", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "640", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "640", "*", "block", ".", "expansion", ",", "64", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "StoDepth_lineardecayBottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "StoDepth_lineardecayBasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.ResNet_StoDepth_lineardecay._make_layer": [[214, 231], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_sd.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "prob_now", ",", "self", ".", "multFlag", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "prob_now", "=", "self", ".", "prob_now", "-", "self", ".", "prob_step", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "prob_now", ",", "self", ".", "multFlag", ",", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "self", ".", "prob_now", "=", "self", ".", "prob_now", "-", "self", ".", "prob_step", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.ResNet_StoDepth_lineardecay.forward": [[232, 248], ["resnet_sd.ResNet_StoDepth_lineardecay.conv1", "resnet_sd.ResNet_StoDepth_lineardecay.bn1", "resnet_sd.ResNet_StoDepth_lineardecay.relu", "resnet_sd.ResNet_StoDepth_lineardecay.maxpool", "resnet_sd.ResNet_StoDepth_lineardecay.layer1", "resnet_sd.ResNet_StoDepth_lineardecay.layer2", "resnet_sd.ResNet_StoDepth_lineardecay.layer3", "resnet_sd.ResNet_StoDepth_lineardecay.layer4", "resnet_sd.ResNet_StoDepth_lineardecay.avgpool", "resnet_sd.ResNet_StoDepth_lineardecay.view", "resnet_sd.ResNet_StoDepth_lineardecay.fc", "resnet_sd.ResNet_StoDepth_lineardecay.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.conv1x1": [[24, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.resnet12_sd": [[251, 258], ["resnet_sd.ResNet_StoDepth_lineardecay"], "function", ["None"], ["", "", "def", "resnet12_sd", "(", "pretrained", "=", "False", ",", "prob_0_L", "=", "[", "1", ",", "0.5", "]", ",", "multFlag", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet_StoDepth_lineardecay-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_StoDepth_lineardecay", "(", "StoDepth_BasicBlock", ",", "prob_0_L", ",", "multFlag", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.resnet18_StoDepth_lineardecay": [[260, 269], ["resnet_sd.ResNet_StoDepth_lineardecay", "ResNet_StoDepth_lineardecay.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet18_StoDepth_lineardecay", "(", "pretrained", "=", "False", ",", "prob_0_L", "=", "[", "1", ",", "0.5", "]", ",", "multFlag", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet_StoDepth_lineardecay-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_StoDepth_lineardecay", "(", "StoDepth_BasicBlock", ",", "prob_0_L", ",", "multFlag", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.resnet34_StoDepth_lineardecay": [[271, 280], ["resnet_sd.ResNet_StoDepth_lineardecay", "ResNet_StoDepth_lineardecay.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34_StoDepth_lineardecay", "(", "pretrained", "=", "False", ",", "prob_0_L", "=", "[", "1", ",", "0.5", "]", ",", "multFlag", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet_StoDepth_lineardecay-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_StoDepth_lineardecay", "(", "StoDepth_BasicBlock", ",", "prob_0_L", ",", "multFlag", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.resnet50_StoDepth_lineardecay": [[282, 291], ["resnet_sd.ResNet_StoDepth_lineardecay", "ResNet_StoDepth_lineardecay.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50_StoDepth_lineardecay", "(", "pretrained", "=", "False", ",", "prob_0_L", "=", "[", "1", ",", "0.5", "]", ",", "multFlag", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet_StoDepth_lineardecay-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_StoDepth_lineardecay", "(", "StoDepth_Bottleneck", ",", "prob_0_L", ",", "multFlag", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.resnet101_StoDepth_lineardecay": [[293, 302], ["resnet_sd.ResNet_StoDepth_lineardecay", "ResNet_StoDepth_lineardecay.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101_StoDepth_lineardecay", "(", "pretrained", "=", "False", ",", "prob_0_L", "=", "[", "1", ",", "0.5", "]", ",", "multFlag", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet_StoDepth_lineardecay-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_StoDepth_lineardecay", "(", "StoDepth_Bottleneck", ",", "prob_0_L", ",", "multFlag", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_sd.resnet152_StoDepth_lineardecay": [[304, 313], ["resnet_sd.ResNet_StoDepth_lineardecay", "ResNet_StoDepth_lineardecay.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152_StoDepth_lineardecay", "(", "pretrained", "=", "False", ",", "prob_0_L", "=", "[", "1", ",", "0.5", "]", ",", "multFlag", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet_StoDepth_lineardecay-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_StoDepth_lineardecay", "(", "StoDepth_Bottleneck", ",", "prob_0_L", ",", "multFlag", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.Normalize.__init__": [[25, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.Normalize.forward": [[29, 33], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.BasicBlock.__init__": [[38, 47], ["torch.Module.__init__", "resnet_new.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_new.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.BasicBlock.forward": [[48, 65], ["resnet_new.BasicBlock.conv1", "resnet_new.BasicBlock.bn1", "resnet_new.BasicBlock.relu", "resnet_new.BasicBlock.conv2", "resnet_new.BasicBlock.bn2", "resnet_new.BasicBlock.relu", "resnet_new.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.Bottleneck.__init__": [[70, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.Bottleneck.forward": [[83, 104], ["resnet_new.Bottleneck.conv1", "resnet_new.Bottleneck.bn1", "resnet_new.Bottleneck.relu", "resnet_new.Bottleneck.conv2", "resnet_new.Bottleneck.bn2", "resnet_new.Bottleneck.relu", "resnet_new.Bottleneck.conv3", "resnet_new.Bottleneck.bn3", "resnet_new.Bottleneck.relu", "resnet_new.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.ResNet.__init__": [[108, 133], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_new.ResNet._make_layer", "resnet_new.ResNet._make_layer", "resnet_new.ResNet._make_layer", "resnet_new.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_new.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "in_channel", "=", "3", ",", "width", "=", "1", ",", "num_classes", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "base", "=", "int", "(", "64", "*", "width", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "base", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.ResNet._make_layer": [[134, 150], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.ResNet.forward": [[151, 168], ["resnet_new.ResNet.conv1", "resnet_new.ResNet.bn1", "resnet_new.ResNet.relu", "resnet_new.ResNet.maxpool", "resnet_new.ResNet.layer1", "resnet_new.ResNet.layer2", "resnet_new.ResNet.layer3", "resnet_new.ResNet.layer4", "resnet_new.ResNet.avgpool", "resnet_new.ResNet.view", "resnet_new.ResNet.classifier", "resnet_new.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "is_feat", ":", "\n", "            ", "return", "[", "x", "]", ",", "x", "\n", "\n", "", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_new.resnet50": [[170, 179], ["resnet_new.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.SELayer.__init__": [[14, 22], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.SELayer.forward": [[24, 29], ["x.size", "resnet_ssl.SELayer.avg_pool().view", "resnet_ssl.SELayer.fc().view", "resnet_ssl.SELayer.avg_pool", "resnet_ssl.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.DropBlock.__init__": [[32, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "#self.gamma = gamma", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.DropBlock.forward": [[39, 54], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample().cuda", "torch.distributions.Bernoulli.sample().cuda", "torch.distributions.Bernoulli.sample().cuda", "resnet_ssl.DropBlock._compute_block_mask", "resnet_ssl.DropBlock.sum", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "resnet_ssl.DropBlock.size", "resnet_ssl.DropBlock.size", "resnet_ssl.DropBlock.size", "resnet_ssl.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "(", "batch_size", ",", "channels", ",", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ")", ")", ".", "cuda", "(", ")", "\n", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "countM", "=", "block_mask", ".", "size", "(", ")", "[", "0", "]", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.DropBlock._compute_block_mask": [[55, 86], ["int", "int", "mask.nonzero", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "#print (\"mask\", mask[0][0])", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "#- left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", ".", "cuda", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", ")", "\n", "\n", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "#block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "padded_mask", "[", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "#[:height, :width]", "\n", "return", "block_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.BasicBlock.__init__": [[91, 112], ["torch.Module.__init__", "resnet_ssl.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "resnet_ssl.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_ssl.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ssl.DropBlock", "resnet_ssl.SELayer"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "\n", "block_size", "=", "1", ",", "use_se", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "self", ".", "use_se", "=", "use_se", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "self", ".", "se", "=", "SELayer", "(", "planes", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.BasicBlock.forward": [[113, 147], ["resnet_ssl.BasicBlock.conv1", "resnet_ssl.BasicBlock.bn1", "resnet_ssl.BasicBlock.relu", "resnet_ssl.BasicBlock.conv2", "resnet_ssl.BasicBlock.bn2", "resnet_ssl.BasicBlock.relu", "resnet_ssl.BasicBlock.conv3", "resnet_ssl.BasicBlock.bn3", "resnet_ssl.BasicBlock.relu", "resnet_ssl.BasicBlock.maxpool", "resnet_ssl.BasicBlock.se", "resnet_ssl.BasicBlock.downsample", "max", "resnet_ssl.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "1.0", "-", "self", ".", "drop_rate", ")", "\n", "gamma", "=", "(", "1", "-", "keep_rate", ")", "/", "self", ".", "block_size", "**", "2", "*", "feat_size", "**", "2", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.ResNet.__init__": [[151, 184], ["torch.Module.__init__", "resnet_ssl.ResNet._make_layer", "resnet_ssl.ResNet._make_layer", "resnet_ssl.ResNet._make_layer", "resnet_ssl.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet_ssl.ResNet.modules", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "n_blocks", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "drop_rate", "=", "0.0", ",", "\n", "dropblock_size", "=", "5", ",", "num_classes", "=", "-", "1", ",", "use_se", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "3", "\n", "self", ".", "use_se", "=", "use_se", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "0", "]", ",", "64", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "1", "]", ",", "160", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "2", "]", ",", "320", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "3", "]", ",", "640", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "if", "avg_pool", ":", "\n", "# self.avgpool = nn.AvgPool2d(5, stride=1)", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "640", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "rot_classifier", "=", "nn", ".", "Linear", "(", "self", ".", "num_classes", ",", "4", ")", "\n", "#             self.rot_classifier1 = nn.Linear(self.num_classes, 32)", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.ResNet._make_layer": [[188, 214], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block", "block"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "n_block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "n_block", "==", "1", ":", "\n", "            ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "drop_block", ",", "block_size", ",", "self", ".", "use_se", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "self", ".", "use_se", ")", "\n", "", "layers", ".", "append", "(", "layer", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n_block", ")", ":", "\n", "            ", "if", "i", "==", "n_block", "-", "1", ":", "\n", "                ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "drop_block", ",", "\n", "block_size", "=", "block_size", ",", "use_se", "=", "self", ".", "use_se", ")", "\n", "", "else", ":", "\n", "                ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "drop_rate", "=", "drop_rate", ",", "use_se", "=", "self", ".", "use_se", ")", "\n", "", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.ResNet.forward": [[215, 241], ["resnet_ssl.ResNet.layer1", "resnet_ssl.ResNet.layer2", "resnet_ssl.ResNet.layer3", "resnet_ssl.ResNet.layer4", "resnet_ssl.ResNet.view", "resnet_ssl.ResNet.classifier", "resnet_ssl.ResNet.avgpool", "resnet_ssl.ResNet.size", "resnet_ssl.ResNet.rot_classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ",", "rot", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "f0", "=", "x", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "f1", "=", "x", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "f2", "=", "x", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "f3", "=", "x", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "x", "\n", "\n", "xx", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "if", "(", "rot", ")", ":", "\n", "#             xy1 = self.rot_classifier1(xx)", "\n", "#             xy2 = self.rot_classifier2(xy1)", "\n", "            ", "xy", "=", "self", ".", "rot_classifier", "(", "xx", ")", "\n", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "feat", "]", ",", "(", "xx", ",", "xy", ")", "\n", "\n", "", "if", "is_feat", ":", "\n", "            ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "feat", "]", ",", "xx", "\n", "", "else", ":", "\n", "            ", "return", "xx", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.resnet12_ssl": [[243, 248], ["resnet_ssl.ResNet"], "function", ["None"], ["", "", "", "def", "resnet12_ssl", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.resnet18": [[250, 255], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.resnet24": [[257, 262], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "resnet24", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-24 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.resnet50": [[264, 270], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    indeed, only (3 + 4 + 6 + 3) * 3 + 1 = 49 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.resnet101": [[272, 278], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    indeed, only (3 + 4 + 23 + 3) * 3 + 1 = 100 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.seresnet12": [[280, 285], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "seresnet12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.seresnet18": [[287, 292], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "seresnet18", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.seresnet24": [[294, 299], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "seresnet24", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-24 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.seresnet50": [[301, 307], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "seresnet50", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    indeed, only (3 + 4 + 6 + 3) * 3 + 1 = 49 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet_ssl.seresnet101": [[309, 315], ["resnet_ssl.ResNet"], "function", ["None"], ["", "def", "seresnet101", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    indeed, only (3 + 4 + 23 + 3) * 3 + 1 = 100 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.SELayer.__init__": [[14, 22], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.SELayer.forward": [[24, 29], ["x.size", "resnet.SELayer.avg_pool().view", "resnet.SELayer.fc().view", "resnet.SELayer.avg_pool", "resnet.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.DropBlock.__init__": [[32, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "#self.gamma = gamma", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.DropBlock.forward": [[39, 54], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample().cuda", "torch.distributions.Bernoulli.sample().cuda", "torch.distributions.Bernoulli.sample().cuda", "resnet.DropBlock._compute_block_mask", "resnet.DropBlock.sum", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "resnet.DropBlock.size", "resnet.DropBlock.size", "resnet.DropBlock.size", "resnet.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "(", "batch_size", ",", "channels", ",", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ")", ")", ".", "cuda", "(", ")", "\n", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "countM", "=", "block_mask", ".", "size", "(", ")", "[", "0", "]", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.DropBlock._compute_block_mask": [[55, 86], ["int", "int", "mask.nonzero", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "#print (\"mask\", mask[0][0])", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "#- left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", ".", "cuda", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", ")", "\n", "\n", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "#block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "padded_mask", "[", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "#[:height, :width]", "\n", "return", "block_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.BasicBlock.__init__": [[91, 112], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.DropBlock", "resnet.SELayer"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "\n", "block_size", "=", "1", ",", "use_se", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "self", ".", "use_se", "=", "use_se", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "self", ".", "se", "=", "SELayer", "(", "planes", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.BasicBlock.forward": [[113, 147], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv3", "resnet.BasicBlock.bn3", "resnet.BasicBlock.relu", "resnet.BasicBlock.maxpool", "resnet.BasicBlock.se", "resnet.BasicBlock.downsample", "max", "resnet.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "1.0", "-", "self", ".", "drop_rate", ")", "\n", "gamma", "=", "(", "1", "-", "keep_rate", ")", "/", "self", ".", "block_size", "**", "2", "*", "feat_size", "**", "2", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet.__init__": [[151, 183], ["torch.Module.__init__", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.ResNet.modules", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "n_blocks", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "drop_rate", "=", "0.0", ",", "\n", "dropblock_size", "=", "5", ",", "num_classes", "=", "-", "1", ",", "use_se", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "3", "\n", "self", ".", "use_se", "=", "use_se", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "0", "]", ",", "64", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "1", "]", ",", "160", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "2", "]", ",", "320", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "3", "]", ",", "640", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "if", "avg_pool", ":", "\n", "# self.avgpool = nn.AvgPool2d(5, stride=1)", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "640", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet._make_layer": [[184, 210], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block", "block"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "n_block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "n_block", "==", "1", ":", "\n", "            ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "drop_block", ",", "block_size", ",", "self", ".", "use_se", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "self", ".", "use_se", ")", "\n", "", "layers", ".", "append", "(", "layer", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n_block", ")", ":", "\n", "            ", "if", "i", "==", "n_block", "-", "1", ":", "\n", "                ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "drop_block", ",", "\n", "block_size", "=", "block_size", ",", "use_se", "=", "self", ".", "use_se", ")", "\n", "", "else", ":", "\n", "                ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "drop_rate", "=", "drop_rate", ",", "use_se", "=", "self", ".", "use_se", ")", "\n", "", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.ResNet.forward": [[211, 232], ["resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.view", "resnet.ResNet.avgpool", "resnet.ResNet.size", "resnet.ResNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "f0", "=", "x", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "f1", "=", "x", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "f2", "=", "x", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "f3", "=", "x", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "x", "\n", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "", "if", "is_feat", ":", "\n", "            ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "feat", "]", ",", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.resnet12": [[234, 239], ["resnet.ResNet"], "function", ["None"], ["", "", "", "def", "resnet12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.resnet18": [[241, 246], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.resnet24": [[248, 253], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet24", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-24 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.resnet50": [[255, 261], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    indeed, only (3 + 4 + 6 + 3) * 3 + 1 = 49 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.resnet101": [[263, 269], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    indeed, only (3 + 4 + 23 + 3) * 3 + 1 = 100 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.seresnet12": [[271, 276], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.seresnet18": [[278, 283], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet18", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.seresnet24": [[285, 290], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet24", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-24 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.seresnet50": [[292, 298], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet50", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    indeed, only (3 + 4 + 6 + 3) * 3 + 1 = 49 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.resnet.seresnet101": [[300, 306], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet101", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    indeed, only (3 + 4 + 23 + 3) * 3 + 1 = 100 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.util.create_model": [[7, 46], ["name.endswith", "name.endswith", "name.endswith", "print", "name.endswith", "NotImplementedError", "name.endswith", "name.endswith", "name.startswith", "name.endswith", "print", "name.startswith", "name.startswith", "name.startswith", "name.startswith", "name.startswith", "name.startswith", "name.startswith", "NotImplementedError", "NotImplementedError"], "function", ["None"], ["import", "sys", "\n", "from", "dataloader", "import", "get_dataloaders", "\n", "\n", "\n", "class", "LabelSmoothing", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    NLL loss with label smoothing.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n", "\n", "", "", "class", "BCEWithLogitsLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ",", "pos_weight", "=", "None", ",", "num_classes", "=", "64", ")", ":", "\n", "        ", "super", "(", "BCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", "weight", "=", "weight", ",", "\n", "size_average", "=", "size_average", ",", "\n", "reduce", "=", "reduce", ",", "\n", "reduction", "=", "reduction", ",", "\n", "pos_weight", "=", "pos_weight", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target_onehot", "=", "F", ".", "one_hot", "(", "target", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "return", "self", ".", "criterion", "(", "input", ",", "target_onehot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.util.get_teacher_name": [[48, 58], ["[].split", "segments[].split", "model_path.split"], "function", ["None"], ["", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "\"\"\"Computes and stores the average and current value\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.wide_basic.__init__": [[26, 38], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.wide_basic.forward": [[40, 46], ["wresnet.wide_basic.dropout", "wresnet.wide_basic.conv2", "wresnet.wide_basic.shortcut", "wresnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wresnet.wide_basic.bn2", "wresnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.Wide_ResNet.__init__": [[49, 69], ["torch.Module.__init__", "print", "wresnet.conv3x3", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", "*", "k", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.Wide_ResNet._wide_layer": [[70, 79], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["", "", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.Wide_ResNet.forward": [[80, 96], ["wresnet.Wide_ResNet.conv1", "wresnet.Wide_ResNet.layer1", "wresnet.Wide_ResNet.layer2", "wresnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "wresnet.Wide_ResNet.view", "wresnet.Wide_ResNet.bn1", "wresnet.Wide_ResNet.size", "wresnet.Wide_ResNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "out", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "", "if", "is_feat", ":", "\n", "            ", "return", "[", "feat", "]", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv3x3": [[11, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.conv_init": [[15, 23], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.models.wresnet.wrn_28_10": [[98, 100], ["wresnet.Wide_ResNet"], "function", ["None"], ["", "", "", "def", "wrn_28_10", "(", "dropout_rate", "=", "0.3", ",", "num_classes", "=", "-", "1", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "28", ",", "10", ",", "dropout_rate", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCESoftmax.__init__": [[10, 22], ["torch.nn.Module.__init__", "torch.ones", "alias_multinomial.AliasMethod", "NCEAverage.NCESoftmax.multinomial.cuda", "NCEAverage.NCESoftmax.register_buffer", "NCEAverage.NCESoftmax.register_buffer", "NCEAverage.NCESoftmax.register_buffer", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "K", ",", "T", "=", "0.07", ",", "momentum", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "NCESoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "self", ".", "unigrams", "=", "torch", ".", "ones", "(", "self", ".", "nLem", ")", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "self", ".", "unigrams", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "K", ",", "T", ",", "-", "1", ",", "-", "1", ",", "momentum", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory_l'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ab'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCESoftmax.forward": [[23, 86], ["int", "NCEAverage.NCESoftmax.params[].item", "NCEAverage.NCESoftmax.params[].item", "NCEAverage.NCESoftmax.params[].item", "NCEAverage.NCESoftmax.params[].item", "l.size", "NCEAverage.NCESoftmax.memory_l.size", "NCEAverage.NCESoftmax.memory_l.size", "torch.index_select().detach", "weight_l.view.view.view", "torch.bmm", "torch.div", "torch.index_select().detach", "weight_ab.view.view.view", "torch.bmm", "torch.div", "out_l.contiguous.contiguous.contiguous", "out_ab.contiguous.contiguous.contiguous", "NCEAverage.NCESoftmax.params[].item", "NCEAverage.NCESoftmax.multinomial.draw().view", "NCEAverage.NCESoftmax.select().copy_", "ab.view", "l.view", "NCEAverage.NCESoftmax.params[].clone().detach().item", "print", "NCEAverage.NCESoftmax.params[].clone().detach().item", "print", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCESoftmax.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCESoftmax.memory_ab.index_copy_", "torch.index_select", "torch.index_select", "y.view", "torch.mul", "y.view", "torch.mul", "NCEAverage.NCESoftmax.multinomial.draw", "NCEAverage.NCESoftmax.select", "NCEAverage.NCESoftmax.view", "NCEAverage.NCESoftmax.view", "NCEAverage.NCESoftmax.params[].clone().detach", "NCEAverage.NCESoftmax.params[].clone().detach", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "NCEAverage.NCESoftmax.params[].clone", "NCEAverage.NCESoftmax.params[].clone", "torch.index_select.pow", "torch.index_select.pow"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "l", ",", "ab", ",", "y", ",", "idx", "=", "None", ")", ":", "\n", "        ", "K", "=", "int", "(", "self", ".", "params", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "T", "=", "self", ".", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "item", "(", ")", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "item", "(", ")", "\n", "\n", "momentum", "=", "self", ".", "params", "[", "4", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "l", ".", "size", "(", "0", ")", "\n", "outputSize", "=", "self", ".", "memory_l", ".", "size", "(", "0", ")", "\n", "inputSize", "=", "self", ".", "memory_l", ".", "size", "(", "1", ")", "\n", "\n", "# original score computation", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "batchSize", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "# sample", "\n", "", "weight_l", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_l", "=", "weight_l", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_ab", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "# out_ab = torch.exp(torch.div(out_ab, T))", "\n", "out_ab", "=", "torch", ".", "div", "(", "out_ab", ",", "T", ")", "\n", "# sample", "\n", "weight_ab", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_ab", "=", "weight_ab", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_l", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "# out_l = torch.exp(torch.div(out_l, T))", "\n", "out_l", "=", "torch", ".", "div", "(", "out_l", ",", "T", ")", "\n", "\n", "# set Z if haven't been set yet", "\n", "if", "Z_l", "<", "0", ":", "\n", "# self.params[2] = out_l.mean() * outputSize", "\n", "            ", "self", ".", "params", "[", "2", "]", "=", "1", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_l is set to {:.1f}\"", ".", "format", "(", "Z_l", ")", ")", "\n", "", "if", "Z_ab", "<", "0", ":", "\n", "# self.params[3] = out_ab.mean() * outputSize", "\n", "            ", "self", ".", "params", "[", "3", "]", "=", "1", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_ab is set to {:.1f}\"", ".", "format", "(", "Z_ab", ")", ")", "\n", "\n", "# compute out_l, out_ab", "\n", "# out_l = torch.div(out_l, Z_l).contiguous()", "\n", "# out_ab = torch.div(out_ab, Z_ab).contiguous()", "\n", "", "out_l", "=", "out_l", ".", "contiguous", "(", ")", "\n", "out_ab", "=", "out_ab", ".", "contiguous", "(", ")", "\n", "\n", "# update memory", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "\n", "", "return", "out_l", ",", "out_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverage.__init__": [[90, 102], ["torch.nn.Module.__init__", "torch.ones", "alias_multinomial.AliasMethod", "NCEAverage.NCEAverage.multinomial.cuda", "NCEAverage.NCEAverage.register_buffer", "NCEAverage.NCEAverage.register_buffer", "NCEAverage.NCEAverage.register_buffer", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "K", ",", "T", "=", "0.07", ",", "momentum", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "NCEAverage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "self", ".", "unigrams", "=", "torch", ".", "ones", "(", "self", ".", "nLem", ")", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "self", ".", "unigrams", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "K", ",", "T", ",", "-", "1", ",", "-", "1", ",", "momentum", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory_l'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ab'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverage.forward": [[103, 160], ["int", "NCEAverage.NCEAverage.params[].item", "NCEAverage.NCEAverage.params[].item", "NCEAverage.NCEAverage.params[].item", "NCEAverage.NCEAverage.params[].item", "l.size", "NCEAverage.NCEAverage.memory_l.size", "NCEAverage.NCEAverage.memory_l.size", "torch.index_select().detach", "weight_l.view.view.view", "torch.bmm", "torch.exp", "torch.index_select().detach", "weight_ab.view.view.view", "torch.bmm", "torch.exp", "torch.div().contiguous", "torch.div().contiguous", "NCEAverage.NCEAverage.params[].item", "NCEAverage.NCEAverage.multinomial.draw().view", "NCEAverage.NCEAverage.select().copy_", "ab.view", "torch.div", "l.view", "torch.div", "NCEAverage.NCEAverage.params[].clone().detach().item", "print", "NCEAverage.NCEAverage.params[].clone().detach().item", "print", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverage.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverage.memory_ab.index_copy_", "torch.index_select", "torch.index_select", "torch.div().contiguous.mean", "torch.div().contiguous.mean", "torch.div", "torch.div", "y.view", "torch.mul", "y.view", "torch.mul", "NCEAverage.NCEAverage.multinomial.draw", "NCEAverage.NCEAverage.select", "NCEAverage.NCEAverage.view", "NCEAverage.NCEAverage.view", "NCEAverage.NCEAverage.params[].clone().detach", "NCEAverage.NCEAverage.params[].clone().detach", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "NCEAverage.NCEAverage.params[].clone", "NCEAverage.NCEAverage.params[].clone", "torch.index_select.pow", "torch.index_select.pow"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "l", ",", "ab", ",", "y", ",", "idx", "=", "None", ")", ":", "\n", "        ", "K", "=", "int", "(", "self", ".", "params", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "T", "=", "self", ".", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "item", "(", ")", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "item", "(", ")", "\n", "\n", "momentum", "=", "self", ".", "params", "[", "4", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "l", ".", "size", "(", "0", ")", "\n", "outputSize", "=", "self", ".", "memory_l", ".", "size", "(", "0", ")", "\n", "inputSize", "=", "self", ".", "memory_l", ".", "size", "(", "1", ")", "\n", "\n", "# original score computation", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "batchSize", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "# sample", "\n", "", "weight_l", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_l", "=", "weight_l", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_ab", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_ab", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_ab", ",", "T", ")", ")", "\n", "# sample", "\n", "weight_ab", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_ab", "=", "weight_ab", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_l", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_l", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_l", ",", "T", ")", ")", "\n", "\n", "# set Z if haven't been set yet", "\n", "if", "Z_l", "<", "0", ":", "\n", "            ", "self", ".", "params", "[", "2", "]", "=", "out_l", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_l is set to {:.1f}\"", ".", "format", "(", "Z_l", ")", ")", "\n", "", "if", "Z_ab", "<", "0", ":", "\n", "            ", "self", ".", "params", "[", "3", "]", "=", "out_ab", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_ab is set to {:.1f}\"", ".", "format", "(", "Z_ab", ")", ")", "\n", "\n", "# compute out_l, out_ab", "\n", "", "out_l", "=", "torch", ".", "div", "(", "out_l", ",", "Z_l", ")", ".", "contiguous", "(", ")", "\n", "out_ab", "=", "torch", ".", "div", "(", "out_ab", ",", "Z_ab", ")", ".", "contiguous", "(", ")", "\n", "\n", "# update memory", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "\n", "", "return", "out_l", ",", "out_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverageWithZ.__init__": [[164, 180], ["torch.nn.Module.__init__", "torch.ones", "alias_multinomial.AliasMethod", "NCEAverage.NCEAverageWithZ.multinomial.cuda", "NCEAverage.NCEAverageWithZ.register_buffer", "NCEAverage.NCEAverageWithZ.register_buffer", "NCEAverage.NCEAverageWithZ.register_buffer", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "K", ",", "T", "=", "0.07", ",", "momentum", "=", "0.5", ",", "z", "=", "None", ")", ":", "\n", "        ", "super", "(", "NCEAverageWithZ", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "self", ".", "unigrams", "=", "torch", ".", "ones", "(", "self", ".", "nLem", ")", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "self", ".", "unigrams", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "\n", "if", "z", "is", "None", "or", "z", "<=", "0", ":", "\n", "            ", "z", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "K", ",", "T", ",", "z", ",", "z", ",", "momentum", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory_l'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ab'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverageWithZ.forward": [[181, 238], ["int", "NCEAverage.NCEAverageWithZ.params[].item", "NCEAverage.NCEAverageWithZ.params[].item", "NCEAverage.NCEAverageWithZ.params[].item", "NCEAverage.NCEAverageWithZ.params[].item", "l.size", "NCEAverage.NCEAverageWithZ.memory_l.size", "NCEAverage.NCEAverageWithZ.memory_l.size", "torch.index_select().detach", "weight_l.view.view.view", "torch.bmm", "torch.exp", "torch.index_select().detach", "weight_ab.view.view.view", "torch.bmm", "torch.exp", "torch.div().contiguous", "torch.div().contiguous", "NCEAverage.NCEAverageWithZ.params[].item", "NCEAverage.NCEAverageWithZ.multinomial.draw().view", "NCEAverage.NCEAverageWithZ.select().copy_", "ab.view", "torch.div", "l.view", "torch.div", "NCEAverage.NCEAverageWithZ.params[].clone().detach().item", "print", "NCEAverage.NCEAverageWithZ.params[].clone().detach().item", "print", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverageWithZ.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverageWithZ.memory_ab.index_copy_", "torch.index_select", "torch.index_select", "torch.div().contiguous.mean", "torch.div().contiguous.mean", "torch.div", "torch.div", "y.view", "torch.mul", "y.view", "torch.mul", "NCEAverage.NCEAverageWithZ.multinomial.draw", "NCEAverage.NCEAverageWithZ.select", "NCEAverage.NCEAverageWithZ.view", "NCEAverage.NCEAverageWithZ.view", "NCEAverage.NCEAverageWithZ.params[].clone().detach", "NCEAverage.NCEAverageWithZ.params[].clone().detach", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "NCEAverage.NCEAverageWithZ.params[].clone", "NCEAverage.NCEAverageWithZ.params[].clone", "torch.index_select.pow", "torch.index_select.pow"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "l", ",", "ab", ",", "y", ",", "idx", "=", "None", ")", ":", "\n", "        ", "K", "=", "int", "(", "self", ".", "params", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "T", "=", "self", ".", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "item", "(", ")", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "item", "(", ")", "\n", "\n", "momentum", "=", "self", ".", "params", "[", "4", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "l", ".", "size", "(", "0", ")", "\n", "outputSize", "=", "self", ".", "memory_l", ".", "size", "(", "0", ")", "\n", "inputSize", "=", "self", ".", "memory_l", ".", "size", "(", "1", ")", "\n", "\n", "# original score computation", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "batchSize", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "# sample", "\n", "", "weight_l", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_l", "=", "weight_l", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_ab", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_ab", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_ab", ",", "T", ")", ")", "\n", "# sample", "\n", "weight_ab", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_ab", "=", "weight_ab", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_l", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_l", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_l", ",", "T", ")", ")", "\n", "\n", "# set Z if haven't been set yet", "\n", "if", "Z_l", "<", "0", ":", "\n", "            ", "self", ".", "params", "[", "2", "]", "=", "out_l", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_l", "=", "self", ".", "params", "[", "2", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_l is set to {:.1f}\"", ".", "format", "(", "Z_l", ")", ")", "\n", "", "if", "Z_ab", "<", "0", ":", "\n", "            ", "self", ".", "params", "[", "3", "]", "=", "out_ab", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_ab", "=", "self", ".", "params", "[", "3", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_ab is set to {:.1f}\"", ".", "format", "(", "Z_ab", ")", ")", "\n", "\n", "# compute out_l, out_ab", "\n", "", "out_l", "=", "torch", ".", "div", "(", "out_l", ",", "Z_l", ")", ".", "contiguous", "(", ")", "\n", "out_ab", "=", "torch", ".", "div", "(", "out_ab", ",", "Z_ab", ")", ".", "contiguous", "(", ")", "\n", "\n", "# update memory", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "\n", "", "return", "out_l", ",", "out_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverageFull.__init__": [[242, 250], ["torch.nn.Module.__init__", "NCEAverage.NCEAverageFull.register_buffer", "NCEAverage.NCEAverageFull.register_buffer", "NCEAverage.NCEAverageFull.register_buffer", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "T", "=", "0.07", ",", "momentum", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "NCEAverageFull", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "T", ",", "-", "1", ",", "-", "1", ",", "momentum", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory_l'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ab'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverageFull.forward": [[251, 313], ["NCEAverage.NCEAverageFull.params[].item", "NCEAverage.NCEAverageFull.params[].item", "NCEAverage.NCEAverageFull.params[].item", "NCEAverage.NCEAverageFull.params[].item", "l.size", "NCEAverage.NCEAverageFull.memory_l.size", "NCEAverage.NCEAverageFull.memory_l.size", "y.unsqueeze().expand().unsqueeze().expand", "torch.zeros().long().cuda", "idx2.unsqueeze().expand().unsqueeze().expand.unsqueeze().expand().unsqueeze().expand.unsqueeze().expand().unsqueeze().expand", "NCEAverage.NCEAverageFull.memory_l.clone().detach().unsqueeze().expand", "NCEAverage.NCEAverageFull.gather", "NCEAverage.NCEAverageFull.gather", "NCEAverage.NCEAverageFull.scatter_", "NCEAverage.NCEAverageFull.scatter_", "torch.bmm", "torch.exp", "NCEAverage.NCEAverageFull.memory_ab.clone().detach().unsqueeze().expand", "NCEAverage.NCEAverageFull.gather", "NCEAverage.NCEAverageFull.gather", "NCEAverage.NCEAverageFull.scatter_", "NCEAverage.NCEAverageFull.scatter_", "torch.bmm", "torch.exp", "torch.div().contiguous", "torch.div().contiguous", "ab.view", "torch.div", "l.view", "torch.div", "NCEAverage.NCEAverageFull.params[].clone().detach().item", "print", "NCEAverage.NCEAverageFull.params[].clone().detach().item", "print", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverageFull.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverageFull.memory_ab.index_copy_", "y.unsqueeze().expand().unsqueeze", "torch.zeros().long", "idx2.unsqueeze().expand().unsqueeze().expand.unsqueeze().expand().unsqueeze().expand.unsqueeze().expand().unsqueeze", "NCEAverage.NCEAverageFull.memory_l.clone().detach().unsqueeze", "NCEAverage.NCEAverageFull.memory_ab.clone().detach().unsqueeze", "torch.div().contiguous.mean", "torch.div().contiguous.mean", "torch.div", "torch.div", "y.view", "torch.mul", "y.view", "torch.mul", "NCEAverage.NCEAverageFull.params[].clone().detach", "NCEAverage.NCEAverageFull.params[].clone().detach", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "y.unsqueeze().expand", "torch.zeros", "idx2.unsqueeze().expand().unsqueeze().expand.unsqueeze().expand().unsqueeze().expand.unsqueeze().expand", "NCEAverage.NCEAverageFull.memory_l.clone().detach", "NCEAverage.NCEAverageFull.memory_ab.clone().detach", "NCEAverage.NCEAverageFull.params[].clone", "NCEAverage.NCEAverageFull.params[].clone", "torch.index_select.pow", "torch.index_select.pow", "y.unsqueeze", "idx2.unsqueeze().expand().unsqueeze().expand.unsqueeze().expand().unsqueeze().expand.unsqueeze", "NCEAverage.NCEAverageFull.memory_l.clone", "NCEAverage.NCEAverageFull.memory_ab.clone"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "def", "forward", "(", "self", ",", "l", ",", "ab", ",", "y", ")", ":", "\n", "        ", "T", "=", "self", ".", "params", "[", "0", "]", ".", "item", "(", ")", "\n", "Z_l", "=", "self", ".", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "Z_ab", "=", "self", ".", "params", "[", "2", "]", ".", "item", "(", ")", "\n", "\n", "momentum", "=", "self", ".", "params", "[", "3", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "l", ".", "size", "(", "0", ")", "\n", "outputSize", "=", "self", ".", "memory_l", ".", "size", "(", "0", ")", "\n", "inputSize", "=", "self", ".", "memory_l", ".", "size", "(", "1", ")", "\n", "\n", "# score computation", "\n", "idx1", "=", "y", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "inputSize", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "1", ",", "-", "1", ")", "\n", "idx2", "=", "torch", ".", "zeros", "(", "batchSize", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "idx2", "=", "idx2", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "inputSize", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "1", ",", "-", "1", ")", "\n", "# sample", "\n", "weight_l", "=", "self", ".", "memory_l", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batchSize", ",", "outputSize", ",", "inputSize", ")", "\n", "weight_l_1", "=", "weight_l", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "idx1", ")", "\n", "weight_l_2", "=", "weight_l", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "idx2", ")", "\n", "weight_l", ".", "scatter_", "(", "1", ",", "idx1", ",", "weight_l_2", ")", "\n", "weight_l", ".", "scatter_", "(", "1", ",", "idx2", ",", "weight_l_1", ")", "\n", "out_ab", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_ab", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_ab", ",", "T", ")", ")", "\n", "# sample", "\n", "weight_ab", "=", "self", ".", "memory_ab", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batchSize", ",", "outputSize", ",", "inputSize", ")", "\n", "weight_ab_1", "=", "weight_ab", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "idx1", ")", "\n", "weight_ab_2", "=", "weight_ab", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "idx2", ")", "\n", "weight_ab", ".", "scatter_", "(", "1", ",", "idx1", ",", "weight_ab_2", ")", "\n", "weight_ab", ".", "scatter_", "(", "1", ",", "idx2", ",", "weight_ab_1", ")", "\n", "out_l", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_l", "=", "torch", ".", "exp", "(", "torch", ".", "div", "(", "out_l", ",", "T", ")", ")", "\n", "\n", "# set Z if haven't been set yet", "\n", "if", "Z_l", "<", "0", ":", "\n", "            ", "self", ".", "params", "[", "1", "]", "=", "out_l", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_l", "=", "self", ".", "params", "[", "1", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_l is set to {:.1f}\"", ".", "format", "(", "Z_l", ")", ")", "\n", "", "if", "Z_ab", "<", "0", ":", "\n", "            ", "self", ".", "params", "[", "2", "]", "=", "out_ab", ".", "mean", "(", ")", "*", "outputSize", "\n", "Z_ab", "=", "self", ".", "params", "[", "2", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"normalization constant Z_ab is set to {:.1f}\"", ".", "format", "(", "Z_ab", ")", ")", "\n", "\n", "# compute out_l, out_ab", "\n", "", "out_l", "=", "torch", ".", "div", "(", "out_l", ",", "Z_l", ")", ".", "contiguous", "(", ")", "\n", "out_ab", "=", "torch", ".", "div", "(", "out_ab", ",", "Z_ab", ")", ".", "contiguous", "(", ")", "\n", "\n", "# update memory", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "\n", "", "return", "out_l", ",", "out_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverageFullSoftmax.__init__": [[317, 325], ["torch.nn.Module.__init__", "NCEAverage.NCEAverageFullSoftmax.register_buffer", "NCEAverage.NCEAverageFullSoftmax.register_buffer", "NCEAverage.NCEAverageFullSoftmax.register_buffer", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "T", "=", "1", ",", "momentum", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "NCEAverageFullSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "T", ",", "momentum", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory_l'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ab'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverageFullSoftmax.forward": [[326, 363], ["NCEAverage.NCEAverageFullSoftmax.params[].item", "NCEAverage.NCEAverageFullSoftmax.params[].item", "l.size", "NCEAverage.NCEAverageFullSoftmax.memory_l.size", "NCEAverage.NCEAverageFullSoftmax.memory_l.size", "NCEAverage.NCEAverageFullSoftmax.memory_l.clone().unsqueeze().expand().detach", "torch.bmm", "out_ab.squeeze().contiguous.squeeze().contiguous.div", "out_ab.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "NCEAverage.NCEAverageFullSoftmax.memory_ab.clone().unsqueeze().expand().detach", "torch.bmm", "out_l.squeeze().contiguous.squeeze().contiguous.div", "out_l.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "ab.view", "l.view", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverageFullSoftmax.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverageFullSoftmax.memory_ab.index_copy_", "NCEAverage.NCEAverageFullSoftmax.memory_l.clone().unsqueeze().expand", "out_ab.squeeze().contiguous.squeeze().contiguous.squeeze", "NCEAverage.NCEAverageFullSoftmax.memory_ab.clone().unsqueeze().expand", "out_l.squeeze().contiguous.squeeze().contiguous.squeeze", "y.view", "torch.mul", "y.view", "torch.mul", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "NCEAverage.NCEAverageFullSoftmax.memory_l.clone().unsqueeze", "NCEAverage.NCEAverageFullSoftmax.memory_ab.clone().unsqueeze", "torch.index_select.pow", "torch.index_select.pow", "NCEAverage.NCEAverageFullSoftmax.memory_l.clone", "NCEAverage.NCEAverageFullSoftmax.memory_ab.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "l", ",", "ab", ",", "y", ")", ":", "\n", "        ", "T", "=", "self", ".", "params", "[", "0", "]", ".", "item", "(", ")", "\n", "momentum", "=", "self", ".", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "l", ".", "size", "(", "0", ")", "\n", "outputSize", "=", "self", ".", "memory_l", ".", "size", "(", "0", ")", "\n", "inputSize", "=", "self", ".", "memory_l", ".", "size", "(", "1", ")", "\n", "\n", "# score computation", "\n", "# weight_l = self.memory_l.unsqueeze(0).expand(batchSize, outputSize, inputSize).detach()", "\n", "weight_l", "=", "self", ".", "memory_l", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batchSize", ",", "outputSize", ",", "inputSize", ")", ".", "detach", "(", ")", "\n", "out_ab", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_ab", "=", "out_ab", ".", "div", "(", "T", ")", "\n", "out_ab", "=", "out_ab", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "\n", "# weight_ab = self.memory_ab.unsqueeze(0).expand(batchSize, outputSize, inputSize).detach()", "\n", "weight_ab", "=", "self", ".", "memory_ab", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batchSize", ",", "outputSize", ",", "inputSize", ")", ".", "detach", "(", ")", "\n", "out_l", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_l", "=", "out_l", ".", "div", "(", "T", ")", "\n", "out_l", "=", "out_l", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "\n", "# update memory", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "\n", "", "return", "out_l", ",", "out_ab", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCEAverage.NCEAverageFullSoftmax.update_memory": [[364, 381], ["NCEAverage.NCEAverageFullSoftmax.params[].item", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverageFullSoftmax.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage.NCEAverageFullSoftmax.memory_ab.index_copy_", "y.view", "torch.mul", "y.view", "torch.mul", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "torch.index_select.pow", "torch.index_select.pow"], "methods", ["None"], ["", "def", "update_memory", "(", "self", ",", "l", ",", "ab", ",", "y", ")", ":", "\n", "        ", "momentum", "=", "self", ".", "params", "[", "1", "]", ".", "item", "(", ")", "\n", "# update memory", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCECriterion.NCECriterion.__init__": [[9, 12], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nLem", ")", ":", "\n", "        ", "super", "(", "NCECriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "nLem", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.NCECriterion.NCECriterion.forward": [[13, 39], ["x.size", "x.select", "x.select.add", "torch.div", "x.narrow().add", "x.narrow().add.clone().fill_", "torch.div", "torch.div.log_", "torch.div.log_", "torch.div.sum", "torch.div.view().sum", "x.size", "float", "float", "x.narrow", "x.narrow().add.clone", "torch.div.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchSize", "=", "x", ".", "size", "(", "0", ")", "\n", "K", "=", "x", ".", "size", "(", "1", ")", "-", "1", "\n", "Pnt", "=", "1", "/", "float", "(", "self", ".", "nLem", ")", "\n", "Pns", "=", "1", "/", "float", "(", "self", ".", "nLem", ")", "\n", "\n", "# eq 5.1 : P(origin=model) = Pmt / (Pmt + k*Pnt)", "\n", "Pmt", "=", "x", ".", "select", "(", "1", ",", "0", ")", "\n", "Pmt_div", "=", "Pmt", ".", "add", "(", "K", "*", "Pnt", "+", "eps", ")", "\n", "lnPmt", "=", "torch", ".", "div", "(", "Pmt", ",", "Pmt_div", ")", "\n", "\n", "# eq 5.2 : P(origin=noise) = k*Pns / (Pms + k*Pns)", "\n", "Pon_div", "=", "x", ".", "narrow", "(", "1", ",", "1", ",", "K", ")", ".", "add", "(", "K", "*", "Pns", "+", "eps", ")", "\n", "Pon", "=", "Pon_div", ".", "clone", "(", ")", ".", "fill_", "(", "K", "*", "Pns", ")", "\n", "lnPon", "=", "torch", ".", "div", "(", "Pon", ",", "Pon_div", ")", "\n", "\n", "# equation 6 in ref. A", "\n", "lnPmt", ".", "log_", "(", ")", "\n", "lnPon", ".", "log_", "(", ")", "\n", "\n", "lnPmtsum", "=", "lnPmt", ".", "sum", "(", "0", ")", "\n", "lnPonsum", "=", "lnPon", ".", "view", "(", "-", "1", ",", "1", ")", ".", "sum", "(", "0", ")", "\n", "\n", "loss", "=", "-", "(", "lnPmtsum", "+", "lnPonsum", ")", "/", "batchSize", "\n", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.__init__": [[8, 44], ["len", "torch.zeros", "torch.LongTensor", "enumerate", "probs.sum", "probs.div_", "smaller.pop", "larger.pop", "probs.sum", "smaller.append", "larger.append", "len", "len", "smaller.append", "larger.append"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append", "home.repos.pwc.inspect_result.brjathu_SKD.None.util.Logger.append"], ["def", "__init__", "(", "self", ",", "probs", ")", ":", "\n", "\n", "        ", "if", "probs", ".", "sum", "(", ")", ">", "1", ":", "\n", "            ", "probs", ".", "div_", "(", "probs", ".", "sum", "(", ")", ")", "\n", "", "K", "=", "len", "(", "probs", ")", "\n", "self", ".", "prob", "=", "torch", ".", "zeros", "(", "K", ")", "\n", "self", ".", "alias", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", "*", "K", ")", "\n", "\n", "# Sort the data into the outcomes with probabilities", "\n", "# that are larger and smaller than 1/K.", "\n", "smaller", "=", "[", "]", "\n", "larger", "=", "[", "]", "\n", "for", "kk", ",", "prob", "in", "enumerate", "(", "probs", ")", ":", "\n", "            ", "self", ".", "prob", "[", "kk", "]", "=", "K", "*", "prob", "\n", "if", "self", ".", "prob", "[", "kk", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "kk", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "kk", ")", "\n", "\n", "# Loop though and create little binary mixtures that", "\n", "# appropriately allocate the larger outcomes over the", "\n", "# overall uniform mixture.", "\n", "", "", "while", "len", "(", "smaller", ")", ">", "0", "and", "len", "(", "larger", ")", ">", "0", ":", "\n", "            ", "small", "=", "smaller", ".", "pop", "(", ")", "\n", "large", "=", "larger", ".", "pop", "(", ")", "\n", "\n", "self", ".", "alias", "[", "small", "]", "=", "large", "\n", "self", ".", "prob", "[", "large", "]", "=", "(", "self", ".", "prob", "[", "large", "]", "-", "1.0", ")", "+", "self", ".", "prob", "[", "small", "]", "\n", "\n", "if", "self", ".", "prob", "[", "large", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "large", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "large", ")", "\n", "\n", "", "", "for", "last_one", "in", "smaller", "+", "larger", ":", "\n", "            ", "self", ".", "prob", "[", "last_one", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda": [[45, 48], ["alias_multinomial.AliasMethod.prob.cuda", "alias_multinomial.AliasMethod.alias.cuda"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "prob", "=", "self", ".", "prob", ".", "cuda", "(", ")", "\n", "self", ".", "alias", "=", "self", ".", "alias", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.draw": [[49, 64], ["alias_multinomial.AliasMethod.alias.size", "torch.zeros().random_", "alias_multinomial.AliasMethod.prob.index_select", "alias_multinomial.AliasMethod.alias.index_select", "torch.bernoulli", "torch.zeros().random_.mul", "alias_multinomial.AliasMethod.mul", "torch.bernoulli.long", "torch.zeros"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "N", ")", ":", "\n", "        ", "'''\n            Draw N samples from multinomial\n        '''", "\n", "K", "=", "self", ".", "alias", ".", "size", "(", "0", ")", "\n", "\n", "kk", "=", "torch", ".", "zeros", "(", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "prob", ".", "device", ")", ".", "random_", "(", "0", ",", "K", ")", "\n", "prob", "=", "self", ".", "prob", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "alias", "=", "self", ".", "alias", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "# b is whether a random number is greater than q", "\n", "b", "=", "torch", ".", "bernoulli", "(", "prob", ")", "\n", "oq", "=", "kk", ".", "mul", "(", "b", ".", "long", "(", ")", ")", "\n", "oj", "=", "alias", ".", "mul", "(", "(", "1", "-", "b", ")", ".", "long", "(", ")", ")", "\n", "\n", "return", "oq", "+", "oj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.util.Embed.__init__": [[8, 12], ["torch.Module.__init__", "torch.Linear", "util.Normalize"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["from", "dataloader", "import", "get_dataloaders", "\n", "\n", "\n", "class", "LabelSmoothing", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.util.Embed.forward": [[13, 18], ["util.Embed.view", "util.Embed.linear", "util.Embed.l2norm"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.util.LinearEmbed.__init__": [[22, 25], ["torch.Module.__init__", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["self", ".", "smoothing", "=", "smoothing", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.util.LinearEmbed.forward": [[26, 30], ["util.LinearEmbed.view", "util.LinearEmbed.linear"], "methods", ["None"], ["\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.util.MLPEmbed.__init__": [[34, 40], ["torch.Module.__init__", "torch.Linear", "torch.ReLU", "torch.Linear", "util.Normalize"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["", "", "class", "BCEWithLogitsLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ",", "pos_weight", "=", "None", ",", "num_classes", "=", "64", ")", ":", "\n", "        ", "super", "(", "BCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", "weight", "=", "weight", ",", "\n", "size_average", "=", "size_average", ",", "\n", "reduce", "=", "reduce", ",", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.util.MLPEmbed.forward": [[41, 46], ["util.MLPEmbed.view", "util.MLPEmbed.relu", "util.MLPEmbed.l2norm", "util.MLPEmbed.linear1", "util.MLPEmbed.linear2"], "methods", ["None"], ["reduction", "=", "reduction", ",", "\n", "pos_weight", "=", "pos_weight", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target_onehot", "=", "F", ".", "one_hot", "(", "target", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "return", "self", ".", "criterion", "(", "input", ",", "target_onehot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.util.Normalize.__init__": [[50, 53], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.util.Normalize.forward": [[54, 58], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.DistillKL.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["def", "__init__", "(", "self", ",", "T", ")", ":", "\n", "        ", "super", "(", "DistillKL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.DistillKL.forward": [[21, 26], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_s", ",", "y_t", ")", ":", "\n", "        ", "p_s", "=", "F", ".", "log_softmax", "(", "y_s", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "p_t", "=", "F", ".", "softmax", "(", "y_t", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "loss", "=", "F", ".", "kl_div", "(", "p_s", ",", "p_t", ",", "size_average", "=", "False", ")", "*", "(", "self", ".", "T", "**", "2", ")", "/", "y_s", ".", "shape", "[", "0", "]", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.NCELoss.__init__": [[30, 35], ["torch.Module.__init__", "NCEAverage.NCEAverage.NCEAverage", "NCECriterion.NCECriterion.NCECriterion", "NCECriterion.NCECriterion.NCECriterion"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "n_data", ")", ":", "\n", "        ", "super", "(", "NCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "contrast", "=", "NCEAverage", "(", "opt", ".", "feat_dim", ",", "n_data", ",", "opt", ".", "nce_k", ",", "opt", ".", "nce_t", ",", "opt", ".", "nce_m", ")", "\n", "self", ".", "criterion_t", "=", "NCECriterion", "(", "n_data", ")", "\n", "self", ".", "criterion_s", "=", "NCECriterion", "(", "n_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.NCELoss.forward": [[36, 42], ["criterion.NCELoss.contrast", "criterion.NCELoss.criterion_s", "criterion.NCELoss.criterion_t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f_s", ",", "f_t", ",", "idx", ",", "contrast_idx", "=", "None", ")", ":", "\n", "        ", "out_s", ",", "out_t", "=", "self", ".", "contrast", "(", "f_s", ",", "f_t", ",", "idx", ",", "contrast_idx", ")", "\n", "s_loss", "=", "self", ".", "criterion_s", "(", "out_s", ")", "\n", "t_loss", "=", "self", ".", "criterion_t", "(", "out_t", ")", "\n", "loss", "=", "s_loss", "+", "t_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.NCESoftmaxLoss.__init__": [[46, 51], ["torch.Module.__init__", "NCEAverage.NCEAverage.NCESoftmax", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "n_data", ")", ":", "\n", "        ", "super", "(", "NCESoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "contrast", "=", "NCESoftmax", "(", "opt", ".", "feat_dim", ",", "n_data", ",", "opt", ".", "nce_k", ",", "opt", ".", "nce_t", ",", "opt", ".", "nce_m", ")", "\n", "self", ".", "criterion_t", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion_s", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.NCESoftmaxLoss.forward": [[52, 60], ["criterion.NCESoftmaxLoss.contrast", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "criterion.NCESoftmaxLoss.criterion_s", "criterion.NCESoftmaxLoss.criterion_t", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.brjathu_SKD.distill.alias_multinomial.AliasMethod.cuda"], ["", "def", "forward", "(", "self", ",", "f_s", ",", "f_t", ",", "idx", ",", "contrast_idx", "=", "None", ")", ":", "\n", "        ", "out_s", ",", "out_t", "=", "self", ".", "contrast", "(", "f_s", ",", "f_t", ",", "idx", ",", "contrast_idx", ")", "\n", "bsz", "=", "f_s", ".", "shape", "[", "0", "]", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "bsz", ",", "1", "]", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "s_loss", "=", "self", ".", "criterion_s", "(", "out_s", ",", "label", ")", "\n", "t_loss", "=", "self", ".", "criterion_t", "(", "out_t", ",", "label", ")", "\n", "loss", "=", "s_loss", "+", "t_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.Attention.__init__": [[64, 67], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["def", "__init__", "(", "self", ",", "p", "=", "2", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.Attention.forward": [[68, 70], ["criterion.Attention.at_loss", "zip"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.Attention.at_loss"], ["", "def", "forward", "(", "self", ",", "g_s", ",", "g_t", ")", ":", "\n", "        ", "return", "[", "self", ".", "at_loss", "(", "f_s", ",", "f_t", ")", "for", "f_s", ",", "f_t", "in", "zip", "(", "g_s", ",", "g_t", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.Attention.at_loss": [[71, 80], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "criterion.Attention.at", "criterion.Attention.at"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.Attention.at", "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.Attention.at"], ["", "def", "at_loss", "(", "self", ",", "f_s", ",", "f_t", ")", ":", "\n", "        ", "s_H", ",", "t_H", "=", "f_s", ".", "shape", "[", "2", "]", ",", "f_t", ".", "shape", "[", "2", "]", "\n", "if", "s_H", ">", "t_H", ":", "\n", "            ", "f_s", "=", "F", ".", "adaptive_avg_pool2d", "(", "f_s", ",", "(", "t_H", ",", "t_H", ")", ")", "\n", "", "elif", "s_H", "<", "t_H", ":", "\n", "            ", "f_t", "=", "F", ".", "adaptive_avg_pool2d", "(", "f_t", ",", "(", "s_H", ",", "s_H", ")", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "(", "self", ".", "at", "(", "f_s", ")", "-", "self", ".", "at", "(", "f_t", ")", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.Attention.at": [[81, 83], ["torch.normalize", "torch.normalize", "torch.normalize", "f.pow().mean().view", "f.size", "f.pow().mean", "f.pow"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.brjathu_SKD.eval.meta_eval.normalize"], ["", "def", "at", "(", "self", ",", "f", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "f", ".", "pow", "(", "self", ".", "p", ")", ".", "mean", "(", "1", ")", ".", "view", "(", "f", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__": [[87, 90], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HintLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brjathu_SKD.distill.criterion.HintLoss.forward": [[91, 94], ["criterion.HintLoss.crit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f_s", ",", "f_t", ")", ":", "\n", "        ", "loss", "=", "self", ".", "crit", "(", "f_s", ",", "f_t", ")", "\n", "return", "loss", "\n", "\n"]]}