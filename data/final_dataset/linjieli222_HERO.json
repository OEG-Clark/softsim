{"home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_videoQA.main": [[32, 111], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "utils.logger.LOGGER.info", "utils.misc.Struct", "load_data.get_video_ids", "load_data.load_video_sub_dataset", "data.QaQueryTokLmdb", "data.VideoQaEvalDataset", "os.path.exists", "torch.load", "horovod.torch.load", "len", "model.videoQA.HeroForVideoQA.from_pretrained", "amp.initialize.to", "torch.utils.data.DataLoader", "data.PrefetchLoader", "eval_videoQA.validate_videoQA", "utils.distributed.all_gather_list", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "json.load", "apex.amp.initialize", "os.makedirs", "all_results.update", "utils.distributed.all_gather_list", "horovod.torch.rank", "utils.basic_utils.save_json", "utils.logger.LOGGER.info", "horovod.torch.rank", "open", "os.path.exists", "horovod.torch.rank", "all_logits.update", "utils.basic_utils.save_pickle", "utils.logger.LOGGER.info"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_videoQA.validate_videoQA", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_pickle"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "", "hps_file", "=", "f'{opts.output_dir}/log/hps.json'", "\n", "model_opts", "=", "Struct", "(", "json", ".", "load", "(", "open", "(", "hps_file", ")", ")", ")", "\n", "model_config", "=", "f'{opts.output_dir}/log/model_config.json'", "\n", "\n", "# load DBs and image dirs", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "query_txt_db", ")", "\n", "video_db", "=", "load_video_sub_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "\n", "model_opts", ".", "vfeat_interval", ",", "model_opts", ")", "\n", "assert", "opts", ".", "split", "in", "opts", ".", "query_txt_db", "\n", "q_txt_db", "=", "QaQueryTokLmdb", "(", "opts", ".", "query_txt_db", ",", "-", "1", ")", "\n", "eval_dataset", "=", "VideoQaEvalDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "video_qa_eval_collate", "\n", "\n", "# Prepare model", "\n", "if", "exists", "(", "opts", ".", "checkpoint", ")", ":", "\n", "        ", "ckpt_file", "=", "opts", ".", "checkpoint", "\n", "", "else", ":", "\n", "        ", "ckpt_file", "=", "f'{opts.output_dir}/ckpt/model_step_{opts.checkpoint}.pt'", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_file", ")", "\n", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "assert", "img_pos_embed_weight_key", "in", "checkpoint", "\n", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "\n", "model", "=", "HeroForVideoQA", ".", "from_pretrained", "(", "\n", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", "\n", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "if", "opts", ".", "fp16", ":", "\n", "        ", "model", "=", "amp", ".", "initialize", "(", "model", ",", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "\n", "", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "opts", ".", "batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "eval_dataloader", "=", "PrefetchLoader", "(", "eval_dataloader", ")", "\n", "\n", "_", ",", "results", ",", "logits", "=", "validate_videoQA", "(", "\n", "model", ",", "eval_dataloader", ",", "opts", ".", "split", ",", "\n", "save_logits", "=", "opts", ".", "save_logits", ",", "\n", "task", "=", "opts", ".", "task", ")", "\n", "result_dir", "=", "f'{opts.output_dir}/results_{opts.split}'", "\n", "if", "opts", ".", "save_logits", ":", "\n", "        ", "result_dir", "+=", "'_w_logit'", "\n", "", "if", "not", "exists", "(", "result_dir", ")", "and", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "", "all_results", "=", "{", "}", "\n", "for", "id2res", "in", "all_gather_list", "(", "results", ")", ":", "\n", "        ", "all_results", ".", "update", "(", "id2res", ")", "\n", "", "if", "opts", ".", "save_logits", ":", "\n", "        ", "all_logits", "=", "{", "}", "\n", "for", "id2logit", "in", "all_gather_list", "(", "logits", ")", ":", "\n", "            ", "all_logits", ".", "update", "(", "id2logit", ")", "\n", "", "", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "save_json", "(", "\n", "all_results", ",", "\n", "f'{result_dir}/results_{opts.checkpoint}_all.json'", ")", "\n", "LOGGER", ".", "info", "(", "'All results written......'", ")", "\n", "if", "opts", ".", "save_logits", ":", "\n", "            ", "save_pickle", "(", "\n", "all_logits", ",", "\n", "f'{result_dir}/logits_{opts.checkpoint}_all.pkl'", ")", "\n", "LOGGER", ".", "info", "(", "'All logits written......'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_videoQA.compute_accuracies": [[113, 118], ["matched_qa.sum().item", "logits.max", "logits.squeeze", "labels.squeeze", "matched_qa.sum"], "function", ["None"], ["", "", "", "def", "compute_accuracies", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "logits", "=", "logits", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "matched_qa", "=", "logits", ".", "squeeze", "(", ")", "==", "labels", ".", "squeeze", "(", ")", "\n", "n_correct_qa", "=", "matched_qa", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "n_correct_qa", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_videoQA.validate_videoQA": [[120, 174], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "model.eval", "time.time", "enumerate", "model.train", "model", "zip", "sum", "sum", "sum", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "scores.cpu().tolist.cpu().tolist", "zip", "torch.nn.functional.cross_entropy", "F.cross_entropy.item", "eval_videoQA.compute_accuracies", "len", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "targets.min", "[].cpu().tolist", "targets.squeeze", "str", "scores.cpu().tolist.cpu", "int", "[].cpu", "str", "scores.cpu().tolist.max"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_violin.compute_accuracies", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_videoQA", "(", "model", ",", "val_loader", ",", "split", ",", "task", "=", "\"tvqa\"", ",", "\n", "save_logits", "=", "False", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "f\"start running validation on {task} {split} split...\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "0", "\n", "n_ex", "=", "0", "\n", "tot_score", "=", "0", "\n", "results", "=", "{", "}", "\n", "logits", "=", "{", "}", "\n", "val_log", "=", "{", "}", "\n", "st", "=", "time", "(", ")", "\n", "has_gt_target", "=", "True", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "targets", "=", "batch", "[", "'targets'", "]", "\n", "if", "has_gt_target", "and", "targets", ".", "min", "(", ")", "<", "0", ":", "\n", "            ", "has_gt_target", "=", "False", "\n", "LOGGER", ".", "info", "(", "\"No GT annotations provided, only generate predictions\"", ")", "\n", "", "if", "'qids'", "in", "batch", ":", "\n", "            ", "qids", "=", "batch", "[", "'qids'", "]", "\n", "del", "batch", "[", "'qids'", "]", "\n", "\n", "", "scores", "=", "model", "(", "batch", ",", "task", ",", "compute_loss", "=", "False", ")", "\n", "answers", "=", "[", "i", "for", "i", "in", "scores", ".", "max", "(", "\n", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "for", "qid", ",", "answer", "in", "zip", "(", "qids", ",", "answers", ")", ":", "\n", "            ", "results", "[", "str", "(", "qid", ")", "]", "=", "answer", "\n", "", "if", "save_logits", ":", "\n", "            ", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "qid", ",", "logit", "in", "zip", "(", "qids", ",", "scores", ")", ":", "\n", "                ", "logits", "[", "str", "(", "qid", ")", "]", "=", "logit", "\n", "\n", "", "", "if", "has_gt_target", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "scores", ",", "targets", ".", "squeeze", "(", "-", "1", ")", ",", "reduction", "=", "'sum'", ")", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tot_score", "+=", "compute_accuracies", "(", "scores", ",", "targets", ")", "\n", "n_ex", "+=", "len", "(", "qids", ")", "\n", "\n", "", "", "if", "has_gt_target", ":", "\n", "        ", "val_loss", "=", "sum", "(", "all_gather_list", "(", "val_loss", ")", ")", "\n", "tot_score", "=", "sum", "(", "all_gather_list", "(", "tot_score", ")", ")", "\n", "n_ex", "=", "sum", "(", "all_gather_list", "(", "n_ex", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "val_loss", "/=", "n_ex", "\n", "val_acc", "=", "tot_score", "/", "n_ex", "\n", "val_log", "=", "{", "\n", "'valid/loss'", ":", "val_loss", ",", "\n", "'valid/acc'", ":", "val_acc", ",", "\n", "'valid/ex_per_s'", ":", "n_ex", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds, \"", "\n", "f\"loss:{val_loss:.2f}, score: {val_acc*100:.2f}\"", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "val_log", ",", "results", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids": [[21, 29], ["os.path.exists", "utils.basic_utils.load_json", "utils.basic_utils.load_json().keys", "list", "utils.basic_utils.load_json", "set", "utils.basic_utils.load_json"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json"], ["def", "get_video_ids", "(", "query_txt_db", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "f'{query_txt_db}/query2video.json'", ")", ":", "\n", "        ", "q2v", "=", "load_json", "(", "f'{query_txt_db}/query2video.json'", ")", "\n", "qids", "=", "load_json", "(", "f'{query_txt_db}/id2len.json'", ")", ".", "keys", "(", ")", "\n", "video_ids", "=", "list", "(", "set", "(", "[", "q2v", "[", "qid", "]", "for", "qid", "in", "qids", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "video_ids", "=", "load_json", "(", "f'{query_txt_db}/video_ids.json'", ")", "\n", "", "return", "video_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset": [[31, 45], ["data.VideoFeatLmdb", "data.VideoFeatSubTokDataset", "isinstance", "hasattr", "data.VrSubTokLmdb", "data.SubTokLmdb"], "function", ["None"], ["", "def", "load_video_sub_dataset", "(", "v_feat_path", ",", "sub_txt_db", ",", "vfeat_interval", ",", "opts", ")", ":", "\n", "    ", "vfeat_db", "=", "VideoFeatLmdb", "(", "\n", "v_feat_path", ",", "opts", ".", "vfeat_version", ",", "\n", "vfeat_interval", ",", "opts", ".", "compressed_db", ",", "\n", "opts", ".", "max_clip_len", ")", "\n", "if", "not", "isinstance", "(", "sub_txt_db", ",", "SubTokLmdb", ")", ":", "\n", "        ", "if", "hasattr", "(", "opts", ",", "\"task\"", ")", "and", "\"msrvtt\"", "in", "opts", ".", "task", ":", "\n", "            ", "sub_txt_db", "=", "VrSubTokLmdb", "(", "sub_txt_db", ",", "opts", ".", "max_clip_len", ")", "\n", "", "else", ":", "\n", "            ", "sub_txt_db", "=", "SubTokLmdb", "(", "sub_txt_db", ",", "opts", ".", "max_clip_len", ")", "\n", "", "", "video_db", "=", "VideoFeatSubTokDataset", "(", "\n", "sub_txt_db", ",", "vfeat_db", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "return", "video_db", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_only_dataset": [[47, 55], ["data.VideoFeatLmdb", "data.VideoFeatDataset"], "function", ["None"], ["", "def", "load_video_only_dataset", "(", "v_feat_path", ",", "txt_meta", ",", "vfeat_interval", ",", "opts", ")", ":", "\n", "    ", "vfeat_db", "=", "VideoFeatLmdb", "(", "\n", "v_feat_path", ",", "opts", ".", "vfeat_version", ",", "\n", "vfeat_interval", ",", "opts", ".", "compressed_db", ",", "\n", "opts", ".", "max_clip_len", ")", "\n", "video_db", "=", "VideoFeatDataset", "(", "\n", "txt_meta", ",", "vfeat_db", ")", "\n", "return", "video_db", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders": [[57, 139], ["enumerate", "utils.logger.LOGGER.info", "torch.utils.data.DataLoader", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "data.PrefetchLoader", "data.VideoQaDataset", "data.VideoQaEvalDataset", "data.VcmrDataset", "data.VcmrEvalDataset", "sum", "data.VcmrVideoOnlyDataset", "data.VcmrVideoOnlyEvalDataset", "utils.distributed.all_gather_list", "data.VrVideoOnlyDataset", "data.VrVideoOnlyEvalDataset", "len", "data.VrDataset", "data.VrEvalDataset", "ValueError", "data.ViolinDataset", "data.ViolinEvalDataset"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "def", "build_downstream_dataloaders", "(", "\n", "tasks", ",", "video_db", ",", "video_ids", ",", "is_train", ",", "opts", ",", "\n", "q_txt_db", "=", "None", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "dataloaders", "=", "{", "}", "\n", "assert", "q_txt_db", "is", "not", "None", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "tasks", ")", ":", "\n", "        ", "if", "is_train", ":", "\n", "            ", "LOGGER", ".", "info", "(", "f\"Loading {task} train dataset \"", "\n", "f\"{video_db.img_db.img_dir}\"", ")", "\n", "batch_size", "=", "opts", ".", "train_batch_size", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "opts", ".", "val_batch_size", "\n", "LOGGER", ".", "info", "(", "f\"Loading {task} validation dataset\"", "\n", "f\"{video_db.img_db.img_dir}\"", ")", "\n", "", "if", "task", "in", "[", "\"tvqa\"", ",", "\"how2qa\"", "]", ":", "\n", "            ", "if", "is_train", ":", "\n", "                ", "dataset", "=", "VideoQaDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "video_qa_collate", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "VideoQaEvalDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "video_qa_eval_collate", "\n", "", "", "elif", "task", "in", "[", "\"tvr\"", ",", "\"how2r\"", ",", "\"didemo_video_sub\"", "]", ":", "\n", "            ", "if", "is_train", ":", "\n", "                ", "dataset", "=", "VcmrDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "vcmr_collate", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "VcmrEvalDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "vcmr_eval_collate", "\n", "", "", "elif", "task", "==", "\"didemo_video_only\"", ":", "\n", "            ", "if", "is_train", ":", "\n", "                ", "dataset", "=", "VcmrVideoOnlyDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "vcmr_collate", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "VcmrVideoOnlyEvalDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "vcmr_eval_collate", "\n", "", "", "elif", "task", "==", "\"msrvtt_video_only\"", ":", "\n", "            ", "if", "is_train", ":", "\n", "                ", "dataset", "=", "VrVideoOnlyDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "vr_collate", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "VrVideoOnlyEvalDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "vr_eval_collate", "\n", "", "", "elif", "task", "==", "\"msrvtt_video_sub\"", ":", "\n", "            ", "if", "is_train", ":", "\n", "                ", "dataset", "=", "VrDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "vr_collate", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "VrEvalDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "vr_eval_collate", "\n", "", "", "elif", "task", "==", "\"violin\"", ":", "\n", "            ", "if", "is_train", ":", "\n", "                ", "dataset", "=", "ViolinDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "violin_collate", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "ViolinEvalDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ")", "\n", "collate_fn", "=", "violin_eval_collate", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Undefined task {task}'", ")", "\n", "", "LOGGER", ".", "info", "(", "f\"{sum(all_gather_list(len(dataset)))} samples loaded\"", ")", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "shuffle", "=", "shuffle", ")", "\n", "if", "is_train", ":", "\n", "            ", "ratio", "=", "1", "\n", "dataloaders", "[", "task", "]", "=", "(", "loader", ",", "ratio", ")", "\n", "", "else", ":", "\n", "            ", "dataloaders", "[", "task", "]", "=", "PrefetchLoader", "(", "loader", ")", "\n", "", "", "return", "dataloaders", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_vcmr.main": [[47, 325], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "utils.logger.LOGGER.info", "utils.misc.set_random_seed", "utils.logger.LOGGER.info", "load_data.get_video_ids", "data.QueryTokLmdb", "load_data.build_downstream_dataloaders", "data.MetaLoader", "data.PrefetchLoader", "load_data.get_video_ids", "data.QueryTokLmdb", "load_data.build_downstream_dataloaders", "utils.logger.LOGGER.info", "inf_dataset", "torch.utils.data.DataLoader", "data.PrefetchLoader", "model.vcmr.HeroForVcmr.from_pretrained", "HeroForVcmr.from_pretrained.to", "utils.distributed.broadcast_tensors", "utils.misc.set_dropout", "optim.misc.build_optimizer", "apex.amp.initialize", "utils.save.TrainingRestorer", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "HeroForVcmr.from_pretrained.train", "collections.defaultdict", "time.time", "optim.misc.build_optimizer.zero_grad", "enumerate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "load_data.load_video_sub_dataset", "utils.basic_utils.load_json", "load_data.load_video_only_dataset", "utils.logger.LOGGER.info", "load_data.get_video_ids", "data.QueryTokLmdb", "inf_dataset", "torch.utils.data.DataLoader", "data.PrefetchLoader", "torch.load", "horovod.torch.load", "len", "horovod.torch.rank", "utils.save.save_training_meta", "utils.logger.TB_LOGGER.create", "tqdm.tqdm", "utils.save.ModelSaver", "utils.logger.add_log_to_file", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp.update", "utils.logger.RunningMeter", "utils.logger.RunningMeter", "optim.misc.build_optimizer.step", "HeroForVcmr.from_pretrained.", "loss.mean.mean", "horovod.torch.rank", "os.path.join", "enumerate", "len", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "load_data.build_downstream_dataloaders.keys", "len", "enumerate", "HeroForVcmr.from_pretrained.set_train_st_ed", "ls.item.item", "loss.mean.item", "apex.amp.scale_loss", "scaled_loss.backward", "optim.get_lr_sched", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.TB_LOGGER.log_scaler_dict", "utils.logger.TB_LOGGER.step", "optim.misc.build_optimizer.step", "optim.misc.build_optimizer.zero_grad", "utils.misc.NoOp.update", "utils.misc.NoOp.step", "eval_vcmr.validate_full_vcmr", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "HeroForVcmr.from_pretrained.parameters", "load_data.build_downstream_dataloaders.keys", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "utils.distributed.all_reduce_and_rescale_tensors", "torch.nn.utils.clip_grad_norm_", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "load_data.build_downstream_dataloaders.keys", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_vcmr.validate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "horovod.torch.rank", "eval_vcmr.validate_full_vcmr", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "os.path.join", "os.path.join", "HeroForVcmr.from_pretrained.set_hard_negative", "float", "apex.amp.master_params", "sum", "int", "utils.logger.LOGGER.info", "utils.logger.TB_LOGGER.add_scalar", "eval_vcmr.validate_full_vcmr", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "HeroForVcmr.from_pretrained.parameters", "task2loss.values", "utils.distributed.all_gather_list", "horovod.torch.rank", "eval_vcmr.validate_full_vcmr", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "horovod.torch.rank", "horovod.torch.rank", "time.time", "horovod.torch.rank", "horovod.torch.rank"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_random_seed", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.broadcast_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_dropout", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.misc.build_optimizer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_only_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.save_training_meta", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.create", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.add_log_to_file", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.set_train_st_ed", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.VsmAllgather.backward", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.get_lr_sched", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vcmr.validate_full_vcmr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_reduce_and_rescale_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vcmr.validate_full_vcmr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.set_hard_negative", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vcmr.validate_full_vcmr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vcmr.validate_full_vcmr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "opts", ".", "n_gpu", "=", "n_gpu", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "", "set_random_seed", "(", "opts", ".", "seed", ")", "\n", "\n", "# train_examples = None", "\n", "LOGGER", ".", "info", "(", "f\"Loading the whole video dataset {opts.sub_txt_db}, \"", "\n", "f\"{opts.vfeat_db}\"", ")", "\n", "if", "opts", ".", "task", "!=", "\"didemo_video_only\"", ":", "\n", "        ", "video_db", "=", "load_video_sub_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "\n", "opts", ".", "vfeat_interval", ",", "opts", ")", "\n", "", "else", ":", "\n", "        ", "txt_meta", "=", "load_json", "(", "\n", "join", "(", "opts", ".", "train_query_txt_db", ",", "\"meta.json\"", ")", ")", "\n", "video_db", "=", "load_video_only_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "txt_meta", ",", "\n", "opts", ".", "vfeat_interval", ",", "opts", ")", "\n", "\n", "# data loaders", "\n", "# train", "\n", "", "video_ids", "=", "get_video_ids", "(", "opts", ".", "train_query_txt_db", ")", "\n", "train_q_txt_db", "=", "QueryTokLmdb", "(", "opts", ".", "train_query_txt_db", ",", "opts", ".", "max_txt_len", ")", "\n", "train_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "True", ",", "opts", ",", "shuffle", "=", "True", ",", "\n", "q_txt_db", "=", "train_q_txt_db", ")", "\n", "meta_loader", "=", "MetaLoader", "(", "train_dataloaders", ",", "\n", "accum_steps", "=", "opts", ".", "gradient_accumulation_steps", ",", "\n", "distributed", "=", "n_gpu", ">", "1", ")", "\n", "meta_loader", "=", "PrefetchLoader", "(", "meta_loader", ")", "\n", "\n", "# val", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "val_query_txt_db", ")", "\n", "val_q_txt_db", "=", "QueryTokLmdb", "(", "opts", ".", "val_query_txt_db", ",", "-", "1", ")", "\n", "val_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "False", ",", "opts", ",", "q_txt_db", "=", "val_q_txt_db", ")", "\n", "\n", "if", "opts", ".", "task", "!=", "\"didemo_video_only\"", ":", "\n", "        ", "inf_dataset", "=", "VcmrFullEvalDataset", "\n", "", "else", ":", "\n", "        ", "inf_dataset", "=", "VcmrVideoOnlyFullEvalDataset", "\n", "", "LOGGER", ".", "info", "(", "f\"Loading Inference Dataset {opts.val_query_txt_db} (val)\"", ")", "\n", "val_dset", "=", "inf_dataset", "(", "\n", "video_ids", ",", "video_db", ",", "val_q_txt_db", ",", "\n", "distributed", "=", "opts", ".", "distributed_eval", ")", "\n", "inf_loader_val", "=", "DataLoader", "(", "val_dset", ",", "\n", "batch_size", "=", "opts", ".", "vcmr_eval_q_batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "vcmr_full_eval_collate", ")", "\n", "inf_loader_val", "=", "PrefetchLoader", "(", "inf_loader_val", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "        ", "LOGGER", ".", "info", "(", "\n", "f\"Loading Inference Dataset {opts.test_query_txt_db} (test)\"", ")", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "test_query_txt_db", ")", "\n", "test_q_txt_db", "=", "QueryTokLmdb", "(", "opts", ".", "test_query_txt_db", ",", "-", "1", ")", "\n", "test_dset", "=", "inf_dataset", "(", "\n", "video_ids", ",", "video_db", ",", "test_q_txt_db", ",", "\n", "distributed", "=", "opts", ".", "distributed_eval", ")", "\n", "inf_loader_test", "=", "DataLoader", "(", "\n", "test_dset", ",", "batch_size", "=", "opts", ".", "vcmr_eval_q_batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "vcmr_full_eval_collate", ")", "\n", "inf_loader_test", "=", "PrefetchLoader", "(", "inf_loader_test", ")", "\n", "\n", "# Prepare model", "\n", "", "if", "opts", ".", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opts", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "{", "}", "\n", "", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "if", "img_pos_embed_weight_key", "in", "checkpoint", ":", "\n", "        ", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "", "else", ":", "\n", "        ", "max_frm_seq_len", "=", "MAX_FRM_SEQ_LEN", "\n", "\n", "", "model", "=", "HeroForVcmr", ".", "from_pretrained", "(", "\n", "opts", ".", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lw_neg_ctx", "=", "opts", ".", "lw_neg_ctx", ",", "\n", "lw_neg_q", "=", "opts", ".", "lw_neg_q", ",", "lw_st_ed", "=", "0", ",", "\n", "ranking_loss_type", "=", "opts", ".", "ranking_loss_type", ",", "\n", "use_hard_negative", "=", "False", ",", "\n", "hard_pool_size", "=", "opts", ".", "hard_pool_size", ",", "\n", "margin", "=", "opts", ".", "margin", ",", "\n", "use_all_neg", "=", "opts", ".", "use_all_neg", ",", "\n", "drop_svmr_prob", "=", "opts", ".", "drop_svmr_prob", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "# make sure every process has same model parameters in the beginning", "\n", "broadcast_tensors", "(", "[", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ",", "0", ")", "\n", "set_dropout", "(", "model", ",", "opts", ".", "dropout", ")", "\n", "\n", "# Prepare optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "opts", ")", "\n", "task2scaler", "=", "{", "t", ":", "i", "for", "i", ",", "t", "in", "enumerate", "(", "train_dataloaders", ".", "keys", "(", ")", ")", "}", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "num_losses", "=", "len", "(", "task2scaler", ")", ",", "\n", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "restorer", "=", "TrainingRestorer", "(", "opts", ",", "model", ",", "optimizer", ")", "\n", "global_step", "=", "restorer", ".", "global_step", "\n", "TB_LOGGER", ".", "global_step", "=", "global_step", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "save_training_meta", "(", "opts", ")", "\n", "TB_LOGGER", ".", "create", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ")", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "opts", ".", "num_train_steps", ")", "\n", "model_saver", "=", "ModelSaver", "(", "join", "(", "opts", ".", "output_dir", ",", "'ckpt'", ")", ")", "\n", "if", "not", "exists", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", ":", "\n", "# store tvr predictions", "\n", "            ", "os", ".", "makedirs", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", "\n", "", "if", "opts", ".", "nms_thd", "!=", "-", "1", ":", "\n", "# store tvr-nms predictions", "\n", "            ", "if", "not", "exists", "(", "join", "(", "opts", ".", "output_dir", ",", "'results_nms'", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "join", "(", "opts", ".", "output_dir", ",", "'results_nms'", ")", ")", "\n", "", "", "add_log_to_file", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ",", "'log.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "pbar", "=", "NoOp", "(", ")", "\n", "model_saver", "=", "NoOp", "(", ")", "\n", "restorer", "=", "NoOp", "(", ")", "\n", "\n", "", "if", "global_step", ">", "0", ":", "\n", "        ", "pbar", ".", "update", "(", "global_step", ")", "\n", "", "LOGGER", ".", "info", "(", "f\"***** Running training with {n_gpu} GPUs *****\"", ")", "\n", "LOGGER", ".", "info", "(", "\"  Batch size = %d\"", ",", "opts", ".", "train_batch_size", ")", "\n", "LOGGER", ".", "info", "(", "\"  Accumulate steps = %d\"", ",", "opts", ".", "gradient_accumulation_steps", ")", "\n", "LOGGER", ".", "info", "(", "\"  Num steps = %d\"", ",", "opts", ".", "num_train_steps", ")", "\n", "\n", "task2loss", "=", "{", "task", ":", "RunningMeter", "(", "f'loss/{task}'", ")", "\n", "for", "task", "in", "train_dataloaders", ".", "keys", "(", ")", "}", "\n", "\n", "for", "obj", "in", "(", "f'{opts.task}_st_ed'", ",", "f'{opts.task}_neg_ctx'", ",", "\n", "f'{opts.task}_neg_q'", ")", ":", "\n", "        ", "task2loss", "[", "obj", "]", "=", "RunningMeter", "(", "f'loss/{obj}'", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "n_examples", "=", "defaultdict", "(", "int", ")", "\n", "start", "=", "time", "(", ")", "\n", "# quick hack for amp delay_unscale bug", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "global_step", "==", "0", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "", "for", "step", ",", "(", "task", ",", "batch", ")", "in", "enumerate", "(", "meta_loader", ")", ":", "\n", "        ", "if", "len", "(", "opts", ".", "hard_negtiave_start_step", ")", ">", "0", ":", "\n", "            ", "for", "i", ",", "hn_step", "in", "enumerate", "(", "opts", ".", "hard_negtiave_start_step", ")", ":", "\n", "                ", "if", "global_step", ">=", "hn_step", "and", "hn_step", "!=", "-", "1", ":", "\n", "                    ", "model", ".", "set_hard_negative", "(", "\n", "True", ",", "opts", ".", "hard_pool_size", "[", "i", "]", ",", "opts", ".", "hard_neg_weights", "[", "i", "]", ")", "\n", "", "", "", "if", "opts", ".", "train_span_start_step", "!=", "-", "1", "and", "global_step", ">=", "opts", ".", "train_span_start_step", ":", "\n", "            ", "model", ".", "set_train_st_ed", "(", "opts", ".", "lw_st_ed", ")", "\n", "\n", "", "n_examples", "[", "task", "]", "+=", "opts", ".", "train_batch_size", "\n", "\n", "loss", "=", "model", "(", "batch", ",", "task", "=", "task", ",", "compute_loss", "=", "True", ")", "\n", "\n", "loss_st_ed", ",", "loss_neg_ctx", ",", "loss_neg_q", "=", "loss", "\n", "loss", "=", "loss_st_ed", "+", "loss_neg_ctx", "+", "loss_neg_q", "\n", "for", "n", ",", "ls", ",", "w", "in", "(", "(", "'st_ed'", ",", "loss_st_ed", ",", "opts", ".", "lw_st_ed", ")", ",", "\n", "(", "'neg_ctx'", ",", "loss_neg_ctx", ",", "opts", ".", "lw_neg_ctx", ")", ",", "\n", "(", "'neg_q'", ",", "loss_neg_q", ",", "opts", ".", "lw_neg_q", ")", ")", ":", "\n", "            ", "ls", "=", "ls", ".", "item", "(", ")", "\n", "if", "w", ":", "\n", "                ", "ls", "/=", "w", "\n", "", "task2loss", "[", "f'{task}_{n}'", "]", "(", "ls", ")", "\n", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "task2loss", "[", "task", "]", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "delay_unscale", "=", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "!=", "0", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ",", "delay_unscale", "=", "delay_unscale", ",", "\n", "loss_id", "=", "task2scaler", "[", "task", "]", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "if", "not", "delay_unscale", ":", "\n", "# gather gradients from every processes", "\n", "# do this before unscaling to make sure every process uses", "\n", "# the same gradient scale", "\n", "                ", "grads", "=", "[", "p", ".", "grad", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "\n", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", "]", "\n", "all_reduce_and_rescale_tensors", "(", "grads", ",", "float", "(", "1", ")", ")", "\n", "\n", "", "", "if", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "global_step", "+=", "1", "\n", "\n", "# learning rate scheduling", "\n", "lr_this_step", "=", "get_lr_sched", "(", "global_step", ",", "opts", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "TB_LOGGER", ".", "add_scalar", "(", "'lr'", ",", "lr_this_step", ",", "global_step", ")", "\n", "\n", "# log loss", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "{", "temp_loss", ".", "name", ":", "temp_loss", ".", "val", "\n", "for", "temp_loss", "in", "task2loss", ".", "values", "(", ")", "\n", "if", "temp_loss", ".", "val", "is", "not", "None", "}", ")", "\n", "TB_LOGGER", ".", "step", "(", ")", "\n", "\n", "# update model params", "\n", "if", "opts", ".", "grad_norm", "!=", "-", "1", ":", "\n", "                ", "grad_norm", "=", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "\n", "opts", ".", "grad_norm", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "'grad_norm'", ",", "grad_norm", ",", "global_step", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "global_step", "%", "100", "==", "0", ":", "\n", "# monitor training throughput", "\n", "                ", "LOGGER", ".", "info", "(", "'-------------------------------------------'", ")", "\n", "LOGGER", ".", "info", "(", "f'Step {global_step}:'", ")", "\n", "for", "t", "in", "train_dataloaders", ".", "keys", "(", ")", ":", "\n", "                    ", "tot_ex", "=", "sum", "(", "all_gather_list", "(", "n_examples", "[", "t", "]", ")", ")", "\n", "ex_per_sec", "=", "int", "(", "tot_ex", "/", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "LOGGER", ".", "info", "(", "f'{t}: {tot_ex} examples trained at '", "\n", "f'{ex_per_sec} ex/s'", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "f'perf/{t}_ex_per_s'", ",", "ex_per_sec", ",", "\n", "global_step", ")", "\n", "\n", "", "", "if", "global_step", "%", "opts", ".", "valid_steps", "==", "0", ":", "\n", "                ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", "or", "opts", ".", "distributed_eval", ":", "\n", "                    ", "log", ",", "results", "=", "validate_full_vcmr", "(", "\n", "model", ",", "inf_loader_val", ",", "\n", "'val'", ",", "opts", ",", "model_opts", "=", "opts", ")", "\n", "save_json", "(", "\n", "results", ",", "f'{opts.output_dir}/results/'", "\n", "f'val_results_{global_step}_rank{hvd.rank()}.json'", ")", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "log", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "                        ", "log", ",", "results", "=", "validate_full_vcmr", "(", "\n", "model", ",", "inf_loader_test", ",", "\n", "'test'", ",", "opts", ",", "model_opts", "=", "opts", ")", "\n", "save_json", "(", "\n", "results", ",", "f'{opts.output_dir}/results/'", "\n", "f'test_results_{global_step}_rank{hvd.rank()}.json'", ")", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "log", ")", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "\n", "# step restorer in the end to prevent missing validation checkpoint", "\n", "", "restorer", ".", "step", "(", ")", "\n", "", "if", "global_step", ">=", "opts", ".", "num_train_steps", ":", "\n", "            ", "break", "\n", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "if", "global_step", "%", "opts", ".", "valid_steps", "!=", "0", ":", "\n", "        ", "if", "hvd", ".", "rank", "(", ")", "==", "0", "or", "opts", ".", "distributed_eval", ":", "\n", "            ", "log", ",", "results", "=", "validate_full_vcmr", "(", "\n", "model", ",", "inf_loader_val", ",", "\n", "'val'", ",", "opts", ",", "model_opts", "=", "opts", ")", "\n", "save_json", "(", "results", ",", "\n", "f'{opts.output_dir}/results/'", "\n", "f'val_results_{global_step}'", "\n", "f'_rank{hvd.rank()}_final.json'", ")", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "log", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "                ", "log", ",", "results", "=", "validate_full_vcmr", "(", "\n", "model", ",", "inf_loader_test", ",", "\n", "'test'", ",", "opts", ",", "model_opts", "=", "opts", ")", "\n", "save_json", "(", "\n", "results", ",", "f'{opts.output_dir}/results/'", "\n", "f'test_results_{global_step}_rank{hvd.rank()}.json'", ")", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "log", ")", "\n", "", "", "", "model_saver", ".", "save", "(", "model", ",", "f'{global_step}_final'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_vcmr.validate": [[327, 337], ["model.eval", "utils.logger.LOGGER.info", "train_vcmr.validate_vcmr", "utils.logger.TB_LOGGER.log_scaler_dict", "model.train", "validate_vcmr.items", "validate_vcmr.items"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.None.train_vcmr.validate_vcmr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict"], ["", "def", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "task", "=", "opts", ".", "task", "\n", "loader", "=", "val_dataloaders", "[", "task", "]", "\n", "LOGGER", ".", "info", "(", "f\"validate on {task} task\"", ")", "\n", "val_log", "=", "validate_vcmr", "(", "model", ",", "loader", ",", "opts", ")", "\n", "val_log", "=", "{", "f'{task}_{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "\n", "{", "f'valid_{task}/{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_vcmr.validate_vcmr": [[339, 395], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "time.time", "enumerate", "sum", "sum", "sum", "sum", "sum", "utils.logger.LOGGER.info", "len", "model", "loss_st_ed.item", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "len", "loss_neg_ctx.sum().item", "loss_neg_q.sum().item", "int", "loss_neg_ctx.sum", "loss_neg_q.sum"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_vcmr", "(", "model", ",", "val_loader", ",", "opts", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\n", "\"start running validation (easy version with loss computed)...\"", ")", "\n", "val_loss", "=", "0", "\n", "val_loss_st_ed", "=", "0", "\n", "val_loss_neg_ctx", "=", "0", "\n", "val_loss_neg_q", "=", "0", "\n", "n_ex", "=", "0", "\n", "n_ex_pos", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "if", "'qids'", "in", "batch", ":", "\n", "# qids = batch['qids']", "\n", "            ", "del", "batch", "[", "'qids'", "]", "\n", "", "n_ex", "+=", "len", "(", "batch", "[", "'q_vidx'", "]", ")", "\n", "\n", "loss_st_ed", ",", "loss_neg_ctx", ",", "loss_neg_q", "=", "model", "(", "batch", ",", "opts", ".", "task", ",", "compute_loss", "=", "True", ")", "\n", "\n", "val_loss_st_ed", "+=", "loss_st_ed", ".", "item", "(", ")", "\n", "if", "opts", ".", "lw_neg_ctx", "!=", "0", "or", "opts", ".", "lw_neg_q", "!=", "0", ":", "\n", "            ", "n_pos", "=", "len", "(", "loss_neg_ctx", ")", "\n", "val_loss_neg_ctx", "+=", "loss_neg_ctx", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "val_loss_neg_q", "+=", "loss_neg_q", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_ex_pos", "+=", "n_pos", "\n", "\n", "", "", "val_loss_st_ed", "=", "sum", "(", "all_gather_list", "(", "val_loss_st_ed", ")", ")", "\n", "val_loss_neg_ctx", "=", "sum", "(", "all_gather_list", "(", "val_loss_neg_ctx", ")", ")", "\n", "val_loss_neg_q", "=", "sum", "(", "all_gather_list", "(", "val_loss_neg_q", ")", ")", "\n", "n_ex", "=", "sum", "(", "all_gather_list", "(", "n_ex", ")", ")", "\n", "n_ex_pos", "=", "sum", "(", "all_gather_list", "(", "n_ex_pos", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "if", "opts", ".", "lw_st_ed", ":", "\n", "        ", "val_loss_st_ed", "/=", "n_ex", "\n", "val_loss_st_ed", "/=", "opts", ".", "lw_st_ed", "\n", "", "if", "n_ex_pos", ">", "0", "and", "opts", ".", "lw_neg_q", ">", "0", "and", "opts", ".", "lw_neg_ctx", ">", "0", ":", "\n", "        ", "val_loss_neg_ctx", "/=", "n_ex_pos", "\n", "val_loss_neg_q", "/=", "n_ex_pos", "\n", "val_loss_neg_ctx", "/=", "opts", ".", "lw_neg_ctx", "\n", "val_loss_neg_q", "/=", "opts", ".", "lw_neg_q", "\n", "\n", "", "val_loss", "=", "opts", ".", "lw_st_ed", "*", "val_loss_st_ed", "+", "opts", ".", "lw_neg_ctx", "*", "val_loss_neg_ctx", "+", "opts", ".", "lw_neg_q", "*", "val_loss_neg_q", "\n", "val_log", "=", "{", "\n", "'valid/loss_overall'", ":", "val_loss", ",", "\n", "'valid/loss_st_ed'", ":", "val_loss_st_ed", ",", "\n", "'valid/loss_neg_ctx'", ":", "val_loss_neg_ctx", ",", "\n", "'valid/loss_neg_q'", ":", "val_loss_neg_q", ",", "\n", "'valid/ex_per_s'", ":", "n_ex", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds, \"", "\n", "f\"loss: {val_loss:.2f}\"", ")", "\n", "return", "val_log", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_violin.main": [[38, 242], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "utils.logger.LOGGER.info", "utils.misc.set_random_seed", "utils.logger.LOGGER.info", "load_data.load_video_sub_dataset", "load_data.get_video_ids", "data.QaQueryTokLmdb", "load_data.build_downstream_dataloaders", "data.MetaLoader", "data.PrefetchLoader", "load_data.get_video_ids", "data.QaQueryTokLmdb", "load_data.build_downstream_dataloaders", "load_data.get_video_ids", "data.QaQueryTokLmdb", "load_data.build_downstream_dataloaders", "model.violin.HeroForViolin.from_pretrained", "HeroForViolin.from_pretrained.to", "utils.distributed.broadcast_tensors", "utils.misc.set_dropout", "optim.misc.build_optimizer", "apex.amp.initialize", "utils.save.TrainingRestorer", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "HeroForViolin.from_pretrained.train", "collections.defaultdict", "time.time", "optim.misc.build_optimizer.zero_grad", "enumerate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "torch.load", "horovod.torch.load", "len", "horovod.torch.rank", "utils.save.save_training_meta", "utils.logger.TB_LOGGER.create", "tqdm.tqdm", "utils.save.ModelSaver", "utils.logger.add_log_to_file", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp.update", "utils.logger.RunningMeter", "optim.misc.build_optimizer.step", "HeroForViolin.from_pretrained.", "loss.mean.mean", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_violin.validate", "train_violin.validate", "utils.logger.LOGGER.info", "horovod.torch.rank", "torch.zeros", "horovod.torch.zeros", "torch.zeros.data[].copy_", "enumerate", "len", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "load_data.build_downstream_dataloaders.keys", "loss.mean.item", "apex.amp.scale_loss", "scaled_loss.backward", "optim.get_lr_sched", "enumerate", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.TB_LOGGER.log_scaler_dict", "utils.logger.TB_LOGGER.step", "optim.misc.build_optimizer.step", "optim.misc.build_optimizer.zero_grad", "utils.misc.NoOp.step", "utils.misc.NoOp.update", "HeroForViolin.from_pretrained.parameters", "load_data.build_downstream_dataloaders.keys", "os.path.join", "os.path.join", "utils.distributed.all_reduce_and_rescale_tensors", "torch.nn.utils.clip_grad_norm_", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "load_data.build_downstream_dataloaders.keys", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_violin.validate", "train_violin.validate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "float", "apex.amp.master_params", "sum", "int", "utils.logger.LOGGER.info", "utils.logger.TB_LOGGER.add_scalar", "HeroForViolin.from_pretrained.parameters", "ValueError", "task2loss.values", "utils.distributed.all_gather_list", "time.time"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_random_seed", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.broadcast_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_dropout", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.misc.build_optimizer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.save_training_meta", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.create", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.add_log_to_file", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.VsmAllgather.backward", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.get_lr_sched", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_reduce_and_rescale_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "opts", ".", "n_gpu", "=", "n_gpu", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "\n", "", "set_random_seed", "(", "opts", ".", "seed", ")", "\n", "\n", "# train_examples = None", "\n", "LOGGER", ".", "info", "(", "f\"Loading the whole video dataset {opts.sub_txt_db}, \"", "\n", "f\"{opts.vfeat_db}\"", ")", "\n", "video_db", "=", "load_video_sub_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "opts", ".", "vfeat_interval", ",", "opts", ")", "\n", "\n", "# data loaders", "\n", "# train", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "train_query_txt_db", ")", "\n", "train_q_txt_db", "=", "QaQueryTokLmdb", "(", "opts", ".", "train_query_txt_db", ",", "\n", "opts", ".", "max_txt_len", ")", "\n", "train_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "True", ",", "opts", ",", "q_txt_db", "=", "train_q_txt_db", ",", "\n", "shuffle", "=", "True", ")", "\n", "meta_loader", "=", "MetaLoader", "(", "train_dataloaders", ",", "\n", "accum_steps", "=", "opts", ".", "gradient_accumulation_steps", ",", "\n", "distributed", "=", "n_gpu", ">", "1", ")", "\n", "meta_loader", "=", "PrefetchLoader", "(", "meta_loader", ")", "\n", "\n", "# val", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "val_query_txt_db", ")", "\n", "val_q_txt_db", "=", "QaQueryTokLmdb", "(", "opts", ".", "val_query_txt_db", ",", "-", "1", ")", "\n", "val_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "False", ",", "opts", ",", "q_txt_db", "=", "val_q_txt_db", ")", "\n", "\n", "# test", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "test_query_txt_db", ")", "\n", "test_q_txt_db", "=", "QaQueryTokLmdb", "(", "opts", ".", "test_query_txt_db", ",", "-", "1", ")", "\n", "test_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "False", ",", "opts", ",", "q_txt_db", "=", "test_q_txt_db", ")", "\n", "\n", "# Prepare model", "\n", "if", "opts", ".", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opts", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "{", "}", "\n", "", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "max_frm_seq_len", "=", "MAX_FRM_SEQ_LEN", "\n", "if", "img_pos_embed_weight_key", "in", "checkpoint", ":", "\n", "        ", "checkpoint_img_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "if", "checkpoint_img_seq_len", "<", "max_frm_seq_len", ":", "\n", "            ", "old_weight", "=", "checkpoint", "[", "img_pos_embed_weight_key", "]", "\n", "new_weight", "=", "torch", ".", "zeros", "(", "\n", "max_frm_seq_len", ",", "old_weight", ".", "shape", "[", "1", "]", ")", "\n", "new_weight", ".", "data", "[", ":", "checkpoint_img_seq_len", ",", ":", "]", ".", "copy_", "(", "old_weight", ")", "\n", "checkpoint", "[", "img_pos_embed_weight_key", "]", "=", "new_weight", "\n", "", "else", ":", "\n", "            ", "max_frm_seq_len", "=", "checkpoint_img_seq_len", "\n", "", "", "model", "=", "HeroForViolin", ".", "from_pretrained", "(", "\n", "opts", ".", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "# make sure every process has same model parameters in the beginning", "\n", "broadcast_tensors", "(", "[", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ",", "0", ")", "\n", "set_dropout", "(", "model", ",", "opts", ".", "dropout", ")", "\n", "\n", "# Prepare optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "opts", ")", "\n", "task2scaler", "=", "{", "t", ":", "i", "for", "i", ",", "t", "in", "enumerate", "(", "train_dataloaders", ".", "keys", "(", ")", ")", "}", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "num_losses", "=", "len", "(", "task2scaler", ")", ",", "\n", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "restorer", "=", "TrainingRestorer", "(", "opts", ",", "model", ",", "optimizer", ")", "\n", "global_step", "=", "restorer", ".", "global_step", "\n", "TB_LOGGER", ".", "global_step", "=", "global_step", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "save_training_meta", "(", "opts", ")", "\n", "TB_LOGGER", ".", "create", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ")", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "opts", ".", "num_train_steps", ")", "\n", "model_saver", "=", "ModelSaver", "(", "join", "(", "opts", ".", "output_dir", ",", "'ckpt'", ")", ")", "\n", "if", "not", "exists", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", ":", "\n", "# store violin predictions", "\n", "            ", "os", ".", "makedirs", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", "\n", "", "add_log_to_file", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ",", "'log.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "pbar", "=", "NoOp", "(", ")", "\n", "model_saver", "=", "NoOp", "(", ")", "\n", "restorer", "=", "NoOp", "(", ")", "\n", "\n", "", "if", "global_step", ">", "0", ":", "\n", "        ", "pbar", ".", "update", "(", "global_step", ")", "\n", "", "LOGGER", ".", "info", "(", "f\"***** Running training with {n_gpu} GPUs *****\"", ")", "\n", "LOGGER", ".", "info", "(", "opts", ")", "\n", "LOGGER", ".", "info", "(", "\"  Batch size = %d\"", ",", "opts", ".", "train_batch_size", ")", "\n", "LOGGER", ".", "info", "(", "\"  Accumulate steps = %d\"", ",", "opts", ".", "gradient_accumulation_steps", ")", "\n", "LOGGER", ".", "info", "(", "\"  Num steps = %d\"", ",", "opts", ".", "num_train_steps", ")", "\n", "\n", "task2loss", "=", "{", "task", ":", "RunningMeter", "(", "f'loss/{task}'", ")", "\n", "for", "task", "in", "train_dataloaders", ".", "keys", "(", ")", "}", "\n", "\n", "model", ".", "train", "(", ")", "\n", "n_examples", "=", "defaultdict", "(", "int", ")", "\n", "start", "=", "time", "(", ")", "\n", "# quick hack for amp delay_unscale bug", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "global_step", "==", "0", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "", "for", "step", ",", "(", "task", ",", "batch", ")", "in", "enumerate", "(", "meta_loader", ")", ":", "\n", "        ", "n_examples", "[", "task", "]", "+=", "opts", ".", "train_batch_size", "\n", "\n", "loss", "=", "model", "(", "batch", ",", "task", "=", "task", ",", "compute_loss", "=", "True", ")", "\n", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "task2loss", "[", "task", "]", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "delay_unscale", "=", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "!=", "0", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ",", "delay_unscale", "=", "delay_unscale", ",", "\n", "loss_id", "=", "task2scaler", "[", "task", "]", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "if", "not", "delay_unscale", ":", "\n", "# gather gradients from every processes", "\n", "# do this before unscaling to make sure every process uses", "\n", "# the same gradient scale", "\n", "                ", "grads", "=", "[", "p", ".", "grad", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "\n", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", "]", "\n", "all_reduce_and_rescale_tensors", "(", "grads", ",", "float", "(", "1", ")", ")", "\n", "\n", "", "", "if", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "global_step", "+=", "1", "\n", "\n", "# learning rate scheduling", "\n", "lr_this_step", "=", "get_lr_sched", "(", "global_step", ",", "opts", ")", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "i", "==", "0", "or", "i", "==", "1", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "*", "opts", ".", "lr_mul", "\n", "", "elif", "i", "==", "2", "or", "i", "==", "3", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", ")", "\n", "", "", "TB_LOGGER", ".", "add_scalar", "(", "'lr'", ",", "lr_this_step", ",", "global_step", ")", "\n", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "{", "ll", ".", "name", ":", "ll", ".", "val", "\n", "for", "ll", "in", "task2loss", ".", "values", "(", ")", "\n", "if", "ll", ".", "val", "is", "not", "None", "}", ")", "\n", "TB_LOGGER", ".", "step", "(", ")", "\n", "\n", "# update model params", "\n", "if", "opts", ".", "grad_norm", "!=", "-", "1", ":", "\n", "                ", "grad_norm", "=", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "\n", "opts", ".", "grad_norm", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "'grad_norm'", ",", "grad_norm", ",", "global_step", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "restorer", ".", "step", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "global_step", "%", "100", "==", "0", ":", "\n", "# monitor training throughput", "\n", "                ", "LOGGER", ".", "info", "(", "'-------------------------------------------'", ")", "\n", "LOGGER", ".", "info", "(", "f'Step {global_step}:'", ")", "\n", "for", "t", "in", "train_dataloaders", ".", "keys", "(", ")", ":", "\n", "                    ", "tot_ex", "=", "sum", "(", "all_gather_list", "(", "n_examples", "[", "t", "]", ")", ")", "\n", "ex_per_sec", "=", "int", "(", "tot_ex", "/", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "LOGGER", ".", "info", "(", "f'{t}: {tot_ex} examples trained at '", "\n", "f'{ex_per_sec} ex/s'", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "f'perf/{t}_ex_per_s'", ",", "ex_per_sec", ",", "\n", "global_step", ")", "\n", "\n", "", "", "if", "global_step", "%", "opts", ".", "valid_steps", "==", "0", ":", "\n", "                ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "\"val\"", ",", "\n", "opts", ",", "global_step", "=", "global_step", ")", "\n", "validate", "(", "model", ",", "test_dataloaders", ",", "\"test\"", ",", "\n", "opts", ",", "global_step", "=", "global_step", ")", "\n", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "", "", "if", "global_step", ">=", "opts", ".", "num_train_steps", ":", "\n", "            ", "break", "\n", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "if", "global_step", "%", "opts", ".", "valid_steps", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "\"val\"", ",", "\n", "opts", ",", "global_step", "=", "global_step", ")", "\n", "validate", "(", "model", ",", "test_dataloaders", ",", "\"test\"", ",", "\n", "opts", ",", "global_step", "=", "global_step", ")", "\n", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "", "model_saver", ".", "save", "(", "model", ",", "f'{global_step}_final'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_violin.validate": [[244, 260], ["model.eval", "utils.logger.LOGGER.info", "eval_violin.validate_violin", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "model.train", "val_log.items", "horovod.torch.rank", "val_log.items"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_violin.validate_violin", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict"], ["", "def", "validate", "(", "model", ",", "val_dataloaders", ",", "split", ",", "opts", ",", "global_step", "=", "0", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "task", "=", "opts", ".", "task", "\n", "loader", "=", "val_dataloaders", "[", "task", "]", "\n", "LOGGER", ".", "info", "(", "f\"validate on {task} task\"", ")", "\n", "val_log", ",", "results", ",", "_", "=", "validate_violin", "(", "\n", "model", ",", "loader", ",", "split", "=", "split", ",", "save_logits", "=", "False", ")", "\n", "save_json", "(", "\n", "results", ",", "\n", "f'{opts.output_dir}/results/'", "\n", "f'val_results_{global_step}'", "\n", "f'_rank{hvd.rank()}_final.json'", ")", "\n", "val_log", "=", "{", "f'{task}_{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "\n", "{", "f'valid_{task}/{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_videoQA.main": [[38, 246], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "utils.logger.LOGGER.info", "utils.misc.set_random_seed", "utils.logger.LOGGER.info", "load_data.load_video_sub_dataset", "utils.logger.LOGGER.info", "load_data.get_video_ids", "data.QaQueryTokLmdb", "load_data.build_downstream_dataloaders", "data.MetaLoader", "data.PrefetchLoader", "utils.logger.LOGGER.info", "load_data.get_video_ids", "data.QaQueryTokLmdb", "load_data.build_downstream_dataloaders", "model.videoQA.HeroForVideoQA.from_pretrained", "HeroForVideoQA.from_pretrained.to", "utils.distributed.broadcast_tensors", "utils.misc.set_dropout", "optim.misc.build_optimizer", "apex.amp.initialize", "utils.save.TrainingRestorer", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "HeroForVideoQA.from_pretrained.train", "collections.defaultdict", "time.time", "optim.misc.build_optimizer.zero_grad", "enumerate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "utils.logger.LOGGER.info", "load_data.get_video_ids", "data.QaQueryTokLmdb", "load_data.build_downstream_dataloaders", "torch.load", "horovod.torch.load", "len", "horovod.torch.rank", "utils.save.save_training_meta", "utils.logger.TB_LOGGER.create", "tqdm.tqdm", "utils.save.ModelSaver", "utils.logger.add_log_to_file", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp.update", "utils.logger.RunningMeter", "utils.logger.RunningMeter", "optim.misc.build_optimizer.step", "HeroForVideoQA.from_pretrained.", "loss.mean.mean", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_videoQA.validate", "utils.logger.LOGGER.info", "horovod.torch.rank", "enumerate", "len", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "load_data.build_downstream_dataloaders.keys", "ls.item.item", "loss.mean.item", "apex.amp.scale_loss", "scaled_loss.backward", "optim.get_lr_sched", "enumerate", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.TB_LOGGER.log_scaler_dict", "utils.logger.TB_LOGGER.step", "optim.misc.build_optimizer.step", "optim.misc.build_optimizer.zero_grad", "utils.misc.NoOp.step", "utils.misc.NoOp.update", "train_videoQA.validate", "HeroForVideoQA.from_pretrained.parameters", "load_data.build_downstream_dataloaders.keys", "os.path.join", "os.path.join", "utils.distributed.all_reduce_and_rescale_tensors", "torch.nn.utils.clip_grad_norm_", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "load_data.build_downstream_dataloaders.keys", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_videoQA.validate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "float", "apex.amp.master_params", "sum", "int", "utils.logger.LOGGER.info", "utils.logger.TB_LOGGER.add_scalar", "train_videoQA.validate", "HeroForVideoQA.from_pretrained.parameters", "ValueError", "task2loss.values", "utils.distributed.all_gather_list", "time.time"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_random_seed", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.broadcast_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_dropout", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.misc.build_optimizer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.save_training_meta", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.create", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.add_log_to_file", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.VsmAllgather.backward", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.get_lr_sched", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_reduce_and_rescale_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "opts", ".", "n_gpu", "=", "n_gpu", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "", "set_random_seed", "(", "opts", ".", "seed", ")", "\n", "\n", "# train_examples = None", "\n", "LOGGER", ".", "info", "(", "f\"Loading the whole video dataset {opts.sub_txt_db}, \"", "\n", "f\"{opts.vfeat_db}\"", ")", "\n", "video_db", "=", "load_video_sub_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "opts", ".", "vfeat_interval", ",", "opts", ")", "\n", "\n", "# data loaders", "\n", "# train", "\n", "LOGGER", ".", "info", "(", "f\"Loading the train QA dataset {opts.train_query_txt_db}\"", ")", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "train_query_txt_db", ")", "\n", "train_q_txt_db", "=", "QaQueryTokLmdb", "(", "opts", ".", "train_query_txt_db", ",", "\n", "opts", ".", "max_txt_len", ")", "\n", "train_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "True", ",", "opts", ",", "q_txt_db", "=", "train_q_txt_db", ",", "\n", "shuffle", "=", "True", ")", "\n", "meta_loader", "=", "MetaLoader", "(", "train_dataloaders", ",", "\n", "accum_steps", "=", "opts", ".", "gradient_accumulation_steps", ",", "\n", "distributed", "=", "n_gpu", ">", "1", ")", "\n", "meta_loader", "=", "PrefetchLoader", "(", "meta_loader", ")", "\n", "\n", "# val", "\n", "LOGGER", ".", "info", "(", "f\"Loading the val QA dataset {opts.val_query_txt_db}\"", ")", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "val_query_txt_db", ")", "\n", "val_q_txt_db", "=", "QaQueryTokLmdb", "(", "opts", ".", "val_query_txt_db", ",", "-", "1", ")", "\n", "val_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "False", ",", "opts", ",", "q_txt_db", "=", "val_q_txt_db", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f\"Loading the test QA dataset {opts.test_query_txt_db}\"", ")", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "test_query_txt_db", ")", "\n", "test_q_txt_db", "=", "QaQueryTokLmdb", "(", "opts", ".", "test_query_txt_db", ",", "-", "1", ")", "\n", "test_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "False", ",", "opts", ",", "q_txt_db", "=", "test_q_txt_db", ")", "\n", "\n", "# Prepare model", "\n", "", "if", "opts", ".", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opts", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "{", "}", "\n", "", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "if", "img_pos_embed_weight_key", "in", "checkpoint", ":", "\n", "        ", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "", "else", ":", "\n", "        ", "max_frm_seq_len", "=", "MAX_FRM_SEQ_LEN", "\n", "\n", "", "model", "=", "HeroForVideoQA", ".", "from_pretrained", "(", "\n", "opts", ".", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "# make sure every process has same model parameters in the beginning", "\n", "broadcast_tensors", "(", "[", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ",", "0", ")", "\n", "set_dropout", "(", "model", ",", "opts", ".", "dropout", ")", "\n", "\n", "# Prepare optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "opts", ")", "\n", "task2scaler", "=", "{", "t", ":", "i", "for", "i", ",", "t", "in", "enumerate", "(", "train_dataloaders", ".", "keys", "(", ")", ")", "}", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "num_losses", "=", "len", "(", "task2scaler", ")", ",", "\n", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "restorer", "=", "TrainingRestorer", "(", "opts", ",", "model", ",", "optimizer", ")", "\n", "global_step", "=", "restorer", ".", "global_step", "\n", "TB_LOGGER", ".", "global_step", "=", "global_step", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "save_training_meta", "(", "opts", ")", "\n", "TB_LOGGER", ".", "create", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ")", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "opts", ".", "num_train_steps", ")", "\n", "model_saver", "=", "ModelSaver", "(", "join", "(", "opts", ".", "output_dir", ",", "'ckpt'", ")", ")", "\n", "if", "not", "exists", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", ":", "\n", "# store tvqa predictions", "\n", "            ", "os", ".", "makedirs", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", "\n", "", "add_log_to_file", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ",", "'log.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "pbar", "=", "NoOp", "(", ")", "\n", "model_saver", "=", "NoOp", "(", ")", "\n", "restorer", "=", "NoOp", "(", ")", "\n", "\n", "", "if", "global_step", ">", "0", ":", "\n", "        ", "pbar", ".", "update", "(", "global_step", ")", "\n", "", "LOGGER", ".", "info", "(", "f\"***** Running training with {n_gpu} GPUs *****\"", ")", "\n", "LOGGER", ".", "info", "(", "\"  Batch size = %d\"", ",", "opts", ".", "train_batch_size", ")", "\n", "LOGGER", ".", "info", "(", "\"  Accumulate steps = %d\"", ",", "opts", ".", "gradient_accumulation_steps", ")", "\n", "LOGGER", ".", "info", "(", "\"  Num steps = %d\"", ",", "opts", ".", "num_train_steps", ")", "\n", "\n", "task2loss", "=", "{", "task", ":", "RunningMeter", "(", "f'loss/{task}'", ")", "\n", "for", "task", "in", "train_dataloaders", ".", "keys", "(", ")", "}", "\n", "\n", "for", "obj", "in", "(", "f'{opts.task}_qa'", ",", "f'{opts.task}_st_ed'", ")", ":", "\n", "        ", "task2loss", "[", "obj", "]", "=", "RunningMeter", "(", "f'loss/{obj}'", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "n_examples", "=", "defaultdict", "(", "int", ")", "\n", "start", "=", "time", "(", ")", "\n", "# quick hack for amp delay_unscale bug", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "global_step", "==", "0", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "", "for", "step", ",", "(", "task", ",", "batch", ")", "in", "enumerate", "(", "meta_loader", ")", ":", "\n", "        ", "n_examples", "[", "task", "]", "+=", "opts", ".", "train_batch_size", "\n", "\n", "loss", "=", "model", "(", "batch", ",", "task", "=", "task", ",", "compute_loss", "=", "True", ")", "\n", "\n", "loss_qa", ",", "loss_st_ed", "=", "loss", "\n", "loss", "=", "loss_qa", "+", "opts", ".", "lw_st_ed", "*", "loss_st_ed", "\n", "for", "n", ",", "ls", "in", "(", "(", "'st_ed'", ",", "loss_st_ed", ")", ",", "\n", "(", "'qa'", ",", "loss_qa", ")", ")", ":", "\n", "            ", "ls", "=", "ls", ".", "item", "(", ")", "\n", "task2loss", "[", "f'{task}_{n}'", "]", "(", "ls", ")", "\n", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "task2loss", "[", "task", "]", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "delay_unscale", "=", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "!=", "0", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ",", "delay_unscale", "=", "delay_unscale", ",", "\n", "loss_id", "=", "task2scaler", "[", "task", "]", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "if", "not", "delay_unscale", ":", "\n", "# gather gradients from every processes", "\n", "# do this before unscaling to make sure every process uses", "\n", "# the same gradient scale", "\n", "                ", "grads", "=", "[", "p", ".", "grad", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "\n", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", "]", "\n", "all_reduce_and_rescale_tensors", "(", "grads", ",", "float", "(", "1", ")", ")", "\n", "\n", "", "", "if", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "global_step", "+=", "1", "\n", "\n", "# learning rate scheduling", "\n", "lr_this_step", "=", "get_lr_sched", "(", "global_step", ",", "opts", ")", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "i", "==", "0", "or", "i", "==", "1", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "*", "opts", ".", "lr_mul", "\n", "", "elif", "i", "==", "2", "or", "i", "==", "3", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", ")", "\n", "", "", "TB_LOGGER", ".", "add_scalar", "(", "'lr'", ",", "lr_this_step", ",", "global_step", ")", "\n", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "{", "temp_loss", ".", "name", ":", "temp_loss", ".", "val", "\n", "for", "temp_loss", "in", "task2loss", ".", "values", "(", ")", "\n", "if", "temp_loss", ".", "val", "is", "not", "None", "}", ")", "\n", "TB_LOGGER", ".", "step", "(", ")", "\n", "\n", "# update model params", "\n", "if", "opts", ".", "grad_norm", "!=", "-", "1", ":", "\n", "                ", "grad_norm", "=", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "\n", "opts", ".", "grad_norm", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "'grad_norm'", ",", "grad_norm", ",", "global_step", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "restorer", ".", "step", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "global_step", "%", "100", "==", "0", ":", "\n", "# monitor training throughput", "\n", "                ", "LOGGER", ".", "info", "(", "'-------------------------------------------'", ")", "\n", "LOGGER", ".", "info", "(", "f'Step {global_step}:'", ")", "\n", "for", "t", "in", "train_dataloaders", ".", "keys", "(", ")", ":", "\n", "                    ", "tot_ex", "=", "sum", "(", "all_gather_list", "(", "n_examples", "[", "t", "]", ")", ")", "\n", "ex_per_sec", "=", "int", "(", "tot_ex", "/", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "LOGGER", ".", "info", "(", "f'{t}: {tot_ex} examples trained at '", "\n", "f'{ex_per_sec} ex/s'", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "f'perf/{t}_ex_per_s'", ",", "ex_per_sec", ",", "\n", "global_step", ")", "\n", "\n", "", "", "if", "global_step", "%", "opts", ".", "valid_steps", "==", "0", ":", "\n", "                ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "\"val\"", ",", "\n", "opts", ",", "global_step", "=", "global_step", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "                    ", "validate", "(", "model", ",", "test_dataloaders", ",", "\"test\"", ",", "\n", "opts", ",", "global_step", "=", "global_step", ")", "\n", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "", "", "if", "global_step", ">=", "opts", ".", "num_train_steps", ":", "\n", "            ", "break", "\n", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "if", "global_step", "%", "opts", ".", "valid_steps", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "\"val\"", ",", "\n", "opts", ",", "global_step", "=", "global_step", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "            ", "validate", "(", "model", ",", "test_dataloaders", ",", "\"test\"", ",", "\n", "opts", ",", "global_step", "=", "global_step", ")", "\n", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "", "model_saver", ".", "save", "(", "model", ",", "f'{global_step}_final'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_videoQA.validate": [[248, 265], ["model.eval", "utils.logger.LOGGER.info", "eval_videoQA.validate_videoQA", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "model.train", "val_log.items", "horovod.torch.rank", "val_log.items"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_videoQA.validate_videoQA", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict"], ["", "def", "validate", "(", "model", ",", "val_dataloaders", ",", "split", ",", "opts", ",", "global_step", "=", "0", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "task", "=", "opts", ".", "task", "\n", "loader", "=", "val_dataloaders", "[", "task", "]", "\n", "LOGGER", ".", "info", "(", "f\"validate on {task} task, split {split}\"", ")", "\n", "val_log", ",", "results", ",", "_", "=", "validate_videoQA", "(", "\n", "model", ",", "loader", ",", "task", "=", "task", ",", "split", "=", "split", ",", "\n", "save_logits", "=", "False", ")", "\n", "save_json", "(", "\n", "results", ",", "\n", "f'{opts.output_dir}/results/'", "\n", "f'{split}_results_{global_step}'", "\n", "f'_rank{hvd.rank()}.json'", ")", "\n", "val_log", "=", "{", "f'{task}_{split}_{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "\n", "{", "f'{split}_{task}/{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_violin.main": [[32, 110], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "utils.logger.LOGGER.info", "utils.misc.Struct", "load_data.get_video_ids", "load_data.load_video_sub_dataset", "data.QaQueryTokLmdb", "data.ViolinEvalDataset", "os.path.exists", "torch.load", "horovod.torch.load", "len", "model.violin.HeroForViolin.from_pretrained", "amp.initialize.to", "torch.utils.data.DataLoader", "data.PrefetchLoader", "eval_violin.validate_violin", "utils.distributed.all_gather_list", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "json.load", "apex.amp.initialize", "os.makedirs", "all_results.update", "utils.distributed.all_gather_list", "horovod.torch.rank", "utils.basic_utils.save_json", "utils.logger.LOGGER.info", "horovod.torch.rank", "open", "os.path.exists", "horovod.torch.rank", "all_logits.update", "utils.basic_utils.save_pickle", "utils.logger.LOGGER.info"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_violin.validate_violin", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_pickle"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "", "hps_file", "=", "f'{opts.output_dir}/log/hps.json'", "\n", "model_opts", "=", "Struct", "(", "json", ".", "load", "(", "open", "(", "hps_file", ")", ")", ")", "\n", "model_config", "=", "f'{opts.output_dir}/log/model_config.json'", "\n", "\n", "# load DBs and image dirs", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "query_txt_db", ")", "\n", "video_db", "=", "load_video_sub_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "model_opts", ".", "vfeat_interval", ",", "\n", "model_opts", ")", "\n", "assert", "opts", ".", "split", "in", "opts", ".", "query_txt_db", "\n", "q_txt_db", "=", "QaQueryTokLmdb", "(", "opts", ".", "query_txt_db", ",", "-", "1", ")", "\n", "eval_dataset", "=", "ViolinEvalDataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ",", "\n", "sampled_by_q", "=", "model_opts", ".", "sampled_by_q", ")", "\n", "collate_fn", "=", "violin_eval_collate", "\n", "\n", "# Prepare model", "\n", "if", "exists", "(", "opts", ".", "checkpoint", ")", ":", "\n", "        ", "ckpt_file", "=", "opts", ".", "checkpoint", "\n", "", "else", ":", "\n", "        ", "ckpt_file", "=", "f'{opts.output_dir}/ckpt/model_step_{opts.checkpoint}.pt'", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_file", ")", "\n", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "assert", "img_pos_embed_weight_key", "in", "checkpoint", "\n", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "\n", "model", "=", "HeroForViolin", ".", "from_pretrained", "(", "\n", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", "\n", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "if", "opts", ".", "fp16", ":", "\n", "        ", "model", "=", "amp", ".", "initialize", "(", "model", ",", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "\n", "", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "opts", ".", "batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "eval_dataloader", "=", "PrefetchLoader", "(", "eval_dataloader", ")", "\n", "\n", "_", ",", "results", ",", "logits", "=", "validate_violin", "(", "\n", "model", ",", "eval_dataloader", ",", "opts", ".", "split", ",", "opts", ".", "save_logits", ")", "\n", "result_dir", "=", "f'{opts.output_dir}/results_{opts.split}'", "\n", "if", "opts", ".", "save_logits", ":", "\n", "        ", "result_dir", "+=", "'_w_logit'", "\n", "", "if", "not", "exists", "(", "result_dir", ")", "and", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "", "all_results", "=", "{", "}", "\n", "for", "id2res", "in", "all_gather_list", "(", "results", ")", ":", "\n", "        ", "all_results", ".", "update", "(", "id2res", ")", "\n", "", "if", "opts", ".", "save_logits", ":", "\n", "        ", "all_logits", "=", "{", "}", "\n", "for", "id2logit", "in", "all_gather_list", "(", "logits", ")", ":", "\n", "            ", "all_logits", ".", "update", "(", "id2logit", ")", "\n", "", "", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "save_json", "(", "\n", "all_results", ",", "\n", "f'{result_dir}/results_{opts.checkpoint}_all.json'", ")", "\n", "LOGGER", ".", "info", "(", "'All results written......'", ")", "\n", "if", "opts", ".", "save_logits", ":", "\n", "            ", "save_pickle", "(", "\n", "all_logits", ",", "\n", "f'{result_dir}/logits_{opts.checkpoint}_all.pkl'", ")", "\n", "LOGGER", ".", "info", "(", "'All logits written......'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_violin.compute_accuracies": [[112, 116], ["matched_qa.sum().item", "predictions.squeeze", "labels.squeeze", "matched_qa.sum"], "function", ["None"], ["", "", "", "def", "compute_accuracies", "(", "predictions", ",", "labels", ")", ":", "\n", "    ", "matched_qa", "=", "predictions", ".", "squeeze", "(", ")", "==", "labels", ".", "squeeze", "(", ")", "\n", "n_correct_qa", "=", "matched_qa", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "n_correct_qa", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_violin.validate_violin": [[118, 165], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "model.eval", "time.time", "enumerate", "sum", "sum", "sum", "utils.logger.LOGGER.info", "model", "predictions.squeeze().cpu().tolist", "zip", "torch.nn.functional.binary_cross_entropy", "F.binary_cross_entropy.item", "eval_violin.compute_accuracies", "len", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "scores.cpu().tolist.cpu().tolist", "zip", "torch.sigmoid", "horovod.torch.sigmoid", "targets.to", "predictions.squeeze().cpu", "int", "torch.sigmoid", "horovod.torch.sigmoid", "str", "scores.cpu().tolist.cpu", "predictions.squeeze", "str"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_violin.compute_accuracies", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_violin", "(", "model", ",", "val_loader", ",", "split", ",", "save_logits", "=", "False", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "f\"start running validation on VIOLIN {split} split...\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "0", "\n", "n_ex", "=", "0", "\n", "tot_score", "=", "0", "\n", "results", "=", "{", "}", "\n", "logits", "=", "{", "}", "\n", "st", "=", "time", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "targets", "=", "batch", "[", "'targets'", "]", "\n", "if", "'qids'", "in", "batch", ":", "\n", "            ", "qids", "=", "batch", "[", "'qids'", "]", "\n", "del", "batch", "[", "'qids'", "]", "\n", "\n", "", "scores", "=", "model", "(", "batch", ",", "\"violin\"", ",", "compute_loss", "=", "False", ")", "\n", "predictions", "=", "(", "torch", ".", "sigmoid", "(", "scores", ")", ">", "0.5", ")", ".", "long", "(", ")", "\n", "answers", "=", "predictions", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "qid", ",", "answer", "in", "zip", "(", "qids", ",", "answers", ")", ":", "\n", "            ", "results", "[", "str", "(", "qid", ")", "]", "=", "answer", "\n", "", "if", "save_logits", ":", "\n", "            ", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "qid", ",", "logit", "in", "zip", "(", "qids", ",", "scores", ")", ":", "\n", "                ", "logits", "[", "str", "(", "qid", ")", "]", "=", "logit", "\n", "\n", "", "", "loss", "=", "F", ".", "binary_cross_entropy", "(", "\n", "torch", ".", "sigmoid", "(", "scores", ")", ",", "targets", ".", "to", "(", "dtype", "=", "scores", ".", "dtype", ")", ",", "\n", "reduction", "=", "'sum'", ")", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tot_score", "+=", "compute_accuracies", "(", "predictions", ",", "targets", ")", "\n", "n_ex", "+=", "len", "(", "qids", ")", "\n", "\n", "", "val_loss", "=", "sum", "(", "all_gather_list", "(", "val_loss", ")", ")", "\n", "tot_score", "=", "sum", "(", "all_gather_list", "(", "tot_score", ")", ")", "\n", "n_ex", "=", "sum", "(", "all_gather_list", "(", "n_ex", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "val_loss", "/=", "n_ex", "\n", "val_acc", "=", "tot_score", "/", "n_ex", "\n", "val_log", "=", "{", "\n", "f'valid/{split}_loss'", ":", "val_loss", ",", "\n", "f'valid/{split}_acc'", ":", "val_acc", ",", "\n", "f'valid/{split}_ex_per_s'", ":", "n_ex", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation of {split} split finished in {int(tot_time)}s, \"", "\n", "f\"loss:{val_loss:.2f}, score: {val_acc*100:.2f}\"", ")", "\n", "return", "val_log", ",", "results", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_vr.main": [[47, 321], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "utils.logger.LOGGER.info", "utils.misc.set_random_seed", "utils.logger.LOGGER.info", "load_data.get_video_ids", "data.MsrvttQueryTokLmdb", "load_data.build_downstream_dataloaders", "data.MetaLoader", "data.PrefetchLoader", "load_data.get_video_ids", "data.MsrvttQueryTokLmdb", "load_data.build_downstream_dataloaders", "utils.logger.LOGGER.info", "inf_dataset", "torch.utils.data.DataLoader", "data.PrefetchLoader", "model.vr.HeroForVr.from_pretrained", "HeroForVr.from_pretrained.to", "utils.distributed.broadcast_tensors", "utils.misc.set_dropout", "optim.misc.build_optimizer", "apex.amp.initialize", "utils.save.TrainingRestorer", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "HeroForVr.from_pretrained.train", "collections.defaultdict", "time.time", "optim.misc.build_optimizer.zero_grad", "enumerate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "load_data.load_video_sub_dataset", "utils.basic_utils.load_json", "load_data.load_video_only_dataset", "utils.logger.LOGGER.info", "load_data.get_video_ids", "data.MsrvttQueryTokLmdb", "inf_dataset", "torch.utils.data.DataLoader", "data.PrefetchLoader", "torch.load", "horovod.torch.load", "len", "horovod.torch.rank", "utils.save.save_training_meta", "utils.logger.TB_LOGGER.create", "tqdm.tqdm", "utils.save.ModelSaver", "utils.logger.add_log_to_file", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp.update", "utils.logger.RunningMeter", "utils.logger.RunningMeter", "optim.misc.build_optimizer.step", "HeroForVr.from_pretrained.", "loss.mean.mean", "horovod.torch.rank", "os.path.join", "enumerate", "len", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "load_data.build_downstream_dataloaders.keys", "len", "enumerate", "ls.item.item", "loss.mean.item", "apex.amp.scale_loss", "scaled_loss.backward", "optim.get_lr_sched", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.TB_LOGGER.log_scaler_dict", "utils.logger.TB_LOGGER.step", "optim.misc.build_optimizer.step", "optim.misc.build_optimizer.zero_grad", "utils.misc.NoOp.update", "utils.misc.NoOp.step", "eval_vr.validate_full_vr", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "HeroForVr.from_pretrained.parameters", "load_data.build_downstream_dataloaders.keys", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "utils.distributed.all_reduce_and_rescale_tensors", "torch.nn.utils.clip_grad_norm_", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "load_data.build_downstream_dataloaders.keys", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_vr.validate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "horovod.torch.rank", "eval_vr.validate_full_vr", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "os.path.join", "os.path.join", "HeroForVr.from_pretrained.set_hard_negative", "float", "apex.amp.master_params", "sum", "int", "utils.logger.LOGGER.info", "utils.logger.TB_LOGGER.add_scalar", "eval_vr.validate_full_vr", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "HeroForVr.from_pretrained.parameters", "task2loss.values", "utils.distributed.all_gather_list", "horovod.torch.rank", "eval_vr.validate_full_vr", "utils.basic_utils.save_json", "utils.logger.TB_LOGGER.log_scaler_dict", "horovod.torch.rank", "horovod.torch.rank", "time.time", "horovod.torch.rank", "horovod.torch.rank"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_random_seed", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.build_downstream_dataloaders", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.broadcast_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_dropout", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.misc.build_optimizer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_only_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.save_training_meta", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.create", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.add_log_to_file", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.VsmAllgather.backward", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.get_lr_sched", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vr.validate_full_vr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_reduce_and_rescale_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vr.validate_full_vr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.set_hard_negative", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vr.validate_full_vr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vr.validate_full_vr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "opts", ".", "n_gpu", "=", "n_gpu", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "", "set_random_seed", "(", "opts", ".", "seed", ")", "\n", "\n", "# train_examples = None", "\n", "LOGGER", ".", "info", "(", "f\"Loading the whole video dataset {opts.sub_txt_db}, \"", "\n", "f\"{opts.vfeat_db}\"", ")", "\n", "if", "opts", ".", "task", "!=", "\"msrvtt_video_only\"", ":", "\n", "        ", "video_db", "=", "load_video_sub_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "\n", "opts", ".", "vfeat_interval", ",", "opts", ")", "\n", "", "else", ":", "\n", "        ", "txt_meta", "=", "load_json", "(", "\n", "join", "(", "opts", ".", "train_query_txt_db", ",", "\"meta.json\"", ")", ")", "\n", "video_db", "=", "load_video_only_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "txt_meta", ",", "\n", "opts", ".", "vfeat_interval", ",", "opts", ")", "\n", "\n", "# data loaders", "\n", "# train", "\n", "", "video_ids", "=", "get_video_ids", "(", "opts", ".", "train_query_txt_db", ")", "\n", "train_q_txt_db", "=", "MsrvttQueryTokLmdb", "(", "\n", "opts", ".", "train_query_txt_db", ",", "opts", ".", "max_txt_len", ")", "\n", "train_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "True", ",", "opts", ",", "shuffle", "=", "True", ",", "\n", "q_txt_db", "=", "train_q_txt_db", ")", "\n", "meta_loader", "=", "MetaLoader", "(", "train_dataloaders", ",", "\n", "accum_steps", "=", "opts", ".", "gradient_accumulation_steps", ",", "\n", "distributed", "=", "n_gpu", ">", "1", ")", "\n", "meta_loader", "=", "PrefetchLoader", "(", "meta_loader", ")", "\n", "\n", "# val", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "val_query_txt_db", ")", "\n", "val_q_txt_db", "=", "MsrvttQueryTokLmdb", "(", "opts", ".", "val_query_txt_db", ",", "-", "1", ")", "\n", "val_dataloaders", "=", "build_downstream_dataloaders", "(", "\n", "[", "opts", ".", "task", "]", ",", "video_db", ",", "video_ids", ",", "\n", "False", ",", "opts", ",", "q_txt_db", "=", "val_q_txt_db", ")", "\n", "\n", "if", "opts", ".", "task", "!=", "\"msrvtt_video_only\"", ":", "\n", "        ", "inf_dataset", "=", "VrFullEvalDataset", "\n", "", "else", ":", "\n", "        ", "inf_dataset", "=", "VrVideoOnlyFullEvalDataset", "\n", "", "LOGGER", ".", "info", "(", "f\"Loading Inference Dataset {opts.val_query_txt_db} (val)\"", ")", "\n", "val_dset", "=", "inf_dataset", "(", "\n", "video_ids", ",", "video_db", ",", "val_q_txt_db", ",", "\n", "distributed", "=", "opts", ".", "distributed_eval", ")", "\n", "inf_loader_val", "=", "DataLoader", "(", "val_dset", ",", "\n", "batch_size", "=", "opts", ".", "vr_eval_q_batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "vr_full_eval_collate", ")", "\n", "inf_loader_val", "=", "PrefetchLoader", "(", "inf_loader_val", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "        ", "LOGGER", ".", "info", "(", "\n", "f\"Loading Inference Dataset {opts.test_query_txt_db} (test)\"", ")", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "test_query_txt_db", ")", "\n", "test_q_txt_db", "=", "MsrvttQueryTokLmdb", "(", "opts", ".", "test_query_txt_db", ",", "-", "1", ")", "\n", "test_dset", "=", "inf_dataset", "(", "\n", "video_ids", ",", "video_db", ",", "test_q_txt_db", ",", "\n", "distributed", "=", "opts", ".", "distributed_eval", ")", "\n", "inf_loader_test", "=", "DataLoader", "(", "\n", "test_dset", ",", "batch_size", "=", "opts", ".", "vr_eval_q_batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "vr_full_eval_collate", ")", "\n", "inf_loader_test", "=", "PrefetchLoader", "(", "inf_loader_test", ")", "\n", "\n", "# Prepare model", "\n", "", "if", "opts", ".", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opts", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "{", "}", "\n", "", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "if", "img_pos_embed_weight_key", "in", "checkpoint", ":", "\n", "        ", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "", "else", ":", "\n", "        ", "max_frm_seq_len", "=", "MAX_FRM_SEQ_LEN", "\n", "\n", "", "model", "=", "HeroForVr", ".", "from_pretrained", "(", "\n", "opts", ".", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lw_neg_ctx", "=", "opts", ".", "lw_neg_ctx", ",", "\n", "lw_neg_q", "=", "opts", ".", "lw_neg_q", ",", "\n", "ranking_loss_type", "=", "opts", ".", "ranking_loss_type", ",", "\n", "use_hard_negative", "=", "False", ",", "\n", "hard_pool_size", "=", "opts", ".", "hard_pool_size", ",", "\n", "margin", "=", "opts", ".", "margin", ",", "\n", "use_all_neg", "=", "opts", ".", "use_all_neg", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "# make sure every process has same model parameters in the beginning", "\n", "broadcast_tensors", "(", "[", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ",", "0", ")", "\n", "set_dropout", "(", "model", ",", "opts", ".", "dropout", ")", "\n", "\n", "# Prepare optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "opts", ")", "\n", "task2scaler", "=", "{", "t", ":", "i", "for", "i", ",", "t", "in", "enumerate", "(", "train_dataloaders", ".", "keys", "(", ")", ")", "}", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "num_losses", "=", "len", "(", "task2scaler", ")", ",", "\n", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "restorer", "=", "TrainingRestorer", "(", "opts", ",", "model", ",", "optimizer", ")", "\n", "global_step", "=", "restorer", ".", "global_step", "\n", "TB_LOGGER", ".", "global_step", "=", "global_step", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "save_training_meta", "(", "opts", ")", "\n", "TB_LOGGER", ".", "create", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ")", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "opts", ".", "num_train_steps", ")", "\n", "model_saver", "=", "ModelSaver", "(", "join", "(", "opts", ".", "output_dir", ",", "'ckpt'", ")", ")", "\n", "if", "not", "exists", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", ":", "\n", "# store tvr predictions", "\n", "            ", "os", ".", "makedirs", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", "\n", "", "if", "opts", ".", "nms_thd", "!=", "-", "1", ":", "\n", "# store tvr-nms predictions", "\n", "            ", "if", "not", "exists", "(", "join", "(", "opts", ".", "output_dir", ",", "'results_nms'", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "join", "(", "opts", ".", "output_dir", ",", "'results_nms'", ")", ")", "\n", "", "", "add_log_to_file", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ",", "'log.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "pbar", "=", "NoOp", "(", ")", "\n", "model_saver", "=", "NoOp", "(", ")", "\n", "restorer", "=", "NoOp", "(", ")", "\n", "\n", "", "if", "global_step", ">", "0", ":", "\n", "        ", "pbar", ".", "update", "(", "global_step", ")", "\n", "", "LOGGER", ".", "info", "(", "f\"***** Running training with {n_gpu} GPUs *****\"", ")", "\n", "LOGGER", ".", "info", "(", "\"  Batch size = %d\"", ",", "opts", ".", "train_batch_size", ")", "\n", "LOGGER", ".", "info", "(", "\"  Accumulate steps = %d\"", ",", "opts", ".", "gradient_accumulation_steps", ")", "\n", "LOGGER", ".", "info", "(", "\"  Num steps = %d\"", ",", "opts", ".", "num_train_steps", ")", "\n", "\n", "task2loss", "=", "{", "task", ":", "RunningMeter", "(", "f'loss/{task}'", ")", "\n", "for", "task", "in", "train_dataloaders", ".", "keys", "(", ")", "}", "\n", "\n", "for", "obj", "in", "(", "f'{opts.task}_neg_ctx'", ",", "\n", "f'{opts.task}_neg_q'", ")", ":", "\n", "        ", "task2loss", "[", "obj", "]", "=", "RunningMeter", "(", "f'loss/{obj}'", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "n_examples", "=", "defaultdict", "(", "int", ")", "\n", "start", "=", "time", "(", ")", "\n", "# quick hack for amp delay_unscale bug", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "global_step", "==", "0", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "", "for", "step", ",", "(", "task", ",", "batch", ")", "in", "enumerate", "(", "meta_loader", ")", ":", "\n", "        ", "if", "len", "(", "opts", ".", "hard_negtiave_start_step", ")", ">", "0", ":", "\n", "            ", "for", "i", ",", "hn_step", "in", "enumerate", "(", "opts", ".", "hard_negtiave_start_step", ")", ":", "\n", "                ", "if", "global_step", ">=", "hn_step", "and", "hn_step", "!=", "-", "1", ":", "\n", "                    ", "model", ".", "set_hard_negative", "(", "\n", "True", ",", "opts", ".", "hard_pool_size", "[", "i", "]", ",", "opts", ".", "hard_neg_weights", "[", "i", "]", ")", "\n", "\n", "", "", "", "n_examples", "[", "task", "]", "+=", "opts", ".", "train_batch_size", "\n", "\n", "loss", "=", "model", "(", "batch", ",", "task", "=", "task", ",", "compute_loss", "=", "True", ")", "\n", "\n", "loss_neg_ctx", ",", "loss_neg_q", "=", "loss", "\n", "loss", "=", "loss_neg_ctx", "+", "loss_neg_q", "\n", "for", "n", ",", "ls", ",", "w", "in", "(", "(", "'neg_ctx'", ",", "loss_neg_ctx", ",", "opts", ".", "lw_neg_ctx", ")", ",", "\n", "(", "'neg_q'", ",", "loss_neg_q", ",", "opts", ".", "lw_neg_q", ")", ")", ":", "\n", "            ", "ls", "=", "ls", ".", "item", "(", ")", "\n", "if", "w", ":", "\n", "                ", "ls", "/=", "w", "\n", "", "task2loss", "[", "f'{task}_{n}'", "]", "(", "ls", ")", "\n", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "task2loss", "[", "task", "]", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "delay_unscale", "=", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "!=", "0", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ",", "delay_unscale", "=", "delay_unscale", ",", "\n", "loss_id", "=", "task2scaler", "[", "task", "]", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "if", "not", "delay_unscale", ":", "\n", "# gather gradients from every processes", "\n", "# do this before unscaling to make sure every process uses", "\n", "# the same gradient scale", "\n", "                ", "grads", "=", "[", "p", ".", "grad", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "\n", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", "]", "\n", "all_reduce_and_rescale_tensors", "(", "grads", ",", "float", "(", "1", ")", ")", "\n", "\n", "", "", "if", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "global_step", "+=", "1", "\n", "\n", "# learning rate scheduling", "\n", "lr_this_step", "=", "get_lr_sched", "(", "global_step", ",", "opts", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "TB_LOGGER", ".", "add_scalar", "(", "'lr'", ",", "lr_this_step", ",", "global_step", ")", "\n", "\n", "# log loss", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "{", "temp_loss", ".", "name", ":", "temp_loss", ".", "val", "\n", "for", "temp_loss", "in", "task2loss", ".", "values", "(", ")", "\n", "if", "temp_loss", ".", "val", "is", "not", "None", "}", ")", "\n", "TB_LOGGER", ".", "step", "(", ")", "\n", "\n", "# update model params", "\n", "if", "opts", ".", "grad_norm", "!=", "-", "1", ":", "\n", "                ", "grad_norm", "=", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "\n", "opts", ".", "grad_norm", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "'grad_norm'", ",", "grad_norm", ",", "global_step", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "global_step", "%", "100", "==", "0", ":", "\n", "# monitor training throughput", "\n", "                ", "LOGGER", ".", "info", "(", "'-------------------------------------------'", ")", "\n", "LOGGER", ".", "info", "(", "f'Step {global_step}:'", ")", "\n", "for", "t", "in", "train_dataloaders", ".", "keys", "(", ")", ":", "\n", "                    ", "tot_ex", "=", "sum", "(", "all_gather_list", "(", "n_examples", "[", "t", "]", ")", ")", "\n", "ex_per_sec", "=", "int", "(", "tot_ex", "/", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "LOGGER", ".", "info", "(", "f'{t}: {tot_ex} examples trained at '", "\n", "f'{ex_per_sec} ex/s'", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "f'perf/{t}_ex_per_s'", ",", "ex_per_sec", ",", "\n", "global_step", ")", "\n", "\n", "", "", "if", "global_step", "%", "opts", ".", "valid_steps", "==", "0", ":", "\n", "                ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", "or", "opts", ".", "distributed_eval", ":", "\n", "                    ", "log", ",", "results", "=", "validate_full_vr", "(", "\n", "model", ",", "inf_loader_val", ",", "\n", "'val'", ",", "opts", ",", "model_opts", "=", "opts", ")", "\n", "save_json", "(", "\n", "results", ",", "f'{opts.output_dir}/results/'", "\n", "f'val_results_{global_step}_rank{hvd.rank()}.json'", ")", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "log", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "                        ", "log", ",", "results", "=", "validate_full_vr", "(", "\n", "model", ",", "inf_loader_test", ",", "\n", "'test'", ",", "opts", ",", "model_opts", "=", "opts", ")", "\n", "save_json", "(", "\n", "results", ",", "f'{opts.output_dir}/results/'", "\n", "f'test_results_{global_step}_rank{hvd.rank()}.json'", ")", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "log", ")", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "\n", "# step restorer in the end to prevent missing validation checkpoint", "\n", "", "restorer", ".", "step", "(", ")", "\n", "", "if", "global_step", ">=", "opts", ".", "num_train_steps", ":", "\n", "            ", "break", "\n", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "if", "global_step", "%", "opts", ".", "valid_steps", "!=", "0", ":", "\n", "        ", "if", "hvd", ".", "rank", "(", ")", "==", "0", "or", "opts", ".", "distributed_eval", ":", "\n", "            ", "log", ",", "results", "=", "validate_full_vr", "(", "\n", "model", ",", "inf_loader_val", ",", "\n", "'val'", ",", "opts", ",", "model_opts", "=", "opts", ")", "\n", "save_json", "(", "results", ",", "\n", "f'{opts.output_dir}/results/'", "\n", "f'val_results_{global_step}'", "\n", "f'_rank{hvd.rank()}_final.json'", ")", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "log", ")", "\n", "if", "opts", ".", "test_query_txt_db", ":", "\n", "                ", "log", ",", "results", "=", "validate_full_vr", "(", "\n", "model", ",", "inf_loader_test", ",", "\n", "'test'", ",", "opts", ",", "model_opts", "=", "opts", ")", "\n", "save_json", "(", "\n", "results", ",", "f'{opts.output_dir}/results/'", "\n", "f'test_results_{global_step}_rank{hvd.rank()}.json'", ")", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "log", ")", "\n", "", "", "", "model_saver", ".", "save", "(", "model", ",", "f'{global_step}_final'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_vr.validate": [[323, 333], ["model.eval", "utils.logger.LOGGER.info", "train_vr.validate_vr", "utils.logger.TB_LOGGER.log_scaler_dict", "model.train", "validate_vr.items", "validate_vr.items"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.None.train_vr.validate_vr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict"], ["", "def", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "task", "=", "opts", ".", "task", "\n", "loader", "=", "val_dataloaders", "[", "task", "]", "\n", "LOGGER", ".", "info", "(", "f\"validate on {task} task\"", ")", "\n", "val_log", "=", "validate_vr", "(", "model", ",", "loader", ",", "opts", ")", "\n", "val_log", "=", "{", "f'{task}_{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "\n", "{", "f'valid_{task}/{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_vr.validate_vr": [[335, 383], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "time.time", "enumerate", "sum", "sum", "sum", "sum", "utils.logger.LOGGER.info", "len", "model", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "len", "loss_neg_ctx.sum().item", "loss_neg_q.sum().item", "int", "loss_neg_ctx.sum", "loss_neg_q.sum"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_vr", "(", "model", ",", "val_loader", ",", "opts", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\n", "\"start running validation (easy version with loss computed)...\"", ")", "\n", "val_loss", "=", "0", "\n", "val_loss_neg_ctx", "=", "0", "\n", "val_loss_neg_q", "=", "0", "\n", "n_ex", "=", "0", "\n", "n_ex_pos", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "if", "'qids'", "in", "batch", ":", "\n", "# qids = batch['qids']", "\n", "            ", "del", "batch", "[", "'qids'", "]", "\n", "", "n_ex", "+=", "len", "(", "batch", "[", "'q_vidx'", "]", ")", "\n", "\n", "loss_neg_ctx", ",", "loss_neg_q", "=", "model", "(", "batch", ",", "opts", ".", "task", ",", "compute_loss", "=", "True", ")", "\n", "\n", "if", "opts", ".", "lw_neg_ctx", "!=", "0", "or", "opts", ".", "lw_neg_q", "!=", "0", ":", "\n", "            ", "n_pos", "=", "len", "(", "loss_neg_ctx", ")", "\n", "val_loss_neg_ctx", "+=", "loss_neg_ctx", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "val_loss_neg_q", "+=", "loss_neg_q", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_ex_pos", "+=", "n_pos", "\n", "\n", "", "", "val_loss_neg_ctx", "=", "sum", "(", "all_gather_list", "(", "val_loss_neg_ctx", ")", ")", "\n", "val_loss_neg_q", "=", "sum", "(", "all_gather_list", "(", "val_loss_neg_q", ")", ")", "\n", "n_ex", "=", "sum", "(", "all_gather_list", "(", "n_ex", ")", ")", "\n", "n_ex_pos", "=", "sum", "(", "all_gather_list", "(", "n_ex_pos", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "if", "n_ex_pos", ">", "0", "and", "opts", ".", "lw_neg_q", ">", "0", "and", "opts", ".", "lw_neg_ctx", ">", "0", ":", "\n", "        ", "val_loss_neg_ctx", "/=", "n_ex_pos", "\n", "val_loss_neg_q", "/=", "n_ex_pos", "\n", "val_loss_neg_ctx", "/=", "opts", ".", "lw_neg_ctx", "\n", "val_loss_neg_q", "/=", "opts", ".", "lw_neg_q", "\n", "\n", "", "val_loss", "=", "opts", ".", "lw_neg_ctx", "*", "val_loss_neg_ctx", "+", "opts", ".", "lw_neg_q", "*", "val_loss_neg_q", "\n", "val_log", "=", "{", "\n", "'valid/loss_overall'", ":", "val_loss", ",", "\n", "'valid/loss_neg_ctx'", ":", "val_loss_neg_ctx", ",", "\n", "'valid/loss_neg_q'", ":", "val_loss_neg_q", ",", "\n", "'valid/ex_per_s'", ":", "n_ex", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds, \"", "\n", "f\"loss: {val_loss:.2f}\"", ")", "\n", "return", "val_log", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.build_target_loaders": [[44, 154], ["data.SubTokLmdb", "load_data.load_video_sub_dataset", "zip", "load_data.load_video_sub_dataset", "len", "len", "utils.logger.LOGGER.info", "isinstance", "json.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.PrefetchLoader", "len", "json.load", "open", "isinstance", "json.load", "open", "torch.utils.data.ConcatDataset", "data.VideoMlmDataset", "data.VideoMlmDataset", "data.VideoMlmDataset", "isinstance", "open", "torch.utils.data.ConcatDataset", "data.MfmDataset", "data.MfmDataset", "data.MfmDataset", "isinstance", "data.VideoMlmDataset", "torch.utils.data.ConcatDataset", "data.FomEvalDataset", "data.FomDataset", "data.FomEvalDataset", "isinstance", "ValueError", "zip", "data.MfmDataset", "torch.utils.data.ConcatDataset", "data.VsmDataset", "data.VsmDataset", "data.VsmDataset", "zip", "data.FomDataset", "zip", "data.VsmDataset", "zip"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset"], ["def", "build_target_loaders", "(", "target", ",", "tgt_ratio", ",", "opts", ")", ":", "\n", "    ", "if", "'vfeat_shards'", "in", "target", ":", "\n", "        ", "sub_txt_db", "=", "SubTokLmdb", "(", "f\"{opts.txt_db}/{target['sub_txt_db']}\"", ",", "\n", "opts", ".", "max_clip_len", ")", "\n", "video_db", "=", "[", "\n", "load_video_sub_dataset", "(", "\n", "f\"{opts.img_db}/{target['vfeat_db']}/{shard}\"", ",", "sub_txt_db", ",", "\n", "target", "[", "'vfeat_interval'", "]", ",", "opts", ")", "\n", "for", "shard", "in", "target", "[", "'vfeat_shards'", "]", "\n", "]", "\n", "", "else", ":", "\n", "        ", "video_db", "=", "load_video_sub_dataset", "(", "\n", "f\"{opts.img_db}/{target['vfeat_db']}\"", ",", "\n", "f\"{opts.txt_db}/{target['sub_txt_db']}\"", ",", "\n", "target", "[", "'vfeat_interval'", "]", ",", "opts", ")", "\n", "", "train_loaders", "=", "{", "}", "\n", "val_loaders", "=", "{", "}", "\n", "for", "split", "in", "target", "[", "'splits'", "]", ":", "\n", "        ", "if", "'ratio'", "not", "in", "split", ":", "\n", "            ", "split", "[", "'ratio'", "]", "=", "[", "1", "]", "*", "len", "(", "split", "[", "'tasks'", "]", ")", "\n", "", "assert", "len", "(", "split", "[", "'tasks'", "]", ")", "==", "len", "(", "split", "[", "'ratio'", "]", ")", "\n", "for", "task", ",", "r", "in", "zip", "(", "split", "[", "'tasks'", "]", ",", "split", "[", "'ratio'", "]", ")", ":", "\n", "            ", "name", "=", "f\"{task}_{target['name']}_{split['name']}\"", "\n", "LOGGER", ".", "info", "(", "f'loading {name} ...'", ")", "\n", "ratio", "=", "tgt_ratio", "*", "r", "\n", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                ", "all_train_ids", "=", "[", "\n", "json", ".", "load", "(", "open", "(", "f\"{opts.txt_db}/{ids}\"", ")", ")", "\n", "for", "ids", "in", "split", "[", "'train_idx'", "]", "\n", "]", "\n", "", "else", ":", "\n", "                ", "train_ids", "=", "json", ".", "load", "(", "\n", "open", "(", "f\"{opts.txt_db}/{split['train_idx']}\"", ")", ")", "\n", "", "val_ids", "=", "json", ".", "load", "(", "open", "(", "f\"{opts.txt_db}/{split['val_idx']}\"", ")", ")", "\n", "if", "task", "==", "'mlm'", ":", "\n", "                ", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                    ", "train_dset", "=", "ConcatDataset", "(", "[", "\n", "VideoMlmDataset", "(", "ids", ",", "vid_db", ",", "opts", ".", "mask_prob", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "for", "ids", ",", "vid_db", "in", "zip", "(", "all_train_ids", ",", "video_db", ")", "\n", "]", ")", "\n", "val_dset", "=", "VideoMlmDataset", "(", "\n", "val_ids", ",", "video_db", "[", "0", "]", ",", "opts", ".", "mask_prob", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "", "else", ":", "\n", "                    ", "train_dset", "=", "VideoMlmDataset", "(", "\n", "train_ids", ",", "video_db", ",", "opts", ".", "mask_prob", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "val_dset", "=", "VideoMlmDataset", "(", "\n", "val_ids", ",", "video_db", ",", "opts", ".", "mask_prob", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "", "train_collate", "=", "mlm_collate", "\n", "val_collate", "=", "mlm_collate", "\n", "", "elif", "task", "==", "'mfm-nce'", "or", "task", "==", "'mffr'", ":", "\n", "                ", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                    ", "train_dset", "=", "ConcatDataset", "(", "[", "\n", "MfmDataset", "(", "ids", ",", "vid_db", ",", "opts", ".", "mask_prob", ")", "\n", "for", "ids", ",", "vid_db", "in", "zip", "(", "all_train_ids", ",", "video_db", ")", "\n", "]", ")", "\n", "val_dset", "=", "MfmDataset", "(", "val_ids", ",", "video_db", "[", "0", "]", ",", "opts", ".", "mask_prob", ")", "\n", "", "else", ":", "\n", "                    ", "train_dset", "=", "MfmDataset", "(", "train_ids", ",", "video_db", ",", "\n", "opts", ".", "mask_prob", ")", "\n", "val_dset", "=", "MfmDataset", "(", "val_ids", ",", "video_db", ",", "opts", ".", "mask_prob", ")", "\n", "", "train_collate", "=", "mfm_collate", "\n", "val_collate", "=", "mfm_collate", "\n", "", "elif", "task", "==", "'fom'", ":", "\n", "                ", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                    ", "train_dset", "=", "ConcatDataset", "(", "[", "\n", "FomDataset", "(", "ids", ",", "vid_db", ",", "opts", ".", "mask_prob", ")", "\n", "for", "ids", ",", "vid_db", "in", "zip", "(", "all_train_ids", ",", "video_db", ")", "\n", "]", ")", "\n", "val_dset", "=", "FomEvalDataset", "(", "val_ids", ",", "video_db", "[", "0", "]", ",", "\n", "opts", ".", "mask_prob", ")", "\n", "", "else", ":", "\n", "                    ", "train_dset", "=", "FomDataset", "(", "train_ids", ",", "video_db", ",", "\n", "opts", ".", "mask_prob", ")", "\n", "val_dset", "=", "FomEvalDataset", "(", "val_ids", ",", "video_db", ",", "\n", "opts", ".", "mask_prob", ")", "\n", "", "train_collate", "=", "fom_collate", "\n", "val_collate", "=", "fom_eval_collate", "\n", "", "elif", "task", "==", "'vsm'", ":", "\n", "                ", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                    ", "train_dset", "=", "ConcatDataset", "(", "[", "\n", "VsmDataset", "(", "ids", ",", "vid_db", ",", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "for", "ids", ",", "vid_db", "in", "zip", "(", "all_train_ids", ",", "video_db", ")", "\n", "]", ")", "\n", "val_dset", "=", "VsmDataset", "(", "val_ids", ",", "video_db", "[", "0", "]", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "", "else", ":", "\n", "                    ", "train_dset", "=", "VsmDataset", "(", "train_ids", ",", "video_db", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "val_dset", "=", "VsmDataset", "(", "val_ids", ",", "video_db", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "", "train_collate", "=", "vsm_collate", "\n", "val_collate", "=", "vsm_collate", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'undefined task {task}'", ")", "\n", "", "train_loader", "=", "DataLoader", "(", "train_dset", ",", "\n", "batch_size", "=", "opts", ".", "train_batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "train_collate", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_dset", ",", "batch_size", "=", "opts", ".", "val_batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "val_collate", ",", "shuffle", "=", "False", ")", "\n", "train_loaders", "[", "name", "]", "=", "(", "train_loader", ",", "ratio", ")", "\n", "val_loaders", "[", "name", "]", "=", "PrefetchLoader", "(", "val_loader", ")", "\n", "", "", "return", "train_loaders", ",", "val_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.main": [[156, 385], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "utils.logger.LOGGER.info", "utils.misc.set_random_seed", "zip", "data.MetaLoader", "data.PrefetchLoader", "HeroForPretraining.from_pretrained.to", "utils.distributed.broadcast_tensors", "utils.misc.set_dropout", "optim.misc.build_optimizer", "apex.amp.initialize", "utils.save.TrainingRestorer", "utils.distributed.all_gather_list", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_dataloaders.keys", "HeroForPretraining.from_pretrained.train", "collections.defaultdict", "time.time", "optim.misc.build_optimizer.zero_grad", "all", "enumerate", "utils.logger.LOGGER.info", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "pretrain.build_target_loaders", "train_dataloaders.update", "val_dataloaders.update", "torch.load", "horovod.torch.load", "len", "model.pretrain.HeroForPretraining", "HeroForPretraining.from_pretrained.load_partial_pretrained", "model.pretrain.HeroForPretraining.from_pretrained", "horovod.torch.rank", "utils.save.save_training_meta", "utils.logger.TB_LOGGER.create", "tqdm.tqdm", "utils.save.ModelSaver", "utils.logger.add_log_to_file", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp", "utils.misc.NoOp.update", "utils.logger.RunningMeter", "task.startswith", "optim.misc.build_optimizer.step", "utils.logger.LOGGER.debug", "HeroForPretraining.from_pretrained.", "torch.sqrt.mean", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "pretrain.validate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "horovod.torch.rank", "model.model.VideoModelConfig", "enumerate", "len", "os.path.join", "os.path.join", "os.path.join", "train_dataloaders.keys", "len", "enumerate", "HeroForPretraining.from_pretrained.set_train_st_ed", "task.split", "torch.sqrt.item", "apex.amp.scale_loss", "scaled_loss.backward", "optim.get_lr_sched", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.TB_LOGGER.log_scaler_dict", "utils.logger.TB_LOGGER.step", "utils.logger.LOGGER.debug", "utils.logger.LOGGER.debug", "utils.logger.LOGGER.debug", "optim.misc.build_optimizer.step", "optim.misc.build_optimizer.zero_grad", "utils.misc.NoOp.update", "utils.logger.LOGGER.debug", "utils.misc.NoOp.step", "HeroForPretraining.from_pretrained.parameters", "train_dataloaders.keys", "utils.logger.RunningMeter", "utils.distributed.all_gather_list", "ls.item.item", "torch.sqrt", "horovod.torch.sqrt", "utils.logger.LOGGER.debug", "utils.distributed.all_reduce_and_rescale_tensors", "utils.logger.LOGGER.debug", "torch.nn.utils.clip_grad_norm_", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.LOGGER.debug", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_dataloaders.keys", "utils.logger.LOGGER.debug", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "pretrain.validate", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "HeroForPretraining.from_pretrained.set_hard_negative", "torch.sqrt.sum", "float", "apex.amp.master_params", "sum", "int", "utils.logger.LOGGER.info", "utils.logger.TB_LOGGER.add_scalar", "HeroForPretraining.from_pretrained.parameters", "task2loss.values", "utils.distributed.all_gather_list", "time.time"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_random_seed", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.broadcast_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_dropout", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.misc.build_optimizer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.build_target_loaders", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HeroModel.load_partial_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.save_training_meta", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.create", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.add_log_to_file", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.set_train_st_ed", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.VsmAllgather.backward", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.get_lr_sched", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_reduce_and_rescale_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.set_hard_negative", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "opts", ".", "n_gpu", "=", "n_gpu", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "\n", "", "set_random_seed", "(", "opts", ".", "seed", ")", "\n", "\n", "# data loaders", "\n", "train_dataloaders", "=", "{", "}", "\n", "val_dataloaders", "=", "{", "}", "\n", "for", "target", ",", "t_r", "in", "zip", "(", "opts", ".", "targets", ",", "opts", ".", "targets_ratio", ")", ":", "\n", "        ", "train_loaders", ",", "val_loaders", "=", "build_target_loaders", "(", "target", ",", "t_r", ",", "opts", ")", "\n", "train_dataloaders", ".", "update", "(", "train_loaders", ")", "\n", "val_dataloaders", ".", "update", "(", "val_loaders", ")", "\n", "", "meta_loader", "=", "MetaLoader", "(", "train_dataloaders", ",", "\n", "accum_steps", "=", "opts", ".", "gradient_accumulation_steps", ",", "\n", "distributed", "=", "n_gpu", ">", "1", ")", "\n", "meta_loader", "=", "PrefetchLoader", "(", "meta_loader", ")", "\n", "\n", "# Prepare model", "\n", "if", "opts", ".", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opts", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "{", "}", "\n", "", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "if", "img_pos_embed_weight_key", "in", "checkpoint", ":", "\n", "        ", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "", "else", ":", "\n", "        ", "max_frm_seq_len", "=", "MAX_FRM_SEQ_LEN", "\n", "\n", "", "if", "opts", ".", "load_partial_pretrained", ":", "\n", "# from roberta", "\n", "        ", "model", "=", "HeroForPretraining", "(", "\n", "VideoModelConfig", "(", "opts", ".", "model_config", ")", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lw_neg_ctx", "=", "opts", ".", "lw_neg_ctx", ",", "\n", "lw_neg_q", "=", "opts", ".", "lw_neg_q", ",", "lw_st_ed", "=", "0", ",", "\n", "ranking_loss_type", "=", "opts", ".", "ranking_loss_type", ",", "\n", "use_hard_negative", "=", "False", ",", "\n", "hard_pool_size", "=", "opts", ".", "hard_pool_size", ",", "\n", "margin", "=", "opts", ".", "margin", ",", "\n", "use_all_neg", "=", "opts", ".", "use_all_neg", ",", "\n", "drop_svmr_prob", "=", "opts", ".", "drop_svmr_prob", ")", "\n", "model", ".", "load_partial_pretrained", "(", "\n", "checkpoint", ",", "VFEAT_DIM", ",", "max_frm_seq_len", ",", "\n", "skip_layers", "=", "opts", ".", "skip_layer_loading", ")", "\n", "", "else", ":", "\n", "# continue training", "\n", "        ", "model", "=", "HeroForPretraining", ".", "from_pretrained", "(", "\n", "opts", ".", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lw_neg_ctx", "=", "opts", ".", "lw_neg_ctx", ",", "\n", "lw_neg_q", "=", "opts", ".", "lw_neg_q", ",", "lw_st_ed", "=", "0", ",", "\n", "ranking_loss_type", "=", "opts", ".", "ranking_loss_type", ",", "\n", "use_hard_negative", "=", "False", ",", "\n", "hard_pool_size", "=", "opts", ".", "hard_pool_size", ",", "\n", "margin", "=", "opts", ".", "margin", ",", "\n", "use_all_neg", "=", "opts", ".", "use_all_neg", ",", "\n", "drop_svmr_prob", "=", "opts", ".", "drop_svmr_prob", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "# make sure every process has same model parameters in the beginning", "\n", "broadcast_tensors", "(", "[", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ",", "0", ")", "\n", "set_dropout", "(", "model", ",", "opts", ".", "dropout", ")", "\n", "\n", "# Prepare optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "opts", ")", "\n", "task2scaler", "=", "{", "t", ":", "i", "for", "i", ",", "t", "in", "enumerate", "(", "train_dataloaders", ".", "keys", "(", ")", ")", "}", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "num_losses", "=", "len", "(", "task2scaler", ")", ",", "\n", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "restorer", "=", "TrainingRestorer", "(", "opts", ",", "model", ",", "optimizer", ")", "\n", "all_gather_list", "(", "None", ")", "# sync to prevent slower rank to read training meta", "\n", "global_step", "=", "restorer", ".", "global_step", "\n", "TB_LOGGER", ".", "global_step", "=", "global_step", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "save_training_meta", "(", "opts", ")", "\n", "TB_LOGGER", ".", "create", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ")", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "opts", ".", "num_train_steps", ")", "\n", "model_saver", "=", "ModelSaver", "(", "join", "(", "opts", ".", "output_dir", ",", "'ckpt'", ")", ")", "\n", "add_log_to_file", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ",", "'log.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "pbar", "=", "NoOp", "(", ")", "\n", "model_saver", "=", "NoOp", "(", ")", "\n", "restorer", "=", "NoOp", "(", ")", "\n", "\n", "", "if", "global_step", ">", "0", ":", "\n", "        ", "pbar", ".", "update", "(", "global_step", ")", "\n", "", "LOGGER", ".", "info", "(", "f\"***** Running training with {n_gpu} GPUs *****\"", ")", "\n", "LOGGER", ".", "info", "(", "\"  Batch size = %d\"", ",", "opts", ".", "train_batch_size", ")", "\n", "LOGGER", ".", "info", "(", "\"  Accumulate steps = %d\"", ",", "opts", ".", "gradient_accumulation_steps", ")", "\n", "LOGGER", ".", "info", "(", "\"  Num steps = %d\"", ",", "opts", ".", "num_train_steps", ")", "\n", "\n", "task2loss", "=", "{", "task", ":", "RunningMeter", "(", "f'loss/{task}'", ")", "\n", "for", "task", "in", "train_dataloaders", ".", "keys", "(", ")", "}", "\n", "for", "task", "in", "train_dataloaders", ".", "keys", "(", ")", ":", "\n", "        ", "if", "task", ".", "startswith", "(", "'vsm'", ")", ":", "\n", "            ", "for", "obj", "in", "(", "'st_ed'", ",", "'neg_ctx'", ",", "'neg_q'", ")", ":", "\n", "                ", "task2loss", "[", "f\"{task}_{obj}\"", "]", "=", "RunningMeter", "(", "f'loss/{task}_{obj}'", ")", "\n", "", "", "", "model", ".", "train", "(", ")", "\n", "n_examples", "=", "defaultdict", "(", "int", ")", "\n", "start", "=", "time", "(", ")", "\n", "# quick hack for amp delay_unscale bug", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "global_step", "==", "0", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "", "assert", "all", "(", "global_step", "==", "s", "for", "s", "in", "all_gather_list", "(", "global_step", ")", ")", "\n", "for", "step", ",", "(", "task", ",", "batch", ")", "in", "enumerate", "(", "meta_loader", ")", ":", "\n", "        ", "LOGGER", ".", "debug", "(", "f\"Task: {task}\"", ")", "\n", "\n", "# hard negative in VSM", "\n", "if", "len", "(", "opts", ".", "hard_negtiave_start_step", ")", ">", "0", ":", "\n", "            ", "for", "i", ",", "hn_step", "in", "enumerate", "(", "opts", ".", "hard_negtiave_start_step", ")", ":", "\n", "                ", "if", "global_step", ">=", "hn_step", "and", "hn_step", "!=", "-", "1", ":", "\n", "                    ", "model", ".", "set_hard_negative", "(", "\n", "True", ",", "opts", ".", "hard_pool_size", "[", "i", "]", ",", "opts", ".", "hard_neg_weights", "[", "i", "]", ")", "\n", "\n", "# start-end loss", "\n", "", "", "", "if", "opts", ".", "train_span_start_step", "!=", "-", "1", "and", "global_step", ">=", "opts", ".", "train_span_start_step", ":", "\n", "            ", "model", ".", "set_train_st_ed", "(", "opts", ".", "lw_st_ed", ")", "\n", "\n", "", "train_task", "=", "task", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "n_examples", "[", "task", "]", "+=", "opts", ".", "train_batch_size", "\n", "\n", "loss", "=", "model", "(", "batch", ",", "task", "=", "train_task", ",", "compute_loss", "=", "True", ")", "\n", "if", "train_task", "==", "'vsm'", ":", "\n", "            ", "loss_st_ed", ",", "loss_neg_ctx", ",", "loss_neg_q", "=", "loss", "\n", "loss", "=", "loss_st_ed", "+", "loss_neg_ctx", "+", "loss_neg_q", "\n", "for", "n", ",", "ls", ",", "w", "in", "(", "(", "'st_ed'", ",", "loss_st_ed", ",", "opts", ".", "lw_st_ed", ")", ",", "\n", "(", "'neg_ctx'", ",", "loss_neg_ctx", ",", "opts", ".", "lw_neg_ctx", ")", ",", "\n", "(", "'neg_q'", ",", "loss_neg_q", ",", "opts", ".", "lw_neg_q", ")", ")", ":", "\n", "                ", "ls", "=", "ls", ".", "item", "(", ")", "\n", "if", "w", ":", "\n", "                    ", "ls", "/=", "w", "\n", "", "task2loss", "[", "f'{task}_{n}'", "]", "(", "ls", ")", "\n", "", "", "elif", "train_task", "==", "\"mffr\"", ":", "\n", "            ", "loss", "=", "torch", ".", "sqrt", "(", "loss", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "task2loss", "[", "task", "]", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "delay_unscale", "=", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "!=", "0", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ",", "delay_unscale", "=", "delay_unscale", ",", "\n", "loss_id", "=", "task2scaler", "[", "task", "]", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "if", "not", "delay_unscale", ":", "\n", "# gather gradients from every processes", "\n", "# do this before unscaling to make sure every process uses", "\n", "# the same gradient scale", "\n", "                ", "grads", "=", "[", "p", ".", "grad", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "\n", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", "]", "\n", "LOGGER", ".", "debug", "(", "\"before reduce grad\"", ")", "\n", "all_reduce_and_rescale_tensors", "(", "grads", ",", "float", "(", "1", ")", ")", "\n", "LOGGER", ".", "debug", "(", "\"after reduce grad\"", ")", "\n", "\n", "", "", "if", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "global_step", "+=", "1", "\n", "\n", "# learning rate scheduling", "\n", "lr_this_step", "=", "get_lr_sched", "(", "global_step", ",", "opts", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "TB_LOGGER", ".", "add_scalar", "(", "'lr'", ",", "lr_this_step", ",", "global_step", ")", "\n", "\n", "# log loss", "\n", "# NOTE: only consider rank 0 for speed", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "{", "ll", ".", "name", ":", "ll", ".", "val", "\n", "for", "ll", "in", "task2loss", ".", "values", "(", ")", "\n", "if", "ll", ".", "val", "is", "not", "None", "}", ")", "\n", "TB_LOGGER", ".", "step", "(", ")", "\n", "\n", "LOGGER", ".", "debug", "(", "\"before norm grad\"", ")", "\n", "# update model params", "\n", "if", "opts", ".", "grad_norm", "!=", "-", "1", ":", "\n", "                ", "grad_norm", "=", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "\n", "opts", ".", "grad_norm", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "'grad_norm'", ",", "grad_norm", ",", "global_step", ")", "\n", "", "LOGGER", ".", "debug", "(", "\"after norm grad\"", ")", "\n", "LOGGER", ".", "debug", "(", "\"before optim step\"", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "LOGGER", ".", "debug", "(", "\"after optim step\"", ")", "\n", "\n", "if", "global_step", "%", "100", "==", "0", ":", "\n", "                ", "LOGGER", ".", "debug", "(", "\"after gather stats\"", ")", "\n", "# monitor training throughput", "\n", "LOGGER", ".", "info", "(", "'-------------------------------------------'", ")", "\n", "LOGGER", ".", "info", "(", "f'Step {global_step}:'", ")", "\n", "for", "t", "in", "train_dataloaders", ".", "keys", "(", ")", ":", "\n", "                    ", "tot_ex", "=", "sum", "(", "all_gather_list", "(", "n_examples", "[", "t", "]", ")", ")", "\n", "ex_per_sec", "=", "int", "(", "tot_ex", "/", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "LOGGER", ".", "info", "(", "f'{t}: {tot_ex} examples trained at '", "\n", "f'{ex_per_sec} ex/s'", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "f'perf/{t}_ex_per_s'", ",", "ex_per_sec", ",", "\n", "global_step", ")", "\n", "", "LOGGER", ".", "debug", "(", "\"after gather stats\"", ")", "\n", "\n", "", "if", "global_step", "%", "opts", ".", "valid_steps", "==", "0", ":", "\n", "                ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", "\n", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "\n", "# step restorer in the end to prevent missing validation checkpoint", "\n", "", "restorer", ".", "step", "(", ")", "\n", "", "if", "global_step", ">=", "opts", ".", "num_train_steps", ":", "\n", "            ", "break", "\n", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "if", "global_step", "%", "opts", ".", "valid_steps", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", "\n", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate": [[387, 407], ["model.eval", "val_dataloaders.items", "model.train", "utils.logger.LOGGER.info", "task.startswith", "utils.logger.TB_LOGGER.log_scaler_dict", "pretrain.validate_mlm", "task.startswith", "pretrain.validate_mffr", "task.startswith", "validate_vsm.items", "pretrain.validate_mfm_nce", "task.startswith", "validate_vsm.items", "pretrain.validate_fom", "task.startswith", "pretrain.validate_vsm", "ValueError"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_mlm", "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_mffr", "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_mfm_nce", "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_fom", "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_vsm"], ["", "", "def", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "for", "task", ",", "loader", "in", "val_dataloaders", ".", "items", "(", ")", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f\"validate on {task} task\"", ")", "\n", "if", "task", ".", "startswith", "(", "'mlm'", ")", ":", "\n", "            ", "val_log", "=", "validate_mlm", "(", "model", ",", "loader", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'mffr'", ")", ":", "\n", "            ", "val_log", "=", "validate_mffr", "(", "model", ",", "loader", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'mfm-nce'", ")", ":", "\n", "            ", "val_log", "=", "validate_mfm_nce", "(", "model", ",", "loader", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'fom'", ")", ":", "\n", "            ", "val_log", "=", "validate_fom", "(", "model", ",", "loader", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'vsm'", ")", ":", "\n", "            ", "val_log", "=", "validate_vsm", "(", "model", ",", "loader", ",", "opts", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Undefined task {task}'", ")", "\n", "", "val_log", "=", "{", "f'{task}_{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "\n", "{", "f'valid_{task}/{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_vsm": [[409, 460], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "time.time", "enumerate", "sum", "sum", "sum", "sum", "sum", "utils.logger.LOGGER.info", "len", "model", "loss_st_ed.item", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "loss_neg_ctx.sum().item", "loss_neg_q.sum().item", "len", "int", "loss_neg_ctx.sum", "loss_neg_q.sum"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_vsm", "(", "model", ",", "val_loader", ",", "opts", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\"start running VSM validation...\"", ")", "\n", "val_loss", "=", "0", "\n", "val_loss_st_ed", "=", "0", "\n", "val_loss_neg_ctx", "=", "0", "\n", "val_loss_neg_q", "=", "0", "\n", "n_ex", "=", "0", "\n", "n_ex_pos", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "n_ex", "+=", "len", "(", "batch", "[", "'q_vidx'", "]", ")", "\n", "\n", "loss_st_ed", ",", "loss_neg_ctx", ",", "loss_neg_q", "=", "model", "(", "batch", ",", "'vsm'", ",", "compute_loss", "=", "True", ")", "\n", "\n", "val_loss_st_ed", "+=", "loss_st_ed", ".", "item", "(", ")", "\n", "if", "opts", ".", "lw_neg_ctx", "!=", "0", "or", "opts", ".", "lw_neg_q", "!=", "0", ":", "\n", "            ", "n_pos", "=", "len", "(", "loss_neg_ctx", ")", "if", "loss_neg_ctx", ".", "ndim", ">", "0", "else", "1", "\n", "val_loss_neg_ctx", "+=", "loss_neg_ctx", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "val_loss_neg_q", "+=", "loss_neg_q", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_ex_pos", "+=", "n_pos", "\n", "\n", "", "", "val_loss_st_ed", "=", "sum", "(", "all_gather_list", "(", "val_loss_st_ed", ")", ")", "\n", "val_loss_neg_ctx", "=", "sum", "(", "all_gather_list", "(", "val_loss_neg_ctx", ")", ")", "\n", "val_loss_neg_q", "=", "sum", "(", "all_gather_list", "(", "val_loss_neg_q", ")", ")", "\n", "n_ex", "=", "sum", "(", "all_gather_list", "(", "n_ex", ")", ")", "\n", "n_ex_pos", "=", "sum", "(", "all_gather_list", "(", "n_ex_pos", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "if", "opts", ".", "lw_st_ed", ":", "\n", "        ", "val_loss_st_ed", "/=", "n_ex", "\n", "val_loss_st_ed", "/=", "opts", ".", "lw_st_ed", "\n", "", "if", "n_ex_pos", ">", "0", "and", "opts", ".", "lw_neg_q", ">", "0", "and", "opts", ".", "lw_neg_ctx", ">", "0", ":", "\n", "        ", "val_loss_neg_ctx", "/=", "n_ex_pos", "\n", "val_loss_neg_q", "/=", "n_ex_pos", "\n", "val_loss_neg_ctx", "/=", "opts", ".", "lw_neg_ctx", "\n", "val_loss_neg_q", "/=", "opts", ".", "lw_neg_q", "\n", "\n", "", "val_loss", "=", "opts", ".", "lw_st_ed", "*", "val_loss_st_ed", "+", "opts", ".", "lw_neg_ctx", "*", "val_loss_neg_ctx", "+", "opts", ".", "lw_neg_q", "*", "val_loss_neg_q", "\n", "val_log", "=", "{", "'valid/loss_overall'", ":", "val_loss", ",", "\n", "'valid/loss_st_ed'", ":", "val_loss_st_ed", ",", "\n", "'valid/loss_neg_ctx'", ":", "val_loss_neg_ctx", ",", "\n", "'valid/loss_neg_q'", ":", "val_loss_neg_q", ",", "\n", "'valid/ex_per_s'", ":", "n_ex", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds, \"", "\n", "f\"loss: {val_loss:.2f}\"", ")", "\n", "return", "val_log", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_mlm": [[462, 488], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "time.time", "enumerate", "sum", "sum", "sum", "utils.logger.LOGGER.info", "model", "torch.nn.functional.cross_entropy", "F.cross_entropy.item", "labels.numel", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "int", "model.max"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_mlm", "(", "model", ",", "val_loader", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\"start running MLM validation...\"", ")", "\n", "val_loss", "=", "0", "\n", "n_correct", "=", "0", "\n", "n_word", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "scores", "=", "model", "(", "batch", ",", "task", "=", "'mlm'", ",", "compute_loss", "=", "False", ")", "\n", "labels", "=", "batch", "[", "'txt_labels'", "]", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "scores", ",", "labels", ",", "reduction", "=", "'sum'", ")", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "n_correct", "+=", "(", "scores", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_word", "+=", "labels", ".", "numel", "(", ")", "\n", "", "val_loss", "=", "sum", "(", "all_gather_list", "(", "val_loss", ")", ")", "\n", "n_correct", "=", "sum", "(", "all_gather_list", "(", "n_correct", ")", ")", "\n", "n_word", "=", "sum", "(", "all_gather_list", "(", "n_word", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "val_loss", "/=", "n_word", "\n", "acc", "=", "n_correct", "/", "n_word", "\n", "val_log", "=", "{", "'loss'", ":", "val_loss", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'tok_per_s'", ":", "n_word", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds, \"", "\n", "f\"acc: {acc*100:.2f}\"", ")", "\n", "return", "val_log", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_mffr": [[490, 516], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "time.time", "enumerate", "sum", "sum", "sum", "utils.logger.LOGGER.info", "model", "torch.nn.functional.mse_loss", "torch.sqrt", "horovod.torch.sqrt", "torch.sqrt.sum().item", "torch.nn.functional.cosine_similarity().sum().item", "batch[].sum().item", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "torch.sqrt.sum", "torch.sqrt.sum", "torch.nn.functional.cosine_similarity().sum", "batch[].sum", "int", "torch.nn.functional.cosine_similarity"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_mffr", "(", "model", ",", "val_loader", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\"start running MFFR validation...\"", ")", "\n", "val_loss", "=", "0", "\n", "cosine", "=", "0", "\n", "n_feat", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "targets", "=", "batch", "[", "'feat_targets'", "]", "\n", "pred_feat", "=", "model", "(", "batch", ",", "task", "=", "'mffr'", ",", "compute_loss", "=", "False", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "pred_feat", ",", "targets", ",", "reduction", "=", "'none'", ")", "\n", "loss", "=", "torch", ".", "sqrt", "(", "loss", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "val_loss", "+=", "loss", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "cosine", "+=", "F", ".", "cosine_similarity", "(", "pred_feat", ",", "targets", ",", "dim", "=", "-", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_feat", "+=", "batch", "[", "'c_v_masks'", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "val_loss", "=", "sum", "(", "all_gather_list", "(", "val_loss", ")", ")", "\n", "cosine", "=", "sum", "(", "all_gather_list", "(", "cosine", ")", ")", "\n", "n_feat", "=", "sum", "(", "all_gather_list", "(", "n_feat", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "val_loss", "/=", "n_feat", "\n", "val_log", "=", "{", "'loss'", ":", "val_loss", ",", "\n", "'cosine'", ":", "cosine", "/", "n_feat", ",", "\n", "'feat_per_s'", ":", "n_feat", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds, \"", "\n", "f\"loss: {val_loss:.2f}\"", ")", "\n", "return", "val_log", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_mfm_nce": [[518, 562], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "time.time", "enumerate", "sum", "sum", "sum", "sum", "sum", "sum", "utils.logger.LOGGER.info", "model", "model.v_encoder.mfm_nce", "torch.arange", "horovod.torch.arange", "torch.nn.functional.cross_entropy().item", "torch.nn.functional.mse_loss().sum().sqrt().sum().item", "torch.nn.functional.cosine_similarity().sum().item", "pos_feats.size", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "model.v_encoder.mfm_nce.size", "neg_feats.size", "torch.nn.functional.cross_entropy", "torch.nn.functional.mse_loss().sum().sqrt().sum", "torch.nn.functional.cosine_similarity().sum", "int", "torch.nn.functional.mse_loss().sum().sqrt", "torch.nn.functional.cosine_similarity", "torch.nn.functional.mse_loss().sum", "model.v_encoder.mfm_nce.max", "torch.nn.functional.mse_loss"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.mfm_nce", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_mfm_nce", "(", "model", ",", "val_loader", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\"start running MFM-NCE validation...\"", ")", "\n", "val_loss", "=", "0", "\n", "val_l2", "=", "0", "\n", "n_correct", "=", "0", "\n", "cosine", "=", "0", "\n", "n_feat", "=", "0", "\n", "n_neg", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "feats", ",", "neg_feats", "=", "model", "(", "batch", ",", "task", "=", "'mfm-nce'", ",", "compute_loss", "=", "False", ")", "\n", "pos_feats", "=", "batch", "[", "'feat_targets'", "]", "\n", "logits", "=", "model", ".", "v_encoder", ".", "mfm_nce", "(", "feats", ",", "pos_feats", ",", "neg_feats", ",", "\n", "compute_loss", "=", "False", ")", "\n", "targets", "=", "torch", ".", "arange", "(", "0", ",", "logits", ".", "size", "(", "0", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logits", ".", "device", ")", "\n", "val_loss", "+=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "val_l2", "+=", "F", ".", "mse_loss", "(", "feats", ",", "pos_feats", ",", "reduction", "=", "'none'", "\n", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_correct", "+=", "(", "logits", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "==", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "cosine", "+=", "F", ".", "cosine_similarity", "(", "feats", ",", "pos_feats", ",", "dim", "=", "-", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "nf", "=", "pos_feats", ".", "size", "(", "0", ")", "\n", "n_feat", "+=", "nf", "\n", "n_neg", "+=", "neg_feats", ".", "size", "(", "0", ")", "*", "nf", "\n", "\n", "", "val_loss", "=", "sum", "(", "all_gather_list", "(", "val_loss", ")", ")", "\n", "val_l2", "=", "sum", "(", "all_gather_list", "(", "val_l2", ")", ")", "\n", "n_correct", "=", "sum", "(", "all_gather_list", "(", "n_correct", ")", ")", "\n", "cosine", "=", "sum", "(", "all_gather_list", "(", "cosine", ")", ")", "\n", "n_feat", "=", "sum", "(", "all_gather_list", "(", "n_feat", ")", ")", "\n", "n_neg", "=", "sum", "(", "all_gather_list", "(", "n_neg", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "val_loss", "/=", "n_feat", "\n", "val_acc", "=", "n_correct", "/", "n_feat", "\n", "val_log", "=", "{", "'loss'", ":", "val_loss", ",", "\n", "'acc'", ":", "val_acc", ",", "\n", "'l2'", ":", "val_l2", "/", "n_feat", ",", "\n", "'cosine'", ":", "cosine", "/", "n_feat", ",", "\n", "'feat_per_s'", ":", "n_feat", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds, \"", "\n", "f\"loss: {val_loss:.2f}, acc: {val_acc*100:.2f} \"", "\n", "f\"(average {n_neg/n_feat:.0f} negatives)\"", ")", "\n", "return", "val_log", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.pretrain.validate_fom": [[564, 609], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "time.time", "enumerate", "sum", "sum", "sum", "sum", "utils.logger.LOGGER.info", "targets.size", "model", "targets.view", "torch.nn.functional.cross_entropy", "F.cross_entropy.item", "len", "len", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "time.time", "int", "scores_valid.max"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_fom", "(", "model", ",", "val_loader", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\"start running FOM validation...\"", ")", "\n", "val_loss", "=", "0", "\n", "n_ex", "=", "0", "\n", "n_valid_ex", "=", "0", "\n", "tot_score", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "targets", "=", "batch", "[", "'targets'", "]", "\n", "batch_size", ",", "seq_len", "=", "targets", ".", "size", "(", ")", "\n", "vids", "=", "batch", "[", "'vids'", "]", "\n", "del", "batch", "[", "'targets'", "]", "\n", "del", "batch", "[", "'vids'", "]", "\n", "\n", "scores", "=", "model", "(", "batch", ",", "task", "=", "'fom'", ",", "compute_loss", "=", "False", ")", "\n", "\n", "targets_valid", "=", "targets", ".", "view", "(", "scores", ".", "shape", "[", "0", "]", ",", ")", "\n", "loc", "=", "(", "targets_valid", "!=", "-", "1", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "scores_valid", "=", "scores", "[", "loc", ",", ":", "]", "\n", "targets_valid", "=", "targets_valid", "[", "loc", "]", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "scores_valid", ",", "targets_valid", ",", "reduction", "=", "'sum'", ")", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tot_score", "+=", "(", "\n", "scores_valid", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "[", "1", "]", "==", "targets_valid", "\n", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "n_valid_ex", "+=", "len", "(", "targets_valid", ")", "\n", "n_ex", "+=", "len", "(", "vids", ")", "\n", "\n", "", "val_loss", "=", "sum", "(", "all_gather_list", "(", "val_loss", ")", ")", "\n", "tot_score", "=", "sum", "(", "all_gather_list", "(", "tot_score", ")", ")", "\n", "n_ex", "=", "sum", "(", "all_gather_list", "(", "n_ex", ")", ")", "\n", "n_valid_ex", "=", "sum", "(", "all_gather_list", "(", "n_valid_ex", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "val_loss", "/=", "n_valid_ex", "\n", "val_acc", "=", "tot_score", "/", "n_valid_ex", "\n", "val_log", "=", "{", "\n", "'valid/loss'", ":", "val_loss", ",", "\n", "'valid/acc'", ":", "val_acc", ",", "\n", "'valid/ex_per_s'", ":", "n_ex", "/", "tot_time", "}", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds, \"", "\n", "f\"score: {val_acc*100:.2f}\"", ")", "\n", "return", "val_log", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.inf_tvc.main": [[30, 81], ["horovod.torch.init", "utils.misc.Struct", "load_data.load_video_sub_dataset", "data.tvc.TvcEvalDataset", "train_tvc.build_dataloader", "torch.load", "horovod.torch.load", "model.tvc.HeroForTvc.from_pretrained", "amp.initialize.cuda", "apex.amp.initialize", "amp.initialize.eval", "model.tvc.TvcGenerator", "inf_tvc.decode", "utils.basic_utils.save_jsonl", "horovod.torch.rank", "transformers.RobertaTokenizer.from_pretrained", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "transformers.RobertaTokenizer.from_pretrained", "json.load", "len", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "eval.tvc.TVCEval", "eval.tvc.TVCEval.", "print", "open", "horovod.torch.rank", "json.loads", "next", "iter", "open"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.build_dataloader", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_jsonl", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "toker", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "all_gather_list", "(", "None", ")", "\n", "", "else", ":", "\n", "        ", "all_gather_list", "(", "None", ")", "\n", "toker", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "", "model_opts", "=", "Struct", "(", "json", ".", "load", "(", "open", "(", "f\"{opts.model_dir}/log/hps.json\"", ")", ")", ")", "\n", "model_config", "=", "f\"{opts.model_dir}/log/model_config.json\"", "\n", "\n", "video_db", "=", "load_video_sub_dataset", "(", "model_opts", ".", "vfeat_db", ",", "\n", "model_opts", ".", "sub_txt_db", ",", "\n", "model_opts", ".", "vfeat_interval", ",", "\n", "model_opts", ")", "\n", "dset", "=", "TvcEvalDataset", "(", "video_db", ",", "opts", ".", "target_clip", ")", "\n", "loader", "=", "build_dataloader", "(", "dset", ",", "opts", ".", "batch_size", ",", "\n", "TvcEvalDataset", ".", "collate", ",", "False", ",", "opts", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "f\"{opts.model_dir}/ckpt/\"", "\n", "f\"model_step_{opts.ckpt_step}.pt\"", ")", "\n", "\n", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "if", "img_pos_embed_weight_key", "in", "checkpoint", ":", "\n", "        ", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "", "else", ":", "\n", "        ", "max_frm_seq_len", "=", "MAX_FRM_SEQ_LEN", "\n", "\n", "", "model", "=", "HeroForTvc", ".", "from_pretrained", "(", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lsr", "=", "model_opts", ".", "lsr", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", "=", "amp", ".", "initialize", "(", "model", ",", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "\n", "bos", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<s>'", "]", ")", "[", "0", "]", "\n", "eos", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'</s>'", "]", ")", "[", "0", "]", "\n", "model", ".", "eval", "(", ")", "\n", "generator", "=", "TvcGenerator", "(", "model", ",", "opts", ".", "max_gen_step", ",", "bos", ",", "eos", ",", "opts", ".", "fp16", ")", "\n", "results", "=", "decode", "(", "loader", ",", "generator", ",", "toker", ")", "\n", "save_jsonl", "(", "results", ",", "opts", ".", "output", ")", "\n", "\n", "# evaluate score if possible", "\n", "if", "(", "hvd", ".", "rank", "(", ")", "==", "0", "\n", "and", "'descs'", "in", "json", ".", "loads", "(", "next", "(", "iter", "(", "open", "(", "opts", ".", "target_clip", ")", ")", ")", ")", ")", ":", "\n", "        ", "evaluator", "=", "TVCEval", "(", "opts", ".", "target_clip", ")", "\n", "score", "=", "evaluator", "(", "results", ")", "\n", "print", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.inf_tvc.decode": [[83, 99], ["time.time", "tqdm.tqdm", "print", "generator.greedy_decode", "zip", "tokenizer.convert_tokens_to_string", "results.append", "utils.distributed.all_gather_list", "tokenizer.convert_ids_to_tokens", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.TvcGenerator.greedy_decode", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "", "def", "decode", "(", "loader", ",", "generator", ",", "tokenizer", ")", ":", "\n", "    ", "st", "=", "time", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "batch", "in", "tqdm", "(", "loader", ",", "desc", "=", "'decoding...'", ")", ":", "\n", "        ", "vids", "=", "batch", "[", "'vid_names'", "]", "\n", "cids", "=", "batch", "[", "'clip_ids'", "]", "\n", "all_ts", "=", "batch", "[", "'all_ts'", "]", "\n", "outputs", "=", "generator", ".", "greedy_decode", "(", "batch", ")", "\n", "for", "vid", ",", "cid", ",", "ts", ",", "out_ids", "in", "zip", "(", "vids", ",", "cids", ",", "all_ts", ",", "outputs", ")", ":", "\n", "            ", "output", "=", "tokenizer", ".", "convert_tokens_to_string", "(", "\n", "tokenizer", ".", "convert_ids_to_tokens", "(", "out_ids", ")", ")", "\n", "results", ".", "append", "(", "{", "'vid_name'", ":", "vid", ",", "'clip_id'", ":", "cid", ",", "'ts'", ":", "ts", ",", "\n", "'descs'", ":", "[", "{", "'desc'", ":", "output", "}", "]", "}", ")", "\n", "", "", "results", "=", "[", "r", "for", "rs", "in", "all_gather_list", "(", "results", ")", "for", "r", "in", "rs", "]", "\n", "print", "(", "f'decoding finished in {int(time() - st)} seconds'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vr.main": [[40, 135], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "horovod.torch.rank", "utils.logger.LOGGER.info", "utils.misc.Struct", "load_data.get_video_ids", "data.MsrvttQueryTokLmdb", "inf_dataset", "os.path.exists", "torch.load", "horovod.torch.load", "len", "model.vr.HeroForVr.from_pretrained", "amp.initialize.to", "torch.utils.data.DataLoader", "data.PrefetchLoader", "eval_vr.validate_full_vr", "utils.distributed.all_gather_list", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "utils.basic_utils.load_json", "load_data.load_video_sub_dataset", "utils.basic_utils.load_json", "load_data.load_video_only_dataset", "apex.amp.initialize", "os.makedirs", "horovod.torch.rank", "range", "utils.logger.LOGGER.info", "utils.basic_utils.save_json", "utils.logger.LOGGER.info", "horovod.torch.rank", "os.path.join", "os.path.exists", "horovod.torch.size", "all_results_list[].items", "all_results[].extend"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vr.validate_full_vr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_only_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "rank", "=", "hvd", ".", "rank", "(", ")", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "", "hps_file", "=", "f'{opts.output_dir}/log/hps.json'", "\n", "model_opts", "=", "Struct", "(", "load_json", "(", "hps_file", ")", ")", "\n", "model_config", "=", "f'{opts.output_dir}/log/model_config.json'", "\n", "\n", "# load DBs and image dirs", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "query_txt_db", ")", "\n", "if", "opts", ".", "task", "!=", "\"msrvtt_video_only\"", ":", "\n", "        ", "video_db", "=", "load_video_sub_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "model_opts", ".", "vfeat_interval", ",", "\n", "model_opts", ")", "\n", "", "else", ":", "\n", "        ", "txt_meta", "=", "load_json", "(", "\n", "os", ".", "path", ".", "join", "(", "opts", ".", "query_txt_db", ",", "\"meta.json\"", ")", ")", "\n", "video_db", "=", "load_video_only_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "txt_meta", ",", "\n", "model_opts", ".", "vfeat_interval", ",", "\n", "model_opts", ")", "\n", "", "assert", "opts", ".", "split", "in", "opts", ".", "query_txt_db", "\n", "q_txt_db", "=", "MsrvttQueryTokLmdb", "(", "opts", ".", "query_txt_db", ",", "-", "1", ")", "\n", "if", "opts", ".", "task", "!=", "\"msrvtt_video_only\"", ":", "\n", "        ", "inf_dataset", "=", "VrFullEvalDataset", "\n", "", "else", ":", "\n", "        ", "inf_dataset", "=", "VrVideoOnlyFullEvalDataset", "\n", "", "eval_dataset", "=", "inf_dataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ",", "\n", "distributed", "=", "model_opts", ".", "distributed_eval", ")", "\n", "\n", "# Prepare model", "\n", "if", "exists", "(", "opts", ".", "checkpoint", ")", ":", "\n", "        ", "ckpt_file", "=", "opts", ".", "checkpoint", "\n", "", "else", ":", "\n", "        ", "ckpt_file", "=", "f'{opts.output_dir}/ckpt/model_step_{opts.checkpoint}.pt'", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_file", ")", "\n", "img_pos_embed_weight_key", "=", "(", "\n", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\n", "\".position_embeddings.weight\"", ")", "\n", "assert", "img_pos_embed_weight_key", "in", "checkpoint", "\n", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "\n", "model", "=", "HeroForVr", ".", "from_pretrained", "(", "\n", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lw_neg_ctx", "=", "model_opts", ".", "lw_neg_ctx", ",", "\n", "lw_neg_q", "=", "model_opts", ".", "lw_neg_q", ",", "\n", "ranking_loss_type", "=", "model_opts", ".", "ranking_loss_type", ",", "\n", "use_hard_negative", "=", "False", ",", "\n", "hard_pool_size", "=", "model_opts", ".", "hard_pool_size", ",", "\n", "margin", "=", "model_opts", ".", "margin", ",", "\n", "use_all_neg", "=", "model_opts", ".", "use_all_neg", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "if", "opts", ".", "fp16", ":", "\n", "        ", "model", "=", "amp", ".", "initialize", "(", "model", ",", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "\n", "", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "opts", ".", "batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "vr_full_eval_collate", ")", "\n", "eval_dataloader", "=", "PrefetchLoader", "(", "eval_dataloader", ")", "\n", "\n", "_", ",", "results", "=", "validate_full_vr", "(", "\n", "model", ",", "eval_dataloader", ",", "opts", ".", "split", ",", "opts", ",", "model_opts", ")", "\n", "result_dir", "=", "f'{opts.output_dir}/results_{opts.split}'", "\n", "\n", "if", "not", "exists", "(", "result_dir", ")", "and", "rank", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "", "all_results_list", "=", "all_gather_list", "(", "results", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "all_results", "=", "{", "\"video2idx\"", ":", "all_results_list", "[", "0", "]", "[", "\"video2idx\"", "]", "}", "\n", "for", "rank_id", "in", "range", "(", "hvd", ".", "size", "(", ")", ")", ":", "\n", "            ", "for", "key", ",", "val", "in", "all_results_list", "[", "rank_id", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "\"video2idx\"", ":", "\n", "                    ", "continue", "\n", "", "if", "key", "not", "in", "all_results", ":", "\n", "                    ", "all_results", "[", "key", "]", "=", "[", "]", "\n", "", "all_results", "[", "key", "]", ".", "extend", "(", "all_results_list", "[", "rank_id", "]", "[", "key", "]", ")", "\n", "", "", "LOGGER", ".", "info", "(", "'All results joined......'", ")", "\n", "\n", "save_json", "(", "\n", "all_results", ",", "\n", "f'{result_dir}/results_{opts.checkpoint}_all.json'", ")", "\n", "LOGGER", ".", "info", "(", "'All results written......'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vr.validate_full_vr": [[137, 306], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "model.eval", "time.time", "sorted", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "dict", "utils.tvr_eval_utils.get_submission_top_n", "model.train", "list", "enumerate", "data.loader.move_to_cuda.append", "video_idx.append", "total_qids.extend", "total_vids.extend", "batch.items", "model.get_pred_from_raw_query", "len", "_q2video_scores.float.float", "torch.topk", "horovod.torch.topk", "enumerate", "zip", "dict", "vr_res.append", "utils.tvr_standalone_eval.eval_retrieval", "sum", "utils.tvr_standalone_eval.eval_retrieval.items", "utils.logger.LOGGER.info", "val_log.update", "utils.logger.LOGGER.info", "video2idx_global.keys", "enumerate", "video2idx_local.items", "len", "data.loader.move_to_cuda", "data.loader.move_to_cuda.items", "model.v_encoder", "model.v_encoder.size", "torch.LongTensor", "horovod.torch.LongTensor", "max", "partial_query_data.append", "_sorted_q2c_indices.cpu().numpy", "_sorted_q2c_scores.cpu().numpy", "numpy.concatenate", "numpy.concatenate", "zip", "len", "cur_vr_redictions.append", "dict.items", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "task_metric.keys", "time.time", "len", "data.video_collate", "model.v_encoder.size", "torch.zeros", "horovod.torch.zeros", "torch.zeros", "horovod.torch.zeros", "isinstance", "batch[].to", "len", "enumerate", "pprint.pformat", "len", "isinstance", "video_batch[].to", "_sorted_q2c_indices.cpu", "_sorted_q2c_scores.cpu", "_sorted_q2c_indices.cpu().numpy", "_sorted_q2c_scores.cpu().numpy", "float", "int", "len", "len", "next", "_sorted_q2c_indices.cpu", "_sorted_q2c_scores.cpu", "next", "model.parameters", "model.parameters"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.get_submission_top_n", "home.repos.pwc.inspect_result.linjieli222_HERO.model.vcmr.HeroForVcmr.get_pred_from_raw_query", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.eval_retrieval", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.move_to_cuda", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_full_vr", "(", "model", ",", "val_loader", ",", "split", ",", "opts", ",", "model_opts", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\"start running  full VR evaluation\"", "\n", "f\"on {opts.task} {split} split...\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "n_ex", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "val_log", "=", "{", "}", "\n", "has_gt_target", "=", "True", "# MSRVTT test set has annotations", "\n", "try", ":", "\n", "        ", "video2idx_global", "=", "val_loader", ".", "dataset", ".", "vid2idx", "[", "split", "]", "\n", "", "except", "Exception", ":", "\n", "        ", "video2idx_global", "=", "val_loader", ".", "dataset", ".", "vid2idx", "\n", "", "video_ids", "=", "sorted", "(", "list", "(", "video2idx_global", ".", "keys", "(", ")", ")", ")", "\n", "video2idx_local", "=", "{", "e", ":", "i", "for", "i", ",", "e", "in", "enumerate", "(", "video_ids", ")", "}", "\n", "query_data", "=", "val_loader", ".", "dataset", ".", "query_data", "\n", "\n", "partial_query_data", "=", "[", "]", "\n", "total_frame_embeddings", "=", "None", "\n", "video_batch", ",", "video_idx", "=", "[", "]", ",", "[", "]", "\n", "max_clip_len", "=", "0", "\n", "for", "video_i", ",", "(", "vid", ",", "vidx", ")", "in", "tqdm", "(", "enumerate", "(", "video2idx_local", ".", "items", "(", ")", ")", ",", "\n", "desc", "=", "\"Computing Video Embeddings\"", ",", "\n", "total", "=", "len", "(", "video2idx_local", ")", ")", ":", "\n", "        ", "video_item", "=", "val_loader", ".", "dataset", ".", "video_db", "[", "vid", "]", "\n", "video_batch", ".", "append", "(", "video_item", ")", "\n", "video_idx", ".", "append", "(", "vidx", ")", "\n", "if", "len", "(", "video_batch", ")", "==", "opts", ".", "vr_eval_video_batch_size", "or", "video_i", "==", "len", "(", "video2idx_local", ")", "-", "1", ":", "\n", "            ", "video_batch", "=", "move_to_cuda", "(", "video_collate", "(", "video_batch", ")", ")", "\n", "# Safeguard fp16", "\n", "for", "k", ",", "item", "in", "video_batch", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", "and", "item", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "                    ", "video_batch", "[", "k", "]", "=", "video_batch", "[", "k", "]", ".", "to", "(", "\n", "dtype", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "\n", "", "", "curr_frame_embeddings", "=", "model", ".", "v_encoder", "(", "video_batch", ",", "'repr'", ")", "\n", "curr_c_attn_masks", "=", "video_batch", "[", "'c_attn_masks'", "]", "\n", "curr_clip_len", "=", "curr_frame_embeddings", ".", "size", "(", "-", "2", ")", "\n", "assert", "curr_clip_len", "<=", "model_opts", ".", "max_clip_len", "\n", "\n", "if", "total_frame_embeddings", "is", "None", ":", "\n", "                ", "feat_dim", "=", "curr_frame_embeddings", ".", "size", "(", "-", "1", ")", "\n", "total_frame_embeddings", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "video2idx_local", ")", ",", "model_opts", ".", "max_clip_len", ",", "feat_dim", ")", ",", "\n", "dtype", "=", "curr_frame_embeddings", ".", "dtype", ",", "\n", "device", "=", "curr_frame_embeddings", ".", "device", ")", "\n", "total_c_attn_masks", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "video2idx_local", ")", ",", "model_opts", ".", "max_clip_len", ")", ",", "\n", "dtype", "=", "curr_c_attn_masks", ".", "dtype", ",", "\n", "device", "=", "curr_frame_embeddings", ".", "device", ")", "\n", "", "indices", "=", "torch", ".", "LongTensor", "(", "video_idx", ")", "\n", "total_frame_embeddings", "[", "indices", ",", ":", "curr_clip_len", "]", "=", "curr_frame_embeddings", "\n", "total_c_attn_masks", "[", "indices", ",", ":", "curr_clip_len", "]", "=", "curr_c_attn_masks", "\n", "max_clip_len", "=", "max", "(", "max_clip_len", ",", "curr_clip_len", ")", "\n", "video_batch", ",", "video_idx", "=", "[", "]", ",", "[", "]", "\n", "", "", "total_frame_embeddings", "=", "total_frame_embeddings", "[", ":", ",", ":", "max_clip_len", ",", ":", "]", "\n", "total_c_attn_masks", "=", "total_c_attn_masks", "[", ":", ",", ":", "max_clip_len", "]", "\n", "\n", "sorted_q2c_indices", ",", "sorted_q2c_scores", "=", "None", ",", "None", "\n", "total_qids", ",", "total_vids", "=", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "tqdm", "(", "val_loader", ",", "desc", "=", "\"Computing q2vScores\"", ")", ":", "\n", "        ", "qids", "=", "batch", "[", "'qids'", "]", "\n", "vids", "=", "batch", "[", "'vids'", "]", "\n", "\n", "del", "batch", "[", "'targets'", "]", "\n", "del", "batch", "[", "'qids'", "]", "\n", "del", "batch", "[", "'vids'", "]", "\n", "\n", "total_qids", ".", "extend", "(", "qids", ")", "\n", "total_vids", ".", "extend", "(", "vids", ")", "\n", "for", "qid", "in", "qids", ":", "\n", "# fix msrvtt query data to have tvr format", "\n", "            ", "gt", "=", "query_data", "[", "qid", "]", "\n", "gt", "[", "\"desc_id\"", "]", "=", "qid", "\n", "gt", "[", "\"vid_name\"", "]", "=", "gt", "[", "\"clip_name\"", "]", "\n", "partial_query_data", ".", "append", "(", "gt", ")", "\n", "# Safeguard fp16", "\n", "", "for", "k", ",", "item", "in", "batch", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", "and", "item", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "                ", "batch", "[", "k", "]", "=", "batch", "[", "k", "]", ".", "to", "(", "\n", "dtype", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "\n", "\n", "# FIXME", "\n", "", "", "_q2video_scores", "=", "model", ".", "get_pred_from_raw_query", "(", "\n", "total_frame_embeddings", ",", "total_c_attn_masks", ",", "**", "batch", ",", "\n", "cross", "=", "True", ",", "val_gather_gpus", "=", "False", ")", "\n", "n_ex", "+=", "len", "(", "qids", ")", "\n", "\n", "_q2video_scores", "=", "_q2video_scores", ".", "float", "(", ")", "\n", "\n", "q2video_scores", "=", "_q2video_scores", "\n", "_sorted_q2c_scores", ",", "_sorted_q2c_indices", "=", "torch", ".", "topk", "(", "q2video_scores", ",", "model_opts", ".", "max_vr_video", ",", "\n", "dim", "=", "1", ",", "largest", "=", "True", ")", "\n", "if", "sorted_q2c_indices", "is", "None", ":", "\n", "            ", "sorted_q2c_indices", "=", "_sorted_q2c_indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_q2c_scores", "=", "_sorted_q2c_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "sorted_q2c_indices", "=", "np", ".", "concatenate", "(", "\n", "(", "sorted_q2c_indices", ",", "_sorted_q2c_indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "sorted_q2c_scores", "=", "np", ".", "concatenate", "(", "\n", "(", "sorted_q2c_scores", ",", "_sorted_q2c_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "vr_res", "=", "[", "]", "\n", "for", "vr_i", ",", "(", "_sorted_q2c_scores_row", ",", "_sorted_q2c_indices_row", ")", "in", "tqdm", "(", "\n", "enumerate", "(", "\n", "zip", "(", "sorted_q2c_scores", "[", ":", ",", ":", "100", "]", ",", "\n", "sorted_q2c_indices", "[", ":", ",", ":", "100", "]", ")", ")", ",", "\n", "desc", "=", "\"[VR] Loop over queries to generate predictions\"", ",", "\n", "total", "=", "len", "(", "total_qids", ")", ")", ":", "\n", "        ", "cur_vr_redictions", "=", "[", "]", "\n", "for", "v_score", ",", "v_meta_idx", "in", "zip", "(", "_sorted_q2c_scores_row", ",", "\n", "_sorted_q2c_indices_row", ")", ":", "\n", "            ", "video_idx", "=", "video2idx_global", "[", "video_ids", "[", "v_meta_idx", "]", "]", "\n", "cur_vr_redictions", ".", "append", "(", "[", "video_idx", ",", "0", ",", "0", ",", "float", "(", "v_score", ")", "]", ")", "\n", "", "cur_query_pred", "=", "dict", "(", "desc_id", "=", "total_qids", "[", "vr_i", "]", ",", "\n", "desc", "=", "\"\"", ",", "\n", "predictions", "=", "cur_vr_redictions", ")", "\n", "vr_res", ".", "append", "(", "cur_query_pred", ")", "\n", "", "eval_res", "=", "dict", "(", "VR", "=", "vr_res", ")", "\n", "eval_res", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "eval_res", ".", "items", "(", ")", "if", "len", "(", "v", ")", "!=", "0", "}", "\n", "eval_res", "[", "\"video2idx\"", "]", "=", "video2idx_global", "\n", "\n", "eval_submission", "=", "get_submission_top_n", "(", "\n", "eval_res", ",", "top_n", "=", "model_opts", ".", "max_vr_video", ")", "\n", "\n", "if", "has_gt_target", ":", "\n", "        ", "metrics", "=", "eval_retrieval", "(", "eval_submission", ",", "partial_query_data", ",", "\n", "iou_thds", "=", "VCMR_IOU_THDS", ",", "\n", "match_number", "=", "True", ",", "\n", "verbose", "=", "False", ",", "\n", "use_desc_type", "=", "False", ")", "\n", "\n", "if", "model_opts", ".", "distributed_eval", ":", "\n", "            ", "n_ex_per_rank", "=", "all_gather_list", "(", "n_ex", ")", "\n", "metrics_per_rank", "=", "all_gather_list", "(", "metrics", ")", "\n", "", "else", ":", "\n", "            ", "n_ex_per_rank", "=", "[", "n_ex", "]", "\n", "metrics_per_rank", "=", "[", "metrics", "]", "\n", "", "n_ex", "=", "sum", "(", "n_ex_per_rank", ")", "\n", "val_log", "=", "{", "}", "\n", "gathered_metrics", "=", "{", "}", "\n", "for", "task_type", ",", "task_metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "gathered_metrics", "[", "task_type", "]", "=", "{", "}", "\n", "for", "k", "in", "task_metric", ".", "keys", "(", ")", ":", "\n", "                ", "if", "k", "==", "\"desc_type_ratio\"", ":", "\n", "                    ", "continue", "\n", "", "gathered_v", "=", "0", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "n_ex_per_rank", ")", ":", "\n", "                    ", "gathered_v", "+=", "n", "*", "metrics_per_rank", "[", "idx", "]", "[", "task_type", "]", "[", "k", "]", "\n", "", "gathered_v", "=", "gathered_v", "/", "n_ex", "\n", "gathered_metrics", "[", "task_type", "]", "[", "k", "]", "=", "gathered_v", "\n", "val_log", "[", "\n", "f'valid_{split}_{task_type}/{task_type}_{k}'", "]", "=", "gathered_v", "\n", "\n", "", "", "LOGGER", ".", "info", "(", "\"metrics_VR \\n{}\"", ".", "format", "(", "pprint", ".", "pformat", "(", "\n", "gathered_metrics", "[", "\"VR\"", "]", ",", "indent", "=", "4", ")", ")", ")", "\n", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "val_log", ".", "update", "(", "\n", "{", "f'valid/vr_{split}_ex_per_s'", ":", "n_ex", "/", "tot_time", "}", ")", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds\"", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "val_log", ",", "eval_submission", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.build_dataloader": [[42, 49], ["torch.utils.data.DataLoader", "data.PrefetchLoader", "data.TvcTrainDataset.collate", "data.TvcValDataset.collate"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcEvalDataset.collate", "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcEvalDataset.collate"], ["def", "build_dataloader", "(", "dataset", ",", "batch_size", ",", "collate_fn", ",", "is_train", ",", "opts", ")", ":", "\n", "    ", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "shuffle", "=", "is_train", ")", "\n", "return", "PrefetchLoader", "(", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.main": [[51, 257], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "horovod.torch.rank", "utils.logger.LOGGER.info", "utils.misc.set_random_seed", "utils.logger.LOGGER.info", "load_data.load_video_sub_dataset", "utils.logger.LOGGER.info", "data.CaptionTokLmdb", "data.TvcTrainDataset", "utils.logger.LOGGER.info", "train_tvc.build_dataloader", "utils.logger.LOGGER.info", "data.CaptionTokLmdb", "data.TvcValDataset", "train_tvc.build_dataloader", "model.tvc.HeroForTvc.from_pretrained", "HeroForTvc.from_pretrained.to", "utils.distributed.broadcast_tensors", "utils.misc.set_dropout", "optim.misc.build_optimizer", "apex.amp.initialize", "model.tvc.TvcGenerator", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "utils.logger.RunningMeter", "time.time", "optim.misc.build_optimizer.zero_grad", "optim.misc.build_optimizer.step", "HeroForTvc.from_pretrained.train", "utils.logger.LOGGER.info", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "ValueError", "horovod.torch.rank", "eval.tvc.TVCEval", "utils.misc.NoOp", "torch.load", "horovod.torch.load", "len", "horovod.torch.local_rank", "transformers.RobertaTokenizer.from_pretrained", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "transformers.RobertaTokenizer.from_pretrained", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "utils.save.save_training_meta", "utils.logger.TB_LOGGER.create", "tqdm.tqdm", "utils.save.ModelSaver", "os.makedirs", "utils.logger.add_log_to_file", "utils.misc.NoOp", "utils.misc.NoOp", "enumerate", "utils.logger.LOGGER.info", "train_tvc.validate", "utils.logger.TB_LOGGER.log_scaler_dict", "utils.misc.NoOp.save", "horovod.torch.rank", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "batch[].size", "HeroForTvc.from_pretrained.", "loss.mean.mean", "utils.logger.RunningMeter.", "horovod.torch.rank", "utils.basic_utils.save_jsonl", "sum", "HeroForTvc.from_pretrained.parameters", "loss.mean.item", "apex.amp.scale_loss", "scaled_loss.backward", "optim.get_lr_sched", "enumerate", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.TB_LOGGER.step", "optim.misc.build_optimizer.step", "optim.misc.build_optimizer.zero_grad", "utils.misc.NoOp.update", "utils.distributed.all_gather_list", "utils.distributed.all_reduce_and_rescale_tensors", "torch.nn.utils.clip_grad_norm_", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "sum", "int", "utils.logger.LOGGER.info", "sum", "int", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.TB_LOGGER.add_scalar", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "train_tvc.validate", "utils.logger.TB_LOGGER.log_scaler_dict", "utils.logger.LOGGER.info", "utils.misc.NoOp.save", "len", "float", "apex.amp.master_params", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "horovod.torch.rank", "utils.basic_utils.save_jsonl", "HeroForTvc.from_pretrained.parameters", "ValueError", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_random_seed", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.build_dataloader", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.build_dataloader", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.broadcast_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_dropout", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.misc.build_optimizer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.save_training_meta", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.create", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.add_log_to_file", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_jsonl", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.VsmAllgather.backward", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.get_lr_sched", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_reduce_and_rescale_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_jsonl"], ["", "def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "rank", "=", "hvd", ".", "rank", "(", ")", "\n", "opts", ".", "rank", "=", "rank", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "\n", "", "if", "opts", ".", "gradient_accumulation_steps", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid gradient_accumulation_steps parameter: {}, \"", "\n", "\"should be >= 1\"", ".", "format", "(", "\n", "opts", ".", "gradient_accumulation_steps", ")", ")", "\n", "\n", "", "set_random_seed", "(", "opts", ".", "seed", ")", "\n", "opts", ".", "task", "=", "'tvc'", "\n", "\n", "# train_examples = None", "\n", "LOGGER", ".", "info", "(", "f\"Loading the whole video dataset {opts.sub_txt_db}, \"", "\n", "f\"{opts.vfeat_db}\"", ")", "\n", "video_db", "=", "load_video_sub_dataset", "(", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "\n", "opts", ".", "vfeat_interval", ",", "opts", ")", "\n", "\n", "# data loaders", "\n", "# train", "\n", "LOGGER", ".", "info", "(", "f\"Loading train dataset {opts.train_db}\"", ")", "\n", "train_cap", "=", "CaptionTokLmdb", "(", "opts", ".", "train_db", ",", "opts", ".", "max_txt_len", ")", "\n", "train_dset", "=", "TvcTrainDataset", "(", "video_db", ",", "train_cap", ",", "opts", ".", "max_cap_per_vid", ")", "\n", "LOGGER", ".", "info", "(", "f\"{sum(all_gather_list(len(train_dset)))} samples loaded\"", ")", "\n", "train_loader", "=", "build_dataloader", "(", "train_dset", ",", "opts", ".", "train_batch_size", ",", "\n", "TvcTrainDataset", ".", "collate", ",", "True", ",", "opts", ")", "\n", "\n", "# val", "\n", "LOGGER", ".", "info", "(", "f\"Loading val dataset {opts.val_db}\"", ")", "\n", "val_cap", "=", "CaptionTokLmdb", "(", "opts", ".", "val_db", ",", "-", "1", ")", "\n", "val_dset", "=", "TvcValDataset", "(", "video_db", ",", "val_cap", ",", "-", "1", ")", "\n", "val_loader", "=", "build_dataloader", "(", "val_dset", ",", "opts", ".", "val_batch_size", ",", "\n", "TvcValDataset", ".", "collate", ",", "False", ",", "opts", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "evaluator", "=", "TVCEval", "(", "opts", ".", "val_ref", ")", "\n", "", "else", ":", "\n", "        ", "evaluator", "=", "NoOp", "(", ")", "\n", "\n", "# Prepare model", "\n", "", "if", "opts", ".", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opts", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "{", "}", "\n", "\n", "", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\".position_embeddings.weight\"", "\n", "if", "img_pos_embed_weight_key", "in", "checkpoint", ":", "\n", "        ", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "", "else", ":", "\n", "        ", "max_frm_seq_len", "=", "MAX_FRM_SEQ_LEN", "\n", "\n", "", "model", "=", "HeroForTvc", ".", "from_pretrained", "(", "opts", ".", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lsr", "=", "opts", ".", "lsr", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "# make sure every process has same model parameters in the beginning", "\n", "broadcast_tensors", "(", "[", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ",", "0", ")", "\n", "set_dropout", "(", "model", ",", "opts", ".", "dropout", ")", "\n", "\n", "# Prepare optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "opts", ")", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "\n", "# assumes roberta tokenizer only", "\n", "if", "hvd", ".", "local_rank", "(", ")", "==", "0", ":", "\n", "# quick hack to prevent multi-process download collision", "\n", "        ", "toker", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "all_gather_list", "(", "None", ")", "\n", "", "else", ":", "\n", "        ", "all_gather_list", "(", "None", ")", "\n", "toker", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "", "bos", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<s>'", "]", ")", "[", "0", "]", "\n", "eos", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'</s>'", "]", ")", "[", "0", "]", "\n", "generator", "=", "TvcGenerator", "(", "model", ",", "opts", ".", "max_gen_step", ",", "bos", ",", "eos", ",", "opts", ".", "fp16", ")", "\n", "\n", "global_step", "=", "0", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "save_training_meta", "(", "opts", ")", "\n", "TB_LOGGER", ".", "create", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ")", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "opts", ".", "num_train_steps", ")", "\n", "model_saver", "=", "ModelSaver", "(", "join", "(", "opts", ".", "output_dir", ",", "'ckpt'", ")", ")", "\n", "os", ".", "makedirs", "(", "join", "(", "opts", ".", "output_dir", ",", "'results'", ")", ")", "# store val predictions", "\n", "add_log_to_file", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ",", "'log.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "pbar", "=", "NoOp", "(", ")", "\n", "model_saver", "=", "NoOp", "(", ")", "\n", "\n", "", "LOGGER", ".", "info", "(", "f\"***** Running training with {n_gpu} GPUs *****\"", ")", "\n", "LOGGER", ".", "info", "(", "\"  Batch size = %d\"", ",", "opts", ".", "train_batch_size", ")", "\n", "LOGGER", ".", "info", "(", "\"  Accumulate steps = %d\"", ",", "opts", ".", "gradient_accumulation_steps", ")", "\n", "LOGGER", ".", "info", "(", "\"  Num steps = %d\"", ",", "opts", ".", "num_train_steps", ")", "\n", "\n", "train_loss", "=", "RunningMeter", "(", "'loss'", ")", "\n", "n_vid", "=", "0", "\n", "n_cap", "=", "0", "\n", "n_epoch", "=", "0", "\n", "start", "=", "time", "(", ")", "\n", "# quick hack for amp delay_unscale bug", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "while", "True", ":", "\n", "        ", "for", "step", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "n_vid", "+=", "opts", ".", "train_batch_size", "\n", "n_cap", "+=", "batch", "[", "'cap_input_ids'", "]", ".", "size", "(", "0", ")", "\n", "\n", "loss", "=", "model", "(", "batch", ",", "compute_loss", "=", "True", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "train_loss", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "delay_unscale", "=", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "!=", "0", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ",", "delay_unscale", "=", "delay_unscale", "\n", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "if", "not", "delay_unscale", ":", "\n", "# gather gradients from every processes", "\n", "# do this before unscaling to make sure every process uses", "\n", "# the same gradient scale", "\n", "                    ", "grads", "=", "[", "p", ".", "grad", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "\n", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", "]", "\n", "all_reduce_and_rescale_tensors", "(", "grads", ",", "float", "(", "1", ")", ")", "\n", "\n", "", "", "if", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "global_step", "+=", "1", "\n", "\n", "# learning rate scheduling", "\n", "lr_this_step", "=", "get_lr_sched", "(", "global_step", ",", "opts", ")", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                    ", "if", "i", "==", "0", "or", "i", "==", "1", ":", "\n", "                        ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "*", "opts", ".", "lr_mul", "\n", "", "elif", "i", "==", "2", "or", "i", "==", "3", ":", "\n", "                        ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", ")", "\n", "", "", "TB_LOGGER", ".", "add_scalar", "(", "'lr'", ",", "lr_this_step", ",", "global_step", ")", "\n", "\n", "# log loss", "\n", "TB_LOGGER", ".", "add_scalar", "(", "train_loss", ".", "name", ",", "train_loss", ".", "val", ",", "\n", "global_step", ")", "\n", "TB_LOGGER", ".", "step", "(", ")", "\n", "\n", "# update model params", "\n", "if", "opts", ".", "grad_norm", "!=", "-", "1", ":", "\n", "                    ", "grad_norm", "=", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "\n", "opts", ".", "grad_norm", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "'grad_norm'", ",", "grad_norm", ",", "global_step", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "global_step", "%", "100", "==", "0", ":", "\n", "# monitor training throughput", "\n", "                    ", "LOGGER", ".", "info", "(", "'-------------------------------------------'", ")", "\n", "LOGGER", ".", "info", "(", "f'Step {global_step}:'", ")", "\n", "tot_vid", "=", "sum", "(", "all_gather_list", "(", "n_vid", ")", ")", "\n", "vid_per_sec", "=", "int", "(", "tot_vid", "/", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "LOGGER", ".", "info", "(", "f'{tot_vid} videos trained at '", "\n", "f'{vid_per_sec} vid/s'", ")", "\n", "tot_cap", "=", "sum", "(", "all_gather_list", "(", "n_cap", ")", ")", "\n", "cap_per_sec", "=", "int", "(", "tot_cap", "/", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "f'perf/vid_per_s'", ",", "vid_per_sec", ",", "\n", "global_step", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "f'perf/cap_per_s'", ",", "cap_per_sec", ",", "\n", "global_step", ")", "\n", "\n", "", "if", "global_step", "%", "opts", ".", "valid_steps", "==", "0", ":", "\n", "                    ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start validation\"", ")", "\n", "val_log", ",", "results", "=", "validate", "(", "val_loader", ",", "generator", ",", "\n", "toker", ",", "evaluator", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "                        ", "save_jsonl", "(", "results", ",", "f\"{opts.output_dir}/results/\"", "\n", "f\"/results_{global_step}.jsonl\"", ")", "\n", "", "TB_LOGGER", ".", "log_scaler_dict", "(", "val_log", ")", "\n", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "", "", "if", "global_step", ">=", "opts", ".", "num_train_steps", ":", "\n", "                ", "break", "\n", "", "", "n_epoch", "+=", "1", "\n", "LOGGER", ".", "info", "(", "f\"finished {n_epoch} epochs\"", ")", "\n", "if", "global_step", ">=", "opts", ".", "num_train_steps", ":", "\n", "            ", "break", "\n", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "if", "global_step", "%", "opts", ".", "valid_steps", "!=", "0", ":", "\n", "        ", "val_log", ",", "results", "=", "validate", "(", "val_loader", ",", "generator", ",", "toker", ",", "evaluator", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "            ", "save_jsonl", "(", "results", ",", "f\"{opts.output_dir}/results/\"", "\n", "f\"/results_{global_step}.jsonl\"", ")", "\n", "", "TB_LOGGER", ".", "log_scaler_dict", "(", "val_log", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.train_tvc.validate": [[259, 284], ["torch.no_grad", "horovod.torch.no_grad", "time.time", "generator.model.eval", "utils.logger.LOGGER.info", "generator.model.train", "generator.greedy_decode", "zip", "horovod.torch.rank", "evaluator", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "tokenizer.convert_tokens_to_string", "results.append", "utils.distributed.all_gather_list", "tokenizer.convert_ids_to_tokens", "int", "int", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.TvcGenerator.greedy_decode", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate", "(", "loader", ",", "generator", ",", "tokenizer", ",", "evaluator", ")", ":", "\n", "    ", "st", "=", "time", "(", ")", "\n", "generator", ".", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "for", "batch", "in", "loader", ":", "\n", "        ", "vids", "=", "batch", "[", "'vid_names'", "]", "\n", "cids", "=", "batch", "[", "'clip_ids'", "]", "\n", "all_ts", "=", "batch", "[", "'all_ts'", "]", "\n", "outputs", "=", "generator", ".", "greedy_decode", "(", "batch", ")", "\n", "for", "vid", ",", "cid", ",", "ts", ",", "out_ids", "in", "zip", "(", "vids", ",", "cids", ",", "all_ts", ",", "outputs", ")", ":", "\n", "            ", "output", "=", "tokenizer", ".", "convert_tokens_to_string", "(", "\n", "tokenizer", ".", "convert_ids_to_tokens", "(", "out_ids", ")", ")", "\n", "results", ".", "append", "(", "{", "'vid_name'", ":", "vid", ",", "'clip_id'", ":", "cid", ",", "'ts'", ":", "ts", ",", "\n", "'descs'", ":", "[", "{", "'desc'", ":", "output", "}", "]", "}", ")", "\n", "", "", "results", "=", "[", "r", "for", "rs", "in", "all_gather_list", "(", "results", ")", "for", "r", "in", "rs", "]", "\n", "LOGGER", ".", "info", "(", "f'decoding finished in {int(time() - st)} seconds'", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "val_log", "=", "evaluator", "(", "results", ")", "\n", "LOGGER", ".", "info", "(", "f'Validation finished in {int(time() - st)} seconds'", ")", "\n", "LOGGER", ".", "info", "(", "f'CIDEr: {val_log[\"CIDEr\"]}'", ")", "\n", "", "else", ":", "\n", "        ", "val_log", "=", "{", "}", "\n", "", "generator", ".", "model", ".", "train", "(", ")", "\n", "return", "val_log", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vcmr.main": [[45, 141], ["horovod.torch.init", "horovod.torch.size", "torch.device", "horovod.torch.device", "torch.cuda.set_device", "horovod.torch.cuda.set_device", "horovod.torch.rank", "utils.logger.LOGGER.info", "utils.misc.Struct", "load_data.get_video_ids", "data.QueryTokLmdb", "inf_dataset", "os.path.exists", "torch.load", "horovod.torch.load", "len", "model.vcmr.HeroForVcmr.from_pretrained", "amp.initialize.to", "torch.utils.data.DataLoader", "data.PrefetchLoader", "eval_vcmr.validate_full_vcmr", "utils.distributed.all_gather_list", "horovod.torch.local_rank", "horovod.torch.local_rank", "horovod.torch.rank", "utils.basic_utils.load_json", "load_data.load_video_sub_dataset", "utils.basic_utils.load_json", "load_data.load_video_only_dataset", "apex.amp.initialize", "os.makedirs", "horovod.torch.rank", "range", "utils.logger.LOGGER.info", "utils.basic_utils.save_json", "utils.logger.LOGGER.info", "horovod.torch.rank", "os.path.join", "os.path.exists", "horovod.torch.size", "all_results_list[].items", "all_results[].extend"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.get_video_ids", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vcmr.validate_full_vcmr", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_sub_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.None.load_data.load_video_only_dataset", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "rank", "=", "hvd", ".", "rank", "(", ")", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "", "hps_file", "=", "f'{opts.output_dir}/log/hps.json'", "\n", "model_opts", "=", "Struct", "(", "load_json", "(", "hps_file", ")", ")", "\n", "model_config", "=", "f'{opts.output_dir}/log/model_config.json'", "\n", "\n", "# load DBs and image dirs", "\n", "video_ids", "=", "get_video_ids", "(", "opts", ".", "query_txt_db", ")", "\n", "if", "opts", ".", "task", "!=", "\"didemo_video_only\"", ":", "\n", "        ", "video_db", "=", "load_video_sub_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "opts", ".", "sub_txt_db", ",", "model_opts", ".", "vfeat_interval", ",", "\n", "model_opts", ")", "\n", "", "else", ":", "\n", "        ", "txt_meta", "=", "load_json", "(", "\n", "os", ".", "path", ".", "join", "(", "opts", ".", "query_txt_db", ",", "\"meta.json\"", ")", ")", "\n", "video_db", "=", "load_video_only_dataset", "(", "\n", "opts", ".", "vfeat_db", ",", "txt_meta", ",", "\n", "model_opts", ".", "vfeat_interval", ",", "\n", "model_opts", ")", "\n", "", "assert", "opts", ".", "split", "in", "opts", ".", "query_txt_db", "\n", "q_txt_db", "=", "QueryTokLmdb", "(", "opts", ".", "query_txt_db", ",", "-", "1", ")", "\n", "if", "opts", ".", "task", "!=", "\"didemo_video_only\"", ":", "\n", "        ", "inf_dataset", "=", "VcmrFullEvalDataset", "\n", "", "else", ":", "\n", "        ", "inf_dataset", "=", "VcmrVideoOnlyFullEvalDataset", "\n", "", "eval_dataset", "=", "inf_dataset", "(", "\n", "video_ids", ",", "video_db", ",", "q_txt_db", ",", "\n", "distributed", "=", "model_opts", ".", "distributed_eval", ")", "\n", "\n", "# Prepare model", "\n", "if", "exists", "(", "opts", ".", "checkpoint", ")", ":", "\n", "        ", "ckpt_file", "=", "opts", ".", "checkpoint", "\n", "", "else", ":", "\n", "        ", "ckpt_file", "=", "f'{opts.output_dir}/ckpt/model_step_{opts.checkpoint}.pt'", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_file", ")", "\n", "img_pos_embed_weight_key", "=", "(", "\n", "\"v_encoder.f_encoder.img_embeddings\"", "+", "\n", "\".position_embeddings.weight\"", ")", "\n", "assert", "img_pos_embed_weight_key", "in", "checkpoint", "\n", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "\n", "model", "=", "HeroForVcmr", ".", "from_pretrained", "(", "\n", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lw_neg_ctx", "=", "model_opts", ".", "lw_neg_ctx", ",", "\n", "lw_neg_q", "=", "model_opts", ".", "lw_neg_q", ",", "lw_st_ed", "=", "0", ",", "\n", "ranking_loss_type", "=", "model_opts", ".", "ranking_loss_type", ",", "\n", "use_hard_negative", "=", "False", ",", "\n", "hard_pool_size", "=", "model_opts", ".", "hard_pool_size", ",", "\n", "margin", "=", "model_opts", ".", "margin", ",", "\n", "use_all_neg", "=", "model_opts", ".", "use_all_neg", ",", "\n", "drop_svmr_prob", "=", "model_opts", ".", "drop_svmr_prob", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "if", "opts", ".", "fp16", ":", "\n", "        ", "model", "=", "amp", ".", "initialize", "(", "model", ",", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "\n", "", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "opts", ".", "batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "vcmr_full_eval_collate", ")", "\n", "eval_dataloader", "=", "PrefetchLoader", "(", "eval_dataloader", ")", "\n", "\n", "_", ",", "results", "=", "validate_full_vcmr", "(", "\n", "model", ",", "eval_dataloader", ",", "opts", ".", "split", ",", "opts", ",", "model_opts", ")", "\n", "result_dir", "=", "f'{opts.output_dir}/results_{opts.split}'", "\n", "\n", "if", "not", "exists", "(", "result_dir", ")", "and", "rank", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "", "all_results_list", "=", "all_gather_list", "(", "results", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "all_results", "=", "{", "\"video2idx\"", ":", "all_results_list", "[", "0", "]", "[", "\"video2idx\"", "]", "}", "\n", "for", "rank_id", "in", "range", "(", "hvd", ".", "size", "(", ")", ")", ":", "\n", "            ", "for", "key", ",", "val", "in", "all_results_list", "[", "rank_id", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "\"video2idx\"", ":", "\n", "                    ", "continue", "\n", "", "if", "key", "not", "in", "all_results", ":", "\n", "                    ", "all_results", "[", "key", "]", "=", "[", "]", "\n", "", "all_results", "[", "key", "]", ".", "extend", "(", "all_results_list", "[", "rank_id", "]", "[", "key", "]", ")", "\n", "", "", "LOGGER", ".", "info", "(", "'All results joined......'", ")", "\n", "\n", "save_json", "(", "\n", "all_results", ",", "\n", "f'{result_dir}/results_{opts.checkpoint}_all.json'", ")", "\n", "LOGGER", ".", "info", "(", "'All results written......'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.None.eval_vcmr.validate_full_vcmr": [[143, 516], ["torch.no_grad", "horovod.torch.no_grad", "utils.logger.LOGGER.info", "model.eval", "time.time", "sorted", "tqdm.tqdm", "tqdm.tqdm", "dict", "utils.tvr_eval_utils.get_submission_top_n", "model.train", "list", "enumerate", "data.loader.move_to_cuda.append", "video_idx.append", "total_qids.extend", "total_vids.extend", "batch.items", "model.get_pred_from_raw_query", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "len", "_q2video_scores.float.float", "torch.exp", "horovod.torch.exp", "torch.topk", "horovod.torch.topk", "torch.arange().unsqueeze", "horovod.torch.arange().unsqueeze", "torch.einsum", "horovod.torch.einsum", "utils.tvr_eval_utils.generate_min_max_length_mask", "torch.from_numpy().to", "horovod.torch.from_numpy().to", "torch.einsum.reshape", "torch.sort", "horovod.torch.sort", "numpy.einsum", "utils.tvr_eval_utils.generate_min_max_length_mask", "utils.tvr_eval_utils.find_max_triples_from_upper_triangle_product", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "utils.tvr_standalone_eval.eval_retrieval", "sum", "utils.tvr_standalone_eval.eval_retrieval.items", "val_log.update", "utils.logger.LOGGER.info", "video2idx_global.keys", "enumerate", "video2idx_local.items", "len", "data.loader.move_to_cuda", "data.loader.move_to_cuda.items", "model.v_encoder", "model.v_encoder.size", "torch.LongTensor", "horovod.torch.LongTensor", "max", "utils.logger.LOGGER.info", "partial_query_data.append", "torch.arange", "horovod.torch.arange", "torch.LongTensor", "horovod.torch.LongTensor", "_st_probs[].float().cpu().numpy", "_ed_probs[].float().cpu().numpy", "_sorted_q2c_indices.cpu().numpy", "_sorted_q2c_scores.cpu().numpy", "numpy.concatenate", "numpy.concatenate", "_flat_st_ed_scores_sorted_indices[].cpu().numpy", "_flat_st_ed_sorted_scores[].cpu().numpy", "numpy.concatenate", "numpy.concatenate", "enumerate", "dict", "svmr_res.append", "enumerate", "zip", "dict", "vr_res.append", "enumerate", "numpy.unravel_index", "enumerate", "dict", "vcmr_res.append", "dict.items", "utils.distributed.all_gather_list", "utils.distributed.all_gather_list", "task_metric.keys", "utils.logger.LOGGER.info", "utils.logger.LOGGER.info", "dict", "utils.tvr_standalone_eval.eval_retrieval", "utils.tvr_standalone_eval.eval_retrieval.items", "time.time", "len", "data.video_collate", "model.v_encoder.size", "torch.zeros", "horovod.torch.zeros", "torch.zeros", "horovod.torch.zeros", "targets.min", "isinstance", "batch[].to", "len", "numpy.concatenate", "numpy.concatenate", "torch.arange", "horovod.torch.arange", "torch.from_numpy", "horovod.torch.from_numpy", "zip", "len", "zip", "len", "cur_vr_redictions.append", "zip", "len", "pred_st_indices.astype", "zip", "cur_vcmr_redictions.append", "len", "enumerate", "utils.logger.LOGGER.info", "utils.tvr_eval_utils.post_processing_svmr_nms", "utils.tvr_eval_utils.post_processing_vcmr_nms", "utils.distributed.all_gather_list", "task_metric.keys", "utils.logger.LOGGER.info", "len", "isinstance", "video_batch[].to", "_st_probs[].float().cpu", "_ed_probs[].float().cpu", "_sorted_q2c_indices.cpu", "_sorted_q2c_scores.cpu", "_sorted_q2c_indices.cpu().numpy", "_sorted_q2c_scores.cpu().numpy", "len", "_flat_st_ed_scores_sorted_indices[].cpu", "_flat_st_ed_sorted_scores[].cpu", "_flat_st_ed_scores_sorted_indices[].cpu().numpy", "_flat_st_ed_sorted_scores[].cpu().numpy", "_sorted_triples.tolist", "int", "int", "pred_ed_indices.astype", "int", "pprint.pformat", "enumerate", "utils.logger.LOGGER.info", "int", "len", "len", "float", "float", "float", "float", "pprint.pformat", "pprint.pformat", "next", "_st_probs[].float", "_ed_probs[].float", "_sorted_q2c_indices.cpu", "_sorted_q2c_scores.cpu", "_flat_st_ed_scores_sorted_indices[].cpu", "_flat_st_ed_sorted_scores[].cpu", "pprint.pformat", "next", "model.parameters", "v_meta_idx.item", "model.parameters"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.get_submission_top_n", "home.repos.pwc.inspect_result.linjieli222_HERO.model.vcmr.HeroForVcmr.get_pred_from_raw_query", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.generate_min_max_length_mask", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.generate_min_max_length_mask", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.find_max_triples_from_upper_triangle_product", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.eval_retrieval", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.move_to_cuda", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.eval_retrieval", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.post_processing_svmr_nms", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.post_processing_vcmr_nms", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_full_vcmr", "(", "model", ",", "val_loader", ",", "split", ",", "opts", ",", "model_opts", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\"start running  full VCMR evaluation\"", "\n", "f\"on {opts.task} {split} split...\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "n_ex", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "val_log", "=", "{", "}", "\n", "has_gt_target", "=", "True", "\n", "val_vid2idx", "=", "val_loader", ".", "dataset", ".", "vid2idx", "\n", "if", "split", "in", "val_vid2idx", ":", "\n", "        ", "video2idx_global", "=", "val_vid2idx", "[", "split", "]", "\n", "", "else", ":", "\n", "        ", "video2idx_global", "=", "val_vid2idx", "\n", "", "video_ids", "=", "sorted", "(", "list", "(", "video2idx_global", ".", "keys", "(", ")", ")", ")", "\n", "video2idx_local", "=", "{", "e", ":", "i", "for", "i", ",", "e", "in", "enumerate", "(", "video_ids", ")", "}", "\n", "query_data", "=", "val_loader", ".", "dataset", ".", "query_data", "\n", "\n", "partial_query_data", "=", "[", "]", "\n", "total_frame_embeddings", "=", "None", "\n", "video_batch", ",", "video_idx", "=", "[", "]", ",", "[", "]", "\n", "max_clip_len", "=", "0", "\n", "for", "video_i", ",", "(", "vid", ",", "vidx", ")", "in", "tqdm", "(", "enumerate", "(", "video2idx_local", ".", "items", "(", ")", ")", ",", "\n", "desc", "=", "\"Computing Video Embeddings\"", ",", "\n", "total", "=", "len", "(", "video2idx_local", ")", ")", ":", "\n", "        ", "video_item", "=", "val_loader", ".", "dataset", ".", "video_db", "[", "vid", "]", "\n", "video_batch", ".", "append", "(", "video_item", ")", "\n", "video_idx", ".", "append", "(", "vidx", ")", "\n", "if", "len", "(", "video_batch", ")", "==", "opts", ".", "vcmr_eval_video_batch_size", "or", "video_i", "==", "len", "(", "video2idx_local", ")", "-", "1", ":", "\n", "            ", "video_batch", "=", "move_to_cuda", "(", "video_collate", "(", "video_batch", ")", ")", "\n", "# Safeguard fp16", "\n", "for", "k", ",", "item", "in", "video_batch", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", "and", "item", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "                    ", "video_batch", "[", "k", "]", "=", "video_batch", "[", "k", "]", ".", "to", "(", "\n", "dtype", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "\n", "", "", "curr_frame_embeddings", "=", "model", ".", "v_encoder", "(", "video_batch", ",", "'repr'", ")", "\n", "curr_c_attn_masks", "=", "video_batch", "[", "'c_attn_masks'", "]", "\n", "curr_clip_len", "=", "curr_frame_embeddings", ".", "size", "(", "-", "2", ")", "\n", "assert", "curr_clip_len", "<=", "model_opts", ".", "max_clip_len", "\n", "\n", "if", "total_frame_embeddings", "is", "None", ":", "\n", "                ", "feat_dim", "=", "curr_frame_embeddings", ".", "size", "(", "-", "1", ")", "\n", "total_frame_embeddings", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "video2idx_local", ")", ",", "model_opts", ".", "max_clip_len", ",", "feat_dim", ")", ",", "\n", "dtype", "=", "curr_frame_embeddings", ".", "dtype", ",", "\n", "device", "=", "curr_frame_embeddings", ".", "device", ")", "\n", "total_c_attn_masks", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "video2idx_local", ")", ",", "model_opts", ".", "max_clip_len", ")", ",", "\n", "dtype", "=", "curr_c_attn_masks", ".", "dtype", ",", "\n", "device", "=", "curr_frame_embeddings", ".", "device", ")", "\n", "", "indices", "=", "torch", ".", "LongTensor", "(", "video_idx", ")", "\n", "total_frame_embeddings", "[", "indices", ",", ":", "curr_clip_len", "]", "=", "curr_frame_embeddings", "\n", "total_c_attn_masks", "[", "indices", ",", ":", "curr_clip_len", "]", "=", "curr_c_attn_masks", "\n", "max_clip_len", "=", "max", "(", "max_clip_len", ",", "curr_clip_len", ")", "\n", "video_batch", ",", "video_idx", "=", "[", "]", ",", "[", "]", "\n", "", "", "total_frame_embeddings", "=", "total_frame_embeddings", "[", ":", ",", ":", "max_clip_len", ",", ":", "]", "\n", "total_c_attn_masks", "=", "total_c_attn_masks", "[", ":", ",", ":", "max_clip_len", "]", "\n", "\n", "svmr_st_probs_total", ",", "svmr_ed_probs_total", "=", "None", ",", "None", "\n", "sorted_q2c_indices", ",", "sorted_q2c_scores", "=", "None", ",", "None", "\n", "flat_st_ed_sorted_scores", ",", "flat_st_ed_scores_sorted_indices", "=", "None", ",", "None", "\n", "total_qids", ",", "total_vids", "=", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "tqdm", "(", "val_loader", ",", "desc", "=", "\"Computing q2vScores\"", ")", ":", "\n", "        ", "qids", "=", "batch", "[", "'qids'", "]", "\n", "vids", "=", "batch", "[", "'vids'", "]", "\n", "targets", "=", "batch", "[", "'targets'", "]", "\n", "if", "has_gt_target", "and", "targets", ".", "min", "(", ")", "<", "0", ":", "\n", "            ", "has_gt_target", "=", "False", "\n", "LOGGER", ".", "info", "(", "\n", "\"No GT annotations provided, only generate predictions\"", ")", "\n", "", "del", "batch", "[", "'targets'", "]", "\n", "del", "batch", "[", "'qids'", "]", "\n", "del", "batch", "[", "'vids'", "]", "\n", "\n", "total_qids", ".", "extend", "(", "qids", ")", "\n", "total_vids", ".", "extend", "(", "vids", ")", "\n", "for", "qid", "in", "qids", ":", "\n", "            ", "partial_query_data", ".", "append", "(", "query_data", "[", "qid", "]", ")", "\n", "# Safeguard fp16", "\n", "", "for", "k", ",", "item", "in", "batch", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", "and", "item", ".", "dtype", "==", "torch", ".", "float32", ":", "\n", "                ", "batch", "[", "k", "]", "=", "batch", "[", "k", "]", ".", "to", "(", "\n", "dtype", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "\n", "\n", "# FIXME", "\n", "", "", "_q2video_scores", ",", "_st_probs", ",", "_ed_probs", "=", "model", ".", "get_pred_from_raw_query", "(", "\n", "total_frame_embeddings", ",", "total_c_attn_masks", ",", "**", "batch", ",", "\n", "cross", "=", "True", ",", "val_gather_gpus", "=", "False", ")", "\n", "\n", "_st_probs", "=", "F", ".", "softmax", "(", "_st_probs", ",", "dim", "=", "-", "1", ")", "\n", "_ed_probs", "=", "F", ".", "softmax", "(", "_ed_probs", ",", "dim", "=", "-", "1", ")", "\n", "n_ex", "+=", "len", "(", "qids", ")", "\n", "\n", "if", "\"SVMR\"", "in", "opts", ".", "full_eval_tasks", "and", "has_gt_target", ":", "\n", "            ", "row_indices", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "_st_probs", ")", ")", "\n", "svmr_gt_vidx", "=", "torch", ".", "LongTensor", "(", "\n", "[", "video2idx_local", "[", "e", "]", "for", "e", "in", "vids", "]", ")", "\n", "svmr_st_probs", "=", "_st_probs", "[", "\n", "row_indices", ",", "svmr_gt_vidx", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "svmr_ed_probs", "=", "_ed_probs", "[", "\n", "row_indices", ",", "svmr_gt_vidx", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "svmr_st_probs_total", "is", "None", ":", "\n", "                ", "svmr_st_probs_total", "=", "svmr_st_probs", "\n", "svmr_ed_probs_total", "=", "svmr_ed_probs", "\n", "", "else", ":", "\n", "                ", "svmr_st_probs_total", "=", "np", ".", "concatenate", "(", "\n", "(", "svmr_st_probs_total", ",", "svmr_st_probs", ")", ",", "\n", "axis", "=", "0", ")", "\n", "svmr_ed_probs_total", "=", "np", ".", "concatenate", "(", "\n", "(", "svmr_ed_probs_total", ",", "svmr_ed_probs", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "if", "\"VR\"", "not", "in", "opts", ".", "full_eval_tasks", "or", "_q2video_scores", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "_q2video_scores", "=", "_q2video_scores", ".", "float", "(", ")", "\n", "# To give more importance to top scores,", "\n", "# the higher opt.alpha is the more importance will be given", "\n", "q2video_scores", "=", "torch", ".", "exp", "(", "model_opts", ".", "q2c_alpha", "*", "_q2video_scores", ")", "\n", "_sorted_q2c_scores", ",", "_sorted_q2c_indices", "=", "torch", ".", "topk", "(", "q2video_scores", ",", "model_opts", ".", "max_vcmr_video", ",", "\n", "dim", "=", "1", ",", "largest", "=", "True", ")", "\n", "if", "sorted_q2c_indices", "is", "None", ":", "\n", "            ", "sorted_q2c_indices", "=", "_sorted_q2c_indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sorted_q2c_scores", "=", "_sorted_q2c_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "sorted_q2c_indices", "=", "np", ".", "concatenate", "(", "\n", "(", "sorted_q2c_indices", ",", "_sorted_q2c_indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "sorted_q2c_scores", "=", "np", ".", "concatenate", "(", "\n", "(", "sorted_q2c_scores", ",", "_sorted_q2c_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "if", "\"VCMR\"", "not", "in", "opts", ".", "full_eval_tasks", ":", "\n", "            ", "continue", "\n", "\n", "", "row_indices", "=", "torch", ".", "arange", "(", "\n", "0", ",", "len", "(", "_st_probs", ")", ",", "device", "=", "_st_probs", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_st_probs", "=", "_st_probs", "[", "\n", "row_indices", ",", "_sorted_q2c_indices", "]", "# (_N_q, max_vcmr_video, L)", "\n", "_ed_probs", "=", "_ed_probs", "[", "row_indices", ",", "_sorted_q2c_indices", "]", "\n", "# (_N_q, max_vcmr_video, L, L)", "\n", "_st_ed_scores", "=", "torch", ".", "einsum", "(", "\"qvm,qv,qvn->qvmn\"", ",", "_st_probs", ",", "\n", "_sorted_q2c_scores", ",", "_ed_probs", ")", "\n", "valid_prob_mask", "=", "generate_min_max_length_mask", "(", "\n", "_st_ed_scores", ".", "shape", ",", "min_l", "=", "model_opts", ".", "min_pred_l", ",", "\n", "max_l", "=", "model_opts", ".", "max_pred_l", ")", "\n", "_st_ed_scores", "*=", "torch", ".", "from_numpy", "(", "\n", "valid_prob_mask", ")", ".", "to", "(", "\n", "_st_ed_scores", ".", "device", ")", "# invalid location will become zero!", "\n", "# sort across the top-max_n_videos videos (by flatten from the 2nd dim)", "\n", "# the indices here are local indices, not global indices", "\n", "_n_q", "=", "_st_ed_scores", ".", "shape", "[", "0", "]", "\n", "_flat_st_ed_scores", "=", "_st_ed_scores", ".", "reshape", "(", "\n", "_n_q", ",", "-", "1", ")", "# (N_q, max_vcmr_video*L*L)", "\n", "_flat_st_ed_sorted_scores", ",", "_flat_st_ed_scores_sorted_indices", "=", "torch", ".", "sort", "(", "_flat_st_ed_scores", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "\n", "if", "flat_st_ed_sorted_scores", "is", "None", ":", "\n", "            ", "flat_st_ed_scores_sorted_indices", "=", "_flat_st_ed_scores_sorted_indices", "[", "\n", ":", ",", ":", "model_opts", ".", "max_before_nms", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flat_st_ed_sorted_scores", "=", "_flat_st_ed_sorted_scores", "[", "\n", ":", ",", ":", "model_opts", ".", "max_before_nms", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "flat_st_ed_scores_sorted_indices", "=", "np", ".", "concatenate", "(", "\n", "(", "flat_st_ed_scores_sorted_indices", ",", "\n", "_flat_st_ed_scores_sorted_indices", "[", "\n", ":", ",", ":", "model_opts", ".", "max_before_nms", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "flat_st_ed_sorted_scores", "=", "np", ".", "concatenate", "(", "\n", "(", "flat_st_ed_sorted_scores", ",", "\n", "_flat_st_ed_sorted_scores", "[", "\n", ":", ",", ":", "model_opts", ".", "max_before_nms", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "", "svmr_res", ",", "vr_res", ",", "vcmr_res", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "\"SVMR\"", "in", "opts", ".", "full_eval_tasks", "and", "has_gt_target", ":", "\n", "        ", "st_ed_prob_product", "=", "np", ".", "einsum", "(", "\n", "\"bm,bn->bmn\"", ",", "svmr_st_probs_total", ",", "\n", "svmr_ed_probs_total", ")", "# (N, L, L)", "\n", "valid_prob_mask", "=", "generate_min_max_length_mask", "(", "\n", "st_ed_prob_product", ".", "shape", ",", "min_l", "=", "model_opts", ".", "min_pred_l", ",", "\n", "max_l", "=", "model_opts", ".", "max_pred_l", ")", "\n", "# invalid location will become zero!", "\n", "st_ed_prob_product", "*=", "valid_prob_mask", "\n", "batched_sorted_triples", "=", "find_max_triples_from_upper_triangle_product", "(", "\n", "st_ed_prob_product", ",", "top_n", "=", "model_opts", ".", "max_before_nms", ",", "\n", "prob_thd", "=", "None", ")", "\n", "for", "svmr_i", ",", "(", "qid", ",", "vid", ")", "in", "tqdm", "(", "\n", "enumerate", "(", "zip", "(", "total_qids", ",", "total_vids", ")", ")", ",", "\n", "desc", "=", "\"[SVMR] Loop over queries to generate predictions\"", ",", "\n", "total", "=", "len", "(", "total_qids", ")", ")", ":", "\n", "            ", "vidx", "=", "video2idx_global", "[", "vid", "]", "\n", "_sorted_triples", "=", "batched_sorted_triples", "[", "svmr_i", "]", "\n", "# as we redefined ed_idx, which is inside the moment.", "\n", "_sorted_triples", "[", ":", ",", "1", "]", "+=", "1", "\n", "_sorted_triples", "[", ":", ",", ":", "2", "]", "=", "(", "_sorted_triples", "[", ":", ",", ":", "2", "]", "\n", "*", "model_opts", ".", "vfeat_interval", ")", "\n", "cur_ranked_predictions", "=", "[", "\n", "[", "vidx", ",", "]", "+", "row", "for", "row", "in", "_sorted_triples", ".", "tolist", "(", ")", "]", "\n", "cur_query_pred", "=", "dict", "(", "desc_id", "=", "int", "(", "qid", ")", ",", "\n", "desc", "=", "\"\"", ",", "\n", "predictions", "=", "cur_ranked_predictions", ")", "\n", "svmr_res", ".", "append", "(", "cur_query_pred", ")", "\n", "\n", "", "", "if", "\"VR\"", "in", "opts", ".", "full_eval_tasks", ":", "\n", "        ", "for", "vr_i", ",", "(", "_sorted_q2c_scores_row", ",", "_sorted_q2c_indices_row", ")", "in", "tqdm", "(", "\n", "enumerate", "(", "\n", "zip", "(", "sorted_q2c_scores", "[", ":", ",", ":", "100", "]", ",", "\n", "sorted_q2c_indices", "[", ":", ",", ":", "100", "]", ")", ")", ",", "\n", "desc", "=", "\"[VR] Loop over queries to generate predictions\"", ",", "\n", "total", "=", "len", "(", "total_qids", ")", ")", ":", "\n", "            ", "cur_vr_redictions", "=", "[", "]", "\n", "for", "v_score", ",", "v_meta_idx", "in", "zip", "(", "_sorted_q2c_scores_row", ",", "\n", "_sorted_q2c_indices_row", ")", ":", "\n", "                ", "video_idx", "=", "video2idx_global", "[", "video_ids", "[", "v_meta_idx", "]", "]", "\n", "cur_vr_redictions", ".", "append", "(", "[", "video_idx", ",", "0", ",", "0", ",", "float", "(", "v_score", ")", "]", ")", "\n", "", "cur_query_pred", "=", "dict", "(", "desc_id", "=", "int", "(", "total_qids", "[", "vr_i", "]", ")", ",", "\n", "desc", "=", "\"\"", ",", "\n", "predictions", "=", "cur_vr_redictions", ")", "\n", "vr_res", ".", "append", "(", "cur_query_pred", ")", "\n", "", "", "if", "\"VCMR\"", "in", "opts", ".", "full_eval_tasks", ":", "\n", "        ", "for", "vcmr_i", ",", "(", "\n", "_flat_st_ed_scores_sorted_indices", ",", "\n", "_flat_st_ed_sorted_scores", ")", "in", "tqdm", "(", "\n", "enumerate", "(", "zip", "(", "\n", "flat_st_ed_scores_sorted_indices", ",", "\n", "flat_st_ed_sorted_scores", ")", ")", ",", "\n", "desc", "=", "\"[VCMR] Loop over queries to generate predictions\"", ",", "\n", "total", "=", "len", "(", "total_qids", ")", ")", ":", "# i is query_idx", "\n", "# list([video_idx(int), st(float),", "\n", "#       ed(float), score(float)])", "\n", "            ", "video_meta_indices_local", ",", "pred_st_indices", ",", "pred_ed_indices", "=", "np", ".", "unravel_index", "(", "\n", "_flat_st_ed_scores_sorted_indices", ",", "\n", "shape", "=", "(", "model_opts", ".", "max_vcmr_video", ",", "model_opts", ".", "max_clip_len", ",", "\n", "model_opts", ".", "max_clip_len", ")", ")", "\n", "# video_meta_indices_local refers to", "\n", "# the indices among the top-max_vcmr_video", "\n", "# video_meta_indices refers to", "\n", "# the indices in all the videos,", "\n", "# which is the True indices", "\n", "video_meta_indices", "=", "sorted_q2c_indices", "[", "\n", "vcmr_i", ",", "video_meta_indices_local", "]", "\n", "\n", "pred_st_in_seconds", "=", "pred_st_indices", ".", "astype", "(", "\n", "np", ".", "float32", ")", "*", "model_opts", ".", "vfeat_interval", "\n", "pred_ed_in_seconds", "=", "pred_ed_indices", ".", "astype", "(", "\n", "np", ".", "float32", "\n", ")", "*", "model_opts", ".", "vfeat_interval", "+", "model_opts", ".", "vfeat_interval", "\n", "cur_vcmr_redictions", "=", "[", "]", "\n", "for", "j", ",", "(", "v_meta_idx", ",", "v_score", ")", "in", "enumerate", "(", "\n", "zip", "(", "video_meta_indices", ",", "\n", "_flat_st_ed_sorted_scores", ")", ")", ":", "# videos", "\n", "                ", "video_idx", "=", "video2idx_global", "[", "video_ids", "[", "v_meta_idx", ".", "item", "(", ")", "]", "]", "\n", "cur_vcmr_redictions", ".", "append", "(", "\n", "[", "video_idx", ",", "float", "(", "pred_st_in_seconds", "[", "j", "]", ")", ",", "\n", "float", "(", "pred_ed_in_seconds", "[", "j", "]", ")", ",", "float", "(", "v_score", ")", "]", ")", "\n", "\n", "", "cur_query_pred", "=", "dict", "(", "\n", "desc_id", "=", "int", "(", "total_qids", "[", "vcmr_i", "]", ")", ",", "\n", "desc", "=", "\"\"", ",", "\n", "predictions", "=", "cur_vcmr_redictions", ")", "\n", "vcmr_res", ".", "append", "(", "cur_query_pred", ")", "\n", "\n", "", "", "eval_res", "=", "dict", "(", "SVMR", "=", "svmr_res", ",", "VCMR", "=", "vcmr_res", ",", "VR", "=", "vr_res", ")", "\n", "eval_res", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "eval_res", ".", "items", "(", ")", "if", "len", "(", "v", ")", "!=", "0", "}", "\n", "eval_res", "[", "\"video2idx\"", "]", "=", "video2idx_global", "\n", "\n", "eval_submission", "=", "get_submission_top_n", "(", "\n", "eval_res", ",", "top_n", "=", "model_opts", ".", "max_after_nms", ")", "\n", "\n", "if", "has_gt_target", ":", "\n", "        ", "metrics", "=", "eval_retrieval", "(", "eval_submission", ",", "partial_query_data", ",", "\n", "iou_thds", "=", "VCMR_IOU_THDS", ",", "\n", "match_number", "=", "True", ",", "\n", "verbose", "=", "False", ",", "\n", "use_desc_type", "=", "model_opts", ".", "eval_with_query_type", ")", "\n", "\n", "if", "model_opts", ".", "distributed_eval", ":", "\n", "            ", "n_ex_per_rank", "=", "all_gather_list", "(", "n_ex", ")", "\n", "metrics_per_rank", "=", "all_gather_list", "(", "metrics", ")", "\n", "", "else", ":", "\n", "            ", "n_ex_per_rank", "=", "[", "n_ex", "]", "\n", "metrics_per_rank", "=", "[", "metrics", "]", "\n", "", "n_ex", "=", "sum", "(", "n_ex_per_rank", ")", "\n", "val_log", "=", "{", "}", "\n", "gathered_metrics", "=", "{", "}", "\n", "for", "task_type", ",", "task_metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "gathered_metrics", "[", "task_type", "]", "=", "{", "}", "\n", "for", "k", "in", "task_metric", ".", "keys", "(", ")", ":", "\n", "                ", "if", "k", "==", "\"desc_type_ratio\"", ":", "\n", "                    ", "continue", "\n", "", "gathered_v", "=", "0", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "n_ex_per_rank", ")", ":", "\n", "                    ", "gathered_v", "+=", "n", "*", "metrics_per_rank", "[", "idx", "]", "[", "task_type", "]", "[", "k", "]", "\n", "", "gathered_v", "=", "gathered_v", "/", "n_ex", "\n", "gathered_metrics", "[", "task_type", "]", "[", "k", "]", "=", "gathered_v", "\n", "val_log", "[", "\n", "f'valid_{split}_{task_type}/{task_type}_{k}'", "]", "=", "gathered_v", "\n", "", "", "if", "\"VCMR\"", "in", "gathered_metrics", ":", "\n", "            ", "LOGGER", ".", "info", "(", "\"metrics_no_nms_VCMR \\n{}\"", ".", "format", "(", "pprint", ".", "pformat", "(", "\n", "gathered_metrics", "[", "\"VCMR\"", "]", ",", "indent", "=", "4", ")", ")", ")", "\n", "", "elif", "\"SVMR\"", "in", "gathered_metrics", ":", "\n", "            ", "LOGGER", ".", "info", "(", "\"metrics_no_nms_SVMR \\n{}\"", ".", "format", "(", "pprint", ".", "pformat", "(", "\n", "gathered_metrics", "[", "\"SVMR\"", "]", ",", "indent", "=", "4", ")", ")", ")", "\n", "\n", "", "if", "model_opts", ".", "nms_thd", "!=", "-", "1", ":", "\n", "            ", "LOGGER", ".", "info", "(", "\n", "\"Performing nms with nms_thd {}\"", ".", "format", "(", "\n", "model_opts", ".", "nms_thd", ")", ")", "\n", "eval_res_after_nms", "=", "dict", "(", "\n", "video2idx", "=", "eval_res", "[", "\"video2idx\"", "]", ")", "\n", "if", "\"SVMR\"", "in", "eval_res", ":", "\n", "                ", "eval_res_after_nms", "[", "\"SVMR\"", "]", "=", "post_processing_svmr_nms", "(", "\n", "eval_res", "[", "\"SVMR\"", "]", ",", "nms_thd", "=", "model_opts", ".", "nms_thd", ",", "\n", "max_before_nms", "=", "model_opts", ".", "max_before_nms", ",", "\n", "max_after_nms", "=", "model_opts", ".", "max_after_nms", ")", "\n", "", "if", "\"VCMR\"", "in", "eval_res", ":", "\n", "                ", "eval_res_after_nms", "[", "\"VCMR\"", "]", "=", "post_processing_vcmr_nms", "(", "\n", "eval_res", "[", "\"VCMR\"", "]", ",", "nms_thd", "=", "model_opts", ".", "nms_thd", ",", "\n", "max_before_nms", "=", "model_opts", ".", "max_before_nms", ",", "\n", "max_after_nms", "=", "model_opts", ".", "max_after_nms", ")", "\n", "", "metrics_nms", "=", "eval_retrieval", "(", "\n", "eval_res_after_nms", ",", "partial_query_data", ",", "\n", "iou_thds", "=", "VCMR_IOU_THDS", ",", "\n", "match_number", "=", "True", ",", "\n", "verbose", "=", "False", ",", "\n", "use_desc_type", "=", "model_opts", ".", "eval_with_query_type", ")", "\n", "\n", "if", "model_opts", ".", "distributed_eval", ":", "\n", "                ", "metrics_nms_per_rank", "=", "all_gather_list", "(", "metrics_nms", ")", "\n", "", "else", ":", "\n", "                ", "metrics_nms_per_rank", "=", "[", "metrics_nms", "]", "\n", "", "gathered_metrics_nms", "=", "{", "}", "\n", "\n", "for", "task_type", ",", "task_metric", "in", "metrics_nms", ".", "items", "(", ")", ":", "\n", "                ", "gathered_metrics_nms", "[", "task_type", "]", "=", "{", "}", "\n", "for", "k", "in", "task_metric", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "k", "==", "\"desc_type_ratio\"", ":", "\n", "                        ", "continue", "\n", "", "gathered_v_nms", "=", "0", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "n_ex_per_rank", ")", ":", "\n", "                        ", "gathered_v_nms", "+=", "(", "\n", "n", "*", "metrics_nms_per_rank", "[", "idx", "]", "[", "task_type", "]", "[", "k", "]", ")", "\n", "", "gathered_v_nms", "=", "gathered_v_nms", "/", "n_ex", "\n", "gathered_metrics_nms", "[", "task_type", "]", "[", "k", "]", "=", "gathered_v_nms", "\n", "val_log", "[", "f'valid_{split}_{task_type}'", "\n", "f'_nms_{model_opts.nms_thd}/'", "\n", "f'{task_type}_{k}'", "]", "=", "gathered_v_nms", "\n", "", "", "if", "\"VCMR\"", "in", "gathered_metrics_nms", ":", "\n", "                ", "LOGGER", ".", "info", "(", "\"metrics_nms_VCMR \\n{}\"", ".", "format", "(", "pprint", ".", "pformat", "(", "\n", "gathered_metrics_nms", "[", "\"VCMR\"", "]", ",", "indent", "=", "4", ")", ")", ")", "\n", "", "elif", "\"SVMR\"", "in", "gathered_metrics_nms", ":", "\n", "                ", "LOGGER", ".", "info", "(", "\"metrics_nms_SVMR \\n{}\"", ".", "format", "(", "pprint", ".", "pformat", "(", "\n", "gathered_metrics_nms", "[", "\"SVMR\"", "]", ",", "indent", "=", "4", ")", ")", ")", "\n", "\n", "", "", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "val_log", ".", "update", "(", "\n", "{", "f'valid/vcmr_{split}_ex_per_s'", ":", "n_ex", "/", "tot_time", "}", ")", "\n", "LOGGER", ".", "info", "(", "f\"validation finished in {int(tot_time)} seconds\"", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "val_log", ",", "eval_submission", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_reduce_and_rescale_tensors": [[19, 47], ["sum", "tensors[].new().zero_", "horovod.torch.allreduce_", "tensors[].new().zero_.div_", "t.numel", "buffer_t[].copy_", "t.numel", "t.view().copy_", "t.numel", "tensors[].new", "t.view", "t.view"], "function", ["None"], ["def", "all_reduce_and_rescale_tensors", "(", "tensors", ",", "rescale_denom", ")", ":", "\n", "    ", "\"\"\"All-reduce and rescale tensors at once (as a flattened tensor)\n\n    Args:\n        tensors: list of Tensors to all-reduce\n        rescale_denom: denominator for rescaling summed Tensors\n    \"\"\"", "\n", "# buffer size in bytes, determine equiv. # of elements based on data type", "\n", "sz", "=", "sum", "(", "t", ".", "numel", "(", ")", "for", "t", "in", "tensors", ")", "\n", "buffer_t", "=", "tensors", "[", "0", "]", ".", "new", "(", "sz", ")", ".", "zero_", "(", ")", "\n", "\n", "# copy tensors into buffer_t", "\n", "offset", "=", "0", "\n", "for", "t", "in", "tensors", ":", "\n", "        ", "numel", "=", "t", ".", "numel", "(", ")", "\n", "buffer_t", "[", "offset", ":", "offset", "+", "numel", "]", ".", "copy_", "(", "t", ".", "view", "(", "-", "1", ")", ")", "\n", "offset", "+=", "numel", "\n", "\n", "# all-reduce and rescale", "\n", "", "hvd", ".", "allreduce_", "(", "buffer_t", "[", ":", "offset", "]", ")", "\n", "buffer_t", ".", "div_", "(", "rescale_denom", ")", "\n", "\n", "# copy all-reduced buffer back into tensors", "\n", "offset", "=", "0", "\n", "for", "t", "in", "tensors", ":", "\n", "        ", "numel", "=", "t", ".", "numel", "(", ")", "\n", "t", ".", "view", "(", "-", "1", ")", ".", "copy_", "(", "buffer_t", "[", "offset", ":", "offset", "+", "numel", "]", ")", "\n", "offset", "+=", "numel", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_reduce_and_rescale_tensors_chunked": [[49, 101], ["tensors[].new().zero_", "horovod.torch.allreduce_", "tensors[].new().zero_.div_", "len", "distributed.all_reduce_and_rescale_tensors_chunked.all_reduce_buffer"], "function", ["None"], ["", "", "def", "all_reduce_and_rescale_tensors_chunked", "(", "tensors", ",", "rescale_denom", ",", "\n", "buffer_size", "=", "10485760", ")", ":", "\n", "    ", "\"\"\"All-reduce and rescale tensors in chunks of the specified size.\n\n    Args:\n        tensors: list of Tensors to all-reduce\n        rescale_denom: denominator for rescaling summed Tensors\n        buffer_size: all-reduce chunk size in bytes\n    \"\"\"", "\n", "# buffer size in bytes, determine equiv. # of elements based on data type", "\n", "buffer_t", "=", "tensors", "[", "0", "]", ".", "new", "(", "\n", "math", ".", "ceil", "(", "buffer_size", "/", "tensors", "[", "0", "]", ".", "element_size", "(", ")", ")", ")", ".", "zero_", "(", ")", "\n", "buffer", "=", "[", "]", "\n", "\n", "def", "all_reduce_buffer", "(", ")", ":", "\n", "# copy tensors into buffer_t", "\n", "        ", "offset", "=", "0", "\n", "for", "t", "in", "buffer", ":", "\n", "            ", "numel", "=", "t", ".", "numel", "(", ")", "\n", "buffer_t", "[", "offset", ":", "offset", "+", "numel", "]", ".", "copy_", "(", "t", ".", "view", "(", "-", "1", ")", ")", "\n", "offset", "+=", "numel", "\n", "\n", "# all-reduce and rescale", "\n", "", "hvd", ".", "allreduce_", "(", "buffer_t", "[", ":", "offset", "]", ")", "\n", "buffer_t", ".", "div_", "(", "rescale_denom", ")", "\n", "\n", "# copy all-reduced buffer back into tensors", "\n", "offset", "=", "0", "\n", "for", "t", "in", "buffer", ":", "\n", "            ", "numel", "=", "t", ".", "numel", "(", ")", "\n", "t", ".", "view", "(", "-", "1", ")", ".", "copy_", "(", "buffer_t", "[", "offset", ":", "offset", "+", "numel", "]", ")", "\n", "offset", "+=", "numel", "\n", "\n", "", "", "filled", "=", "0", "\n", "for", "t", "in", "tensors", ":", "\n", "        ", "sz", "=", "t", ".", "numel", "(", ")", "*", "t", ".", "element_size", "(", ")", "\n", "if", "sz", ">", "buffer_size", ":", "\n", "# tensor is bigger than buffer, all-reduce and rescale directly", "\n", "            ", "hvd", ".", "allreduce_", "(", "t", ")", "\n", "t", ".", "div_", "(", "rescale_denom", ")", "\n", "", "elif", "filled", "+", "sz", ">", "buffer_size", ":", "\n", "# buffer is full, all-reduce and replace buffer with grad", "\n", "            ", "all_reduce_buffer", "(", ")", "\n", "buffer", "=", "[", "t", "]", "\n", "filled", "=", "sz", "\n", "", "else", ":", "\n", "# add tensor to buffer", "\n", "            ", "buffer", ".", "append", "(", "t", ")", "\n", "filled", "+=", "sz", "\n", "\n", "", "", "if", "len", "(", "buffer", ")", ">", "0", ":", "\n", "        ", "all_reduce_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.broadcast_tensors": [[103, 152], ["tensors[].new().zero_", "horovod.torch.broadcast_", "len", "distributed.broadcast_tensors.broadcast_buffer"], "function", ["None"], ["", "", "def", "broadcast_tensors", "(", "tensors", ",", "root_rank", ",", "buffer_size", "=", "10485760", ")", ":", "\n", "    ", "\"\"\"broadcast tensors in chunks of the specified size.\n\n    Args:\n        tensors: list of Tensors to broadcast\n        root_rank: rank to broadcast\n        buffer_size: broadcast chunk size in bytes\n    \"\"\"", "\n", "# buffer size in bytes, determine equiv. # of elements based on data type", "\n", "buffer_t", "=", "tensors", "[", "0", "]", ".", "new", "(", "\n", "math", ".", "ceil", "(", "buffer_size", "/", "tensors", "[", "0", "]", ".", "element_size", "(", ")", ")", ")", ".", "zero_", "(", ")", "\n", "buffer", "=", "[", "]", "\n", "\n", "def", "broadcast_buffer", "(", ")", ":", "\n", "# copy tensors into buffer_t", "\n", "        ", "offset", "=", "0", "\n", "for", "t", "in", "buffer", ":", "\n", "            ", "numel", "=", "t", ".", "numel", "(", ")", "\n", "buffer_t", "[", "offset", ":", "offset", "+", "numel", "]", ".", "copy_", "(", "t", ".", "view", "(", "-", "1", ")", ")", "\n", "offset", "+=", "numel", "\n", "\n", "# broadcast", "\n", "", "hvd", ".", "broadcast_", "(", "buffer_t", "[", ":", "offset", "]", ",", "root_rank", ")", "\n", "\n", "# copy all-reduced buffer back into tensors", "\n", "offset", "=", "0", "\n", "for", "t", "in", "buffer", ":", "\n", "            ", "numel", "=", "t", ".", "numel", "(", ")", "\n", "t", ".", "view", "(", "-", "1", ")", ".", "copy_", "(", "buffer_t", "[", "offset", ":", "offset", "+", "numel", "]", ")", "\n", "offset", "+=", "numel", "\n", "\n", "", "", "filled", "=", "0", "\n", "for", "t", "in", "tensors", ":", "\n", "        ", "sz", "=", "t", ".", "numel", "(", ")", "*", "t", ".", "element_size", "(", ")", "\n", "if", "sz", ">", "buffer_size", ":", "\n", "# tensor is bigger than buffer, broadcast directly", "\n", "            ", "hvd", ".", "broadcast_", "(", "t", ",", "root_rank", ")", "\n", "", "elif", "filled", "+", "sz", ">", "buffer_size", ":", "\n", "# buffer is full, broadcast and replace buffer with tensor", "\n", "            ", "broadcast_buffer", "(", ")", "\n", "buffer", "=", "[", "t", "]", "\n", "filled", "=", "sz", "\n", "", "else", ":", "\n", "# add tensor to buffer", "\n", "            ", "buffer", ".", "append", "(", "t", ")", "\n", "filled", "+=", "sz", "\n", "\n", "", "", "if", "len", "(", "buffer", ")", ">", "0", ":", "\n", "        ", "broadcast_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed._encode": [[154, 169], ["len", "max", "range", "torch.ByteTensor", "horovod.torch.ByteTensor", "math.floor", "torch.cuda.ByteTensor", "horovod.torch.cuda.ByteTensor", "torch.cuda.ByteTensor", "horovod.torch.cuda.ByteTensor", "list", "math.log"], "function", ["None"], ["", "", "def", "_encode", "(", "enc", ",", "max_size", ",", "use_max_size", "=", "False", ")", ":", "\n", "    ", "enc_size", "=", "len", "(", "enc", ")", "\n", "enc_byte", "=", "max", "(", "math", ".", "floor", "(", "math", ".", "log", "(", "max_size", ",", "256", ")", "+", "1", ")", ",", "1", ")", "\n", "if", "use_max_size", ":", "\n", "# this is used for broadcasting", "\n", "        ", "buffer_", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "max_size", "+", "enc_byte", ")", "\n", "", "else", ":", "\n", "        ", "buffer_", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "enc_size", "+", "enc_byte", ")", "\n", "", "remainder", "=", "enc_size", "\n", "for", "i", "in", "range", "(", "enc_byte", ")", ":", "\n", "        ", "base", "=", "256", "**", "(", "enc_byte", "-", "i", "-", "1", ")", "\n", "buffer_", "[", "i", "]", "=", "remainder", "//", "base", "\n", "remainder", "%=", "base", "\n", "", "buffer_", "[", "enc_byte", ":", "enc_byte", "+", "enc_size", "]", "=", "torch", ".", "ByteTensor", "(", "list", "(", "enc", ")", ")", "\n", "return", "buffer_", ",", "enc_byte", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed._decode": [[171, 177], ["sum", "bytes", "buffer_[].tolist", "buffer_[].item", "range"], "function", ["None"], ["", "def", "_decode", "(", "buffer_", ",", "enc_byte", ")", ":", "\n", "    ", "size", "=", "sum", "(", "256", "**", "(", "enc_byte", "-", "i", "-", "1", ")", "*", "buffer_", "[", "i", "]", ".", "item", "(", ")", "\n", "for", "i", "in", "range", "(", "enc_byte", ")", ")", "\n", "bytes_list", "=", "bytes", "(", "buffer_", "[", "enc_byte", ":", "enc_byte", "+", "size", "]", ".", "tolist", "(", ")", ")", "\n", "shift", "=", "size", "+", "enc_byte", "\n", "return", "bytes_list", ",", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.all_gather_list": [[182, 199], ["pickle.dumps", "len", "horovod.torch.allgather().max().item", "distributed._encode", "horovod.torch.allgather", "range", "horovod.torch.size", "distributed._decode", "pickle.loads", "results.append", "horovod.torch.allgather().max", "horovod.torch.allgather", "torch.tensor().cuda", "horovod.torch.tensor().cuda", "torch.tensor", "horovod.torch.tensor"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed._encode", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed._decode"], ["def", "all_gather_list", "(", "data", ")", ":", "\n", "    ", "\"\"\"Gathers arbitrary data from all nodes into a list.\"\"\"", "\n", "enc", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "\n", "enc_size", "=", "len", "(", "enc", ")", "\n", "max_size", "=", "hvd", ".", "allgather", "(", "torch", ".", "tensor", "(", "[", "enc_size", "]", ")", ".", "cuda", "(", ")", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "in_buffer", ",", "enc_byte", "=", "_encode", "(", "enc", ",", "max_size", ")", "\n", "\n", "out_buffer", "=", "hvd", ".", "allgather", "(", "in_buffer", "[", ":", "enc_byte", "+", "enc_size", "]", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "hvd", ".", "size", "(", ")", ")", ":", "\n", "        ", "bytes_list", ",", "shift", "=", "_decode", "(", "out_buffer", ",", "enc_byte", ")", "\n", "out_buffer", "=", "out_buffer", "[", "shift", ":", "]", "\n", "result", "=", "pickle", ".", "loads", "(", "bytes_list", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.any_broadcast": [[201, 213], ["pickle.dumps", "horovod.torch.allgather().max().item", "distributed._encode", "horovod.torch.broadcast_", "distributed._decode", "pickle.loads", "horovod.torch.allgather().max", "horovod.torch.allgather", "torch.tensor().cuda", "horovod.torch.tensor().cuda", "torch.tensor", "horovod.torch.tensor", "len"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed._encode", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed._decode"], ["", "def", "any_broadcast", "(", "data", ",", "root_rank", ")", ":", "\n", "    ", "\"\"\"broadcast arbitrary data from root_rank to all nodes.\"\"\"", "\n", "enc", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "\n", "max_size", "=", "hvd", ".", "allgather", "(", "torch", ".", "tensor", "(", "[", "len", "(", "enc", ")", "]", ")", ".", "cuda", "(", ")", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "buffer_", ",", "enc_byte", "=", "_encode", "(", "enc", ",", "max_size", ",", "use_max_size", "=", "True", ")", "\n", "\n", "hvd", ".", "broadcast_", "(", "buffer_", ",", "root_rank", ")", "\n", "\n", "bytes_list", ",", "_", "=", "_decode", "(", "buffer_", ",", "enc_byte", ")", "\n", "result", "=", "pickle", ".", "loads", "(", "bytes_list", ")", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.compute_temporal_iou": [[14, 33], ["max", "max", "min", "min", "max"], "function", ["None"], ["def", "compute_temporal_iou", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "\"\"\" deprecated due to performance concerns\n    compute intersection-over-union along temporal axis\n    Args:\n        pred: [st (float), ed (float)]\n        gt: [st (float), ed (float)]\n    Returns:\n        iou (float):\n\n    Ref: https://github.com/LisaAnne/LocalizingMoments/blob/master/utils/eval.py\n    \"\"\"", "\n", "intersection", "=", "max", "(", "0", ",", "min", "(", "pred", "[", "1", "]", ",", "gt", "[", "1", "]", ")", "-", "max", "(", "pred", "[", "0", "]", ",", "gt", "[", "0", "]", ")", ")", "\n", "union", "=", "(", "\n", "max", "(", "pred", "[", "1", "]", ",", "gt", "[", "1", "]", ")", "\n", "-", "min", "(", "pred", "[", "0", "]", ",", "gt", "[", "0", "]", ")", ")", "# not the correct union though", "\n", "if", "union", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "return", "1.0", "*", "intersection", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.temporal_non_maximum_suppression": [[35, 93], ["sorted", "len", "rstart.append", "rend.append", "rscore.append", "rstart.append", "rend.append", "rscore.append", "len", "len", "len", "tstart.pop", "tend.pop", "tscore.pop", "len", "len", "tstart.pop", "tend.pop", "tscore.pop", "zip", "tvr_eval_utils.compute_temporal_iou", "tstart.pop", "tend.pop", "tscore.pop"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.compute_temporal_iou"], ["", "", "def", "temporal_non_maximum_suppression", "(", "predictions", ",", "nms_threshold", ",", "\n", "max_after_nms", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        predictions:\n            list(sublist), each sublist is\n            [st (float), ed(float), score (float)],\n            note larger scores are better and are preserved.\n            For metrics that are better when smaller,\n            please convert to its negative,\n            e.g., convert distance to negative distance.\n        nms_threshold: float in [0, 1]\n        max_after_nms:\n    Returns:\n        predictions_after_nms:\n        list(sublist),\n        each sublist is [st (float), ed(float), score (float)]\n    References:\n        https://github.com/wzmsltw/BSN-boundary-sensitive-network/blob/7b101fc5978802aa3c95ba5779eb54151c6173c6/Post_processing.py#L42\n    \"\"\"", "\n", "if", "len", "(", "predictions", ")", "==", "1", ":", "# only has one prediction, no need for nms", "\n", "        ", "return", "predictions", "\n", "\n", "", "predictions", "=", "sorted", "(", "predictions", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ",", "\n", "reverse", "=", "True", ")", "# descending order", "\n", "\n", "tstart", "=", "[", "e", "[", "0", "]", "for", "e", "in", "predictions", "]", "\n", "tend", "=", "[", "e", "[", "1", "]", "for", "e", "in", "predictions", "]", "\n", "tscore", "=", "[", "e", "[", "2", "]", "for", "e", "in", "predictions", "]", "\n", "rstart", "=", "[", "]", "\n", "rend", "=", "[", "]", "\n", "rscore", "=", "[", "]", "\n", "while", "len", "(", "tstart", ")", ">", "1", "and", "len", "(", "rscore", ")", "<", "max_after_nms", ":", "# max 100 after nms", "\n", "        ", "idx", "=", "1", "\n", "while", "idx", "<", "len", "(", "tstart", ")", ":", "# compare with every prediction in the list.", "\n", "            ", "if", "compute_temporal_iou", "(", "\n", "[", "tstart", "[", "0", "]", ",", "tend", "[", "0", "]", "]", ",", "\n", "[", "tstart", "[", "idx", "]", ",", "tend", "[", "idx", "]", "]", ")", ">", "nms_threshold", ":", "\n", "# rm highly overlapped lower score entries.", "\n", "                ", "tstart", ".", "pop", "(", "idx", ")", "\n", "tend", ".", "pop", "(", "idx", ")", "\n", "tscore", ".", "pop", "(", "idx", ")", "\n", "", "else", ":", "\n", "# move to next", "\n", "                ", "idx", "+=", "1", "\n", "", "", "rstart", ".", "append", "(", "tstart", ".", "pop", "(", "0", ")", ")", "\n", "rend", ".", "append", "(", "tend", ".", "pop", "(", "0", ")", ")", "\n", "rscore", ".", "append", "(", "tscore", ".", "pop", "(", "0", ")", ")", "\n", "\n", "", "if", "(", "len", "(", "rscore", ")", "<", "max_after_nms", "\n", "and", "len", "(", "tstart", ")", ">=", "1", ")", ":", "# add the last, possibly empty.", "\n", "        ", "rstart", ".", "append", "(", "tstart", ".", "pop", "(", "0", ")", ")", "\n", "rend", ".", "append", "(", "tend", ".", "pop", "(", "0", ")", ")", "\n", "rscore", ".", "append", "(", "tscore", ".", "pop", "(", "0", ")", ")", "\n", "\n", "", "predictions_after_nms", "=", "[", "\n", "[", "st", ",", "ed", ",", "s", "]", "for", "s", ",", "st", ",", "ed", "in", "zip", "(", "rscore", ",", "rstart", ",", "rend", ")", "]", "\n", "return", "predictions_after_nms", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.top_n_array_2d": [[95, 108], ["numpy.unravel_index", "numpy.stack", "numpy.argsort"], "function", ["None"], ["", "def", "top_n_array_2d", "(", "array_2d", ",", "top_n", ")", ":", "\n", "    ", "\"\"\"\n    Get topN indices and values of a 2d array,\n    return a tuple of indices and their values,\n    ranked by the value\n    \"\"\"", "\n", "row_indices", ",", "column_indices", "=", "np", ".", "unravel_index", "(", "\n", "np", ".", "argsort", "(", "array_2d", ",", "axis", "=", "None", ")", ",", "array_2d", ".", "shape", ")", "\n", "row_indices", "=", "row_indices", "[", ":", ":", "-", "1", "]", "[", ":", "top_n", "]", "\n", "column_indices", "=", "column_indices", "[", ":", ":", "-", "1", "]", "[", ":", "top_n", "]", "\n", "sorted_values", "=", "array_2d", "[", "row_indices", ",", "column_indices", "]", "\n", "return", "np", ".", "stack", "(", "[", "row_indices", ",", "column_indices", ",", "sorted_values", "]", ",", "\n", "axis", "=", "1", ")", "# (N, 3)", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.find_max_triples_from_upper_triangle_product": [[110, 130], ["enumerate", "tvr_eval_utils.top_n_array_2d", "batched_sorted_triple.append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.top_n_array_2d"], ["", "def", "find_max_triples_from_upper_triangle_product", "(", "\n", "upper_product", ",", "top_n", "=", "5", ",", "prob_thd", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Find a list of (k1, k2) where k1 < k2\n        with the maximum values of p1[k1] * p2[k2]\n    Args:\n        upper_product (torch.Tensor or np.ndarray): (N, L, L),\n            the lower part becomes zeros, end_idx > start_idx\n        top_n (int): return topN pairs with highest values\n        prob_thd (float or None):\n    Returns:\n        batched_sorted_triple: N * [(st_idx, ed_idx, confidence), ...]\n    \"\"\"", "\n", "batched_sorted_triple", "=", "[", "]", "\n", "for", "idx", ",", "e", "in", "enumerate", "(", "upper_product", ")", ":", "\n", "        ", "sorted_triple", "=", "top_n_array_2d", "(", "e", ",", "top_n", "=", "top_n", ")", "\n", "if", "prob_thd", "is", "not", "None", ":", "\n", "            ", "sorted_triple", "=", "sorted_triple", "[", "sorted_triple", "[", "2", "]", ">=", "prob_thd", "]", "\n", "", "batched_sorted_triple", ".", "append", "(", "sorted_triple", ")", "\n", "", "return", "batched_sorted_triple", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.filter_vcmr_by_nms": [[132, 176], ["collections.defaultdict", "dict", "collections.defaultdict.items", "dict.items", "predictions_neg_by_video_group[].append", "tvr_eval_utils.temporal_non_maximum_suppression", "sorted", "predictions_after_nms.append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.temporal_non_maximum_suppression"], ["", "def", "filter_vcmr_by_nms", "(", "all_video_predictions", ",", "nms_threshold", "=", "0.6", ",", "\n", "max_before_nms", "=", "1000", ",", "max_after_nms", "=", "100", ",", "\n", "score_col_idx", "=", "3", ")", ":", "\n", "    ", "\"\"\" Apply non-maximum suppression for all the predictions for each video.\n    1) group predictions by video index\n    2) apply nms individually for each video index group\n    3) combine and sort the predictions\n    Args:\n        all_video_predictions: list(sublist),\n            Each sublist is\n            [video_idx (int), st (float), ed(float), score (float)]\n            Note the scores are negative distances.\n        nms_threshold: float\n        max_before_nms: int\n        max_after_nms: int\n        score_col_idx: int\n    Returns:\n\n    \"\"\"", "\n", "predictions_neg_by_video_group", "=", "defaultdict", "(", "list", ")", "\n", "for", "pred", "in", "all_video_predictions", "[", ":", "max_before_nms", "]", ":", "\n", "        ", "predictions_neg_by_video_group", "[", "pred", "[", "0", "]", "]", ".", "append", "(", "\n", "pred", "[", "1", ":", "]", ")", "# [st (float), ed(float), score (float)]", "\n", "\n", "", "predictions_by_video_group_neg_after_nms", "=", "dict", "(", ")", "\n", "for", "video_idx", ",", "grouped_preds", "in", "predictions_neg_by_video_group", ".", "items", "(", ")", ":", "\n", "        ", "predictions_by_video_group_neg_after_nms", "[", "video_idx", "]", "=", "temporal_non_maximum_suppression", "(", "\n", "grouped_preds", ",", "nms_threshold", "=", "nms_threshold", ")", "\n", "\n", "", "predictions_after_nms", "=", "[", "]", "\n", "for", "video_idx", ",", "grouped_preds", "in", "predictions_by_video_group_neg_after_nms", ".", "items", "(", ")", ":", "\n", "        ", "for", "pred", "in", "grouped_preds", ":", "\n", "# [video_idx (int), st (float), ed(float), score (float)]", "\n", "            ", "pred", "=", "[", "video_idx", "]", "+", "pred", "\n", "predictions_after_nms", ".", "append", "(", "pred", ")", "\n", "\n", "# ranking happens across videos", "\n", "", "", "predictions_after_nms", "=", "sorted", "(", "\n", "predictions_after_nms", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "score_col_idx", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "max_after_nms", "]", "# descending order", "\n", "return", "predictions_after_nms", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.get_submission_top_n": [[178, 191], ["dict", "top_n_res.append", "tvr_eval_utils.get_submission_top_n.get_prediction_top_n"], "function", ["None"], ["", "def", "get_submission_top_n", "(", "submission", ",", "top_n", "=", "100", ")", ":", "\n", "    ", "def", "get_prediction_top_n", "(", "list_dict_predictions", ",", "top_n", ")", ":", "\n", "        ", "top_n_res", "=", "[", "]", "\n", "for", "e", "in", "list_dict_predictions", ":", "\n", "            ", "e", "[", "\"predictions\"", "]", "=", "e", "[", "\"predictions\"", "]", "[", ":", "top_n", "]", "\n", "top_n_res", ".", "append", "(", "e", ")", "\n", "", "return", "top_n_res", "\n", "\n", "", "top_n_submission", "=", "dict", "(", "video2idx", "=", "submission", "[", "\"video2idx\"", "]", ",", ")", "\n", "for", "k", "in", "submission", ":", "\n", "        ", "if", "k", "!=", "\"video2idx\"", ":", "\n", "            ", "top_n_submission", "[", "k", "]", "=", "get_prediction_top_n", "(", "submission", "[", "k", "]", ",", "top_n", ")", "\n", "", "", "return", "top_n_submission", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.post_processing_vcmr_nms": [[193, 212], ["tvr_eval_utils.filter_vcmr_by_nms", "processed_vcmr_res.append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.filter_vcmr_by_nms"], ["", "def", "post_processing_vcmr_nms", "(", "\n", "vcmr_res", ",", "nms_thd", "=", "0.6", ",", "max_before_nms", "=", "1000", ",", "max_after_nms", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    vcmr_res: list(dict), each dict is{\n        \"desc\": str,\n        \"desc_id\": int,\n        \"predictions\": list(sublist), each sublist is\n            [video_idx (int), st (float), ed(float), score (float)],\n            video_idx could be different\n    }\n    \"\"\"", "\n", "processed_vcmr_res", "=", "[", "]", "\n", "for", "e", "in", "vcmr_res", ":", "\n", "        ", "e", "[", "\"predictions\"", "]", "=", "filter_vcmr_by_nms", "(", "e", "[", "\"predictions\"", "]", ",", "\n", "nms_threshold", "=", "nms_thd", ",", "\n", "max_before_nms", "=", "max_before_nms", ",", "\n", "max_after_nms", "=", "max_after_nms", ")", "\n", "processed_vcmr_res", ".", "append", "(", "e", ")", "\n", "", "return", "processed_vcmr_res", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.post_processing_svmr_nms": [[214, 235], ["processed_svmr_res.append", "tvr_eval_utils.temporal_non_maximum_suppression"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.temporal_non_maximum_suppression"], ["", "def", "post_processing_svmr_nms", "(", "\n", "svmr_res", ",", "nms_thd", "=", "0.6", ",", "max_before_nms", "=", "1000", ",", "max_after_nms", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    svmr_res: list(dict), each dict is\n        {\"desc\": str,\n         \"desc_id\": int,\n         \"predictions\": list(sublist)  # each sublist is\n            [video_idx (int), st (float), ed(float), score (float)],\n            video_idx is the same.\n         }\n    \"\"\"", "\n", "processed_svmr_res", "=", "[", "]", "\n", "for", "e", "in", "svmr_res", ":", "\n", "# the predictions are sorted inside the nms func.", "\n", "        ", "_predictions", "=", "[", "d", "[", "1", ":", "]", "for", "d", "in", "e", "[", "\"predictions\"", "]", "[", ":", "max_before_nms", "]", "]", "\n", "_predictions", "=", "temporal_non_maximum_suppression", "(", "\n", "_predictions", ",", "nms_threshold", "=", "nms_thd", ")", "[", ":", "max_after_nms", "]", "\n", "_video_id", "=", "e", "[", "\"predictions\"", "]", "[", "0", "]", "[", "0", "]", "# video_id is the same for all predictions", "\n", "e", "[", "\"predictions\"", "]", "=", "[", "[", "_video_id", ",", "]", "+", "d", "for", "d", "in", "_predictions", "]", "\n", "processed_svmr_res", ".", "append", "(", "e", ")", "\n", "", "return", "processed_svmr_res", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_eval_utils.generate_min_max_length_mask": [[237, 261], ["numpy.ones", "numpy.triu", "numpy.triu", "len"], "function", ["None"], ["", "def", "generate_min_max_length_mask", "(", "array_shape", ",", "min_l", ",", "max_l", ")", ":", "\n", "    ", "\"\"\" The last two dimension denotes matrix of upper-triangle\n        with upper-right corner masked, below is the case for 4x4.\n    [[0, 1, 1, 0],\n     [0, 0, 1, 1],\n     [0, 0, 0, 1],\n     [0, 0, 0, 0]]\n\n    Args:\n        array_shape: np.shape??? The last two dimensions should be the same\n        min_l: int, minimum length of predicted span\n        max_l: int, maximum length of predicted span\n\n    Returns:\n\n    \"\"\"", "\n", "single_dims", "=", "(", "1", ",", ")", "*", "(", "len", "(", "array_shape", ")", "-", "2", ")", "\n", "mask_shape", "=", "single_dims", "+", "array_shape", "[", "-", "2", ":", "]", "\n", "# (1, ..., 1, L, L)", "\n", "extra_length_mask_array", "=", "np", ".", "ones", "(", "mask_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask_triu", "=", "np", ".", "triu", "(", "extra_length_mask_array", ",", "k", "=", "min_l", ")", "\n", "mask_triu_reversed", "=", "1", "-", "np", ".", "triu", "(", "extra_length_mask_array", ",", "k", "=", "max_l", ")", "\n", "final_prob_mask", "=", "mask_triu", "*", "mask_triu_reversed", "\n", "return", "final_prob_mask", "# with valid bit to be 1", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.__init__": [[30, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", "=", "None", "\n", "self", ".", "_global_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.create": [[34, 36], ["tensorboardX.SummaryWriter"], "methods", ["None"], ["", "def", "create", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "_logger", "=", "tensorboardX", ".", "SummaryWriter", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.noop": [[37, 39], ["None"], "methods", ["None"], ["", "def", "noop", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.step": [[40, 42], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "_global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.global_step": [[47, 50], ["None"], "methods", ["None"], ["", "@", "global_step", ".", "setter", "\n", "def", "global_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "_global_step", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict": [[51, 64], ["log_dict.items", "isinstance", "logger.TensorboardLogger.log_scaler_dict", "logger.TensorboardLogger._logger.add_scalar"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.log_scaler_dict"], ["", "def", "log_scaler_dict", "(", "self", ",", "log_dict", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "\"\"\" log a dictionary of scalar values\"\"\"", "\n", "if", "self", ".", "_logger", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "prefix", ":", "\n", "            ", "prefix", "=", "f'{prefix}_'", "\n", "", "for", "name", ",", "value", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "self", ".", "log_scaler_dict", "(", "value", ",", "self", ".", "_global_step", ",", "\n", "prefix", "=", "f'{prefix}{name}'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_logger", ".", "add_scalar", "(", "f'{prefix}{name}'", ",", "value", ",", "\n", "self", ".", "_global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.TensorboardLogger.__getattr__": [[65, 69], ["logger.TensorboardLogger._logger.__getattribute__"], "methods", ["None"], ["", "", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "self", ".", "_logger", "is", "None", ":", "\n", "            ", "return", "self", ".", "noop", "\n", "", "return", "self", ".", "_logger", ".", "__getattribute__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.RunningMeter.__init__": [[78, 82], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "val", "=", "None", ",", "smooth", "=", "0.99", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_sm", "=", "smooth", "\n", "self", ".", "_val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.RunningMeter.__call__": [[83, 86], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_val", "=", "(", "value", "if", "self", ".", "_val", "is", "None", "\n", "else", "value", "*", "(", "1", "-", "self", ".", "_sm", ")", "+", "self", ".", "_val", "*", "self", ".", "_sm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.RunningMeter.__str__": [[87, 89], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self._name}: {self._val:.4f}'", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.RunningMeter.val": [[90, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.RunningMeter.name": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.logger.add_log_to_file": [[22, 27], ["logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "LOGGER.addHandler"], "function", ["None"], ["def", "add_log_to_file", "(", "log_path", ")", ":", "\n", "    ", "fh", "=", "logging", ".", "FileHandler", "(", "log_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "_LOG_FMT", ",", "datefmt", "=", "_DATE_FMT", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "LOGGER", ".", "addHandler", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.FormatPrinter.__init__": [[168, 171], ["pprint.PrettyPrinter.__init__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "formats", ")", ":", "\n", "        ", "super", "(", "FormatPrinter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "formats", "=", "formats", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.FormatPrinter.format": [[172, 176], ["pprint.PrettyPrinter.format", "type", "type"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.FormatPrinter.format"], ["", "def", "format", "(", "self", ",", "obj", ",", "ctx", ",", "maxlvl", ",", "lvl", ")", ":", "\n", "        ", "if", "type", "(", "obj", ")", "in", "self", ".", "formats", ":", "\n", "            ", "return", "self", ".", "formats", "[", "type", "(", "obj", ")", "]", "%", "obj", ",", "1", ",", "0", "\n", "", "return", "pprint", ".", "PrettyPrinter", ".", "format", "(", "self", ",", "obj", ",", "ctx", ",", "maxlvl", ",", "lvl", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.load_pickle": [[13, 16], ["open", "pickle.load"], "function", ["None"], ["def", "load_pickle", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_pickle": [[18, 21], ["open", "pickle.dump"], "function", ["None"], ["", "", "def", "save_pickle", "(", "data", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.load_json": [[23, 26], ["open", "json.load"], "function", ["None"], ["", "", "def", "load_json", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json": [[28, 34], ["open", "f.write", "json.dump", "json.dumps"], "function", ["None"], ["", "", "def", "save_json", "(", "data", ",", "filename", ",", "save_pretty", "=", "False", ",", "sort_keys", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "if", "save_pretty", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "data", ",", "indent", "=", "4", ",", "sort_keys", "=", "sort_keys", ")", ")", "\n", "", "else", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.load_jsonl": [[36, 39], ["open", "json.loads", "line.strip", "f.readlines"], "function", ["None"], ["", "", "", "def", "load_jsonl", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "[", "json", ".", "loads", "(", "line", ".", "strip", "(", "\"\\n\"", ")", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_jsonl": [[41, 45], ["open", "f.write", "json.dumps"], "function", ["None"], ["", "", "def", "save_jsonl", "(", "data", ",", "filename", ")", ":", "\n", "    ", "\"\"\"data is a list\"\"\"", "\n", "with", "open", "(", "filename", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "json", ".", "dumps", "(", "e", ")", "for", "e", "in", "data", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_lines": [[47, 50], ["open", "f.write"], "function", ["None"], ["", "", "def", "save_lines", "(", "list_of_str", ",", "filepath", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "list_of_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.read_lines": [[52, 55], ["open", "e.strip", "f.readlines"], "function", ["None"], ["", "", "def", "read_lines", "(", "filepath", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "[", "e", ".", "strip", "(", "\"\\n\"", ")", "for", "e", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.mkdirp": [[57, 60], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdirp", "(", "p", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.flat_list_of_lists": [[62, 65], ["None"], "function", ["None"], ["", "", "def", "flat_list_of_lists", "(", "in_list", ")", ":", "\n", "    ", "\"\"\"flatten a list of lists [[1,2], [3,4]] to [1,2,3,4]\"\"\"", "\n", "return", "[", "item", "for", "sublist", "in", "in_list", "for", "item", "in", "sublist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.convert_to_seconds": [[67, 74], ["float", "hms_time.split"], "function", ["None"], ["", "def", "convert_to_seconds", "(", "hms_time", ")", ":", "\n", "    ", "\"\"\" convert '00:01:12' to 72 seconds.\n    :hms_time (str): time in comma separated string, e.g. '00:01:12'\n    :return (int): time in seconds, e.g. 72\n    \"\"\"", "\n", "times", "=", "[", "float", "(", "t", ")", "for", "t", "in", "hms_time", ".", "split", "(", "\":\"", ")", "]", "\n", "return", "times", "[", "0", "]", "*", "3600", "+", "times", "[", "1", "]", "*", "60", "+", "times", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.get_video_name_from_url": [[76, 78], ["url.split"], "function", ["None"], ["", "def", "get_video_name_from_url", "(", "url", ")", ":", "\n", "    ", "return", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.merge_dicts": [[80, 85], ["list_dicts[].copy", "range", "len", "list_dicts[].copy.update"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["", "def", "merge_dicts", "(", "list_dicts", ")", ":", "\n", "    ", "merged_dict", "=", "list_dicts", "[", "0", "]", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "list_dicts", ")", ")", ":", "\n", "        ", "merged_dict", ".", "update", "(", "list_dicts", "[", "i", "]", ")", "\n", "", "return", "merged_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.l2_normalize_np_array": [[87, 90], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "l2_normalize_np_array", "(", "np_array", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"np_array: np.ndarray, (*, D), where the last dim will be normalized\"\"\"", "\n", "return", "np_array", "/", "(", "np", ".", "linalg", ".", "norm", "(", "np_array", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.make_zipfile": [[92, 122], ["os.path.abspath", "zipfile.ZipFile", "os.walk", "os.path.join", "zf.write", "os.path.join", "os.path.join", "zf.write", "subdirs.remove", "subdirs.remove", "to_rm.append", "len", "os.path.splitext", "len"], "function", ["None"], ["", "def", "make_zipfile", "(", "src_dir", ",", "save_path", ",", "enclosing_dir", "=", "\"\"", ",", "exclude_dirs", "=", "None", ",", "\n", "exclude_extensions", "=", "None", ",", "exclude_dirs_substring", "=", "None", ")", ":", "\n", "    ", "\"\"\"make a zip file of root_dir, save it to save_path.\n    exclude_paths will be excluded if it is a subdir of root_dir.\n    An enclosing_dir is added is specified.\n    \"\"\"", "\n", "abs_src", "=", "os", ".", "path", ".", "abspath", "(", "src_dir", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "save_path", ",", "\"w\"", ")", "as", "zf", ":", "\n", "        ", "for", "dirname", ",", "subdirs", ",", "files", "in", "os", ".", "walk", "(", "src_dir", ")", ":", "\n", "            ", "if", "exclude_dirs", "is", "not", "None", ":", "\n", "                ", "for", "e_p", "in", "exclude_dirs", ":", "\n", "                    ", "if", "e_p", "in", "subdirs", ":", "\n", "                        ", "subdirs", ".", "remove", "(", "e_p", ")", "\n", "", "", "", "if", "exclude_dirs_substring", "is", "not", "None", ":", "\n", "                ", "to_rm", "=", "[", "]", "\n", "for", "d", "in", "subdirs", ":", "\n", "                    ", "if", "exclude_dirs_substring", "in", "d", ":", "\n", "                        ", "to_rm", ".", "append", "(", "d", ")", "\n", "", "", "for", "e", "in", "to_rm", ":", "\n", "                    ", "subdirs", ".", "remove", "(", "e", ")", "\n", "", "", "arcname", "=", "os", ".", "path", ".", "join", "(", "enclosing_dir", ",", "dirname", "[", "len", "(", "abs_src", ")", "+", "1", ":", "]", ")", "\n", "zf", ".", "write", "(", "dirname", ",", "arcname", ")", "\n", "for", "filename", "in", "files", ":", "\n", "                ", "if", "exclude_extensions", "is", "not", "None", ":", "\n", "                    ", "if", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "1", "]", "in", "exclude_extensions", ":", "\n", "                        ", "continue", "# do not zip it", "\n", "", "", "absname", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "filename", ")", "\n", "arcname", "=", "os", ".", "path", ".", "join", "(", "\n", "enclosing_dir", ",", "absname", "[", "len", "(", "abs_src", ")", "+", "1", ":", "]", ")", "\n", "zf", ".", "write", "(", "absname", ",", "arcname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.dissect_by_lengths": [[124, 145], ["range", "len", "length_indices.append", "len", "sum", "range", "len", "range", "len", "range", "len"], "function", ["None"], ["", "", "", "", "def", "dissect_by_lengths", "(", "np_array", ",", "lengths", ",", "dim", "=", "0", ",", "assert_equal", "=", "True", ")", ":", "\n", "    ", "\"\"\"Dissect an array (N, D) into a list a sub-array,\n    np_array.shape[0] == sum(lengths), Output is a list of nd arrays\n    singlton dimention is kept\"\"\"", "\n", "if", "assert_equal", ":", "\n", "        ", "assert", "len", "(", "np_array", ")", "==", "sum", "(", "lengths", ")", "\n", "", "length_indices", "=", "[", "0", ",", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", ":", "\n", "        ", "length_indices", ".", "append", "(", "length_indices", "[", "i", "]", "+", "lengths", "[", "i", "]", ")", "\n", "", "if", "dim", "==", "0", ":", "\n", "        ", "array_list", "=", "[", "np_array", "[", "length_indices", "[", "i", "]", ":", "length_indices", "[", "i", "+", "1", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", "]", "\n", "", "elif", "dim", "==", "1", ":", "\n", "        ", "array_list", "=", "[", "np_array", "[", ":", ",", "length_indices", "[", "i", "]", ":", "length_indices", "[", "i", "+", "1", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", "]", "\n", "", "elif", "dim", "==", "2", ":", "\n", "        ", "array_list", "=", "[", "np_array", "[", ":", ",", ":", ",", "length_indices", "[", "i", "]", ":", "length_indices", "[", "i", "+", "1", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "array_list", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.get_ratio_from_counter": [[147, 152], ["counter_obj.keys", "counter_obj.values", "float", "sum", "sum"], "function", ["None"], ["", "def", "get_ratio_from_counter", "(", "counter_obj", ",", "threshold", "=", "200", ")", ":", "\n", "    ", "keys", "=", "counter_obj", ".", "keys", "(", ")", "\n", "values", "=", "counter_obj", ".", "values", "(", ")", "\n", "filtered_values", "=", "[", "counter_obj", "[", "k", "]", "for", "k", "in", "keys", "if", "k", ">", "threshold", "]", "\n", "return", "float", "(", "sum", "(", "filtered_values", ")", ")", "/", "sum", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.get_show_name": [[154, 164], ["vid_name.split"], "function", ["None"], ["", "def", "get_show_name", "(", "vid_name", ")", ":", "\n", "    ", "\"\"\"\n    get tvshow name from vid_name\n    :param vid_name: video clip name\n    :return: tvshow name\n    \"\"\"", "\n", "show_list", "=", "[", "\"friends\"", ",", "\"met\"", ",", "\"castle\"", ",", "\"house\"", ",", "\"grey\"", "]", "\n", "vid_name_prefix", "=", "vid_name", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "show_name", "=", "vid_name_prefix", "if", "vid_name_prefix", "in", "show_list", "else", "\"bbt\"", "\n", "return", "show_name", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json": [[14, 17], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_jsonl": [[19, 22], ["open", "json.loads", "l.strip", "f.readlines"], "function", ["None"], ["", "", "def", "load_jsonl", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "[", "json", ".", "loads", "(", "l", ".", "strip", "(", "\"\\n\"", ")", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.pad_sequences_1d_np": [[24, 55], ["isinstance", "numpy.zeros", "numpy.zeros", "enumerate", "len", "str", "numpy.asarray", "len", "max", "len", "max"], "function", ["None"], ["", "", "def", "pad_sequences_1d_np", "(", "sequences", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "\n", "    ", "\"\"\" Pad a single-nested list or a sequence of n-d array (torch.tensor or np.ndarray)\n    into a (n+1)-d array, only allow the first dim has variable lengths.\n    Args:\n        sequences: list(n-d tensor or list)\n        dtype: np.dtype or torch.dtype\n    Returns:\n        padded_seqs: ((n+1)-d tensor) padded with zeros\n        mask: (2d tensor) of the same shape as the first two dims of padded_seqs,\n              1 indicate valid, 0 otherwise\n    Examples:\n        >>> test_data_list = [[1,2,3], [1,2], [3,4,7,9]]\n        >>> pad_sequences_1d(test_data_list, dtype=np.float32)\n        >>> test_data_3d = [np.random.randn(2,3,4), np.random.randn(4,3,4), np.random.randn(1,3,4)]\n        >>> pad_sequences_1d(test_data_3d, dtype=np.float32)\n    \"\"\"", "\n", "if", "isinstance", "(", "sequences", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "sequences", "=", "[", "np", ".", "asarray", "(", "s", ",", "dtype", "=", "dtype", ")", "for", "s", "in", "sequences", "]", "\n", "\n", "", "extra_dims", "=", "sequences", "[", "0", "]", ".", "shape", "[", "1", ":", "]", "# the extra dims should be the same for all elements", "\n", "lengths", "=", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", "\n", "assert", "\"numpy\"", "in", "str", "(", "dtype", ")", ",", "\"dtype and input type does not match\"", "\n", "padded_seqs", "=", "np", ".", "zeros", "(", "(", "len", "(", "sequences", ")", ",", "max", "(", "lengths", ")", ")", "+", "extra_dims", ",", "dtype", "=", "dtype", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "sequences", ")", ",", "max", "(", "lengths", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "end", "=", "lengths", "[", "idx", "]", "\n", "padded_seqs", "[", "idx", ",", ":", "end", "]", "=", "seq", "\n", "mask", "[", "idx", ",", ":", "end", "]", "=", "1", "\n", "", "return", "padded_seqs", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.compute_temporal_iou_batch": [[57, 73], ["numpy.maximum", "numpy.divide", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.zeros_like"], "function", ["None"], ["", "def", "compute_temporal_iou_batch", "(", "preds", ",", "gt", ")", ":", "\n", "    ", "\"\"\" compute intersection-over-union along temporal axis\n    This function is significantly faster than `compute_temporal_iou`,\n    the result should be the same.\n    Args:\n        preds: np.ndarray, (N, 2), [st (float), ed (float)] * N\n        gt: [st (float), ed (float)]\n    Returns:\n        iou (float): np.ndarray, (N, )\n\n    References:\n        for np.divide with zeros, see https://stackoverflow.com/a/37977222\n    \"\"\"", "\n", "intersection", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "minimum", "(", "preds", "[", ":", ",", "1", "]", ",", "gt", "[", "1", "]", ")", "-", "np", ".", "maximum", "(", "preds", "[", ":", ",", "0", "]", ",", "gt", "[", "0", "]", ")", ")", "\n", "union", "=", "np", ".", "maximum", "(", "preds", "[", ":", ",", "1", "]", ",", "gt", "[", "1", "]", ")", "-", "np", ".", "minimum", "(", "preds", "[", ":", ",", "0", "]", ",", "gt", "[", "0", "]", ")", "# not the correct union though", "\n", "return", "np", ".", "divide", "(", "intersection", ",", "union", ",", "out", "=", "np", ".", "zeros_like", "(", "intersection", ")", ",", "where", "=", "union", "!=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.get_rounded_percentage": [[75, 77], ["round"], "function", ["None"], ["", "def", "get_rounded_percentage", "(", "float_number", ",", "n_floats", "=", "2", ")", ":", "\n", "    ", "return", "round", "(", "float_number", "*", "100", ",", "n_floats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.eval_by_task_type": [[86, 258], ["tqdm.tqdm", "collections.OrderedDict", "collections.OrderedDict", "list", "print", "gt_by_desc_id.items", "numpy.array", "numpy.concatenate", "pred_info_matrix_collection.append", "tvr_standalone_eval.pad_sequences_1d_np", "numpy.array", "enumerate", "TASK_TYPES.keys", "set", "set", "np.array.append", "numpy.concatenate", "pred_info_matrix_collection[].astype", "pred_info_matrix_collection[].astype", "len", "enumerate", "len", "len", "gt_by_desc_id.keys", "predictions_by_desc_id.keys", "len", "collections.defaultdict", "numpy.array", "tvr_standalone_eval.get_rounded_percentage", "numpy.sum", "enumerate", "pred_info_matrix_collection[].astype", "pred_info_matrix_collection[].astype", "ValueError", "numpy.array", "iou_thd_corrects_columns.append", "tvr_standalone_eval.compute_temporal_iou_batch", "iou_thd_corrects_columns.append", "numpy.mean", "pred_info_matrix_collection[].astype", "tvr_standalone_eval.get_rounded_percentage", "numpy.sum", "enumerate", "tvr_standalone_eval.get_rounded_percentage", "tvr_standalone_eval.get_rounded_percentage", "tvr_standalone_eval.compute_temporal_iou_batch", "iou_corrects_dict[].append", "sum", "tvr_standalone_eval.get_rounded_percentage", "numpy.mean", "pred_info_matrix_collection[].astype", "numpy.mean", "numpy.sum", "numpy.sum", "tvr_standalone_eval.get_rounded_percentage", "tvr_standalone_eval.get_rounded_percentage", "len", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "range", "numpy.logical_and", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.sum", "range", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.pad_sequences_1d_np", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.get_rounded_percentage", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.compute_temporal_iou_batch", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.get_rounded_percentage", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.get_rounded_percentage", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.get_rounded_percentage", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.compute_temporal_iou_batch", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.get_rounded_percentage", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.get_rounded_percentage", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.get_rounded_percentage"], ["def", "eval_by_task_type", "(", "moment_predictions", ",", "video2idx", ",", "ground_truth", ",", "\n", "iou_thds", "=", "(", "0.5", ",", "0.7", ")", ",", "recall_topks", "=", "(", "1", ",", "5", ",", "10", ",", "100", ")", ",", "\n", "task_type", "=", "\"SVMR\"", ",", "max_pred_per_query", "=", "100", ",", "\n", "match_number", "=", "True", ",", "verbose", "=", "True", ",", "use_desc_type", "=", "True", ")", ":", "\n", "    ", "\"\"\" a predicted triplet is positive only if:\n    1) its vid_name matches the GT vid_name\n    2) IoU between its timestamp and GT timestamp is higher than the given threshold\n\n    moment_predictions w.r.t. different task_type:\n        For each query, evaluated on top max_pred_per_query [vid_name, st, ed] triplets. (score entry ignored)\n        VCMR: vid_name might be repeating.\n        SVMR: vid_name is fixed to be the GT vid_name.\n        VR: vid_name is not repeating, st and ed will not be used.\n\n    Args:\n        video2idx: {vid_name (str): index (int), ...}\n        moment_predictions: list(dict), each dict is {\n            \"desc\": str,\n            \"desc_id\": int,\n            \"predictions\": [vid_name_idx (int), st (float), ed (float), score (float)] * n_pred,\n                sorted predictions, n_pred could be different for all dicts. For each prediction,\n                only the first 3 elements [vid_name (str), st (float), ed (float),] are used,\n                any other following elements are ignored. We leave score here for record.\n        }\n        ground_truth: list(dict), each dict is {\n            \"desc\": str,\n            \"desc_id\": int,\n            \"type\": str, one of [v, t, vt]\n            \"vid_name\": str\n            \"ts\": [st (float), ed (float)], or list([st (float), ed (float)]), len == 4.\n            ...\n        }\n        iou_thds: temporal IoU thresholds\n        recall_topks: recall at different top k\n        task_type: str, could be: [\"VCMR\", \"SVMR\", \"VR\"], see TASK_TYPES for definition.\n        max_pred_per_query: int, only top max_pred_per_query predictions for each query are used.\n        match_number: bool, must set to True if when do evaluation, False is only used for debug.\n        verbose:\n        use_desc_type: only TVR has desc type\n    Returns:\n\n    \"\"\"", "\n", "assert", "task_type", "in", "TASK_TYPES", ",", "\"task_type must be one of {}\"", ".", "format", "(", "list", "(", "TASK_TYPES", ".", "keys", "(", ")", ")", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Running evaluation with task_type {}, n results {}; n gt {}\"", "\n", ".", "format", "(", "task_type", ",", "len", "(", "moment_predictions", ")", ",", "len", "(", "ground_truth", ")", ")", ")", "\n", "\n", "", "predictions_by_desc_id", "=", "{", "e", "[", "\"desc_id\"", "]", ":", "e", "for", "e", "in", "moment_predictions", "}", "\n", "gt_by_desc_id", "=", "{", "e", "[", "\"desc_id\"", "]", ":", "e", "for", "e", "in", "ground_truth", "}", "\n", "desc_type2idx", "=", "{", "\"v\"", ":", "0", ",", "\"t\"", ":", "1", ",", "\"vt\"", ":", "2", "}", "\n", "desc_types", "=", "[", "]", "# n_desc", "\n", "\n", "if", "match_number", ":", "\n", "        ", "assert", "set", "(", "gt_by_desc_id", ".", "keys", "(", ")", ")", "==", "set", "(", "predictions_by_desc_id", ".", "keys", "(", ")", ")", ",", "\"desc_ids in predictions and ground_truth must match\"", "\n", "# assert len(set([len(e[\"predictions\"]) for e in predictions_by_desc_id.values()])) == 1, \\", "\n", "#     \"all queries must have the same number of predictions\"", "\n", "\n", "", "pred_info_matrix_collection", "=", "[", "]", "\n", "for", "k", ",", "gt_item", "in", "tqdm", "(", "gt_by_desc_id", ".", "items", "(", ")", ",", "desc", "=", "\"Loop over moments\"", ",", "leave", "=", "False", ")", ":", "\n", "        ", "if", "not", "match_number", "and", "k", "not", "in", "predictions_by_desc_id", ":", "\n", "            ", "continue", "\n", "", "pred_info_matrix", "=", "np", ".", "array", "(", "\n", "[", "e", "[", ":", "3", "]", "for", "e", "in", "predictions_by_desc_id", "[", "k", "]", "[", "\"predictions\"", "]", "]", "[", ":", "max_pred_per_query", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "# (n_pred, 3)", "\n", "if", "use_desc_type", ":", "\n", "            ", "desc_types", ".", "append", "(", "desc_type2idx", "[", "gt_item", "[", "\"type\"", "]", "]", ")", "\n", "", "vid_name_matched_pred", "=", "pred_info_matrix", "[", ":", ",", "0", "]", "==", "video2idx", "[", "gt_item", "[", "\"vid_name\"", "]", "]", "# bool, (n_pred, )", "\n", "pred_info_matrix", "=", "np", ".", "concatenate", "(", "[", "pred_info_matrix", ",", "vid_name_matched_pred", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "# (n_pred, 4)", "\n", "\n", "# add 1 + len(iou_thds) columns, iou_scores, iou_corrects for each iou_thd.", "\n", "if", "\"ts\"", "in", "gt_item", ":", "\n", "            ", "iou_thd_corrects_columns", "=", "[", "]", "\n", "if", "len", "(", "gt_item", "[", "\"ts\"", "]", ")", ">=", "4", ":", "# didemo, fro all 3 splits, at least 4 ts for each, < 0.5% has more than 4.", "\n", "                ", "least_n_overlap", "=", "2", "# True if overlapped with at least least_n_overlap GT ts.", "\n", "iou_corrects_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "single_gt_ts", "in", "gt_item", "[", "\"ts\"", "]", ":", "\n", "                    ", "single_gt_ts", "=", "np", ".", "array", "(", "single_gt_ts", ",", "dtype", "=", "np", ".", "float32", ")", "# (2, )", "\n", "# iou scores of the predictions that have wrong vid_name are set to 0.", "\n", "iou_scores", "=", "compute_temporal_iou_batch", "(", "pred_info_matrix", "[", ":", ",", "1", ":", "3", "]", ",", "single_gt_ts", ")", "*", "vid_name_matched_pred", "\n", "for", "iou_thd", "in", "iou_thds", ":", "\n", "                        ", "iou_corrects_dict", "[", "iou_thd", "]", ".", "append", "(", "iou_scores", ">=", "iou_thd", ")", "\n", "", "", "for", "iou_thd", "in", "iou_thds", ":", "\n", "                    ", "iou_corrects", "=", "sum", "(", "iou_corrects_dict", "[", "iou_thd", "]", ")", ">=", "least_n_overlap", "# bool, (n_pred, )", "\n", "iou_thd_corrects_columns", ".", "append", "(", "iou_corrects", "[", ":", ",", "None", "]", ")", "\n", "\n", "", "", "else", ":", "# should be 2, len([st, ed]) == 2", "\n", "                ", "single_gt_ts", "=", "np", ".", "array", "(", "gt_item", "[", "\"ts\"", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# (2, )", "\n", "# iou scores of the predictions that have wrong vid_name are set to 0.", "\n", "iou_scores", "=", "compute_temporal_iou_batch", "(", "pred_info_matrix", "[", ":", ",", "1", ":", "3", "]", ",", "single_gt_ts", ")", "*", "vid_name_matched_pred", "\n", "\n", "for", "iou_thd", "in", "iou_thds", ":", "\n", "                    ", "iou_corrects", "=", "iou_scores", ">=", "iou_thd", "# bool, (n_pred, )", "\n", "iou_thd_corrects_columns", ".", "append", "(", "iou_corrects", "[", ":", ",", "None", "]", ")", "\n", "\n", "", "", "pred_info_matrix", "=", "np", ".", "concatenate", "(", "[", "pred_info_matrix", ",", "]", "+", "iou_thd_corrects_columns", ",", "axis", "=", "1", ")", "# (n_pred, 6)", "\n", "", "pred_info_matrix_collection", ".", "append", "(", "pred_info_matrix", ")", "\n", "\n", "# column header [vid_name_idx (int), st (float), ed (float), is_vid_name_match (bool),", "\n", "# iou_scores>=iou_thd0 (bool), iou_scores>=iou_thd1 (bool)]", "\n", "", "pred_info_matrix_collection", "=", "pad_sequences_1d_np", "(", "pred_info_matrix_collection", ")", "[", "0", "]", "# (n_desc, n_pred, 6)", "\n", "if", "use_desc_type", ":", "\n", "        ", "desc_types", "=", "np", ".", "array", "(", "desc_types", ")", "# (n_desc)", "\n", "\n", "# results wrapper", "\n", "", "metrics", "=", "OrderedDict", "(", ")", "\n", "metrics_by_type", "=", "OrderedDict", "(", ")", "\n", "\n", "iou_c_offset", "=", "4", "# iou_corrects column index starts here", "\n", "if", "task_type", "==", "\"VCMR\"", ":", "\n", "        ", "for", "iou_idx", ",", "iou_thd", "in", "enumerate", "(", "iou_thds", ")", ":", "\n", "            ", "iou_corrects", "=", "pred_info_matrix_collection", "[", ":", ",", ":", ",", "iou_c_offset", "+", "iou_idx", "]", ".", "astype", "(", "np", ".", "bool", ")", "# (n_desc, n_pred)", "\n", "# 1) there might be more than one positive clip, so use `>= 1`", "\n", "for", "k", "in", "recall_topks", ":", "\n", "                ", "metrics", "[", "\"{}-r{}\"", ".", "format", "(", "iou_thd", ",", "k", ")", "]", "=", "get_rounded_percentage", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "iou_corrects", "[", ":", ",", ":", "k", "]", ",", "axis", "=", "1", ")", ">=", "1", ")", ")", "\n", "", "", "if", "use_desc_type", ":", "\n", "            ", "for", "desc_type", "in", "desc_type2idx", ":", "\n", "                ", "type_corrects", "=", "desc_types", "==", "desc_type2idx", "[", "desc_type", "]", "# (n_desc)", "\n", "n_desc_in_type", "=", "np", ".", "sum", "(", "type_corrects", ")", "# (n_desc)", "\n", "for", "iou_idx", ",", "iou_thd", "in", "enumerate", "(", "iou_thds", ")", ":", "\n", "# (n_desc, n_pred)", "\n", "                    ", "iou_corrects", "=", "pred_info_matrix_collection", "[", ":", ",", ":", ",", "iou_c_offset", "+", "iou_idx", "]", ".", "astype", "(", "np", ".", "bool", ")", "\n", "for", "k", "in", "recall_topks", ":", "\n", "                        ", "metrics_by_type", "[", "\"{}-{}-r{}\"", ".", "format", "(", "desc_type", ",", "iou_thd", ",", "k", ")", "]", "=", "get_rounded_percentage", "(", "\n", "1.0", "*", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "sum", "(", "iou_corrects", "[", ":", ",", ":", "k", "]", ",", "axis", "=", "1", ")", ">=", "1", ",", "type_corrects", ")", ")", "\n", "/", "n_desc_in_type", "\n", ")", "\n", "", "", "", "", "", "elif", "task_type", "==", "\"SVMR\"", ":", "\n", "        ", "vid_name_matched", "=", "pred_info_matrix_collection", "[", ":", ",", ":", ",", "3", "]", ".", "astype", "(", "np", ".", "bool", ")", "# (n_desc, n_pred)", "\n", "n_desc", "=", "len", "(", "vid_name_matched", ")", "\n", "for", "iou_idx", ",", "iou_thd", "in", "enumerate", "(", "iou_thds", ")", ":", "\n", "            ", "iou_corrects", "=", "pred_info_matrix_collection", "[", ":", ",", ":", ",", "iou_c_offset", "+", "iou_idx", "]", ".", "astype", "(", "np", ".", "bool", ")", "# (n_desc, n_pred)", "\n", "# 1) there might be more than one positive clip, so use `>= 1`", "\n", "for", "k", "in", "recall_topks", ":", "\n", "                ", "metrics", "[", "\"{}-r{}\"", ".", "format", "(", "iou_thd", ",", "k", ")", "]", "=", "get_rounded_percentage", "(", "np", ".", "mean", "(", "\n", "[", "np", ".", "sum", "(", "iou_corrects", "[", "idx", "]", "[", "vid_name_matched", "[", "idx", "]", "]", "[", ":", "k", "]", ")", ">=", "1", "for", "idx", "in", "range", "(", "n_desc", ")", "]", "\n", ")", ")", "\n", "", "", "if", "use_desc_type", ":", "\n", "            ", "for", "desc_type", "in", "desc_type2idx", ":", "\n", "                ", "type_corrects", "=", "desc_types", "==", "desc_type2idx", "[", "desc_type", "]", "# (n_desc)", "\n", "n_desc_in_type", "=", "np", ".", "sum", "(", "type_corrects", ")", "# (n_desc)", "\n", "for", "iou_idx", ",", "iou_thd", "in", "enumerate", "(", "iou_thds", ")", ":", "\n", "# (n_desc, n_pred)", "\n", "                    ", "iou_corrects", "=", "pred_info_matrix_collection", "[", ":", ",", ":", ",", "iou_c_offset", "+", "iou_idx", "]", ".", "astype", "(", "np", ".", "bool", ")", "\n", "# 1) there might be more than one positive clip, so use `>= 1`", "\n", "for", "k", "in", "recall_topks", ":", "\n", "                        ", "metrics_by_type", "[", "\"{}-{}-r{}\"", ".", "format", "(", "desc_type", ",", "iou_thd", ",", "k", ")", "]", "=", "get_rounded_percentage", "(", "\n", "1.0", "*", "np", ".", "sum", "(", "[", "np", ".", "sum", "(", "iou_corrects", "[", "idx", "]", "[", "vid_name_matched", "[", "idx", "]", "]", "[", ":", "k", "]", ")", ">=", "1", "and", "type_corrects", "[", "idx", "]", "\n", "for", "idx", "in", "range", "(", "n_desc", ")", "]", ")", "\n", "/", "n_desc_in_type", ")", "\n", "\n", "", "", "", "", "", "elif", "task_type", "==", "\"VR\"", ":", "\n", "        ", "vid_name_matched", "=", "pred_info_matrix_collection", "[", ":", ",", ":", ",", "3", "]", ".", "astype", "(", "np", ".", "bool", ")", "# (n_desc, n_pred)", "\n", "for", "k", "in", "recall_topks", ":", "\n", "            ", "metrics", "[", "\"r{}\"", ".", "format", "(", "k", ")", "]", "=", "get_rounded_percentage", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "vid_name_matched", "[", ":", ",", ":", "k", "]", ",", "axis", "=", "1", ")", ">=", "1", ")", ")", "\n", "", "if", "use_desc_type", ":", "\n", "            ", "for", "desc_type", "in", "desc_type2idx", ":", "\n", "                ", "type_corrects", "=", "desc_types", "==", "desc_type2idx", "[", "desc_type", "]", "# (n_desc)", "\n", "n_desc_in_type", "=", "np", ".", "sum", "(", "type_corrects", ")", "# (n_desc)", "\n", "for", "k", "in", "recall_topks", ":", "\n", "                    ", "metrics_by_type", "[", "\"{}-r{}\"", ".", "format", "(", "desc_type", ",", "k", ")", "]", "=", "get_rounded_percentage", "(", "\n", "1.0", "*", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "sum", "(", "vid_name_matched", "[", ":", ",", ":", "k", "]", ",", "axis", "=", "1", ")", ">=", "1", ",", "type_corrects", ")", ")", "\n", "/", "n_desc_in_type", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"task_type wrong.\"", ")", "\n", "", "if", "use_desc_type", ":", "\n", "        ", "metrics_by_type", "[", "\"desc_type_ratio\"", "]", "=", "\"v {} t {} vt {}\"", ".", "format", "(", "*", "[", "get_rounded_percentage", "(", "1.0", "*", "np", ".", "sum", "(", "desc_types", "==", "desc_type2idx", "[", "k", "]", ")", "/", "len", "(", "desc_types", ")", ")", "\n", "for", "k", "in", "[", "\"v\"", ",", "\"t\"", ",", "\"vt\"", "]", "]", ")", "\n", "", "return", "metrics", ",", "metrics_by_type", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.eval_retrieval": [[260, 284], ["collections.OrderedDict", "print", "tvr_standalone_eval.eval_by_task_type"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.eval_by_task_type"], ["", "def", "eval_retrieval", "(", "\n", "submission", ",", "ground_truth", ",", "iou_thds", "=", "(", "0.5", ",", "0.7", ")", ",", "verbose", "=", "True", ",", "\n", "match_number", "=", "True", ",", "use_desc_type", "=", "True", ")", ":", "\n", "    ", "video2idx", "=", "submission", "[", "\"video2idx\"", "]", "\n", "submitted_task_types", "=", "[", "k", "for", "k", "in", "TASK_TYPES", "if", "k", "in", "submission", "]", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Evaluating for task {}\"", ".", "format", "(", "submitted_task_types", ")", ")", "\n", "", "eval_metrics", "=", "OrderedDict", "(", ")", "\n", "metrics_raw_dict", "=", "{", "}", "\n", "for", "task_type", "in", "submitted_task_types", ":", "\n", "        ", "metrics", ",", "metrics_by_type", "=", "eval_by_task_type", "(", "\n", "submission", "[", "task_type", "]", ",", "video2idx", ",", "ground_truth", ",", "\n", "iou_thds", "=", "iou_thds", ",", "recall_topks", "=", "(", "1", ",", "5", ",", "10", ",", "100", ")", ",", "\n", "task_type", "=", "task_type", ",", "max_pred_per_query", "=", "100", ",", "\n", "match_number", "=", "match_number", ",", "verbose", "=", "verbose", ",", "use_desc_type", "=", "use_desc_type", ")", "\n", "metrics_raw_dict", "[", "task_type", "]", "=", "metrics", "\n", "metrics_raw_dict", "[", "task_type", "+", "\"_by_type\"", "]", "=", "metrics_by_type", "\n", "\n", "", "for", "task_type", "in", "submitted_task_types", ":", "\n", "        ", "eval_metrics", "[", "task_type", "]", "=", "metrics_raw_dict", "[", "task_type", "]", "\n", "", "if", "use_desc_type", ":", "\n", "        ", "for", "task_type", "in", "submitted_task_types", ":", "\n", "            ", "eval_metrics", "[", "task_type", "+", "\"_by_type\"", "]", "=", "metrics_raw_dict", "[", "task_type", "+", "\"_by_type\"", "]", "\n", "", "", "return", "eval_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.eval_main": [[286, 304], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "tvr_standalone_eval.load_json", "tvr_standalone_eval.load_jsonl", "tvr_standalone_eval.eval_retrieval", "print", "open", "f.write", "json.dumps", "json.dumps"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.parse_args", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_jsonl", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.eval_retrieval"], ["", "def", "eval_main", "(", ")", ":", "\n", "    ", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"TVR Evaluation Script\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--submission_path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to generated prediction file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gt_path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to GT file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_path\"", ",", "type", "=", "str", ",", "help", "=", "\"path to save the results\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not_verbose\"", ",", "action", "=", "\"store_true\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "verbose", "=", "not", "args", ".", "not_verbose", "\n", "submission", "=", "load_json", "(", "args", ".", "submission_path", ")", "\n", "gt", "=", "load_jsonl", "(", "args", ".", "gt_path", ")", "\n", "results", "=", "eval_retrieval", "(", "submission", ",", "gt", ",", "iou_thds", "=", "(", "0.5", ",", "0.7", ")", ",", "verbose", "=", "verbose", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "json", ".", "dumps", "(", "results", ",", "indent", "=", "4", ")", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "save_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "results", ",", "indent", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.ModelSaver.__init__": [[113, 117], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ",", "prefix", "=", "'model_step'", ",", "suffix", "=", "'pt'", ")", ":", "\n", "        ", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "suffix", "=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.ModelSaver.save": [[118, 134], ["os.path.join", "state_dict.items", "torch.save", "torch.save", "isinstance", "v.cpu", "model.state_dict().items", "optimizer.state_dict", "model.state_dict", "v.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "save", "(", "self", ",", "model", ",", "step", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "output_model_file", "=", "join", "(", "self", ".", "output_dir", ",", "\n", "f\"{self.prefix}_{step}.{self.suffix}\"", ")", "\n", "state_dict", "=", "{", "k", ":", "v", ".", "cpu", "(", ")", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "else", "v", "\n", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'word_embeddings.weight'", "in", "k", "or", "'decoder.weight'", "in", "k", ":", "\n", "                ", "assert", "v", ".", "size", "(", "0", ")", "%", "8", "==", "0", "\n", "state_dict", "[", "'vocab_padded'", "]", "=", "True", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "state_dict", "[", "'vocab_padded'", "]", "=", "False", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "output_model_file", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "dump", "=", "{", "'step'", ":", "step", ",", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "dump", ",", "f'{self.output_dir}/train_state_{step}.pt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.__init__": [[137, 154], ["os.path.exists", "json.load", "os.path.exists", "os.path.exists", "utils.logger.LOGGER.info", "save.TrainingRestorer.restore", "open", "vars"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.restore"], ["    ", "def", "__init__", "(", "self", ",", "opts", ",", "model", ",", "optimizer", ")", ":", "\n", "        ", "if", "exists", "(", "f'{opts.output_dir}/log/hps.json'", ")", ":", "\n", "            ", "restore_opts", "=", "json", ".", "load", "(", "open", "(", "\n", "f'{opts.output_dir}/log/hps.json'", ",", "'r'", ")", ")", "\n", "assert", "vars", "(", "opts", ")", "==", "restore_opts", "\n", "# keep 2 checkpoints in case of corrupted", "\n", "", "self", ".", "save_path", "=", "f'{opts.output_dir}/restore.pt'", "\n", "self", ".", "backup_path", "=", "f'{opts.output_dir}/restore_backup.pt'", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "save_steps", "=", "opts", ".", "save_steps", "\n", "self", ".", "amp", "=", "opts", ".", "fp16", "\n", "if", "exists", "(", "self", ".", "save_path", ")", "or", "exists", "(", "self", ".", "backup_path", ")", ":", "\n", "            ", "LOGGER", ".", "info", "(", "'found previous checkpoint. try to resume...'", ")", "\n", "self", ".", "restore", "(", "opts", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "global_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.step": [[155, 159], ["save.TrainingRestorer.save"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save"], ["", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_step", "+=", "1", "\n", "if", "self", ".", "global_step", "%", "self", ".", "save_steps", "==", "0", ":", "\n", "            ", "self", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save": [[160, 169], ["os.path.exists", "torch.save", "save._to_cpu", "save._to_cpu", "apex.amp.state_dict", "os.rename", "save.TrainingRestorer.model.state_dict", "save.TrainingRestorer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.save", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cpu", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cpu"], ["", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "checkpoint", "=", "{", "'global_step'", ":", "self", ".", "global_step", ",", "\n", "'model_state_dict'", ":", "_to_cpu", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", ",", "\n", "'optim_state_dict'", ":", "_to_cpu", "(", "self", ".", "optimizer", ".", "state_dict", "(", ")", ")", "}", "\n", "if", "self", ".", "amp", ":", "\n", "            ", "checkpoint", "[", "'amp_state_dict'", "]", "=", "amp", ".", "state_dict", "(", ")", "\n", "", "if", "exists", "(", "self", ".", "save_path", ")", ":", "\n", "            ", "os", ".", "rename", "(", "self", ".", "save_path", ",", "self", ".", "backup_path", ")", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.TrainingRestorer.restore": [[170, 182], ["save.TrainingRestorer.model.load_state_dict", "save.TrainingRestorer.optimizer.load_state_dict", "utils.logger.LOGGER.info", "torch.load", "save._to_cuda", "save._to_cuda", "apex.amp.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cuda", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cuda"], ["", "def", "restore", "(", "self", ",", "opts", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "save_path", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "backup_path", ")", "\n", "", "self", ".", "global_step", "=", "checkpoint", "[", "'global_step'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "_to_cuda", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "\n", "_to_cuda", "(", "checkpoint", "[", "'optim_state_dict'", "]", ")", ")", "\n", "if", "self", ".", "amp", ":", "\n", "            ", "amp", ".", "load_state_dict", "(", "checkpoint", "[", "'amp_state_dict'", "]", ")", "\n", "", "LOGGER", ".", "info", "(", "f'resume training from step {self.global_step}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save.save_training_meta": [[21, 74], ["os.makedirs", "os.makedirs", "os.path.join", "utils.basic_utils.save_json", "utils.basic_utils.load_json", "os.path.join", "utils.basic_utils.save_json", "os.path.join", "os.path.join", "vars", "utils.logger.LOGGER.info", "subprocess.run", "subprocess.run.stdout.decode().strip", "utils.logger.LOGGER.info", "subprocess.run", "subprocess.run.stdout.decode().strip", "utils.logger.LOGGER.info", "os.path.abspath", "subprocess.check_output().strip", "os.path.dirname", "open", "json.dump", "utils.logger.LOGGER.exception", "utils.logger.LOGGER.warn", "os.path.dirname", "os.path.join", "utils.logger.LOGGER.info", "utils.basic_utils.make_zipfile", "utils.logger.LOGGER.info", "subprocess.run.stdout.decode", "subprocess.run.stdout.decode", "subprocess.check_output", "os.path.join", "os.path.dirname", "bool", "os.path.realpath"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.make_zipfile", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode"], ["def", "save_training_meta", "(", "args", ")", ":", "\n", "# Comment out, since rank is not saved to args. Safeguard save_training_meta already in training scripts.", "\n", "# if args.rank > 0:", "\n", "#    return", "\n", "\n", "# args is an EasyDict object, treat it the same as a normal dict", "\n", "    ", "os", ".", "makedirs", "(", "join", "(", "args", ".", "output_dir", ",", "'log'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "join", "(", "args", ".", "output_dir", ",", "'ckpt'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# training args", "\n", "save_args_path", "=", "join", "(", "args", ".", "output_dir", ",", "'log'", ",", "'hps.json'", ")", "\n", "save_json", "(", "vars", "(", "args", ")", ",", "save_args_path", ",", "save_pretty", "=", "True", ")", "\n", "\n", "# model args", "\n", "model_config", "=", "load_json", "(", "args", ".", "model_config", ")", "\n", "save_model_config_path", "=", "join", "(", "args", ".", "output_dir", ",", "'log'", ",", "'model_config.json'", ")", "\n", "save_json", "(", "model_config", ",", "save_model_config_path", ",", "save_pretty", "=", "True", ")", "\n", "# git info", "\n", "try", ":", "\n", "        ", "LOGGER", ".", "info", "(", "\"Waiting on git info....\"", ")", "\n", "c", "=", "subprocess", ".", "run", "(", "[", "\"git\"", ",", "\"rev-parse\"", ",", "\"--abbrev-ref\"", ",", "\"HEAD\"", "]", ",", "\n", "timeout", "=", "10", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "git_branch_name", "=", "c", ".", "stdout", ".", "decode", "(", ")", ".", "strip", "(", ")", "\n", "LOGGER", ".", "info", "(", "\"Git branch: %s\"", ",", "git_branch_name", ")", "\n", "c", "=", "subprocess", ".", "run", "(", "[", "\"git\"", ",", "\"rev-parse\"", ",", "\"HEAD\"", "]", ",", "\n", "timeout", "=", "10", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "git_sha", "=", "c", ".", "stdout", ".", "decode", "(", ")", ".", "strip", "(", ")", "\n", "LOGGER", ".", "info", "(", "\"Git SHA: %s\"", ",", "git_sha", ")", "\n", "git_dir", "=", "abspath", "(", "dirname", "(", "__file__", ")", ")", "\n", "git_status", "=", "subprocess", ".", "check_output", "(", "\n", "[", "'git'", ",", "'status'", ",", "'--short'", "]", ",", "\n", "cwd", "=", "git_dir", ",", "universal_newlines", "=", "True", ")", ".", "strip", "(", ")", "\n", "with", "open", "(", "join", "(", "args", ".", "output_dir", ",", "'log'", ",", "'git_info.json'", ")", ",", "\n", "'w'", ")", "as", "writer", ":", "\n", "            ", "json", ".", "dump", "(", "{", "'branch'", ":", "git_branch_name", ",", "\n", "'is_dirty'", ":", "bool", "(", "git_status", ")", ",", "\n", "'status'", ":", "git_status", ",", "\n", "'sha'", ":", "git_sha", "}", ",", "\n", "writer", ",", "indent", "=", "4", ")", "\n", "", "", "except", "(", "subprocess", ".", "TimeoutExpired", ",", "subprocess", ".", "CalledProcessError", ")", "as", "e", ":", "\n", "        ", "LOGGER", ".", "exception", "(", "e", ")", "\n", "LOGGER", ".", "warn", "(", "\"Git info not found. Saving code into zip instead...\"", ")", "\n", "# save a copy of the codebase.", "\n", "# !!!Do not store heavy file in your codebase when using it.", "\n", "code_dir", "=", "dirname", "(", "dirname", "(", "realpath", "(", "__file__", ")", ")", ")", "\n", "code_zip_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"code.zip\"", ")", "\n", "LOGGER", ".", "info", "(", "f\"Saving code from {code_dir} to {code_zip_filename}...\"", ")", "\n", "make_zipfile", "(", "code_dir", ",", "code_zip_filename", ",", "\n", "enclosing_dir", "=", "\"code\"", ",", "\n", "exclude_dirs_substring", "=", "\"results\"", ",", "\n", "exclude_dirs", "=", "[", "\"results\"", ",", "\"debug_results\"", ",", "\"__pycache__\"", "]", ",", "\n", "exclude_extensions", "=", "[", "\".pyc\"", ",", "\".ipynb\"", ",", "\".swap\"", "]", ")", "\n", "LOGGER", ".", "info", "(", "\"Saving code done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cuda": [[76, 92], ["isinstance", "state.cuda", "isinstance", "state.type", "ret.float.float", "isinstance", "save._to_cuda", "tuple", "isinstance", "save._to_cuda", "save._to_cuda", "state.items"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cuda", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cuda", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cuda"], ["", "", "def", "_to_cuda", "(", "state", ")", ":", "\n", "    ", "\"\"\" usually load from cpu checkpoint but need to load to cuda \"\"\"", "\n", "if", "isinstance", "(", "state", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "ret", "=", "state", ".", "cuda", "(", ")", "# assume propoerly set py torch.cuda.set_device", "\n", "if", "'Half'", "in", "state", ".", "type", "(", ")", ":", "\n", "            ", "ret", "=", "ret", ".", "float", "(", ")", "# apex O2 requires it", "\n", "", "return", "ret", "\n", "", "elif", "isinstance", "(", "state", ",", "list", ")", ":", "\n", "        ", "new_state", "=", "[", "_to_cuda", "(", "t", ")", "for", "t", "in", "state", "]", "\n", "", "elif", "isinstance", "(", "state", ",", "tuple", ")", ":", "\n", "        ", "new_state", "=", "tuple", "(", "_to_cuda", "(", "t", ")", "for", "t", "in", "state", ")", "\n", "", "elif", "isinstance", "(", "state", ",", "dict", ")", ":", "\n", "        ", "new_state", "=", "{", "n", ":", "_to_cuda", "(", "t", ")", "for", "n", ",", "t", "in", "state", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "return", "state", "\n", "", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cpu": [[94, 110], ["isinstance", "state.cpu", "isinstance", "state.type", "ret.half.half", "isinstance", "save._to_cpu", "tuple", "isinstance", "save._to_cpu", "save._to_cpu", "state.items"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cpu", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cpu", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.save._to_cpu"], ["", "def", "_to_cpu", "(", "state", ")", ":", "\n", "    ", "\"\"\" store in cpu to avoid GPU0 device, fp16 to save space \"\"\"", "\n", "if", "isinstance", "(", "state", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "ret", "=", "state", ".", "cpu", "(", ")", "\n", "if", "'Float'", "in", "state", ".", "type", "(", ")", ":", "\n", "            ", "ret", "=", "ret", ".", "half", "(", ")", "\n", "", "return", "ret", "\n", "", "elif", "isinstance", "(", "state", ",", "list", ")", ":", "\n", "        ", "new_state", "=", "[", "_to_cpu", "(", "t", ")", "for", "t", "in", "state", "]", "\n", "", "elif", "isinstance", "(", "state", ",", "tuple", ")", ":", "\n", "        ", "new_state", "=", "tuple", "(", "_to_cpu", "(", "t", ")", "for", "t", "in", "state", ")", "\n", "", "elif", "isinstance", "(", "state", ",", "dict", ")", ":", "\n", "        ", "new_state", "=", "{", "n", ":", "_to_cpu", "(", "t", ")", "for", "n", ",", "t", "in", "state", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "return", "state", "\n", "", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.Struct.__init__": [[19, 21], ["misc.Struct.__dict__.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dict_", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "dict_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.NoOp.__getattr__": [[25, 27], ["None"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "noop", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.NoOp.noop": [[28, 30], ["None"], "methods", ["None"], ["", "def", "noop", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_dropout": [[32, 39], ["model.named_modules", "isinstance", "utils.logger.LOGGER.info"], "function", ["None"], ["", "", "def", "set_dropout", "(", "model", ",", "drop_p", ")", ":", "\n", "    ", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "# we might want to tune dropout for smaller dataset", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Dropout", ")", ":", "\n", "            ", "if", "module", ".", "p", "!=", "drop_p", ":", "\n", "                ", "module", ".", "p", "=", "drop_p", "\n", "LOGGER", ".", "info", "(", "f'{name} set to {drop_p}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.utils.misc.set_random_seed": [[41, 46], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "", "", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.__init__": [[25, 42], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-6", ",", "\n", "weight_decay", "=", "0.0", ",", "correct_bias", "=", "True", ")", ":", "\n", "        ", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - \"", "\n", "\"should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - \"", "\n", "\"should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - \"", "\n", "\"should be >= 0.0\"", ".", "format", "(", "eps", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "correct_bias", "=", "correct_bias", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.optim.adamw.AdamW.step": [[43, 107], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse '", "\n", "'gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1.0", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1.0", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "step_size", "=", "group", "[", "'lr'", "]", "\n", "if", "group", "[", "'correct_bias'", "]", ":", "# No bias correction for Bert", "\n", "                    ", "bias_correction1", "=", "1.0", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1.0", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "(", "step_size", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "\n", "/", "bias_correction1", ")", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is", "\n", "# *not* the correct way of using L2 regularization/weight decay", "\n", "# with Adam, since that will interact with the m and v", "\n", "# parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't", "\n", "# interact with the m/v parameters. This is equivalent to", "\n", "# adding the square of the weights to the loss with plain", "\n", "# (non-momentum) SGD.", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.optim.misc.build_optimizer": [[14, 51], ["OptimCls", "model.named_parameters", "model.named_parameters", "ValueError", "any", "any", "any", "any"], "function", ["None"], ["\n", "from", "utils", ".", "logger", "import", "LOGGER", "\n", "\n", "\n", "class", "Struct", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dict_", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "dict_", ")", "\n", "\n", "\n", "", "", "class", "NoOp", "(", "object", ")", ":", "\n", "    ", "\"\"\" useful for distributed training No-Ops \"\"\"", "\n", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "noop", "\n", "\n", "", "def", "noop", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "\n", "\n", "", "", "def", "set_dropout", "(", "model", ",", "drop_p", ")", ":", "\n", "    ", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "# we might want to tune dropout for smaller dataset", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Dropout", ")", ":", "\n", "            ", "if", "module", ".", "p", "!=", "drop_p", ":", "\n", "                ", "module", ".", "p", "=", "drop_p", "\n", "LOGGER", ".", "info", "(", "f'{name} set to {drop_p}'", ")", "\n", "\n", "\n", "", "", "", "", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.noam_schedule": [[13, 18], ["None"], "function", ["None"], ["def", "noam_schedule", "(", "step", ",", "warmup_step", "=", "4000", ")", ":", "\n", "    ", "\"\"\" original Transformer schedule\"\"\"", "\n", "if", "step", "<=", "warmup_step", ":", "\n", "        ", "return", "step", "/", "warmup_step", "\n", "", "return", "(", "warmup_step", "**", "0.5", ")", "*", "(", "step", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.warmup_linear": [[20, 25], ["max"], "function", ["None"], ["", "def", "warmup_linear", "(", "step", ",", "warmup_step", ",", "tot_step", ")", ":", "\n", "    ", "\"\"\" BERT schedule \"\"\"", "\n", "if", "step", "<", "warmup_step", ":", "\n", "        ", "return", "step", "/", "warmup_step", "\n", "", "return", "max", "(", "0", ",", "(", "tot_step", "-", "step", ")", "/", "(", "tot_step", "-", "warmup_step", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.vqa_schedule": [[27, 41], ["math.ceil"], "function", ["None"], ["", "def", "vqa_schedule", "(", "step", ",", "warmup_interval", ",", "decay_interval", ",", "\n", "decay_start", ",", "decay_rate", ")", ":", "\n", "    ", "\"\"\" VQA schedule from MCAN \"\"\"", "\n", "if", "step", "<", "warmup_interval", ":", "\n", "        ", "return", "1", "/", "4", "\n", "", "elif", "step", "<", "2", "*", "warmup_interval", ":", "\n", "        ", "return", "2", "/", "4", "\n", "", "elif", "step", "<", "3", "*", "warmup_interval", ":", "\n", "        ", "return", "3", "/", "4", "\n", "", "elif", "step", ">=", "decay_start", ":", "\n", "        ", "num_decay", "=", "ceil", "(", "(", "step", "-", "decay_start", ")", "/", "decay_interval", ")", "\n", "return", "decay_rate", "**", "num_decay", "\n", "", "else", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.get_lr_sched": [[43, 50], ["sched.warmup_linear"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.optim.sched.warmup_linear"], ["", "", "def", "get_lr_sched", "(", "global_step", ",", "opts", ")", ":", "\n", "# learning rate scheduling", "\n", "    ", "lr_this_step", "=", "opts", ".", "learning_rate", "*", "warmup_linear", "(", "\n", "global_step", ",", "opts", ".", "warmup_steps", ",", "opts", ".", "num_train_steps", ")", "\n", "if", "lr_this_step", "<=", "0", ":", "\n", "        ", "lr_this_step", "=", "1e-8", "\n", "", "return", "lr_this_step", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.videoQA.HeroForVideoQA.__init__": [[22, 35], ["model.HeroModel.__init__", "torch.nn.Linear", "layers.MLPLayer", "copy.deepcopy", "layers.MLPLayer"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", "\n", "\n", "hsz", "=", "config", ".", "c_config", ".", "hidden_size", "\n", "\n", "self", ".", "qa_pool", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "hsz", ",", "out_features", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "qa_pred_head", "=", "MLPLayer", "(", "hsz", ",", "1", ")", "\n", "\n", "# in tvqa/how2qa, we also have annotations for st and ed frame idx", "\n", "self", ".", "st_ed_pool", "=", "copy", ".", "deepcopy", "(", "self", ".", "qa_pool", ")", "\n", "self", ".", "st_ed_pred_head", "=", "MLPLayer", "(", "hsz", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.videoQA.HeroForVideoQA.get_modularized_video": [[36, 60], ["videoQA.HeroForVideoQA.st_ed_pool", "videoQA.HeroForVideoQA.qa_pool", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.einsum", "torch.einsum", "modeling_utils.mask_logits", "modeling_utils.mask_logits", "torch.einsum.squeeze", "torch.einsum.squeeze", "frame_mask.unsqueeze", "frame_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits"], ["", "def", "get_modularized_video", "(", "self", ",", "frame_embeddings", ",", "frame_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_embeddings: (Nv, Nq, L, D)\n            frame_mask: (Nv, Nq, L)\n        \"\"\"", "\n", "st_ed_attn_scores", "=", "self", ".", "st_ed_pool", "(", "\n", "frame_embeddings", ")", "# (Nv, Nq, L, 1)", "\n", "qa_attn_scores", "=", "self", ".", "qa_pool", "(", "frame_embeddings", ")", "\n", "\n", "st_ed_attn_scores", "=", "F", ".", "softmax", "(", "\n", "mask_logits", "(", "st_ed_attn_scores", ",", "\n", "frame_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "qa_attn_scores", "=", "F", ".", "softmax", "(", "\n", "mask_logits", "(", "qa_attn_scores", ",", "\n", "frame_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "# TODO check whether it is the same", "\n", "st_ed_pooled_video", "=", "torch", ".", "einsum", "(", "\n", "\"vqlm,vqld->vlmd\"", ",", "st_ed_attn_scores", ",", "\n", "frame_embeddings", ")", "# (Nv, L, 1, D)", "\n", "qa_pooled_video", "=", "torch", ".", "einsum", "(", "\n", "\"vqlm,vqld->vqmd\"", ",", "qa_attn_scores", ",", "\n", "frame_embeddings", ")", "# (Nv, Nq, 1, D)", "\n", "return", "st_ed_pooled_video", ".", "squeeze", "(", "2", ")", ",", "qa_pooled_video", ".", "squeeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.videoQA.HeroForVideoQA.forward": [[61, 113], ["collections.defaultdict", "batch[].squeeze", "videoQA.HeroForVideoQA.v_encoder.forward_repr", "videoQA.HeroForVideoQA.v_encoder.c_encoder.embeddings", "videoQA.HeroForVideoQA.v_encoder.f_encoder._compute_txt_embeddings", "torch.cat", "torch.cat", "videoQA.HeroForVideoQA.v_encoder.c_encoder.forward_encoder", "len", "video_embeddings.view.view.view", "c_attn_masks.view", "video_masks.to.to.to", "videoQA.HeroForVideoQA.get_modularized_video", "videoQA.HeroForVideoQA.st_ed_pred_head", "modeling_utils.mask_logits", "modeling_utils.mask_logits", "videoQA.HeroForVideoQA.qa_pred_head().squeeze", "ValueError", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "videoQA.HeroForVideoQA.qa_pred_head"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_txt_embeddings", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.TemporalTrm.forward_encoder", "home.repos.pwc.inspect_result.linjieli222_HERO.model.violin.HeroForViolin.get_modularized_video", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'tvqa'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "batch", "=", "defaultdict", "(", "lambda", ":", "None", ",", "batch", ")", "\n", "if", "task", "==", "'tvqa'", "or", "task", "==", "'how2qa'", ":", "\n", "            ", "targets", "=", "batch", "[", "'targets'", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "c_attn_masks", "=", "batch", "[", "\"c_attn_masks\"", "]", "\n", "ts_targets", "=", "batch", "[", "\"ts_targets\"", "]", "\n", "# (num_video * 5, num_frames, hid_size)", "\n", "frame_embeddings", "=", "self", ".", "v_encoder", ".", "forward_repr", "(", "\n", "batch", ",", "encode_clip", "=", "False", ")", "\n", "frame_embeddings", "=", "self", ".", "v_encoder", ".", "c_encoder", ".", "embeddings", "(", "\n", "frame_embeddings", ",", "\n", "position_ids", "=", "None", ")", "\n", "qa_embeddings", "=", "self", ".", "v_encoder", ".", "f_encoder", ".", "_compute_txt_embeddings", "(", "\n", "batch", "[", "\"qa_input_ids\"", "]", ",", "batch", "[", "\"qa_pos_ids\"", "]", ",", "txt_type_ids", "=", "None", ")", "\n", "frame_qa_embeddings", "=", "torch", ".", "cat", "(", "\n", "(", "frame_embeddings", ",", "qa_embeddings", ")", ",", "dim", "=", "1", ")", "\n", "frame_qa_attn_mask", "=", "torch", ".", "cat", "(", "\n", "(", "c_attn_masks", ",", "batch", "[", "\"qa_attn_masks\"", "]", ")", ",", "dim", "=", "1", ")", "\n", "fused_video_qa", "=", "self", ".", "v_encoder", ".", "c_encoder", ".", "forward_encoder", "(", "\n", "frame_qa_embeddings", ",", "frame_qa_attn_mask", ")", "\n", "num_frames", "=", "c_attn_masks", ".", "shape", "[", "1", "]", "\n", "video_embeddings", "=", "fused_video_qa", "[", ":", ",", ":", "num_frames", ",", ":", "]", "\n", "\n", "num_videos", "=", "len", "(", "targets", ")", "\n", "num_frames", ",", "hid_size", "=", "video_embeddings", ".", "shape", "[", "1", ":", "3", "]", "\n", "video_embeddings", "=", "video_embeddings", ".", "view", "(", "\n", "num_videos", ",", "-", "1", ",", "num_frames", ",", "hid_size", ")", "\n", "video_masks", "=", "c_attn_masks", ".", "view", "(", "num_videos", ",", "-", "1", ",", "num_frames", ")", "\n", "video_masks", "=", "video_masks", ".", "to", "(", "dtype", "=", "video_embeddings", ".", "dtype", ")", "\n", "st_ed_pooled_video", ",", "qa_pooled_video", "=", "self", ".", "get_modularized_video", "(", "\n", "video_embeddings", ",", "video_masks", ")", "\n", "pred_st_ed", "=", "self", ".", "st_ed_pred_head", "(", "st_ed_pooled_video", ")", "\n", "st_prob", "=", "mask_logits", "(", "pred_st_ed", "[", ":", ",", ":", ",", "0", "]", ",", "video_masks", "[", ":", ",", "0", "]", ")", "\n", "ed_prob", "=", "mask_logits", "(", "pred_st_ed", "[", ":", ",", ":", ",", "1", "]", ",", "video_masks", "[", ":", ",", "0", "]", ")", "\n", "logits", "=", "self", ".", "qa_pred_head", "(", "qa_pooled_video", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "compute_loss", ":", "\n", "                ", "st_target", ",", "ed_target", "=", "ts_targets", "[", ":", ",", "0", "]", ",", "ts_targets", "[", ":", ",", "1", "]", "\n", "st_loss", "=", "F", ".", "cross_entropy", "(", "\n", "st_prob", ",", "st_target", ",", "reduction", "=", "\"mean\"", ",", "\n", "ignore_index", "=", "-", "1", ")", "\n", "ed_loss", "=", "F", ".", "cross_entropy", "(", "\n", "ed_prob", ",", "ed_target", ",", "reduction", "=", "\"mean\"", ",", "\n", "ignore_index", "=", "-", "1", ")", "\n", "temporal_loss", "=", "(", "st_loss", "+", "ed_loss", ")", "/", "2.", "\n", "qa_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ",", "reduction", "=", "'mean'", ",", "\n", "ignore_index", "=", "-", "1", ")", "\n", "return", "qa_loss", ",", "temporal_loss", "\n", "", "else", ":", "\n", "                ", "return", "logits", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized task: {task}'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.__init__": [[42, 107], ["isinstance", "json.loads.items", "isinstance", "io.open", "json.loads", "kwargs.pop", "kwargs.pop", "ValueError", "reader.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs RobertaModelConfig.\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in\n                `Model`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer\n                encoder.\n            num_attention_heads: Number of attention heads for each attention\n                layer in the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e.\n                feed-forward) layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string)\n                in the encoder and pooler. If string, \"gelu\", \"relu\" and\n                \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully\n                connected layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this\n                model might ever be used with. Typically set this to something\n                large just in case (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed\n                into `Model`.\n            initializer_range: The sttdev of the truncated_normal_initializer\n                for initializing all weight matrices.\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\n", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "self", ".", "output_attentions", "=", "kwargs", ".", "pop", "(", "\n", "'output_attentions'", ",", "False", ")", "\n", "self", ".", "output_hidden_states", "=", "kwargs", ".", "pop", "(", "\n", "'output_hidden_states'", ",", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size \"", "\n", "\"(int) or the path to a pretrained model config \"", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.from_dict": [[110, 118], ["encoder.RobertaModelConfig", "json_object.items"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `RobertaModelConfig` from a\n           Python dictionary of parameters.\"\"\"", "\n", "config", "=", "RobertaModelConfig", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.from_json_file": [[119, 125], ["cls.from_dict", "io.open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `RobertaModelConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.__repr__": [[126, 128], ["str", "encoder.RobertaModelConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.to_dict": [[129, 133], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.to_json_string": [[134, 137], ["json.dumps", "encoder.RobertaModelConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaPreTrainedModel.__init__": [[152, 163], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "RobertaModelConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of \"", "\n", "\"class `RobertaModelConfig`. To create a model from a Google \"", "\n", "\"pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaPreTrainedModel.init_weights": [[164, 178], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses", "\n", "# truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "\n", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "FusedLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaPreTrainedModel.load_config": [[179, 186], ["isinstance", "encoder.RobertaModelConfig.from_json_file"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoModelConfig.from_json_file"], ["", "", "@", "classmethod", "\n", "def", "load_config", "(", "cls", ",", "config", ")", ":", "\n", "# Load config", "\n", "        ", "if", "isinstance", "(", "config", ",", "str", ")", ":", "\n", "            ", "config", "=", "RobertaModelConfig", ".", "from_json_file", "(", "config", ")", "\n", "# logger.info(\"Model config {}\".format(config))", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaPreTrainedModel.from_pretrained": [[187, 202], ["cls.load_config", "cls", "modeling_utils.load_pretrained_weight"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.load_config", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.load_pretrained_weight"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "config_file", ",", "state_dict", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a UniterPreTrainedModel from a pre-trained model file or a\n        pytorch state dict.\n        Params:\n            config_file: config json file\n            state_dict: an state dictionnary\n            *inputs, **kwargs: additional input for the specific Uniter class\n        \"\"\"", "\n", "config", "=", "cls", ".", "load_config", "(", "config_file", ")", "\n", "# Instantiate model.", "\n", "model", "=", "cls", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "model", "=", "load_pretrained_weight", "(", "model", ",", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm.__init__": [[210, 225], ["encoder.RobertaPreTrainedModel.__init__", "layers.BertEncoder", "embed.SubEmbeddings", "embed.ImageEmbeddings", "layers.BertPooler", "encoder.CrossModalTrm.apply", "layers.BertLMPredictionHead", "encoder.CrossModalTrm.register_buffer", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_img_seq_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "SubEmbeddings", "(", "config", ")", "\n", "self", ".", "img_embeddings", "=", "ImageEmbeddings", "(", "\n", "config", ",", "vfeat_dim", ",", "max_img_seq_len", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "# pretraining", "\n", "self", ".", "lm_head", "=", "BertLMPredictionHead", "(", "\n", "config", ",", "self", ".", "embeddings", ".", "word_embeddings", ".", "weight", ")", "\n", "self", ".", "vocab_pad", "=", "0", "\n", "self", ".", "register_buffer", "(", "'pad'", ",", "torch", ".", "zeros", "(", "8", ",", "config", ".", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm.pad_vocab": [[226, 236], ["modeling_utils.pad_tensor_to_mul", "torch.nn.Parameter", "modeling_utils.pad_tensor_to_mul", "torch.nn.Parameter"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.pad_tensor_to_mul", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.pad_tensor_to_mul"], ["", "def", "pad_vocab", "(", "self", ")", ":", "\n", "        ", "emb_w", "=", "self", ".", "embeddings", ".", "word_embeddings", ".", "weight", ".", "data", "\n", "padded_emb_w", ",", "n_pad", "=", "pad_tensor_to_mul", "(", "emb_w", ")", "\n", "padded_emb_w", "=", "nn", ".", "Parameter", "(", "padded_emb_w", ")", "\n", "bias", ",", "_", "=", "pad_tensor_to_mul", "(", "self", ".", "lm_head", ".", "bias", ")", "\n", "padded_bias", "=", "nn", ".", "Parameter", "(", "bias", ")", "\n", "self", ".", "embeddings", ".", "word_embeddings", ".", "weight", "=", "padded_emb_w", "\n", "self", ".", "lm_head", ".", "decoder", ".", "weight", "=", "padded_emb_w", "\n", "self", ".", "lm_head", ".", "bias", "=", "padded_bias", "\n", "self", ".", "vocab_pad", "=", "n_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_txt_embeddings": [[237, 243], ["encoder.CrossModalTrm.embeddings"], "methods", ["None"], ["", "def", "_compute_txt_embeddings", "(", "self", ",", "input_ids", ",", "position_ids", ",", "\n", "txt_type_ids", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "embeddings", "(", "\n", "input_ids", "=", "input_ids", ",", "position_ids", "=", "position_ids", ",", "\n", "token_type_ids", "=", "txt_type_ids", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_img_embeddings": [[244, 255], ["encoder.CrossModalTrm.img_embeddings", "encoder.CrossModalTrm.embeddings.token_type_embeddings", "encoder.CrossModalTrm.embeddings.token_type_embeddings", "torch.ones"], "methods", ["None"], ["", "def", "_compute_img_embeddings", "(", "self", ",", "img_feat", ",", "img_pos_ids", ",", "\n", "img_type_ids", "=", "None", ",", "img_masks", "=", "None", ")", ":", "\n", "        ", "if", "img_type_ids", "is", "None", ":", "\n", "            ", "img_type_embeddings", "=", "self", ".", "embeddings", ".", "token_type_embeddings", "(", "\n", "torch", ".", "ones", "(", "1", ",", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "img_feat", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "img_type_embeddings", "=", "self", ".", "embeddings", ".", "token_type_embeddings", "(", "\n", "img_type_ids", ")", "\n", "", "output", "=", "self", ".", "img_embeddings", "(", "img_feat", ",", "img_type_embeddings", ",", "\n", "img_pos_ids", ",", "img_masks", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_img_txt_embeddings": [[256, 286], ["encoder.CrossModalTrm._compute_txt_embeddings", "encoder.CrossModalTrm._compute_img_embeddings", "gather_index.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.gather", "torch.cat", "gather_index.unsqueeze().expand.unsqueeze().expand.unsqueeze", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_txt_embeddings", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_img_embeddings"], ["", "def", "_compute_img_txt_embeddings", "(", "self", ",", "input_ids", ",", "position_ids", ",", "\n", "img_feat", ",", "img_pos_ids", ",", "gather_index", ",", "\n", "txt_type_ids", "=", "None", ",", "img_type_ids", "=", "None", ",", "\n", "img_masks", "=", "None", ")", ":", "\n", "        ", "txt_emb", ",", "img_emb", "=", "None", ",", "None", "\n", "# embedding layer", "\n", "if", "input_ids", "is", "not", "None", ":", "\n", "# txt only", "\n", "            ", "txt_emb", "=", "self", ".", "_compute_txt_embeddings", "(", "\n", "input_ids", ",", "position_ids", ",", "txt_type_ids", ")", "\n", "", "if", "img_feat", "is", "not", "None", ":", "\n", "# image only", "\n", "            ", "img_emb", "=", "self", ".", "_compute_img_embeddings", "(", "\n", "img_feat", ",", "img_pos_ids", ",", "img_type_ids", ",", "img_masks", ")", "\n", "\n", "", "if", "txt_emb", "is", "not", "None", "and", "img_emb", "is", "not", "None", ":", "\n", "            ", "assert", "gather_index", "is", "not", "None", "\n", "# align back to most compact input", "\n", "gather_index", "=", "gather_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "-", "1", ",", "self", ".", "config", ".", "hidden_size", ")", "\n", "embedding_output", "=", "torch", ".", "gather", "(", "\n", "torch", ".", "cat", "(", "[", "img_emb", ",", "txt_emb", "]", ",", "dim", "=", "1", ")", ",", "\n", "dim", "=", "1", ",", "index", "=", "gather_index", ")", "\n", "return", "embedding_output", "\n", "", "elif", "txt_emb", "is", "not", "None", ":", "\n", "            ", "return", "txt_emb", "\n", "", "elif", "img_emb", "is", "not", "None", ":", "\n", "            ", "return", "img_emb", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both img_feat and input_dis are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm.init_type_embedding": [[287, 296], ["torch.nn.Embedding", "torch.nn.Embedding.apply", "torch.nn.Embedding.weight.data[].copy_", "torch.nn.Embedding.weight.data[].copy_"], "methods", ["None"], ["", "", "def", "init_type_embedding", "(", "self", ")", ":", "\n", "        ", "new_emb", "=", "nn", ".", "Embedding", "(", "2", ",", "self", ".", "config", ".", "hidden_size", ")", "\n", "new_emb", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "for", "i", "in", "[", "0", "]", ":", "\n", "            ", "emb", "=", "self", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ".", "data", "[", "i", ",", ":", "]", "\n", "new_emb", ".", "weight", ".", "data", "[", "i", ",", ":", "]", ".", "copy_", "(", "emb", ")", "\n", "", "new_emb", ".", "weight", ".", "data", "[", "1", ",", ":", "]", ".", "copy_", "(", "emb", ")", "\n", "self", ".", "embeddings", ".", "token_type_embeddings", "=", "new_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm.forward": [[297, 335], ["collections.defaultdict", "encoder.CrossModalTrm.forward_repr", "encoder.CrossModalTrm.forward_repr", "task.startswith", "encoder.CrossModalTrm.forward_mlm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm.forward_mlm"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'repr'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "batch", "=", "defaultdict", "(", "lambda", ":", "None", ",", "batch", ")", "\n", "if", "task", "==", "'repr'", ":", "\n", "            ", "f_sub_input_ids", "=", "batch", "[", "'f_sub_input_ids'", "]", "\n", "f_sub_pos_ids", "=", "batch", "[", "'f_sub_pos_ids'", "]", "\n", "f_v_feats", "=", "batch", "[", "'f_v_feats'", "]", "\n", "f_v_pos_ids", "=", "batch", "[", "'f_v_pos_ids'", "]", "\n", "f_attn_masks", "=", "batch", "[", "'f_attn_masks'", "]", "\n", "f_gather_index", "=", "batch", "[", "'f_gather_index'", "]", "\n", "# handle mfm (frame mask)", "\n", "f_v_mask", "=", "batch", "[", "'f_v_masks'", "]", "\n", "return", "self", ".", "forward_repr", "(", "f_sub_input_ids", ",", "f_sub_pos_ids", ",", "\n", "f_v_feats", ",", "f_v_pos_ids", ",", "\n", "f_attn_masks", ",", "f_gather_index", ",", "\n", "img_masks", "=", "f_v_mask", ")", "\n", "", "elif", "task", "==", "'txt'", ":", "\n", "            ", "input_ids", "=", "batch", "[", "'input_ids'", "]", "\n", "pos_ids", "=", "batch", "[", "'pos_ids'", "]", "\n", "attn_masks", "=", "batch", "[", "'attn_masks'", "]", "\n", "return", "self", ".", "forward_repr", "(", "\n", "input_ids", "=", "input_ids", ",", "position_ids", "=", "pos_ids", ",", "\n", "img_feat", "=", "None", ",", "img_pos_ids", "=", "None", ",", "\n", "attention_mask", "=", "attn_masks", ",", "gather_index", "=", "None", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'mlm'", ")", ":", "\n", "            ", "input_ids", "=", "batch", "[", "'input_ids'", "]", "\n", "position_ids", "=", "batch", "[", "'position_ids'", "]", "\n", "img_feat", "=", "batch", "[", "'v_feat'", "]", "\n", "img_pos_ids", "=", "batch", "[", "'f_pos_ids'", "]", "\n", "attention_mask", "=", "batch", "[", "'attn_masks'", "]", "\n", "gather_index", "=", "batch", "[", "'gather_index'", "]", "\n", "txt_mask_tgt", "=", "batch", "[", "'txt_mask_tgt'", "]", "\n", "txt_labels", "=", "batch", "[", "'txt_labels'", "]", "\n", "return", "self", ".", "forward_mlm", "(", "input_ids", ",", "position_ids", ",", "\n", "img_feat", ",", "img_pos_ids", ",", "\n", "attention_mask", ",", "gather_index", ",", "\n", "txt_mask_tgt", ",", "txt_labels", ",", "compute_loss", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized task {task}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm.forward_repr": [[336, 353], ["encoder.CrossModalTrm._compute_img_txt_embeddings", "encoder.CrossModalTrm.encoder", "encoder.CrossModalTrm.pooler"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_img_txt_embeddings"], ["", "", "def", "forward_repr", "(", "self", ",", "input_ids", ",", "position_ids", ",", "img_feat", ",", "img_pos_ids", ",", "\n", "attention_mask", ",", "gather_index", "=", "None", ",", "\n", "txt_type_ids", "=", "None", ",", "img_type_ids", "=", "None", ",", "img_masks", "=", "None", ")", ":", "\n", "# embedding layer", "\n", "        ", "embedding_output", "=", "self", ".", "_compute_img_txt_embeddings", "(", "\n", "input_ids", ",", "position_ids", ",", "img_feat", ",", "img_pos_ids", ",", "\n", "gather_index", ",", "txt_type_ids", ",", "img_type_ids", ",", "img_masks", ")", "\n", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "embedding_output", ",", "attention_mask", ")", "\n", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "# add hidden_states and attentions if they are here", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "\n", "\n", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm.forward_mlm": [[355, 375], ["encoder.CrossModalTrm._compute_img_txt_embeddings", "encoder.CrossModalTrm._compute_masked_hidden", "encoder.CrossModalTrm._pad_layer_unpad", "encoder.CrossModalTrm.encoder", "torch.nn.functional.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_img_txt_embeddings", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel._compute_masked_hidden", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel._pad_layer_unpad"], ["", "def", "forward_mlm", "(", "self", ",", "input_ids", ",", "position_ids", ",", "img_feat", ",", "img_pos_ids", ",", "\n", "attention_mask", ",", "gather_index", ",", "txt_mask_tgt", ",", "\n", "txt_labels", "=", "None", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "embedding_output", "=", "self", ".", "_compute_img_txt_embeddings", "(", "\n", "input_ids", ",", "position_ids", ",", "img_feat", ",", "img_pos_ids", ",", "gather_index", ")", "\n", "sequence_output", "=", "self", ".", "encoder", "(", "embedding_output", ",", "attention_mask", ")", "[", "0", "]", "\n", "\n", "# only compute masked tokens for better efficiency", "\n", "masked_output", "=", "self", ".", "_compute_masked_hidden", "(", "sequence_output", ",", "\n", "txt_mask_tgt", ")", "\n", "prediction_scores", "=", "self", ".", "_pad_layer_unpad", "(", "masked_output", ",", "self", ".", "lm_head", ")", "\n", "if", "self", ".", "vocab_pad", ":", "\n", "            ", "prediction_scores", "=", "prediction_scores", "[", ":", ",", ":", "-", "self", ".", "vocab_pad", "]", "\n", "\n", "", "if", "compute_loss", ":", "\n", "            ", "masked_lm_loss", "=", "F", ".", "cross_entropy", "(", "prediction_scores", ",", "txt_labels", ",", "\n", "reduction", "=", "'none'", ")", "\n", "return", "masked_lm_loss", "\n", "", "else", ":", "\n", "            ", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_masked_hidden": [[376, 381], ["mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "hidden[].contiguous().view", "hidden.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "hidden[].contiguous"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "", "def", "_compute_masked_hidden", "(", "self", ",", "hidden", ",", "mask", ")", ":", "\n", "        ", "\"\"\" get only the masked region (don't compute unnecessary hiddens) \"\"\"", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "hidden", ")", "\n", "hidden_masked", "=", "hidden", "[", "mask", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hidden", ".", "size", "(", "-", "1", ")", ")", "\n", "return", "hidden_masked", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._pad_layer_unpad": [[382, 390], ["torch.cat", "layer", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "_pad_layer_unpad", "(", "self", ",", "input_", ",", "layer", ")", ":", "\n", "        ", "n_pad", "=", "8", "-", "input_", ".", "size", "(", "-", "1", ")", "%", "8", "\n", "pad", "=", "self", ".", "pad", "[", ":", "n_pad", "]", "\n", "input_", "=", "torch", ".", "cat", "(", "[", "input_", ",", "pad", "]", ",", "dim", "=", "0", ")", "\n", "output", "=", "layer", "(", "input_", ")", "\n", "if", "n_pad", ":", "\n", "            ", "output", "=", "output", "[", ":", "-", "n_pad", ",", ":", "]", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.TemporalTrm.__init__": [[397, 403], ["encoder.RobertaPreTrainedModel.__init__", "embed.FrameEmbeddings", "layers.BertEncoder", "layers.BertPooler", "encoder.TemporalTrm.apply"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "FrameEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.TemporalTrm.forward_encoder": [[404, 412], ["encoder.TemporalTrm.encoder", "encoder.TemporalTrm.pooler"], "methods", ["None"], ["", "def", "forward_encoder", "(", "self", ",", "embedding_output", ",", "attention_mask", ",", "pool", "=", "False", ")", ":", "\n", "        ", "encoder_outputs", "=", "self", ".", "encoder", "(", "embedding_output", ",", "attention_mask", ")", "\n", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "if", "pool", ":", "\n", "            ", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "return", "pooled_output", "\n", "", "return", "sequence_output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.TemporalTrm.forward": [[413, 424], ["encoder.TemporalTrm.embeddings", "encoder.TemporalTrm.forward_encoder"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.TemporalTrm.forward_encoder"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "clip_level_frame_feat", ",", "\n", "clip_level_pos_ids", ",", "\n", "attention_mask", ",", ")", ":", "\n", "# embedding layer", "\n", "        ", "embedding_output", "=", "self", ".", "embeddings", "(", "\n", "clip_level_frame_feat", ",", "\n", "position_ids", "=", "clip_level_pos_ids", ")", "\n", "output", "=", "self", ".", "forward_encoder", "(", "embedding_output", ",", "attention_mask", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.QueryFeatEncoder.__init__": [[427, 441], ["torch.nn.Module.__init__", "layers.LinearLayer", "embed.QueryFeatEmbeddings", "layers.BertAttention", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "qfeat_dim", ",", "modularized", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "query_input_proj", "=", "LinearLayer", "(", "\n", "qfeat_dim", ",", "config", ".", "hidden_size", ",", "\n", "layer_norm", "=", "True", ",", "dropout", "=", "config", ".", "hidden_dropout_prob", ",", "\n", "relu", "=", "True", ")", "\n", "self", ".", "query_pos_embed", "=", "QueryFeatEmbeddings", "(", "config", ")", "\n", "self", ".", "query_self_attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "modularized", "=", "modularized", "\n", "if", "self", ".", "modularized", ":", "\n", "            ", "self", ".", "modular_vector_mapping", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "config", ".", "hidden_size", ",", "\n", "out_features", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.QueryFeatEncoder.get_modularized_queries": [[442, 464], ["encoder.QueryFeatEncoder.modular_vector_mapping", "torch.nn.functional.softmax", "torch.einsum", "modeling_utils.mask_logits", "query_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits"], ["", "", "def", "get_modularized_queries", "(", "self", ",", "query", ",", "query_mask", ",", "\n", "return_modular_att", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            query: (N, L, D)\n            query_mask: (N, L)\n            return_modular_att: bool\n        \"\"\"", "\n", "modular_attention_scores", "=", "self", ".", "modular_vector_mapping", "(", "\n", "query", ")", "# (N, L, 1)", "\n", "\n", "modular_attention_scores", "=", "F", ".", "softmax", "(", "\n", "mask_logits", "(", "modular_attention_scores", ",", "\n", "query_mask", ".", "unsqueeze", "(", "2", ")", ")", ",", "dim", "=", "1", ")", "\n", "# TODO check whether it is the same", "\n", "modular_queries", "=", "torch", ".", "einsum", "(", "\n", "\"blm,bld->bmd\"", ",", "modular_attention_scores", ",", "\n", "query", ")", "# (N, 1, D)", "\n", "if", "return_modular_att", ":", "\n", "            ", "return", "modular_queries", "[", ":", ",", "0", "]", ",", "modular_attention_scores", "\n", "", "else", ":", "\n", "            ", "return", "modular_queries", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.QueryFeatEncoder.forward": [[465, 486], ["encoder.QueryFeatEncoder.query_input_proj", "encoder.QueryFeatEncoder.query_pos_embed", "query_attn_mask.to.to.to", "query_attn_mask.to.to.unsqueeze().unsqueeze", "encoder.QueryFeatEncoder.query_self_attention", "encoder.QueryFeatEncoder.get_modularized_queries", "query_attn_mask.to.to.unsqueeze", "next", "encoder.QueryFeatEncoder.parameters"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.QueryFeatEncoder.get_modularized_queries", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["", "", "def", "forward", "(", "self", ",", "query_feat", ",", "query_attn_mask", ",", "query_pos_ids", "=", "None", ")", ":", "\n", "# Encode Query Features", "\n", "        ", "query_feat", "=", "self", ".", "query_input_proj", "(", "query_feat", ")", "\n", "query_embeddings", "=", "self", ".", "query_pos_embed", "(", "query_feat", ")", "\n", "\n", "query_attn_mask", "=", "query_attn_mask", ".", "to", "(", "\n", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "query_attn_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "# (N, L, D_hidden)", "\n", "attended_query", "=", "self", ".", "query_self_attention", "(", "\n", "query_embeddings", ",", "extended_attention_mask", ")", "\n", "\n", "if", "self", ".", "modularized", ":", "\n", "# (N, 1, L), torch.FloatTensor", "\n", "            ", "modularized_query", "=", "self", ".", "get_modularized_queries", "(", "\n", "attended_query", "[", "0", "]", ",", "query_attn_mask", ")", "\n", "return", "modularized_query", "\n", "", "else", ":", "\n", "            ", "return", "attended_query", "[", "0", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.vr.HeroForVr.__init__": [[13, 30], ["vcmr.HeroForVcmr.__init__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "\n", "ranking_loss_type", "=", "\"hinge\"", ",", "margin", "=", "0.1", ",", "\n", "lw_neg_ctx", "=", "1", ",", "lw_neg_q", "=", "1", ",", "\n", "use_hard_negative", "=", "False", ",", "hard_pool_size", "=", "20", ",", "\n", "hard_neg_weight", "=", "10", ",", "use_all_neg", "=", "True", ")", ":", "\n", "        ", "assert", "lw_neg_ctx", "!=", "0", "or", "lw_neg_q", "!=", "0", ",", "\"Need to set lw_neg_ctx or lw_neg_q for VR training\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "\n", "ranking_loss_type", "=", "ranking_loss_type", ",", "margin", "=", "margin", ",", "\n", "lw_neg_ctx", "=", "lw_neg_ctx", ",", "lw_neg_q", "=", "lw_neg_q", ",", "\n", "lw_st_ed", "=", "0", ",", "drop_svmr_prob", "=", "1.0", ",", "\n", "use_hard_negative", "=", "use_hard_negative", ",", "\n", "hard_pool_size", "=", "hard_pool_size", ",", "\n", "hard_neg_weight", "=", "hard_neg_weight", ",", "\n", "use_all_neg", "=", "use_all_neg", ")", "\n", "assert", "self", ".", "lw_st_ed", "==", "0", ",", "\"For VR, lw_st_ed should be 0\"", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.vr.HeroForVr.forward": [[31, 43], ["ValueError", "super().forward", "super().forward"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.vcmr.HeroForVcmr.forward", "home.repos.pwc.inspect_result.linjieli222_HERO.model.vcmr.HeroForVcmr.forward"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'msrvtt_video_sub'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "if", "task", "in", "[", "'msrvtt_video_sub'", ",", "'msrvtt_video_only'", "]", ":", "\n", "            ", "if", "compute_loss", ":", "\n", "                ", "_", ",", "loss_neg_ctx", ",", "loss_neg_q", "=", "super", "(", ")", ".", "forward", "(", "\n", "batch", ",", "task", "=", "'tvr'", ",", "compute_loss", "=", "True", ")", "\n", "return", "loss_neg_ctx", ",", "loss_neg_q", "\n", "", "else", ":", "\n", "                ", "q2video_scores", ",", "_", ",", "_", "=", "super", "(", ")", ".", "forward", "(", "\n", "batch", ",", "task", "=", "'tvr'", ",", "compute_loss", "=", "False", ")", "\n", "return", "q2video_scores", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized task {task}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.vr.HeroForVr.get_pred_from_raw_query": [[44, 57], ["vr.HeroForVr.encode_txt_inputs", "vr.HeroForVr.get_video_level_scores"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.encode_txt_inputs", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_video_level_scores"], ["", "", "def", "get_pred_from_raw_query", "(", "self", ",", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "query_input_ids", ",", "query_pos_ids", ",", "\n", "query_attn_masks", ",", "cross", "=", "False", ",", "\n", "val_gather_gpus", "=", "False", ")", ":", "\n", "        ", "modularized_query", "=", "self", ".", "encode_txt_inputs", "(", "\n", "query_input_ids", ",", "query_pos_ids", ",", "\n", "query_attn_masks", ",", "attn_layer", "=", "self", ".", "q_feat_attn", ",", "\n", "normalized", "=", "False", ")", "\n", "\n", "q2video_scores", "=", "self", ".", "get_video_level_scores", "(", "\n", "modularized_query", ",", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "val_gather_gpus", ")", "\n", "return", "q2video_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.SubEmbeddings.__init__": [[13, 27], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "hidden_size", ",", "\n", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model", "\n", "# variable name and be able to load any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "FusedLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.SubEmbeddings.forward": [[28, 59], ["embed.SubEmbeddings.position_embeddings", "embed.SubEmbeddings.LayerNorm", "embed.SubEmbeddings.dropout", "embed.SubEmbeddings.word_embeddings", "embed.SubEmbeddings.token_type_embeddings", "embed.SubEmbeddings.token_type_embeddings", "embed.SubEmbeddings.create_position_ids_from_input_ids().to", "embed.SubEmbeddings.create_position_ids_from_inputs_embeds", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "embed.SubEmbeddings.create_position_ids_from_input_ids"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.ImageEmbeddings.create_position_ids_from_inputs_embeds", "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.SubEmbeddings.create_position_ids_from_input_ids"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "if", "input_ids", "is", "not", "None", ":", "\n", "# Create the position ids from the input token ids.", "\n", "# Any padded tokens remain padded.", "\n", "                ", "position_ids", "=", "self", ".", "create_position_ids_from_input_ids", "(", "\n", "input_ids", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "position_ids", "=", "self", ".", "create_position_ids_from_inputs_embeds", "(", "\n", "inputs_embeds", ")", "\n", "\n", "", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "\n", "torch", ".", "ones", "(", "1", ",", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "", "embeddings", "=", "(", "inputs_embeds", "\n", "+", "position_embeddings", "\n", "+", "token_type_embeddings", ")", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.SubEmbeddings.create_position_ids_from_input_ids": [[60, 71], ["x.ne().long", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "x.ne"], "methods", ["None"], ["", "def", "create_position_ids_from_input_ids", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Replace non-padding symbols with their position numbers.\n            Position numbers begin at padding_idx+1.\n            Padding symbols are ignored.\n            This is modified from fairseq's `utils.make_positions`.\n        :param torch.Tensor x:\n        :return torch.Tensor:\n        \"\"\"", "\n", "mask", "=", "x", ".", "ne", "(", "self", ".", "padding_idx", ")", ".", "long", "(", ")", "\n", "incremental_indicies", "=", "torch", ".", "cumsum", "(", "mask", ",", "dim", "=", "1", ")", "*", "mask", "\n", "return", "incremental_indicies", "+", "self", ".", "padding_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.SubEmbeddings.create_position_ids_from_inputs_embeds": [[72, 87], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange.unsqueeze().expand", "torch.arange.unsqueeze().expand", "inputs_embeds.size", "torch.arange.unsqueeze", "torch.arange.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "create_position_ids_from_inputs_embeds", "(", "self", ",", "inputs_embeds", ")", ":", "\n", "        ", "\"\"\" We are provided embeddings directly.\n            We cannot infer which are padded so just generate\n            sequential position ids.\n        :param torch.Tensor inputs_embeds:\n        :return torch.Tensor:\n        \"\"\"", "\n", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "sequence_length", "=", "input_shape", "[", "1", "]", "\n", "\n", "position_ids", "=", "torch", ".", "arange", "(", "\n", "self", ".", "padding_idx", "+", "1", ",", "sequence_length", "+", "self", ".", "padding_idx", "+", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "inputs_embeds", ".", "device", "\n", ")", "\n", "return", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.ImageEmbeddings.__init__": [[90, 101], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "img_dim", ",", "max_img_seq_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_linear", "=", "nn", ".", "Linear", "(", "img_dim", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "img_LayerNorm", "=", "FusedLayerNorm", "(", "img_dim", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "max_img_seq_len", ",", "\n", "config", ".", "hidden_size", ")", "\n", "self", ".", "mask_embedding", "=", "nn", ".", "Embedding", "(", "2", ",", "img_dim", ",", "padding_idx", "=", "0", ")", "\n", "\n", "# tf naming convention for layer norm", "\n", "self", ".", "LayerNorm", "=", "FusedLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.ImageEmbeddings.forward": [[102, 118], ["embed.ImageEmbeddings.img_linear", "embed.ImageEmbeddings.position_embeddings", "embed.ImageEmbeddings.LayerNorm", "embed.ImageEmbeddings.dropout", "embed.ImageEmbeddings.create_position_ids_from_inputs_embeds", "embed.ImageEmbeddings.mask_embedding", "embed.ImageEmbeddings.img_LayerNorm", "img_masks.long"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.ImageEmbeddings.create_position_ids_from_inputs_embeds"], ["", "def", "forward", "(", "self", ",", "img_feat", ",", "type_embeddings", ",", "img_pos_ids", "=", "None", ",", "\n", "img_masks", "=", "None", ")", ":", "\n", "        ", "if", "img_pos_ids", "is", "None", ":", "\n", "            ", "img_pos_ids", "=", "self", ".", "create_position_ids_from_inputs_embeds", "(", "\n", "img_feat", ")", "\n", "\n", "", "if", "img_masks", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "mask_embedding", "(", "img_masks", ".", "long", "(", ")", ")", "\n", "img_feat", "=", "img_feat", "+", "mask", "\n", "\n", "", "transformed_im", "=", "self", ".", "img_linear", "(", "self", ".", "img_LayerNorm", "(", "img_feat", ")", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "img_pos_ids", ")", "\n", "embeddings", "=", "transformed_im", "+", "position_embeddings", "+", "type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.ImageEmbeddings.create_position_ids_from_inputs_embeds": [[119, 134], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange.unsqueeze().expand", "torch.arange.unsqueeze().expand", "inputs_embeds.size", "torch.arange.unsqueeze", "torch.arange.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "create_position_ids_from_inputs_embeds", "(", "self", ",", "inputs_embeds", ")", ":", "\n", "        ", "\"\"\" We are provided embeddings directly.\n            We cannot infer which are padded so just generate\n            sequential position ids.\n        :param torch.Tensor inputs_embeds:\n        :return torch.Tensor:\n        \"\"\"", "\n", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "sequence_length", "=", "input_shape", "[", "1", "]", "\n", "\n", "position_ids", "=", "torch", ".", "arange", "(", "\n", "0", ",", "sequence_length", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "inputs_embeds", ".", "device", "\n", ")", "\n", "return", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.FrameEmbeddings.__init__": [[137, 145], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "config", ".", "hidden_size", ")", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model", "\n", "# variable name and be able to load any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "FusedLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.FrameEmbeddings.forward": [[146, 162], ["frame_feat.size", "embed.FrameEmbeddings.position_embeddings", "embed.FrameEmbeddings.LayerNorm", "embed.FrameEmbeddings.dropout", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward", "(", "self", ",", "frame_feat", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "input_shape", "=", "frame_feat", ".", "size", "(", ")", "\n", "\n", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "seq_length", "=", "frame_feat", ".", "shape", "[", "1", "]", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "frame_feat", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# num_videos, num_frames", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "# num_videos, num_frames, 768", "\n", "embeddings", "=", "frame_feat", "+", "position_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.QueryFeatEmbeddings.__init__": [[167, 173], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "QueryFeatEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "FusedLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.embed.QueryFeatEmbeddings.forward": [[174, 189], ["embed.QueryFeatEmbeddings.position_embeddings", "embed.QueryFeatEmbeddings.LayerNorm", "embed.QueryFeatEmbeddings.dropout", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_feat", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_feat: (N, L, D)\n        \"\"\"", "\n", "seq_length", "=", "input_feat", ".", "shape", "[", "1", "]", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "0", ",", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "input_feat", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "input_feat", "+", "position_embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.MLPLayer.__init__": [[49, 55], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_hsz", ",", "out_hsz", ")", ":", "\n", "        ", "super", "(", "MLPLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_1", "=", "nn", ".", "Linear", "(", "in_hsz", ",", "in_hsz", "*", "2", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "in_hsz", "*", "2", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "linear_2", "=", "nn", ".", "Linear", "(", "in_hsz", "*", "2", ",", "out_hsz", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.MLPLayer.forward": [[56, 62], ["layers.MLPLayer.linear_1", "layers.MLPLayer.act", "layers.MLPLayer.LayerNorm", "layers.MLPLayer.linear_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_1", "=", "self", ".", "linear_1", "(", "x", ")", "\n", "x_1", "=", "self", ".", "act", "(", "x_1", ")", "\n", "x_1", "=", "self", ".", "LayerNorm", "(", "x_1", ")", "\n", "x_2", "=", "self", ".", "linear_2", "(", "x_1", ")", "\n", "return", "x_2", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.GELU.forward": [[65, 68], ["layers.gelu"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.gelu"], ["    ", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "output", "=", "gelu", "(", "input_", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.LinearLayer.__init__": [[73, 85], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_hsz", ",", "out_hsz", ",", "layer_norm", "=", "True", ",", "\n", "dropout", "=", "0.1", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "LinearLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "in_hsz", ",", "eps", "=", "1e-5", ")", "\n", "", "layers", "=", "[", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "in_hsz", ",", "out_hsz", ")", "\n", "]", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.LinearLayer.forward": [[86, 94], ["layers.LinearLayer.net", "layers.LinearLayer.LayerNorm", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"(N, L, D)\"\"\"", "\n", "if", "self", ".", "layer_norm", ":", "\n", "            ", "x", "=", "self", ".", "LayerNorm", "(", "x", ")", "\n", "", "x", "=", "self", ".", "net", "(", "x", ")", "\n", "if", "self", ".", "relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "return", "x", "# (N, L, D)", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.__init__": [[97, 117], ["torch.Module.__init__", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of \"", "\n", "\"the number of attention heads (%d)\"", "%", "(", "\n", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "\n", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.transpose_for_scores": [[118, 123], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "\n", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.forward": [[124, 165], ["layers.BertSelfAttention.query", "layers.BertSelfAttention.key", "layers.BertSelfAttention.value", "layers.BertSelfAttention.transpose_for_scores", "layers.BertSelfAttention.transpose_for_scores", "layers.BertSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "layers.BertSelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "layers.BertSelfAttention.transpose", "math.sqrt", "torch.Softmax", "torch.Softmax", "torch.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\"", "\n", "# and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "\n", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "\n", "self", ".", "attention_head_size", ")", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is", "\n", "# (precomputed for all layers in BertModel forward() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "\n", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfOutput.__init__": [[168, 174], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "\n", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfOutput.forward": [[175, 180], ["layers.BertSelfOutput.dense", "layers.BertSelfOutput.dropout", "layers.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertAttention.__init__": [[183, 188], ["torch.Module.__init__", "layers.BertSelfAttention", "layers.BertSelfOutput", "set"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertAttention.prune_heads": [[189, 216], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "layers.BertAttention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "\n", "self", ".", "self", ".", "num_attention_heads", ",", "self", ".", "self", ".", "attention_head_size", ")", "\n", "# Convert to set and emove already pruned heads", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are", "\n", "# before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "\n", "# Prune linear layers", "\n", "self", ".", "self", ".", "query", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "query", ",", "index", ")", "\n", "self", ".", "self", ".", "key", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "key", ",", "index", ")", "\n", "self", ".", "self", ".", "value", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "value", ",", "index", ")", "\n", "self", ".", "output", ".", "dense", "=", "prune_linear_layer", "(", "self", ".", "output", ".", "dense", ",", "index", ",", "dim", "=", "1", ")", "\n", "\n", "# Update hyper params and store pruned heads", "\n", "self", ".", "self", ".", "num_attention_heads", "=", "self", ".", "self", ".", "num_attention_heads", "-", "len", "(", "\n", "heads", ")", "\n", "self", ".", "self", ".", "all_head_size", "=", "self", ".", "self", ".", "attention_head_size", "*", "self", ".", "self", ".", "num_attention_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertAttention.forward": [[217, 223], ["layers.BertAttention.self", "layers.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "self_outputs", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_outputs", "[", "0", "]", ",", "input_tensor", ")", "\n", "# add attentions if we output them", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertIntermediate.__init__": [[226, 235], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "\n", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "\n", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertIntermediate.forward": [[236, 240], ["layers.BertIntermediate.dense", "layers.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertOutput.__init__": [[243, 249], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "\n", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertOutput.forward": [[250, 255], ["layers.BertOutput.dense", "layers.BertOutput.dropout", "layers.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertLayer.__init__": [[258, 263], ["torch.Module.__init__", "layers.BertAttention", "layers.BertIntermediate", "layers.BertOutput"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertLayer.forward": [[264, 273], ["layers.BertLayer.attention", "layers.BertLayer.intermediate", "layers.BertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "attention_outputs", "=", "self", ".", "attention", "(", "\n", "hidden_states", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "attention_outputs", "[", "0", "]", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "# add attentions if we output them", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertPooler.__init__": [[276, 280], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertPooler.forward": [[281, 288], ["layers.BertPooler.dense", "layers.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertEncoder.__init__": [[291, 297], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "layers.BertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "BertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "\n", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertEncoder.forward": [[298, 328], ["attention_mask.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "enumerate", "layer_module", "attention_mask.unsqueeze", "next", "layers.BertEncoder.parameters"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "\n", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "\n", "hidden_states", ",", "extended_attention_mask", ",", "None", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertLMPredictionHead.__init__": [[331, 348], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bert_model_embedding_weights.size", "bert_model_embedding_weights.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "bert_model_embedding_weights.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "config", ".", "hidden_act", "\n", "", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-5", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "bert_model_embedding_weights", ".", "size", "(", "1", ")", ",", "\n", "bert_model_embedding_weights", ".", "size", "(", "0", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "bert_model_embedding_weights", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "bert_model_embedding_weights", ".", "size", "(", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertLMPredictionHead.forward": [[349, 355], ["layers.BertLMPredictionHead.dense", "layers.BertLMPredictionHead.transform_act_fn", "layers.BertLMPredictionHead.LayerNorm", "layers.BertLMPredictionHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.gelu": [[16, 26], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function\n        in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different\n        (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi)\n            * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.gelu_new": [[28, 36], ["torch.tanh", "torch.tanh", "torch.tanh", "math.sqrt", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function currently\n        in Google Bert repo (identical to OpenAI GPT).\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "0.5", "*", "x", "*", "(", "\n", "1", "+", "torch", ".", "tanh", "(", "\n", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.swish": [[38, 40], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.clones": [[357, 360], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "clones", "(", "module", ",", "n", ")", ":", "\n", "    ", "\"\"\"Produce n identical layers.\"\"\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "n", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.__init__": [[21, 61], ["model.HeroModel.__init__", "dict", "torch.nn.Linear", "torch.nn.Conv1d", "torch.nn.Conv1d", "encoder.QueryFeatEncoder"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["\n", "from", "data", "import", "(", "SubTokLmdb", ",", "\n", "VideoMlmDataset", ",", "mlm_collate", ",", "\n", "MfmDataset", ",", "mfm_collate", ",", "\n", "VsmDataset", ",", "vsm_collate", ",", "\n", "FomDataset", ",", "fom_collate", ",", "\n", "FomEvalDataset", ",", "fom_eval_collate", ",", "\n", "PrefetchLoader", ",", "MetaLoader", ")", "\n", "from", "model", ".", "model", "import", "VideoModelConfig", "\n", "from", "model", ".", "pretrain", "import", "HeroForPretraining", "\n", "from", "optim", "import", "get_lr_sched", "\n", "from", "optim", ".", "misc", "import", "build_optimizer", "\n", "\n", "from", "utils", ".", "logger", "import", "LOGGER", ",", "TB_LOGGER", ",", "RunningMeter", ",", "add_log_to_file", "\n", "from", "utils", ".", "distributed", "import", "(", "all_reduce_and_rescale_tensors", ",", "all_gather_list", ",", "\n", "broadcast_tensors", ")", "\n", "from", "utils", ".", "save", "import", "ModelSaver", ",", "save_training_meta", ",", "TrainingRestorer", "\n", "from", "utils", ".", "misc", "import", "NoOp", ",", "set_dropout", ",", "set_random_seed", "\n", "from", "utils", ".", "const", "import", "VFEAT_DIM", ",", "MAX_FRM_SEQ_LEN", "\n", "from", "config", ".", "config", "import", "shared_configs", "\n", "from", "load_data", "import", "load_video_sub_dataset", "\n", "\n", "\n", "def", "build_target_loaders", "(", "target", ",", "tgt_ratio", ",", "opts", ")", ":", "\n", "    ", "if", "'vfeat_shards'", "in", "target", ":", "\n", "        ", "sub_txt_db", "=", "SubTokLmdb", "(", "f\"{opts.txt_db}/{target['sub_txt_db']}\"", ",", "\n", "opts", ".", "max_clip_len", ")", "\n", "video_db", "=", "[", "\n", "load_video_sub_dataset", "(", "\n", "f\"{opts.img_db}/{target['vfeat_db']}/{shard}\"", ",", "sub_txt_db", ",", "\n", "target", "[", "'vfeat_interval'", "]", ",", "opts", ")", "\n", "for", "shard", "in", "target", "[", "'vfeat_shards'", "]", "\n", "]", "\n", "", "else", ":", "\n", "        ", "video_db", "=", "load_video_sub_dataset", "(", "\n", "f\"{opts.img_db}/{target['vfeat_db']}\"", ",", "\n", "f\"{opts.txt_db}/{target['sub_txt_db']}\"", ",", "\n", "target", "[", "'vfeat_interval'", "]", ",", "opts", ")", "\n", "", "train_loaders", "=", "{", "}", "\n", "val_loaders", "=", "{", "}", "\n", "for", "split", "in", "target", "[", "'splits'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.forward": [[62, 127], ["collections.defaultdict", "pretrain.HeroForPretraining.v_encoder", "pretrain.HeroForPretraining.encode_txt_inputs", "task.startswith", "random.random", "pretrain.HeroForPretraining.get_video_level_scores", "torch.zeros", "torch.zeros", "torch.zeros", "pretrain.HeroForPretraining.v_encoder", "pretrain.HeroForPretraining.get_pred_from_mod_query", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "pretrain.HeroForPretraining.get_video_level_loss", "pretrain.HeroForPretraining.v_encoder", "len", "torch.arange", "targets[].long", "targets[].long", "pretrain.HeroForPretraining.v_encoder", "st_prob.size", "len", "pretrain.HeroForPretraining.v_encoder", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.encode_txt_inputs", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_video_level_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_pred_from_mod_query", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_video_level_loss", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["        ", "if", "'ratio'", "not", "in", "split", ":", "\n", "            ", "split", "[", "'ratio'", "]", "=", "[", "1", "]", "*", "len", "(", "split", "[", "'tasks'", "]", ")", "\n", "", "assert", "len", "(", "split", "[", "'tasks'", "]", ")", "==", "len", "(", "split", "[", "'ratio'", "]", ")", "\n", "for", "task", ",", "r", "in", "zip", "(", "split", "[", "'tasks'", "]", ",", "split", "[", "'ratio'", "]", ")", ":", "\n", "            ", "name", "=", "f\"{task}_{target['name']}_{split['name']}\"", "\n", "LOGGER", ".", "info", "(", "f'loading {name} ...'", ")", "\n", "ratio", "=", "tgt_ratio", "*", "r", "\n", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                ", "all_train_ids", "=", "[", "\n", "json", ".", "load", "(", "open", "(", "f\"{opts.txt_db}/{ids}\"", ")", ")", "\n", "for", "ids", "in", "split", "[", "'train_idx'", "]", "\n", "]", "\n", "", "else", ":", "\n", "                ", "train_ids", "=", "json", ".", "load", "(", "\n", "open", "(", "f\"{opts.txt_db}/{split['train_idx']}\"", ")", ")", "\n", "", "val_ids", "=", "json", ".", "load", "(", "open", "(", "f\"{opts.txt_db}/{split['val_idx']}\"", ")", ")", "\n", "if", "task", "==", "'mlm'", ":", "\n", "                ", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                    ", "train_dset", "=", "ConcatDataset", "(", "[", "\n", "VideoMlmDataset", "(", "ids", ",", "vid_db", ",", "opts", ".", "mask_prob", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "for", "ids", ",", "vid_db", "in", "zip", "(", "all_train_ids", ",", "video_db", ")", "\n", "]", ")", "\n", "val_dset", "=", "VideoMlmDataset", "(", "\n", "val_ids", ",", "video_db", "[", "0", "]", ",", "opts", ".", "mask_prob", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "", "else", ":", "\n", "                    ", "train_dset", "=", "VideoMlmDataset", "(", "\n", "train_ids", ",", "video_db", ",", "opts", ".", "mask_prob", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "val_dset", "=", "VideoMlmDataset", "(", "\n", "val_ids", ",", "video_db", ",", "opts", ".", "mask_prob", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "", "train_collate", "=", "mlm_collate", "\n", "val_collate", "=", "mlm_collate", "\n", "", "elif", "task", "==", "'mfm-nce'", "or", "task", "==", "'mffr'", ":", "\n", "                ", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                    ", "train_dset", "=", "ConcatDataset", "(", "[", "\n", "MfmDataset", "(", "ids", ",", "vid_db", ",", "opts", ".", "mask_prob", ")", "\n", "for", "ids", ",", "vid_db", "in", "zip", "(", "all_train_ids", ",", "video_db", ")", "\n", "]", ")", "\n", "val_dset", "=", "MfmDataset", "(", "val_ids", ",", "video_db", "[", "0", "]", ",", "opts", ".", "mask_prob", ")", "\n", "", "else", ":", "\n", "                    ", "train_dset", "=", "MfmDataset", "(", "train_ids", ",", "video_db", ",", "\n", "opts", ".", "mask_prob", ")", "\n", "val_dset", "=", "MfmDataset", "(", "val_ids", ",", "video_db", ",", "opts", ".", "mask_prob", ")", "\n", "", "train_collate", "=", "mfm_collate", "\n", "val_collate", "=", "mfm_collate", "\n", "", "elif", "task", "==", "'fom'", ":", "\n", "                ", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                    ", "train_dset", "=", "ConcatDataset", "(", "[", "\n", "FomDataset", "(", "ids", ",", "vid_db", ",", "opts", ".", "mask_prob", ")", "\n", "for", "ids", ",", "vid_db", "in", "zip", "(", "all_train_ids", ",", "video_db", ")", "\n", "]", ")", "\n", "val_dset", "=", "FomEvalDataset", "(", "val_ids", ",", "video_db", "[", "0", "]", ",", "\n", "opts", ".", "mask_prob", ")", "\n", "", "else", ":", "\n", "                    ", "train_dset", "=", "FomDataset", "(", "train_ids", ",", "video_db", ",", "\n", "opts", ".", "mask_prob", ")", "\n", "val_dset", "=", "FomEvalDataset", "(", "val_ids", ",", "video_db", ",", "\n", "opts", ".", "mask_prob", ")", "\n", "", "train_collate", "=", "fom_collate", "\n", "val_collate", "=", "fom_eval_collate", "\n", "", "elif", "task", "==", "'vsm'", ":", "\n", "                ", "if", "isinstance", "(", "video_db", ",", "list", ")", ":", "\n", "                    ", "train_dset", "=", "ConcatDataset", "(", "[", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining._get_st_ed_prob": [[128, 167], ["pretrain.HeroForPretraining.video_query_linear", "context_mask.unsqueeze.unsqueeze.to", "modeling_utils.mask_logits", "modeling_utils.mask_logits", "torch.einsum", "torch.einsum.view", "pretrain.HeroForPretraining.video_st_predictor().view", "pretrain.HeroForPretraining.video_ed_predictor().view", "context_mask.unsqueeze.unsqueeze.unsqueeze", "torch.einsum", "pretrain.HeroForPretraining.video_st_predictor().squeeze", "pretrain.HeroForPretraining.video_ed_predictor().squeeze", "pretrain.HeroForPretraining.video_st_predictor", "pretrain.HeroForPretraining.video_ed_predictor", "pretrain.HeroForPretraining.video_st_predictor", "pretrain.HeroForPretraining.video_ed_predictor", "next", "torch.einsum.unsqueeze", "torch.einsum.unsqueeze", "pretrain.HeroForPretraining.parameters"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["VsmDataset", "(", "ids", ",", "vid_db", ",", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "for", "ids", ",", "vid_db", "in", "zip", "(", "all_train_ids", ",", "video_db", ")", "\n", "]", ")", "\n", "val_dset", "=", "VsmDataset", "(", "val_ids", ",", "video_db", "[", "0", "]", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "", "else", ":", "\n", "                    ", "train_dset", "=", "VsmDataset", "(", "train_ids", ",", "video_db", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "val_dset", "=", "VsmDataset", "(", "val_ids", ",", "video_db", ",", "\n", "sub_ctx_len", "=", "opts", ".", "sub_ctx_len", ")", "\n", "", "train_collate", "=", "vsm_collate", "\n", "val_collate", "=", "vsm_collate", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'undefined task {task}'", ")", "\n", "", "train_loader", "=", "DataLoader", "(", "train_dset", ",", "\n", "batch_size", "=", "opts", ".", "train_batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "train_collate", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_dset", ",", "batch_size", "=", "opts", ".", "val_batch_size", ",", "\n", "num_workers", "=", "opts", ".", "n_workers", ",", "\n", "pin_memory", "=", "opts", ".", "pin_mem", ",", "\n", "collate_fn", "=", "val_collate", ",", "shuffle", "=", "False", ")", "\n", "train_loaders", "[", "name", "]", "=", "(", "train_loader", ",", "ratio", ")", "\n", "val_loaders", "[", "name", "]", "=", "PrefetchLoader", "(", "val_loader", ")", "\n", "", "", "return", "train_loaders", ",", "val_loaders", "\n", "\n", "\n", "", "def", "main", "(", "opts", ")", ":", "\n", "    ", "hvd", ".", "init", "(", ")", "\n", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "hvd", ".", "local_rank", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "hvd", ".", "local_rank", "(", ")", ")", "\n", "opts", ".", "n_gpu", "=", "n_gpu", "\n", "LOGGER", ".", "info", "(", "\"device: {} n_gpu: {}, rank: {}, \"", "\n", "\"16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "hvd", ".", "rank", "(", ")", ",", "opts", ".", "fp16", ")", ")", "\n", "if", "hvd", ".", "rank", "(", ")", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "disabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.encode_txt_inputs": [[168, 187], ["pretrain.HeroForPretraining.v_encoder.f_encoder", "torch.nn.functional.normalize", "attn_layer"], "methods", ["None"], ["", "set_random_seed", "(", "opts", ".", "seed", ")", "\n", "\n", "# data loaders", "\n", "train_dataloaders", "=", "{", "}", "\n", "val_dataloaders", "=", "{", "}", "\n", "for", "target", ",", "t_r", "in", "zip", "(", "opts", ".", "targets", ",", "opts", ".", "targets_ratio", ")", ":", "\n", "        ", "train_loaders", ",", "val_loaders", "=", "build_target_loaders", "(", "target", ",", "t_r", ",", "opts", ")", "\n", "train_dataloaders", ".", "update", "(", "train_loaders", ")", "\n", "val_dataloaders", ".", "update", "(", "val_loaders", ")", "\n", "", "meta_loader", "=", "MetaLoader", "(", "train_dataloaders", ",", "\n", "accum_steps", "=", "opts", ".", "gradient_accumulation_steps", ",", "\n", "distributed", "=", "n_gpu", ">", "1", ")", "\n", "meta_loader", "=", "PrefetchLoader", "(", "meta_loader", ")", "\n", "\n", "# Prepare model", "\n", "if", "opts", ".", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "opts", ".", "checkpoint", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "{", "}", "\n", "", "img_pos_embed_weight_key", "=", "\"v_encoder.f_encoder.img_embeddings\"", "+"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_pred_from_mod_query": [[188, 202], ["pretrain.HeroForPretraining._get_st_ed_prob"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining._get_st_ed_prob"], ["\".position_embeddings.weight\"", "\n", "if", "img_pos_embed_weight_key", "in", "checkpoint", ":", "\n", "        ", "max_frm_seq_len", "=", "len", "(", "checkpoint", "[", "img_pos_embed_weight_key", "]", ")", "\n", "", "else", ":", "\n", "        ", "max_frm_seq_len", "=", "MAX_FRM_SEQ_LEN", "\n", "\n", "", "if", "opts", ".", "load_partial_pretrained", ":", "\n", "# from roberta", "\n", "        ", "model", "=", "HeroForPretraining", "(", "\n", "VideoModelConfig", "(", "opts", ".", "model_config", ")", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lw_neg_ctx", "=", "opts", ".", "lw_neg_ctx", ",", "\n", "lw_neg_q", "=", "opts", ".", "lw_neg_q", ",", "lw_st_ed", "=", "0", ",", "\n", "ranking_loss_type", "=", "opts", ".", "ranking_loss_type", ",", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_video_level_loss": [[203, 293], ["query_context_scores.size", "int", "torch.tensor().to", "torch.tensor().to", "query_context_scores.clone", "zip", "torch.stack", "query_context_scores.clone.transpose", "pos_video_query_scores.unsqueeze.unsqueeze.view", "range", "range", "pos_video_query_scores.unsqueeze.unsqueeze.append", "pretrain.HeroForPretraining.get_all_neg_scores", "pretrain.HeroForPretraining.get_ranking_loss", "pretrain.HeroForPretraining.get_all_neg_scores", "pretrain.HeroForPretraining.unsqueeze", "pos_video_query_scores.unsqueeze.unsqueeze.unsqueeze", "pretrain.HeroForPretraining.get_ranking_loss", "pretrain.HeroForPretraining.view", "pretrain.HeroForPretraining.get_sampled_neg_scores().unsqueeze", "pretrain.HeroForPretraining.get_ranking_loss", "pretrain.HeroForPretraining.get_sampled_neg_scores().unsqueeze", "pretrain.HeroForPretraining.get_ranking_loss", "torch.tensor", "torch.tensor", "torch.ones_like", "pretrain.HeroForPretraining.size", "torch.ones_like", "pretrain.HeroForPretraining.mean", "pretrain.HeroForPretraining.mean", "pretrain.HeroForPretraining.get_sampled_neg_scores", "pretrain.HeroForPretraining.get_sampled_neg_scores", "pretrain.HeroForPretraining.mean().mean", "pretrain.HeroForPretraining.mean().mean", "NotImplementedError", "pretrain.HeroForPretraining.mean", "pretrain.HeroForPretraining.mean"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_all_neg_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_ranking_loss", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_all_neg_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_ranking_loss", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_ranking_loss", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_ranking_loss", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_sampled_neg_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_sampled_neg_scores"], ["use_hard_negative", "=", "False", ",", "\n", "hard_pool_size", "=", "opts", ".", "hard_pool_size", ",", "\n", "margin", "=", "opts", ".", "margin", ",", "\n", "use_all_neg", "=", "opts", ".", "use_all_neg", ",", "\n", "drop_svmr_prob", "=", "opts", ".", "drop_svmr_prob", ")", "\n", "model", ".", "load_partial_pretrained", "(", "\n", "checkpoint", ",", "VFEAT_DIM", ",", "max_frm_seq_len", ",", "\n", "skip_layers", "=", "opts", ".", "skip_layer_loading", ")", "\n", "", "else", ":", "\n", "# continue training", "\n", "        ", "model", "=", "HeroForPretraining", ".", "from_pretrained", "(", "\n", "opts", ".", "model_config", ",", "\n", "state_dict", "=", "checkpoint", ",", "\n", "vfeat_dim", "=", "VFEAT_DIM", ",", "\n", "max_frm_seq_len", "=", "max_frm_seq_len", ",", "\n", "lw_neg_ctx", "=", "opts", ".", "lw_neg_ctx", ",", "\n", "lw_neg_q", "=", "opts", ".", "lw_neg_q", ",", "lw_st_ed", "=", "0", ",", "\n", "ranking_loss_type", "=", "opts", ".", "ranking_loss_type", ",", "\n", "use_hard_negative", "=", "False", ",", "\n", "hard_pool_size", "=", "opts", ".", "hard_pool_size", ",", "\n", "margin", "=", "opts", ".", "margin", ",", "\n", "use_all_neg", "=", "opts", ".", "use_all_neg", ",", "\n", "drop_svmr_prob", "=", "opts", ".", "drop_svmr_prob", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "# make sure every process has same model parameters in the beginning", "\n", "broadcast_tensors", "(", "[", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ",", "0", ")", "\n", "set_dropout", "(", "model", ",", "opts", ".", "dropout", ")", "\n", "\n", "# Prepare optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "opts", ")", "\n", "task2scaler", "=", "{", "t", ":", "i", "for", "i", ",", "t", "in", "enumerate", "(", "train_dataloaders", ".", "keys", "(", ")", ")", "}", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "num_losses", "=", "len", "(", "task2scaler", ")", ",", "\n", "enabled", "=", "opts", ".", "fp16", ",", "opt_level", "=", "'O2'", ")", "\n", "restorer", "=", "TrainingRestorer", "(", "opts", ",", "model", ",", "optimizer", ")", "\n", "all_gather_list", "(", "None", ")", "# sync to prevent slower rank to read training meta", "\n", "global_step", "=", "restorer", ".", "global_step", "\n", "TB_LOGGER", ".", "global_step", "=", "global_step", "\n", "if", "hvd", ".", "rank", "(", ")", "==", "0", ":", "\n", "        ", "save_training_meta", "(", "opts", ")", "\n", "TB_LOGGER", ".", "create", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ")", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "opts", ".", "num_train_steps", ")", "\n", "model_saver", "=", "ModelSaver", "(", "join", "(", "opts", ".", "output_dir", ",", "'ckpt'", ")", ")", "\n", "add_log_to_file", "(", "join", "(", "opts", ".", "output_dir", ",", "'log'", ",", "'log.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "pbar", "=", "NoOp", "(", ")", "\n", "model_saver", "=", "NoOp", "(", ")", "\n", "restorer", "=", "NoOp", "(", ")", "\n", "\n", "", "if", "global_step", ">", "0", ":", "\n", "        ", "pbar", ".", "update", "(", "global_step", ")", "\n", "", "LOGGER", ".", "info", "(", "f\"***** Running training with {n_gpu} GPUs *****\"", ")", "\n", "LOGGER", ".", "info", "(", "\"  Batch size = %d\"", ",", "opts", ".", "train_batch_size", ")", "\n", "LOGGER", ".", "info", "(", "\"  Accumulate steps = %d\"", ",", "opts", ".", "gradient_accumulation_steps", ")", "\n", "LOGGER", ".", "info", "(", "\"  Num steps = %d\"", ",", "opts", ".", "num_train_steps", ")", "\n", "\n", "task2loss", "=", "{", "task", ":", "RunningMeter", "(", "f'loss/{task}'", ")", "\n", "for", "task", "in", "train_dataloaders", ".", "keys", "(", ")", "}", "\n", "for", "task", "in", "train_dataloaders", ".", "keys", "(", ")", ":", "\n", "        ", "if", "task", ".", "startswith", "(", "'vsm'", ")", ":", "\n", "            ", "for", "obj", "in", "(", "'st_ed'", ",", "'neg_ctx'", ",", "'neg_q'", ")", ":", "\n", "                ", "task2loss", "[", "f\"{task}_{obj}\"", "]", "=", "RunningMeter", "(", "f'loss/{task}_{obj}'", ")", "\n", "", "", "", "model", ".", "train", "(", ")", "\n", "n_examples", "=", "defaultdict", "(", "int", ")", "\n", "start", "=", "time", "(", ")", "\n", "# quick hack for amp delay_unscale bug", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "global_step", "==", "0", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "", "assert", "all", "(", "global_step", "==", "s", "for", "s", "in", "all_gather_list", "(", "global_step", ")", ")", "\n", "for", "step", ",", "(", "task", ",", "batch", ")", "in", "enumerate", "(", "meta_loader", ")", ":", "\n", "        ", "LOGGER", ".", "debug", "(", "f\"Task: {task}\"", ")", "\n", "\n", "# hard negative in VSM", "\n", "if", "len", "(", "opts", ".", "hard_negtiave_start_step", ")", ">", "0", ":", "\n", "            ", "for", "i", ",", "hn_step", "in", "enumerate", "(", "opts", ".", "hard_negtiave_start_step", ")", ":", "\n", "                ", "if", "global_step", ">=", "hn_step", "and", "hn_step", "!=", "-", "1", ":", "\n", "                    ", "model", ".", "set_hard_negative", "(", "\n", "True", ",", "opts", ".", "hard_pool_size", "[", "i", "]", ",", "opts", ".", "hard_neg_weights", "[", "i", "]", ")", "\n", "\n", "# start-end loss", "\n", "", "", "", "if", "opts", ".", "train_span_start_step", "!=", "-", "1", "and", "global_step", ">=", "opts", ".", "train_span_start_step", ":", "\n", "            ", "model", ".", "set_train_st_ed", "(", "opts", ".", "lw_st_ed", ")", "\n", "\n", "", "train_task", "=", "task", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "n_examples", "[", "task", "]", "+=", "opts", ".", "train_batch_size", "\n", "\n", "loss", "=", "model", "(", "batch", ",", "task", "=", "train_task", ",", "compute_loss", "=", "True", ")", "\n", "if", "train_task", "==", "'vsm'", ":", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_sampled_neg_scores": [[294, 319], ["scores_masked.size", "torch.arange().to", "torch.sort", "min", "torch.arange", "torch.randint().to", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["            ", "loss_st_ed", ",", "loss_neg_ctx", ",", "loss_neg_q", "=", "loss", "\n", "loss", "=", "loss_st_ed", "+", "loss_neg_ctx", "+", "loss_neg_q", "\n", "for", "n", ",", "ls", ",", "w", "in", "(", "(", "'st_ed'", ",", "loss_st_ed", ",", "opts", ".", "lw_st_ed", ")", ",", "\n", "(", "'neg_ctx'", ",", "loss_neg_ctx", ",", "opts", ".", "lw_neg_ctx", ")", ",", "\n", "(", "'neg_q'", ",", "loss_neg_q", ",", "opts", ".", "lw_neg_q", ")", ")", ":", "\n", "                ", "ls", "=", "ls", ".", "item", "(", ")", "\n", "if", "w", ":", "\n", "                    ", "ls", "/=", "w", "\n", "", "task2loss", "[", "f'{task}_{n}'", "]", "(", "ls", ")", "\n", "", "", "elif", "train_task", "==", "\"mffr\"", ":", "\n", "            ", "loss", "=", "torch", ".", "sqrt", "(", "loss", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "task2loss", "[", "task", "]", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "delay_unscale", "=", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "!=", "0", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ",", "delay_unscale", "=", "delay_unscale", ",", "\n", "loss_id", "=", "task2scaler", "[", "task", "]", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "if", "not", "delay_unscale", ":", "\n", "# gather gradients from every processes", "\n", "# do this before unscaling to make sure every process uses", "\n", "# the same gradient scale", "\n", "                ", "grads", "=", "[", "p", ".", "grad", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", "\n", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", "]", "\n", "LOGGER", ".", "debug", "(", "\"before reduce grad\"", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_all_neg_scores": [[320, 342], ["scores_masked.size", "torch.sort", "torch.arange().to", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["all_reduce_and_rescale_tensors", "(", "grads", ",", "float", "(", "1", ")", ")", "\n", "LOGGER", ".", "debug", "(", "\"after reduce grad\"", ")", "\n", "\n", "", "", "if", "(", "step", "+", "1", ")", "%", "opts", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "global_step", "+=", "1", "\n", "\n", "# learning rate scheduling", "\n", "lr_this_step", "=", "get_lr_sched", "(", "global_step", ",", "opts", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr_this_step", "\n", "", "TB_LOGGER", ".", "add_scalar", "(", "'lr'", ",", "lr_this_step", ",", "global_step", ")", "\n", "\n", "# log loss", "\n", "# NOTE: only consider rank 0 for speed", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "{", "ll", ".", "name", ":", "ll", ".", "val", "\n", "for", "ll", "in", "task2loss", ".", "values", "(", ")", "\n", "if", "ll", ".", "val", "is", "not", "None", "}", ")", "\n", "TB_LOGGER", ".", "step", "(", ")", "\n", "\n", "LOGGER", ".", "debug", "(", "\"before norm grad\"", ")", "\n", "# update model params", "\n", "if", "opts", ".", "grad_norm", "!=", "-", "1", ":", "\n", "                ", "grad_norm", "=", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_ranking_loss": [[343, 363], ["torch.clamp", "torch.log1p", "NotImplementedError", "torch.exp"], "methods", ["None"], ["opts", ".", "grad_norm", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "'grad_norm'", ",", "grad_norm", ",", "global_step", ")", "\n", "", "LOGGER", ".", "debug", "(", "\"after norm grad\"", ")", "\n", "LOGGER", ".", "debug", "(", "\"before optim step\"", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "LOGGER", ".", "debug", "(", "\"after optim step\"", ")", "\n", "\n", "if", "global_step", "%", "100", "==", "0", ":", "\n", "                ", "LOGGER", ".", "debug", "(", "\"after gather stats\"", ")", "\n", "# monitor training throughput", "\n", "LOGGER", ".", "info", "(", "'-------------------------------------------'", ")", "\n", "LOGGER", ".", "info", "(", "f'Step {global_step}:'", ")", "\n", "for", "t", "in", "train_dataloaders", ".", "keys", "(", ")", ":", "\n", "                    ", "tot_ex", "=", "sum", "(", "all_gather_list", "(", "n_examples", "[", "t", "]", ")", ")", "\n", "ex_per_sec", "=", "int", "(", "tot_ex", "/", "(", "time", "(", ")", "-", "start", ")", ")", "\n", "LOGGER", ".", "info", "(", "f'{t}: {tot_ex} examples trained at '", "\n", "f'{ex_per_sec} ex/s'", ")", "\n", "TB_LOGGER", ".", "add_scalar", "(", "f'perf/{t}_ex_per_s'", ",", "ex_per_sec", ",", "\n", "global_step", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_video_level_scores": [[364, 414], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.einsum", "torch.cat.transpose().unsqueeze", "torch.cat.to", "modeling_utils.mask_logits", "torch.max", "torch.cat.size", "horovod.allgather().view", "horovod.allgather().view.max().item", "vsm_allgather().contiguous", "vsm_allgather().contiguous", "vsm_allgather().contiguous", "horovod.size", "torch.zeros", "torch.cat", "pad[].long", "torch.cat", "torch.cat.transpose", "horovod.allgather", "horovod.allgather().view.max", "pretrain.vsm_allgather", "pretrain.vsm_allgather", "pretrain.vsm_allgather", "torch.tensor", "horovod.rank"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.vsm_allgather", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.vsm_allgather", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.vsm_allgather"], ["", "LOGGER", ".", "debug", "(", "\"after gather stats\"", ")", "\n", "\n", "", "if", "global_step", "%", "opts", ".", "valid_steps", "==", "0", ":", "\n", "                ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", "\n", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "\n", "# step restorer in the end to prevent missing validation checkpoint", "\n", "", "restorer", ".", "step", "(", ")", "\n", "", "if", "global_step", ">=", "opts", ".", "num_train_steps", ":", "\n", "            ", "break", "\n", "\n", "", "", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "if", "global_step", "%", "opts", ".", "valid_steps", "!=", "0", ":", "\n", "        ", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "LOGGER", ".", "info", "(", "f\"Step {global_step}: start running validation\"", ")", "\n", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", "\n", "LOGGER", ".", "info", "(", "'==========================================='", ")", "\n", "model_saver", ".", "save", "(", "model", ",", "global_step", ")", "\n", "\n", "\n", "", "", "def", "validate", "(", "model", ",", "val_dataloaders", ",", "opts", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "for", "task", ",", "loader", "in", "val_dataloaders", ".", "items", "(", ")", ":", "\n", "        ", "LOGGER", ".", "info", "(", "f\"validate on {task} task\"", ")", "\n", "if", "task", ".", "startswith", "(", "'mlm'", ")", ":", "\n", "            ", "val_log", "=", "validate_mlm", "(", "model", ",", "loader", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'mffr'", ")", ":", "\n", "            ", "val_log", "=", "validate_mffr", "(", "model", ",", "loader", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'mfm-nce'", ")", ":", "\n", "            ", "val_log", "=", "validate_mfm_nce", "(", "model", ",", "loader", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'fom'", ")", ":", "\n", "            ", "val_log", "=", "validate_fom", "(", "model", ",", "loader", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'vsm'", ")", ":", "\n", "            ", "val_log", "=", "validate_vsm", "(", "model", ",", "loader", ",", "opts", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Undefined task {task}'", ")", "\n", "", "val_log", "=", "{", "f'{task}_{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", "\n", "TB_LOGGER", ".", "log_scaler_dict", "(", "\n", "{", "f'valid_{task}/{k}'", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_vsm", "(", "model", ",", "val_loader", ",", "opts", ")", ":", "\n", "    ", "LOGGER", ".", "info", "(", "\"start running VSM validation...\"", ")", "\n", "val_loss", "=", "0", "\n", "val_loss_st_ed", "=", "0", "\n", "val_loss_neg_ctx", "=", "0", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.set_hard_negative": [[415, 421], ["None"], "methods", ["None"], ["val_loss_neg_q", "=", "0", "\n", "n_ex", "=", "0", "\n", "n_ex_pos", "=", "0", "\n", "st", "=", "time", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "n_ex", "+=", "len", "(", "batch", "[", "'q_vidx'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.set_train_st_ed": [[422, 425], ["None"], "methods", ["None"], ["\n", "loss_st_ed", ",", "loss_neg_ctx", ",", "loss_neg_q", "=", "model", "(", "batch", ",", "'vsm'", ",", "compute_loss", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.VsmAllgather.forward": [[431, 440], ["horovod.allgather().view", "horovod.allgather_async", "horovod.synchronize", "horovod.size", "horovod.allgather", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["n_ex_pos", "+=", "n_pos", "\n", "\n", "", "", "val_loss_st_ed", "=", "sum", "(", "all_gather_list", "(", "val_loss_st_ed", ")", ")", "\n", "val_loss_neg_ctx", "=", "sum", "(", "all_gather_list", "(", "val_loss_neg_ctx", ")", ")", "\n", "val_loss_neg_q", "=", "sum", "(", "all_gather_list", "(", "val_loss_neg_q", ")", ")", "\n", "n_ex", "=", "sum", "(", "all_gather_list", "(", "n_ex", ")", ")", "\n", "n_ex_pos", "=", "sum", "(", "all_gather_list", "(", "n_ex_pos", ")", ")", "\n", "tot_time", "=", "time", "(", ")", "-", "st", "\n", "if", "opts", ".", "lw_st_ed", ":", "\n", "        ", "val_loss_st_ed", "/=", "n_ex", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.VsmAllgather.backward": [[441, 448], ["horovod.rank", "torch.sum().item", "grad_output.narrow", "torch.sum", "ctx.all_dims.narrow"], "methods", ["None"], ["val_loss_st_ed", "/=", "opts", ".", "lw_st_ed", "\n", "", "if", "n_ex_pos", ">", "0", "and", "opts", ".", "lw_neg_q", ">", "0", "and", "opts", ".", "lw_neg_ctx", ">", "0", ":", "\n", "        ", "val_loss_neg_ctx", "/=", "n_ex_pos", "\n", "val_loss_neg_q", "/=", "n_ex_pos", "\n", "val_loss_neg_ctx", "/=", "opts", ".", "lw_neg_ctx", "\n", "val_loss_neg_q", "/=", "opts", ".", "lw_neg_q", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.vsm_allgather": [[450, 452], ["VsmAllgather.apply"], "function", ["None"], ["opts", ".", "lw_neg_ctx", "*", "val_loss_neg_ctx", "+", "opts", ".", "lw_neg_q", "*", "val_loss_neg_q", "\n", "val_log", "=", "{", "'valid/loss_overall'", ":", "val_loss", ",", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.prune_linear_layer": [[14, 40], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "torch.nn.Linear().to", "nn.Linear().to.weight.copy_", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "nn.Linear().to.bias.copy_", "layer.weight.index_select().clone", "layer.bias.clone().detach", "layer.bias[].clone().detach", "torch.nn.Linear", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select", "layer.bias.clone", "layer.bias[].clone"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["def", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\" Prune a linear layer (a model parameters)\n        to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "if", "dim", "==", "1", ":", "\n", "            ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "nn", ".", "Linear", "(", "\n", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ",", "bias", "=", "layer", ".", "bias", "is", "not", "None", ")", ".", "to", "(", "\n", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits": [[42, 44], ["None"], "function", ["None"], ["", "def", "mask_logits", "(", "target", ",", "mask", ",", "eps", "=", "-", "1e4", ")", ":", "\n", "    ", "return", "target", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.load_partial_checkpoint": [[46, 66], ["int", "checkpoint.items", "str", "str", "enumerate", "k.split", "list", "range"], "function", ["None"], ["", "def", "load_partial_checkpoint", "(", "checkpoint", ",", "n_layers", ",", "skip_layers", "=", "True", ")", ":", "\n", "    ", "if", "skip_layers", ":", "\n", "        ", "new_checkpoint", "=", "{", "}", "\n", "gap", "=", "int", "(", "12", "/", "n_layers", ")", "\n", "prefix", "=", "\"roberta.encoder.layer.\"", "\n", "layer_range", "=", "{", "str", "(", "l", ")", ":", "str", "(", "i", ")", "for", "i", ",", "l", "in", "enumerate", "(", "\n", "list", "(", "range", "(", "gap", "-", "1", ",", "12", ",", "gap", ")", ")", ")", "}", "\n", "for", "k", ",", "v", "in", "checkpoint", ".", "items", "(", ")", ":", "\n", "            ", "if", "prefix", "in", "k", ":", "\n", "                ", "layer_name", "=", "k", ".", "split", "(", "\".\"", ")", "\n", "layer_num", "=", "layer_name", "[", "3", "]", "\n", "if", "layer_num", "in", "layer_range", ":", "\n", "                    ", "layer_name", "[", "3", "]", "=", "layer_range", "[", "layer_num", "]", "\n", "new_layer_name", "=", "\".\"", ".", "join", "(", "layer_name", ")", "\n", "new_checkpoint", "[", "new_layer_name", "]", "=", "v", "\n", "", "", "else", ":", "\n", "                ", "new_checkpoint", "[", "k", "]", "=", "v", "\n", "", "", "", "else", ":", "\n", "        ", "new_checkpoint", "=", "checkpoint", "\n", "", "return", "new_checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.load_pretrained_weight": [[68, 122], ["state_dict.copy.keys", "zip", "getattr", "state_dict.copy.copy", "modeling_utils.load_pretrained_weight.load"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["", "def", "load_pretrained_weight", "(", "model", ",", "state_dict", ")", ":", "\n", "# Load from a PyTorch state_dict", "\n", "    ", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "            ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "        ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "        ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "local_metadata", "=", "(", "{", "}", "if", "metadata", "is", "None", "\n", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "\n", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "child", "is", "not", "None", ":", "\n", "                ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "", "", "", "start_prefix", "=", "''", "\n", "if", "not", "hasattr", "(", "model", ",", "'roberta'", ")", "and", "any", "(", "s", ".", "startswith", "(", "'roberta.'", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "start_prefix", "=", "'roberta.'", "\n", "\n", "", "load", "(", "model", ",", "prefix", "=", "start_prefix", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Weights of {} not initialized from \"", "\n", "\"pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in \"", "\n", "\"{}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Error(s) in loading state_dict for '", "\n", "'{}:\\n\\t{}'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\n", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.pad_tensor_to_mul": [[124, 136], ["list", "tensor.size", "torch.zeros", "torch.cat"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "pad_tensor_to_mul", "(", "tensor", ",", "dim", "=", "0", ",", "mul", "=", "8", ")", ":", "\n", "    ", "\"\"\" pad tensor to multiples (8 for tensor cores) \"\"\"", "\n", "t_size", "=", "list", "(", "tensor", ".", "size", "(", ")", ")", "\n", "n_pad", "=", "mul", "-", "t_size", "[", "dim", "]", "%", "mul", "\n", "if", "n_pad", "==", "mul", ":", "\n", "        ", "n_pad", "=", "0", "\n", "padded_tensor", "=", "tensor", "\n", "", "else", ":", "\n", "        ", "t_size", "[", "dim", "]", "=", "n_pad", "\n", "pad", "=", "torch", ".", "zeros", "(", "*", "t_size", ",", "dtype", "=", "tensor", ".", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "padded_tensor", "=", "torch", ".", "cat", "(", "[", "tensor", ",", "pad", "]", ",", "dim", "=", "dim", ")", "\n", "", "return", "padded_tensor", ",", "n_pad", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoModelConfig.__init__": [[32, 49], ["isinstance", "encoder.RobertaModelConfig.from_dict", "encoder.RobertaModelConfig.from_dict", "io.open", "json.loads", "encoder.RobertaModelConfig.from_dict", "encoder.RobertaModelConfig.from_dict", "reader.read"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.from_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.from_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.from_dict", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.RobertaModelConfig.from_dict"], ["    ", "def", "__init__", "(", "self", ",", "config_json_file", ")", ":", "\n", "        ", "assert", "isinstance", "(", "config_json_file", ",", "str", ")", "\n", "with", "open", "(", "config_json_file", ",", "\n", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "self", ".", "f_config", "=", "RobertaModelConfig", ".", "from_dict", "(", "config", "[", "\"f_config\"", "]", ")", "\n", "self", ".", "c_config", "=", "RobertaModelConfig", ".", "from_dict", "(", "config", "[", "\"c_config\"", "]", ")", "\n", "if", "\"q_config\"", "in", "config", ":", "\n", "            ", "self", ".", "q_config", "=", "RobertaModelConfig", ".", "from_dict", "(", "config", "[", "\"q_config\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "q_config", "=", "None", "\n", "# for TVC decoder", "\n", "", "if", "\"d_config\"", "in", "config", ":", "\n", "            ", "self", ".", "d_config", "=", "RobertaModelConfig", ".", "from_dict", "(", "config", "[", "\"d_config\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "d_config", "=", "None", "\n", "", "self", ".", "initializer_range", "=", "self", ".", "f_config", ".", "initializer_range", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoModelConfig.from_json_file": [[50, 55], ["model.VideoModelConfig"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `VideoModelConfig` from a json file of parameters.\"\"\"", "\n", "videoConfig", "=", "VideoModelConfig", "(", "json_file", ")", "\n", "return", "videoConfig", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoModelConfig.__log__": [[56, 62], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info"], "methods", ["None"], ["", "def", "__log__", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Model config:\"", ")", "\n", "logger", ".", "info", "(", "f\"     Cross-Modal Transformer config: {self.f_config}\"", ")", "\n", "logger", ".", "info", "(", "f\"     Temporal Transformer config: {self.c_config}\"", ")", "\n", "logger", ".", "info", "(", "f\"     QueryEncoder config: {self.q_config}\"", ")", "\n", "logger", ".", "info", "(", "f\"     Decoder Transformer config: {self.d_config}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.__init__": [[65, 76], ["encoder.RobertaPreTrainedModel.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ".", "f_config", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "VideoModelConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of \"", "\n", "\"class `VideoModelConfig`. To create a model from a Google \"", "\n", "\"pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.load_config": [[77, 83], ["model.VideoModelConfig.from_json_file", "model.VideoModelConfig.from_json_file"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoModelConfig.from_json_file", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoModelConfig.from_json_file"], ["", "@", "classmethod", "\n", "def", "load_config", "(", "cls", ",", "config_file", ")", ":", "\n", "# Load config", "\n", "        ", "config", "=", "VideoModelConfig", ".", "from_json_file", "(", "config_file", ")", "\n", "config", ".", "__log__", "(", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained": [[84, 102], ["cls.load_config", "cls", "modeling_utils.load_pretrained_weight", "logger.info"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.load_config", "home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.load_pretrained_weight"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "config_file", ",", "state_dict", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a UniterPreTrainedModel from a pre-trained model file or a\n        pytorch state dict.\n        Params:\n            config_file: config json file\n            state_dict: an state dictionnary\n            *inputs, **kwargs: additional input for the specific Uniter class\n        \"\"\"", "\n", "config", "=", "cls", ".", "load_config", "(", "config_file", ")", "\n", "# Instantiate model.", "\n", "model", "=", "cls", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "state_dict", "==", "{", "}", ":", "\n", "            ", "logger", ".", "info", "(", "\"No pretrained weights loaded\"", ")", "\n", "return", "model", "\n", "", "model", "=", "load_pretrained_weight", "(", "model", ",", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.FrameFeatureRegression.__init__": [[105, 111], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "layers.GELU", "apex.normalization.fused_layer_norm.FusedLayerNorm", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "feat_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "GELU", "(", ")", ",", "\n", "FusedLayerNorm", "(", "hidden_size", ",", "eps", "=", "1e-5", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "feat_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.FrameFeatureRegression.forward": [[112, 115], ["model.FrameFeatureRegression.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "output", "=", "self", ".", "net", "(", "input_", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.__init__": [[118, 139], ["model.VideoPreTrainedModel.__init__", "encoder.CrossModalTrm", "layers.LinearLayer", "encoder.TemporalTrm", "model.FrameFeatureRegression", "torch.Embedding", "torch.Embedding", "layers.MLPLayer", "model.HierarchicalVlModel.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "\n", "max_clip_len", "=", "100", ",", "nce_temp", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "f_encoder", "=", "CrossModalTrm", "(", "\n", "config", ".", "f_config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", "\n", "self", ".", "frame_transform", "=", "LinearLayer", "(", "\n", "vfeat_dim", ",", "config", ".", "f_config", ".", "hidden_size", ",", "\n", "layer_norm", "=", "True", ",", "dropout", "=", "config", ".", "f_config", ".", "hidden_dropout_prob", ",", "\n", "relu", "=", "True", ")", "\n", "self", ".", "c_encoder", "=", "TemporalTrm", "(", "\n", "config", ".", "c_config", ")", "\n", "\n", "self", ".", "feat_regress", "=", "FrameFeatureRegression", "(", "\n", "config", ".", "f_config", ".", "hidden_size", ",", "vfeat_dim", ")", "\n", "self", ".", "nce_temp", "=", "nce_temp", "# NCE shares same head with regression", "\n", "self", ".", "mask_embedding", "=", "nn", ".", "Embedding", "(", "2", ",", "vfeat_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "fom_output", "=", "MLPLayer", "(", "\n", "config", ".", "c_config", ".", "hidden_size", ",", "max_clip_len", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'pad'", ",", "\n", "torch", ".", "zeros", "(", "8", ",", "config", ".", "c_config", ".", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward": [[140, 155], ["collections.defaultdict", "model.HierarchicalVlModel.forward_repr", "task.startswith", "model.HierarchicalVlModel.f_encoder", "model.HierarchicalVlModel.forward_mfm", "model.HierarchicalVlModel.forward_mfm", "model.HierarchicalVlModel.forward_fom", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_mfm", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_mfm", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_fom"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'repr'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "batch", "=", "defaultdict", "(", "lambda", ":", "None", ",", "batch", ")", "\n", "if", "task", "==", "'repr'", ":", "\n", "# get frame representations", "\n", "            ", "return", "self", ".", "forward_repr", "(", "batch", ")", "\n", "", "elif", "task", ".", "startswith", "(", "'mlm'", ")", ":", "\n", "            ", "return", "self", ".", "f_encoder", "(", "batch", ",", "task", ",", "compute_loss", ")", "\n", "", "elif", "task", "==", "'mffr'", ":", "\n", "            ", "return", "self", ".", "forward_mfm", "(", "batch", ",", "compute_loss", ",", "loss", "=", "'regression'", ")", "\n", "", "elif", "task", "==", "'mfm-nce'", ":", "\n", "            ", "return", "self", ".", "forward_mfm", "(", "batch", ",", "compute_loss", ",", "loss", "=", "'nce'", ")", "\n", "", "elif", "task", "==", "'fom'", ":", "\n", "            ", "return", "self", ".", "forward_fom", "(", "batch", ",", "compute_loss", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized task {task}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.collect_frame_outputs": [[156, 188], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "def", "collect_frame_outputs", "(", "self", ",", "out_shape", ",", "frame_sequence_output", ",", "\n", "num_subs", ",", "sub_idx2frame_idx", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n        :out_shape              (bz, #frames, hidden_size)\n        :frame_sequence_output  tensor (total_subs, max_vl+max_sl, hidden_size)\n        :num_subs               [num_sub]\n        :sub_idx2frame_idx      [ [(sub_ix, [frame_ix])] ]\n        Return:\n        :matched_v_feats        tensor (bz, #frames, hidden_size)\n        \"\"\"", "\n", "matched_v_feats", "=", "torch", ".", "zeros", "(", "*", "out_shape", ",", "\n", "dtype", "=", "frame_sequence_output", ".", "dtype", ",", "\n", "device", "=", "frame_sequence_output", ".", "device", ")", "\n", "start_idx", ",", "end_idx", "=", "0", ",", "0", "\n", "for", "vid", ",", "num_sub", "in", "enumerate", "(", "num_subs", ")", ":", "\n", "            ", "current_sub_n_f", "=", "sub_idx2frame_idx", "[", "vid", "]", "\n", "end_idx", "+=", "num_sub", "\n", "frame_sub", "=", "frame_sequence_output", "[", "start_idx", ":", "end_idx", "]", "\n", "for", "sid", ",", "matched_frame_idx", "in", "current_sub_n_f", ":", "\n", "                ", "n_frame", "=", "len", "(", "matched_frame_idx", ")", "\n", "if", "n_frame", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "matched_frame_idx", "=", "torch", ".", "tensor", "(", "\n", "matched_frame_idx", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "frame_sub", ".", "device", ")", "\n", "matched_v_feats", "[", "vid", ",", "matched_frame_idx", "]", "=", "matched_v_feats", "[", "vid", ",", "matched_frame_idx", "]", "+", "frame_sub", "[", "sid", ",", ":", "n_frame", "]", "\n", "\n", "", "start_idx", "=", "end_idx", "\n", "", "return", "matched_v_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.reorder_frame": [[189, 194], ["c_pos_ids.unsqueeze().expand_as", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "c_pos_ids.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "reorder_frame", "(", "self", ",", "frame_feats", ",", "c_pos_ids", ")", ":", "\n", "        ", "c_pos_ids_expanded", "=", "c_pos_ids", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "frame_feats", ")", "\n", "output", "=", "torch", ".", "zeros_like", "(", "frame_feats", ")", ".", "scatter_", "(", "\n", "1", ",", "c_pos_ids_expanded", ",", "frame_feats", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr": [[195, 225], ["model.HierarchicalVlModel.f_encoder", "model.HierarchicalVlModel.collect_frame_outputs", "model.HierarchicalVlModel.frame_transform", "list", "model.HierarchicalVlModel.c_encoder", "frame_sequence_output.size", "c_v_feats.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.collect_frame_outputs", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward_repr", "(", "self", ",", "batch", ",", "encode_clip", "=", "True", ")", ":", "\n", "        ", "frame_outputs", "=", "self", ".", "f_encoder", "(", "batch", ",", "'repr'", ")", "\n", "# (total_sub, sub_len, 768)", "\n", "frame_sequence_output", "=", "frame_outputs", "[", "0", "]", "\n", "\n", "c_v_feats", "=", "batch", "[", "'c_v_feats'", "]", "\n", "c_attn_masks", "=", "batch", "[", "'c_attn_masks'", "]", "\n", "num_subs", "=", "batch", "[", "'num_subs'", "]", "\n", "sub_idx2frame_idx", "=", "batch", "[", "'sub_idx2frame_idx'", "]", "\n", "\n", "# (bz, #frames, 768)", "\n", "shape", "=", "list", "(", "c_v_feats", ".", "size", "(", ")", "[", ":", "2", "]", ")", "+", "[", "frame_sequence_output", ".", "size", "(", "-", "1", ")", "]", "\n", "matched_v_feats", "=", "self", ".", "collect_frame_outputs", "(", "\n", "shape", ",", "frame_sequence_output", ",", "num_subs", ",", "sub_idx2frame_idx", ")", "\n", "\n", "# residual connection (transformed_v_feat = raw_v_feat + fused_v_feat)", "\n", "transformed_c_v_feats", "=", "self", ".", "frame_transform", "(", "c_v_feats", ")", "\n", "transformed_c_v_feats", "=", "transformed_c_v_feats", "+", "matched_v_feats", "\n", "\n", "if", "encode_clip", ":", "\n", "# reordered_feats = self.reorder_frame(", "\n", "#   transformed_c_v_feats, c_pos_ids)", "\n", "            ", "reordered_feats", "=", "transformed_c_v_feats", "\n", "# compute pos_ids in embedding layer", "\n", "clip_outputs", "=", "self", ".", "c_encoder", "(", "\n", "clip_level_pos_ids", "=", "None", ",", "\n", "clip_level_frame_feat", "=", "reordered_feats", ",", "\n", "attention_mask", "=", "c_attn_masks", ")", "\n", "return", "clip_outputs", "\n", "", "return", "transformed_c_v_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_vsm": [[226, 238], ["model.HierarchicalVlModel.forward_repr", "model.HierarchicalVlModel.f_encoder"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr"], ["", "def", "forward_vsm", "(", "self", ",", "batch", ")", ":", "\n", "# [num_videos, clip_len, 768]", "\n", "        ", "clip_outputs", "=", "self", ".", "forward_repr", "(", "batch", ")", "\n", "# tuple([num_sub_queries, sub_len, 768], [num_sub_queries, 768])", "\n", "sub_query_batch", "=", "{", "}", "\n", "sub_query_batch", "[", "\"input_ids\"", "]", "=", "batch", "[", "'vsm_query_input_ids'", "]", "\n", "sub_query_batch", "[", "\"pos_ids\"", "]", "=", "batch", "[", "'vsm_query_pos_ids'", "]", "\n", "sub_query_batch", "[", "\"attn_masks\"", "]", "=", "batch", "[", "'vsm_query_attn_masks'", "]", "\n", "sub_query_outputs", "=", "self", ".", "f_encoder", "(", "sub_query_batch", ",", "\"txt\"", ")", "\n", "# [num_sub_queries, sub_len, 768]", "\n", "query", "=", "sub_query_outputs", "[", "0", "]", "\n", "return", "clip_outputs", ",", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_mfm": [[239, 273], ["c_v_feats.masked_fill_", "model.HierarchicalVlModel.mask_embedding", "model.HierarchicalVlModel.forward_repr", "model.HierarchicalVlModel._compute_masked_hidden", "model.HierarchicalVlModel._pad_layer_unpad", "c_v_mask.unsqueeze", "c_v_mask.long", "model.HierarchicalVlModel._compute_masked_hidden", "model.HierarchicalVlModel._pad_layer_unpad", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "model.HierarchicalVlModel.mfm_nce"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel._compute_masked_hidden", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel._pad_layer_unpad", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel._compute_masked_hidden", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel._pad_layer_unpad", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.mfm_nce"], ["", "def", "forward_mfm", "(", "self", ",", "batch", ",", "compute_loss", "=", "True", ",", "loss", "=", "'regression'", ")", ":", "\n", "        ", "assert", "loss", "in", "[", "'regression'", ",", "'nce'", "]", "\n", "c_v_feats", "=", "batch", "[", "'c_v_feats'", "]", "\n", "c_v_mask", "=", "batch", "[", "'c_v_masks'", "]", "\n", "# apply mask to c_v_feats", "\n", "c_v_feats", ".", "masked_fill_", "(", "c_v_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "mask", "=", "self", ".", "mask_embedding", "(", "c_v_mask", ".", "long", "(", ")", ")", "\n", "c_v_feats_masked", "=", "c_v_feats", "+", "mask", "\n", "batch", "[", "'c_v_feats'", "]", "=", "c_v_feats_masked", "\n", "clip_outputs", "=", "self", ".", "forward_repr", "(", "batch", ")", "\n", "\n", "# only compute masked tokens for better efficiency", "\n", "masked_output", "=", "self", ".", "_compute_masked_hidden", "(", "clip_outputs", ",", "c_v_mask", ")", "\n", "prediction_feat", "=", "self", ".", "_pad_layer_unpad", "(", "masked_output", ",", "\n", "self", ".", "feat_regress", ")", "\n", "if", "loss", "==", "'nce'", ":", "\n", "            ", "neg_output", "=", "self", ".", "_compute_masked_hidden", "(", "clip_outputs", ",", "~", "c_v_mask", ")", "\n", "neg_pred_feat", "=", "self", ".", "_pad_layer_unpad", "(", "neg_output", ",", "\n", "self", ".", "feat_regress", ")", "\n", "\n", "", "if", "compute_loss", ":", "\n", "            ", "feat_targets", "=", "batch", "[", "'feat_targets'", "]", "\n", "if", "loss", "==", "'regression'", ":", "\n", "                ", "mfm_loss", "=", "F", ".", "mse_loss", "(", "prediction_feat", ",", "feat_targets", ",", "\n", "reduction", "=", "'none'", ")", "\n", "", "else", ":", "\n", "                ", "mfm_loss", "=", "self", ".", "mfm_nce", "(", "prediction_feat", ",", "\n", "feat_targets", ",", "neg_pred_feat", ")", "\n", "", "return", "mfm_loss", "\n", "", "else", ":", "\n", "            ", "if", "loss", "==", "'regression'", ":", "\n", "                ", "return", "prediction_feat", "\n", "", "else", ":", "\n", "                ", "return", "prediction_feat", ",", "neg_pred_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.mfm_nce": [[274, 290], ["masked_output.matmul", "masked_output.matmul", "torch.cat().float", "torch.cat().float", "torch.cat().float", "torch.cat().float", "pos_output.t", "neg_output.t", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "masked_output.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "", "", "def", "mfm_nce", "(", "self", ",", "masked_output", ",", "pos_output", ",", "neg_output", ",", "\n", "compute_loss", "=", "True", ")", ":", "\n", "# dot product of ground truth feature", "\n", "        ", "masked_score", "=", "masked_output", ".", "matmul", "(", "pos_output", ".", "t", "(", ")", ")", "\n", "# dot product of neative samples", "\n", "neg_score", "=", "masked_output", ".", "matmul", "(", "neg_output", ".", "t", "(", ")", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "masked_score", ",", "neg_score", "]", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "if", "compute_loss", ":", "\n", "            ", "targets", "=", "torch", ".", "arange", "(", "0", ",", "masked_output", ".", "size", "(", "0", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logits", ".", "device", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", "/", "self", ".", "nce_temp", ",", "targets", ",", "\n", "reduction", "=", "'none'", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel._compute_masked_hidden": [[291, 296], ["mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "hidden[].contiguous().view", "hidden.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "hidden[].contiguous"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "", "def", "_compute_masked_hidden", "(", "self", ",", "hidden", ",", "mask", ")", ":", "\n", "        ", "\"\"\" get only the masked region (don't compute unnecessary hiddens) \"\"\"", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "hidden", ")", "\n", "hidden_masked", "=", "hidden", "[", "mask", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hidden", ".", "size", "(", "-", "1", ")", ")", "\n", "return", "hidden_masked", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel._pad_layer_unpad": [[297, 305], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "_pad_layer_unpad", "(", "self", ",", "input_", ",", "layer", ")", ":", "\n", "        ", "n_pad", "=", "8", "-", "input_", ".", "size", "(", "-", "1", ")", "%", "8", "\n", "pad", "=", "self", ".", "pad", "[", ":", "n_pad", "]", "\n", "input_", "=", "torch", ".", "cat", "(", "[", "input_", ",", "pad", "]", ",", "dim", "=", "0", ")", "\n", "output", "=", "layer", "(", "input_", ")", "\n", "if", "n_pad", ":", "\n", "            ", "output", "=", "output", "[", ":", "-", "n_pad", ",", ":", "]", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_fom": [[306, 337], ["model.HierarchicalVlModel.forward_repr", "shuffled_orders.unsqueeze().expand_as", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "c_v_feats_shuffled.scatter_.scatter_.scatter_", "model.HierarchicalVlModel.c_encoder", "encoded_clip.view.view.size", "encoded_clip.view.view.view", "model.HierarchicalVlModel.fom_output", "batch[].view", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "shuffled_orders.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward_fom", "(", "self", ",", "batch", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "shuffled_orders", "=", "batch", "[", "'shuffled_orders'", "]", "\n", "transformed_c_v_feats", "=", "self", ".", "forward_repr", "(", "batch", ",", "encode_clip", "=", "False", ")", "\n", "\n", "# Reshuffle c_v_feats according to targets", "\n", "shuffled_orders_expanded", "=", "shuffled_orders", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "\n", "transformed_c_v_feats", ")", "\n", "c_v_feats_shuffled", "=", "torch", ".", "zeros_like", "(", "\n", "transformed_c_v_feats", ",", "dtype", "=", "transformed_c_v_feats", ".", "dtype", ",", "\n", "device", "=", "transformed_c_v_feats", ".", "device", ")", "\n", "c_v_feats_shuffled", "=", "c_v_feats_shuffled", ".", "scatter_", "(", "\n", "1", ",", "shuffled_orders_expanded", ",", "transformed_c_v_feats", ")", "\n", "\n", "# compute pos_ids in embedding layer", "\n", "encoded_clip", "=", "self", ".", "c_encoder", "(", "\n", "clip_level_pos_ids", "=", "None", ",", "\n", "clip_level_frame_feat", "=", "c_v_feats_shuffled", ",", "\n", "attention_mask", "=", "batch", "[", "\"c_attn_masks\"", "]", ")", "\n", "\n", "bs", ",", "seq_len", ",", "hid_size", "=", "encoded_clip", ".", "size", "(", ")", "\n", "encoded_clip", "=", "encoded_clip", ".", "view", "(", "bs", "*", "seq_len", ",", "hid_size", ")", "\n", "\n", "frame_reorder_outputs", "=", "self", ".", "fom_output", "(", "encoded_clip", ")", "\n", "\n", "if", "compute_loss", ":", "\n", "            ", "targets", "=", "batch", "[", "'targets'", "]", ".", "view", "(", "frame_reorder_outputs", ".", "shape", "[", "0", "]", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "frame_reorder_outputs", ",", "targets", ",", "ignore_index", "=", "-", "1", ",", "\n", "reduction", "=", "'mean'", ")", "\n", "return", "loss", "\n", "", "return", "frame_reorder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize": [[338, 342], ["model.HierarchicalVlModel.apply", "model.HierarchicalVlModel.f_encoder.apply", "model.HierarchicalVlModel.c_encoder.apply"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "self", ".", "f_encoder", ".", "apply", "(", "self", ".", "f_encoder", ".", "init_weights", ")", "\n", "self", ".", "c_encoder", ".", "apply", "(", "self", ".", "c_encoder", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.init_type_embedding": [[343, 346], ["model.HierarchicalVlModel.f_encoder.init_type_embedding", "model.HierarchicalVlModel.mask_embedding.weight.data[].fill_"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.init_type_embedding"], ["", "def", "init_type_embedding", "(", "self", ")", ":", "\n", "        ", "self", ".", "f_encoder", ".", "init_type_embedding", "(", ")", "\n", "self", ".", "mask_embedding", ".", "weight", ".", "data", "[", "0", "]", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HeroModel.__init__": [[349, 355], ["model.VideoPreTrainedModel.__init__", "model.HierarchicalVlModel", "model.HeroModel.v_encoder.initialize"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "v_encoder", "=", "HierarchicalVlModel", "(", "\n", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", "\n", "self", ".", "v_encoder", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HeroModel.load_partial_pretrained": [[356, 365], ["modeling_utils.load_partial_checkpoint", "encoder.CrossModalTrm.from_pretrained", "model.HeroModel.v_encoder.f_encoder.pad_vocab", "model.HeroModel.v_encoder.init_type_embedding"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.load_partial_checkpoint", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm.pad_vocab", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.init_type_embedding"], ["", "def", "load_partial_pretrained", "(", "self", ",", "checkpoint", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "\n", "skip_layers", "=", "True", ")", ":", "\n", "        ", "partial_checkpoint", "=", "load_partial_checkpoint", "(", "\n", "checkpoint", ",", "self", ".", "config", ".", "f_config", ".", "num_hidden_layers", ",", "skip_layers", ")", "\n", "self", ".", "v_encoder", ".", "f_encoder", "=", "CrossModalTrm", ".", "from_pretrained", "(", "\n", "self", ".", "config", ".", "f_config", ",", "state_dict", "=", "partial_checkpoint", ",", "\n", "vfeat_dim", "=", "vfeat_dim", ",", "max_img_seq_len", "=", "max_frm_seq_len", ")", "\n", "self", ".", "v_encoder", ".", "f_encoder", ".", "pad_vocab", "(", ")", "\n", "self", ".", "v_encoder", ".", "init_type_embedding", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.violin.HeroForViolin.__init__": [[19, 29], ["model.HeroModel.__init__", "torch.nn.Linear", "layers.MLPLayer"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", "\n", "hsz", "=", "config", ".", "c_config", ".", "hidden_size", "\n", "\n", "self", ".", "violin_pool", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "hsz", ",", "\n", "out_features", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "violin_pred_head", "=", "MLPLayer", "(", "hsz", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.violin.HeroForViolin.get_modularized_video": [[30, 48], ["violin.HeroForViolin.violin_pool", "torch.nn.functional.softmax", "torch.einsum", "torch.einsum.squeeze", "modeling_utils.mask_logits", "frame_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.modeling_utils.mask_logits"], ["", "def", "get_modularized_video", "(", "self", ",", "frame_embeddings", ",", "frame_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_embeddings: (Nv, L, D)\n            frame_mask: (Nv, L)\n        \"\"\"", "\n", "violin_attn_scores", "=", "self", ".", "violin_pool", "(", "\n", "frame_embeddings", ")", "# (Nv, L, 1)", "\n", "\n", "violin_attn_scores", "=", "F", ".", "softmax", "(", "\n", "mask_logits", "(", "violin_attn_scores", ",", "\n", "frame_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# TODO check whether it is the same", "\n", "violin_pooled_video", "=", "torch", ".", "einsum", "(", "\n", "\"vlm,vld->vmd\"", ",", "violin_attn_scores", ",", "\n", "frame_embeddings", ")", "# (Nv, 1, D)", "\n", "return", "violin_pooled_video", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.violin.HeroForViolin.forward": [[49, 85], ["collections.defaultdict", "ValueError", "violin.HeroForViolin.v_encoder.forward_repr", "violin.HeroForViolin.v_encoder.c_encoder.embeddings", "violin.HeroForViolin.v_encoder.f_encoder._compute_txt_embeddings", "torch.cat", "torch.cat", "violin.HeroForViolin.v_encoder.c_encoder.forward_encoder", "c_attn_masks.to", "violin.HeroForViolin.get_modularized_video", "violin.HeroForViolin.violin_pred_head", "torch.sigmoid().squeeze", "targets.squeeze().to.squeeze().to.squeeze().to", "torch.nn.functional.binary_cross_entropy", "torch.sigmoid", "targets.squeeze().to.squeeze().to.squeeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.forward_repr", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.CrossModalTrm._compute_txt_embeddings", "home.repos.pwc.inspect_result.linjieli222_HERO.model.encoder.TemporalTrm.forward_encoder", "home.repos.pwc.inspect_result.linjieli222_HERO.model.violin.HeroForViolin.get_modularized_video"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'violin'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "batch", "=", "defaultdict", "(", "lambda", ":", "None", ",", "batch", ")", "\n", "if", "task", "==", "'violin'", ":", "\n", "            ", "c_attn_masks", "=", "batch", "[", "\"c_attn_masks\"", "]", "\n", "# (num_video * 5, num_frames, hid_size)", "\n", "frame_embeddings", "=", "self", ".", "v_encoder", ".", "forward_repr", "(", "\n", "batch", ",", "encode_clip", "=", "False", ")", "\n", "frame_embeddings", "=", "self", ".", "v_encoder", ".", "c_encoder", ".", "embeddings", "(", "\n", "frame_embeddings", ",", "\n", "position_ids", "=", "None", ")", "\n", "q_embeddings", "=", "self", ".", "v_encoder", ".", "f_encoder", ".", "_compute_txt_embeddings", "(", "\n", "batch", "[", "\"q_input_ids\"", "]", ",", "batch", "[", "\"q_pos_ids\"", "]", ",", "txt_type_ids", "=", "None", ")", "\n", "frame_q_embeddings", "=", "torch", ".", "cat", "(", "\n", "(", "frame_embeddings", ",", "q_embeddings", ")", ",", "dim", "=", "1", ")", "\n", "frame_q_attn_mask", "=", "torch", ".", "cat", "(", "\n", "(", "c_attn_masks", ",", "batch", "[", "\"q_attn_masks\"", "]", ")", ",", "dim", "=", "1", ")", "\n", "fused_video_q", "=", "self", ".", "v_encoder", ".", "c_encoder", ".", "forward_encoder", "(", "\n", "frame_q_embeddings", ",", "frame_q_attn_mask", ")", "\n", "num_frames", "=", "c_attn_masks", ".", "shape", "[", "1", "]", "\n", "video_embeddings", "=", "fused_video_q", "[", ":", ",", ":", "num_frames", ",", ":", "]", "\n", "\n", "video_masks", "=", "c_attn_masks", ".", "to", "(", "dtype", "=", "video_embeddings", ".", "dtype", ")", "\n", "violin_pooled_video", "=", "self", ".", "get_modularized_video", "(", "\n", "video_embeddings", ",", "video_masks", ")", "\n", "logits", "=", "self", ".", "violin_pred_head", "(", "violin_pooled_video", ")", "\n", "\n", "if", "compute_loss", ":", "\n", "                ", "targets", "=", "batch", "[", "'targets'", "]", "\n", "scores", "=", "torch", ".", "sigmoid", "(", "logits", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "squeeze", "(", "-", "1", ")", ".", "to", "(", "dtype", "=", "scores", ".", "dtype", ")", "\n", "violin_loss", "=", "F", ".", "binary_cross_entropy", "(", "\n", "scores", ",", "targets", ",", "reduction", "=", "'mean'", ")", "\n", "return", "violin_loss", "\n", "", "else", ":", "\n", "                ", "return", "logits", "\n", "", "", "raise", "ValueError", "(", "f'Unrecognized task: {task}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.LabelSmoothingLoss.__init__": [[25, 41], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax", "torch.full", "tvc.LabelSmoothingLoss.register_buffer", "torch.full.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["def", "__init__", "(", "self", ",", "label_smoothing", ",", "tgt_vocab_size", ",", "\n", "ignore_index", "=", "-", "100", ",", "reduction", "=", "'none'", ")", ":", "\n", "        ", "assert", "0.0", "<", "label_smoothing", "<=", "1.0", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# count for the ground-truth word", "\n", "smoothing_value", "=", "label_smoothing", "/", "(", "tgt_vocab_size", "-", "1", ")", "\n", "one_hot", "=", "torch", ".", "full", "(", "(", "tgt_vocab_size", ",", ")", ",", "smoothing_value", ")", "\n", "# one_hot[self.ignore_index] = 0", "\n", "self", ".", "register_buffer", "(", "\"one_hot\"", ",", "one_hot", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "self", ".", "confidence", "=", "1.0", "-", "label_smoothing", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.LabelSmoothingLoss.forward": [[42, 65], ["tvc.LabelSmoothingLoss.log_softmax", "tvc.LabelSmoothingLoss.one_hot.repeat", "tvc.LabelSmoothingLoss.scatter_", "torch.nn.functional.kl_div().sum", "target.size", "target.unsqueeze", "loss.sum.sum.mean", "torch.nn.functional.kl_div", "loss.sum.sum.sum"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        output (FloatTensor): batch_size x n_classes\n        target (LongTensor): batch_size, with indices in\n            [-1, tgt_vocab_size-1], `-1` is ignored\n        \"\"\"", "\n", "# ignore examples with target value -1", "\n", "valid_indices", "=", "target", "!=", "self", ".", "ignore_index", "\n", "target", "=", "target", "[", "valid_indices", "]", "\n", "output", "=", "self", ".", "log_softmax", "(", "output", "[", "valid_indices", "]", ")", "\n", "\n", "model_prob", "=", "self", ".", "one_hot", ".", "repeat", "(", "target", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "model_prob", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n", "loss", "=", "F", ".", "kl_div", "(", "output", ",", "model_prob", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'none'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.BertDecEncAttention.forward": [[68, 105], ["tvc.BertDecEncAttention.query", "tvc.BertDecEncAttention.key", "tvc.BertDecEncAttention.value", "tvc.BertDecEncAttention.transpose_for_scores", "tvc.BertDecEncAttention.transpose_for_scores", "tvc.BertDecEncAttention.transpose_for_scores", "torch.matmul", "tvc.BertDecEncAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "tvc.BertDecEncAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.model.layers.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "forward", "(", "self", ",", "encoder_outputs", ",", "dec_hidden_states", ",", "attention_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "dec_hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "encoder_outputs", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "encoder_outputs", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\"", "\n", "# and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "\n", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "\n", "self", ".", "attention_head_size", ")", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is", "\n", "# (precomputed for all layers in BertModel forward() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "\n", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.BertDecoderLayer.__init__": [[108, 117], ["torch.nn.Module.__init__", "layers.BertSelfAttention", "layers.BertSelfOutput", "tvc.BertDecEncAttention", "layers.BertSelfOutput", "layers.BertIntermediate", "layers.BertOutput"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "self_attention", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "add_norm_1", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "dec_enc_attention", "=", "BertDecEncAttention", "(", "config", ")", "\n", "self", ".", "add_norm_2", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "intermidiate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "add_norm_3", "=", "BertOutput", "(", "config", ")", "# linear + residual + layernorm", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.BertDecoderLayer.forward": [[118, 155], ["tvc.BertDecoderLayer.add_norm_1", "tvc.BertDecoderLayer.add_norm_2", "tvc.BertDecoderLayer.intermidiate", "tvc.BertDecoderLayer.add_norm_3", "dec_hidden_states.size", "torch.tril().to().unsqueeze().unsqueeze", "tvc.BertDecoderLayer.self_attention", "tvc.BertDecoderLayer.dec_enc_attention", "torch.tril().to().unsqueeze", "torch.tril().to", "torch.tril", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward", "(", "self", ",", "dec_hidden_states", ",", "enc_outputs", ",", "enc_mask", ",", "\n", "tri_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dec_hidden_states: (N, Lt, D)\n            enc_outputs: (N, Lv, D)\n            enc_mask: (N, Lv)\n        Returns:\n\n        \"\"\"", "\n", "if", "tri_mask", "is", "None", ":", "\n", "            ", "max_len", "=", "dec_hidden_states", ".", "size", "(", "1", ")", "# Lt", "\n", "tri_mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "max_len", ",", "max_len", ")", ",", "diagonal", "=", "0", "\n", ")", ".", "to", "(", "dec_hidden_states", "\n", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "tri_mask", "=", "(", "1.0", "-", "tri_mask", ")", "*", "-", "10000.0", "\n", "\n", "# 1, dec self attn + add_norm", "\n", "", "attention_output", "=", "self", ".", "self_attention", "(", "\n", "dec_hidden_states", ",", "tri_mask", ")", "[", "0", "]", "# (N, Lt, D)", "\n", "attention_output", "=", "self", ".", "add_norm_1", "(", "attention_output", ",", "\n", "dec_hidden_states", ")", "# (N, Lt, D)", "\n", "\n", "# 2, dec enc attn + add_norm", "\n", "# Use the mask associated with key/value, not query. (q, k, v)", "\n", "# Additionally, there is no need to do subsequent masking, since each", "\n", "# word has the right to see all the video info.", "\n", "dec_enc_attention_output", "=", "self", ".", "dec_enc_attention", "(", "\n", "enc_outputs", ",", "attention_output", ",", "enc_mask", ")", "[", "0", "]", "# (N, Lt, D)", "\n", "dec_enc_attention_output", "=", "self", ".", "add_norm_2", "(", "\n", "dec_enc_attention_output", ",", "attention_output", ")", "# (N, Lt, D)", "\n", "\n", "# 3, FFN + add_norm", "\n", "output", "=", "self", ".", "intermidiate", "(", "dec_enc_attention_output", ")", "# (N, Lt, D)", "\n", "output", "=", "self", ".", "add_norm_3", "(", "output", ",", "\n", "dec_enc_attention_output", ")", "# (N, Lt, D)", "\n", "return", "output", "# (N, Lt, D)", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.BertDecoder.__init__": [[158, 165], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.tril", "tvc.BertDecoder.register_buffer", "torch.ones", "tvc.BertDecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "BertDecoderLayer", "(", "config", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "tri_mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "1024", ",", "1024", ")", ",", "diagonal", "=", "0", ")", "\n", "tri_mask", "=", "(", "1.0", "-", "tri_mask", ")", "*", "-", "10000.0", "\n", "self", ".", "register_buffer", "(", "'tri_mask'", ",", "tri_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.BertDecoder.forward": [[166, 194], ["layer_module.size", "tvc.BertDecoder.tri_mask[].unsqueeze().unsqueeze", "enc_mask.unsqueeze().unsqueeze().to.unsqueeze().unsqueeze().to.unsqueeze().unsqueeze().to", "enumerate", "layer_module", "all_encoder_layers.append", "tvc.BertDecoder.tri_mask[].unsqueeze", "enc_mask.unsqueeze().unsqueeze().to.unsqueeze().unsqueeze().to.unsqueeze().unsqueeze", "all_encoder_layers.append", "enc_mask.unsqueeze().unsqueeze().to.unsqueeze().unsqueeze().to.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward", "(", "self", ",", "dec_hidden_states", ",", "enc_outputs", ",", "enc_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dec_hidden_states: (N, Lt, D)\n            dec_mask: (N, Lt)\n            enc_outputs: (N, Lv, D)\n            enc_mask: (N, Lv)\n            diagonal_mask: bool, if True mask subsequent words to preserve\n                auto-regressive property\n            output_all_encoded_layers:\n\n        Returns:\n\n        \"\"\"", "\n", "all_encoder_layers", "=", "[", "]", "\n", "len_", "=", "dec_hidden_states", ".", "size", "(", "1", ")", "\n", "tri_mask", "=", "self", ".", "tri_mask", "[", ":", "len_", ",", ":", "len_", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "enc_mask", "=", "enc_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "to", "(", "dec_hidden_states", ")", "\n", "enc_mask", "=", "(", "1.0", "-", "enc_mask", ")", "*", "-", "10000.0", "\n", "for", "layer_idx", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "dec_hidden_states", "=", "layer_module", "(", "\n", "dec_hidden_states", ",", "enc_outputs", ",", "enc_mask", ",", "tri_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "dec_hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "dec_hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.__init__": [[197, 218], ["model.HeroModel.__init__", "torch.nn.Embedding", "layers.BertLayerNorm", "tvc.BertDecoder", "tvc.HeroForTvc.v_encoder.initialize", "tvc.LabelSmoothingLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.model.model.HierarchicalVlModel.initialize"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "lsr", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "config", ".", "d_config", ".", "max_position_embeddings", ",", "\n", "config", ".", "d_config", ".", "hidden_size", ")", "\n", "self", ".", "emb_LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "d_config", ".", "hidden_size", ",", "\n", "eps", "=", "1e-5", ")", "\n", "self", ".", "decoder", "=", "BertDecoder", "(", "config", ".", "d_config", ")", "\n", "\n", "if", "lsr", ">", "0", ":", "\n", "            ", "self", ".", "loss_func", "=", "LabelSmoothingLoss", "(", "lsr", ",", "\n", "config", ".", "f_config", ".", "vocab_size", ",", "\n", "ignore_index", "=", "-", "1", ",", "\n", "reduction", "=", "'none'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ",", "\n", "reduction", "=", "'none'", ")", "\n", "\n", "", "self", ".", "v_encoder", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode": [[219, 239], ["tvc.HeroForTvc.v_encoder", "tvc.HeroForTvc.encode.pad_tensors"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.pad_tensors"], ["", "def", "encode", "(", "self", ",", "batch", ")", ":", "\n", "        ", "frame_embeddings", "=", "self", ".", "v_encoder", "(", "batch", ",", "'repr'", ")", "\n", "# pick video segments with associated captions", "\n", "segment_embeddings", "=", "[", "frame_embeddings", "[", "i", ",", "st", ":", "ed", ",", ":", "]", "\n", "for", "i", ",", "segs", "in", "enumerate", "(", "batch", "[", "'clip_ranges'", "]", ")", "\n", "for", "st", ",", "ed", "in", "segs", "]", "\n", "\n", "def", "pad_tensors", "(", "ts", ")", ":", "\n", "            ", "\"\"\" pad segmet embeddings \"\"\"", "\n", "bs", "=", "len", "(", "ts", ")", "\n", "max_l", "=", "max", "(", "t", ".", "size", "(", "0", ")", "for", "t", "in", "ts", ")", "\n", "hid", "=", "ts", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "bs", ",", "max_l", ",", "hid", ")", ".", "to", "(", "ts", "[", "0", "]", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "ts", ")", ":", "\n", "                ", "len_", "=", "t", ".", "size", "(", "0", ")", "\n", "output", "[", "i", ",", ":", "len_", ",", ":", "]", "=", "t", "\n", "", "return", "output", "\n", "\n", "", "encoder_outputs", "=", "pad_tensors", "(", "segment_embeddings", ")", "\n", "return", "encoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode": [[240, 267], ["tvc.HeroForTvc.v_encoder.f_encoder.embeddings.word_embeddings", "tvc.HeroForTvc.position_embeddings", "tvc.HeroForTvc.emb_LayerNorm", "tvc.HeroForTvc.v_encoder.f_encoder.lm_head", "tvc.HeroForTvc.decoder", "tvc.HeroForTvc.loss_func", "tvc.HeroForTvc.view", "label_ids.view"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "encoder_outputs", ",", "encoder_masks", ",", "\n", "caption_ids", ",", "pos_ids", ",", "label_ids", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            text_input_ids: (N, Lt)\n            text_masks: (N, Lt)  with 1 indicates valid bits\n            text_input_labels: (N, Lt)  with `-1` on ignored positions\n            encoder_outputs: (N, Lctx, D)\n            encoder_masks: (N, Lctx)\n        \"\"\"", "\n", "# shared embedding layer", "\n", "text_embeddings", "=", "self", ".", "v_encoder", ".", "f_encoder", ".", "embeddings", ".", "word_embeddings", "(", "\n", "caption_ids", ")", "\n", "pos_embeddings", "=", "self", ".", "position_embeddings", "(", "pos_ids", ")", "\n", "embeddings", "=", "self", ".", "emb_LayerNorm", "(", "text_embeddings", "+", "pos_embeddings", ")", "\n", "decoder_outputs", "=", "self", ".", "decoder", "(", "\n", "embeddings", ",", "encoder_outputs", ",", "encoder_masks", ")", "[", "-", "1", "]", "# (N, Lt, D)", "\n", "# shared projection layer", "\n", "prediction_scores", "=", "self", ".", "v_encoder", ".", "f_encoder", ".", "lm_head", "(", "\n", "decoder_outputs", ")", "# (N, Lt, vocab_size)", "\n", "if", "compute_loss", ":", "\n", "            ", "caption_loss", "=", "self", ".", "loss_func", "(", "\n", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "f_config", ".", "vocab_size", ")", ",", "\n", "label_ids", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "caption_loss", "\n", "", "else", ":", "\n", "            ", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.forward": [[268, 277], ["tvc.HeroForTvc.encode", "tvc.HeroForTvc.decode"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode"], ["", "", "def", "forward", "(", "self", ",", "batch", ",", "mode", "=", "'train'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "encoder_outputs", "=", "self", ".", "encode", "(", "batch", ")", "# (N, Lv, D)", "\n", "attn_mask", "=", "batch", "[", "'cap_attn_mask'", "]", "\n", "caption_ids", "=", "batch", "[", "'cap_input_ids'", "]", "\n", "pos_ids", "=", "batch", "[", "'cap_pos_ids'", "]", "\n", "label_ids", "=", "batch", "[", "'cap_tgt_ids'", "]", "\n", "res", "=", "self", ".", "decode", "(", "encoder_outputs", ",", "attn_mask", ",", "\n", "caption_ids", ",", "pos_ids", ",", "label_ids", ",", "compute_loss", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.TvcGenerator.__init__": [[294, 300], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "max_step", ",", "bos", ",", "eos", ",", "fp16", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "max_step", "=", "max_step", "\n", "self", ".", "bos", "=", "bos", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "fp16", "=", "fp16", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.TvcGenerator.greedy_decode": [[301, 331], ["tvc.TvcGenerator.model.encode", "enc_mask.size", "torch.tensor().expand().cuda", "torch.zeros().to", "torch.arange().unsqueeze().cuda", "range", "tvc._to_fp16", "encoder_outputs.half.half.half", "tvc.TvcGenerator.model.decode", "tvc.TvcGenerator.cut_eos", "torch.tensor().expand", "torch.zeros", "torch.arange().unsqueeze", "tvc.TvcGenerator.max", "output_ids.tolist", "torch.tensor", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc._to_fp16", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.TvcGenerator.cut_eos"], ["", "def", "greedy_decode", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        run greedy decoding\n        NOTE: Speed can potentially be improved by keeping past\n              decoder hidden states and only run `step-wise` forward.\n              Also, maybe can add early stop when all sequences reaches eos\n              instead of running until max_step.\n        \"\"\"", "\n", "if", "self", ".", "fp16", ":", "\n", "            ", "batch", "=", "_to_fp16", "(", "batch", ")", "\n", "", "encoder_outputs", "=", "self", ".", "model", ".", "encode", "(", "batch", ")", "# (N, Lv, D)", "\n", "if", "self", ".", "fp16", ":", "\n", "            ", "encoder_outputs", "=", "encoder_outputs", ".", "half", "(", ")", "\n", "", "enc_mask", "=", "batch", "[", "'cap_attn_mask'", "]", "\n", "batch_size", "=", "enc_mask", ".", "size", "(", "0", ")", "\n", "bos", "=", "torch", ".", "tensor", "(", "[", "self", ".", "bos", "]", ")", ".", "expand", "(", "batch_size", ")", ".", "cuda", "(", ")", "\n", "input_ids", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "max_step", ")", ".", "to", "(", "bos", ")", "\n", "pos_ids", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "max_step", "+", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "last_out", "=", "bos", "\n", "for", "step", "in", "range", "(", "self", ".", "max_step", ")", ":", "\n", "            ", "input_ids", "[", ":", ",", "step", "]", "=", "last_out", "\n", "score", "=", "self", ".", "model", ".", "decode", "(", "encoder_outputs", ",", "enc_mask", ",", "\n", "input_ids", "[", ":", ",", ":", "step", "+", "1", "]", ",", "\n", "pos_ids", "[", ":", ",", ":", "step", "+", "1", "]", ",", "\n", "None", ",", "compute_loss", "=", "False", ")", "\n", "output_ids", "=", "score", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "last_out", "=", "output_ids", "[", ":", ",", "-", "1", "]", "\n", "\n", "", "outputs", "=", "[", "self", ".", "cut_eos", "(", "ids", ")", "for", "ids", "in", "output_ids", ".", "tolist", "(", ")", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.TvcGenerator.cut_eos": [[332, 339], ["out_ids.append"], "methods", ["None"], ["", "def", "cut_eos", "(", "self", ",", "ids", ")", ":", "\n", "        ", "out_ids", "=", "[", "]", "\n", "for", "i", "in", "ids", ":", "\n", "            ", "if", "i", "==", "self", ".", "eos", ":", "\n", "                ", "break", "\n", "", "out_ids", ".", "append", "(", "i", ")", "\n", "", "return", "out_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc._to_fp16": [[279, 291], ["isinstance", "batch.half", "isinstance", "batch.type", "isinstance", "tvc._to_fp16", "tuple", "isinstance", "tvc._to_fp16", "tvc._to_fp16", "batch.items"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc._to_fp16", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc._to_fp16", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc._to_fp16"], ["", "", "def", "_to_fp16", "(", "batch", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", "and", "'Float'", "in", "batch", ".", "type", "(", ")", ":", "\n", "        ", "return", "batch", ".", "half", "(", ")", "\n", "", "elif", "isinstance", "(", "batch", ",", "list", ")", ":", "\n", "        ", "new_batch", "=", "[", "_to_fp16", "(", "t", ")", "for", "t", "in", "batch", "]", "\n", "", "elif", "isinstance", "(", "batch", ",", "tuple", ")", ":", "\n", "        ", "new_batch", "=", "tuple", "(", "_to_fp16", "(", "t", ")", "for", "t", "in", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", ",", "dict", ")", ":", "\n", "        ", "new_batch", "=", "{", "n", ":", "_to_fp16", "(", "t", ")", "for", "n", ",", "t", "in", "batch", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "return", "batch", "\n", "", "return", "new_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.vcmr.HeroForVcmr.__init__": [[15, 28], ["pretrain.HeroForPretraining.__init__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "\n", "conv_stride", "=", "1", ",", "conv_kernel_size", "=", "5", ",", "\n", "ranking_loss_type", "=", "\"hinge\"", ",", "margin", "=", "0.1", ",", "\n", "lw_neg_ctx", "=", "0", ",", "lw_neg_q", "=", "0", ",", "lw_st_ed", "=", "0.01", ",", "drop_svmr_prob", "=", "0", ",", "\n", "use_hard_negative", "=", "False", ",", "hard_pool_size", "=", "20", ",", "\n", "hard_neg_weight", "=", "10", ",", "use_all_neg", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "\n", "conv_stride", ",", "conv_kernel_size", ",", "\n", "ranking_loss_type", ",", "margin", ",", "\n", "lw_neg_ctx", ",", "lw_neg_q", ",", "lw_st_ed", ",", "drop_svmr_prob", ",", "\n", "use_hard_negative", ",", "hard_pool_size", ",", "\n", "hard_neg_weight", ",", "use_all_neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.vcmr.HeroForVcmr.forward": [[29, 36], ["super().forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.vcmr.HeroForVcmr.forward"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'tvr'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "if", "task", "in", "[", "'tvr'", ",", "'how2r'", ",", "'didemo_video_sub'", ",", "\n", "'didemo_video_only'", "]", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "\n", "batch", ",", "task", "=", "'vsm'", ",", "compute_loss", "=", "compute_loss", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized task {task}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.model.vcmr.HeroForVcmr.get_pred_from_raw_query": [[37, 57], ["vcmr.HeroForVcmr.encode_txt_inputs", "vcmr.HeroForVcmr.get_pred_from_mod_query", "vcmr.HeroForVcmr.get_video_level_scores"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.encode_txt_inputs", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_pred_from_mod_query", "home.repos.pwc.inspect_result.linjieli222_HERO.model.pretrain.HeroForPretraining.get_video_level_scores"], ["", "", "def", "get_pred_from_raw_query", "(", "self", ",", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "query_input_ids", ",", "query_pos_ids", ",", "\n", "query_attn_masks", ",", "cross", "=", "False", ",", "\n", "val_gather_gpus", "=", "False", ")", ":", "\n", "        ", "modularized_query", "=", "self", ".", "encode_txt_inputs", "(", "\n", "query_input_ids", ",", "query_pos_ids", ",", "\n", "query_attn_masks", ",", "attn_layer", "=", "self", ".", "q_feat_attn", ",", "\n", "normalized", "=", "False", ")", "\n", "\n", "st_prob", ",", "ed_prob", "=", "self", ".", "get_pred_from_mod_query", "(", "\n", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "modularized_query", ",", "cross", "=", "cross", ")", "\n", "\n", "if", "self", ".", "lw_neg_ctx", "!=", "0", "or", "self", ".", "lw_neg_q", "!=", "0", ":", "\n", "            ", "q2video_scores", "=", "self", ".", "get_video_level_scores", "(", "\n", "modularized_query", ",", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "val_gather_gpus", ")", "\n", "", "else", ":", "\n", "            ", "q2video_scores", "=", "None", "\n", "", "return", "q2video_scores", ",", "st_prob", ",", "ed_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.__init__": [[34, 142], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "desc", "=", "\"shared config class for both pre-training and downstream tasks\"", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "desc", ")", "\n", "# model arch parameters", "\n", "parser", ".", "add_argument", "(", "\"--model_config\"", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"json file for model architecture\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint\"", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"pretrained model\"", ")", "\n", "\n", "# training parameters", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "\n", "default", "=", "16", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for training. \"", "\n", "\"(batch by number of videos)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_batch_size\"", ",", "\n", "default", "=", "20", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for validation. \"", "\n", "\"(batch by number of videos)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "16", ",", "\n", "help", "=", "\"Number of updates steps to accumualte before\"", "\n", "\"performing a backward/update pass.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "\n", "default", "=", "3e-5", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for Adam.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--valid_steps\"", ",", "\n", "default", "=", "1000", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Run validation every X steps\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_steps\"", ",", "default", "=", "500", ",", "type", "=", "int", ",", "\n", "help", "=", "\"save every X steps for \"", "\n", "\"continue after preemption\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "default", "=", "'adam'", ",", "\n", "choices", "=", "[", "'adam'", ",", "'adamax'", ",", "'adamw'", "]", ",", "\n", "help", "=", "\"optimizer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--betas\"", ",", "default", "=", "[", "0.9", ",", "0.98", "]", ",", "nargs", "=", "'+'", ",", "\n", "type", "=", "float", ",", "help", "=", "\"beta for adam optimizer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"tune dropout regularization\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "\n", "default", "=", "0.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"weight decay (L2) regularization\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--grad_norm\"", ",", "\n", "default", "=", "0.25", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"gradient clipping (-1 for no clipping)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_steps\"", ",", "\n", "default", "=", "4000", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of training steps to perform linear \"", "\n", "\"learning rate warmup for.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_mul\"", ",", "\n", "default", "=", "1.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Learning rate multiplier\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_train_steps\"", ",", "\n", "default", "=", "100000", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total number of training updates to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"The output directory where the model checkpoints will be \"", "\n", "\"written.\"", ")", "\n", "\n", "# data parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sub_ctx_len\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"consider 'sub_ctx_len' subtitles before and \"", "\n", "\"after the current one\"", ")", "\n", "\n", "# Prepro parameters", "\n", "parser", ".", "add_argument", "(", "'--max_clip_len'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'max number of frames in video'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_txt_len'", ",", "type", "=", "int", ",", "default", "=", "60", ",", "\n", "help", "=", "'max number of tokens in text (BERT BPE)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--vfeat_version\"", ",", "\n", "default", "=", "\"resnet_slowfast\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"video frame feature's version\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--vfeat_interval\"", ",", "\n", "default", "=", "1.5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"every ** second to extract one vfeat\"", ")", "\n", "parser", ".", "add_argument", "(", "'--compressed_db'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use compressed LMDB'", ")", "\n", "\n", "# device parameters", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "42", ",", "\n", "help", "=", "\"random seed for initialization\"", ")", "\n", "parser", ".", "add_argument", "(", "'--n_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "\"number of data workers\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pin_mem'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"pin memory\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit float precision instead \"", "\n", "\"of 32-bit\"", ")", "\n", "\n", "# can use config files", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "'JSON config files'", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.parse_args": [[143, 153], ["config.parse_with_config"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.config.config.parse_with_config"], ["", "def", "parse_args", "(", "self", ")", ":", "\n", "        ", "args", "=", "parse_with_config", "(", "self", ".", "parser", ")", "\n", "\n", "# basic checks", "\n", "\n", "assert", "args", ".", "gradient_accumulation_steps", ">=", "1", ",", "f\"Invalid gradient_accumulation_steps parameter: {args.gradient_accumulation_steps} \"", "\n", "\n", "# set options to easier debug mode", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_vsm_args": [[154, 201], ["config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument"], "methods", ["None"], ["", "def", "get_vsm_args", "(", "self", ")", ":", "\n", "# VSM configs (shared with VCMR)", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--drop_svmr_prob\"", ",", "default", "=", "0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Randomly drop svmr training by a certain prob\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--lw_neg_q\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "\"weight for ranking loss with \"", "\n", "\"negative query and positive context\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--lw_neg_ctx\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "\"weight for ranking loss with \"", "\n", "\"positive query and negative context\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--lw_st_ed\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"weight for st ed prediction loss\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--ranking_loss_type\"", ",", "type", "=", "str", ",", "default", "=", "\"hinge\"", ",", "\n", "choices", "=", "[", "\"hinge\"", ",", "\"lse\"", "]", ",", "\n", "help", "=", "\"att loss type, can be hinge loss or \"", "\n", "\"its smooth approximation LogSumExp\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--margin\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"margin for   hinge loss\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--hard_pool_size\"", ",", "type", "=", "int", ",", "default", "=", "[", "20", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "\"hard negatives are still sampled\"", "\n", "\"but from a harder pool.\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--hard_neg_weights\"", ",", "type", "=", "float", ",", "default", "=", "[", "10", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "\"weighting factor for sampled hard negatives\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--hard_negtiave_start_step\"", ",", "type", "=", "int", ",", "default", "=", "[", "10000", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "\"which epoch to start hard negative sampling \"", "\n", "\"for video-level ranking loss,\"", "\n", "\"use -1 to disable\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--train_span_start_step\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"which epoch to start svmr training \"", "\n", "\"use -1 to disable\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--use_all_neg\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use all negatives for VR\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_pretrain_args": [[202, 226], ["config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.get_vsm_args", "config.SharedConfigs.parse_args", "len", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_vsm_args", "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.parse_args"], ["", "def", "get_pretrain_args", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\"--txt_db\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"path to TXT_DB\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--img_db\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"path to IMG_DB\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--targets_ratio\"", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "\"multi-dataset mix ratio\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--load_partial_pretrained\"", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"load only for frame embedding model\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--skip_layer_loading\"", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"allow skip layer loading\"", "\n", "\"in load_partial_pretrained\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--mask_prob\"", ",", "default", "=", "0.15", ",", "type", "=", "float", ",", "\n", "help", "=", "\"masking probability\"", ")", "\n", "self", ".", "get_vsm_args", "(", ")", "\n", "\n", "args", "=", "self", ".", "parse_args", "(", ")", "\n", "\n", "assert", "len", "(", "args", ".", "hard_negtiave_start_step", ")", "==", "len", "(", "\n", "args", ".", "hard_neg_weights", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_vcmr_args": [[227, 292], ["config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.get_vsm_args", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parse_args", "len", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_vsm_args", "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.parse_args"], ["", "def", "get_vcmr_args", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--task\"", ",", "default", "=", "'tvr'", ",", "\n", "choices", "=", "[", "'tvr'", ",", "'didemo_video_sub'", ",", "'how2r'", ",", "'didemo_video_only'", "]", ",", "\n", "type", "=", "str", ",", "help", "=", "\"vcmr tasks\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vcmr_eval_video_batch_size\"", ",", "\n", "default", "=", "40", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total video batch size for validation. \"", "\n", "\"(batch by number of videos)\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vcmr_eval_q_batch_size\"", ",", "\n", "default", "=", "80", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total query batch size for validation. \"", "\n", "\"(batch by number of queries)\"", ")", "\n", "\n", "# Training parameters", "\n", "self", ".", "get_vsm_args", "(", ")", "\n", "\n", "# Eval parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--eval_with_query_type\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"eval the retrieval results by query type\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--max_before_nms\"", ",", "default", "=", "200", ",", "type", "=", "int", ",", "\n", "help", "=", "\"maximum to keep before nms\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--max_after_nms\"", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "help", "=", "\"maximum to keep after nms\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--distributed_eval\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Allow distributed evaluation on multi-gpus\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--nms_thd\"", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"eval nms threshold\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--q2c_alpha\"", ",", "type", "=", "float", ",", "default", "=", "20", ",", "\n", "help", "=", "\"give more importance to top scored videos' spans,  \"", "\n", "\"the new score will be: s_new = exp(alpha * s), \"", "\n", "\"higher alpha indicates more importance. Note s in [-1, 1]\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--max_vcmr_video\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"re-ranking in top-max_vcmr_video\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--full_eval_tasks\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "\n", "choices", "=", "[", "\"VCMR\"", ",", "\"SVMR\"", ",", "\"VR\"", "]", ",", "default", "=", "[", "\"VCMR\"", ",", "\"SVMR\"", ",", "\"VR\"", "]", ",", "\n", "help", "=", "\"Which tasks to run.\"", "\n", "\"VCMR: Video Corpus Moment Retrieval;\"", "\n", "\"SVMR: Single Video Moment Retrieval;\"", "\n", "\"VR: regular Video Retrieval. \"", "\n", "\"    (will be performed automatically with VCMR)\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--min_pred_l\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "\"constrain the [st, ed] with ed - st >= 2\"", "\n", "\"(2 clips with length 1.5 each, 3 secs in total\"", "\n", "\"this is the min length for proposal-based method)\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--max_pred_l\"", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "\"constrain the [st, ed] pairs with ed - st <= 16, \"", "\n", "\"24 secs in total\"", "\n", "\"(16 clips with length 1.5 each, \"", "\n", "\"this is the max length for proposal-based method)\"", ")", "\n", "\n", "args", "=", "self", ".", "parse_args", "(", ")", "\n", "assert", "len", "(", "args", ".", "hard_negtiave_start_step", ")", "==", "len", "(", "\n", "args", ".", "hard_neg_weights", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_vr_args": [[293, 326], ["config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.get_vsm_args", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parse_args", "len", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_vsm_args", "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.parse_args"], ["", "def", "get_vr_args", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--task\"", ",", "default", "=", "'msrvtt_video_sub'", ",", "\n", "choices", "=", "[", "'msrvtt_video_sub'", ",", "'msrvtt_video_only'", "]", ",", "\n", "type", "=", "str", ",", "help", "=", "\"vr tasks\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vr_eval_video_batch_size\"", ",", "\n", "default", "=", "40", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total video batch size for validation. \"", "\n", "\"(batch by number of videos)\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vr_eval_q_batch_size\"", ",", "\n", "default", "=", "80", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total query batch size for validation. \"", "\n", "\"(batch by number of queries)\"", ")", "\n", "\n", "# Training parameters", "\n", "self", ".", "get_vsm_args", "(", ")", "\n", "\n", "# Eval parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--distributed_eval\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Allow distributed evaluation on multi-gpus\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--max_vr_video\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"re-ranking in top-max_vr_video\"", ")", "\n", "\n", "args", "=", "self", ".", "parse_args", "(", ")", "\n", "assert", "len", "(", "args", ".", "hard_negtiave_start_step", ")", "==", "len", "(", "\n", "args", ".", "hard_neg_weights", ")", "\n", "del", "args", ".", "lw_st_ed", "\n", "del", "args", ".", "train_span_start_step", "\n", "del", "args", ".", "drop_svmr_prob", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_videoQA_args": [[327, 338], ["config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parse_args"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.parse_args"], ["", "def", "get_videoQA_args", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--task\"", ",", "default", "=", "'tvqa'", ",", "\n", "choices", "=", "[", "'tvqa'", ",", "'how2qa'", "]", ",", "\n", "type", "=", "str", ",", "help", "=", "\"video qa tasks\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--lw_st_ed\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"weight for st ed prediction loss\"", ")", "\n", "\n", "args", "=", "self", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.get_violin_args": [[339, 346], ["config.SharedConfigs.parser.add_argument", "config.SharedConfigs.parse_args"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.parse_args"], ["", "def", "get_violin_args", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--task\"", ",", "default", "=", "'violin'", ",", "\n", "choices", "=", "[", "'violin'", "]", ",", "\n", "type", "=", "str", ",", "help", "=", "\"violin tasks\"", ")", "\n", "args", "=", "self", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.config.config.parse_with_config": [[11, 22], ["parser.parse_args", "json.load", "json.load.items", "open", "arg[].split", "arg.startswith", "setattr"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.config.config.SharedConfigs.parse_args"], ["def", "parse_with_config", "(", "parser", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "config", "is", "not", "None", ":", "\n", "        ", "config_args", "=", "json", ".", "load", "(", "open", "(", "args", ".", "config", ")", ")", "\n", "override_keys", "=", "{", "arg", "[", "2", ":", "]", ".", "split", "(", "'='", ")", "[", "0", "]", "for", "arg", "in", "sys", ".", "argv", "[", "1", ":", "]", "\n", "if", "arg", ".", "startswith", "(", "'--'", ")", "}", "\n", "for", "k", ",", "v", "in", "config_args", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "override_keys", ":", "\n", "                ", "setattr", "(", "args", ",", "k", ",", "v", ")", "\n", "", "", "", "del", "args", ".", "config", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.eval.tvc.TVCEval.__init__": [[19, 31], ["pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer", "tvc.TVCEval.tokenizer.tokenize", "tvc.TVCEval.scorers.append", "tvc.TVCEval.scorers.append", "tvc.TVCEval.scorers.append", "tvc.TVCEval.scorers.append", "tvc._remove_nonascii", "map", "pycocoevalcap.bleu.bleu.Bleu", "pycocoevalcap.meteor.meteor.Meteor", "pycocoevalcap.rouge.rouge.Rouge", "pycocoevalcap.cider.cider.Cider", "cap[].strip", "open"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.tokenizer.ptbtokenizer.PTBTokenizer.tokenize", "home.repos.pwc.inspect_result.linjieli222_HERO.eval.tvc._remove_nonascii"], ["class", "LabelSmoothingLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    With label smoothing,\n    KL-divergence between q_{smoothed ground truth prob.}(w)\n    and p_{prob. computed by model}(w) is minimized.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "label_smoothing", ",", "tgt_vocab_size", ",", "\n", "ignore_index", "=", "-", "100", ",", "reduction", "=", "'none'", ")", ":", "\n", "        ", "assert", "0.0", "<", "label_smoothing", "<=", "1.0", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.eval.tvc.TVCEval.__call__": [[32, 52], ["tvc.TVCEval.tokenizer.tokenize", "len", "len", "print", "scorer.compute_score", "isinstance", "tvc._remove_nonascii", "zip", "[].strip"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.tokenizer.ptbtokenizer.PTBTokenizer.tokenize", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.linjieli222_HERO.eval.tvc._remove_nonascii"], ["\n", "# count for the ground-truth word", "\n", "smoothing_value", "=", "label_smoothing", "/", "(", "tgt_vocab_size", "-", "1", ")", "\n", "one_hot", "=", "torch", ".", "full", "(", "(", "tgt_vocab_size", ",", ")", ",", "smoothing_value", ")", "\n", "# one_hot[self.ignore_index] = 0", "\n", "self", ".", "register_buffer", "(", "\"one_hot\"", ",", "one_hot", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "self", ".", "confidence", "=", "1.0", "-", "label_smoothing", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n", "", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        output (FloatTensor): batch_size x n_classes\n        target (LongTensor): batch_size, with indices in\n            [-1, tgt_vocab_size-1], `-1` is ignored\n        \"\"\"", "\n", "# ignore examples with target value -1", "\n", "valid_indices", "=", "target", "!=", "self", ".", "ignore_index", "\n", "target", "=", "target", "[", "valid_indices", "]", "\n", "output", "=", "self", ".", "log_softmax", "(", "output", "[", "valid_indices", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.eval.tvc._remove_nonascii": [[13, 15], ["ord"], "function", ["None"], ["\n", "from", ".", "layers", "import", "(", "BertSelfAttention", ",", "BertLayerNorm", ",", "\n", "BertSelfOutput", ",", "BertIntermediate", ",", "BertOutput", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu.Bleu.__init__": [[15, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "4", ")", ":", "\n", "# default compute Blue score up to 4", "\n", "        ", "self", ".", "_n", "=", "n", "\n", "self", ".", "_hypo_for_image", "=", "{", "}", "\n", "self", ".", "ref_for_image", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu.Bleu.compute_score": [[21, 45], ["gts.keys", "bleu_scorer.BleuScorer.BleuScorer", "bleu_scorer.BleuScorer.BleuScorer.compute_score", "gts.keys", "res.keys", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "\n", "        ", "assert", "(", "gts", ".", "keys", "(", ")", "==", "res", ".", "keys", "(", ")", ")", "\n", "imgIds", "=", "gts", ".", "keys", "(", ")", "\n", "\n", "bleu_scorer", "=", "BleuScorer", "(", "n", "=", "self", ".", "_n", ")", "\n", "for", "id", "in", "imgIds", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">=", "1", ")", "\n", "\n", "bleu_scorer", "+=", "(", "hypo", "[", "0", "]", ",", "ref", ")", "\n", "\n", "#score, scores = bleu_scorer.compute_score(option='shortest')", "\n", "", "score", ",", "scores", "=", "bleu_scorer", ".", "compute_score", "(", "option", "=", "'closest'", ",", "verbose", "=", "0", ")", "\n", "#score, scores = bleu_scorer.compute_score(option='average', verbose=1)", "\n", "\n", "# return (bleu, bleu_info)", "\n", "return", "score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu.Bleu.method": [[46, 48], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"Bleu\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.copy": [[97, 104], ["bleu_scorer.BleuScorer", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["def", "copy", "(", "self", ")", ":", "\n", "        ", "''' copy the refs.'''", "\n", "new", "=", "BleuScorer", "(", "n", "=", "self", ".", "n", ")", "\n", "new", ".", "ctest", "=", "copy", ".", "copy", "(", "self", ".", "ctest", ")", "\n", "new", ".", "crefs", "=", "copy", ".", "copy", "(", "self", ".", "crefs", ")", "\n", "new", ".", "_score", "=", "None", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.__init__": [[105, 113], ["bleu_scorer.BleuScorer.cook_append"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "special_reflen", "=", "None", ")", ":", "\n", "        ", "''' singular instance '''", "\n", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "crefs", "=", "[", "]", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "self", ".", "cook_append", "(", "test", ",", "refs", ")", "\n", "self", ".", "special_reflen", "=", "special_reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.cook_append": [[114, 126], ["bleu_scorer.BleuScorer.crefs.append", "bleu_scorer.cook_refs", "bleu_scorer.cook_test", "bleu_scorer.BleuScorer.ctest.append", "bleu_scorer.BleuScorer.ctest.append"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.cook_refs", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.cook_test"], ["", "def", "cook_append", "(", "self", ",", "test", ",", "refs", ")", ":", "\n", "        ", "'''called by constructor and __iadd__ to avoid creating new instances.'''", "\n", "\n", "if", "refs", "is", "not", "None", ":", "\n", "            ", "self", ".", "crefs", ".", "append", "(", "cook_refs", "(", "refs", ")", ")", "\n", "if", "test", "is", "not", "None", ":", "\n", "                ", "cooked_test", "=", "cook_test", "(", "test", ",", "self", ".", "crefs", "[", "-", "1", "]", ")", "\n", "self", ".", "ctest", ".", "append", "(", "cooked_test", ")", "## N.B.: -1", "\n", "", "else", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "None", ")", "# lens of crefs and ctest have to match", "\n", "\n", "", "", "self", ".", "_score", "=", "None", "## need to recompute", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.ratio": [[127, 130], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score"], ["", "def", "ratio", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.score_ratio": [[131, 134], ["bleu_scorer.BleuScorer.fscore", "bleu_scorer.BleuScorer.ratio"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.ratio"], ["", "def", "score_ratio", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "'''return (bleu, len_ratio) pair'''", "\n", "return", "(", "self", ".", "fscore", "(", "option", "=", "option", ")", ",", "self", ".", "ratio", "(", "option", "=", "option", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.score_ratio_str": [[135, 137], ["bleu_scorer.BleuScorer.score_ratio"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.score_ratio"], ["", "def", "score_ratio_str", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "return", "\"%.4f (%.2f)\"", "%", "self", ".", "score_ratio", "(", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.reflen": [[138, 141], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score"], ["", "def", "reflen", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.testlen": [[142, 145], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score"], ["", "def", "testlen", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_testlen", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.retest": [[146, 156], ["zip", "type", "len", "len", "bleu_scorer.BleuScorer.ctest.append", "bleu_scorer.cook_test"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.cook_test"], ["", "def", "retest", "(", "self", ",", "new_test", ")", ":", "\n", "        ", "if", "type", "(", "new_test", ")", "is", "str", ":", "\n", "            ", "new_test", "=", "[", "new_test", "]", "\n", "", "assert", "len", "(", "new_test", ")", "==", "len", "(", "self", ".", "crefs", ")", ",", "new_test", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "for", "t", ",", "rs", "in", "zip", "(", "new_test", ",", "self", ".", "crefs", ")", ":", "\n", "            ", "self", ".", "ctest", ".", "append", "(", "cook_test", "(", "t", ",", "rs", ")", ")", "\n", "", "self", ".", "_score", "=", "None", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.rescore": [[157, 161], ["bleu_scorer.BleuScorer.retest().compute_score", "bleu_scorer.BleuScorer.retest"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.retest"], ["", "def", "rescore", "(", "self", ",", "new_test", ")", ":", "\n", "        ", "''' replace test(s) with new test(s), and returns the new score.'''", "\n", "\n", "return", "self", ".", "retest", "(", "new_test", ")", ".", "compute_score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.size": [[162, 165], ["len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "crefs", ")", "==", "len", "(", "self", ".", "ctest", ")", ",", "\"refs/test mismatch! %d<>%d\"", "%", "(", "len", "(", "self", ".", "crefs", ")", ",", "len", "(", "self", ".", "ctest", ")", ")", "\n", "return", "len", "(", "self", ".", "crefs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.__iadd__": [[166, 179], ["type", "bleu_scorer.BleuScorer.cook_append", "bleu_scorer.BleuScorer.compatible", "bleu_scorer.BleuScorer.ctest.extend", "bleu_scorer.BleuScorer.crefs.extend"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.cook_append", "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.compatible"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "'''add an instance (e.g., from another sentence).'''", "\n", "\n", "if", "type", "(", "other", ")", "is", "tuple", ":", "\n", "## avoid creating new BleuScorer instances", "\n", "            ", "self", ".", "cook_append", "(", "other", "[", "0", "]", ",", "other", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "compatible", "(", "other", ")", ",", "\"incompatible BLEUs.\"", "\n", "self", ".", "ctest", ".", "extend", "(", "other", ".", "ctest", ")", "\n", "self", ".", "crefs", ".", "extend", "(", "other", ".", "crefs", ")", "\n", "self", ".", "_score", "=", "None", "## need to recompute", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.compatible": [[180, 182], ["isinstance"], "methods", ["None"], ["", "def", "compatible", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "isinstance", "(", "other", ",", "BleuScorer", ")", "and", "self", ".", "n", "==", "other", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.single_reflen": [[183, 185], ["bleu_scorer.BleuScorer._single_reflen"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer._single_reflen"], ["", "def", "single_reflen", "(", "self", ",", "option", "=", "\"average\"", ")", ":", "\n", "        ", "return", "self", ".", "_single_reflen", "(", "self", ".", "crefs", "[", "0", "]", "[", "0", "]", ",", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer._single_reflen": [[186, 198], ["min", "float", "len", "sum", "min", "abs"], "methods", ["None"], ["", "def", "_single_reflen", "(", "self", ",", "reflens", ",", "option", "=", "None", ",", "testlen", "=", "None", ")", ":", "\n", "\n", "        ", "if", "option", "==", "\"shortest\"", ":", "\n", "            ", "reflen", "=", "min", "(", "reflens", ")", "\n", "", "elif", "option", "==", "\"average\"", ":", "\n", "            ", "reflen", "=", "float", "(", "sum", "(", "reflens", ")", ")", "/", "len", "(", "reflens", ")", "\n", "", "elif", "option", "==", "\"closest\"", ":", "\n", "            ", "reflen", "=", "min", "(", "(", "abs", "(", "l", "-", "testlen", ")", ",", "l", ")", "for", "l", "in", "reflens", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unsupported reflen option %s\"", "%", "option", "\n", "\n", "", "return", "reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.recompute_score": [[199, 202], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score"], ["", "def", "recompute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "self", ".", "_score", "=", "None", "\n", "return", "self", ".", "compute_score", "(", "option", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer.compute_score": [[203, 269], ["six.moves.xrange", "six.moves.xrange", "bleus.append", "six.moves.xrange", "print", "print", "six.moves.xrange", "bleu_scorer.BleuScorer._single_reflen", "six.moves.xrange", "bleu_list[].append", "six.moves.xrange", "print", "float", "math.exp", "len", "math.exp", "float", "float"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.BleuScorer._single_reflen"], ["", "def", "compute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "n", "=", "self", ".", "n", "\n", "small", "=", "1e-9", "\n", "tiny", "=", "1e-15", "## so that if guess is 0 still return 0", "\n", "bleu_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "\n", "if", "self", ".", "_score", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_score", "\n", "\n", "", "if", "option", "is", "None", ":", "\n", "            ", "option", "=", "\"average\"", "if", "len", "(", "self", ".", "crefs", ")", "==", "1", "else", "\"closest\"", "\n", "\n", "", "self", ".", "_testlen", "=", "0", "\n", "self", ".", "_reflen", "=", "0", "\n", "totalcomps", "=", "{", "'testlen'", ":", "0", ",", "'reflen'", ":", "0", ",", "'guess'", ":", "[", "0", "]", "*", "n", ",", "'correct'", ":", "[", "0", "]", "*", "n", "}", "\n", "\n", "# for each sentence", "\n", "for", "comps", "in", "self", ".", "ctest", ":", "\n", "            ", "testlen", "=", "comps", "[", "'testlen'", "]", "\n", "self", ".", "_testlen", "+=", "testlen", "\n", "\n", "if", "self", ".", "special_reflen", "is", "None", ":", "## need computation", "\n", "                ", "reflen", "=", "self", ".", "_single_reflen", "(", "comps", "[", "'reflen'", "]", ",", "option", ",", "testlen", ")", "\n", "", "else", ":", "\n", "                ", "reflen", "=", "self", ".", "special_reflen", "\n", "\n", "", "self", ".", "_reflen", "+=", "reflen", "\n", "\n", "for", "key", "in", "[", "'guess'", ",", "'correct'", "]", ":", "\n", "                ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                    ", "totalcomps", "[", "key", "]", "[", "k", "]", "+=", "comps", "[", "key", "]", "[", "k", "]", "\n", "\n", "# append per image bleu score", "\n", "", "", "bleu", "=", "1.", "\n", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                ", "bleu", "*=", "(", "float", "(", "comps", "[", "'correct'", "]", "[", "k", "]", ")", "+", "tiny", ")", "/", "(", "float", "(", "comps", "[", "'guess'", "]", "[", "k", "]", ")", "+", "small", ")", "\n", "bleu_list", "[", "k", "]", ".", "append", "(", "bleu", "**", "(", "1.", "/", "(", "k", "+", "1", ")", ")", ")", "\n", "", "ratio", "=", "(", "testlen", "+", "tiny", ")", "/", "(", "reflen", "+", "small", ")", "## N.B.: avoid zero division", "\n", "if", "ratio", "<", "1", ":", "\n", "                ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                    ", "bleu_list", "[", "k", "]", "[", "-", "1", "]", "*=", "math", ".", "exp", "(", "1", "-", "1", "/", "ratio", ")", "\n", "\n", "", "", "if", "verbose", ">", "1", ":", "\n", "                ", "print", "(", "comps", ",", "reflen", ")", "\n", "\n", "", "", "totalcomps", "[", "'reflen'", "]", "=", "self", ".", "_reflen", "\n", "totalcomps", "[", "'testlen'", "]", "=", "self", ".", "_testlen", "\n", "\n", "bleus", "=", "[", "]", "\n", "bleu", "=", "1.", "\n", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "bleu", "*=", "float", "(", "totalcomps", "[", "'correct'", "]", "[", "k", "]", "+", "tiny", ")", "/", "(", "totalcomps", "[", "'guess'", "]", "[", "k", "]", "+", "small", ")", "\n", "bleus", ".", "append", "(", "bleu", "**", "(", "1.", "/", "(", "k", "+", "1", ")", ")", ")", "\n", "", "ratio", "=", "(", "self", ".", "_testlen", "+", "tiny", ")", "/", "(", "self", ".", "_reflen", "+", "small", ")", "## N.B.: avoid zero division", "\n", "if", "ratio", "<", "1", ":", "\n", "            ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                ", "bleus", "[", "k", "]", "*=", "math", ".", "exp", "(", "1", "-", "1", "/", "ratio", ")", "\n", "\n", "", "", "if", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "totalcomps", ")", "\n", "print", "(", "\"ratio:\"", ",", "ratio", ")", "\n", "\n", "", "self", ".", "_score", "=", "bleus", "\n", "return", "self", ".", "_score", ",", "bleu_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.precook": [[27, 38], ["s.split", "collections.defaultdict", "six.moves.xrange", "six.moves.xrange", "len", "tuple", "len"], "function", ["None"], ["def", "precook", "(", "s", ",", "n", "=", "4", ",", "out", "=", "False", ")", ":", "\n", "    ", "\"\"\"Takes a string as input and returns an object that can be given to\n    either cook_refs or cook_test. This is optional: cook_refs and cook_test\n    can take string arguments as well.\"\"\"", "\n", "words", "=", "s", ".", "split", "(", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "words", ")", "-", "k", "+", "1", ")", ":", "\n", "            ", "ngram", "=", "tuple", "(", "words", "[", "i", ":", "i", "+", "k", "]", ")", "\n", "counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "(", "len", "(", "words", ")", ",", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.cook_refs": [[39, 63], ["bleu_scorer.precook", "min.append", "six.iteritems", "min", "max", "maxcounts.get", "float", "len", "sum"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.precook"], ["", "def", "cook_refs", "(", "refs", ",", "eff", "=", "None", ",", "n", "=", "4", ")", ":", "## lhuang: oracle will call with \"average\"", "\n", "    ", "'''Takes a list of reference sentences for a single segment\n    and returns an object that encapsulates everything that BLEU\n    needs to know about them.'''", "\n", "\n", "reflen", "=", "[", "]", "\n", "maxcounts", "=", "{", "}", "\n", "for", "ref", "in", "refs", ":", "\n", "        ", "rl", ",", "counts", "=", "precook", "(", "ref", ",", "n", ")", "\n", "reflen", ".", "append", "(", "rl", ")", "\n", "for", "(", "ngram", ",", "count", ")", "in", "six", ".", "iteritems", "(", "counts", ")", ":", "\n", "            ", "maxcounts", "[", "ngram", "]", "=", "max", "(", "maxcounts", ".", "get", "(", "ngram", ",", "0", ")", ",", "count", ")", "\n", "\n", "# Calculate effective reference sentence length.", "\n", "", "", "if", "eff", "==", "\"shortest\"", ":", "\n", "        ", "reflen", "=", "min", "(", "reflen", ")", "\n", "", "elif", "eff", "==", "\"average\"", ":", "\n", "        ", "reflen", "=", "float", "(", "sum", "(", "reflen", ")", ")", "/", "len", "(", "reflen", ")", "\n", "\n", "## lhuang: N.B.: leave reflen computaiton to the very end!!", "\n", "\n", "## lhuang: N.B.: in case of \"closest\", keep a list of reflens!! (bad design)", "\n", "\n", "", "return", "(", "reflen", ",", "maxcounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.bleu.bleu_scorer.cook_test": [[64, 89], ["bleu_scorer.precook", "six.iteritems", "max", "min", "min", "six.moves.xrange", "refmaxcounts.get", "len", "abs"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.precook"], ["", "def", "cook_test", "(", "test", ",", "reflen_refmaxcounts", ",", "eff", "=", "None", ",", "n", "=", "4", ")", ":", "\n", "    ", "'''Takes a test sentence and returns an object that\n    encapsulates everything that BLEU needs to know about it.'''", "\n", "\n", "reflen", ",", "refmaxcounts", "=", "reflen_refmaxcounts", "\n", "testlen", ",", "counts", "=", "precook", "(", "test", ",", "n", ",", "True", ")", "\n", "\n", "result", "=", "{", "}", "\n", "\n", "# Calculate effective reference sentence length.", "\n", "\n", "if", "eff", "==", "\"closest\"", ":", "\n", "        ", "result", "[", "\"reflen\"", "]", "=", "min", "(", "(", "abs", "(", "l", "-", "testlen", ")", ",", "l", ")", "for", "l", "in", "reflen", ")", "[", "1", "]", "\n", "", "else", ":", "## i.e., \"average\" or \"shortest\" or None", "\n", "        ", "result", "[", "\"reflen\"", "]", "=", "reflen", "\n", "\n", "", "result", "[", "\"testlen\"", "]", "=", "testlen", "\n", "\n", "result", "[", "\"guess\"", "]", "=", "[", "max", "(", "0", ",", "testlen", "-", "k", "+", "1", ")", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", "]", "\n", "\n", "result", "[", "'correct'", "]", "=", "[", "0", "]", "*", "n", "\n", "for", "(", "ngram", ",", "count", ")", "in", "six", ".", "iteritems", "(", "counts", ")", ":", "\n", "        ", "result", "[", "\"correct\"", "]", "[", "len", "(", "ngram", ")", "-", "1", "]", "+=", "min", "(", "refmaxcounts", ".", "get", "(", "ngram", ",", "0", ")", ",", "count", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.rouge.rouge.Rouge.__init__": [[41, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# vrama91: updated the value below based on discussion with Hovey", "\n", "        ", "self", ".", "beta", "=", "1.2", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.rouge.rouge.Rouge.calc_score": [[45, 76], ["candidate[].split", "max", "max", "len", "len", "reference.split", "rouge.my_lcs", "prec.append", "rec.append", "float", "float", "float", "len", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.rouge.rouge.my_lcs"], ["", "def", "calc_score", "(", "self", ",", "candidate", ",", "refs", ")", ":", "\n", "        ", "\"\"\"\n        Compute ROUGE-L score given one candidate and references for an image\n        :param candidate: str : candidate sentence to be evaluated\n        :param refs: list of str : COCO reference sentences for the particular image to be evaluated\n        :returns score: int (ROUGE-L score for the candidate evaluated against references)\n        \"\"\"", "\n", "assert", "(", "len", "(", "candidate", ")", "==", "1", ")", "\n", "assert", "(", "len", "(", "refs", ")", ">", "0", ")", "\n", "prec", "=", "[", "]", "\n", "rec", "=", "[", "]", "\n", "\n", "# split into tokens", "\n", "token_c", "=", "candidate", "[", "0", "]", ".", "split", "(", "\" \"", ")", "\n", "\n", "for", "reference", "in", "refs", ":", "\n", "# split into tokens", "\n", "            ", "token_r", "=", "reference", ".", "split", "(", "\" \"", ")", "\n", "# compute the longest common subsequence", "\n", "lcs", "=", "my_lcs", "(", "token_r", ",", "token_c", ")", "\n", "prec", ".", "append", "(", "lcs", "/", "float", "(", "len", "(", "token_c", ")", ")", ")", "\n", "rec", ".", "append", "(", "lcs", "/", "float", "(", "len", "(", "token_r", ")", ")", ")", "\n", "\n", "", "prec_max", "=", "max", "(", "prec", ")", "\n", "rec_max", "=", "max", "(", "rec", ")", "\n", "\n", "if", "(", "prec_max", "!=", "0", "and", "rec_max", "!=", "0", ")", ":", "\n", "            ", "score", "=", "(", "(", "1", "+", "self", ".", "beta", "**", "2", ")", "*", "prec_max", "*", "rec_max", ")", "/", "float", "(", "rec_max", "+", "self", ".", "beta", "**", "2", "*", "prec_max", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "0.0", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.rouge.rouge.Rouge.compute_score": [[77, 103], ["gts.keys", "numpy.mean", "gts.keys", "res.keys", "score.append", "numpy.array", "numpy.array", "rouge.Rouge.calc_score", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.rouge.rouge.Rouge.calc_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "\"\"\"\n        Computes Rouge-L score given a set of reference and candidate sentences for the dataset\n        Invoked by evaluate_captions.py \n        :param hypo_for_image: dict : candidate / test sentences with \"image name\" key and \"tokenized sentences\" as values \n        :param ref_for_image: dict : reference MS-COCO sentences with \"image name\" key and \"tokenized sentences\" as values\n        :returns: average_score: float (mean ROUGE-L score computed by averaging scores for all the images)\n        \"\"\"", "\n", "assert", "(", "gts", ".", "keys", "(", ")", "==", "res", ".", "keys", "(", ")", ")", "\n", "imgIds", "=", "gts", ".", "keys", "(", ")", "\n", "\n", "score", "=", "[", "]", "\n", "for", "id", "in", "imgIds", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "score", ".", "append", "(", "self", ".", "calc_score", "(", "hypo", ",", "ref", ")", ")", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">", "0", ")", "\n", "\n", "", "average_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "score", ")", ")", "\n", "return", "average_score", ",", "np", ".", "array", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.rouge.rouge.Rouge.method": [[104, 106], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"Rouge\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.rouge.rouge.my_lcs": [[13, 35], ["range", "len", "len", "range", "range", "len", "len", "range", "len", "max", "len", "len", "len"], "function", ["None"], ["def", "my_lcs", "(", "string", ",", "sub", ")", ":", "\n", "    ", "\"\"\"\n    Calculates longest common subsequence for a pair of tokenized strings\n    :param string : list of str : tokens from a string split using whitespace\n    :param sub : list of str : shorter string, also split using whitespace\n    :returns: length (list of int): length of the longest common subsequence between the two strings\n\n    Note: my_lcs only gives length of the longest common subsequence, not the actual LCS\n    \"\"\"", "\n", "if", "(", "len", "(", "string", ")", "<", "len", "(", "sub", ")", ")", ":", "\n", "        ", "sub", ",", "string", "=", "string", ",", "sub", "\n", "\n", "", "lengths", "=", "[", "[", "0", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sub", ")", "+", "1", ")", "]", "for", "j", "in", "range", "(", "0", ",", "len", "(", "string", ")", "+", "1", ")", "]", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "len", "(", "sub", ")", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "string", ")", "+", "1", ")", ":", "\n", "            ", "if", "(", "string", "[", "i", "-", "1", "]", "==", "sub", "[", "j", "-", "1", "]", ")", ":", "\n", "                ", "lengths", "[", "i", "]", "[", "j", "]", "=", "lengths", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "lengths", "[", "i", "]", "[", "j", "]", "=", "max", "(", "lengths", "[", "i", "-", "1", "]", "[", "j", "]", ",", "lengths", "[", "i", "]", "[", "j", "-", "1", "]", ")", "\n", "\n", "", "", "", "return", "lengths", "[", "len", "(", "string", ")", "]", "[", "len", "(", "sub", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.__init__": [[33, 59], ["threading.Lock", "os.environ.copy", "subprocess.Popen", "atexit.register", "logging.warning", "psutil.virtual_memory", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Used to guarantee thread safety", "\n", "        ", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "mem", "=", "'2G'", "\n", "mem_available_G", "=", "psutil", ".", "virtual_memory", "(", ")", ".", "available", "/", "1E9", "\n", "if", "mem_available_G", "<", "2", ":", "\n", "            ", "logging", ".", "warning", "(", "\"There is less than 2GB of available memory.\\n\"", "\n", "\"Will try with limiting Meteor to 1GB of memory but this might cause issues.\\n\"", "\n", "\"If you have problems using Meteor, \"", "\n", "\"then you can try to lower the `mem` variable in meteor.py\"", ")", "\n", "mem", "=", "'1G'", "\n", "\n", "", "meteor_cmd", "=", "[", "'java'", ",", "'-jar'", ",", "'-Xmx{}'", ".", "format", "(", "mem", ")", ",", "METEOR_JAR", ",", "\n", "'-'", ",", "'-'", ",", "'-stdio'", ",", "'-l'", ",", "'en'", ",", "'-norm'", ",", "\n", "'-a'", ",", "PARAPHRASE", "]", "\n", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", "[", "'LC_ALL'", "]", "=", "\"C\"", "\n", "self", ".", "meteor_p", "=", "subprocess", ".", "Popen", "(", "meteor_cmd", ",", "\n", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "abspath", "(", "__file__", ")", ")", ",", "\n", "env", "=", "env", ",", "\n", "stdin", "=", "subprocess", ".", "PIPE", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "subprocess", ".", "PIPE", ")", "\n", "\n", "atexit", ".", "register", "(", "self", ".", "close", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.close": [[60, 70], ["atexit.unregister", "meteor.Meteor.meteor_p.kill", "meteor.Meteor.meteor_p.wait"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "if", "self", ".", "meteor_p", ":", "\n", "                ", "self", ".", "meteor_p", ".", "kill", "(", ")", "\n", "self", ".", "meteor_p", ".", "wait", "(", ")", "\n", "self", ".", "meteor_p", "=", "None", "\n", "# if the user calls close() manually, remove the", "\n", "# reference from atexit so the object can be garbage-collected.", "\n", "", "", "if", "atexit", "is", "not", "None", "and", "atexit", ".", "unregister", "is", "not", "None", ":", "\n", "            ", "atexit", ".", "unregister", "(", "self", ".", "close", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.compute_score": [[71, 100], ["gts.keys", "gts.keys", "res.keys", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.flush", "range", "float", "meteor.Meteor._stat", "meteor.enc", "len", "meteor.Meteor.meteor_p.stdout.readline", "dec().strip", "len", "scores.append", "float", "sys.stderr.write", "sys.stderr.write", "sys.stderr.write", "meteor.dec", "meteor.dec", "meteor.Meteor.meteor_p.stdout.readline", "meteor.Meteor.strip", "meteor.dec", "meteor.Meteor.strip"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor._stat", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.enc", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.dec", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.dec", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.dec"], ["", "", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "assert", "(", "gts", ".", "keys", "(", ")", "==", "res", ".", "keys", "(", ")", ")", "\n", "imgIds", "=", "gts", ".", "keys", "(", ")", "\n", "scores", "=", "[", "]", "\n", "\n", "eval_line", "=", "'EVAL'", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "for", "i", "in", "imgIds", ":", "\n", "                ", "assert", "(", "len", "(", "res", "[", "i", "]", ")", "==", "1", ")", "\n", "stat", "=", "self", ".", "_stat", "(", "res", "[", "i", "]", "[", "0", "]", ",", "gts", "[", "i", "]", ")", "\n", "eval_line", "+=", "' ||| {}'", ".", "format", "(", "stat", ")", "\n", "\n", "", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "'{}\\n'", ".", "format", "(", "eval_line", ")", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "flush", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imgIds", ")", ")", ":", "\n", "                ", "v", "=", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", "\n", "try", ":", "\n", "                    ", "scores", ".", "append", "(", "float", "(", "dec", "(", "v", ".", "strip", "(", ")", ")", ")", ")", "\n", "", "except", ":", "\n", "                    ", "sys", ".", "stderr", ".", "write", "(", "\"Error handling value: {}\\n\"", ".", "format", "(", "v", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "\"Decoded value: {}\\n\"", ".", "format", "(", "dec", "(", "v", ".", "strip", "(", ")", ")", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "\"eval_line: {}\\n\"", ".", "format", "(", "eval_line", ")", ")", "\n", "# You can try uncommenting the next code line to show stderr from the Meteor JAR.", "\n", "# If the Meteor JAR is not writing to stderr, then the line will just hang.", "\n", "# sys.stderr.write(\"Error from Meteor:\\n{}\".format(self.meteor_p.stderr.read()))", "\n", "raise", "\n", "", "", "score", "=", "float", "(", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", ")", "\n", "\n", "", "return", "score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.method": [[101, 103], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"METEOR\"", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor._stat": [[104, 113], ["hypothesis_str.replace.replace.replace", "re.sub", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.flush", "dec().strip", "meteor.enc", "meteor.enc", "meteor.dec", "meteor.Meteor.meteor_p.stdout.readline"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.enc", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.enc", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.dec"], ["", "def", "_stat", "(", "self", ",", "hypothesis_str", ",", "reference_list", ")", ":", "\n", "# SCORE ||| reference 1 words ||| reference n words ||| hypothesis words", "\n", "        ", "hypothesis_str", "=", "hypothesis_str", ".", "replace", "(", "'|||'", ",", "''", ")", "\n", "score_line", "=", "' ||| '", ".", "join", "(", "(", "'SCORE'", ",", "' ||| '", ".", "join", "(", "reference_list", ")", ",", "hypothesis_str", ")", ")", "\n", "score_line", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "score_line", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "score_line", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "'\\n'", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "flush", "(", ")", "\n", "return", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor._score": [[114, 131], ["hypothesis_str.replace().replace.replace().replace.replace().replace", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.flush", "dec().strip", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.flush", "float", "float", "meteor.enc", "meteor.enc", "dec().strip", "dec().strip", "hypothesis_str.replace().replace.replace().replace.replace", "meteor.dec", "meteor.Meteor.meteor_p.stdout.readline", "meteor.dec", "meteor.dec", "meteor.Meteor.meteor_p.stdout.readline", "meteor.Meteor.meteor_p.stdout.readline"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.enc", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.enc", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.dec", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.dec", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.dec"], ["", "def", "_score", "(", "self", ",", "hypothesis_str", ",", "reference_list", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "# SCORE ||| reference 1 words ||| reference n words ||| hypothesis words", "\n", "            ", "hypothesis_str", "=", "hypothesis_str", ".", "replace", "(", "'|||'", ",", "''", ")", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "score_line", "=", "' ||| '", ".", "join", "(", "(", "'SCORE'", ",", "' ||| '", ".", "join", "(", "reference_list", ")", ",", "hypothesis_str", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "'{}\\n'", ".", "format", "(", "score_line", ")", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "flush", "(", ")", "\n", "stats", "=", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", "\n", "eval_line", "=", "'EVAL ||| {}'", ".", "format", "(", "stats", ")", "\n", "# EVAL ||| stats", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "'{}\\n'", ".", "format", "(", "eval_line", ")", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "flush", "(", ")", "\n", "score", "=", "float", "(", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", ")", "\n", "# bug fix: there are two values returned by the jar file, one average, and one all, so do it twice", "\n", "# thanks for Andrej for pointing this out", "\n", "score", "=", "float", "(", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", ")", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.__del__": [[132, 134], ["meteor.Meteor.close"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.enc": [[23, 25], ["s.encode"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode"], ["def", "enc", "(", "s", ")", ":", "\n", "    ", "return", "s", ".", "encode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.dec": [[27, 29], ["s.decode"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode"], ["", "def", "dec", "(", "s", ")", ":", "\n", "    ", "return", "s", ".", "decode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.tests.test_meteor.TestMeteor.test_compute_score": [[10, 18], ["nlgeval.pycocoevalcap.meteor.meteor.Meteor", "nlgeval.pycocoevalcap.meteor.meteor.Meteor.compute_score", "test_meteor.TestMeteor.assertEqual", "nlgeval.pycocoevalcap.meteor.meteor.Meteor.compute_score", "test_meteor.TestMeteor.assertEqual"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score"], ["    ", "def", "test_compute_score", "(", "self", ")", ":", "\n", "        ", "m", "=", "Meteor", "(", ")", "\n", "\n", "s", "=", "m", ".", "compute_score", "(", "{", "0", ":", "[", "\"test\"", "]", "}", ",", "{", "0", ":", "[", "\"test\"", "]", "}", ")", "\n", "self", ".", "assertEqual", "(", "s", ",", "(", "1.0", ",", "[", "1.0", "]", ")", ")", "\n", "\n", "s", "=", "m", ".", "compute_score", "(", "{", "0", ":", "[", "\"\u30c6\u30b9\u30c8\"", "]", "}", ",", "{", "0", ":", "[", "\"\u30c6\u30b9\u30c8\"", "]", "}", ")", "\n", "self", ".", "assertEqual", "(", "s", ",", "(", "1.0", ",", "[", "1.0", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.tokenizer.ptbtokenizer.PTBTokenizer.tokenize": [[26, 69], ["os.path.dirname", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.close", "cmd.append", "subprocess.Popen", "token_lines.decode.decode.decode", "token_lines.decode.decode.split", "os.remove", "zip", "os.path.abspath", "sentences.encode", "os.path.basename", "subprocess.Popen.communicate", "final_tokenized_captions_for_image[].append", "captions_for_image.items", "range", "c.replace", "len", "captions_for_image.items", "sentences.rstrip", "line.rstrip().split", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.close", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode"], ["def", "tokenize", "(", "self", ",", "captions_for_image", ")", ":", "\n", "        ", "cmd", "=", "[", "'java'", ",", "'-cp'", ",", "STANFORD_CORENLP_3_4_1_JAR", ",", "'edu.stanford.nlp.process.PTBTokenizer'", ",", "'-preserveLines'", ",", "'-lowerCase'", "]", "\n", "\n", "# ======================================================", "\n", "# prepare data for PTB Tokenizer", "\n", "# ======================================================", "\n", "final_tokenized_captions_for_image", "=", "{", "}", "\n", "image_id", "=", "[", "k", "for", "k", ",", "v", "in", "captions_for_image", ".", "items", "(", ")", "for", "_", "in", "range", "(", "len", "(", "v", ")", ")", "]", "\n", "sentences", "=", "'\\n'", ".", "join", "(", "[", "c", ".", "replace", "(", "'\\n'", ",", "' '", ")", "for", "k", ",", "v", "in", "captions_for_image", ".", "items", "(", ")", "for", "c", "in", "v", "]", ")", "\n", "\n", "# ======================================================", "\n", "# save sentences to temporary file", "\n", "# ======================================================", "\n", "path_to_jar_dirname", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "tmp_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", "delete", "=", "False", ",", "dir", "=", "path_to_jar_dirname", ")", "\n", "tmp_file", ".", "write", "(", "sentences", ".", "encode", "(", ")", ")", "\n", "tmp_file", ".", "close", "(", ")", "\n", "\n", "# ======================================================", "\n", "# tokenize sentence", "\n", "# ======================================================", "\n", "cmd", ".", "append", "(", "os", ".", "path", ".", "basename", "(", "tmp_file", ".", "name", ")", ")", "\n", "p_tokenizer", "=", "subprocess", ".", "Popen", "(", "cmd", ",", "cwd", "=", "path_to_jar_dirname", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "token_lines", "=", "p_tokenizer", ".", "communicate", "(", "input", "=", "sentences", ".", "rstrip", "(", ")", ")", "[", "0", "]", "\n", "token_lines", "=", "token_lines", ".", "decode", "(", ")", "\n", "lines", "=", "token_lines", ".", "split", "(", "'\\n'", ")", "\n", "# remove temp file", "\n", "os", ".", "remove", "(", "tmp_file", ".", "name", ")", "\n", "\n", "# ======================================================", "\n", "# create dictionary for tokenized captions", "\n", "# ======================================================", "\n", "for", "k", ",", "line", "in", "zip", "(", "image_id", ",", "lines", ")", ":", "\n", "            ", "if", "not", "k", "in", "final_tokenized_captions_for_image", ":", "\n", "                ", "final_tokenized_captions_for_image", "[", "k", "]", "=", "[", "]", "\n", "", "tokenized_caption", "=", "' '", ".", "join", "(", "[", "w", "for", "w", "in", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "if", "w", "not", "in", "PUNCTUATIONS", "]", ")", "\n", "final_tokenized_captions_for_image", "[", "k", "]", ".", "append", "(", "tokenized_caption", ")", "\n", "\n", "", "return", "final_tokenized_captions_for_image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy": [[53, 59], ["cider_scorer.CiderScorer", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["def", "copy", "(", "self", ")", ":", "\n", "        ", "''' copy the refs.'''", "\n", "new", "=", "CiderScorer", "(", "n", "=", "self", ".", "n", ")", "\n", "new", ".", "ctest", "=", "copy", ".", "copy", "(", "self", ".", "ctest", ")", "\n", "new", ".", "crefs", "=", "copy", ".", "copy", "(", "self", ".", "crefs", ")", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.__init__": [[60, 69], ["collections.defaultdict", "cider_scorer.CiderScorer.cook_append"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "sigma", "=", "6.0", ")", ":", "\n", "        ", "''' singular instance '''", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "crefs", "=", "[", "]", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "self", ".", "document_frequency", "=", "defaultdict", "(", "float", ")", "\n", "self", ".", "cook_append", "(", "test", ",", "refs", ")", "\n", "self", ".", "ref_len", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.cook_append": [[70, 79], ["cider_scorer.CiderScorer.crefs.append", "cider_scorer.cook_refs", "cider_scorer.CiderScorer.ctest.append", "cider_scorer.CiderScorer.ctest.append", "cider_scorer.cook_test"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.cook_refs", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.cook_test"], ["", "def", "cook_append", "(", "self", ",", "test", ",", "refs", ")", ":", "\n", "        ", "'''called by constructor and __iadd__ to avoid creating new instances.'''", "\n", "\n", "if", "refs", "is", "not", "None", ":", "\n", "            ", "self", ".", "crefs", ".", "append", "(", "cook_refs", "(", "refs", ")", ")", "\n", "if", "test", "is", "not", "None", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "cook_test", "(", "test", ")", ")", "## N.B.: -1", "\n", "", "else", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "None", ")", "# lens of crefs and ctest have to match", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size": [[80, 83], ["len", "len", "len", "len", "len"], "methods", ["None"], ["", "", "", "def", "size", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "crefs", ")", "==", "len", "(", "self", ".", "ctest", ")", ",", "\"refs/test mismatch! %d<>%d\"", "%", "(", "len", "(", "self", ".", "crefs", ")", ",", "len", "(", "self", ".", "ctest", ")", ")", "\n", "return", "len", "(", "self", ".", "crefs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.__iadd__": [[84, 95], ["type", "cider_scorer.CiderScorer.cook_append", "cider_scorer.CiderScorer.ctest.extend", "cider_scorer.CiderScorer.crefs.extend"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "'''add an instance (e.g., from another sentence).'''", "\n", "\n", "if", "type", "(", "other", ")", "is", "tuple", ":", "\n", "## avoid creating new CiderScorer instances", "\n", "            ", "self", ".", "cook_append", "(", "other", "[", "0", "]", ",", "other", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ctest", ".", "extend", "(", "other", ".", "ctest", ")", "\n", "self", ".", "crefs", ".", "extend", "(", "other", ".", "crefs", ")", "\n", "\n", "", "return", "self", "\n", "", "def", "compute_doc_freq", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.compute_doc_freq": [[95, 106], ["set", "six.iteritems"], "methods", ["None"], ["", "def", "compute_doc_freq", "(", "self", ")", ":", "\n", "        ", "'''\n        Compute term frequency for reference data.\n        This will be used to compute idf (inverse document frequency later)\n        The term frequency is stored in the object\n        :return: None\n        '''", "\n", "for", "refs", "in", "self", ".", "crefs", ":", "\n", "# refs, k ref captions of one image", "\n", "            ", "for", "ngram", "in", "set", "(", "[", "ngram", "for", "ref", "in", "refs", "for", "(", "ngram", ",", "count", ")", "in", "six", ".", "iteritems", "(", "ref", ")", "]", ")", ":", "\n", "                ", "self", ".", "document_frequency", "[", "ngram", "]", "+=", "1", "\n", "# maxcounts[ngram] = max(maxcounts.get(ngram,0), count)", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.compute_cider": [[108, 184], ["numpy.log", "zip", "six.iteritems", "float", "numpy.array", "six.moves.xrange", "float", "cider_scorer.CiderScorer.compute_cider.counts2vec"], "methods", ["None"], ["", "", "", "def", "compute_cider", "(", "self", ")", ":", "\n", "        ", "def", "counts2vec", "(", "cnts", ")", ":", "\n", "            ", "\"\"\"\n            Function maps counts of ngram to vector of tfidf weights.\n            The function returns vec, an array of dictionary that store mapping of n-gram and tf-idf weights.\n            The n-th entry of array denotes length of n-grams.\n            :param cnts:\n            :return: vec (array of dict), norm (array of float), length (int)\n            \"\"\"", "\n", "vec", "=", "[", "defaultdict", "(", "float", ")", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "length", "=", "0", "\n", "norm", "=", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "(", "ngram", ",", "term_freq", ")", "in", "six", ".", "iteritems", "(", "cnts", ")", ":", "\n", "# give word count 1 if it doesn't appear in reference corpus", "\n", "                ", "df", "=", "np", ".", "log", "(", "max", "(", "1.0", ",", "self", ".", "document_frequency", "[", "ngram", "]", ")", ")", "\n", "# ngram index", "\n", "n", "=", "len", "(", "ngram", ")", "-", "1", "\n", "# tf (term_freq) * idf (precomputed idf) for n-grams", "\n", "vec", "[", "n", "]", "[", "ngram", "]", "=", "float", "(", "term_freq", ")", "*", "(", "self", ".", "ref_len", "-", "df", ")", "\n", "# compute norm for the vector.  the norm will be used for computing similarity", "\n", "norm", "[", "n", "]", "+=", "pow", "(", "vec", "[", "n", "]", "[", "ngram", "]", ",", "2", ")", "\n", "\n", "if", "n", "==", "1", ":", "\n", "                    ", "length", "+=", "term_freq", "\n", "", "", "norm", "=", "[", "np", ".", "sqrt", "(", "n", ")", "for", "n", "in", "norm", "]", "\n", "return", "vec", ",", "norm", ",", "length", "\n", "\n", "", "def", "sim", "(", "vec_hyp", ",", "vec_ref", ",", "norm_hyp", ",", "norm_ref", ",", "length_hyp", ",", "length_ref", ")", ":", "\n", "            ", "'''\n            Compute the cosine similarity of two vectors.\n            :param vec_hyp: array of dictionary for vector corresponding to hypothesis\n            :param vec_ref: array of dictionary for vector corresponding to reference\n            :param norm_hyp: array of float for vector corresponding to hypothesis\n            :param norm_ref: array of float for vector corresponding to reference\n            :param length_hyp: int containing length of hypothesis\n            :param length_ref: int containing length of reference\n            :return: array of score for each n-grams cosine similarity\n            '''", "\n", "delta", "=", "float", "(", "length_hyp", "-", "length_ref", ")", "\n", "# measure consine similarity", "\n", "val", "=", "np", ".", "array", "(", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "# ngram", "\n", "                ", "for", "(", "ngram", ",", "count", ")", "in", "six", ".", "iteritems", "(", "vec_hyp", "[", "n", "]", ")", ":", "\n", "# vrama91 : added clipping", "\n", "                    ", "val", "[", "n", "]", "+=", "min", "(", "vec_hyp", "[", "n", "]", "[", "ngram", "]", ",", "vec_ref", "[", "n", "]", "[", "ngram", "]", ")", "*", "vec_ref", "[", "n", "]", "[", "ngram", "]", "\n", "\n", "", "if", "(", "norm_hyp", "[", "n", "]", "!=", "0", ")", "and", "(", "norm_ref", "[", "n", "]", "!=", "0", ")", ":", "\n", "                    ", "val", "[", "n", "]", "/=", "(", "norm_hyp", "[", "n", "]", "*", "norm_ref", "[", "n", "]", ")", "\n", "\n", "", "assert", "(", "not", "math", ".", "isnan", "(", "val", "[", "n", "]", ")", ")", "\n", "# vrama91: added a length based gaussian penalty", "\n", "val", "[", "n", "]", "*=", "np", ".", "e", "**", "(", "-", "(", "delta", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", ")", "\n", "", "return", "val", "\n", "\n", "# compute log reference length", "\n", "", "self", ".", "ref_len", "=", "np", ".", "log", "(", "float", "(", "len", "(", "self", ".", "crefs", ")", ")", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "test", ",", "refs", "in", "zip", "(", "self", ".", "ctest", ",", "self", ".", "crefs", ")", ":", "\n", "# compute vector for test captions", "\n", "            ", "vec", ",", "norm", ",", "length", "=", "counts2vec", "(", "test", ")", "\n", "# compute vector for ref captions", "\n", "score", "=", "np", ".", "array", "(", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", ")", "\n", "for", "ref", "in", "refs", ":", "\n", "                ", "vec_ref", ",", "norm_ref", ",", "length_ref", "=", "counts2vec", "(", "ref", ")", "\n", "score", "+=", "sim", "(", "vec", ",", "vec_ref", ",", "norm", ",", "norm_ref", ",", "length", ",", "length_ref", ")", "\n", "# change by vrama91 - mean of ngram scores, instead of sum", "\n", "", "score_avg", "=", "np", ".", "mean", "(", "score", ")", "\n", "# divide by number of references", "\n", "score_avg", "/=", "len", "(", "refs", ")", "\n", "# multiply score by 10", "\n", "score_avg", "*=", "10.0", "\n", "# append score of an image to the score list", "\n", "scores", ".", "append", "(", "score_avg", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.compute_score": [[185, 195], ["cider_scorer.CiderScorer.compute_doc_freq", "cider_scorer.CiderScorer.compute_cider", "len", "max", "numpy.mean", "numpy.array", "cider_scorer.CiderScorer.document_frequency.values", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.compute_doc_freq", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.compute_cider"], ["", "def", "compute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "# compute idf", "\n", "        ", "self", ".", "compute_doc_freq", "(", ")", "\n", "# assert to check document frequency", "\n", "assert", "(", "len", "(", "self", ".", "ctest", ")", ">=", "max", "(", "self", ".", "document_frequency", ".", "values", "(", ")", ")", ")", "\n", "# compute cider score", "\n", "score", "=", "self", ".", "compute_cider", "(", ")", "\n", "# debug", "\n", "# print score", "\n", "return", "np", ".", "mean", "(", "np", ".", "array", "(", "score", ")", ")", ",", "np", ".", "array", "(", "score", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.precook": [[13, 29], ["s.split", "collections.defaultdict", "six.moves.xrange", "six.moves.xrange", "tuple", "len"], "function", ["None"], ["def", "precook", "(", "s", ",", "n", "=", "4", ",", "out", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Takes a string as input and returns an object that can be given to\n    either cook_refs or cook_test. This is optional: cook_refs and cook_test\n    can take string arguments as well.\n    :param s: string : sentence to be converted into ngrams\n    :param n: int    : number of ngrams for which representation is calculated\n    :return: term frequency vector for occuring ngrams\n    \"\"\"", "\n", "words", "=", "s", ".", "split", "(", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "words", ")", "-", "k", "+", "1", ")", ":", "\n", "            ", "ngram", "=", "tuple", "(", "words", "[", "i", ":", "i", "+", "k", "]", ")", "\n", "counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.cook_refs": [[30, 39], ["cider_scorer.precook"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.precook"], ["", "def", "cook_refs", "(", "refs", ",", "n", "=", "4", ")", ":", "## lhuang: oracle will call with \"average\"", "\n", "    ", "'''Takes a list of reference sentences for a single segment\n    and returns an object that encapsulates everything that BLEU\n    needs to know about them.\n    :param refs: list of string : reference sentences for some image\n    :param n: int : number of ngrams for which (ngram) representation is calculated\n    :return: result (list of dict)\n    '''", "\n", "return", "[", "precook", "(", "ref", ",", "n", ")", "for", "ref", "in", "refs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.cook_test": [[40, 48], ["cider_scorer.precook"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.precook"], ["", "def", "cook_test", "(", "test", ",", "n", "=", "4", ")", ":", "\n", "    ", "'''Takes a test sentence and returns an object that\n    encapsulates everything that BLEU needs to know about it.\n    :param test: list of string : hypothesis sentence for some image\n    :param n: int : number of ngrams for which (ngram) representation is calculated\n    :return: result (dict)\n    '''", "\n", "return", "precook", "(", "test", ",", "n", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.__init__": [[18, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "sigma", "=", "6.0", ")", ":", "\n", "# set cider to sum over 1 to 4-grams", "\n", "        ", "self", ".", "_n", "=", "n", "\n", "# set the standard deviation parameter for gaussian penalty", "\n", "self", ".", "_sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score": [[24, 52], ["gts.keys", "cider_scorer.CiderScorer.CiderScorer", "cider_scorer.CiderScorer.CiderScorer.compute_score", "gts.keys", "res.keys", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.compute_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "\"\"\"\n        Main function to compute CIDEr score\n        :param  hypo_for_image (dict) : dictionary with key <image> and value <tokenized hypothesis / candidate sentence>\n                ref_for_image (dict)  : dictionary with key <image> and value <tokenized reference sentence>\n        :return: cider (float) : computed CIDEr score for the corpus \n        \"\"\"", "\n", "\n", "assert", "(", "gts", ".", "keys", "(", ")", "==", "res", ".", "keys", "(", ")", ")", "\n", "imgIds", "=", "gts", ".", "keys", "(", ")", "\n", "\n", "cider_scorer", "=", "CiderScorer", "(", "n", "=", "self", ".", "_n", ",", "sigma", "=", "self", ".", "_sigma", ")", "\n", "\n", "for", "id", "in", "imgIds", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">", "0", ")", "\n", "\n", "cider_scorer", "+=", "(", "hypo", "[", "0", "]", ",", "ref", ")", "\n", "\n", "", "(", "score", ",", "scores", ")", "=", "cider_scorer", ".", "compute_score", "(", ")", "\n", "\n", "return", "score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider.Cider.method": [[53, 55], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"CIDEr\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_query.roberta_tokenize": [[23, 30], ["text.lower.isupper", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "text.lower.lower"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.tokenizer.ptbtokenizer.PTBTokenizer.tokenize"], ["@", "curry", "\n", "def", "roberta_tokenize", "(", "tokenizer", ",", "text", ")", ":", "\n", "    ", "if", "text", ".", "isupper", "(", ")", ":", "\n", "        ", "text", "=", "text", ".", "lower", "(", ")", "\n", "", "words", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_query.process_tvr": [[32, 60], ["tqdm.tqdm", "json.loads", "query_data.append", "tokenizer", "len", "str", "copy.copy", "str"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["", "def", "process_tvr", "(", "jsonl", ",", "db", ",", "tokenizer", ")", ":", "\n", "    ", "id2len", "=", "{", "}", "\n", "query2video", "=", "{", "}", "# not sure if useful", "\n", "query_data", "=", "[", "]", "\n", "for", "line", "in", "tqdm", "(", "\n", "jsonl", ",", "\n", "desc", "=", "'processing TVR with raw query text'", ")", ":", "\n", "        ", "example", "=", "json", ".", "loads", "(", "line", ")", "\n", "query_data", ".", "append", "(", "copy", ".", "copy", "(", "example", ")", ")", "\n", "id_", "=", "example", "[", "'desc_id'", "]", "\n", "input_ids", "=", "tokenizer", "(", "example", "[", "\"desc\"", "]", ")", "\n", "if", "'vid_name'", "in", "example", ":", "\n", "            ", "vid", "=", "example", "[", "'vid_name'", "]", "\n", "", "else", ":", "\n", "            ", "vid", "=", "None", "\n", "", "if", "'ts'", "in", "example", ":", "\n", "            ", "target", "=", "example", "[", "'ts'", "]", "\n", "", "else", ":", "\n", "            ", "target", "=", "None", "\n", "", "if", "vid", "is", "not", "None", ":", "\n", "            ", "query2video", "[", "id_", "]", "=", "vid", "\n", "example", "[", "'vid'", "]", "=", "vid", "\n", "", "id2len", "[", "id_", "]", "=", "len", "(", "input_ids", ")", "\n", "example", "[", "'input_ids'", "]", "=", "input_ids", "\n", "example", "[", "'target'", "]", "=", "target", "\n", "example", "[", "'qid'", "]", "=", "str", "(", "id_", ")", "\n", "db", "[", "str", "(", "id_", ")", "]", "=", "example", "\n", "", "return", "id2len", ",", "query2video", ",", "query_data", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_query.process_tvqa": [[62, 94], ["tqdm.tqdm", "json.loads", "query_data.append", "str", "copy.copy", "tokenizer", "tokenizer", "tokenizer", "tokenizer", "tokenizer", "tokenizer", "len", "len", "len", "len", "len", "len", "str"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["", "def", "process_tvqa", "(", "jsonl", ",", "db", ",", "tokenizer", ")", ":", "\n", "    ", "id2len", "=", "{", "}", "\n", "query2video", "=", "{", "}", "# not sure if useful", "\n", "query_data", "=", "[", "]", "\n", "for", "line", "in", "tqdm", "(", "jsonl", ",", "desc", "=", "'processing TVQA with raw QA text'", ")", ":", "\n", "        ", "example", "=", "json", ".", "loads", "(", "line", ")", "\n", "query_data", ".", "append", "(", "copy", ".", "copy", "(", "example", ")", ")", "\n", "id_", "=", "example", "[", "'qid'", "]", "\n", "input_ids", "=", "[", "tokenizer", "(", "example", "[", "\"q\"", "]", ")", ",", "tokenizer", "(", "example", "[", "\"a0\"", "]", ")", ",", "\n", "tokenizer", "(", "example", "[", "\"a1\"", "]", ")", ",", "tokenizer", "(", "example", "[", "\"a2\"", "]", ")", ",", "\n", "tokenizer", "(", "example", "[", "\"a3\"", "]", ")", ",", "tokenizer", "(", "example", "[", "\"a4\"", "]", ")", "]", "\n", "vid", "=", "example", "[", "'vid_name'", "]", "\n", "if", "'ts'", "in", "example", ":", "\n", "            ", "ts", "=", "example", "[", "'ts'", "]", "\n", "", "else", ":", "\n", "            ", "ts", "=", "None", "\n", "\n", "", "if", "'answer_idx'", "in", "example", ":", "\n", "            ", "target", "=", "example", "[", "'answer_idx'", "]", "\n", "", "else", ":", "\n", "            ", "target", "=", "None", "\n", "\n", "", "query2video", "[", "id_", "]", "=", "vid", "\n", "id2len", "[", "id_", "]", "=", "[", "len", "(", "input_ids", "[", "0", "]", ")", ",", "len", "(", "input_ids", "[", "1", "]", ")", ",", "len", "(", "input_ids", "[", "2", "]", ")", ",", "\n", "len", "(", "input_ids", "[", "3", "]", ")", ",", "len", "(", "input_ids", "[", "4", "]", ")", ",", "len", "(", "input_ids", "[", "5", "]", ")", "]", "\n", "example", "[", "'input_ids'", "]", "=", "input_ids", "\n", "example", "[", "'vid'", "]", "=", "vid", "\n", "example", "[", "'ts'", "]", "=", "ts", "\n", "example", "[", "'target'", "]", "=", "target", "\n", "example", "[", "'qid'", "]", "=", "str", "(", "id_", ")", "\n", "db", "[", "str", "(", "id_", ")", "]", "=", "example", "\n", "", "return", "id2len", ",", "query2video", ",", "query_data", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_query.process_violin": [[96, 117], ["tqdm.tqdm", "json.loads", "query_data.append", "tokenizer", "len", "str", "copy.copy", "str"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["", "def", "process_violin", "(", "jsonl", ",", "db", ",", "tokenizer", ")", ":", "\n", "    ", "id2len", "=", "{", "}", "\n", "query2video", "=", "{", "}", "# not sure if useful", "\n", "query_data", "=", "[", "]", "\n", "for", "line", "in", "tqdm", "(", "\n", "jsonl", ",", "\n", "desc", "=", "'processing Violin with raw statement text'", ")", ":", "\n", "        ", "example", "=", "json", ".", "loads", "(", "line", ")", "\n", "query_data", ".", "append", "(", "copy", ".", "copy", "(", "example", ")", ")", "\n", "id_", "=", "example", "[", "'desc_id'", "]", "\n", "input_ids", "=", "tokenizer", "(", "example", "[", "\"desc\"", "]", ")", "\n", "vid", "=", "example", "[", "'vid_name'", "]", "\n", "target", "=", "example", "[", "'label'", "]", "\n", "query2video", "[", "id_", "]", "=", "vid", "\n", "example", "[", "'vid'", "]", "=", "vid", "\n", "id2len", "[", "id_", "]", "=", "len", "(", "input_ids", ")", "\n", "example", "[", "'input_ids'", "]", "=", "input_ids", "\n", "example", "[", "'target'", "]", "=", "target", "\n", "example", "[", "'qid'", "]", "=", "str", "(", "id_", ")", "\n", "db", "[", "str", "(", "id_", ")", "]", "=", "example", "\n", "", "return", "id2len", ",", "query2video", ",", "query_data", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_query.main": [[119, 160], ["vars", "transformers.RobertaTokenizer.from_pretrained", "prepro_query.roberta_tokenize", "utils.basic_utils.save_json", "cytoolz.curry", "utils.basic_utils.save_json", "utils.basic_utils.save_json", "utils.basic_utils.save_jsonl", "os.path.exists", "os.makedirs", "ValueError", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "vars", "cytoolz.curry.", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "open", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "prepro_query.process_tvr", "prepro_query.process_tvqa", "prepro_query.process_violin", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.roberta_tokenize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_jsonl", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_query.process_tvr", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_query.process_tvqa", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_query.process_violin"], ["", "def", "main", "(", "opts", ")", ":", "\n", "    ", "if", "not", "exists", "(", "opts", ".", "output", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opts", ".", "output", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Found existing DB. Please explicitly remove '", "\n", "'for re-processing'", ")", "\n", "", "meta", "=", "vars", "(", "opts", ")", "\n", "meta", "[", "'tokenizer'", "]", "=", "opts", ".", "toker", "\n", "toker", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "\n", "opts", ".", "toker", ")", "\n", "tokenizer", "=", "roberta_tokenize", "(", "toker", ")", "\n", "meta", "[", "'BOS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'EOS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'</s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'SEP'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'</s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'CLS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'PAD'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<pad>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'MASK'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<mask>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'UNK'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<unk>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'v_range'", "]", "=", "(", "toker", ".", "convert_tokens_to_ids", "(", "[", "'.'", "]", ")", "[", "0", "]", ",", "\n", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<|endoftext|>'", "]", ")", "[", "0", "]", "+", "1", ")", "\n", "save_json", "(", "vars", "(", "opts", ")", ",", "f'{opts.output}/meta.json'", ",", "save_pretty", "=", "True", ")", "\n", "\n", "open_db", "=", "curry", "(", "open_lmdb", ",", "opts", ".", "output", ",", "readonly", "=", "False", ")", "\n", "with", "open_db", "(", ")", "as", "db", ":", "\n", "        ", "with", "open", "(", "opts", ".", "annotation", ",", "\"r\"", ")", "as", "ann", ":", "\n", "            ", "if", "opts", ".", "task", "==", "\"tvr\"", ":", "\n", "                ", "id2lens", ",", "query2video", ",", "query_data", "=", "process_tvr", "(", "\n", "ann", ",", "db", ",", "tokenizer", ")", "\n", "", "elif", "opts", ".", "task", "==", "\"tvqa\"", ":", "\n", "                ", "id2lens", ",", "query2video", ",", "query_data", "=", "process_tvqa", "(", "\n", "ann", ",", "db", ",", "tokenizer", ")", "\n", "", "elif", "opts", ".", "task", "==", "\"violin\"", ":", "\n", "                ", "id2lens", ",", "query2video", ",", "query_data", "=", "process_violin", "(", "\n", "ann", ",", "db", ",", "tokenizer", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "f\"prepro for {opts.task} not implemented\"", ")", "\n", "\n", "", "", "", "save_json", "(", "id2lens", ",", "f'{opts.output}/id2len.json'", ")", "\n", "save_json", "(", "query2video", ",", "f'{opts.output}/query2video.json'", ")", "\n", "save_jsonl", "(", "query_data", ",", "f'{opts.output}/query_data.jsonl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_tvc.roberta_tokenize": [[22, 27], ["tokenizer.tokenize", "tokenizer.convert_tokens_to_ids"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.tokenizer.ptbtokenizer.PTBTokenizer.tokenize"], ["@", "curry", "\n", "def", "roberta_tokenize", "(", "tokenizer", ",", "text", ")", ":", "\n", "    ", "words", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_tvc._compute_overlapped_subs": [[29, 38], ["enumerate", "inds.append"], "function", ["None"], ["", "def", "_compute_overlapped_subs", "(", "ts", ",", "subtitles", ")", ":", "\n", "    ", "st", ",", "ed", "=", "ts", "\n", "inds", "=", "[", "]", "\n", "for", "i", ",", "sub", "in", "enumerate", "(", "subtitles", ")", ":", "\n", "        ", "if", "(", "st", "<", "sub", "[", "'start'", "]", "<", "ed", "\n", "or", "st", "<", "sub", "[", "'end'", "]", "<", "ed", "\n", "or", "sub", "[", "'start'", "]", "<", "st", "<", "ed", "<", "sub", "[", "'end'", "]", ")", ":", "\n", "            ", "inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_tvc.process_tvc": [[40, 81], ["tqdm.tqdm", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "json.loads", "json.loads", "str", "prepro_tvc._compute_overlapped_subs", "vid2clips[].append", "str", "tokenizer", "vid2caps[].append", "clip[].append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_tvc._compute_overlapped_subs"], ["", "def", "process_tvc", "(", "cap_jsonl", ",", "sub_jsonl", ",", "cap_db", ",", "clip_db", ",", "tokenizer", ")", ":", "\n", "# load subtitles", "\n", "    ", "vid2subs", "=", "{", "}", "\n", "for", "line", "in", "tqdm", "(", "sub_jsonl", ")", ":", "\n", "        ", "sub_info", "=", "json", ".", "loads", "(", "line", ")", "\n", "vid2subs", "[", "sub_info", "[", "'vid_name'", "]", "]", "=", "sub_info", "[", "'sub'", "]", "\n", "\n", "", "id2len", "=", "{", "}", "\n", "cap2vid", "=", "{", "}", "\n", "clip2vid", "=", "{", "}", "\n", "vid2caps", "=", "defaultdict", "(", "list", ")", "\n", "vid2clips", "=", "defaultdict", "(", "list", ")", "\n", "for", "line", "in", "tqdm", "(", "cap_jsonl", ",", "desc", "=", "'processing TVC data'", ")", ":", "\n", "        ", "example", "=", "json", ".", "loads", "(", "line", ")", "\n", "vid", "=", "example", "[", "'vid_name'", "]", "\n", "ts", "=", "example", "[", "'ts'", "]", "\n", "clip_id", "=", "str", "(", "example", "[", "'clip_id'", "]", ")", "\n", "clip2vid", "[", "clip_id", "]", "=", "vid", "\n", "sub_inds", "=", "_compute_overlapped_subs", "(", "ts", ",", "vid2subs", "[", "vid", "]", ")", "\n", "clip", "=", "{", "'vid_name'", ":", "vid", ",", "'ts'", ":", "ts", ",", "'sub_indices'", ":", "sub_inds", ",", "\n", "'duration'", ":", "example", "[", "'duration'", "]", ",", "'captions'", ":", "[", "]", "}", "\n", "vid2clips", "[", "vid", "]", ".", "append", "(", "clip_id", ")", "\n", "for", "cap", "in", "example", "[", "'descs'", "]", ":", "\n", "            ", "cap_id", "=", "str", "(", "cap", "[", "'desc_id'", "]", ")", "\n", "input_ids", "=", "tokenizer", "(", "cap", "[", "'desc'", "]", ")", "\n", "cap", "[", "'input_ids'", "]", "=", "input_ids", "\n", "cap", "[", "'vid_name'", "]", "=", "vid", "\n", "cap", "[", "'clip_id'", "]", "=", "clip_id", "\n", "cap", "[", "'ts'", "]", "=", "ts", "\n", "cap", "[", "'sub_indices'", "]", "=", "sub_inds", "\n", "cap", "[", "'duration'", "]", "=", "example", "[", "'duration'", "]", "\n", "cap_db", "[", "cap_id", "]", "=", "cap", "\n", "cap2vid", "[", "cap_id", "]", "=", "vid", "\n", "vid2caps", "[", "vid", "]", ".", "append", "(", "cap_id", ")", "\n", "\n", "clip", "[", "'captions'", "]", ".", "append", "(", "{", "'id'", ":", "cap", "[", "'desc_id'", "]", ",", "\n", "'input_ids'", ":", "input_ids", ",", "\n", "'text'", ":", "cap", "[", "'desc'", "]", "}", ")", "\n", "\n", "", "clip_db", "[", "clip_id", "]", "=", "clip", "\n", "", "return", "id2len", ",", "cap2vid", ",", "clip2vid", ",", "vid2caps", ",", "vid2clips", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_tvc.main": [[83, 123], ["vars", "transformers.RobertaTokenizer.from_pretrained", "prepro_tvc.roberta_tokenize", "cytoolz.curry", "cytoolz.curry", "os.path.exists", "os.makedirs", "print", "ValueError", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "open", "json.dump", "cytoolz.curry.", "cytoolz.curry.", "open", "json.dump", "open", "json.dump", "open", "json.dump", "open", "json.dump", "open", "json.dump", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "vars", "open", "open", "prepro_tvc.process_tvc", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.roberta_tokenize", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_tvc.process_tvc"], ["", "def", "main", "(", "opts", ")", ":", "\n", "    ", "if", "not", "exists", "(", "opts", ".", "output", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opts", ".", "output", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "opts", ".", "output", ")", "\n", "raise", "ValueError", "(", "'Found existing DB. Please explicitly remove '", "\n", "'for re-processing'", ")", "\n", "", "meta", "=", "vars", "(", "opts", ")", "\n", "meta", "[", "'tokenizer'", "]", "=", "opts", ".", "toker", "\n", "toker", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "opts", ".", "toker", ")", "\n", "tokenizer", "=", "roberta_tokenize", "(", "toker", ")", "\n", "meta", "[", "'BOS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'EOS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'</s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'SEP'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'</s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'CLS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'PAD'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<pad>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'MASK'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<mask>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'UNK'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<unk>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'v_range'", "]", "=", "(", "toker", ".", "convert_tokens_to_ids", "(", "[", "'.'", "]", ")", "[", "0", "]", ",", "\n", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<|endoftext|>'", "]", ")", "[", "0", "]", "+", "1", ")", "\n", "with", "open", "(", "f'{opts.output}/meta.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "vars", "(", "opts", ")", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "open_cap_db", "=", "curry", "(", "open_lmdb", ",", "f\"{opts.output}/cap.db\"", ",", "readonly", "=", "False", ")", "\n", "open_clip_db", "=", "curry", "(", "open_lmdb", ",", "f\"{opts.output}/clip.db\"", ",", "readonly", "=", "False", ")", "\n", "with", "open_cap_db", "(", ")", "as", "cap_db", ",", "open_clip_db", "(", ")", "as", "clip_db", ":", "\n", "        ", "with", "open", "(", "opts", ".", "annotation", ")", "as", "ann", ",", "open", "(", "opts", ".", "subtitles", ")", "as", "sub", ":", "\n", "            ", "(", "id2lens", ",", "cap2vid", ",", "clip2vid", ",", "vid2caps", ",", "vid2clips", "\n", ")", "=", "process_tvc", "(", "ann", ",", "sub", ",", "cap_db", ",", "clip_db", ",", "tokenizer", ")", "\n", "\n", "", "", "with", "open", "(", "f'{opts.output}/cap.db/id2len.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "id2lens", ",", "f", ")", "\n", "", "with", "open", "(", "f'{opts.output}/cap.db/cap2vid.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "cap2vid", ",", "f", ")", "\n", "", "with", "open", "(", "f'{opts.output}/clip.db/clip2vid.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "clip2vid", ",", "f", ")", "\n", "", "with", "open", "(", "f'{opts.output}/cap.db/vid2caps.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "vid2caps", ",", "f", ")", "\n", "", "with", "open", "(", "f'{opts.output}/clip.db/vid2clips.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "vid2clips", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.load_process_sub_meta": [[29, 85], ["tqdm.tqdm", "print", "print", "print", "print", "print", "print", "print", "print", "video2sub.items", "isinstance", "prepro_sub.process_single_vid_sub", "len", "max", "max", "max", "max", "max", "max", "utils.basic_utils.load_jsonl", "ValueError", "int", "int"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.process_single_vid_sub", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_jsonl"], ["def", "load_process_sub_meta", "(", "sub_meta_path", ",", "vid2nframe", ",", "frame_length", ")", ":", "\n", "    ", "\"\"\" which subtitles should be assigned to which frames\n    Args:\n        sub_meta_path: contains a jsonl file, each line is a dict\n            {\"vid_name\": str, \"sub\": list(dicts)},\n            each dict under \"sub\" is, e.g.,\n            {'text': \" Chase : That's all this is?\",\n             'start': 0.862, 'end': 1.862}.\n            The dicts under \"sub\" are ordered\n            the same as the original .srt files.\n        frame_length: float, assign each subtitle to a frame segment\n    Returns:\n    \"\"\"", "\n", "video2sub", "=", "{", "e", "[", "\"vid_name\"", "]", ":", "e", "for", "e", "in", "load_jsonl", "(", "sub_meta_path", ")", "}", "\n", "total_overlapped_sub", ",", "total_sub", "=", "0", ",", "0", "\n", "max_sub_length", ",", "extra_long_subs", "=", "0", ",", "0", "\n", "max_gap_time", ",", "max_sub_duration", "=", "0", ",", "0", "\n", "max_matched_frame_len", ",", "max_unmatched_group_len", "=", "0", ",", "0", "\n", "max_overlap_time", "=", "0", "\n", "for", "vid_name", ",", "sub_info", "in", "tqdm", "(", "\n", "video2sub", ".", "items", "(", ")", ",", "desc", "=", "\"processing subtitles\"", ")", ":", "\n", "        ", "if", "isinstance", "(", "vid2nframe", "[", "vid_name", "]", ",", "int", ")", ":", "\n", "            ", "num_of_frames", "=", "vid2nframe", "[", "vid_name", "]", "\n", "if", "num_of_frames", "==", "0", ":", "\n", "                ", "num_of_frames", "=", "int", "(", "\n", "int", "(", "sub_info", "[", "\"sub\"", "]", "[", "-", "1", "]", "[", "\"end\"", "]", ")", "/", "frame_length", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"{vid_name} in vid2nframe, but with unexpected format:\\n\"", "+", "\n", "f\"{vid2nframe[vid_name]}\"", ")", "\n", "", "info", ",", "overlapped_sub", "=", "process_single_vid_sub", "(", "\n", "sub_info", "[", "\"sub\"", "]", ",", "frame_length", ",", "num_of_frames", ")", "\n", "# sub_info.update(info)", "\n", "video2sub", "[", "vid_name", "]", "=", "info", "\n", "total_overlapped_sub", "+=", "overlapped_sub", "\n", "total_sub", "+=", "len", "(", "sub_info", "[", "\"sub\"", "]", ")", "\n", "max_sub_length", "=", "max", "(", "max_sub_length", ",", "info", "[", "\"max_sub_length\"", "]", ")", "\n", "max_matched_frame_len", "=", "max", "(", "\n", "max_matched_frame_len", ",", "info", "[", "\"max_matched_frame_len\"", "]", ")", "\n", "max_sub_duration", "=", "max", "(", "\n", "max_sub_duration", ",", "info", "[", "\"max_sub_duration\"", "]", ")", "\n", "max_gap_time", "=", "max", "(", "\n", "max_gap_time", ",", "info", "[", "\"max_gap_time\"", "]", ")", "\n", "max_unmatched_group_len", "=", "max", "(", "\n", "max_unmatched_group_len", ",", "info", "[", "\"max_unmatched_group_len\"", "]", ")", "\n", "max_overlap_time", "=", "max", "(", "max_overlap_time", ",", "info", "[", "\"max_overlap_time\"", "]", ")", "\n", "extra_long_subs", "+=", "info", "[", "\"extra_long_subs\"", "]", "\n", "", "print", "(", "f\"overlap/total: {total_overlapped_sub}/{total_sub}\"", ")", "\n", "print", "(", "f\"max subtitle length: {max_sub_length}\"", ")", "\n", "print", "(", "f\"max subtitle duration: {max_sub_duration}\"", ")", "\n", "print", "(", "f\"max overlap between two subtitles:{max_overlap_time}\"", ")", "\n", "print", "(", "f\"max gap time between two subtitles: {max_gap_time}\"", ")", "\n", "print", "(", "f\"max number of matched frames: {max_matched_frame_len}\"", ")", "\n", "print", "(", "f\"max len of unmatched frame group: {max_unmatched_group_len}\"", ")", "\n", "print", "(", "f\"extra long subs: {extra_long_subs}\"", ")", "\n", "return", "video2sub", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.temporal_iou": [[87, 99], ["min", "max", "min", "max"], "function", ["None"], ["", "def", "temporal_iou", "(", "time1", ",", "time2", ")", ":", "\n", "    ", "start_time1", ",", "end_time1", "=", "time1", "\n", "start_time2", ",", "end_time2", "=", "time2", "\n", "min_start_time", "=", "min", "(", "start_time1", ",", "start_time2", ")", "\n", "max_start_time", "=", "max", "(", "start_time1", ",", "start_time2", ")", "\n", "min_end_time", "=", "min", "(", "end_time1", ",", "end_time2", ")", "\n", "max_end_time", "=", "max", "(", "end_time1", ",", "end_time2", ")", "\n", "if", "min_end_time", "<=", "max_start_time", ":", "\n", "        ", "return", "0", "\n", "", "iou", "=", "(", "min_end_time", "-", "max_start_time", ")", "/", "(", "\n", "max_end_time", "-", "min_start_time", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.process_single_vid_sub": [[101, 244], ["max", "numpy.array", "numpy.equal().all", "numpy.empty_like", "numpy.floor", "numpy.ceil", "enumerate", "range", "range", "min", "subtitle_idx2frame_indices.items", "len", "len", "unmatched_frames.append", "len", "frame_idx2unique_sub_idx.items", "len", "utils.basic_utils.flat_list_of_lists", "max", "len", "len", "numpy.equal", "max", "max", "max", "curr_unmatched_groups.append", "copy.copy", "sorted", "len", "max", "e[].split", "numpy.sort", "range", "float", "float", "float", "set", "matched_sub_idx_list.append", "prepro_sub.temporal_iou", "len", "sorted.append", "len", "len", "str", "unmatched_frames.append", "unique_sub_idx2frame_indices.items", "len", "copy.copy"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.flat_list_of_lists", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.temporal_iou", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.copy"], ["", "def", "process_single_vid_sub", "(", "sub_listdicts", ",", "frame_length", ",", "num_of_frames", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        sub_listdicts: list(dicts), each dict is, e.g.,\n            {'text': \" Chase : That's all this is?\",\n             'start': 0.862, 'end': 1.862}\n        frame_length: float\n    Returns:\n        frame_idx2subtitle_indices: dict, {frame_idx: [sub_idx1, sub_idx2, ...]},\n            which subtitles are associated with which frames.\n            The indices are in ascending order, i.e., sub_idx1 < sub_idx2 < ...\n    \"\"\"", "\n", "if", "len", "(", "sub_listdicts", ")", "==", "0", "or", "num_of_frames", "==", "0", ":", "\n", "        ", "info", "=", "{", "\"num_of_frames\"", ":", "num_of_frames", ",", "\n", "\"max_sub_length\"", ":", "0", ",", "\n", "\"max_sub_duration\"", ":", "0", ",", "\n", "\"max_gap_time\"", ":", "0", ",", "\n", "\"max_overlap_time\"", ":", "0", ",", "\n", "\"max_matched_frame_len\"", ":", "0", ",", "\n", "\"max_unmatched_group_len\"", ":", "frame_length", ",", "\n", "\"extra_long_subs\"", ":", "0", "}", "\n", "return", "info", ",", "0", "\n", "", "max_sub_length", "=", "max", "(", "[", "len", "(", "e", "[", "\"text\"", "]", ".", "split", "(", "\" \"", ")", ")", "for", "e", "in", "sub_listdicts", "]", ")", "\n", "orig_timestamps", "=", "np", ".", "array", "(", "\n", "[", "[", "e", "[", "\"start\"", "]", ",", "e", "[", "\"end\"", "]", "]", "for", "e", "in", "sub_listdicts", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "# (n_subs, 2)", "\n", "# sorted_idx = np.argsort(orig_timestamps, axis=0)", "\n", "\n", "# Check if subs are sorted by start time", "\n", "# assert np.equal(orig_timestamps, np.sort(orig_timestamps, axis=0)).all()", "\n", "assert", "np", ".", "equal", "(", "\n", "orig_timestamps", "[", ":", ",", "0", "]", ",", "np", ".", "sort", "(", "orig_timestamps", "[", ":", ",", "0", "]", ")", ")", ".", "all", "(", ")", "\n", "timestamps", "=", "orig_timestamps", "/", "frame_length", "\n", "\n", "# r-th row of frame_indices is [st_idx, ed_idx),", "\n", "# where [st_idx, st_idx+1, ..., ed_idx-1]", "\n", "# should be with r-th frame, which is [r*frame_length, (r+1)*frame_length]", "\n", "subtitle2frame_st_ed", "=", "np", ".", "empty_like", "(", "timestamps", ",", "dtype", "=", "np", ".", "int", ")", "\n", "subtitle2frame_st_ed", "[", ":", ",", "0", "]", "=", "np", ".", "floor", "(", "timestamps", "[", ":", ",", "0", "]", ")", "\n", "subtitle2frame_st_ed", "[", ":", ",", "1", "]", "=", "np", ".", "ceil", "(", "timestamps", "[", ":", ",", "1", "]", ")", "\n", "\n", "overlapped_subtitles", "=", "0", "\n", "subtitle_idx2frame_indices", "=", "{", "}", "\n", "previous_sub_idx", "=", "-", "1", "\n", "max_gap_time", "=", "0", "\n", "max_overlap_time", "=", "0", "\n", "max_duration", "=", "0", "\n", "extra_long_subs", "=", "0", "\n", "for", "sub_idx", ",", "(", "\n", "frame_st_idx", ",", "frame_ed_idx", ")", "in", "enumerate", "(", "subtitle2frame_st_ed", ")", ":", "\n", "        ", "current_frame_set", "=", "[", "i", "for", "i", "in", "range", "(", "frame_st_idx", ",", "frame_ed_idx", ")", "]", "\n", "if", "previous_sub_idx", ">", "0", ":", "\n", "            ", "overlapped_subtitles", "+=", "(", "\n", "orig_timestamps", "[", "\n", "previous_sub_idx", "]", "[", "1", "]", ">", "orig_timestamps", "[", "sub_idx", "]", "[", "0", "]", ")", "\n", "gaptime", "=", "orig_timestamps", "[", "sub_idx", "]", "[", "0", "]", "-", "orig_timestamps", "[", "\n", "previous_sub_idx", "]", "[", "1", "]", "\n", "# if gaptime > 20:", "\n", "#     print(", "\n", "#         orig_timestamps[previous_sub_idx],", "\n", "#         sub_listdicts[previous_sub_idx])", "\n", "#     print(", "\n", "#         orig_timestamps[sub_idx],", "\n", "#         sub_listdicts[sub_idx])", "\n", "max_gap_time", "=", "max", "(", "max_gap_time", ",", "float", "(", "gaptime", ")", ")", "\n", "max_overlap_time", "=", "max", "(", "max_overlap_time", ",", "float", "(", "-", "gaptime", ")", ")", "\n", "", "start_time", "=", "orig_timestamps", "[", "sub_idx", "]", "[", "0", "]", "\n", "end_time", "=", "min", "(", "\n", "orig_timestamps", "[", "sub_idx", "]", "[", "1", "]", ",", "frame_length", "*", "num_of_frames", ")", "\n", "if", "start_time", ">=", "frame_length", "*", "num_of_frames", ":", "\n", "            ", "continue", "\n", "\n", "", "duration", "=", "end_time", "-", "start_time", "\n", "if", "sub_idx", "==", "len", "(", "sub_listdicts", ")", "-", "1", "and", "duration", ">", "16", ":", "\n", "            ", "extra_long_subs", "+=", "1", "\n", "current_frame_set", "=", "current_frame_set", "[", ":", "11", "]", "\n", "", "else", ":", "\n", "            ", "max_duration", "=", "max", "(", "max_duration", ",", "float", "(", "duration", ")", ")", "\n", "", "subtitle_idx2frame_indices", "[", "sub_idx", "]", "=", "current_frame_set", "\n", "previous_sub_idx", "=", "sub_idx", "\n", "\n", "# all_frame_indices = set(flat_list_of_lists(", "\n", "#     list(subtitle_idx2frame_indices.values())))", "\n", "\n", "", "frame_idx2subtitle_indices", "=", "{", "}", "\n", "frame_idx2unique_sub_idx", "=", "{", "}", "\n", "unmatched_frames", "=", "[", "]", "\n", "curr_unmatched_groups", "=", "[", "]", "\n", "for", "frame_idx", "in", "range", "(", "num_of_frames", ")", ":", "\n", "        ", "matched_sub_idx_list", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "subtitle_idx2frame_indices", ".", "items", "(", ")", ":", "\n", "            ", "if", "frame_idx", "in", "set", "(", "v", ")", ":", "\n", "                ", "matched_sub_idx_list", ".", "append", "(", "k", ")", "\n", "", "", "if", "len", "(", "matched_sub_idx_list", ")", ":", "\n", "            ", "matched_sub_idx", "=", "0", "\n", "frame_idx2subtitle_indices", "[", "str", "(", "frame_idx", ")", "]", "=", "matched_sub_idx_list", "\n", "max_iou", "=", "0", "\n", "for", "sub_idx", "in", "matched_sub_idx_list", ":", "\n", "# each frame is matched to the subtitle with max iou", "\n", "                ", "current_iou", "=", "temporal_iou", "(", "\n", "[", "frame_idx", ",", "frame_idx", "+", "1", "]", ",", "timestamps", "[", "sub_idx", "]", ")", "\n", "if", "current_iou", ">", "max_iou", ":", "\n", "                    ", "max_iou", "=", "current_iou", "\n", "matched_sub_idx", "=", "sub_idx", "\n", "", "", "frame_idx2unique_sub_idx", "[", "frame_idx", "]", "=", "matched_sub_idx", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "curr_unmatched_groups", ")", ">", "0", ":", "\n", "                ", "if", "frame_idx", ">", "curr_unmatched_groups", "[", "-", "1", "]", "+", "1", ":", "\n", "                    ", "unmatched_frames", ".", "append", "(", "copy", ".", "copy", "(", "curr_unmatched_groups", ")", ")", "\n", "curr_unmatched_groups", "=", "[", "]", "\n", "", "", "curr_unmatched_groups", ".", "append", "(", "frame_idx", ")", "\n", "", "", "if", "len", "(", "curr_unmatched_groups", ")", ">", "0", ":", "\n", "        ", "unmatched_frames", ".", "append", "(", "copy", ".", "copy", "(", "curr_unmatched_groups", ")", ")", "\n", "\n", "", "unique_sub_idx2frame_indices", "=", "{", "}", "\n", "for", "sub_idx", "in", "range", "(", "len", "(", "subtitle2frame_st_ed", ")", ")", ":", "\n", "        ", "curr_frame_idx", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "frame_idx2unique_sub_idx", ".", "items", "(", ")", ":", "\n", "            ", "if", "sub_idx", "==", "v", ":", "\n", "                ", "curr_frame_idx", ".", "append", "(", "k", ")", "\n", "", "", "if", "len", "(", "curr_frame_idx", ")", ":", "\n", "            ", "curr_frame_idx", "=", "sorted", "(", "curr_frame_idx", ")", "\n", "", "unique_sub_idx2frame_indices", "[", "sub_idx", "]", "=", "curr_frame_idx", "\n", "\n", "", "info", "=", "{", "\n", "\"num_of_frames\"", ":", "num_of_frames", ",", "\n", "\"unique_sub2frames\"", ":", "unique_sub_idx2frame_indices", ",", "\n", "\"sub2frames\"", ":", "subtitle_idx2frame_indices", ",", "\n", "\"frame2subs\"", ":", "frame_idx2subtitle_indices", ",", "\n", "\"frame2unique_sub\"", ":", "frame_idx2unique_sub_idx", ",", "\n", "\"unmatched_frames\"", ":", "flat_list_of_lists", "(", "unmatched_frames", ")", ",", "\n", "\"max_sub_length\"", ":", "max_sub_length", ",", "\n", "\"max_sub_duration\"", ":", "max_duration", ",", "\n", "\"max_gap_time\"", ":", "max_gap_time", ",", "\n", "\"max_overlap_time\"", ":", "max_overlap_time", ",", "\n", "\"max_matched_frame_len\"", ":", "max", "(", "\n", "[", "len", "(", "v", ")", "for", "_", ",", "v", "in", "unique_sub_idx2frame_indices", ".", "items", "(", ")", "]", ")", ",", "\n", "\"max_unmatched_group_len\"", ":", "max", "(", "\n", "[", "len", "(", "v", ")", "for", "v", "in", "unmatched_frames", "]", ")", "\n", "if", "len", "(", "unmatched_frames", ")", "else", "0", ",", "\n", "\"extra_long_subs\"", ":", "extra_long_subs", "\n", "}", "\n", "return", "info", ",", "overlapped_subtitles", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.roberta_tokenize": [[246, 254], ["html.unescape", "text.lower.isupper", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "text.lower.lower"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.tokenizer.ptbtokenizer.PTBTokenizer.tokenize"], ["", "@", "curry", "\n", "def", "roberta_tokenize", "(", "tokenizer", ",", "text", ")", ":", "\n", "    ", "text", "=", "html", ".", "unescape", "(", "text", ")", "\n", "if", "text", ".", "isupper", "(", ")", ":", "\n", "        ", "text", "=", "text", ".", "lower", "(", ")", "\n", "", "words", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.process_tv_subtitles": [[256, 320], ["tqdm.tqdm", "print", "print", "json.loads", "max", "len", "enumerate", "tokenizer", "max", "input_ids.append", "uniq_sub2frames.append", "sub2frames.append", "list", "enumerate", "len", "len", "len", "range", "min", "list", "max", "input_ids.append", "uniq_sub2frames.append", "sub2frames.append", "range", "len", "len"], "function", ["None"], ["", "def", "process_tv_subtitles", "(", "\n", "raw_data", ",", "video2sub_info", ",", "db", ",", "tokenizer", ",", "sep_id", ",", "\n", "allow_empty_sub", "=", "True", ")", ":", "\n", "    ", "vid2len", "=", "{", "}", "\n", "vid2max_frame_sub_len", "=", "{", "}", "\n", "max_sub_seq_len", "=", "0", "\n", "unmatched_sub_num", "=", "0", "\n", "for", "line", "in", "tqdm", "(", "raw_data", ",", "desc", "=", "'tokenizing subtitles'", ")", ":", "\n", "        ", "example", "=", "json", ".", "loads", "(", "line", ")", "\n", "v_id", "=", "example", "[", "\"vid_name\"", "]", "\n", "curr_info", "=", "video2sub_info", "[", "v_id", "]", "\n", "input_ids", "=", "[", "]", "\n", "max_mtached_sub_len", "=", "0", "\n", "\n", "uniq_sub2frames", "=", "[", "]", "\n", "sub2frames", "=", "[", "]", "\n", "n_frames", "=", "curr_info", "[", "\"num_of_frames\"", "]", "\n", "if", "len", "(", "example", "[", "\"sub\"", "]", ")", "and", "n_frames", ":", "\n", "            ", "curr_uniq_sub2frames", "=", "curr_info", "[", "\"unique_sub2frames\"", "]", "\n", "curr_sub2frames", "=", "curr_info", "[", "\"sub2frames\"", "]", "\n", "example", "[", "'unmatched_frames'", "]", "=", "curr_info", "[", "\"unmatched_frames\"", "]", "\n", "for", "sub_idx", ",", "sub", "in", "enumerate", "(", "example", "[", "\"sub\"", "]", ")", ":", "\n", "                ", "input_id", "=", "tokenizer", "(", "sub", "[", "\"text\"", "]", ")", "\n", "if", "sub_idx", "in", "curr_sub2frames", ":", "\n", "                    ", "matched_frames", "=", "curr_sub2frames", "[", "sub_idx", "]", "\n", "", "else", ":", "\n", "                    ", "matched_frames", "=", "[", "]", "\n", "", "if", "len", "(", "matched_frames", ")", "==", "0", ":", "\n", "                    ", "unmatched_sub_num", "+=", "1", "\n", "", "curr_len", "=", "len", "(", "input_id", ")", "+", "len", "(", "matched_frames", ")", "\n", "max_mtached_sub_len", "=", "max", "(", "max_mtached_sub_len", ",", "curr_len", ")", "\n", "input_ids", ".", "append", "(", "input_id", ")", "\n", "uniq_sub2frames", ".", "append", "(", "\n", "(", "sub_idx", ",", "curr_uniq_sub2frames", "[", "sub_idx", "]", ")", ")", "\n", "sub2frames", ".", "append", "(", "(", "sub_idx", ",", "matched_frames", ")", ")", "\n", "", "", "elif", "allow_empty_sub", ":", "\n", "            ", "start_f_inds", "=", "list", "(", "range", "(", "0", ",", "n_frames", ",", "5", ")", ")", "\n", "for", "sub_idx", ",", "st_f_idx", "in", "enumerate", "(", "start_f_inds", ")", ":", "\n", "                ", "ed_f_idx", "=", "min", "(", "st_f_idx", "+", "5", ",", "n_frames", ")", "\n", "input_id", "=", "[", "]", "\n", "matched_frames", "=", "list", "(", "range", "(", "st_f_idx", ",", "ed_f_idx", ")", ")", "\n", "curr_len", "=", "len", "(", "input_id", ")", "+", "len", "(", "matched_frames", ")", "\n", "max_mtached_sub_len", "=", "max", "(", "max_mtached_sub_len", ",", "curr_len", ")", "\n", "input_ids", ".", "append", "(", "input_id", ")", "\n", "uniq_sub2frames", ".", "append", "(", "(", "sub_idx", ",", "matched_frames", ")", ")", "\n", "sub2frames", ".", "append", "(", "(", "sub_idx", ",", "matched_frames", ")", ")", "\n", "", "example", "[", "'unmatched_frames'", "]", "=", "[", "]", "\n", "\n", "", "max_sub_seq_len", "=", "max", "(", "max_sub_seq_len", ",", "max_mtached_sub_len", ")", "\n", "\n", "example", "[", "'input_ids'", "]", "=", "input_ids", "\n", "example", "[", "'unique_sub2frames'", "]", "=", "uniq_sub2frames", "\n", "example", "[", "'sub2frames'", "]", "=", "sub2frames", "\n", "example", "[", "'v_id'", "]", "=", "v_id", "\n", "example", "[", "'duration'", "]", "=", "curr_info", "[", "\"num_of_frames\"", "]", "\n", "example", "[", "'max_mtached_sub_len'", "]", "=", "max_mtached_sub_len", "\n", "db", "[", "v_id", "]", "=", "example", "\n", "vid2len", "[", "v_id", "]", "=", "curr_info", "[", "\"num_of_frames\"", "]", "\n", "vid2max_frame_sub_len", "[", "v_id", "]", "=", "max_mtached_sub_len", "\n", "", "print", "(", "\"max length of (tokenized subtitle + matched frames):\"", "\n", "f\" {max_sub_seq_len}\"", ")", "\n", "print", "(", "\"number of unmatched subtitles:\"", "\n", "f\" {unmatched_sub_num}\"", ")", "\n", "return", "vid2len", ",", "vid2max_frame_sub_len", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.main": [[322, 365], ["vars", "transformers.RobertaTokenizer.from_pretrained", "prepro_sub.roberta_tokenize", "utils.basic_utils.save_json", "cytoolz.curry", "os.path.exists", "os.makedirs", "ValueError", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "vars", "cytoolz.curry.", "utils.basic_utils.save_json", "utils.basic_utils.save_json", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "utils.basic_utils.load_json", "os.path.exists", "prepro_sub.load_process_sub_meta", "utils.basic_utils.save_json", "utils.basic_utils.load_json", "open", "prepro_sub.process_tv_subtitles", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.model.VideoPreTrainedModel.from_pretrained", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.roberta_tokenize", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.load_process_sub_meta", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.basic_utils.save_json", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_json", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.prepro_sub.process_tv_subtitles"], ["", "def", "main", "(", "opts", ")", ":", "\n", "    ", "if", "not", "exists", "(", "opts", ".", "output", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opts", ".", "output", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Found existing DB. Please explicitly remove '", "\n", "'for re-processing'", ")", "\n", "", "meta", "=", "vars", "(", "opts", ")", "\n", "meta", "[", "'tokenizer'", "]", "=", "opts", ".", "toker", "\n", "toker", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "\n", "opts", ".", "toker", ")", "\n", "tokenizer", "=", "roberta_tokenize", "(", "toker", ")", "\n", "meta", "[", "'BOS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'EOS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'</s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'SEP'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'</s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'CLS'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<s>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'PAD'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<pad>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'MASK'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<mask>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'UNK'", "]", "=", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<unk>'", "]", ")", "[", "0", "]", "\n", "meta", "[", "'v_range'", "]", "=", "(", "toker", ".", "convert_tokens_to_ids", "(", "[", "'.'", "]", ")", "[", "0", "]", ",", "\n", "toker", ".", "convert_tokens_to_ids", "(", "[", "'<|endoftext|>'", "]", ")", "[", "0", "]", "+", "1", ")", "\n", "save_json", "(", "vars", "(", "opts", ")", ",", "f'{opts.output}/meta.json'", ",", "save_pretty", "=", "True", ")", "\n", "\n", "open_db", "=", "curry", "(", "open_lmdb", ",", "opts", ".", "output", ",", "readonly", "=", "False", ")", "\n", "with", "open_db", "(", ")", "as", "db", ":", "\n", "        ", "sub_info_cache_path", "=", "f'{opts.output}/sub_info.json'", "\n", "try", ":", "\n", "            ", "vid2nframe", "=", "load_json", "(", "opts", ".", "vid2nframe", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "vid2nframe", "=", "None", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "sub_info_cache_path", ")", ":", "\n", "            ", "video2sub_info", "=", "load_process_sub_meta", "(", "\n", "opts", ".", "annotation", ",", "vid2nframe", ",", "frame_length", "=", "args", ".", "frame_length", ")", "\n", "save_json", "(", "video2sub_info", ",", "sub_info_cache_path", ")", "\n", "", "else", ":", "\n", "            ", "video2sub_info", "=", "load_json", "(", "sub_info_cache_path", ")", "\n", "", "with", "open", "(", "opts", ".", "annotation", ")", "as", "ann", ":", "\n", "            ", "vid2len", ",", "vid2max_frame_sub_len", "=", "process_tv_subtitles", "(", "\n", "ann", ",", "video2sub_info", ",", "db", ",", "\n", "tokenizer", ",", "meta", "[", "'SEP'", "]", ")", "\n", "\n", "", "save_json", "(", "vid2len", ",", "f'{opts.output}/vid2len.json'", ")", "\n", "save_json", "(", "vid2max_frame_sub_len", ",", "\n", "f'{opts.output}/vid2max_frame_sub_len.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.convert_videodb.load_npz": [[23, 51], ["ValueError", "numpy.load", "slowfast_features.astype.astype", "numpy.load", "resnet_features.astype.astype", "numpy.concatenate", "print"], "function", ["None"], ["@", "curry", "\n", "def", "load_npz", "(", "fname", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "vid", ",", "nframes", ",", "slowfast_fname", ",", "resnet_fname", ",", "_", "=", "fname", "\n", "", "except", "Exception", ":", "\n", "        ", "vid", ",", "nframes", ",", "slowfast_fname", ",", "resnet_fname", "=", "fname", "\n", "", "try", ":", "\n", "        ", "if", "nframes", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'wrong ndim'", ")", "\n", "", "slowfast_features", "=", "np", ".", "load", "(", "\n", "slowfast_fname", ",", "allow_pickle", "=", "True", ")", "[", "\"features\"", "]", "\n", "if", "slowfast_features", ".", "dtype", "==", "np", ".", "float16", ":", "\n", "            ", "slowfast_features", "=", "slowfast_features", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "resnet_features", "=", "np", ".", "load", "(", "\n", "resnet_fname", ",", "allow_pickle", "=", "True", ")", "[", "\"features\"", "]", "\n", "if", "resnet_features", ".", "dtype", "==", "np", ".", "float16", ":", "\n", "            ", "resnet_features", "=", "resnet_features", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "resnet_features", "=", "resnet_features", "[", ":", "nframes", ",", ":", "]", "\n", "slowfast_features", "=", "slowfast_features", "[", ":", "nframes", ",", ":", "]", "\n", "dump", "=", "{", "\"features\"", ":", "np", ".", "concatenate", "(", "\n", "(", "resnet_features", ",", "slowfast_features", ")", ",", "axis", "=", "1", ")", "}", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# corrupted file", "\n", "        ", "print", "(", "f'corrupted file {vid}'", ",", "e", ")", "\n", "dump", "=", "{", "}", "\n", "nframes", "=", "0", "\n", "\n", "", "return", "vid", ",", "dump", ",", "nframes", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.convert_videodb.dumps_npz": [[53, 60], ["io.BytesIO", "writer.getvalue", "numpy.savez_compressed", "numpy.savez"], "function", ["None"], ["", "def", "dumps_npz", "(", "dump", ",", "compress", "=", "False", ")", ":", "\n", "    ", "with", "io", ".", "BytesIO", "(", ")", "as", "writer", ":", "\n", "        ", "if", "compress", ":", "\n", "            ", "np", ".", "savez_compressed", "(", "writer", ",", "**", "dump", ",", "allow_pickle", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "np", ".", "savez", "(", "writer", ",", "**", "dump", ",", "allow_pickle", "=", "True", ")", "\n", "", "return", "writer", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.convert_videodb.dumps_msgpack": [[62, 64], ["msgpack.dumps"], "function", ["None"], ["", "", "def", "dumps_msgpack", "(", "dump", ")", ":", "\n", "    ", "return", "msgpack", ".", "dumps", "(", "dump", ",", "use_bin_type", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.convert_videodb.main": [[66, 137], ["lmdb.open", "lmdb.open.begin", "int", "pickle.load", "convert_videodb.load_npz", "set", "os.path.exists", "list", "os.path.exists", "os.makedirs", "open", "multiprocessing.Pool", "tqdm.tqdm", "enumerate", "env.begin.commit", "lmdb.open.close", "json.load", "json.load.items", "open", "json.dump", "len", "list", "pkl.load.items", "pool.imap_unordered", "pbar.update", "open", "open", "json.dump", "len", "pbar.update", "list.add", "range", "env.begin.put", "env.begin.commit", "lmdb.open.begin", "print", "min", "min", "env.begin.put", "convert_videodb.dumps_npz", "convert_videodb.dumps_msgpack", "convert_videodb.dumps_npz", "convert_videodb.dumps_msgpack", "fname.encode", "clip_name.encode"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.scripts.collect_video_feature_paths.load_npz", "home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.close", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.convert_videodb.dumps_npz", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.convert_videodb.dumps_msgpack", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.convert_videodb.dumps_npz", "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.convert_videodb.dumps_msgpack", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode"], ["", "def", "main", "(", "opts", ")", ":", "\n", "    ", "db_name", "=", "f'{opts.feat_version}_{opts.frame_length}'", "\n", "if", "opts", ".", "compress", ":", "\n", "        ", "db_name", "+=", "'_compressed'", "\n", "", "if", "not", "exists", "(", "f'{opts.output}/{opts.dataset}'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "f'{opts.output}/{opts.dataset}'", ")", "\n", "", "env", "=", "lmdb", ".", "open", "(", "f'{opts.output}/{opts.dataset}/{db_name}'", ",", "map_size", "=", "1024", "**", "4", ")", "\n", "txn", "=", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "clip_interval", "=", "int", "(", "opts", ".", "clip_interval", "/", "opts", ".", "frame_length", ")", "\n", "# files = glob.glob(f'{opts.img_dir}/*.npz')", "\n", "files_dict", "=", "pkl", ".", "load", "(", "open", "(", "opts", ".", "vfeat_info_file", ",", "\"rb\"", ")", ")", "\n", "files", "=", "[", "[", "key", "]", "+", "list", "(", "val", ")", "for", "key", ",", "val", "in", "files_dict", ".", "items", "(", ")", "]", "\n", "# for root, dirs, curr_files in os.walk(f'{opts.img_dir}/'):", "\n", "#     for f in curr_files:", "\n", "#         if f.endswith('.npz'):", "\n", "#             files.append(os.path.join(root, f))", "\n", "load", "=", "load_npz", "(", ")", "\n", "name2nframes", "=", "{", "}", "\n", "corrupted_files", "=", "set", "(", ")", "\n", "with", "mp", ".", "Pool", "(", "opts", ".", "nproc", ")", "as", "pool", ",", "tqdm", "(", "total", "=", "len", "(", "files", ")", ")", "as", "pbar", ":", "\n", "        ", "for", "i", ",", "(", "fname", ",", "features", ",", "nframes", ")", "in", "enumerate", "(", "\n", "pool", ".", "imap_unordered", "(", "load", ",", "files", ",", "chunksize", "=", "128", ")", ")", ":", "\n", "            ", "if", "not", "features", "or", "nframes", "==", "0", ":", "\n", "                ", "pbar", ".", "update", "(", "1", ")", "\n", "corrupted_files", ".", "add", "(", "fname", ")", "\n", "continue", "# corrupted feature", "\n", "", "if", "opts", ".", "clip_interval", "!=", "-", "1", ":", "\n", "                ", "feature_values", "=", "features", "[", "\"features\"", "]", "\n", "clip_id", "=", "0", "\n", "for", "st_ind", "in", "range", "(", "0", ",", "nframes", ",", "clip_interval", ")", ":", "\n", "                    ", "clip_name", "=", "fname", "+", "f\".{clip_id}\"", "\n", "ed_ind", "=", "min", "(", "st_ind", "+", "clip_interval", ",", "nframes", ")", "\n", "clip_features", "=", "{", "\n", "\"features\"", ":", "feature_values", "[", "st_ind", ":", "ed_ind", "]", "}", "\n", "clip_id", "+=", "1", "\n", "if", "opts", ".", "compress", ":", "\n", "                        ", "clip_dump", "=", "dumps_npz", "(", "clip_features", ",", "compress", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "clip_dump", "=", "dumps_msgpack", "(", "clip_features", ")", "\n", "", "txn", ".", "put", "(", "key", "=", "clip_name", ".", "encode", "(", "'utf-8'", ")", ",", "value", "=", "clip_dump", ")", "\n", "name2nframes", "[", "clip_name", "]", "=", "ed_ind", "-", "st_ind", "\n", "", "", "else", ":", "\n", "                ", "if", "opts", ".", "compress", ":", "\n", "                    ", "dump", "=", "dumps_npz", "(", "features", ",", "compress", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "dump", "=", "dumps_msgpack", "(", "features", ")", "\n", "", "txn", ".", "put", "(", "key", "=", "fname", ".", "encode", "(", "'utf-8'", ")", ",", "value", "=", "dump", ")", "\n", "name2nframes", "[", "fname", "]", "=", "nframes", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "txn", ".", "commit", "(", ")", "\n", "txn", "=", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "", "pbar", ".", "update", "(", "1", ")", "\n", "", "txn", ".", "commit", "(", ")", "\n", "env", ".", "close", "(", ")", "\n", "", "id2frame_len_file", "=", "f'{opts.output}/{opts.dataset}/id2nframe.json'", "\n", "if", "os", ".", "path", ".", "exists", "(", "id2frame_len_file", ")", ":", "\n", "        ", "id2frame", "=", "json", ".", "load", "(", "open", "(", "id2frame_len_file", ",", "\"r\"", ")", ")", "\n", "for", "key", ",", "val", "in", "id2frame", ".", "items", "(", ")", ":", "\n", "            ", "if", "val", "!=", "name2nframes", "[", "key", "]", ":", "\n", "                ", "print", "(", "f\"Mismatch: {val} vs. {name2nframes[key]}\"", ")", "\n", "id2frame", "[", "key", "]", "=", "min", "(", "val", ",", "name2nframes", "[", "key", "]", ")", "\n", "", "assert", "id2frame", "[", "key", "]", ">", "0", "\n", "", "", "else", ":", "\n", "        ", "id2frame", "=", "name2nframes", "\n", "", "with", "open", "(", "id2frame_len_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "id2frame", ",", "f", ")", "\n", "", "corrupted_files", "=", "list", "(", "corrupted_files", ")", "\n", "if", "len", "(", "corrupted_files", ")", ">", "0", ":", "\n", "        ", "corrupted_output_file", "=", "f'{opts.output}/{opts.dataset}/corrupted.json'", "\n", "with", "open", "(", "corrupted_output_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "corrupted_files", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.collect_video_feature_paths.load_npz": [[13, 41], ["slowfast_f.replace", "min", "[].split", "slowfast_f.split", "numpy.load", "max", "print", "os.path.exists", "print", "len", "numpy.load", "len", "print", "slowfast_f.split"], "function", ["None"], ["@", "curry", "\n", "def", "load_npz", "(", "slowfast_dir", ",", "resnet_dir", ",", "slowfast_f", ")", ":", "\n", "    ", "vid", "=", "slowfast_f", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".npz\"", ")", "[", "0", "]", "\n", "folder_name", "=", "slowfast_f", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "resnet_f", "=", "slowfast_f", ".", "replace", "(", "slowfast_dir", ",", "resnet_dir", ")", "\n", "try", ":", "\n", "        ", "slowfast_data", "=", "np", ".", "load", "(", "slowfast_f", ",", "allow_pickle", "=", "True", ")", "\n", "slowfast_frame_len", "=", "max", "(", "0", ",", "len", "(", "slowfast_data", "[", "\"features\"", "]", ")", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "slowfast_frame_len", "=", "0", "\n", "", "resnet_frame_len", "=", "0", "\n", "if", "slowfast_frame_len", "==", "0", ":", "\n", "        ", "slowfast_f", "=", "\"\"", "\n", "print", "(", "f\"Corrupted slowfast files for {vid}\"", ")", "\n", "# print(resnet_f)", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "resnet_f", ")", ":", "\n", "        ", "resnet_f", "=", "\"\"", "\n", "print", "(", "f\"resnet files for {vid} does not exists\"", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "resnet_data", "=", "np", ".", "load", "(", "resnet_f", ",", "allow_pickle", "=", "True", ")", "\n", "resnet_frame_len", "=", "len", "(", "resnet_data", "[", "\"features\"", "]", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "resnet_frame_len", "=", "0", "\n", "resnet_f", "=", "\"\"", "\n", "print", "(", "f\"Corrupted resnet files for {vid}\"", ")", "\n", "", "", "frame_len", "=", "min", "(", "slowfast_frame_len", ",", "resnet_frame_len", ")", "\n", "return", "vid", ",", "frame_len", ",", "slowfast_f", ",", "resnet_f", ",", "folder_name", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.scripts.collect_video_feature_paths.main": [[43, 82], ["os.path.join", "os.path.join", "os.walk", "print", "print", "collect_video_feature_paths.load_npz", "os.path.join", "pickle.dump", "len", "len", "multiprocessing.Pool", "tqdm.tqdm", "enumerate", "os.path.exists", "os.makedirs", "open", "pickle.dump", "pickle.dump", "f.endswith", "pool.imap_unordered", "pbar.update", "os.path.join", "open", "open", "os.path.join", "loaded_file.append", "len", "len", "os.path.join", "failed_resnet_files.append", "os.path.join", "failed_slowfast_files.append", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.scripts.collect_video_feature_paths.load_npz"], ["", "def", "main", "(", "opts", ")", ":", "\n", "    ", "slowfast_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "feature_dir", ",", "\"slowfast_features/\"", ")", "\n", "resnet_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "feature_dir", ",", "\"resnet_features/\"", ")", "\n", "failed_resnet_files", "=", "[", "]", "\n", "failed_slowfast_files", "=", "[", "]", "\n", "loaded_file", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "curr_files", "in", "os", ".", "walk", "(", "f'{slowfast_dir}/'", ")", ":", "\n", "        ", "for", "f", "in", "curr_files", ":", "\n", "            ", "if", "f", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "                ", "slowfast_f", "=", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "\n", "loaded_file", ".", "append", "(", "slowfast_f", ")", "\n", "", "", "", "print", "(", "f\"Found {len(loaded_file)} slowfast files....\"", ")", "\n", "print", "(", "f\"sample loaded_file: {loaded_file[:3]}\"", ")", "\n", "failed_resnet_files", ",", "failed_slowfast_files", "=", "[", "]", ",", "[", "]", "\n", "files", "=", "{", "}", "\n", "load", "=", "load_npz", "(", "slowfast_dir", ",", "resnet_dir", ")", "\n", "with", "mp", ".", "Pool", "(", "opts", ".", "nproc", ")", "as", "pool", ",", "tqdm", "(", "total", "=", "len", "(", "loaded_file", ")", ")", "as", "pbar", ":", "\n", "        ", "for", "i", ",", "(", "vid", ",", "frame_len", ",", "slowfast_f", ",", "\n", "resnet_f", ",", "folder_name", ")", "in", "enumerate", "(", "\n", "pool", ".", "imap_unordered", "(", "load", ",", "loaded_file", ",", "chunksize", "=", "128", ")", ")", ":", "\n", "            ", "files", "[", "vid", "]", "=", "(", "frame_len", ",", "slowfast_f", ",", "resnet_f", ",", "folder_name", ")", "\n", "if", "resnet_f", "==", "\"\"", ":", "\n", "                ", "video_file", "=", "os", ".", "path", ".", "join", "(", "folder_name", ",", "vid", ")", "\n", "failed_resnet_files", ".", "append", "(", "video_file", ")", "\n", "", "if", "slowfast_f", "==", "\"\"", ":", "\n", "                ", "video_file", "=", "os", ".", "path", ".", "join", "(", "folder_name", ",", "vid", ")", "\n", "failed_slowfast_files", ".", "append", "(", "video_file", ")", "\n", "", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "output_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "output", ",", "opts", ".", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "pkl", ".", "dump", "(", "files", ",", "open", "(", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "\"video_feat_info.pkl\"", ")", ",", "\"wb\"", ")", ")", "\n", "if", "len", "(", "failed_slowfast_files", ")", ":", "\n", "        ", "pkl", ".", "dump", "(", "failed_slowfast_files", ",", "open", "(", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "\"failed_slowfast_files.pkl\"", ")", ",", "\"wb\"", ")", ")", "\n", "", "if", "len", "(", "failed_resnet_files", ")", ":", "\n", "        ", "pkl", ".", "dump", "(", "failed_resnet_files", ",", "open", "(", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "\"failed_resnet_files.pkl\"", ")", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.VideoQaDataset.__init__": [[22, 49], ["isinstance", "isinstance", "data.get_ids_and_lens", "data._check_ngpu", "data._check_ngpu", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", "\n", "\n", "hsz", "=", "config", ".", "c_config", ".", "hidden_size", "\n", "\n", "self", ".", "qa_pool", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "hsz", ",", "out_features", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "qa_pred_head", "=", "MLPLayer", "(", "hsz", ",", "1", ")", "\n", "\n", "# in tvqa/how2qa, we also have annotations for st and ed frame idx", "\n", "self", ".", "st_ed_pool", "=", "copy", ".", "deepcopy", "(", "self", ".", "qa_pool", ")", "\n", "self", ".", "st_ed_pred_head", "=", "MLPLayer", "(", "hsz", ",", "2", ")", "\n", "\n", "", "def", "get_modularized_video", "(", "self", ",", "frame_embeddings", ",", "frame_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_embeddings: (Nv, Nq, L, D)\n            frame_mask: (Nv, Nq, L)\n        \"\"\"", "\n", "st_ed_attn_scores", "=", "self", ".", "st_ed_pool", "(", "\n", "frame_embeddings", ")", "# (Nv, Nq, L, 1)", "\n", "qa_attn_scores", "=", "self", ".", "qa_pool", "(", "frame_embeddings", ")", "\n", "\n", "st_ed_attn_scores", "=", "F", ".", "softmax", "(", "\n", "mask_logits", "(", "st_ed_attn_scores", ",", "\n", "frame_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "qa_attn_scores", "=", "F", ".", "softmax", "(", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.VideoQaDataset.getids": [[50, 61], ["len", "random.sample", "len"], "methods", ["None"], ["mask_logits", "(", "qa_attn_scores", ",", "\n", "frame_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "# TODO check whether it is the same", "\n", "st_ed_pooled_video", "=", "torch", ".", "einsum", "(", "\n", "\"vqlm,vqld->vlmd\"", ",", "st_ed_attn_scores", ",", "\n", "frame_embeddings", ")", "# (Nv, L, 1, D)", "\n", "qa_pooled_video", "=", "torch", ".", "einsum", "(", "\n", "\"vqlm,vqld->vqmd\"", ",", "qa_attn_scores", ",", "\n", "frame_embeddings", ")", "# (Nv, Nq, 1, D)", "\n", "return", "st_ed_pooled_video", ".", "squeeze", "(", "2", ")", ",", "qa_pooled_video", ".", "squeeze", "(", "2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'tvqa'", ",", "compute_loss", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.VideoQaDataset.__getitem__": [[62, 122], ["videoQA.VideoQaDataset.getids", "videoQA.VideoQaDataset.video_db.__getitem__", "len", "all_vids.append", "all_targets.append", "all_ts_targets.append", "torch.LongTensor", "torch.LongTensor", "videoQA.VideoQaDataset.get_st_ed_label", "torch.LongTensor", "torch.LongTensor", "torch.tensor", "torch.tensor", "all_qa_input_ids.append", "all_qa_attn_masks.append", "zip", "all_video_qa_inputs.append", "torch.cat", "torch.cat", "f_sub_qa_input_ids.append", "f_sub_qa_attn_masks.append", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.get_st_ed_label"], ["        ", "batch", "=", "defaultdict", "(", "lambda", ":", "None", ",", "batch", ")", "\n", "if", "task", "==", "'tvqa'", "or", "task", "==", "'how2qa'", ":", "\n", "            ", "targets", "=", "batch", "[", "'targets'", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "c_attn_masks", "=", "batch", "[", "\"c_attn_masks\"", "]", "\n", "ts_targets", "=", "batch", "[", "\"ts_targets\"", "]", "\n", "# (num_video * 5, num_frames, hid_size)", "\n", "frame_embeddings", "=", "self", ".", "v_encoder", ".", "forward_repr", "(", "\n", "batch", ",", "encode_clip", "=", "False", ")", "\n", "frame_embeddings", "=", "self", ".", "v_encoder", ".", "c_encoder", ".", "embeddings", "(", "\n", "frame_embeddings", ",", "\n", "position_ids", "=", "None", ")", "\n", "qa_embeddings", "=", "self", ".", "v_encoder", ".", "f_encoder", ".", "_compute_txt_embeddings", "(", "\n", "batch", "[", "\"qa_input_ids\"", "]", ",", "batch", "[", "\"qa_pos_ids\"", "]", ",", "txt_type_ids", "=", "None", ")", "\n", "frame_qa_embeddings", "=", "torch", ".", "cat", "(", "\n", "(", "frame_embeddings", ",", "qa_embeddings", ")", ",", "dim", "=", "1", ")", "\n", "frame_qa_attn_mask", "=", "torch", ".", "cat", "(", "\n", "(", "c_attn_masks", ",", "batch", "[", "\"qa_attn_masks\"", "]", ")", ",", "dim", "=", "1", ")", "\n", "fused_video_qa", "=", "self", ".", "v_encoder", ".", "c_encoder", ".", "forward_encoder", "(", "\n", "frame_qa_embeddings", ",", "frame_qa_attn_mask", ")", "\n", "num_frames", "=", "c_attn_masks", ".", "shape", "[", "1", "]", "\n", "video_embeddings", "=", "fused_video_qa", "[", ":", ",", ":", "num_frames", ",", ":", "]", "\n", "\n", "num_videos", "=", "len", "(", "targets", ")", "\n", "num_frames", ",", "hid_size", "=", "video_embeddings", ".", "shape", "[", "1", ":", "3", "]", "\n", "video_embeddings", "=", "video_embeddings", ".", "view", "(", "\n", "num_videos", ",", "-", "1", ",", "num_frames", ",", "hid_size", ")", "\n", "video_masks", "=", "c_attn_masks", ".", "view", "(", "num_videos", ",", "-", "1", ",", "num_frames", ")", "\n", "video_masks", "=", "video_masks", ".", "to", "(", "dtype", "=", "video_embeddings", ".", "dtype", ")", "\n", "st_ed_pooled_video", ",", "qa_pooled_video", "=", "self", ".", "get_modularized_video", "(", "\n", "video_embeddings", ",", "video_masks", ")", "\n", "pred_st_ed", "=", "self", ".", "st_ed_pred_head", "(", "st_ed_pooled_video", ")", "\n", "st_prob", "=", "mask_logits", "(", "pred_st_ed", "[", ":", ",", ":", ",", "0", "]", ",", "video_masks", "[", ":", ",", "0", "]", ")", "\n", "ed_prob", "=", "mask_logits", "(", "pred_st_ed", "[", ":", ",", ":", ",", "1", "]", ",", "video_masks", "[", ":", ",", "0", "]", ")", "\n", "logits", "=", "self", ".", "qa_pred_head", "(", "qa_pooled_video", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "compute_loss", ":", "\n", "                ", "st_target", ",", "ed_target", "=", "ts_targets", "[", ":", ",", "0", "]", ",", "ts_targets", "[", ":", ",", "1", "]", "\n", "st_loss", "=", "F", ".", "cross_entropy", "(", "\n", "st_prob", ",", "st_target", ",", "reduction", "=", "\"mean\"", ",", "\n", "ignore_index", "=", "-", "1", ")", "\n", "ed_loss", "=", "F", ".", "cross_entropy", "(", "\n", "ed_prob", ",", "ed_target", ",", "reduction", "=", "\"mean\"", ",", "\n", "ignore_index", "=", "-", "1", ")", "\n", "temporal_loss", "=", "(", "st_loss", "+", "ed_loss", ")", "/", "2.", "\n", "qa_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ",", "reduction", "=", "'mean'", ",", "\n", "ignore_index", "=", "-", "1", ")", "\n", "return", "qa_loss", ",", "temporal_loss", "\n", "", "else", ":", "\n", "                ", "return", "logits", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized task: {task}'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.VideoQaDataset.__len__": [[123, 127], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.VideoQaDataset.get_st_ed_label": [[128, 153], ["ts.split.split.split", "float", "float", "min", "min", "math.floor", "max", "math.ceil"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.VideoQaEvalDataset.__getitem__": [[186, 190], ["videoQA.VideoQaEvalDataset.getids", "videoQA.VideoQaDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.video_qa_collate": [[155, 183], ["map", "range", "range", "data.video_collate", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "data.txt_input_collate", "toolz.sandbox.unzip", "len", "all_video_qa_inputs.extend", "all_qa_input_ids.extend", "all_qa_attn_masks.extend", "len", "all_target.extend", "all_ts_target.extend"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.txt_input_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.video_qa_eval_collate": [[192, 200], ["videoQA.video_qa_collate", "qids.extend", "video_qa_collate.append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.videoQA.video_qa_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm.MfmDataset.__init__": [[43, 51], ["isinstance", "data._check_ngpu", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "video_ids", ",", "vid_sub_db", ",", "mask_prob", "=", "0.15", ")", ":", "\n", "        ", "assert", "isinstance", "(", "vid_sub_db", ",", "VideoFeatSubTokDataset", ")", "\n", "self", ".", "mask_prob", "=", "mask_prob", "\n", "self", ".", "vid_sub_db", "=", "vid_sub_db", "\n", "if", "_check_ngpu", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "ids", "=", "video_ids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ids", "=", "video_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm.MfmDataset.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm.MfmDataset.__getitem__": [[55, 75], ["mfm._get_img_mask", "torch.tensor", "c_frame_mask.index_select.index_select.index_select", "c_v_feats.size", "len", "range", "frame_masks.append", "frame_masks.append", "len", "c_frame_mask.index_select.index_select.index_select", "torch.zeros", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm._get_img_mask", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid", "=", "self", ".", "ids", "[", "i", "]", "\n", "(", "all_input_ids", ",", "f_v_feats", ",", "f_attn_masks", ",", "\n", "c_v_feats", ",", "c_attn_masks", ",", "\n", "num_subs", ",", "sub2frames", ")", "=", "self", ".", "vid_sub_db", "[", "vid", "]", "\n", "\n", "c_frame_mask", "=", "_get_img_mask", "(", "self", ".", "mask_prob", ",", "c_v_feats", ".", "size", "(", "0", ")", ")", "\n", "frame_masks", "=", "[", "]", "\n", "for", "i", ",", "frames", "in", "sub2frames", ":", "\n", "            ", "if", "len", "(", "frames", ")", ":", "\n", "                ", "frame_masks", ".", "append", "(", "\n", "c_frame_mask", ".", "index_select", "(", "0", ",", "torch", ".", "tensor", "(", "frames", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "frame_masks", ".", "append", "(", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "bool", ")", ")", "\n", "", "", "c_pos_ids", "=", "torch", ".", "tensor", "(", "range", "(", "len", "(", "c_v_feats", ")", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "c_frame_mask", "=", "c_frame_mask", ".", "index_select", "(", "0", ",", "c_pos_ids", ")", "\n", "return", "(", "(", "all_input_ids", ",", "f_v_feats", ",", "f_attn_masks", ",", "\n", "c_v_feats", ",", "c_attn_masks", ",", "\n", "num_subs", ",", "sub2frames", ")", ",", "\n", "frame_masks", ",", "c_frame_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm._get_img_mask": [[19, 26], ["torch.tensor", "any", "random.random", "range", "random.choice", "range"], "function", ["None"], ["def", "_get_img_mask", "(", "mask_prob", ",", "num_frame", ")", ":", "\n", "    ", "img_mask", "=", "[", "random", ".", "random", "(", ")", "<", "mask_prob", "for", "_", "in", "range", "(", "num_frame", ")", "]", "\n", "if", "not", "any", "(", "img_mask", ")", ":", "\n", "# at least mask 1", "\n", "        ", "img_mask", "[", "random", ".", "choice", "(", "range", "(", "num_frame", ")", ")", "]", "=", "True", "\n", "", "img_mask", "=", "torch", ".", "tensor", "(", "img_mask", ")", "\n", "return", "img_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm._get_feat_target": [[28, 34], ["img_masks.unsqueeze().expand_as", "img_feat.size", "img_feat[].contiguous().view", "img_masks.unsqueeze", "img_feat[].contiguous"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "_get_feat_target", "(", "img_feat", ",", "img_masks", ")", ":", "\n", "    ", "img_masks_ext", "=", "img_masks", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "img_feat", ")", "# (n, m, d)", "\n", "feat_dim", "=", "img_feat", ".", "size", "(", "-", "1", ")", "\n", "feat_targets", "=", "img_feat", "[", "img_masks_ext", "]", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "feat_dim", ")", "# (s, d)", "\n", "return", "feat_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm._mask_img_feat": [[36, 40], ["img_masks.unsqueeze().expand_as", "img_feat.data.masked_fill", "img_masks.unsqueeze"], "function", ["None"], ["", "def", "_mask_img_feat", "(", "img_feat", ",", "img_masks", ")", ":", "\n", "    ", "img_masks_ext", "=", "img_masks", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "img_feat", ")", "\n", "img_feat_masked", "=", "img_feat", ".", "data", ".", "masked_fill", "(", "img_masks_ext", ",", "0", ")", "\n", "return", "img_feat_masked", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm.mfm_collate": [[77, 98], ["map", "data.video_collate", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "mfm._mask_img_feat", "mfm._get_feat_target", "mfm._mask_img_feat", "toolz.sandbox.unzip", "list", "cytoolz.concat"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm._mask_img_feat", "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm._get_feat_target", "home.repos.pwc.inspect_result.linjieli222_HERO.data.mfm._mask_img_feat"], ["", "", "def", "mfm_collate", "(", "inputs", ")", ":", "\n", "    ", "video_inputs", ",", "all_frame_masks", ",", "c_frame_masks", "=", "map", "(", "list", ",", "unzip", "(", "inputs", ")", ")", "\n", "batch", "=", "video_collate", "(", "video_inputs", ")", "\n", "\n", "# mask features", "\n", "frame_masks", "=", "pad_sequence", "(", "list", "(", "concat", "(", "all_frame_masks", ")", ")", ",", "\n", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "c_frame_masks", "=", "pad_sequence", "(", "c_frame_masks", ",", "\n", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "f_v_feats", "=", "batch", "[", "'f_v_feats'", "]", "\n", "f_v_feats", "=", "_mask_img_feat", "(", "f_v_feats", ",", "frame_masks", ")", "\n", "c_v_feats", "=", "batch", "[", "'c_v_feats'", "]", "\n", "feat_targets", "=", "_get_feat_target", "(", "c_v_feats", ",", "c_frame_masks", ")", "\n", "c_v_feats", "=", "_mask_img_feat", "(", "c_v_feats", ",", "c_frame_masks", ")", "\n", "\n", "batch", "[", "'f_v_feats'", "]", "=", "f_v_feats", "\n", "batch", "[", "'f_v_masks'", "]", "=", "frame_masks", "\n", "batch", "[", "'c_v_feats'", "]", "=", "c_v_feats", "\n", "batch", "[", "'c_v_masks'", "]", "=", "c_frame_masks", "\n", "batch", "[", "'feat_targets'", "]", "=", "feat_targets", "\n", "return", "batch", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm.VideoMlmDataset.__init__": [[79, 89], ["isinstance", "data._check_ngpu", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "video_ids", ",", "vid_sub_db", ",", "mask_prob", "=", "0.15", ",", "\n", "sub_ctx_len", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "vid_sub_db", ",", "VideoFeatSubTokDataset", ")", "\n", "self", ".", "mask_prob", "=", "mask_prob", "\n", "self", ".", "vid_sub_db", "=", "vid_sub_db", "\n", "if", "_check_ngpu", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "ids", "=", "video_ids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ids", "=", "video_ids", "\n", "", "self", ".", "sub_ctx_len", "=", "sub_ctx_len", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm.VideoMlmDataset.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm.VideoMlmDataset.__getitem__": [[93, 132], ["mlm.VideoMlmDataset.vid_sub_db._get_v_feat", "len", "range", "mlm.create_mlm_io", "len", "torch.tensor", "outputs.append", "torch.index_select", "torch.ones", "mlm._get_txt_tgt_mask", "torch.zeros", "torch.ones", "torch.ones.data[].fill_", "mlm._get_txt_tgt_mask", "orig_input_ids.extend", "torch.tensor", "copy.deepcopy", "len", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VideoFeatDataset._get_v_feat", "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm.create_mlm_io", "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm._get_txt_tgt_mask", "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm._get_txt_tgt_mask"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid", "=", "self", ".", "ids", "[", "i", "]", "\n", "example", "=", "self", ".", "vid_sub_db", ".", "txt_db", "[", "vid", "]", "\n", "v_feat", ",", "nframes", "=", "self", ".", "vid_sub_db", ".", "_get_v_feat", "(", "vid", ")", "\n", "sub2frames", "=", "self", ".", "vid_sub_db", ".", "vid_sub2frame", "[", "vid", "]", "\n", "num_subs", "=", "len", "(", "sub2frames", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "sub_idx", ",", "matched_frames", "in", "sub2frames", ":", "\n", "# text input", "\n", "            ", "orig_input_ids", "=", "[", "]", "\n", "for", "tmp_sub_idx", "in", "range", "(", "sub_idx", "-", "self", ".", "sub_ctx_len", ",", "\n", "sub_idx", "+", "1", ")", ":", "\n", "                ", "if", "tmp_sub_idx", ">=", "0", "and", "tmp_sub_idx", "<", "num_subs", ":", "\n", "                    ", "in_ids", "=", "example", "[", "'input_ids'", "]", "[", "tmp_sub_idx", "]", "\n", "if", "self", ".", "vid_sub_db", ".", "max_txt_len", "!=", "-", "1", ":", "\n", "                        ", "in_ids", "=", "in_ids", "[", ":", "self", ".", "vid_sub_db", ".", "max_txt_len", "]", "\n", "", "orig_input_ids", ".", "extend", "(", "copy", ".", "deepcopy", "(", "in_ids", ")", ")", "\n", "", "", "input_ids", ",", "txt_labels", "=", "create_mlm_io", "(", "\n", "orig_input_ids", ",", "self", ".", "vid_sub_db", ".", "txt_db", ",", "\n", "self", ".", "mask_prob", ")", "\n", "\n", "# video input", "\n", "n_frame", "=", "len", "(", "matched_frames", ")", "\n", "if", "n_frame", ":", "\n", "                ", "matched_v_feats", "=", "torch", ".", "index_select", "(", "\n", "v_feat", ",", "0", ",", "torch", ".", "tensor", "(", "matched_frames", ")", ")", "\n", "attn_masks", "=", "torch", ".", "ones", "(", "len", "(", "input_ids", ")", "+", "n_frame", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "txt_mask_tgt", "=", "_get_txt_tgt_mask", "(", "txt_labels", "!=", "-", "1", ",", "n_frame", ")", "\n", "", "else", ":", "\n", "                ", "matched_v_feats", "=", "torch", ".", "zeros", "(", "1", ",", "v_feat", ".", "shape", "[", "1", "]", ")", "\n", "attn_masks", "=", "torch", ".", "ones", "(", "len", "(", "input_ids", ")", "+", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "attn_masks", ".", "data", "[", "0", "]", ".", "fill_", "(", "0", ")", "\n", "txt_mask_tgt", "=", "_get_txt_tgt_mask", "(", "txt_labels", "!=", "-", "1", ",", "1", ")", "\n", "", "input_ids", "=", "torch", ".", "tensor", "(", "input_ids", ")", "\n", "outputs", ".", "append", "(", "(", "input_ids", ",", "matched_v_feats", ",", "attn_masks", ",", "\n", "txt_mask_tgt", ",", "txt_labels", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm.random_word": [[21, 59], ["enumerate", "all", "random.random", "output_label.append", "output_label.append", "random.choice", "list", "range"], "function", ["None"], ["def", "random_word", "(", "tokens", ",", "vocab_range", ",", "mask", ",", "mask_prob", "=", "0.15", ")", ":", "\n", "    ", "\"\"\"\n    Masking some random tokens for Language Model task with probabilities as in\n        the original BERT paper.\n    :param tokens: list of int, tokenized sentence.\n    :param vocab_range: for choosing a random word\n    :return: (list of int, list of int), masked tokens and related labels for\n        LM prediction\n    \"\"\"", "\n", "output_label", "=", "[", "]", "\n", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "        ", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "mask_prob", ":", "\n", "            ", "prob", "/=", "mask_prob", "\n", "\n", "# 80% randomly change token to mask token", "\n", "if", "prob", "<", "0.8", ":", "\n", "                ", "tokens", "[", "i", "]", "=", "mask", "\n", "\n", "# 10% randomly change token to random token", "\n", "", "elif", "prob", "<", "0.9", ":", "\n", "                ", "tokens", "[", "i", "]", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "*", "vocab_range", ")", ")", ")", "\n", "\n", "# -> rest 10% randomly keep current token", "\n", "\n", "# append current token to output (we will predict these later)", "\n", "", "output_label", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "# no masking token (will be ignored by loss function later)", "\n", "            ", "output_label", ".", "append", "(", "-", "1", ")", "\n", "", "", "if", "all", "(", "o", "==", "-", "1", "for", "o", "in", "output_label", ")", ":", "\n", "# at least mask 1", "\n", "        ", "output_label", "[", "0", "]", "=", "tokens", "[", "0", "]", "\n", "tokens", "[", "0", "]", "=", "mask", "\n", "\n", "", "return", "tokens", ",", "output_label", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm._get_txt_tgt_mask": [[61, 65], ["torch.zeros", "torch.cat"], "function", ["None"], ["", "def", "_get_txt_tgt_mask", "(", "txt_mask", ",", "n_frame", ")", ":", "\n", "    ", "z", "=", "torch", ".", "zeros", "(", "n_frame", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "txt_mask_tgt", "=", "torch", ".", "cat", "(", "[", "z", ",", "txt_mask", "]", ",", "dim", "=", "0", ")", "\n", "return", "txt_mask_tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm.create_mlm_io": [[67, 76], ["mlm.random_word", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm.random_word"], ["", "def", "create_mlm_io", "(", "input_ids", ",", "db", ",", "mask_prob", ",", "cls_tok", "=", "True", ")", ":", "\n", "    ", "input_ids", ",", "txt_labels", "=", "random_word", "(", "\n", "input_ids", ",", "db", ".", "v_range", ",", "db", ".", "mask", ",", "mask_prob", ")", "\n", "if", "cls_tok", ":", "\n", "        ", "input_ids", "=", "[", "db", ".", "cls_", "]", "+", "input_ids", "\n", "", "else", ":", "\n", "        ", "input_ids", "=", "[", "db", ".", "sep", "]", "+", "input_ids", "\n", "", "txt_labels", "=", "torch", ".", "tensor", "(", "[", "-", "1", "]", "+", "txt_labels", ")", "\n", "return", "input_ids", ",", "txt_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.mlm.mlm_collate": [[134, 177], ["map", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.arange().unsqueeze", "data.pad_tensors", "torch.nn.utils.rnn.pad_sequence", "data.pad_tensors.size", "torch.nn.utils.rnn.pad_sequence.size", "toolz.sandbox.unzip", "i.size", "f.size", "data.get_gather_index", "cytoolz.concat", "torch.arange", "torch.nn.utils.rnn.pad_sequence.size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.pad_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_gather_index", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "", "def", "mlm_collate", "(", "inputs", ")", ":", "\n", "    ", "\"\"\"\n    Return:\n    :input_ids    (n, max_L) padded with 0\n    :position_ids (n, max_L) padded with 0\n    :img_feat     (n, max_num_bb, feat_dim)\n    :img_pos_feat (n, max_num_bb, 7)\n    :attn_masks   (n, max_{L + num_bb}) padded with 0\n    :txt_labels   (n, max_L) padded with -1\n    \"\"\"", "\n", "(", "input_ids", ",", "v_feats", ",", "attn_masks", ",", "txt_masks", ",", "txt_labels", "\n", ")", "=", "map", "(", "list", ",", "unzip", "(", "concat", "(", "inputs", ")", ")", ")", "\n", "\n", "# text batches", "\n", "txt_lens", "=", "[", "i", ".", "size", "(", "0", ")", "for", "i", "in", "input_ids", "]", "\n", "input_ids", "=", "pad_sequence", "(", "input_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "txt_mask_tgt", "=", "pad_sequence", "(", "txt_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "txt_labels", "=", "pad_sequence", "(", "txt_labels", ",", "batch_first", "=", "True", ",", "padding_value", "=", "-", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "0", ",", "input_ids", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# image batches", "\n", "num_fs", "=", "[", "f", ".", "size", "(", "0", ")", "for", "f", "in", "v_feats", "]", "\n", "v_feat", "=", "pad_tensors", "(", "v_feats", ",", "num_fs", ")", "\n", "\n", "attn_masks", "=", "pad_sequence", "(", "attn_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "bs", ",", "max_vl", ",", "_", "=", "v_feat", ".", "size", "(", ")", "\n", "out_size", "=", "attn_masks", ".", "size", "(", "1", ")", "\n", "if", "max_vl", ">", "0", ":", "\n", "        ", "gather_index", "=", "get_gather_index", "(", "txt_lens", ",", "num_fs", ",", "bs", ",", "max_vl", ",", "out_size", ")", "\n", "", "else", ":", "\n", "        ", "gather_index", "=", "None", "\n", "v_feat", "=", "None", "\n", "\n", "", "batch", "=", "{", "'input_ids'", ":", "input_ids", ",", "\n", "'position_ids'", ":", "position_ids", ",", "\n", "'v_feat'", ":", "v_feat", ",", "\n", "'attn_masks'", ":", "attn_masks", ",", "\n", "'gather_index'", ":", "gather_index", ",", "\n", "'txt_mask_tgt'", ":", "txt_mask_tgt", ",", "\n", "'txt_labels'", ":", "txt_labels", "[", "txt_labels", "!=", "-", "1", "]", "}", "\n", "return", "batch", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.FomDataset.__init__": [[19, 27], ["isinstance", "data._check_ngpu", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "video_ids", ",", "vid_sub_db", ",", "random_reorder_p", "=", "0.15", ")", ":", "\n", "        ", "assert", "isinstance", "(", "vid_sub_db", ",", "VideoFeatSubTokDataset", ")", "\n", "self", ".", "vid_sub_db", "=", "vid_sub_db", "\n", "if", "_check_ngpu", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "ids", "=", "video_ids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ids", "=", "video_ids", "\n", "", "self", ".", "random_reorder_p", "=", "random_reorder_p", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.FomDataset.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.FomDataset.__getitem__": [[31, 48], ["fom.random_reorder", "torch.tensor", "torch.tensor", "list", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.random_reorder"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid_", "=", "self", ".", "ids", "[", "i", "]", "\n", "(", "f_sub_input_ids", ",", "f_v_feats", ",", "f_attn_masks", ",", "\n", "c_v_feats", ",", "c_attn_masks", ",", "\n", "num_subs", ",", "sub2frames", ")", "=", "self", ".", "vid_sub_db", "[", "vid_", "]", "\n", "c_pos_ids", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "c_v_feats", ")", ")", "]", "\n", "# Random shuffle 15% of pos_ids", "\n", "orders", ",", "targets", "=", "random_reorder", "(", "\n", "list", "(", "range", "(", "len", "(", "c_pos_ids", ")", ")", ")", ",", "self", ".", "random_reorder_p", ")", "\n", "orders", "=", "torch", ".", "tensor", "(", "orders", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "targets", "=", "torch", ".", "tensor", "(", "targets", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "video_inputs", "=", "(", "\n", "f_sub_input_ids", ",", "f_v_feats", ",", "f_attn_masks", ",", "\n", "c_v_feats", ",", "c_attn_masks", ",", "\n", "num_subs", ",", "sub2frames", ")", "\n", "out", "=", "(", "video_inputs", ",", "orders", ",", "targets", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.FomEvalDataset.__getitem__": [[119, 123], ["fom.FomDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], ["    ", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid", "=", "self", ".", "ids", "[", "i", "]", "\n", "tensors", "=", "super", "(", ")", ".", "__getitem__", "(", "i", ")", "\n", "return", "(", "vid", ",", "*", "tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.fom_collate": [[50, 94], ["map", "data.video_collate", "torch.arange().unsqueeze().repeat", "enumerate", "torch.arange().unsqueeze().repeat.size", "range", "torch.tensor", "torch.tensor", "toolz.sandbox.unzip", "item.size", "clip_level_v_feats.size", "torch.ones_like", "range", "torch.arange().unsqueeze", "range", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.arange", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "clip_level_v_feats.size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "", "def", "fom_collate", "(", "inputs", ")", ":", "\n", "    ", "(", "video_inputs", ",", "orders", ",", "targets", ")", "=", "map", "(", "list", ",", "unzip", "(", "inputs", ")", ")", "\n", "batch", "=", "video_collate", "(", "video_inputs", ")", "\n", "\n", "clip_level_v_feats", "=", "batch", "[", "\"c_v_feats\"", "]", "\n", "num_frames", "=", "[", "item", ".", "size", "(", "0", ")", "for", "item", "in", "orders", "]", "\n", "\n", "all_orders", "=", "torch", ".", "arange", "(", "\n", "0", ",", "clip_level_v_feats", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "\n", "clip_level_v_feats", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "all_targets", "=", "torch", ".", "ones_like", "(", "all_orders", ")", "*", "-", "1", "\n", "for", "i", ",", "nframe", "in", "enumerate", "(", "num_frames", ")", ":", "\n", "        ", "all_orders", "[", "i", ",", ":", "nframe", "]", "=", "orders", "[", "i", "]", "\n", "all_targets", "[", "i", ",", ":", "nframe", "]", "=", "targets", "[", "i", "]", "\n", "", "reordered_frame_idx", "=", "[", "]", "\n", "binary_targets", "=", "[", "]", "\n", "bs", ",", "max_vl", "=", "all_orders", ".", "size", "(", ")", "\n", "for", "clip_idx", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_frames", "[", "clip_idx", "]", ")", ":", "\n", "            ", "if", "all_targets", "[", "clip_idx", ",", "i", "]", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", ",", "num_frames", "[", "clip_idx", "]", ")", ":", "\n", "                ", "if", "all_targets", "[", "clip_idx", ",", "j", "]", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "reordered_frame_idx", ".", "append", "(", "clip_idx", "*", "max_vl", "+", "i", ")", "\n", "reordered_frame_idx", ".", "append", "(", "clip_idx", "*", "max_vl", "+", "j", ")", "\n", "if", "all_targets", "[", "clip_idx", ",", "i", "]", ">", "all_targets", "[", "clip_idx", ",", "j", "]", ":", "\n", "                    ", "binary_targets", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "binary_targets", ".", "append", "(", "1", ")", "\n", "\n", "", "reordered_frame_idx", ".", "append", "(", "clip_idx", "*", "max_vl", "+", "j", ")", "\n", "reordered_frame_idx", ".", "append", "(", "clip_idx", "*", "max_vl", "+", "i", ")", "\n", "if", "all_targets", "[", "clip_idx", ",", "j", "]", ">", "all_targets", "[", "clip_idx", ",", "i", "]", ":", "\n", "                    ", "binary_targets", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "binary_targets", ".", "append", "(", "1", ")", "\n", "", "", "", "", "reordered_frame_idx", "=", "torch", ".", "tensor", "(", "reordered_frame_idx", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "binary_targets", "=", "torch", ".", "tensor", "(", "binary_targets", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "batch", "[", "\"shuffled_orders\"", "]", "=", "all_orders", "\n", "batch", "[", "\"targets\"", "]", "=", "all_targets", "\n", "batch", "[", "'reordered_frame_idx'", "]", "=", "reordered_frame_idx", "\n", "batch", "[", "'binary_targets'", "]", "=", "binary_targets", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.random_reorder": [[96, 116], ["enumerate", "copy.deepcopy", "random.shuffle", "copy.deepcopy", "enumerate", "random.random", "len", "selected_pos.append", "target_pos.append"], "function", ["None"], ["", "def", "random_reorder", "(", "pos_ids", ",", "random_reorder_p", "=", "0.15", ")", ":", "\n", "    ", "\"\"\"\n    random reorder frame positions\n    \"\"\"", "\n", "selected_pos", "=", "[", "]", "\n", "target_pos", "=", "[", "]", "\n", "for", "i", ",", "pos_id", "in", "enumerate", "(", "pos_ids", ")", ":", "\n", "        ", "prob", "=", "random", ".", "random", "(", ")", "\n", "# mask token with 15% probability", "\n", "if", "prob", "<", "random_reorder_p", ":", "\n", "            ", "selected_pos", ".", "append", "(", "i", ")", "\n", "target_pos", ".", "append", "(", "pos_id", ")", "\n", "", "", "target_pos_shuffled", "=", "copy", ".", "deepcopy", "(", "target_pos", ")", "\n", "random", ".", "shuffle", "(", "target_pos_shuffled", ")", "\n", "output_order", "=", "copy", ".", "deepcopy", "(", "pos_ids", ")", "\n", "output_target", "=", "[", "-", "1", "]", "*", "len", "(", "output_order", ")", "\n", "for", "i", ",", "pos", "in", "enumerate", "(", "selected_pos", ")", ":", "\n", "        ", "output_order", "[", "pos", "]", "=", "target_pos_shuffled", "[", "i", "]", "\n", "output_target", "[", "target_pos_shuffled", "[", "i", "]", "]", "=", "pos", "\n", "", "return", "output_order", ",", "output_target", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.fom_eval_collate": [[125, 133], ["fom.fom_collate", "vids.append", "fom_collate.append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.fom.fom_collate"], ["", "", "def", "fom_eval_collate", "(", "inputs", ")", ":", "\n", "    ", "vids", ",", "batch", "=", "[", "]", ",", "[", "]", "\n", "for", "id_", ",", "*", "tensors", "in", "inputs", ":", "\n", "        ", "vids", ".", "append", "(", "id_", ")", "\n", "batch", ".", "append", "(", "tensors", ")", "\n", "", "batch", "=", "fom_collate", "(", "batch", ")", "\n", "batch", "[", "'vids'", "]", "=", "vids", "\n", "return", "batch", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrSubTokLmdb.__init__": [[18, 26], ["data.SubTokLmdb.__init__", "json.load", "json.load", "open", "open"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["        ", "assert", "lw_neg_ctx", "!=", "0", "or", "lw_neg_q", "!=", "0", ",", "\"Need to set lw_neg_ctx or lw_neg_q for VR training\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "\n", "ranking_loss_type", "=", "ranking_loss_type", ",", "margin", "=", "margin", ",", "\n", "lw_neg_ctx", "=", "lw_neg_ctx", ",", "lw_neg_q", "=", "lw_neg_q", ",", "\n", "lw_st_ed", "=", "0", ",", "drop_svmr_prob", "=", "1.0", ",", "\n", "use_hard_negative", "=", "use_hard_negative", ",", "\n", "hard_pool_size", "=", "hard_pool_size", ",", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrQueryTokLmdb.__init__": [[29, 44], ["data.TxtTokLmdb.__init__", "os.path.exists", "utils.basic_utils.load_jsonl", "json.load", "vr.VrQueryTokLmdb.query2video.items", "open", "vr.VrQueryTokLmdb.video2query[].append"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_jsonl"], ["assert", "self", ".", "lw_st_ed", "==", "0", ",", "\"For VR, lw_st_ed should be 0\"", "\n", "\n", "", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'msrvtt_video_sub'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "if", "task", "in", "[", "'msrvtt_video_sub'", ",", "'msrvtt_video_only'", "]", ":", "\n", "            ", "if", "compute_loss", ":", "\n", "                ", "_", ",", "loss_neg_ctx", ",", "loss_neg_q", "=", "super", "(", ")", ".", "forward", "(", "\n", "batch", ",", "task", "=", "'tvr'", ",", "compute_loss", "=", "True", ")", "\n", "return", "loss_neg_ctx", ",", "loss_neg_q", "\n", "", "else", ":", "\n", "                ", "q2video_scores", ",", "_", ",", "_", "=", "super", "(", ")", ".", "forward", "(", "\n", "batch", ",", "task", "=", "'tvr'", ",", "compute_loss", "=", "False", ")", "\n", "return", "q2video_scores", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized task {task}'", ")", "\n", "\n", "", "", "def", "get_pred_from_raw_query", "(", "self", ",", "frame_embeddings", ",", "c_attn_masks", ",", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrQueryTokLmdb.__getitem__": [[45, 48], ["None"], "methods", ["None"], ["query_input_ids", ",", "query_pos_ids", ",", "\n", "query_attn_masks", ",", "cross", "=", "False", ",", "\n", "val_gather_gpus", "=", "False", ")", ":", "\n", "        ", "modularized_query", "=", "self", ".", "encode_txt_inputs", "(", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.MsrvttQueryTokLmdb.query_data": [[51, 62], ["str", "str"], "methods", ["None"], ["normalized", "=", "False", ")", "\n", "\n", "q2video_scores", "=", "self", ".", "get_video_level_scores", "(", "\n", "modularized_query", ",", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "val_gather_gpus", ")", "\n", "return", "q2video_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrDataset.__init__": [[65, 97], ["isinstance", "isinstance", "data.get_ids_and_lens", "enumerate", "data._check_ngpu", "data._check_ngpu", "sorted", "list", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size", "vr.VrDataset.vid2dur.keys"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrDataset.__getitem__": [[98, 121], ["vr.VrDataset.getids", "vr.VrDataset.video_db.__getitem__", "torch.LongTensor", "torch.tensor", "torch.tensor", "query_and_targets.append", "tuple", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrEvalDataset.__getitem__": [[128, 132], ["vr.VrEvalDataset.getids", "vr.VrDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrFullEvalDataset.__init__": [[145, 163], ["vr.VrDataset.__init__", "data.get_ids_and_lens", "data._check_ngpu", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrFullEvalDataset.__len__": [[164, 166], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrFullEvalDataset.getids": [[167, 174], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.VrFullEvalDataset.__getitem__": [[175, 197], ["vr.VrFullEvalDataset.getids", "vr.VrFullEvalDataset.video_db.__getitem__", "torch.LongTensor", "torch.tensor", "torch.tensor", "query_and_targets.append", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.vr_collate": [[123, 125], ["vcmr.vcmr_collate"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.vcmr_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.vr_eval_collate": [[134, 142], ["vr.vr_collate", "qids.extend", "vr_collate.append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.vr_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr.vr_full_eval_collate": [[199, 201], ["vcmr.vcmr_full_eval_collate"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.vcmr_full_eval_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr_video_only.VcmrVideoOnlyDataset.__init__": [[16, 46], ["isinstance", "isinstance", "data.get_ids_and_lens", "data._check_ngpu", "data._check_ngpu", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "video_ids", ",", "video_db", ",", "query_db", ",", "max_num_query", "=", "5", ",", "\n", "sampled_by_q", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "query_db", ",", "QueryTokLmdb", ")", "\n", "assert", "isinstance", "(", "video_db", ",", "VideoFeatDataset", ")", "\n", "self", ".", "video_db", "=", "video_db", "\n", "self", ".", "query_db", "=", "query_db", "\n", "self", ".", "vid2dur", "=", "self", ".", "video_db", ".", "vid2dur", "\n", "self", ".", "vids", "=", "video_ids", "\n", "self", ".", "global_vid2idx", "=", "video_db", ".", "vid2idx", "\n", "self", ".", "vid2idx", "=", "{", "\n", "vid_name", ":", "self", ".", "global_vid2idx", "[", "vid_name", "]", "\n", "for", "vid_name", "in", "video_ids", "}", "\n", "self", ".", "query_data", "=", "query_db", ".", "query_data", "\n", "self", ".", "frame_interval", "=", "video_db", ".", "img_db", ".", "frame_interval", "\n", "self", ".", "max_num_query", "=", "max_num_query", "\n", "self", ".", "sampled_by_q", "=", "sampled_by_q", "\n", "\n", "if", "sampled_by_q", ":", "\n", "            ", "self", ".", "lens", ",", "self", ".", "qids", "=", "get_ids_and_lens", "(", "query_db", ")", "\n", "# FIXME", "\n", "if", "_check_ngpu", "(", ")", ">", "1", ":", "\n", "# partition data by rank", "\n", "                ", "self", ".", "qids", "=", "self", ".", "qids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "self", ".", "lens", "=", "self", ".", "lens", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "", "else", ":", "\n", "# FIXME", "\n", "            ", "if", "_check_ngpu", "(", ")", ">", "1", ":", "\n", "# partition data by rank", "\n", "                ", "self", ".", "vids", "=", "self", ".", "vids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "self", ".", "lens", "=", "[", "video_db", ".", "txt_db", ".", "id2len", "[", "vid", "]", "for", "vid", "in", "self", ".", "vids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr_video_only.VcmrVideoOnlyEvalDataset.__getitem__": [[49, 53], ["vcmr_video_only.VcmrVideoOnlyEvalDataset.getids", "vcmr.VcmrDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], ["    ", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid", ",", "qids", "=", "self", ".", "getids", "(", "i", ")", "\n", "outs", "=", "super", "(", ")", ".", "__getitem__", "(", "i", ")", "\n", "return", "qids", ",", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr_video_only.VcmrVideoOnlyFullEvalDataset.__init__": [[56, 74], ["vcmr_video_only.VcmrVideoOnlyDataset.__init__", "data.get_ids_and_lens", "data._check_ngpu", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "video_ids", ",", "video_db", ",", "query_db", ",", "max_num_query", "=", "5", ",", "\n", "distributed", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "[", "]", ",", "video_db", ",", "query_db", ",", "sampled_by_q", "=", "True", ")", "\n", "qlens", ",", "qids", "=", "get_ids_and_lens", "(", "query_db", ")", "\n", "# this dataset does not support multi GPU", "\n", "del", "self", ".", "vids", "\n", "self", ".", "vid2idx", "=", "{", "\n", "vid_name", ":", "self", ".", "global_vid2idx", "[", "vid_name", "]", "\n", "for", "vid_name", "in", "video_ids", "}", "\n", "\n", "# FIXME", "\n", "if", "_check_ngpu", "(", ")", ">", "1", "and", "distributed", ":", "\n", "# partition data by rank", "\n", "            ", "self", ".", "qids", "=", "qids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "self", ".", "lens", "=", "qlens", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "qids", "=", "qids", "\n", "self", ".", "lens", "=", "qlens", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr_video_only.VcmrVideoOnlyFullEvalDataset.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "qids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr_video_only.VcmrVideoOnlyFullEvalDataset.getids": [[78, 85], ["len"], "methods", ["None"], ["", "def", "getids", "(", "self", ",", "i", ")", ":", "\n", "        ", "qid", "=", "self", ".", "qids", "[", "i", "]", "\n", "if", "len", "(", "self", ".", "query_db", ".", "query2video", ")", ":", "\n", "            ", "vid", "=", "self", ".", "query_db", ".", "query2video", "[", "qid", "]", "\n", "", "else", ":", "\n", "            ", "vid", "=", "-", "1", "\n", "", "return", "vid", ",", "[", "qid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr_video_only.VcmrVideoOnlyFullEvalDataset.__getitem__": [[86, 114], ["vcmr_video_only.VcmrVideoOnlyFullEvalDataset.getids", "vcmr_video_only.VcmrVideoOnlyFullEvalDataset.video_db.__getitem__", "len", "torch.tensor", "torch.tensor", "query_and_targets.append", "vcmr_video_only.VcmrVideoOnlyFullEvalDataset.get_st_ed_label", "torch.LongTensor", "torch.LongTensor", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.get_st_ed_label"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid", ",", "qids", "=", "self", ".", "getids", "(", "i", ")", "\n", "if", "vid", "!=", "-", "1", ":", "\n", "            ", "video_inputs", "=", "self", ".", "video_db", ".", "__getitem__", "(", "vid", ")", "\n", "(", "frame_level_input_ids", ",", "frame_level_v_feats", ",", "\n", "frame_level_attn_masks", ",", "\n", "clip_level_v_feats", ",", "clip_level_attn_masks", ",", "num_subs", ",", "\n", "sub_idx2frame_idx", ")", "=", "video_inputs", "\n", "nframes", "=", "len", "(", "clip_level_v_feats", ")", "\n", "", "query_and_targets", "=", "[", "]", "\n", "for", "qid", "in", "qids", ":", "\n", "            ", "example", "=", "self", ".", "query_db", "[", "qid", "]", "\n", "if", "example", "[", "'target'", "]", "is", "not", "None", ":", "\n", "                ", "st_idx", ",", "ed_idx", "=", "self", ".", "get_st_ed_label", "(", "\n", "example", "[", "'target'", "]", ",", "max_idx", "=", "nframes", "-", "1", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "\n", "[", "st_idx", ",", "ed_idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "target", "=", "torch", ".", "LongTensor", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "", "query_input_ids", "=", "example", "[", "\"input_ids\"", "]", "\n", "query_input_ids", "=", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "query_db", ".", "cls_", "]", "+", "query_input_ids", ")", "\n", "\n", "query_attn_mask", "=", "torch", ".", "tensor", "(", "[", "1", "]", "*", "len", "(", "query_input_ids", ")", ")", "\n", "\n", "query_and_targets", ".", "append", "(", "\n", "(", "query_input_ids", ",", "query_attn_mask", ",", "vid", ",", "target", ")", ")", "\n", "", "return", "(", "qid", ",", "query_and_targets", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatLmdb.__init__": [[53, 77], ["json.load", "lmdb.open", "data.VideoFeatLmdb.env.begin", "open", "data.VideoFeatLmdb._compute_nframe"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatLmdb._compute_nframe"], ["    ", "def", "__init__", "(", "self", ",", "img_dir", ",", "feat_version", "=", "\"resnet_slowfast\"", ",", "\n", "frame_interval", "=", "1.5", ",", "compress", "=", "True", ",", "max_clip_len", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "img_dir", "=", "img_dir", "\n", "db_name", "=", "f'{feat_version}_{frame_interval}'", "\n", "self", ".", "name2nframe", "=", "json", ".", "load", "(", "\n", "open", "(", "f'{img_dir}/'", "\n", "f'id2nframe.json'", ",", "\"r\"", ")", ")", "\n", "self", ".", "frame_interval", "=", "frame_interval", "\n", "self", ".", "pad", "=", "0", "\n", "self", ".", "cls_", "=", "1", "\n", "self", ".", "mask", "=", "2", "\n", "self", ".", "compress", "=", "compress", "\n", "self", ".", "max_clip_len", "=", "max_clip_len", "\n", "if", "compress", ":", "\n", "            ", "db_name", "+=", "'_compressed'", "\n", "\n", "# only read ahead on single node training", "\n", "", "self", ".", "env", "=", "lmdb", ".", "open", "(", "f'{img_dir}/{db_name}'", ",", "\n", "readonly", "=", "True", ",", "create", "=", "False", ",", "\n", "max_readers", "=", "4096", "*", "8", ",", "\n", "readahead", "=", "False", ")", "\n", "self", ".", "txn", "=", "self", ".", "env", ".", "begin", "(", "buffers", "=", "True", ")", "\n", "if", "self", ".", "name2nframe", "is", "None", ":", "\n", "            ", "self", ".", "name2nframe", "=", "self", ".", "_compute_nframe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatLmdb._compute_nframe": [[78, 95], ["json.loads", "tqdm.tqdm.tqdm", "data.VideoFeatLmdb.txn.get().decode", "data.VideoFeatLmdb.txn.get", "len", "fname.encode", "msgpack.loads", "data.VideoFeatLmdb.txn.get", "io.BytesIO", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.decode", "home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode"], ["", "", "def", "_compute_nframe", "(", "self", ")", ":", "\n", "        ", "name2nframe", "=", "{", "}", "\n", "fnames", "=", "json", ".", "loads", "(", "self", ".", "txn", ".", "get", "(", "key", "=", "b'__keys__'", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "for", "fname", "in", "tqdm", "(", "fnames", ",", "desc", "=", "'reading images'", ")", ":", "\n", "            ", "dump", "=", "self", ".", "txn", ".", "get", "(", "fname", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "if", "self", ".", "compress", ":", "\n", "                ", "with", "io", ".", "BytesIO", "(", "dump", ")", "as", "reader", ":", "\n", "                    ", "img_dump", "=", "np", ".", "load", "(", "reader", ",", "allow_pickle", "=", "True", ")", "\n", "features", "=", "img_dump", "[", "'features'", "]", "\n", "", "", "else", ":", "\n", "                ", "img_dump", "=", "msgpack", ".", "loads", "(", "dump", ",", "raw", "=", "False", ")", "\n", "features", "=", "img_dump", "[", "'features'", "]", "\n", "", "nframe", "=", "len", "(", "features", ")", "\n", "name2nframe", "[", "fname", "]", "=", "self", ".", "max_clip_len", "if", "nframe", ">", "self", ".", "max_clip_len", "else", "nframe", "\n", "\n", "", "return", "name2nframe", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatLmdb.__del__": [[96, 98], ["data.VideoFeatLmdb.env.close"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatLmdb.get_dump": [[99, 109], ["data.VideoFeatLmdb.txn.get", "file_name.encode", "msgpack.loads", "data._fp16_to_fp32", "io.BytesIO", "numpy.load", "data._fp16_to_fp32"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._fp16_to_fp32", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._fp16_to_fp32"], ["", "def", "get_dump", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "dump", "=", "self", ".", "txn", ".", "get", "(", "file_name", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "if", "self", ".", "compress", ":", "\n", "            ", "with", "io", ".", "BytesIO", "(", "dump", ")", "as", "reader", ":", "\n", "                ", "img_dump", "=", "np", ".", "load", "(", "reader", ",", "allow_pickle", "=", "True", ")", "\n", "img_dump", "=", "_fp16_to_fp32", "(", "img_dump", ")", "\n", "", "", "else", ":", "\n", "            ", "img_dump", "=", "msgpack", ".", "loads", "(", "dump", ",", "raw", "=", "False", ")", "\n", "img_dump", "=", "_fp16_to_fp32", "(", "img_dump", ")", "\n", "", "return", "img_dump", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatLmdb.__getitem__": [[110, 123], ["data.VideoFeatLmdb.txn.get", "torch.tensor().float", "file_name.encode", "msgpack.loads", "io.BytesIO", "numpy.load", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode"], ["", "def", "__getitem__", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "dump", "=", "self", ".", "txn", ".", "get", "(", "file_name", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "nframes", "=", "self", ".", "name2nframe", "[", "file_name", "]", "\n", "nframes", "=", "nframes", "if", "nframes", "<", "self", ".", "max_clip_len", "else", "self", ".", "max_clip_len", "\n", "if", "self", ".", "compress", ":", "\n", "            ", "with", "io", ".", "BytesIO", "(", "dump", ")", "as", "reader", ":", "\n", "                ", "img_dump", "=", "np", ".", "load", "(", "reader", ",", "allow_pickle", "=", "True", ")", "\n", "img_dump", "=", "{", "'features'", ":", "img_dump", "[", "'features'", "]", "}", "\n", "", "", "else", ":", "\n", "            ", "img_dump", "=", "msgpack", ".", "loads", "(", "dump", ",", "raw", "=", "False", ")", "\n", "", "img_feat", "=", "torch", ".", "tensor", "(", "img_dump", "[", "'features'", "]", "[", ":", "nframes", "]", ")", ".", "float", "(", ")", "\n", "# img_feat_normalized = F.normalize(img_feat, dim=1)", "\n", "return", "img_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.TxtLmdb.__init__": [[135, 151], ["lmdb.open", "data.TxtLmdb.env.begin", "lmdb.open", "data.TxtLmdb.env.begin"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "db_dir", ",", "readonly", "=", "True", ")", ":", "\n", "        ", "self", ".", "readonly", "=", "readonly", "\n", "if", "readonly", ":", "\n", "# training", "\n", "            ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "db_dir", ",", "\n", "readonly", "=", "True", ",", "create", "=", "False", ",", "\n", "max_readers", "=", "4096", ",", "\n", "readahead", "=", "False", ")", "\n", "self", ".", "txn", "=", "self", ".", "env", ".", "begin", "(", "buffers", "=", "True", ")", "\n", "self", ".", "write_cnt", "=", "None", "\n", "", "else", ":", "\n", "# prepro", "\n", "            ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "db_dir", ",", "readonly", "=", "False", ",", "create", "=", "True", ",", "\n", "map_size", "=", "4", "*", "1024", "**", "4", ")", "\n", "self", ".", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "self", ".", "write_cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.TxtLmdb.__del__": [[152, 156], ["data.TxtLmdb.env.close", "data.TxtLmdb.txn.commit"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.meteor.meteor.Meteor.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "write_cnt", ":", "\n", "            ", "self", ".", "txn", ".", "commit", "(", ")", "\n", "", "self", ".", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.TxtLmdb.__getitem__": [[157, 160], ["msgpack.loads", "lz4.frame.decompress", "data.TxtLmdb.txn.get", "key.encode"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "msgpack", ".", "loads", "(", "decompress", "(", "self", ".", "txn", ".", "get", "(", "key", ".", "encode", "(", "'utf-8'", ")", ")", ")", ",", "\n", "raw", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.TxtLmdb.__setitem__": [[161, 173], ["data.TxtLmdb.txn.put", "ValueError", "key.encode", "lz4.frame.compress", "data.TxtLmdb.txn.commit", "data.TxtLmdb.env.begin", "msgpack.dumps"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.model.tvc.HeroForTvc.encode"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "# NOTE: not thread safe", "\n", "        ", "if", "self", ".", "readonly", ":", "\n", "            ", "raise", "ValueError", "(", "'readonly text DB'", ")", "\n", "", "ret", "=", "self", ".", "txn", ".", "put", "(", "key", ".", "encode", "(", "'utf-8'", ")", ",", "\n", "compress", "(", "msgpack", ".", "dumps", "(", "value", ",", "use_bin_type", "=", "True", ")", ")", ")", "\n", "self", ".", "write_cnt", "+=", "1", "\n", "if", "self", ".", "write_cnt", "%", "1000", "==", "0", ":", "\n", "            ", "self", ".", "txn", ".", "commit", "(", ")", "\n", "self", ".", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "True", ")", "\n", "self", ".", "write_cnt", "=", "0", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.TxtTokLmdb.__init__": [[176, 202], ["data.TxtLmdb", "json.load", "os.path.exists", "open", "json.load", "open", "json.load().items", "json.load", "isinstance", "isinstance", "open", "max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "db_dir", ",", "max_txt_len", "=", "60", ")", ":", "\n", "        ", "self", ".", "db_dir", "=", "db_dir", "\n", "self", ".", "db", "=", "TxtLmdb", "(", "db_dir", ",", "readonly", "=", "True", ")", "\n", "meta", "=", "json", ".", "load", "(", "open", "(", "f'{db_dir}/meta.json'", ",", "'r'", ")", ")", "\n", "self", ".", "cls_", "=", "meta", "[", "'CLS'", "]", "\n", "self", ".", "eos", "=", "meta", "[", "'EOS'", "]", "\n", "self", ".", "pad", "=", "meta", "[", "'PAD'", "]", "\n", "self", ".", "bos", "=", "meta", "[", "'BOS'", "]", "\n", "self", ".", "sep", "=", "meta", "[", "'SEP'", "]", "\n", "self", ".", "mask", "=", "meta", "[", "'MASK'", "]", "\n", "self", ".", "v_range", "=", "meta", "[", "'v_range'", "]", "\n", "id2len_path", "=", "f'{db_dir}/id2len.json'", "\n", "if", "os", ".", "path", ".", "exists", "(", "id2len_path", ")", ":", "\n", "            ", "if", "max_txt_len", "==", "-", "1", ":", "\n", "                ", "self", ".", "id2len", "=", "json", ".", "load", "(", "open", "(", "f'{db_dir}/id2len.json'", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "id2len", "=", "{", "\n", "id_", ":", "len_", "\n", "for", "id_", ",", "len_", "in", "json", ".", "load", "(", "\n", "open", "(", "f'{db_dir}/id2len.json'", ")", ")", ".", "items", "(", ")", "\n", "if", "isinstance", "(", "len_", ",", "int", ")", "and", "len_", "<=", "max_txt_len", "\n", "or", "isinstance", "(", "len_", ",", "list", ")", "and", "\n", "len_", "[", "0", "]", "+", "max", "(", "len_", "[", "1", ":", "]", ")", "<=", "max_txt_len", "\n", "}", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "id2len", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.TxtTokLmdb.__getitem__": [[203, 206], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "id_", ")", ":", "\n", "        ", "txt_dump", "=", "self", ".", "db", "[", "id_", "]", "\n", "return", "txt_dump", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.TxtTokLmdb.combine_inputs": [[207, 212], ["torch.tensor", "input_ids.extend"], "methods", ["None"], ["", "def", "combine_inputs", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "input_ids", "=", "[", "self", ".", "cls_", "]", "\n", "for", "ids", "in", "inputs", ":", "\n", "            ", "input_ids", ".", "extend", "(", "ids", "+", "[", "self", ".", "sep", "]", ")", "\n", "", "return", "torch", ".", "tensor", "(", "input_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.SubTokLmdb.__init__": [[215, 234], ["data.TxtTokLmdb.__init__", "json.load", "json.load", "os.path.exists", "data.SubTokLmdb.compute_sub2frames", "open", "open", "json.load", "json.load.items", "open", "info.items", "info.items"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.SubTokLmdb.compute_sub2frames"], ["    ", "def", "__init__", "(", "self", ",", "db_dir", ",", "max_clip_len", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "db_dir", ",", "max_txt_len", "=", "-", "1", ")", "\n", "self", ".", "max_clip_len", "=", "max_clip_len", "\n", "self", ".", "vid2max_len", "=", "json", ".", "load", "(", "\n", "open", "(", "f'{db_dir}/vid2max_frame_sub_len.json'", ")", ")", "\n", "self", ".", "id2len", "=", "json", ".", "load", "(", "\n", "open", "(", "f'{db_dir}/vid2len.json'", ")", ")", "\n", "self", ".", "vid2dur", ",", "self", ".", "vid2idx", "=", "{", "}", ",", "{", "}", "\n", "video_data_file", "=", "f'{db_dir}/vid2dur_idx.json'", "\n", "if", "os", ".", "path", ".", "exists", "(", "video_data_file", ")", ":", "\n", "            ", "video_data", "=", "json", ".", "load", "(", "open", "(", "video_data_file", ",", "\"r\"", ")", ")", "\n", "for", "key", ",", "info", "in", "video_data", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "vid2dur", "[", "key", "]", "=", "[", "\n", "{", "\"vid_name\"", ":", "k", ",", "\"duration\"", ":", "v", "[", "0", "]", "}", "for", "k", ",", "v", "in", "info", ".", "items", "(", ")", "]", "\n", "self", ".", "vid2idx", "[", "key", "]", "=", "{", "k", ":", "v", "[", "1", "]", "for", "k", ",", "v", "in", "info", ".", "items", "(", ")", "}", "\n", "# else:", "\n", "#     raise ValueError(f\"vid2dur_idx.json does not exists in {db_dir}\")", "\n", "", "", "self", ".", "vid_sub2frame", ",", "self", ".", "vid2vonly_frames", "=", "self", ".", "compute_sub2frames", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.SubTokLmdb.compute_sub2frames": [[235, 269], ["tqdm.tqdm.tqdm", "list", "enumerate", "min", "data.SubTokLmdb.id2len.keys", "sorted", "sen2frame.append", "len", "sen2frame.append", "in_range.append", "len"], "methods", ["None"], ["", "def", "compute_sub2frames", "(", "self", ")", ":", "\n", "        ", "vid_sub2frame", "=", "{", "}", "\n", "vid2vonly_frames", "=", "{", "}", "\n", "for", "vid", "in", "tqdm", "(", "list", "(", "self", ".", "id2len", ".", "keys", "(", ")", ")", ",", "desc", "=", "'reading subtitles'", ")", ":", "\n", "            ", "ex", "=", "self", ".", "db", "[", "vid", "]", "\n", "if", "'unmatched_frames'", "not", "in", "ex", ":", "\n", "                ", "unmatched_frames", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "unmatched_frames", "=", "ex", "[", "\"unmatched_frames\"", "]", "\n", "", "curr_sub2frame", "=", "ex", "[", "\"unique_sub2frames\"", "]", "\n", "cutoff", "=", "False", "\n", "\n", "sen2frame", "=", "[", "]", "\n", "for", "_", ",", "(", "sub_idx", ",", "matched_frames", ")", "in", "enumerate", "(", "curr_sub2frame", ")", ":", "\n", "                ", "if", "self", ".", "max_clip_len", ">", "-", "1", ":", "\n", "                    ", "in_range", "=", "[", "]", "\n", "for", "i", "in", "sorted", "(", "matched_frames", ")", ":", "\n", "                        ", "if", "i", "<", "self", ".", "max_clip_len", ":", "\n", "                            ", "in_range", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                            ", "cutoff", "=", "True", "\n", "", "", "if", "len", "(", "in_range", ")", "or", "len", "(", "matched_frames", ")", "==", "0", ":", "\n", "                        ", "sen2frame", ".", "append", "(", "(", "sub_idx", ",", "in_range", ")", ")", "\n", "", "if", "cutoff", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "sen2frame", ".", "append", "(", "(", "sub_idx", ",", "matched_frames", ")", ")", "\n", "", "", "unmatched_frames", "=", "[", "i", "for", "i", "in", "unmatched_frames", "\n", "if", "i", "<", "self", ".", "max_clip_len", "]", "\n", "self", ".", "id2len", "[", "vid", "]", "=", "min", "(", "self", ".", "id2len", "[", "vid", "]", ",", "self", ".", "max_clip_len", ")", "\n", "\n", "vid_sub2frame", "[", "vid", "]", "=", "sen2frame", "\n", "vid2vonly_frames", "[", "vid", "]", "=", "unmatched_frames", "\n", "", "return", "vid_sub2frame", ",", "vid2vonly_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.QueryTokLmdb.__init__": [[272, 293], ["data.TxtTokLmdb.__init__", "os.path.exists", "os.path.exists", "json.load", "data.QueryTokLmdb.query2video.items", "utils.basic_utils.load_jsonl", "open", "str", "data.QueryTokLmdb.video2query[].append"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.tvr_standalone_eval.load_jsonl"], ["    ", "def", "__init__", "(", "self", ",", "db_dir", ",", "max_txt_len", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "db_dir", ",", "max_txt_len", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "f'{self.db_dir}/query2video.json'", ")", ":", "\n", "            ", "self", ".", "query2video", "=", "json", ".", "load", "(", "\n", "open", "(", "f'{self.db_dir}/query2video.json'", ")", ")", "\n", "self", ".", "video2query", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "query2video", ".", "items", "(", ")", ":", "\n", "                ", "if", "v", "not", "in", "self", ".", "video2query", ":", "\n", "                    ", "self", ".", "video2query", "[", "v", "]", "=", "[", "k", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "video2query", "[", "v", "]", ".", "append", "(", "k", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "query2video", "=", "{", "}", "\n", "self", ".", "video2query", "=", "{", "}", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f'{self.db_dir}/query_data.jsonl'", ")", ":", "\n", "            ", "query_data", "=", "load_jsonl", "(", "\n", "f'{self.db_dir}/query_data.jsonl'", ")", "\n", "self", ".", "query_data", "=", "{", "\n", "str", "(", "item", "[", "\"desc_id\"", "]", ")", ":", "item", "for", "item", "in", "query_data", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "query_data", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.QueryTokLmdb.__getitem__": [[294, 297], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "id_", ")", ":", "\n", "        ", "txt_dump", "=", "self", ".", "db", "[", "id_", "]", "\n", "return", "txt_dump", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.QaQueryTokLmdb.__init__": [[300, 309], ["data.TxtTokLmdb.__init__", "json.load", "data.QaQueryTokLmdb.query2video.items", "open", "data.QaQueryTokLmdb.video2query[].append"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "db_dir", ",", "max_txt_len", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "db_dir", ",", "max_txt_len", "=", "max_txt_len", ")", "\n", "self", ".", "query2video", "=", "json", ".", "load", "(", "open", "(", "f'{self.db_dir}/query2video.json'", ")", ")", "\n", "self", ".", "video2query", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "query2video", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "not", "in", "self", ".", "video2query", ":", "\n", "                ", "self", ".", "video2query", "[", "v", "]", "=", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "video2query", "[", "v", "]", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.QaQueryTokLmdb.__getitem__": [[310, 313], ["None"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "id_", ")", ":", "\n", "        ", "txt_dump", "=", "self", ".", "db", "[", "id_", "]", "\n", "return", "txt_dump", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatSubTokDataset.__init__": [[327, 342], ["isinstance", "isinstance", "data.get_ids_and_lens"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens"], ["    ", "def", "__init__", "(", "self", ",", "txt_db", ",", "img_db", ",", "max_txt_len", "=", "60", ",", "sub_ctx_len", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "txt_db", ",", "SubTokLmdb", ")", "\n", "assert", "isinstance", "(", "img_db", ",", "VideoFeatLmdb", ")", "\n", "self", ".", "txt_db", "=", "txt_db", "\n", "self", ".", "img_db", "=", "img_db", "\n", "self", ".", "max_txt_len", "=", "max_txt_len", "\n", "assert", "self", ".", "txt_db", ".", "max_clip_len", "==", "self", ".", "img_db", ".", "max_clip_len", "\n", "self", ".", "max_clip_len", "=", "self", ".", "img_db", ".", "max_clip_len", "\n", "self", ".", "clip_lens", ",", "self", ".", "vids", "=", "get_ids_and_lens", "(", "txt_db", ")", "# num.frames, vid", "\n", "self", ".", "vid_sub2frame", ",", "self", ".", "vid2vonly_frames", "=", "self", ".", "txt_db", ".", "vid_sub2frame", ",", "self", ".", "txt_db", ".", "vid2vonly_frames", "\n", "self", ".", "vid2dur", "=", "self", ".", "txt_db", ".", "vid2dur", "\n", "self", ".", "vid2idx", "=", "self", ".", "txt_db", ".", "vid2idx", "\n", "self", ".", "sub_ctx_len", "=", "sub_ctx_len", "\n", "assert", "self", ".", "sub_ctx_len", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatSubTokDataset.__len__": [[343, 345], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "vids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatSubTokDataset.__getitem__": [[346, 399], ["data.VideoFeatSubTokDataset._get_v_feat", "len", "torch.tensor", "range", "len", "frame_level_input_ids.append", "frame_level_attn_masks.append", "frame_level_v_feats.append", "len", "torch.index_select", "torch.zeros", "torch.tensor", "torch.tensor", "input_ids.extend", "torch.tensor", "copy.deepcopy", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VideoFeatDataset._get_v_feat"], ["", "def", "__getitem__", "(", "self", ",", "vid_", ")", ":", "\n", "        ", "'''\n        matched_sub_frames:\n        [[txt, txt_position_ids, v_feat(frames), v_position_ids, attn_masks],\n         [txt, txt_position_ids, v_feat(frames), v_position_ids, attn_masks]]\n        all_frames:[v_feat(frames)]\n        clip_level_position_ids\n        clip_level_attn_masks\n        '''", "\n", "example", "=", "self", ".", "txt_db", "[", "vid_", "]", "\n", "v_feat", ",", "nframes", "=", "self", ".", "_get_v_feat", "(", "vid_", ")", "\n", "\n", "frame_level_input_ids", ",", "frame_level_v_feats", "=", "[", "]", ",", "[", "]", "\n", "frame_level_attn_masks", "=", "[", "]", "# [(fffwww)]", "\n", "sub2frames", "=", "self", ".", "vid_sub2frame", "[", "vid_", "]", "# sub_ix -> [frame_ix]", "\n", "num_subs", "=", "len", "(", "sub2frames", ")", "\n", "\n", "for", "sub_idx", ",", "matched_frames", "in", "sub2frames", ":", "\n", "# text input", "\n", "            ", "input_ids", "=", "[", "]", "\n", "input_ids", "=", "[", "self", ".", "txt_db", ".", "sep", "]", "+", "input_ids", "\n", "for", "tmp_sub_idx", "in", "range", "(", "sub_idx", "-", "self", ".", "sub_ctx_len", ",", "\n", "sub_idx", "+", "1", ")", ":", "\n", "                ", "if", "tmp_sub_idx", ">=", "0", "and", "tmp_sub_idx", "<", "num_subs", ":", "\n", "                    ", "input_ids", ".", "extend", "(", "\n", "copy", ".", "deepcopy", "(", "\n", "example", "[", "'input_ids'", "]", "[", "tmp_sub_idx", "]", ")", ")", "\n", "\n", "", "", "matched_frames", "=", "[", "f_idx", "for", "f_idx", "in", "matched_frames", "\n", "if", "f_idx", "in", "range", "(", "v_feat", ".", "shape", "[", "0", "]", ")", "]", "\n", "if", "len", "(", "matched_frames", ")", ":", "\n", "                ", "matched_v_feats", "=", "torch", ".", "index_select", "(", "\n", "v_feat", ",", "0", ",", "torch", ".", "tensor", "(", "matched_frames", ")", ")", "\n", "attn_masks", "=", "[", "1", "]", "*", "(", "len", "(", "input_ids", ")", "+", "len", "(", "matched_frames", ")", ")", "\n", "", "else", ":", "\n", "                ", "matched_v_feats", "=", "torch", ".", "zeros", "(", "1", ",", "v_feat", ".", "shape", "[", "1", "]", ")", "\n", "attn_masks", "=", "[", "0", "]", "+", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "", "frame_level_input_ids", ".", "append", "(", "torch", ".", "tensor", "(", "input_ids", ")", ")", "\n", "frame_level_attn_masks", ".", "append", "(", "torch", ".", "tensor", "(", "attn_masks", ")", ")", "\n", "frame_level_v_feats", ".", "append", "(", "matched_v_feats", ")", "\n", "\n", "", "clip_level_v_feats", "=", "v_feat", "\n", "clip_level_attn_masks", "=", "[", "1", "]", "*", "len", "(", "clip_level_v_feats", ")", "\n", "clip_level_attn_masks", "=", "torch", ".", "tensor", "(", "clip_level_attn_masks", ")", "\n", "\n", "out", "=", "(", "frame_level_input_ids", ",", "# num_subs list[tensor(sep,w0,w1,...)]", "\n", "frame_level_v_feats", ",", "# num_subs list[tensor(#sub_frames, d)]", "\n", "frame_level_attn_masks", ",", "# num_subs list[L_sub + #sub_frames]", "\n", "clip_level_v_feats", ",", "# tensor(num_frames, d)", "\n", "clip_level_attn_masks", ",", "# #frames list[1]", "\n", "num_subs", ",", "sub2frames", ")", "# num_subs, [(sub_ix, [frame_ix]) ]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.VideoFeatSubTokDataset._get_v_feat": [[400, 404], ["v_feat.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "_get_v_feat", "(", "self", ",", "fname", ")", ":", "\n", "        ", "v_feat", "=", "self", ".", "img_db", "[", "fname", "]", "\n", "nframes", "=", "v_feat", ".", "size", "(", "0", ")", "\n", "return", "v_feat", ",", "nframes", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._fp16_to_fp32": [[27, 32], ["arr.astype", "feat_dict.items"], "function", ["None"], ["def", "_fp16_to_fp32", "(", "feat_dict", ")", ":", "\n", "    ", "out", "=", "{", "k", ":", "arr", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "arr", ".", "dtype", "==", "np", ".", "float16", "else", "arr", "\n", "for", "k", ",", "arr", "in", "feat_dict", ".", "items", "(", ")", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_distributed": [[34, 41], ["horovod.size", "horovod.local_size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "_check_distributed", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "dist", "=", "hvd", ".", "size", "(", ")", "!=", "hvd", ".", "local_size", "(", ")", "\n", "", "except", "ValueError", ":", "\n", "# not using horovod", "\n", "        ", "dist", "=", "False", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu": [[43, 50], ["horovod.size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "_check_ngpu", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "n_gpu", "=", "hvd", ".", "size", "(", ")", "\n", "", "except", "ValueError", ":", "\n", "# not using horovod", "\n", "        ", "n_gpu", "=", "1", "\n", "", "return", "n_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.open_lmdb": [[125, 132], ["data.TxtLmdb"], "function", ["None"], ["", "", "@", "contextmanager", "\n", "def", "open_lmdb", "(", "db_dir", ",", "readonly", "=", "False", ")", ":", "\n", "    ", "db", "=", "TxtLmdb", "(", "db_dir", ",", "readonly", ")", "\n", "try", ":", "\n", "        ", "yield", "db", "\n", "", "finally", ":", "\n", "        ", "del", "db", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens": [[315, 324], ["isinstance", "db.id2len.items", "lens.append", "ids.append"], "function", ["None"], ["", "", "def", "get_ids_and_lens", "(", "db", ")", ":", "\n", "    ", "assert", "isinstance", "(", "db", ",", "TxtTokLmdb", ")", "\n", "assert", "db", ".", "id2len", "is", "not", "None", ",", "\"id2len does not exists\"", "\n", "lens", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "for", "id_", ",", "len_", "in", "db", ".", "id2len", ".", "items", "(", ")", ":", "\n", "        ", "lens", ".", "append", "(", "len_", ")", "\n", "ids", ".", "append", "(", "id_", ")", "\n", "", "return", "lens", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate": [[406, 472], ["map", "range", "torch.nn.utils.rnn.pad_sequence", "torch.arange().unsqueeze", "torch.nn.utils.rnn.pad_sequence", "data.pad_tensors", "torch.arange().unsqueeze", "torch.nn.utils.rnn.pad_sequence", "pad_tensors.size", "torch.nn.utils.rnn.pad_sequence.size", "data.get_gather_index", "data.pad_tensors", "torch.arange().unsqueeze().expand().clone", "torch.nn.utils.rnn.pad_sequence", "toolz.sandbox.unzip", "len", "i.size", "i.size", "torch.tensor", "i.size", "torch.arange", "torch.arange", "torch.arange().unsqueeze().expand", "torch.nn.utils.rnn.pad_sequence.size", "pad_tensors.size", "pad_tensors.size", "torch.arange().unsqueeze", "torch.arange", "pad_tensors.size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.pad_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_gather_index", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.pad_tensors", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "", "def", "video_collate", "(", "inputs", ")", ":", "\n", "    ", "(", "frame_level_input_ids", ",", "\n", "frame_level_v_feats", ",", "\n", "frame_level_attn_masks", ",", "\n", "clip_level_v_feats", ",", "\n", "clip_level_attn_masks", ",", "num_subs", ",", "\n", "sub_idx2frame_idx", ")", "=", "map", "(", "list", ",", "unzip", "(", "inputs", ")", ")", "\n", "\n", "# all_f_sub_input_ids: list[tensor(sep, w0, w1)]", "\n", "# whose list size = total number of subs", "\n", "all_f_sub_input_ids", ",", "all_f_v_feats", ",", "all_f_attn_masks", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_subs", ")", ")", ":", "\n", "        ", "all_f_sub_input_ids", "+=", "frame_level_input_ids", "[", "i", "]", "\n", "all_f_v_feats", "+=", "frame_level_v_feats", "[", "i", "]", "\n", "all_f_attn_masks", "+=", "frame_level_attn_masks", "[", "i", "]", "\n", "\n", "", "txt_lens", "=", "[", "i", ".", "size", "(", "0", ")", "for", "i", "in", "all_f_sub_input_ids", "]", "# len. of each sub", "\n", "# hard_coded padding value, TODO: check correctness", "\n", "all_f_sub_input_ids", "=", "pad_sequence", "(", "\n", "all_f_sub_input_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "\n", "all_f_sub_pos_ids", "=", "torch", ".", "arange", "(", "0", ",", "all_f_sub_input_ids", ".", "size", "(", "1", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "0", ")", "\n", "all_f_sub_pos_ids", ".", "data", "[", "all_f_sub_pos_ids", ">", "511", "]", "=", "511", "# FIXME quick hack", "\n", "all_f_attn_masks", "=", "pad_sequence", "(", "\n", "all_f_attn_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "v_lens", "=", "[", "i", ".", "size", "(", "0", ")", "for", "i", "in", "all_f_v_feats", "]", "\n", "all_f_v_feats", "=", "pad_tensors", "(", "all_f_v_feats", ",", "v_lens", ",", "0", ")", "\n", "all_f_v_pos_ids", "=", "torch", ".", "arange", "(", "0", ",", "all_f_v_feats", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# all_f_sub_input_attn_masks (total_subs, max_sl) for subtitles only", "\n", "all_f_sub_input_attn_masks", "=", "[", "torch", ".", "tensor", "(", "[", "1", "]", "*", "tl", ")", "for", "tl", "in", "txt_lens", "]", "\n", "all_f_sub_input_attn_masks", "=", "pad_sequence", "(", "\n", "all_f_sub_input_attn_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "# TODO: How to calculate gather index at frame_level", "\n", "bs", ",", "max_vl", ",", "_", "=", "all_f_v_feats", ".", "size", "(", ")", "\n", "out_size", "=", "all_f_attn_masks", ".", "size", "(", "1", ")", "\n", "frame_level_gather_index", "=", "get_gather_index", "(", "\n", "txt_lens", ",", "v_lens", ",", "bs", ",", "max_vl", ",", "out_size", ")", "\n", "\n", "num_frames", "=", "[", "i", ".", "size", "(", "0", ")", "for", "i", "in", "clip_level_v_feats", "]", "\n", "clip_level_v_feats", "=", "pad_tensors", "(", "\n", "clip_level_v_feats", ",", "num_frames", ",", "pad", "=", "0", ")", "\n", "clip_level_pos_ids", "=", "torch", ".", "arange", "(", "\n", "0", ",", "clip_level_v_feats", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "clip_level_v_feats", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "\n", "clip_level_attn_masks", "=", "pad_sequence", "(", "\n", "clip_level_attn_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "batch", "=", "{", "'f_sub_input_ids'", ":", "all_f_sub_input_ids", ",", "# (total_sub, max_sl)", "\n", "'f_sub_pos_ids'", ":", "all_f_sub_pos_ids", ",", "# (total_sub, max_sl)", "\n", "'f_v_feats'", ":", "all_f_v_feats", ",", "# (total_sub, max_vl, k)", "\n", "'f_v_pos_ids'", ":", "all_f_v_pos_ids", ",", "# (total_sub, max_vl)", "\n", "'f_attn_masks'", ":", "all_f_attn_masks", ",", "# (total_sub, max_vl+max_sl)", "\n", "'f_gather_index'", ":", "frame_level_gather_index", ",", "# (total_sub, max_vl+max_sl)", "\n", "'f_sub_input_attn_masks'", ":", "all_f_sub_input_attn_masks", ",", "# (total_sub, max_sl)", "\n", "'c_v_feats'", ":", "clip_level_v_feats", ",", "# (bz, max_len, k)", "\n", "'c_pos_ids'", ":", "clip_level_pos_ids", ",", "# (bz, max_len) [matched, unmatched]", "\n", "'c_attn_masks'", ":", "clip_level_attn_masks", ",", "# (bz, max_len)", "\n", "'num_subs'", ":", "num_subs", ",", "# [num_sub]", "\n", "'sub_idx2frame_idx'", ":", "sub_idx2frame_idx", "}", "# [ [(sub_ix, [frame_ix]) ] ]", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.txt_input_collate": [[474, 485], ["torch.nn.utils.rnn.pad_sequence", "torch.arange().unsqueeze", "torch.nn.utils.rnn.pad_sequence", "len", "torch.arange", "input_ids[].size", "torch.nn.utils.rnn.pad_sequence.size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "txt_input_collate", "(", "input_ids", ",", "attn_masks", ")", ":", "\n", "# hard_coded padding value, TODO: check correctness", "\n", "    ", "pad_values", "=", "1", "if", "len", "(", "input_ids", "[", "0", "]", ".", "size", "(", ")", ")", "==", "1", "else", "0", "\n", "input_ids", "=", "pad_sequence", "(", "\n", "input_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "pad_values", ")", "\n", "pos_ids", "=", "torch", ".", "arange", "(", "\n", "0", ",", "input_ids", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "0", ")", "\n", "pos_ids", ".", "data", "[", "pos_ids", ">", "511", "]", "=", "511", "# FIXME quick hack", "\n", "attn_masks", "=", "pad_sequence", "(", "\n", "attn_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "return", "input_ids", ",", "pos_ids", ",", "attn_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.pad_tensors": [[487, 502], ["len", "tensors[].size", "torch.zeros", "enumerate", "max", "torch.zeros.data.fill_", "zip", "t.size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "pad_tensors", "(", "tensors", ",", "lens", "=", "None", ",", "pad", "=", "0", ",", "max_len", "=", "0", ")", ":", "\n", "    ", "\"\"\"B x [T, ...]\"\"\"", "\n", "if", "lens", "is", "None", ":", "\n", "        ", "lens", "=", "[", "t", ".", "size", "(", "0", ")", "for", "t", "in", "tensors", "]", "\n", "", "if", "max_len", "==", "0", ":", "\n", "        ", "max_len", "=", "max", "(", "lens", ")", "\n", "", "bs", "=", "len", "(", "tensors", ")", "\n", "hid", "=", "tensors", "[", "0", "]", ".", "size", "(", "-", "1", ")", "\n", "dtype", "=", "tensors", "[", "0", "]", ".", "dtype", "\n", "output", "=", "torch", ".", "zeros", "(", "bs", ",", "max_len", ",", "hid", ",", "dtype", "=", "dtype", ")", "\n", "if", "pad", ":", "\n", "        ", "output", ".", "data", ".", "fill_", "(", "pad", ")", "\n", "", "for", "i", ",", "(", "t", ",", "l", ")", "in", "enumerate", "(", "zip", "(", "tensors", ",", "lens", ")", ")", ":", "\n", "        ", "output", ".", "data", "[", "i", ",", ":", "l", ",", "...", "]", "=", "t", ".", "data", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_gather_index": [[504, 513], ["torch.arange().unsqueeze().expand().clone", "enumerate", "len", "len", "zip", "torch.arange().unsqueeze().expand", "torch.arange", "torch.arange().unsqueeze", "torch.arange"], "function", ["None"], ["", "def", "get_gather_index", "(", "txt_lens", ",", "num_frames", ",", "batch_size", ",", "max_len", ",", "out_size", ")", ":", "\n", "    ", "assert", "len", "(", "txt_lens", ")", "==", "len", "(", "num_frames", ")", "==", "batch_size", "\n", "gather_index", "=", "torch", ".", "arange", "(", "0", ",", "out_size", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "\n", "for", "i", ",", "(", "tl", ",", "nframe", ")", "in", "enumerate", "(", "zip", "(", "txt_lens", ",", "num_frames", ")", ")", ":", "\n", "        ", "gather_index", ".", "data", "[", "i", ",", "nframe", ":", "tl", "+", "nframe", "]", "=", "torch", ".", "arange", "(", "\n", "max_len", ",", "max_len", "+", "tl", ",", "dtype", "=", "torch", ".", "long", ")", ".", "data", "\n", "", "return", "gather_index", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.ViolinDataset.__init__": [[28, 54], ["isinstance", "isinstance", "data.get_ids_and_lens", "data._check_ngpu", "data._check_ngpu", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["self", ".", "violin_pred_head", "=", "MLPLayer", "(", "hsz", ",", "1", ")", "\n", "\n", "", "def", "get_modularized_video", "(", "self", ",", "frame_embeddings", ",", "frame_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_embeddings: (Nv, L, D)\n            frame_mask: (Nv, L)\n        \"\"\"", "\n", "violin_attn_scores", "=", "self", ".", "violin_pool", "(", "\n", "frame_embeddings", ")", "# (Nv, L, 1)", "\n", "\n", "violin_attn_scores", "=", "F", ".", "softmax", "(", "\n", "mask_logits", "(", "violin_attn_scores", ",", "\n", "frame_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# TODO check whether it is the same", "\n", "violin_pooled_video", "=", "torch", ".", "einsum", "(", "\n", "\"vlm,vld->vmd\"", ",", "violin_attn_scores", ",", "\n", "frame_embeddings", ")", "# (Nv, 1, D)", "\n", "return", "violin_pooled_video", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'violin'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "batch", "=", "defaultdict", "(", "lambda", ":", "None", ",", "batch", ")", "\n", "if", "task", "==", "'violin'", ":", "\n", "            ", "c_attn_masks", "=", "batch", "[", "\"c_attn_masks\"", "]", "\n", "# (num_video * 5, num_frames, hid_size)", "\n", "frame_embeddings", "=", "self", ".", "v_encoder", ".", "forward_repr", "(", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.ViolinDataset.getids": [[55, 65], ["len", "random.sample", "violin.get_paired_statement_id", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.get_paired_statement_id"], ["batch", ",", "encode_clip", "=", "False", ")", "\n", "frame_embeddings", "=", "self", ".", "v_encoder", ".", "c_encoder", ".", "embeddings", "(", "\n", "frame_embeddings", ",", "\n", "position_ids", "=", "None", ")", "\n", "q_embeddings", "=", "self", ".", "v_encoder", ".", "f_encoder", ".", "_compute_txt_embeddings", "(", "\n", "batch", "[", "\"q_input_ids\"", "]", ",", "batch", "[", "\"q_pos_ids\"", "]", ",", "txt_type_ids", "=", "None", ")", "\n", "frame_q_embeddings", "=", "torch", ".", "cat", "(", "\n", "(", "frame_embeddings", ",", "q_embeddings", ")", ",", "dim", "=", "1", ")", "\n", "frame_q_attn_mask", "=", "torch", ".", "cat", "(", "\n", "(", "c_attn_masks", ",", "batch", "[", "\"q_attn_masks\"", "]", ")", ",", "dim", "=", "1", ")", "\n", "fused_video_q", "=", "self", ".", "v_encoder", ".", "c_encoder", ".", "forward_encoder", "(", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.ViolinDataset.__getitem__": [[66, 111], ["violin.ViolinDataset.getids", "violin.ViolinDataset.video_db.__getitem__", "torch.tensor", "torch.tensor", "all_q_input_ids.append", "all_q_attn_masks.append", "zip", "all_video_q_inputs.append", "all_vids.append", "all_targets.append", "torch.LongTensor", "torch.LongTensor", "torch.cat", "torch.cat", "f_sub_q_input_ids.append", "f_sub_q_attn_masks.append", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], ["frame_q_embeddings", ",", "frame_q_attn_mask", ")", "\n", "num_frames", "=", "c_attn_masks", ".", "shape", "[", "1", "]", "\n", "video_embeddings", "=", "fused_video_q", "[", ":", ",", ":", "num_frames", ",", ":", "]", "\n", "\n", "video_masks", "=", "c_attn_masks", ".", "to", "(", "dtype", "=", "video_embeddings", ".", "dtype", ")", "\n", "violin_pooled_video", "=", "self", ".", "get_modularized_video", "(", "\n", "video_embeddings", ",", "video_masks", ")", "\n", "logits", "=", "self", ".", "violin_pred_head", "(", "violin_pooled_video", ")", "\n", "\n", "if", "compute_loss", ":", "\n", "                ", "targets", "=", "batch", "[", "'targets'", "]", "\n", "scores", "=", "torch", ".", "sigmoid", "(", "logits", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "squeeze", "(", "-", "1", ")", ".", "to", "(", "dtype", "=", "scores", ".", "dtype", ")", "\n", "violin_loss", "=", "F", ".", "binary_cross_entropy", "(", "\n", "scores", ",", "targets", ",", "reduction", "=", "'mean'", ")", "\n", "return", "violin_loss", "\n", "", "else", ":", "\n", "                ", "return", "logits", "\n", "", "", "raise", "ValueError", "(", "f'Unrecognized task: {task}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.ViolinDataset.__len__": [[112, 116], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.ViolinEvalDataset.getids": [[145, 156], ["len", "random.sample", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.ViolinEvalDataset.__getitem__": [[157, 161], ["violin.ViolinEvalDataset.getids", "violin.ViolinDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.get_paired_statement_id": [[20, 25], ["qid.split", "int", "str"], "function", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", "\n", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", "\n", "hsz", "=", "config", ".", "c_config", ".", "hidden_size", "\n", "\n", "self", ".", "violin_pool", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "hsz", ",", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.violin_collate": [[118, 142], ["map", "range", "range", "data.video_collate", "torch.nn.utils.rnn.pad_sequence", "data.txt_input_collate", "toolz.sandbox.unzip", "len", "all_video_qa_inputs.extend", "all_q_input_ids.extend", "all_q_attn_masks.extend", "len", "all_target.extend"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.txt_input_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.violin_eval_collate": [[163, 171], ["violin.violin_collate", "qids.extend", "violin_collate.append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.violin.violin_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VideoFeatDataset.__init__": [[16, 25], ["isinstance", "sorted", "list", "vr_video_only.VideoFeatDataset.vid2dur.keys", "enumerate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "meta", ",", "img_db", ")", ":", "\n", "        ", "assert", "isinstance", "(", "img_db", ",", "VideoFeatLmdb", ")", "\n", "self", ".", "img_db", "=", "img_db", "\n", "self", ".", "max_clip_len", "=", "self", ".", "img_db", ".", "max_clip_len", "\n", "self", ".", "vid2dur", "=", "self", ".", "img_db", ".", "name2nframe", "\n", "self", ".", "vids", "=", "sorted", "(", "list", "(", "self", ".", "vid2dur", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "vid2idx", "=", "{", "vid", ":", "idx", "for", "idx", ",", "vid", "in", "enumerate", "(", "self", ".", "vids", ")", "}", "\n", "self", ".", "cls_", "=", "meta", "[", "'CLS'", "]", "\n", "self", ".", "sep", "=", "meta", "[", "'SEP'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VideoFeatDataset.__len__": [[26, 28], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "vids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VideoFeatDataset.__getitem__": [[29, 50], ["vr_video_only.VideoFeatDataset._get_v_feat", "torch.tensor", "torch.tensor", "len", "list", "torch.tensor", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VideoFeatDataset._get_v_feat"], ["", "def", "__getitem__", "(", "self", ",", "vid_", ")", ":", "\n", "        ", "v_feat", ",", "nframes", "=", "self", ".", "_get_v_feat", "(", "vid_", ")", "\n", "num_subs", "=", "1", "# fake an empty sub", "\n", "sub2frames", "=", "[", "(", "0", ",", "list", "(", "range", "(", "len", "(", "v_feat", ")", ")", ")", ")", "]", "\n", "frame_level_input_ids", ",", "frame_level_v_feats", "=", "(", "\n", "[", "torch", ".", "tensor", "(", "[", "self", ".", "cls_", "]", ")", "]", ",", "\n", "[", "v_feat", "]", ")", "\n", "frame_level_attn_masks", "=", "[", "\n", "torch", ".", "tensor", "(", "[", "1", "]", "*", "(", "1", "+", "len", "(", "v_feat", ")", ")", ")", "]", "# [(fffwww)]", "\n", "\n", "clip_level_v_feats", "=", "v_feat", "\n", "clip_level_attn_masks", "=", "[", "1", "]", "*", "len", "(", "clip_level_v_feats", ")", "\n", "clip_level_attn_masks", "=", "torch", ".", "tensor", "(", "clip_level_attn_masks", ")", "\n", "\n", "out", "=", "(", "frame_level_input_ids", ",", "# num_subs list[tensor(sep,w0,w1,...)]", "\n", "frame_level_v_feats", ",", "# num_subs list[tensor(#sub_frames, d)]", "\n", "frame_level_attn_masks", ",", "# num_subs list[L_sub + #sub_frames]", "\n", "clip_level_v_feats", ",", "# tensor(num_frames, d)", "\n", "clip_level_attn_masks", ",", "# #frames list[1]", "\n", "num_subs", ",", "sub2frames", ")", "# num_subs, [(sub_ix, [frame_ix]) ]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VideoFeatDataset._get_v_feat": [[51, 55], ["v_feat.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "def", "_get_v_feat", "(", "self", ",", "fname", ")", ":", "\n", "        ", "v_feat", "=", "self", ".", "img_db", "[", "fname", "]", "\n", "nframes", "=", "v_feat", ".", "size", "(", "0", ")", "\n", "return", "v_feat", ",", "nframes", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VrVideoOnlyDataset.__init__": [[58, 88], ["isinstance", "isinstance", "data.get_ids_and_lens", "data._check_ngpu", "data._check_ngpu", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "video_ids", ",", "video_db", ",", "query_db", ",", "max_num_query", "=", "5", ",", "\n", "sampled_by_q", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "query_db", ",", "VrQueryTokLmdb", ")", "\n", "assert", "isinstance", "(", "video_db", ",", "VideoFeatDataset", ")", "\n", "self", ".", "video_db", "=", "video_db", "\n", "self", ".", "query_db", "=", "query_db", "\n", "self", ".", "vid2dur", "=", "self", ".", "video_db", ".", "vid2dur", "\n", "self", ".", "query_data", "=", "query_db", ".", "query_data", "\n", "self", ".", "max_clip_len", "=", "video_db", ".", "max_clip_len", "\n", "self", ".", "frame_interval", "=", "video_db", ".", "img_db", ".", "frame_interval", "\n", "self", ".", "max_num_query", "=", "max_num_query", "\n", "self", ".", "sampled_by_q", "=", "sampled_by_q", "\n", "self", ".", "vids", "=", "video_ids", "\n", "self", ".", "global_vid2idx", "=", "video_db", ".", "vid2idx", "\n", "self", ".", "vid2idx", "=", "{", "\n", "vid_name", ":", "self", ".", "global_vid2idx", "[", "vid_name", "]", "\n", "for", "vid_name", "in", "video_ids", "}", "\n", "if", "sampled_by_q", ":", "\n", "            ", "self", ".", "lens", ",", "self", ".", "qids", "=", "get_ids_and_lens", "(", "query_db", ")", "\n", "# FIXME", "\n", "if", "_check_ngpu", "(", ")", ">", "1", ":", "\n", "# partition data by rank", "\n", "                ", "self", ".", "qids", "=", "self", ".", "qids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "self", ".", "lens", "=", "self", ".", "lens", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "", "else", ":", "\n", "# FIXME", "\n", "            ", "if", "_check_ngpu", "(", ")", ">", "1", ":", "\n", "# partition data by rank", "\n", "                ", "self", ".", "vids", "=", "self", ".", "vids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "self", ".", "lens", "=", "[", "video_db", ".", "vid2dur", "[", "vid", "]", "for", "vid", "in", "self", ".", "vids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VrVideoOnlyEvalDataset.__getitem__": [[91, 95], ["vr_video_only.VrVideoOnlyEvalDataset.getids", "vr.VrDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], ["    ", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid", ",", "qids", "=", "self", ".", "getids", "(", "i", ")", "\n", "outs", "=", "super", "(", ")", ".", "__getitem__", "(", "i", ")", "\n", "return", "qids", ",", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VrVideoOnlyFullEvalDataset.__init__": [[98, 116], ["vr_video_only.VrVideoOnlyDataset.__init__", "data.get_ids_and_lens", "data._check_ngpu", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "video_ids", ",", "video_db", ",", "query_db", ",", "max_num_query", "=", "5", ",", "\n", "distributed", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "video_ids", ",", "video_db", ",", "query_db", ",", "sampled_by_q", "=", "True", ")", "\n", "qlens", ",", "qids", "=", "get_ids_and_lens", "(", "query_db", ")", "\n", "# this dataset does not support multi GPU", "\n", "del", "self", ".", "vids", "\n", "self", ".", "vid2idx", "=", "{", "\n", "vid_name", ":", "self", ".", "global_vid2idx", "[", "vid_name", "]", "\n", "for", "vid_name", "in", "video_ids", "}", "\n", "\n", "# FIXME", "\n", "if", "_check_ngpu", "(", ")", ">", "1", "and", "distributed", ":", "\n", "# partition data by rank", "\n", "            ", "self", ".", "qids", "=", "qids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "self", ".", "lens", "=", "qlens", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "qids", "=", "qids", "\n", "self", ".", "lens", "=", "qlens", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VrVideoOnlyFullEvalDataset.__len__": [[117, 119], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "qids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VrVideoOnlyFullEvalDataset.getids": [[120, 127], ["len"], "methods", ["None"], ["", "def", "getids", "(", "self", ",", "i", ")", ":", "\n", "        ", "qid", "=", "self", ".", "qids", "[", "i", "]", "\n", "if", "len", "(", "self", ".", "query_db", ".", "query2video", ")", ":", "\n", "            ", "vid", "=", "self", ".", "query_db", ".", "query2video", "[", "qid", "]", "\n", "", "else", ":", "\n", "            ", "vid", "=", "-", "1", "\n", "", "return", "vid", ",", "[", "qid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VrVideoOnlyFullEvalDataset.__getitem__": [[128, 150], ["vr_video_only.VrVideoOnlyFullEvalDataset.getids", "vr_video_only.VrVideoOnlyFullEvalDataset.video_db.__getitem__", "torch.LongTensor", "torch.tensor", "torch.tensor", "query_and_targets.append", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid", ",", "qids", "=", "self", ".", "getids", "(", "i", ")", "\n", "if", "vid", "!=", "-", "1", ":", "\n", "            ", "video_inputs", "=", "self", ".", "video_db", ".", "__getitem__", "(", "vid", ")", "\n", "(", "frame_level_input_ids", ",", "frame_level_v_feats", ",", "\n", "frame_level_attn_masks", ",", "\n", "clip_level_v_feats", ",", "clip_level_attn_masks", ",", "num_subs", ",", "\n", "sub_idx2frame_idx", ")", "=", "video_inputs", "\n", "", "query_and_targets", "=", "[", "]", "\n", "for", "qid", "in", "qids", ":", "\n", "            ", "example", "=", "self", ".", "query_db", "[", "qid", "]", "\n", "target", "=", "torch", ".", "LongTensor", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "query_input_ids", "=", "example", "[", "\"input_ids\"", "]", "\n", "\n", "query_input_ids", "=", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "query_db", ".", "cls_", "]", "+", "query_input_ids", ")", "\n", "\n", "query_attn_mask", "=", "torch", ".", "tensor", "(", "[", "1", "]", "*", "len", "(", "query_input_ids", ")", ")", "\n", "\n", "query_and_targets", ".", "append", "(", "\n", "(", "query_input_ids", ",", "query_attn_mask", ",", "vid", ",", "target", ")", ")", "\n", "", "return", "(", "qid", ",", "query_and_targets", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vsm.VsmDataset.__init__": [[21, 31], ["isinstance", "data._check_ngpu", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "video_ids", ",", "vid_sub_db", ",", "query_per_video", "=", "5", ",", "\n", "sub_ctx_len", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "vid_sub_db", ",", "VideoFeatSubTokDataset", ")", "\n", "self", ".", "query_per_video", "=", "query_per_video", "\n", "self", ".", "vid_sub_db", "=", "vid_sub_db", "\n", "if", "_check_ngpu", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "ids", "=", "video_ids", "[", "hvd", ".", "rank", "(", ")", ":", ":", "hvd", ".", "size", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ids", "=", "video_ids", "\n", "", "self", ".", "sub_ctx_len", "=", "sub_ctx_len", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vsm.VsmDataset.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vsm.VsmDataset.__getitem__": [[35, 118], ["vsm.VsmDataset.vid_sub_db._get_v_feat", "len", "min", "set", "torch.tensor", "len", "random.sample", "len", "frame_level_input_ids.append", "frame_level_attn_masks.append", "frame_level_v_feats.append", "len", "sub_queries_and_targets.append", "len", "tuple", "range", "torch.index_select", "torch.ones", "torch.zeros", "torch.ones", "torch.ones.data[].fill_", "torch.tensor", "copy.deepcopy", "torch.tensor", "torch.tensor", "torch.ones", "torch.tensor", "sub_queries_and_targets.append", "len", "curr_sub_ctx_input_ids.extend", "len", "min", "len", "len", "copy.deepcopy", "copy.deepcopy", "max"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vr_video_only.VideoFeatDataset._get_v_feat"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "vid", "=", "self", ".", "ids", "[", "i", "]", "\n", "example", "=", "self", ".", "vid_sub_db", ".", "txt_db", "[", "vid", "]", "\n", "v_feat", ",", "nframes", "=", "self", ".", "vid_sub_db", ".", "_get_v_feat", "(", "vid", ")", "\n", "sub2frames", "=", "self", ".", "vid_sub_db", ".", "vid_sub2frame", "[", "vid", "]", "\n", "\n", "frame_level_input_ids", ",", "frame_level_v_feats", "=", "[", "]", ",", "[", "]", "\n", "frame_level_attn_masks", "=", "[", "]", "\n", "num_subs", "=", "len", "(", "sub2frames", ")", "\n", "\n", "sub_queries_and_targets", "=", "[", "]", "\n", "matched_sub_idx", "=", "[", "sub_idx", "for", "sub_idx", ",", "matched_frames", "in", "sub2frames", "\n", "if", "matched_frames", "]", "\n", "n_samples", "=", "min", "(", "len", "(", "matched_sub_idx", ")", ",", "self", ".", "query_per_video", ")", "\n", "query_sub_ids", "=", "set", "(", "random", ".", "sample", "(", "matched_sub_idx", ",", "n_samples", ")", ")", "\n", "for", "sub_idx", ",", "matched_frames", "in", "sub2frames", ":", "\n", "# text input", "\n", "            ", "if", "self", ".", "sub_ctx_len", ">=", "0", ":", "\n", "                ", "curr_sub_ctx_input_ids", "=", "[", "]", "\n", "for", "tmp_sub_idx", "in", "range", "(", "sub_idx", "-", "self", ".", "sub_ctx_len", ",", "\n", "sub_idx", "+", "1", ")", ":", "\n", "                    ", "if", "tmp_sub_idx", ">=", "0", "and", "tmp_sub_idx", "<", "num_subs", "and", "tmp_sub_idx", "not", "in", "query_sub_ids", ":", "\n", "                        ", "in_ids", "=", "example", "[", "'input_ids'", "]", "[", "tmp_sub_idx", "]", "\n", "if", "self", ".", "vid_sub_db", ".", "max_txt_len", "!=", "-", "1", ":", "\n", "                            ", "in_ids", "=", "in_ids", "[", ":", "self", ".", "vid_sub_db", ".", "max_txt_len", "]", "\n", "", "curr_sub_ctx_input_ids", ".", "extend", "(", "copy", ".", "deepcopy", "(", "in_ids", ")", ")", "\n", "", "", "", "curr_sub_ctx_input_ids", "=", "[", "\n", "self", ".", "vid_sub_db", ".", "txt_db", ".", "sep", "]", "+", "curr_sub_ctx_input_ids", "\n", "\n", "n_frame", "=", "len", "(", "matched_frames", ")", "\n", "attn_masks_fill_0_pos", "=", "None", "\n", "if", "n_frame", ":", "\n", "                ", "matched_v_feats", "=", "torch", ".", "index_select", "(", "\n", "v_feat", ",", "0", ",", "torch", ".", "tensor", "(", "matched_frames", ")", ")", "\n", "\n", "if", "sub_idx", "in", "query_sub_ids", ":", "\n", "                    ", "in_ids", "=", "example", "[", "'input_ids'", "]", "[", "sub_idx", "]", "\n", "if", "self", ".", "vid_sub_db", ".", "max_txt_len", "!=", "-", "1", ":", "\n", "                        ", "in_ids", "=", "in_ids", "[", ":", "self", ".", "vid_sub_db", ".", "max_txt_len", "]", "\n", "", "sub_quries_input_ids", "=", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "vid_sub_db", ".", "txt_db", ".", "cls_", "]", "+", "copy", ".", "deepcopy", "(", "in_ids", ")", ")", "\n", "sub_query_attn_masks", "=", "torch", ".", "ones", "(", "\n", "len", "(", "sub_quries_input_ids", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "st", ",", "ed", "=", "matched_frames", "[", "0", "]", ",", "min", "(", "max", "(", "\n", "matched_frames", "[", "0", "]", "+", "1", ",", "matched_frames", "[", "-", "1", "]", ")", ",", "nframes", "-", "1", ")", "\n", "assert", "st", "<=", "ed", ",", "\"st frame must <= ed frame\"", "\n", "assert", "st", ">=", "0", ",", "\"st frame must >= 0\"", "\n", "assert", "ed", "<", "nframes", ",", "f\"ed frame must < frame_len {nframes}\"", "\n", "targets", "=", "torch", ".", "tensor", "(", "[", "st", ",", "ed", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "sub_queries_and_targets", ".", "append", "(", "\n", "(", "sub_quries_input_ids", ",", "sub_query_attn_masks", ",", "\n", "vid", ",", "targets", ")", ")", "\n", "", "if", "len", "(", "curr_sub_ctx_input_ids", ")", "==", "0", ":", "\n", "                    ", "curr_sub_ctx_input_ids", "=", "[", "self", ".", "vid_sub_db", ".", "txt_db", ".", "mask", "]", "\n", "attn_masks_fill_0_pos", "=", "-", "1", "\n", "", "attn_masks", "=", "torch", ".", "ones", "(", "\n", "len", "(", "curr_sub_ctx_input_ids", ")", "+", "n_frame", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "                ", "matched_v_feats", "=", "torch", ".", "zeros", "(", "1", ",", "v_feat", ".", "shape", "[", "1", "]", ")", "\n", "attn_masks", "=", "torch", ".", "ones", "(", "\n", "len", "(", "curr_sub_ctx_input_ids", ")", "+", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "attn_masks_fill_0_pos", "=", "0", "\n", "", "if", "attn_masks_fill_0_pos", "is", "not", "None", ":", "\n", "                ", "attn_masks", ".", "data", "[", "attn_masks_fill_0_pos", "]", ".", "fill_", "(", "0", ")", "\n", "\n", "", "frame_level_input_ids", ".", "append", "(", "torch", ".", "tensor", "(", "curr_sub_ctx_input_ids", ")", ")", "\n", "frame_level_attn_masks", ".", "append", "(", "attn_masks", ")", "\n", "frame_level_v_feats", ".", "append", "(", "matched_v_feats", ")", "\n", "", "while", "len", "(", "sub_queries_and_targets", ")", "<", "self", ".", "query_per_video", ":", "\n", "            ", "sub_queries_and_targets", ".", "append", "(", "\n", "copy", ".", "deepcopy", "(", "sub_queries_and_targets", "[", "-", "1", "]", ")", ")", "\n", "", "clip_level_v_feats", "=", "v_feat", "\n", "clip_level_attn_masks", "=", "[", "1", "]", "*", "len", "(", "clip_level_v_feats", ")", "\n", "clip_level_attn_masks", "=", "torch", ".", "tensor", "(", "clip_level_attn_masks", ")", "\n", "video_inputs", "=", "(", "frame_level_input_ids", ",", "frame_level_v_feats", ",", "\n", "frame_level_attn_masks", ",", "\n", "clip_level_v_feats", ",", "clip_level_attn_masks", ",", "\n", "num_subs", ",", "sub2frames", ")", "\n", "out", "=", "(", "video_inputs", ",", "vid", ",", "tuple", "(", "sub_queries_and_targets", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vsm.vsm_collate": [[120, 146], ["map", "map", "data.video_collate", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.arange().unsqueeze", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "data.video_collate.update", "toolz.sandbox.unzip", "toolz.sandbox.unzip", "cytoolz.concat", "enumerate", "torch.arange", "torch.nn.utils.rnn.pad_sequence.size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["", "", "def", "vsm_collate", "(", "inputs", ")", ":", "\n", "    ", "(", "video_inputs", ",", "vids", ",", "sub_queries_and_targets", ")", "=", "map", "(", "list", ",", "unzip", "(", "inputs", ")", ")", "\n", "(", "input_ids", ",", "attn_masks", ",", "sub_vids", ",", "targets", ")", "=", "map", "(", "\n", "list", ",", "unzip", "(", "concat", "(", "outs", "for", "outs", "in", "sub_queries_and_targets", ")", ")", ")", "\n", "\n", "batch", "=", "video_collate", "(", "video_inputs", ")", "\n", "vid2idx", "=", "{", "vid", ":", "i", "for", "i", ",", "vid", "in", "enumerate", "(", "vids", ")", "}", "\n", "batch", "[", "\"q_vidx\"", "]", "=", "torch", ".", "tensor", "(", "[", "vid2idx", "[", "s_vid", "]", "for", "s_vid", "in", "sub_vids", "]", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# text batches", "\n", "input_ids", "=", "pad_sequence", "(", "input_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "0", ",", "input_ids", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "long", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn_masks", "=", "pad_sequence", "(", "attn_masks", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "vsm_targets", "=", "pad_sequence", "(", "\n", "targets", ",", "batch_first", "=", "True", ",", "padding_value", "=", "-", "1", ")", "\n", "batch", ".", "update", "(", "{", "\n", "'query_input_ids'", ":", "input_ids", ",", "\n", "'query_pos_ids'", ":", "position_ids", ",", "\n", "'query_attn_masks'", ":", "attn_masks", ",", "\n", "'targets'", ":", "vsm_targets", ",", "\n", "'vids'", ":", "vids", "}", ")", "\n", "\n", "return", "batch", "\n", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.__init__": [[26, 35], ["data.TxtLmdb", "data.TxtLmdb", "json.load", "open"], "methods", ["None"], ["ignore_index", "=", "-", "100", ",", "reduction", "=", "'none'", ")", ":", "\n", "        ", "assert", "0.0", "<", "label_smoothing", "<=", "1.0", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# count for the ground-truth word", "\n", "smoothing_value", "=", "label_smoothing", "/", "(", "tgt_vocab_size", "-", "1", ")", "\n", "one_hot", "=", "torch", ".", "full", "(", "(", "tgt_vocab_size", ",", ")", ",", "smoothing_value", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.__getitem__": [[36, 38], ["tvc.CaptionTokLmdb.get_caption"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.get_caption"], ["# one_hot[self.ignore_index] = 0", "\n", "self", ".", "register_buffer", "(", "\"one_hot\"", ",", "one_hot", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.get_caption": [[39, 50], ["torch.tensor", "torch.tensor"], "methods", ["None"], ["self", ".", "confidence", "=", "1.0", "-", "label_smoothing", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n", "", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        output (FloatTensor): batch_size x n_classes\n        target (LongTensor): batch_size, with indices in\n            [-1, tgt_vocab_size-1], `-1` is ignored\n        \"\"\"", "\n", "# ignore examples with target value -1", "\n", "valid_indices", "=", "target", "!=", "self", ".", "ignore_index", "\n", "target", "=", "target", "[", "valid_indices", "]", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.get_clip": [[51, 54], ["None"], "methods", ["None"], ["output", "=", "self", ".", "log_softmax", "(", "output", "[", "valid_indices", "]", ")", "\n", "\n", "model_prob", "=", "self", ".", "one_hot", ".", "repeat", "(", "target", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "model_prob", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.cap2vid": [[55, 58], ["json.load", "open"], "methods", ["None"], ["loss", "=", "F", ".", "kl_div", "(", "output", ",", "model_prob", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.clip2vid": [[59, 62], ["json.load", "open"], "methods", ["None"], ["            ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'none'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.vid2caps": [[63, 66], ["json.load", "open"], "methods", ["None"], ["            ", "raise", "ValueError", "\n", "", "return", "loss", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.vid2clips": [[67, 70], ["json.load", "open"], "methods", ["None"], ["", "", "class", "BertDecEncAttention", "(", "BertSelfAttention", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "encoder_outputs", ",", "dec_hidden_states", ",", "attention_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "dec_hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "encoder_outputs", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcTrainDataset.__init__": [[73, 90], ["isinstance", "isinstance", "list", "tvc.TvcTrainDataset.vid2caps.keys", "data._check_ngpu", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\"", "\n", "# and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "\n", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "\n", "self", ".", "attention_head_size", ")", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is", "\n", "# (precomputed for all layers in BertModel forward() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcTrainDataset.getids": [[91, 99], ["random.sample", "len"], "methods", ["None"], ["# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "\n", "self", ".", "all_head_size", ",", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcTrainDataset.__getitem__": [[100, 115], ["tvc.TvcTrainDataset.getids", "tvc.TvcTrainDataset.video_db.__getitem__", "len", "tvc.TvcTrainDataset.get_st_ed_label", "clip_ranges.append", "torch.tensor", "cap_inputs.append"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.get_st_ed_label"], ["context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n", "\n", "", "", "class", "BertDecoderLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "self_attention", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "add_norm_1", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "dec_enc_attention", "=", "BertDecEncAttention", "(", "config", ")", "\n", "self", ".", "add_norm_2", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "intermidiate", "=", "BertIntermediate", "(", "config", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcTrainDataset.__len__": [[116, 118], ["len"], "methods", ["None"], ["self", ".", "add_norm_3", "=", "BertOutput", "(", "config", ")", "# linear + residual + layernorm", "\n", "\n", "", "def", "forward", "(", "self", ",", "dec_hidden_states", ",", "enc_outputs", ",", "enc_mask", ",", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcTrainDataset.get_st_ed_label": [[119, 139], ["min", "min", "math.floor", "max", "round"], "methods", ["None"], ["tri_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dec_hidden_states: (N, Lt, D)\n            enc_outputs: (N, Lv, D)\n            enc_mask: (N, Lv)\n        Returns:\n\n        \"\"\"", "\n", "if", "tri_mask", "is", "None", ":", "\n", "            ", "max_len", "=", "dec_hidden_states", ".", "size", "(", "1", ")", "# Lt", "\n", "tri_mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "max_len", ",", "max_len", ")", ",", "diagonal", "=", "0", "\n", ")", ".", "to", "(", "dec_hidden_states", "\n", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "tri_mask", "=", "(", "1.0", "-", "tri_mask", ")", "*", "-", "10000.0", "\n", "\n", "# 1, dec self attn + add_norm", "\n", "", "attention_output", "=", "self", ".", "self_attention", "(", "\n", "dec_hidden_states", ",", "tri_mask", ")", "[", "0", "]", "# (N, Lt, D)", "\n", "attention_output", "=", "self", ".", "add_norm_1", "(", "attention_output", ",", "\n", "dec_hidden_states", ")", "# (N, Lt, D)", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcTrainDataset.collate": [[140, 162], ["map", "map", "torch.nn.utils.rnn.pad_sequence", "torch.arange().unsqueeze", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "data.video_collate", "batch.update", "toolz.sandbox.unzip", "toolz.sandbox.unzip", "tuple", "cytoolz.concat", "torch.arange", "map", "torch.nn.utils.rnn.pad_sequence.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["\n", "# 2, dec enc attn + add_norm", "\n", "# Use the mask associated with key/value, not query. (q, k, v)", "\n", "# Additionally, there is no need to do subsequent masking, since each", "\n", "# word has the right to see all the video info.", "\n", "dec_enc_attention_output", "=", "self", ".", "dec_enc_attention", "(", "\n", "enc_outputs", ",", "attention_output", ",", "enc_mask", ")", "[", "0", "]", "# (N, Lt, D)", "\n", "dec_enc_attention_output", "=", "self", ".", "add_norm_2", "(", "\n", "dec_enc_attention_output", ",", "attention_output", ")", "# (N, Lt, D)", "\n", "\n", "# 3, FFN + add_norm", "\n", "output", "=", "self", ".", "intermidiate", "(", "dec_enc_attention_output", ")", "# (N, Lt, D)", "\n", "output", "=", "self", ".", "add_norm_3", "(", "output", ",", "\n", "dec_enc_attention_output", ")", "# (N, Lt, D)", "\n", "return", "output", "# (N, Lt, D)", "\n", "\n", "\n", "", "", "class", "BertDecoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "BertDecoderLayer", "(", "config", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "tri_mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "1024", ",", "1024", ")", ",", "diagonal", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcValDataset.__init__": [[166, 169], ["tvc.TvcTrainDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__"], ["", "def", "forward", "(", "self", ",", "dec_hidden_states", ",", "enc_outputs", ",", "enc_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcValDataset.__getitem__": [[170, 191], ["tvc.TvcValDataset.video_db.__getitem__", "len", "tvc.TvcValDataset.caption_db.get_clip", "tvc.TvcValDataset.get_st_ed_label", "clip_ranges.append", "attn_masks.append", "all_ts.append", "gts.append", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.CaptionTokLmdb.get_clip", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.get_st_ed_label"], ["\n", "all_encoder_layers", "=", "[", "]", "\n", "len_", "=", "dec_hidden_states", ".", "size", "(", "1", ")", "\n", "tri_mask", "=", "self", ".", "tri_mask", "[", ":", "len_", ",", ":", "len_", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "enc_mask", "=", "enc_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "to", "(", "dec_hidden_states", ")", "\n", "enc_mask", "=", "(", "1.0", "-", "enc_mask", ")", "*", "-", "10000.0", "\n", "for", "layer_idx", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "dec_hidden_states", "=", "layer_module", "(", "\n", "dec_hidden_states", ",", "enc_outputs", ",", "enc_mask", ",", "tri_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "dec_hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcValDataset.collate": [[192, 219], ["map", "list", "torch.nn.utils.rnn.pad_sequence", "data.video_collate", "batch.update", "toolz.sandbox.unzip", "cytoolz.concat", "tuple", "zip", "map", "vids.append", "clip_ids.append", "all_ts.append", "all_gts.append", "int"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate"], ["            ", "all_encoder_layers", ".", "append", "(", "dec_hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n", "\n", "", "", "class", "HeroForTvc", "(", "HeroModel", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "lsr", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "vfeat_dim", ",", "max_frm_seq_len", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "config", ".", "d_config", ".", "max_position_embeddings", ",", "\n", "config", ".", "d_config", ".", "hidden_size", ")", "\n", "self", ".", "emb_LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "d_config", ".", "hidden_size", ",", "\n", "eps", "=", "1e-5", ")", "\n", "self", ".", "decoder", "=", "BertDecoder", "(", "config", ".", "d_config", ")", "\n", "\n", "if", "lsr", ">", "0", ":", "\n", "            ", "self", ".", "loss_func", "=", "LabelSmoothingLoss", "(", "lsr", ",", "\n", "config", ".", "f_config", ".", "vocab_size", ",", "\n", "ignore_index", "=", "-", "1", ",", "\n", "reduction", "=", "'none'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ",", "\n", "reduction", "=", "'none'", ")", "\n", "\n", "", "self", ".", "v_encoder", ".", "initialize", "(", ")", "\n", "\n", "", "def", "encode", "(", "self", ",", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcEvalDataset.__init__": [[224, 245], ["collections.defaultdict", "open", "list", "json.loads", "tvc.TvcEvalDataset.vid2clips[].append", "tvc.TvcEvalDataset.vid2clips.keys", "data._check_ngpu", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["for", "st", ",", "ed", "in", "segs", "]", "\n", "\n", "def", "pad_tensors", "(", "ts", ")", ":", "\n", "            ", "\"\"\" pad segmet embeddings \"\"\"", "\n", "bs", "=", "len", "(", "ts", ")", "\n", "max_l", "=", "max", "(", "t", ".", "size", "(", "0", ")", "for", "t", "in", "ts", ")", "\n", "hid", "=", "ts", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "bs", ",", "max_l", ",", "hid", ")", ".", "to", "(", "ts", "[", "0", "]", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "ts", ")", ":", "\n", "                ", "len_", "=", "t", ".", "size", "(", "0", ")", "\n", "output", "[", "i", ",", ":", "len_", ",", ":", "]", "=", "t", "\n", "", "return", "output", "\n", "\n", "", "encoder_outputs", "=", "pad_tensors", "(", "segment_embeddings", ")", "\n", "return", "encoder_outputs", "\n", "\n", "", "def", "decode", "(", "self", ",", "encoder_outputs", ",", "encoder_masks", ",", "\n", "caption_ids", ",", "pos_ids", ",", "label_ids", ",", "compute_loss", "=", "True", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcEvalDataset.__getitem__": [[246, 266], ["tvc.TvcEvalDataset.video_db.__getitem__", "len", "tvc.TvcEvalDataset.get_st_ed_label", "clip_ranges.append", "attn_masks.append", "all_ts.append", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.get_st_ed_label"], ["\n", "# shared embedding layer", "\n", "text_embeddings", "=", "self", ".", "v_encoder", ".", "f_encoder", ".", "embeddings", ".", "word_embeddings", "(", "\n", "caption_ids", ")", "\n", "pos_embeddings", "=", "self", ".", "position_embeddings", "(", "pos_ids", ")", "\n", "embeddings", "=", "self", ".", "emb_LayerNorm", "(", "text_embeddings", "+", "pos_embeddings", ")", "\n", "decoder_outputs", "=", "self", ".", "decoder", "(", "\n", "embeddings", ",", "encoder_outputs", ",", "encoder_masks", ")", "[", "-", "1", "]", "# (N, Lt, D)", "\n", "# shared projection layer", "\n", "prediction_scores", "=", "self", ".", "v_encoder", ".", "f_encoder", ".", "lm_head", "(", "\n", "decoder_outputs", ")", "# (N, Lt, vocab_size)", "\n", "if", "compute_loss", ":", "\n", "            ", "caption_loss", "=", "self", ".", "loss_func", "(", "\n", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "f_config", ".", "vocab_size", ")", ",", "\n", "label_ids", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "caption_loss", "\n", "", "else", ":", "\n", "            ", "return", "prediction_scores", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.tvc.TvcEvalDataset.collate": [[267, 292], ["map", "list", "torch.nn.utils.rnn.pad_sequence", "data.video_collate", "batch.update", "toolz.sandbox.unzip", "cytoolz.concat", "tuple", "zip", "map", "vids.append", "clip_ids.append", "all_ts.append", "int"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate"], ["\n", "", "", "def", "forward", "(", "self", ",", "batch", ",", "mode", "=", "'train'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "encoder_outputs", "=", "self", ".", "encode", "(", "batch", ")", "# (N, Lv, D)", "\n", "attn_mask", "=", "batch", "[", "'cap_attn_mask'", "]", "\n", "caption_ids", "=", "batch", "[", "'cap_input_ids'", "]", "\n", "pos_ids", "=", "batch", "[", "'cap_pos_ids'", "]", "\n", "label_ids", "=", "batch", "[", "'cap_tgt_ids'", "]", "\n", "res", "=", "self", ".", "decode", "(", "encoder_outputs", ",", "attn_mask", ",", "\n", "caption_ids", ",", "pos_ids", ",", "label_ids", ",", "compute_loss", ")", "\n", "return", "res", "\n", "\n", "\n", "", "", "def", "_to_fp16", "(", "batch", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", "and", "'Float'", "in", "batch", ".", "type", "(", ")", ":", "\n", "        ", "return", "batch", ".", "half", "(", ")", "\n", "", "elif", "isinstance", "(", "batch", ",", "list", ")", ":", "\n", "        ", "new_batch", "=", "[", "_to_fp16", "(", "t", ")", "for", "t", "in", "batch", "]", "\n", "", "elif", "isinstance", "(", "batch", ",", "tuple", ")", ":", "\n", "        ", "new_batch", "=", "tuple", "(", "_to_fp16", "(", "t", ")", "for", "t", "in", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", ",", "dict", ")", ":", "\n", "        ", "new_batch", "=", "{", "n", ":", "_to_fp16", "(", "t", ")", "for", "n", ",", "t", "in", "batch", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "return", "batch", "\n", "", "return", "new_batch", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.MetaLoader.__init__": [[21, 40], ["isinstance", "loaders.items", "isinstance", "iter", "loader.MetaLoader.sampling_pools.extend", "isinstance", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loaders", ",", "accum_steps", "=", "1", ",", "distributed", "=", "False", ")", ":", "\n", "        ", "assert", "isinstance", "(", "loaders", ",", "dict", ")", "\n", "self", ".", "name2loader", "=", "{", "}", "\n", "self", ".", "name2iter", "=", "{", "}", "\n", "self", ".", "sampling_pools", "=", "[", "]", "\n", "for", "n", ",", "l", "in", "loaders", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "tuple", ")", ":", "\n", "                ", "l", ",", "r", "=", "l", "\n", "", "elif", "isinstance", "(", "l", ",", "DataLoader", ")", ":", "\n", "                ", "r", "=", "1", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "", "self", ".", "name2loader", "[", "n", "]", "=", "l", "\n", "self", ".", "name2iter", "[", "n", "]", "=", "iter", "(", "l", ")", "\n", "self", ".", "sampling_pools", ".", "extend", "(", "[", "n", "]", "*", "r", ")", "\n", "\n", "", "self", ".", "accum_steps", "=", "accum_steps", "\n", "self", ".", "distributed", "=", "distributed", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.MetaLoader.__iter__": [[41, 60], ["random.choice", "next", "utils.distributed.any_broadcast", "iter", "next"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next", "home.repos.pwc.inspect_result.linjieli222_HERO.utils.distributed.any_broadcast", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\" this iterator will run indefinitely \"\"\"", "\n", "task", "=", "self", ".", "sampling_pools", "[", "0", "]", "\n", "while", "True", ":", "\n", "            ", "if", "self", ".", "step", "%", "self", ".", "accum_steps", "==", "0", ":", "\n", "                ", "task", "=", "random", ".", "choice", "(", "self", ".", "sampling_pools", ")", "\n", "if", "self", ".", "distributed", ":", "\n", "# make sure all process is training same task", "\n", "                    ", "task", "=", "any_broadcast", "(", "task", ",", "0", ")", "\n", "", "", "self", ".", "step", "+=", "1", "\n", "iter_", "=", "self", ".", "name2iter", "[", "task", "]", "\n", "try", ":", "\n", "                ", "batch", "=", "next", "(", "iter_", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "iter_", "=", "iter", "(", "self", ".", "name2loader", "[", "task", "]", ")", "\n", "batch", "=", "next", "(", "iter_", ")", "\n", "self", ".", "name2iter", "[", "task", "]", "=", "iter_", "\n", "\n", "", "yield", "task", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.__init__": [[94, 97], ["torch.cuda.Stream"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.__iter__": [[98, 105], ["iter", "loader.PrefetchLoader.preload", "loader.PrefetchLoader.next", "loader.PrefetchLoader.next"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.preload", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "loader_it", "=", "iter", "(", "self", ".", "loader", ")", "\n", "self", ".", "preload", "(", "loader_it", ")", "\n", "batch", "=", "self", ".", "next", "(", "loader_it", ")", "\n", "while", "batch", "is", "not", "None", ":", "\n", "            ", "yield", "batch", "\n", "batch", "=", "self", ".", "next", "(", "loader_it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.preload": [[109, 126], ["loader.PrefetchLoader.next"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next"], ["", "def", "preload", "(", "self", ",", "it", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "batch", "=", "next", "(", "it", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "batch", "=", "None", "\n", "return", "\n", "# if record_stream() doesn't work, another option is to make sure", "\n", "# device inputs are created on the main stream.", "\n", "# self.next_input_gpu = torch.empty_like(self.next_input,", "\n", "#                                        device='cuda')", "\n", "# self.next_target_gpu = torch.empty_like(self.next_target,", "\n", "#                                         device='cuda')", "\n", "# Need to make sure the memory allocated for next_* is not still in use", "\n", "# by the main stream at the time we start copying to next_*:", "\n", "# self.stream.wait_stream(torch.cuda.current_stream())", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "batch", "=", "move_to_cuda", "(", "self", ".", "batch", ")", "\n", "# more code for the alternative if record_stream() doesn't work:", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.next": [[134, 141], ["torch.cuda.current_stream().wait_stream", "loader.PrefetchLoader.preload", "loader.record_cuda_stream", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.preload", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.record_cuda_stream"], ["", "", "def", "next", "(", "self", ",", "it", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "batch", "=", "self", ".", "batch", "\n", "if", "batch", "is", "not", "None", ":", "\n", "            ", "record_cuda_stream", "(", "batch", ")", "\n", "", "self", ".", "preload", "(", "it", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.PrefetchLoader.__getattr__": [[142, 145], ["loader.PrefetchLoader.loader.__getattribute__"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "method", "=", "self", ".", "loader", ".", "__getattribute__", "(", "name", ")", "\n", "return", "method", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.move_to_cuda": [[62, 74], ["isinstance", "batch.cuda", "isinstance", "isinstance", "loader.move_to_cuda", "tuple", "isinstance", "loader.move_to_cuda", "loader.move_to_cuda", "batch.items"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.move_to_cuda", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.move_to_cuda", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.move_to_cuda"], ["", "", "", "def", "move_to_cuda", "(", "batch", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "batch", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "elif", "isinstance", "(", "batch", ",", "list", ")", ":", "\n", "        ", "new_batch", "=", "[", "move_to_cuda", "(", "t", ")", "for", "t", "in", "batch", "]", "\n", "", "elif", "isinstance", "(", "batch", ",", "tuple", ")", ":", "\n", "        ", "new_batch", "=", "tuple", "(", "move_to_cuda", "(", "t", ")", "for", "t", "in", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", ",", "dict", ")", ":", "\n", "        ", "new_batch", "=", "{", "n", ":", "move_to_cuda", "(", "t", ")", "for", "n", ",", "t", "in", "batch", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "return", "batch", "\n", "", "return", "new_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.record_cuda_stream": [[76, 87], ["isinstance", "batch.record_stream", "torch.cuda.current_stream", "isinstance", "isinstance", "isinstance", "loader.record_cuda_stream", "batch.values", "loader.record_cuda_stream"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.record_cuda_stream", "home.repos.pwc.inspect_result.linjieli222_HERO.data.loader.record_cuda_stream"], ["", "def", "record_cuda_stream", "(", "batch", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "batch", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "batch", ",", "list", ")", "or", "isinstance", "(", "batch", ",", "tuple", ")", ":", "\n", "        ", "for", "t", "in", "batch", ":", "\n", "            ", "record_cuda_stream", "(", "t", ")", "\n", "", "", "elif", "isinstance", "(", "batch", ",", "dict", ")", ":", "\n", "        ", "for", "t", "in", "batch", ".", "values", "(", ")", ":", "\n", "            ", "record_cuda_stream", "(", "t", ")", "\n", "", "", "else", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.__init__": [[22, 59], ["isinstance", "isinstance", "len", "data.get_ids_and_lens", "data._check_ngpu", "data._check_ngpu", "enumerate", "sorted", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size", "list", "vcmr.VcmrDataset.vid2dur.keys"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], ["config", ",", "vfeat_dim", ",", "max_frm_seq_len", ",", "\n", "conv_stride", ",", "conv_kernel_size", ",", "\n", "ranking_loss_type", ",", "margin", ",", "\n", "lw_neg_ctx", ",", "lw_neg_q", ",", "lw_st_ed", ",", "drop_svmr_prob", ",", "\n", "use_hard_negative", ",", "hard_pool_size", ",", "\n", "hard_neg_weight", ",", "use_all_neg", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "batch", ",", "task", "=", "'tvr'", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "if", "task", "in", "[", "'tvr'", ",", "'how2r'", ",", "'didemo_video_sub'", ",", "\n", "'didemo_video_only'", "]", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "\n", "batch", ",", "task", "=", "'vsm'", ",", "compute_loss", "=", "compute_loss", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized task {task}'", ")", "\n", "\n", "", "", "def", "get_pred_from_raw_query", "(", "self", ",", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "query_input_ids", ",", "query_pos_ids", ",", "\n", "query_attn_masks", ",", "cross", "=", "False", ",", "\n", "val_gather_gpus", "=", "False", ")", ":", "\n", "        ", "modularized_query", "=", "self", ".", "encode_txt_inputs", "(", "\n", "query_input_ids", ",", "query_pos_ids", ",", "\n", "query_attn_masks", ",", "attn_layer", "=", "self", ".", "q_feat_attn", ",", "\n", "normalized", "=", "False", ")", "\n", "\n", "st_prob", ",", "ed_prob", "=", "self", ".", "get_pred_from_mod_query", "(", "\n", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "modularized_query", ",", "cross", "=", "cross", ")", "\n", "\n", "if", "self", ".", "lw_neg_ctx", "!=", "0", "or", "self", ".", "lw_neg_q", "!=", "0", ":", "\n", "            ", "q2video_scores", "=", "self", ".", "get_video_level_scores", "(", "\n", "modularized_query", ",", "frame_embeddings", ",", "c_attn_masks", ",", "\n", "val_gather_gpus", ")", "\n", "", "else", ":", "\n", "            ", "q2video_scores", "=", "None", "\n", "", "return", "q2video_scores", ",", "st_prob", ",", "ed_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.getids": [[60, 73], ["len", "len", "random.sample", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.__getitem__": [[74, 101], ["vcmr.VcmrDataset.getids", "vcmr.VcmrDataset.video_db.__getitem__", "len", "vcmr.VcmrDataset.get_st_ed_label", "torch.LongTensor", "torch.tensor", "torch.tensor", "query_and_targets.append", "tuple", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.get_st_ed_label"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.__len__": [[102, 106], ["len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.get_st_ed_label": [[107, 125], ["min", "min", "math.floor", "max", "math.ceil"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrEvalDataset.__getitem__": [[165, 169], ["vcmr.VcmrEvalDataset.getids", "vcmr.VcmrDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__": [[182, 203], ["vcmr.VcmrDataset.__init__", "data.get_ids_and_lens", "data._check_ngpu", "horovod.rank", "horovod.size", "horovod.rank", "horovod.size"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__init__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data.get_ids_and_lens", "home.repos.pwc.inspect_result.linjieli222_HERO.data.data._check_ngpu", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__len__": [[204, 206], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids": [[207, 214], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__": [[215, 243], ["vcmr.VcmrFullEvalDataset.getids", "vcmr.VcmrFullEvalDataset.video_db.__getitem__", "len", "torch.tensor", "torch.tensor", "query_and_targets.append", "vcmr.VcmrFullEvalDataset.get_st_ed_label", "torch.LongTensor", "torch.LongTensor", "len"], "methods", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.getids", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrFullEvalDataset.__getitem__", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.VcmrDataset.get_st_ed_label"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.query_collate": [[127, 144], ["torch.nn.utils.rnn.pad_sequence", "torch.arange().unsqueeze", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "len", "torch.arange", "query_input_ids[].size", "torch.nn.utils.rnn.pad_sequence.size"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.linjieli222_HERO.cider.cider_scorer.CiderScorer.size"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.vcmr_collate": [[146, 161], ["map", "data.video_collate", "map", "vcmr.query_collate", "query_collate.update", "torch.tensor", "toolz.sandbox.unzip", "toolz.sandbox.unzip", "cytoolz.concat", "enumerate"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.data.video_collate", "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.query_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.vcmr_eval_collate": [[171, 179], ["vcmr.vcmr_collate", "qids.extend", "vcmr_collate.append"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.vcmr_collate"], []], "home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.vcmr_full_eval_collate": [[245, 254], ["map", "map", "vcmr.query_collate", "toolz.sandbox.unzip", "toolz.sandbox.unzip", "cytoolz.concat"], "function", ["home.repos.pwc.inspect_result.linjieli222_HERO.data.vcmr.query_collate"], []]}