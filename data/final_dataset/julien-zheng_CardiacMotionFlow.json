{"home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.__init__": [[492, 559], ["numpy.isscalar", "keras.backend.image_data_format", "ValueError", "len", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "featurewise_center", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "\n", "featurewise_std_normalization", "=", "False", ",", "\n", "samplewise_std_normalization", "=", "False", ",", "\n", "zca_whitening", "=", "False", ",", "\n", "zca_epsilon", "=", "1e-6", ",", "\n", "rotation_range", "=", "0.", ",", "\n", "width_shift_range", "=", "0.", ",", "\n", "height_shift_range", "=", "0.", ",", "\n", "shear_range", "=", "0.", ",", "\n", "zoom_range", "=", "0.", ",", "\n", "channel_shift_range", "=", "0.", ",", "\n", "fill_mode", "=", "'nearest'", ",", "\n", "cval", "=", "0.", ",", "\n", "horizontal_flip", "=", "False", ",", "\n", "vertical_flip", "=", "False", ",", "\n", "rescale", "=", "None", ",", "\n", "preprocessing_function", "=", "None", ",", "\n", "data_format", "=", "None", ")", ":", "\n", "        ", "if", "data_format", "is", "None", ":", "\n", "            ", "data_format", "=", "K", ".", "image_data_format", "(", ")", "\n", "", "self", ".", "featurewise_center", "=", "featurewise_center", "\n", "self", ".", "samplewise_center", "=", "samplewise_center", "\n", "self", ".", "featurewise_std_normalization", "=", "featurewise_std_normalization", "\n", "self", ".", "samplewise_std_normalization", "=", "samplewise_std_normalization", "\n", "self", ".", "zca_whitening", "=", "zca_whitening", "\n", "self", ".", "zca_epsilon", "=", "zca_epsilon", "\n", "self", ".", "rotation_range", "=", "rotation_range", "\n", "self", ".", "width_shift_range", "=", "width_shift_range", "\n", "self", ".", "height_shift_range", "=", "height_shift_range", "\n", "self", ".", "shear_range", "=", "shear_range", "\n", "self", ".", "zoom_range", "=", "zoom_range", "\n", "self", ".", "channel_shift_range", "=", "channel_shift_range", "\n", "self", ".", "fill_mode", "=", "fill_mode", "\n", "self", ".", "cval", "=", "cval", "\n", "self", ".", "horizontal_flip", "=", "horizontal_flip", "\n", "self", ".", "vertical_flip", "=", "vertical_flip", "\n", "self", ".", "rescale", "=", "rescale", "\n", "self", ".", "preprocessing_function", "=", "preprocessing_function", "\n", "\n", "if", "data_format", "not", "in", "{", "'channels_last'", ",", "'channels_first'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'`data_format` should be `\"channels_last\"` (channel after row and '", "\n", "'column) or `\"channels_first\"` (channel before row and column). '", "\n", "'Received arg: '", ",", "data_format", ")", "\n", "", "self", ".", "data_format", "=", "data_format", "\n", "if", "data_format", "==", "'channels_first'", ":", "\n", "            ", "self", ".", "channel_axis", "=", "1", "\n", "self", ".", "row_axis", "=", "2", "\n", "self", ".", "col_axis", "=", "3", "\n", "", "if", "data_format", "==", "'channels_last'", ":", "\n", "            ", "self", ".", "channel_axis", "=", "3", "\n", "self", ".", "row_axis", "=", "1", "\n", "self", ".", "col_axis", "=", "2", "\n", "\n", "", "self", ".", "mean", "=", "None", "\n", "self", ".", "std", "=", "None", "\n", "self", ".", "principal_components", "=", "None", "\n", "\n", "if", "np", ".", "isscalar", "(", "zoom_range", ")", ":", "\n", "            ", "self", ".", "zoom_range", "=", "[", "1", "-", "zoom_range", ",", "1", "+", "zoom_range", "]", "\n", "", "elif", "len", "(", "zoom_range", ")", "==", "2", ":", "\n", "            ", "self", ".", "zoom_range", "=", "[", "zoom_range", "[", "0", "]", ",", "zoom_range", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'`zoom_range` should be a float or '", "\n", "'a tuple or list of two floats. '", "\n", "'Received arg: '", ",", "zoom_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow": [[560, 571], ["image2.NumpyArrayIterator"], "methods", ["None"], ["", "", "def", "flow", "(", "self", ",", "x", ",", "y", "=", "None", ",", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ",", "\n", "save_to_dir", "=", "None", ",", "save_prefix", "=", "''", ",", "save_format", "=", "'png'", ")", ":", "\n", "        ", "return", "NumpyArrayIterator", "(", "\n", "x", ",", "y", ",", "self", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "seed", "=", "seed", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n", "save_to_dir", "=", "save_to_dir", ",", "\n", "save_prefix", "=", "save_prefix", ",", "\n", "save_format", "=", "save_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_directory": [[572, 590], ["image2.DirectoryIterator"], "methods", ["None"], ["", "def", "flow_from_directory", "(", "self", ",", "directory", ",", "\n", "target_size", "=", "(", "256", ",", "256", ")", ",", "color_mode", "=", "'rgb'", ",", "\n", "classes", "=", "None", ",", "class_mode", "=", "'categorical'", ",", "\n", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "follow_links", "=", "False", ")", ":", "\n", "        ", "return", "DirectoryIterator", "(", "\n", "directory", ",", "self", ",", "\n", "target_size", "=", "target_size", ",", "color_mode", "=", "color_mode", ",", "\n", "classes", "=", "classes", ",", "class_mode", "=", "class_mode", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "save_to_dir", ",", "\n", "save_prefix", "=", "save_prefix", ",", "\n", "save_format", "=", "save_format", ",", "\n", "follow_links", "=", "follow_links", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list": [[592, 620], ["image2.PathListIterator"], "methods", ["None"], ["", "def", "flow_from_path_list", "(", "self", ",", "path_list", ",", "\n", "target_size", "=", "(", "256", ",", "256", ")", ",", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'rgb'", ",", "\n", "class_list", "=", "None", ",", "class_mode", "=", "'categorical'", ",", "\n", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "1", ",", "\n", "follow_links", "=", "False", ")", ":", "\n", "        ", "return", "PathListIterator", "(", "\n", "path_list", ",", "self", ",", "\n", "target_size", "=", "target_size", ",", "pad_to_square", "=", "pad_to_square", ",", "\n", "resize_mode", "=", "resize_mode", ",", "\n", "histogram_based_preprocessing", "=", "histogram_based_preprocessing", ",", "\n", "clahe", "=", "clahe", ",", "\n", "color_mode", "=", "color_mode", ",", "\n", "class_list", "=", "class_list", ",", "class_mode", "=", "class_mode", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "save_to_dir", ",", "\n", "save_prefix", "=", "save_prefix", ",", "\n", "save_format", "=", "save_format", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "follow_links", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.standardize": [[621, 666], ["image2.ImageDataGenerator2.preprocessing_function", "numpy.mean", "numpy.std", "warnings.warn", "warnings.warn", "numpy.reshape", "numpy.dot", "numpy.reshape", "warnings.warn", "numpy.prod"], "methods", ["None"], ["", "def", "standardize", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Apply the normalization configuration to a batch of inputs.\n        # Arguments\n            x: batch of inputs to be normalized.\n        # Returns\n            The inputs, normalized.\n        \"\"\"", "\n", "if", "self", ".", "preprocessing_function", ":", "\n", "            ", "x", "=", "self", ".", "preprocessing_function", "(", "x", ")", "\n", "", "if", "self", ".", "rescale", ":", "\n", "            ", "x", "*=", "self", ".", "rescale", "\n", "# x is a single image, so it doesn't have image number at index 0", "\n", "", "img_channel_axis", "=", "self", ".", "channel_axis", "-", "1", "\n", "if", "self", ".", "samplewise_center", ":", "\n", "            ", "x", "-=", "np", ".", "mean", "(", "x", ",", "axis", "=", "img_channel_axis", ",", "keepdims", "=", "True", ")", "\n", "", "if", "self", ".", "samplewise_std_normalization", ":", "\n", "            ", "x", "/=", "(", "np", ".", "std", "(", "x", ",", "axis", "=", "img_channel_axis", ",", "keepdims", "=", "True", ")", "+", "1e-7", ")", "\n", "\n", "", "if", "self", ".", "featurewise_center", ":", "\n", "            ", "if", "self", ".", "mean", "is", "not", "None", ":", "\n", "                ", "x", "-=", "self", ".", "mean", "\n", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "'This ImageDataGenerator2 specifies '", "\n", "'`featurewise_center`, but it hasn\\'t'", "\n", "'been fit on any training data. Fit it '", "\n", "'first by calling `.fit(numpy_data)`.'", ")", "\n", "", "", "if", "self", ".", "featurewise_std_normalization", ":", "\n", "            ", "if", "self", ".", "std", "is", "not", "None", ":", "\n", "                ", "x", "/=", "(", "self", ".", "std", "+", "1e-7", ")", "\n", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "'This ImageDataGenerator2 specifies '", "\n", "'`featurewise_std_normalization`, but it hasn\\'t'", "\n", "'been fit on any training data. Fit it '", "\n", "'first by calling `.fit(numpy_data)`.'", ")", "\n", "", "", "if", "self", ".", "zca_whitening", ":", "\n", "            ", "if", "self", ".", "principal_components", "is", "not", "None", ":", "\n", "                ", "flatx", "=", "np", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "np", ".", "prod", "(", "x", ".", "shape", "[", "-", "3", ":", "]", ")", ")", ")", "\n", "whitex", "=", "np", ".", "dot", "(", "flatx", ",", "self", ".", "principal_components", ")", "\n", "x", "=", "np", ".", "reshape", "(", "whitex", ",", "x", ".", "shape", ")", "\n", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "'This ImageDataGenerator2 specifies '", "\n", "'`zca_whitening`, but it hasn\\'t'", "\n", "'been fit on any training data. Fit it '", "\n", "'first by calling `.fit(numpy_data)`.'", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.random_transform": [[667, 754], ["numpy.random.seed", "numpy.random.uniform", "numpy.random.uniform", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "image2.transform_matrix_offset_center", "image2.apply_transform", "image2.random_channel_shift", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.random.random", "image2.flip_axis", "numpy.random.random", "image2.flip_axis", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.transform_matrix_offset_center", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.apply_transform", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.random_channel_shift", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.flip_axis", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.flip_axis"], ["", "def", "random_transform", "(", "self", ",", "x", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Randomly augment a single image tensor.\n        # Arguments\n            x: 3D tensor, single image.\n            seed: random seed.\n        # Returns\n            A randomly transformed version of the input (same shape).\n        \"\"\"", "\n", "# x is a single image, so it doesn't have image number at index 0", "\n", "img_row_axis", "=", "self", ".", "row_axis", "-", "1", "\n", "img_col_axis", "=", "self", ".", "col_axis", "-", "1", "\n", "img_channel_axis", "=", "self", ".", "channel_axis", "-", "1", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# use composition of homographies", "\n", "# to generate final transform that needs to be applied", "\n", "", "if", "self", ".", "rotation_range", ":", "\n", "            ", "theta", "=", "np", ".", "pi", "/", "180", "*", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "rotation_range", ",", "self", ".", "rotation_range", ")", "\n", "", "else", ":", "\n", "            ", "theta", "=", "0", "\n", "\n", "", "if", "self", ".", "height_shift_range", ":", "\n", "            ", "tx", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "height_shift_range", ",", "self", ".", "height_shift_range", ")", "*", "x", ".", "shape", "[", "img_row_axis", "]", "\n", "", "else", ":", "\n", "            ", "tx", "=", "0", "\n", "\n", "", "if", "self", ".", "width_shift_range", ":", "\n", "            ", "ty", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "width_shift_range", ",", "self", ".", "width_shift_range", ")", "*", "x", ".", "shape", "[", "img_col_axis", "]", "\n", "", "else", ":", "\n", "            ", "ty", "=", "0", "\n", "\n", "", "if", "self", ".", "shear_range", ":", "\n", "            ", "shear", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "shear_range", ",", "self", ".", "shear_range", ")", "\n", "", "else", ":", "\n", "            ", "shear", "=", "0", "\n", "\n", "", "if", "self", ".", "zoom_range", "[", "0", "]", "==", "1", "and", "self", ".", "zoom_range", "[", "1", "]", "==", "1", ":", "\n", "            ", "zx", ",", "zy", "=", "1", ",", "1", "\n", "", "else", ":", "\n", "            ", "zx", ",", "zy", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "zoom_range", "[", "0", "]", ",", "self", ".", "zoom_range", "[", "1", "]", ",", "2", ")", "\n", "\n", "", "transform_matrix", "=", "None", "\n", "if", "theta", "!=", "0", ":", "\n", "            ", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "rotation_matrix", "\n", "\n", "", "if", "tx", "!=", "0", "or", "ty", "!=", "0", ":", "\n", "            ", "shift_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "shift_matrix", "if", "transform_matrix", "is", "None", "else", "np", ".", "dot", "(", "transform_matrix", ",", "shift_matrix", ")", "\n", "\n", "", "if", "shear", "!=", "0", ":", "\n", "            ", "shear_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "np", ".", "sin", "(", "shear", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "shear", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "shear_matrix", "if", "transform_matrix", "is", "None", "else", "np", ".", "dot", "(", "transform_matrix", ",", "shear_matrix", ")", "\n", "\n", "", "if", "zx", "!=", "1", "or", "zy", "!=", "1", ":", "\n", "            ", "zoom_matrix", "=", "np", ".", "array", "(", "[", "[", "zx", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "zy", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "zoom_matrix", "if", "transform_matrix", "is", "None", "else", "np", ".", "dot", "(", "transform_matrix", ",", "zoom_matrix", ")", "\n", "\n", "", "if", "transform_matrix", "is", "not", "None", ":", "\n", "            ", "h", ",", "w", "=", "x", ".", "shape", "[", "img_row_axis", "]", ",", "x", ".", "shape", "[", "img_col_axis", "]", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "transform_matrix", ",", "h", ",", "w", ")", "\n", "x", "=", "apply_transform", "(", "x", ",", "transform_matrix", ",", "img_channel_axis", ",", "\n", "fill_mode", "=", "self", ".", "fill_mode", ",", "cval", "=", "self", ".", "cval", ")", "\n", "\n", "", "if", "self", ".", "channel_shift_range", "!=", "0", ":", "\n", "            ", "x", "=", "random_channel_shift", "(", "x", ",", "\n", "self", ".", "channel_shift_range", ",", "\n", "img_channel_axis", ")", "\n", "", "if", "self", ".", "horizontal_flip", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "x", "=", "flip_axis", "(", "x", ",", "img_col_axis", ")", "\n", "\n", "", "", "if", "self", ".", "vertical_flip", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "x", "=", "flip_axis", "(", "x", ",", "img_row_axis", ")", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit": [[755, 817], ["numpy.asarray", "numpy.copy", "ValueError", "warnings.warn", "numpy.random.seed", "numpy.zeros", "six.moves.range", "numpy.mean", "numpy.reshape", "numpy.std", "numpy.reshape", "numpy.reshape", "scipy.linalg.svd", "numpy.dot", "keras.backend.floatx", "tuple", "six.moves.range", "keras.backend.epsilon", "numpy.dot", "numpy.dot", "str", "keras.backend.floatx", "image2.ImageDataGenerator2.random_transform", "numpy.diag", "str", "list", "numpy.sqrt", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.random_transform"], ["", "def", "fit", "(", "self", ",", "x", ",", "\n", "augment", "=", "False", ",", "\n", "rounds", "=", "1", ",", "\n", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits internal statistics to some sample data.\n        Required for featurewise_center, featurewise_std_normalization\n        and zca_whitening.\n        # Arguments\n            x: Numpy array, the data to fit on. Should have rank 4.\n                In case of grayscale data,\n                the channels axis should have value 1, and in case\n                of RGB data, it should have value 3.\n            augment: Whether to fit on randomly augmented samples\n            rounds: If `augment`,\n                how many augmentation passes to do over the data\n            seed: random seed.\n        # Raises\n            ValueError: in case of invalid input `x`.\n        \"\"\"", "\n", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "if", "x", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'Input to `.fit()` should have rank 4. '", "\n", "'Got array with shape: '", "+", "str", "(", "x", ".", "shape", ")", ")", "\n", "", "if", "x", ".", "shape", "[", "self", ".", "channel_axis", "]", "not", "in", "{", "1", ",", "3", ",", "4", "}", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'Expected input to be images (as Numpy array) '", "\n", "'following the data format convention \"'", "+", "self", ".", "data_format", "+", "'\" '", "\n", "'(channels on axis '", "+", "str", "(", "self", ".", "channel_axis", ")", "+", "'), i.e. expected '", "\n", "'either 1, 3 or 4 channels on axis '", "+", "str", "(", "self", ".", "channel_axis", ")", "+", "'. '", "\n", "'However, it was passed an array with shape '", "+", "str", "(", "x", ".", "shape", ")", "+", "\n", "' ('", "+", "str", "(", "x", ".", "shape", "[", "self", ".", "channel_axis", "]", ")", "+", "' channels).'", ")", "\n", "\n", "", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "x", "=", "np", ".", "copy", "(", "x", ")", "\n", "if", "augment", ":", "\n", "            ", "ax", "=", "np", ".", "zeros", "(", "tuple", "(", "[", "rounds", "*", "x", ".", "shape", "[", "0", "]", "]", "+", "list", "(", "x", ".", "shape", ")", "[", "1", ":", "]", ")", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "for", "r", "in", "range", "(", "rounds", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "ax", "[", "i", "+", "r", "*", "x", ".", "shape", "[", "0", "]", "]", "=", "self", ".", "random_transform", "(", "x", "[", "i", "]", ")", "\n", "", "", "x", "=", "ax", "\n", "\n", "", "if", "self", ".", "featurewise_center", ":", "\n", "            ", "self", ".", "mean", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "(", "0", ",", "self", ".", "row_axis", ",", "self", ".", "col_axis", ")", ")", "\n", "broadcast_shape", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "broadcast_shape", "[", "self", ".", "channel_axis", "-", "1", "]", "=", "x", ".", "shape", "[", "self", ".", "channel_axis", "]", "\n", "self", ".", "mean", "=", "np", ".", "reshape", "(", "self", ".", "mean", ",", "broadcast_shape", ")", "\n", "x", "-=", "self", ".", "mean", "\n", "\n", "", "if", "self", ".", "featurewise_std_normalization", ":", "\n", "            ", "self", ".", "std", "=", "np", ".", "std", "(", "x", ",", "axis", "=", "(", "0", ",", "self", ".", "row_axis", ",", "self", ".", "col_axis", ")", ")", "\n", "broadcast_shape", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "broadcast_shape", "[", "self", ".", "channel_axis", "-", "1", "]", "=", "x", ".", "shape", "[", "self", ".", "channel_axis", "]", "\n", "self", ".", "std", "=", "np", ".", "reshape", "(", "self", ".", "std", ",", "broadcast_shape", ")", "\n", "x", "/=", "(", "self", ".", "std", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "zca_whitening", ":", "\n", "            ", "flat_x", "=", "np", ".", "reshape", "(", "x", ",", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", "*", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", ")", "\n", "sigma", "=", "np", ".", "dot", "(", "flat_x", ".", "T", ",", "flat_x", ")", "/", "flat_x", ".", "shape", "[", "0", "]", "\n", "u", ",", "s", ",", "_", "=", "linalg", ".", "svd", "(", "sigma", ")", "\n", "self", ".", "principal_components", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "u", ",", "np", ".", "diag", "(", "1.", "/", "np", ".", "sqrt", "(", "s", "+", "self", ".", "zca_epsilon", ")", ")", ")", ",", "u", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.Iterator.__init__": [[828, 836], ["threading.Lock", "image2.Iterator._flow_index"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.Iterator._flow_index"], ["def", "__init__", "(", "self", ",", "n", ",", "batch_size", ",", "shuffle", ",", "seed", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "batch_index", "=", "0", "\n", "self", ".", "total_batches_seen", "=", "0", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "index_generator", "=", "self", ".", "_flow_index", "(", "n", ",", "batch_size", ",", "shuffle", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.Iterator.reset": [[837, 839], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.Iterator._flow_index": [[840, 867], ["image2.Iterator.reset", "numpy.random.seed", "numpy.arange", "numpy.random.permutation", "len", "print", "len", "print", "len", "print"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.Iterator.reset"], ["", "def", "_flow_index", "(", "self", ",", "n", ",", "batch_size", "=", "32", ",", "shuffle", "=", "False", ",", "seed", "=", "None", ")", ":", "\n", "# Ensure self.batch_index is 0.", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "while", "1", ":", "\n", "#print(\"_flow_index: seed =\", seed + self.total_batches_seen)", "\n", "            ", "if", "seed", "is", "not", "None", ":", "\n", "                ", "np", ".", "random", ".", "seed", "(", "seed", "+", "self", ".", "total_batches_seen", ")", "\n", "", "if", "self", ".", "batch_index", "==", "0", ":", "\n", "                ", "index_array", "=", "np", ".", "arange", "(", "n", ")", "\n", "if", "shuffle", ":", "\n", "                    ", "index_array", "=", "np", ".", "random", ".", "permutation", "(", "n", ")", "\n", "", "if", "(", "len", "(", "index_array", ")", ">=", "3", ")", ":", "\n", "                    ", "print", "(", "\"index_array:\"", ",", "index_array", "[", "0", "]", ",", "index_array", "[", "1", "]", ",", "index_array", "[", "2", "]", ",", "\"...\"", ")", "\n", "", "if", "(", "len", "(", "index_array", ")", "==", "2", ")", ":", "\n", "                    ", "print", "(", "\"index_array:\"", ",", "index_array", "[", "0", "]", ",", "index_array", "[", "1", "]", ")", "\n", "", "if", "(", "len", "(", "index_array", ")", "==", "1", ")", ":", "\n", "                    ", "print", "(", "\"index_array:\"", ",", "index_array", "[", "0", "]", ")", "\n", "", "", "current_index", "=", "(", "self", ".", "batch_index", "*", "batch_size", ")", "%", "n", "\n", "if", "n", ">", "current_index", "+", "batch_size", ":", "\n", "                ", "current_batch_size", "=", "batch_size", "\n", "self", ".", "batch_index", "+=", "1", "\n", "", "else", ":", "\n", "                ", "current_batch_size", "=", "n", "-", "current_index", "\n", "self", ".", "batch_index", "=", "0", "\n", "", "self", ".", "total_batches_seen", "+=", "1", "\n", "yield", "(", "index_array", "[", "current_index", ":", "current_index", "+", "current_batch_size", "]", ",", "\n", "current_index", ",", "current_batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.Iterator.__iter__": [[868, 872], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "# Needed if we want to do something like:", "\n", "# for x, y in data_gen.flow(...):", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.Iterator.__next__": [[873, 875], ["image2.Iterator.next"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next"], ["", "def", "__next__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.NumpyArrayIterator.__init__": [[898, 934], ["numpy.asarray", "image2.Iterator.__init__", "ValueError", "keras.backend.image_data_format", "ValueError", "ValueError", "numpy.asarray", "len", "len", "keras.backend.floatx", "str", "numpy.asarray", "numpy.asarray", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.__init__"], ["def", "__init__", "(", "self", ",", "x", ",", "y", ",", "image_data_generator2", ",", "\n", "batch_size", "=", "32", ",", "shuffle", "=", "False", ",", "seed", "=", "None", ",", "\n", "data_format", "=", "None", ",", "\n", "save_to_dir", "=", "None", ",", "save_prefix", "=", "''", ",", "save_format", "=", "'png'", ")", ":", "\n", "        ", "if", "y", "is", "not", "None", "and", "len", "(", "x", ")", "!=", "len", "(", "y", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'X (images tensor) and y (labels) '", "\n", "'should have the same length. '", "\n", "'Found: X.shape = %s, y.shape = %s'", "%", "\n", "(", "np", ".", "asarray", "(", "x", ")", ".", "shape", ",", "np", ".", "asarray", "(", "y", ")", ".", "shape", ")", ")", "\n", "\n", "", "if", "data_format", "is", "None", ":", "\n", "            ", "data_format", "=", "K", ".", "image_data_format", "(", ")", "\n", "", "self", ".", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "if", "self", ".", "x", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'Input data in `NumpyArrayIterator` '", "\n", "'should have rank 4. You passed an array '", "\n", "'with shape'", ",", "self", ".", "x", ".", "shape", ")", "\n", "", "channels_axis", "=", "3", "if", "data_format", "==", "'channels_last'", "else", "1", "\n", "if", "self", ".", "x", ".", "shape", "[", "channels_axis", "]", "not", "in", "{", "1", ",", "3", ",", "4", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'NumpyArrayIterator is set to use the '", "\n", "'data format convention \"'", "+", "data_format", "+", "'\" '", "\n", "'(channels on axis '", "+", "str", "(", "channels_axis", ")", "+", "'), i.e. expected '", "\n", "'either 1, 3 or 4 channels on axis '", "+", "str", "(", "channels_axis", ")", "+", "'. '", "\n", "'However, it was passed an array with shape '", "+", "str", "(", "self", ".", "x", ".", "shape", ")", "+", "\n", "' ('", "+", "str", "(", "self", ".", "x", ".", "shape", "[", "channels_axis", "]", ")", "+", "' channels).'", ")", "\n", "", "if", "y", "is", "not", "None", ":", "\n", "            ", "self", ".", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "y", "=", "None", "\n", "", "self", ".", "image_data_generator2", "=", "image_data_generator2", "\n", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "save_to_dir", "=", "save_to_dir", "\n", "self", ".", "save_prefix", "=", "save_prefix", "\n", "self", ".", "save_format", "=", "save_format", "\n", "super", "(", "NumpyArrayIterator", ",", "self", ")", ".", "__init__", "(", "x", ".", "shape", "[", "0", "]", ",", "batch_size", ",", "shuffle", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.NumpyArrayIterator.next": [[935, 964], ["numpy.zeros", "enumerate", "image2.NumpyArrayIterator.next"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "\"\"\"For python 2.x.\n        # Returns\n            The next batch.\n        \"\"\"", "\n", "# Keeps under lock only the mechanism which advances", "\n", "# the indexing of each batch.", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "index_array", ",", "current_index", ",", "current_batch_size", "=", "next", "(", "self", ".", "index_generator", ")", "\n", "# The transformation of images is not under thread lock", "\n", "# so it can be done in parallel", "\n", "", "batch_x", "=", "np", ".", "zeros", "(", "tuple", "(", "[", "current_batch_size", "]", "+", "list", "(", "self", ".", "x", ".", "shape", ")", "[", "1", ":", "]", ")", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "index_array", ")", ":", "\n", "            ", "x", "=", "self", ".", "x", "[", "j", "]", "\n", "x", "=", "self", ".", "image_data_generator2", ".", "random_transform", "(", "x", ".", "astype", "(", "K", ".", "floatx", "(", ")", ")", ")", "\n", "x", "=", "self", ".", "image_data_generator2", ".", "standardize", "(", "x", ")", "\n", "batch_x", "[", "i", "]", "=", "x", "\n", "", "if", "self", ".", "save_to_dir", ":", "\n", "            ", "for", "i", "in", "range", "(", "current_batch_size", ")", ":", "\n", "                ", "img", "=", "array_to_img", "(", "batch_x", "[", "i", "]", ",", "self", ".", "data_format", ",", "scale", "=", "True", ")", "\n", "fname", "=", "'{prefix}_{index}_{hash}.{format}'", ".", "format", "(", "prefix", "=", "self", ".", "save_prefix", ",", "\n", "index", "=", "current_index", "+", "i", ",", "\n", "hash", "=", "np", ".", "random", ".", "randint", "(", "1e4", ")", ",", "\n", "format", "=", "self", ".", "save_format", ")", "\n", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_to_dir", ",", "fname", ")", ")", "\n", "", "", "if", "self", ".", "y", "is", "None", ":", "\n", "            ", "return", "batch_x", "\n", "", "batch_y", "=", "self", ".", "y", "[", "index_array", "]", "\n", "return", "batch_x", ",", "batch_y", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.DirectoryIterator.__init__": [[1065, 1153], ["tuple", "len", "dict", "multiprocessing.pool.ThreadPool", "functools.partial", "sum", "print", "numpy.zeros", "multiprocessing.pool.ThreadPool.close", "multiprocessing.pool.ThreadPool.join", "image2.Iterator.__init__", "keras.backend.image_data_format", "ValueError", "ValueError", "sorted", "zip", "sorted", "multiprocessing.pool.ThreadPool.map", "os.path.join", "results.append", "res.get", "len", "os.listdir", "os.path.isdir", "six.moves.range", "os.walk", "multiprocessing.pool.ThreadPool.apply_async", "os.path.join", "classes.append", "len", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.__init__"], ["def", "__init__", "(", "self", ",", "directory", ",", "image_data_generator2", ",", "\n", "target_size", "=", "(", "256", ",", "256", ")", ",", "color_mode", "=", "'rgb'", ",", "\n", "classes", "=", "None", ",", "class_mode", "=", "'categorical'", ",", "\n", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ",", "\n", "data_format", "=", "None", ",", "\n", "save_to_dir", "=", "None", ",", "save_prefix", "=", "''", ",", "save_format", "=", "'png'", ",", "\n", "follow_links", "=", "False", ")", ":", "\n", "        ", "if", "data_format", "is", "None", ":", "\n", "            ", "data_format", "=", "K", ".", "image_data_format", "(", ")", "\n", "", "self", ".", "directory", "=", "directory", "\n", "self", ".", "image_data_generator2", "=", "image_data_generator2", "\n", "self", ".", "target_size", "=", "tuple", "(", "target_size", ")", "\n", "if", "color_mode", "not", "in", "{", "'rgb'", ",", "'grayscale'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid color mode:'", ",", "color_mode", ",", "\n", "'; expected \"rgb\" or \"grayscale\".'", ")", "\n", "", "self", ".", "color_mode", "=", "color_mode", "\n", "self", ".", "data_format", "=", "data_format", "\n", "if", "self", ".", "color_mode", "==", "'rgb'", ":", "\n", "            ", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "                ", "self", ".", "image_shape", "=", "self", ".", "target_size", "+", "(", "3", ",", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "image_shape", "=", "(", "3", ",", ")", "+", "self", ".", "target_size", "\n", "", "", "elif", "self", ".", "color_mode", "==", "'grayscale'", ":", "\n", "            ", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "                ", "self", ".", "image_shape", "=", "self", ".", "target_size", "+", "(", "1", ",", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "image_shape", "=", "(", "1", ",", ")", "+", "self", ".", "target_size", "\n", "", "", "elif", "self", ".", "color_mode", "==", "'flow'", ":", "\n", "            ", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "                ", "self", ".", "image_shape", "=", "self", ".", "target_size", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "image_shape", "=", "(", "2", ",", ")", "+", "self", ".", "target_size", "\n", "", "", "self", ".", "classes", "=", "classes", "\n", "if", "class_mode", "not", "in", "{", "'categorical'", ",", "'binary'", ",", "'sparse'", ",", "\n", "'input'", ",", "None", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid class_mode:'", ",", "class_mode", ",", "\n", "'; expected one of \"categorical\", '", "\n", "'\"binary\", \"sparse\", \"input\"'", "\n", "' or None.'", ")", "\n", "", "self", ".", "class_mode", "=", "class_mode", "\n", "self", ".", "save_to_dir", "=", "save_to_dir", "\n", "self", ".", "save_prefix", "=", "save_prefix", "\n", "self", ".", "save_format", "=", "save_format", "\n", "\n", "white_list_formats", "=", "{", "'png'", ",", "'jpg'", ",", "'jpeg'", ",", "'bmp'", "}", "\n", "\n", "# first, count the number of samples and classes", "\n", "self", ".", "samples", "=", "0", "\n", "\n", "if", "not", "classes", ":", "\n", "            ", "classes", "=", "[", "]", "\n", "for", "subdir", "in", "sorted", "(", "os", ".", "listdir", "(", "directory", ")", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "subdir", ")", ")", ":", "\n", "                    ", "classes", ".", "append", "(", "subdir", ")", "\n", "", "", "", "self", ".", "num_class", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_indices", "=", "dict", "(", "zip", "(", "classes", ",", "range", "(", "len", "(", "classes", ")", ")", ")", ")", "\n", "\n", "def", "_recursive_list", "(", "subpath", ")", ":", "\n", "            ", "return", "sorted", "(", "os", ".", "walk", "(", "subpath", ",", "followlinks", "=", "follow_links", ")", ",", "key", "=", "lambda", "tpl", ":", "tpl", "[", "0", "]", ")", "\n", "\n", "", "pool", "=", "multiprocessing", ".", "pool", ".", "ThreadPool", "(", ")", "\n", "function_partial", "=", "partial", "(", "_count_valid_files_in_directory", ",", "\n", "white_list_formats", "=", "white_list_formats", ",", "\n", "follow_links", "=", "follow_links", ")", "\n", "self", ".", "samples", "=", "sum", "(", "pool", ".", "map", "(", "function_partial", ",", "\n", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "subdir", ")", "\n", "for", "subdir", "in", "classes", ")", ")", ")", "\n", "\n", "print", "(", "'Found %d images belonging to %d classes.'", "%", "(", "self", ".", "samples", ",", "self", ".", "num_class", ")", ")", "\n", "\n", "# second, build an index of the images in the different class subfolders", "\n", "results", "=", "[", "]", "\n", "\n", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "classes", "=", "np", ".", "zeros", "(", "(", "self", ".", "samples", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "i", "=", "0", "\n", "for", "dirpath", "in", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "subdir", ")", "for", "subdir", "in", "classes", ")", ":", "\n", "            ", "results", ".", "append", "(", "pool", ".", "apply_async", "(", "_list_valid_filenames_in_directory", ",", "\n", "(", "dirpath", ",", "white_list_formats", ",", "\n", "self", ".", "class_indices", ",", "follow_links", ")", ")", ")", "\n", "", "for", "res", "in", "results", ":", "\n", "            ", "classes", ",", "filenames", "=", "res", ".", "get", "(", ")", "\n", "self", ".", "classes", "[", "i", ":", "i", "+", "len", "(", "classes", ")", "]", "=", "classes", "\n", "self", ".", "filenames", "+=", "filenames", "\n", "i", "+=", "len", "(", "classes", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "super", "(", "DirectoryIterator", ",", "self", ")", ".", "__init__", "(", "self", ".", "samples", ",", "batch_size", ",", "shuffle", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.DirectoryIterator.next": [[1154, 1198], ["numpy.zeros", "enumerate", "image2.DirectoryIterator.next"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "\"\"\"For python 2.x.\n        # Returns\n            The next batch.\n        \"\"\"", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "index_array", ",", "current_index", ",", "current_batch_size", "=", "next", "(", "self", ".", "index_generator", ")", "\n", "# The transformation of images is not under thread lock", "\n", "# so it can be done in parallel", "\n", "", "batch_x", "=", "np", ".", "zeros", "(", "(", "current_batch_size", ",", ")", "+", "self", ".", "image_shape", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "grayscale", "=", "self", ".", "color_mode", "==", "'grayscale'", "\n", "# build batch of image data", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "index_array", ")", ":", "\n", "            ", "fname", "=", "self", ".", "filenames", "[", "j", "]", "\n", "img", "=", "load_img", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "fname", ")", ",", "\n", "grayscale", "=", "grayscale", ",", "\n", "target_size", "=", "self", ".", "target_size", ")", "\n", "x", "=", "img_to_array", "(", "img", ",", "data_format", "=", "self", ".", "data_format", ")", "\n", "x", "=", "self", ".", "image_data_generator2", ".", "random_transform", "(", "x", ")", "\n", "x", "=", "self", ".", "image_data_generator2", ".", "standardize", "(", "x", ")", "\n", "batch_x", "[", "i", "]", "=", "x", "\n", "# optionally save augmented images to disk for debugging purposes", "\n", "", "if", "self", ".", "save_to_dir", ":", "\n", "            ", "for", "i", "in", "range", "(", "current_batch_size", ")", ":", "\n", "                ", "img", "=", "array_to_img", "(", "batch_x", "[", "i", "]", ",", "self", ".", "data_format", ",", "scale", "=", "True", ")", "\n", "fname", "=", "'{prefix}_{index}_{hash}.{format}'", ".", "format", "(", "prefix", "=", "self", ".", "save_prefix", ",", "\n", "index", "=", "current_index", "+", "i", ",", "\n", "hash", "=", "np", ".", "random", ".", "randint", "(", "1e4", ")", ",", "\n", "format", "=", "self", ".", "save_format", ")", "\n", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_to_dir", ",", "fname", ")", ")", "\n", "# build batch of labels", "\n", "", "", "if", "self", ".", "class_mode", "==", "'input'", ":", "\n", "            ", "batch_y", "=", "batch_x", ".", "copy", "(", ")", "\n", "", "elif", "self", ".", "class_mode", "==", "'sparse'", ":", "\n", "            ", "batch_y", "=", "self", ".", "classes", "[", "index_array", "]", "\n", "", "elif", "self", ".", "class_mode", "==", "'binary'", ":", "\n", "            ", "batch_y", "=", "self", ".", "classes", "[", "index_array", "]", ".", "astype", "(", "K", ".", "floatx", "(", ")", ")", "\n", "", "elif", "self", ".", "class_mode", "==", "'categorical'", ":", "\n", "            ", "batch_y", "=", "np", ".", "zeros", "(", "(", "len", "(", "batch_x", ")", ",", "self", ".", "num_class", ")", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "classes", "[", "index_array", "]", ")", ":", "\n", "                ", "batch_y", "[", "i", ",", "label", "]", "=", "1.", "\n", "", "", "else", ":", "\n", "            ", "return", "batch_x", "\n", "", "return", "batch_x", ",", "batch_y", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.PathListIterator.__init__": [[1243, 1319], ["tuple", "len", "len", "print", "numpy.array", "image2.Iterator.__init__", "keras.backend.image_data_format", "ValueError", "ValueError", "ValueError", "set", "len"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.__init__"], ["def", "__init__", "(", "self", ",", "path_list", ",", "image_data_generator2", ",", "\n", "target_size", "=", "(", "256", ",", "256", ")", ",", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'rgb'", ",", "\n", "class_list", "=", "None", ",", "class_mode", "=", "'categorical'", ",", "\n", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ",", "\n", "data_format", "=", "None", ",", "\n", "save_to_dir", "=", "None", ",", "save_prefix", "=", "''", ",", "save_format", "=", "'png'", ",", "save_period", "=", "1", ",", "\n", "follow_links", "=", "False", ")", ":", "\n", "        ", "if", "data_format", "is", "None", ":", "\n", "            ", "data_format", "=", "K", ".", "image_data_format", "(", ")", "\n", "", "self", ".", "path_list", "=", "path_list", "\n", "self", ".", "image_data_generator2", "=", "image_data_generator2", "\n", "self", ".", "target_size", "=", "tuple", "(", "target_size", ")", "\n", "self", ".", "pad_to_square", "=", "pad_to_square", "\n", "if", "resize_mode", "not", "in", "{", "'nearest'", ",", "'bilinear'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid resize mode:'", ",", "resize_mode", ",", "\n", "'; expected \"nearest\" or \"bilinear\".'", ")", "\n", "", "self", ".", "resize_mode", "=", "resize_mode", "\n", "if", "color_mode", "not", "in", "{", "'rgb'", ",", "'grayscale'", ",", "'flow'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid color mode:'", ",", "color_mode", ",", "\n", "'; expected \"rgb\" or \"grayscale\" or \"flow\".'", ")", "\n", "", "self", ".", "histogram_based_preprocessing", "=", "histogram_based_preprocessing", "\n", "self", ".", "clahe", "=", "clahe", "\n", "self", ".", "color_mode", "=", "color_mode", "\n", "self", ".", "data_format", "=", "data_format", "\n", "if", "self", ".", "color_mode", "==", "'rgb'", ":", "\n", "            ", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "                ", "self", ".", "image_shape", "=", "self", ".", "target_size", "+", "(", "3", ",", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "image_shape", "=", "(", "3", ",", ")", "+", "self", ".", "target_size", "\n", "", "", "elif", "self", ".", "color_mode", "==", "'grayscale'", ":", "\n", "            ", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "                ", "self", ".", "image_shape", "=", "self", ".", "target_size", "+", "(", "1", ",", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "image_shape", "=", "(", "1", ",", ")", "+", "self", ".", "target_size", "\n", "", "", "elif", "self", ".", "color_mode", "==", "'flow'", ":", "\n", "            ", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "                ", "self", ".", "image_shape", "=", "self", ".", "target_size", "+", "(", "2", ",", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "image_shape", "=", "(", "2", ",", ")", "+", "self", ".", "target_size", "\n", "", "", "self", ".", "class_list", "=", "class_list", "\n", "if", "class_mode", "not", "in", "{", "'categorical'", ",", "'binary'", ",", "'sparse'", ",", "\n", "'input'", ",", "None", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid class_mode:'", ",", "class_mode", ",", "\n", "'; expected one of \"categorical\", '", "\n", "'\"binary\", \"sparse\", \"input\"'", "\n", "' or None.'", ")", "\n", "", "self", ".", "class_mode", "=", "class_mode", "\n", "self", ".", "save_to_dir", "=", "save_to_dir", "\n", "self", ".", "save_prefix", "=", "save_prefix", "\n", "self", ".", "save_format", "=", "save_format", "\n", "self", ".", "save_period", "=", "save_period", "\n", "self", ".", "batch_count", "=", "0", "\n", "\n", "white_list_formats", "=", "{", "'png'", ",", "'jpg'", ",", "'jpeg'", ",", "'bmp'", "}", "\n", "\n", "# first, count the number of samples and classes", "\n", "self", ".", "samples", "=", "0", "\n", "\n", "if", "not", "class_list", ":", "\n", "            ", "class_list", "=", "[", "\"0\"", "]", "*", "len", "(", "path_list", ")", "\n", "", "self", ".", "num_class", "=", "len", "(", "set", "(", "class_list", ")", ")", "\n", "\n", "self", ".", "samples", "=", "len", "(", "path_list", ")", "\n", "\n", "print", "(", "'Found %d images belonging to %d classes.'", "%", "(", "self", ".", "samples", ",", "self", ".", "num_class", ")", ")", "\n", "\n", "# second, build an index of the images in the different class subfolders", "\n", "results", "=", "[", "]", "\n", "\n", "self", ".", "filenames", "=", "path_list", "\n", "self", ".", "classes", "=", "np", ".", "array", "(", "class_list", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "super", "(", "PathListIterator", ",", "self", ")", ".", "__init__", "(", "self", ".", "samples", ",", "batch_size", ",", "shuffle", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.PathListIterator.next": [[1320, 1412], ["numpy.zeros", "enumerate", "image2.PathListIterator.next"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "\"\"\"For python 2.x.\n        # Returns\n            The next batch.\n        \"\"\"", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "index_array", ",", "current_index", ",", "current_batch_size", "=", "next", "(", "self", ".", "index_generator", ")", "\n", "# The transformation of images is not under thread lock", "\n", "# so it can be done in parallel", "\n", "", "batch_x", "=", "np", ".", "zeros", "(", "(", "current_batch_size", ",", ")", "+", "self", ".", "image_shape", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "grayscale", "=", "self", ".", "color_mode", "==", "'grayscale'", "\n", "# build batch of image data", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "index_array", ")", ":", "\n", "            ", "fname", "=", "self", ".", "filenames", "[", "j", "]", "\n", "#print(fname)", "\n", "if", "fname", "[", "-", "4", ":", "]", "in", "[", "'.png'", ",", "'.jpg'", "]", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "                    ", "img", "=", "load_img2", "(", "fname", ",", "\n", "grayscale", "=", "grayscale", ",", "\n", "target_size", "=", "self", ".", "target_size", ",", "\n", "pad_to_square", "=", "self", ".", "pad_to_square", ",", "\n", "resize_mode", "=", "self", ".", "resize_mode", ",", "\n", "histogram_based_preprocessing", "=", "self", ".", "histogram_based_preprocessing", ",", "\n", "clahe", "=", "self", ".", "clahe", ")", "\n", "", "else", ":", "\n", "                    ", "img", "=", "pil_image", ".", "new", "(", "\"L\"", ",", "self", ".", "target_size", ")", "\n", "", "x", "=", "img_to_array", "(", "img", ",", "data_format", "=", "self", ".", "data_format", ")", "\n", "\n", "", "elif", "fname", "[", "-", "4", ":", "]", "in", "[", "'.npy'", "]", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "fname", ")", ":", "\n", "                    ", "x", "=", "np", ".", "load", "(", "fname", ")", "\n", "x", "=", "np", ".", "reshape", "(", "x", ",", "self", ".", "image_shape", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "np", ".", "zeros", "(", "self", ".", "image_shape", ")", "\n", "\n", "", "", "x", "=", "self", ".", "image_data_generator2", ".", "random_transform", "(", "x", ")", "\n", "x", "=", "self", ".", "image_data_generator2", ".", "standardize", "(", "x", ")", "\n", "batch_x", "[", "i", "]", "=", "x", "\n", "# optionally save augmented images to disk for debugging purposes", "\n", "", "if", "self", ".", "save_to_dir", "and", "(", "(", "self", ".", "batch_count", "%", "self", ".", "save_period", ")", "==", "0", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "current_batch_size", ")", ":", "\n", "                ", "img", "=", "array_to_img", "(", "batch_x", "[", "i", "]", ",", "self", ".", "data_format", ",", "scale", "=", "True", ")", "\n", "'''\n                fname = '{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,\n                                                                  index=current_index + i,\n                                                                  hash=np.random.randint(1e4),\n                                                                  format=self.save_format)\n                '''", "\n", "if", "isinstance", "(", "img", ",", "tuple", ")", "or", "isinstance", "(", "img", ",", "list", ")", ":", "\n", "                    ", "length", "=", "len", "(", "img", ")", "\n", "for", "l", "in", "range", "(", "length", ")", ":", "\n", "                        ", "fname", "=", "'{prefix}_{index}_{index2}.{format}'", ".", "format", "(", "prefix", "=", "self", ".", "save_prefix", ",", "\n", "index", "=", "i", ",", "\n", "index2", "=", "l", ",", "\n", "format", "=", "self", ".", "save_format", ")", "\n", "img", "[", "l", "]", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_to_dir", ",", "fname", ")", ")", "\n", "\n", "fname2", "=", "'{prefix}_{index}_{index2}.{format}'", ".", "format", "(", "prefix", "=", "self", ".", "save_prefix", ",", "\n", "index", "=", "i", ",", "\n", "index2", "=", "l", ",", "\n", "format", "=", "'txt'", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_to_dir", ",", "fname2", ")", ",", "batch_x", "[", "i", "]", "[", ":", ",", ":", ",", "l", "]", ",", "fmt", "=", "'%.6f'", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "fname", "=", "'{prefix}_{index}.{format}'", ".", "format", "(", "prefix", "=", "self", ".", "save_prefix", ",", "\n", "index", "=", "i", ",", "\n", "format", "=", "self", ".", "save_format", ")", "\n", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_to_dir", ",", "fname", ")", ")", "\n", "\n", "\n", "fname2", "=", "'{prefix}_{index}.{format}'", ".", "format", "(", "prefix", "=", "self", ".", "save_prefix", ",", "\n", "index", "=", "i", ",", "\n", "format", "=", "'txt'", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_to_dir", ",", "fname2", ")", ",", "batch_x", "[", "i", "]", ",", "fmt", "=", "'%.6f'", ")", "\n", "\n", "", "", "", "self", ".", "batch_count", "+=", "1", "\n", "\n", "# build batch of labels", "\n", "if", "self", ".", "class_mode", "==", "'input'", ":", "\n", "            ", "batch_y", "=", "batch_x", ".", "copy", "(", ")", "\n", "", "elif", "self", ".", "class_mode", "==", "'sparse'", ":", "\n", "            ", "batch_y", "=", "self", ".", "classes", "[", "index_array", "]", "\n", "", "elif", "self", ".", "class_mode", "==", "'binary'", ":", "\n", "            ", "batch_y", "=", "self", ".", "classes", "[", "index_array", "]", ".", "astype", "(", "K", ".", "floatx", "(", ")", ")", "\n", "", "elif", "self", ".", "class_mode", "==", "'categorical'", ":", "\n", "            ", "batch_y", "=", "np", ".", "zeros", "(", "(", "len", "(", "batch_x", ")", ",", "self", ".", "num_class", ")", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "classes", "[", "index_array", "]", ")", ":", "\n", "                ", "batch_y", "[", "i", ",", "label", "]", "=", "1.", "\n", "", "", "else", ":", "\n", "            ", "return", "batch_x", "\n", "\n", "", "return", "batch_x", ",", "batch_y", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.__init__": [[1418, 1434], ["len", "image2.Iterator.__init__"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "simple_list", ",", "\n", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ",", "\n", "save_to_dir", "=", "None", ",", "save_prefix", "=", "''", ",", "save_format", "=", "'png'", ",", "save_period", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "simple_list", "=", "simple_list", "\n", "self", ".", "samples", "=", "len", "(", "simple_list", ")", "\n", "\n", "self", ".", "save_to_dir", "=", "save_to_dir", "\n", "self", ".", "save_prefix", "=", "save_prefix", "\n", "self", ".", "save_format", "=", "save_format", "\n", "self", ".", "save_period", "=", "save_period", "\n", "\n", "self", ".", "batch_count", "=", "0", "\n", "\n", "\n", "super", "(", "SimpleListIterator", ",", "self", ")", ".", "__init__", "(", "self", ".", "samples", ",", "batch_size", ",", "shuffle", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next": [[1436, 1456], ["numpy.zeros", "enumerate", "image2.SimpleListIterator.next"], "methods", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next"], ["", "def", "next", "(", "self", ")", ":", "\n", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "index_array", ",", "current_index", ",", "current_batch_size", "=", "next", "(", "self", ".", "index_generator", ")", "\n", "\n", "", "batch_x", "=", "np", ".", "zeros", "(", "(", "current_batch_size", ",", "1", ")", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "# build batch of image data", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "index_array", ")", ":", "\n", "            ", "batch_x", "[", "i", "]", "=", "self", ".", "simple_list", "[", "j", "]", "\n", "# optionally save augmented images to disk for debugging purposes", "\n", "", "if", "self", ".", "save_to_dir", "and", "(", "(", "self", ".", "batch_count", "%", "self", ".", "save_period", ")", "==", "0", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "current_batch_size", ")", ":", "\n", "                ", "fname", "=", "'{prefix}_{index}.{format}'", ".", "format", "(", "prefix", "=", "self", ".", "save_prefix", ",", "\n", "index", "=", "i", ",", "\n", "format", "=", "self", ".", "save_format", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_to_dir", ",", "fname", ")", ",", "batch_x", "[", "i", "]", ",", "fmt", "=", "'%.6f'", ")", "\n", "\n", "", "", "self", ".", "batch_count", "+=", "1", "\n", "\n", "return", "batch_x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.random_rotation": [[28, 54], ["numpy.array", "image2.transform_matrix_offset_center", "image2.apply_transform", "numpy.random.uniform", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.transform_matrix_offset_center", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.apply_transform"], ["", "def", "random_rotation", "(", "x", ",", "rg", ",", "row_axis", "=", "1", ",", "col_axis", "=", "2", ",", "channel_axis", "=", "0", ",", "\n", "fill_mode", "=", "'nearest'", ",", "cval", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Performs a random rotation of a Numpy image tensor.\n    # Arguments\n        x: Input tensor. Must be 3D.\n        rg: Rotation range, in degrees.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n    # Returns\n        Rotated Numpy image tensor.\n    \"\"\"", "\n", "theta", "=", "np", ".", "pi", "/", "180", "*", "np", ".", "random", ".", "uniform", "(", "-", "rg", ",", "rg", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", "row_axis", "]", ",", "x", ".", "shape", "[", "col_axis", "]", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "rotation_matrix", ",", "h", ",", "w", ")", "\n", "x", "=", "apply_transform", "(", "x", ",", "transform_matrix", ",", "channel_axis", ",", "fill_mode", ",", "cval", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.random_shift": [[56, 84], ["numpy.array", "image2.apply_transform", "numpy.random.uniform", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.apply_transform"], ["", "def", "random_shift", "(", "x", ",", "wrg", ",", "hrg", ",", "row_axis", "=", "1", ",", "col_axis", "=", "2", ",", "channel_axis", "=", "0", ",", "\n", "fill_mode", "=", "'nearest'", ",", "cval", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Performs a random spatial shift of a Numpy image tensor.\n    # Arguments\n        x: Input tensor. Must be 3D.\n        wrg: Width shift range, as a float fraction of the width.\n        hrg: Height shift range, as a float fraction of the height.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n    # Returns\n        Shifted Numpy image tensor.\n    \"\"\"", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", "row_axis", "]", ",", "x", ".", "shape", "[", "col_axis", "]", "\n", "tx", "=", "np", ".", "random", ".", "uniform", "(", "-", "hrg", ",", "hrg", ")", "*", "h", "\n", "ty", "=", "np", ".", "random", ".", "uniform", "(", "-", "wrg", ",", "wrg", ")", "*", "w", "\n", "translation_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "transform_matrix", "=", "translation_matrix", "# no need to do offset", "\n", "x", "=", "apply_transform", "(", "x", ",", "transform_matrix", ",", "channel_axis", ",", "fill_mode", ",", "cval", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.random_shear": [[86, 112], ["numpy.random.uniform", "numpy.array", "image2.transform_matrix_offset_center", "image2.apply_transform", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.transform_matrix_offset_center", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.apply_transform"], ["", "def", "random_shear", "(", "x", ",", "intensity", ",", "row_axis", "=", "1", ",", "col_axis", "=", "2", ",", "channel_axis", "=", "0", ",", "\n", "fill_mode", "=", "'nearest'", ",", "cval", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Performs a random spatial shear of a Numpy image tensor.\n    # Arguments\n        x: Input tensor. Must be 3D.\n        intensity: Transformation intensity.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n    # Returns\n        Sheared Numpy image tensor.\n    \"\"\"", "\n", "shear", "=", "np", ".", "random", ".", "uniform", "(", "-", "intensity", ",", "intensity", ")", "\n", "shear_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "np", ".", "sin", "(", "shear", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "shear", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", "row_axis", "]", ",", "x", ".", "shape", "[", "col_axis", "]", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "shear_matrix", ",", "h", ",", "w", ")", "\n", "x", "=", "apply_transform", "(", "x", ",", "transform_matrix", ",", "channel_axis", ",", "fill_mode", ",", "cval", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.random_zoom": [[114, 149], ["numpy.array", "image2.transform_matrix_offset_center", "image2.apply_transform", "len", "ValueError", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.transform_matrix_offset_center", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.apply_transform"], ["", "def", "random_zoom", "(", "x", ",", "zoom_range", ",", "row_axis", "=", "1", ",", "col_axis", "=", "2", ",", "channel_axis", "=", "0", ",", "\n", "fill_mode", "=", "'nearest'", ",", "cval", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Performs a random spatial zoom of a Numpy image tensor.\n    # Arguments\n        x: Input tensor. Must be 3D.\n        zoom_range: Tuple of floats; zoom range for width and height.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n    # Returns\n        Zoomed Numpy image tensor.\n    # Raises\n        ValueError: if `zoom_range` isn't a tuple.\n    \"\"\"", "\n", "if", "len", "(", "zoom_range", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'`zoom_range` should be a tuple or list of two floats. '", "\n", "'Received arg: '", ",", "zoom_range", ")", "\n", "\n", "", "if", "zoom_range", "[", "0", "]", "==", "1", "and", "zoom_range", "[", "1", "]", "==", "1", ":", "\n", "        ", "zx", ",", "zy", "=", "1", ",", "1", "\n", "", "else", ":", "\n", "        ", "zx", ",", "zy", "=", "np", ".", "random", ".", "uniform", "(", "zoom_range", "[", "0", "]", ",", "zoom_range", "[", "1", "]", ",", "2", ")", "\n", "", "zoom_matrix", "=", "np", ".", "array", "(", "[", "[", "zx", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "zy", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", "row_axis", "]", ",", "x", ".", "shape", "[", "col_axis", "]", "\n", "transform_matrix", "=", "transform_matrix_offset_center", "(", "zoom_matrix", ",", "h", ",", "w", ")", "\n", "x", "=", "apply_transform", "(", "x", ",", "transform_matrix", ",", "channel_axis", ",", "fill_mode", ",", "cval", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.random_channel_shift": [[151, 159], ["numpy.rollaxis", "numpy.stack", "numpy.rollaxis", "numpy.min", "numpy.max", "numpy.clip", "numpy.random.uniform"], "function", ["None"], ["", "def", "random_channel_shift", "(", "x", ",", "intensity", ",", "channel_axis", "=", "0", ")", ":", "\n", "    ", "x", "=", "np", ".", "rollaxis", "(", "x", ",", "channel_axis", ",", "0", ")", "\n", "min_x", ",", "max_x", "=", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", "\n", "channel_images", "=", "[", "np", ".", "clip", "(", "x_channel", "+", "np", ".", "random", ".", "uniform", "(", "-", "intensity", ",", "intensity", ")", ",", "min_x", ",", "max_x", ")", "\n", "for", "x_channel", "in", "x", "]", "\n", "x", "=", "np", ".", "stack", "(", "channel_images", ",", "axis", "=", "0", ")", "\n", "x", "=", "np", ".", "rollaxis", "(", "x", ",", "0", ",", "channel_axis", "+", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.transform_matrix_offset_center": [[161, 168], ["numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "float", "float"], "function", ["None"], ["", "def", "transform_matrix_offset_center", "(", "matrix", ",", "x", ",", "y", ")", ":", "\n", "    ", "o_x", "=", "float", "(", "x", ")", "/", "2", "+", "0.5", "\n", "o_y", "=", "float", "(", "y", ")", "/", "2", "+", "0.5", "\n", "offset_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "o_x", "]", ",", "[", "0", ",", "1", ",", "o_y", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "reset_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "-", "o_x", "]", ",", "[", "0", ",", "1", ",", "-", "o_y", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "offset_matrix", ",", "matrix", ")", ",", "reset_matrix", ")", "\n", "return", "transform_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.apply_transform": [[170, 201], ["numpy.rollaxis", "numpy.stack", "numpy.rollaxis", "scipy.interpolation.affine_transform"], "function", ["None"], ["", "def", "apply_transform", "(", "x", ",", "\n", "transform_matrix", ",", "\n", "channel_axis", "=", "0", ",", "\n", "fill_mode", "=", "'nearest'", ",", "\n", "cval", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Apply the image transformation specified by a matrix.\n    # Arguments\n        x: 2D numpy array, single image.\n        transform_matrix: Numpy array specifying the geometric transformation.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n    # Returns\n        The transformed version of the input.\n    \"\"\"", "\n", "x", "=", "np", ".", "rollaxis", "(", "x", ",", "channel_axis", ",", "0", ")", "\n", "final_affine_matrix", "=", "transform_matrix", "[", ":", "2", ",", ":", "2", "]", "\n", "final_offset", "=", "transform_matrix", "[", ":", "2", ",", "2", "]", "\n", "channel_images", "=", "[", "ndi", ".", "interpolation", ".", "affine_transform", "(", "\n", "x_channel", ",", "\n", "final_affine_matrix", ",", "\n", "final_offset", ",", "\n", "order", "=", "0", ",", "\n", "mode", "=", "fill_mode", ",", "\n", "cval", "=", "cval", ")", "for", "x_channel", "in", "x", "]", "\n", "x", "=", "np", ".", "stack", "(", "channel_images", ",", "axis", "=", "0", ")", "\n", "x", "=", "np", ".", "rollaxis", "(", "x", ",", "0", ",", "channel_axis", "+", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.flip_axis": [[203, 208], ["numpy.asarray().swapaxes", "x.swapaxes.swapaxes", "numpy.asarray"], "function", ["None"], ["", "def", "flip_axis", "(", "x", ",", "axis", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", ".", "swapaxes", "(", "axis", ",", "0", ")", "\n", "x", "=", "x", "[", ":", ":", "-", "1", ",", "...", "]", "\n", "x", "=", "x", ".", "swapaxes", "(", "0", ",", "axis", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.array_to_img": [[210, 258], ["numpy.asarray", "ImportError", "ValueError", "keras.backend.image_data_format", "ValueError", "x.transpose.transpose", "numpy.max", "pil_image.fromarray", "keras.backend.floatx", "max", "x.transpose.astype", "pil_image.fromarray", "x[].astype", "ValueError", "numpy.min", "pil_image.fromarray", "pil_image.fromarray", "x[].astype", "x[].astype"], "function", ["None"], ["", "def", "array_to_img", "(", "x", ",", "data_format", "=", "None", ",", "scale", "=", "True", ")", ":", "\n", "    ", "\"\"\"Converts a 3D Numpy array to a PIL Image instance.\n    # Arguments\n        x: Input Numpy array.\n        data_format: Image data format.\n        scale: Whether to rescale image values\n            to be within [0, 255].\n    # Returns\n        A PIL Image instance.\n    # Raises\n        ImportError: if PIL is not available.\n        ValueError: if invalid `x` or `data_format` is passed.\n    \"\"\"", "\n", "if", "pil_image", "is", "None", ":", "\n", "        ", "raise", "ImportError", "(", "'Could not import PIL.Image. '", "\n", "'The use of `array_to_img` requires PIL.'", ")", "\n", "", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "if", "x", ".", "ndim", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'Expected image array to have rank 3 (single image). '", "\n", "'Got array with shape:'", ",", "x", ".", "shape", ")", "\n", "\n", "", "if", "data_format", "is", "None", ":", "\n", "        ", "data_format", "=", "K", ".", "image_data_format", "(", ")", "\n", "", "if", "data_format", "not", "in", "{", "'channels_first'", ",", "'channels_last'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid data_format:'", ",", "data_format", ")", "\n", "\n", "# Original Numpy array x has format (height, width, channel)", "\n", "# or (channel, height, width)", "\n", "# but target PIL image has format (width, height, channel)", "\n", "", "if", "data_format", "==", "'channels_first'", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "", "if", "scale", ":", "\n", "        ", "x", "=", "x", "+", "max", "(", "-", "np", ".", "min", "(", "x", ")", ",", "0", ")", "\n", "x_max", "=", "np", ".", "max", "(", "x", ")", "\n", "if", "x_max", "!=", "0", ":", "\n", "            ", "x", "/=", "x_max", "\n", "", "x", "*=", "255", "\n", "", "if", "x", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "# RGB", "\n", "        ", "return", "pil_image", ".", "fromarray", "(", "x", ".", "astype", "(", "'uint8'", ")", ",", "'RGB'", ")", "\n", "", "elif", "x", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "# grayscale", "\n", "        ", "return", "pil_image", ".", "fromarray", "(", "x", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "'uint8'", ")", ",", "'L'", ")", "\n", "", "elif", "x", ".", "shape", "[", "2", "]", "==", "2", ":", "\n", "# flow", "\n", "        ", "return", "(", "pil_image", ".", "fromarray", "(", "x", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "'uint8'", ")", ",", "'L'", ")", ",", "pil_image", ".", "fromarray", "(", "x", "[", ":", ",", ":", ",", "1", "]", ".", "astype", "(", "'uint8'", ")", ",", "'L'", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported channel number: '", ",", "x", ".", "shape", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.img_to_array": [[260, 290], ["numpy.asarray", "keras.backend.image_data_format", "ValueError", "len", "keras.backend.floatx", "x.reshape.transpose", "len", "ValueError", "x.reshape.reshape", "x.reshape.reshape"], "function", ["None"], ["", "", "def", "img_to_array", "(", "img", ",", "data_format", "=", "None", ")", ":", "\n", "    ", "\"\"\"Converts a PIL Image instance to a Numpy array.\n    # Arguments\n        img: PIL Image instance.\n        data_format: Image data format.\n    # Returns\n        A 3D Numpy array.\n    # Raises\n        ValueError: if invalid `img` or `data_format` is passed.\n    \"\"\"", "\n", "if", "data_format", "is", "None", ":", "\n", "        ", "data_format", "=", "K", ".", "image_data_format", "(", ")", "\n", "", "if", "data_format", "not", "in", "{", "'channels_first'", ",", "'channels_last'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown data_format: '", ",", "data_format", ")", "\n", "# Numpy array x has format (height, width, channel)", "\n", "# or (channel, height, width)", "\n", "# but original PIL image has format (width, height, channel)", "\n", "", "x", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "        ", "if", "data_format", "==", "'channels_first'", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "", "", "elif", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "        ", "if", "data_format", "==", "'channels_first'", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported image shape: '", ",", "x", ".", "shape", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img": [[292, 319], ["pil_image.open", "ImportError", "img.resize.convert", "img.resize.convert", "img.resize.resize"], "function", ["None"], ["", "def", "load_img", "(", "path", ",", "grayscale", "=", "False", ",", "target_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Loads an image into PIL format.\n    # Arguments\n        path: Path to image file\n        grayscale: Boolean, whether to load the image as grayscale.\n        target_size: Either `None` (default to original size)\n            or tuple of ints `(img_height, img_width)`.\n    # Returns\n        A PIL Image instance.\n    # Raises\n        ImportError: if PIL is not available.\n    \"\"\"", "\n", "if", "pil_image", "is", "None", ":", "\n", "        ", "raise", "ImportError", "(", "'Could not import PIL.Image. '", "\n", "'The use of `load_img` requires PIL.'", ")", "\n", "", "img", "=", "pil_image", ".", "open", "(", "path", ")", "\n", "if", "grayscale", ":", "\n", "        ", "if", "img", ".", "mode", "!=", "'L'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "img", ".", "mode", "!=", "'RGB'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "", "if", "target_size", ":", "\n", "        ", "hw_tuple", "=", "(", "target_size", "[", "1", "]", ",", "target_size", "[", "0", "]", ")", "\n", "if", "img", ".", "size", "!=", "hw_tuple", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "hw_tuple", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2": [[321, 392], ["pil_image.open", "ImportError", "numpy.array", "numpy.percentile", "numpy.percentile", "pil_image.fromarray", "numpy.array", "pil_image.fromarray", "max", "pil_image.new.paste", "numpy.array", "cv2.createCLAHE", "cv2.createCLAHE.apply", "pil_image.fromarray", "img.resize.convert", "img.resize.convert", "clahe.apply.min", "pil_image.new", "pil_image.new", "clahe.apply.min", "img.resize.resize", "img.resize.resize"], "function", ["None"], ["", "def", "load_img2", "(", "path", ",", "grayscale", "=", "False", ",", "target_size", "=", "None", ",", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "histogram_based_preprocessing", "=", "False", ",", "clahe", "=", "False", ")", ":", "\n", "    ", "\"\"\"Loads an image into PIL format.\n    # Arguments\n        path: Path to image file\n        grayscale: Boolean, whether to load the image as grayscale.\n        target_size: Either `None` (default to original size)\n            or tuple of ints `(img_height, img_width)`.\n        pad_to_square: Boolean, whether to pad the image to square with zeros.\n        resize_mode: 'nearest' or 'bilinear', resize mode used to resize PIL image.\n    # Returns\n        A PIL Image instance.\n    # Raises\n        ImportError: if PIL is not available.\n    \"\"\"", "\n", "if", "pil_image", "is", "None", ":", "\n", "        ", "raise", "ImportError", "(", "'Could not import PIL.Image. '", "\n", "'The use of `load_img2` requires PIL.'", ")", "\n", "", "img", "=", "pil_image", ".", "open", "(", "path", ")", "\n", "\n", "if", "grayscale", ":", "\n", "        ", "if", "img", ".", "mode", "!=", "'L'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "if", "img", ".", "mode", "!=", "'RGB'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "", "if", "histogram_based_preprocessing", ":", "\n", "        ", "array", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "percentile1", "=", "np", ".", "percentile", "(", "array", ",", "5", ")", "\n", "percentile2", "=", "np", ".", "percentile", "(", "array", ",", "95", ")", "\n", "array", "[", "array", "<=", "percentile1", "]", "=", "percentile1", "\n", "array", "[", "array", ">=", "percentile2", "]", "=", "percentile2", "\n", "\n", "img", "=", "pil_image", ".", "fromarray", "(", "array", ")", "\n", "\n", "", "if", "pad_to_square", ":", "\n", "        ", "array", "=", "np", ".", "array", "(", "img", ")", "\n", "array", "=", "array", "-", "array", ".", "min", "(", ")", "\n", "img", "=", "pil_image", ".", "fromarray", "(", "array", ")", "\n", "\n", "old_size", "=", "img", ".", "size", "\n", "square_size", "=", "max", "(", "old_size", "[", "0", "]", ",", "old_size", "[", "1", "]", ")", "\n", "new_size", "=", "(", "square_size", ",", "square_size", ")", "\n", "if", "grayscale", ":", "\n", "            ", "new_img", "=", "pil_image", ".", "new", "(", "'L'", ",", "new_size", ")", "\n", "", "else", ":", "\n", "            ", "new_img", "=", "pil_image", ".", "new", "(", "'RGB'", ",", "new_size", ")", "\n", "", "new_img", ".", "paste", "(", "img", ",", "(", "(", "new_size", "[", "0", "]", "-", "old_size", "[", "0", "]", ")", "//", "2", ",", "\n", "(", "new_size", "[", "1", "]", "-", "old_size", "[", "1", "]", ")", "//", "2", ")", ")", "\n", "img", "=", "new_img", "\n", "\n", "", "if", "target_size", ":", "\n", "        ", "hw_tuple", "=", "(", "target_size", "[", "1", "]", ",", "target_size", "[", "0", "]", ")", "\n", "if", "img", ".", "size", "!=", "hw_tuple", ":", "\n", "            ", "if", "resize_mode", "==", "'nearest'", ":", "\n", "                ", "img", "=", "img", ".", "resize", "(", "hw_tuple", ",", "resample", "=", "pil_image", ".", "NEAREST", ")", "\n", "", "elif", "resize_mode", "==", "'bilinear'", ":", "\n", "                ", "img", "=", "img", ".", "resize", "(", "hw_tuple", ",", "resample", "=", "pil_image", ".", "BILINEAR", ")", "\n", "\n", "", "", "", "if", "clahe", ":", "\n", "        ", "array", "=", "np", ".", "array", "(", "img", ")", "\n", "clahe", "=", "cv2", ".", "createCLAHE", "(", "clipLimit", "=", "3.0", ",", "tileGridSize", "=", "(", "8", ",", "8", ")", ")", "\n", "array", "=", "clahe", ".", "apply", "(", "array", ")", "\n", "\n", "array", "=", "array", "-", "array", ".", "min", "(", ")", "\n", "img", "=", "pil_image", ".", "fromarray", "(", "array", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img3": [[394, 448], ["int", "int", "nifti_img_data.max", "numpy.rot90().astype", "pil_image.fromarray", "ImportError", "path.split", "nibabel.load().get_data", "max", "pil_image.new.paste", "path.split", "path.split", "numpy.rot90", "img.resize.convert", "img.resize.convert", "pil_image.new", "pil_image.new", "img.resize.resize", "nibabel.load"], "function", ["None"], ["", "def", "load_img3", "(", "path", ",", "grayscale", "=", "False", ",", "target_size", "=", "None", ",", "pad_to_square", "=", "True", ")", ":", "\n", "    ", "\"\"\"Loads an image into PIL format.\n    # Arguments\n        path: Path_to_nifti_file, slice_index and time_index (e.g. \"my_image.nii 2 3\")\n        grayscale: Boolean, whether to load the image as grayscale.\n        target_size: Either `None` (default to original size)\n            or tuple of ints `(img_height, img_width)`.\n        pad_to_square: Boolean, whether to pad the image to square with zeros.\n    # Returns\n        A PIL Image instance.\n    # Raises\n        ImportError: if PIL is not available.\n    \"\"\"", "\n", "if", "pil_image", "is", "None", ":", "\n", "        ", "raise", "ImportError", "(", "'Could not import PIL.Image. '", "\n", "'The use of `load_img3` requires PIL.'", ")", "\n", "", "nifti_path", "=", "path", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "slice_idx", "=", "int", "(", "path", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "\n", "time_idx", "=", "int", "(", "path", ".", "split", "(", "' '", ")", "[", "2", "]", ")", "\n", "nifti_img_data", "=", "nib", ".", "load", "(", "nifti_path", ")", ".", "get_data", "(", ")", "[", ":", ",", ":", ",", "slice_idx", ",", "time_idx", "]", "\n", "max_pixel_value", "=", "nifti_img_data", ".", "max", "(", ")", "\n", "multiplier", "=", "1.0", "\n", "if", "max_pixel_value", ">", "0", ":", "\n", "        ", "multiplier", "=", "255.0", "/", "max_pixel_value", "\n", "", "nifti_img_data", "=", "nifti_img_data", "*", "multiplier", "\n", "transformed_data", "=", "np", ".", "rot90", "(", "nifti_img_data", "[", ":", ",", ":", ":", "-", "1", "]", ",", "1", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "img", "=", "pil_image", ".", "fromarray", "(", "transformed_data", ",", "'L'", ")", "\n", "\n", "if", "grayscale", ":", "\n", "        ", "if", "img", ".", "mode", "!=", "'L'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "img", ".", "mode", "!=", "'RGB'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "", "if", "pad_to_square", ":", "\n", "        ", "old_size", "=", "img", ".", "size", "\n", "square_size", "=", "max", "(", "old_size", "[", "0", "]", ",", "old_size", "[", "1", "]", ")", "\n", "new_size", "=", "(", "square_size", ",", "square_size", ")", "\n", "if", "grayscale", ":", "\n", "            ", "new_img", "=", "pil_image", ".", "new", "(", "'L'", ",", "new_size", ")", "\n", "", "else", ":", "\n", "            ", "new_img", "=", "pil_image", ".", "new", "(", "'RGB'", ",", "new_size", ")", "\n", "", "new_img", ".", "paste", "(", "img", ",", "(", "(", "new_size", "[", "0", "]", "-", "old_size", "[", "0", "]", ")", "//", "2", ",", "\n", "(", "new_size", "[", "1", "]", "-", "old_size", "[", "1", "]", ")", "//", "2", ")", ")", "\n", "img", "=", "new_img", "\n", "\n", "", "if", "target_size", ":", "\n", "        ", "hw_tuple", "=", "(", "target_size", "[", "1", "]", ",", "target_size", "[", "0", "]", ")", "\n", "if", "img", ".", "size", "!=", "hw_tuple", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "hw_tuple", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2._count_valid_files_in_directory": [[966, 990], ["image2._count_valid_files_in_directory._recursive_list"], "function", ["None"], ["", "", "def", "_count_valid_files_in_directory", "(", "directory", ",", "white_list_formats", ",", "follow_links", ")", ":", "\n", "    ", "\"\"\"Count files with extension in `white_list_formats` contained in a directory.\n    # Arguments\n        directory: absolute path to the directory containing files to be counted\n        white_list_formats: set of strings containing allowed extensions for\n            the files to be counted.\n    # Returns\n        the count of files with extension in `white_list_formats` contained in\n        the directory.\n    \"\"\"", "\n", "def", "_recursive_list", "(", "subpath", ")", ":", "\n", "        ", "return", "sorted", "(", "os", ".", "walk", "(", "subpath", ",", "followlinks", "=", "follow_links", ")", ",", "key", "=", "lambda", "tpl", ":", "tpl", "[", "0", "]", ")", "\n", "\n", "", "samples", "=", "0", "\n", "for", "root", ",", "_", ",", "files", "in", "_recursive_list", "(", "directory", ")", ":", "\n", "        ", "for", "fname", "in", "files", ":", "\n", "            ", "is_valid", "=", "False", "\n", "for", "extension", "in", "white_list_formats", ":", "\n", "                ", "if", "fname", ".", "lower", "(", ")", ".", "endswith", "(", "'.'", "+", "extension", ")", ":", "\n", "                    ", "is_valid", "=", "True", "\n", "break", "\n", "", "", "if", "is_valid", ":", "\n", "                ", "samples", "+=", "1", "\n", "", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2._list_valid_filenames_in_directory": [[992, 1027], ["os.path.basename", "os.path.dirname", "image2._count_valid_files_in_directory._recursive_list"], "function", ["None"], ["", "def", "_list_valid_filenames_in_directory", "(", "directory", ",", "white_list_formats", ",", "\n", "class_indices", ",", "follow_links", ")", ":", "\n", "    ", "\"\"\"List paths of files in `subdir` relative from `directory` whose extensions are in `white_list_formats`.\n    # Arguments\n        directory: absolute path to a directory containing the files to list.\n            The directory name is used as class label and must be a key of `class_indices`.\n        white_list_formats: set of strings containing allowed extensions for\n            the files to be counted.\n        class_indices: dictionary mapping a class name to its index.\n    # Returns\n        classes: a list of class indices\n        filenames: the path of valid files in `directory`, relative from\n            `directory`'s parent (e.g., if `directory` is \"dataset/class1\",\n            the filenames will be [\"class1/file1.jpg\", \"class1/file2.jpg\", ...]).\n    \"\"\"", "\n", "def", "_recursive_list", "(", "subpath", ")", ":", "\n", "        ", "return", "sorted", "(", "os", ".", "walk", "(", "subpath", ",", "followlinks", "=", "follow_links", ")", ",", "key", "=", "lambda", "tpl", ":", "tpl", "[", "0", "]", ")", "\n", "\n", "", "classes", "=", "[", "]", "\n", "filenames", "=", "[", "]", "\n", "subdir", "=", "os", ".", "path", ".", "basename", "(", "directory", ")", "\n", "basedir", "=", "os", ".", "path", ".", "dirname", "(", "directory", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "_recursive_list", "(", "directory", ")", ":", "\n", "        ", "for", "fname", "in", "files", ":", "\n", "            ", "is_valid", "=", "False", "\n", "for", "extension", "in", "white_list_formats", ":", "\n", "                ", "if", "fname", ".", "lower", "(", ")", ".", "endswith", "(", "'.'", "+", "extension", ")", ":", "\n", "                    ", "is_valid", "=", "True", "\n", "break", "\n", "", "", "if", "is_valid", ":", "\n", "                ", "classes", ".", "append", "(", "class_indices", "[", "subdir", "]", ")", "\n", "# add filename relative to directory", "\n", "absolute_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "filenames", ".", "append", "(", "os", ".", "path", ".", "relpath", "(", "absolute_path", ",", "basedir", ")", ")", "\n", "", "", "", "return", "classes", ",", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.scalar_multiplication": [[72, 80], ["params.setdefault", "params.setdefault", "keras.layers.core.Lambda", "tensorflow.scalar_mul"], "function", ["None"], ["def", "scalar_multiplication", "(", "**", "params", ")", ":", "\n", "    ", "\"\"\"A layer to multiply a tensor by a scalar\n    \"\"\"", "\n", "name", "=", "params", ".", "setdefault", "(", "\"name\"", ",", "\"\"", ")", "\n", "scalar", "=", "params", ".", "setdefault", "(", "\"scalar\"", ",", "1.0", ")", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "return", "Lambda", "(", "lambda", "x", ":", "tf", ".", "scalar_mul", "(", "scalar", ",", "x", ")", ")", "(", "input", ")", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.tensor_slice": [[81, 92], ["keras.layers.core.Lambda"], "function", ["None"], ["", "def", "tensor_slice", "(", "dimension", ",", "start", ",", "end", ")", ":", "\n", "    ", "def", "f", "(", "input", ")", ":", "\n", "        ", "if", "dimension", "==", "0", ":", "\n", "            ", "return", "input", "[", "start", ":", "end", "]", "\n", "", "if", "dimension", "==", "1", ":", "\n", "            ", "return", "input", "[", ":", ",", "start", ":", "end", "]", "\n", "", "if", "dimension", "==", "2", ":", "\n", "            ", "return", "input", "[", ":", ",", ":", ",", "start", ":", "end", "]", "\n", "", "if", "dimension", "==", "3", ":", "\n", "            ", "return", "input", "[", ":", ",", ":", ",", ":", ",", "start", ":", "end", "]", "\n", "", "", "return", "Lambda", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu": [[94, 118], ["params.setdefault", "keras.layers.normalization.BatchNormalization", "keras.layers.Activation"], "function", ["None"], ["", "def", "bn_relu", "(", "**", "params", ")", ":", "\n", "    ", "\"\"\"Helper to build a BN -> relu block\n    \"\"\"", "\n", "name", "=", "params", ".", "setdefault", "(", "\"name\"", ",", "\"\"", ")", "\n", "name_bn", "=", "name", "+", "\"_bn\"", "\n", "name_relu", "=", "name", "+", "\"_relu\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "norm", "=", "BatchNormalization", "(", "axis", "=", "CHANNEL_AXIS", ",", "\n", "momentum", "=", "0.99", ",", "\n", "epsilon", "=", "1e-3", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "beta_initializer", "=", "'zeros'", ",", "\n", "gamma_initializer", "=", "'ones'", ",", "\n", "moving_mean_initializer", "=", "'zeros'", ",", "\n", "moving_variance_initializer", "=", "'ones'", ",", "\n", "beta_regularizer", "=", "None", ",", "\n", "gamma_regularizer", "=", "None", ",", "\n", "beta_constraint", "=", "None", ",", "\n", "gamma_constraint", "=", "None", ",", "\n", "name", "=", "name_bn", ")", "(", "input", ")", "\n", "return", "Activation", "(", "\"relu\"", ",", "name", "=", "name_relu", ")", "(", "norm", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_leakyrelu": [[120, 145], ["params.setdefault", "params.setdefault", "keras.layers.normalization.BatchNormalization", "keras.layers.advanced_activations.LeakyReLU"], "function", ["None"], ["", "def", "bn_leakyrelu", "(", "**", "params", ")", ":", "\n", "    ", "\"\"\"Helper to build a BN -> leaky relu block\n    \"\"\"", "\n", "name", "=", "params", ".", "setdefault", "(", "\"name\"", ",", "\"\"", ")", "\n", "alpha", "=", "params", ".", "setdefault", "(", "\"alpha\"", ",", "0.1", ")", "\n", "name_bn", "=", "name", "+", "\"_bn\"", "\n", "name_relu", "=", "name", "+", "\"_relu\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "norm", "=", "BatchNormalization", "(", "axis", "=", "CHANNEL_AXIS", ",", "\n", "momentum", "=", "0.99", ",", "\n", "epsilon", "=", "1e-3", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "beta_initializer", "=", "'zeros'", ",", "\n", "gamma_initializer", "=", "'ones'", ",", "\n", "moving_mean_initializer", "=", "'zeros'", ",", "\n", "moving_variance_initializer", "=", "'ones'", ",", "\n", "beta_regularizer", "=", "None", ",", "\n", "gamma_regularizer", "=", "None", ",", "\n", "beta_constraint", "=", "None", ",", "\n", "gamma_constraint", "=", "None", ",", "\n", "name", "=", "name_bn", ")", "(", "input", ")", "\n", "return", "LeakyReLU", "(", "alpha", "=", "alpha", ",", "name", "=", "name_relu", ")", "(", "norm", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv1D_relu": [[147, 179], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.convolutional.Conv1D", "keras.layers.Activation"], "function", ["None"], ["", "def", "conv1D_relu", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a conv1D -> relu block\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "conv_params", "[", "\"kernel_size\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "1", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"glorot_uniform\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"valid\"", ")", "\n", "#kernel_regularizer = conv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"conv\"", ")", "\n", "name_relu", "=", "name", "+", "\"_relu\"", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv", "=", "Conv1D", "(", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation_rate", "=", "1", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "Activation", "(", "\"relu\"", ",", "name", "=", "name_relu", ")", "(", "conv", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv1D_bn_relu": [[182, 214], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.convolutional.Conv1D", "helpers.bn_relu"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu"], ["", "def", "conv1D_bn_relu", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a conv1D -> BN -> relu block\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "conv_params", "[", "\"kernel_size\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "1", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"glorot_uniform\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"valid\"", ")", "\n", "#kernel_regularizer = conv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"conv\"", ")", "\n", "name_relu", "=", "name", "+", "\"_relu\"", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv", "=", "Conv1D", "(", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation_rate", "=", "1", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "bn_relu", "(", "name", "=", "name", ")", "(", "conv", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu": [[219, 252], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.convolutional.Conv2D", "keras.layers.Activation"], "function", ["None"], ["", "def", "conv_relu", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a conv -> relu block\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "conv_params", "[", "\"kernel_size\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "#kernel_regularizer = conv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"conv\"", ")", "\n", "name_relu", "=", "name", "+", "\"_relu\"", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv", "=", "Conv2D", "(", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "None", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "Activation", "(", "\"relu\"", ",", "name", "=", "name_relu", ")", "(", "conv", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_leakyrelu": [[255, 289], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.convolutional.Conv2D", "keras.layers.advanced_activations.LeakyReLU"], "function", ["None"], ["", "def", "conv_leakyrelu", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a conv -> relu block\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "conv_params", "[", "\"kernel_size\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "#kernel_regularizer = conv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "alpha", "=", "conv_params", ".", "setdefault", "(", "\"alpha\"", ",", "0.1", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"conv\"", ")", "\n", "name_relu", "=", "name", "+", "\"_relu\"", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv", "=", "Conv2D", "(", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "None", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "LeakyReLU", "(", "alpha", "=", "alpha", ",", "name", "=", "name_relu", ")", "(", "conv", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu": [[292, 324], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.convolutional.Conv2D", "helpers.bn_relu"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu"], ["", "def", "conv_bn_relu", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a conv -> BN -> relu block\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "conv_params", "[", "\"kernel_size\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "#kernel_regularizer = conv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"conv\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv", "=", "Conv2D", "(", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "None", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "bn_relu", "(", "name", "=", "name", ")", "(", "conv", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu": [[326, 359], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.convolutional.Conv2D", "helpers.bn_relu"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu"], ["", "def", "conv_bn_leakyrelu", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a conv -> BN -> leaky relu block\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "conv_params", "[", "\"kernel_size\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "#kernel_regularizer = conv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "alpha", "=", "conv_params", ".", "setdefault", "(", "\"alpha\"", ",", "0.1", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"conv\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv", "=", "Conv2D", "(", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "None", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "bn_relu", "(", "alpha", "=", "alpha", ",", "name", "=", "name", ")", "(", "conv", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.deconv_relu": [[361, 383], ["deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "keras.layers.convolutional.Conv2DTranspose", "keras.layers.Activation"], "function", ["None"], ["", "def", "deconv_relu", "(", "**", "deconv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a deconv -> relu block\n    \"\"\"", "\n", "filters", "=", "deconv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_size\"", ",", "(", "2", ",", "2", ")", ")", "\n", "strides", "=", "deconv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "2", ",", "2", ")", ")", "\n", "kernel_initializer", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "deconv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"valid\"", ")", "\n", "#kernel_regularizer = deconv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "deconv_params", ".", "setdefault", "(", "\"name\"", ",", "\"deconv\"", ")", "\n", "name_relu", "=", "name", "+", "\"_relu\"", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "deconv", "=", "Conv2DTranspose", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "Activation", "(", "\"relu\"", ",", "name", "=", "name_relu", ")", "(", "deconv", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.deconv_bn_relu": [[386, 407], ["deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "keras.layers.convolutional.Conv2DTranspose", "helpers.bn_relu"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu"], ["", "def", "deconv_bn_relu", "(", "**", "deconv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a deconv -> BN -> relu block\n    \"\"\"", "\n", "filters", "=", "deconv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_size\"", ",", "(", "2", ",", "2", ")", ")", "\n", "strides", "=", "deconv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "2", ",", "2", ")", ")", "\n", "kernel_initializer", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "deconv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"valid\"", ")", "\n", "#kernel_regularizer = deconv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "deconv_params", ".", "setdefault", "(", "\"name\"", ",", "\"deconv\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "deconv", "=", "Conv2DTranspose", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "bn_relu", "(", "name", "=", "name", ")", "(", "deconv", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu_conv": [[409, 429], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "helpers.bn_relu", "keras.layers.convolutional.Conv2D"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu"], ["", "def", "bn_relu_conv", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a BN -> relu -> conv block.\n    This is an improved scheme proposed in \"Identity Mappings in Deep Residual         \n    Networks\" (http://arxiv.org/pdf/1603.05027v2.pdf)\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "conv_params", "[", "\"kernel_size\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "activation", "=", "bn_relu", "(", ")", "(", "input", ")", "\n", "return", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ")", "(", "activation", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dense_leakyrelu": [[431, 456], ["params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "keras.layers.Dense", "keras.layers.advanced_activations.LeakyReLU"], "function", ["None"], ["", "def", "dense_leakyrelu", "(", "**", "params", ")", ":", "\n", "    ", "\"\"\"Helper to build a dense (fully connected) -> BN -> leaky relu block\n    \"\"\"", "\n", "units", "=", "params", "[", "\"units\"", "]", "\n", "alpha", "=", "params", ".", "setdefault", "(", "\"alpha\"", ",", "0.1", ")", "\n", "kernel_initializer", "=", "params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"glorot_uniform\"", ")", "\n", "kernel_regularizer", "=", "params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "params", ".", "setdefault", "(", "\"name\"", ",", "\"dense\"", ")", "\n", "name_leakyrelu", "=", "name", "+", "\"_leakyrelu\"", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "den", "=", "Dense", "(", "units", "=", "units", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "name", "=", "name", ")", "(", "input", ")", "\n", "return", "LeakyReLU", "(", "alpha", "=", "alpha", ",", "name", "=", "name_leakyrelu", ")", "(", "den", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.shortcut": [[460, 483], ["keras.backend.int_shape", "keras.backend.int_shape", "int", "int", "keras.layers.merge.add", "round", "round", "keras.layers.convolutional.Conv2D", "keras.regularizers.l2"], "function", ["None"], ["", "def", "shortcut", "(", "input", ",", "residual", ")", ":", "\n", "    ", "\"\"\"Adds a shortcut between input and residual block and merges them with \"sum\"\n    \"\"\"", "\n", "# Expand channels of shortcut to match residual.", "\n", "# Stride appropriately to match residual (width, height)", "\n", "# Should be int if network architecture is correctly configured.", "\n", "input_shape", "=", "K", ".", "int_shape", "(", "input", ")", "\n", "residual_shape", "=", "K", ".", "int_shape", "(", "residual", ")", "\n", "stride_width", "=", "int", "(", "round", "(", "input_shape", "[", "ROW_AXIS", "]", "/", "residual_shape", "[", "ROW_AXIS", "]", ")", ")", "\n", "stride_height", "=", "int", "(", "round", "(", "input_shape", "[", "COL_AXIS", "]", "/", "residual_shape", "[", "COL_AXIS", "]", ")", ")", "\n", "equal_channels", "=", "input_shape", "[", "CHANNEL_AXIS", "]", "==", "residual_shape", "[", "CHANNEL_AXIS", "]", "\n", "\n", "shortcut", "=", "input", "\n", "# 1 X 1 conv if shape is different. Else identity.", "\n", "if", "stride_width", ">", "1", "or", "stride_height", ">", "1", "or", "not", "equal_channels", ":", "\n", "        ", "shortcut", "=", "Conv2D", "(", "filters", "=", "residual_shape", "[", "CHANNEL_AXIS", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "(", "stride_width", ",", "stride_height", ")", ",", "\n", "padding", "=", "\"valid\"", ",", "\n", "kernel_initializer", "=", "\"he_normal\"", ",", "\n", "kernel_regularizer", "=", "l2", "(", "0.0001", ")", ")", "(", "input", ")", "\n", "\n", "", "return", "add", "(", "[", "shortcut", ",", "residual", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.residual_block": [[485, 498], ["range", "block_function"], "function", ["None"], ["", "def", "residual_block", "(", "block_function", ",", "filters", ",", "repetitions", ",", "is_first_layer", "=", "False", ")", ":", "\n", "    ", "\"\"\"Builds a residual block with repeating bottleneck blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "init_strides", "=", "(", "1", ",", "1", ")", "\n", "if", "i", "==", "0", "and", "not", "is_first_layer", ":", "\n", "                ", "init_strides", "=", "(", "2", ",", "2", ")", "\n", "", "input", "=", "block_function", "(", "filters", "=", "filters", ",", "init_strides", "=", "init_strides", ",", "\n", "is_first_block_of_first_layer", "=", "(", "is_first_layer", "and", "i", "==", "0", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.basic_block": [[500, 522], ["helpers.shortcut", "helpers.bn_relu_conv", "keras.layers.convolutional.Conv2D", "helpers.bn_relu_conv", "keras.regularizers.l2"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.shortcut", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu_conv", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu_conv"], ["", "def", "basic_block", "(", "filters", ",", "init_strides", "=", "(", "1", ",", "1", ")", ",", "is_first_block_of_first_layer", "=", "False", ")", ":", "\n", "    ", "\"\"\"Basic 3 X 3 convolution blocks for use on resnets with layers <= 34.\n    Follows improved proposed scheme in \"Identity Mappings in Deep Residual         \n    Networks\" (http://arxiv.org/pdf/1603.05027v2.pdf)\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "\n", "        ", "if", "is_first_block_of_first_layer", ":", "\n", "# don't repeat bn->relu since we just did bn->relu->maxpool", "\n", "            ", "conv1", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "init_strides", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "kernel_initializer", "=", "\"he_normal\"", ",", "\n", "kernel_regularizer", "=", "l2", "(", "1e-4", ")", ")", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "conv1", "=", "bn_relu_conv", "(", "filters", "=", "filters", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "strides", "=", "init_strides", ")", "(", "input", ")", "\n", "\n", "", "residual", "=", "bn_relu_conv", "(", "filters", "=", "filters", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", "(", "conv1", ")", "\n", "return", "shortcut", "(", "input", ",", "residual", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bottleneck": [[524, 549], ["helpers.shortcut", "helpers.bn_relu_conv", "helpers.bn_relu_conv", "keras.layers.convolutional.Conv2D", "helpers.bn_relu_conv", "keras.regularizers.l2"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.shortcut", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu_conv", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu_conv", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu_conv"], ["", "def", "bottleneck", "(", "filters", ",", "init_strides", "=", "(", "1", ",", "1", ")", ",", "is_first_block_of_first_layer", "=", "False", ")", ":", "\n", "    ", "\"\"\"Bottleneck architecture for > 34 layer resnet.\n    Follows improved proposed scheme in \"Identity Mappings in Deep Residual         \n    Networks\" (http://arxiv.org/pdf/1603.05027v2.pdf)\n    Returns:\n        A final conv layer of filters * 4\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "\n", "        ", "if", "is_first_block_of_first_layer", ":", "\n", "# don't repeat bn->relu since we just did bn->relu->maxpool", "\n", "            ", "conv_1_1", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "init_strides", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "kernel_initializer", "=", "\"he_normal\"", ",", "\n", "kernel_regularizer", "=", "l2", "(", "1e-4", ")", ")", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "conv_1_1", "=", "bn_relu_conv", "(", "filters", "=", "filters", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "strides", "=", "init_strides", ")", "(", "input", ")", "\n", "\n", "", "conv_3_3", "=", "bn_relu_conv", "(", "filters", "=", "filters", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", "(", "conv_1_1", ")", "\n", "residual", "=", "bn_relu_conv", "(", "filters", "=", "filters", "*", "4", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ")", "(", "conv_3_3", ")", "\n", "return", "shortcut", "(", "input", ",", "residual", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_conv_relu": [[550, 578], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.Activation"], "function", ["None"], ["", "def", "conv_conv_relu", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a conv-conv-relu network block\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size1", "=", "conv_params", "[", "\"kernel_size1\"", "]", "\n", "kernel_size2", "=", "conv_params", "[", "\"kernel_size2\"", "]", "\n", "strides1", "=", "conv_params", ".", "setdefault", "(", "\"strides1\"", ",", "(", "1", ",", "1", ")", ")", "\n", "strides2", "=", "conv_params", ".", "setdefault", "(", "\"strides2\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"ccr\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv1", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size1", ",", "\n", "strides", "=", "strides1", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv1\"", ")", "(", "input", ")", "\n", "conv2", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size2", ",", "\n", "strides", "=", "strides2", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv2\"", ")", "(", "conv1", ")", "\n", "\n", "return", "Activation", "(", "\"relu\"", ",", "name", "=", "name", "+", "\"_relu\"", ")", "(", "conv2", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_conv_bn_relu": [[579, 607], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "helpers.bn_relu"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu"], ["", "def", "conv_conv_bn_relu", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a conv-conv-bn-relu network block\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size1", "=", "conv_params", "[", "\"kernel_size1\"", "]", "\n", "kernel_size2", "=", "conv_params", "[", "\"kernel_size2\"", "]", "\n", "strides1", "=", "conv_params", ".", "setdefault", "(", "\"strides1\"", ",", "(", "1", ",", "1", ")", ")", "\n", "strides2", "=", "conv_params", ".", "setdefault", "(", "\"strides2\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"ccbr\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv1", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size1", ",", "\n", "strides", "=", "strides1", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv1\"", ")", "(", "input", ")", "\n", "conv2", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size2", ",", "\n", "strides", "=", "strides2", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv2\"", ")", "(", "conv1", ")", "\n", "\n", "return", "bn_relu", "(", "name", "=", "name", ")", "(", "conv2", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.deconv_deconv_relu": [[609, 637], ["deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "keras.layers.convolutional.Conv2DTranspose", "keras.layers.convolutional.Conv2DTranspose", "keras.layers.Activation"], "function", ["None"], ["", "def", "deconv_deconv_relu", "(", "**", "deconv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a deconv-deconv-relu block\n    \"\"\"", "\n", "filters", "=", "deconv_params", "[", "\"filters\"", "]", "\n", "kernel_size1", "=", "deconv_params", "[", "\"kernel_size1\"", "]", "\n", "kernel_size2", "=", "deconv_params", "[", "\"kernel_size2\"", "]", "\n", "strides1", "=", "deconv_params", "[", "\"strides1\"", "]", "\n", "strides2", "=", "deconv_params", "[", "\"strides2\"", "]", "\n", "kernel_initializer", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "deconv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "#kernel_regularizer = deconv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "deconv_params", ".", "setdefault", "(", "\"name\"", ",", "\"ddbr\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "deconv1", "=", "Conv2DTranspose", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size1", ",", "\n", "strides", "=", "strides1", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_deconv1\"", ")", "(", "input", ")", "\n", "deconv2", "=", "Conv2DTranspose", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size2", ",", "\n", "strides", "=", "strides2", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_deconv2\"", ")", "(", "deconv1", ")", "\n", "return", "Activation", "(", "\"relu\"", ",", "name", "=", "name", "+", "\"_relu\"", ")", "(", "deconv2", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.deconv_deconv_bn_relu": [[639, 667], ["deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "deconv_params.setdefault", "keras.layers.convolutional.Conv2DTranspose", "keras.layers.convolutional.Conv2DTranspose", "helpers.bn_relu"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.bn_relu"], ["", "def", "deconv_deconv_bn_relu", "(", "**", "deconv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a deconv-deconv-bn-relu block\n    \"\"\"", "\n", "filters", "=", "deconv_params", "[", "\"filters\"", "]", "\n", "kernel_size1", "=", "deconv_params", "[", "\"kernel_size1\"", "]", "\n", "kernel_size2", "=", "deconv_params", "[", "\"kernel_size2\"", "]", "\n", "strides1", "=", "deconv_params", "[", "\"strides1\"", "]", "\n", "strides2", "=", "deconv_params", "[", "\"strides2\"", "]", "\n", "kernel_initializer", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "deconv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "#kernel_regularizer = deconv_params.setdefault(\"kernel_regularizer\", l2(1.e-4))", "\n", "kernel_regularizer", "=", "deconv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "deconv_params", ".", "setdefault", "(", "\"name\"", ",", "\"ddbr\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "deconv1", "=", "Conv2DTranspose", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size1", ",", "\n", "strides", "=", "strides1", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_deconv1\"", ")", "(", "input", ")", "\n", "deconv2", "=", "Conv2DTranspose", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size2", ",", "\n", "strides", "=", "strides2", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_deconv2\"", ")", "(", "deconv1", ")", "\n", "return", "bn_relu", "(", "name", "=", "name", ")", "(", "deconv2", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.gcn_block": [[673, 713], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.merge.add", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D"], "function", ["None"], ["", "def", "gcn_block", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a global convolutional network block\n    which is proposed in \"Large Kernel Matters -- Improve Semantic Segmentation by Global \n    Convolutional Network\" (https://arxiv.org/pdf/1703.02719.pdf)\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size1", "=", "conv_params", "[", "\"kernel_size1\"", "]", "\n", "kernel_size2", "=", "conv_params", "[", "\"kernel_size2\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"gcn\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv1_1", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size1", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv1_1\"", ")", "(", "input", ")", "\n", "conv1_2", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size2", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv1_2\"", ")", "(", "conv1_1", ")", "\n", "\n", "conv2_1", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size2", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv2_1\"", ")", "(", "input", ")", "\n", "conv2_2", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size1", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv2_2\"", ")", "(", "conv2_1", ")", "\n", "\n", "return", "add", "(", "[", "conv1_2", ",", "conv2_2", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.boundary_refinement_block": [[715, 744], ["conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "conv_params.setdefault", "keras.layers.merge.add", "keras.layers.convolutional.Conv2D", "keras.layers.Activation", "keras.layers.convolutional.Conv2D"], "function", ["None"], ["", "def", "boundary_refinement_block", "(", "**", "conv_params", ")", ":", "\n", "    ", "\"\"\"Helper to build a boundary refinement block\n    which is proposed in \"Large Kernel Matters -- Improve Semantic Segmentation by Global \n    Convolutional Network\" (https://arxiv.org/pdf/1703.02719.pdf)\n    \"\"\"", "\n", "filters", "=", "conv_params", "[", "\"filters\"", "]", "\n", "kernel_size", "=", "conv_params", "[", "\"kernel_size\"", "]", "\n", "strides", "=", "conv_params", ".", "setdefault", "(", "\"strides\"", ",", "(", "1", ",", "1", ")", ")", "\n", "kernel_initializer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_initializer\"", ",", "\"he_normal\"", ")", "\n", "padding", "=", "conv_params", ".", "setdefault", "(", "\"padding\"", ",", "\"same\"", ")", "\n", "kernel_regularizer", "=", "conv_params", ".", "setdefault", "(", "\"kernel_regularizer\"", ",", "None", ")", "\n", "name", "=", "conv_params", ".", "setdefault", "(", "\"name\"", ",", "\"br\"", ")", "\n", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "conv1", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv1\"", ")", "(", "input", ")", "\n", "relu", "=", "Activation", "(", "\"relu\"", ",", "name", "=", "name", "+", "\"_relu\"", ")", "(", "conv1", ")", "\n", "conv2", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "padding", "=", "padding", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "name", "=", "name", "+", "\"_conv2\"", ")", "(", "relu", ")", "\n", "\n", "return", "add", "(", "[", "input", ",", "conv2", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu_repetition_block": [[745, 763], ["range", "isinstance", "helpers.conv_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu"], ["", "def", "conv_relu_repetition_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "first_layer_down_size", "=", "False", ",", "name", "=", "\"conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with repeating convolution + relu blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "init_strides", "=", "(", "1", ",", "1", ")", "\n", "if", "i", "==", "0", "and", "first_layer_down_size", ":", "\n", "                ", "init_strides", "=", "(", "2", ",", "2", ")", "\n", "", "if", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "\n", "", "input", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size_i", ",", "\n", "strides", "=", "init_strides", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu_repetition_block": [[765, 784], ["range", "isinstance", "helpers.conv_bn_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu"], ["", "def", "conv_bn_relu_repetition_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "first_layer_down_size", "=", "False", ",", "name", "=", "\"conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with repeating convolution + batch_normalization + relu blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "init_strides", "=", "(", "1", ",", "1", ")", "\n", "if", "i", "==", "0", "and", "first_layer_down_size", ":", "\n", "                ", "init_strides", "=", "(", "2", ",", "2", ")", "\n", "", "if", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "\n", "\n", "", "input", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size_i", ",", "\n", "strides", "=", "init_strides", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block": [[786, 805], ["range", "isinstance", "helpers.conv_bn_leakyrelu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu"], ["", "def", "conv_bn_leakyrelu_repetition_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "name", "=", "\"conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with repeating convolution + batch_normalization + relu blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "init_strides", "=", "(", "1", ",", "1", ")", "\n", "if", "i", "==", "0", "and", "first_layer_down_size", ":", "\n", "                ", "init_strides", "=", "(", "2", ",", "2", ")", "\n", "", "if", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "\n", "\n", "", "input", "=", "conv_bn_leakyrelu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size_i", ",", "\n", "strides", "=", "init_strides", ",", "alpha", "=", "alpha", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_res_repetition_block": [[807, 843], ["isinstance", "range", "helpers.conv_bn_leakyrelu", "isinstance", "keras.layers.merge.add", "helpers.conv_bn_leakyrelu", "helpers.conv_bn_leakyrelu", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu"], ["", "def", "conv_bn_leakyrelu_res_repetition_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "name", "=", "\"conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with repeating convolution + batch_normalization + relu blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "init_strides", "=", "(", "1", ",", "1", ")", "\n", "if", "first_layer_down_size", ":", "\n", "            ", "init_strides", "=", "(", "2", ",", "2", ")", "\n", "", "if", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "            ", "kernel_size_0", "=", "kernel_size", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "kernel_size_0", "=", "kernel_size", "\n", "\n", "", "input", "=", "conv_bn_leakyrelu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size_0", ",", "\n", "strides", "=", "init_strides", ",", "alpha", "=", "alpha", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "0", ")", ")", "(", "input", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "repetitions", ")", ":", "\n", "            ", "init_strides", "=", "(", "1", ",", "1", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "\n", "\n", "", "if", "i", "==", "1", ":", "\n", "                ", "input1", "=", "conv_bn_leakyrelu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size_i", ",", "\n", "strides", "=", "init_strides", ",", "alpha", "=", "alpha", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "else", ":", "\n", "                ", "input1", "=", "conv_bn_leakyrelu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size_i", ",", "\n", "strides", "=", "init_strides", ",", "alpha", "=", "alpha", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input1", ")", "\n", "\n", "", "", "if", "repetitions", ">", "1", ":", "\n", "            ", "return", "add", "(", "[", "input", ",", "input1", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "", "else", ":", "\n", "            ", "return", "input", "\n", "\n", "", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu_repetition_residual_block": [[845, 869], ["helpers.conv_relu", "keras.layers.merge.add", "keras.layers.merge.add", "helpers.conv_relu", "helpers.conv_relu", "helpers.conv_relu", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu"], ["", "def", "conv_relu_repetition_residual_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "first_layer_down_size", "=", "False", ",", "name", "=", "\"conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with repeating convolution + relu blocks and\n    a residual connection.\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "init_strides", "=", "(", "1", ",", "1", ")", "\n", "if", "first_layer_down_size", ":", "\n", "            ", "init_strides", "=", "(", "2", ",", "2", ")", "\n", "", "input", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "init_strides", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "0", ")", ")", "(", "input", ")", "\n", "if", "repetitions", "==", "2", ":", "\n", "            ", "input1", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "1", ")", ")", "(", "input", ")", "\n", "return", "add", "(", "[", "input", ",", "input1", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "\n", "", "if", "repetitions", "==", "3", ":", "\n", "            ", "input1", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "1", ")", ")", "(", "input", ")", "\n", "input2", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "2", ")", ")", "(", "input1", ")", "\n", "return", "add", "(", "[", "input", ",", "input2", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "\n", "", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu_repetition_residual_block": [[871, 895], ["helpers.conv_bn_relu", "keras.layers.merge.add", "keras.layers.merge.add", "helpers.conv_bn_relu", "helpers.conv_bn_relu", "helpers.conv_bn_relu", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu"], ["", "def", "conv_bn_relu_repetition_residual_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "first_layer_down_size", "=", "False", ",", "name", "=", "\"conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with repeating convolution + batch_normalization + relu blocks and\n    a residual connection.\n    \"\"\"", "\n", "def", "f", "(", "input", ")", ":", "\n", "        ", "init_strides", "=", "(", "1", ",", "1", ")", "\n", "if", "first_layer_down_size", ":", "\n", "            ", "init_strides", "=", "(", "2", ",", "2", ")", "\n", "", "input", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "init_strides", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "0", ")", ")", "(", "input", ")", "\n", "if", "repetitions", "==", "2", ":", "\n", "            ", "input1", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "1", ")", ")", "(", "input", ")", "\n", "return", "add", "(", "[", "input", ",", "input1", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "\n", "", "if", "repetitions", "==", "3", ":", "\n", "            ", "input1", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "1", ")", ")", "(", "input", ")", "\n", "input2", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "2", ")", ")", "(", "input1", ")", "\n", "return", "add", "(", "[", "input", ",", "input2", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "\n", "", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.deconv_conv_relu_repetition_block": [[897, 912], ["range", "helpers.deconv_relu", "keras.layers.merge.Concatenate", "helpers.conv_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.deconv_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu"], ["", "def", "deconv_conv_relu_repetition_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "name", "=", "\"deconv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with first deconvolution + relu, then \n    concatenate with input2, and finally repeating convolution + batch_normalization + relu \n    blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ",", "input2", ")", ":", "\n", "        ", "input", "=", "deconv_relu", "(", "filters", "=", "filters", ",", "name", "=", "name", "+", "\"_deconv\"", ")", "(", "input", ")", "\n", "input", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "name", "+", "\"_concate\"", ")", "(", "[", "input", ",", "input2", "]", ")", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "input", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.deconv_conv_bn_relu_repetition_block": [[914, 929], ["range", "helpers.deconv_bn_relu", "keras.layers.merge.Concatenate", "helpers.conv_bn_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.deconv_bn_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu"], ["", "def", "deconv_conv_bn_relu_repetition_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "name", "=", "\"deconv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with first deconvolution + batch_normalization + relu, then \n    concatenate with input2, and finally repeating convolution + batch_normalization + relu \n    blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ",", "input2", ")", ":", "\n", "        ", "input", "=", "deconv_bn_relu", "(", "filters", "=", "filters", ",", "name", "=", "name", "+", "\"_deconv\"", ")", "(", "input", ")", "\n", "input", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "name", "+", "\"_concate\"", ")", "(", "[", "input", ",", "input2", "]", ")", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "input", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.up_conv_relu_repetition_block": [[931, 953], ["range", "keras.layers.UpSampling2D", "len", "isinstance", "keras.layers.merge.Concatenate", "helpers.conv_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu"], ["", "def", "up_conv_relu_repetition_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "name", "=", "\"up_conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with first upsampling, then \n    concatenate with input2, and finally repeating convolution + relu \n    blocks.\n    \"\"\"", "\n", "def", "f", "(", "*", "args", ")", ":", "\n", "        ", "input", "=", "args", "[", "0", "]", "\n", "input", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "name", "+", "\"_up\"", ")", "(", "input", ")", "\n", "if", "len", "(", "args", ")", ">", "1", ":", "\n", "            ", "input2", "=", "args", "[", "1", "]", "\n", "input", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "name", "+", "\"_concate\"", ")", "(", "[", "input", ",", "input2", "]", ")", "\n", "", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "if", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "\n", "", "input", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size_i", ",", "\n", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.up_conv_bn_relu_repetition_block": [[954, 976], ["range", "keras.layers.UpSampling2D", "len", "isinstance", "keras.layers.merge.Concatenate", "helpers.conv_bn_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu"], ["", "def", "up_conv_bn_relu_repetition_block", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "\n", "name", "=", "\"up_conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with first upsampling, then \n    concatenate with input2, and finally repeating convolution + batch_normalization + relu \n    blocks.\n    \"\"\"", "\n", "def", "f", "(", "*", "args", ")", ":", "\n", "        ", "input", "=", "args", "[", "0", "]", "\n", "input", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "name", "+", "\"_up\"", ")", "(", "input", ")", "\n", "if", "len", "(", "args", ")", ">", "1", ":", "\n", "            ", "input2", "=", "args", "[", "1", "]", "\n", "input", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "name", "+", "\"_concate\"", ")", "(", "[", "input", ",", "input2", "]", ")", "\n", "", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "if", "isinstance", "(", "kernel_size", ",", "list", ")", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "kernel_size_i", "=", "kernel_size", "\n", "", "input", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size_i", ",", "\n", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.up_conv_relu_repetition_block2": [[978, 995], ["range", "keras.layers.UpSampling2D", "helpers.conv_relu", "keras.layers.merge.Concatenate", "helpers.conv_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu"], ["", "def", "up_conv_relu_repetition_block2", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "up_filters_multiple", "=", "2", ",", "\n", "name", "=", "\"up_conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with first upsampling, then convolution + relu,\n    concatenate with input2, and finally repeating convolution + relu \n    blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ",", "input2", ")", ":", "\n", "        ", "input", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "name", "+", "\"_up\"", ")", "(", "input", ")", "\n", "input", "=", "conv_relu", "(", "filters", "=", "up_filters_multiple", "*", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_0th_conv\"", ")", "(", "input", ")", "\n", "input", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "name", "+", "\"_concate\"", ")", "(", "[", "input", ",", "input2", "]", ")", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "input", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.up_conv_bn_relu_repetition_block2": [[997, 1014], ["range", "keras.layers.UpSampling2D", "helpers.conv_bn_relu", "keras.layers.merge.Concatenate", "helpers.conv_bn_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu"], ["", "def", "up_conv_bn_relu_repetition_block2", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "up_filters_multiple", "=", "2", ",", "\n", "name", "=", "\"up_conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with first upsampling, then convolution + batch_normalization + relu,\n    concatenate with input2, and finally repeating convolution + batch_normalization + relu \n    blocks.\n    \"\"\"", "\n", "def", "f", "(", "input", ",", "input2", ")", ":", "\n", "        ", "input", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "name", "+", "\"_up\"", ")", "(", "input", ")", "\n", "input", "=", "conv_bn_relu", "(", "filters", "=", "up_filters_multiple", "*", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_0th_conv\"", ")", "(", "input", ")", "\n", "input", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "name", "+", "\"_concate\"", ")", "(", "[", "input", ",", "input2", "]", ")", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "input", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.up_conv_relu_repetition_residual_block2": [[1015, 1032], ["range", "keras.layers.merge.add", "keras.layers.UpSampling2D", "helpers.conv_relu", "keras.layers.merge.Concatenate", "helpers.conv_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_relu"], ["", "def", "up_conv_relu_repetition_residual_block2", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "up_filters_multiple", "=", "1", ",", "\n", "name", "=", "\"up_conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with first upsampling, then convolution + batch_normalization + relu,\n    concatenate with input2, and then repeating convolution + batch_normalization + relu \n    blocks, and finally a residual connection.\n    \"\"\"", "\n", "def", "f", "(", "input", ",", "input2", ")", ":", "\n", "        ", "input", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "name", "+", "\"_up\"", ")", "(", "input", ")", "\n", "input", "=", "conv_relu", "(", "filters", "=", "up_filters_multiple", "*", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_0th_conv\"", ")", "(", "input", ")", "\n", "result", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "name", "+", "\"_concate\"", ")", "(", "[", "input", ",", "input2", "]", ")", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "result", "=", "conv_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "result", ")", "\n", "", "return", "add", "(", "[", "input", ",", "result", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.up_conv_bn_relu_repetition_residual_block2": [[1033, 1050], ["range", "keras.layers.merge.add", "keras.layers.UpSampling2D", "helpers.conv_bn_relu", "keras.layers.merge.Concatenate", "helpers.conv_bn_relu", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_relu"], ["", "def", "up_conv_bn_relu_repetition_residual_block2", "(", "filters", ",", "kernel_size", ",", "repetitions", ",", "up_filters_multiple", "=", "1", ",", "\n", "name", "=", "\"up_conv_block\"", ")", ":", "\n", "    ", "\"\"\"Builds a block with first upsampling, then convolution + batch_normalization + relu,\n    concatenate with input2, and then repeating convolution + batch_normalization + relu \n    blocks, and finally a residual connection.\n    \"\"\"", "\n", "def", "f", "(", "input", ",", "input2", ")", ":", "\n", "        ", "input", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "name", "+", "\"_up\"", ")", "(", "input", ")", "\n", "input", "=", "conv_bn_relu", "(", "filters", "=", "up_filters_multiple", "*", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_0th_conv\"", ")", "(", "input", ")", "\n", "result", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "name", "+", "\"_concate\"", ")", "(", "[", "input", ",", "input2", "]", ")", "\n", "for", "i", "in", "range", "(", "repetitions", ")", ":", "\n", "            ", "result", "=", "conv_bn_relu", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "\n", "name", "=", "name", "+", "\"_conv\"", "+", "str", "(", "i", ")", ")", "(", "result", ")", "\n", "", "return", "add", "(", "[", "input", ",", "result", "]", ",", "name", "=", "name", "+", "\"_add\"", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.print_hdf5_structure": [[1052, 1082], ["h5py.File", "len", "h5py.File.attrs.items", "h5py.File.items", "h5py.File.close", "h5py.File.attrs.items", "print", "print", "print", "len", "print", "print", "g.attrs.items", "print", "g.keys", "h5py.File.items", "print", "print"], "function", ["None"], ["", "def", "print_hdf5_structure", "(", "weight_file_path", ")", ":", "\n", "    ", "\"\"\"\n    Prints out the structure of HDF5 file.\n\n    Args:\n      weight_file_path (str) : Path to the file to analyze\n    \"\"\"", "\n", "f", "=", "h5py", ".", "File", "(", "weight_file_path", ")", "\n", "try", ":", "\n", "        ", "if", "len", "(", "f", ".", "attrs", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "\"{} contains: \"", ".", "format", "(", "weight_file_path", ")", ")", "\n", "print", "(", "\"Root attributes:\"", ")", "\n", "", "for", "key", ",", "value", "in", "f", ".", "attrs", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"  {}: {}\"", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n", "", "if", "len", "(", "f", ".", "items", "(", ")", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "for", "layer", ",", "g", "in", "f", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"  {}\"", ".", "format", "(", "layer", ")", ")", "\n", "print", "(", "\"    Attributes:\"", ")", "\n", "for", "key", ",", "value", "in", "g", ".", "attrs", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "\"      {}: {}\"", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n", "", "print", "(", "\"    Dataset:\"", ")", "\n", "for", "p_name", "in", "g", ".", "keys", "(", ")", ":", "\n", "                ", "param", "=", "g", "[", "p_name", "]", "\n", "print", "(", "\"      {}: {}\"", ".", "format", "(", "p_name", ",", "param", ".", "shape", ")", ")", "\n", "", "", "", "finally", ":", "\n", "        ", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef": [[1084, 1089], ["keras.backend.flatten", "keras.backend.flatten", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum"], "function", ["None"], ["", "", "def", "dice_coef", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "    ", "y_true_f", "=", "K", ".", "flatten", "(", "y_true", ")", "\n", "y_pred_f", "=", "K", ".", "flatten", "(", "y_pred", ")", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true_f", "*", "y_pred_f", ")", "\n", "return", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "K", ".", "sum", "(", "y_true_f", ")", "+", "K", ".", "sum", "(", "y_pred_f", ")", "+", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef_loss": [[1091, 1093], ["helpers.dice_coef"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef"], ["", "def", "dice_coef_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "    ", "return", "-", "dice_coef", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2": [[1095, 1102], ["tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum"], "function", ["None"], ["", "def", "dice_coef2", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true", "=", "tf", ".", "where", "(", "y_true", ">", "0.5", ",", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "#y_pred_f = K.flatten(y_pred)", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "K", ".", "mean", "(", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "sum", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2_loss": [[1104, 1106], ["helpers.dice_coef2"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2"], ["", "def", "dice_coef2_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "    ", "return", "-", "dice_coef2", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef2": [[1107, 1114], ["tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum"], "function", ["None"], ["", "def", "jaccard_coef2", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true", "=", "tf", ".", "where", "(", "y_true", ">", "0.5", ",", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "#y_pred_f = K.flatten(y_pred)", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum", "=", "K", ".", "sum", "(", "y_true", "*", "y_true", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred", "*", "y_pred", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "K", ".", "mean", "(", "(", "1.0", "*", "intersection", "+", "smooth", ")", "/", "(", "sum", "-", "intersection", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef2_loss": [[1116, 1118], ["helpers.jaccard_coef2"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef2"], ["", "def", "jaccard_coef2_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "    ", "return", "-", "jaccard_coef2", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef3": [[1120, 1162], ["tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef3", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "\n", "y_pred0", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f0 = K.flatten(y_pred0)", "\n", "y_pred1", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f1 = K.flatten(y_pred1)", "\n", "y_pred2", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f2 = K.flatten(y_pred2)", "\n", "y_pred3", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f3 = K.flatten(y_pred3)", "\n", "\n", "#intersection0 = K.sum(y_true_f0 * y_pred_f0)", "\n", "intersection0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum0", "=", "K", ".", "sum", "(", "y_true0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res0", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection0", "+", "smooth", ")", "/", "(", "sum0", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection1 = K.sum(y_true_f1 * y_pred_f1)", "\n", "intersection1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum1", "=", "K", ".", "sum", "(", "y_true1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res1", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection1", "+", "smooth", ")", "/", "(", "sum1", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection2 = K.sum(y_true_f2 * y_pred_f2)", "\n", "intersection2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum2", "=", "K", ".", "sum", "(", "y_true2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res2", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection2", "+", "smooth", ")", "/", "(", "sum2", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection3 = K.sum(y_true_f3 * y_pred_f3)", "\n", "intersection3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum3", "=", "K", ".", "sum", "(", "y_true3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res3", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection3", "+", "smooth", ")", "/", "(", "sum3", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "(", "res0", "+", "res1", "+", "res2", "+", "res3", ")", "/", "4.0", "\n", "#return (res1 + res2 + res3) / 3.0", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef3_loss": [[1165, 1167], ["helpers.dice_coef3"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef3"], ["", "def", "dice_coef3_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "    ", "return", "-", "dice_coef3", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef3_0": [[1169, 1187], ["tensorflow.where", "keras.backend.argmax", "tensorflow.shape", "keras.backend.reshape", "tensorflow.to_float", "tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef3_0", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1e-10", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "y_pred", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "y_pred", ")", "\n", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_pred0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_pred", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_pred", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_pred", ")", ",", "K", ".", "zeros_like", "(", "y_pred", ")", ")", "\n", "#y_pred_f0 = K.flatten(y_pred0)", "\n", "\n", "intersection0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum0", "=", "K", ".", "sum", "(", "y_true0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res0", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection0", "+", "smooth", ")", "/", "(", "sum0", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res0", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef3_1": [[1189, 1207], ["tensorflow.where", "keras.backend.argmax", "tensorflow.shape", "keras.backend.reshape", "tensorflow.to_float", "tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef3_1", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1e-10", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "y_pred", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "y_pred", ")", "\n", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_pred1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_pred", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_pred", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_pred", ")", ",", "K", ".", "zeros_like", "(", "y_pred", ")", ")", "\n", "#y_pred_f1 = K.flatten(y_pred1)", "\n", "\n", "intersection1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum1", "=", "K", ".", "sum", "(", "y_true1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res1", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection1", "+", "smooth", ")", "/", "(", "sum1", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res1", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef3_2": [[1209, 1227], ["tensorflow.where", "keras.backend.argmax", "tensorflow.shape", "keras.backend.reshape", "tensorflow.to_float", "tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef3_2", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1e-10", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "y_pred", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "y_pred", ")", "\n", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_pred2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_pred", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_pred", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_pred", ")", ",", "K", ".", "zeros_like", "(", "y_pred", ")", ")", "\n", "#y_pred_f2 = K.flatten(y_pred2)", "\n", "\n", "intersection2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum2", "=", "K", ".", "sum", "(", "y_true2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res2", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection2", "+", "smooth", ")", "/", "(", "sum2", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res2", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef3_3": [[1228, 1247], ["tensorflow.to_float", "tensorflow.where", "keras.backend.argmax", "tensorflow.shape", "keras.backend.reshape", "tensorflow.to_float", "tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef3_3", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1e-10", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_true3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "y_pred", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "y_pred", ")", "\n", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_pred3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_pred", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_pred", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_pred", ")", ",", "K", ".", "zeros_like", "(", "y_pred", ")", ")", "\n", "#y_pred_f3 = K.flatten(y_pred3)", "\n", "\n", "intersection3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum3", "=", "K", ".", "sum", "(", "y_true3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res3", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection3", "+", "smooth", ")", "/", "(", "sum3", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res3", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef4": [[1249, 1291], ["tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef4", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "\n", "y_pred0", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f0 = K.flatten(y_pred0)", "\n", "y_pred1", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f1 = K.flatten(y_pred1)", "\n", "y_pred2", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f2 = K.flatten(y_pred2)", "\n", "y_pred3", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f3 = K.flatten(y_pred3)", "\n", "\n", "#intersection0 = K.sum(y_true_f0 * y_pred_f0)", "\n", "intersection0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_true0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res0", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection0", "+", "smooth", ")", "/", "(", "sum0", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection1 = K.sum(y_true_f1 * y_pred_f1)", "\n", "intersection1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_true1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res1", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection1", "+", "smooth", ")", "/", "(", "sum1", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection2 = K.sum(y_true_f2 * y_pred_f2)", "\n", "intersection2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_true2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res2", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection2", "+", "smooth", ")", "/", "(", "sum2", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection3 = K.sum(y_true_f3 * y_pred_f3)", "\n", "intersection3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_true3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res3", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection3", "+", "smooth", ")", "/", "(", "sum3", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "(", "res0", "+", "res1", "+", "res2", "+", "res3", ")", "/", "4.0", "\n", "#return (res1 + res2 + res3) / 3.0", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef4_loss": [[1294, 1296], ["helpers.dice_coef4"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef4"], ["", "def", "dice_coef4_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "    ", "return", "-", "dice_coef4", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef5": [[1298, 1340], ["tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef5", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "\n", "y_pred0", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f0 = K.flatten(y_pred0)", "\n", "y_pred1", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f1 = K.flatten(y_pred1)", "\n", "y_pred2", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f2 = K.flatten(y_pred2)", "\n", "y_pred3", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f3 = K.flatten(y_pred3)", "\n", "\n", "#intersection0 = K.sum(y_true_f0 * y_pred_f0)", "\n", "intersection0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum0", "=", "K", ".", "sum", "(", "y_true0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res0", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection0", "+", "smooth", ")", "/", "(", "sum0", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection1 = K.sum(y_true_f1 * y_pred_f1)", "\n", "intersection1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum1", "=", "K", ".", "sum", "(", "y_true1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res1", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection1", "+", "smooth", ")", "/", "(", "sum1", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection2 = K.sum(y_true_f2 * y_pred_f2)", "\n", "intersection2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum2", "=", "K", ".", "sum", "(", "y_true2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res2", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection2", "+", "smooth", ")", "/", "(", "sum2", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection3 = K.sum(y_true_f3 * y_pred_f3)", "\n", "intersection3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum3", "=", "K", ".", "sum", "(", "y_true3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res3", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection3", "+", "smooth", ")", "/", "(", "sum3", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "(", "res0", "+", "res1", "+", "res2", "+", "res3", ")", "/", "4.0", "\n", "#return (res1 + res2 + res3) / 3.0", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef5_loss": [[1343, 1345], ["helpers.dice_coef5"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef5"], ["", "def", "dice_coef5_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "    ", "return", "-", "dice_coef5", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef5_0": [[1347, 1365], ["tensorflow.where", "keras.backend.argmax", "tensorflow.shape", "keras.backend.reshape", "tensorflow.to_float", "tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef5_0", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "y_pred", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "y_pred", ")", "\n", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_pred0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_pred", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_pred", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_pred", ")", ",", "K", ".", "zeros_like", "(", "y_pred", ")", ")", "\n", "#y_pred_f0 = K.flatten(y_pred0)", "\n", "\n", "intersection0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum0", "=", "K", ".", "sum", "(", "y_true0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res0", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection0", "+", "smooth", ")", "/", "(", "sum0", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res0", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef5_1": [[1367, 1385], ["tensorflow.where", "keras.backend.argmax", "tensorflow.shape", "keras.backend.reshape", "tensorflow.to_float", "tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef5_1", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "y_pred", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "y_pred", ")", "\n", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_pred1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_pred", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_pred", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_pred", ")", ",", "K", ".", "zeros_like", "(", "y_pred", ")", ")", "\n", "#y_pred_f1 = K.flatten(y_pred1)", "\n", "\n", "intersection1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum1", "=", "K", ".", "sum", "(", "y_true1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res1", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection1", "+", "smooth", ")", "/", "(", "sum1", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res1", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef5_2": [[1387, 1405], ["tensorflow.where", "keras.backend.argmax", "tensorflow.shape", "keras.backend.reshape", "tensorflow.to_float", "tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef5_2", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "y_pred", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "y_pred", ")", "\n", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_pred2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_pred", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_pred", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_pred", ")", ",", "K", ".", "zeros_like", "(", "y_pred", ")", ")", "\n", "#y_pred_f2 = K.flatten(y_pred2)", "\n", "\n", "intersection2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum2", "=", "K", ".", "sum", "(", "y_true2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res2", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection2", "+", "smooth", ")", "/", "(", "sum2", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res2", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef5_3": [[1406, 1425], ["tensorflow.to_float", "tensorflow.where", "keras.backend.argmax", "tensorflow.shape", "keras.backend.reshape", "tensorflow.to_float", "tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef5_3", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_true3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "y_pred", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "y_pred", ")", "\n", "y_pred", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", "\n", "y_pred", "=", "tf", ".", "to_float", "(", "y_pred", ")", "\n", "y_pred3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_pred", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_pred", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_pred", ")", ",", "K", ".", "zeros_like", "(", "y_pred", ")", ")", "\n", "#y_pred_f3 = K.flatten(y_pred3)", "\n", "\n", "intersection3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum3", "=", "K", ".", "sum", "(", "y_true3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res3", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection3", "+", "smooth", ")", "/", "(", "sum3", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res3", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef6": [[1428, 1461], ["tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef6", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "\n", "y_pred0", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f0 = K.flatten(y_pred0)", "\n", "y_pred1", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f1 = K.flatten(y_pred1)", "\n", "y_pred2", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f2 = K.flatten(y_pred2)", "\n", "\n", "#intersection0 = K.sum(y_true_f0 * y_pred_f0)", "\n", "intersection0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum0", "=", "K", ".", "sum", "(", "y_true0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res0", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection0", "+", "smooth", ")", "/", "(", "sum0", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection1 = K.sum(y_true_f1 * y_pred_f1)", "\n", "intersection1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum1", "=", "K", ".", "sum", "(", "y_true1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res1", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection1", "+", "smooth", ")", "/", "(", "sum1", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection2 = K.sum(y_true_f2 * y_pred_f2)", "\n", "intersection2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum2", "=", "K", ".", "sum", "(", "y_true2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res2", "=", "K", ".", "mean", "(", "(", "2.", "*", "intersection2", "+", "smooth", ")", "/", "(", "sum2", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "(", "res0", "+", "res1", "+", "res2", ")", "/", "3.0", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef6_loss": [[1463, 1465], ["helpers.dice_coef6"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef6"], ["", "def", "dice_coef6_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "    ", "return", "-", "dice_coef6", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef7_array": [[1466, 1475], ["numpy.where", "numpy.sum", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "numpy.sum", "numpy.sum", "numpy.ones_like"], "function", ["None"], ["", "def", "dice_coef7_array", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "y_true", ",", "200.0", "*", "np", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "y_true", ")", ",", "np", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "#y_pred_f = K.flatten(y_pred)", "\n", "intersection", "=", "np", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "sum", "=", "np", ".", "sum", "(", "y_true", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "np", ".", "sum", "(", "y_pred", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "#return np.mean((2. * intersection + smooth) / (sum + smooth), axis=0)", "\n", "return", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "sum", "+", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef7": [[1477, 1485], ["tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like"], "function", ["None"], ["", "def", "dice_coef7", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "200.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "#y_pred_f = K.flatten(y_pred)", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "K", ".", "mean", "(", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "sum", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef7_loss": [[1487, 1489], ["helpers.dice_coef7"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef7"], ["", "def", "dice_coef7_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "    ", "return", "-", "dice_coef7", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef3_1": [[1492, 1580], ["tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "jaccard_coef3_1", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "    ", "'''\n    y_true0 = tf.where(K.equal(y_true, 0.0 * K.ones_like(y_true)), \n                         K.ones_like(y_true), K.zeros_like(y_true))\n    y_true1 = tf.where(K.equal(y_true, 1.0 * K.ones_like(y_true)), \n                         K.ones_like(y_true), K.zeros_like(y_true))\n    y_true2 = tf.where(K.equal(y_true, 2.0 * K.ones_like(y_true)), \n                         K.ones_like(y_true), K.zeros_like(y_true))\n    y_true3 = tf.where(K.equal(y_true, 3.0 * K.ones_like(y_true)), \n                         K.ones_like(y_true), K.zeros_like(y_true))\n\n    shape = tf.shape(y_true)\n    y_true0 = K.reshape(y_true0, (shape[0], shape[1], shape[2]))\n    y_true1 = K.reshape(y_true1, (shape[0], shape[1], shape[2]))\n    y_true2 = K.reshape(y_true2, (shape[0], shape[1], shape[2]))\n    y_true3 = K.reshape(y_true3, (shape[0], shape[1], shape[2]))\n\n    y_pred0 = tf.slice(y_pred, [0,0,0,0], [-1,-1,-1,1])\n    y_pred1 = tf.slice(y_pred, [0,0,0,1], [-1,-1,-1,1])\n    y_pred2 = tf.slice(y_pred, [0,0,0,2], [-1,-1,-1,1])\n    y_pred3 = tf.slice(y_pred, [0,0,0,3], [-1,-1,-1,1])\n\n    y_pred0 = K.reshape(y_pred0, (shape[0], shape[1], shape[2]))\n    y_pred1 = K.reshape(y_pred1, (shape[0], shape[1], shape[2]))\n    y_pred2 = K.reshape(y_pred2, (shape[0], shape[1], shape[2]))\n    y_pred3 = K.reshape(y_pred3, (shape[0], shape[1], shape[2]))\n\n    intersection0 = tf.norm(y_true0 * y_pred0, axis=[1,2])\n    sum0 =  K.sum(y_true0 * y_true0, axis=[1,2]) + K.sum(y_pred0 * y_pred0, axis=[1,2])\n    res0 = (1.0 * intersection0 + smooth) / (sum0 - intersection0 + smooth)\n\n    intersection1 = tf.norm(y_true1 * y_pred1, axis=[1,2])\n    sum1 =  K.sum(y_true1 * y_true1, axis=[1,2]) + K.sum(y_pred1 * y_pred1, axis=[1,2])\n    res1 = (1.0 * intersection1 + smooth) / (sum1 - intersection1 + smooth)\n\n    intersection2 = tf.norm(y_true2 * y_pred2, axis=[1,2])\n    sum2 =  K.sum(y_true2 * y_true2, axis=[1,2]) + K.sum(y_pred2 * y_pred2, axis=[1,2])\n    res2 = (1.0 * intersection2 + smooth) / (sum2 - intersection2 + smooth)\n\n    intersection3 = tf.norm(y_true3 * y_pred3, axis=[1,2])\n    sum3 =  K.sum(y_true3 * y_true3, axis=[1,2]) + K.sum(y_pred3 * y_pred3, axis=[1,2])\n    res3 = (1.0 * intersection3 + smooth) / (sum3 - intersection3 + smooth)\n    '''", "\n", "\n", "\n", "#y_true_f = K.flatten(y_true)", "\n", "#y_true0 = tf.where(K.equal(y_true, 0.0 * K.ones_like(y_true)), ", "\n", "#             K.ones_like(y_true), K.zeros_like(y_true))", "\n", "y_true1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "\n", "#y_pred0 = tf.slice(y_pred, [0,0,0,0], [-1,-1,-1,1])", "\n", "#y_pred_f0 = K.flatten(y_pred0)", "\n", "y_pred1", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f1 = K.flatten(y_pred1)", "\n", "y_pred2", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f2 = K.flatten(y_pred2)", "\n", "y_pred3", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f3 = K.flatten(y_pred3)", "\n", "\n", "#intersection0 = K.sum(y_true_f0 * y_pred_f0)", "\n", "#intersection0 = K.sum(y_true0 * y_pred0, axis=[1,2,3])", "\n", "#sum0 = K.sum(y_true0 * y_true0, axis=[1,2,3]) + K.sum(y_pred0 * y_pred0, axis=[1,2,3])", "\n", "#res0 = K.mean((1.0 * intersection0 + smooth) / (sum0 - intersection0 + smooth), axis=0)", "\n", "\n", "#intersection1 = K.sum(y_true_f1 * y_pred_f1)", "\n", "intersection1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_true1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res1", "=", "K", ".", "mean", "(", "(", "1.0", "*", "intersection1", "+", "smooth", ")", "/", "(", "sum1", "-", "intersection1", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection2 = K.sum(y_true_f2 * y_pred_f2)", "\n", "intersection2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_true2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res2", "=", "K", ".", "mean", "(", "(", "1.0", "*", "intersection2", "+", "smooth", ")", "/", "(", "sum2", "-", "intersection2", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection3 = K.sum(y_true_f3 * y_pred_f3)", "\n", "intersection3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_true3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res3", "=", "K", ".", "mean", "(", "(", "1.0", "*", "intersection3", "+", "smooth", ")", "/", "(", "sum3", "-", "intersection3", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "#return (res0 + res1 + res2 + res3) / 4.0", "\n", "return", "(", "res1", "+", "res2", "+", "res3", ")", "/", "3.0", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef3_2": [[1583, 1593], ["keras.backend.ones_like", "tensorflow.slice", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.sum"], "function", ["None"], ["", "def", "jaccard_coef3_2", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "\n", "    ", "y_true0", "=", "K", ".", "ones_like", "(", "y_true", ")", "\n", "y_pred0", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "intersection0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_true0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res0", "=", "K", ".", "mean", "(", "(", "1.0", "*", "intersection0", "+", "smooth", ")", "/", "(", "sum0", "-", "intersection0", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "res0", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef3": [[1595, 1600], ["tensorflow.cond", "tensorflow.reduce_max", "helpers.jaccard_coef3_1", "helpers.jaccard_coef3_2"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef3_1", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef3_2"], ["", "def", "jaccard_coef3", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "\n", "    ", "return", "tf", ".", "cond", "(", "tf", ".", "reduce_max", "(", "y_true", ")", ">", "0.", ",", "\n", "lambda", ":", "jaccard_coef3_1", "(", "y_true", ",", "y_pred", ",", "smooth", ")", ",", "\n", "lambda", ":", "jaccard_coef3_2", "(", "y_true", ",", "y_pred", ",", "smooth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef3_loss": [[1602, 1604], ["helpers.jaccard_coef3"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef3"], ["", "def", "jaccard_coef3_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "    ", "return", "-", "jaccard_coef3", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef4": [[1606, 1650], ["tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.sum", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "jaccard_coef4", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "\n", "#y_true_f = K.flatten(y_true)", "\n", "    ", "y_true0", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "0.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "1.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "2.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "y_true3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "3.0", "*", "K", ".", "ones_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "y_true", ")", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", "\n", "\n", "\n", "y_pred0", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f0 = K.flatten(y_pred0)", "\n", "y_pred1", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f1 = K.flatten(y_pred1)", "\n", "y_pred2", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f2 = K.flatten(y_pred2)", "\n", "y_pred3", "=", "tf", ".", "slice", "(", "y_pred", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "#y_pred_f3 = K.flatten(y_pred3)", "\n", "\n", "#intersection0 = K.sum(y_true_f0 * y_pred_f0)", "\n", "intersection0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum0", "=", "K", ".", "sum", "(", "y_true0", "*", "y_true0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred0", "*", "y_pred0", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res0", "=", "K", ".", "mean", "(", "(", "1.0", "*", "intersection0", "+", "smooth", ")", "/", "(", "sum0", "-", "intersection0", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection1 = K.sum(y_true_f1 * y_pred_f1)", "\n", "intersection1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum1", "=", "K", ".", "sum", "(", "y_true1", "*", "y_true1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred1", "*", "y_pred1", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res1", "=", "K", ".", "mean", "(", "(", "1.0", "*", "intersection1", "+", "smooth", ")", "/", "(", "sum1", "-", "intersection1", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection2 = K.sum(y_true_f2 * y_pred_f2)", "\n", "intersection2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum2", "=", "K", ".", "sum", "(", "y_true2", "*", "y_true2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred2", "*", "y_pred2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res2", "=", "K", ".", "mean", "(", "(", "1.0", "*", "intersection2", "+", "smooth", ")", "/", "(", "sum2", "-", "intersection2", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "#intersection3 = K.sum(y_true_f3 * y_pred_f3)", "\n", "intersection3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "sum3", "=", "K", ".", "sum", "(", "y_true3", "*", "y_true3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_pred3", "*", "y_pred3", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "res3", "=", "K", ".", "mean", "(", "(", "1.0", "*", "intersection3", "+", "smooth", ")", "/", "(", "sum3", "-", "intersection3", "+", "smooth", ")", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "return", "(", "res0", "+", "res1", "+", "res2", "+", "res3", ")", "/", "4.0", "\n", "#return (res1 + res2 + res3) / 3.0", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef4_loss": [[1653, 1655], ["helpers.jaccard_coef4"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.jaccard_coef4"], ["", "def", "jaccard_coef4_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "0.0", ")", ":", "\n", "    ", "return", "-", "jaccard_coef4", "(", "y_true", ",", "y_pred", ",", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.base_slice_euclidean_distance_loss": [[1656, 1665], ["tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.where", "tensorflow.reduce_sum", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "tensorflow.square", "tensorflow.subtract", "keras.backend.ones_like"], "function", ["None"], ["", "def", "base_slice_euclidean_distance_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_pred_reduced", "=", "tf", ".", "reduce_max", "(", "y_pred", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "max_values", "=", "tf", ".", "reduce_max", "(", "y_true", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "labels", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "max_values", ",", "3.0", "*", "K", ".", "ones_like", "(", "max_values", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "max_values", ")", ",", "K", ".", "zeros_like", "(", "max_values", ")", ")", "\n", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "y_pred_reduced", ",", "labels", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.depth_softmax": [[1667, 1672], ["sigmoid", "keras.backend.sum", "keras.backend.exp"], "function", ["None"], ["", "def", "depth_softmax", "(", "matrix", ")", ":", "\n", "    ", "sigmoid", "=", "lambda", "x", ":", "1.0", "/", "(", "1", "+", "K", ".", "exp", "(", "-", "x", ")", ")", "\n", "sigmoided_matrix", "=", "sigmoid", "(", "matrix", ")", "\n", "softmax_matrix", "=", "sigmoided_matrix", "/", "K", ".", "sum", "(", "sigmoided_matrix", ",", "axis", "=", "2", ")", "\n", "return", "softmax_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mean_variance_normalization": [[1674, 1679], ["numpy.mean", "numpy.std", "max", "numpy.sqrt"], "function", ["None"], ["", "def", "mean_variance_normalization", "(", "array", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "array", ")", "\n", "std", "=", "np", ".", "std", "(", "array", ")", "\n", "adjusted_std", "=", "max", "(", "std", ",", "1.0", "/", "np", ".", "sqrt", "(", "array", ".", "size", ")", ")", "\n", "return", "(", "array", "-", "mean", ")", "/", "adjusted_std", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mean_variance_normalization2": [[1680, 1697], ["numpy.percentile", "numpy.percentile", "numpy.mean", "numpy.std", "max", "numpy.logical_and", "numpy.sqrt"], "function", ["None"], ["", "def", "mean_variance_normalization2", "(", "array", ")", ":", "\n", "\n", "    ", "percentile1", "=", "np", ".", "percentile", "(", "array", ",", "10", ")", "\n", "percentile2", "=", "np", ".", "percentile", "(", "array", ",", "90", ")", "\n", "array2", "=", "array", "[", "np", ".", "logical_and", "(", "array", ">", "percentile1", ",", "array", "<", "percentile2", ")", "]", "\n", "mean", "=", "np", ".", "mean", "(", "array2", ")", "\n", "std", "=", "np", ".", "std", "(", "array2", ")", "\n", "'''\n    percentile1 = np.percentile(array, 5)\n    percentile2 = np.percentile(array, 95)\n    array[array <= percentile1] = percentile1\n    array[array >= percentile2] = percentile2\n    mean = np.mean(array)\n    std = np.std(array)\n    '''", "\n", "adjusted_std", "=", "max", "(", "std", ",", "1.0", "/", "np", ".", "sqrt", "(", "array", ".", "size", ")", ")", "\n", "return", "1.0", "*", "(", "array", "-", "mean", ")", "/", "adjusted_std", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mean_variance_normalization3": [[1698, 1716], ["numpy.percentile", "numpy.percentile", "numpy.reshape", "np.reshape.astype", "cv2.createCLAHE", "cv2.createCLAHE.apply", "np.reshape.astype", "numpy.reshape", "numpy.mean", "numpy.std", "max", "numpy.sqrt"], "function", ["None"], ["", "def", "mean_variance_normalization3", "(", "array", ")", ":", "\n", "    ", "percentile1", "=", "np", ".", "percentile", "(", "array", ",", "5", ")", "\n", "percentile2", "=", "np", ".", "percentile", "(", "array", ",", "95", ")", "\n", "array", "[", "array", "<=", "percentile1", "]", "=", "percentile1", "\n", "array", "[", "array", ">=", "percentile2", "]", "=", "percentile2", "\n", "\n", "shape", "=", "array", ".", "shape", "\n", "array", "=", "np", ".", "reshape", "(", "array", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "array", "=", "array", ".", "astype", "(", "'uint16'", ")", "\n", "clahe", "=", "cv2", ".", "createCLAHE", "(", "clipLimit", "=", "3.0", ",", "tileGridSize", "=", "(", "8", ",", "8", ")", ")", "\n", "array", "=", "clahe", ".", "apply", "(", "array", ")", "\n", "array", "=", "array", ".", "astype", "(", "float", ")", "\n", "array", "=", "np", ".", "reshape", "(", "array", ",", "shape", ")", "\n", "\n", "mean", "=", "np", ".", "mean", "(", "array", ")", "\n", "std", "=", "np", ".", "std", "(", "array", ")", "\n", "adjusted_std", "=", "max", "(", "std", ",", "1.0", "/", "np", ".", "sqrt", "(", "array", ".", "size", ")", ")", "\n", "return", "1.0", "*", "(", "array", "-", "mean", ")", "/", "adjusted_std", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mean_variance_normalization4": [[1717, 1727], ["numpy.mean", "numpy.std", "max", "array.min", "array.min", "numpy.sqrt"], "function", ["None"], ["", "def", "mean_variance_normalization4", "(", "array", ")", ":", "\n", "\n", "    ", "array2", "=", "array", "[", "array", ">", "array", ".", "min", "(", ")", "]", "\n", "if", "(", "array2", ".", "size", ">", "0", ")", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "array2", ")", "\n", "std", "=", "np", ".", "std", "(", "array2", ")", "\n", "adjusted_std", "=", "max", "(", "std", ",", "1.0", "/", "np", ".", "sqrt", "(", "array", ".", "size", ")", ")", "\n", "return", "1.0", "*", "(", "array", "-", "mean", ")", "/", "adjusted_std", "\n", "", "else", ":", "\n", "        ", "return", "(", "array", "-", "array", ".", "min", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mean_variance_normalization5": [[1729, 1742], ["numpy.percentile", "numpy.percentile", "numpy.mean", "numpy.std", "max", "numpy.logical_and", "array.min", "numpy.sqrt"], "function", ["None"], ["", "", "def", "mean_variance_normalization5", "(", "array", ")", ":", "\n", "\n", "    ", "percentile1", "=", "np", ".", "percentile", "(", "array", ",", "5", ")", "\n", "percentile2", "=", "np", ".", "percentile", "(", "array", ",", "95", ")", "\n", "\n", "array2", "=", "array", "[", "np", ".", "logical_and", "(", "array", ">", "percentile1", ",", "array", "<", "percentile2", ")", "]", "\n", "if", "(", "array2", ".", "size", ">", "0", ")", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "array2", ")", "\n", "std", "=", "np", ".", "std", "(", "array2", ")", "\n", "adjusted_std", "=", "max", "(", "std", ",", "1.0", "/", "np", ".", "sqrt", "(", "array", ".", "size", ")", ")", "\n", "return", "1.0", "*", "(", "array", "-", "mean", ")", "/", "adjusted_std", "\n", "", "else", ":", "\n", "        ", "return", "(", "array", "-", "array", ".", "min", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.elementwise_multiplication": [[1743, 1745], ["None"], "function", ["None"], ["", "", "def", "elementwise_multiplication", "(", "array", ")", ":", "\n", "    ", "return", "(", "0.02", "*", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.elementwise_multiplication2": [[1746, 1750], ["None"], "function", ["None"], ["", "def", "elementwise_multiplication2", "(", "array", ")", ":", "\n", "    ", "array2", "=", "0.02", "*", "array", "\n", "array2", "[", "array2", "==", "3.0", "]", "=", "0.0", "\n", "return", "array2", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.one_hot": [[1751, 1757], ["range", "keras.backend.concatenate", "tensorflow.where", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "one_hot", "(", "indices", ",", "num_classes", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "res", "+=", "[", "tf", ".", "where", "(", "K", ".", "equal", "(", "indices", ",", "i", "*", "K", ".", "ones_like", "(", "indices", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "indices", ")", ",", "K", ".", "zeros_like", "(", "indices", ")", ")", "]", "\n", "", "return", "K", ".", "concatenate", "(", "res", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_to_contour": [[1759, 1779], ["cv2.findContours", "numpy.uint8", "len", "print", "len", "numpy.squeeze", "numpy.append", "numpy.empty", "lengths.append", "len", "numpy.argmax"], "function", ["None"], ["", "def", "mask_to_contour", "(", "mask", ")", ":", "\n", "    ", "results", "=", "cv2", ".", "findContours", "(", "np", ".", "uint8", "(", "mask", ")", ",", "cv2", ".", "RETR_LIST", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "\n", "if", "cv2", ".", "__version__", "[", ":", "2", "]", "==", "'3.'", ":", "\n", "        ", "coords", "=", "results", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "coords", "=", "results", "[", "0", "]", "\n", "#coords, hierarchy = cv2.findContours(np.uint8(mask), cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)", "\n", "", "if", "len", "(", "coords", ")", ">", "1", ":", "\n", "        ", "print", "(", "'Multiple contours detected'", ")", "\n", "lengths", "=", "[", "]", "\n", "for", "coord", "in", "coords", ":", "\n", "            ", "lengths", ".", "append", "(", "len", "(", "coord", ")", ")", "\n", "", "coords", "=", "[", "coords", "[", "np", ".", "argmax", "(", "lengths", ")", "]", "]", "\n", "", "if", "len", "(", "coords", ")", ">", "0", ":", "\n", "        ", "coord", "=", "coords", "[", "0", "]", "\n", "coord", "=", "np", ".", "squeeze", "(", "coord", ",", "axis", "=", "(", "1", ",", ")", ")", "\n", "coord", "=", "np", ".", "append", "(", "coord", ",", "coord", "[", ":", "1", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "coord", "=", "np", ".", "empty", "(", "0", ")", "\n", "", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.hausdorff_distance": [[1780, 1784], ["scipy.spatial.distance.directed_hausdorff", "scipy.spatial.distance.directed_hausdorff", "max"], "function", ["None"], ["", "def", "hausdorff_distance", "(", "coord1", ",", "coord2", ",", "pixel_spacing", ")", ":", "\n", "    ", "max_of_min1", "=", "scipy", ".", "spatial", ".", "distance", ".", "directed_hausdorff", "(", "coord1", ",", "coord2", ")", "[", "0", "]", "\n", "max_of_min2", "=", "scipy", ".", "spatial", ".", "distance", ".", "directed_hausdorff", "(", "coord2", ",", "coord1", ")", "[", "0", "]", "\n", "return", "max", "(", "max_of_min1", ",", "max_of_min2", ")", "*", "pixel_spacing", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.extract_2D_mask_boundary": [[1786, 1795], ["range", "range"], "function", ["None"], ["", "def", "extract_2D_mask_boundary", "(", "m", ")", ":", "\n", "    ", "w", "=", "m", ".", "shape", "[", "0", "]", "\n", "h", "=", "m", ".", "shape", "[", "1", "]", "\n", "mm", "=", "m", "\n", "for", "wi", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "        ", "for", "hi", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "            ", "if", "m", "[", "wi", ",", "hi", "]", ">", "0", "and", "m", "[", "wi", "-", "1", ",", "hi", "]", ">", "0", "and", "m", "[", "wi", "+", "1", ",", "hi", "]", ">", "0", "and", "m", "[", "wi", ",", "hi", "-", "1", "]", ">", "0", "and", "m", "[", "wi", ",", "hi", "+", "1", "]", ">", "0", ":", "\n", "                ", "mm", "[", "wi", ",", "hi", "]", "=", "0", "\n", "", "", "", "return", "mm", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_Dice": [[1796, 1812], ["numpy.where", "numpy.where", "range", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "p[].flatten", "m[].flatten", "Dices.append", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "volume_Dice", "(", "p_volume", ",", "m_volume", ",", "min_v", ",", "max_v", ")", ":", "\n", "    ", "p", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "p_volume", ">=", "min_v", ",", "p_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "p_volume", ")", ",", "np", ".", "zeros_like", "(", "p_volume", ")", ")", "\n", "m", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "m_volume", ">=", "min_v", ",", "m_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "m_volume", ")", ",", "np", ".", "zeros_like", "(", "m_volume", ")", ")", "\n", "Dices", "=", "[", "]", "\n", "slices", "=", "p", ".", "shape", "[", "0", "]", "\n", "for", "s", "in", "range", "(", "slices", ")", ":", "\n", "        ", "p_s", "=", "p", "[", "s", ",", ":", ",", ":", "]", ".", "flatten", "(", ")", "\n", "m_s", "=", "m", "[", "s", ",", ":", ",", ":", "]", ".", "flatten", "(", ")", "\n", "if", "(", "np", ".", "sum", "(", "m_s", ")", ">", "0", ")", ":", "\n", "            ", "Dice", "=", "2.0", "*", "np", ".", "sum", "(", "p_s", "*", "m_s", ")", "/", "(", "np", ".", "sum", "(", "p_s", ")", "+", "np", ".", "sum", "(", "m_s", ")", ")", "\n", "", "else", ":", "\n", "            ", "Dice", "=", "-", "1", "\n", "", "Dices", ".", "append", "(", "Dice", ")", "\n", "", "return", "Dices", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_Dice_3D": [[1813, 1820], ["numpy.where", "numpy.where", "medpy.metric.binary.dc", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like"], "function", ["None"], ["", "def", "volume_Dice_3D", "(", "p_volume", ",", "m_volume", ",", "min_v", ",", "max_v", ")", ":", "\n", "    ", "p", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "p_volume", ">=", "min_v", ",", "p_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "p_volume", ")", ",", "np", ".", "zeros_like", "(", "p_volume", ")", ")", "\n", "m", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "m_volume", ">=", "min_v", ",", "m_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "m_volume", ")", ",", "np", ".", "zeros_like", "(", "m_volume", ")", ")", "\n", "\n", "return", "dc", "(", "m", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_APD": [[1821, 1844], ["numpy.where", "numpy.where", "range", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "helpers.mask_to_contour", "helpers.mask_to_contour", "APDs.append", "len", "eng.average_perpendicular_distance", "print"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_to_contour", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_to_contour"], ["", "def", "volume_APD", "(", "p_volume", ",", "m_volume", ",", "min_v", ",", "max_v", ",", "pixel_spacing", ",", "eng", ")", ":", "\n", "    ", "p", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "p_volume", ">=", "min_v", ",", "p_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "p_volume", ")", ",", "np", ".", "zeros_like", "(", "p_volume", ")", ")", "\n", "m", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "m_volume", ">=", "min_v", ",", "m_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "m_volume", ")", ",", "np", ".", "zeros_like", "(", "m_volume", ")", ")", "\n", "APDs", "=", "[", "]", "\n", "slices", "=", "p", ".", "shape", "[", "0", "]", "\n", "for", "s", "in", "range", "(", "slices", ")", ":", "\n", "        ", "p_s", "=", "p", "[", "s", ",", ":", ",", ":", "]", "\n", "m_s", "=", "m", "[", "s", ",", ":", ",", ":", "]", "\n", "p_s_ctr", "=", "mask_to_contour", "(", "p_s", "*", "255", ")", "\n", "m_s_ctr", "=", "mask_to_contour", "(", "m_s", "*", "255", ")", "\n", "if", "len", "(", "p_s_ctr", ".", "shape", ")", "==", "2", ":", "\n", "            ", "try", ":", "\n", "                ", "APD", "=", "eng", ".", "average_perpendicular_distance", "(", "p_s_ctr", "[", ":", ",", "0", "]", ",", "p_s_ctr", "[", ":", ",", "1", "]", ",", "\n", "m_s_ctr", "[", ":", ",", "0", "]", ",", "m_s_ctr", "[", ":", ",", "1", "]", ",", "p_s", ".", "shape", "[", "0", "]", ",", "p_s", ".", "shape", "[", "1", "]", ",", "pixel_spacing", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "APD", "=", "-", "2", "\n", "", "", "else", ":", "\n", "            ", "APD", "=", "-", "1", "\n", "", "APDs", ".", "append", "(", "APD", ")", "\n", "", "return", "APDs", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_APD2": [[1845, 1867], ["numpy.where", "range", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "helpers.mask_to_contour", "numpy.loadtxt", "APDs.append", "len", "eng.average_perpendicular_distance", "p_s_ctr[].tolist", "p_s_ctr[].tolist", "m_s_ctr[].tolist", "m_s_ctr[].tolist", "int", "int", "print"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_to_contour"], ["", "def", "volume_APD2", "(", "p_volume", ",", "m_txt", ",", "min_v", ",", "max_v", ",", "pixel_spacing", ",", "to_original_x", ",", "to_original_y", ",", "eng", ")", ":", "\n", "    ", "p", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "p_volume", ">=", "min_v", ",", "p_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "p_volume", ")", ",", "np", ".", "zeros_like", "(", "p_volume", ")", ")", "\n", "APDs", "=", "[", "]", "\n", "slices", "=", "p", ".", "shape", "[", "0", "]", "\n", "for", "s", "in", "range", "(", "slices", ")", ":", "\n", "        ", "p_s", "=", "p", "[", "s", ",", ":", ",", ":", "]", "\n", "p_s_ctr", "=", "mask_to_contour", "(", "p_s", "*", "255", ")", "\n", "m_s_ctr", "=", "np", ".", "loadtxt", "(", "m_txt", "[", "s", "]", ")", "\n", "if", "len", "(", "p_s_ctr", ".", "shape", ")", "==", "2", ":", "\n", "            ", "p_s_ctr", "[", ":", ",", "0", "]", "+=", "to_original_x", "\n", "p_s_ctr", "[", ":", ",", "1", "]", "+=", "to_original_y", "\n", "try", ":", "\n", "                ", "APD", "=", "eng", ".", "average_perpendicular_distance", "(", "p_s_ctr", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", ",", "p_s_ctr", "[", ":", ",", "1", "]", ".", "tolist", "(", ")", ",", "\n", "m_s_ctr", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", ",", "m_s_ctr", "[", ":", ",", "1", "]", ".", "tolist", "(", ")", ",", "int", "(", "p_s", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "p_s", ".", "shape", "[", "1", "]", ")", ",", "pixel_spacing", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "APD", "=", "-", "2", "\n", "", "", "else", ":", "\n", "            ", "APD", "=", "-", "1", "\n", "", "APDs", ".", "append", "(", "APD", ")", "\n", "", "return", "APDs", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_hausdorff_distance": [[1869, 1897], ["numpy.where", "numpy.where", "range", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "HDs.append", "numpy.sum", "m_s.flatten", "numpy.sum", "p_s.flatten", "helpers.mask_to_contour", "helpers.mask_to_contour", "helpers.hausdorff_distance", "helpers.extract_2D_mask_boundary", "helpers.extract_2D_mask_boundary", "numpy.argwhere", "numpy.argwhere", "helpers.hausdorff_distance", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_to_contour", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_to_contour", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.hausdorff_distance", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.extract_2D_mask_boundary", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.extract_2D_mask_boundary", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.hausdorff_distance"], ["", "def", "volume_hausdorff_distance", "(", "p_volume", ",", "m_volume", ",", "min_v", ",", "max_v", ",", "pixel_spacing", ",", "to_contours", ")", ":", "\n", "    ", "p", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "p_volume", ">=", "min_v", ",", "p_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "p_volume", ")", ",", "np", ".", "zeros_like", "(", "p_volume", ")", ")", "\n", "m", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "m_volume", ">=", "min_v", ",", "m_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "m_volume", ")", ",", "np", ".", "zeros_like", "(", "m_volume", ")", ")", "\n", "HDs", "=", "[", "]", "\n", "slices", "=", "p", ".", "shape", "[", "0", "]", "\n", "for", "s", "in", "range", "(", "slices", ")", ":", "\n", "        ", "p_s", "=", "p", "[", "s", ",", ":", ",", ":", "]", "\n", "m_s", "=", "m", "[", "s", ",", ":", ",", ":", "]", "\n", "if", "(", "np", ".", "sum", "(", "m_s", ".", "flatten", "(", ")", ")", ">", "0", ")", ":", "\n", "            ", "if", "(", "np", ".", "sum", "(", "p_s", ".", "flatten", "(", ")", ")", ">", "0", ")", ":", "\n", "                ", "if", "to_contours", ":", "\n", "                    ", "p_s_ctr", "=", "mask_to_contour", "(", "p_s", "*", "255", ")", "\n", "m_s_ctr", "=", "mask_to_contour", "(", "m_s", "*", "255", ")", "\n", "HD", "=", "hausdorff_distance", "(", "p_s_ctr", ",", "m_s_ctr", ",", "pixel_spacing", ")", "\n", "", "else", ":", "\n", "                    ", "p_s_b", "=", "extract_2D_mask_boundary", "(", "p_s", ")", "\n", "m_s_b", "=", "extract_2D_mask_boundary", "(", "m_s", ")", "\n", "p_s_coord", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "p_s_b", ",", "dtype", "=", "bool", ")", ")", "\n", "m_s_coord", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "m_s_b", ",", "dtype", "=", "bool", ")", ")", "\n", "HD", "=", "hausdorff_distance", "(", "p_s_coord", ",", "m_s_coord", ",", "pixel_spacing", ")", "\n", "", "", "else", ":", "\n", "                ", "HD", "=", "-", "2", "\n", "", "", "else", ":", "\n", "            ", "HD", "=", "-", "1", "\n", "", "HDs", ".", "append", "(", "HD", ")", "\n", "", "return", "HDs", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_hausdorff_distance2": [[1899, 1928], ["numpy.where", "range", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "numpy.loadtxt", "HDs.append", "numpy.sum", "p_s.flatten", "helpers.mask_to_contour", "helpers.hausdorff_distance", "helpers.extract_2D_mask_boundary", "numpy.argwhere", "helpers.hausdorff_distance", "print", "numpy.array"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_to_contour", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.hausdorff_distance", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.extract_2D_mask_boundary", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.hausdorff_distance"], ["", "def", "volume_hausdorff_distance2", "(", "p_volume", ",", "m_txt", ",", "min_v", ",", "max_v", ",", "pixel_spacing", ",", "\n", "to_original_x", ",", "to_original_y", ",", "to_contours", ")", ":", "\n", "    ", "p", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "p_volume", ">=", "min_v", ",", "p_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "p_volume", ")", ",", "np", ".", "zeros_like", "(", "p_volume", ")", ")", "\n", "HDs", "=", "[", "]", "\n", "slices", "=", "p", ".", "shape", "[", "0", "]", "\n", "for", "s", "in", "range", "(", "slices", ")", ":", "\n", "        ", "p_s", "=", "p", "[", "s", ",", ":", ",", ":", "]", "\n", "m_s_ctr", "=", "np", ".", "loadtxt", "(", "m_txt", "[", "s", "]", ")", "\n", "if", "(", "np", ".", "sum", "(", "p_s", ".", "flatten", "(", ")", ")", ">", "0", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "to_contours", ":", "\n", "                    ", "p_s_ctr", "=", "mask_to_contour", "(", "p_s", "*", "255", ")", "\n", "p_s_ctr", "[", ":", ",", "0", "]", "+=", "to_original_x", "\n", "p_s_ctr", "[", ":", ",", "1", "]", "+=", "to_original_y", "\n", "HD", "=", "hausdorff_distance", "(", "p_s_ctr", ",", "m_s_ctr", ",", "pixel_spacing", ")", "\n", "", "else", ":", "\n", "                    ", "p_s_b", "=", "extract_2D_mask_boundary", "(", "p_s", ")", "\n", "p_s_coord", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "p_s_b", ",", "dtype", "=", "bool", ")", ")", "\n", "p_s_coord", "[", ":", ",", "0", "]", "+=", "to_original_x", "\n", "p_s_coord", "[", ":", ",", "1", "]", "+=", "to_original_y", "\n", "HD", "=", "hausdorff_distance", "(", "p_s_coord", ",", "m_s_ctr", ",", "pixel_spacing", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "HD", "=", "-", "2", "\n", "", "", "else", ":", "\n", "            ", "HD", "=", "-", "2", "\n", "", "HDs", ".", "append", "(", "HD", ")", "\n", "", "return", "HDs", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_hausdorff_distance_3D": [[1929, 1936], ["numpy.where", "numpy.where", "medpy.metric.binary.hd", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like", "numpy.logical_and", "numpy.ones_like", "numpy.zeros_like"], "function", ["None"], ["", "def", "volume_hausdorff_distance_3D", "(", "p_volume", ",", "m_volume", ",", "min_v", ",", "max_v", ",", "pixel_spacing", ")", ":", "\n", "    ", "p", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "p_volume", ">=", "min_v", ",", "p_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "p_volume", ")", ",", "np", ".", "zeros_like", "(", "p_volume", ")", ")", "\n", "m", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "m_volume", ">=", "min_v", ",", "m_volume", "<=", "max_v", ")", ",", "\n", "np", ".", "ones_like", "(", "m_volume", ")", ",", "np", ".", "zeros_like", "(", "m_volume", ")", ")", "\n", "\n", "return", "hd", "(", "m", ",", "p", ",", "pixel_spacing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mean_of_positive_elements": [[1939, 1941], ["max", "sum", "len"], "function", ["None"], ["", "def", "mean_of_positive_elements", "(", "l", ")", ":", "\n", "    ", "return", "1.0", "*", "sum", "(", "[", "x", "for", "x", "in", "l", "if", "x", ">=", "0", "]", ")", "/", "max", "(", "len", "(", "[", "x", "for", "x", "in", "l", "if", "x", ">=", "0", "]", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_array_values_given_coordinates": [[1945, 1980], ["range", "numpy.reshape", "numpy.tile", "numpy.reshape", "numpy.reshape", "numpy.stack", "numpy.zeros_like", "range", "range", "range"], "function", ["None"], ["", "def", "get_array_values_given_coordinates", "(", "img", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Utility function to get pixel value for coordinate\n    arrays x and y from a  4D array image.\n    Input\n    -----\n    - img: array of shape (B, H, W, C)\n    - x: array of shape (B, H, W, 1)\n    - y: array of shape (B, H, W, 1)\n    Returns\n    -------\n    - output: array of shape (B, H, W, C)\n    \"\"\"", "\n", "shape", "=", "img", ".", "shape", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "height", "=", "shape", "[", "1", "]", "\n", "width", "=", "shape", "[", "2", "]", "\n", "\n", "batch_idx", "=", "range", "(", "0", ",", "batch_size", ")", "\n", "batch_idx", "=", "np", ".", "reshape", "(", "batch_idx", ",", "(", "batch_size", ",", "1", ",", "1", ")", ")", "\n", "b", "=", "np", ".", "tile", "(", "batch_idx", ",", "(", "1", ",", "height", ",", "width", ")", ")", "\n", "\n", "x_r", "=", "np", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "height", ",", "width", ")", ")", "\n", "y_r", "=", "np", ".", "reshape", "(", "y", ",", "(", "batch_size", ",", "height", ",", "width", ")", ")", "\n", "\n", "indices", "=", "np", ".", "stack", "(", "[", "b", ",", "y_r", ",", "x_r", "]", ",", "3", ")", "\n", "\n", "output", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "for", "s", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "h", "in", "range", "(", "height", ")", ":", "\n", "            ", "for", "w", "in", "range", "(", "width", ")", ":", "\n", "                ", "coord", "=", "indices", "[", "s", ",", "h", ",", "w", "]", "\n", "output", "[", "s", ",", "h", ",", "w", ",", ":", "]", "=", "img", "[", "coord", "[", "0", "]", ",", "coord", "[", "1", "]", ",", "coord", "[", "2", "]", ",", ":", "]", "\n", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.inversely_get_array_values_given_coordinates": [[1982, 2017], ["range", "numpy.reshape", "numpy.tile", "numpy.reshape", "numpy.reshape", "numpy.stack", "numpy.zeros_like", "range", "range", "range"], "function", ["None"], ["", "def", "inversely_get_array_values_given_coordinates", "(", "img", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Utility function to get pixel value for coordinate\n    arrays x and y from a  4D array image.\n    Input\n    -----\n    - img: array of shape (B, H, W, C)\n    - x: array of shape (B, H, W, 1)\n    - y: array of shape (B, H, W, 1)\n    Returns\n    -------\n    - output: array of shape (B, H, W, C)\n    \"\"\"", "\n", "shape", "=", "img", ".", "shape", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "height", "=", "shape", "[", "1", "]", "\n", "width", "=", "shape", "[", "2", "]", "\n", "\n", "batch_idx", "=", "range", "(", "0", ",", "batch_size", ")", "\n", "batch_idx", "=", "np", ".", "reshape", "(", "batch_idx", ",", "(", "batch_size", ",", "1", ",", "1", ")", ")", "\n", "b", "=", "np", ".", "tile", "(", "batch_idx", ",", "(", "1", ",", "height", ",", "width", ")", ")", "\n", "\n", "x_r", "=", "np", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "height", ",", "width", ")", ")", "\n", "y_r", "=", "np", ".", "reshape", "(", "y", ",", "(", "batch_size", ",", "height", ",", "width", ")", ")", "\n", "\n", "indices", "=", "np", ".", "stack", "(", "[", "b", ",", "y_r", ",", "x_r", "]", ",", "3", ")", "\n", "\n", "output", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "for", "s", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "h", "in", "range", "(", "height", ")", ":", "\n", "            ", "for", "w", "in", "range", "(", "width", ")", ":", "\n", "                ", "coord", "=", "indices", "[", "s", ",", "h", ",", "w", "]", "\n", "output", "[", "coord", "[", "0", "]", ",", "coord", "[", "1", "]", ",", "coord", "[", "2", "]", ",", ":", "]", "=", "img", "[", "s", ",", "h", ",", "w", ",", ":", "]", "\n", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_array_according_to_flow": [[2020, 2103], ["numpy.meshgrid", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "x.astype.astype", "y.astype.astype", "numpy.concatenate", "int", "int", "range", "range", "numpy.floor().astype", "numpy.floor().astype", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "helpers.get_array_values_given_coordinates", "helpers.get_array_values_given_coordinates", "helpers.get_array_values_given_coordinates", "helpers.get_array_values_given_coordinates", "np.clip.astype", "x1.astype.astype", "np.clip.astype", "y1.astype.astype", "numpy.rint().astype", "numpy.rint().astype", "numpy.clip", "numpy.clip", "helpers.get_array_values_given_coordinates", "numpy.floor", "numpy.floor", "numpy.rint", "numpy.rint"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_array_values_given_coordinates", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_array_values_given_coordinates", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_array_values_given_coordinates", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_array_values_given_coordinates", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_array_values_given_coordinates"], ["", "def", "warp_array_according_to_flow", "(", "img", ",", "flow", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "\"\"\"\n    Function to warp a 4D image array according to \n    a 4D flow array.\n    Input\n    -----\n    - img: array of shape (B, H, W, C)\n    - flow: array of shape (B, H, W, 2)\n    Returns\n    -------\n    - output: array of shape (B, H, W, C)\n    \"\"\"", "\n", "shape", "=", "img", ".", "shape", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "H", "=", "shape", "[", "1", "]", "\n", "W", "=", "shape", "[", "2", "]", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "range", "(", "W", ")", ",", "range", "(", "H", ")", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "-", "1", ")", "\n", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "0", ")", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "-", "1", ")", "\n", "\n", "x", "=", "x", ".", "astype", "(", "float", ")", "\n", "y", "=", "y", ".", "astype", "(", "float", ")", "\n", "grid", "=", "np", ".", "concatenate", "(", "(", "x", ",", "y", ")", ",", "axis", "=", "-", "1", ")", "\n", "# print grid.shape", "\n", "coords", "=", "grid", "+", "flow", "\n", "\n", "max_y", "=", "int", "(", "H", "-", "1", ")", "\n", "max_x", "=", "int", "(", "W", "-", "1", ")", "\n", "\n", "coords_x", "=", "coords", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "coords_y", "=", "coords", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "\n", "if", "mode", "==", "'bilinear'", ":", "\n", "        ", "x0", "=", "coords_x", "\n", "y0", "=", "coords_y", "\n", "x0", "=", "(", "np", ".", "floor", "(", "x0", ")", ")", ".", "astype", "(", "int", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "(", "np", ".", "floor", "(", "y0", ")", ")", ".", "astype", "(", "int", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "# clip to range [0, H/W] to not violate img boundaries", "\n", "x0c", "=", "np", ".", "clip", "(", "x0", ",", "0", ",", "max_x", ")", "\n", "x1c", "=", "np", ".", "clip", "(", "x1", ",", "0", ",", "max_x", ")", "\n", "y0c", "=", "np", ".", "clip", "(", "y0", ",", "0", ",", "max_y", ")", "\n", "y1c", "=", "np", ".", "clip", "(", "y1", ",", "0", ",", "max_y", ")", "\n", "\n", "# get pixel value at corner coords", "\n", "Ia", "=", "get_array_values_given_coordinates", "(", "img", ",", "x0c", ",", "y0c", ")", "\n", "Ib", "=", "get_array_values_given_coordinates", "(", "img", ",", "x0c", ",", "y1c", ")", "\n", "Ic", "=", "get_array_values_given_coordinates", "(", "img", ",", "x1c", ",", "y0c", ")", "\n", "Id", "=", "get_array_values_given_coordinates", "(", "img", ",", "x1c", ",", "y1c", ")", "\n", "\n", "# recast as float for delta calculation", "\n", "x0", "=", "x0", ".", "astype", "(", "float", ")", "\n", "x1", "=", "x1", ".", "astype", "(", "float", ")", "\n", "y0", "=", "y0", ".", "astype", "(", "float", ")", "\n", "y1", "=", "y1", ".", "astype", "(", "float", ")", "\n", "\n", "# calculate deltas", "\n", "wa", "=", "(", "x1", "-", "coords_x", ")", "*", "(", "y1", "-", "coords_y", ")", "\n", "wb", "=", "(", "x1", "-", "coords_x", ")", "*", "(", "coords_y", "-", "y0", ")", "\n", "wc", "=", "(", "coords_x", "-", "x0", ")", "*", "(", "y1", "-", "coords_y", ")", "\n", "wd", "=", "(", "coords_x", "-", "x0", ")", "*", "(", "coords_y", "-", "y0", ")", "\n", "\n", "# compute output", "\n", "out", "=", "wa", "*", "Ia", "+", "wb", "*", "Ib", "+", "wc", "*", "Ic", "+", "wd", "*", "Id", "\n", "return", "out", "\n", "\n", "", "elif", "mode", "==", "'nearest'", ":", "\n", "        ", "x0", "=", "(", "np", ".", "rint", "(", "coords_x", ")", ")", ".", "astype", "(", "int", ")", "\n", "y0", "=", "(", "np", ".", "rint", "(", "coords_y", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# clip to range [0, H/W] to not violate img boundaries", "\n", "x0", "=", "np", ".", "clip", "(", "x0", ",", "0", ",", "max_x", ")", "\n", "y0", "=", "np", ".", "clip", "(", "y0", ",", "0", ",", "max_y", ")", "\n", "\n", "# get pixel value at corner coords", "\n", "out", "=", "get_array_values_given_coordinates", "(", "img", ",", "x0", ",", "y0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.inversely_warp_array_according_to_flow": [[2105, 2152], ["numpy.meshgrid", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "x.astype.astype", "y.astype.astype", "numpy.concatenate", "int", "int", "range", "range", "numpy.rint().astype", "numpy.rint().astype", "numpy.clip", "numpy.clip", "helpers.inversely_get_array_values_given_coordinates", "numpy.rint", "numpy.rint"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.inversely_get_array_values_given_coordinates"], ["", "", "def", "inversely_warp_array_according_to_flow", "(", "img", ",", "flow", ",", "mode", "=", "'nearest'", ")", ":", "\n", "    ", "\"\"\"\n    Function to warp a 4D image array according to \n    a 4D flow array.\n    Input\n    -----\n    - img: array of shape (B, H, W, C)\n    - flow: array of shape (B, H, W, 2)\n    Returns\n    -------\n    - output: array of shape (B, H, W, C)\n    \"\"\"", "\n", "shape", "=", "img", ".", "shape", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "H", "=", "shape", "[", "1", "]", "\n", "W", "=", "shape", "[", "2", "]", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "range", "(", "W", ")", ",", "range", "(", "H", ")", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "-", "1", ")", "\n", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "0", ")", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "-", "1", ")", "\n", "\n", "x", "=", "x", ".", "astype", "(", "float", ")", "\n", "y", "=", "y", ".", "astype", "(", "float", ")", "\n", "grid", "=", "np", ".", "concatenate", "(", "(", "x", ",", "y", ")", ",", "axis", "=", "-", "1", ")", "\n", "# print grid.shape", "\n", "coords", "=", "grid", "+", "flow", "\n", "\n", "max_y", "=", "int", "(", "H", "-", "1", ")", "\n", "max_x", "=", "int", "(", "W", "-", "1", ")", "\n", "\n", "coords_x", "=", "coords", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "coords_y", "=", "coords", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "\n", "if", "mode", "==", "'nearest'", ":", "\n", "        ", "x0", "=", "(", "np", ".", "rint", "(", "coords_x", ")", ")", ".", "astype", "(", "int", ")", "\n", "y0", "=", "(", "np", ".", "rint", "(", "coords_y", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# clip to range [0, H/W] to not violate img boundaries", "\n", "x0", "=", "np", ".", "clip", "(", "x0", ",", "0", ",", "max_x", ")", "\n", "y0", "=", "np", ".", "clip", "(", "y0", ",", "0", ",", "max_y", ")", "\n", "\n", "# get pixel value at corner coords", "\n", "out", "=", "inversely_get_array_values_given_coordinates", "(", "img", ",", "x0", ",", "y0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_array_diffeomorphism_loss": [[2155, 2193], ["numpy.meshgrid", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "x.astype.astype", "y.astype.astype", "numpy.concatenate", "tensorflow.zeros", "numpy.zeros_like", "numpy.zeros_like", "numpy.minimum", "numpy.minimum", "numpy.mean", "range", "range", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "flow_array_diffeomorphism_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "flow", "=", "y_pred", "\n", "\n", "shape", "=", "flow", ".", "shape", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "H", "=", "shape", "[", "1", "]", "\n", "W", "=", "shape", "[", "2", "]", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "range", "(", "W", ")", ",", "range", "(", "H", ")", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "-", "1", ")", "\n", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "0", ")", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "-", "1", ")", "\n", "\n", "x", "=", "x", ".", "astype", "(", "float", ")", "\n", "y", "=", "y", ".", "astype", "(", "float", ")", "\n", "grid", "=", "np", ".", "concatenate", "(", "(", "x", ",", "y", ")", ",", "axis", "=", "-", "1", ")", "\n", "# print grid.shape", "\n", "coords", "=", "grid", "+", "flow", "\n", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "coords_x", "=", "coords", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "coords_y", "=", "coords", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "\n", "coords_x0", "=", "coords_x", "[", ":", ",", ":", ",", "0", ":", "(", "W", "-", "1", ")", ",", ":", "]", "\n", "coords_x1", "=", "coords_x", "[", ":", ",", ":", ",", "1", ":", "W", ",", ":", "]", "\n", "coords_y0", "=", "coords_y", "[", ":", ",", "0", ":", "(", "H", "-", "1", ")", ",", ":", ",", ":", "]", "\n", "coords_y1", "=", "coords_y", "[", ":", ",", "1", ":", "H", ",", ":", ",", ":", "]", "\n", "\n", "zeros_x", "=", "np", ".", "zeros_like", "(", "coords_x0", ")", "\n", "zeros_y", "=", "np", ".", "zeros_like", "(", "coords_y0", ")", "\n", "\n", "x_adjacent_diff_clip", "=", "np", ".", "minimum", "(", "coords_x1", "-", "coords_x0", ",", "zeros_x", ")", "\n", "y_adjacent_diff_clip", "=", "np", ".", "minimum", "(", "coords_y1", "-", "coords_y0", ",", "zeros_y", ")", "\n", "\n", "return", "np", ".", "mean", "(", "np", ".", "sum", "(", "x_adjacent_diff_clip", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "np", ".", "sum", "(", "y_adjacent_diff_clip", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_tensor_values_given_coordinates": [[2196, 2224], ["tensorflow.shape", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stack", "tensorflow.gather_nd"], "function", ["None"], ["", "def", "get_tensor_values_given_coordinates", "(", "img", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Utility function to get pixel value for coordinate\n    tensors x and y from a  4D tensor image.\n    Input\n    -----\n    - img: tensor of shape (B, H, W, C)\n    - x: tensor of shape (B, H, W, 1)\n    - y: tensor of shape (B, H, W, 1)\n    Returns\n    -------\n    - output: tensor of shape (B, H, W, C)\n    \"\"\"", "\n", "shape", "=", "tf", ".", "shape", "(", "img", ")", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "height", "=", "shape", "[", "1", "]", "\n", "width", "=", "shape", "[", "2", "]", "\n", "\n", "batch_idx", "=", "tf", ".", "range", "(", "0", ",", "batch_size", ")", "\n", "batch_idx", "=", "tf", ".", "reshape", "(", "batch_idx", ",", "(", "batch_size", ",", "1", ",", "1", ")", ")", "\n", "b", "=", "tf", ".", "tile", "(", "batch_idx", ",", "(", "1", ",", "height", ",", "width", ")", ")", "\n", "\n", "x_r", "=", "tf", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "height", ",", "width", ")", ")", "\n", "y_r", "=", "tf", ".", "reshape", "(", "y", ",", "(", "batch_size", ",", "height", ",", "width", ")", ")", "\n", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "b", ",", "y_r", ",", "x_r", "]", ",", "3", ")", "\n", "\n", "return", "tf", ".", "gather_nd", "(", "img", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow": [[2226, 2298], ["tensorflow.shape", "tensorflow.meshgrid", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.cast", "tensorflow.concat", "tensorflow.cast", "tensorflow.cast", "tensorflow.zeros", "tensorflow.slice", "tensorflow.slice", "tensorflow.cast", "tensorflow.cast", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "helpers.get_tensor_values_given_coordinates", "helpers.get_tensor_values_given_coordinates", "helpers.get_tensor_values_given_coordinates", "helpers.get_tensor_values_given_coordinates", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.add_n", "tensorflow.range", "tensorflow.range", "tensorflow.floor", "tensorflow.floor"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_tensor_values_given_coordinates", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_tensor_values_given_coordinates", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_tensor_values_given_coordinates", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_tensor_values_given_coordinates"], ["", "def", "warp_tensor_according_to_flow", "(", "img", ",", "flow", ")", ":", "\n", "    ", "\"\"\"\n    Function to warp a 4D image tensor according to \n    a 4D flow tensor.\n    Input\n    -----\n    - img: tensor of shape (B, H, W, C)\n    - flow: tensor of shape (B, H, W, 2)\n    Returns\n    -------\n    - output: tensor of shape (B, H, W, C)\n    \"\"\"", "\n", "shape", "=", "tf", ".", "shape", "(", "img", ")", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "H", "=", "shape", "[", "1", "]", "\n", "W", "=", "shape", "[", "2", "]", "\n", "\n", "x", ",", "y", "=", "tf", ".", "meshgrid", "(", "tf", ".", "range", "(", "W", ")", ",", "tf", ".", "range", "(", "H", ")", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "-", "1", ")", "\n", "\n", "y", "=", "tf", ".", "expand_dims", "(", "y", ",", "0", ")", "\n", "y", "=", "tf", ".", "expand_dims", "(", "y", ",", "-", "1", ")", "\n", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "\n", "grid", "=", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "-", "1", ")", "\n", "# print grid.shape", "\n", "coords", "=", "grid", "+", "flow", "\n", "\n", "max_y", "=", "tf", ".", "cast", "(", "H", "-", "1", ",", "tf", ".", "int32", ")", "\n", "max_x", "=", "tf", ".", "cast", "(", "W", "-", "1", ",", "tf", ".", "int32", ")", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "coords_x", "=", "tf", ".", "slice", "(", "coords", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "coords_y", "=", "tf", ".", "slice", "(", "coords", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "x0", "=", "coords_x", "\n", "y0", "=", "coords_y", "\n", "x0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "x0", ")", ",", "tf", ".", "int32", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "y0", ")", ",", "tf", ".", "int32", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "# clip to range [0, H/W] to not violate img boundaries", "\n", "x0c", "=", "tf", ".", "clip_by_value", "(", "x0", ",", "zero", ",", "max_x", ")", "\n", "x1c", "=", "tf", ".", "clip_by_value", "(", "x1", ",", "zero", ",", "max_x", ")", "\n", "y0c", "=", "tf", ".", "clip_by_value", "(", "y0", ",", "zero", ",", "max_y", ")", "\n", "y1c", "=", "tf", ".", "clip_by_value", "(", "y1", ",", "zero", ",", "max_y", ")", "\n", "\n", "# get pixel value at corner coords", "\n", "Ia", "=", "get_tensor_values_given_coordinates", "(", "img", ",", "x0c", ",", "y0c", ")", "\n", "Ib", "=", "get_tensor_values_given_coordinates", "(", "img", ",", "x0c", ",", "y1c", ")", "\n", "Ic", "=", "get_tensor_values_given_coordinates", "(", "img", ",", "x1c", ",", "y0c", ")", "\n", "Id", "=", "get_tensor_values_given_coordinates", "(", "img", ",", "x1c", ",", "y1c", ")", "\n", "\n", "# recast as float for delta calculation", "\n", "x0", "=", "tf", ".", "cast", "(", "x0", ",", "tf", ".", "float32", ")", "\n", "x1", "=", "tf", ".", "cast", "(", "x1", ",", "tf", ".", "float32", ")", "\n", "y0", "=", "tf", ".", "cast", "(", "y0", ",", "tf", ".", "float32", ")", "\n", "y1", "=", "tf", ".", "cast", "(", "y1", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "# calculate deltas", "\n", "wa", "=", "(", "x1", "-", "coords_x", ")", "*", "(", "y1", "-", "coords_y", ")", "\n", "wb", "=", "(", "x1", "-", "coords_x", ")", "*", "(", "coords_y", "-", "y0", ")", "\n", "wc", "=", "(", "coords_x", "-", "x0", ")", "*", "(", "y1", "-", "coords_y", ")", "\n", "wd", "=", "(", "coords_x", "-", "x0", ")", "*", "(", "coords_y", "-", "y0", ")", "\n", "\n", "# compute output", "\n", "out", "=", "tf", ".", "add_n", "(", "[", "wa", "*", "Ia", ",", "wb", "*", "Ib", ",", "wc", "*", "Ic", ",", "wd", "*", "Id", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_img_comparison_loss": [[2299, 2309], ["tensorflow.slice", "tensorflow.slice", "helpers.warp_tensor_according_to_flow", "keras.backend.sum", "keras.backend.mean"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow"], ["", "def", "flow_warped_img_comparison_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# y_true consists of 2 batch images and 2 batch ground-truths", "\n", "    ", "img0", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "img1", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "flow", "=", "y_pred", "\n", "warped_img0", "=", "warp_tensor_according_to_flow", "(", "img0", ",", "flow", ")", "\n", "diff", "=", "warped_img0", "-", "img1", "\n", "euclidean_dist", "=", "K", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "K", ".", "mean", "(", "euclidean_dist", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_gt_comparison_loss": [[2310, 2340], ["tensorflow.slice", "tensorflow.slice", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "helpers.warp_tensor_according_to_flow", "helpers.warp_tensor_according_to_flow", "helpers.warp_tensor_according_to_flow", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow"], ["", "def", "flow_warped_gt_comparison_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# y_true consists of 2 batch images and 2 batch ground-truths", "\n", "    ", "gt0", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "gt1", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "gt0_1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "1.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "gt0_2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "2.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "gt0_3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "3.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "\n", "gt1_1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "1.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "gt1_2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "2.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "gt1_3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "3.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "\n", "flow", "=", "y_pred", "\n", "\n", "warped_gt0_1", "=", "warp_tensor_according_to_flow", "(", "gt0_1", ",", "flow", ")", "\n", "warped_gt0_2", "=", "warp_tensor_according_to_flow", "(", "gt0_2", ",", "flow", ")", "\n", "warped_gt0_3", "=", "warp_tensor_according_to_flow", "(", "gt0_3", ",", "flow", ")", "\n", "\n", "diff1", "=", "warped_gt0_1", "-", "gt1_1", "\n", "diff2", "=", "warped_gt0_2", "-", "gt1_2", "\n", "diff3", "=", "warped_gt0_3", "-", "gt1_3", "\n", "euclidean_dist", "=", "K", ".", "sum", "(", "diff1", "**", "2", "+", "diff2", "**", "2", "+", "diff3", "**", "2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "K", ".", "mean", "(", "euclidean_dist", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_gt_comparison_dice_loss": [[2342, 2372], ["tensorflow.slice", "tensorflow.slice", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "tensorflow.where", "helpers.warp_tensor_according_to_flow", "helpers.warp_tensor_according_to_flow", "helpers.warp_tensor_according_to_flow", "helpers.dice_coef2_loss", "helpers.dice_coef2_loss", "helpers.dice_coef2_loss", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2_loss", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2_loss", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2_loss"], ["", "def", "flow_warped_gt_comparison_dice_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# y_true consists of 2 batch images and 2 batch ground-truths", "\n", "    ", "gt0", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "gt1", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "gt0_1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "1.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "gt0_2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "2.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "gt0_3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "3.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "\n", "gt1_1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "1.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "gt1_2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "2.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "gt1_3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "3.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "\n", "flow", "=", "y_pred", "\n", "\n", "warped_gt0_1", "=", "warp_tensor_according_to_flow", "(", "gt0_1", ",", "flow", ")", "\n", "warped_gt0_2", "=", "warp_tensor_according_to_flow", "(", "gt0_2", ",", "flow", ")", "\n", "warped_gt0_3", "=", "warp_tensor_according_to_flow", "(", "gt0_3", ",", "flow", ")", "\n", "\n", "loss1", "=", "dice_coef2_loss", "(", "gt1_1", ",", "warped_gt0_1", ",", "smooth", "=", "1.0", ")", "\n", "loss2", "=", "dice_coef2_loss", "(", "gt1_2", ",", "warped_gt0_2", ",", "smooth", "=", "1.0", ")", "\n", "loss3", "=", "dice_coef2_loss", "(", "gt1_3", ",", "warped_gt0_3", ",", "smooth", "=", "1.0", ")", "\n", "\n", "return", "loss1", "+", "loss2", "+", "loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_gt_comparison_dice_loss_lvc": [[2374, 2392], ["tensorflow.slice", "tensorflow.slice", "tensorflow.where", "tensorflow.where", "helpers.warp_tensor_according_to_flow", "helpers.dice_coef2_loss", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2_loss"], ["", "def", "flow_warped_gt_comparison_dice_loss_lvc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# y_true consists of 2 batch images and 2 batch ground-truths", "\n", "    ", "gt0", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "gt1", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "gt0_1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "1.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "\n", "gt1_1", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "1.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "\n", "flow", "=", "y_pred", "\n", "\n", "warped_gt0_1", "=", "warp_tensor_according_to_flow", "(", "gt0_1", ",", "flow", ")", "\n", "\n", "loss1", "=", "dice_coef2_loss", "(", "gt1_1", ",", "warped_gt0_1", ",", "smooth", "=", "0.0", ")", "\n", "\n", "return", "loss1", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_gt_comparison_dice_loss_lvm": [[2393, 2411], ["tensorflow.slice", "tensorflow.slice", "tensorflow.where", "tensorflow.where", "helpers.warp_tensor_according_to_flow", "helpers.dice_coef2_loss", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2_loss"], ["", "def", "flow_warped_gt_comparison_dice_loss_lvm", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# y_true consists of 2 batch images and 2 batch ground-truths", "\n", "    ", "gt0", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "gt1", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "gt0_2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "2.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "\n", "gt1_2", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "2.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "\n", "flow", "=", "y_pred", "\n", "\n", "warped_gt0_2", "=", "warp_tensor_according_to_flow", "(", "gt0_2", ",", "flow", ")", "\n", "\n", "loss2", "=", "dice_coef2_loss", "(", "gt1_2", ",", "warped_gt0_2", ",", "smooth", "=", "0.0", ")", "\n", "\n", "return", "loss2", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_gt_comparison_dice_loss_rvc": [[2412, 2430], ["tensorflow.slice", "tensorflow.slice", "tensorflow.where", "tensorflow.where", "helpers.warp_tensor_according_to_flow", "helpers.dice_coef2_loss", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_tensor_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.dice_coef2_loss"], ["", "def", "flow_warped_gt_comparison_dice_loss_rvc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# y_true consists of 2 batch images and 2 batch ground-truths", "\n", "    ", "gt0", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "gt1", "=", "tf", ".", "slice", "(", "y_true", ",", "[", "0", ",", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "gt0_3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt0", ",", "3.0", "*", "K", ".", "ones_like", "(", "gt0", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt0", ")", ",", "K", ".", "zeros_like", "(", "gt0", ")", ")", "\n", "\n", "gt1_3", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "gt1", ",", "3.0", "*", "K", ".", "ones_like", "(", "gt1", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "gt1", ")", ",", "K", ".", "zeros_like", "(", "gt1", ")", ")", "\n", "\n", "flow", "=", "y_pred", "\n", "\n", "warped_gt0_3", "=", "warp_tensor_according_to_flow", "(", "gt0_3", ",", "flow", ")", "\n", "\n", "loss3", "=", "dice_coef2_loss", "(", "gt1_3", ",", "warped_gt0_3", ",", "smooth", "=", "0.0", ")", "\n", "\n", "return", "loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_diffeomorphism_loss": [[2432, 2470], ["tensorflow.shape", "tensorflow.meshgrid", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.cast", "tensorflow.concat", "tensorflow.zeros", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "keras.backend.zeros_like", "keras.backend.zeros_like", "tensorflow.minimum", "tensorflow.minimum", "keras.backend.mean", "tensorflow.range", "tensorflow.range", "keras.backend.sum", "keras.backend.sum"], "function", ["None"], ["", "def", "flow_diffeomorphism_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "flow", "=", "y_pred", "\n", "\n", "shape", "=", "tf", ".", "shape", "(", "flow", ")", "\n", "batch_size", "=", "shape", "[", "0", "]", "\n", "H", "=", "shape", "[", "1", "]", "\n", "W", "=", "shape", "[", "2", "]", "\n", "\n", "x", ",", "y", "=", "tf", ".", "meshgrid", "(", "tf", ".", "range", "(", "W", ")", ",", "tf", ".", "range", "(", "H", ")", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "-", "1", ")", "\n", "\n", "y", "=", "tf", ".", "expand_dims", "(", "y", ",", "0", ")", "\n", "y", "=", "tf", ".", "expand_dims", "(", "y", ",", "-", "1", ")", "\n", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "\n", "grid", "=", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "-", "1", ")", "\n", "# print grid.shape", "\n", "coords", "=", "grid", "+", "flow", "\n", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "coords_x", "=", "tf", ".", "slice", "(", "coords", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "coords_y", "=", "tf", ".", "slice", "(", "coords", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "coords_x0", "=", "tf", ".", "slice", "(", "coords_x", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "W", "-", "1", ",", "-", "1", "]", ")", "\n", "coords_x1", "=", "tf", ".", "slice", "(", "coords_x", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "W", "-", "1", ",", "-", "1", "]", ")", "\n", "coords_y0", "=", "tf", ".", "slice", "(", "coords_y", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "H", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "coords_y1", "=", "tf", ".", "slice", "(", "coords_y", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "H", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "zeros_x", "=", "K", ".", "zeros_like", "(", "coords_x0", ")", "\n", "zeros_y", "=", "K", ".", "zeros_like", "(", "coords_y0", ")", "\n", "\n", "x_adjacent_diff_clip", "=", "tf", ".", "minimum", "(", "coords_x1", "-", "coords_x0", ",", "zeros_x", ")", "\n", "y_adjacent_diff_clip", "=", "tf", ".", "minimum", "(", "coords_y1", "-", "coords_y0", ",", "zeros_y", ")", "\n", "\n", "return", "K", ".", "mean", "(", "K", ".", "sum", "(", "x_adjacent_diff_clip", "**", "2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "K", ".", "sum", "(", "y_adjacent_diff_clip", "**", "2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_combined_loss": [[2472, 2475], ["helpers.flow_warped_img_comparison_loss", "helpers.flow_diffeomorphism_loss"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_img_comparison_loss", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_diffeomorphism_loss"], ["", "def", "flow_combined_loss", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "1000.0", ")", ":", "\n", "    ", "return", "flow_warped_img_comparison_loss", "(", "y_true", ",", "y_pred", ")", "+", "coeff", "*", "flow_diffeomorphism_loss", "(", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_combined_loss2": [[2476, 2480], ["helpers.flow_warped_img_comparison_loss", "helpers.flow_diffeomorphism_loss", "helpers.flow_warped_gt_comparison_loss"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_img_comparison_loss", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_diffeomorphism_loss", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_gt_comparison_loss"], ["", "def", "flow_combined_loss2", "(", "y_true", ",", "y_pred", ",", "coeff1", "=", "10.0", ",", "coeff2", "=", "1000.0", ")", ":", "\n", "    ", "return", "flow_warped_img_comparison_loss", "(", "y_true", ",", "y_pred", ")", "+", "coeff1", "*", "flow_warped_gt_comparison_loss", "(", "y_true", ",", "y_pred", ")", "+", "coeff2", "*", "flow_diffeomorphism_loss", "(", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_combined_loss3": [[2481, 2485], ["helpers.flow_warped_img_comparison_loss", "helpers.flow_diffeomorphism_loss", "helpers.flow_warped_gt_comparison_dice_loss"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_img_comparison_loss", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_diffeomorphism_loss", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_gt_comparison_dice_loss"], ["", "def", "flow_combined_loss3", "(", "y_true", ",", "y_pred", ",", "coeff1", "=", "100000.0", ",", "coeff2", "=", "1000.0", ")", ":", "\n", "    ", "return", "flow_warped_img_comparison_loss", "(", "y_true", ",", "y_pred", ")", "+", "coeff1", "*", "flow_warped_gt_comparison_dice_loss", "(", "y_true", ",", "y_pred", ")", "+", "coeff2", "*", "flow_diffeomorphism_loss", "(", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_combined_loss4": [[2486, 2489], ["helpers.flow_warped_img_comparison_loss", "helpers.flow_diffeomorphism_loss"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_warped_img_comparison_loss", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_diffeomorphism_loss"], ["", "def", "flow_combined_loss4", "(", "y_true", ",", "y_pred", ",", "coeff1", "=", "100000.0", ",", "coeff2", "=", "1000.0", ")", ":", "\n", "    ", "return", "flow_warped_img_comparison_loss", "(", "y_true", ",", "y_pred", ")", "+", "coeff2", "*", "flow_diffeomorphism_loss", "(", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_loss_array": [[2490, 2499], ["numpy.where", "numpy.log", "numpy.mean", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "numpy.ones_like", "numpy.where", "numpy.equal", "numpy.ones_like", "numpy.ones_like"], "function", ["None"], ["", "def", "infarct_classification_loss_array", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "0.99", ",", "positive_value", "=", "200.0", ")", ":", "\n", "#true_max = np.amax(y_true, axis=(1,2,3))", "\n", "    ", "true_max", "=", "y_true", "\n", "true_class", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "true_max", ",", "positive_value", "*", "np", ".", "ones_like", "(", "true_max", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "true_max", ")", ",", "np", ".", "zeros_like", "(", "true_max", ")", ")", "\n", "\n", "y_pred_log", "=", "np", ".", "log", "(", "coeff", "*", "np", ".", "where", "(", "np", ".", "equal", "(", "true_class", ",", "np", ".", "ones_like", "(", "true_class", ")", ")", ",", "\n", "y_pred", ",", "np", ".", "ones_like", "(", "y_pred", ")", "-", "y_pred", ")", "+", "(", "1.0", "-", "coeff", ")", "/", "2.0", ")", "\n", "return", "np", ".", "mean", "(", "-", "y_pred_log", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_loss": [[2500, 2509], ["tensorflow.where", "tensorflow.log", "keras.backend.mean", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.ones_like", "tensorflow.where", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "infarct_classification_loss", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "0.99", ",", "positive_value", "=", "200.0", ")", ":", "\n", "#true_max = tf.reduce_max(y_true, axis=[1,2,3])", "\n", "    ", "true_max", "=", "y_true", "\n", "true_class", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "true_max", ",", "positive_value", "*", "K", ".", "ones_like", "(", "true_max", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "true_max", ")", ",", "K", ".", "zeros_like", "(", "true_max", ")", ")", "\n", "\n", "y_pred_log", "=", "tf", ".", "log", "(", "coeff", "*", "tf", ".", "where", "(", "K", ".", "equal", "(", "true_class", ",", "K", ".", "ones_like", "(", "true_class", ")", ")", ",", "\n", "y_pred", ",", "K", ".", "ones_like", "(", "y_pred", ")", "-", "y_pred", ")", "+", "(", "1.0", "-", "coeff", ")", "/", "2.0", ")", "\n", "return", "K", ".", "mean", "(", "-", "y_pred_log", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_diff_max_abs": [[2510, 2518], ["tensorflow.where", "keras.backend.max", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.abs", "keras.backend.ones_like"], "function", ["None"], ["", "def", "infarct_classification_diff_max_abs", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "0.99", ",", "positive_value", "=", "200.0", ")", ":", "\n", "#true_max = tf.reduce_max(y_true, axis=[1,2,3])", "\n", "    ", "true_max", "=", "y_true", "\n", "true_class", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "true_max", ",", "positive_value", "*", "K", ".", "ones_like", "(", "true_max", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "true_max", ")", ",", "K", ".", "zeros_like", "(", "true_max", ")", ")", "\n", "\n", "diff", "=", "true_class", "-", "y_pred", "\n", "return", "K", ".", "max", "(", "K", ".", "abs", "(", "diff", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_loss_array2": [[2521, 2530], ["numpy.where", "numpy.log", "numpy.mean", "numpy.greater_equal", "numpy.ones_like", "numpy.zeros_like", "numpy.ones_like", "numpy.where", "numpy.equal", "numpy.ones_like", "numpy.ones_like"], "function", ["None"], ["", "def", "infarct_classification_loss_array2", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "0.99", ",", "positive_value", "=", "100.0", ")", ":", "\n", "#true_max = np.amax(y_true, axis=(1,2,3))", "\n", "    ", "true_max", "=", "y_true", "\n", "true_class", "=", "np", ".", "where", "(", "np", ".", "greater_equal", "(", "true_max", ",", "positive_value", "*", "np", ".", "ones_like", "(", "true_max", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "true_max", ")", ",", "np", ".", "zeros_like", "(", "true_max", ")", ")", "\n", "\n", "y_pred_log", "=", "np", ".", "log", "(", "coeff", "*", "np", ".", "where", "(", "np", ".", "equal", "(", "true_class", ",", "np", ".", "ones_like", "(", "true_class", ")", ")", ",", "\n", "y_pred", ",", "np", ".", "ones_like", "(", "y_pred", ")", "-", "y_pred", ")", "+", "(", "1.0", "-", "coeff", ")", "/", "2.0", ")", "\n", "return", "np", ".", "mean", "(", "-", "y_pred_log", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_loss2": [[2531, 2540], ["tensorflow.where", "tensorflow.log", "keras.backend.mean", "keras.backend.greater_equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.ones_like", "tensorflow.where", "keras.backend.equal", "keras.backend.ones_like", "keras.backend.ones_like"], "function", ["None"], ["", "def", "infarct_classification_loss2", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "0.99", ",", "positive_value", "=", "100.0", ")", ":", "\n", "#true_max = tf.reduce_max(y_true, axis=[1,2,3])", "\n", "    ", "true_max", "=", "y_true", "\n", "true_class", "=", "tf", ".", "where", "(", "K", ".", "greater_equal", "(", "true_max", ",", "positive_value", "*", "K", ".", "ones_like", "(", "true_max", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "true_max", ")", ",", "K", ".", "zeros_like", "(", "true_max", ")", ")", "\n", "\n", "y_pred_log", "=", "tf", ".", "log", "(", "coeff", "*", "tf", ".", "where", "(", "K", ".", "equal", "(", "true_class", ",", "K", ".", "ones_like", "(", "true_class", ")", ")", ",", "\n", "y_pred", ",", "K", ".", "ones_like", "(", "y_pred", ")", "-", "y_pred", ")", "+", "(", "1.0", "-", "coeff", ")", "/", "2.0", ")", "\n", "return", "K", ".", "mean", "(", "-", "y_pred_log", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_diff_max_abs2": [[2541, 2549], ["tensorflow.where", "keras.backend.max", "keras.backend.greater_equal", "keras.backend.ones_like", "keras.backend.zeros_like", "keras.backend.abs", "keras.backend.ones_like"], "function", ["None"], ["", "def", "infarct_classification_diff_max_abs2", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "0.99", ",", "positive_value", "=", "100.0", ")", ":", "\n", "#true_max = tf.reduce_max(y_true, axis=[1,2,3])", "\n", "    ", "true_max", "=", "y_true", "\n", "true_class", "=", "tf", ".", "where", "(", "K", ".", "greater_equal", "(", "true_max", ",", "positive_value", "*", "K", ".", "ones_like", "(", "true_max", ")", ")", ",", "\n", "K", ".", "ones_like", "(", "true_max", ")", ",", "K", ".", "zeros_like", "(", "true_max", ")", ")", "\n", "\n", "diff", "=", "true_class", "-", "y_pred", "\n", "return", "K", ".", "max", "(", "K", ".", "abs", "(", "diff", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_loss_array3": [[2553, 2558], ["numpy.log", "numpy.mean", "numpy.sum"], "function", ["None"], ["", "def", "infarct_classification_loss_array3", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "0.9999", ")", ":", "\n", "    ", "y_pred_clip", "=", "coeff", "*", "y_pred", "+", "(", "1.0", "-", "coeff", ")", "*", "0.2", "\n", "y_pred_clip_log", "=", "np", ".", "log", "(", "y_pred_clip", ")", "\n", "\n", "return", "np", ".", "mean", "(", "np", ".", "sum", "(", "-", "y_true", "*", "y_pred_clip_log", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_loss3": [[2560, 2569], ["tensorflow.log", "keras.backend.mean", "keras.backend.sum"], "function", ["None"], ["", "def", "infarct_classification_loss3", "(", "y_true", ",", "y_pred", ",", "coeff", "=", "0.9999", ")", ":", "\n", "    ", "'''\n    y_true = tf.Print(y_true, [y_true[0], y_true[1], y_true[2], tf.shape(y_true)], \"Inside loss function\")\n    y_pred = tf.Print(y_pred, [y_pred[0], y_pred[1], y_pred[2], tf.shape(y_pred)], \"Inside loss function\")\n    '''", "\n", "y_pred_clip", "=", "coeff", "*", "y_pred", "+", "(", "1.0", "-", "coeff", ")", "*", "0.2", "\n", "y_pred_clip_log", "=", "tf", ".", "log", "(", "y_pred_clip", ")", "\n", "\n", "return", "K", ".", "mean", "(", "K", ".", "sum", "(", "-", "y_true", "*", "y_pred_clip_log", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_diff_max_abs3": [[2570, 2578], ["keras.backend.max", "keras.backend.max", "keras.backend.abs"], "function", ["None"], ["", "def", "infarct_classification_diff_max_abs3", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "'''\n    y_true = tf.Print(y_true, [y_true[0], y_true[1], y_true[2], tf.shape(y_true)], \"Inside metric function\")\n    y_pred = tf.Print(y_pred, [y_pred[0], y_pred[1], y_pred[2], tf.shape(y_pred)], \"Inside metric function\")\n    '''", "\n", "diff", "=", "y_true", "-", "y_pred", "\n", "diff_max", "=", "K", ".", "max", "(", "K", ".", "abs", "(", "diff", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "K", ".", "max", "(", "diff_max", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_diff_max_abs_array3": [[2579, 2583], ["numpy.max", "numpy.max", "numpy.absolute"], "function", ["None"], ["", "def", "infarct_classification_diff_max_abs_array3", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "diff", "=", "y_true", "-", "y_pred", "\n", "diff_max", "=", "np", ".", "max", "(", "np", ".", "absolute", "(", "diff", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "np", ".", "max", "(", "diff_max", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_loss_array4": [[2586, 2590], ["numpy.mean", "numpy.sum"], "function", ["None"], ["", "def", "infarct_classification_loss_array4", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "diff", "=", "y_true", "-", "y_pred", "\n", "\n", "return", "np", ".", "mean", "(", "np", ".", "sum", "(", "diff", "*", "diff", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_loss4": [[2591, 2595], ["keras.backend.mean", "keras.backend.sum"], "function", ["None"], ["", "def", "infarct_classification_loss4", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "diff", "=", "y_true", "-", "y_pred", "\n", "\n", "return", "K", ".", "mean", "(", "K", ".", "sum", "(", "diff", "*", "diff", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.infarct_classification_diff_max_abs4": [[2596, 2600], ["keras.backend.max", "keras.backend.max", "keras.backend.abs"], "function", ["None"], ["", "def", "infarct_classification_diff_max_abs4", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "diff", "=", "y_true", "-", "y_pred", "\n", "diff_max", "=", "K", ".", "max", "(", "K", ".", "abs", "(", "diff", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "K", ".", "max", "(", "diff_max", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.euclidean_distance_loss": [[2602, 2607], ["keras.backend.sum", "keras.backend.mean"], "function", ["None"], ["", "def", "euclidean_distance_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "#y_pred = (1.0 - epsilon) * y_pred + epsilon * 0.5 * K.ones_like(y_pred)", "\n", "    ", "diff", "=", "y_true", "-", "y_pred", "\n", "euclidean_dist", "=", "K", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "[", "1", "]", ")", "\n", "return", "K", ".", "mean", "(", "euclidean_dist", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.max_distance_metric": [[2608, 2612], ["keras.backend.max", "keras.backend.max", "keras.backend.abs"], "function", ["None"], ["", "def", "max_distance_metric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "diff", "=", "y_true", "-", "y_pred", "\n", "diff_max", "=", "K", ".", "max", "(", "K", ".", "abs", "(", "diff", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "K", ".", "max", "(", "diff_max", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_reconstruction_loss": [[2615, 2619], ["keras.backend.sum", "keras.backend.mean"], "function", ["None"], ["", "def", "flow_reconstruction_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "diff", "=", "y_true", "-", "y_pred", "\n", "euclidean_dist", "=", "K", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "K", ".", "mean", "(", "euclidean_dist", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_reconstruction_loss2": [[2620, 2627], ["tensorflow.where", "keras.backend.sum", "keras.backend.mean", "keras.backend.equal", "keras.backend.zeros_like", "keras.backend.ones_like", "keras.backend.zeros_like"], "function", ["None"], ["", "def", "flow_reconstruction_loss2", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_true_binary", "=", "tf", ".", "where", "(", "K", ".", "equal", "(", "y_true", ",", "K", ".", "zeros_like", "(", "y_true", ")", ")", ",", "\n", "K", ".", "zeros_like", "(", "y_true", ")", ",", "K", ".", "ones_like", "(", "y_true", ")", ")", "\n", "diff", "=", "y_true", "-", "y_pred", "\n", "diff", "*=", "y_true_binary", "\n", "euclidean_dist", "=", "K", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "K", ".", "mean", "(", "euclidean_dist", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_reconstruction_loss3": [[2628, 2632], ["keras.backend.sum", "keras.backend.mean"], "function", ["None"], ["", "def", "flow_reconstruction_loss3", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "diff", "=", "y_true", "-", "y_pred", "\n", "euclidean_dist", "=", "K", ".", "sum", "(", "diff", "**", "4", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "K", ".", "mean", "(", "euclidean_dist", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter": [[2634, 2653], ["range", "range", "range", "barycenters.append", "barycenters.append"], "function", ["None"], ["", "def", "mask_barycenter", "(", "mask", ",", "mask_value", "=", "2.0", ")", ":", "\n", "    ", "batch_size", ",", "row", ",", "column", ",", "channel", "=", "mask", ".", "shape", "\n", "barycenters", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "#print(b)", "\n", "        ", "center_x", "=", "0.0", "\n", "center_y", "=", "0.0", "\n", "count", "=", "0.0", "\n", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "mask", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "mask_value", ":", "\n", "                    ", "center_x", "+=", "c", "\n", "center_y", "+=", "r", "\n", "count", "+=", "1", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "barycenters", ".", "append", "(", "[", "center_x", "/", "count", ",", "center_y", "/", "count", "]", ")", "\n", "", "else", ":", "\n", "            ", "barycenters", ".", "append", "(", "[", "-", "1.", ",", "-", "1.", "]", ")", "\n", "", "", "return", "barycenters", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter2": [[2655, 2679], ["int", "range", "range", "range", "barycenters.append", "range", "range", "range", "range", "barycenters_b.append", "barycenters_b.append", "range"], "function", ["None"], ["", "def", "mask_barycenter2", "(", "flow", ",", "mask", ",", "mask_value", "=", "2.0", ")", ":", "\n", "    ", "batch_size", ",", "row", ",", "column", ",", "channel", "=", "flow", ".", "shape", "\n", "u", "=", "int", "(", "channel", "/", "2", ")", "\n", "barycenters", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "#print(b)", "\n", "        ", "center_x", "=", "[", "0.0", "for", "k", "in", "range", "(", "u", ")", "]", "\n", "center_y", "=", "[", "0.0", "for", "k", "in", "range", "(", "u", ")", "]", "\n", "count", "=", "[", "0.0", "for", "k", "in", "range", "(", "u", ")", "]", "\n", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "mask", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "mask_value", ":", "\n", "                    ", "for", "k", "in", "range", "(", "u", ")", ":", "\n", "                        ", "center_x", "[", "k", "]", "+=", "(", "c", "+", "flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "]", ")", "\n", "center_y", "[", "k", "]", "+=", "(", "r", "+", "flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "+", "1", "]", ")", "\n", "count", "[", "k", "]", "+=", "1", "\n", "", "", "", "", "barycenters_b", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "u", ")", ":", "\n", "            ", "if", "count", "[", "k", "]", ">", "0", ":", "\n", "                ", "barycenters_b", ".", "append", "(", "[", "center_x", "[", "k", "]", "/", "count", "[", "k", "]", ",", "center_y", "[", "k", "]", "/", "count", "[", "k", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "barycenters_b", ".", "append", "(", "[", "-", "1.", ",", "-", "1.", "]", ")", "\n", "", "", "barycenters", ".", "append", "(", "barycenters_b", ")", "\n", "", "return", "barycenters", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.masked_flow_transform": [[2681, 2744], ["numpy.zeros_like", "numpy.zeros", "range", "numpy.ones", "numpy.ones", "numpy.ones", "range", "range", "int", "math.sqrt", "int", "range", "math.sqrt", "math.acos", "neighbors.append", "neighbors.append", "neighbors.append", "neighbors.append", "math.acos", "len", "numpy.setdiff1d"], "function", ["None"], ["", "def", "masked_flow_transform", "(", "flow", ",", "mask", ",", "barycenters", ",", "lvm_value", "=", "2.0", ",", "lvc_value", "=", "1.0", ")", ":", "\n", "    ", "batch_size", ",", "row", ",", "column", ",", "channel", "=", "flow", ".", "shape", "\n", "transformed_flow", "=", "np", ".", "zeros_like", "(", "flow", ")", "\n", "angles", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "row", ",", "column", ",", "1", ")", ")", "*", "(", "-", "1.0", ")", "\n", "distance_flows", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "row", ",", "column", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "*", "(", "-", "1.0", ")", "\n", "norms", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "row", ",", "column", ",", "1", ")", ")", "*", "(", "-", "1.0", ")", "\n", "boundary_pixels", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "row", ",", "column", ",", "1", ")", ")", "\n", "\n", "row", "=", "mask", ".", "shape", "[", "1", "]", "\n", "column", "=", "mask", ".", "shape", "[", "2", "]", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "center_x", "=", "barycenters", "[", "b", "]", "[", "0", "]", "\n", "center_y", "=", "barycenters", "[", "b", "]", "[", "1", "]", "\n", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "mask", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "lvm_value", ":", "\n", "                    ", "norm", "=", "math", ".", "sqrt", "(", "(", "c", "-", "center_x", ")", "**", "2", "+", "(", "r", "-", "center_y", ")", "**", "2", ")", "\n", "cos_theta", "=", "(", "c", "-", "center_x", ")", "/", "norm", "\n", "sin_theta", "=", "(", "r", "-", "center_y", ")", "/", "norm", "\n", "u", "=", "int", "(", "channel", "/", "2", ")", "\n", "\n", "for", "k", "in", "range", "(", "u", ")", ":", "\n", "                        ", "original_x", "=", "c", "+", "flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "]", "\n", "original_y", "=", "r", "+", "flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "+", "1", "]", "\n", "original_norm", "=", "math", ".", "sqrt", "(", "(", "original_x", "-", "center_x", ")", "**", "2", "+", "(", "original_y", "-", "center_y", ")", "**", "2", ")", "\n", "cos_original", "=", "(", "original_x", "-", "center_x", ")", "/", "original_norm", "\n", "sin_original", "=", "(", "original_y", "-", "center_y", ")", "/", "original_norm", "\n", "\n", "cos_new", "=", "cos_original", "*", "cos_theta", "+", "sin_original", "*", "sin_theta", "\n", "sin_new", "=", "sin_original", "*", "cos_theta", "-", "cos_original", "*", "sin_theta", "\n", "\n", "transformed_flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "]", "=", "(", "original_norm", "/", "norm", ")", "*", "cos_new", "\n", "transformed_flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "+", "1", "]", "=", "(", "original_norm", "/", "norm", ")", "*", "sin_new", "\n", "\n", "distance_flows", "[", "b", ",", "r", ",", "c", ",", "k", "]", "=", "original_norm", "\n", "\n", "", "if", "sin_theta", ">=", "0", ":", "\n", "                        ", "theta", "=", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "else", ":", "\n", "                        ", "theta", "=", "2", "*", "math", ".", "pi", "-", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "angles", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "theta", "\n", "\n", "norms", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "norm", "\n", "\n", "\n", "neighbors", "=", "[", "]", "\n", "if", "r", ">", "0", ":", "\n", "                        ", "neighbors", ".", "append", "(", "mask", "[", "b", ",", "r", "-", "1", ",", "c", ",", "0", "]", ")", "\n", "", "if", "r", "<", "row", "-", "1", ":", "\n", "                        ", "neighbors", ".", "append", "(", "mask", "[", "b", ",", "r", "+", "1", ",", "c", ",", "0", "]", ")", "\n", "", "if", "c", ">", "0", ":", "\n", "                        ", "neighbors", ".", "append", "(", "mask", "[", "b", ",", "r", ",", "c", "-", "1", ",", "0", "]", ")", "\n", "", "if", "c", "<", "column", "-", "1", ":", "\n", "                        ", "neighbors", ".", "append", "(", "mask", "[", "b", ",", "r", ",", "c", "+", "1", ",", "0", "]", ")", "\n", "\n", "", "if", "lvc_value", "in", "neighbors", ":", "\n", "                        ", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "-", "1", "\n", "", "elif", "len", "(", "np", ".", "setdiff1d", "(", "neighbors", ",", "[", "lvm_value", ",", "lvc_value", "]", ")", ")", ">", "0", ":", "\n", "                        ", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "1", "\n", "\n", "\n", "", "", "", "", "", "return", "transformed_flow", ",", "angles", ",", "distance_flows", ",", "norms", ",", "boundary_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.masked_flow_transform2": [[2747, 2812], ["numpy.zeros_like", "numpy.zeros", "range", "numpy.ones", "numpy.ones", "numpy.ones", "range", "range", "int", "math.sqrt", "int", "range", "math.sqrt", "math.acos", "neighbors.append", "neighbors.append", "neighbors.append", "neighbors.append", "math.acos", "len", "numpy.setdiff1d"], "function", ["None"], ["", "def", "masked_flow_transform2", "(", "flow", ",", "mask", ",", "barycenters", ",", "lvm_value", "=", "2.0", ",", "lvc_value", "=", "1.0", ")", ":", "\n", "    ", "batch_size", ",", "row", ",", "column", ",", "channel", "=", "flow", ".", "shape", "\n", "transformed_flow", "=", "np", ".", "zeros_like", "(", "flow", ")", "\n", "angles", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "row", ",", "column", ",", "1", ")", ")", "*", "(", "-", "1.0", ")", "\n", "distance_flows", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "row", ",", "column", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "*", "(", "-", "1.0", ")", "\n", "norms", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "row", ",", "column", ",", "1", ")", ")", "*", "(", "-", "1.0", ")", "\n", "boundary_pixels", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "row", ",", "column", ",", "1", ")", ")", "\n", "\n", "row", "=", "mask", ".", "shape", "[", "1", "]", "\n", "column", "=", "mask", ".", "shape", "[", "2", "]", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "center_x", "=", "barycenters", "[", "b", "]", "[", "0", "]", "[", "0", "]", "\n", "center_y", "=", "barycenters", "[", "b", "]", "[", "0", "]", "[", "1", "]", "\n", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "mask", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "lvm_value", ":", "\n", "                    ", "norm", "=", "math", ".", "sqrt", "(", "(", "c", "-", "center_x", ")", "**", "2", "+", "(", "r", "-", "center_y", ")", "**", "2", ")", "\n", "cos_theta", "=", "(", "c", "-", "center_x", ")", "/", "norm", "\n", "sin_theta", "=", "(", "r", "-", "center_y", ")", "/", "norm", "\n", "u", "=", "int", "(", "channel", "/", "2", ")", "\n", "\n", "for", "k", "in", "range", "(", "u", ")", ":", "\n", "                        ", "center_x_k", "=", "barycenters", "[", "b", "]", "[", "k", "]", "[", "0", "]", "\n", "center_y_k", "=", "barycenters", "[", "b", "]", "[", "k", "]", "[", "1", "]", "\n", "original_x", "=", "c", "+", "flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "]", "\n", "original_y", "=", "r", "+", "flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "+", "1", "]", "\n", "original_norm", "=", "math", ".", "sqrt", "(", "(", "original_x", "-", "center_x_k", ")", "**", "2", "+", "(", "original_y", "-", "center_y_k", ")", "**", "2", ")", "\n", "cos_original", "=", "(", "original_x", "-", "center_x_k", ")", "/", "original_norm", "\n", "sin_original", "=", "(", "original_y", "-", "center_y_k", ")", "/", "original_norm", "\n", "\n", "cos_new", "=", "cos_original", "*", "cos_theta", "+", "sin_original", "*", "sin_theta", "\n", "sin_new", "=", "sin_original", "*", "cos_theta", "-", "cos_original", "*", "sin_theta", "\n", "\n", "transformed_flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "]", "=", "(", "original_norm", "/", "norm", ")", "*", "cos_new", "\n", "transformed_flow", "[", "b", ",", "r", ",", "c", ",", "2", "*", "k", "+", "1", "]", "=", "(", "original_norm", "/", "norm", ")", "*", "sin_new", "\n", "\n", "distance_flows", "[", "b", ",", "r", ",", "c", ",", "k", "]", "=", "original_norm", "\n", "\n", "", "if", "sin_theta", ">=", "0", ":", "\n", "                        ", "theta", "=", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "else", ":", "\n", "                        ", "theta", "=", "2", "*", "math", ".", "pi", "-", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "angles", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "theta", "\n", "\n", "norms", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "norm", "\n", "\n", "\n", "neighbors", "=", "[", "]", "\n", "if", "r", ">", "0", ":", "\n", "                        ", "neighbors", ".", "append", "(", "mask", "[", "b", ",", "r", "-", "1", ",", "c", ",", "0", "]", ")", "\n", "", "if", "r", "<", "row", "-", "1", ":", "\n", "                        ", "neighbors", ".", "append", "(", "mask", "[", "b", ",", "r", "+", "1", ",", "c", ",", "0", "]", ")", "\n", "", "if", "c", ">", "0", ":", "\n", "                        ", "neighbors", ".", "append", "(", "mask", "[", "b", ",", "r", ",", "c", "-", "1", ",", "0", "]", ")", "\n", "", "if", "c", "<", "column", "-", "1", ":", "\n", "                        ", "neighbors", ".", "append", "(", "mask", "[", "b", ",", "r", ",", "c", "+", "1", ",", "0", "]", ")", "\n", "\n", "", "if", "lvc_value", "in", "neighbors", ":", "\n", "                        ", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "-", "1", "\n", "", "elif", "len", "(", "np", ".", "setdiff1d", "(", "neighbors", ",", "[", "lvm_value", ",", "lvc_value", "]", ")", ")", ">", "0", ":", "\n", "                        ", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "1", "\n", "\n", "\n", "", "", "", "", "", "return", "transformed_flow", ",", "angles", ",", "distance_flows", ",", "norms", ",", "boundary_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_by_zone": [[2818, 2905], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.ones_like", "range", "range", "numpy.random.uniform", "range", "int", "int", "int", "int", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "range", "start.append", "range", "range", "range", "range", "range", "range", "range", "math.sqrt", "int", "int", "int", "numpy.concatenate", "zone_distances[].append", "math.acos", "math.floor", "numpy.concatenate", "zone_inner_border_distances[].append", "math.acos", "numpy.expand_dims", "numpy.concatenate", "zone_outer_border_distances[].append", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "flow_by_zone", "(", "transformed_flow", ",", "angles", ",", "distance_flows", ",", "norms", ",", "boundary_pixels", ",", "num_zone", ",", "start_random", "=", "False", ",", "barycenters", "=", "None", ",", "rv_barycenters", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "row", ",", "column", ",", "channel", "=", "transformed_flow", ".", "shape", "\n", "if", "start_random", ":", "\n", "        ", "start", "=", "[", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.0", ",", "high", "=", "2", "*", "math", ".", "pi", ")", "for", "x", "in", "range", "(", "batch_size", ")", "]", "\n", "", "elif", "(", "barycenters", "is", "None", ")", "or", "(", "rv_barycenters", "is", "None", ")", ":", "\n", "        ", "start", "=", "[", "0.0", "for", "x", "in", "range", "(", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "        ", "start", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "center_x", "=", "barycenters", "[", "b", "]", "[", "0", "]", "\n", "center_y", "=", "barycenters", "[", "b", "]", "[", "1", "]", "\n", "rv_center_x", "=", "rv_barycenters", "[", "b", "]", "[", "0", "]", "\n", "rv_center_y", "=", "rv_barycenters", "[", "b", "]", "[", "1", "]", "\n", "\n", "if", "rv_center_x", ">=", "0.", "and", "rv_center_y", ">=", "0.", ":", "\n", "                ", "norm", "=", "math", ".", "sqrt", "(", "(", "rv_center_x", "-", "center_x", ")", "**", "2", "+", "(", "rv_center_y", "-", "center_y", ")", "**", "2", ")", "\n", "cos_theta", "=", "(", "rv_center_x", "-", "center_x", ")", "/", "norm", "\n", "sin_theta", "=", "(", "rv_center_y", "-", "center_y", ")", "/", "norm", "\n", "if", "sin_theta", ">=", "0", ":", "\n", "                    ", "theta", "=", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "else", ":", "\n", "                    ", "theta", "=", "2", "*", "math", ".", "pi", "-", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "", "else", ":", "\n", "                ", "theta", "=", "0.", "\n", "", "start", ".", "append", "(", "theta", ")", "\n", "\n", "\n", "", "", "step", "=", "2", "*", "math", ".", "pi", "/", "num_zone", "\n", "\n", "zone_avg_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "channel", ")", ")", "\n", "zone_avg_inner_border_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_inner_border_normalized_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_outer_border_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_outer_border_normalized_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_myo_thickness_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_map", "=", "np", ".", "ones_like", "(", "angles", ")", "*", "(", "-", "1.0", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "zone_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "channel", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_inner_border_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_inner_border_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_outer_border_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_outer_border_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "angles", "[", "b", ",", "r", ",", "c", ",", "0", "]", ">=", "0", ":", "\n", "                    ", "theta", "=", "angles", "[", "b", ",", "r", ",", "c", ",", "0", "]", "\n", "norm", "=", "norms", "[", "b", ",", "r", ",", "c", ",", "0", "]", "\n", "diff", "=", "theta", "-", "start", "[", "b", "]", "\n", "if", "diff", "<", "0", ":", "\n", "                      ", "diff", "+=", "2", "*", "math", ".", "pi", "\n", "", "zone_idx", "=", "int", "(", "math", ".", "floor", "(", "diff", "/", "step", ")", ")", "\n", "zone_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "transformed_flow", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "zone_map", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "zone_idx", "\n", "\n", "if", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "-", "1", ":", "\n", "                        ", "zone_inner_border_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_inner_border_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "distance_flows", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_inner_border_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "\n", "", "elif", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "1", ":", "\n", "                        ", "zone_outer_border_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_outer_border_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "distance_flows", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_outer_border_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "\n", "", "", "", "", "for", "k", "in", "range", "(", "num_zone", ")", ":", "\n", "            ", "zone_avg_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_dist", "=", "np", ".", "average", "(", "zone_distances", "[", "k", "]", ")", "\n", "\n", "\n", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_outer_border_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_outer_border_dist", "=", "np", ".", "average", "(", "zone_outer_border_distances", "[", "k", "]", ")", "\n", "#zone_avg_outer_border_normalized_flow[b, k, :] = zone_avg_outer_border_flow[b, k, :] / zone_avg_dist", "\n", "zone_avg_outer_border_normalized_flow", "[", "b", ",", "k", ",", ":", "]", "=", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "/", "zone_avg_outer_border_dist", "\n", "\n", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_inner_border_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_inner_border_dist", "=", "np", ".", "average", "(", "zone_inner_border_distances", "[", "k", "]", ")", "\n", "#zone_avg_inner_border_normalized_flow[b, k, :] = zone_avg_inner_border_flow[b, k, :] / zone_avg_dist", "\n", "#zone_avg_inner_border_normalized_flow[b, k, :] = zone_avg_inner_border_flow[b, k, :] / zone_avg_inner_border_dist", "\n", "zone_avg_inner_border_normalized_flow", "[", "b", ",", "k", ",", ":", "]", "=", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", "/", "zone_avg_outer_border_dist", "\n", "\n", "\n", "#zone_avg_myo_thickness_flow[b, k, :] = (zone_avg_outer_border_flow[b, k, :] - zone_avg_inner_border_flow[b, k, :]) / (zone_avg_outer_border_dist - zone_avg_inner_border_dist)", "\n", "zone_avg_myo_thickness_flow", "[", "b", ",", "k", ",", ":", "]", "=", "(", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "-", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", ")", "/", "zone_avg_outer_border_dist", "\n", "#zone_avg_myo_thickness_flow[b, k, :] = (zone_avg_outer_border_flow[b, k, :] - zone_avg_inner_border_flow[b, k, :]) / zone_avg_dist", "\n", "\n", "\n", "", "", "return", "zone_avg_flow", ",", "zone_avg_inner_border_normalized_flow", ",", "zone_avg_outer_border_normalized_flow", ",", "zone_avg_myo_thickness_flow", ",", "zone_map", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_by_zone2": [[2909, 2997], ["int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.ones_like", "range", "range", "numpy.random.uniform", "range", "int", "int", "int", "int", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "range", "start.append", "range", "range", "range", "range", "range", "range", "range", "math.sqrt", "int", "int", "int", "numpy.concatenate", "zone_distances[].append", "math.acos", "math.floor", "numpy.concatenate", "zone_inner_border_distances[].append", "math.acos", "numpy.expand_dims", "numpy.concatenate", "zone_outer_border_distances[].append", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "flow_by_zone2", "(", "transformed_flow", ",", "angles", ",", "distance_flows", ",", "norms", ",", "boundary_pixels", ",", "num_zone", ",", "start_random", "=", "False", ",", "barycenters", "=", "None", ",", "rv_barycenters", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "row", ",", "column", ",", "channel", "=", "transformed_flow", ".", "shape", "\n", "u", "=", "int", "(", "channel", "/", "2", ")", "\n", "if", "start_random", ":", "\n", "        ", "start", "=", "[", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.0", ",", "high", "=", "2", "*", "math", ".", "pi", ")", "for", "x", "in", "range", "(", "batch_size", ")", "]", "\n", "", "elif", "(", "barycenters", "is", "None", ")", "or", "(", "rv_barycenters", "is", "None", ")", ":", "\n", "        ", "start", "=", "[", "0.0", "for", "x", "in", "range", "(", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "        ", "start", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "center_x", "=", "barycenters", "[", "b", "]", "[", "0", "]", "[", "0", "]", "\n", "center_y", "=", "barycenters", "[", "b", "]", "[", "0", "]", "[", "1", "]", "\n", "rv_center_x", "=", "rv_barycenters", "[", "b", "]", "[", "0", "]", "[", "0", "]", "\n", "rv_center_y", "=", "rv_barycenters", "[", "b", "]", "[", "0", "]", "[", "1", "]", "\n", "\n", "if", "rv_center_x", ">=", "0.", "and", "rv_center_y", ">=", "0.", ":", "\n", "                ", "norm", "=", "math", ".", "sqrt", "(", "(", "rv_center_x", "-", "center_x", ")", "**", "2", "+", "(", "rv_center_y", "-", "center_y", ")", "**", "2", ")", "\n", "cos_theta", "=", "(", "rv_center_x", "-", "center_x", ")", "/", "norm", "\n", "sin_theta", "=", "(", "rv_center_y", "-", "center_y", ")", "/", "norm", "\n", "if", "sin_theta", ">=", "0", ":", "\n", "                    ", "theta", "=", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "else", ":", "\n", "                    ", "theta", "=", "2", "*", "math", ".", "pi", "-", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "", "else", ":", "\n", "                ", "theta", "=", "0.", "\n", "", "start", ".", "append", "(", "theta", ")", "\n", "\n", "\n", "", "", "step", "=", "2", "*", "math", ".", "pi", "/", "num_zone", "\n", "\n", "zone_avg_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "channel", ")", ")", "\n", "zone_avg_inner_border_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_inner_border_normalized_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_outer_border_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_outer_border_normalized_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_myo_thickness_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_map", "=", "np", ".", "ones_like", "(", "angles", ")", "*", "(", "-", "1.0", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "zone_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "channel", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_inner_border_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_inner_border_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_outer_border_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_outer_border_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "angles", "[", "b", ",", "r", ",", "c", ",", "0", "]", ">=", "0", ":", "\n", "                    ", "theta", "=", "angles", "[", "b", ",", "r", ",", "c", ",", "0", "]", "\n", "norm", "=", "norms", "[", "b", ",", "r", ",", "c", ",", "0", "]", "\n", "diff", "=", "theta", "-", "start", "[", "b", "]", "\n", "if", "diff", "<", "0", ":", "\n", "                      ", "diff", "+=", "2", "*", "math", ".", "pi", "\n", "", "zone_idx", "=", "int", "(", "math", ".", "floor", "(", "diff", "/", "step", ")", ")", "\n", "zone_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "transformed_flow", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "zone_map", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "zone_idx", "\n", "\n", "if", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "-", "1", ":", "\n", "                        ", "zone_inner_border_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_inner_border_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "distance_flows", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_inner_border_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "\n", "", "elif", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "1", ":", "\n", "                        ", "zone_outer_border_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_outer_border_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "distance_flows", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_outer_border_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "\n", "", "", "", "", "for", "k", "in", "range", "(", "num_zone", ")", ":", "\n", "            ", "zone_avg_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_dist", "=", "np", ".", "average", "(", "zone_distances", "[", "k", "]", ")", "\n", "\n", "\n", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_outer_border_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_outer_border_dist", "=", "np", ".", "average", "(", "zone_outer_border_distances", "[", "k", "]", ")", "\n", "#zone_avg_outer_border_normalized_flow[b, k, :] = zone_avg_outer_border_flow[b, k, :] / zone_avg_dist", "\n", "zone_avg_outer_border_normalized_flow", "[", "b", ",", "k", ",", ":", "]", "=", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "/", "zone_avg_outer_border_dist", "\n", "\n", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_inner_border_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_inner_border_dist", "=", "np", ".", "average", "(", "zone_inner_border_distances", "[", "k", "]", ")", "\n", "#zone_avg_inner_border_normalized_flow[b, k, :] = zone_avg_inner_border_flow[b, k, :] / zone_avg_dist", "\n", "#zone_avg_inner_border_normalized_flow[b, k, :] = zone_avg_inner_border_flow[b, k, :] / zone_avg_inner_border_dist", "\n", "zone_avg_inner_border_normalized_flow", "[", "b", ",", "k", ",", ":", "]", "=", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", "/", "zone_avg_outer_border_dist", "\n", "\n", "\n", "#zone_avg_myo_thickness_flow[b, k, :] = (zone_avg_outer_border_flow[b, k, :] - zone_avg_inner_border_flow[b, k, :]) / (zone_avg_outer_border_dist - zone_avg_inner_border_dist)", "\n", "zone_avg_myo_thickness_flow", "[", "b", ",", "k", ",", ":", "]", "=", "(", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "-", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", ")", "/", "zone_avg_outer_border_dist", "\n", "#zone_avg_myo_thickness_flow[b, k, :] = (zone_avg_outer_border_flow[b, k, :] - zone_avg_inner_border_flow[b, k, :]) / zone_avg_dist", "\n", "\n", "\n", "", "", "return", "zone_avg_flow", ",", "zone_avg_inner_border_normalized_flow", ",", "zone_avg_outer_border_normalized_flow", ",", "zone_avg_myo_thickness_flow", ",", "zone_map", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_by_zone3": [[3000, 3095], ["int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.ones_like", "range", "range", "numpy.random.uniform", "range", "int", "int", "int", "int", "int", "int", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "range", "start.append", "range", "range", "range", "range", "range", "range", "range", "numpy.sqrt", "range", "math.sqrt", "int", "int", "int", "numpy.concatenate", "numpy.concatenate", "zone_distances[].append", "math.acos", "math.floor", "numpy.concatenate", "zone_inner_border_distances[].append", "numpy.var", "numpy.var", "math.acos", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "zone_outer_border_distances[].append", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "flow_by_zone3", "(", "transformed_flow", ",", "flow", ",", "angles", ",", "distance_flows", ",", "norms", ",", "boundary_pixels", ",", "num_zone", ",", "start_random", "=", "False", ",", "barycenters", "=", "None", ",", "rv_barycenters", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "row", ",", "column", ",", "channel", "=", "transformed_flow", ".", "shape", "\n", "u", "=", "int", "(", "channel", "/", "2", ")", "\n", "if", "start_random", ":", "\n", "        ", "start", "=", "[", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.0", ",", "high", "=", "2", "*", "math", ".", "pi", ")", "for", "x", "in", "range", "(", "batch_size", ")", "]", "\n", "", "elif", "(", "barycenters", "is", "None", ")", "or", "(", "rv_barycenters", "is", "None", ")", ":", "\n", "        ", "start", "=", "[", "0.0", "for", "x", "in", "range", "(", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "        ", "start", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "center_x", "=", "barycenters", "[", "b", "]", "[", "0", "]", "[", "0", "]", "\n", "center_y", "=", "barycenters", "[", "b", "]", "[", "0", "]", "[", "1", "]", "\n", "rv_center_x", "=", "rv_barycenters", "[", "b", "]", "[", "0", "]", "[", "0", "]", "\n", "rv_center_y", "=", "rv_barycenters", "[", "b", "]", "[", "0", "]", "[", "1", "]", "\n", "\n", "if", "rv_center_x", ">=", "0.", "and", "rv_center_y", ">=", "0.", ":", "\n", "                ", "norm", "=", "math", ".", "sqrt", "(", "(", "rv_center_x", "-", "center_x", ")", "**", "2", "+", "(", "rv_center_y", "-", "center_y", ")", "**", "2", ")", "\n", "cos_theta", "=", "(", "rv_center_x", "-", "center_x", ")", "/", "norm", "\n", "sin_theta", "=", "(", "rv_center_y", "-", "center_y", ")", "/", "norm", "\n", "if", "sin_theta", ">=", "0", ":", "\n", "                    ", "theta", "=", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "else", ":", "\n", "                    ", "theta", "=", "2", "*", "math", ".", "pi", "-", "math", ".", "acos", "(", "cos_theta", ")", "\n", "", "", "else", ":", "\n", "                ", "theta", "=", "0.", "\n", "", "start", ".", "append", "(", "theta", ")", "\n", "\n", "\n", "", "", "step", "=", "2", "*", "math", ".", "pi", "/", "num_zone", "\n", "\n", "zone_avg_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "channel", ")", ")", "\n", "zone_std_original_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_inner_border_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_inner_border_normalized_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_outer_border_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_outer_border_normalized_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_avg_myo_thickness_flow", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_zone", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "\n", "zone_map", "=", "np", ".", "ones_like", "(", "angles", ")", "*", "(", "-", "1.0", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "zone_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "channel", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_original_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "channel", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_inner_border_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_inner_border_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_outer_border_flows", "=", "[", "np", ".", "zeros", "(", "(", "0", ",", "int", "(", "channel", "/", "2", ")", ")", ")", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "zone_outer_border_distances", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_zone", ")", "]", "\n", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "angles", "[", "b", ",", "r", ",", "c", ",", "0", "]", ">=", "0", ":", "\n", "                    ", "theta", "=", "angles", "[", "b", ",", "r", ",", "c", ",", "0", "]", "\n", "norm", "=", "norms", "[", "b", ",", "r", ",", "c", ",", "0", "]", "\n", "diff", "=", "theta", "-", "start", "[", "b", "]", "\n", "if", "diff", "<", "0", ":", "\n", "                      ", "diff", "+=", "2", "*", "math", ".", "pi", "\n", "", "zone_idx", "=", "int", "(", "math", ".", "floor", "(", "diff", "/", "step", ")", ")", "\n", "zone_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "transformed_flow", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_original_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_original_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "flow", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "zone_map", "[", "b", ",", "r", ",", "c", ",", "0", "]", "=", "zone_idx", "\n", "\n", "if", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "-", "1", ":", "\n", "                        ", "zone_inner_border_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_inner_border_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "distance_flows", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_inner_border_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "\n", "", "elif", "boundary_pixels", "[", "b", ",", "r", ",", "c", ",", "0", "]", "==", "1", ":", "\n", "                        ", "zone_outer_border_flows", "[", "zone_idx", "]", "=", "np", ".", "concatenate", "(", "(", "zone_outer_border_flows", "[", "zone_idx", "]", ",", "np", ".", "expand_dims", "(", "distance_flows", "[", "b", ",", "r", ",", "c", ",", ":", "]", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "zone_outer_border_distances", "[", "zone_idx", "]", ".", "append", "(", "norm", ")", "\n", "\n", "", "", "", "", "for", "k", "in", "range", "(", "num_zone", ")", ":", "\n", "            ", "zone_avg_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_dist", "=", "np", ".", "average", "(", "zone_distances", "[", "k", "]", ")", "\n", "zone_std_original_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "zone_original_flows", "[", "k", "]", "[", ":", ",", ":", ":", "2", "]", ",", "axis", "=", "0", ")", "+", "np", ".", "var", "(", "zone_original_flows", "[", "k", "]", "[", ":", ",", "1", ":", ":", "2", "]", ",", "axis", "=", "0", ")", ")", "/", "zone_avg_dist", "\n", "\n", "\n", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_outer_border_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_outer_border_dist", "=", "np", ".", "average", "(", "zone_outer_border_distances", "[", "k", "]", ")", "\n", "#zone_avg_outer_border_normalized_flow[b, k, :] = zone_avg_outer_border_flow[b, k, :] / zone_avg_dist", "\n", "#zone_avg_outer_border_normalized_flow[b, k, :] = zone_avg_outer_border_flow[b, k, :] / zone_avg_outer_border_dist", "\n", "zone_avg_outer_border_normalized_flow", "[", "b", ",", "k", ",", ":", "]", "=", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "\n", "\n", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", "=", "np", ".", "average", "(", "zone_inner_border_flows", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "zone_avg_inner_border_dist", "=", "np", ".", "average", "(", "zone_inner_border_distances", "[", "k", "]", ")", "\n", "#zone_avg_inner_border_normalized_flow[b, k, :] = zone_avg_inner_border_flow[b, k, :] / zone_avg_dist", "\n", "#zone_avg_inner_border_normalized_flow[b, k, :] = zone_avg_inner_border_flow[b, k, :] / zone_avg_inner_border_dist", "\n", "#zone_avg_inner_border_normalized_flow[b, k, :] = zone_avg_inner_border_flow[b, k, :] / zone_avg_outer_border_dist", "\n", "zone_avg_inner_border_normalized_flow", "[", "b", ",", "k", ",", ":", "]", "=", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", "\n", "\n", "\n", "#zone_avg_myo_thickness_flow[b, k, :] = (zone_avg_outer_border_flow[b, k, :] - zone_avg_inner_border_flow[b, k, :]) / (zone_avg_outer_border_dist - zone_avg_inner_border_dist)", "\n", "#zone_avg_myo_thickness_flow[b, k, :] = (zone_avg_outer_border_flow[b, k, :] - zone_avg_inner_border_flow[b, k, :]) / zone_avg_outer_border_dist", "\n", "zone_avg_myo_thickness_flow", "[", "b", ",", "k", ",", ":", "]", "=", "(", "zone_avg_outer_border_flow", "[", "b", ",", "k", ",", ":", "]", "-", "zone_avg_inner_border_flow", "[", "b", ",", "k", ",", ":", "]", ")", "\n", "#zone_avg_myo_thickness_flow[b, k, :] = (zone_avg_outer_border_flow[b, k, :] - zone_avg_inner_border_flow[b, k, :]) / zone_avg_dist", "\n", "\n", "\n", "", "", "return", "zone_avg_flow", ",", "zone_std_original_flow", ",", "zone_avg_inner_border_normalized_flow", ",", "zone_avg_outer_border_normalized_flow", ",", "zone_avg_myo_thickness_flow", ",", "zone_map", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.avg_flow_to_arrow_map": [[3106, 3239], ["range", "range", "os.path.isfile", "numpy.concatenate", "helpers.multiply_resolution", "helpers.multiply_resolution", "cv2.imwrite", "os.path.isfile", "cv2.cvtColor", "background_imgs.append", "math.sqrt", "range", "int", "cv2.imwrite", "numpy.reshape", "numpy.zeros", "numpy.array", "numpy.zeros", "int", "int", "helpers.mask_barycenter", "int", "math.sqrt", "cv2.arrowedLine", "numpy.array", "image2.load_img2", "round", "round", "cv2.circle", "cv2.circle", "cv2.circle", "image2.load_img2", "numpy.where", "numpy.where", "numpy.where", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "str().zfill", "numpy.equal", "numpy.zeros_like", "numpy.equal", "numpy.zeros_like", "numpy.mod", "numpy.equal", "numpy.zeros_like", "numpy.mod", "round", "round", "round", "round", "round", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "str", "numpy.ones_like", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.multiply_resolution", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.multiply_resolution", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2"], ["", "def", "avg_flow_to_arrow_map", "(", "avg_flow", ",", "avg_inner_border_normalized_flow", ",", "avg_outer_border_normalized_flow", ",", "\n", "avg_myo_thickness_flow", ",", "zone_map", ",", "boundary_pixels", ",", "barycenters", ",", "\n", "background_files", ",", "zoned_img", ",", "output_file_prefix", ",", "zfill_num", ",", "\n", "shape", "=", "(", "128", ",", "128", ",", "2", ")", ",", "\n", "resolution_multiplier", "=", "1", ",", "plot_myo_thickness", "=", "True", ")", ":", "\n", "    ", "background_imgs", "=", "[", "]", "\n", "for", "background_file", "in", "background_files", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "background_file", ")", ":", "\n", "#img = cv2.imread(background_file, cv2.IMREAD_GRAYSCALE)", "\n", "            ", "img", "=", "np", ".", "array", "(", "load_img2", "(", "background_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "background_imgs", ".", "append", "(", "img", ")", "\n", "\n", "\n", "", "num_zone", "=", "avg_flow", ".", "shape", "[", "1", "]", "\n", "channel", "=", "avg_flow", ".", "shape", "[", "2", "]", "\n", "barycenter_x", "=", "barycenters", "[", "0", "]", "[", "0", "]", "\n", "barycenter_y", "=", "barycenters", "[", "0", "]", "[", "1", "]", "\n", "start_point", "=", "(", "int", "(", "round", "(", "barycenter_x", ")", ")", "*", "resolution_multiplier", ",", "\n", "int", "(", "round", "(", "barycenter_y", ")", ")", "*", "resolution_multiplier", ")", "\n", "for", "k", "in", "range", "(", "num_zone", ")", ":", "\n", "        ", "zone_barycenter_x", ",", "zone_barycenter_y", "=", "mask_barycenter", "(", "zone_map", ",", "mask_value", "=", "k", ")", "[", "0", "]", "\n", "norm_k", "=", "math", ".", "sqrt", "(", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "**", "2", "+", "\n", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "**", "2", ")", "\n", "cos_k", "=", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "/", "norm_k", "\n", "sin_k", "=", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "/", "norm_k", "\n", "\n", "for", "t", "in", "range", "(", "int", "(", "channel", "/", "2", ")", ")", ":", "\n", "            ", "if", "t", "==", "0", ":", "\n", "                ", "t_minus", "=", "int", "(", "channel", "/", "2", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "t_minus", "=", "t", "-", "1", "\n", "\n", "", "previous_original_x", "=", "avg_flow", "[", "0", ",", "k", ",", "2", "*", "t_minus", "]", "\n", "previous_original_y", "=", "avg_flow", "[", "0", ",", "k", ",", "2", "*", "t_minus", "+", "1", "]", "\n", "previous_inner_dist", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "previous_outer_dist", "=", "avg_outer_border_normalized_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "previous_myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "\n", "inner_dist", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "outer_dist", "=", "avg_outer_border_normalized_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "original_x", "=", "avg_flow", "[", "0", ",", "k", ",", "2", "*", "t", "]", "\n", "original_y", "=", "avg_flow", "[", "0", ",", "k", ",", "2", "*", "t", "+", "1", "]", "\n", "original_norm", "=", "math", ".", "sqrt", "(", "original_x", "**", "2", "+", "original_y", "**", "2", ")", "\n", "original_cos_t", "=", "original_x", "/", "original_norm", "\n", "original_sin_t", "=", "original_y", "/", "original_norm", "\n", "\n", "converted_cos_t", "=", "cos_k", "*", "original_cos_t", "-", "sin_k", "*", "original_sin_t", "\n", "converted_sin_t", "=", "sin_k", "*", "original_cos_t", "+", "cos_k", "*", "original_sin_t", "\n", "converted_norm", "=", "norm_k", "*", "(", "original_norm", "/", "1.0", ")", "\n", "\n", "converted_x", "=", "barycenter_x", "+", "converted_norm", "*", "converted_cos_t", "\n", "converted_y", "=", "barycenter_y", "+", "converted_norm", "*", "converted_sin_t", "\n", "end_point", "=", "(", "int", "(", "round", "(", "converted_x", ")", ")", "*", "resolution_multiplier", ",", "\n", "int", "(", "round", "(", "converted_y", ")", ")", "*", "resolution_multiplier", ")", "\n", "\n", "arrow_color", "=", "(", "0", ",", "\n", "200", "+", "int", "(", "1000", "*", "(", "original_x", "-", "previous_original_x", ")", "/", "previous_original_x", ")", ",", "\n", "150", "-", "int", "(", "1000", "*", "(", "original_x", "-", "previous_original_x", ")", "/", "previous_original_x", ")", ")", "\n", "\n", "cv2", ".", "arrowedLine", "(", "background_imgs", "[", "t", "]", ",", "start_point", ",", "end_point", ",", "\n", "arrow_color", ",", "thickness", "=", "1", ",", "shift", "=", "0", ",", "tipLength", "=", "0.03", ")", "\n", "\n", "circle_color_inner", "=", "(", "200", "+", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ",", "\n", "50", "+", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ",", "\n", "50", "-", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ")", "\n", "\n", "circle_color_outer", "=", "(", "200", "+", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ",", "\n", "50", "+", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ",", "\n", "50", "-", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ")", "\n", "\n", "circle_color_myo", "=", "(", "200", "+", "int", "(", "400", "*", "(", "myo_thickness", "-", "previous_myo_thickness", ")", "/", "previous_myo_thickness", ")", ",", "\n", "50", "+", "int", "(", "400", "*", "(", "myo_thickness", "-", "previous_myo_thickness", ")", "/", "previous_myo_thickness", ")", ",", "\n", "50", "-", "int", "(", "400", "*", "(", "myo_thickness", "-", "previous_myo_thickness", ")", "/", "previous_myo_thickness", ")", ")", "\n", "\n", "if", "not", "plot_myo_thickness", ":", "\n", "                ", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "inner_dist", "*", "resolution_multiplier", "*", "4", ")", ")", ",", "\n", "circle_color_inner", ",", "thickness", "=", "1", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "outer_dist", "*", "resolution_multiplier", "*", "4", ")", ")", ",", "\n", "circle_color_outer", ",", "thickness", "=", "1", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "myo_thickness", "*", "resolution_multiplier", "*", "4", ")", ")", ",", "\n", "circle_color_myo", ",", "thickness", "=", "1", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "\n", "", "", "", "for", "t", "in", "range", "(", "int", "(", "channel", "/", "2", ")", ")", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "output_file_prefix", "+", "str", "(", "t", ")", ".", "zfill", "(", "zfill_num", ")", "+", "'.png'", ",", "background_imgs", "[", "t", "]", ")", "\n", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "zoned_img", ")", ":", "\n", "        ", "zoned_img_array", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "load_img2", "(", "background_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", ",", "\n", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "zoned_img_array", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "zoned_img_array", "=", "np", ".", "concatenate", "(", "(", "zoned_img_array", ",", "zoned_img_array", ",", "zoned_img_array", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "enlarged_zone_map", "=", "multiply_resolution", "(", "zone_map", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "resolution_multiplier", ")", "\n", "enlarged_boundary_pixels", "=", "multiply_resolution", "(", "boundary_pixels", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "resolution_multiplier", ")", "\n", "\n", "\n", "#zoned_img_array[:, :, 0] += ((enlarged_zone_map + 1) * 15).astype(np.uint)", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "0", "]", "+=", "(", "np", ".", "where", "(", "np", ".", "equal", "(", "(", "enlarged_zone_map", "+", "1", ")", ",", "np", ".", "zeros_like", "(", "enlarged_zone_map", ")", ")", ",", "\n", "np", ".", "zeros_like", "(", "enlarged_zone_map", ")", ",", "(", "4", "-", "(", "enlarged_zone_map", "+", "1", ")", ")", "**", "2", ")", "*", "10", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "1", "]", "+=", "(", "np", ".", "where", "(", "np", ".", "equal", "(", "(", "enlarged_zone_map", "+", "1", ")", ",", "np", ".", "zeros_like", "(", "enlarged_zone_map", ")", ")", ",", "\n", "np", ".", "zeros_like", "(", "enlarged_zone_map", ")", ",", "\n", "np", ".", "mod", "(", "(", "enlarged_zone_map", "+", "1", ")", "*", "(", "enlarged_zone_map", "+", "1", ")", ",", "\n", "7", "*", "np", ".", "ones_like", "(", "enlarged_zone_map", ")", ")", ")", "*", "15", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "2", "]", "+=", "(", "np", ".", "where", "(", "np", ".", "equal", "(", "(", "enlarged_zone_map", "+", "1", ")", ",", "np", ".", "zeros_like", "(", "enlarged_zone_map", ")", ")", ",", "\n", "np", ".", "zeros_like", "(", "enlarged_zone_map", ")", ",", "\n", "np", ".", "mod", "(", "(", "enlarged_zone_map", "+", "1", ")", "*", "(", "enlarged_zone_map", "+", "1", ")", ",", "\n", "5", "*", "np", ".", "ones_like", "(", "enlarged_zone_map", ")", ")", ")", "*", "15", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "0", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "1", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "2", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "cv2", ".", "imwrite", "(", "output_file_prefix", "+", "'_zones_img.png'", ",", "zoned_img_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.avg_flow_to_arrow_map2": [[3244, 3444], ["numpy.where", "range", "range", "os.path.isfile", "cv2.cvtColor", "background_imgs.append", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "range", "int", "cv2.imwrite", "os.path.isfile", "cv2.cvtColor", "range", "os.path.isfile", "numpy.concatenate", "helpers.multiply_resolution", "helpers.multiply_resolution", "helpers.add_color_to_bgr_channels", "numpy.where", "cv2.imwrite", "numpy.array", "numpy.zeros", "helpers.mask_barycenter", "int", "math.sqrt", "cv2.arrowedLine", "numpy.array", "numpy.zeros", "math.sqrt", "avg_inner_border_normalized_flow[].min", "avg_myo_thickness_flow[].max", "cv2.arrowedLine", "cv2.arrowedLine", "cv2.circle", "cv2.imwrite", "numpy.reshape", "numpy.zeros", "range", "image2.load_img2", "numpy.ones_like", "max", "max", "int", "int", "cv2.circle", "cv2.circle", "image2.load_img2", "helpers.mask_barycenter", "max", "max", "int", "int", "int", "int", "int", "numpy.array", "numpy.ones_like", "int", "int", "int", "round", "round", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "cv2.circle", "str().zfill", "int", "int", "round", "round", "round", "round", "round", "image2.load_img2", "numpy.ones_like", "round", "round", "round", "round", "int", "round", "round", "max", "max", "max", "round", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.multiply_resolution", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.multiply_resolution", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.add_color_to_bgr_channels", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2"], ["", "def", "avg_flow_to_arrow_map2", "(", "avg_flow", ",", "avg_inner_border_normalized_flow", ",", "avg_outer_border_normalized_flow", ",", "\n", "avg_myo_thickness_flow", ",", "zone_map", ",", "boundary_pixels", ",", "barycenters", ",", "\n", "background_files", ",", "zoned_img", ",", "output_file_prefix", ",", "zfill_num", ",", "\n", "save_zones_on_img", "=", "True", ",", "save_motion_info_on_img", "=", "True", ",", "\n", "shape", "=", "(", "128", ",", "128", ",", "2", ")", ",", "\n", "resolution_multiplier", "=", "1", ",", "plot_myo_thickness", "=", "True", ")", ":", "\n", "    ", "background_imgs", "=", "[", "]", "\n", "for", "background_file", "in", "background_files", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "background_file", ")", ":", "\n", "#img = cv2.imread(background_file, cv2.IMREAD_GRAYSCALE)", "\n", "            ", "img", "=", "np", ".", "array", "(", "load_img2", "(", "background_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "background_imgs", ".", "append", "(", "img", ")", "\n", "\n", "\n", "", "num_zone", "=", "avg_flow", ".", "shape", "[", "1", "]", "\n", "channel", "=", "avg_flow", ".", "shape", "[", "2", "]", "\n", "\n", "inner_boundary_pixels", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "boundary_pixels", ",", "-", "1.0", "*", "np", ".", "ones_like", "(", "boundary_pixels", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "boundary_pixels", ")", ",", "np", ".", "zeros_like", "(", "boundary_pixels", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_zone", ")", ":", "\n", "# Inner boundary zone", "\n", "        ", "zone_barycenter_x", ",", "zone_barycenter_y", "=", "mask_barycenter", "(", "(", "zone_map", "+", "1.0", ")", "*", "inner_boundary_pixels", "-", "1.0", ",", "mask_value", "=", "k", ")", "[", "0", "]", "\n", "for", "t", "in", "range", "(", "int", "(", "channel", "/", "2", ")", ")", ":", "\n", "            ", "barycenter_x", "=", "barycenters", "[", "0", "]", "[", "t", "]", "[", "0", "]", "\n", "barycenter_y", "=", "barycenters", "[", "0", "]", "[", "t", "]", "[", "1", "]", "\n", "start_point", "=", "(", "int", "(", "round", "(", "barycenter_x", ")", ")", "*", "resolution_multiplier", ",", "\n", "int", "(", "round", "(", "barycenter_y", ")", ")", "*", "resolution_multiplier", ")", "\n", "\n", "norm_k_t", "=", "math", ".", "sqrt", "(", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "**", "2", "+", "\n", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "**", "2", ")", "\n", "cos_k_t", "=", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "/", "max", "(", "norm_k_t", ",", "0.001", ")", "\n", "sin_k_t", "=", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "/", "max", "(", "norm_k_t", ",", "0.001", ")", "\n", "\n", "\n", "if", "t", "==", "0", ":", "\n", "                ", "t_minus", "=", "int", "(", "channel", "/", "2", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "t_minus", "=", "t", "-", "1", "\n", "\n", "", "previous_inner_dist", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "previous_outer_dist", "=", "avg_outer_border_normalized_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "previous_myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "\n", "inner_dist", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "outer_dist", "=", "avg_outer_border_normalized_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "\n", "converted_norm", "=", "norm_k_t", "*", "(", "inner_dist", "/", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", ")", "\n", "\n", "converted_x", "=", "barycenter_x", "+", "converted_norm", "*", "cos_k_t", "\n", "converted_y", "=", "barycenter_y", "+", "converted_norm", "*", "sin_k_t", "\n", "end_point", "=", "(", "int", "(", "round", "(", "converted_x", "*", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "round", "(", "converted_y", "*", "resolution_multiplier", ")", ")", ")", "\n", "\n", "arrow_color", "=", "(", "0", ",", "\n", "200", "+", "int", "(", "1000", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ",", "\n", "150", "-", "int", "(", "1000", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ")", "\n", "\n", "cv2", ".", "arrowedLine", "(", "background_imgs", "[", "t", "]", ",", "start_point", ",", "end_point", ",", "\n", "arrow_color", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.03", ")", "\n", "\n", "circle_color_inner", "=", "(", "200", "+", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ",", "\n", "50", "+", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ",", "\n", "50", "-", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ")", "\n", "\n", "circle_color_outer", "=", "(", "200", "+", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ",", "\n", "50", "+", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ",", "\n", "50", "-", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ")", "\n", "\n", "circle_color_myo", "=", "(", "200", "+", "int", "(", "400", "*", "(", "myo_thickness", "-", "previous_myo_thickness", ")", "/", "max", "(", "previous_myo_thickness", ",", "0.001", ")", ")", ",", "\n", "100", "+", "int", "(", "600", "*", "(", "myo_thickness", "-", "previous_myo_thickness", ")", "/", "max", "(", "previous_myo_thickness", ",", "0.001", ")", ")", ",", "\n", "70", "-", "int", "(", "600", "*", "(", "myo_thickness", "-", "previous_myo_thickness", ")", "/", "max", "(", "previous_myo_thickness", ",", "0.001", ")", ")", ")", "\n", "\n", "if", "not", "plot_myo_thickness", ":", "\n", "                ", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "inner_dist", "*", "resolution_multiplier", "*", "0.8", ")", ")", ",", "\n", "circle_color_inner", ",", "thickness", "=", "2", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "outer_dist", "*", "resolution_multiplier", "*", "0.8", ")", ")", ",", "\n", "circle_color_outer", ",", "thickness", "=", "2", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "", "elif", "myo_thickness", ">=", "0", "and", "previous_myo_thickness", ">=", "0", ":", "\n", "                ", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "myo_thickness", "*", "resolution_multiplier", "*", "0.8", ")", ")", ",", "\n", "circle_color_myo", ",", "thickness", "=", "2", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "\n", "", "", "", "for", "t", "in", "range", "(", "int", "(", "channel", "/", "2", ")", ")", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "output_file_prefix", "+", "str", "(", "t", ")", ".", "zfill", "(", "zfill_num", ")", "+", "'.png'", ",", "background_imgs", "[", "t", "]", ")", "\n", "\n", "\n", "", "if", "save_motion_info_on_img", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "background_files", "[", "0", "]", ")", ":", "\n", "#img = cv2.imread(background_file, cv2.IMREAD_GRAYSCALE)", "\n", "            ", "background_img", "=", "np", ".", "array", "(", "load_img2", "(", "background_files", "[", "0", "]", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", "\n", "", "else", ":", "\n", "            ", "background_img", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "background_img", "=", "cv2", ".", "cvtColor", "(", "background_img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "for", "k", "in", "range", "(", "num_zone", ")", ":", "\n", "# Inner boundary zone", "\n", "            ", "zone_barycenter_x", ",", "zone_barycenter_y", "=", "mask_barycenter", "(", "(", "zone_map", "+", "1.0", ")", "*", "inner_boundary_pixels", "-", "1.0", ",", "mask_value", "=", "k", ")", "[", "0", "]", "\n", "barycenter_x", "=", "barycenters", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "barycenter_y", "=", "barycenters", "[", "0", "]", "[", "0", "]", "[", "1", "]", "\n", "start_point", "=", "(", "int", "(", "round", "(", "barycenter_x", ")", ")", "*", "resolution_multiplier", ",", "\n", "int", "(", "round", "(", "barycenter_y", ")", ")", "*", "resolution_multiplier", ")", "\n", "\n", "norm_k_t", "=", "math", ".", "sqrt", "(", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "**", "2", "+", "\n", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "**", "2", ")", "\n", "cos_k_t", "=", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "/", "max", "(", "norm_k_t", ",", "0.001", ")", "\n", "sin_k_t", "=", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "/", "max", "(", "norm_k_t", ",", "0.001", ")", "\n", "\n", "inner_dist", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", "\n", "inner_dist_min", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", ":", "]", ".", "min", "(", ")", "\n", "outer_dist", "=", "avg_outer_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", "\n", "myo_thickness_max", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", ":", "]", ".", "max", "(", ")", "\n", "\n", "converted_norm", "=", "norm_k_t", "*", "(", "inner_dist", "/", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", ")", "\n", "converted_x", "=", "barycenter_x", "+", "converted_norm", "*", "cos_k_t", "\n", "converted_y", "=", "barycenter_y", "+", "converted_norm", "*", "sin_k_t", "\n", "end_point", "=", "(", "int", "(", "round", "(", "converted_x", "*", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "round", "(", "converted_y", "*", "resolution_multiplier", ")", ")", ")", "\n", "\n", "converted_norm_min", "=", "norm_k_t", "*", "(", "inner_dist_min", "/", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", ")", "\n", "converted_x_min", "=", "barycenter_x", "+", "converted_norm_min", "*", "cos_k_t", "\n", "converted_y_min", "=", "barycenter_y", "+", "converted_norm_min", "*", "sin_k_t", "\n", "end_point_min", "=", "(", "int", "(", "round", "(", "converted_x_min", "*", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "round", "(", "converted_y_min", "*", "resolution_multiplier", ")", ")", ")", "\n", "\n", "arrow_color", "=", "(", "0", ",", "200", ",", "100", ")", "\n", "arrow_color_min", "=", "(", "0", ",", "100", ",", "200", ")", "\n", "circle_color_myo", "=", "(", "250", ",", "150", ",", "20", ")", "\n", "\n", "cv2", ".", "arrowedLine", "(", "background_img", ",", "start_point", ",", "end_point", ",", "\n", "arrow_color", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.2", ")", "\n", "\n", "cv2", ".", "arrowedLine", "(", "background_img", ",", "start_point", ",", "end_point_min", ",", "\n", "arrow_color_min", ",", "thickness", "=", "3", ",", "shift", "=", "0", ",", "tipLength", "=", "0.13", ",", "line_type", "=", "8", ")", "\n", "\n", "cv2", ".", "circle", "(", "background_img", ",", "end_point", ",", "\n", "int", "(", "round", "(", "myo_thickness_max", "*", "resolution_multiplier", "*", "0.8", ")", ")", ",", "\n", "circle_color_myo", ",", "thickness", "=", "2", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "output_file_prefix", "+", "'motion_info.png'", ",", "background_img", ")", "\n", "\n", "\n", "", "", "if", "save_zones_on_img", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "zoned_img", ")", ":", "\n", "            ", "zoned_img_array", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "load_img2", "(", "background_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", ",", "\n", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "zoned_img_array", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "zoned_img_array", "=", "np", ".", "concatenate", "(", "(", "zoned_img_array", ",", "zoned_img_array", ",", "zoned_img_array", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "enlarged_zone_map", "=", "multiply_resolution", "(", "zone_map", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "resolution_multiplier", ")", "\n", "enlarged_boundary_pixels", "=", "multiply_resolution", "(", "boundary_pixels", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "resolution_multiplier", ")", "\n", "\n", "\n", "'''\n        zoned_img_array[:, :, 0] += \\\n            (np.where(np.equal((enlarged_zone_map + 1), np.zeros_like(enlarged_zone_map)), \n             np.zeros_like(enlarged_zone_map), (4 - (enlarged_zone_map + 1))**2) * 10).astype(np.uint)\n        zoned_img_array[:, :, 1] += \\\n            (np.where(np.equal((enlarged_zone_map + 1), np.zeros_like(enlarged_zone_map)), \n             np.zeros_like(enlarged_zone_map), \n             np.mod((enlarged_zone_map + 1)*(enlarged_zone_map + 1), \n                    7 * np.ones_like(enlarged_zone_map))) * 15).astype(np.uint)\n        zoned_img_array[:, :, 2] += \\\n            (np.where(np.equal((enlarged_zone_map + 1), np.zeros_like(enlarged_zone_map)), \n             np.zeros_like(enlarged_zone_map), \n             np.mod((enlarged_zone_map + 1)*(enlarged_zone_map + 1), \n                    5 * np.ones_like(enlarged_zone_map))) * 15).astype(np.uint)\n        '''", "\n", "\n", "#bgr_color_list = \\", "\n", "#    [(80, 0, 0), (0, 80, 80), (0, 0, 80), (60, 60, 0), (60, 0, 60), (0, 80, 0)]", "\n", "# [blue, yellow, red, cyan, violet, green]", "\n", "bgr_color_list", "=", "[", "(", "60", ",", "10", ",", "0", ")", ",", "(", "0", ",", "40", ",", "40", ")", ",", "(", "0", ",", "0", ",", "40", ")", ",", "(", "40", ",", "30", ",", "0", ")", ",", "(", "30", ",", "0", ",", "30", ")", ",", "(", "0", ",", "40", ",", "0", ")", "]", "\n", "zoned_img_array", "=", "add_color_to_bgr_channels", "(", "zoned_img_array", ",", "enlarged_zone_map", ",", "range", "(", "6", ")", ",", "bgr_color_list", ")", "\n", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "0", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "1", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "2", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "=", "np", ".", "where", "(", "zoned_img_array", ">", "np", ".", "ones_like", "(", "zoned_img_array", ")", "*", "255", ",", "np", ".", "ones_like", "(", "zoned_img_array", ")", "*", "255", ",", "zoned_img_array", ")", "\n", "cv2", ".", "imwrite", "(", "output_file_prefix", "+", "'zones.png'", ",", "zoned_img_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.avg_flow_to_arrow_map3": [[3456, 3663], ["numpy.where", "range", "range", "os.path.isfile", "cv2.cvtColor", "background_imgs.append", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "range", "int", "cv2.imwrite", "os.path.isfile", "cv2.cvtColor", "range", "os.path.isfile", "numpy.concatenate", "helpers.multiply_resolution", "helpers.multiply_resolution", "helpers.add_color_to_bgr_channels", "numpy.where", "cv2.imwrite", "numpy.array", "numpy.zeros", "helpers.mask_barycenter", "int", "math.sqrt", "cv2.arrowedLine", "numpy.array", "numpy.zeros", "math.sqrt", "avg_inner_border_normalized_flow[].min", "cv2.arrowedLine", "cv2.arrowedLine", "cv2.arrowedLine", "cv2.arrowedLine", "cv2.circle", "cv2.imwrite", "numpy.reshape", "numpy.zeros", "range", "image2.load_img2", "numpy.ones_like", "max", "max", "int", "int", "cv2.circle", "cv2.circle", "image2.load_img2", "helpers.mask_barycenter", "max", "max", "int", "int", "int", "int", "int", "numpy.array", "numpy.ones_like", "int", "int", "int", "round", "round", "int", "int", "int", "int", "int", "int", "int", "int", "cv2.circle", "str().zfill", "int", "int", "round", "round", "round", "round", "round", "image2.load_img2", "numpy.ones_like", "round", "round", "round", "round", "int", "round", "round", "round", "str", "max", "max"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.multiply_resolution", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.multiply_resolution", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.add_color_to_bgr_channels", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2"], ["", "", "def", "avg_flow_to_arrow_map3", "(", "avg_flow", ",", "avg_inner_border_normalized_flow", ",", "avg_outer_border_normalized_flow", ",", "\n", "avg_myo_thickness_flow", ",", "zone_map", ",", "boundary_pixels", ",", "barycenters", ",", "\n", "background_files", ",", "zoned_img", ",", "output_file_prefix", ",", "zfill_num", ",", "\n", "es_instant_in_range", ",", "\n", "save_zones_on_img", "=", "True", ",", "save_motion_info_on_img", "=", "True", ",", "\n", "shape", "=", "(", "128", ",", "128", ",", "2", ")", ",", "\n", "resolution_multiplier", "=", "1", ",", "plot_myo_thickness", "=", "True", ")", ":", "\n", "    ", "background_imgs", "=", "[", "]", "\n", "for", "background_file", "in", "background_files", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "background_file", ")", ":", "\n", "#img = cv2.imread(background_file, cv2.IMREAD_GRAYSCALE)", "\n", "            ", "img", "=", "np", ".", "array", "(", "load_img2", "(", "background_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "background_imgs", ".", "append", "(", "img", ")", "\n", "\n", "\n", "", "num_zone", "=", "avg_flow", ".", "shape", "[", "1", "]", "\n", "channel", "=", "avg_flow", ".", "shape", "[", "2", "]", "\n", "\n", "inner_boundary_pixels", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "boundary_pixels", ",", "-", "1.0", "*", "np", ".", "ones_like", "(", "boundary_pixels", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "boundary_pixels", ")", ",", "np", ".", "zeros_like", "(", "boundary_pixels", ")", ")", "\n", "\n", "\n", "bgr_color_list1", "=", "[", "(", "255", ",", "40", ",", "40", ")", ",", "(", "0", ",", "240", ",", "240", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "240", ",", "240", ",", "0", ")", ",", "(", "240", ",", "0", ",", "240", ")", ",", "(", "0", ",", "200", ",", "0", ")", "]", "\n", "for", "k", "in", "range", "(", "num_zone", ")", ":", "\n", "# Inner boundary zone", "\n", "        ", "zone_barycenter_x", ",", "zone_barycenter_y", "=", "mask_barycenter", "(", "(", "zone_map", "+", "1.0", ")", "*", "inner_boundary_pixels", "-", "1.0", ",", "mask_value", "=", "k", ")", "[", "0", "]", "\n", "for", "t", "in", "range", "(", "int", "(", "channel", "/", "2", ")", ")", ":", "\n", "            ", "barycenter_x", "=", "barycenters", "[", "0", "]", "[", "t", "]", "[", "0", "]", "\n", "barycenter_y", "=", "barycenters", "[", "0", "]", "[", "t", "]", "[", "1", "]", "\n", "start_point", "=", "(", "int", "(", "round", "(", "barycenter_x", ")", ")", "*", "resolution_multiplier", ",", "\n", "int", "(", "round", "(", "barycenter_y", ")", ")", "*", "resolution_multiplier", ")", "\n", "\n", "norm_k_t", "=", "math", ".", "sqrt", "(", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "**", "2", "+", "\n", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "**", "2", ")", "\n", "cos_k_t", "=", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "/", "max", "(", "norm_k_t", ",", "0.001", ")", "\n", "sin_k_t", "=", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "/", "max", "(", "norm_k_t", ",", "0.001", ")", "\n", "\n", "\n", "if", "t", "==", "0", ":", "\n", "                ", "t_minus", "=", "int", "(", "channel", "/", "2", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "t_minus", "=", "t", "-", "1", "\n", "\n", "", "previous_inner_dist", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "previous_outer_dist", "=", "avg_outer_border_normalized_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "previous_myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "t_minus", "]", "\n", "ed_myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "0", "]", "\n", "\n", "inner_dist", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "outer_dist", "=", "avg_outer_border_normalized_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "t", "]", "\n", "\n", "converted_norm", "=", "norm_k_t", "*", "(", "inner_dist", "/", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", ")", "\n", "\n", "converted_x", "=", "barycenter_x", "+", "converted_norm", "*", "cos_k_t", "\n", "converted_y", "=", "barycenter_y", "+", "converted_norm", "*", "sin_k_t", "\n", "end_point", "=", "(", "int", "(", "round", "(", "converted_x", "*", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "round", "(", "converted_y", "*", "resolution_multiplier", ")", ")", ")", "\n", "\n", "\n", "cv2", ".", "arrowedLine", "(", "background_imgs", "[", "t", "]", ",", "start_point", ",", "end_point", ",", "\n", "bgr_color_list1", "[", "k", "]", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.03", ")", "\n", "\n", "circle_color_inner", "=", "(", "200", "+", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ",", "\n", "50", "+", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ",", "\n", "50", "-", "int", "(", "400", "*", "(", "inner_dist", "-", "previous_inner_dist", ")", "/", "previous_inner_dist", ")", ")", "\n", "\n", "circle_color_outer", "=", "(", "200", "+", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ",", "\n", "50", "+", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ",", "\n", "50", "-", "int", "(", "400", "*", "(", "outer_dist", "-", "previous_outer_dist", ")", "/", "previous_outer_dist", ")", ")", "\n", "\n", "#circle_color_myo = (255,204,153)", "\n", "circle_color_myo", "=", "bgr_color_list1", "[", "k", "]", "\n", "\n", "if", "not", "plot_myo_thickness", ":", "\n", "                ", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "inner_dist", "*", "resolution_multiplier", "*", "0.8", ")", ")", ",", "\n", "circle_color_inner", ",", "thickness", "=", "2", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "outer_dist", "*", "resolution_multiplier", "*", "0.8", ")", ")", ",", "\n", "circle_color_outer", ",", "thickness", "=", "2", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "", "elif", "myo_thickness", ">=", "0", "and", "ed_myo_thickness", ">=", "0", ":", "\n", "                ", "cv2", ".", "circle", "(", "background_imgs", "[", "t", "]", ",", "end_point", ",", "\n", "int", "(", "round", "(", "max", "(", "myo_thickness", "-", "ed_myo_thickness", ",", "0", ")", "*", "resolution_multiplier", "*", "0.8", ")", ")", ",", "\n", "circle_color_myo", ",", "thickness", "=", "2", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "\n", "", "", "", "for", "t", "in", "range", "(", "int", "(", "channel", "/", "2", ")", ")", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "output_file_prefix", "+", "str", "(", "t", ")", ".", "zfill", "(", "zfill_num", ")", "+", "'.png'", ",", "background_imgs", "[", "t", "]", ")", "\n", "\n", "\n", "", "if", "save_motion_info_on_img", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "background_files", "[", "0", "]", ")", ":", "\n", "#img = cv2.imread(background_file, cv2.IMREAD_GRAYSCALE)", "\n", "            ", "background_img", "=", "np", ".", "array", "(", "load_img2", "(", "background_files", "[", "0", "]", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", "\n", "", "else", ":", "\n", "            ", "background_img", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "background_img", "=", "cv2", ".", "cvtColor", "(", "background_img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "for", "k", "in", "range", "(", "num_zone", ")", ":", "\n", "# Inner boundary zone", "\n", "            ", "zone_barycenter_x", ",", "zone_barycenter_y", "=", "mask_barycenter", "(", "(", "zone_map", "+", "1.0", ")", "*", "inner_boundary_pixels", "-", "1.0", ",", "mask_value", "=", "k", ")", "[", "0", "]", "\n", "barycenter_x", "=", "barycenters", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "barycenter_y", "=", "barycenters", "[", "0", "]", "[", "0", "]", "[", "1", "]", "\n", "start_point", "=", "(", "int", "(", "round", "(", "barycenter_x", ")", ")", "*", "resolution_multiplier", ",", "\n", "int", "(", "round", "(", "barycenter_y", ")", ")", "*", "resolution_multiplier", ")", "\n", "\n", "norm_k_t", "=", "math", ".", "sqrt", "(", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "**", "2", "+", "\n", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "**", "2", ")", "\n", "cos_k_t", "=", "(", "zone_barycenter_x", "-", "barycenter_x", ")", "/", "max", "(", "norm_k_t", ",", "0.001", ")", "\n", "sin_k_t", "=", "(", "zone_barycenter_y", "-", "barycenter_y", ")", "/", "max", "(", "norm_k_t", ",", "0.001", ")", "\n", "\n", "inner_dist", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", "\n", "inner_dist_min", "=", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", ":", "]", ".", "min", "(", ")", "\n", "outer_dist", "=", "avg_outer_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", "\n", "ed_myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "0", "]", "\n", "es_myo_thickness", "=", "avg_myo_thickness_flow", "[", "0", ",", "k", ",", "es_instant_in_range", "]", "\n", "\n", "converted_norm", "=", "norm_k_t", "*", "(", "inner_dist", "/", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", ")", "\n", "converted_x", "=", "barycenter_x", "+", "converted_norm", "*", "cos_k_t", "\n", "converted_y", "=", "barycenter_y", "+", "converted_norm", "*", "sin_k_t", "\n", "end_point", "=", "(", "int", "(", "round", "(", "converted_x", "*", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "round", "(", "converted_y", "*", "resolution_multiplier", ")", ")", ")", "\n", "\n", "converted_norm_min", "=", "norm_k_t", "*", "(", "inner_dist_min", "/", "avg_inner_border_normalized_flow", "[", "0", ",", "k", ",", "0", "]", ")", "\n", "converted_x_min", "=", "barycenter_x", "+", "converted_norm_min", "*", "cos_k_t", "\n", "converted_y_min", "=", "barycenter_y", "+", "converted_norm_min", "*", "sin_k_t", "\n", "end_point_min", "=", "(", "int", "(", "round", "(", "converted_x_min", "*", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "round", "(", "converted_y_min", "*", "resolution_multiplier", ")", ")", ")", "\n", "\n", "arrow_color", "=", "(", "153", ",", "255", ",", "153", ")", "\n", "arrow_color_min", "=", "(", "102", ",", "178", ",", "255", ")", "\n", "#circle_color_myo = (255,204,153)", "\n", "circle_color_myo", "=", "bgr_color_list1", "[", "k", "]", "\n", "\n", "cv2", ".", "arrowedLine", "(", "background_img", ",", "start_point", ",", "end_point", ",", "\n", "arrow_color", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.25", ")", "\n", "cv2", ".", "arrowedLine", "(", "background_img", ",", "start_point", ",", "end_point", ",", "\n", "bgr_color_list1", "[", "k", "]", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.0", ")", "\n", "\n", "cv2", ".", "arrowedLine", "(", "background_img", ",", "start_point", ",", "end_point_min", ",", "\n", "arrow_color_min", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.22", ")", "\n", "cv2", ".", "arrowedLine", "(", "background_img", ",", "start_point", ",", "end_point_min", ",", "\n", "bgr_color_list1", "[", "k", "]", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.0", ")", "\n", "\n", "cv2", ".", "circle", "(", "background_img", ",", "end_point", ",", "\n", "int", "(", "round", "(", "max", "(", "es_myo_thickness", "-", "ed_myo_thickness", ",", "0", ")", "*", "resolution_multiplier", "*", "0.8", ")", ")", ",", "\n", "circle_color_myo", ",", "thickness", "=", "2", ",", "lineType", "=", "4", ",", "shift", "=", "0", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "output_file_prefix", "+", "'motion_info.png'", ",", "background_img", ")", "\n", "\n", "\n", "", "", "if", "save_zones_on_img", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "zoned_img", ")", ":", "\n", "            ", "zoned_img_array", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "load_img2", "(", "background_files", "[", "0", "]", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", ",", "\n", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "zoned_img_array", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "zoned_img_array", "=", "np", ".", "concatenate", "(", "(", "zoned_img_array", ",", "zoned_img_array", ",", "zoned_img_array", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "enlarged_zone_map", "=", "multiply_resolution", "(", "zone_map", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "resolution_multiplier", ")", "\n", "enlarged_boundary_pixels", "=", "multiply_resolution", "(", "boundary_pixels", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "resolution_multiplier", ")", "\n", "\n", "\n", "'''\n        zoned_img_array[:, :, 0] += \\\n            (np.where(np.equal((enlarged_zone_map + 1), np.zeros_like(enlarged_zone_map)), \n             np.zeros_like(enlarged_zone_map), (4 - (enlarged_zone_map + 1))**2) * 10).astype(np.uint)\n        zoned_img_array[:, :, 1] += \\\n            (np.where(np.equal((enlarged_zone_map + 1), np.zeros_like(enlarged_zone_map)), \n             np.zeros_like(enlarged_zone_map), \n             np.mod((enlarged_zone_map + 1)*(enlarged_zone_map + 1), \n                    7 * np.ones_like(enlarged_zone_map))) * 15).astype(np.uint)\n        zoned_img_array[:, :, 2] += \\\n            (np.where(np.equal((enlarged_zone_map + 1), np.zeros_like(enlarged_zone_map)), \n             np.zeros_like(enlarged_zone_map), \n             np.mod((enlarged_zone_map + 1)*(enlarged_zone_map + 1), \n                    5 * np.ones_like(enlarged_zone_map))) * 15).astype(np.uint)\n        '''", "\n", "\n", "#bgr_color_list2 = \\", "\n", "#    [(80, 0, 0), (0, 80, 80), (0, 0, 80), (60, 60, 0), (60, 0, 60), (0, 80, 0)]", "\n", "# [blue, yellow, red, cyan, violet, green]", "\n", "bgr_color_list2", "=", "[", "(", "60", ",", "10", ",", "0", ")", ",", "(", "0", ",", "40", ",", "40", ")", ",", "(", "0", ",", "0", ",", "40", ")", ",", "(", "40", ",", "30", ",", "0", ")", ",", "(", "30", ",", "0", ",", "30", ")", ",", "(", "0", ",", "40", ",", "0", ")", "]", "\n", "zoned_img_array", "=", "add_color_to_bgr_channels", "(", "zoned_img_array", ",", "enlarged_zone_map", ",", "range", "(", "6", ")", ",", "bgr_color_list2", ")", "\n", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "0", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "1", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "[", ":", ",", ":", ",", "2", "]", "+=", "(", "(", "enlarged_boundary_pixels", "**", "2", ")", "*", "40", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "zoned_img_array", "=", "np", ".", "where", "(", "zoned_img_array", ">", "np", ".", "ones_like", "(", "zoned_img_array", ")", "*", "255", ",", "np", ".", "ones_like", "(", "zoned_img_array", ")", "*", "255", ",", "zoned_img_array", ")", "\n", "cv2", ".", "imwrite", "(", "output_file_prefix", "+", "'zones.png'", ",", "zoned_img_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.add_color_to_bgr_channels": [[3672, 3681], ["range", "len", "range", "numpy.where().astype", "numpy.where", "numpy.equal", "numpy.zeros_like", "numpy.ones_like", "numpy.ones_like"], "function", ["None"], ["", "", "def", "add_color_to_bgr_channels", "(", "array", ",", "zone_map", ",", "zone_idx_list", ",", "bgr_color_list", ")", ":", "\n", "    ", "for", "k", "in", "range", "(", "len", "(", "zone_idx_list", ")", ")", ":", "\n", "        ", "idx", "=", "zone_idx_list", "[", "k", "]", "\n", "bgr_color", "=", "bgr_color_list", "[", "k", "]", "\n", "for", "p", "in", "range", "(", "3", ")", ":", "\n", "            ", "array", "[", ":", ",", ":", ",", "p", "]", "+=", "(", "np", ".", "where", "(", "np", ".", "equal", "(", "zone_map", ",", "idx", "*", "np", ".", "ones_like", "(", "zone_map", ")", ")", ",", "\n", "bgr_color", "[", "p", "]", "*", "np", ".", "ones_like", "(", "zone_map", ")", ",", "np", ".", "zeros_like", "(", "zone_map", ")", ")", ")", ".", "astype", "(", "np", ".", "uint", ")", "\n", "", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.multiply_resolution": [[3683, 3691], ["numpy.zeros", "range", "range", "int", "int", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "multiply_resolution", "(", "img_array", ",", "resolution_multiplier", "=", "1", ")", ":", "\n", "    ", "row", ",", "column", "=", "img_array", ".", "shape", "\n", "output", "=", "np", ".", "zeros", "(", "(", "row", "*", "resolution_multiplier", ",", "column", "*", "resolution_multiplier", ")", ")", "\n", "for", "r", "in", "range", "(", "row", "*", "resolution_multiplier", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "column", "*", "resolution_multiplier", ")", ":", "\n", "            ", "output", "[", "r", ",", "c", "]", "=", "img_array", "[", "int", "(", "np", ".", "floor", "(", "r", "/", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "np", ".", "floor", "(", "c", "/", "resolution_multiplier", ")", ")", "]", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_to_arrow_map": [[3693, 3750], ["os.path.isfile", "os.path.isfile", "cv2.cvtColor", "os.path.isfile", "cv2.imwrite", "numpy.load", "numpy.reshape", "numpy.zeros", "numpy.array", "numpy.zeros", "image2.load_img2", "numpy.array", "numpy.where", "range", "range", "image2.load_img2", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "numpy.reshape", "helpers.enlarge_mask3", "numpy.reshape", "range", "range", "cv2.arrowedLine", "numpy.ones_like", "cv2.arrowedLine", "int", "int", "int", "int", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.enlarge_mask3"], ["", "def", "flow_to_arrow_map", "(", "flow_file", ",", "background_file", ",", "mask_file", ",", "enlarge_mask", ",", "enlarge_width", ",", "\n", "output_file", ",", "step", "=", "5", ",", "shape", "=", "(", "128", ",", "128", ",", "2", ")", ",", "resolution_multiplier", "=", "1", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "flow_file", ")", ":", "\n", "        ", "flow", "=", "np", ".", "load", "(", "flow_file", ")", "\n", "flow", "=", "np", ".", "reshape", "(", "flow", ",", "shape", ")", "\n", "", "else", ":", "\n", "        ", "flow", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "background_file", ")", ":", "\n", "#img = cv2.imread(background_file, cv2.IMREAD_GRAYSCALE)", "\n", "        ", "img", "=", "np", ".", "array", "(", "load_img2", "(", "background_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "mask_file", ")", ":", "\n", "        ", "mask", "=", "load_img2", "(", "mask_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "mask", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "mask", ",", "100.0", "*", "np", ".", "ones_like", "(", "mask", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "mask", ")", ",", "np", ".", "zeros_like", "(", "mask", ")", ")", "\n", "\n", "# Enlarge the LVM mask if necessary", "\n", "if", "enlarge_mask", ":", "\n", "            ", "mask", "=", "np", ".", "reshape", "(", "mask", ",", "(", "1", ",", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ",", "1", ")", ")", "\n", "mask", "=", "enlarge_mask3", "(", "mask", ",", "width", "=", "enlarge_width", "*", "resolution_multiplier", ",", "\n", "enlarge_value", "=", "1.0", ")", "\n", "mask", "=", "np", ".", "reshape", "(", "mask", ",", "(", "shape", "[", "0", "]", "*", "resolution_multiplier", ",", "\n", "shape", "[", "1", "]", "*", "resolution_multiplier", ")", ")", "\n", "\n", "", "for", "r", "in", "range", "(", "0", ",", "shape", "[", "0", "]", ",", "step", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "0", ",", "shape", "[", "1", "]", ",", "step", ")", ":", "\n", "                ", "if", "mask", "[", "r", "*", "resolution_multiplier", ",", "c", "*", "resolution_multiplier", "]", "==", "1", ":", "\n", "                    ", "start_point", "=", "(", "c", "*", "resolution_multiplier", ",", "r", "*", "resolution_multiplier", ")", "\n", "end_point", "=", "(", "int", "(", "round", "(", "(", "c", "+", "flow", "[", "r", ",", "c", ",", "0", "]", ")", "*", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "round", "(", "(", "r", "+", "flow", "[", "r", ",", "c", ",", "1", "]", ")", "*", "resolution_multiplier", ")", ")", ")", "\n", "cv2", ".", "arrowedLine", "(", "img", ",", "start_point", ",", "end_point", ",", "\n", "(", "0", ",", "0", ",", "255", ")", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.3", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "r", "in", "range", "(", "0", ",", "shape", "[", "0", "]", ",", "step", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "0", ",", "shape", "[", "1", "]", ",", "step", ")", ":", "\n", "                ", "start_point", "=", "(", "c", "*", "resolution_multiplier", ",", "r", "*", "resolution_multiplier", ")", "\n", "end_point", "=", "(", "int", "(", "round", "(", "(", "c", "+", "flow", "[", "r", ",", "c", ",", "0", "]", ")", "*", "resolution_multiplier", ")", ")", ",", "\n", "int", "(", "round", "(", "(", "r", "+", "flow", "[", "r", ",", "c", ",", "1", "]", ")", "*", "resolution_multiplier", ")", ")", ")", "\n", "cv2", ".", "arrowedLine", "(", "img", ",", "start_point", ",", "end_point", ",", "\n", "(", "0", ",", "0", ",", "255", ")", ",", "thickness", "=", "2", ",", "shift", "=", "0", ",", "tipLength", "=", "0.3", ")", "\n", "\n", "\n", "", "", "", "cv2", ".", "imwrite", "(", "output_file", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.img_to_video": [[3752, 3767], ["cv2.VideoWriter", "cv2.VideoWriter.release", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.VideoWriter.write"], "function", ["None"], ["", "def", "img_to_video", "(", "img_list", ",", "output_file", ",", "is_grayscale", "=", "False", ")", ":", "\n", "    ", "if", "is_grayscale", ":", "\n", "        ", "read", "=", "cv2", ".", "imread", "(", "img_list", "[", "0", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "height", ",", "width", "=", "read", ".", "shape", "\n", "", "else", ":", "\n", "        ", "read", "=", "cv2", ".", "imread", "(", "img_list", "[", "0", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "height", ",", "width", ",", "channels", "=", "read", ".", "shape", "\n", "#fourcc = cv2.VideoWriter_fourcc(*'mp4v')", "\n", "#output = cv2.VideoWriter(output_file, fourcc, 20.0, (width, height))", "\n", "", "output", "=", "cv2", ".", "VideoWriter", "(", "output_file", ",", "-", "1", ",", "1", ",", "(", "width", ",", "height", ")", ")", "\n", "for", "img_path", "in", "img_list", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "output", ".", "write", "(", "img", ")", "\n", "", "output", ".", "release", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.img_to_video2": [[3768, 3770], ["os.system"], "function", ["None"], ["", "def", "img_to_video2", "(", "img_name_format", ",", "output_file", ")", ":", "\n", "    ", "os", ".", "system", "(", "\"ffmpeg -r 1 -i \"", "+", "img_name_format", "+", "\" -vcodec mpeg4 -y \"", "+", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.img_to_video3": [[3771, 3776], ["imageio.mimsave", "imgs.append", "imageio.imread"], "function", ["None"], ["", "def", "img_to_video3", "(", "img_list", ",", "output_file", ")", ":", "\n", "    ", "imgs", "=", "[", "]", "\n", "for", "img_path", "in", "img_list", ":", "\n", "        ", "imgs", ".", "append", "(", "imageio", ".", "imread", "(", "img_path", ")", ")", "\n", "", "imageio", ".", "mimsave", "(", "output_file", ",", "imgs", ",", "format", "=", "'GIF'", ",", "duration", "=", "0.15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.enlarge_mask": [[3780, 3802], ["numpy.copy", "numpy.copy", "range", "range", "numpy.copy", "range", "range"], "function", ["None"], ["", "def", "enlarge_mask", "(", "mask", ",", "width", ")", ":", "\n", "    ", "batch_size", "=", "mask", ".", "shape", "[", "0", "]", "\n", "row", "=", "mask", ".", "shape", "[", "1", "]", "\n", "column", "=", "mask", ".", "shape", "[", "2", "]", "\n", "\n", "note", "=", "np", ".", "copy", "(", "mask", ")", "\n", "output", "=", "np", ".", "copy", "(", "mask", ")", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "                ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                    ", "if", "note", "[", "k", ",", "r", ",", "c", ",", "0", "]", "==", "1", ":", "\n", "                        ", "if", "r", "-", "1", ">=", "0", "and", "note", "[", "k", ",", "r", "-", "1", ",", "c", ",", "0", "]", "==", "0", ":", "\n", "                            ", "output", "[", "k", ",", "r", "-", "1", ",", "c", ",", "0", "]", "=", "1", "\n", "", "if", "r", "+", "1", "<", "row", "and", "note", "[", "k", ",", "r", "+", "1", ",", "c", ",", "0", "]", "==", "0", ":", "\n", "                            ", "output", "[", "k", ",", "r", "+", "1", ",", "c", ",", "0", "]", "=", "1", "\n", "", "if", "c", "-", "1", ">=", "0", "and", "note", "[", "k", ",", "r", ",", "c", "-", "1", ",", "0", "]", "==", "0", ":", "\n", "                            ", "output", "[", "k", ",", "r", ",", "c", "-", "1", ",", "0", "]", "=", "1", "\n", "", "if", "c", "+", "1", "<", "column", "and", "note", "[", "k", ",", "r", ",", "c", "+", "1", ",", "0", "]", "==", "0", ":", "\n", "                            ", "output", "[", "k", ",", "r", ",", "c", "+", "1", ",", "0", "]", "=", "1", "\n", "", "", "", "", "", "note", "=", "np", ".", "copy", "(", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.enlarge_mask2": [[3804, 3817], ["numpy.zeros_like", "range", "range", "range", "numpy.amax", "max", "min", "max", "min"], "function", ["None"], ["", "def", "enlarge_mask2", "(", "mask", ",", "width", ")", ":", "\n", "    ", "batch_size", "=", "mask", ".", "shape", "[", "0", "]", "\n", "row", "=", "mask", ".", "shape", "[", "1", "]", "\n", "column", "=", "mask", ".", "shape", "[", "2", "]", "\n", "\n", "output", "=", "np", ".", "zeros_like", "(", "mask", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "neighborhood", "=", "mask", "[", "k", ",", "max", "(", "r", "-", "width", ",", "0", ")", ":", "min", "(", "r", "+", "width", "+", "1", ",", "row", ")", ",", "\n", "max", "(", "c", "-", "width", ",", "0", ")", ":", "min", "(", "c", "+", "width", "+", "1", ",", "column", ")", ",", "0", "]", "\n", "output", "[", "k", ",", "r", ",", "c", ",", "0", "]", "=", "np", ".", "amax", "(", "neighborhood", ")", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.enlarge_mask3": [[3819, 3833], ["numpy.copy", "range", "range", "range", "range", "max", "min", "range", "max", "min"], "function", ["None"], ["", "def", "enlarge_mask3", "(", "mask", ",", "width", ",", "enlarge_value", ")", ":", "\n", "    ", "batch_size", "=", "mask", ".", "shape", "[", "0", "]", "\n", "row", "=", "mask", ".", "shape", "[", "1", "]", "\n", "column", "=", "mask", ".", "shape", "[", "2", "]", "\n", "\n", "output", "=", "np", ".", "copy", "(", "mask", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "mask", "[", "k", ",", "r", ",", "c", ",", "0", "]", "==", "enlarge_value", ":", "\n", "                    ", "for", "rr", "in", "range", "(", "max", "(", "r", "-", "width", ",", "0", ")", ",", "min", "(", "r", "+", "width", "+", "1", ",", "row", ")", ")", ":", "\n", "                        ", "for", "cc", "in", "range", "(", "max", "(", "c", "-", "width", ",", "0", ")", ",", "min", "(", "c", "+", "width", "+", "1", ",", "column", ")", ")", ":", "\n", "                            ", "output", "[", "k", ",", "rr", ",", "cc", ",", "0", "]", "=", "enlarge_value", "\n", "", "", "", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.enlarge_mask4": [[3834, 3849], ["numpy.copy", "range", "range", "range", "range", "max", "min", "range", "max", "min"], "function", ["None"], ["", "def", "enlarge_mask4", "(", "mask", ",", "width", ",", "enlarge_value", ",", "neighbor_values", ")", ":", "\n", "    ", "batch_size", "=", "mask", ".", "shape", "[", "0", "]", "\n", "row", "=", "mask", ".", "shape", "[", "1", "]", "\n", "column", "=", "mask", ".", "shape", "[", "2", "]", "\n", "\n", "output", "=", "np", ".", "copy", "(", "mask", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "column", ")", ":", "\n", "                ", "if", "mask", "[", "k", ",", "r", ",", "c", ",", "0", "]", "==", "enlarge_value", ":", "\n", "                    ", "for", "rr", "in", "range", "(", "max", "(", "r", "-", "width", ",", "0", ")", ",", "min", "(", "r", "+", "width", "+", "1", ",", "row", ")", ")", ":", "\n", "                        ", "for", "cc", "in", "range", "(", "max", "(", "c", "-", "width", ",", "0", ")", ",", "min", "(", "c", "+", "width", "+", "1", ",", "column", ")", ")", ":", "\n", "                            ", "if", "mask", "[", "k", ",", "rr", ",", "cc", ",", "0", "]", "in", "neighbor_values", ":", "\n", "                                ", "output", "[", "k", ",", "rr", ",", "cc", ",", "0", "]", "=", "enlarge_value", "\n", "", "", "", "", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.myo_mask_max_min_mean_thickness": [[3851, 3891], ["range", "range", "float", "max", "len", "max", "math.sqrt", "min", "min", "len", "myo_lvc_boundary.append", "myo_bg_boundary.append"], "function", ["None"], ["", "def", "myo_mask_max_min_mean_thickness", "(", "mask", ",", "myo_value", "=", "2", ",", "lvc_value", "=", "1", ",", "bg_value", "=", "0", ",", "rv_value", "=", "3", ")", ":", "\n", "    ", "h", ",", "w", "=", "mask", ".", "shape", "\n", "myo_lvc_boundary", "=", "[", "]", "\n", "myo_bg_boundary", "=", "[", "]", "\n", "for", "hh", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "ww", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "(", "mask", "[", "hh", ",", "ww", "]", "==", "lvc_value", ")", "and", "(", "(", "hh", ">", "0", "and", "mask", "[", "hh", "-", "1", ",", "ww", "]", "==", "myo_value", ")", "or", "(", "hh", "<", "(", "h", "-", "1", ")", "and", "mask", "[", "hh", "+", "1", ",", "ww", "]", "==", "myo_value", ")", "or", "(", "ww", ">", "0", "and", "mask", "[", "hh", ",", "ww", "-", "1", "]", "==", "myo_value", ")", "or", "(", "ww", "<", "(", "ww", "-", "1", ")", "and", "mask", "[", "hh", ",", "ww", "+", "1", "]", "==", "myo_value", ")", ")", ":", "\n", "                ", "myo_lvc_boundary", ".", "append", "(", "(", "hh", ",", "ww", ")", ")", "\n", "\n", "", "if", "(", "mask", "[", "hh", ",", "ww", "]", "==", "myo_value", ")", "and", "(", "(", "hh", ">", "0", "and", "mask", "[", "hh", "-", "1", ",", "ww", "]", "in", "[", "bg_value", ",", "rv_value", "]", ")", "or", "(", "hh", "<", "(", "h", "-", "1", ")", "and", "mask", "[", "hh", "+", "1", ",", "ww", "]", "in", "[", "bg_value", ",", "rv_value", "]", ")", "or", "(", "ww", ">", "0", "and", "mask", "[", "hh", ",", "ww", "-", "1", "]", "in", "[", "bg_value", ",", "rv_value", "]", ")", "or", "(", "ww", "<", "(", "ww", "-", "1", ")", "and", "mask", "[", "hh", ",", "ww", "+", "1", "]", "in", "[", "bg_value", ",", "rv_value", "]", ")", ")", ":", "\n", "                ", "myo_bg_boundary", ".", "append", "(", "(", "hh", ",", "ww", ")", ")", "\n", "\n", "", "", "", "max_thickness", "=", "-", "1.0", "\n", "min_thickness", "=", "-", "1.0", "\n", "sum_thickness", "=", "0.0", "\n", "for", "u", "in", "myo_lvc_boundary", ":", "\n", "        ", "min_dist", "=", "float", "(", "max", "(", "h", ",", "w", ")", ")", "\n", "for", "v", "in", "myo_bg_boundary", ":", "\n", "            ", "dist", "=", "math", ".", "sqrt", "(", "(", "u", "[", "0", "]", "-", "v", "[", "0", "]", ")", "**", "2", "+", "(", "u", "[", "1", "]", "-", "v", "[", "1", "]", ")", "**", "2", ")", "\n", "min_dist", "=", "min", "(", "min_dist", ",", "dist", ")", "\n", "", "max_thickness", "=", "max", "(", "max_thickness", ",", "min_dist", ")", "\n", "if", "min_thickness", "<", "0", ":", "\n", "            ", "min_thickness", "=", "min_dist", "\n", "", "else", ":", "\n", "            ", "min_thickness", "=", "min", "(", "min_thickness", ",", "min_dist", ")", "\n", "", "sum_thickness", "+=", "min_dist", "\n", "\n", "", "if", "len", "(", "myo_lvc_boundary", ")", ">", "0", ":", "\n", "        ", "mean_thickness", "=", "sum_thickness", "/", "len", "(", "myo_lvc_boundary", ")", "\n", "", "else", ":", "\n", "        ", "mean_thickness", "=", "-", "1.0", "\n", "", "return", "max_thickness", ",", "min_thickness", ",", "mean_thickness", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_calculation_given_slice_area": [[3893, 3900], ["len", "range", "math.sqrt"], "function", ["None"], ["", "def", "volume_calculation_given_slice_area", "(", "area_list", ",", "thickness", ")", ":", "\n", "    ", "length", "=", "len", "(", "area_list", ")", "\n", "volume", "=", "0.0", "\n", "for", "l", "in", "range", "(", "0", ",", "length", "-", "1", ")", ":", "\n", "        ", "subvolume", "=", "(", "area_list", "[", "l", "]", "+", "area_list", "[", "l", "+", "1", "]", "+", "math", ".", "sqrt", "(", "area_list", "[", "l", "]", "*", "area_list", "[", "l", "+", "1", "]", ")", ")", "*", "thickness", "/", "3", "\n", "volume", "+=", "subvolume", "\n", "", "return", "volume", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.number_of_components": [[3903, 3907], ["numpy.where", "scipy.ndimage.label", "numpy.ones_like", "numpy.zeros_like"], "function", ["None"], ["", "def", "number_of_components", "(", "array", ",", "value", ")", ":", "\n", "    ", "v_mask", "=", "np", ".", "where", "(", "array", "==", "value", ",", "np", ".", "ones_like", "(", "array", ")", ",", "np", ".", "zeros_like", "(", "array", ")", ")", "\n", "connected_components", ",", "num_connected_components", "=", "ndimage", ".", "label", "(", "v_mask", ")", "\n", "return", "num_connected_components", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.keep_largest_components": [[3908, 3919], ["numpy.zeros_like", "numpy.where", "scipy.ndimage.label", "numpy.ones_like", "numpy.zeros_like", "numpy.unique", "numpy.where", "max"], "function", ["None"], ["", "def", "keep_largest_components", "(", "array", ",", "keep_values", "=", "[", "1", ",", "2", ",", "3", "]", ",", "values", "=", "[", "1", ",", "2", ",", "3", "]", ")", ":", "\n", "    ", "output", "=", "np", ".", "zeros_like", "(", "array", ")", "\n", "for", "v", "in", "values", ":", "\n", "        ", "v_mask", "=", "np", ".", "where", "(", "array", "==", "v", ",", "np", ".", "ones_like", "(", "array", ")", ",", "np", ".", "zeros_like", "(", "array", ")", ")", "\n", "connected_components", ",", "num_connected_components", "=", "ndimage", ".", "label", "(", "v_mask", ")", "\n", "if", "(", "num_connected_components", ">", "1", ")", "and", "(", "v", "in", "keep_values", ")", ":", "\n", "            ", "unique", ",", "counts", "=", "np", ".", "unique", "(", "connected_components", ",", "return_counts", "=", "True", ")", "\n", "max_idx", "=", "np", ".", "where", "(", "counts", "==", "max", "(", "counts", "[", "1", ":", "]", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "v_mask", "=", "v_mask", "*", "(", "connected_components", "==", "max_idx", ")", "\n", "", "output", "=", "output", "+", "v", "*", "v_mask", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.second_largest_component_ratio": [[3921, 3934], ["numpy.where", "scipy.ndimage.label", "numpy.ones_like", "numpy.zeros_like", "numpy.unique", "counts[].argsort", "float", "numpy.where", "numpy.where", "max"], "function", ["None"], ["", "def", "second_largest_component_ratio", "(", "array", ",", "value", ")", ":", "\n", "    ", "v_mask", "=", "np", ".", "where", "(", "array", "==", "value", ",", "np", ".", "ones_like", "(", "array", ")", ",", "np", ".", "zeros_like", "(", "array", ")", ")", "\n", "connected_components", ",", "num_connected_components", "=", "ndimage", ".", "label", "(", "v_mask", ")", "\n", "if", "(", "num_connected_components", ">", "1", ")", ":", "\n", "        ", "unique", ",", "counts", "=", "np", ".", "unique", "(", "connected_components", ",", "return_counts", "=", "True", ")", "\n", "max_idx", "=", "np", ".", "where", "(", "counts", "==", "max", "(", "counts", "[", "1", ":", "]", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "max_count", "=", "(", "connected_components", "==", "max_idx", ")", ".", "sum", "(", ")", "\n", "second_tmp_idx", "=", "counts", "[", "1", ":", "]", ".", "argsort", "(", ")", "[", "-", "2", "]", "\n", "second_max_idx", "=", "np", ".", "where", "(", "counts", "==", "counts", "[", "1", ":", "]", "[", "second_tmp_idx", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "second_max_count", "=", "(", "connected_components", "==", "second_max_idx", ")", ".", "sum", "(", ")", "\n", "return", "float", "(", "second_max_count", ")", "/", "max_count", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.second_largest_component_count": [[3935, 3948], ["numpy.where", "scipy.ndimage.label", "numpy.ones_like", "numpy.zeros_like", "numpy.unique", "counts[].argsort", "numpy.where", "numpy.where", "max"], "function", ["None"], ["", "", "def", "second_largest_component_count", "(", "array", ",", "value", ")", ":", "\n", "    ", "v_mask", "=", "np", ".", "where", "(", "array", "==", "value", ",", "np", ".", "ones_like", "(", "array", ")", ",", "np", ".", "zeros_like", "(", "array", ")", ")", "\n", "connected_components", ",", "num_connected_components", "=", "ndimage", ".", "label", "(", "v_mask", ")", "\n", "if", "(", "num_connected_components", ">", "1", ")", ":", "\n", "        ", "unique", ",", "counts", "=", "np", ".", "unique", "(", "connected_components", ",", "return_counts", "=", "True", ")", "\n", "max_idx", "=", "np", ".", "where", "(", "counts", "==", "max", "(", "counts", "[", "1", ":", "]", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "max_count", "=", "(", "connected_components", "==", "max_idx", ")", ".", "sum", "(", ")", "\n", "second_tmp_idx", "=", "counts", "[", "1", ":", "]", ".", "argsort", "(", ")", "[", "-", "2", "]", "\n", "second_max_idx", "=", "np", ".", "where", "(", "counts", "==", "counts", "[", "1", ":", "]", "[", "second_tmp_idx", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "second_max_count", "=", "(", "connected_components", "==", "second_max_idx", ")", ".", "sum", "(", ")", "\n", "return", "second_max_count", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.v1_touch_v2": [[3950, 3963], ["range"], "function", ["None"], ["", "", "def", "v1_touch_v2", "(", "array", ",", "size_x", ",", "size_y", ",", "v1", ",", "v2", ",", "threshold", "=", "10", ")", ":", "\n", "    ", "touch_count", "=", "0", "\n", "for", "p", "in", "range", "(", "size_x", "*", "size_y", ")", ":", "\n", "        ", "r", "=", "p", "//", "size_x", "\n", "c", "=", "p", "%", "size_x", "\n", "if", "array", "[", "r", ",", "c", "]", "==", "v1", ":", "\n", "            ", "up_touch", "=", "(", "r", "!=", "0", ")", "and", "(", "array", "[", "r", "-", "1", ",", "c", "]", "==", "v2", ")", "\n", "down_touch", "=", "(", "r", "!=", "size_y", "-", "1", ")", "and", "(", "array", "[", "r", "+", "1", ",", "c", "]", "==", "v2", ")", "\n", "left_touch", "=", "(", "c", "!=", "0", ")", "and", "(", "array", "[", "r", ",", "c", "-", "1", "]", "==", "v2", ")", "\n", "right_touch", "=", "(", "c", "!=", "size_x", "-", "1", ")", "and", "(", "array", "[", "r", ",", "c", "+", "1", "]", "==", "v2", ")", "\n", "\n", "touch_count", "+=", "(", "up_touch", "+", "down_touch", "+", "left_touch", "+", "right_touch", ")", "\n", "", "", "return", "touch_count", ">=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.touch_length_count": [[3965, 3978], ["range"], "function", ["None"], ["", "def", "touch_length_count", "(", "array", ",", "size_x", ",", "size_y", ",", "v1", ",", "v2", ")", ":", "\n", "    ", "touch_count", "=", "0", "\n", "for", "p", "in", "range", "(", "size_x", "*", "size_y", ")", ":", "\n", "        ", "r", "=", "p", "//", "size_x", "\n", "c", "=", "p", "%", "size_x", "\n", "if", "array", "[", "r", ",", "c", "]", "==", "v1", ":", "\n", "            ", "up_touch", "=", "(", "r", "!=", "0", ")", "and", "(", "array", "[", "r", "-", "1", ",", "c", "]", "==", "v2", ")", "\n", "down_touch", "=", "(", "r", "!=", "size_y", "-", "1", ")", "and", "(", "array", "[", "r", "+", "1", ",", "c", "]", "==", "v2", ")", "\n", "left_touch", "=", "(", "c", "!=", "0", ")", "and", "(", "array", "[", "r", ",", "c", "-", "1", "]", "==", "v2", ")", "\n", "right_touch", "=", "(", "c", "!=", "size_x", "-", "1", ")", "and", "(", "array", "[", "r", ",", "c", "+", "1", "]", "==", "v2", ")", "\n", "\n", "touch_count", "+=", "(", "up_touch", "+", "down_touch", "+", "left_touch", "+", "right_touch", ")", "\n", "", "", "return", "touch_count", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.area_boundary_ratio": [[3979, 3994], ["range", "float"], "function", ["None"], ["", "def", "area_boundary_ratio", "(", "array", ",", "size_x", ",", "size_y", ",", "v", ")", ":", "\n", "    ", "area", "=", "0", "\n", "boundary", "=", "0", "\n", "for", "p", "in", "range", "(", "size_x", "*", "size_y", ")", ":", "\n", "        ", "r", "=", "p", "//", "size_x", "\n", "c", "=", "p", "%", "size_x", "\n", "if", "array", "[", "r", ",", "c", "]", "==", "v", ":", "\n", "            ", "up_touch", "=", "(", "r", "!=", "0", ")", "and", "(", "array", "[", "r", "-", "1", ",", "c", "]", "!=", "v", ")", "\n", "down_touch", "=", "(", "r", "!=", "size_y", "-", "1", ")", "and", "(", "array", "[", "r", "+", "1", ",", "c", "]", "!=", "v", ")", "\n", "left_touch", "=", "(", "c", "!=", "0", ")", "and", "(", "array", "[", "r", ",", "c", "-", "1", "]", "!=", "v", ")", "\n", "right_touch", "=", "(", "c", "!=", "size_x", "-", "1", ")", "and", "(", "array", "[", "r", ",", "c", "+", "1", "]", "!=", "v", ")", "\n", "\n", "area", "+=", "1", "\n", "boundary", "+=", "(", "up_touch", "+", "down_touch", "+", "left_touch", "+", "right_touch", ")", "\n", "", "", "return", "float", "(", "area", ")", "/", "(", "boundary", "*", "boundary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.change_neighbor_value": [[3995, 4010], ["range"], "function", ["None"], ["", "def", "change_neighbor_value", "(", "array", ",", "size_x", ",", "size_y", ",", "v0", ",", "v1", ",", "v2", ")", ":", "\n", "    ", "output", "=", "array", "\n", "for", "p", "in", "range", "(", "size_x", "*", "size_y", ")", ":", "\n", "        ", "r", "=", "p", "//", "size_x", "\n", "c", "=", "p", "%", "size_x", "\n", "if", "array", "[", "r", ",", "c", "]", "==", "v0", ":", "\n", "            ", "if", "(", "r", "!=", "0", ")", "and", "(", "array", "[", "r", "-", "1", ",", "c", "]", "==", "v1", ")", ":", "\n", "                ", "output", "[", "r", "-", "1", ",", "c", "]", "=", "v2", "\n", "", "if", "(", "r", "!=", "size_y", "-", "1", ")", "and", "(", "array", "[", "r", "+", "1", ",", "c", "]", "==", "v1", ")", ":", "\n", "                ", "output", "[", "r", "+", "1", ",", "c", "]", "=", "v2", "\n", "", "if", "(", "c", "!=", "0", ")", "and", "(", "array", "[", "r", ",", "c", "-", "1", "]", "==", "v1", ")", ":", "\n", "                ", "output", "[", "r", ",", "c", "-", "1", "]", "=", "v2", "\n", "", "if", "(", "c", "!=", "size_x", "-", "1", ")", "and", "(", "array", "[", "r", ",", "c", "+", "1", "]", "==", "v1", ")", ":", "\n", "                ", "output", "[", "r", ",", "c", "+", "1", "]", "=", "v2", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.pixel_count_by_value": [[4011, 4018], ["array.flatten.flatten"], "function", ["None"], ["", "def", "pixel_count_by_value", "(", "array", ",", "value", ")", ":", "\n", "    ", "count", "=", "0", "\n", "array", "=", "array", ".", "flatten", "(", ")", "\n", "for", "v", "in", "array", ":", "\n", "        ", "if", "v", "==", "value", ":", "\n", "            ", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.save_layer_output": [[4020, 4040], ["keras.models.Model", "keras.models.Model.predict", "range", "len", "numpy.savetxt", "model.get_layer", "image2.array_to_img", "image2.array_to_img.save", "numpy.savetxt", "range", "image2.array_to_img", "image2.array_to_img.save", "numpy.savetxt", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str", "str", "str", "str().zfill", "str", "str().zfill", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.array_to_img", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.array_to_img"], ["", "def", "save_layer_output", "(", "model", ",", "data", ",", "layer_name", "=", "'output'", ",", "save_path_prefix", "=", "'output'", ")", ":", "\n", "    ", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "model", ".", "input", ",", "\n", "outputs", "=", "model", ".", "get_layer", "(", "layer_name", ")", ".", "output", ")", "\n", "intermediate_output", "=", "intermediate_layer_model", ".", "predict", "(", "data", ")", "\n", "batch_size", "=", "intermediate_output", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "data", "=", "intermediate_output", "[", "i", "]", "\n", "if", "len", "(", "data", ".", "shape", ")", "==", "3", ":", "\n", "            ", "if", "(", "data", ".", "shape", "[", "2", "]", "==", "1", ")", ":", "\n", "                ", "img", "=", "array_to_img", "(", "data", ",", "data_format", "=", "None", ",", "scale", "=", "True", ")", "\n", "img", ".", "save", "(", "save_path_prefix", "+", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", "+", "\".png\"", ")", "\n", "np", ".", "savetxt", "(", "save_path_prefix", "+", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", "+", "\".txt\"", ",", "data", ",", "fmt", "=", "'%.6f'", ")", "\n", "", "else", ":", "\n", "                ", "for", "j", "in", "range", "(", "data", ".", "shape", "[", "2", "]", ")", ":", "\n", "                    ", "data_j", "=", "data", "[", ":", ",", ":", ",", "j", ":", "(", "j", "+", "1", ")", "]", "\n", "img_j", "=", "array_to_img", "(", "data_j", ",", "data_format", "=", "None", ",", "scale", "=", "True", ")", "\n", "img_j", ".", "save", "(", "save_path_prefix", "+", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", "+", "\"_\"", "+", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", "+", "\".png\"", ")", "\n", "np", ".", "savetxt", "(", "save_path_prefix", "+", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", "+", "\"_\"", "+", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", "+", "\".txt\"", ",", "data_j", ",", "fmt", "=", "'%.6f'", ")", "\n", "", "", "", "else", ":", "\n", "            ", "np", ".", "savetxt", "(", "save_path_prefix", "+", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", "+", "\".txt\"", ",", "data", ",", "fmt", "=", "'%.6f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.print_layer_output": [[4042, 4050], ["keras.models.Model", "keras.models.Model.predict", "range", "print", "model.get_layer"], "function", ["None"], ["", "", "", "def", "print_layer_output", "(", "model", ",", "data", ",", "layer_name", "=", "'output'", ")", ":", "\n", "    ", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "model", ".", "input", ",", "\n", "outputs", "=", "model", ".", "get_layer", "(", "layer_name", ")", ".", "output", ")", "\n", "intermediate_output", "=", "intermediate_layer_model", ".", "predict", "(", "data", ")", "\n", "batch_size", "=", "intermediate_output", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "data", "=", "intermediate_output", "[", "i", "]", "\n", "print", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.print_model_weights": [[4052, 4068], ["keras.backend.batch_get_value", "print", "print", "print", "enumerate", "w.flatten", "print", "model.layers.index", "all_weights.index", "int", "int", "int", "int"], "function", ["None"], ["", "", "def", "print_model_weights", "(", "model", ")", ":", "\n", "    ", "layers", "=", "model", ".", "layers", "[", "-", "10", ":", "]", "\n", "all_weights", "=", "[", "]", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "all_weights", "+=", "layer", ".", "weights", "\n", "", "evaluated_weights", "=", "K", ".", "batch_get_value", "(", "all_weights", ")", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "print", "(", "\"\\nlayer #{} {}:{}\"", ".", "format", "(", "model", ".", "layers", ".", "index", "(", "layer", ")", ",", "layer", ".", "__class__", ".", "__name__", ",", "layer", ".", "name", ")", ")", "\n", "print", "(", "\"input shape: {}\"", ".", "format", "(", "layer", ".", "input_shape", ")", ")", "\n", "print", "(", "\"output shape: {}\"", ".", "format", "(", "layer", ".", "output_shape", ")", ")", "\n", "for", "j", ",", "w", "in", "enumerate", "(", "layer", ".", "trainable_weights", ")", ":", "\n", "            ", "w", "=", "evaluated_weights", "[", "all_weights", ".", "index", "(", "w", ")", "]", "\n", "wf", "=", "w", ".", "flatten", "(", ")", "\n", "s", "=", "w", ".", "size", "\n", "print", "(", "\" weights #{} {}: {} {} {} {}\"", ".", "format", "(", "j", ",", "w", ".", "shape", ",", "wf", "[", "int", "(", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "2", "*", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "3", "*", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "4", "*", "s", "//", "5", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.print_model_gradients": [[4070, 4104], ["model.optimizer.get_gradients", "keras.backend.get_session().run", "print", "print", "print", "enumerate", "keras.backend.get_session", "g.flatten", "print", "keras.backend.learning_phase", "model.layers.index", "all_trainable_weights.index", "int", "int", "int", "int"], "function", ["None"], ["", "", "", "def", "print_model_gradients", "(", "model", ",", "batch_img", ",", "batch_mask", ")", ":", "\n", "    ", "layers", "=", "model", ".", "layers", "[", "-", "10", ":", "]", "\n", "all_trainable_weights", "=", "[", "]", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "all_trainable_weights", "+=", "layer", ".", "trainable_weights", "\n", "", "gradient_list", "=", "model", ".", "optimizer", ".", "get_gradients", "(", "model", ".", "total_loss", ",", "\n", "all_trainable_weights", ")", "\n", "'''\n    get_gradient_list = K.function(\n        inputs=[model.inputs[0], model.targets[0], model.sample_weights[0],\n                K.learning_phase()],\n        outputs=gradient_list,\n        updates=None)\n    evaluated_gradient_list = get_gradient_list(\n        [batch_img, batch_mask, [1.0]*(batch_img.shape[0]), 1])\n    '''", "\n", "evaluated_gradient_list", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "print", "(", "\"\\nlayer #{} {}:{}\"", ".", "format", "(", "model", ".", "layers", ".", "index", "(", "layer", ")", ",", "layer", ".", "__class__", ".", "__name__", ",", "layer", ".", "name", ")", ")", "\n", "print", "(", "\"input shape: {}\"", ".", "format", "(", "layer", ".", "input_shape", ")", ")", "\n", "print", "(", "\"output shape: {}\"", ".", "format", "(", "layer", ".", "output_shape", ")", ")", "\n", "\n", "for", "j", ",", "w", "in", "enumerate", "(", "layer", ".", "trainable_weights", ")", ":", "\n", "            ", "g", "=", "evaluated_gradient_list", "[", "all_trainable_weights", ".", "index", "(", "w", ")", "]", "\n", "gf", "=", "g", ".", "flatten", "(", ")", "\n", "s", "=", "g", ".", "size", "\n", "print", "(", "\" gradients #{} {}: {} {} {} {}\"", ".", "format", "(", "j", ",", "g", ".", "shape", ",", "gf", "[", "int", "(", "s", "//", "5", ")", "]", ",", "gf", "[", "int", "(", "2", "*", "s", "//", "5", ")", "]", ",", "gf", "[", "int", "(", "3", "*", "s", "//", "5", ")", "]", ",", "gf", "[", "int", "(", "4", "*", "s", "//", "5", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.print_model_weights_gradients": [[4108, 4271], ["model.optimizer.get_gradients", "len", "len", "print", "print", "print", "enumerate", "enumerate", "isinstance", "keras.backend.get_session().run", "w.flatten", "print", "g.flatten", "print", "w.flatten", "print", "isinstance", "model.layers.index", "keras.backend.get_session", "len", "keras.backend.get_session().run", "keras.backend.get_session().run", "all_weights.index", "all_trainable_weights.index", "all_weights.index", "keras.backend.learning_phase", "len", "keras.backend.get_session().run", "len", "len", "keras.backend.get_session().run", "keras.backend.get_session", "len", "keras.backend.get_session().run", "keras.backend.get_session", "len", "len", "keras.backend.get_session().run", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "keras.backend.learning_phase", "keras.backend.get_session", "len", "keras.backend.get_session().run", "keras.backend.learning_phase", "keras.backend.get_session", "len", "len", "keras.backend.get_session().run", "keras.backend.learning_phase", "keras.backend.get_session", "len", "keras.backend.get_session().run", "keras.backend.learning_phase", "keras.backend.get_session", "len", "len", "keras.backend.learning_phase", "keras.backend.get_session", "keras.backend.learning_phase", "keras.backend.get_session", "keras.backend.learning_phase", "keras.backend.get_session", "keras.backend.learning_phase", "keras.backend.learning_phase"], "function", ["None"], ["", "", "", "def", "print_model_weights_gradients", "(", "model", ",", "batch_img", ",", "batch_mask", ")", ":", "\n", "    ", "layers", "=", "model", ".", "layers", "[", "-", "10", ":", "]", "\n", "\n", "all_weights", "=", "[", "]", "\n", "all_trainable_weights", "=", "[", "]", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "all_weights", "+=", "layer", ".", "weights", "\n", "all_trainable_weights", "+=", "layer", ".", "trainable_weights", "\n", "", "gradient_list", "=", "model", ".", "optimizer", ".", "get_gradients", "(", "model", ".", "total_loss", ",", "\n", "all_trainable_weights", ")", "\n", "weights_len", "=", "len", "(", "all_weights", ")", "\n", "gradient_len", "=", "len", "(", "gradient_list", ")", "\n", "if", "(", "weights_len", "+", "gradient_len", ">", "0", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "batch_img", ",", "list", ")", ":", "\n", "            ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "\n", "", "elif", "not", "isinstance", "(", "batch_mask", ",", "list", ")", ":", "\n", "            ", "if", "len", "(", "batch_img", ")", "==", "2", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "3", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "4", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "inputs", "[", "3", "]", ":", "batch_img", "[", "3", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "9", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "inputs", "[", "3", "]", ":", "batch_img", "[", "3", "]", ",", "\n", "model", ".", "inputs", "[", "4", "]", ":", "batch_img", "[", "4", "]", ",", "\n", "model", ".", "inputs", "[", "5", "]", ":", "batch_img", "[", "5", "]", ",", "\n", "model", ".", "inputs", "[", "6", "]", ":", "batch_img", "[", "6", "]", ",", "\n", "model", ".", "inputs", "[", "7", "]", ":", "batch_img", "[", "7", "]", ",", "\n", "model", ".", "inputs", "[", "8", "]", ":", "batch_img", "[", "8", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "10", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "inputs", "[", "3", "]", ":", "batch_img", "[", "3", "]", ",", "\n", "model", ".", "inputs", "[", "4", "]", ":", "batch_img", "[", "4", "]", ",", "\n", "model", ".", "inputs", "[", "5", "]", ":", "batch_img", "[", "5", "]", ",", "\n", "model", ".", "inputs", "[", "6", "]", ":", "batch_img", "[", "6", "]", ",", "\n", "model", ".", "inputs", "[", "7", "]", ":", "batch_img", "[", "7", "]", ",", "\n", "model", ".", "inputs", "[", "8", "]", ":", "batch_img", "[", "8", "]", ",", "\n", "model", ".", "inputs", "[", "9", "]", ":", "batch_img", "[", "9", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "batch_img", ")", "==", "2", "and", "len", "(", "batch_mask", ")", "==", "2", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", "[", "0", "]", ",", "\n", "model", ".", "targets", "[", "1", "]", ":", "batch_mask", "[", "1", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "3", "and", "len", "(", "batch_mask", ")", "==", "2", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", "[", "0", "]", ",", "\n", "model", ".", "targets", "[", "1", "]", ":", "batch_mask", "[", "1", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "10", "and", "len", "(", "batch_mask", ")", "==", "2", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "inputs", "[", "3", "]", ":", "batch_img", "[", "3", "]", ",", "\n", "model", ".", "inputs", "[", "4", "]", ":", "batch_img", "[", "4", "]", ",", "\n", "model", ".", "inputs", "[", "5", "]", ":", "batch_img", "[", "5", "]", ",", "\n", "model", ".", "inputs", "[", "6", "]", ":", "batch_img", "[", "6", "]", ",", "\n", "model", ".", "inputs", "[", "7", "]", ":", "batch_img", "[", "7", "]", ",", "\n", "model", ".", "inputs", "[", "8", "]", ":", "batch_img", "[", "8", "]", ",", "\n", "model", ".", "inputs", "[", "9", "]", ":", "batch_img", "[", "9", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", "[", "0", "]", ",", "\n", "model", ".", "targets", "[", "1", "]", ":", "batch_mask", "[", "1", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "3", "and", "len", "(", "batch_mask", ")", "==", "3", ":", "\n", "                ", "evaluated", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "all_weights", "+", "gradient_list", ",", "\n", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "targets", "[", "0", "]", ":", "batch_mask", "[", "0", "]", ",", "\n", "model", ".", "targets", "[", "1", "]", ":", "batch_mask", "[", "1", "]", ",", "\n", "model", ".", "targets", "[", "2", "]", ":", "batch_mask", "[", "2", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "2", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", ")", "\n", "", "", "", "else", ":", "\n", "        ", "evaluated", "=", "[", "]", "\n", "\n", "", "evaluated_all_weights", "=", "evaluated", "[", ":", "weights_len", "]", "\n", "evaluated_gradient_list", "=", "evaluated", "[", "weights_len", ":", "]", "\n", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "print", "(", "\"\\nlayer #{} {}:{}\"", ".", "format", "(", "model", ".", "layers", ".", "index", "(", "layer", ")", ",", "layer", ".", "__class__", ".", "__name__", ",", "layer", ".", "name", ")", ")", "\n", "print", "(", "\"input shape: {}\"", ".", "format", "(", "layer", ".", "input_shape", ")", ")", "\n", "print", "(", "\"output shape: {}\"", ".", "format", "(", "layer", ".", "output_shape", ")", ")", "\n", "\n", "for", "j", ",", "wt", "in", "enumerate", "(", "layer", ".", "trainable_weights", ")", ":", "\n", "            ", "w", "=", "evaluated_all_weights", "[", "all_weights", ".", "index", "(", "wt", ")", "]", "\n", "wf", "=", "w", ".", "flatten", "(", ")", "\n", "s", "=", "w", ".", "size", "\n", "print", "(", "\" t_weights #{} {}: {} {} {} {}\"", ".", "format", "(", "j", ",", "w", ".", "shape", ",", "wf", "[", "int", "(", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "2", "*", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "3", "*", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "4", "*", "s", "//", "5", ")", "]", ")", ")", "\n", "\n", "g", "=", "evaluated_gradient_list", "[", "all_trainable_weights", ".", "index", "(", "wt", ")", "]", "\n", "gf", "=", "g", ".", "flatten", "(", ")", "\n", "s", "=", "g", ".", "size", "\n", "print", "(", "\" gradients #{} {}: {} {} {} {}\"", ".", "format", "(", "j", ",", "g", ".", "shape", ",", "gf", "[", "int", "(", "s", "//", "5", ")", "]", ",", "gf", "[", "int", "(", "2", "*", "s", "//", "5", ")", "]", ",", "gf", "[", "int", "(", "3", "*", "s", "//", "5", ")", "]", ",", "gf", "[", "int", "(", "4", "*", "s", "//", "5", ")", "]", ")", ")", "\n", "\n", "", "for", "j", ",", "wt", "in", "enumerate", "(", "layer", ".", "non_trainable_weights", ")", ":", "\n", "            ", "w", "=", "evaluated_all_weights", "[", "all_weights", ".", "index", "(", "wt", ")", "]", "\n", "wf", "=", "w", ".", "flatten", "(", ")", "\n", "s", "=", "w", ".", "size", "\n", "print", "(", "\" nont_weights #{} {}: {} {} {} {}\"", ".", "format", "(", "j", ",", "w", ".", "shape", ",", "wf", "[", "int", "(", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "2", "*", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "3", "*", "s", "//", "5", ")", "]", ",", "wf", "[", "int", "(", "4", "*", "s", "//", "5", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.save_model_output_gradients_wrt_to_input": [[4274, 4398], ["keras.backend.get_session().run", "print", "print", "print", "keras.backend.gradients", "keras.backend.gradients", "isinstance", "len", "enumerate", "keras.backend.get_session", "range", "keras.backend.learning_phase", "len", "keras.backend.learning_phase", "numpy.save", "eg_j.max", "eg_j.min", "keras.backend.learning_phase", "len", "keras.backend.learning_phase", "len", "range", "len", "keras.backend.learning_phase", "str().zfill", "str().zfill", "image2.array_to_img", "image2.array_to_img.save", "len", "range", "len", "keras.backend.learning_phase", "numpy.expand_dims", "image2.array_to_img", "image2.array_to_img.save", "len", "keras.backend.learning_phase", "str", "str", "str().zfill", "str().zfill", "str().zfill", "len", "keras.backend.learning_phase", "str().zfill", "str().zfill", "str().zfill", "len", "keras.backend.learning_phase", "str", "str", "str", "len", "keras.backend.learning_phase", "str", "str", "str", "len", "keras.backend.learning_phase"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.array_to_img", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.array_to_img"], ["", "", "", "def", "save_model_output_gradients_wrt_to_input", "(", "model", ",", "batch_img", ",", "batch_mask_number", ",", "output_idx", "=", "None", ",", "save_path_prefix", "=", "None", ")", ":", "\n", "    ", "if", "output_idx", "is", "None", ":", "\n", "        ", "gradient_list", "=", "K", ".", "gradients", "(", "model", ".", "outputs", ",", "model", ".", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "gradient_list", "=", "K", ".", "gradients", "(", "model", ".", "outputs", "[", "output_idx", "]", ",", "model", ".", "inputs", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "batch_img", ",", "list", ")", ":", "\n", "        ", "if", "batch_mask_number", "==", "1", ":", "\n", "            ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "batch_mask_number", "==", "2", ":", "\n", "            ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "", "elif", "len", "(", "batch_img", ")", "==", "1", "and", "batch_mask_number", "==", "1", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "1", "and", "batch_mask_number", "==", "2", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "2", "and", "batch_mask_number", "==", "1", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "2", "and", "batch_mask_number", "==", "2", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "3", "and", "batch_mask_number", "==", "1", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "3", "and", "batch_mask_number", "==", "2", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "9", "and", "batch_mask_number", "==", "1", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "inputs", "[", "3", "]", ":", "batch_img", "[", "3", "]", ",", "\n", "model", ".", "inputs", "[", "4", "]", ":", "batch_img", "[", "4", "]", ",", "\n", "model", ".", "inputs", "[", "5", "]", ":", "batch_img", "[", "5", "]", ",", "\n", "model", ".", "inputs", "[", "6", "]", ":", "batch_img", "[", "6", "]", ",", "\n", "model", ".", "inputs", "[", "7", "]", ":", "batch_img", "[", "7", "]", ",", "\n", "model", ".", "inputs", "[", "8", "]", ":", "batch_img", "[", "8", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "10", "and", "batch_mask_number", "==", "1", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "inputs", "[", "3", "]", ":", "batch_img", "[", "3", "]", ",", "\n", "model", ".", "inputs", "[", "4", "]", ":", "batch_img", "[", "4", "]", ",", "\n", "model", ".", "inputs", "[", "5", "]", ":", "batch_img", "[", "5", "]", ",", "\n", "model", ".", "inputs", "[", "6", "]", ":", "batch_img", "[", "6", "]", ",", "\n", "model", ".", "inputs", "[", "7", "]", ":", "batch_img", "[", "7", "]", ",", "\n", "model", ".", "inputs", "[", "8", "]", ":", "batch_img", "[", "8", "]", ",", "\n", "model", ".", "inputs", "[", "9", "]", ":", "batch_img", "[", "9", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "", "elif", "len", "(", "batch_img", ")", "==", "10", "and", "batch_mask_number", "==", "2", ":", "\n", "        ", "feed_dict", "=", "{", "model", ".", "inputs", "[", "0", "]", ":", "batch_img", "[", "0", "]", ",", "\n", "model", ".", "inputs", "[", "1", "]", ":", "batch_img", "[", "1", "]", ",", "\n", "model", ".", "inputs", "[", "2", "]", ":", "batch_img", "[", "2", "]", ",", "\n", "model", ".", "inputs", "[", "3", "]", ":", "batch_img", "[", "3", "]", ",", "\n", "model", ".", "inputs", "[", "4", "]", ":", "batch_img", "[", "4", "]", ",", "\n", "model", ".", "inputs", "[", "5", "]", ":", "batch_img", "[", "5", "]", ",", "\n", "model", ".", "inputs", "[", "6", "]", ":", "batch_img", "[", "6", "]", ",", "\n", "model", ".", "inputs", "[", "7", "]", ":", "batch_img", "[", "7", "]", ",", "\n", "model", ".", "inputs", "[", "8", "]", ":", "batch_img", "[", "8", "]", ",", "\n", "model", ".", "inputs", "[", "9", "]", ":", "batch_img", "[", "9", "]", ",", "\n", "model", ".", "sample_weights", "[", "0", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "model", ".", "sample_weights", "[", "1", "]", ":", "[", "1.0", "]", "*", "(", "batch_img", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "1", "}", "\n", "\n", "\n", "", "evaluated_gradient_list", "=", "K", ".", "get_session", "(", ")", ".", "run", "(", "\n", "gradient_list", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "print", "(", "'the gradients of output w.r.t input'", ")", "\n", "print", "(", "len", "(", "evaluated_gradient_list", ")", ")", "\n", "print", "(", "evaluated_gradient_list", "[", "0", "]", ".", "shape", ")", "\n", "\n", "# Save the gradients", "\n", "if", "save_path_prefix", "is", "not", "None", ":", "\n", "        ", "for", "i", ",", "eg", "in", "enumerate", "(", "evaluated_gradient_list", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "eg", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "eg_j", "=", "eg", "[", "j", ",", ":", "]", "\n", "gradient_npy_path", "=", "save_path_prefix", "+", "'input{}_batchIdx{}.npy'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", ")", "\n", "np", ".", "save", "(", "gradient_npy_path", ",", "eg_j", ")", "\n", "\n", "max_val", "=", "eg_j", ".", "max", "(", ")", "\n", "min_val", "=", "eg_j", ".", "min", "(", ")", "\n", "eg_j", "=", "eg_j", "-", "min_val", "\n", "if", "(", "max_val", "-", "min_val", ")", ">", "0", ":", "\n", "                    ", "eg_j", "=", "eg_j", "*", "255.0", "/", "(", "max_val", "-", "min_val", ")", "\n", "\n", "", "if", "len", "(", "eg_j", ".", "shape", ")", "==", "3", ":", "\n", "                    ", "for", "k", "in", "range", "(", "eg_j", ".", "shape", "[", "2", "]", ")", ":", "\n", "                        ", "eg_j_k", "=", "eg_j", "[", ":", ",", ":", ",", "k", ":", "(", "k", "+", "1", ")", "]", "\n", "eg_j_k_img", "=", "array_to_img", "(", "eg_j_k", ",", "data_format", "=", "None", ",", "scale", "=", "False", ")", "\n", "gradient_png_path", "=", "save_path_prefix", "+", "'input{}_batchIdx{}_channel{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "k", ")", ".", "zfill", "(", "2", ")", ")", "\n", "eg_j_k_img", ".", "save", "(", "gradient_png_path", ")", "\n", "", "", "elif", "len", "(", "eg_j", ".", "shape", ")", "==", "2", ":", "\n", "                    ", "for", "k", "in", "range", "(", "eg_j", ".", "shape", "[", "1", "]", ")", ":", "\n", "                        ", "eg_j_k", "=", "np", ".", "expand_dims", "(", "eg_j", "[", ":", ",", "k", ":", "(", "k", "+", "1", ")", "]", ",", "axis", "=", "0", ")", "\n", "eg_j_k_img", "=", "array_to_img", "(", "eg_j_k", ",", "data_format", "=", "None", ",", "scale", "=", "False", ")", "\n", "gradient_png_path", "=", "save_path_prefix", "+", "'input{}_batchIdx{}_channel{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "k", ")", ".", "zfill", "(", "2", ")", ")", "\n", "eg_j_k_img", ".", "save", "(", "gradient_png_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.handle_dim_ordering": [[4403, 4415], ["keras.backend.image_dim_ordering"], "function", ["None"], ["", "", "", "", "", "", "def", "handle_dim_ordering", "(", ")", ":", "\n", "    ", "global", "ROW_AXIS", "\n", "global", "COL_AXIS", "\n", "global", "CHANNEL_AXIS", "\n", "if", "K", ".", "image_dim_ordering", "(", ")", "==", "'tf'", ":", "\n", "        ", "ROW_AXIS", "=", "1", "\n", "COL_AXIS", "=", "2", "\n", "CHANNEL_AXIS", "=", "3", "\n", "", "else", ":", "\n", "        ", "CHANNEL_AXIS", "=", "1", "\n", "ROW_AXIS", "=", "2", "\n", "COL_AXIS", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.handle_dim_ordering2": [[4416, 4422], ["keras.backend.image_dim_ordering"], "function", ["None"], ["", "", "def", "handle_dim_ordering2", "(", ")", ":", "\n", "    ", "global", "CHANNEL_AXIS", "\n", "if", "K", ".", "image_dim_ordering", "(", ")", "==", "'tf'", ":", "\n", "        ", "CHANNEL_AXIS", "=", "2", "\n", "", "else", ":", "\n", "        ", "CHANNEL_AXIS", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.get_block": [[4424, 4431], ["isinstance", "globals().get", "ValueError", "globals"], "function", ["None"], ["", "", "def", "get_block", "(", "identifier", ")", ":", "\n", "    ", "if", "isinstance", "(", "identifier", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "res", "=", "globals", "(", ")", ".", "get", "(", "identifier", ")", "\n", "if", "not", "res", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid {}'", ".", "format", "(", "identifier", ")", ")", "\n", "", "return", "res", "\n", "", "return", "identifier", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.download_weights.download_weights": [[8, 43], ["print", "os.path.join", "urltool.urlretrieve", "print", "os.path.join", "urltool.urlretrieve", "range", "print", "range", "os.path.join", "urltool.urlretrieve", "os.path.join", "urltool.urlretrieve"], "function", ["None"], ["def", "download_weights", "(", ")", ":", "\n", "    ", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "        ", "import", "urllib", ".", "request", "as", "urltool", "\n", "", "else", ":", "\n", "        ", "import", "urllib", "as", "urltool", "\n", "\n", "", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "\n", "# ROI-net", "\n", "print", "(", "\"Downloading pretrained ROI-net\"", ")", "\n", "roi_net_source", "=", "'http://www-sop.inria.fr/members/Qiao.Zheng/CardiacMotionFlow/ROI/model_roi_net_epoch050.h5'", "\n", "roi_net_destination", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'ROI'", ",", "'model_roi_net_epoch050.h5'", ")", "\n", "urltool", ".", "urlretrieve", "(", "roi_net_source", ",", "roi_net_destination", ")", "\n", "\n", "\n", "# LVRV-net", "\n", "print", "(", "\"Downloading pretrained LVRV-net\"", ")", "\n", "\n", "lvrv_net_source", "=", "'http://www-sop.inria.fr/members/Qiao.Zheng/CardiacMotionFlow/segmentation/model_lvrv_net_epoch080.h5'", "\n", "lvrv_net_destination", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'segmentation'", ",", "'model_lvrv_net_epoch080.h5'", ")", "\n", "urltool", ".", "urlretrieve", "(", "lvrv_net_source", ",", "lvrv_net_destination", ")", "\n", "\n", "for", "f", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "        ", "lvrv_net_source", "=", "'http://www-sop.inria.fr/members/Qiao.Zheng/CardiacMotionFlow/segmentation/model_lvrv_net_finetune_fold{}_epoch1000.h5'", ".", "format", "(", "f", ")", "\n", "lvrv_net_destination", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'segmentation'", ",", "'model_lvrv_net_finetune_fold{}_epoch1000.h5'", ".", "format", "(", "f", ")", ")", "\n", "urltool", ".", "urlretrieve", "(", "lvrv_net_source", ",", "lvrv_net_destination", ")", "\n", "\n", "\n", "# ApparentFlow-net", "\n", "", "print", "(", "\"Downloading pretrained ApparentFlow-net\"", ")", "\n", "for", "f", "in", "range", "(", "0", ",", "6", ")", ":", "\n", "        ", "apparentflow_net_source", "=", "'http://www-sop.inria.fr/members/Qiao.Zheng/CardiacMotionFlow/flow/model_apparentflow_net_fold{}_epoch050.h5'", ".", "format", "(", "f", ")", "\n", "apparentflow_net_destination", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'flow'", ",", "'model_apparentflow_net_fold{}_epoch050.h5'", ".", "format", "(", "f", ")", ")", "\n", "urltool", ".", "urlretrieve", "(", "apparentflow_net_source", ",", "apparentflow_net_destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.segmentation.module_lvrv_net.net_module": [[33, 267], ["helpers.handle_dim_ordering", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.models.Model", "len", "Exception", "keras.backend.image_dim_ordering", "keras.layers.core.Lambda", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.UpSampling2D", "keras.layers.merge.Add", "keras.layers.UpSampling2D", "keras.layers.merge.Add", "keras.layers.core.Reshape", "keras.layers.Activation", "keras.layers.core.Reshape"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.handle_dim_ordering", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block"], ["def", "net_module", "(", "input_shape", ",", "num_outputs", ")", ":", "\n", "    ", "\"\"\"Builds a net architecture.\n    Args:\n        input_shape: The input shape in the form (nb_rows, nb_cols, nb_channels)\n        num_outputs: The number of outputs at final softmax layer\n        Returns:\n            The keras `Model`.\n    \"\"\"", "\n", "CHANNEL_AXIS", "=", "3", "\n", "handle_dim_ordering", "(", ")", "\n", "if", "len", "(", "input_shape", ")", "!=", "3", ":", "\n", "        ", "raise", "Exception", "(", "\"Input shape should be a tuple (nb_rows, nb_cols, nb_channels)\"", ")", "\n", "\n", "# Permute dimension order if necessary", "\n", "", "if", "K", ".", "image_dim_ordering", "(", ")", "!=", "'tf'", ":", "\n", "        ", "input_shape", "=", "(", "input_shape", "[", "2", "]", ",", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ")", "\n", "\n", "", "input_img0", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "\"input_img0\"", ")", "\n", "\n", "input_img1", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "\"input_img1\"", ")", "\n", "\n", "input_mask0", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "\"input_mask0\"", ")", "\n", "\n", "input_mask0_one_hot", "=", "Lambda", "(", "one_hot", ",", "\n", "arguments", "=", "{", "'num_classes'", ":", "num_outputs", "}", ")", "(", "input_mask0", ")", "\n", "\n", "concatenate", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concatenate\"", ")", "(", "[", "input_img0", ",", "\n", "input_mask0_one_hot", "]", ")", "\n", "\n", "base_channel", "=", "32", "\n", "\n", "\n", "\n", "\n", "block_conv_1", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "1", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block1\"", ")", "(", "input_img1", ")", "\n", "\n", "\n", "block_pool_2", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block2\"", ")", "(", "block_conv_1", ")", "\n", "\n", "block_conv_2", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "2", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block2\"", ")", "(", "block_pool_2", ")", "\n", "\n", "\n", "block_pool_4", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block4\"", ")", "(", "block_conv_2", ")", "\n", "\n", "block_conv_4", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "4", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block4\"", ")", "(", "block_pool_4", ")", "\n", "\n", "\n", "block_pool_8", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block8\"", ")", "(", "block_conv_4", ")", "\n", "\n", "block_conv_8", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "8", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block8\"", ")", "(", "block_pool_8", ")", "\n", "\n", "\n", "block_pool_16", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block16\"", ")", "(", "block_conv_8", ")", "\n", "\n", "block_conv_16", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "16", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block16\"", ")", "(", "block_pool_16", ")", "\n", "\n", "\n", "block_pool_32", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block32\"", ")", "(", "block_conv_16", ")", "\n", "\n", "block_conv_32", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "32", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "1", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block32\"", ")", "(", "block_pool_32", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "block_context_conv_1", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "1", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"context_conv_block1\"", ")", "(", "concatenate", ")", "\n", "\n", "\n", "block_context_pool_2", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"context_pool_block2\"", ")", "(", "block_context_conv_1", ")", "\n", "\n", "block_context_conv_2", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "2", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"context_conv_block2\"", ")", "(", "block_context_pool_2", ")", "\n", "\n", "\n", "block_context_pool_4", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"context_pool_block4\"", ")", "(", "block_context_conv_2", ")", "\n", "\n", "block_context_conv_4", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "4", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"context_conv_block4\"", ")", "(", "block_context_pool_4", ")", "\n", "\n", "\n", "block_context_pool_8", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"context_pool_block8\"", ")", "(", "block_context_conv_4", ")", "\n", "\n", "block_context_conv_8", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "8", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"context_conv_block8\"", ")", "(", "block_context_pool_8", ")", "\n", "\n", "\n", "block_context_pool_16", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"context_pool_block16\"", ")", "(", "block_context_conv_8", ")", "\n", "\n", "block_context_conv_16", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "16", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"context_conv_block16\"", ")", "(", "block_context_pool_16", ")", "\n", "\n", "\n", "block_context_pool_32", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"context_pool_block32\"", ")", "(", "block_context_conv_16", ")", "\n", "\n", "block_context_conv_32", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "32", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "1", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"context_conv_block32\"", ")", "(", "block_context_pool_32", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "block_concat_32", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat32\"", ")", "(", "[", "block_conv_32", ",", "block_context_conv_32", "]", ")", "\n", "\n", "block_expan_conv_32", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "32", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block32\"", ")", "(", "block_concat_32", ")", "\n", "\n", "\n", "block_up_16", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block16\"", ")", "(", "block_expan_conv_32", ")", "\n", "\n", "block_concat_16", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat16\"", ")", "(", "[", "block_up_16", ",", "block_conv_16", "]", ")", "\n", "\n", "block_expan_conv_16", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "16", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block16\"", ")", "(", "block_concat_16", ")", "\n", "\n", "\n", "block_up_8", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block8\"", ")", "(", "block_expan_conv_16", ")", "\n", "\n", "block_concat_8", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat8\"", ")", "(", "[", "block_up_8", ",", "block_conv_8", "]", ")", "\n", "\n", "block_expan_conv_8", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "8", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block8\"", ")", "(", "block_concat_8", ")", "\n", "\n", "\n", "block_up_4", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block4\"", ")", "(", "block_expan_conv_8", ")", "\n", "\n", "block_concat_4", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat4\"", ")", "(", "[", "block_up_4", ",", "block_conv_4", "]", ")", "\n", "\n", "block_expan_conv_4", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "4", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block4\"", ")", "(", "block_concat_4", ")", "\n", "\n", "\n", "block_up_2", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block2\"", ")", "(", "block_expan_conv_4", ")", "\n", "\n", "block_concat_2", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat2\"", ")", "(", "[", "block_up_2", ",", "block_conv_2", "]", ")", "\n", "\n", "block_expan_conv_2", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "2", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block2\"", ")", "(", "block_concat_2", ")", "\n", "\n", "\n", "block_up_1", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block1\"", ")", "(", "block_expan_conv_2", ")", "\n", "\n", "block_concat_1", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat1\"", ")", "(", "[", "block_up_1", ",", "block_conv_1", "]", ")", "\n", "\n", "block_expan_conv_1", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "1", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block1\"", ")", "(", "block_concat_1", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "block_seg_4", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block4\"", ")", "(", "block_expan_conv_4", ")", "\n", "\n", "block_seg_2", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block2\"", ")", "(", "block_expan_conv_2", ")", "\n", "\n", "block_seg_1", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block1\"", ")", "(", "block_expan_conv_1", ")", "\n", "\n", "block_seg_up_2", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"seg_up_block2\"", ")", "(", "block_seg_4", ")", "\n", "\n", "block_add_2", "=", "Add", "(", "name", "=", "\"add_block2\"", ")", "(", "[", "block_seg_up_2", ",", "block_seg_2", "]", ")", "\n", "\n", "block_seg_up_1", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"seg_up_block1\"", ")", "(", "block_add_2", ")", "\n", "\n", "prediction", "=", "Add", "(", "name", "=", "\"prediction\"", ")", "(", "[", "block_seg_up_1", ",", "block_seg_1", "]", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "reshape1", "=", "Reshape", "(", "(", "input_shape", "[", "0", "]", "*", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", "*", "num_outputs", ")", ",", "\n", "name", "=", "\"reshape1\"", ")", "(", "prediction", ")", "\n", "\n", "prediction_softmax", "=", "Activation", "(", "\"softmax\"", ",", "name", "=", "\"softmax\"", ")", "(", "reshape1", ")", "\n", "\n", "reshape2", "=", "Reshape", "(", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", "*", "num_outputs", ")", ",", "\n", "name", "=", "\"output\"", ")", "(", "prediction_softmax", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "input_img0", ",", "input_img1", ",", "input_mask0", "]", ",", "outputs", "=", "reshape2", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.segmentation.predict_lvrv_net.predict_lvrv_net": [[49, 259], ["int", "print", "module_lvrv_net.net_module", "print", "module_lvrv_net.net_module.load_weights", "module_lvrv_net.net_module.compile", "print", "data_lvrv_segmentation_propagation_acdc.data_lvrv_segmentation_propagation_acdc", "len", "dict", "copy.deepcopy", "print", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.fit", "print", "print", "range", "keras.backend.clear_session", "numpy.zeros", "numpy.zeros", "numpy.zeros", "print", "image2.ImageDataGenerator2.flow_from_path_list", "image2.ImageDataGenerator2.flow_from_path_list", "image2.ImageDataGenerator2.flow_from_path_list", "itertools.izip", "range", "range", "print", "os.path.join", "keras.optimizers.Adam", "module_lvrv_net.net_module.count_params", "keras.backend.image_data_format", "PIL.Image.open", "len", "next", "module_lvrv_net.net_module.predict", "numpy.reshape", "numpy.zeros", "range", "numpy.argmax", "numpy.reshape", "helpers.touch_length_count", "helpers.touch_length_count", "helpers.touch_length_count", "helpers.second_largest_component_count", "helpers.second_largest_component_count", "helpers.second_largest_component_count", "prediction_path.replace", "numpy.savetxt", "image2.array_to_img", "image2.array_to_img.save", "scipy.misc.imresize", "print", "helpers.keep_largest_components", "str", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.module_roi_net.net_module", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.segmentation.data_lvrv_segmentation_propagation_acdc.data_lvrv_segmentation_propagation_acdc", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.touch_length_count", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.touch_length_count", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.touch_length_count", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.second_largest_component_count", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.second_largest_component_count", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.second_largest_component_count", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.array_to_img", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.keep_largest_components"], ["def", "predict_lvrv_net", "(", ")", ":", "\n", "\n", "    ", "code_path", "=", "config", ".", "code_dir", "\n", "\n", "fold", "=", "int", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "print", "(", "'fold = {}'", ".", "format", "(", "fold", ")", ")", "\n", "if", "fold", "==", "0", ":", "\n", "        ", "mode", "=", "'predict'", "\n", "", "elif", "fold", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "mode", "=", "'val_predict'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect fold'", ")", "\n", "\n", "", "initial_lr", "=", "config", ".", "lvrv_net_initial_lr", "\n", "input_img_size", "=", "config", ".", "lvrv_net_input_img_size", "\n", "epochs", "=", "config", ".", "lvrv_net_epochs", "\n", "batch_size", "=", "1", "\n", "\n", "###########", "\n", "# The model", "\n", "model", "=", "net_module", "(", "input_shape", "=", "(", "input_img_size", ",", "input_img_size", ",", "1", ")", ",", "num_outputs", "=", "4", ")", "\n", "print", "(", "'Loading model'", ")", "\n", "\n", "\n", "model", ".", "load_weights", "(", "filepath", "=", "os", ".", "path", ".", "join", "(", "code_path", ",", "'segmentation'", ",", "'model_lvrv_net_finetune_fold{}_epoch{}.h5'", ".", "format", "(", "str", "(", "fold", ")", ",", "str", "(", "epochs", ")", ".", "zfill", "(", "3", ")", ")", ")", ")", "\n", "\n", "\n", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "lr", "=", "initial_lr", ")", ",", "loss", "=", "dice_coef5_loss", ",", "\n", "metrics", "=", "[", "dice_coef5", ",", "dice_coef5_0", ",", "dice_coef5_1", ",", "dice_coef5_2", ",", "dice_coef5_3", "]", ")", "\n", "\n", "print", "(", "'This model has {} parameters'", ".", "format", "(", "model", ".", "count_params", "(", ")", ")", ")", "\n", "\n", "\n", "seq_context_imgs", ",", "seq_context_segs", ",", "seq_imgs", ",", "seq_segs", "=", "data_lvrv_segmentation_propagation_acdc", "(", "mode", "=", "mode", ",", "fold", "=", "fold", ")", "\n", "\n", "\n", "\n", "predict_sequence", "=", "len", "(", "seq_imgs", ")", "\n", "\n", "# we create two instances with the same arguments for random transformation", "\n", "img_data_gen_args", "=", "dict", "(", "featurewise_center", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "\n", "featurewise_std_normalization", "=", "False", ",", "\n", "samplewise_std_normalization", "=", "False", ",", "\n", "zca_whitening", "=", "False", ",", "\n", "zca_epsilon", "=", "1e-6", ",", "\n", "rotation_range", "=", "0.", ",", "\n", "width_shift_range", "=", "0.", ",", "\n", "height_shift_range", "=", "0.", ",", "\n", "shear_range", "=", "0.", ",", "\n", "zoom_range", "=", "0.", ",", "\n", "channel_shift_range", "=", "0.", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "cval", "=", "0.", ",", "\n", "horizontal_flip", "=", "False", ",", "\n", "vertical_flip", "=", "False", ",", "\n", "rescale", "=", "None", ",", "\n", "preprocessing_function", "=", "mean_variance_normalization5", ",", "\n", "data_format", "=", "K", ".", "image_data_format", "(", ")", ")", "\n", "\n", "# deep copy is necessary", "\n", "mask_data_gen_args", "=", "copy", ".", "deepcopy", "(", "img_data_gen_args", ")", "\n", "mask_data_gen_args", "[", "'preprocessing_function'", "]", "=", "elementwise_multiplication", "\n", "\n", "#########################", "\n", "# Generators for training", "\n", "print", "(", "'Creating generators for prediction'", ")", "\n", "image_context_datagen", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "image_datagen", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "mask_context_datagen", "=", "ImageDataGenerator2", "(", "**", "mask_data_gen_args", ")", "\n", "\n", "# Provide the same seed and keyword arguments to the fit and flow methods", "\n", "seed", "=", "1", "\n", "image_context_datagen", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "image_datagen", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "mask_context_datagen", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "\n", "\n", "print", "(", "'Start prediction'", ")", "\n", "print", "(", "'There will be {} sequences'", ".", "format", "(", "predict_sequence", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "predict_sequence", ")", ":", "\n", "        ", "print", "(", "'Sequence # {}'", ".", "format", "(", "i", ")", ")", "\n", "\n", "# The lists fot the sequence", "\n", "context_imgs", "=", "seq_context_imgs", "[", "i", "]", "\n", "context_segs", "=", "seq_context_segs", "[", "i", "]", "\n", "imgs", "=", "seq_imgs", "[", "i", "]", "\n", "segs", "=", "seq_segs", "[", "i", "]", "\n", "\n", "\n", "image_context_generator", "=", "image_context_datagen", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "context_imgs", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "500", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "image_generator", "=", "image_datagen", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "imgs", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "500", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "mask_context_generator", "=", "mask_context_datagen", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "context_segs", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "500", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "\n", "# Combine generators into one which yields image and masks", "\n", "predict_generator", "=", "izip", "(", "image_context_generator", ",", "image_generator", ",", "mask_context_generator", ")", "\n", "\n", "\n", "img_size", "=", "pil_image", ".", "open", "(", "imgs", "[", "0", "]", ")", ".", "size", "\n", "size", "=", "img_size", "[", "0", "]", "\n", "\n", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "\n", "            ", "img_context", ",", "img", ",", "mask_context", "=", "next", "(", "predict_generator", ")", "\n", "masks", "=", "model", ".", "predict", "(", "[", "img_context", ",", "img", ",", "mask_context", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "verbose", "=", "0", ")", "\n", "\n", "masks", "=", "np", ".", "reshape", "(", "masks", ",", "newshape", "=", "(", "input_img_size", ",", "input_img_size", ",", "4", ")", ")", "\n", "masks_resized", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ",", "4", ")", ")", "\n", "for", "c", "in", "range", "(", "4", ")", ":", "\n", "                ", "masks_resized", "[", ":", ",", ":", ",", "c", "]", "=", "imresize", "(", "masks", "[", ":", ",", ":", ",", "c", "]", ",", "(", "size", ",", "size", ")", ",", "interp", "=", "'bilinear'", ")", "\n", "", "prediction_resized", "=", "np", ".", "argmax", "(", "masks_resized", ",", "axis", "=", "-", "1", ")", "\n", "prediction_resized", "=", "np", ".", "reshape", "(", "prediction_resized", ",", "newshape", "=", "(", "size", ",", "size", ",", "1", ")", ")", "\n", "\n", "# Check whether the prediction is successful", "\n", "have_lvc", "=", "(", "1", "in", "prediction_resized", ")", "\n", "have_lvm", "=", "(", "2", "in", "prediction_resized", ")", "\n", "lvc_touch_background_length", "=", "touch_length_count", "(", "prediction_resized", ",", "size", ",", "size", ",", "1", ",", "0", ")", "\n", "lvc_touch_lvm_length", "=", "touch_length_count", "(", "prediction_resized", ",", "size", ",", "size", ",", "1", ",", "2", ")", "\n", "lvc_touch_rvc_length", "=", "touch_length_count", "(", "prediction_resized", ",", "size", ",", "size", ",", "1", ",", "3", ")", "\n", "\n", "lvc_second_largest_component_count", "=", "second_largest_component_count", "(", "prediction_resized", ",", "1", ")", "\n", "lvm_second_largest_component_count", "=", "second_largest_component_count", "(", "prediction_resized", ",", "2", ")", "\n", "rvc_second_largest_component_count", "=", "second_largest_component_count", "(", "prediction_resized", ",", "3", ")", "\n", "\n", "\n", "success", "=", "have_lvm", "and", "(", "(", "lvc_touch_background_length", "+", "lvc_touch_rvc_length", ")", "<=", "0.5", "*", "lvc_touch_lvm_length", ")", "\n", "\n", "\n", "\n", "if", "not", "success", ":", "\n", "                ", "prediction_resized", "=", "0", "*", "prediction_resized", "\n", "print", "(", "'Unsuccessful segmentation for {}'", ".", "format", "(", "imgs", "[", "j", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "prediction_resized", "=", "keep_largest_components", "(", "prediction_resized", ",", "keep_values", "=", "[", "1", ",", "2", ",", "3", "]", ",", "values", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "\n", "# save txt file", "\n", "", "prediction_path", "=", "segs", "[", "j", "]", "\n", "prediction_txt_path", "=", "prediction_path", ".", "replace", "(", "'.png'", ",", "'.txt'", ",", "1", ")", "\n", "np", ".", "savetxt", "(", "prediction_txt_path", ",", "prediction_resized", ",", "fmt", "=", "'%.6f'", ")", "\n", "\n", "# save image", "\n", "prediction_img", "=", "array_to_img", "(", "prediction_resized", "*", "50.0", ",", "\n", "data_format", "=", "None", ",", "\n", "scale", "=", "False", ")", "\n", "prediction_img", ".", "save", "(", "prediction_path", ")", "\n", "\n", "\n", "\n", "", "", "K", ".", "clear_session", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.segmentation.finetune_lvrv_net.finetune_lvrv_net": [[42, 351], ["int", "print", "module_lvrv_net.net_module", "print", "module_lvrv_net.net_module.load_weights", "module_lvrv_net.net_module.compile", "print", "data_lvrv_segmentation_propagation_acdc.data_lvrv_segmentation_propagation_acdc", "data_lvrv_segmentation_propagation_acdc.data_lvrv_segmentation_propagation_acdc", "len", "dict", "copy.deepcopy", "print", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "image2.ImageDataGenerator2.flow_from_path_list", "image2.ImageDataGenerator2.flow_from_path_list", "image2.ImageDataGenerator2.flow_from_path_list", "itertools.izip", "print", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "image2.ImageDataGenerator2.flow_from_path_list", "image2.ImageDataGenerator2.flow_from_path_list", "image2.ImageDataGenerator2.flow_from_path_list", "itertools.izip", "print", "int", "print", "range", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "math.ceil", "print", "range", "range", "print", "os.path.join", "keras.optimizers.Adam", "module_lvrv_net.net_module.count_params", "keras.backend.image_data_format", "print", "next", "print", "float", "keras.backend.set_value", "print", "module_lvrv_net.net_module.save_weights", "float", "module_lvrv_net.net_module.train_on_batch", "next", "print", "print", "keras.backend.get_value", "os.path.join", "str().zfill", "module_lvrv_net.net_module.test_on_batch", "str", "str().zfill", "str", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.module_roi_net.net_module", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.segmentation.data_lvrv_segmentation_propagation_acdc.data_lvrv_segmentation_propagation_acdc", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.segmentation.data_lvrv_segmentation_propagation_acdc.data_lvrv_segmentation_propagation_acdc", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next"], ["def", "finetune_lvrv_net", "(", ")", ":", "\n", "\n", "    ", "code_path", "=", "config", ".", "code_dir", "\n", "\n", "fold", "=", "int", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "print", "(", "'fold = {}'", ".", "format", "(", "fold", ")", ")", "\n", "if", "fold", "==", "0", ":", "\n", "        ", "mode_train", "=", "'all'", "\n", "mode_val", "=", "'all'", "\n", "", "elif", "fold", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "mode_train", "=", "'train'", "\n", "mode_val", "=", "'val'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect fold'", ")", "\n", "\n", "", "initial_lr", "=", "config", ".", "lvrv_net_initial_lr", "\n", "decay_rate", "=", "config", ".", "lvrv_net_decay_rate", "\n", "batch_size", "=", "config", ".", "lvrv_net_batch_size", "\n", "input_img_size", "=", "config", ".", "lvrv_net_input_img_size", "\n", "epochs", "=", "config", ".", "lvrv_net_epochs", "\n", "\n", "current_epoch", "=", "80", "\n", "new_start_epoch", "=", "current_epoch", "\n", "\n", "###########", "\n", "# The model", "\n", "model", "=", "net_module", "(", "input_shape", "=", "(", "input_img_size", ",", "input_img_size", ",", "1", ")", ",", "num_outputs", "=", "4", ")", "\n", "\n", "# Finetune", "\n", "print", "(", "'Loading model'", ")", "\n", "model", ".", "load_weights", "(", "filepath", "=", "os", ".", "path", ".", "join", "(", "code_path", ",", "'segmentation'", ",", "'model_lvrv_net_epoch{}.h5'", ".", "format", "(", "str", "(", "current_epoch", ")", ".", "zfill", "(", "3", ")", ")", ")", ")", "\n", "\n", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "lr", "=", "initial_lr", ")", ",", "loss", "=", "dice_coef5_loss", ",", "\n", "metrics", "=", "[", "dice_coef5", ",", "dice_coef5_0", ",", "dice_coef5_1", ",", "dice_coef5_2", ",", "dice_coef5_3", "]", ")", "\n", "\n", "\n", "print", "(", "'This model has {} parameters'", ".", "format", "(", "model", ".", "count_params", "(", ")", ")", ")", "\n", "\n", "\n", "# Load data lists", "\n", "train_img_list0", ",", "train_gt_list0", ",", "train_img_list1", ",", "train_gt_list1", "=", "data_lvrv_segmentation_propagation_acdc", "(", "mode", "=", "mode_train", ",", "fold", "=", "fold", ")", "\n", "\n", "test_img_list0", ",", "test_gt_list0", ",", "test_img_list1", ",", "test_gt_list1", "=", "data_lvrv_segmentation_propagation_acdc", "(", "mode", "=", "mode_val", ",", "fold", "=", "fold", ")", "\n", "\n", "training_sample", "=", "len", "(", "train_img_list0", ")", "\n", "\n", "# we create two instances with the same arguments for random transformation", "\n", "img_data_gen_args", "=", "dict", "(", "featurewise_center", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "\n", "featurewise_std_normalization", "=", "False", ",", "\n", "samplewise_std_normalization", "=", "False", ",", "\n", "zca_whitening", "=", "False", ",", "\n", "zca_epsilon", "=", "1e-6", ",", "\n", "rotation_range", "=", "180.", ",", "\n", "width_shift_range", "=", "0.15", ",", "\n", "height_shift_range", "=", "0.15", ",", "\n", "shear_range", "=", "0.", ",", "\n", "zoom_range", "=", "0.15", ",", "\n", "channel_shift_range", "=", "0.", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "cval", "=", "0.", ",", "\n", "horizontal_flip", "=", "True", ",", "\n", "vertical_flip", "=", "True", ",", "\n", "rescale", "=", "None", ",", "\n", "preprocessing_function", "=", "mean_variance_normalization5", ",", "\n", "data_format", "=", "K", ".", "image_data_format", "(", ")", ")", "\n", "\n", "# deep copy is necessary", "\n", "mask_data_gen_args", "=", "copy", ".", "deepcopy", "(", "img_data_gen_args", ")", "\n", "mask_data_gen_args", "[", "'preprocessing_function'", "]", "=", "elementwise_multiplication", "\n", "\n", "\n", "#########################", "\n", "# Generators for training", "\n", "print", "(", "'Creating generators for training'", ")", "\n", "image_datagen0", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "image_datagen1", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "mask_datagen0", "=", "ImageDataGenerator2", "(", "**", "mask_data_gen_args", ")", "\n", "mask_datagen1", "=", "ImageDataGenerator2", "(", "**", "mask_data_gen_args", ")", "\n", "\n", "# Provide the same seed and keyword arguments to the fit and flow methods", "\n", "seed", "=", "1", "\n", "image_datagen0", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "image_datagen1", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "mask_datagen0", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "mask_datagen1", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "\n", "image_generator0", "=", "image_datagen0", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "train_img_list0", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'img0_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "image_generator1", "=", "image_datagen1", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "train_img_list1", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'img1_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "mask_generator0", "=", "mask_datagen0", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "train_gt_list0", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'mask0_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "mask_generator1", "=", "mask_datagen1", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "train_gt_list1", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'mask1_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "# Combine generators into one which yields image and masks", "\n", "train_generator", "=", "izip", "(", "image_generator0", ",", "image_generator1", ",", "\n", "mask_generator0", ",", "mask_generator1", ")", "\n", "\n", "\n", "###########################", "\n", "# Generators for validation", "\n", "print", "(", "'Creating generators for validation'", ")", "\n", "val_image_datagen0", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "val_image_datagen1", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "val_mask_datagen0", "=", "ImageDataGenerator2", "(", "**", "mask_data_gen_args", ")", "\n", "val_mask_datagen1", "=", "ImageDataGenerator2", "(", "**", "mask_data_gen_args", ")", "\n", "\n", "# Provide the same seed and keyword arguments to the fit and flow methods", "\n", "val_seed", "=", "2", "\n", "val_image_datagen0", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "val_seed", ")", "\n", "val_image_datagen1", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "val_seed", ")", "\n", "val_mask_datagen0", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "val_seed", ")", "\n", "val_mask_datagen1", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "val_seed", ")", "\n", "\n", "val_image_generator0", "=", "val_image_datagen0", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "test_img_list0", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "val_seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'img0_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "1", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "val_image_generator1", "=", "val_image_datagen1", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "test_img_list1", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "val_seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'img1_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "1", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "val_mask_generator0", "=", "val_mask_datagen0", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "test_gt_list0", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "val_seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'mask0_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "1", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "val_mask_generator1", "=", "val_mask_datagen1", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "test_gt_list1", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "val_seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'mask1_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "1", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "\n", "# Combine generators into one which yields image and masks", "\n", "validation_generator", "=", "izip", "(", "val_image_generator0", ",", "val_image_generator1", ",", "\n", "val_mask_generator0", ",", "val_mask_generator1", ")", "\n", "\n", "\n", "###############", "\n", "# Train the model", "\n", "print", "(", "'Start training'", ")", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "training_sample", ")", "/", "batch_size", ")", ")", "\n", "print", "(", "'There will be {} epochs with {} steps in each epoch'", ".", "format", "(", "epochs", ",", "steps", ")", ")", "\n", "\n", "\n", "total_step", "=", "0", "\n", "for", "epoch", "in", "range", "(", "new_start_epoch", "+", "1", ",", "epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "'\\n\\n##########\\nEpoch {}\\n##########'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "            ", "print", "(", "'\\n****** Epoch {} Step {} ******'", ".", "format", "(", "epoch", ",", "step", ")", ")", "\n", "batch_img0", ",", "batch_img1", ",", "batch_mask0", ",", "batch_mask1", "=", "next", "(", "train_generator", ")", "\n", "print", "(", "model", ".", "train_on_batch", "(", "[", "batch_img0", ",", "batch_img1", ",", "batch_mask0", "]", ",", "\n", "batch_mask1", ",", "sample_weight", "=", "None", ",", "class_weight", "=", "None", ")", ")", "\n", "\n", "\n", "# perform test", "\n", "if", "(", "total_step", "%", "save_period", "==", "0", ")", ":", "\n", "                ", "val_batch_img0", ",", "val_batch_img1", ",", "val_batch_mask0", ",", "val_batch_mask1", "=", "next", "(", "validation_generator", ")", "\n", "print", "(", "'test:'", ")", "\n", "print", "(", "model", ".", "test_on_batch", "(", "[", "val_batch_img0", ",", "val_batch_img1", ",", "val_batch_mask0", "]", ",", "\n", "val_batch_mask1", ",", "sample_weight", "=", "None", ")", ")", "\n", "\n", "", "total_step", "+=", "1", "\n", "\n", "\n", "# adjust learning rate", "\n", "", "if", "(", "epoch", "%", "10", "==", "0", ")", ":", "\n", "            ", "old_lr", "=", "float", "(", "K", ".", "get_value", "(", "model", ".", "optimizer", ".", "lr", ")", ")", "\n", "new_lr", "=", "initial_lr", "*", "(", "decay_rate", "**", "(", "epoch", "//", "10", ")", ")", "\n", "K", ".", "set_value", "(", "model", ".", "optimizer", ".", "lr", ",", "new_lr", ")", "\n", "print", "(", "'learning rate is reset to %.8f'", "%", "(", "new_lr", ")", ")", "\n", "\n", "# save the weights of the model", "\n", "", "if", "(", "epoch", "%", "1000", "==", "0", ")", ":", "\n", "            ", "model", ".", "save_weights", "(", "os", ".", "path", ".", "join", "(", "code_path", ",", "'segmentation'", ",", "'model_lvrv_net_finetune_fold{}_epoch{}.h5'", ".", "format", "(", "str", "(", "fold", ")", ",", "str", "(", "epoch", ")", ".", "zfill", "(", "3", ")", ")", ")", ")", "\n", "\n", "\n", "", "", "print", "(", "'Training is done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.segmentation.data_lvrv_segmentation_propagation_acdc.data_lvrv_segmentation_propagation_acdc": [[11, 130], ["print", "os.path.join", "print", "open", "in_file.readlines", "x.strip", "int", "int", "int", "int", "data_dir.format", "len", "os.path.exists", "os.makedirs", "range", "seq_context_imgs.append", "seq_context_segs.append", "seq_imgs.append", "seq_segs.append", "y.split", "float", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "seq_context_imgs_no_group.append", "seq_context_segs_no_group.append", "seq_imgs_no_group.append", "seq_segs_no_group.append", "context_imgs.append", "context_segs.append", "imgs.append", "segs.append", "enumerate", "print", "os.path.join", "os.path.join", "enumerate", "y.split", "str().zfill", "str().zfill", "os.path.join", "str().zfill", "str().zfill", "os.path.join", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str", "str", "str().zfill", "str().zfill", "str", "str", "str().zfill", "str().zfill", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "data_lvrv_segmentation_propagation_acdc", "(", "mode", "=", "'all'", ",", "fold", "=", "1", ")", ":", "\n", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "excluded_slice_ratio", "=", "config", ".", "excluded_slice_ratio", "\n", "\n", "seq_instants", "=", "config", ".", "acdc_seq_instants", "\n", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "\n", "\n", "\n", "if", "mode", "==", "'all'", ":", "\n", "        ", "subjects", "=", "all_subjects", "\n", "", "elif", "mode", "==", "'train'", ":", "\n", "        ", "subjects", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "all_subjects", ")", "if", "(", "i", "%", "5", ")", "!=", "(", "fold", "%", "5", ")", "]", "\n", "", "elif", "mode", "==", "'val'", "or", "mode", "==", "'val_predict'", ":", "\n", "        ", "subjects", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "all_subjects", ")", "if", "(", "i", "%", "5", ")", "==", "(", "fold", "%", "5", ")", "]", "\n", "", "elif", "mode", "==", "'predict'", ":", "\n", "        ", "subjects", "=", "test_subjects", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect mode'", ")", "\n", "\n", "", "print", "(", "subjects", ")", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "print", "(", "'There will be {} used subjects'", ".", "format", "(", "len", "(", "subjects", ")", ")", ")", "\n", "\n", "\n", "seq_context_imgs", "=", "[", "]", "\n", "seq_context_segs", "=", "[", "]", "\n", "seq_imgs", "=", "[", "]", "\n", "seq_segs", "=", "[", "]", "\n", "\n", "seq_context_imgs_no_group", "=", "[", "]", "\n", "seq_context_segs_no_group", "=", "[", "]", "\n", "seq_imgs_no_group", "=", "[", "]", "\n", "seq_segs_no_group", "=", "[", "]", "\n", "\n", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "\n", "start_slice", "=", "0", "\n", "end_slice", "=", "slices", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'predict_2D'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'predict_2D'", ")", ")", "\n", "\n", "\n", "", "for", "t", "in", "[", "ed_instant", ",", "es_instant", "]", ":", "\n", "            ", "context_imgs", "=", "[", "]", "\n", "context_segs", "=", "[", "]", "\n", "imgs", "=", "[", "]", "\n", "segs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "start_slice", ",", "end_slice", ")", ":", "\n", "                ", "if", "i", "==", "start_slice", ":", "\n", "                    ", "i_minus", "=", "-", "1", "\n", "", "else", ":", "\n", "                    ", "i_minus", "=", "i", "-", "1", "\n", "\n", "\n", "", "context_img", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_{}_{}.png'", ".", "format", "(", "str", "(", "i_minus", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "if", "mode", "in", "[", "'all'", ",", "'train'", ",", "'val'", "]", ":", "\n", "                    ", "context_seg", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_gt_{}_{}.png'", ".", "format", "(", "str", "(", "i_minus", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "", "elif", "mode", "in", "[", "'predict'", ",", "'val_predict'", "]", ":", "\n", "                    ", "context_seg", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'predict_2D'", ",", "'predict_lvrv2_{}_{}.png'", ".", "format", "(", "str", "(", "i_minus", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "\n", "\n", "\n", "", "img", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "if", "mode", "in", "[", "'all'", ",", "'train'", ",", "'val'", "]", ":", "\n", "                    ", "seg", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_gt_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "", "elif", "mode", "in", "[", "'predict'", ",", "'val_predict'", "]", ":", "\n", "                    ", "seg", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'predict_2D'", ",", "'predict_lvrv2_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "\n", "", "seq_context_imgs_no_group", ".", "append", "(", "context_img", ")", "\n", "seq_context_segs_no_group", ".", "append", "(", "context_seg", ")", "\n", "seq_imgs_no_group", ".", "append", "(", "img", ")", "\n", "seq_segs_no_group", ".", "append", "(", "seg", ")", "\n", "\n", "\n", "context_imgs", ".", "append", "(", "context_img", ")", "\n", "context_segs", ".", "append", "(", "context_seg", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "segs", ".", "append", "(", "seg", ")", "\n", "\n", "", "seq_context_imgs", ".", "append", "(", "context_imgs", ")", "\n", "seq_context_segs", ".", "append", "(", "context_segs", ")", "\n", "seq_imgs", ".", "append", "(", "imgs", ")", "\n", "seq_segs", ".", "append", "(", "segs", ")", "\n", "\n", "\n", "", "", "if", "mode", "in", "[", "'all'", ",", "'train'", ",", "'val'", "]", ":", "\n", "        ", "return", "seq_context_imgs_no_group", ",", "seq_context_segs_no_group", ",", "seq_imgs_no_group", ",", "seq_segs_no_group", "\n", "", "elif", "mode", "in", "[", "'predict'", ",", "'val_predict'", "]", ":", "\n", "        ", "return", "seq_context_imgs", ",", "seq_context_segs", ",", "seq_imgs", ",", "seq_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.feature_extraction.acdc_volume.acdc_volume": [[11, 161], ["os.path.join", "os.path.join", "os.path.join", "open", "open.close", "open", "in_file.readlines", "x.strip", "open", "p_file.readlines", "x.strip", "open", "b_file.readlines", "x.strip", "os.path.join", "print", "int", "int", "int", "int", "int", "int", "int", "int", "data_dir.format", "range", "helpers.volume_calculation_given_slice_area", "helpers.volume_calculation_given_slice_area", "helpers.volume_calculation_given_slice_area", "helpers.volume_calculation_given_slice_area", "helpers.volume_calculation_given_slice_area", "helpers.volume_calculation_given_slice_area", "print", "open.write", "numpy.zeros", "numpy.where", "numpy.sum", "numpy.where", "numpy.sum", "numpy.where", "numpy.sum", "lv_area_ed.append", "lv_area_es.append", "lvm_area_ed.append", "lvm_area_es.append", "rv_area_ed.append", "rv_area_es.append", "y.split", "float", "float", "float", "range", "image2.load_img2", "numpy.reshape", "numpy.concatenate", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "y.split", "y.split", "int", "y.split", "y.split", "y.split", "round", "str().zfill", "str().zfill", "numpy.array", "numpy.ones_like", "numpy.ones_like", "numpy.ones_like", "str", "str", "float"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_calculation_given_slice_area", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_calculation_given_slice_area", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_calculation_given_slice_area", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_calculation_given_slice_area", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_calculation_given_slice_area", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.volume_calculation_given_slice_area", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2"], ["def", "acdc_volume", "(", ")", ":", "\n", "\n", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "excluded_slice_ratio", "=", "config", ".", "excluded_slice_ratio", "\n", "seq_instants", "=", "config", ".", "acdc_seq_instants", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "+", "test_subjects", "\n", "subjects", "=", "all_subjects", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "pixel_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_pixel_size.txt'", ")", "\n", "with", "open", "(", "pixel_file", ")", "as", "p_file", ":", "\n", "        ", "pixel_size_info", "=", "p_file", ".", "readlines", "(", ")", "\n", "\n", "", "pixel_size_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "pixel_size_info", "]", "\n", "pixel_size_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "pixel_size_info", "]", "\n", "\n", "\n", "base_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_base.txt'", ")", "\n", "with", "open", "(", "base_file", ")", "as", "b_file", ":", "\n", "        ", "base_info", "=", "b_file", ".", "readlines", "(", ")", "\n", "\n", "", "base_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "base_info", "]", "\n", "base_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "base_info", "]", "\n", "\n", "\n", "\n", "zfill_num", "=", "2", "\n", "img_size", "=", "config", ".", "apparentflow_net_input_img_size", "\n", "shape", "=", "(", "img_size", ",", "img_size", ",", "2", ")", "\n", "\n", "\n", "\n", "volume_info", "=", "open", "(", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_volume.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "print", "(", "'\\n'", "+", "subject", ")", "\n", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", ")", "\n", "apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "es_base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "bsa", "=", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "8", "]", "\n", "pixel_size", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", "\n", "slice_thickness", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", "\n", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "folder", "=", "subject_dir", "+", "'/predict_2D/'", "\n", "\n", "normalize_term", "=", "pixel_size", "/", "(", "bsa", "**", "(", "1.0", "/", "2", ")", ")", "\n", "\n", "idx_range", "=", "[", "(", "int", "(", "round", "(", "float", "(", "instants", ")", "*", "t", "/", "seq_instants", ")", ")", "+", "ed_instant", ")", "%", "instants", "for", "t", "in", "range", "(", "0", ",", "seq_instants", ")", "]", "\n", "\n", "\n", "\n", "start_slice", "=", "0", "\n", "end_slice", "=", "slices", "\n", "\n", "\n", "lv_area_ed", "=", "[", "]", "\n", "lv_area_es", "=", "[", "]", "\n", "lvm_area_ed", "=", "[", "]", "\n", "lvm_area_es", "=", "[", "]", "\n", "rv_area_ed", "=", "[", "]", "\n", "rv_area_es", "=", "[", "]", "\n", "\n", "for", "slice_idx", "in", "range", "(", "start_slice", ",", "end_slice", ")", ":", "\n", "#print('slice #{}'.format(slice_idx))", "\n", "\n", "\n", "# Get the segmentation", "\n", "#print('Get the segmentation')", "\n", "            ", "seg", "=", "np", ".", "zeros", "(", "(", "1", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "0", ")", ")", "\n", "for", "idx", "in", "[", "ed_instant", ",", "es_instant", "]", ":", "\n", "                ", "seg_file", "=", "folder", "+", "'predict_lvrv2_{}_{}.png'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ",", "str", "(", "idx", ")", ".", "zfill", "(", "zfill_num", ")", ")", "\n", "\n", "seg_idx", "=", "load_img2", "(", "seg_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", ",", "\n", "shape", "[", "1", "]", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", "\n", "seg_idx", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "seg_idx", ")", "/", "50.0", ",", "(", "1", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "seg", "=", "np", ".", "concatenate", "(", "(", "seg", ",", "seg_idx", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "seg_rv", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "seg", ",", "3.0", "*", "np", ".", "ones_like", "(", "seg", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "seg", ")", ",", "np", ".", "zeros_like", "(", "seg", ")", ")", "\n", "seg_rv_area", "=", "np", ".", "sum", "(", "seg_rv", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "seg_rv_area", "*=", "(", "(", "normalize_term", "**", "2", ")", "/", "1000", ")", "\n", "\n", "seg_lv", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "seg", ",", "1.0", "*", "np", ".", "ones_like", "(", "seg", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "seg", ")", ",", "np", ".", "zeros_like", "(", "seg", ")", ")", "\n", "seg_lv_area", "=", "np", ".", "sum", "(", "seg_lv", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "seg_lv_area", "*=", "(", "(", "normalize_term", "**", "2", ")", "/", "1000", ")", "\n", "\n", "seg_lvm", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "seg", ",", "2.0", "*", "np", ".", "ones_like", "(", "seg", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "seg", ")", ",", "np", ".", "zeros_like", "(", "seg", ")", ")", "\n", "seg_lvm_area", "=", "np", ".", "sum", "(", "seg_lvm", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "seg_lvm_area", "*=", "(", "(", "normalize_term", "**", "2", ")", "/", "1000", ")", "\n", "\n", "\n", "lv_area_ed", ".", "append", "(", "seg_lv_area", "[", "0", ",", "0", "]", ")", "\n", "lv_area_es", ".", "append", "(", "seg_lv_area", "[", "0", ",", "1", "]", ")", "\n", "lvm_area_ed", ".", "append", "(", "seg_lvm_area", "[", "0", ",", "0", "]", ")", "\n", "lvm_area_es", ".", "append", "(", "seg_lvm_area", "[", "0", ",", "1", "]", ")", "\n", "rv_area_ed", ".", "append", "(", "seg_rv_area", "[", "0", ",", "0", "]", ")", "\n", "rv_area_es", ".", "append", "(", "seg_rv_area", "[", "0", ",", "1", "]", ")", "\n", "\n", "", "lv_volume_ed", "=", "volume_calculation_given_slice_area", "(", "lv_area_ed", ",", "slice_thickness", ")", "\n", "lv_volume_es", "=", "volume_calculation_given_slice_area", "(", "lv_area_es", ",", "slice_thickness", ")", "\n", "lvm_volume_ed", "=", "volume_calculation_given_slice_area", "(", "lvm_area_ed", ",", "slice_thickness", ")", "\n", "lvm_volume_es", "=", "volume_calculation_given_slice_area", "(", "lvm_area_es", ",", "slice_thickness", ")", "\n", "rv_volume_ed", "=", "volume_calculation_given_slice_area", "(", "rv_area_ed", ",", "slice_thickness", ")", "\n", "rv_volume_es", "=", "volume_calculation_given_slice_area", "(", "rv_area_es", ",", "slice_thickness", ")", "\n", "\n", "\n", "lv_ratio", "=", "1.0", "-", "lv_volume_es", "/", "lv_volume_ed", "\n", "lvm_ratio", "=", "lvm_volume_es", "/", "lvm_volume_ed", "\n", "rv_ratio", "=", "1.0", "-", "rv_volume_es", "/", "rv_volume_ed", "\n", "lvrv_ratio", "=", "rv_volume_ed", "/", "lv_volume_ed", "\n", "lvmrv_ratio", "=", "rv_volume_ed", "/", "(", "lv_volume_ed", "+", "lvm_volume_ed", ")", "\n", "lvmlv_ratio", "=", "lvm_volume_ed", "/", "lv_volume_ed", "\n", "print", "(", "lv_volume_ed", ",", "rv_volume_ed", ",", "lvm_volume_ed", ",", "lv_ratio", ",", "rv_ratio", ",", "lvm_ratio", ",", "lvrv_ratio", ",", "lvmrv_ratio", ",", "lvmlv_ratio", ")", "\n", "\n", "\n", "\n", "written", "=", "'{} {} {} {} {} {} {} {} {} {}\\n'", ".", "format", "(", "subject", ",", "lv_volume_ed", ",", "rv_volume_ed", ",", "lvm_volume_ed", ",", "lv_ratio", ",", "rv_ratio", ",", "lvm_ratio", ",", "lvrv_ratio", ",", "lvmrv_ratio", ",", "lvmlv_ratio", ")", "\n", "volume_info", ".", "write", "(", "written", ")", "\n", "\n", "", "volume_info", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.feature_extraction.acdc_base.acdc_base": [[12, 115], ["os.path.join", "open", "open.close", "open", "in_file.readlines", "x.strip", "os.path.join", "data_dir.format", "os.path.join", "os.path.join", "int", "int", "int", "int", "range", "range", "range", "range", "print", "open.write", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "range", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "range", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "y.split", "float", "str().zfill", "str().zfill", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "y.split", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "acdc_base", "(", ")", ":", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "+", "test_subjects", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "base_info", "=", "open", "(", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_base.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "subject", "in", "all_subjects", ":", "\n", "        ", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "subject_predict_dir", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'predict_2D'", ")", "\n", "subject_predict_file", "=", "os", ".", "path", ".", "join", "(", "subject_predict_dir", ",", "'predict_lvrv2_{}_{}.png'", ")", "\n", "\n", "\n", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "\n", "base_slice", "=", "0", "\n", "have_rv", "=", "False", "\n", "for", "i", "in", "range", "(", "slices", ")", ":", "\n", "            ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "150", "in", "data", ":", "\n", "                ", "base_slice", "=", "i", "\n", "have_rv", "=", "True", "\n", "break", "\n", "", "", "if", "not", "have_rv", ":", "\n", "            ", "for", "i", "in", "range", "(", "slices", ")", ":", "\n", "                ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "50", "in", "data", ":", "\n", "                    ", "base_slice", "=", "i", "\n", "break", "\n", "\n", "", "", "", "apex_slice", "=", "slices", "-", "1", "\n", "for", "j", "in", "range", "(", "slices", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "50", "in", "data", ":", "\n", "                ", "apex_slice", "=", "j", "\n", "break", "\n", "\n", "\n", "", "", "es_base_slice", "=", "0", "\n", "have_rv", "=", "False", "\n", "for", "i", "in", "range", "(", "slices", ")", ":", "\n", "            ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "es_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "150", "in", "data", ":", "\n", "                ", "es_base_slice", "=", "i", "\n", "have_rv", "=", "True", "\n", "break", "\n", "", "", "if", "not", "have_rv", ":", "\n", "            ", "for", "i", "in", "range", "(", "slices", ")", ":", "\n", "                ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "es_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "50", "in", "data", ":", "\n", "                    ", "es_base_slice", "=", "i", "\n", "break", "\n", "\n", "", "", "", "es_apex_slice", "=", "slices", "-", "1", "\n", "for", "j", "in", "range", "(", "slices", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "es_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "50", "in", "data", ":", "\n", "                ", "apex_slice", "=", "j", "\n", "break", "\n", "\n", "", "", "print", "(", "subject", ",", "base_slice", ",", "apex_slice", ",", "es_base_slice", ",", "es_apex_slice", ")", "\n", "written", "=", "'{} {} {} {} {}\\n'", ".", "format", "(", "subject", ",", "base_slice", ",", "apex_slice", ",", "es_base_slice", ",", "es_apex_slice", ")", "\n", "base_info", ".", "write", "(", "written", ")", "\n", "\n", "", "base_info", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.feature_extraction.acdc_zone_flow.acdc_zone_flow": [[15, 146], ["os.path.join", "os.path.join", "os.path.join", "open", "in_file.readlines", "x.strip", "open", "p_file.readlines", "x.strip", "open", "b_file.readlines", "x.strip", "print", "int", "int", "int", "int", "int", "int", "int", "int", "data_dir.format", "range", "print", "image2.load_img2", "numpy.reshape", "helpers.enlarge_mask4", "numpy.zeros", "numpy.where", "numpy.where", "helpers.mask_barycenter2", "helpers.mask_barycenter2", "helpers.masked_flow_transform2", "helpers.flow_by_zone3", "numpy.save", "numpy.save", "y.split", "float", "float", "float", "range", "numpy.concatenate", "numpy.logical_or", "numpy.ones_like", "numpy.zeros_like", "numpy.equal", "numpy.ones_like", "numpy.zeros_like", "y.split", "y.split", "int", "str().zfill", "str().zfill", "numpy.array", "os.path.isfile", "numpy.reshape", "numpy.zeros", "numpy.equal", "numpy.equal", "y.split", "y.split", "y.split", "round", "str().zfill", "str().zfill", "numpy.load", "numpy.ones_like", "str().zfill", "str().zfill", "str", "str", "numpy.ones_like", "numpy.ones_like", "str", "str", "str", "str", "float"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.enlarge_mask4", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.mask_barycenter2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.masked_flow_transform2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.flow_by_zone3"], ["def", "acdc_zone_flow", "(", ")", ":", "\n", "\n", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "excluded_slice_ratio", "=", "config", ".", "excluded_slice_ratio", "\n", "seq_instants", "=", "config", ".", "acdc_seq_instants", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "+", "test_subjects", "\n", "subjects", "=", "all_subjects", "\n", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "pixel_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_pixel_size.txt'", ")", "\n", "with", "open", "(", "pixel_file", ")", "as", "p_file", ":", "\n", "        ", "pixel_size_info", "=", "p_file", ".", "readlines", "(", ")", "\n", "\n", "", "pixel_size_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "pixel_size_info", "]", "\n", "pixel_size_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "pixel_size_info", "]", "\n", "\n", "\n", "base_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_base.txt'", ")", "\n", "with", "open", "(", "base_file", ")", "as", "b_file", ":", "\n", "        ", "base_info", "=", "b_file", ".", "readlines", "(", ")", "\n", "\n", "", "base_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "base_info", "]", "\n", "base_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "base_info", "]", "\n", "\n", "\n", "num_zone", "=", "6", "\n", "zfill_num", "=", "2", "\n", "img_size", "=", "config", ".", "apparentflow_net_input_img_size", "\n", "shape", "=", "(", "img_size", ",", "img_size", ",", "2", ")", "\n", "\n", "\n", "\n", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "print", "(", "'\\n'", "+", "subject", ")", "\n", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", ")", "\n", "apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "es_base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "bsa", "=", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "8", "]", "\n", "pixel_size", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", "\n", "slice_thickness", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", "\n", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "folder", "=", "subject_dir", "+", "'/predict_2D/'", "\n", "\n", "normalize_term", "=", "pixel_size", "/", "(", "bsa", "**", "(", "1.0", "/", "2", ")", ")", "\n", "\n", "idx_range", "=", "[", "(", "int", "(", "round", "(", "float", "(", "instants", ")", "*", "t", "/", "seq_instants", ")", ")", "+", "ed_instant", ")", "%", "instants", "for", "t", "in", "range", "(", "0", ",", "seq_instants", ")", "]", "\n", "\n", "\n", "\n", "start_slice", "=", "base_slice", "\n", "end_slice", "=", "apex_slice", "+", "1", "\n", "\n", "for", "slice_idx", "in", "range", "(", "start_slice", ",", "end_slice", ")", ":", "\n", "            ", "print", "(", "'slice #{}'", ".", "format", "(", "slice_idx", ")", ")", "\n", "\n", "# Get the mask", "\n", "mask_file", "=", "folder", "+", "'predict_lvrv2_{}_{}.png'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "zfill_num", ")", ")", "\n", "mask", "=", "load_img2", "(", "mask_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", ",", "\n", "shape", "[", "1", "]", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", "\n", "mask", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "mask", ")", "/", "50.0", ",", "(", "1", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "mask", "=", "enlarge_mask4", "(", "mask", ",", "width", "=", "1", ",", "enlarge_value", "=", "2.0", ",", "neighbor_values", "=", "[", "1.0", "]", ")", "\n", "\n", "\n", "# Get the flow", "\n", "flow", "=", "np", ".", "zeros", "(", "(", "1", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "0", ")", ")", "\n", "for", "idx", "in", "idx_range", ":", "\n", "                ", "flow_file", "=", "folder", "+", "'flow2_{}_{}.npy'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ",", "str", "(", "idx", ")", ".", "zfill", "(", "zfill_num", ")", ")", "\n", "if", "idx", "!=", "idx_range", "[", "0", "]", "and", "os", ".", "path", ".", "isfile", "(", "flow_file", ")", ":", "\n", "                    ", "flow_idx", "=", "np", ".", "reshape", "(", "np", ".", "load", "(", "flow_file", ")", ",", "(", "1", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flow_idx", "=", "np", ".", "zeros", "(", "(", "1", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ")", ")", "\n", "", "flow", "=", "np", ".", "concatenate", "(", "(", "flow", ",", "flow_idx", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "# Compute the barycenter coordinates", "\n", "", "lv_mask", "=", "np", ".", "where", "(", "np", ".", "logical_or", "(", "np", ".", "equal", "(", "mask", ",", "2.0", "*", "np", ".", "ones_like", "(", "mask", ")", ")", ",", "\n", "np", ".", "equal", "(", "mask", ",", "1.0", "*", "np", ".", "ones_like", "(", "mask", ")", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "mask", ")", ",", "np", ".", "zeros_like", "(", "mask", ")", ")", "\n", "rv_mask", "=", "np", ".", "where", "(", "np", ".", "equal", "(", "mask", ",", "3.0", "*", "np", ".", "ones_like", "(", "mask", ")", ")", ",", "\n", "np", ".", "ones_like", "(", "mask", ")", ",", "np", ".", "zeros_like", "(", "mask", ")", ")", "\n", "barycenters", "=", "mask_barycenter2", "(", "flow", ",", "mask", ",", "mask_value", "=", "1.0", ")", "\n", "rv_barycenters", "=", "mask_barycenter2", "(", "flow", ",", "mask", ",", "mask_value", "=", "3.0", ")", "\n", "\n", "\n", "# Transform the flow", "\n", "transformed_flow", ",", "angles", ",", "distance_flows", ",", "norms", ",", "boundary_pixels", "=", "masked_flow_transform2", "(", "flow", ",", "mask", ",", "barycenters", ",", "lvm_value", "=", "2.0", ",", "lvc_value", "=", "1.0", ")", "\n", "\n", "# Average the transformed flow by zone", "\n", "zone_avg_flow", ",", "zone_std_original_flow", ",", "zone_avg_inner_border_normalized_flow", ",", "zone_avg_outer_border_normalized_flow", ",", "zone_avg_myo_thickness_flow", ",", "zone_map", "=", "flow_by_zone3", "(", "transformed_flow", ",", "flow", ",", "angles", ",", "distance_flows", ",", "norms", ",", "boundary_pixels", ",", "num_zone", ",", "start_random", "=", "False", ",", "barycenters", "=", "barycenters", ",", "rv_barycenters", "=", "rv_barycenters", ")", "\n", "\n", "# Normalize the flow", "\n", "zone_avg_inner_border_normalized_flow", "*=", "normalize_term", "\n", "zone_avg_myo_thickness_flow", "*=", "normalize_term", "\n", "\n", "np", ".", "save", "(", "folder", "+", "'radius_flow_{}.npy'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ")", ",", "zone_avg_inner_border_normalized_flow", ")", "\n", "np", ".", "save", "(", "folder", "+", "'thickness_flow_{}.npy'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ")", ",", "zone_avg_myo_thickness_flow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.feature_extraction.acdc_pixel_size.acdc_pixel_size": [[12, 57], ["open", "open.close", "os.path.join", "print", "data_dir.format", "os.path.join", "nibabel.load", "os.path.join", "os.listdir", "os.path.join", "scipy.misc.imread", "open.write", "header.get_zooms", "header.get_zooms", "f.startswith", "f.endswith"], "function", ["None"], ["def", "acdc_pixel_size", "(", ")", ":", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "new_img_size", "=", "config", ".", "apparentflow_net_input_img_size", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "+", "test_subjects", "\n", "\n", "pixel_size_info", "=", "open", "(", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_pixel_size.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "subject", "in", "all_subjects", ":", "\n", "        ", "print", "(", "subject", ")", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "subject_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'{}_4d.nii.gz'", ".", "format", "(", "subject", ")", ")", "\n", "subject_img", "=", "nib", ".", "load", "(", "subject_file", ")", "\n", "header", "=", "subject_img", ".", "header", "\n", "#print(header.get_zooms())", "\n", "pixel_size", "=", "header", ".", "get_zooms", "(", ")", "[", "0", "]", "\n", "slice_thickness", "=", "header", ".", "get_zooms", "(", ")", "[", "2", "]", "\n", "\n", "predict_dir", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'predict_2D'", ")", "\n", "a_prediction_file", "=", "''", "\n", "for", "f", "in", "os", ".", "listdir", "(", "predict_dir", ")", ":", "\n", "            ", "if", "f", ".", "startswith", "(", "'predict_lvrv2_'", ")", "and", "f", ".", "endswith", "(", "'png'", ")", ":", "\n", "                ", "a_prediction_file", "=", "f", "\n", "break", "\n", "", "", "a_prediction_file_full", "=", "os", ".", "path", ".", "join", "(", "predict_dir", ",", "a_prediction_file", ")", "\n", "a_prediction", "=", "misc", ".", "imread", "(", "a_prediction_file_full", ")", "\n", "#print(a_prediction.shape)", "\n", "roi_size", "=", "a_prediction", ".", "shape", "[", "0", "]", "\n", "\n", "new_pixel_size", "=", "pixel_size", "*", "roi_size", "/", "new_img_size", "\n", "\n", "written", "=", "'{} {} {} {} {} {}\\n'", ".", "format", "(", "subject", ",", "pixel_size", ",", "roi_size", ",", "new_pixel_size", ",", "new_img_size", ",", "slice_thickness", ")", "\n", "\n", "pixel_size_info", ".", "write", "(", "written", ")", "\n", "\n", "", "pixel_size_info", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.feature_extraction.acdc_motion_index.acdc_motion_index": [[8, 116], ["os.path.join", "os.path.join", "os.path.join", "open", "open.close", "open", "in_file.readlines", "x.strip", "open", "p_file.readlines", "x.strip", "open", "b_file.readlines", "x.strip", "os.path.join", "print", "int", "int", "int", "int", "int", "int", "int", "int", "data_dir.format", "range", "numpy.zeros", "range", "open.write", "numpy.load", "numpy.load", "numpy.concatenate", "zone_avg_myo_thickness_flow[].min", "max", "max", "y.split", "float", "float", "float", "int", "int", "slice_asyn_thickness.max", "zone_avg_myo_thickness_flow[].max", "segment_thickness_diff.max", "y.split", "y.split", "round", "round", "zone_avg_myo_thickness_flow[].max", "zone_avg_myo_thickness_flow[].min", "all_radius_flow[].max", "all_radius_flow[].min", "y.split", "y.split", "y.split", "str().zfill", "str().zfill", "str", "str"], "function", ["None"], ["def", "acdc_motion_index", "(", ")", ":", "\n", "\n", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "excluded_slice_ratio", "=", "config", ".", "excluded_slice_ratio", "\n", "seq_instants", "=", "config", ".", "acdc_seq_instants", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "+", "test_subjects", "\n", "subjects", "=", "all_subjects", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "pixel_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_pixel_size.txt'", ")", "\n", "with", "open", "(", "pixel_file", ")", "as", "p_file", ":", "\n", "        ", "pixel_size_info", "=", "p_file", ".", "readlines", "(", ")", "\n", "\n", "", "pixel_size_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "pixel_size_info", "]", "\n", "pixel_size_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "pixel_size_info", "]", "\n", "\n", "\n", "base_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_base.txt'", ")", "\n", "with", "open", "(", "base_file", ")", "as", "b_file", ":", "\n", "        ", "base_info", "=", "b_file", ".", "readlines", "(", ")", "\n", "\n", "", "base_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "base_info", "]", "\n", "base_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "base_info", "]", "\n", "\n", "\n", "\n", "zfill_num", "=", "2", "\n", "\n", "\n", "motion_info", "=", "open", "(", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_motion_index.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "print", "(", "'\\n'", "+", "subject", ")", "\n", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", ")", "\n", "apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "es_base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "bsa", "=", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "8", "]", "\n", "pixel_size", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", "\n", "slice_thickness", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", "\n", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "folder", "=", "subject_dir", "+", "'/predict_2D/'", "\n", "\n", "\n", "slice_range", "=", "range", "(", "base_slice", "+", "int", "(", "round", "(", "(", "apex_slice", "+", "1", "-", "base_slice", ")", "*", "excluded_slice_ratio", "*", "0.5", ")", ")", ",", "apex_slice", "+", "1", "-", "int", "(", "round", "(", "(", "apex_slice", "+", "1", "-", "base_slice", ")", "*", "excluded_slice_ratio", "*", "1", ")", ")", ")", "\n", "\n", "\n", "\n", "all_radius_flow", "=", "np", ".", "zeros", "(", "(", "1", ",", "0", ",", "seq_instants", ")", ")", "\n", "\n", "asyn_thickness", "=", "0.0", "\n", "thickness_diff", "=", "-", "10.0", "\n", "for", "slice_idx", "in", "slice_range", ":", "\n", "            ", "zone_avg_inner_border_normalized_flow", "=", "np", ".", "load", "(", "folder", "+", "'radius_flow_{}.npy'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ")", ")", "\n", "zone_avg_myo_thickness_flow", "=", "np", ".", "load", "(", "folder", "+", "'thickness_flow_{}.npy'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ")", ")", "\n", "\n", "all_radius_flow", "=", "np", ".", "concatenate", "(", "(", "all_radius_flow", ",", "zone_avg_inner_border_normalized_flow", ")", ",", "axis", "=", "1", ")", "\n", "\n", "scale_thickness", "=", "zone_avg_myo_thickness_flow", "[", "0", ",", ":", ",", "0", "]", ".", "min", "(", ")", "\n", "slice_asyn_thickness", "=", "(", "zone_avg_myo_thickness_flow", "[", "0", ",", ":", ",", ":", "]", ".", "max", "(", "axis", "=", "0", ")", "-", "zone_avg_myo_thickness_flow", "[", "0", ",", ":", ",", ":", "]", ".", "min", "(", "axis", "=", "0", ")", ")", "/", "scale_thickness", "\n", "asyn_thickness", "=", "max", "(", "asyn_thickness", ",", "slice_asyn_thickness", ".", "max", "(", ")", ")", "\n", "\n", "segment_thickness_diff", "=", "zone_avg_myo_thickness_flow", "[", "0", ",", ":", ",", ":", "]", ".", "max", "(", "axis", "=", "1", ")", "-", "zone_avg_myo_thickness_flow", "[", "0", ",", ":", ",", "0", "]", "\n", "thickness_diff", "=", "max", "(", "thickness_diff", ",", "segment_thickness_diff", ".", "max", "(", ")", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "all_radius_flow", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "all_radius_flow", "[", "0", ",", "i", ",", ":", "]", "=", "(", "all_radius_flow", "[", "0", ",", "i", ",", "0", "]", "-", "all_radius_flow", "[", "0", ",", "i", ",", ":", "]", ")", "/", "all_radius_flow", "[", "0", ",", "i", ",", "0", "]", "\n", "\n", "", "asyn_radius", "=", "(", "all_radius_flow", "[", "0", ",", ":", ",", ":", "]", ".", "max", "(", "axis", "=", "0", ")", "-", "all_radius_flow", "[", "0", ",", ":", ",", ":", "]", ".", "min", "(", "axis", "=", "0", ")", ")", ".", "max", "(", ")", "\n", "\n", "\n", "\n", "written", "=", "'{} {} {} {}\\n'", ".", "format", "(", "subject", ",", "asyn_radius", ",", "asyn_thickness", ",", "thickness_diff", ")", "\n", "motion_info", ".", "write", "(", "written", ")", "\n", "\n", "\n", "", "motion_info", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.feature_extraction.acdc_thickness.acdc_thickness": [[11, 147], ["os.path.join", "os.path.join", "os.path.join", "open", "open.close", "open", "in_file.readlines", "x.strip", "open", "p_file.readlines", "x.strip", "open", "b_file.readlines", "x.strip", "os.path.join", "print", "int", "int", "int", "int", "int", "int", "int", "int", "data_dir.format", "range", "range", "print", "open.write", "image2.load_img2", "helpers.myo_mask_max_min_mean_thickness", "image2.load_img2", "helpers.myo_mask_max_min_mean_thickness", "y.split", "float", "float", "float", "range", "max", "min", "max", "min", "y.split", "y.split", "int", "str().zfill", "str().zfill", "numpy.array", "str().zfill", "str().zfill", "numpy.array", "y.split", "y.split", "y.split", "round", "str", "str", "str", "str", "float"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.myo_mask_max_min_mean_thickness", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.load_img2", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.myo_mask_max_min_mean_thickness"], ["def", "acdc_thickness", "(", ")", ":", "\n", "\n", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "excluded_slice_ratio", "=", "config", ".", "excluded_slice_ratio", "\n", "seq_instants", "=", "config", ".", "acdc_seq_instants", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "+", "test_subjects", "\n", "subjects", "=", "all_subjects", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "pixel_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_pixel_size.txt'", ")", "\n", "with", "open", "(", "pixel_file", ")", "as", "p_file", ":", "\n", "        ", "pixel_size_info", "=", "p_file", ".", "readlines", "(", ")", "\n", "\n", "", "pixel_size_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "pixel_size_info", "]", "\n", "pixel_size_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "pixel_size_info", "]", "\n", "\n", "\n", "base_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_base.txt'", ")", "\n", "with", "open", "(", "base_file", ")", "as", "b_file", ":", "\n", "        ", "base_info", "=", "b_file", ".", "readlines", "(", ")", "\n", "\n", "", "base_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "base_info", "]", "\n", "base_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "base_info", "]", "\n", "\n", "\n", "\n", "zfill_num", "=", "2", "\n", "img_size", "=", "config", ".", "apparentflow_net_input_img_size", "\n", "shape", "=", "(", "img_size", ",", "img_size", ",", "2", ")", "\n", "\n", "\n", "\n", "thickness_info", "=", "open", "(", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_thickness.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "print", "(", "'\\n'", "+", "subject", ")", "\n", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", ")", "\n", "apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "es_base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "bsa", "=", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "8", "]", "\n", "pixel_size", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", "\n", "slice_thickness", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", "\n", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "folder", "=", "subject_dir", "+", "'/predict_2D/'", "\n", "\n", "normalize_term", "=", "pixel_size", "/", "(", "bsa", "**", "(", "1.0", "/", "2", ")", ")", "\n", "\n", "idx_range", "=", "[", "(", "int", "(", "round", "(", "float", "(", "instants", ")", "*", "t", "/", "seq_instants", ")", ")", "+", "ed_instant", ")", "%", "instants", "for", "t", "in", "range", "(", "0", ",", "seq_instants", ")", "]", "\n", "\n", "\n", "\n", "start_slice", "=", "base_slice", "\n", "end_slice", "=", "apex_slice", "+", "1", "\n", "\n", "es_start_slice", "=", "es_base_slice", "\n", "es_end_slice", "=", "es_apex_slice", "+", "1", "\n", "\n", "\n", "ed_max", "=", "0.0", "\n", "ed_min", "=", "10000.0", "\n", "ed_sum", "=", "0.0", "\n", "ed_used_slice_count", "=", "0", "\n", "es_max", "=", "0.0", "\n", "es_min", "=", "10000.0", "\n", "es_sum", "=", "0.0", "\n", "es_used_slice_count", "=", "0", "\n", "\n", "for", "slice_idx", "in", "range", "(", "start_slice", ",", "end_slice", ")", ":", "\n", "            ", "mask_file", "=", "folder", "+", "'predict_lvrv2_{}_{}.png'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "zfill_num", ")", ")", "\n", "mask", "=", "load_img2", "(", "mask_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", ",", "\n", "shape", "[", "1", "]", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", "\n", "ed_max_thick", ",", "ed_min_thick", ",", "ed_mean_thick", "=", "myo_mask_max_min_mean_thickness", "(", "np", ".", "array", "(", "mask", ")", "/", "50.0", ")", "\n", "if", "ed_max_thick", ">=", "0.0", ":", "\n", "                ", "ed_max", "=", "max", "(", "ed_max", ",", "ed_max_thick", ")", "\n", "ed_min", "=", "min", "(", "ed_min", ",", "ed_min_thick", ")", "\n", "ed_sum", "+=", "ed_mean_thick", "\n", "ed_used_slice_count", "+=", "1", "\n", "", "", "ed_mean", "=", "ed_sum", "/", "ed_used_slice_count", "\n", "\n", "\n", "for", "slice_idx", "in", "range", "(", "es_start_slice", ",", "es_end_slice", ")", ":", "\n", "            ", "es_mask_file", "=", "folder", "+", "'predict_lvrv2_{}_{}.png'", ".", "format", "(", "str", "(", "slice_idx", ")", ".", "zfill", "(", "zfill_num", ")", ",", "str", "(", "es_instant", ")", ".", "zfill", "(", "zfill_num", ")", ")", "\n", "es_mask", "=", "load_img2", "(", "es_mask_file", ",", "grayscale", "=", "True", ",", "\n", "target_size", "=", "(", "shape", "[", "0", "]", ",", "\n", "shape", "[", "1", "]", ")", ",", "\n", "pad_to_square", "=", "True", ",", "resize_mode", "=", "'nearest'", ")", "\n", "es_max_thick", ",", "es_min_thick", ",", "es_mean_thick", "=", "myo_mask_max_min_mean_thickness", "(", "np", ".", "array", "(", "es_mask", ")", "/", "50.0", ")", "\n", "if", "es_max_thick", ">=", "0.0", ":", "\n", "                ", "es_max", "=", "max", "(", "es_max", ",", "es_max_thick", ")", "\n", "es_min", "=", "min", "(", "es_min", ",", "es_min_thick", ")", "\n", "es_sum", "+=", "es_mean_thick", "\n", "es_used_slice_count", "+=", "1", "\n", "", "", "es_mean", "=", "es_sum", "/", "es_used_slice_count", "\n", "\n", "ed_max", "*=", "pixel_size", "\n", "ed_min", "*=", "pixel_size", "\n", "es_max", "*=", "pixel_size", "\n", "es_min", "*=", "pixel_size", "\n", "ed_mean", "*=", "pixel_size", "\n", "es_mean", "*=", "pixel_size", "\n", "\n", "print", "(", "ed_max", ",", "ed_min", ",", "es_max", ",", "es_min", ",", "ed_mean", ",", "es_mean", ")", "\n", "\n", "\n", "written", "=", "'{} {} {} {} {} {} {}\\n'", ".", "format", "(", "subject", ",", "ed_max", ",", "ed_min", ",", "es_max", ",", "es_min", ",", "ed_mean", ",", "es_mean", ")", "\n", "thickness_info", ".", "write", "(", "written", ")", "\n", "\n", "", "thickness_info", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.flow.predict_apparentflow_net.predict_apparentflow_net": [[44, 218], ["int", "print", "module_apparentflow_net.net_module", "print", "module_apparentflow_net.net_module.load_weights", "module_apparentflow_net.net_module.compile", "print", "data_apparentflow.data_apparentflow", "len", "dict", "copy.deepcopy", "print", "range", "range", "itertools.izip", "print", "print", "range", "keras.backend.clear_session", "print", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "generators.append", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "generators.append", "int", "next", "module_apparentflow_net.net_module.predict", "module_apparentflow_net.net_module.predict", "helpers.warp_array_according_to_flow", "helpers.warp_array_according_to_flow", "range", "range", "range", "print", "os.path.join", "keras.optimizers.Adam", "module_apparentflow_net.net_module.count_params", "keras.backend.image_data_format", "numpy.zeros", "numpy.zeros", "tuple", "int", "math.ceil", "path.replace", "save_path.replace.replace", "save_path.replace.replace", "numpy.save", "numpy.zeros", "scipy.misc.imresize", "numpy.rint", "path.replace", "warped_save_path2.replace.replace", "image2.array_to_img", "image2.array_to_img.save", "math.ceil", "min", "PIL.Image.open", "str", "str().zfill", "float", "float", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.module_roi_net.net_module", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.flow.data_apparentflow.data_apparentflow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_array_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.warp_array_according_to_flow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.array_to_img"], ["def", "predict_apparentflow_net", "(", ")", ":", "\n", "\n", "    ", "code_path", "=", "config", ".", "code_dir", "\n", "\n", "fold", "=", "int", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "print", "(", "'fold = {}'", ".", "format", "(", "fold", ")", ")", "\n", "if", "fold", "==", "0", ":", "\n", "        ", "mode", "=", "'predict'", "\n", "", "elif", "fold", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "mode", "=", "'val'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect fold'", ")", "\n", "\n", "", "initial_lr", "=", "config", ".", "apparentflow_net_initial_lr", "\n", "decay_rate", "=", "config", ".", "apparentflow_net_decay_rate", "\n", "batch_size", "=", "config", ".", "apparentflow_net_batch_size", "\n", "input_img_size", "=", "config", ".", "apparentflow_net_input_img_size", "\n", "epochs", "=", "config", ".", "apparentflow_net_epochs", "\n", "\n", "\n", "###########", "\n", "# The model", "\n", "model", "=", "net_module", "(", "input_shape", "=", "(", "input_img_size", ",", "input_img_size", ",", "1", ")", ",", "num_outputs", "=", "2", ")", "\n", "print", "(", "'Loading model'", ")", "\n", "model", ".", "load_weights", "(", "filepath", "=", "os", ".", "path", ".", "join", "(", "code_path", ",", "'flow'", ",", "'model_apparentflow_net_fold{}_epoch{}.h5'", ".", "format", "(", "str", "(", "fold", ")", ",", "str", "(", "epochs", ")", ".", "zfill", "(", "3", ")", ")", ")", ")", "\n", "\n", "\n", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "lr", "=", "initial_lr", ")", ",", "loss", "=", "flow_combined_loss3", ",", "\n", "metrics", "=", "[", "flow_warped_gt_comparison_dice_loss_lvc", ",", "flow_warped_gt_comparison_dice_loss_lvm", ",", "flow_warped_gt_comparison_dice_loss_rvc", "]", ")", "\n", "\n", "print", "(", "'This model has {} parameters'", ".", "format", "(", "model", ".", "count_params", "(", ")", ")", ")", "\n", "\n", "\n", "\n", "# Load data lists", "\n", "img_list0", ",", "img_list1", ",", "seg_list0", ",", "seg_list1", "=", "data_apparentflow", "(", "mode", "=", "mode", ",", "fold", "=", "fold", ")", "\n", "\n", "predict_sample", "=", "len", "(", "img_list0", ")", "\n", "predict_img_list", "=", "[", "img_list0", ",", "img_list1", ",", "seg_list0", ",", "seg_list1", "]", "\n", "\n", "# we create two instances with the same arguments for random transformation", "\n", "img_data_gen_args", "=", "dict", "(", "featurewise_center", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "\n", "featurewise_std_normalization", "=", "False", ",", "\n", "samplewise_std_normalization", "=", "False", ",", "\n", "zca_whitening", "=", "False", ",", "\n", "zca_epsilon", "=", "1e-6", ",", "\n", "rotation_range", "=", "0.", ",", "\n", "width_shift_range", "=", "0.", ",", "\n", "height_shift_range", "=", "0.", ",", "\n", "shear_range", "=", "0.", ",", "\n", "zoom_range", "=", "0.", ",", "\n", "channel_shift_range", "=", "0.", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "cval", "=", "0.", ",", "\n", "horizontal_flip", "=", "False", ",", "\n", "vertical_flip", "=", "False", ",", "\n", "rescale", "=", "None", ",", "\n", "preprocessing_function", "=", "mean_variance_normalization5", ",", "\n", "data_format", "=", "K", ".", "image_data_format", "(", ")", ")", "\n", "\n", "# deep copy is necessary", "\n", "mask_data_gen_args", "=", "copy", ".", "deepcopy", "(", "img_data_gen_args", ")", "\n", "mask_data_gen_args", "[", "'preprocessing_function'", "]", "=", "elementwise_multiplication", "\n", "\n", "#########################", "\n", "# Generators for prediction", "\n", "print", "(", "'Creating generators for prediction'", ")", "\n", "seed", "=", "1", "\n", "generators", "=", "[", "]", "\n", "# The generators for the 2 inputs", "\n", "for", "k", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "        ", "img_datagen_k", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "img_datagen_k", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "img_generator_k", "=", "img_datagen_k", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "predict_img_list", "[", "k", "]", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "500", ",", "\n", "follow_links", "=", "False", ")", "\n", "generators", ".", "append", "(", "img_generator_k", ")", "\n", "\n", "\n", "", "for", "k", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "        ", "seg_datagen", "=", "ImageDataGenerator2", "(", "**", "mask_data_gen_args", ")", "\n", "seg_datagen", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "seg_generator", "=", "seg_datagen", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "predict_img_list", "[", "k", "]", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "500", ",", "\n", "follow_links", "=", "False", ")", "\n", "generators", ".", "append", "(", "seg_generator", ")", "\n", "\n", "# Combine generators into one which yields image and masks", "\n", "", "predict_generator", "=", "izip", "(", "*", "tuple", "(", "generators", ")", ")", "\n", "\n", "\n", "###############", "\n", "# Prediction the model", "\n", "print", "(", "'Start prediction'", ")", "\n", "print", "(", "'There will be {} forwards'", ".", "format", "(", "int", "(", "math", ".", "ceil", "(", "float", "(", "predict_sample", ")", "/", "batch_size", ")", ")", ")", ")", "\n", "\n", "\n", "for", "j", "in", "range", "(", "int", "(", "math", ".", "ceil", "(", "float", "(", "predict_sample", ")", "/", "batch_size", ")", ")", ")", ":", "\n", "        ", "paths", "=", "predict_img_list", "[", "1", "]", "[", "j", "*", "batch_size", ":", "min", "(", "(", "j", "+", "1", ")", "*", "batch_size", ",", "predict_sample", ")", "]", "\n", "predict_batch", "=", "next", "(", "predict_generator", ")", "\n", "# flow: t -> ED    flow2: ED -> t", "\n", "flows", "=", "model", ".", "predict", "(", "[", "predict_batch", "[", "1", "]", ",", "predict_batch", "[", "0", "]", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "verbose", "=", "0", ")", "\n", "flows2", "=", "model", ".", "predict", "(", "[", "predict_batch", "[", "0", "]", ",", "predict_batch", "[", "1", "]", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "verbose", "=", "0", ")", "\n", "\n", "\n", "warped_seg", "=", "warp_array_according_to_flow", "(", "predict_batch", "[", "2", "]", ",", "flows", ",", "mode", "=", "'nearest'", ")", "\n", "warped_seg2", "=", "warp_array_according_to_flow", "(", "predict_batch", "[", "3", "]", ",", "flows2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "\n", "# Save flow2   ", "\n", "for", "i", "in", "range", "(", "predict_batch", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "path", "=", "paths", "[", "i", "]", "\n", "save_path", "=", "path", ".", "replace", "(", "'/crop_2D/'", ",", "'/predict_2D/'", ",", "1", ")", "\n", "save_path", "=", "save_path", ".", "replace", "(", "'/crop_2D_'", ",", "'/flow2_'", ",", "1", ")", "\n", "save_path", "=", "save_path", ".", "replace", "(", "'.png'", ",", "'.npy'", ",", "1", ")", "\n", "np", ".", "save", "(", "save_path", ",", "flows2", "[", "i", "]", ")", "\n", "\n", "\n", "\n", "# Resize and save the warped segmentation mask2", "\n", "", "for", "i", "in", "range", "(", "predict_batch", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "original_img_size", "=", "pil_image", ".", "open", "(", "paths", "[", "i", "]", ")", ".", "size", "\n", "original_size", "=", "original_img_size", "[", "0", "]", "\n", "\n", "path", "=", "paths", "[", "i", "]", "\n", "warped_seg_resized2", "=", "np", ".", "zeros", "(", "(", "original_size", ",", "original_size", ",", "1", ")", ")", "\n", "warped_seg_resized2", "[", ":", ",", ":", ",", "0", "]", "=", "imresize", "(", "warped_seg2", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "(", "original_size", ",", "original_size", ")", ",", "interp", "=", "'nearest'", ",", "mode", "=", "'F'", ")", "\n", "\n", "warped_seg_resized2", "=", "np", ".", "rint", "(", "warped_seg_resized2", ")", "\n", "warped_save_path2", "=", "path", ".", "replace", "(", "'/crop_2D/'", ",", "'/predict_2D/'", ",", "1", ")", "\n", "warped_save_path2", "=", "warped_save_path2", ".", "replace", "(", "'/crop_2D_'", ",", "'/predict_flow_warp2_'", ",", "1", ")", "\n", "warped_seg_mask2", "=", "array_to_img", "(", "warped_seg_resized2", "*", "50.0", ",", "data_format", "=", "None", ",", "scale", "=", "False", ")", "\n", "warped_seg_mask2", ".", "save", "(", "warped_save_path2", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "K", ".", "clear_session", "(", ")", "\n", "\n", "print", "(", "'Prediction is done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.flow.module_apparentflow_net.net_module": [[34, 179], ["helpers.handle_dim_ordering", "keras.layers.Input", "keras.layers.Input", "keras.models.Model", "len", "Exception", "keras.backend.image_dim_ordering", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.UpSampling2D", "keras.layers.merge.Add", "keras.layers.UpSampling2D", "keras.layers.merge.Add"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.handle_dim_ordering", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block"], ["def", "net_module", "(", "input_shape", ",", "num_outputs", ")", ":", "\n", "    ", "\"\"\"Builds a net architecture.\n    Args:\n        input_shape: The input shape in the form (nb_rows, nb_cols, nb_channels)\n        num_outputs: The number of outputs at final softmax layer\n        Returns:\n            The keras `Model`.\n    \"\"\"", "\n", "CHANNEL_AXIS", "=", "3", "\n", "handle_dim_ordering", "(", ")", "\n", "if", "len", "(", "input_shape", ")", "!=", "3", ":", "\n", "        ", "raise", "Exception", "(", "\"Input shape should be a tuple (nb_rows, nb_cols, nb_channels)\"", ")", "\n", "\n", "# Permute dimension order if necessary", "\n", "", "if", "K", ".", "image_dim_ordering", "(", ")", "!=", "'tf'", ":", "\n", "        ", "input_shape", "=", "(", "input_shape", "[", "2", "]", ",", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ")", "\n", "\n", "", "input_img0", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "\"input_img0\"", ")", "\n", "\n", "input_img1", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "\"input_img1\"", ")", "\n", "\n", "\n", "concatenate", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concatenate\"", ")", "(", "[", "input_img0", ",", "\n", "input_img1", "]", ")", "\n", "\n", "\n", "base_channel", "=", "24", "\n", "\n", "\n", "\n", "\n", "block_conv_1", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "1", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block1\"", ")", "(", "concatenate", ")", "\n", "\n", "\n", "block_pool_2", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block2\"", ")", "(", "block_conv_1", ")", "\n", "\n", "block_conv_2", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "2", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block2\"", ")", "(", "block_pool_2", ")", "\n", "\n", "\n", "block_pool_4", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block4\"", ")", "(", "block_conv_2", ")", "\n", "\n", "block_conv_4", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "4", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block4\"", ")", "(", "block_pool_4", ")", "\n", "\n", "\n", "block_pool_8", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block8\"", ")", "(", "block_conv_4", ")", "\n", "\n", "block_conv_8", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "8", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block8\"", ")", "(", "block_pool_8", ")", "\n", "\n", "\n", "block_pool_16", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block16\"", ")", "(", "block_conv_8", ")", "\n", "\n", "block_conv_16", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "16", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"conv_block16\"", ")", "(", "block_pool_16", ")", "\n", "\n", "\n", "\n", "\n", "\n", "block_up_8", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block8\"", ")", "(", "block_conv_16", ")", "\n", "\n", "block_concat_8", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat8\"", ")", "(", "[", "block_up_8", ",", "block_conv_8", "]", ")", "\n", "\n", "block_expan_conv_8", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "8", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block8\"", ")", "(", "block_concat_8", ")", "\n", "\n", "\n", "block_up_4", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block4\"", ")", "(", "block_expan_conv_8", ")", "\n", "\n", "block_concat_4", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat4\"", ")", "(", "[", "block_up_4", ",", "block_conv_4", "]", ")", "\n", "\n", "block_expan_conv_4", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "4", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block4\"", ")", "(", "block_concat_4", ")", "\n", "\n", "\n", "block_up_2", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block2\"", ")", "(", "block_expan_conv_4", ")", "\n", "\n", "block_concat_2", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat2\"", ")", "(", "[", "block_up_2", ",", "block_conv_2", "]", ")", "\n", "\n", "block_expan_conv_2", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "2", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block2\"", ")", "(", "block_concat_2", ")", "\n", "\n", "\n", "block_up_1", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block1\"", ")", "(", "block_expan_conv_2", ")", "\n", "\n", "block_concat_1", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat1\"", ")", "(", "[", "block_up_1", ",", "block_conv_1", "]", ")", "\n", "\n", "block_expan_conv_1", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "1", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.0", ",", "\n", "name", "=", "\"expan_conv_block1\"", ")", "(", "block_concat_1", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "block_seg_4", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block4\"", ")", "(", "block_expan_conv_4", ")", "\n", "\n", "block_seg_2", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block2\"", ")", "(", "block_expan_conv_2", ")", "\n", "\n", "block_seg_1", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block1\"", ")", "(", "block_expan_conv_1", ")", "\n", "\n", "block_seg_up_2", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"seg_up_block2\"", ")", "(", "block_seg_4", ")", "\n", "\n", "block_add_2", "=", "Add", "(", "name", "=", "\"add_block2\"", ")", "(", "[", "block_seg_up_2", ",", "block_seg_2", "]", ")", "\n", "\n", "block_seg_up_1", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"seg_up_block1\"", ")", "(", "block_add_2", ")", "\n", "\n", "output", "=", "Add", "(", "name", "=", "\"output\"", ")", "(", "[", "block_seg_up_1", ",", "block_seg_1", "]", ")", "\n", "\n", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "input_img0", ",", "input_img1", "]", ",", "outputs", "=", "output", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.flow.train_apparentflow_net.train_apparentflow_net": [[41, 279], ["int", "print", "module_apparentflow_net.net_module", "module_apparentflow_net.net_module.compile", "print", "data_apparentflow.data_apparentflow", "data_apparentflow.data_apparentflow", "len", "len", "dict", "copy.deepcopy", "print", "range", "range", "itertools.izip", "print", "range", "range", "itertools.izip", "print", "int", "print", "range", "print", "print", "print", "module_apparentflow_net.net_module.load_weights", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "generators.append", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "generators.append", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "generators2.append", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "generators2.append", "math.ceil", "print", "range", "range", "print", "keras.optimizers.Adam", "module_apparentflow_net.net_module.count_params", "keras.backend.image_data_format", "numpy.zeros", "numpy.zeros", "tuple", "numpy.zeros", "numpy.zeros", "tuple", "print", "next", "print", "float", "keras.backend.set_value", "print", "module_apparentflow_net.net_module.save_weights", "os.path.join", "float", "module_apparentflow_net.net_module.train_on_batch", "next", "print", "print", "keras.backend.get_value", "os.path.join", "numpy.concatenate", "module_apparentflow_net.net_module.test_on_batch", "str", "str().zfill", "numpy.concatenate", "str", "str().zfill", "str", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.module_roi_net.net_module", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.flow.data_apparentflow.data_apparentflow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.flow.data_apparentflow.data_apparentflow", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next"], ["def", "train_apparentflow_net", "(", ")", ":", "\n", "\n", "    ", "code_path", "=", "config", ".", "code_dir", "\n", "\n", "fold", "=", "int", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "print", "(", "'fold = {}'", ".", "format", "(", "fold", ")", ")", "\n", "if", "fold", "==", "0", ":", "\n", "        ", "mode_train", "=", "'all'", "\n", "mode_val", "=", "'all'", "\n", "", "elif", "fold", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "mode_train", "=", "'train'", "\n", "mode_val", "=", "'val'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect fold'", ")", "\n", "\n", "\n", "", "initial_lr", "=", "config", ".", "apparentflow_net_initial_lr", "\n", "decay_rate", "=", "config", ".", "apparentflow_net_decay_rate", "\n", "batch_size", "=", "config", ".", "apparentflow_net_batch_size", "\n", "input_img_size", "=", "config", ".", "apparentflow_net_input_img_size", "\n", "epochs", "=", "config", ".", "apparentflow_net_epochs", "\n", "\n", "current_epoch", "=", "0", "\n", "new_start_epoch", "=", "current_epoch", "\n", "\n", "###########", "\n", "# The model", "\n", "model", "=", "net_module", "(", "input_shape", "=", "(", "input_img_size", ",", "input_img_size", ",", "1", ")", ",", "num_outputs", "=", "2", ")", "\n", "# Train from scratch", "\n", "if", "current_epoch", "==", "0", ":", "\n", "        ", "print", "(", "'Building model'", ")", "\n", "# Finetune", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Loading model'", ")", "\n", "model", ".", "load_weights", "(", "filepath", "=", "os", ".", "path", ".", "join", "(", "code_path", ",", "'flow'", ",", "'model_apparentflow_net_fold{}_epoch{}.h5'", ".", "format", "(", "str", "(", "fold", ")", ",", "str", "(", "current_epoch", ")", ".", "zfill", "(", "3", ")", ")", ")", ")", "\n", "\n", "\n", "", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "lr", "=", "initial_lr", ")", ",", "loss", "=", "flow_combined_loss3", ",", "\n", "metrics", "=", "[", "flow_warped_img_comparison_loss", ",", "flow_warped_gt_comparison_dice_loss", ",", "flow_diffeomorphism_loss", "]", ")", "\n", "\n", "\n", "print", "(", "'This model has {} parameters'", ".", "format", "(", "model", ".", "count_params", "(", ")", ")", ")", "\n", "\n", "# Load data lists", "\n", "train_img_list0", ",", "train_img_list1", ",", "train_gt_list0", ",", "train_gt_list1", "=", "data_apparentflow", "(", "mode", "=", "mode_train", ",", "fold", "=", "fold", ")", "\n", "test_img_list0", ",", "test_img_list1", ",", "test_gt_list0", ",", "test_gt_list1", "=", "data_apparentflow", "(", "mode", "=", "mode_val", ",", "fold", "=", "fold", ")", "\n", "\n", "train_sample", "=", "len", "(", "train_img_list0", ")", "\n", "val_sample", "=", "len", "(", "test_img_list0", ")", "\n", "\n", "train_img_list", "=", "[", "train_img_list0", ",", "train_img_list1", ",", "train_gt_list0", ",", "train_gt_list1", "]", "\n", "val_img_list", "=", "[", "test_img_list0", ",", "test_img_list1", ",", "test_gt_list0", ",", "test_gt_list1", "]", "\n", "\n", "# we create two instances with the same arguments for random transformation", "\n", "img_data_gen_args", "=", "dict", "(", "featurewise_center", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "\n", "featurewise_std_normalization", "=", "False", ",", "\n", "samplewise_std_normalization", "=", "False", ",", "\n", "zca_whitening", "=", "False", ",", "\n", "zca_epsilon", "=", "1e-6", ",", "\n", "rotation_range", "=", "180.", ",", "\n", "width_shift_range", "=", "0.15", ",", "\n", "height_shift_range", "=", "0.15", ",", "\n", "shear_range", "=", "0.", ",", "\n", "zoom_range", "=", "0.15", ",", "\n", "channel_shift_range", "=", "0.", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "cval", "=", "0.", ",", "\n", "horizontal_flip", "=", "True", ",", "\n", "vertical_flip", "=", "True", ",", "\n", "rescale", "=", "None", ",", "\n", "preprocessing_function", "=", "mean_variance_normalization5", ",", "\n", "data_format", "=", "K", ".", "image_data_format", "(", ")", ")", "\n", "\n", "# deep copy is necessary", "\n", "mask_data_gen_args", "=", "copy", ".", "deepcopy", "(", "img_data_gen_args", ")", "\n", "mask_data_gen_args", "[", "'preprocessing_function'", "]", "=", "elementwise_multiplication", "\n", "\n", "#########################", "\n", "# Generators for training", "\n", "print", "(", "'Creating generators for training'", ")", "\n", "seed", "=", "1", "\n", "generators", "=", "[", "]", "\n", "# The generators for the 2 inputs", "\n", "for", "k", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "        ", "seg_datagen_k", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "seg_datagen_k", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "seg_generator_k", "=", "seg_datagen_k", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "train_img_list", "[", "k", "]", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "False", ")", "\n", "generators", ".", "append", "(", "seg_generator_k", ")", "\n", "# The generators for the 2 masks", "\n", "", "for", "k", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "        ", "seg_datagen_k", "=", "ImageDataGenerator2", "(", "**", "mask_data_gen_args", ")", "\n", "seg_datagen_k", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "seg_generator_k", "=", "seg_datagen_k", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "train_img_list", "[", "k", "]", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "False", ")", "\n", "generators", ".", "append", "(", "seg_generator_k", ")", "\n", "\n", "# Combine generators into one which yields image and masks", "\n", "", "train_generator", "=", "izip", "(", "*", "tuple", "(", "generators", ")", ")", "\n", "\n", "\n", "###########################", "\n", "# Generators for validation", "\n", "print", "(", "'Creating generators for validation'", ")", "\n", "val_seed", "=", "2", "\n", "generators2", "=", "[", "]", "\n", "# The generators for the inputs", "\n", "for", "k", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "        ", "seg_datagen_k", "=", "ImageDataGenerator2", "(", "**", "img_data_gen_args", ")", "\n", "seg_datagen_k", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "seg_generator_k", "=", "seg_datagen_k", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "val_img_list", "[", "k", "]", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'val_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "False", ")", "\n", "generators2", ".", "append", "(", "seg_generator_k", ")", "\n", "# The generators for the 2 masks", "\n", "", "for", "k", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "        ", "seg_datagen_k", "=", "ImageDataGenerator2", "(", "**", "mask_data_gen_args", ")", "\n", "seg_datagen_k", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "seg_generator_k", "=", "seg_datagen_k", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "val_img_list", "[", "k", "]", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "False", ",", "\n", "clahe", "=", "False", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "'val_'", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "save_period", ",", "\n", "follow_links", "=", "False", ")", "\n", "generators2", ".", "append", "(", "seg_generator_k", ")", "\n", "\n", "# Combine generators into one which yields image and masks", "\n", "", "val_generator", "=", "izip", "(", "*", "tuple", "(", "generators2", ")", ")", "\n", "\n", "\n", "\n", "###############", "\n", "# Train the model", "\n", "print", "(", "'Start training'", ")", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "train_sample", ")", "/", "batch_size", ")", ")", "\n", "print", "(", "'There will be {} epochs with {} steps in each epoch'", ".", "format", "(", "epochs", ",", "steps", ")", ")", "\n", "\n", "\n", "total_step", "=", "0", "\n", "for", "epoch", "in", "range", "(", "new_start_epoch", "+", "1", ",", "new_start_epoch", "+", "epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "'\\n\\n##########\\nEpoch {}\\n##########'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "            ", "print", "(", "'\\n****** Epoch {} Step {} ******'", ".", "format", "(", "epoch", ",", "step", ")", ")", "\n", "train_batch", "=", "next", "(", "train_generator", ")", "\n", "\n", "print", "(", "model", ".", "train_on_batch", "(", "[", "train_batch", "[", "0", "]", ",", "train_batch", "[", "1", "]", "]", ",", "\n", "np", ".", "concatenate", "(", "(", "train_batch", "[", "1", "]", ",", "train_batch", "[", "0", "]", ",", "train_batch", "[", "3", "]", ",", "train_batch", "[", "2", "]", ")", ",", "axis", "=", "-", "1", ")", ",", "\n", "sample_weight", "=", "None", ",", "class_weight", "=", "None", ")", ")", "\n", "\n", "\n", "\n", "\n", "# perform test", "\n", "if", "(", "total_step", "%", "save_period", "==", "0", ")", ":", "\n", "                ", "val_batch", "=", "next", "(", "val_generator", ")", "\n", "print", "(", "'test:'", ")", "\n", "print", "(", "model", ".", "test_on_batch", "(", "[", "val_batch", "[", "0", "]", ",", "val_batch", "[", "1", "]", "]", ",", "\n", "np", ".", "concatenate", "(", "(", "val_batch", "[", "1", "]", ",", "val_batch", "[", "0", "]", ",", "val_batch", "[", "3", "]", ",", "val_batch", "[", "2", "]", ")", ",", "axis", "=", "-", "1", ")", ",", "sample_weight", "=", "None", ")", ")", "\n", "\n", "\n", "", "total_step", "+=", "1", "\n", "\n", "\n", "# adjust learning rate", "\n", "", "if", "(", "epoch", "%", "10", "==", "0", ")", ":", "\n", "            ", "old_lr", "=", "float", "(", "K", ".", "get_value", "(", "model", ".", "optimizer", ".", "lr", ")", ")", "\n", "new_lr", "=", "initial_lr", "*", "(", "decay_rate", "**", "(", "epoch", "//", "10", ")", ")", "\n", "K", ".", "set_value", "(", "model", ".", "optimizer", ".", "lr", ",", "new_lr", ")", "\n", "print", "(", "\"learning rate is reset to %.8f\"", "%", "(", "new_lr", ")", ")", "\n", "\n", "# save the model", "\n", "", "if", "(", "epoch", "%", "50", "==", "0", ")", ":", "\n", "            ", "model", ".", "save_weights", "(", "os", ".", "path", ".", "join", "(", "code_path", ",", "'flow'", ",", "'model_apparentflow_net_fold{}_epoch{}.h5'", ".", "format", "(", "str", "(", "fold", ")", ",", "str", "(", "epoch", ")", ".", "zfill", "(", "3", ")", ")", ")", ")", "\n", "\n", "\n", "\n", "", "", "print", "(", "'Training is done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.flow.data_apparentflow.data_apparentflow": [[11, 118], ["print", "os.path.join", "os.path.join", "print", "print", "print", "open", "in_file.readlines", "x.strip", "open", "g_file.readlines", "x.strip", "int", "int", "int", "int", "data_dir.format", "range", "len", "int", "int", "int", "int", "range", "len", "y.split", "float", "int", "int", "int", "os.path.join", "os.path.join", "img_list0.append", "img_list1.append", "seg_list0.append", "seg_list1.append", "enumerate", "print", "y.split", "round", "round", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "enumerate", "y.split", "y.split", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "data_apparentflow", "(", "mode", "=", "'all'", ",", "fold", "=", "1", ")", ":", "\n", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "\n", "\n", "if", "mode", "==", "'all'", ":", "\n", "        ", "subjects", "=", "all_subjects", "\n", "", "elif", "mode", "==", "'train'", ":", "\n", "        ", "subjects", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "all_subjects", ")", "if", "(", "i", "%", "5", ")", "!=", "(", "fold", "%", "5", ")", "]", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "subjects", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "all_subjects", ")", "if", "(", "i", "%", "5", ")", "==", "(", "fold", "%", "5", ")", "]", "\n", "", "elif", "mode", "==", "'predict'", ":", "\n", "        ", "subjects", "=", "test_subjects", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect mode'", ")", "\n", "\n", "", "print", "(", "subjects", ")", "\n", "\n", "excluded_slice_ratio", "=", "config", ".", "excluded_slice_ratio", "\n", "\n", "seq_instants", "=", "config", ".", "acdc_seq_instants", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "gt_base_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_gt_base.txt'", ")", "\n", "\n", "with", "open", "(", "gt_base_file", ")", "as", "g_file", ":", "\n", "        ", "gt_base_info", "=", "g_file", ".", "readlines", "(", ")", "\n", "\n", "", "gt_base_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "gt_base_info", "]", "\n", "gt_base_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "int", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "gt_base_info", "]", "\n", "\n", "\n", "print", "(", "'There will be {} used subjects'", ".", "format", "(", "len", "(", "subjects", ")", ")", ")", "\n", "\n", "img_list0", "=", "[", "]", "\n", "img_list1", "=", "[", "]", "\n", "seg_list0", "=", "[", "]", "\n", "seg_list1", "=", "[", "]", "\n", "\n", "segmented_pair_count", "=", "0", "\n", "unsegmented_pair_count", "=", "0", "\n", "for", "subject", "in", "subjects", ":", "\n", "#print(subject)", "\n", "        ", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "\n", "\n", "if", "mode", "in", "[", "'test'", ",", "'predict'", "]", ":", "\n", "            ", "start_slice", "=", "0", "\n", "end_slice", "=", "slices", "\n", "", "else", ":", "\n", "            ", "base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "gt_base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", ")", "\n", "apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "gt_base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "es_base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "gt_base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "gt_base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "\n", "# The start_slice is smaller than the end_slice", "\n", "start_slice", "=", "base_slice", "+", "int", "(", "round", "(", "(", "apex_slice", "+", "1", "-", "base_slice", ")", "*", "excluded_slice_ratio", ")", ")", "\n", "end_slice", "=", "apex_slice", "+", "1", "-", "int", "(", "round", "(", "(", "apex_slice", "+", "1", "-", "base_slice", ")", "*", "excluded_slice_ratio", ")", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "start_slice", ",", "end_slice", ")", ":", "\n", "\n", "\n", "            ", "for", "t", "in", "range", "(", "0", ",", "instants", ")", ":", "\n", "\n", "                ", "img0", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "img1", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "if", "t", "==", "es_instant", ":", "\n", "                    ", "seg0", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_gt_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "seg1", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_gt_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "segmented_pair_count", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "seg0", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_gt_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "-", "1", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "seg1", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ",", "'crop_2D_gt_{}_{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "-", "1", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "unsegmented_pair_count", "+=", "1", "\n", "", "img_list0", ".", "append", "(", "img0", ")", "\n", "img_list1", ".", "append", "(", "img1", ")", "\n", "seg_list0", ".", "append", "(", "seg0", ")", "\n", "seg_list1", ".", "append", "(", "seg1", ")", "\n", "\n", "\n", "\n", "", "", "", "print", "(", "'pair count = {}'", ".", "format", "(", "len", "(", "img_list0", ")", ")", ")", "\n", "print", "(", "'segmented_pair_count = {}'", ".", "format", "(", "segmented_pair_count", ")", ",", "'unsegmented_pair_count = {}'", ".", "format", "(", "unsegmented_pair_count", ")", ")", "\n", "\n", "return", "img_list0", ",", "img_list1", ",", "seg_list0", ",", "seg_list1", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.processing.acdc_gt_base.acdc_gt_base": [[12, 116], ["os.path.join", "open", "open.close", "open", "in_file.readlines", "x.strip", "os.path.join", "data_dir.format", "os.path.join", "os.path.join", "int", "int", "int", "int", "range", "range", "range", "range", "print", "open.write", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "range", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "range", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "y.split", "float", "str().zfill", "str().zfill", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "os.path.join.format", "PIL.Image.open", "Image.open.load", "numpy.array", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "y.split", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "acdc_gt_base", "(", ")", ":", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "base_info", "=", "open", "(", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_gt_base.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "subject", "in", "all_subjects", ":", "\n", "        ", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "subject_predict_dir", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ")", "\n", "subject_predict_file", "=", "os", ".", "path", ".", "join", "(", "subject_predict_dir", ",", "'crop_2D_gt_{}_{}.png'", ")", "\n", "\n", "\n", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "\n", "base_slice", "=", "0", "\n", "have_rv", "=", "False", "\n", "for", "i", "in", "range", "(", "slices", ")", ":", "\n", "            ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "150", "in", "data", ":", "\n", "                ", "base_slice", "=", "i", "\n", "have_rv", "=", "True", "\n", "break", "\n", "", "", "if", "not", "have_rv", ":", "\n", "            ", "for", "i", "in", "range", "(", "slices", ")", ":", "\n", "                ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "50", "in", "data", ":", "\n", "                    ", "base_slice", "=", "i", "\n", "break", "\n", "\n", "", "", "", "apex_slice", "=", "slices", "-", "1", "\n", "for", "j", "in", "range", "(", "slices", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "ed_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "50", "in", "data", ":", "\n", "                ", "apex_slice", "=", "j", "\n", "break", "\n", "\n", "\n", "", "", "es_base_slice", "=", "0", "\n", "have_rv", "=", "False", "\n", "for", "i", "in", "range", "(", "slices", ")", ":", "\n", "            ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "es_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "150", "in", "data", ":", "\n", "                ", "es_base_slice", "=", "i", "\n", "have_rv", "=", "True", "\n", "break", "\n", "", "", "if", "not", "have_rv", ":", "\n", "            ", "for", "i", "in", "range", "(", "slices", ")", ":", "\n", "                ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "es_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "50", "in", "data", ":", "\n", "                    ", "es_base_slice", "=", "i", "\n", "break", "\n", "\n", "", "", "", "es_apex_slice", "=", "slices", "-", "1", "\n", "for", "j", "in", "range", "(", "slices", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "img_file", "=", "subject_predict_file", ".", "format", "(", "str", "(", "j", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "es_instant", ")", ".", "zfill", "(", "2", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "50", "in", "data", ":", "\n", "                ", "apex_slice", "=", "j", "\n", "break", "\n", "\n", "", "", "print", "(", "subject", ",", "base_slice", ",", "apex_slice", ",", "es_base_slice", ",", "es_apex_slice", ")", "\n", "written", "=", "'{} {} {} {} {}\\n'", ".", "format", "(", "subject", ",", "base_slice", ",", "apex_slice", ",", "es_base_slice", ",", "es_apex_slice", ")", "\n", "base_info", ".", "write", "(", "written", ")", "\n", "\n", "", "base_info", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.processing.convert_nifti_to_2D.convert_nifti_to_2D": [[16, 65], ["print", "print", "data_dir.format", "os.path.join", "os.path.join", "os.path.isfile", "str().zfill", "range", "len", "os.path.exists", "os.makedirs", "nibabel.load", "nib.load.get_data", "numpy.array", "np.array.max", "print", "range", "print", "range", "str", "os.path.join", "PIL.Image.fromarray().save", "str().zfill", "str().zfill", "PIL.Image.fromarray", "str", "str", "numpy.rot90"], "function", ["None"], ["def", "convert_nifti_to_2D", "(", ")", ":", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "\n", "subjects", "=", "[", "'patient{}'", ".", "format", "(", "str", "(", "x", ")", ".", "zfill", "(", "3", ")", ")", "for", "x", "in", "range", "(", "1", ",", "151", ")", "]", "\n", "\n", "print", "(", "'There are {} subjects in total'", ".", "format", "(", "len", "(", "subjects", ")", ")", ")", "\n", "\n", "# For each case", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "print", "(", "'Processing {}'", ".", "format", "(", "subject", ")", ")", "\n", "\n", "# Define the paths", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "subject_original_2D_dir", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'original_2D'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "subject_original_2D_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "subject_original_2D_dir", ")", "\n", "\n", "", "sa_zip_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'{}_4d.nii.gz'", ".", "format", "(", "subject", ")", ")", "\n", "\n", "# If the short-axis image file exists, read the data and perform the conversion", "\n", "if", "os", ".", "path", ".", "isfile", "(", "sa_zip_file", ")", ":", "\n", "            ", "img", "=", "nib", ".", "load", "(", "sa_zip_file", ")", "\n", "data", "=", "img", ".", "get_data", "(", ")", "\n", "data_np", "=", "np", ".", "array", "(", "data", ")", "\n", "\n", "max_pixel_value", "=", "data_np", ".", "max", "(", ")", "\n", "\n", "if", "max_pixel_value", ">", "0", ":", "\n", "                ", "multiplier", "=", "255.0", "/", "max_pixel_value", "\n", "", "else", ":", "\n", "                ", "multiplier", "=", "1.0", "\n", "\n", "", "print", "(", "'max_pixel_value = {},  multiplier = {}'", ".", "format", "(", "max_pixel_value", ",", "multiplier", ")", ")", "\n", "\n", "rows", "=", "data", ".", "shape", "[", "0", "]", "\n", "columns", "=", "data", ".", "shape", "[", "1", "]", "\n", "slices", "=", "data", ".", "shape", "[", "2", "]", "\n", "times", "=", "data", ".", "shape", "[", "3", "]", "\n", "\n", "for", "t", "in", "range", "(", "times", ")", ":", "\n", "                ", "for", "s", "in", "range", "(", "slices", ")", ":", "\n", "                    ", "s_t_image_file", "=", "os", ".", "path", ".", "join", "(", "subject_original_2D_dir", ",", "'original_2D_{}_{}.png'", ".", "format", "(", "str", "(", "s", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "Image", ".", "fromarray", "(", "(", "np", ".", "rot90", "(", "data", "[", ":", ",", ":", ":", "-", "1", ",", "s", ",", "t", "]", ",", "1", ")", "*", "multiplier", ")", ".", "astype", "(", "'uint8'", ")", ")", ".", "save", "(", "s_t_image_file", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "print", "(", "'There is no SA image file for {}'", ".", "format", "(", "subject", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.processing.acdc_info.acdc_info": [[12, 87], ["open", "open.close", "os.path.join", "print", "data_dir.format", "os.path.join", "float", "int", "float", "math.sqrt", "os.path.join", "nibabel.load", "nib.load.get_data", "numpy.array", "open.write", "print", "data_dir.format", "os.path.join", "float", "int", "float", "math.sqrt", "os.path.join", "nibabel.load", "nib.load.get_data", "numpy.array", "open.write", "open", "s_file.readlines", "x.strip", "int", "int", "open", "s_file.readlines", "x.strip", "int", "int"], "function", ["None"], ["def", "acdc_info", "(", ")", ":", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "train_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "\n", "\n", "bsa_info", "=", "open", "(", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", ",", "'w'", ")", "\n", "\n", "for", "subject", "in", "train_subjects", ":", "\n", "        ", "print", "(", "subject", ")", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "subject_info_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'Info.cfg'", ")", "\n", "with", "open", "(", "subject_info_file", ")", "as", "s_file", ":", "\n", "            ", "subject_info", "=", "s_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "ED", "=", "int", "(", "subject_info", "[", "0", "]", "[", "4", ":", "]", ")", "-", "1", "\n", "ES", "=", "int", "(", "subject_info", "[", "1", "]", "[", "4", ":", "]", ")", "-", "1", "\n", "group", "=", "subject_info", "[", "2", "]", "[", "7", ":", "]", "\n", "height", "=", "float", "(", "subject_info", "[", "3", "]", "[", "8", ":", "]", ")", "\n", "num_frame", "=", "int", "(", "subject_info", "[", "4", "]", "[", "9", ":", "]", ")", "\n", "weight", "=", "float", "(", "subject_info", "[", "5", "]", "[", "8", ":", "]", ")", "\n", "\n", "bsa", "=", "math", ".", "sqrt", "(", "weight", "*", "height", "/", "3600", ")", "\n", "\n", "sa_zip_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'{}_4d.nii.gz'", ".", "format", "(", "subject", ")", ")", "\n", "img", "=", "nib", ".", "load", "(", "sa_zip_file", ")", "\n", "data", "=", "img", ".", "get_data", "(", ")", "\n", "data_np", "=", "np", ".", "array", "(", "data", ")", "\n", "slices", "=", "data", ".", "shape", "[", "2", "]", "\n", "\n", "\n", "written", "=", "'{} {} {} {} {} {} {} {} {}\\n'", ".", "format", "(", "subject", ",", "group", ",", "num_frame", ",", "ED", ",", "ES", ",", "slices", ",", "height", ",", "weight", ",", "bsa", ")", "\n", "\n", "\n", "bsa_info", ".", "write", "(", "written", ")", "\n", "\n", "\n", "", "for", "subject", "in", "test_subjects", ":", "\n", "        ", "print", "(", "subject", ")", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "subject_info_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'Info.cfg'", ")", "\n", "with", "open", "(", "subject_info_file", ")", "as", "s_file", ":", "\n", "            ", "subject_info", "=", "s_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "ED", "=", "int", "(", "subject_info", "[", "0", "]", "[", "4", ":", "]", ")", "-", "1", "\n", "ES", "=", "int", "(", "subject_info", "[", "1", "]", "[", "4", ":", "]", ")", "-", "1", "\n", "group", "=", "'TEST'", "\n", "height", "=", "float", "(", "subject_info", "[", "2", "]", "[", "8", ":", "]", ")", "\n", "num_frame", "=", "int", "(", "subject_info", "[", "3", "]", "[", "9", ":", "]", ")", "\n", "weight", "=", "float", "(", "subject_info", "[", "4", "]", "[", "8", ":", "]", ")", "\n", "\n", "bsa", "=", "math", ".", "sqrt", "(", "weight", "*", "height", "/", "3600", ")", "\n", "\n", "sa_zip_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'{}_4d.nii.gz'", ".", "format", "(", "subject", ")", ")", "\n", "img", "=", "nib", ".", "load", "(", "sa_zip_file", ")", "\n", "data", "=", "img", ".", "get_data", "(", ")", "\n", "data_np", "=", "np", ".", "array", "(", "data", ")", "\n", "slices", "=", "data", ".", "shape", "[", "2", "]", "\n", "\n", "\n", "written", "=", "'{} {} {} {} {} {} {} {} {}\\n'", ".", "format", "(", "subject", ",", "group", ",", "num_frame", ",", "ED", ",", "ES", ",", "slices", ",", "height", ",", "weight", ",", "bsa", ")", "\n", "\n", "\n", "bsa_info", ".", "write", "(", "written", ")", "\n", "\n", "", "bsa_info", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.module_roi_net.net_module": [[28, 187], ["helpers.handle_dim_ordering", "keras.layers.Input", "keras.models.Model", "len", "Exception", "keras.backend.image_dim_ordering", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.MaxPooling2D", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.UpSampling2D", "keras.layers.merge.Concatenate", "helpers.conv_bn_leakyrelu_repetition_block", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.merge.Add", "keras.layers.convolutional.UpSampling2D", "keras.layers.merge.Add", "keras.layers.Activation"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.handle_dim_ordering", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.helpers.conv_bn_leakyrelu_repetition_block"], ["def", "net_module", "(", "input_shape", ",", "num_outputs", ")", ":", "\n", "    ", "\"\"\"Builds a net architecture.\n    Args:\n        input_shape: The input shape in the form (nb_rows, nb_cols, nb_channels)\n        num_outputs: The number of outputs at final softmax layer\n        Returns:\n            The keras `Model`.\n    \"\"\"", "\n", "CHANNEL_AXIS", "=", "3", "\n", "handle_dim_ordering", "(", ")", "\n", "if", "len", "(", "input_shape", ")", "!=", "3", ":", "\n", "        ", "raise", "Exception", "(", "\"Input shape should be a tuple (nb_rows, nb_cols, nb_channels)\"", ")", "\n", "\n", "# Permute dimension order if necessary", "\n", "", "if", "K", ".", "image_dim_ordering", "(", ")", "!=", "'tf'", ":", "\n", "        ", "input_shape", "=", "(", "input_shape", "[", "2", "]", ",", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ")", "\n", "\n", "", "input", "=", "Input", "(", "shape", "=", "input_shape", ",", "name", "=", "\"input\"", ")", "\n", "\n", "base_channel", "=", "24", "\n", "\n", "\n", "\n", "\n", "block_conv_1", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"conv_block1\"", ")", "(", "input", ")", "\n", "\n", "\n", "block_pool_2", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block2\"", ")", "(", "block_conv_1", ")", "\n", "\n", "block_conv_2", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "2", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"conv_block2\"", ")", "(", "block_pool_2", ")", "\n", "\n", "\n", "block_pool_4", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block4\"", ")", "(", "block_conv_2", ")", "\n", "\n", "block_conv_4", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "4", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"conv_block4\"", ")", "(", "block_pool_4", ")", "\n", "\n", "\n", "block_pool_8", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block8\"", ")", "(", "block_conv_4", ")", "\n", "\n", "block_conv_8", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "8", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"conv_block8\"", ")", "(", "block_pool_8", ")", "\n", "\n", "\n", "block_pool_16", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block16\"", ")", "(", "block_conv_8", ")", "\n", "\n", "block_conv_16", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "16", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"conv_block16\"", ")", "(", "block_pool_16", ")", "\n", "\n", "\n", "block_pool_32", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "name", "=", "\"pool_block32\"", ")", "(", "block_conv_16", ")", "\n", "\n", "block_conv_32", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "32", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"conv_block32\"", ")", "(", "block_pool_32", ")", "\n", "\n", "\n", "\n", "\n", "block_up_16", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block16\"", ")", "(", "block_conv_32", ")", "\n", "\n", "block_concat_16", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat16\"", ")", "(", "[", "block_up_16", ",", "block_conv_16", "]", ")", "\n", "\n", "block_expan_conv_16", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "16", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"expan_conv_block16\"", ")", "(", "block_concat_16", ")", "\n", "\n", "\n", "\n", "block_up_8", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block8\"", ")", "(", "block_expan_conv_16", ")", "\n", "\n", "block_concat_8", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat8\"", ")", "(", "[", "block_up_8", ",", "block_conv_8", "]", ")", "\n", "\n", "block_expan_conv_8", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "8", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"expan_conv_block8\"", ")", "(", "block_concat_8", ")", "\n", "\n", "\n", "block_up_4", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block4\"", ")", "(", "block_expan_conv_8", ")", "\n", "\n", "block_concat_4", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat4\"", ")", "(", "[", "block_up_4", ",", "block_conv_4", "]", ")", "\n", "\n", "block_expan_conv_4", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "4", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"expan_conv_block4\"", ")", "(", "block_concat_4", ")", "\n", "\n", "\n", "block_up_2", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block2\"", ")", "(", "block_expan_conv_4", ")", "\n", "\n", "block_concat_2", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat2\"", ")", "(", "[", "block_up_2", ",", "block_conv_2", "]", ")", "\n", "\n", "block_expan_conv_2", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "2", "*", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"expan_conv_block2\"", ")", "(", "block_concat_2", ")", "\n", "\n", "\n", "block_up_1", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"up_block1\"", ")", "(", "block_expan_conv_2", ")", "\n", "\n", "block_concat_1", "=", "Concatenate", "(", "axis", "=", "CHANNEL_AXIS", ",", "name", "=", "\"concat1\"", ")", "(", "[", "block_up_1", ",", "block_conv_1", "]", ")", "\n", "\n", "block_expan_conv_1", "=", "conv_bn_leakyrelu_repetition_block", "(", "filters", "=", "base_channel", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "repetitions", "=", "2", ",", "first_layer_down_size", "=", "False", ",", "alpha", "=", "0.1", ",", "\n", "name", "=", "\"expan_conv_block1\"", ")", "(", "block_concat_1", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "block_seg_4", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block4\"", ")", "(", "block_expan_conv_4", ")", "\n", "\n", "block_seg_2", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block2\"", ")", "(", "block_expan_conv_2", ")", "\n", "\n", "block_seg_1", "=", "Conv2D", "(", "filters", "=", "num_outputs", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "\"same\"", ",", "data_format", "=", "None", ",", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "bias_initializer", "=", "\"zeros\"", ",", "\n", "kernel_regularizer", "=", "None", ",", "bias_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "bias_constraint", "=", "None", ",", "\n", "name", "=", "\"seg_block1\"", ")", "(", "block_expan_conv_1", ")", "\n", "\n", "block_seg_up_2", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"seg_up_block2\"", ")", "(", "block_seg_4", ")", "\n", "\n", "block_add_2", "=", "Add", "(", "name", "=", "\"add_block2\"", ")", "(", "[", "block_seg_up_2", ",", "block_seg_2", "]", ")", "\n", "\n", "block_seg_up_1", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "\"seg_up_block1\"", ")", "(", "block_add_2", ")", "\n", "\n", "prediction", "=", "Add", "(", "name", "=", "\"prediction\"", ")", "(", "[", "block_seg_up_1", ",", "block_seg_1", "]", ")", "\n", "\n", "\n", "\n", "output", "=", "Activation", "(", "\"sigmoid\"", ",", "name", "=", "\"output\"", ")", "(", "prediction", ")", "\n", "\n", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "output", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.crop_according_to_roi.determine_rectangle_roi": [[21, 35], ["PIL.Image.open", "Image.open.getbbox"], "function", ["None"], ["def", "determine_rectangle_roi", "(", "img_path", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "columns", ",", "rows", "=", "img", ".", "size", "\n", "roi_c_min", "=", "columns", "\n", "roi_c_max", "=", "-", "1", "\n", "roi_r_min", "=", "rows", "\n", "roi_r_max", "=", "-", "1", "\n", "box", "=", "img", ".", "getbbox", "(", ")", "\n", "if", "box", ":", "\n", "        ", "roi_r_min", "=", "box", "[", "0", "]", "\n", "roi_c_min", "=", "box", "[", "1", "]", "\n", "roi_r_max", "=", "box", "[", "2", "]", "-", "1", "\n", "roi_c_max", "=", "box", "[", "3", "]", "-", "1", "\n", "", "return", "[", "roi_c_min", ",", "roi_c_max", ",", "roi_r_min", ",", "roi_r_max", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.crop_according_to_roi.determine_rectangle_roi2": [[37, 59], ["PIL.Image.open", "numpy.array", "scipy.ndimage.label", "Image.fromarray.getbbox", "numpy.unique", "PIL.Image.fromarray", "numpy.where", "max"], "function", ["None"], ["", "def", "determine_rectangle_roi2", "(", "img_path", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "img_array", "=", "np", ".", "array", "(", "img", ")", "\n", "connected_components", ",", "num_connected_components", "=", "ndimage", ".", "label", "(", "img_array", ")", "\n", "if", "(", "num_connected_components", ">", "1", ")", ":", "\n", "        ", "unique", ",", "counts", "=", "np", ".", "unique", "(", "connected_components", ",", "return_counts", "=", "True", ")", "\n", "max_idx", "=", "np", ".", "where", "(", "counts", "==", "max", "(", "counts", "[", "1", ":", "]", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "single_component", "=", "connected_components", "*", "(", "connected_components", "==", "max_idx", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "single_component", ")", "\n", "\n", "", "columns", ",", "rows", "=", "img", ".", "size", "\n", "roi_c_min", "=", "columns", "\n", "roi_c_max", "=", "-", "1", "\n", "roi_r_min", "=", "rows", "\n", "roi_r_max", "=", "-", "1", "\n", "box", "=", "img", ".", "getbbox", "(", ")", "\n", "if", "box", ":", "\n", "        ", "roi_r_min", "=", "box", "[", "0", "]", "\n", "roi_c_min", "=", "box", "[", "1", "]", "\n", "roi_r_max", "=", "box", "[", "2", "]", "-", "1", "\n", "roi_c_max", "=", "box", "[", "3", "]", "-", "1", "\n", "", "return", "[", "roi_c_min", ",", "roi_c_max", ",", "roi_r_min", ",", "roi_r_max", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.crop_according_to_roi.change_array_values": [[61, 70], ["range", "range"], "function", ["None"], ["", "def", "change_array_values", "(", "array", ")", ":", "\n", "    ", "output", "=", "array", "\n", "for", "u", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "v", "in", "range", "(", "output", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "output", "[", "u", ",", "v", "]", "==", "1", ":", "\n", "                ", "output", "[", "u", ",", "v", "]", "=", "3", "\n", "", "elif", "output", "[", "u", ",", "v", "]", "==", "3", ":", "\n", "                ", "output", "[", "u", ",", "v", "]", "=", "1", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.crop_according_to_roi.crop_according_to_roi": [[72, 238], ["os.path.join", "print", "open", "in_file.readlines", "x.strip", "print", "data_dir.format", "os.path.join", "os.path.join", "int", "int", "int", "int", "multiprocessing.pool.ThreadPool", "functools.partial", "multiprocessing.pool.ThreadPool.map", "min", "max", "min", "max", "multiprocessing.pool.ThreadPool.close", "multiprocessing.pool.ThreadPool.join", "max", "print", "int", "os.path.join", "nibabel.load", "nib.load.get_data", "max", "min", "max", "min", "numpy.zeros", "os.path.join", "nibabel.save", "nibabel.load().get_data", "nib.load().get_data.max", "print", "range", "os.path.exists", "os.makedirs", "range", "round", "nibabel.Nifti1Image", "range", "range", "y.split", "float", "int", "int", "os.path.join", "img_path_list.append", "numpy.eye", "os.path.join", "nibabel.load", "nib.load.get_data", "numpy.zeros", "os.path.join", "nibabel.save", "nibabel.load", "os.path.join", "PIL.Image.fromarray().save", "round", "round", "nibabel.Nifti1Image", "os.path.join", "nibabel.load().get_data", "os.path.join", "PIL.Image.fromarray().save", "y.split", "str().zfill", "str().zfill", "str().zfill", "str().zfill", "numpy.eye", "str().zfill", "str().zfill", "PIL.Image.fromarray", "str().zfill", "nibabel.load", "str().zfill", "str().zfill", "PIL.Image.fromarray", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.rot90", "numpy.rot90", "crop_according_to_roi.change_array_values"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.crop_according_to_roi.change_array_values"], ["", "def", "crop_according_to_roi", "(", ")", ":", "\n", "# The ratio that determines the width of the margin", "\n", "    ", "pixel_margin_ratio", "=", "0.3", "\n", "\n", "# If for a case there is non-zero pixels on the border of ROI, the case is stored in", "\n", "# this list for further examination. This list is eventually empty for UK Biobank cases.", "\n", "border_problem_subject", "=", "[", "]", "\n", "\n", "\n", "\n", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "train_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "\n", "\n", "all_subjects", "=", "train_subjects", "+", "test_subjects", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "predict_img_list", "=", "[", "]", "\n", "predict_gt_list", "=", "[", "]", "\n", "\n", "\n", "for", "subject", "in", "all_subjects", ":", "\n", "        ", "print", "(", "subject", ")", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "subject_mask_original_dir", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'mask_original_2D'", ")", "\n", "crop_2D_path", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_2D'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "crop_2D_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "crop_2D_path", ")", "\n", "\n", "\n", "", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "\n", "used_instants_roi", "=", "[", "ed_instant", "]", "\n", "img_path_list", "=", "[", "]", "\n", "for", "t", "in", "used_instants_roi", ":", "\n", "            ", "for", "s", "in", "range", "(", "int", "(", "round", "(", "slices", "*", "0.1", "+", "0.001", ")", ")", ",", "int", "(", "round", "(", "slices", "*", "0.5", "+", "0.001", ")", ")", ")", ":", "\n", "                ", "s_t_mask_image_file", "=", "os", ".", "path", ".", "join", "(", "subject_mask_original_dir", ",", "'mask_original_2D_{}_{}.png'", ".", "format", "(", "str", "(", "s", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "img_path_list", ".", "append", "(", "s_t_mask_image_file", ")", "\n", "\n", "\n", "\n", "# Multithread", "\n", "", "", "pool", "=", "multiprocessing", ".", "pool", ".", "ThreadPool", "(", ")", "\n", "function_partial", "=", "partial", "(", "determine_rectangle_roi2", ")", "\n", "roi_results", "=", "pool", ".", "map", "(", "function_partial", ",", "(", "img_path", "for", "img_path", "in", "img_path_list", ")", ")", "\n", "roi_c_min", "=", "min", "(", "[", "res", "[", "0", "]", "for", "res", "in", "roi_results", "]", ")", "\n", "roi_c_max", "=", "max", "(", "[", "res", "[", "1", "]", "for", "res", "in", "roi_results", "]", ")", "\n", "roi_r_min", "=", "min", "(", "[", "res", "[", "2", "]", "for", "res", "in", "roi_results", "]", ")", "\n", "roi_r_max", "=", "max", "(", "[", "res", "[", "3", "]", "for", "res", "in", "roi_results", "]", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "# ROI size (without adding margin)", "\n", "roi_c_length", "=", "roi_c_max", "-", "roi_c_min", "+", "1", "\n", "roi_r_length", "=", "roi_r_max", "-", "roi_r_min", "+", "1", "\n", "roi_length", "=", "max", "(", "roi_c_length", ",", "roi_r_length", ")", "\n", "print", "(", "'roi_length = {}'", ".", "format", "(", "roi_length", ")", ")", "\n", "\n", "written", "=", "'{0} {1} {2} {3} {4} {5}\\n'", ".", "format", "(", "subject", ",", "roi_c_min", ",", "roi_c_max", ",", "roi_r_min", ",", "roi_r_max", ",", "roi_length", ")", "\n", "\n", "\n", "# The size of margin, determined by the ratio we defined above", "\n", "pixel_margin", "=", "int", "(", "round", "(", "pixel_margin_ratio", "*", "roi_length", "+", "0.001", ")", ")", "\n", "\n", "crop_c_min", "=", "(", "(", "roi_c_min", "+", "roi_c_max", ")", "//", "2", ")", "-", "(", "roi_length", "//", "2", ")", "-", "pixel_margin", "\n", "crop_c_max", "=", "crop_c_min", "+", "pixel_margin", "+", "roi_length", "-", "1", "+", "pixel_margin", "\n", "crop_r_min", "=", "(", "(", "roi_r_min", "+", "roi_r_max", ")", "//", "2", ")", "-", "(", "roi_length", "//", "2", ")", "-", "pixel_margin", "\n", "crop_r_max", "=", "crop_r_min", "+", "pixel_margin", "+", "roi_length", "-", "1", "+", "pixel_margin", "\n", "\n", "\n", "# Crop the original images", "\n", "image_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'{}_4d.nii.gz'", ".", "format", "(", "subject", ")", ")", "\n", "image_load", "=", "nib", ".", "load", "(", "image_file", ")", "\n", "image_data", "=", "image_load", ".", "get_data", "(", ")", "\n", "original_r_min", "=", "max", "(", "0", ",", "crop_r_min", ")", "\n", "original_r_max", "=", "min", "(", "image_data", ".", "shape", "[", "0", "]", "-", "1", ",", "crop_r_max", ")", "\n", "original_c_min", "=", "max", "(", "0", ",", "crop_c_min", ")", "\n", "original_c_max", "=", "min", "(", "image_data", ".", "shape", "[", "1", "]", "-", "1", ",", "crop_c_max", ")", "\n", "crop_image_data", "=", "np", ".", "zeros", "(", "(", "roi_length", "+", "2", "*", "pixel_margin", ",", "roi_length", "+", "2", "*", "pixel_margin", ",", "\n", "image_data", ".", "shape", "[", "2", "]", ",", "image_data", ".", "shape", "[", "3", "]", ")", ")", "\n", "crop_image_data", "[", "(", "original_r_min", "-", "crop_r_min", ")", ":", "(", "original_r_max", "-", "crop_r_min", "+", "1", ")", ",", "\n", "(", "original_c_min", "-", "crop_c_min", ")", ":", "(", "original_c_max", "-", "crop_c_min", "+", "1", ")", ",", "\n", ":", ",", "\n", ":", "]", "=", "image_data", "[", "original_r_min", ":", "(", "original_r_max", "+", "1", ")", ",", "\n", "original_c_min", ":", "(", "original_c_max", "+", "1", ")", ",", "\n", ":", ",", "\n", ":", "]", "\n", "crop_image_data", "=", "crop_image_data", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "crop_image_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'crop_{}_4d.nii.gz'", ".", "format", "(", "subject", ")", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "crop_image_data", ",", "np", ".", "eye", "(", "4", ")", ")", ",", "crop_image_file", ")", "\n", "\n", "# Crop the original labels", "\n", "if", "subject", "in", "train_subjects", ":", "\n", "            ", "for", "i", "in", "[", "ed_instant", "+", "1", ",", "es_instant", "+", "1", "]", ":", "\n", "                ", "label_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'{}_frame{}_gt.nii.gz'", ".", "format", "(", "subject", ",", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "label_load", "=", "nib", ".", "load", "(", "label_file", ")", "\n", "label_data", "=", "label_load", ".", "get_data", "(", ")", "\n", "crop_label_data", "=", "np", ".", "zeros", "(", "(", "roi_length", "+", "2", "*", "pixel_margin", ",", "\n", "roi_length", "+", "2", "*", "pixel_margin", ",", "\n", "image_data", ".", "shape", "[", "2", "]", ")", ")", "\n", "crop_label_data", "[", "(", "original_r_min", "-", "crop_r_min", ")", ":", "(", "original_r_max", "-", "crop_r_min", "+", "1", ")", ",", "\n", "(", "original_c_min", "-", "crop_c_min", ")", ":", "(", "original_c_max", "-", "crop_c_min", "+", "1", ")", ",", "\n", ":", "]", "=", "label_data", "[", "original_r_min", ":", "(", "original_r_max", "+", "1", ")", ",", "\n", "original_c_min", ":", "(", "original_c_max", "+", "1", ")", ",", "\n", ":", "]", "\n", "crop_label_data", "=", "crop_label_data", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "crop_label_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "\n", "'crop_{}_frame{}_gt.nii.gz'", ".", "format", "(", "subject", ",", "str", "(", "i", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "crop_label_data", ",", "np", ".", "eye", "(", "4", ")", ")", ",", "crop_label_file", ")", "\n", "\n", "\n", "\n", "# Save cropped 2D images", "\n", "", "", "crop_image_data", "=", "nib", ".", "load", "(", "crop_image_file", ")", ".", "get_data", "(", ")", "\n", "\n", "max_pixel_value", "=", "crop_image_data", ".", "max", "(", ")", "\n", "\n", "if", "max_pixel_value", ">", "0", ":", "\n", "            ", "multiplier", "=", "255.0", "/", "max_pixel_value", "\n", "", "else", ":", "\n", "            ", "multiplier", "=", "1.0", "\n", "\n", "", "print", "(", "'max_pixel_value = {}, multiplier = {}'", ".", "format", "(", "max_pixel_value", ",", "multiplier", ")", ")", "\n", "\n", "for", "s", "in", "range", "(", "slices", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "instants", ")", ":", "\n", "                ", "s_t_image_file", "=", "os", ".", "path", ".", "join", "(", "crop_2D_path", ",", "'crop_2D_{}_{}.png'", ".", "format", "(", "str", "(", "s", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "Image", ".", "fromarray", "(", "(", "np", ".", "rot90", "(", "crop_image_data", "[", ":", ",", ":", ":", "-", "1", ",", "s", ",", "t", "]", ",", "3", ")", "*", "multiplier", ")", ".", "astype", "(", "'uint8'", ")", ")", ".", "save", "(", "s_t_image_file", ")", "\n", "\n", "\n", "# Save cropped 2D labels", "\n", "", "", "if", "subject", "in", "train_subjects", ":", "\n", "            ", "for", "s", "in", "range", "(", "slices", ")", ":", "\n", "                ", "for", "t", "in", "[", "ed_instant", ",", "es_instant", "]", ":", "\n", "                    ", "crop_label_file", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "\n", "'crop_{}_frame{}_gt.nii.gz'", ".", "format", "(", "subject", ",", "str", "(", "t", "+", "1", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "crop_label_data", "=", "nib", ".", "load", "(", "crop_label_file", ")", ".", "get_data", "(", ")", "\n", "s_t_label_file", "=", "os", ".", "path", ".", "join", "(", "crop_2D_path", ",", "'crop_2D_gt_{}_{}.png'", ".", "format", "(", "str", "(", "s", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "Image", ".", "fromarray", "(", "(", "np", ".", "rot90", "(", "change_array_values", "(", "crop_label_data", "[", ":", ",", ":", ":", "-", "1", ",", "s", "]", ")", ",", "3", ")", "*", "50", ")", ".", "astype", "(", "'uint8'", ")", ")", ".", "save", "(", "s_t_label_file", ")", "\n", "\n", "\n", "\n", "\n", "", "", "", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.predict_roi_net.predict_roi_net": [[37, 157], ["module_roi_net.net_module", "module_roi_net.net_module.load_weights", "module_roi_net.net_module.compile", "data_roi_predict.data_roi_predict", "sorted", "sorted", "len", "dict", "image2.ImageDataGenerator2", "image2.ImageDataGenerator2.fit", "image2.ImageDataGenerator2.flow_from_path_list", "print", "print", "range", "numpy.zeros", "int", "print", "min", "next", "module_roi_net.net_module.predict", "numpy.where", "range", "os.path.join", "keras.optimizers.Adam", "keras.backend.image_data_format", "int", "math.ceil", "len", "max", "numpy.reshape", "numpy.reshape", "img_path.replace", "img_path.replace.replace", "numpy.savetxt", "image2.array_to_img", "image2.array_to_img.save", "math.ceil", "PIL.Image.open", "scipy.misc.imresize", "str().zfill", "float", "float", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.module_roi_net.net_module", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.data_roi_predict.data_roi_predict", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.flow_from_path_list", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.SimpleListIterator.next", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.array_to_img"], ["def", "predict_roi_net", "(", ")", ":", "\n", "\n", "    ", "code_path", "=", "config", ".", "code_dir", "\n", "\n", "initial_lr", "=", "config", ".", "roi_net_initial_lr", "\n", "batch_size", "=", "config", ".", "roi_net_batch_size", "\n", "input_img_size", "=", "config", ".", "roi_net_input_img_size", "\n", "\n", "epochs", "=", "config", ".", "roi_net_epochs", "\n", "\n", "###########", "\n", "# The model", "\n", "model", "=", "net_module", "(", "input_shape", "=", "(", "input_img_size", ",", "input_img_size", ",", "1", ")", ",", "num_outputs", "=", "1", ")", "\n", "\n", "model", ".", "load_weights", "(", "filepath", "=", "os", ".", "path", ".", "join", "(", "code_path", ",", "'ROI'", ",", "'model_roi_net_epoch{}.h5'", ".", "format", "(", "str", "(", "epochs", ")", ".", "zfill", "(", "3", ")", ")", ")", ")", "\n", "\n", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "lr", "=", "initial_lr", ")", ",", "loss", "=", "dice_coef2_loss", ",", "\n", "metrics", "=", "[", "dice_coef2", "]", ")", "\n", "\n", "######", "\n", "# Data", "\n", "predict_img_list", ",", "predict_gt_list", "=", "data_roi_predict", "(", ")", "\n", "\n", "\n", "predict_img_list", "=", "sorted", "(", "predict_img_list", ")", "\n", "predict_gt_list", "=", "sorted", "(", "predict_gt_list", ")", "\n", "\n", "predict_sample", "=", "len", "(", "predict_img_list", ")", "\n", "\n", "# we create two instances with the same arguments", "\n", "data_gen_args", "=", "dict", "(", "featurewise_center", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "\n", "featurewise_std_normalization", "=", "False", ",", "\n", "samplewise_std_normalization", "=", "False", ",", "\n", "zca_whitening", "=", "False", ",", "\n", "zca_epsilon", "=", "1e-6", ",", "\n", "rotation_range", "=", "0.0", ",", "\n", "width_shift_range", "=", "0.0", ",", "\n", "height_shift_range", "=", "0.0", ",", "\n", "shear_range", "=", "0.", ",", "\n", "zoom_range", "=", "0.0", ",", "\n", "channel_shift_range", "=", "0.", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "cval", "=", "0.", ",", "\n", "horizontal_flip", "=", "False", ",", "\n", "vertical_flip", "=", "False", ",", "\n", "rescale", "=", "None", ",", "\n", "preprocessing_function", "=", "mean_variance_normalization5", ",", "\n", "data_format", "=", "K", ".", "image_data_format", "(", ")", ")", "\n", "\n", "\n", "###########################", "\n", "# Generators for predicting", "\n", "image_datagen", "=", "ImageDataGenerator2", "(", "**", "data_gen_args", ")", "\n", "\n", "seed", "=", "1", "\n", "image_datagen", ".", "fit", "(", "np", ".", "zeros", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "augment", "=", "False", ",", "rounds", "=", "0", ",", "seed", "=", "seed", ")", "\n", "\n", "image_generator", "=", "image_datagen", ".", "flow_from_path_list", "(", "\n", "path_list", "=", "predict_img_list", ",", "\n", "target_size", "=", "(", "input_img_size", ",", "input_img_size", ")", ",", "\n", "pad_to_square", "=", "True", ",", "\n", "resize_mode", "=", "'nearest'", ",", "\n", "histogram_based_preprocessing", "=", "True", ",", "\n", "clahe", "=", "True", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "class_list", "=", "None", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "seed", ",", "\n", "save_to_dir", "=", "None", ",", "\n", "save_prefix", "=", "''", ",", "\n", "save_format", "=", "'png'", ",", "\n", "save_period", "=", "100", ",", "\n", "follow_links", "=", "False", ")", "\n", "\n", "\n", "print", "(", "'Start prediction'", ")", "\n", "print", "(", "'There will be {} batches with batch-size {}'", ".", "format", "(", "int", "(", "math", ".", "ceil", "(", "float", "(", "predict_sample", ")", "/", "batch_size", ")", ")", ",", "batch_size", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "math", ".", "ceil", "(", "float", "(", "predict_sample", ")", "/", "batch_size", ")", ")", ")", ":", "\n", "        ", "print", "(", "'batch {}'", ".", "format", "(", "i", ")", ")", "\n", "start_idx", "=", "i", "*", "batch_size", "\n", "end_idx", "=", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "predict_sample", ")", "\n", "img_list_batch", "=", "predict_img_list", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "batch_img", "=", "next", "(", "image_generator", ")", "\n", "\n", "predict_masks", "=", "model", ".", "predict", "(", "batch_img", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "verbose", "=", "0", ")", "\n", "binarized_predict_masks", "=", "np", ".", "where", "(", "predict_masks", ">=", "0.5", ",", "1.0", ",", "0.0", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "img_list_batch", ")", ")", ":", "\n", "            ", "img_path", "=", "img_list_batch", "[", "j", "]", "\n", "#print(img_path)", "\n", "img_size", "=", "pil_image", ".", "open", "(", "img_path", ")", ".", "size", "\n", "h", "=", "img_size", "[", "0", "]", "\n", "w", "=", "img_size", "[", "1", "]", "\n", "size", "=", "max", "(", "h", ",", "w", ")", "\n", "\n", "# reshape and crop the predicted mask to the original size", "\n", "mask", "=", "np", ".", "reshape", "(", "binarized_predict_masks", "[", "j", "]", ",", "newshape", "=", "(", "input_img_size", ",", "input_img_size", ")", ")", "\n", "resized_mask", "=", "scipy", ".", "misc", ".", "imresize", "(", "mask", ",", "size", "=", "(", "size", ",", "size", ")", ",", "interp", "=", "'nearest'", ")", "/", "255.0", "\n", "cropped_resized_mask", "=", "resized_mask", "[", "(", "(", "size", "-", "w", ")", "//", "2", ")", ":", "(", "(", "size", "-", "w", ")", "//", "2", "+", "w", ")", ",", "\n", "(", "(", "size", "-", "h", ")", "//", "2", ")", ":", "(", "(", "size", "-", "h", ")", "//", "2", "+", "h", ")", "]", "\n", "cropped_resized_mask", "=", "np", ".", "reshape", "(", "cropped_resized_mask", ",", "newshape", "=", "(", "w", ",", "h", ",", "1", ")", ")", "\n", "\n", "predicted_mask_path", "=", "img_path", ".", "replace", "(", "'original_2D'", ",", "'mask_original_2D'", ",", "2", ")", "\n", "\n", "# save txt file", "\n", "predicted_mask_txt_path", "=", "predicted_mask_path", ".", "replace", "(", "'.png'", ",", "'.txt'", ",", "1", ")", "\n", "np", ".", "savetxt", "(", "predicted_mask_txt_path", ",", "cropped_resized_mask", ",", "fmt", "=", "'%.6f'", ")", "\n", "\n", "# save image", "\n", "cropped_resized_mask_img", "=", "array_to_img", "(", "cropped_resized_mask", ",", "\n", "data_format", "=", "None", ",", "\n", "scale", "=", "True", ")", "\n", "cropped_resized_mask_img", ".", "save", "(", "predicted_mask_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.ROI.data_roi_predict.data_roi_predict": [[10, 63], ["os.path.join", "print", "open", "in_file.readlines", "x.strip", "data_dir.format", "os.path.join", "int", "int", "int", "int", "os.path.join", "enumerate", "str().zfill", "range", "os.path.exists", "os.makedirs", "range", "len", "y.split", "float", "int", "int", "os.path.join", "predict_img_list.append", "predict_gt_list.append", "str", "round", "round", "y.split", "str().zfill", "str().zfill", "str", "str"], "function", ["None"], ["def", "data_roi_predict", "(", ")", ":", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "\n", "\n", "predict_img_list", "=", "[", "]", "\n", "predict_gt_list", "=", "[", "]", "\n", "\n", "all_subjects", "=", "[", "'patient{}'", ".", "format", "(", "str", "(", "x", ")", ".", "zfill", "(", "3", ")", ")", "for", "x", "in", "range", "(", "1", ",", "151", ")", "]", "\n", "for", "subject", "in", "all_subjects", ":", "\n", "        ", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "subject_predict_dir", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'mask_original_2D'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "subject_predict_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "subject_predict_dir", ")", "\n", "#subject_predict_file = os.path.join(subject_predict_dir, 'mask_original_2D_{}_{}.png')", "\n", "\n", "\n", "\n", "", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "\n", "\n", "original_2D_path", "=", "os", ".", "path", ".", "join", "(", "subject_dir", ",", "'original_2D'", ")", "\n", "\n", "# Prediction on the ED stacks only", "\n", "used_instants", "=", "[", "ed_instant", "]", "\n", "\n", "for", "idx", ",", "t", "in", "enumerate", "(", "used_instants", ")", ":", "\n", "            ", "for", "s", "in", "range", "(", "int", "(", "round", "(", "slices", "*", "0.1", "+", "0.001", ")", ")", ",", "int", "(", "round", "(", "slices", "*", "0.5", "+", "0.001", ")", ")", ")", ":", "\n", "                ", "s_t_image_file", "=", "os", ".", "path", ".", "join", "(", "original_2D_path", ",", "'original_2D_{}_{}.png'", ".", "format", "(", "str", "(", "s", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "t", ")", ".", "zfill", "(", "2", ")", ")", ")", "\n", "# The adapted ground-truth", "\n", "s_t_image_gt_file", "=", "''", "\n", "\n", "predict_img_list", ".", "append", "(", "s_t_image_file", ")", "\n", "predict_gt_list", ".", "append", "(", "s_t_image_gt_file", ")", "\n", "\n", "\n", "", "", "", "print", "(", "'predict_image_count = {}'", ".", "format", "(", "len", "(", "predict_img_list", ")", ")", ")", "\n", "\n", "return", "predict_img_list", ",", "predict_gt_list", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.classification.data_classification.data_classification": [[10, 211], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "in_file.readlines", "x.strip", "open", "p_file.readlines", "x.strip", "open", "b_file.readlines", "x.strip", "open", "v_file.readlines", "x.strip", "open", "t_file.readlines", "x.strip", "open", "m_file.readlines", "x.strip", "int", "int", "int", "int", "int", "int", "int", "data_dir.format", "range", "list_subject_idx.append", "list_lv_volume.append", "list_rv_volume.append", "list_lv_ratio.append", "list_rv_ratio.append", "list_lvmrv_ratio.append", "list_lvmlv_ratio.append", "list_lvmlv_mass.append", "list_thickness.append", "list_thickness_diff.append", "list_asyn_radius.append", "list_asyn_thickness.append", "list_gt.append", "y.split", "float", "float", "int", "float", "float", "float", "int", "int", "enumerate", "print", "y.split", "y.split", "y.split", "y.split", "y.split", "round", "round", "enumerate", "y.split", "y.split", "y.split", "y.split", "y.split", "y.split"], "function", ["None"], ["def", "data_classification", "(", "mode", "=", "'all'", ",", "fold", "=", "1", ",", "data_class_num", "=", "5", ",", "normalization", "=", "True", ")", ":", "\n", "\n", "    ", "data_dir", "=", "config", ".", "acdc_data_dir", "\n", "code_dir", "=", "config", ".", "code_dir", "\n", "\n", "dilated_subjects", "=", "config", ".", "acdc_dilated_subjects", "\n", "hypertrophic_subjects", "=", "config", ".", "acdc_hypertrophic_subjects", "\n", "infarct_subjects", "=", "config", ".", "acdc_infarct_subjects", "\n", "normal_subjects", "=", "config", ".", "acdc_normal_subjects", "\n", "rv_subjects", "=", "config", ".", "acdc_rv_subjects", "\n", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "\n", "if", "data_class_num", "==", "2", ":", "\n", "        ", "all_subjects", "=", "infarct_subjects", "+", "normal_subjects", "\n", "", "elif", "data_class_num", "==", "3", ":", "\n", "        ", "all_subjects", "=", "dilated_subjects", "+", "infarct_subjects", "+", "normal_subjects", "\n", "", "elif", "data_class_num", "==", "4", ":", "\n", "        ", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "\n", "", "elif", "data_class_num", "==", "5", ":", "\n", "        ", "all_subjects", "=", "dilated_subjects", "+", "hypertrophic_subjects", "+", "infarct_subjects", "+", "normal_subjects", "+", "rv_subjects", "\n", "\n", "\n", "", "if", "mode", "==", "'all'", ":", "\n", "        ", "subjects", "=", "all_subjects", "\n", "", "elif", "mode", "==", "'train'", ":", "\n", "        ", "subjects", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "all_subjects", ")", "if", "(", "i", "%", "5", ")", "!=", "(", "fold", "%", "5", ")", "]", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "        ", "subjects", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "all_subjects", ")", "if", "(", "i", "%", "5", ")", "==", "(", "fold", "%", "5", ")", "]", "\n", "", "elif", "mode", "==", "'predict'", ":", "\n", "        ", "subjects", "=", "test_subjects", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect mode'", ")", "\n", "\n", "#print(subjects)", "\n", "\n", "", "excluded_slice_ratio", "=", "config", ".", "excluded_slice_ratio", "\n", "\n", "seq_instants", "=", "config", ".", "acdc_seq_instants", "\n", "\n", "zfill_num", "=", "2", "\n", "\n", "\n", "\n", "info_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_info.txt'", ")", "\n", "\n", "with", "open", "(", "info_file", ")", "as", "in_file", ":", "\n", "        ", "subject_info", "=", "in_file", ".", "readlines", "(", ")", "\n", "\n", "", "subject_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "subject_info", "]", "\n", "subject_info", "=", "[", "y", ".", "split", "(", ")", "[", "0", ":", "2", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "2", ":", "]", "]", "for", "y", "in", "subject_info", "]", "\n", "\n", "\n", "pixel_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_pixel_size.txt'", ")", "\n", "\n", "with", "open", "(", "pixel_file", ")", "as", "p_file", ":", "\n", "        ", "pixel_size_info", "=", "p_file", ".", "readlines", "(", ")", "\n", "\n", "", "pixel_size_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "pixel_size_info", "]", "\n", "pixel_size_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "pixel_size_info", "]", "\n", "\n", "\n", "base_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_base.txt'", ")", "\n", "\n", "with", "open", "(", "base_file", ")", "as", "b_file", ":", "\n", "        ", "base_info", "=", "b_file", ".", "readlines", "(", ")", "\n", "\n", "", "base_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "base_info", "]", "\n", "base_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "int", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "base_info", "]", "\n", "\n", "\n", "volume_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_volume.txt'", ")", "\n", "\n", "with", "open", "(", "volume_file", ")", "as", "v_file", ":", "\n", "        ", "volume_info", "=", "v_file", ".", "readlines", "(", ")", "\n", "\n", "", "volume_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "volume_info", "]", "\n", "volume_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "volume_info", "]", "\n", "\n", "\n", "thickness_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_thickness.txt'", ")", "\n", "\n", "with", "open", "(", "thickness_file", ")", "as", "t_file", ":", "\n", "        ", "thickness_info", "=", "t_file", ".", "readlines", "(", ")", "\n", "\n", "", "thickness_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "thickness_info", "]", "\n", "thickness_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "thickness_info", "]", "\n", "\n", "\n", "motion_file", "=", "os", ".", "path", ".", "join", "(", "code_dir", ",", "'acdc_info'", ",", "'acdc_motion_index.txt'", ")", "\n", "\n", "with", "open", "(", "motion_file", ")", "as", "m_file", ":", "\n", "        ", "motion_info", "=", "m_file", ".", "readlines", "(", ")", "\n", "\n", "", "motion_info", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "motion_info", "]", "\n", "motion_info", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "motion_info", "]", "\n", "\n", "\n", "\n", "\n", "#print('There will be {} used subjects'.format(len(subjects)) ) ", "\n", "\n", "list_subject_idx", "=", "[", "]", "\n", "list_lv_volume", "=", "[", "]", "\n", "list_rv_volume", "=", "[", "]", "\n", "list_lv_ratio", "=", "[", "]", "\n", "list_rv_ratio", "=", "[", "]", "\n", "list_lvmrv_ratio", "=", "[", "]", "\n", "list_lvmlv_ratio", "=", "[", "]", "\n", "list_lvmlv_mass", "=", "[", "]", "\n", "list_thickness", "=", "[", "]", "\n", "list_thickness_diff", "=", "[", "]", "\n", "list_asyn_radius", "=", "[", "]", "\n", "list_asyn_thickness", "=", "[", "]", "\n", "list_gt", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "subject", "in", "subjects", ":", "\n", "        ", "subject_idx", "=", "int", "(", "subject", "[", "-", "3", ":", "]", ")", "\n", "instants", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "slices", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", ")", "\n", "base_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", ")", "\n", "apex_slice", "=", "int", "(", "[", "x", "for", "x", "in", "base_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", ")", "\n", "ed_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", ")", "\n", "es_instant", "=", "int", "(", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", ")", "\n", "bsa", "=", "[", "x", "for", "x", "in", "subject_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "8", "]", "\n", "pixel_size", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", "\n", "slice_thickness", "=", "[", "x", "for", "x", "in", "pixel_size_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", "\n", "\n", "subject_dir", "=", "data_dir", ".", "format", "(", "subject", ")", "\n", "folder", "=", "subject_dir", "+", "'/predict_2D/'", "\n", "\n", "slice_range", "=", "range", "(", "base_slice", "+", "int", "(", "round", "(", "(", "apex_slice", "+", "1", "-", "base_slice", ")", "*", "excluded_slice_ratio", ")", ")", ",", "apex_slice", "+", "1", "-", "int", "(", "round", "(", "(", "apex_slice", "+", "1", "-", "base_slice", ")", "*", "2", "*", "excluded_slice_ratio", ")", ")", ")", "\n", "\n", "normalize_term", "=", "pixel_size", "/", "(", "bsa", "**", "(", "1.0", "/", "2", ")", ")", "\n", "\n", "lv_volume", "=", "[", "x", "for", "x", "in", "volume_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", "\n", "rv_volume", "=", "[", "x", "for", "x", "in", "volume_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", "\n", "lvm_volume", "=", "[", "x", "for", "x", "in", "volume_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", "\n", "lv_ratio", "=", "[", "x", "for", "x", "in", "volume_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "4", "]", "\n", "rv_ratio", "=", "[", "x", "for", "x", "in", "volume_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "5", "]", "\n", "lvm_ratio", "=", "[", "x", "for", "x", "in", "volume_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "6", "]", "\n", "lvmrv_ratio", "=", "[", "x", "for", "x", "in", "volume_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "8", "]", "\n", "lvmlv_ratio", "=", "[", "x", "for", "x", "in", "volume_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "9", "]", "\n", "thickness", "=", "[", "x", "for", "x", "in", "thickness_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", "\n", "es_thickness", "=", "[", "x", "for", "x", "in", "thickness_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", "\n", "\n", "if", "not", "normalization", ":", "\n", "            ", "lv_volume", "*=", "bsa", "\n", "rv_volume", "*=", "bsa", "\n", "lvm_volume", "*=", "bsa", "\n", "\n", "", "lvmlv_mass", "=", "1.06", "*", "(", "lv_volume", "+", "lvm_volume", ")", "\n", "\n", "\n", "lv_volume_es", "=", "(", "1.0", "-", "lv_ratio", ")", "*", "lv_volume", "\n", "rv_volume_es", "=", "(", "1.0", "-", "rv_ratio", ")", "*", "rv_volume", "\n", "lvm_volume_es", "=", "lvm_ratio", "*", "lvm_volume", "\n", "lvmlv_ratio_es", "=", "lvm_volume_es", "/", "lv_volume_es", "\n", "lvmrv_ratio_es", "=", "rv_volume_es", "/", "(", "lv_volume_es", "+", "lvm_volume_es", ")", "\n", "\n", "\n", "\n", "asyn_radius", "=", "[", "x", "for", "x", "in", "motion_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", "\n", "asyn_thickness", "=", "[", "x", "for", "x", "in", "motion_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "2", "]", "\n", "thickness_diff", "=", "[", "x", "for", "x", "in", "motion_info", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "3", "]", "\n", "\n", "\n", "if", "subject", "in", "dilated_subjects", ":", "\n", "            ", "gt", "=", "0", "\n", "", "elif", "subject", "in", "hypertrophic_subjects", ":", "\n", "            ", "gt", "=", "1", "\n", "", "elif", "subject", "in", "infarct_subjects", ":", "\n", "            ", "gt", "=", "2", "\n", "", "elif", "subject", "in", "normal_subjects", ":", "\n", "            ", "gt", "=", "3", "\n", "", "elif", "subject", "in", "rv_subjects", ":", "\n", "            ", "gt", "=", "4", "\n", "", "elif", "subject", "in", "test_subjects", ":", "\n", "            ", "gt", "=", "-", "1", "\n", "\n", "\n", "\n", "\n", "", "list_subject_idx", ".", "append", "(", "subject_idx", ")", "\n", "list_lv_volume", ".", "append", "(", "lv_volume_es", ")", "\n", "list_rv_volume", ".", "append", "(", "rv_volume", ")", "\n", "list_lv_ratio", ".", "append", "(", "lv_ratio", ")", "\n", "list_rv_ratio", ".", "append", "(", "rv_ratio", ")", "\n", "list_lvmrv_ratio", ".", "append", "(", "lvmrv_ratio", ")", "\n", "list_lvmlv_ratio", ".", "append", "(", "lvmlv_ratio", ")", "\n", "list_lvmlv_mass", ".", "append", "(", "lvmlv_mass", ")", "\n", "list_thickness", ".", "append", "(", "thickness", ")", "\n", "list_thickness_diff", ".", "append", "(", "thickness_diff", ")", "\n", "list_asyn_radius", ".", "append", "(", "asyn_radius", ")", "\n", "list_asyn_thickness", ".", "append", "(", "asyn_thickness", ")", "\n", "list_gt", ".", "append", "(", "gt", ")", "\n", "\n", "\n", "", "return", "list_subject_idx", ",", "list_lv_volume", ",", "list_rv_volume", ",", "list_lv_ratio", ",", "list_rv_ratio", ",", "list_lvmrv_ratio", ",", "list_lvmlv_ratio", ",", "list_lvmlv_mass", ",", "list_thickness", ",", "list_thickness_diff", ",", "list_asyn_radius", ",", "list_asyn_thickness", ",", "list_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.classification.classifiers.classifiers": [[20, 249], ["data_classification.data_classification", "len", "data_classification.data_classification", "len", "range", "range", "sklearn.linear_model.LogisticRegression", "linear_model.LogisticRegression.fit", "linear_model.LogisticRegression.predict", "linear_model.LogisticRegression.predict_proba", "range", "print", "range", "range", "range", "range", "range", "range", "train_list[].append", "train_list[].append", "train_list[].append", "float", "val_list[].append", "val_list[].append", "val_list[].append", "float", "range", "range", "range", "train_list[].append", "train_list[].append", "train_list[].append", "float", "val_list[].append", "val_list[].append", "val_list[].append", "float", "range", "range", "sklearn.externals.joblib.dump", "os.path.join", "open", "range", "open.close", "train_list[].append", "train_list[].append", "train_list[].append", "float", "val_list[].append", "val_list[].append", "val_list[].append", "float", "range", "range", "print", "enumerate", "os.path.join", "len", "open.write", "train_list[].append", "float", "val_list[].append", "float", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.classification.data_classification.data_classification", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.classification.data_classification.data_classification", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.None.image2.ImageDataGenerator2.fit"], ["def", "classifiers", "(", "fold", ",", "data_class_num", ",", "classifier_name", "=", "None", ")", ":", "\n", "    ", "code_path", "=", "config", ".", "code_dir", "\n", "\n", "#print('fold = {}'.format(fold))", "\n", "if", "fold", "==", "0", ":", "\n", "        ", "mode_train", "=", "'all'", "\n", "mode_val", "=", "'predict'", "\n", "", "elif", "fold", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "mode_train", "=", "'train'", "\n", "mode_val", "=", "'val'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect fold'", ")", "\n", "\n", "\n", "", "model_type", "=", "'lr'", "\n", "\n", "normalization", "=", "True", "\n", "\n", "train_list_subject_idx", ",", "train_list_lv_volume", ",", "train_list_rv_volume", ",", "train_list_lv_ratio", ",", "train_list_rv_ratio", ",", "train_list_lvmrv_ratio", ",", "train_list_lvmlv_ratio", ",", "train_list_lvmlv_mass", ",", "train_list_thickness", ",", "train_list_thickness_diff", ",", "train_list_asyn_radius", ",", "train_list_asyn_thickness", ",", "train_list_gt", "=", "data_classification", "(", "mode", "=", "mode_train", ",", "fold", "=", "fold", ",", "data_class_num", "=", "data_class_num", ",", "normalization", "=", "normalization", ")", "\n", "train_sample", "=", "len", "(", "train_list_subject_idx", ")", "\n", "\n", "val_list_subject_idx", ",", "val_list_lv_volume", ",", "val_list_rv_volume", ",", "val_list_lv_ratio", ",", "val_list_rv_ratio", ",", "val_list_lvmrv_ratio", ",", "val_list_lvmlv_ratio", ",", "val_list_lvmlv_mass", ",", "val_list_thickness", ",", "val_list_thickness_diff", ",", "val_list_asyn_radius", ",", "val_list_asyn_thickness", ",", "val_list_gt", "=", "data_classification", "(", "mode", "=", "mode_val", ",", "fold", "=", "fold", ",", "data_class_num", "=", "data_class_num", ",", "normalization", "=", "normalization", ")", "\n", "val_sample", "=", "len", "(", "val_list_subject_idx", ")", "\n", "\n", "\n", "\n", "train_id", "=", "[", "0", "for", "x", "in", "range", "(", "train_sample", ")", "]", "\n", "train_list", "=", "[", "[", "]", "for", "x", "in", "range", "(", "train_sample", ")", "]", "\n", "train_gt", "=", "[", "0.", "for", "x", "in", "range", "(", "train_sample", ")", "]", "\n", "\n", "val_id", "=", "[", "0", "for", "x", "in", "range", "(", "val_sample", ")", "]", "\n", "val_list", "=", "[", "[", "]", "for", "x", "in", "range", "(", "val_sample", ")", "]", "\n", "val_gt", "=", "[", "0.", "for", "x", "in", "range", "(", "val_sample", ")", "]", "\n", "\n", "\n", "\n", "\n", "if", "data_class_num", "==", "5", ":", "\n", "        ", "for", "i", "in", "range", "(", "train_sample", ")", ":", "\n", "            ", "train_id", "[", "i", "]", "=", "train_list_subject_idx", "[", "i", "]", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_rv_volume", "[", "i", "]", ")", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_rv_ratio", "[", "i", "]", ")", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_lvmrv_ratio", "[", "i", "]", ")", "\n", "train_gt", "[", "i", "]", "=", "float", "(", "train_list_gt", "[", "i", "]", "==", "4", ")", "\n", "", "for", "i", "in", "range", "(", "val_sample", ")", ":", "\n", "            ", "val_id", "[", "i", "]", "=", "val_list_subject_idx", "[", "i", "]", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_rv_volume", "[", "i", "]", ")", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_rv_ratio", "[", "i", "]", ")", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_lvmrv_ratio", "[", "i", "]", ")", "\n", "val_gt", "[", "i", "]", "=", "float", "(", "val_list_gt", "[", "i", "]", "==", "4", ")", "\n", "", "", "elif", "data_class_num", "==", "4", ":", "\n", "        ", "for", "i", "in", "range", "(", "train_sample", ")", ":", "\n", "            ", "train_id", "[", "i", "]", "=", "train_list_subject_idx", "[", "i", "]", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_lv_ratio", "[", "i", "]", ")", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_lvmlv_ratio", "[", "i", "]", ")", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_thickness", "[", "i", "]", ")", "\n", "train_gt", "[", "i", "]", "=", "float", "(", "train_list_gt", "[", "i", "]", "==", "1", ")", "\n", "", "for", "i", "in", "range", "(", "val_sample", ")", ":", "\n", "            ", "val_id", "[", "i", "]", "=", "val_list_subject_idx", "[", "i", "]", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_lv_ratio", "[", "i", "]", ")", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_lvmlv_ratio", "[", "i", "]", ")", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_thickness", "[", "i", "]", ")", "\n", "val_gt", "[", "i", "]", "=", "float", "(", "val_list_gt", "[", "i", "]", "==", "1", ")", "\n", "", "", "elif", "data_class_num", "==", "3", ":", "\n", "        ", "for", "i", "in", "range", "(", "train_sample", ")", ":", "\n", "            ", "train_id", "[", "i", "]", "=", "train_list_subject_idx", "[", "i", "]", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_lv_volume", "[", "i", "]", ")", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_asyn_radius", "[", "i", "]", ")", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_asyn_thickness", "[", "i", "]", ")", "\n", "train_gt", "[", "i", "]", "=", "float", "(", "train_list_gt", "[", "i", "]", "==", "0", ")", "\n", "", "for", "i", "in", "range", "(", "val_sample", ")", ":", "\n", "            ", "val_id", "[", "i", "]", "=", "val_list_subject_idx", "[", "i", "]", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_lv_volume", "[", "i", "]", ")", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_asyn_radius", "[", "i", "]", ")", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_asyn_thickness", "[", "i", "]", ")", "\n", "val_gt", "[", "i", "]", "=", "float", "(", "val_list_gt", "[", "i", "]", "==", "0", ")", "\n", "", "", "elif", "data_class_num", "==", "2", ":", "\n", "        ", "for", "i", "in", "range", "(", "train_sample", ")", ":", "\n", "            ", "train_id", "[", "i", "]", "=", "train_list_subject_idx", "[", "i", "]", "\n", "train_list", "[", "i", "]", ".", "append", "(", "train_list_lv_ratio", "[", "i", "]", ")", "\n", "train_gt", "[", "i", "]", "=", "float", "(", "train_list_gt", "[", "i", "]", "==", "2", ")", "\n", "", "for", "i", "in", "range", "(", "val_sample", ")", ":", "\n", "            ", "val_id", "[", "i", "]", "=", "val_list_subject_idx", "[", "i", "]", "\n", "val_list", "[", "i", "]", ".", "append", "(", "val_list_lv_ratio", "[", "i", "]", ")", "\n", "val_gt", "[", "i", "]", "=", "float", "(", "val_list_gt", "[", "i", "]", "==", "2", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'Incorrect data_class_num'", ")", "\n", "\n", "\n", "\n", "", "'''\n    if data_class_num == 5:\n        for i in range(train_sample):\n            train_id[i] = train_list_subject_idx[i]\n            train_list[i].append(train_list_rv_volume[i])\n            train_list[i].append(train_list_rv_ratio[i])\n            train_list[i].append(train_list_lvmrv_ratio[i])\n            train_list[i].append(train_list_lv_ratio[i])\n            train_list[i].append(train_list_lvmlv_ratio[i])\n            train_list[i].append(train_list_thickness[i])\n            train_list[i].append(train_list_lv_volume[i])\n            train_list[i].append(train_list_asyn_radius[i])\n            train_list[i].append(train_list_asyn_thickness[i])\n            train_gt[i] = float(train_list_gt[i] == 4) \n        for i in range(val_sample):\n            val_id[i] = val_list_subject_idx[i]\n            val_list[i].append(val_list_rv_volume[i])\n            val_list[i].append(val_list_rv_ratio[i])\n            val_list[i].append(val_list_lvmrv_ratio[i])\n            val_list[i].append(val_list_lv_ratio[i])\n            val_list[i].append(val_list_lvmlv_ratio[i])\n            val_list[i].append(val_list_thickness[i])\n            val_list[i].append(val_list_lv_volume[i])\n            val_list[i].append(val_list_asyn_radius[i])\n            val_list[i].append(val_list_asyn_thickness[i])\n            val_gt[i] = float(val_list_gt[i] == 4) \n    elif data_class_num == 4:\n        for i in range(train_sample):\n            train_id[i] = train_list_subject_idx[i]\n            train_list[i].append(train_list_rv_volume[i])\n            train_list[i].append(train_list_rv_ratio[i])\n            train_list[i].append(train_list_lvmrv_ratio[i])\n            train_list[i].append(train_list_lv_ratio[i])\n            train_list[i].append(train_list_lvmlv_ratio[i])\n            train_list[i].append(train_list_thickness[i])\n            train_list[i].append(train_list_lv_volume[i])\n            train_list[i].append(train_list_asyn_radius[i])\n            train_list[i].append(train_list_asyn_thickness[i])\n            train_gt[i] = float(train_list_gt[i] == 1) \n        for i in range(val_sample):\n            val_id[i] = val_list_subject_idx[i]\n            val_list[i].append(val_list_rv_volume[i])\n            val_list[i].append(val_list_rv_ratio[i])\n            val_list[i].append(val_list_lvmrv_ratio[i])\n            val_list[i].append(val_list_lv_ratio[i])\n            val_list[i].append(val_list_lvmlv_ratio[i])\n            val_list[i].append(val_list_thickness[i])\n            val_list[i].append(val_list_lv_volume[i])\n            val_list[i].append(val_list_asyn_radius[i])\n            val_list[i].append(val_list_asyn_thickness[i])\n            val_gt[i] = float(val_list_gt[i] == 1) \n    elif data_class_num == 3:\n        for i in range(train_sample):\n            train_id[i] = train_list_subject_idx[i]\n            train_list[i].append(train_list_rv_volume[i])\n            train_list[i].append(train_list_rv_ratio[i])\n            train_list[i].append(train_list_lvmrv_ratio[i])\n            train_list[i].append(train_list_lv_ratio[i])\n            train_list[i].append(train_list_lvmlv_ratio[i])\n            train_list[i].append(train_list_thickness[i])\n            train_list[i].append(train_list_lv_volume[i])\n            train_list[i].append(train_list_asyn_radius[i])\n            train_list[i].append(train_list_asyn_thickness[i])\n            train_gt[i] = float(train_list_gt[i] == 0) \n        for i in range(val_sample):\n            val_id[i] = val_list_subject_idx[i]\n            val_list[i].append(val_list_rv_volume[i])\n            val_list[i].append(val_list_rv_ratio[i])\n            val_list[i].append(val_list_lvmrv_ratio[i])\n            val_list[i].append(val_list_lv_ratio[i])\n            val_list[i].append(val_list_lvmlv_ratio[i])\n            val_list[i].append(val_list_thickness[i])\n            val_list[i].append(val_list_lv_volume[i])\n            val_list[i].append(val_list_asyn_radius[i])\n            val_list[i].append(val_list_asyn_thickness[i])\n            val_gt[i] = float(val_list_gt[i] == 0) \n    elif data_class_num == 2:\n        for i in range(train_sample):\n            train_id[i] = train_list_subject_idx[i]\n            train_list[i].append(train_list_rv_volume[i])\n            train_list[i].append(train_list_rv_ratio[i])\n            train_list[i].append(train_list_lvmrv_ratio[i])\n            train_list[i].append(train_list_lv_ratio[i])\n            train_list[i].append(train_list_lvmlv_ratio[i])\n            train_list[i].append(train_list_thickness[i])\n            train_list[i].append(train_list_lv_volume[i])\n            train_list[i].append(train_list_asyn_radius[i])\n            train_list[i].append(train_list_asyn_thickness[i])\n            train_gt[i] = float(train_list_gt[i] == 2) \n        for i in range(val_sample):\n            val_id[i] = val_list_subject_idx[i]\n            val_list[i].append(val_list_rv_volume[i])\n            val_list[i].append(val_list_rv_ratio[i])\n            val_list[i].append(val_list_lvmrv_ratio[i])\n            val_list[i].append(val_list_lv_ratio[i])\n            val_list[i].append(val_list_lvmlv_ratio[i])\n            val_list[i].append(val_list_thickness[i])\n            val_list[i].append(val_list_lv_volume[i])\n            val_list[i].append(val_list_asyn_radius[i])\n            val_list[i].append(val_list_asyn_thickness[i])\n            val_gt[i] = float(val_list_gt[i] == 2)\n    else:\n        print('Incorrect data_class_num')\n    '''", "\n", "\n", "\n", "\n", "if", "model_type", "==", "'lr'", ":", "\n", "        ", "clf", "=", "linear_model", ".", "LogisticRegression", "(", "C", "=", "50.", ",", "solver", "=", "'liblinear'", ",", "random_state", "=", "0", ")", "\n", "clf", ".", "fit", "(", "train_list", ",", "train_gt", ")", "\n", "#print(clf.fit(train_list, train_gt))", "\n", "\n", "\n", "prediction", "=", "clf", ".", "predict", "(", "val_list", ")", "\n", "prediction_proba", "=", "clf", ".", "predict_proba", "(", "val_list", ")", "\n", "\n", "if", "fold", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "error", "=", "[", "x", "for", "i", ",", "x", "in", "enumerate", "(", "val_id", ")", "if", "prediction", "[", "i", "]", "!=", "val_gt", "[", "i", "]", "]", "\n", "return", "error", "\n", "\n", "", "elif", "fold", "==", "0", ":", "\n", "# Save the classifier model", "\n", "            ", "joblib", ".", "dump", "(", "clf", ",", "os", ".", "path", ".", "join", "(", "code_path", ",", "'classification'", ",", "'trained_model_{}.joblib'", ".", "format", "(", "classifier_name", ")", ")", ")", "\n", "\n", "#print(clf.coef_)", "\n", "#print(clf.intercept_)", "\n", "\n", "# Save the predicted results", "\n", "record_file", "=", "os", ".", "path", ".", "join", "(", "code_path", ",", "'classification'", ",", "'acdc_testing_set_prediction_{}.txt'", ".", "format", "(", "classifier_name", ")", ")", "\n", "record", "=", "open", "(", "record_file", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "val_id", ")", ")", ":", "\n", "                ", "subject", "=", "'patient{}'", ".", "format", "(", "str", "(", "val_id", "[", "i", "]", ")", ".", "zfill", "(", "3", ")", ")", "\n", "prediction_result", "=", "prediction", "[", "i", "]", "\n", "proba", "=", "prediction_proba", "[", "i", "]", "[", "1", "]", "\n", "written", "=", "'{} {} {}\\n'", ".", "format", "(", "subject", ",", "prediction_result", ",", "proba", ")", "\n", "record", ".", "write", "(", "written", ")", "\n", "\n", "", "record", ".", "close", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.classification.classification_prediction.classification_prediction": [[12, 85], ["print", "range", "print", "range", "range", "os.path.join", "open", "open.close", "print", "range", "print", "classifiers.classifiers", "os.path.join", "open.write", "error_list.append", "range", "open", "f.readlines", "x.strip", "classifiers.classifiers", "float", "y.split", "y.split"], "function", ["home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.classification.classifiers.classifiers", "home.repos.pwc.inspect_result.julien-zheng_CardiacMotionFlow.classification.classifiers.classifiers"], ["def", "classification_prediction", "(", ")", ":", "\n", "    ", "code_path", "=", "config", ".", "code_dir", "\n", "\n", "classifier_names", "=", "[", "'RVA_classifier'", ",", "'HCM_classifier'", ",", "'DCM_classifier'", ",", "'MINF_classifier'", "]", "\n", "data_class_nums", "=", "[", "5", ",", "4", ",", "3", ",", "2", "]", "\n", "\n", "\n", "###############################################", "\n", "# 5-fold cross validation on ACDC training set", "\n", "###############################################", "\n", "print", "(", "'\\n5-fold cross validation on ACDC training set.'", ")", "\n", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "        ", "print", "(", "classifier_names", "[", "k", "]", "+", "' errors:'", ")", "\n", "error_list", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "error_list", ".", "append", "(", "classifiers", "(", "f", ",", "data_class_nums", "[", "k", "]", ")", ")", "\n", "", "print", "(", "error_list", ")", "\n", "\n", "\n", "\n", "##################################", "\n", "# Prediction on ACDC training set", "\n", "##################################", "\n", "", "print", "(", "'\\nPrediction on ACDC testing set.\\n'", ")", "\n", "\n", "# Predictions by the 4 binary classifiers", "\n", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "        ", "classifiers", "(", "0", ",", "data_class_nums", "[", "k", "]", ",", "classifier_names", "[", "k", "]", ")", "\n", "\n", "\n", "# Assemble the results ", "\n", "", "test_subjects", "=", "config", ".", "acdc_test_subjects", "\n", "\n", "all_results", "=", "[", "[", "]", "for", "k", "in", "range", "(", "4", ")", "]", "\n", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "        ", "classifier_result_file", "=", "os", ".", "path", ".", "join", "(", "code_path", ",", "'classification'", ",", "'acdc_testing_set_prediction_{}.txt'", ".", "format", "(", "classifier_names", "[", "k", "]", ")", ")", "\n", "with", "open", "(", "classifier_result_file", ")", "as", "f", ":", "\n", "            ", "classifier_result_lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "results", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "classifier_result_lines", "]", "\n", "results", "=", "[", "[", "y", ".", "split", "(", ")", "[", "0", "]", "]", "+", "[", "float", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "y", "in", "results", "]", "\n", "all_results", "[", "k", "]", "=", "results", "\n", "\n", "\n", "", "rva_classifier_results", "=", "all_results", "[", "0", "]", "\n", "hyp_classifier_results", "=", "all_results", "[", "1", "]", "\n", "dcm_classifier_results", "=", "all_results", "[", "2", "]", "\n", "minf_classifier_results", "=", "all_results", "[", "3", "]", "\n", "\n", "\n", "record_file", "=", "os", ".", "path", ".", "join", "(", "code_path", ",", "'classification'", ",", "'acdc_testing_set_prediction.txt'", ")", "\n", "record", "=", "open", "(", "record_file", ",", "'w'", ")", "\n", "\n", "\n", "for", "subject", "in", "test_subjects", ":", "\n", "        ", "rva_classifier_prediction", "=", "[", "x", "for", "x", "in", "rva_classifier_results", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", "\n", "hyp_classifier_prediction", "=", "[", "x", "for", "x", "in", "hyp_classifier_results", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", "\n", "dcm_classifier_prediction", "=", "[", "x", "for", "x", "in", "dcm_classifier_results", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", "\n", "minf_classifier_prediction", "=", "[", "x", "for", "x", "in", "minf_classifier_results", "if", "x", "[", "0", "]", "==", "subject", "]", "[", "0", "]", "[", "1", "]", "\n", "if", "rva_classifier_prediction", "==", "1", ":", "\n", "            ", "final_prediction", "=", "'RV'", "\n", "", "elif", "hyp_classifier_prediction", "==", "1", ":", "\n", "            ", "final_prediction", "=", "'HCM'", "\n", "", "elif", "dcm_classifier_prediction", "==", "1", ":", "\n", "            ", "final_prediction", "=", "'DCM'", "\n", "", "elif", "minf_classifier_prediction", "==", "1", ":", "\n", "            ", "final_prediction", "=", "'MINF'", "\n", "", "else", ":", "\n", "            ", "final_prediction", "=", "'NOR'", "\n", "\n", "", "written", "=", "'{} {}\\n'", ".", "format", "(", "subject", ",", "final_prediction", ")", "\n", "record", ".", "write", "(", "written", ")", "\n", "\n", "", "record", ".", "close", "(", ")", "\n", "\n"]]}