{"home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.train": [[165, 217], ["netG.train", "enumerate", "image.cuda.cuda", "GAP_clf.normalize_and_scale", "netG.zero_grad", "torch.add", "torch.add", "torch.add", "torch.add", "range", "pretrained_clf", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log.backward", "optim.SGD.step", "train_loss_history.append", "print", "pretrained_clf", "torch.min", "torch.min", "torch.min", "torch.min", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "target_label.cuda.fill_", "target_label.cuda.cuda", "torch.SGD", "netG", "netG", "image.cuda.cuda", "netG.cuda", "recons[].clone().clamp", "torch.add.cuda", "criterion_pre", "torch.log.item", "image.cuda.cuda", "image.cuda.size", "netG.parameters", "image[].min", "image[].max", "len", "torch.log.item", "recons[].clone"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.train", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.normalize_and_scale", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.backward"], ["", "", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "netG", ".", "train", "(", ")", "\n", "global", "itr_accum", "\n", "global", "optimizerG", "\n", "\n", "for", "itr", ",", "(", "image", ",", "_", ")", "in", "enumerate", "(", "training_data_loader", ",", "1", ")", ":", "\n", "        ", "if", "itr", ">", "MaxIter", ":", "\n", "            ", "break", "\n", "\n", "", "if", "opt", ".", "target", "==", "-", "1", ":", "\n", "# least likely class in nontargeted case", "\n", "            ", "pretrained_label_float", "=", "pretrained_clf", "(", "image", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ")", "\n", "_", ",", "target_label", "=", "torch", ".", "min", "(", "pretrained_label_float", ",", "1", ")", "\n", "", "else", ":", "\n", "# targeted case", "\n", "            ", "target_label", "=", "torch", ".", "LongTensor", "(", "image", ".", "size", "(", "0", ")", ")", "\n", "target_label", ".", "fill_", "(", "opt", ".", "target", ")", "\n", "target_label", "=", "target_label", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", "\n", "\n", "", "itr_accum", "+=", "1", "\n", "if", "opt", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "lr_mult", "=", "(", "itr_accum", "//", "1000", ")", "+", "1", "\n", "optimizerG", "=", "optim", ".", "SGD", "(", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", "/", "lr_mult", ",", "momentum", "=", "0.9", ")", "\n", "\n", "", "image", "=", "image", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", "\n", "\n", "## generate per image perturbation from fixed noise", "\n", "if", "opt", ".", "perturbation_type", "==", "'universal'", ":", "\n", "            ", "delta_im", "=", "netG", "(", "noise_tr", ")", "\n", "", "else", ":", "\n", "            ", "delta_im", "=", "netG", "(", "image", ")", "\n", "\n", "", "delta_im", "=", "normalize_and_scale", "(", "delta_im", ",", "'train'", ")", "\n", "\n", "netG", ".", "zero_grad", "(", ")", "\n", "\n", "recons", "=", "torch", ".", "add", "(", "image", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ",", "delta_im", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ")", "\n", "\n", "# do clamping per channel", "\n", "for", "cii", "in", "range", "(", "3", ")", ":", "\n", "            ", "recons", "[", ":", ",", "cii", ",", ":", ",", ":", "]", "=", "recons", "[", ":", ",", "cii", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "clamp", "(", "image", "[", ":", ",", "cii", ",", ":", ",", ":", "]", ".", "min", "(", ")", ",", "image", "[", ":", ",", "cii", ",", ":", ",", ":", "]", ".", "max", "(", ")", ")", "\n", "\n", "", "output_pretrained", "=", "pretrained_clf", "(", "recons", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ")", "\n", "\n", "# attempt to get closer to least likely class, or target", "\n", "loss", "=", "torch", ".", "log", "(", "criterion_pre", "(", "output_pretrained", ",", "target_label", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizerG", ".", "step", "(", ")", "\n", "\n", "train_loss_history", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "print", "(", "\"===> Epoch[{}]({}/{}) loss: {:.4f}\"", ".", "format", "(", "epoch", ",", "itr", ",", "len", "(", "training_data_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.test": [[219, 292], ["enumerate", "test_acc_history.append", "test_fooling_history.append", "print", "print", "netG.eval", "image.cuda.cuda", "torch.add", "torch.add", "torch.add", "torch.add", "range", "pretrained_clf", "pretrained_clf", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "image.cuda.size", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "U_loaded.expand.expand", "GAP_clf.normalize_and_scale", "netG", "GAP_clf.normalize_and_scale", "netG", "GAP_clf.normalize_and_scale", "image.cuda.cuda", "delta_im[].cuda", "recons[].clone().clamp", "torch.add.cuda", "image.cuda.cuda", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "print", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "print", "U_loaded.expand.size", "U_loaded.expand.size", "U_loaded.expand.size", "image[].min", "image[].max", "normalize_and_scale.size", "os.path.exists", "os.mkdir", "float", "float", "recons[].clone", "class_label.cuda", "class_label.cuda", "post_l_inf.item", "float", "float", "float", "float", "float", "float", "image.cuda.size", "torch.add.size"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.normalize_and_scale", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.normalize_and_scale", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.normalize_and_scale", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util.mkdir"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "if", "not", "opt", ".", "explicit_U", ":", "\n", "        ", "netG", ".", "eval", "(", ")", "\n", "", "correct_recon", "=", "0", "\n", "correct_orig", "=", "0", "\n", "fooled", "=", "0", "\n", "total", "=", "0", "\n", "\n", "if", "opt", ".", "perturbation_type", "==", "'universal'", ":", "\n", "        ", "if", "opt", ".", "explicit_U", ":", "\n", "            ", "U_loaded", "=", "torch", ".", "load", "(", "opt", ".", "explicit_U", ")", "\n", "U_loaded", "=", "U_loaded", ".", "expand", "(", "opt", ".", "testBatchSize", ",", "U_loaded", ".", "size", "(", "1", ")", ",", "U_loaded", ".", "size", "(", "2", ")", ",", "U_loaded", ".", "size", "(", "3", ")", ")", "\n", "delta_im", "=", "normalize_and_scale", "(", "U_loaded", ",", "'test'", ")", "\n", "", "else", ":", "\n", "            ", "delta_im", "=", "netG", "(", "noise_te", ")", "\n", "delta_im", "=", "normalize_and_scale", "(", "delta_im", ",", "'test'", ")", "\n", "\n", "", "", "for", "itr", ",", "(", "image", ",", "class_label", ")", "in", "enumerate", "(", "testing_data_loader", ")", ":", "\n", "        ", "if", "itr", ">", "MaxIterTest", ":", "\n", "            ", "break", "\n", "\n", "", "image", "=", "image", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", "\n", "\n", "if", "opt", ".", "perturbation_type", "==", "'imdep'", ":", "\n", "            ", "delta_im", "=", "netG", "(", "image", ")", "\n", "delta_im", "=", "normalize_and_scale", "(", "delta_im", ",", "'test'", ")", "\n", "\n", "", "recons", "=", "torch", ".", "add", "(", "image", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ",", "delta_im", "[", "0", ":", "image", ".", "size", "(", "0", ")", "]", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ")", "\n", "\n", "# do clamping per channel", "\n", "for", "cii", "in", "range", "(", "3", ")", ":", "\n", "            ", "recons", "[", ":", ",", "cii", ",", ":", ",", ":", "]", "=", "recons", "[", ":", ",", "cii", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "clamp", "(", "image", "[", ":", ",", "cii", ",", ":", ",", ":", "]", ".", "min", "(", ")", ",", "image", "[", ":", ",", "cii", ",", ":", ",", ":", "]", ".", "max", "(", ")", ")", "\n", "\n", "", "outputs_recon", "=", "pretrained_clf", "(", "recons", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ")", "\n", "outputs_orig", "=", "pretrained_clf", "(", "image", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ")", "\n", "_", ",", "predicted_recon", "=", "torch", ".", "max", "(", "outputs_recon", ",", "1", ")", "\n", "_", ",", "predicted_orig", "=", "torch", ".", "max", "(", "outputs_orig", ",", "1", ")", "\n", "total", "+=", "image", ".", "size", "(", "0", ")", "\n", "correct_recon", "+=", "(", "predicted_recon", "==", "class_label", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ")", ".", "sum", "(", ")", "\n", "correct_orig", "+=", "(", "predicted_orig", "==", "class_label", ".", "cuda", "(", "gpulist", "[", "0", "]", ")", ")", ".", "sum", "(", ")", "\n", "\n", "if", "opt", ".", "target", "==", "-", "1", ":", "\n", "            ", "fooled", "+=", "(", "predicted_recon", "!=", "predicted_orig", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "fooled", "+=", "(", "predicted_recon", "==", "opt", ".", "target", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "itr", "%", "50", "==", "1", ":", "\n", "            ", "print", "(", "'Images evaluated:'", ",", "(", "itr", "*", "opt", ".", "testBatchSize", ")", ")", "\n", "# undo normalize image color channels", "\n", "delta_im_temp", "=", "torch", ".", "zeros", "(", "delta_im", ".", "size", "(", ")", ")", "\n", "for", "c2", "in", "range", "(", "3", ")", ":", "\n", "                ", "recons", "[", ":", ",", "c2", ",", ":", ",", ":", "]", "=", "(", "recons", "[", ":", ",", "c2", ",", ":", ",", ":", "]", "*", "stddev_arr", "[", "c2", "]", ")", "+", "mean_arr", "[", "c2", "]", "\n", "image", "[", ":", ",", "c2", ",", ":", ",", ":", "]", "=", "(", "image", "[", ":", ",", "c2", ",", ":", ",", ":", "]", "*", "stddev_arr", "[", "c2", "]", ")", "+", "mean_arr", "[", "c2", "]", "\n", "delta_im_temp", "[", ":", ",", "c2", ",", ":", ",", ":", "]", "=", "(", "delta_im", "[", ":", ",", "c2", ",", ":", ",", ":", "]", "*", "stddev_arr", "[", "c2", "]", ")", "+", "mean_arr", "[", "c2", "]", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "expname", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "opt", ".", "expname", ")", "\n", "\n", "", "post_l_inf", "=", "(", "recons", "-", "image", "[", "0", ":", "recons", ".", "size", "(", "0", ")", "]", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "*", "255.0", "\n", "print", "(", "\"Specified l_inf:\"", ",", "mag_in", ",", "\"| maximum l_inf of generated perturbations: %.2f\"", "%", "(", "post_l_inf", ".", "item", "(", ")", ")", ")", "\n", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "recons", ",", "opt", ".", "expname", "+", "'/reconstructed_{}.png'", ".", "format", "(", "itr", ")", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "image", ",", "opt", ".", "expname", "+", "'/original_{}.png'", ".", "format", "(", "itr", ")", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "delta_im_temp", ",", "opt", ".", "expname", "+", "'/delta_im_{}.png'", ".", "format", "(", "itr", ")", ")", "\n", "print", "(", "'Saved images.'", ")", "\n", "\n", "", "", "test_acc_history", ".", "append", "(", "(", "100.0", "*", "correct_recon", "/", "total", ")", ")", "\n", "test_fooling_history", ".", "append", "(", "(", "100.0", "*", "fooled", "/", "total", ")", ")", "\n", "print", "(", "'Accuracy of the pretrained network on reconstructed images: %.2f%%'", "%", "(", "100.0", "*", "float", "(", "correct_recon", ")", "/", "float", "(", "total", ")", ")", ")", "\n", "print", "(", "'Accuracy of the pretrained network on original images: %.2f%%'", "%", "(", "100.0", "*", "float", "(", "correct_orig", ")", "/", "float", "(", "total", ")", ")", ")", "\n", "if", "opt", ".", "target", "==", "-", "1", ":", "\n", "        ", "print", "(", "'Fooling ratio: %.2f%%'", "%", "(", "100.0", "*", "float", "(", "fooled", ")", "/", "float", "(", "total", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Top-1 Target Accuracy: %.2f%%'", "%", "(", "100.0", "*", "float", "(", "fooled", ")", "/", "float", "(", "total", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.normalize_and_scale": [[293, 316], ["range", "range", "range", "torch.ConstantPad2d", "delta_im[].detach().abs().max", "delta_im[].clone", "delta_im[].clone", "numpy.minimum", "delta_im[].detach().abs", "delta_im[].detach().abs().max.cpu().numpy", "delta_im[].detach", "delta_im[].detach().abs().max.cpu"], "function", ["None"], ["", "", "def", "normalize_and_scale", "(", "delta_im", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "if", "opt", ".", "foolmodel", "==", "'incv3'", ":", "\n", "        ", "delta_im", "=", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "-", "1", ",", "-", "1", ",", "0", ")", ",", "0", ")", "(", "delta_im", ")", "# crop slightly to match inception", "\n", "\n", "", "delta_im", "=", "delta_im", "+", "1", "# now 0..2", "\n", "delta_im", "=", "delta_im", "*", "0.5", "# now 0..1", "\n", "\n", "# normalize image color channels", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "        ", "delta_im", "[", ":", ",", "c", ",", ":", ",", ":", "]", "=", "(", "delta_im", "[", ":", ",", "c", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "-", "mean_arr", "[", "c", "]", ")", "/", "stddev_arr", "[", "c", "]", "\n", "\n", "# threshold each channel of each image in deltaIm according to inf norm", "\n", "# do on a per image basis as the inf norm of each image could be different", "\n", "", "bs", "=", "opt", ".", "batchSize", "if", "(", "mode", "==", "'train'", ")", "else", "opt", ".", "testBatchSize", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "# do per channel l_inf normalization", "\n", "        ", "for", "ci", "in", "range", "(", "3", ")", ":", "\n", "            ", "l_inf_channel", "=", "delta_im", "[", "i", ",", "ci", ",", ":", ",", ":", "]", ".", "detach", "(", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "mag_in_scaled_c", "=", "mag_in", "/", "(", "255.0", "*", "stddev_arr", "[", "ci", "]", ")", "\n", "gpu_id", "=", "gpulist", "[", "1", "]", "if", "n_gpu", ">", "1", "else", "gpulist", "[", "0", "]", "\n", "delta_im", "[", "i", ",", "ci", ",", ":", ",", ":", "]", "=", "delta_im", "[", "i", ",", "ci", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "*", "np", ".", "minimum", "(", "1.0", ",", "mag_in_scaled_c", "/", "l_inf_channel", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "return", "delta_im", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.checkpoint_dict": [[318, 337], ["netG.eval", "os.path.exists", "os.mkdir", "torch.save", "torch.save", "torch.save", "torch.save", "print", "print", "netG.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "netG"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util.mkdir", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save"], ["", "def", "checkpoint_dict", "(", "epoch", ")", ":", "\n", "    ", "netG", ".", "eval", "(", ")", "\n", "global", "best_fooling", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "expname", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "opt", ".", "expname", ")", "\n", "\n", "", "task_label", "=", "\"foolrat\"", "if", "opt", ".", "target", "==", "-", "1", "else", "\"top1target\"", "\n", "\n", "net_g_model_out_path", "=", "opt", ".", "expname", "+", "\"/netG_model_epoch_{}_\"", ".", "format", "(", "epoch", ")", "+", "task_label", "+", "\"_{}.pth\"", ".", "format", "(", "test_fooling_history", "[", "epoch", "-", "1", "]", ")", "\n", "if", "opt", ".", "perturbation_type", "==", "'universal'", ":", "\n", "        ", "u_out_path", "=", "opt", ".", "expname", "+", "\"/U_out/U_epoch_{}_\"", ".", "format", "(", "epoch", ")", "+", "task_label", "+", "\"_{}.pth\"", ".", "format", "(", "test_fooling_history", "[", "epoch", "-", "1", "]", ")", "\n", "", "if", "test_fooling_history", "[", "epoch", "-", "1", "]", ">", "best_fooling", ":", "\n", "        ", "best_fooling", "=", "test_fooling_history", "[", "epoch", "-", "1", "]", "\n", "torch", ".", "save", "(", "netG", ".", "state_dict", "(", ")", ",", "net_g_model_out_path", ")", "\n", "if", "opt", ".", "perturbation_type", "==", "'universal'", ":", "\n", "            ", "torch", ".", "save", "(", "netG", "(", "noise_te", "[", "0", ":", "1", "]", ")", ",", "u_out_path", ")", "\n", "", "print", "(", "\"Checkpoint saved to {}\"", ".", "format", "(", "net_g_model_out_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"No improvement:\"", ",", "test_fooling_history", "[", "epoch", "-", "1", "]", ",", "\"Best:\"", ",", "best_fooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.GAP_clf.print_history": [[339, 366], ["matplotlib.plot", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.clf", "matplotlib.plot", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.legend", "matplotlib.savefig", "print", "matplotlib.plot", "matplotlib.title", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.clf"], "function", ["None"], ["", "", "def", "print_history", "(", ")", ":", "\n", "# plot history for training loss", "\n", "    ", "if", "opt", ".", "mode", "==", "'train'", ":", "\n", "        ", "plt", ".", "plot", "(", "train_loss_history", ")", "\n", "plt", ".", "title", "(", "'Model Training Loss'", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "xlabel", "(", "'Iteration'", ")", "\n", "plt", ".", "legend", "(", "[", "'Training Loss'", "]", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "opt", ".", "expname", "+", "'/reconstructed_loss_'", "+", "opt", ".", "mode", "+", "'.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "# plot history for classification testing accuracy and fooling ratio", "\n", "", "plt", ".", "plot", "(", "test_acc_history", ")", "\n", "plt", ".", "title", "(", "'Model Testing Accuracy'", ")", "\n", "plt", ".", "ylabel", "(", "'Accuracy'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "legend", "(", "[", "'Testing Classification Accuracy'", "]", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "opt", ".", "expname", "+", "'/reconstructed_acc_'", "+", "opt", ".", "mode", "+", "'.png'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "plt", ".", "plot", "(", "test_fooling_history", ")", "\n", "plt", ".", "title", "(", "'Model Testing Fooling Ratio'", ")", "\n", "plt", ".", "ylabel", "(", "'Fooling Ratio'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "legend", "(", "[", "'Testing Fooling Ratio'", "]", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "opt", ".", "expname", "+", "'/reconstructed_foolrat_'", "+", "opt", ".", "mode", "+", "'.png'", ")", "\n", "print", "(", "\"Saved plots.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.dataset.DatasetFromFolder.__init__": [[8, 13], ["torch.Dataset.__init__", "os.path.join", "os.path.join", "os.listdir", "util.is_image_file"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.is_image_file"], ["    ", "def", "__init__", "(", "self", ",", "image_dir", ")", ":", "\n", "        ", "super", "(", "DatasetFromFolder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a_path", "=", "join", "(", "image_dir", ",", "\"a\"", ")", "\n", "self", ".", "b_path", "=", "join", "(", "image_dir", ",", "\"b\"", ")", "\n", "self", ".", "image_filenames", "=", "[", "x", "for", "x", "in", "listdir", "(", "self", ".", "a_path", ")", "if", "is_image_file", "(", "x", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.dataset.DatasetFromFolder.__getitem__": [[14, 20], ["util.load_img", "util.load_img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.load_img", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Load Image", "\n", "        ", "input", "=", "load_img", "(", "join", "(", "self", ".", "a_path", ",", "self", ".", "image_filenames", "[", "index", "]", ")", ")", "\n", "target", "=", "load_img", "(", "join", "(", "self", ".", "b_path", ",", "self", ".", "image_filenames", "[", "index", "]", ")", ")", "\n", "\n", "return", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.dataset.DatasetFromFolder.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_filenames", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.data.get_training_set": [[6, 10], ["os.path.join", "dataset.DatasetFromFolder"], "function", ["None"], ["def", "get_training_set", "(", "root_dir", ")", ":", "\n", "    ", "train_dir", "=", "join", "(", "root_dir", ",", "\"train\"", ")", "\n", "\n", "return", "DatasetFromFolder", "(", "train_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.data.get_test_set": [[12, 16], ["os.path.join", "dataset.DatasetFromFolder"], "function", ["None"], ["", "def", "get_test_set", "(", "root_dir", ")", ":", "\n", "    ", "test_dir", "=", "join", "(", "root_dir", ",", "\"test\"", ")", "\n", "\n", "return", "DatasetFromFolder", "(", "test_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.is_image_file": [[6, 8], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".png\"", ",", "\".jpg\"", ",", "\".jpeg\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.load_img": [[10, 20], ["scipy.misc.imread", "scipy.misc.imresize", "numpy.transpose", "torch.from_numpy", "util.preprocess_img", "len", "numpy.expand_dims", "numpy.repeat"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.preprocess_img"], ["", "def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "imread", "(", "filepath", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "img", "=", "np", ".", "repeat", "(", "img", ",", "3", ",", "axis", "=", "2", ")", "\n", "", "img", "=", "imresize", "(", "img", ",", "(", "256", ",", "256", ")", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "img", "=", "preprocess_img", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.save_img": [[22, 32], ["util.deprocess_img", "img.astype.numpy", "img.astype.clip", "numpy.transpose", "scipy.misc.imresize", "img.astype.astype", "scipy.misc.imsave", "print"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.deprocess_img"], ["", "def", "save_img", "(", "img", ",", "filename", ")", ":", "\n", "    ", "img", "=", "deprocess_img", "(", "img", ")", "\n", "img", "=", "img", ".", "numpy", "(", ")", "\n", "img", "*=", "255.0", "\n", "img", "=", "img", ".", "clip", "(", "0", ",", "255", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img", "=", "imresize", "(", "img", ",", "(", "250", ",", "200", ",", "3", ")", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imsave", "(", "filename", ",", "img", ")", "\n", "print", "(", "\"Image saved as {}\"", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.preprocess_img": [[34, 53], ["img.mul_().add_.min", "img.mul_().add_.max", "torch.FloatTensor().copy_", "img.mul_().add_.add_().mul_", "torch.LongTensor", "torch.index_select", "img.mul_().add_.mul_().add_", "img.mul_().add_.max", "img.mul_().add_.min", "torch.FloatTensor", "img.mul_().add_.add_", "img.mul_().add_.mul_", "img.mul_().add_.size"], "function", ["None"], ["", "def", "preprocess_img", "(", "img", ")", ":", "\n", "# [0,255] image to [0,1]", "\n", "    ", "min", "=", "img", ".", "min", "(", ")", "\n", "max", "=", "img", ".", "max", "(", ")", "\n", "img", "=", "torch", ".", "FloatTensor", "(", "img", ".", "size", "(", ")", ")", ".", "copy_", "(", "img", ")", "\n", "img", ".", "add_", "(", "-", "min", ")", ".", "mul_", "(", "1.0", "/", "(", "max", "-", "min", ")", ")", "\n", "\n", "# RGB to BGR", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "1", ",", "0", "]", ")", "\n", "img", "=", "torch", ".", "index_select", "(", "img", ",", "0", ",", "idx", ")", "\n", "\n", "# [0,1] to [-1,1]", "\n", "img", "=", "img", ".", "mul_", "(", "2", ")", ".", "add_", "(", "-", "1", ")", "\n", "\n", "# check that input is in expected range", "\n", "assert", "img", ".", "max", "(", ")", "<=", "1", ",", "'badly scaled inputs'", "\n", "assert", "img", ".", "min", "(", ")", ">=", "-", "1", ",", "\"badly scaled inputs\"", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.None.util.deprocess_img": [[55, 64], ["torch.LongTensor", "torch.index_select", "img.add_().div_.add_().div_", "img.add_().div_.add_"], "function", ["None"], ["", "def", "deprocess_img", "(", "img", ")", ":", "\n", "# BGR to RGB", "\n", "    ", "idx", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "1", ",", "0", "]", ")", "\n", "img", "=", "torch", ".", "index_select", "(", "img", ",", "0", ",", "idx", ")", "\n", "\n", "# [-1,1] to [0,1]", "\n", "img", "=", "img", ".", "add_", "(", "1", ")", ".", "div_", "(", "2", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.color_map": [[22, 41], ["numpy.zeros", "range", "range", "numpy.array", "image_transform.color_map.bitget"], "function", ["None"], ["def", "color_map", "(", "N", "=", "256", ",", "normalized", "=", "False", ")", ":", "\n", "    ", "def", "bitget", "(", "byteval", ",", "idx", ")", ":", "\n", "        ", "return", "(", "(", "byteval", "&", "(", "1", "<<", "idx", ")", ")", "!=", "0", ")", "\n", "\n", "", "dtype", "=", "'float32'", "if", "normalized", "else", "'uint8'", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "r", "=", "g", "=", "b", "=", "0", "\n", "c", "=", "i", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "r", "=", "r", "|", "(", "bitget", "(", "c", ",", "0", ")", "<<", "7", "-", "j", ")", "\n", "g", "=", "g", "|", "(", "bitget", "(", "c", ",", "1", ")", "<<", "7", "-", "j", ")", "\n", "b", "=", "b", "|", "(", "bitget", "(", "c", ",", "2", ")", "<<", "7", "-", "j", ")", "\n", "c", "=", "c", ">>", "3", "\n", "\n", "", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "", "cmap", "=", "cmap", "/", "255", "if", "normalized", "else", "cmap", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.myfunc": [[46, 52], ["None"], "function", ["None"], ["def", "myfunc", "(", "a", ")", ":", "\n", "# print(a)", "\n", "    ", "if", "a", "in", "full_to_train", ":", "\n", "        ", "return", "full_to_train", "[", "a", "]", "\n", "", "else", ":", "\n", "        ", "19", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.process_img_file": [[54, 58], ["PIL.Image.open", "numpy.array"], "function", ["None"], ["", "", "def", "process_img_file", "(", "img_file", ")", ":", "\n", "    ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.process_lbl_file": [[60, 69], ["PIL.Image.open", "numpy.array", "vfunc().reshape.reshape", "numpy.vectorize", "np.vectorize.reshape", "np.vectorize."], "function", ["None"], ["", "def", "process_lbl_file", "(", "lbl_file", ")", ":", "\n", "    ", "lbl", "=", "PIL", ".", "Image", ".", "open", "(", "lbl_file", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "w", ",", "h", "=", "lbl", ".", "shape", "\n", "lbl", "=", "lbl", ".", "reshape", "(", "-", "1", ")", "\n", "vfunc", "=", "np", ".", "vectorize", "(", "myfunc", ")", "\n", "lbl", "=", "vfunc", "(", "lbl", ")", ".", "reshape", "(", "w", ",", "h", ")", "\n", "return", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.mapping_func": [[70, 74], ["None"], "function", ["None"], ["", "def", "mapping_func", "(", "lbl", ",", "n_class", ")", ":", "\n", "# print(lbl)", "\n", "    ", "if", "lbl", ">=", "0", "and", "lbl", "<", "n_class", ":", "\n", "        ", "return", "mapping_global", "[", "lbl", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.do_mapping": [[76, 85], ["vfunc().reshape.numpy", "vfunc().reshape.reshape", "numpy.vectorize", "np.vectorize.reshape", "torch.from_numpy().long", "np.vectorize.", "torch.from_numpy"], "function", ["None"], ["", "", "def", "do_mapping", "(", "lbl", ",", "mapping", ",", "n_class", ")", ":", "\n", "    ", "lbl", "=", "lbl", ".", "numpy", "(", ")", "\n", "global", "mapping_global", "\n", "mapping_global", "=", "mapping", "\n", "_", ",", "w", ",", "h", "=", "lbl", ".", "shape", "\n", "lbl", "=", "lbl", ".", "reshape", "(", "-", "1", ")", "\n", "vfunc", "=", "np", ".", "vectorize", "(", "mapping_func", ")", "\n", "lbl", "=", "vfunc", "(", "lbl", ",", "n_class", ")", ".", "reshape", "(", "1", ",", "w", ",", "h", ")", "\n", "return", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.to_tensor": [[87, 99], ["img.transpose.astype", "img.transpose.transpose", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "to_tensor", "(", "img", ",", "lbl", ")", ":", "\n", "    ", "img_tensor", "=", "None", "\n", "lbl_tensor", "=", "None", "\n", "\n", "if", "img", "is", "not", "None", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img_tensor", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "", "if", "lbl", "is", "not", "None", ":", "\n", "        ", "lbl_tensor", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "", "return", "img_tensor", ",", "lbl_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.to_numpy": [[101, 112], ["img.astype.numpy", "img.astype.transpose", "img.astype.astype", "lbl.numpy.numpy"], "function", ["None"], ["", "def", "to_numpy", "(", "img", ",", "lbl", ")", ":", "\n", "    ", "img", "=", "img", ".", "numpy", "(", ")", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "if", "lbl", "is", "not", "None", ":", "\n", "        ", "lbl", "=", "lbl", ".", "numpy", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.transform": [[114, 132], ["img.div_().add_.div_().add_", "img.div_().add_.div_", "img[].add", "img[].add", "img[].add", "img[].add", "img[].add", "img[].add"], "function", ["None"], ["", "", "def", "transform", "(", "img", ",", "lbl", ",", "mode", ",", "dataset", ",", "optional", "=", "-", "1.0", ")", ":", "\n", "    ", "if", "mode", "==", "1", ":", "\n", "        ", "img", "=", "img", ".", "div_", "(", "128.0", ")", ".", "add_", "(", "optional", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "if", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "img", "[", "0", "]", "=", "img", "[", "0", "]", ".", "add", "(", "-", "72.78044", ")", "\n", "img", "[", "1", "]", "=", "img", "[", "1", "]", ".", "add", "(", "-", "83.21195", ")", "\n", "img", "[", "2", "]", "=", "img", "[", "2", "]", ".", "add", "(", "-", "73.45286", ")", "\n", "\n", "", "elif", "dataset", "==", "'pascalvoc'", ":", "\n", "            ", "img", "[", "0", "]", ".", "add", "(", "-", "104.00698793", ")", "\n", "img", "[", "1", "]", ".", "add", "(", "-", "116.66876762", ")", "\n", "img", "[", "2", "]", ".", "add", "(", "-", "122.67891434", ")", "\n", "\n", "", "", "if", "lbl", "is", "not", "None", ":", "\n", "        ", "return", "img", ",", "lbl", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.untransform": [[134, 152], ["torch.clamp.add_().mul_", "torch.clamp", "torch.clamp.add_", "img[].add", "img[].add", "img[].add", "img[].add", "img[].add", "img[].add"], "function", ["None"], ["", "", "def", "untransform", "(", "img", ",", "lbl", ",", "mode", ",", "dataset", ")", ":", "\n", "    ", "if", "mode", "==", "1", ":", "\n", "        ", "img", "=", "img", ".", "add_", "(", "1.0", ")", ".", "mul_", "(", "128.0", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "0", ",", "255", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "        ", "if", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "img", "[", "0", "]", "=", "img", "[", "0", "]", ".", "add", "(", "-", "72.78044", ")", "\n", "img", "[", "1", "]", "=", "img", "[", "1", "]", ".", "add", "(", "-", "83.21195", ")", "\n", "img", "[", "2", "]", "=", "img", "[", "2", "]", ".", "add", "(", "-", "73.45286", ")", "\n", "", "elif", "dataset", "==", "'pascalvoc'", ":", "\n", "            ", "img", "[", "0", "]", ".", "add", "(", "104.00698793", ")", "\n", "img", "[", "1", "]", ".", "add", "(", "116.66876762", ")", "\n", "img", "[", "2", "]", ".", "add", "(", "122.67891434", ")", "\n", "\n", "", "", "if", "lbl", "is", "not", "None", ":", "\n", "        ", "return", "img", ",", "lbl", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.inf_norm_adjust": [[154, 162], ["range", "range", "img.size", "img[].data[].abs().max", "min", "img[].data[].abs"], "function", ["None"], ["", "", "def", "inf_norm_adjust", "(", "img", ",", "eps", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "img", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "# for loop for RGB", "\n", "        ", "for", "col", "in", "range", "(", "3", ")", ":", "\n", "            ", "inf_norm", "=", "img", "[", "i", "]", ".", "data", "[", "col", "]", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "coef", "=", "min", "(", "1.0", ",", "eps", "/", "inf_norm", ")", "\n", "img", "[", "i", "]", ".", "data", "[", "col", "]", "*=", "coef", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.l2_loss": [[164, 172], ["torch.nn.MSELoss().cuda", "torch.FloatTensor().zero_", "torch.autograd.Variable().cuda", "torch.nn.MSELoss().cuda.", "torch.sqrt", "torch.nn.MSELoss", "torch.FloatTensor", "torch.autograd.Variable", "tensor.size"], "function", ["None"], ["", "def", "l2_loss", "(", "tensor", ")", ":", "\n", "    ", "crt", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "base", "=", "torch", ".", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "base", "=", "torch", ".", "autograd", ".", "Variable", "(", "base", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "crt", "(", "tensor", ",", "base", ")", "\n", "loss", "=", "loss", "*", "3", "\n", "loss", "=", "torch", ".", "sqrt", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.l2_norm_adjust": [[174, 178], ["min", "image_transform.l2_loss"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.l2_loss"], ["", "def", "l2_norm_adjust", "(", "delta", ",", "eps", ")", ":", "\n", "    ", "norm", "=", "l2_loss", "(", "delta", ")", ".", "data", "[", "0", "]", "\n", "delta", ".", "data", "*=", "min", "(", "1.0", ",", "eps", "/", "norm", ")", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.transform_pred_res": [[180, 205], ["numpy.zeros", "range", "torch.FloatTensor.transpose", "torch.FloatTensor", "range", "numpy.zeros", "range", "torch.FloatTensor.transpose", "torch.FloatTensor", "range"], "function", ["None"], ["", "def", "transform_pred_res", "(", "pred", ",", "dataset", ")", ":", "\n", "    ", "if", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "h", ",", "w", "=", "pred", ".", "shape", "\n", "data", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "h", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "w", ")", ":", "\n", "                ", "trainId", "=", "pred", "[", "i", "]", "[", "j", "]", "\n", "if", "trainId", "==", "19", ":", "\n", "                    ", "trainId", "=", "255", "\n", "", "data", "[", "i", "]", "[", "j", "]", "=", "trainId2color", "[", "trainId", "]", "\n", "", "", "data", "=", "data", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "data", "=", "torch", ".", "FloatTensor", "(", "data", ")", "\n", "return", "data", "\n", "", "elif", "dataset", "==", "'pascalvoc'", ":", "\n", "        ", "h", ",", "w", "=", "pred", ".", "shape", "\n", "data", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "h", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "w", ")", ":", "\n", "                ", "trainId", "=", "pred", "[", "i", "]", "[", "j", "]", "\n", "data", "[", "i", "]", "[", "j", "]", "=", "cmap", "[", "trainId", "]", "\n", "", "", "data", "=", "data", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "data", "=", "torch", ".", "FloatTensor", "(", "data", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.save_img": [[207, 210], ["PIL.Image.fromarray", "PIL.Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save"], ["", "", "def", "save_img", "(", "np_img", ",", "fp", ")", ":", "\n", "    ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "np_img", ")", "\n", "img", ".", "save", "(", "fp", ",", "format", "=", "'PNG'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.save_transform": [[212, 218], ["img.astype.numpy", "img.astype.astype"], "function", ["None"], ["", "def", "save_transform", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "numpy", "(", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.visualizer.Visualizer.__init__": [[11, 24], ["os.join", "os.join", "visdom.Visdom", "open", "time.strftime", "log_file.write"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "display_id", "=", "args", ".", "display_id", "\n", "# self.use_html =", "\n", "self", ".", "window_size", "=", "args", ".", "display_window_size", "\n", "self", ".", "name", "=", "args", ".", "name", "\n", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "args", ".", "display_port", ",", "env", "=", "self", ".", "name", ")", "\n", "", "self", ".", "log_path", "=", "osp", ".", "join", "(", "args", ".", "checkpoints_dir", ",", "args", ".", "name", ",", "'log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_path", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.visualizer.Visualizer.display_current_visuals": [[25, 31], ["list", "res.keys", "visualizer.Visualizer.vis.image", "dict"], "methods", ["None"], ["", "", "def", "display_current_visuals", "(", "self", ",", "res", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "list", "(", "res", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "vis", ".", "image", "(", "\n", "res", "[", "name", "]", ",", "\n", "opts", "=", "dict", "(", "title", "=", "name", ")", ",", "\n", "win", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.visualizer.Visualizer.plot_current_errors": [[34, 82], ["visualizer.Visualizer.plot_train_data[].append", "visualizer.Visualizer.plot_train_data[].append", "visualizer.Visualizer.vis.line", "hasattr", "visualizer.Visualizer.plot_train_data[].append", "visualizer.Visualizer.plot_train_data[].append", "visualizer.Visualizer.vis.line", "visualizer.Visualizer.plot_test_data[].append", "visualizer.Visualizer.plot_test_data[].append", "visualizer.Visualizer.vis.line", "list", "numpy.broadcast_to", "numpy.broadcast_to", "hasattr", "visualizer.Visualizer.plot_test_data[].append", "visualizer.Visualizer.plot_test_data[].append", "visualizer.Visualizer.vis.line", "errors.keys", "numpy.broadcast_to", "numpy.broadcast_to", "numpy.array", "numpy.array", "list", "numpy.broadcast_to", "numpy.broadcast_to", "numpy.array", "numpy.array", "errors.keys", "numpy.broadcast_to", "numpy.broadcast_to", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "epoch", ",", "total_iter", ",", "opt", ",", "errors", ",", "list_name", ")", ":", "\n", "        ", "if", "list_name", "==", "'train'", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'plot_train_data'", ")", ":", "\n", "                ", "self", ".", "plot_train_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "self", ".", "plot_train_data", "[", "'X'", "]", ".", "append", "(", "total_iter", ")", "\n", "self", ".", "plot_train_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_train_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "[", "total_iter", "]", ")", ",", "(", "1", ",", "2", ")", ")", ",", "\n", "Y", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "self", ".", "plot_train_data", "[", "'Y'", "]", "[", "total_iter", "]", ")", ",", "(", "1", ",", "2", ")", ")", ",", "\n", "opts", "=", "{", "\n", "'legend'", ":", "self", ".", "plot_train_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'iteration'", ",", "\n", "}", ",", "\n", "win", "=", "'train_plot'", "\n", ")", "\n", "return", "\n", "\n", "", "self", ".", "plot_train_data", "[", "'X'", "]", ".", "append", "(", "total_iter", ")", "\n", "self", ".", "plot_train_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_train_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "[", "total_iter", "]", ")", ",", "(", "1", ",", "2", ")", ")", ",", "\n", "Y", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "self", ".", "plot_train_data", "[", "'Y'", "]", "[", "total_iter", "]", ")", ",", "(", "1", ",", "2", ")", ")", ",", "\n", "win", "=", "'train_plot'", ",", "\n", "update", "=", "'append'", "\n", ")", "\n", "", "elif", "list_name", "==", "'test'", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'plot_test_data'", ")", ":", "\n", "                ", "self", ".", "plot_test_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "self", ".", "plot_test_data", "[", "'X'", "]", ".", "append", "(", "epoch", ")", "\n", "self", ".", "plot_test_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_test_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "[", "epoch", "]", ")", ",", "(", "1", ",", "2", ")", ")", ",", "\n", "Y", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "self", ".", "plot_test_data", "[", "'Y'", "]", "[", "epoch", "]", ")", ",", "(", "1", ",", "2", ")", ")", ",", "\n", "opts", "=", "{", "\n", "'legend'", ":", "self", ".", "plot_test_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "}", ",", "\n", "win", "=", "'test_plot'", "\n", ")", "\n", "return", "\n", "\n", "", "self", ".", "plot_test_data", "[", "'X'", "]", ".", "append", "(", "epoch", ")", "\n", "self", ".", "plot_test_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_test_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "[", "epoch", "]", ")", ",", "(", "1", ",", "2", ")", ")", ",", "\n", "Y", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "self", ".", "plot_test_data", "[", "'Y'", "]", "[", "epoch", "]", ")", ",", "(", "1", ",", "2", ")", ")", ",", "\n", "win", "=", "'test_plot'", ",", "\n", "update", "=", "'append'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util._fast_hist": [[5, 11], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["\n", "def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".png\"", ",", "\".jpg\"", ",", "\".jpeg\"", "]", ")", "\n", "\n", "\n", "", "def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "imread", "(", "filepath", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util.label_accuracy_score": [[13, 32], ["numpy.zeros", "zip", "numpy.nanmean", "numpy.nanmean", "util._fast_hist", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "lt.flatten", "lp.flatten", "numpy.diag", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util._fast_hist"], ["        ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "img", "=", "np", ".", "repeat", "(", "img", ",", "3", ",", "axis", "=", "2", ")", "\n", "", "img", "=", "imresize", "(", "img", ",", "(", "256", ",", "256", ")", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "img", "=", "preprocess_img", "(", "img", ")", "\n", "return", "img", "\n", "\n", "\n", "", "def", "save_img", "(", "img", ",", "filename", ")", ":", "\n", "    ", "img", "=", "deprocess_img", "(", "img", ")", "\n", "img", "=", "img", ".", "numpy", "(", ")", "\n", "img", "*=", "255.0", "\n", "img", "=", "img", ".", "clip", "(", "0", ",", "255", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img", "=", "imresize", "(", "img", ",", "(", "250", ",", "200", ",", "3", ")", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imsave", "(", "filename", ",", "img", ")", "\n", "print", "(", "\"Image saved as {}\"", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util.mkdir": [[34, 37], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "preprocess_img", "(", "img", ")", ":", "\n", "# [0,255] image to [0,1]", "\n", "    ", "min", "=", "img", ".", "min", "(", ")", "\n", "max", "=", "img", ".", "max", "(", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.models.create_seg_model": [[2, 9], ["print", "main_model.MainSegModel", "main_model.MainSegModel.initialize", "print", "main_model.MainSegModel.name"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.name"], ["def", "create_seg_model", "(", "args", ",", "n_class", ")", ":", "\n", "    ", "model", "=", "None", "\n", "print", "(", "args", ".", "generator", ")", "\n", "model", "=", "MainSegModel", "(", ")", "\n", "model", ".", "initialize", "(", "args", ",", "n_class", ")", "\n", "print", "(", "\"model [%s] was created\"", "%", "(", "model", ".", "name", "(", ")", ")", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.UnetGenerator.__init__": [[71, 111], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "torch.Tanh", "torch.Tanh", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.SELU", "torch.SELU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_type", "=", "'batch'", ",", "act_type", "=", "'selu'", ")", ":", "\n", "        ", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'unet'", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv1", "=", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv2", "=", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv6", "=", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "4", "*", "2", ",", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv7", "=", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", "*", "2", ",", "ngf", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv8", "=", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", ",", "output_nc", ",", "4", ",", "2", ",", "1", ")", "\n", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "ngf", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "2", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "4", ")", "\n", "self", ".", "norm8", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "8", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "2", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "4", ")", "\n", "self", ".", "norm8", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "8", ")", "\n", "", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n", "if", "act_type", "==", "'selu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.UnetGenerator.forward": [[112, 161], ["generators.UnetGenerator.conv1", "generators.UnetGenerator.norm2", "generators.UnetGenerator.norm4", "generators.UnetGenerator.norm8", "generators.UnetGenerator.norm8", "generators.UnetGenerator.norm8", "generators.UnetGenerator.norm8", "generators.UnetGenerator.conv8", "generators.UnetGenerator.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGenerator.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGenerator.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGenerator.norm8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGenerator.norm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGenerator.norm2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGenerator.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGenerator.dconv8", "generators.UnetGenerator.tanh", "generators.UnetGenerator.conv2", "generators.UnetGenerator.conv3", "generators.UnetGenerator.conv4", "generators.UnetGenerator.conv5", "generators.UnetGenerator.conv6", "generators.UnetGenerator.conv7", "generators.UnetGenerator.leaky_relu", "generators.UnetGenerator.norm8", "generators.UnetGenerator.norm8", "generators.UnetGenerator.norm8", "generators.UnetGenerator.dconv4", "generators.UnetGenerator.dconv5", "generators.UnetGenerator.dconv6", "generators.UnetGenerator.dconv7", "generators.UnetGenerator.act", "generators.UnetGenerator.leaky_relu", "generators.UnetGenerator.leaky_relu", "generators.UnetGenerator.leaky_relu", "generators.UnetGenerator.leaky_relu", "generators.UnetGenerator.leaky_relu", "generators.UnetGenerator.leaky_relu", "generators.UnetGenerator.dconv1", "generators.UnetGenerator.dconv2", "generators.UnetGenerator.dconv3", "generators.UnetGenerator.act", "generators.UnetGenerator.act", "generators.UnetGenerator.act", "generators.UnetGenerator.act", "generators.UnetGenerator.act", "generators.UnetGenerator.act", "generators.UnetGenerator.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# input is (nc) x 512 x 1024", "\n", "        ", "e1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "# state size is (ngf) x 256 x 512", "\n", "e2", "=", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "self", ".", "leaky_relu", "(", "e1", ")", ")", ")", "\n", "# state size is (ngf x 2) x 128 x 256", "\n", "e3", "=", "self", ".", "norm4", "(", "self", ".", "conv3", "(", "self", ".", "leaky_relu", "(", "e2", ")", ")", ")", "\n", "# state size is (ngf x 4) x 64 x 128", "\n", "e4", "=", "self", ".", "norm8", "(", "self", ".", "conv4", "(", "self", ".", "leaky_relu", "(", "e3", ")", ")", ")", "\n", "# state size is (ngf x 8) x 32 x 64", "\n", "e5", "=", "self", ".", "norm8", "(", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", ")", "\n", "# state size is (ngf x 8) x 16 x 32", "\n", "e6", "=", "self", ".", "norm8", "(", "self", ".", "conv6", "(", "self", ".", "leaky_relu", "(", "e5", ")", ")", ")", "\n", "# state size is (ngf x 8) x 8 x 16", "\n", "e7", "=", "self", ".", "norm8", "(", "self", ".", "conv7", "(", "self", ".", "leaky_relu", "(", "e6", ")", ")", ")", "\n", "# state size is (ngf x 8) x 4 x 8", "\n", "# No batch norm on output of Encoder", "\n", "e8", "=", "self", ".", "conv8", "(", "self", ".", "leaky_relu", "(", "e7", ")", ")", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "# state size is (ngf x 8) x 2 x 4", "\n", "d1_", "=", "self", ".", "dropout", "(", "self", ".", "norm8", "(", "self", ".", "dconv1", "(", "self", ".", "act", "(", "e8", ")", ")", ")", ")", "\n", "# state size is (ngf x 8) x 4 x 8", "\n", "d1", "=", "torch", ".", "cat", "(", "(", "d1_", ",", "e7", ")", ",", "1", ")", "\n", "d2_", "=", "self", ".", "dropout", "(", "self", ".", "norm8", "(", "self", ".", "dconv2", "(", "self", ".", "act", "(", "d1", ")", ")", ")", ")", "\n", "# state size is (ngf x 8) x 8 x 16", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e6", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "dropout", "(", "self", ".", "norm8", "(", "self", ".", "dconv3", "(", "self", ".", "act", "(", "d2", ")", ")", ")", ")", "\n", "# state size is (ngf x 8) x 16 x 32", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e5", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "norm8", "(", "self", ".", "dconv4", "(", "self", ".", "act", "(", "d3", ")", ")", ")", "\n", "# state size is (ngf x 8) x 32 x 64", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e4", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "norm4", "(", "self", ".", "dconv5", "(", "self", ".", "act", "(", "d4", ")", ")", ")", "\n", "# state size is (ngf x 4) x 64 x 128", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "d5_", ",", "e3", ")", ",", "1", ")", "\n", "d6_", "=", "self", ".", "norm2", "(", "self", ".", "dconv6", "(", "self", ".", "act", "(", "d5", ")", ")", ")", "\n", "# state size is (ngf x 2) x 128 x 256", "\n", "d6", "=", "torch", ".", "cat", "(", "(", "d6_", ",", "e2", ")", ",", "1", ")", "\n", "d7_", "=", "self", ".", "norm", "(", "self", ".", "dconv7", "(", "self", ".", "act", "(", "d6", ")", ")", ")", "\n", "# state size is (ngf) x 256 x 512", "\n", "d7", "=", "torch", ".", "cat", "(", "(", "d7_", ",", "e1", ")", ",", "1", ")", "\n", "d8", "=", "self", ".", "dconv8", "(", "self", ".", "act", "(", "d7", ")", ")", "\n", "# state size is (nc) x 512 x 1024", "\n", "output", "=", "self", ".", "tanh", "(", "d8", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.ResnetGenerator.__init__": [[164, 260], ["torch.Module.__init__", "len", "range", "torch.Sequential", "torch.Sequential", "generators.ResnetGenerator.model0.cuda", "torch.SELU", "torch.SELU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "range", "range", "range", "torch.Sequential", "torch.Sequential", "generators.ResnetGenerator.model1.cuda", "torch.Sequential", "torch.Sequential", "generators.ResnetGenerator.model2.cuda", "torch.Conv2d", "torch.Conv2d", "norm_layer", "int", "range", "range", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "generators.ResnetBlock", "int", "range", "range", "range", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "generators.ResnetBlock", "generators.ResnetBlock", "int", "int", "int", "int", "int", "generators.ResnetBlock", "generators.ResnetBlock", "generators.ResnetBlock"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_type", ",", "act_type", "=", "'selu'", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "'resnet'", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "gpulist", "=", "gpu_ids", "\n", "self", ".", "num_gpus", "=", "len", "(", "self", ".", "gpulist", ")", "\n", "\n", "use_bias", "=", "norm_type", "==", "'instance'", "\n", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "if", "act_type", "==", "'selu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "", "model0", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "self", ".", "act", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model0", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "self", ".", "act", "]", "\n", "\n", "", "if", "self", ".", "num_gpus", "==", "1", ":", "\n", "            ", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "                ", "model0", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "", "", "elif", "self", ".", "num_gpus", "==", "2", ":", "\n", "            ", "model1", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "mid", "=", "int", "(", "n_blocks", "/", "2", ")", "\n", "for", "i", "in", "range", "(", "mid", ")", ":", "\n", "                ", "model0", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "", "for", "i", "in", "range", "(", "n_blocks", "-", "mid", ")", ":", "\n", "                ", "model1", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "", "", "elif", "self", ".", "num_gpus", "==", "3", ":", "\n", "            ", "model1", "=", "[", "]", "\n", "model2", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "mid1", "=", "int", "(", "n_blocks", "/", "5", ")", "\n", "mid2", "=", "mid1", "+", "int", "(", "(", "n_blocks", "-", "mid1", ")", "/", "4.0", "*", "3", ")", "\n", "# mid = int(n_blocks / 2)", "\n", "for", "i", "in", "range", "(", "mid1", ")", ":", "\n", "                ", "model0", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "", "for", "i", "in", "range", "(", "mid1", ",", "mid2", ")", ":", "\n", "                ", "model2", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "", "for", "i", "in", "range", "(", "mid2", ",", "n_blocks", ")", ":", "\n", "                ", "model1", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "", "if", "self", ".", "num_gpus", ">=", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "                ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model1", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "self", ".", "act", "]", "\n", "", "model1", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model1", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model1", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "                ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model0", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "self", ".", "act", "]", "\n", "", "model0", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model0", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model0", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "", "self", ".", "model0", "=", "nn", ".", "Sequential", "(", "*", "model0", ")", "\n", "self", ".", "model0", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "if", "self", ".", "num_gpus", "==", "2", ":", "\n", "            ", "self", ".", "model1", "=", "nn", ".", "Sequential", "(", "*", "model1", ")", "\n", "self", ".", "model1", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "", "if", "self", ".", "num_gpus", "==", "3", ":", "\n", "            ", "self", ".", "model2", "=", "nn", ".", "Sequential", "(", "*", "model2", ")", "\n", "self", ".", "model2", ".", "cuda", "(", "self", ".", "gpulist", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.ResnetGenerator.forward": [[261, 271], ["generators.ResnetGenerator.cuda", "generators.ResnetGenerator.model0", "generators.ResnetGenerator.cuda", "generators.ResnetGenerator.model2", "generators.ResnetGenerator.cuda", "generators.ResnetGenerator.model1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "input", "=", "self", ".", "model0", "(", "input", ")", "\n", "if", "self", ".", "num_gpus", "==", "3", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "self", ".", "gpulist", "[", "2", "]", ")", "\n", "input", "=", "self", ".", "model2", "(", "input", ")", "\n", "", "if", "self", ".", "num_gpus", "==", "2", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "input", "=", "self", ".", "model1", "(", "input", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.ResnetBlock.__init__": [[275, 278], ["torch.Module.__init__", "generators.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.ResnetBlock.build_conv_block": [[279, 310], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.ResnetBlock.forward": [[311, 314], ["generators.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.UnetGeneratorSC.__init__": [[317, 359], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Dropout", "torch.Dropout", "torch.Tanh", "torch.Tanh", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.SELU", "torch.SELU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_type", "=", "'batch'", ",", "act_type", "=", "'selu'", ")", ":", "\n", "        ", "super", "(", "UnetGeneratorSC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'unetsc'", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "4", ",", "2", ",", "1", ")", "\n", "self", ".", "dconv0", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv1", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv2", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv3", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv4", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv5", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "4", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv6", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "4", "*", "2", ",", "ngf", "*", "2", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv7", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", "*", "2", ",", "ngf", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "dconv8", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "output_nc", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "ngf", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "2", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "4", ")", "\n", "self", ".", "norm8", "=", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "8", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "2", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "4", ")", "\n", "self", ".", "norm8", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "8", ")", "\n", "", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "self", ".", "upsamp", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "if", "act_type", "==", "'selu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.UnetGeneratorSC.forward": [[360, 412], ["generators.UnetGeneratorSC.conv1", "generators.UnetGeneratorSC.norm2", "generators.UnetGeneratorSC.norm4", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.conv9", "generators.UnetGeneratorSC.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGeneratorSC.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGeneratorSC.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGeneratorSC.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGeneratorSC.norm8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGeneratorSC.norm4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGeneratorSC.norm2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGeneratorSC.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetGeneratorSC.dconv8", "generators.UnetGeneratorSC.tanh", "generators.UnetGeneratorSC.conv2", "generators.UnetGeneratorSC.conv3", "generators.UnetGeneratorSC.conv4", "generators.UnetGeneratorSC.conv5", "generators.UnetGeneratorSC.conv6", "generators.UnetGeneratorSC.conv7", "generators.UnetGeneratorSC.conv8", "generators.UnetGeneratorSC.leaky_relu", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.norm8", "generators.UnetGeneratorSC.dconv4", "generators.UnetGeneratorSC.dconv5", "generators.UnetGeneratorSC.dconv6", "generators.UnetGeneratorSC.dconv7", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.leaky_relu", "generators.UnetGeneratorSC.leaky_relu", "generators.UnetGeneratorSC.leaky_relu", "generators.UnetGeneratorSC.leaky_relu", "generators.UnetGeneratorSC.leaky_relu", "generators.UnetGeneratorSC.leaky_relu", "generators.UnetGeneratorSC.leaky_relu", "generators.UnetGeneratorSC.dconv0", "generators.UnetGeneratorSC.dconv1", "generators.UnetGeneratorSC.dconv2", "generators.UnetGeneratorSC.dconv3", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.act", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.upsamp", "generators.UnetGeneratorSC.act", "generators.UnetGeneratorSC.act", "generators.UnetGeneratorSC.act", "generators.UnetGeneratorSC.act", "generators.UnetGeneratorSC.act", "generators.UnetGeneratorSC.act", "generators.UnetGeneratorSC.act", "generators.UnetGeneratorSC.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoder", "\n", "# Convolution layers:", "\n", "# input is (nc) x 512 x 1024", "\n", "        ", "e1", "=", "self", ".", "conv1", "(", "input", ")", "\n", "# state size is (ngf) x 256 x 512", "\n", "e2", "=", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "self", ".", "leaky_relu", "(", "e1", ")", ")", ")", "\n", "# state size is (ngf x 2) x 128 x 256", "\n", "e3", "=", "self", ".", "norm4", "(", "self", ".", "conv3", "(", "self", ".", "leaky_relu", "(", "e2", ")", ")", ")", "\n", "# state size is (ngf x 4) x 64 x 128", "\n", "e4", "=", "self", ".", "norm8", "(", "self", ".", "conv4", "(", "self", ".", "leaky_relu", "(", "e3", ")", ")", ")", "\n", "# state size is (ngf x 8) x 32 x 64", "\n", "e5", "=", "self", ".", "norm8", "(", "self", ".", "conv5", "(", "self", ".", "leaky_relu", "(", "e4", ")", ")", ")", "\n", "# state size is (ngf x 8) x 16 x 32", "\n", "e6", "=", "self", ".", "norm8", "(", "self", ".", "conv6", "(", "self", ".", "leaky_relu", "(", "e5", ")", ")", ")", "\n", "# state size is (ngf x 8) x 8 x 16", "\n", "e7", "=", "self", ".", "norm8", "(", "self", ".", "conv7", "(", "self", ".", "leaky_relu", "(", "e6", ")", ")", ")", "\n", "# state size is (ngf x 8) x 4 x 8", "\n", "# No batch norm on output of Encoder", "\n", "e8", "=", "self", ".", "norm8", "(", "self", ".", "conv8", "(", "self", ".", "leaky_relu", "(", "e7", ")", ")", ")", "\n", "e9", "=", "self", ".", "conv9", "(", "self", ".", "leaky_relu", "(", "e8", ")", ")", "\n", "\n", "# Decoder", "\n", "# Deconvolution layers:", "\n", "# state size is (ngf x 8) x 2 x 4", "\n", "d0_", "=", "self", ".", "dropout", "(", "self", ".", "norm8", "(", "self", ".", "dconv0", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "e9", ")", ")", ")", ")", ")", "\n", "d0_", "=", "torch", ".", "cat", "(", "(", "d0", ",", "e8", ")", ",", "1", ")", "\n", "d1_", "=", "self", ".", "dropout", "(", "self", ".", "norm8", "(", "self", ".", "dconv1", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "d0", ")", ")", ")", ")", ")", "\n", "# state size is (ngf x 8) x 4 x 8", "\n", "d1", "=", "torch", ".", "cat", "(", "(", "d1_", ",", "e7", ")", ",", "1", ")", "\n", "d2_", "=", "self", ".", "dropout", "(", "self", ".", "norm8", "(", "self", ".", "dconv2", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "d1", ")", ")", ")", ")", ")", "\n", "# state size is (ngf x 8) x 8 x 16", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "d2_", ",", "e6", ")", ",", "1", ")", "\n", "d3_", "=", "self", ".", "dropout", "(", "self", ".", "norm8", "(", "self", ".", "dconv3", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "d2", ")", ")", ")", ")", ")", "\n", "# state size is (ngf x 8) x 16 x 32", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "d3_", ",", "e5", ")", ",", "1", ")", "\n", "d4_", "=", "self", ".", "norm8", "(", "self", ".", "dconv4", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "d3", ")", ")", ")", ")", "\n", "# state size is (ngf x 8) x 32 x 64", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "d4_", ",", "e4", ")", ",", "1", ")", "\n", "d5_", "=", "self", ".", "norm4", "(", "self", ".", "dconv5", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "d4", ")", ")", ")", ")", "\n", "# state size is (ngf x 4) x 64 x 128", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "d5_", ",", "e3", ")", ",", "1", ")", "\n", "d6_", "=", "self", ".", "norm2", "(", "self", ".", "dconv6", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "d5", ")", ")", ")", ")", "\n", "# state size is (ngf x 2) x 128 x 256", "\n", "d6", "=", "torch", ".", "cat", "(", "(", "d6_", ",", "e2", ")", ",", "1", ")", "\n", "d7_", "=", "self", ".", "norm", "(", "self", ".", "dconv7", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "d6", ")", ")", ")", ")", "\n", "# state size is (ngf) x 256 x 512", "\n", "d7", "=", "torch", ".", "cat", "(", "(", "d7_", ",", "e1", ")", ",", "1", ")", "\n", "d8", "=", "self", ".", "dconv8", "(", "self", ".", "upsamp", "(", "self", ".", "act", "(", "d7", ")", ")", ")", "\n", "# state size is (nc) x 512 x 1024", "\n", "output", "=", "self", ".", "tanh", "(", "d8", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.RecursiveUnetGenerator.__init__": [[419, 446], ["torch.Module.__init__", "generators.UnetSkipConnectionBlock", "range", "generators.UnetSkipConnectionBlock", "generators.UnetSkipConnectionBlock", "generators.UnetSkipConnectionBlock", "generators.UnetSkipConnectionBlock", "torch.SELU", "torch.SELU", "torch.ReLU", "torch.ReLU", "generators.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", ",", "norm_type", ",", "\n", "act_type", "=", "'selu'", ",", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "RecursiveUnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'unet-rec'", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "if", "act_type", "==", "'selu'", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "# construct unet structure", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "self", ".", "act", ",", "self", ".", "gpu_ids", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "self", ".", "act", ",", "self", ".", "gpu_ids", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "self", ".", "act", ",", "self", ".", "gpu_ids", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "self", ".", "act", ",", "self", ".", "gpu_ids", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "self", ".", "act", ",", "self", ".", "gpu_ids", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "self", ".", "act", ",", "self", ".", "gpu_ids", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "model", "=", "unet_block", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.RecursiveUnetGenerator.forward": [[447, 452], ["generators.RecursiveUnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# if self.gpu_ids and isinstance(input.data, torch.cuda.FloatTensor):", "\n", "#     return nn.parallel.data_parallel(self.model, input, self.gpu_ids)", "\n", "# else:", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.UnetSkipConnectionBlock.__init__": [[458, 511], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "norm_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sequential", "torch.Sequential", "generators.UnetSkipConnectionBlock.model0.cuda", "generators.UnetSkipConnectionBlock.model1.cuda", "torch.Sequential", "torch.Sequential", "generators.UnetSkipConnectionBlock.model2.cuda", "torch.Sequential", "torch.Sequential", "generators.UnetSkipConnectionBlock.model.cuda", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "act", ",", "gpu_ids", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpulist", "=", "gpu_ids", "\n", "use_bias", "=", "norm_layer", "==", "'instance'", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "\n", "", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "act", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "if", "self", ".", "outermost", ":", "\n", "            ", "self", ".", "model0", "=", "nn", ".", "Sequential", "(", "*", "down", ")", "\n", "self", ".", "model0", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "model1", "=", "submodule", "\n", "self", ".", "model1", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "self", ".", "model2", "=", "nn", ".", "Sequential", "(", "*", "up", ")", "\n", "self", ".", "model2", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "self", ".", "model", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.UnetSkipConnectionBlock.forward": [[512, 521], ["x.cuda.cuda.cuda", "generators.UnetSkipConnectionBlock.model0().cuda", "generators.UnetSkipConnectionBlock.model1().cuda", "generators.UnetSkipConnectionBlock.model2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generators.UnetSkipConnectionBlock.model0", "generators.UnetSkipConnectionBlock.model1", "generators.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "x0", "=", "self", ".", "model0", "(", "x", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "x1", "=", "self", ".", "model1", "(", "x0", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "x2", "=", "self", ".", "model2", "(", "x1", ")", "\n", "return", "x2", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.weights_init": [[10, 23], ["classname.find", "hasattr", "float", "m.weight.data.normal_", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "math.sqrt"], "function", ["None"], ["def", "weights_init", "(", "m", ",", "act_type", "=", "'relu'", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "act_type", "==", "'selu'", ":", "\n", "            ", "n", "=", "float", "(", "m", ".", "in_channels", "*", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "1.0", "/", "math", ".", "sqrt", "(", "n", ")", ")", "\n", "", "else", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "if", "hasattr", "(", "m", ".", "bias", ",", "'data'", ")", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.get_scheduler": [[24, 43], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "NotImplementedError", "int", "int", "int"], "function", ["None"], ["", "", "def", "get_scheduler", "(", "optimizer", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "(", "(", "0.5", "**", "int", "(", "epoch", ">=", "2", ")", ")", "*", "\n", "(", "0.5", "**", "int", "(", "epoch", ">=", "5", ")", ")", "*", "\n", "(", "0.5", "**", "int", "(", "epoch", ">=", "8", ")", ")", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "args", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "args", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", "\n", ")", "\n", "", "elif", "args", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "args", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.define": [[45, 68], ["generators.weights_init", "len", "torch.cuda.is_available", "torch.cuda.is_available", "generators.UnetGenerator", "ResnetGenerator.cuda", "generators.UnetGeneratorSC", "ResnetGenerator.cuda", "generators.RecursiveUnetGenerator", "generators.ResnetGenerator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.weights_init"], ["", "def", "define", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "gen_type", ",", "norm", "=", "'instance'", ",", "\n", "act", "=", "'selu'", ",", "block", "=", "9", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "network", "=", "None", "\n", "use_gpu", "=", "len", "(", "gpu_ids", ")", ">", "0", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "\n", "", "if", "gen_type", "==", "'unet'", ":", "\n", "        ", "network", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm", ",", "act", ")", "\n", "network", ".", "cuda", "(", "device_id", "=", "gpu_ids", "[", "1", "]", ")", "\n", "", "elif", "gen_type", "==", "'unet-sc'", ":", "\n", "        ", "network", "=", "UnetGeneratorSC", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm", ",", "act", ")", "\n", "network", ".", "cuda", "(", "device_id", "=", "gpu_ids", "[", "1", "]", ")", "\n", "", "elif", "gen_type", "==", "'unet-rec'", ":", "\n", "        ", "network", "=", "RecursiveUnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm", ",", "act", ",", "use_dropout", "=", "False", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "elif", "gen_type", "==", "'resnet'", ":", "\n", "        ", "network", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm", ",", "act", ",", "use_dropout", "=", "True", ",", "n_blocks", "=", "block", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [{}] is not recognized'", ".", "format", "(", "gen_type", ")", ")", "\n", "\n", "", "weights_init", "(", "network", ",", "act", ")", "\n", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.cityscapes_fcn8s.LambdaBase.__init__": [[8, 11], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaBase", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.cityscapes_fcn8s.LambdaBase.forward_prepare": [[12, 17], ["cityscapes_fcn8s.LambdaBase._modules.values", "output.append", "module"], "methods", ["None"], ["", "def", "forward_prepare", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "output", ".", "append", "(", "module", "(", "input", ")", ")", "\n", "", "return", "output", "if", "output", "else", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.cityscapes_fcn8s.Lambda.forward": [[19, 21], ["cityscapes_fcn8s.Lambda.lambda_func", "cityscapes_fcn8s.Lambda.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.cityscapes_fcn8s.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "lambda_func", "(", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.cityscapes_fcn8s.LambdaMap.forward": [[23, 25], ["list", "map", "cityscapes_fcn8s.LambdaMap.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.cityscapes_fcn8s.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.cityscapes_fcn8s.LambdaReduce.forward": [[27, 29], ["functools.reduce", "cityscapes_fcn8s.LambdaReduce.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.cityscapes_fcn8s.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "reduce", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.initialize": [[9, 16], ["os.path.join"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "args", ".", "isTrain", "\n", "self", ".", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "self", ".", "LongTensor", "=", "torch", ".", "cuda", ".", "LongTensor", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints_dir", ",", "args", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.set_input": [[17, 19], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.forward": [[20, 22], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.test": [[24, 26], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.get_image_paths": [[27, 29], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.optimize_parameters": [[30, 32], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.get_current_visuals": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.get_current_errors": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save": [[39, 41], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save_network": [[43, 49], ["os.path.join", "torch.save", "network.cpu().state_dict", "len", "torch.cuda.is_available", "network.cuda", "network.cpu"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'{}_net_{}.pth'", ".", "format", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", "device_id", "=", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.load_network": [[51, 55], ["os.path.join", "network.load_state_dict", "torch.load"], "methods", ["None"], ["", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'{}_net_{}.pth'", ".", "format", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.base_model.BaseModel.update_learning_rate": [[57, 62], ["print", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.name": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'MainSegModel-{}'", ".", "format", "(", "self", ".", "generator", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.move_cuda": [[18, 21], ["torch.nn.MSELoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["", "def", "move_cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "criterion_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "criterion_pre", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.train": [[22, 39], ["main_model.MainSegModel.generator.eval", "torch.autograd.Variable().cuda", "main_model.MainSegModel.generator.train", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.train"], ["", "def", "train", "(", "self", ",", "isTrain", ")", ":", "\n", "        ", "self", ".", "isTrain", "=", "isTrain", "\n", "if", "isTrain", "is", "False", ":", "\n", "            ", "self", ".", "generator", ".", "eval", "(", ")", "\n", "self", ".", "generator", ".", "volatile", "=", "True", "\n", "self", ".", "lbl_trues", "=", "[", "]", "\n", "self", ".", "lbl_preds", "=", "[", "]", "\n", "self", ".", "losses", "=", "0", "\n", "if", "self", ".", "isUniversal", ":", "\n", "                ", "self", ".", "noise", "=", "Variable", "(", "self", ".", "noise_cpu", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "", "self", ".", "real", "=", "Variable", "(", "self", ".", "real_shape", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "generator", ".", "train", "(", ")", "\n", "self", ".", "generator", ".", "volatile", "=", "False", "\n", "if", "self", ".", "isUniversal", ":", "\n", "                ", "self", ".", "noise", "=", "Variable", "(", "self", ".", "noise_cpu", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "", "self", ".", "real", "=", "Variable", "(", "self", ".", "real_shape", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.initialize": [[52, 130], ["base_model.BaseModel.initialize", "numpy.random.permutation", "torch.FloatTensor", "generators.define", "main_model.MainSegModel.pretrained_model.eval", "main_model.MainSegModel.pretrained_model.cuda", "torch.optim.Adam", "main_model.MainSegModel.optimizers.append", "torch.nn.MSELoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torchfcn.models.FCN8sAtOnce", "torch.nn.DataParallel", "torch.load", "main_model.MainSegModel.pretrained_model.load_state_dict", "main_model.MainSegModel.generator.parameters", "main_model.MainSegModel.schedulers.append", "torch.rand", "main_model.MainSegModel.noise_cpu.mul_().add_", "torch.LongTensor", "torch.autograd.Variable", "args.target_path.format", "utils.image_transform.process_lbl_file", "torch.from_numpy().long", "class_label.clone().repeat.clone().repeat.clone().repeat", "main_model.MainSegModel.target.data.resize_().copy_", "main_model.MainSegModel.target.cuda", "torchfcn.models.FCN8s", "torch.load", "main_model.MainSegModel.pretrained_model.load_state_dict", "generators.get_scheduler", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "main_model.MainSegModel.noise_cpu.mul_", "torch.from_numpy", "class_label.clone().repeat.clone().repeat.clone", "main_model.MainSegModel.target.data.resize_", "class_label.clone().repeat.clone().repeat.size"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.define", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.process_lbl_file", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.get_scheduler"], ["def", "initialize", "(", "self", ",", "args", ",", "n_class", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "args", ")", "\n", "\n", "self", ".", "gpulist", "=", "args", ".", "gpu_ids", "\n", "self", ".", "task", "=", "args", ".", "task", "\n", "self", ".", "metric_type", "=", "args", ".", "metric", "\n", "self", ".", "dataset", "=", "args", ".", "dataset", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "# coefficient for two losses", "\n", "self", ".", "mapping", "=", "np", ".", "random", ".", "permutation", "(", "n_class", ")", "\n", "\n", "self", ".", "isTarget", "=", "self", ".", "task", "==", "1", "or", "self", ".", "task", "==", "3", "\n", "self", ".", "isUniversal", "=", "self", ".", "task", "==", "2", "or", "self", ".", "task", "==", "3", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "real_shape", "=", "torch", ".", "FloatTensor", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "output_nc", ",", "256", ",", "256", "\n", ")", "\n", "\n", "# set up the generator based on the arguments", "\n", "self", ".", "generator", "=", "generators", ".", "define", "(", "args", ".", "input_nc", ",", "args", ".", "output_nc", ",", "\n", "args", ".", "ngf", ",", "args", ".", "generator", ",", "\n", "args", ".", "norm", ",", "args", ".", "activation", ",", "\n", "args", ".", "block", ",", "self", ".", "gpulist", ")", "\n", "\n", "# set up different pretrained model for different dataset", "\n", "if", "self", ".", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "self", ".", "pretrained_model", "=", "torchfcn", ".", "models", ".", "FCN8sAtOnce", "(", "n_class", "=", "20", ")", "\n", "self", ".", "pretrained_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "pretrained_model", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_cityscapes", ")", "\n", "self", ".", "pretrained_model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'pascalvoc'", ":", "\n", "            ", "self", ".", "pretrained_model", "=", "torchfcn", ".", "models", ".", "FCN8s", "(", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_pascalvoc", ")", "\n", "self", ".", "pretrained_model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "", "self", ".", "pretrained_model", "=", "self", ".", "pretrained_model", ".", "eval", "(", ")", "\n", "self", ".", "pretrained_model", ".", "volatile", "=", "True", "\n", "self", ".", "pretrained_model", "=", "self", ".", "pretrained_model", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n", "# set up the optimizers", "\n", "# add optimizer to scheduler (modify learning rate)", "\n", "self", ".", "optimizerG", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "generator", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "(", "args", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizerG", ")", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "            ", "self", ".", "schedulers", ".", "append", "(", "generators", ".", "get_scheduler", "(", "optimizer", ",", "args", ")", ")", "\n", "\n", "# set up the criterions", "\n", "", "self", ".", "criterion_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "criterion_pre", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "isUniversal", ":", "\n", "# set noise for universal tasks", "\n", "            ", "self", ".", "noise_cpu", "=", "torch", ".", "rand", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "input_nc", ",", "\n", "args", ".", "resolution", "/", "2", ",", "args", ".", "resolution", "\n", ")", "\n", "self", ".", "noise_cpu", ".", "mul_", "(", "2.0", ")", ".", "add_", "(", "-", "1.0", ")", "\n", "self", ".", "eps", "=", "args", ".", "eps", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "dataset", "==", "'pascalvoc'", ":", "\n", "                ", "self", ".", "eps", "=", "args", ".", "eps", "\n", "", "elif", "args", ".", "dataset", "==", "'cityscapes'", ":", "\n", "                ", "self", ".", "eps", "=", "args", ".", "eps", "\n", "\n", "", "", "if", "self", ".", "isTarget", ":", "\n", "# set the target for the cityscapes universal targeted task", "\n", "            ", "self", ".", "target", "=", "torch", ".", "LongTensor", "(", "args", ".", "batch_size", ")", "\n", "self", ".", "target", "=", "Variable", "(", "self", ".", "target", ",", "requires_grad", "=", "False", ")", "\n", "class_label", "=", "args", ".", "target_path", ".", "format", "(", "args", ".", "resolution", ")", "\n", "class_label", "=", "it", ".", "process_lbl_file", "(", "class_label", ")", "\n", "class_label", "=", "torch", ".", "from_numpy", "(", "class_label", ")", ".", "long", "(", ")", "\n", "class_label", "=", "class_label", ".", "clone", "(", ")", ".", "repeat", "(", "args", ".", "batch_size", ",", "1", ",", "1", ")", "\n", "self", ".", "target", ".", "data", ".", "resize_", "(", "class_label", ".", "size", "(", ")", ")", ".", "copy_", "(", "class_label", ")", "\n", "self", ".", "target", "=", "self", ".", "target", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.set_input": [[133, 136], ["main_model.MainSegModel.real.data.resize_().copy_", "main_model.MainSegModel.real.data.resize_", "main_model.MainSegModel.real_cpu.size"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "real_cpu", ",", "self", ".", "class_label", "=", "input", "\n", "self", ".", "real", ".", "data", ".", "resize_", "(", "self", ".", "real_cpu", ".", "size", "(", ")", ")", ".", "copy_", "(", "self", ".", "real_cpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.forward": [[137, 172], ["main_model.MainSegModel.real.size", "torch.add", "main_model.MainSegModel.fake.cpu", "main_model.MainSegModel.pretrained_model", "main_model.MainSegModel.real.cuda", "main_model.MainSegModel.generator().cuda", "main_model.MainSegModel.real.cuda", "utils.image_transform.inf_norm_adjust", "main_model.MainSegModel.generator().cuda", "utils.image_transform.inf_norm_adjust", "utils.image_transform.untransform", "utils.image_transform.transform", "[].cpu().numpy", "main_model.MainSegModel.class_label.numpy", "torch.log", "main_model.MainSegModel.target.data.cpu().numpy", "zip", "torch.log", "main_model.MainSegModel.criterion_pre", "main_model.MainSegModel.lbl_trues.append", "main_model.MainSegModel.lbl_preds.append", "main_model.MainSegModel.generator", "main_model.MainSegModel.generator", "[].cpu", "main_model.MainSegModel.criterion_pre", "main_model.MainSegModel.target.data.cpu", "torch.autograd.Variable", "main_model.MainSegModel.class_label.cuda", "main_model.MainSegModel.score.data.max"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.inf_norm_adjust", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.inf_norm_adjust", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.untransform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "isUniversal", "is", "False", ":", "\n", "            ", "self", ".", "real", "=", "self", ".", "real", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "self", ".", "delta", "=", "self", ".", "generator", "(", "self", ".", "real", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "real", "=", "self", ".", "real", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "delta", "=", "it", ".", "inf_norm_adjust", "(", "self", ".", "delta", ",", "self", ".", "eps", "/", "128.0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "delta", "=", "self", ".", "generator", "(", "self", ".", "noise", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "delta", "=", "it", ".", "inf_norm_adjust", "(", "self", ".", "delta", ",", "self", ".", "eps", "/", "128.0", ")", "\n", "\n", "# crop the delta", "\n", "", "_", ",", "_", ",", "w", ",", "h", "=", "self", ".", "real", ".", "size", "(", ")", "\n", "self", ".", "delta", "=", "self", ".", "delta", "[", ":", ",", ":", ",", "0", ":", "w", ",", "0", ":", "h", "]", "\n", "\n", "self", ".", "fake", "=", "torch", ".", "add", "(", "self", ".", "real", ",", "self", ".", "delta", ")", "\n", "self", ".", "fake_cpu", "=", "self", ".", "fake", ".", "cpu", "(", ")", "\n", "for", "fake_img", "in", "self", ".", "fake", ".", "data", ":", "\n", "            ", "fake_img", "=", "it", ".", "untransform", "(", "fake_img", ",", "None", ",", "1", ",", "self", ".", "dataset", ")", "\n", "", "for", "fake_img", "in", "self", ".", "fake", ".", "data", ":", "\n", "            ", "fake_img", "=", "it", ".", "transform", "(", "fake_img", ",", "None", ",", "2", ",", "self", ".", "dataset", ")", "\n", "", "self", ".", "score", "=", "self", ".", "pretrained_model", "(", "self", ".", "fake", ")", "\n", "self", ".", "lbl_pred", "=", "self", ".", "score", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "isTarget", "is", "False", ":", "\n", "            ", "self", ".", "loss", "=", "-", "1", "*", "torch", ".", "log", "(", "self", ".", "criterion_pre", "(", "self", ".", "score", ",", "Variable", "(", "self", ".", "class_label", ".", "cuda", "(", ")", ")", ")", ")", "\n", "self", ".", "lbl_true", "=", "self", ".", "class_label", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "torch", ".", "log", "(", "self", ".", "criterion_pre", "(", "self", ".", "score", ",", "self", ".", "target", ")", ")", "\n", "self", ".", "lbl_true", "=", "self", ".", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "self", ".", "isTrain", "is", "False", ":", "\n", "            ", "for", "lt", ",", "lp", "in", "zip", "(", "self", ".", "lbl_true", ",", "self", ".", "lbl_pred", ")", ":", "\n", "                ", "self", ".", "lbl_trues", ".", "append", "(", "lt", ")", "\n", "self", ".", "lbl_preds", ".", "append", "(", "lp", ")", "\n", "", "self", ".", "losses", "+=", "self", ".", "loss", ".", "data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.backward": [[173, 176], ["main_model.MainSegModel.loss.backward", "main_model.MainSegModel.optimizerG.step"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.backward"], ["", "", "def", "backward", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizerG", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.optimize_parameters": [[177, 182], ["main_model.MainSegModel.forward", "main_model.MainSegModel.generator.zero_grad", "main_model.MainSegModel.backward"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.forward", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.backward"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "generator", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.get_current_errors": [[183, 199], ["collections.OrderedDict", "collections.OrderedDict", "utils.util.label_accuracy_score", "utils.util.label_accuracy_score", "main_model.MainSegModel.metric.item", "main_model.MainSegModel.metric.item", "float"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util.label_accuracy_score", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util.label_accuracy_score"], ["", "", "def", "get_current_errors", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "metric", "=", "util", ".", "label_accuracy_score", "(", "\n", "self", ".", "lbl_true", ",", "self", ".", "lbl_pred", ",", "self", ".", "n_class", "\n", ")", "[", "self", ".", "metric_type", "]", "\n", "return", "OrderedDict", "(", "[", "\n", "(", "'loss'", ",", "self", ".", "loss", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'acc'", ",", "self", ".", "metric", ".", "item", "(", ")", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "metric", "=", "util", ".", "label_accuracy_score", "(", "\n", "self", ".", "lbl_trues", ",", "self", ".", "lbl_preds", ",", "self", ".", "n_class", "\n", ")", "[", "self", ".", "metric_type", "]", "\n", "return", "OrderedDict", "(", "[", "\n", "(", "'loss'", ",", "self", ".", "losses", "/", "float", "(", "size", "+", "1", ")", ")", ",", "\n", "(", "'acc'", ",", "self", ".", "metric", ".", "item", "(", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.get_current_visuals": [[201, 227], ["main_model.MainSegModel.real.clone", "main_model.MainSegModel.pretrained_model", "main_model.MainSegModel.real_cpu.squeeze_", "main_model.MainSegModel.delta.data.cpu().squeeze_", "main_model.MainSegModel.fake_cpu.data.squeeze_", "utils.image_transform.transform_pred_res", "utils.image_transform.transform_pred_res", "utils.image_transform.transform_pred_res", "utils.image_transform.untransform", "utils.image_transform.untransform", "utils.image_transform.untransform", "collections.OrderedDict", "utils.image_transform.untransform", "utils.image_transform.transform", "[].cpu().numpy", "main_model.MainSegModel.delta.data.cpu", "[].cpu", "utils.image_transform.save_transform", "utils.image_transform.save_transform", "utils.image_transform.save_transform", "main_model.MainSegModel.real_score.data.max"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.transform_pred_res", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.transform_pred_res", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.transform_pred_res", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.untransform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.untransform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.untransform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.untransform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.save_transform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.save_transform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.save_transform"], ["", "", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "# get the original prediction", "\n", "        ", "self", ".", "real_clone", "=", "self", ".", "real", ".", "clone", "(", ")", "\n", "for", "real_img", "in", "self", ".", "real_clone", ".", "data", ":", "\n", "            ", "real_img", "=", "it", ".", "untransform", "(", "real_img", ",", "None", ",", "1", ",", "self", ".", "dataset", ")", "\n", "", "for", "real_img", "in", "self", ".", "real_clone", ".", "data", ":", "\n", "            ", "real_img", "=", "it", ".", "transform", "(", "real_img", ",", "None", ",", "2", ",", "self", ".", "dataset", ")", "\n", "", "self", ".", "real_score", "=", "self", ".", "pretrained_model", "(", "self", ".", "real_clone", ")", "\n", "self", ".", "real_lbl_pred", "=", "self", ".", "real_score", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", "]", "\n", "\n", "self", ".", "real_cpu", "=", "self", ".", "real_cpu", ".", "squeeze_", "(", ")", "\n", "self", ".", "delta_cpu", "=", "self", ".", "delta", ".", "data", ".", "cpu", "(", ")", ".", "squeeze_", "(", ")", "\n", "self", ".", "fake_cpu", "=", "self", ".", "fake_cpu", ".", "data", ".", "squeeze_", "(", ")", "\n", "self", ".", "lbl_pred_cpu", "=", "it", ".", "transform_pred_res", "(", "self", ".", "lbl_pred", "[", "0", "]", ",", "self", ".", "dataset", ")", "\n", "self", ".", "lbl_true_cpu", "=", "it", ".", "transform_pred_res", "(", "self", ".", "lbl_true", "[", "0", "]", ",", "self", ".", "dataset", ")", "\n", "self", ".", "real_lbl_pred_cpu", "=", "it", ".", "transform_pred_res", "(", "self", ".", "real_lbl_pred", "[", "0", "]", ",", "self", ".", "dataset", ")", "\n", "self", ".", "real_cpu", "=", "it", ".", "untransform", "(", "self", ".", "real_cpu", ",", "None", ",", "1", ",", "self", ".", "dataset", ")", "\n", "self", ".", "delta_cpu", "=", "it", ".", "untransform", "(", "self", ".", "delta_cpu", ",", "None", ",", "1", ",", "self", ".", "dataset", ")", "\n", "self", ".", "fake_cpu", "=", "it", ".", "untransform", "(", "self", ".", "fake_cpu", ",", "None", ",", "1", ",", "self", ".", "dataset", ")", "\n", "return", "OrderedDict", "(", "[", "\n", "(", "'real'", ",", "it", ".", "save_transform", "(", "self", ".", "real_cpu", ")", ")", ",", "\n", "(", "'delta'", ",", "it", ".", "save_transform", "(", "self", ".", "delta_cpu", ")", ")", ",", "\n", "(", "'fake'", ",", "it", ".", "save_transform", "(", "self", ".", "fake_cpu", ")", ")", ",", "\n", "(", "'pred'", ",", "self", ".", "lbl_pred_cpu", ")", ",", "\n", "(", "'groundtruth'", ",", "self", ".", "lbl_true_cpu", ")", ",", "\n", "(", "'ori_pred'", ",", "self", ".", "real_lbl_pred_cpu", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.l2_loss": [[229, 237], ["torch.nn.MSELoss", "torch.FloatTensor().zero_", "torch.autograd.Variable().cuda", "torch.nn.MSELoss.", "torch.sqrt", "torch.FloatTensor", "torch.autograd.Variable", "tensor.size"], "methods", ["None"], ["", "def", "l2_loss", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "crt", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "base", "=", "torch", ".", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "base", "=", "Variable", "(", "base", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "crt", "(", "tensor", ",", "base", ")", "\n", "loss", "=", "loss", "*", "3", "\n", "loss", "=", "torch", ".", "sqrt", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.l3_loss": [[238, 244], ["torch.nn.MSELoss", "torch.FloatTensor().zero_", "torch.autograd.Variable().cuda", "torch.nn.MSELoss.", "torch.FloatTensor", "torch.autograd.Variable", "tensor.size"], "methods", ["None"], ["", "def", "l3_loss", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "crt", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "base", "=", "torch", ".", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "base", "=", "Variable", "(", "base", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "crt", "(", "tensor", ",", "base", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainSegModel.get_loss": [[245, 250], ["utils.image_transform.do_mapping", "torch.log", "torch.log", "main_model.MainSegModel.criterion_pre", "main_model.MainSegModel.criterion_pre", "torch.autograd.Variable", "torch.autograd.Variable", "main_model.MainSegModel.class_label.cuda", "main_model.MainSegModel.tmp_label.cuda"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.do_mapping"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", "-", "1", "*", "torch", ".", "log", "(", "self", ".", "criterion_pre", "(", "self", ".", "score", ",", "Variable", "(", "self", ".", "class_label", ".", "cuda", "(", ")", ")", ")", ")", "\n", "self", ".", "tmp_label", "=", "it", ".", "do_mapping", "(", "self", ".", "class_label", ",", "self", ".", "mapping", ",", "self", ".", "n_class", ")", "\n", "loss", "+=", "1.0", "*", "torch", ".", "log", "(", "self", ".", "criterion_pre", "(", "self", ".", "score", ",", "Variable", "(", "self", ".", "tmp_label", ".", "cuda", "(", ")", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.name": [[253, 255], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'MainClfModel-{}'", ".", "format", "(", "self", ".", "generator", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.move_cuda": [[256, 259], ["torch.nn.MSELoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["", "def", "move_cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "criterion_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "criterion_pre", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.train": [[260, 277], ["main_model.MainClfModel.generator.eval", "torch.autograd.Variable().cuda", "main_model.MainClfModel.generator.train", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.train"], ["", "def", "train", "(", "self", ",", "isTrain", ")", ":", "\n", "        ", "self", ".", "isTrain", "=", "isTrain", "\n", "if", "isTrain", "is", "False", ":", "\n", "            ", "self", ".", "generator", ".", "eval", "(", ")", "\n", "self", ".", "generator", ".", "volatile", "=", "True", "\n", "self", ".", "lbl_trues", "=", "[", "]", "\n", "self", ".", "lbl_preds", "=", "[", "]", "\n", "self", ".", "losses", "=", "0", "\n", "if", "self", ".", "isUniversal", ":", "\n", "                ", "self", ".", "noise", "=", "Variable", "(", "self", ".", "noise_cpu", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "", "self", ".", "real", "=", "Variable", "(", "self", ".", "real_shape", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "generator", ".", "train", "(", ")", "\n", "self", ".", "generator", ".", "volatile", "=", "False", "\n", "if", "self", ".", "isUniversal", ":", "\n", "                ", "self", ".", "noise", "=", "Variable", "(", "self", ".", "noise_cpu", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "", "self", ".", "real", "=", "Variable", "(", "self", ".", "real_shape", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.initialize": [[290, 363], ["base_model.BaseModel.initialize", "numpy.random.permutation", "generators.define", "main_model.MainClfModel.pretrained_model.eval", "main_model.MainClfModel.pretrained_model.cuda", "torch.optim.Adam", "main_model.MainClfModel.optimizers.append", "torch.nn.MSELoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.FloatTensor", "torch.FloatTensor", "torchvision.models.inception_v3().cuda", "main_model.MainClfModel.generator.parameters", "main_model.MainClfModel.schedulers.append", "torch.rand", "main_model.MainClfModel.noise_cpu.mul_().add_", "torch.LongTensor", "torch.autograd.Variable", "torchvision.models.vgg16().cuda", "generators.get_scheduler", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "torchvision.models.inception_v3", "torchvision.models.vgg19().cuda", "main_model.MainClfModel.noise_cpu.mul_", "torchvision.models.vgg16", "torchvision.models.vgg19"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.define", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.generators.get_scheduler"], ["def", "initialize", "(", "self", ",", "args", ",", "n_class", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "args", ")", "\n", "\n", "self", ".", "gpulist", "=", "args", ".", "gpu_ids", "\n", "self", ".", "task", "=", "args", ".", "task", "\n", "self", ".", "metric_type", "=", "args", ".", "metric", "\n", "self", ".", "dataset", "=", "args", ".", "dataset", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "# coefficient for two losses", "\n", "self", ".", "mapping", "=", "np", ".", "random", ".", "permutation", "(", "n_class", ")", "\n", "\n", "self", ".", "isTarget", "=", "self", ".", "task", "==", "1", "or", "self", ".", "task", "==", "3", "\n", "self", ".", "isUniversal", "=", "self", ".", "task", "==", "2", "or", "self", ".", "task", "==", "3", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "real_shape", "=", "torch", ".", "FloatTensor", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "output_nc", ",", "224", ",", "224", "\n", ")", "if", "args", ".", "foolmodel", "!=", "'incv3'", "else", "torch", ".", "FloatTensor", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "output_nc", ",", "299", ",", "299", "\n", ")", "\n", "\n", "# set up the generator based on the arguments", "\n", "self", ".", "generator", "=", "generators", ".", "define", "(", "args", ".", "input_nc", ",", "args", ".", "output_nc", ",", "\n", "args", ".", "ngf", ",", "args", ".", "generator", ",", "\n", "args", ".", "norm", ",", "args", ".", "activation", ",", "\n", "args", ".", "block", ",", "self", ".", "gpulist", ")", "\n", "\n", "# set up different pretrained model for different dataset", "\n", "if", "opt", ".", "foolmodel", "==", "'incv3'", ":", "\n", "            ", "self", ".", "pretrained_model", "=", "torchvision", ".", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", ".", "cuda", "(", ")", "\n", "", "elif", "opt", ".", "foolmodel", "==", "'vgg16'", ":", "\n", "            ", "self", ".", "pretrained_model", "=", "torchvision", ".", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", ".", "cuda", "(", ")", "\n", "", "elif", "opt", ".", "foolmodel", "==", "'vgg19'", ":", "\n", "            ", "self", ".", "pretrained_model", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "pretrained_model", "=", "self", ".", "pretrained_model", ".", "eval", "(", ")", "\n", "self", ".", "pretrained_model", ".", "volatile", "=", "True", "\n", "self", ".", "pretrained_model", "=", "self", ".", "pretrained_model", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n", "# set up the optimizers", "\n", "# add optimizer to scheduler (modify learning rate)", "\n", "self", ".", "optimizerG", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "generator", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "(", "args", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizerG", ")", "\n", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "            ", "self", ".", "schedulers", ".", "append", "(", "generators", ".", "get_scheduler", "(", "optimizer", ",", "args", ")", ")", "\n", "\n", "# set up the criterions", "\n", "", "self", ".", "criterion_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "criterion_pre", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "isUniversal", ":", "\n", "# set noise for universal tasks", "\n", "            ", "self", ".", "noise_cpu", "=", "torch", ".", "rand", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "input_nc", ",", "\n", "args", ".", "resolution", "/", "2", ",", "args", ".", "resolution", "\n", ")", "\n", "self", ".", "noise_cpu", ".", "mul_", "(", "2.0", ")", ".", "add_", "(", "-", "1.0", ")", "\n", "self", ".", "eps", "=", "args", ".", "eps", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "dataset", "==", "'pascalvoc'", ":", "\n", "                ", "self", ".", "eps", "=", "args", ".", "eps", "\n", "", "elif", "args", ".", "dataset", "==", "'cityscapes'", ":", "\n", "                ", "self", ".", "eps", "=", "args", ".", "eps", "\n", "\n", "", "", "if", "self", ".", "isTarget", ":", "\n", "# set the target for the cityscapes universal targeted task", "\n", "            ", "self", ".", "target", "=", "torch", ".", "LongTensor", "(", "args", ".", "batch_size", ")", "\n", "self", ".", "target", "=", "Variable", "(", "self", ".", "target", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "target", "=", "args", ".", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.set_input": [[366, 369], ["main_model.MainClfModel.real.data.resize_().copy_", "main_model.MainClfModel.real.data.resize_", "main_model.MainClfModel.real_cpu.size"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "real_cpu", ",", "self", ".", "class_label", "=", "input", "\n", "self", ".", "real", ".", "data", ".", "resize_", "(", "self", ".", "real_cpu", ".", "size", "(", ")", ")", ".", "copy_", "(", "self", ".", "real_cpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.forward": [[370, 405], ["main_model.MainClfModel.real.size", "torch.add", "main_model.MainClfModel.fake.cpu", "main_model.MainClfModel.pretrained_model", "main_model.MainClfModel.real.cuda", "main_model.MainClfModel.generator().cuda", "main_model.MainClfModel.real.cuda", "utils.image_transform.inf_norm_adjust", "main_model.MainClfModel.generator().cuda", "utils.image_transform.inf_norm_adjust", "utils.image_transform.untransform", "utils.image_transform.transform", "[].cpu().numpy", "main_model.MainClfModel.class_label.numpy", "torch.log", "main_model.MainClfModel.target.data.cpu().numpy", "zip", "torch.log", "main_model.MainClfModel.criterion_pre", "main_model.MainClfModel.lbl_trues.append", "main_model.MainClfModel.lbl_preds.append", "main_model.MainClfModel.generator", "main_model.MainClfModel.generator", "[].cpu", "main_model.MainClfModel.criterion_pre", "main_model.MainClfModel.target.data.cpu", "torch.autograd.Variable", "main_model.MainClfModel.class_label.cuda", "main_model.MainClfModel.score.data.max"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.inf_norm_adjust", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.inf_norm_adjust", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.untransform", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "isUniversal", "is", "False", ":", "\n", "            ", "self", ".", "real", "=", "self", ".", "real", ".", "cuda", "(", "self", ".", "gpulist", "[", "1", "]", ")", "\n", "self", ".", "delta", "=", "self", ".", "generator", "(", "self", ".", "real", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "real", "=", "self", ".", "real", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "delta", "=", "it", ".", "inf_norm_adjust", "(", "self", ".", "delta", ",", "self", ".", "eps", "/", "128.0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "delta", "=", "self", ".", "generator", "(", "self", ".", "noise", ")", ".", "cuda", "(", "self", ".", "gpulist", "[", "0", "]", ")", "\n", "self", ".", "delta", "=", "it", ".", "inf_norm_adjust", "(", "self", ".", "delta", ",", "self", ".", "eps", "/", "128.0", ")", "\n", "\n", "# crop the delta", "\n", "", "_", ",", "_", ",", "w", ",", "h", "=", "self", ".", "real", ".", "size", "(", ")", "\n", "self", ".", "delta", "=", "self", ".", "delta", "[", ":", ",", ":", ",", "0", ":", "w", ",", "0", ":", "h", "]", "\n", "\n", "self", ".", "fake", "=", "torch", ".", "add", "(", "self", ".", "real", ",", "self", ".", "delta", ")", "\n", "self", ".", "fake_cpu", "=", "self", ".", "fake", ".", "cpu", "(", ")", "\n", "for", "fake_img", "in", "self", ".", "fake", ".", "data", ":", "\n", "            ", "fake_img", "=", "it", ".", "untransform", "(", "fake_img", ",", "None", ",", "1", ",", "self", ".", "dataset", ")", "\n", "", "for", "fake_img", "in", "self", ".", "fake", ".", "data", ":", "\n", "            ", "fake_img", "=", "it", ".", "transform", "(", "fake_img", ",", "None", ",", "2", ",", "self", ".", "dataset", ")", "\n", "", "self", ".", "score", "=", "self", ".", "pretrained_model", "(", "self", ".", "fake", ")", "\n", "self", ".", "lbl_pred", "=", "self", ".", "score", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "isTarget", "is", "False", ":", "\n", "            ", "self", ".", "loss", "=", "-", "1", "*", "torch", ".", "log", "(", "self", ".", "criterion_pre", "(", "self", ".", "score", ",", "Variable", "(", "self", ".", "class_label", ".", "cuda", "(", ")", ")", ")", ")", "\n", "self", ".", "lbl_true", "=", "self", ".", "class_label", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "torch", ".", "log", "(", "self", ".", "criterion_pre", "(", "self", ".", "score", ",", "self", ".", "target", ")", ")", "\n", "self", ".", "lbl_true", "=", "self", ".", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "self", ".", "isTrain", "is", "False", ":", "\n", "            ", "for", "lt", ",", "lp", "in", "zip", "(", "self", ".", "lbl_true", ",", "self", ".", "lbl_pred", ")", ":", "\n", "                ", "self", ".", "lbl_trues", ".", "append", "(", "lt", ")", "\n", "self", ".", "lbl_preds", ".", "append", "(", "lp", ")", "\n", "", "self", ".", "losses", "+=", "self", ".", "loss", ".", "data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.backward": [[406, 409], ["main_model.MainClfModel.loss.backward", "main_model.MainClfModel.optimizerG.step"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.backward"], ["", "", "def", "backward", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizerG", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.optimize_parameters": [[410, 415], ["main_model.MainClfModel.forward", "main_model.MainClfModel.generator.zero_grad", "main_model.MainClfModel.backward"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.forward", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.backward"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "generator", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.models.main_model.MainClfModel.get_loss": [[416, 421], ["utils.image_transform.do_mapping", "torch.log", "torch.log", "main_model.MainClfModel.criterion_pre", "main_model.MainClfModel.criterion_pre", "torch.autograd.Variable", "torch.autograd.Variable", "main_model.MainClfModel.class_label.cuda", "main_model.MainClfModel.tmp_label.cuda"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.do_mapping"], ["", "", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "loss", "=", "-", "1", "*", "torch", ".", "log", "(", "self", ".", "criterion_pre", "(", "self", ".", "score", ",", "Variable", "(", "self", ".", "class_label", ".", "cuda", "(", ")", ")", ")", ")", "\n", "self", ".", "tmp_label", "=", "it", ".", "do_mapping", "(", "self", ".", "class_label", ",", "self", ".", "mapping", ",", "self", ".", "n_class", ")", "\n", "loss", "+=", "1.0", "*", "torch", ".", "log", "(", "self", ".", "criterion_pre", "(", "self", ".", "score", ",", "Variable", "(", "self", ".", "tmp_label", ".", "cuda", "(", ")", ")", ")", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.data_loader.create_data_loader": [[7, 40], ["os.path.expanduser", "os.path.join", "cityscape.CityScapesClassSeg", "cityscape.CityScapesClassSeg", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.expanduser", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pascalvoc.SBDClassSeg", "pascalvoc.VOC2011ClassSeg"], "function", ["None"], ["def", "create_data_loader", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "root", "=", "os", ".", "path", ".", "expanduser", "(", "args", ".", "dataroot", ")", "\n", "dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'cityscapes-{}'", ".", "format", "(", "args", ".", "resolution", ")", ")", "\n", "train_set", "=", "cityscape", ".", "CityScapesClassSeg", "(", "\n", "dataset_dir", ",", "split", "=", "[", "'train'", "]", ",", "transform", "=", "1", ",", "\n", ")", "\n", "test_set", "=", "cityscape", ".", "CityScapesClassSeg", "(", "\n", "dataset_dir", ",", "split", "=", "[", "'val'", "]", ",", "transform", "=", "1", ",", "\n", ")", "\n", "training_data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_set", ",", "num_workers", "=", "args", ".", "nThreads", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", "\n", ")", "\n", "testing_data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "test_set", ",", "num_workers", "=", "args", ".", "nThreads", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", "\n", ")", "\n", "return", "training_data_loader", ",", "testing_data_loader", "\n", "", "elif", "args", ".", "dataset", "==", "'pascalvoc'", ":", "\n", "        ", "root", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data/datasets'", ")", "\n", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "train_loader", "=", "DataLoader", "(", "\n", "pascalvoc", ".", "SBDClassSeg", "(", "\n", "root", ",", "split", "=", "'train'", ",", "transform", "=", "1", "\n", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "pascalvoc", ".", "VOC2011ClassSeg", "(", "\n", "root", ",", "split", "=", "'seg11valid'", ",", "transform", "=", "1", "\n", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "val_loader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.VOCClassSegBase.__init__": [[38, 57], ["os.join", "os.join", "collections.defaultdict", "os.join", "os.join", "open", "did.strip.strip.strip", "os.join", "os.join", "os.join", "os.join", "pascalvoc.VOCClassSegBase.files[].append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "1", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n", "# VOC2011 and others are subset of VOC2012", "\n", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'VOC/VOCdevkit/VOC2012'", ")", "\n", "self", ".", "files", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "imgsets_file", "=", "osp", ".", "join", "(", "\n", "dataset_dir", ",", "'ImageSets/Segmentation/%s.txt'", "%", "split", ")", "\n", "for", "did", "in", "open", "(", "imgsets_file", ")", ":", "\n", "                ", "did", "=", "did", ".", "strip", "(", ")", "\n", "img_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'JPEGImages/%s.jpg'", "%", "did", ")", "\n", "lbl_file", "=", "osp", ".", "join", "(", "\n", "dataset_dir", ",", "'SegmentationClass/%s.png'", "%", "did", ")", "\n", "self", ".", "files", "[", "split", "]", ".", "append", "(", "{", "\n", "'img'", ":", "img_file", ",", "\n", "'lbl'", ":", "lbl_file", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.VOCClassSegBase.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", "[", "self", ".", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.VOCClassSegBase.__getitem__": [[62, 76], ["PIL.Image.open", "numpy.array", "PIL.Image.open", "numpy.array", "utils.image_transform.to_tensor", "utils.image_transform.transform"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.to_tensor", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_file", "=", "self", ".", "files", "[", "self", ".", "split", "]", "[", "index", "]", "\n", "# load image", "\n", "img_file", "=", "data_file", "[", "'img'", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# load label", "\n", "lbl_file", "=", "data_file", "[", "'lbl'", "]", "\n", "lbl", "=", "PIL", ".", "Image", ".", "open", "(", "lbl_file", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "lbl", "[", "lbl", "==", "255", "]", "=", "0", "# I dont know if it's right to set 0 here ", "\n", "\n", "img_tensor", ",", "lbl_tensor", "=", "it", ".", "to_tensor", "(", "img", ",", "lbl", ")", "\n", "return", "it", ".", "transform", "(", "img_tensor", ",", "lbl_tensor", ",", "self", ".", "_transform", ",", "'pascalvoc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.VOCClassSegBase.transform": [[77, 85], ["torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean_bgr", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.VOCClassSegBase.untransform": [[86, 94], ["img.astype.astype.numpy", "img.astype.astype.transpose", "img.astype.astype.astype", "lbl.numpy.numpy.numpy"], "methods", ["None"], ["", "def", "untransform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "img", "=", "img", ".", "numpy", "(", ")", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "+=", "self", ".", "mean_bgr", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "lbl", "=", "lbl", ".", "numpy", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.VOC2011ClassSeg.__init__": [[98, 109], ["pascalvoc.VOCClassSegBase.__init__", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.join", "os.join", "open", "did.strip.strip.strip", "os.join", "os.join", "os.join", "os.join", "pascalvoc.VOC2011ClassSeg.files[].append"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "1", ")", ":", "\n", "        ", "super", "(", "VOC2011ClassSeg", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", "=", "split", ",", "transform", "=", "transform", ")", "\n", "\n", "imgsets_file", "=", "os", ".", "path", ".", "expanduser", "(", "'~/data/datasets/VOC/seg11valid.txt'", ")", "\n", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'VOC/VOCdevkit/VOC2012'", ")", "\n", "for", "did", "in", "open", "(", "imgsets_file", ")", ":", "\n", "            ", "did", "=", "did", ".", "strip", "(", ")", "\n", "img_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'JPEGImages/%s.jpg'", "%", "did", ")", "\n", "lbl_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'SegmentationClass/%s.png'", "%", "did", ")", "\n", "self", ".", "files", "[", "'seg11valid'", "]", ".", "append", "(", "{", "'img'", ":", "img_file", ",", "'lbl'", ":", "lbl_file", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.VOC2012ClassSeg.__init__": [[115, 118], ["pascalvoc.VOCClassSegBase.__init__"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "1", ")", ":", "\n", "        ", "super", "(", "VOC2012ClassSeg", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", "=", "split", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.SBDClassSeg.__init__": [[125, 141], ["os.join", "os.join", "collections.defaultdict", "os.join", "os.join", "open", "did.strip.strip.strip", "os.join", "os.join", "os.join", "os.join", "pascalvoc.SBDClassSeg.files[].append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "1", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'VOC/benchmark_RELEASE/dataset'", ")", "\n", "self", ".", "files", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "imgsets_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'%s.txt'", "%", "split", ")", "\n", "for", "did", "in", "open", "(", "imgsets_file", ")", ":", "\n", "                ", "did", "=", "did", ".", "strip", "(", ")", "\n", "img_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'img/%s.jpg'", "%", "did", ")", "\n", "lbl_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'cls/%s.mat'", "%", "did", ")", "\n", "self", ".", "files", "[", "split", "]", ".", "append", "(", "{", "\n", "'img'", ":", "img_file", ",", "\n", "'lbl'", ":", "lbl_file", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascalvoc.SBDClassSeg.__getitem__": [[143, 156], ["PIL.Image.open", "numpy.array", "scipy.io.loadmat", "[].astype", "utils.image_transform.to_tensor", "utils.image_transform.transform"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.to_tensor", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_file", "=", "self", ".", "files", "[", "self", ".", "split", "]", "[", "index", "]", "\n", "# load image", "\n", "img_file", "=", "data_file", "[", "'img'", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# load label", "\n", "lbl_file", "=", "data_file", "[", "'lbl'", "]", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "lbl_file", ")", "\n", "lbl", "=", "mat", "[", "'GTcls'", "]", "[", "0", "]", "[", "'Segmentation'", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "lbl", "[", "lbl", "==", "255", "]", "=", "0", "\n", "img_tensor", ",", "lbl_tensor", "=", "it", ".", "to_tensor", "(", "img", ",", "lbl", ")", "\n", "return", "it", ".", "transform", "(", "img_tensor", ",", "lbl_tensor", ",", "self", ".", "_transform", ",", "'pascalvoc'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.__init__": [[38, 57], ["os.join", "os.join", "collections.defaultdict", "os.join", "os.join", "open", "did.strip.strip.strip", "os.join", "os.join", "os.join", "os.join", "pascal_voc.VOCClassSegBase.files[].append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n", "# VOC2011 and others are subset of VOC2012", "\n", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'VOC/VOCdevkit/VOC2012'", ")", "\n", "self", ".", "files", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "imgsets_file", "=", "osp", ".", "join", "(", "\n", "dataset_dir", ",", "'ImageSets/Segmentation/%s.txt'", "%", "split", ")", "\n", "for", "did", "in", "open", "(", "imgsets_file", ")", ":", "\n", "                ", "did", "=", "did", ".", "strip", "(", ")", "\n", "img_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'JPEGImages/%s.jpg'", "%", "did", ")", "\n", "lbl_file", "=", "osp", ".", "join", "(", "\n", "dataset_dir", ",", "'SegmentationClass/%s.png'", "%", "did", ")", "\n", "self", ".", "files", "[", "split", "]", ".", "append", "(", "{", "\n", "'img'", ":", "img_file", ",", "\n", "'lbl'", ":", "lbl_file", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", "[", "self", ".", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.__getitem__": [[62, 77], ["PIL.Image.open", "numpy.array", "PIL.Image.open", "numpy.array", "utils.image_transform.to_tensor", "utils.image_transform.transform"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.to_tensor", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_file", "=", "self", ".", "files", "[", "self", ".", "split", "]", "[", "index", "]", "\n", "# load image", "\n", "img_file", "=", "data_file", "[", "'img'", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# load label", "\n", "lbl_file", "=", "data_file", "[", "'lbl'", "]", "\n", "lbl", "=", "PIL", ".", "Image", ".", "open", "(", "lbl_file", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "lbl", "[", "lbl", "==", "255", "]", "=", "-", "1", "\n", "\n", "img_tensor", ",", "lbl_tensor", "=", "it", ".", "to_tensor", "(", "img", ",", "lbl", ")", "\n", "\n", "return", "it", ".", "transform", "(", "img_tensor", ",", "lbl_tensor", ",", "self", ".", "_transform", ",", "'pascalvoc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform": [[78, 86], ["torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean_bgr", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.untransform": [[87, 95], ["img.astype.astype.numpy", "img.astype.astype.transpose", "img.astype.astype.astype", "lbl.numpy.numpy.numpy"], "methods", ["None"], ["", "def", "untransform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "img", "=", "img", ".", "numpy", "(", ")", "\n", "img", "=", "img", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "+=", "self", ".", "mean_bgr", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "lbl", "=", "lbl", ".", "numpy", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOC2011ClassSeg.__init__": [[99, 112], ["pascal_voc.VOCClassSegBase.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "open", "os.dirname", "os.dirname", "did.strip.strip.strip", "os.join", "os.join", "os.join", "os.join", "pascal_voc.VOC2011ClassSeg.files[].append", "os.realpath", "os.realpath"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "False", ")", ":", "\n", "        ", "super", "(", "VOC2011ClassSeg", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", "=", "split", ",", "transform", "=", "transform", ")", "\n", "pkg_root", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "imgsets_file", "=", "osp", ".", "join", "(", "\n", "pkg_root", ",", "'ext/fcn.berkeleyvision.org'", ",", "\n", "'data/pascal/seg11valid.txt'", ")", "\n", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'VOC/VOCdevkit/VOC2012'", ")", "\n", "for", "did", "in", "open", "(", "imgsets_file", ")", ":", "\n", "            ", "did", "=", "did", ".", "strip", "(", ")", "\n", "img_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'JPEGImages/%s.jpg'", "%", "did", ")", "\n", "lbl_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'SegmentationClass/%s.png'", "%", "did", ")", "\n", "self", ".", "files", "[", "'seg11valid'", "]", ".", "append", "(", "{", "'img'", ":", "img_file", ",", "'lbl'", ":", "lbl_file", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOC2012ClassSeg.__init__": [[118, 121], ["pascal_voc.VOCClassSegBase.__init__"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "False", ")", ":", "\n", "        ", "super", "(", "VOC2012ClassSeg", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "split", "=", "split", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.SBDClassSeg.__init__": [[128, 144], ["os.join", "os.join", "collections.defaultdict", "os.join", "os.join", "open", "did.strip.strip.strip", "os.join", "os.join", "os.join", "os.join", "pascal_voc.SBDClassSeg.files[].append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'VOC/benchmark_RELEASE/dataset'", ")", "\n", "self", ".", "files", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "imgsets_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'%s.txt'", "%", "split", ")", "\n", "for", "did", "in", "open", "(", "imgsets_file", ")", ":", "\n", "                ", "did", "=", "did", ".", "strip", "(", ")", "\n", "img_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'img/%s.jpg'", "%", "did", ")", "\n", "lbl_file", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'cls/%s.mat'", "%", "did", ")", "\n", "self", ".", "files", "[", "split", "]", ".", "append", "(", "{", "\n", "'img'", ":", "img_file", ",", "\n", "'lbl'", ":", "lbl_file", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.SBDClassSeg.__getitem__": [[146, 161], ["PIL.Image.open", "numpy.array", "scipy.io.loadmat", "[].astype", "pascal_voc.SBDClassSeg.transform"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_file", "=", "self", ".", "files", "[", "self", ".", "split", "]", "[", "index", "]", "\n", "# load image", "\n", "img_file", "=", "data_file", "[", "'img'", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# load label", "\n", "lbl_file", "=", "data_file", "[", "'lbl'", "]", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "lbl_file", ")", "\n", "lbl", "=", "mat", "[", "'GTcls'", "]", "[", "0", "]", "[", "'Segmentation'", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "lbl", "[", "lbl", "==", "255", "]", "=", "-", "1", "\n", "if", "self", ".", "_transform", ":", "\n", "            ", "return", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "lbl", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.cityscape.CityScapesClassSeg.__init__": [[38, 66], ["os.join", "os.join", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "open", "os.isdir", "os.isdir", "did.strip.strip.strip", "os.join", "os.join", "os.join", "os.join", "cityscape.CityScapesClassSeg.files.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset_dir", ",", "split", "=", "[", "'train'", "]", ",", "transform", "=", "0", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "dataset_dir", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "files", "=", "[", "]", "\n", "\n", "for", "sp", "in", "split", ":", "\n", "\n", "            ", "tar_img_dir", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'leftImg8bit_trainvaltest/leftImg8bit/%s'", "%", "sp", ")", "\n", "tar_lbl_dir", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'gtFine_trainvaltest/gtFine/%s'", "%", "sp", ")", "# gtFine", "\n", "\n", "for", "city", "in", "os", ".", "listdir", "(", "tar_img_dir", ")", ":", "\n", "                ", "city_img_dir", "=", "osp", ".", "join", "(", "tar_img_dir", ",", "city", ")", "\n", "city_lbl_dir", "=", "osp", ".", "join", "(", "tar_lbl_dir", ",", "city", ")", "\n", "imgsets_file", "=", "osp", ".", "join", "(", "city_img_dir", ",", "'imgsets.txt'", ")", "\n", "\n", "if", "not", "osp", ".", "isdir", "(", "city_img_dir", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "for", "did", "in", "open", "(", "imgsets_file", ")", ":", "\n", "                    ", "did", "=", "did", ".", "strip", "(", ")", "\n", "img_file", "=", "osp", ".", "join", "(", "city_img_dir", ",", "'%s.png'", "%", "did", ")", "\n", "lbl_file", "=", "osp", ".", "join", "(", "\n", "city_lbl_dir", ",", "'%s.png'", "%", "did", "\n", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "'img'", ":", "img_file", ",", "\n", "'lbl'", ":", "lbl_file", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.cityscape.CityScapesClassSeg.__len__": [[68, 70], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.cityscape.CityScapesClassSeg.__getitem__": [[71, 82], ["utils.image_transform.process_img_file", "utils.image_transform.process_lbl_file", "utils.image_transform.to_tensor", "utils.image_transform.transform"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.process_img_file", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.process_lbl_file", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.image_transform.to_tensor", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.data.pascal_voc.VOCClassSegBase.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_file", "=", "self", ".", "files", "[", "index", "]", "\n", "# load image", "\n", "img_file", "=", "data_file", "[", "'img'", "]", "\n", "lbl_file", "=", "data_file", "[", "'lbl'", "]", "\n", "img", "=", "it", ".", "process_img_file", "(", "img_file", ")", "\n", "lbl", "=", "it", ".", "process_lbl_file", "(", "lbl_file", ")", "\n", "\n", "img_tensor", ",", "lbl_tensor", "=", "it", ".", "to_tensor", "(", "img", ",", "lbl", ")", "\n", "\n", "return", "it", ".", "transform", "(", "img_tensor", ",", "lbl_tensor", ",", "self", ".", "_transform", ",", "'cityscapes'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.test_options.TestOptions.initialize": [[5, 9], ["base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.train_options.TrainOptions.initialize": [[5, 33], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--lr'", ",", "help", "=", "'learning rate'", ",", "\n", "type", "=", "float", ",", "default", "=", "0.00008", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--beta1'", ",", "help", "=", "'momentum term of adam'", ",", "\n", "type", "=", "float", ",", "default", "=", "0.9", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--nEpochs'", ",", "help", "=", "'# of epochs'", ",", "\n", "type", "=", "int", ",", "default", "=", "20", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'lambda'", ",", "\n", "help", "=", "'learning rate policy: lambda|step|plateau'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'frequency of showing training results on screen'", "\n", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.__init__": [[7, 10], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Options'", ")", "\n", "self", ".", "initalized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.initialize": [[11, 130], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--dataroot'", ",", "help", "=", "'path of the experiment data'", ",", "\n", "default", "=", "'~/data/datasets'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "help", "=", "'the dataset you use'", ",", "\n", "type", "=", "str", ",", "required", "=", "True", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--input_nc'", ",", "help", "=", "'# of input channels'", ",", "\n", "type", "=", "int", ",", "default", "=", "3", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--output_nc'", ",", "help", "=", "'# of output channels'", ",", "\n", "type", "=", "int", ",", "default", "=", "3", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--ngf'", ",", "help", "=", "'# of generator filters in first conv layer'", ",", "\n", "type", "=", "int", ",", "default", "=", "128", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'-g'", ",", "'--generator'", ",", "help", "=", "'type of generator'", ",", "\n", "type", "=", "str", ",", "default", "=", "'unet'", ",", "required", "=", "True", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--gpu_ids'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ",", "\n", "type", "=", "str", ",", "default", "=", "'0'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--eps'", ",", "help", "=", "'episilon of perturbation'", ",", "\n", "type", "=", "int", ",", "default", "=", "10", ",", "required", "=", "True", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--name'", ",", "help", "=", "'name of experimentz: decide the where log files and models stored'", ",", "\n", "type", "=", "str", ",", "required", "=", "True", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--norm'", ",", "help", "=", "'type of normalization'", ",", "\n", "type", "=", "str", ",", "default", "=", "'instance'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--activation'", ",", "help", "=", "'type of activation function'", ",", "\n", "type", "=", "str", ",", "default", "=", "'selu'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--nThreads'", ",", "default", "=", "4", ",", "\n", "type", "=", "int", ",", "help", "=", "'# of threads for loading data'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'-r'", ",", "'--resolution'", ",", "help", "=", "'resolution of dataset'", ",", "\n", "type", "=", "int", ",", "default", "=", "1024", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--val-interval'", ",", "help", "=", "'interval size of validation'", ",", "\n", "type", "=", "int", ",", "default", "=", "1500", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--batch-size'", ",", "help", "=", "'size of each batch'", ",", "\n", "type", "=", "int", ",", "default", "=", "1", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--block'", ",", "help", "=", "'number of blocks in resnet generator'", ",", "\n", "type", "=", "int", ",", "default", "=", "9", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "\n", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--seed'", ",", "type", "=", "int", ",", "\n", "default", "=", "'123'", ",", "help", "=", "'random seed'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--target_path'", ",", "type", "=", "str", ",", "\n", "default", "=", "'~/data/datasets/cityscapes-{}/gtFine/train/monchengladbach/monchengladbach_000000_026602.png'", ",", "\n", "help", "=", "'path of the target mask'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--pretrained_cityscapes'", ",", "type", "=", "str", ",", "\n", "default", "=", "'~/data/models/pytorch/model_best.pth.tar'", ",", "\n", "help", "=", "'path of pretrained model based on cityscapes dataset'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--pretrained_pascalvoc'", ",", "type", "=", "str", ",", "\n", "default", "=", "'~/data/models/pytorch/fcn8s_from_caffe.pth'", ",", "\n", "help", "=", "'path of pretrained model based on pascalvoc dataset'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--metric'", ",", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "required", "=", "True", ",", "\n", "help", "=", "'metrics showed in visdom, like success_rate or mean_iu'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--task'", ",", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "required", "=", "True", ",", "\n", "help", "=", "'task we need to do'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--alpha'", ",", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "'alpha parameter'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--resume'", ",", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'indicator of whether you want to resume from a exisiting model'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "'--resume_name'", ",", "type", "=", "str", ",", "\n", "help", "=", "'the directory of the model you want to resume'", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'window id of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_window_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'enable test mode or not'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'enable save mode or not'", ")", "\n", "self", ".", "initalized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.parse": [[131, 166], ["base_options.BaseOptions.parser.parse_args", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "base_options.BaseOptions.args.gpu_ids.split", "base_options.BaseOptions.args.gpu_ids.sort", "vars", "print", "sorted", "print", "os.path.join", "utils.util.mkdir", "os.path.join", "base_options.BaseOptions.initialize", "int", "vars.items", "print", "open", "opt_file.write", "sorted", "opt_file.write", "base_options.BaseOptions.args.gpu_ids.append", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.utils.util.mkdir", "home.repos.pwc.inspect_result.OmidPoursaeed_Generative_Adversarial_Perturbations.options.base_options.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initalized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "args", ".", "isTrain", "=", "self", ".", "isTrain", "# Train mode or Test mode", "\n", "self", ".", "args", ".", "pretrained_cityscapes", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "args", ".", "pretrained_cityscapes", ")", "\n", "self", ".", "args", ".", "pretrained_pascalvoc", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "args", ".", "pretrained_pascalvoc", ")", "\n", "self", ".", "args", ".", "target_path", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "args", ".", "target_path", ")", "\n", "# conver the gpu_ids from string to list", "\n", "gpu_ids", "=", "self", ".", "args", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "args", ".", "gpu_ids", "=", "[", "]", "\n", "for", "gpu_id", "in", "gpu_ids", ":", "\n", "            ", "id", "=", "int", "(", "gpu_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "args", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "self", ".", "args", ".", "gpu_ids", ".", "sort", "(", ")", "\n", "\n", "# print the arguments", "\n", "args", "=", "vars", "(", "self", ".", "args", ")", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# # save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoints_dir", ",", "self", ".", "args", ".", "name", ")", "\n", "util", ".", "mkdir", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "\n", "", "return", "self", ".", "args", "\n", "", "", ""]]}