{"home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.OrthogonalProjectionLoss.__init__": [[202, 205], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OrthogonalProjectionLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "(", "torch", ".", "device", "(", "'cuda'", ")", "if", "FLAGS", ".", "cuda", "else", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.OrthogonalProjectionLoss.forward": [[206, 225], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eq().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eye().bool().to", "torch.eq().bool().to.masked_fill().float", "torch.eq().bool().to.masked_fill().float", "torch.eq().bool().to.masked_fill().float", "torch.eq().bool().to.masked_fill().float", "torch.eq().bool().to.masked_fill().float", "torch.eq().bool().to.masked_fill().float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.normalize.t", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eq().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eye().bool", "torch.eq().bool().to.masked_fill", "torch.eq().bool().to.masked_fill", "torch.eq().bool().to.masked_fill", "torch.eq().bool().to.masked_fill", "torch.eq().bool().to.masked_fill", "torch.eq().bool().to.masked_fill", "torch.eq().bool().to.masked_fill().float.sum", "mask_neg.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "labels.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "features", "=", "F", ".", "normalize", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "labels", "=", "labels", "[", ":", ",", "None", "]", "\n", "\n", "mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels", ".", "t", "(", ")", ")", ".", "bool", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "eye", "=", "torch", ".", "eye", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", ".", "bool", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "mask_pos", "=", "mask", ".", "masked_fill", "(", "eye", ",", "0", ")", ".", "float", "(", ")", "\n", "mask_neg", "=", "(", "~", "mask", ")", ".", "float", "(", ")", "\n", "dot_prod", "=", "torch", ".", "matmul", "(", "features", ",", "features", ".", "t", "(", ")", ")", "\n", "\n", "pos_pairs_mean", "=", "(", "mask_pos", "*", "dot_prod", ")", ".", "sum", "(", ")", "/", "(", "mask_pos", ".", "sum", "(", ")", "+", "1e-6", ")", "\n", "neg_pairs_mean", "=", "torch", ".", "abs", "(", "mask_neg", "*", "dot_prod", ")", ".", "sum", "(", ")", "/", "(", "mask_neg", ".", "sum", "(", ")", "+", "1e-6", ")", "\n", "\n", "loss", "=", "(", "1.0", "-", "pos_pairs_mean", ")", "+", "(", "0.7", "*", "neg_pairs_mean", ")", "\n", "\n", "return", "loss", ",", "pos_pairs_mean", ",", "neg_pairs_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.__init__": [[262, 265], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "value_sum", "=", "0.", "\n", "self", ".", "num_items", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.update": [[266, 269], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "value_sum", "+=", "val", "\n", "self", ".", "num_items", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.avg": [[270, 276], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ")", ":", "\n", "        ", "average", "=", "0.", "\n", "if", "self", ".", "num_items", ">", "0", ":", "\n", "            ", "average", "=", "self", ".", "value_sum", "/", "self", ".", "num_items", "\n", "\n", "", "return", "average", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.read_data": [[31, 65], ["print", "pandas.read_csv", "numpy.asarray", "numpy.asarray", "print", "pandas.read_csv", "numpy.asarray", "sklearn.preprocessing.LabelEncoder", "preprocessing.LabelEncoder.fit", "preprocessing.LabelEncoder.transform", "print", "print", "list", "scipy.random.shuffle", "zip", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.asarray", "len", "zip", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["def", "read_data", "(", ")", ":", "\n", "    ", "train_file", "=", "'features/faceTrain.csv'", "\n", "train_file_voice", "=", "'feaures/voiceTrain.csv'", "\n", "\n", "print", "(", "'Reading Train Faces'", ")", "\n", "img_train", "=", "pd", ".", "read_csv", "(", "train_file", ",", "header", "=", "None", ")", "\n", "train_label", "=", "img_train", "[", "4096", "]", "\n", "img_train", "=", "np", ".", "asarray", "(", "img_train", ")", "\n", "img_train", "=", "img_train", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "train_label", "=", "np", ".", "asarray", "(", "train_label", ")", "\n", "print", "(", "'Reading Voices'", ")", "\n", "voice_train", "=", "pd", ".", "read_csv", "(", "train_file_voice", ",", "header", "=", "None", ")", "\n", "voice_train", "=", "np", ".", "asarray", "(", "voice_train", ")", "\n", "voice_train", "=", "voice_train", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "\n", "le", "=", "preprocessing", ".", "LabelEncoder", "(", ")", "\n", "le", ".", "fit", "(", "train_label", ")", "\n", "train_label", "=", "le", ".", "transform", "(", "train_label", ")", "\n", "print", "(", "\"Train file length\"", ",", "len", "(", "img_train", ")", ")", "\n", "\n", "print", "(", "'Shuffling\\n'", ")", "\n", "combined", "=", "list", "(", "zip", "(", "img_train", ",", "voice_train", ",", "train_label", ")", ")", "\n", "img_train", "=", "[", "]", "\n", "voice_train", "=", "[", "]", "\n", "train_label", "=", "[", "]", "\n", "random", ".", "shuffle", "(", "combined", ")", "\n", "img_train", "[", ":", "]", ",", "voice_train", ",", "train_label", "[", ":", "]", "=", "zip", "(", "*", "combined", ")", "\n", "combined", "=", "[", "]", "\n", "img_train", "=", "np", ".", "asarray", "(", "img_train", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "voice_train", "=", "np", ".", "asarray", "(", "voice_train", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "train_label", "=", "np", ".", "asarray", "(", "train_label", ")", "\n", "\n", "\n", "return", "img_train", ",", "voice_train", ",", "train_label", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.get_batch": [[78, 82], ["numpy.asarray", "numpy.asarray"], "function", ["None"], ["def", "get_batch", "(", "batch_index", ",", "batch_size", ",", "labels", ",", "f_lst", ")", ":", "\n", "    ", "start_ind", "=", "batch_index", "*", "batch_size", "\n", "end_ind", "=", "(", "batch_index", "+", "1", ")", "*", "batch_size", "\n", "return", "np", ".", "asarray", "(", "f_lst", "[", "start_ind", ":", "end_ind", "]", ")", ",", "np", ".", "asarray", "(", "labels", "[", "start_ind", ":", "end_ind", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.init_weights": [[83, 87], ["type", "torch.nn.init.xavier_uniform", "torch.nn.init.xavier_uniform", "torch.nn.init.xavier_uniform", "torch.nn.init.xavier_uniform", "torch.nn.init.xavier_uniform", "torch.nn.init.xavier_uniform", "m.bias.data.fill_"], "function", ["None"], ["", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.main": [[88, 200], ["retrieval_model.FOP", "retrieval_model.FOP.apply", "torch.CrossEntropyLoss().cuda", "OrthogonalProjectionLoss().cuda", "torch.Adam", "sum", "print", "retrieval_model.FOP.cuda", "nn.CrossEntropyLoss().cuda.cuda", "OrthogonalProjectionLoss().cuda.cuda", "matplotlib.figure", "matplotlib.title", "matplotlib.plot", "matplotlib.savefig", "matplotlib.figure", "matplotlib.title", "matplotlib.plot", "matplotlib.savefig", "matplotlib.figure", "matplotlib.title", "matplotlib.plot", "matplotlib.savefig", "torch.CrossEntropyLoss", "main.OrthogonalProjectionLoss", "p.data.nelement", "len", "open", "f.write", "os.path.exists", "os.makedirs", "os.path.exists", "os.mkdir", "open", "retrieval_model.FOP.face_branch.fc1.parameters", "retrieval_model.FOP.voice_branch.fc1.parameters", "retrieval_model.FOP.logits_layer.parameters", "retrieval_model.FOP.parameters", "print", "tqdm.tqdm", "loss_plot.append", "main.save_checkpoint", "print", "online_evaluation.test", "eer_list.append", "auc_list.append", "f.write", "retrieval_model.FOP.face_branch.fc1.parameters", "retrieval_model.FOP.voice_branch.fc1.parameters", "retrieval_model.FOP.logits_layer.parameters", "retrieval_model.FOP.fusion_layer.attention.parameters", "range", "main.get_batch", "main.get_batch", "main.train", "main.save_checkpoint", "retrieval_model.FOP.state_dict", "min", "max", "retrieval_model.FOP.state_dict"], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.save_checkpoint", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.test", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.get_batch", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.get_batch", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.train", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.save_checkpoint"], ["", "", "def", "main", "(", "face_train", ",", "voice_train", ",", "train_label", ")", ":", "\n", "\n", "    ", "model", "=", "FOP", "(", "FLAGS", ",", "face_train", ".", "shape", "[", "1", "]", ",", "voice_train", ".", "shape", "[", "1", "]", ")", "\n", "model", ".", "apply", "(", "init_weights", ")", "\n", "\n", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "opl_loss", "=", "OrthogonalProjectionLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "FLAGS", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "ce_loss", ".", "cuda", "(", ")", "\n", "opl_loss", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# =============================================================================", "\n", "#     For Linear Fusion", "\n", "# =============================================================================", "\n", "\n", "", "if", "FLAGS", ".", "fusion", "==", "'linear'", ":", "\n", "\n", "        ", "parameters", "=", "[", "\n", "{", "'params'", ":", "model", ".", "face_branch", ".", "fc1", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "voice_branch", ".", "fc1", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "logits_layer", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "fusion_layer", ".", "weight1", "}", ",", "\n", "{", "'params'", ":", "model", ".", "fusion_layer", ".", "weight2", "}", "]", "\n", "\n", "\n", "# =============================================================================", "\n", "#     For Gated Fusion", "\n", "# =============================================================================", "\n", "\n", "", "elif", "FLAGS", ".", "fusion", "==", "'gated'", ":", "\n", "\n", "        ", "parameters", "=", "[", "\n", "{", "'params'", ":", "model", ".", "face_branch", ".", "fc1", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "voice_branch", ".", "fc1", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "logits_layer", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "fusion_layer", ".", "attention", ".", "parameters", "(", ")", "}", "]", "\n", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "FLAGS", ".", "lr", ",", "weight_decay", "=", "0.01", ")", "\n", "\n", "n_parameters", "=", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "print", "(", "'  + Number of params: {}'", ".", "format", "(", "n_parameters", ")", ")", "\n", "\n", "for", "alpha", "in", "FLAGS", ".", "alpha_list", ":", "\n", "        ", "eer_list", "=", "[", "]", "\n", "epoch", "=", "1", "\n", "num_of_batches", "=", "(", "len", "(", "train_label", ")", "//", "FLAGS", ".", "batch_size", ")", "\n", "loss_plot", "=", "[", "]", "\n", "auc_list", "=", "[", "]", "\n", "loss_per_epoch", "=", "0", "\n", "save_dir", "=", "'%s_%s_alpha_%0.2f'", "%", "(", "FLAGS", ".", "fusion", ",", "FLAGS", ".", "save_dir", ",", "alpha", ")", "\n", "txt", "=", "'output/%s_ce_opl_%03d_%0.2f.txt'", "%", "(", "FLAGS", ".", "fusion", ",", "FLAGS", ".", "max_num_epoch", ",", "alpha", ")", "\n", "\n", "with", "open", "(", "txt", ",", "'w+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'EPOCH\\tLOSS\\tEER\\tAUC\\n'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "save_best", "=", "'best_%s'", "%", "(", "save_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_best", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_best", ")", "\n", "", "with", "open", "(", "txt", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "while", "(", "epoch", "<", "FLAGS", ".", "max_num_epoch", ")", ":", "\n", "                ", "print", "(", "'Epoch %03d'", "%", "(", "epoch", ")", ")", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "num_of_batches", ")", ")", ":", "\n", "                    ", "face_feats", ",", "batch_labels", "=", "get_batch", "(", "idx", ",", "FLAGS", ".", "batch_size", ",", "train_label", ",", "face_train", ")", "\n", "voice_feats", ",", "_", "=", "get_batch", "(", "idx", ",", "FLAGS", ".", "batch_size", ",", "train_label", ",", "voice_train", ")", "\n", "loss_tmp", ",", "loss_opl", ",", "loss_soft", ",", "_", ",", "_", "=", "train", "(", "face_feats", ",", "voice_feats", ",", "\n", "batch_labels", ",", "\n", "model", ",", "optimizer", ",", "ce_loss", ",", "opl_loss", ",", "alpha", ")", "\n", "loss_per_epoch", "+=", "loss_tmp", "\n", "", "loss_per_epoch", "=", "loss_per_epoch", "/", "num_of_batches", "\n", "loss_plot", ".", "append", "(", "loss_per_epoch", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", "}", ",", "save_dir", ",", "'checkpoint_%04d.pth.tar'", "%", "(", "epoch", ")", ")", "\n", "print", "(", "'==> Epoch: %d/%d Loss: %0.2f Alpha:%0.2f'", "%", "(", "epoch", ",", "FLAGS", ".", "max_num_epoch", ",", "loss_per_epoch", ",", "alpha", ")", ")", "\n", "\n", "eer", ",", "auc", "=", "online_evaluation", ".", "test", "(", "FLAGS", ",", "model", ",", "face_test", ",", "voice_test", ")", "\n", "eer_list", ".", "append", "(", "eer", ")", "\n", "auc_list", ".", "append", "(", "auc", ")", "\n", "if", "eer", "<=", "min", "(", "eer_list", ")", "or", "auc", ">=", "max", "(", "auc_list", ")", ":", "\n", "                    ", "min_eer", "=", "eer", "\n", "max_auc", "=", "auc", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", "}", ",", "save_best", ",", "'checkpoint_%04d.pth.tar'", "%", "(", "epoch", ")", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "f", ".", "write", "(", "'%04d\\t%0.4f\\t%0.2f\\t%0.2f\\n'", "%", "(", "epoch", ",", "loss_per_epoch", ",", "eer", ",", "auc", ")", ")", "\n", "loss_per_epoch", "=", "0", "\n", "\n", "", "", "plt", ".", "figure", "(", "1", ")", "\n", "plt", ".", "title", "(", "'Total Loss_%f'", "%", "(", "alpha", ")", ")", "\n", "plt", ".", "plot", "(", "loss_plot", ")", "\n", "plt", ".", "savefig", "(", "'output/%s_%0.2f_total_loss.jpg'", "%", "(", "FLAGS", ".", "fusion", ",", "alpha", ")", ",", "dpi", "=", "800", ")", "\n", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "title", "(", "'EER_%f'", "%", "(", "alpha", ")", ")", "\n", "plt", ".", "plot", "(", "eer_list", ")", "\n", "plt", ".", "savefig", "(", "'output/%s_%0.2f_eer.jpg'", "%", "(", "FLAGS", ".", "fusion", ",", "alpha", ")", ",", "dpi", "=", "800", ")", "\n", "\n", "plt", ".", "figure", "(", "3", ")", "\n", "plt", ".", "title", "(", "'AUC_%f'", "%", "(", "alpha", ")", ")", "\n", "plt", ".", "plot", "(", "auc_list", ")", "\n", "plt", ".", "savefig", "(", "'output/%s_%0.2f_auc.jpg'", "%", "(", "FLAGS", ".", "fusion", ",", "alpha", ")", ",", "dpi", "=", "800", ")", "\n", "\n", "return", "loss_plot", ",", "min_eer", ",", "max_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.train": [[227, 260], ["main.RunningAverage", "main.RunningAverage", "main.RunningAverage", "model.train", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model.train_forward", "opl_loss", "ce_loss", "optimizer.zero_grad", "loss.backward", "main.RunningAverage.update", "main.RunningAverage.update", "main.RunningAverage.update", "optimizer.step", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "loss.item", "loss_opl.item", "ce_loss.item", "main.RunningAverage.avg", "main.RunningAverage.avg", "main.RunningAverage.avg", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float.cuda", "torch.from_numpy().float.cuda", "torch.from_numpy.cuda"], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.train", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.train_forward", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.update", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.update", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.update", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.avg", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.avg", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.RunningAverage.avg"], ["", "", "def", "train", "(", "face_feats", ",", "voice_feats", ",", "labels", ",", "model", ",", "optimizer", ",", "ce_loss", ",", "opl_loss", ",", "alpha", ")", ":", "\n", "\n", "    ", "average_loss", "=", "RunningAverage", "(", ")", "\n", "soft_losses", "=", "RunningAverage", "(", ")", "\n", "opl_losses", "=", "RunningAverage", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "face_feats", "=", "torch", ".", "from_numpy", "(", "face_feats", ")", ".", "float", "(", ")", "\n", "voice_feats", "=", "torch", ".", "from_numpy", "(", "voice_feats", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", "\n", "\n", "if", "FLAGS", ".", "cuda", ":", "\n", "        ", "face_feats", ",", "voice_feats", ",", "labels", "=", "face_feats", ".", "cuda", "(", ")", ",", "voice_feats", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "face_feats", ",", "voice_feats", ",", "labels", "=", "Variable", "(", "face_feats", ")", ",", "Variable", "(", "voice_feats", ")", ",", "Variable", "(", "labels", ")", "\n", "comb", ",", "face_embeds", ",", "voice_embeds", "=", "model", ".", "train_forward", "(", "face_feats", ",", "voice_feats", ",", "labels", ")", "\n", "\n", "loss_opl", ",", "s_fac", ",", "d_fac", "=", "opl_loss", "(", "comb", "[", "0", "]", ",", "labels", ")", "\n", "\n", "loss_soft", "=", "ce_loss", "(", "comb", "[", "1", "]", ",", "labels", ")", "\n", "\n", "loss", "=", "loss_soft", "+", "alpha", "*", "loss_opl", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "average_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "opl_losses", ".", "update", "(", "loss_opl", ".", "item", "(", ")", ")", "\n", "soft_losses", ".", "update", "(", "loss_soft", ".", "item", "(", ")", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "average_loss", ".", "avg", "(", ")", ",", "opl_losses", ".", "avg", "(", ")", ",", "soft_losses", ".", "avg", "(", ")", ",", "s_fac", ",", "d_fac", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.main.save_checkpoint": [[277, 280], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "directory", ",", "filename", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.GatedFusion.__init__": [[15, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "retrieval_model.Forward_Block", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "face_input", ",", "voice_input", ",", "embed_dim_in", ",", "mid_att_dim", ",", "emb_dim_out", ")", ":", "\n", "        ", "super", "(", "GatedFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_face", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "linear_voice", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "final_transform", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "attention", "=", "nn", ".", "Sequential", "(", "\n", "Forward_Block", "(", "embed_dim_in", "*", "2", ",", "mid_att_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "mid_att_dim", ",", "emb_dim_out", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.GatedFusion.forward": [[25, 35], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "retrieval_model.GatedFusion.final_transform", "retrieval_model.GatedFusion.attention", "retrieval_model.GatedFusion.linear_face", "retrieval_model.GatedFusion.linear_voice"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "face_input", ",", "voice_input", ")", ":", "\n", "        ", "concat", "=", "torch", ".", "cat", "(", "(", "face_input", ",", "voice_input", ")", ",", "dim", "=", "1", ")", "\n", "attention_out", "=", "torch", ".", "sigmoid", "(", "self", ".", "attention", "(", "concat", ")", ")", "\n", "face_trans", "=", "torch", ".", "tanh", "(", "self", ".", "linear_face", "(", "face_input", ")", ")", "\n", "voice_trans", "=", "torch", ".", "tanh", "(", "self", ".", "linear_voice", "(", "voice_input", ")", ")", "\n", "\n", "out", "=", "face_trans", "*", "attention_out", "+", "(", "1.0", "-", "attention_out", ")", "*", "voice_trans", "\n", "out", "=", "self", ".", "final_transform", "(", "out", ")", "\n", "\n", "return", "out", ",", "face_trans", ",", "voice_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.Forward_Block.__init__": [[38, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "128", ",", "output_dim", "=", "128", ",", "p_val", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Forward_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "p_val", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.Forward_Block.forward": [[46, 48], ["retrieval_model.Forward_Block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.LinearWeightedAvg.__init__": [[61, 65], ["torch.Module.__init__", "torch.Parameter().requires_grad_", "torch.Parameter().requires_grad_", "torch.Parameter().requires_grad_", "torch.Parameter().requires_grad_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "face_feat_dim", ",", "voice_feat_dim", ")", ":", "\n", "        ", "super", "(", "LinearWeightedAvg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight1", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "1", ",", "device", "=", "'cuda'", ")", ")", ".", "requires_grad_", "(", ")", "\n", "self", ".", "weight2", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "1", ",", "device", "=", "'cuda'", ")", ")", ".", "requires_grad_", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "face_feat", ",", "voice_feat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.LinearWeightedAvg.forward": [[65, 67], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "face_feat", ",", "voice_feat", ")", ":", "\n", "        ", "return", "self", ".", "weight1", "*", "face_feat", "+", "self", ".", "weight2", "*", "voice_feat", ",", "face_feat", ",", "voice_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.EmbedBranch.__init__": [[73, 76], ["torch.Module.__init__", "make_fc_1d().cuda", "retrieval_model.make_fc_1d"], "methods", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.__init__", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.make_fc_1d"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "embedding_dim", ")", ":", "\n", "        ", "super", "(", "EmbedBranch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "make_fc_1d", "(", "feat_dim", ",", "embedding_dim", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.EmbedBranch.forward": [[77, 81], ["retrieval_model.EmbedBranch.fc1", "torch.functional.normalize", "torch.functional.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.__init__": [[87, 102], ["torch.Module.__init__", "retrieval_model.EmbedBranch", "retrieval_model.EmbedBranch", "torch.Linear", "torch.Linear", "retrieval_model.LinearWeightedAvg", "retrieval_model.FOP.cuda", "retrieval_model.GatedFusion"], "methods", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "face_feat_dim", ",", "voice_feat_dim", ")", ":", "\n", "        ", "super", "(", "FOP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "voice_branch", "=", "EmbedBranch", "(", "voice_feat_dim", ",", "args", ".", "dim_embed", ")", "\n", "self", ".", "face_branch", "=", "EmbedBranch", "(", "face_feat_dim", ",", "args", ".", "dim_embed", ")", "\n", "\n", "if", "args", ".", "fusion", "==", "'linear'", ":", "\n", "            ", "self", ".", "fusion_layer", "=", "LinearWeightedAvg", "(", "args", ".", "dim_embed", ",", "args", ".", "dim_embed", ")", "\n", "", "elif", "args", ".", "fusion", "==", "'gated'", ":", "\n", "            ", "self", ".", "fusion_layer", "=", "GatedFusion", "(", "face_feat_dim", ",", "voice_feat_dim", ",", "args", ".", "dim_embed", ",", "128", ",", "args", ".", "dim_embed", ")", "\n", "\n", "", "self", ".", "logits_layer", "=", "nn", ".", "Linear", "(", "args", ".", "dim_embed", ",", "901", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.forward": [[103, 110], ["retrieval_model.FOP.voice_branch", "retrieval_model.FOP.face_branch", "retrieval_model.FOP.fusion_layer", "retrieval_model.FOP.logits_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "faces", ",", "voices", ")", ":", "\n", "        ", "voices", "=", "self", ".", "voice_branch", "(", "voices", ")", "\n", "faces", "=", "self", ".", "face_branch", "(", "faces", ")", "\n", "feats", ",", "faces", ",", "voices", "=", "self", ".", "fusion_layer", "(", "faces", ",", "voices", ")", "\n", "logits", "=", "self", ".", "logits_layer", "(", "feats", ")", "\n", "\n", "return", "[", "feats", ",", "logits", "]", ",", "faces", ",", "voices", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.FOP.train_forward": [[111, 115], ["retrieval_model.FOP."], "methods", ["None"], ["", "def", "train_forward", "(", "self", ",", "faces", ",", "voices", ",", "labels", ")", ":", "\n", "\n", "        ", "comb", ",", "face_embeds", ",", "voice_embeds", "=", "self", "(", "faces", ",", "voices", ")", "\n", "return", "comb", ",", "face_embeds", ",", "voice_embeds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.retrieval_model.make_fc_1d": [[50, 55], ["torch.Sequential", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Dropout"], "function", ["None"], ["", "", "def", "make_fc_1d", "(", "f_in", ",", "f_out", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "f_in", ",", "f_out", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "f_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.online_evaluation.read_data": [[20, 38], ["print", "pandas.read_csv", "print", "pandas.read_csv", "numpy.asarray", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "read_data", "(", ")", ":", "\n", "\n", "    ", "test_file_face", "=", "'D:/research/UETGen/BMVC/featFiles/face_veriflist_test_unseenunheard.csv'", "\n", "test_file_voice", "=", "'D:/research/UETGen/BMVC/featFiles/voice_veriflist_test_unseenunheard.csv'", "\n", "\n", "print", "(", "'Reading Test Faces'", ")", "\n", "face_test", "=", "pd", ".", "read_csv", "(", "test_file_face", ",", "header", "=", "None", ")", "\n", "print", "(", "'Reading Test Voices'", ")", "\n", "voice_test", "=", "pd", ".", "read_csv", "(", "test_file_voice", ",", "header", "=", "None", ")", "\n", "\n", "face_test", "=", "np", ".", "asarray", "(", "face_test", ")", "\n", "face_test", "=", "face_test", "[", ":", ",", ":", "4096", "]", "\n", "voice_test", "=", "np", ".", "asarray", "(", "voice_test", ")", "\n", "voice_test", "=", "voice_test", "[", ":", ",", ":", "512", "]", "\n", "\n", "face_test", "=", "torch", ".", "from_numpy", "(", "face_test", ")", ".", "float", "(", ")", "\n", "voice_test", "=", "torch", ".", "from_numpy", "(", "voice_test", ")", ".", "float", "(", ")", "\n", "return", "face_test", ",", "voice_test", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.online_evaluation.same_func": [[42, 51], ["range", "len", "issame_lst.append"], "function", ["None"], ["", "def", "same_func", "(", "f", ")", ":", "\n", "    ", "issame_lst", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "f", ")", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "issame", "=", "True", "\n", "", "else", ":", "\n", "            ", "issame", "=", "False", "\n", "", "issame_lst", ".", "append", "(", "issame", ")", "\n", "", "return", "issame_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.online_evaluation.calculate_accuracy": [[52, 63], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "float", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "float", "float", "float", "float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "\n", "tpr", "=", "0", "if", "(", "tp", "+", "fn", "==", "0", ")", "else", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fpr", "=", "0", "if", "(", "fp", "+", "tn", "==", "0", ")", "else", "float", "(", "fp", ")", "/", "float", "(", "fp", "+", "tn", ")", "\n", "acc", "=", "float", "(", "tp", "+", "tn", ")", "/", "dist", ".", "size", "\n", "return", "tpr", ",", "fpr", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.online_evaluation.calculate_val_far": [[64, 73], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_not", "float", "float", "float", "float", "numpy.logical_not"], "function", ["None"], ["", "def", "calculate_val_far", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "true_accept", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "false_accept", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "n_same", "=", "np", ".", "sum", "(", "actual_issame", ")", "\n", "n_diff", "=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "actual_issame", ")", ")", "\n", "val", "=", "float", "(", "true_accept", ")", "/", "float", "(", "n_same", ")", "\n", "far", "=", "float", "(", "false_accept", ")", "/", "float", "(", "n_diff", ")", "\n", "return", "val", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.online_evaluation.calculate_val": [[74, 106], ["min", "len", "sklearn.model_selection.KFold", "numpy.zeros", "numpy.zeros", "numpy.subtract", "numpy.sum", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "numpy.std", "len", "numpy.square", "sklearn.model_selection.KFold.split", "numpy.zeros", "enumerate", "online_evaluation.calculate_val_far", "online_evaluation.calculate_val_far", "numpy.max", "scipy.interpolate.interp1d", "interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_val_far", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_val_far"], ["", "def", "calculate_val", "(", "thresholds", ",", "embeddings1", ",", "embeddings2", ",", "actual_issame", ",", "far_target", ",", "nrof_folds", "=", "10", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "KFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "val", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "far", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "# Find the threshold that gives FAR = far_target", "\n", "        ", "far_train", "=", "np", ".", "zeros", "(", "nrof_thresholds", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "far_train", "[", "threshold_idx", "]", "=", "calculate_val_far", "(", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "if", "np", ".", "max", "(", "far_train", ")", ">=", "far_target", ":", "\n", "            ", "f", "=", "interpolate", ".", "interp1d", "(", "far_train", ",", "thresholds", ",", "kind", "=", "'slinear'", ")", "\n", "threshold", "=", "f", "(", "far_target", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "\n", "", "val", "[", "fold_idx", "]", ",", "far", "[", "fold_idx", "]", "=", "calculate_val_far", "(", "threshold", ",", "dist", "[", "test_set", "]", ",", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "val_mean", "=", "np", ".", "mean", "(", "val", ")", "\n", "far_mean", "=", "np", ".", "mean", "(", "far", ")", "\n", "val_std", "=", "np", ".", "std", "(", "val", ")", "\n", "return", "val_mean", ",", "val_std", ",", "far_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.online_evaluation.calculate_roc": [[107, 141], ["min", "len", "sklearn.model_selection.KFold", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.subtract", "numpy.sum", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "len", "numpy.square", "sklearn.model_selection.KFold.split", "numpy.zeros", "enumerate", "numpy.argmax", "enumerate", "online_evaluation.calculate_accuracy", "online_evaluation.calculate_accuracy", "online_evaluation.calculate_accuracy"], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_accuracy", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_accuracy", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_accuracy"], ["", "def", "calculate_roc", "(", "thresholds", ",", "embeddings1", ",", "embeddings2", ",", "actual_issame", ",", "nrof_folds", "=", "10", ")", ":", "\n", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "KFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "tprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "fprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "accuracy", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ")", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "# Find the best threshold for the fold", "\n", "        ", "acc_train", "=", "np", ".", "zeros", "(", "(", "nrof_thresholds", ")", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "_", ",", "acc_train", "[", "threshold_idx", "]", "=", "calculate_accuracy", "(", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "best_threshold_index", "=", "np", ".", "argmax", "(", "acc_train", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "tprs", "[", "fold_idx", ",", "threshold_idx", "]", ",", "fprs", "[", "fold_idx", ",", "threshold_idx", "]", ",", "_", "=", "calculate_accuracy", "(", "threshold", ",", "\n", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "\n", "test_set", "]", ")", "\n", "", "_", ",", "_", ",", "accuracy", "[", "fold_idx", "]", "=", "calculate_accuracy", "(", "thresholds", "[", "best_threshold_index", "]", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "tpr", "=", "np", ".", "mean", "(", "tprs", ",", "0", ")", "\n", "fpr", "=", "np", ".", "mean", "(", "fprs", ",", "0", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.online_evaluation.evaluate": [[142, 154], ["numpy.arange", "online_evaluation.calculate_roc", "numpy.arange", "online_evaluation.calculate_val", "print", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_roc", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_val"], ["", "def", "evaluate", "(", "embeddings", ",", "actual_issame", ",", "nrof_folds", "=", "10", ")", ":", "\n", "    ", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.01", ")", "\n", "embeddings1", "=", "embeddings", "[", "0", ":", ":", "2", "]", "\n", "embeddings2", "=", "embeddings", "[", "1", ":", ":", "2", "]", "\n", "tpr", ",", "fpr", ",", "accuracy", "=", "calculate_roc", "(", "thresholds", ",", "embeddings1", ",", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "nrof_folds", "=", "nrof_folds", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.001", ")", "\n", "val", ",", "val_std", ",", "far", "=", "calculate_val", "(", "thresholds", ",", "embeddings1", ",", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "1e-3", ",", "nrof_folds", "=", "nrof_folds", ")", "\n", "\n", "print", "(", "'\\nEvaluating'", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.online_evaluation.test": [[155, 198], ["model.eval", "model.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.no_grad", "model", "face.cpu().detach().numpy.cpu().detach().numpy", "voice.cpu().detach().numpy.cpu().detach().numpy", "enumerate", "print", "online_evaluation.same_func", "numpy.asarray", "online_evaluation.evaluate", "print", "sklearn.metrics.auc", "print", "numpy.abs", "numpy.argmin", "numpy.mean", "print", "face_test.cuda", "voice_test.cuda", "np.asarray.append", "np.asarray.append", "len", "face.cpu().detach().numpy.cpu().detach", "voice.cpu().detach().numpy.cpu().detach", "numpy.nanargmin", "numpy.mean", "numpy.std", "numpy.absolute", "face.cpu().detach().numpy.cpu", "voice.cpu().detach().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.same_func", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.evaluate"], ["", "def", "test", "(", "args", ",", "model", ",", "face_test", ",", "voice_test", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "face_test", ",", "voice_test", "=", "face_test", ".", "cuda", "(", ")", ",", "voice_test", ".", "cuda", "(", ")", "\n", "\n", "", "face_test", ",", "voice_test", "=", "Variable", "(", "face_test", ")", ",", "Variable", "(", "voice_test", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_", ",", "face", ",", "voice", "=", "model", "(", "face_test", ",", "voice_test", ")", "\n", "\n", "face", ",", "voice", "=", "face", ".", "data", ",", "voice", ".", "data", "\n", "\n", "face", "=", "face", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "voice", "=", "voice", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "feat_list", "=", "[", "]", "\n", "\n", "for", "idx", ",", "sfeat", "in", "enumerate", "(", "face", ")", ":", "\n", "            ", "feat_list", ".", "append", "(", "voice", "[", "idx", "]", ")", "\n", "feat_list", ".", "append", "(", "sfeat", ")", "\n", "\n", "", "print", "(", "'Total Number of Samples: '", ",", "len", "(", "feat_list", ")", ")", "\n", "\n", "issame_lst", "=", "same_func", "(", "feat_list", ")", "\n", "feat_list", "=", "np", ".", "asarray", "(", "feat_list", ")", "\n", "\n", "tpr", ",", "fpr", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "=", "evaluate", "(", "feat_list", ",", "issame_lst", ",", "10", ")", "\n", "\n", "print", "(", "'Accuracy: %1.3f+-%1.3f'", "%", "(", "np", ".", "mean", "(", "accuracy", ")", ",", "np", ".", "std", "(", "accuracy", ")", ")", ")", "\n", "\n", "auc", "=", "metrics", ".", "auc", "(", "fpr", ",", "tpr", ")", "\n", "print", "(", "'Area Under Curve (AUC): %1.3f'", "%", "auc", ")", "\n", "fnr", "=", "1", "-", "tpr", "\n", "abs_diffs", "=", "np", ".", "abs", "(", "fpr", "-", "fnr", ")", "\n", "min_index", "=", "np", ".", "argmin", "(", "abs_diffs", ")", "\n", "eer", "=", "np", ".", "mean", "(", "(", "fpr", "[", "min_index", "]", ",", "fnr", "[", "min_index", "]", ")", ")", "\n", "eer", "=", "fpr", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "#    eer = brentq(lambda x: 1. - x - interpolate.interp1d(fpr, tpr)(x), 0., 1.)", "\n", "print", "(", "'Equal Error Rate (EER): %1.3f\\n\\n'", "%", "eer", ")", "\n", "\n", "", "return", "eer", ",", "auc", "\n", "", ""]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.read_data": [[24, 40], ["print", "pandas.read_csv", "print", "pandas.read_csv", "numpy.asarray", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "read_data", "(", ")", ":", "\n", "    ", "test_file_face", "=", "'features/face_veriflist_test_random_unseenunheard.csv'", "\n", "test_file_voice", "=", "'features/voice_veriflist_test_random_unseenunheard.csv'", "\n", "print", "(", "'Reading Test Face'", ")", "\n", "face_test", "=", "pd", ".", "read_csv", "(", "test_file_face", ",", "header", "=", "None", ")", "\n", "print", "(", "'Reading Test Voice'", ")", "\n", "voice_test", "=", "pd", ".", "read_csv", "(", "test_file_voice", ",", "header", "=", "None", ")", "\n", "\n", "face_test", "=", "np", ".", "asarray", "(", "face_test", ")", "\n", "face_test", "=", "face_test", "[", ":", ",", ":", "4096", "]", "\n", "voice_test", "=", "np", ".", "asarray", "(", "voice_test", ")", "\n", "voice_test", "=", "voice_test", "[", ":", ",", ":", "512", "]", "\n", "\n", "face_test", "=", "torch", ".", "from_numpy", "(", "face_test", ")", ".", "float", "(", ")", "\n", "voice_test", "=", "torch", ".", "from_numpy", "(", "voice_test", ")", ".", "float", "(", ")", "\n", "return", "face_test", ",", "voice_test", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.load_checkpoint": [[47, 62], ["os.path.isfile", "print", "torch.load", "torch.load", "model.load_state_dict", "print", "print"], "function", ["None"], ["def", "load_checkpoint", "(", "model", ",", "resume_filename", ")", ":", "\n", "    ", "start_epoch", "=", "1", "\n", "best_acc", "=", "0.0", "\n", "if", "resume_filename", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "resume_filename", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "resume_filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_filename", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "resume_filename", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "resume_filename", ")", ")", "\n", "\n", "", "", "return", "start_epoch", ",", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.same_func": [[63, 72], ["range", "len", "issame_lst.append"], "function", ["None"], ["", "def", "same_func", "(", "f", ")", ":", "\n", "    ", "issame_lst", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "f", ")", ")", ":", "\n", "        ", "if", "idx", "%", "2", "==", "0", ":", "\n", "            ", "issame", "=", "True", "\n", "", "else", ":", "\n", "            ", "issame", "=", "False", "\n", "", "issame_lst", ".", "append", "(", "issame", ")", "\n", "", "return", "issame_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_accuracy": [[73, 84], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "float", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "float", "float", "float", "float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "tp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "predict_issame", ")", ",", "actual_issame", ")", ")", "\n", "\n", "tpr", "=", "0", "if", "(", "tp", "+", "fn", "==", "0", ")", "else", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", ")", "\n", "fpr", "=", "0", "if", "(", "fp", "+", "tn", "==", "0", ")", "else", "float", "(", "fp", ")", "/", "float", "(", "fp", "+", "tn", ")", "\n", "acc", "=", "float", "(", "tp", "+", "tn", ")", "/", "dist", ".", "size", "\n", "return", "tpr", ",", "fpr", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_val_far": [[85, 94], ["numpy.less", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_not", "float", "float", "float", "float", "numpy.logical_not"], "function", ["None"], ["", "def", "calculate_val_far", "(", "threshold", ",", "dist", ",", "actual_issame", ")", ":", "\n", "    ", "predict_issame", "=", "np", ".", "less", "(", "dist", ",", "threshold", ")", "\n", "true_accept", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "actual_issame", ")", ")", "\n", "false_accept", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "predict_issame", ",", "np", ".", "logical_not", "(", "actual_issame", ")", ")", ")", "\n", "n_same", "=", "np", ".", "sum", "(", "actual_issame", ")", "\n", "n_diff", "=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "actual_issame", ")", ")", "\n", "val", "=", "float", "(", "true_accept", ")", "/", "float", "(", "n_same", ")", "\n", "far", "=", "float", "(", "false_accept", ")", "/", "float", "(", "n_diff", ")", "\n", "return", "val", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_val": [[95, 126], ["min", "len", "sklearn.model_selection.KFold", "numpy.zeros", "numpy.zeros", "numpy.subtract", "numpy.sum", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "numpy.std", "len", "numpy.square", "sklearn.model_selection.KFold.split", "numpy.zeros", "enumerate", "test.calculate_val_far", "test.calculate_val_far", "numpy.max", "scipy.interpolate.interp1d", "interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_val_far", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_val_far"], ["", "def", "calculate_val", "(", "thresholds", ",", "embeddings1", ",", "embeddings2", ",", "actual_issame", ",", "far_target", ",", "nrof_folds", "=", "10", ")", ":", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "KFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "val", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "far", "=", "np", ".", "zeros", "(", "nrof_folds", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "        ", "far_train", "=", "np", ".", "zeros", "(", "nrof_thresholds", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "far_train", "[", "threshold_idx", "]", "=", "calculate_val_far", "(", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "if", "np", ".", "max", "(", "far_train", ")", ">=", "far_target", ":", "\n", "            ", "f", "=", "interpolate", ".", "interp1d", "(", "far_train", ",", "thresholds", ",", "kind", "=", "'slinear'", ")", "\n", "threshold", "=", "f", "(", "far_target", ")", "\n", "", "else", ":", "\n", "            ", "threshold", "=", "0.0", "\n", "\n", "", "val", "[", "fold_idx", "]", ",", "far", "[", "fold_idx", "]", "=", "calculate_val_far", "(", "threshold", ",", "dist", "[", "test_set", "]", ",", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "val_mean", "=", "np", ".", "mean", "(", "val", ")", "\n", "far_mean", "=", "np", ".", "mean", "(", "far", ")", "\n", "val_std", "=", "np", ".", "std", "(", "val", ")", "\n", "return", "val_mean", ",", "val_std", ",", "far_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_roc": [[127, 160], ["min", "len", "sklearn.model_selection.KFold", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.subtract", "numpy.sum", "numpy.arange", "enumerate", "numpy.mean", "numpy.mean", "len", "numpy.square", "sklearn.model_selection.KFold.split", "numpy.zeros", "enumerate", "numpy.argmax", "enumerate", "test.calculate_accuracy", "test.calculate_accuracy", "test.calculate_accuracy"], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_accuracy", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_accuracy", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_accuracy"], ["", "def", "calculate_roc", "(", "thresholds", ",", "embeddings1", ",", "embeddings2", ",", "actual_issame", ",", "nrof_folds", "=", "10", ")", ":", "\n", "\n", "    ", "assert", "(", "embeddings1", ".", "shape", "[", "0", "]", "==", "embeddings2", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings1", ".", "shape", "[", "1", "]", "==", "embeddings2", ".", "shape", "[", "1", "]", ")", "\n", "nrof_pairs", "=", "min", "(", "len", "(", "actual_issame", ")", ",", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "nrof_thresholds", "=", "len", "(", "thresholds", ")", "\n", "k_fold", "=", "KFold", "(", "n_splits", "=", "nrof_folds", ",", "shuffle", "=", "False", ")", "\n", "\n", "tprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "fprs", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ",", "nrof_thresholds", ")", ")", "\n", "accuracy", "=", "np", ".", "zeros", "(", "(", "nrof_folds", ")", ")", "\n", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings1", ",", "embeddings2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "nrof_pairs", ")", "\n", "\n", "for", "fold_idx", ",", "(", "train_set", ",", "test_set", ")", "in", "enumerate", "(", "k_fold", ".", "split", "(", "indices", ")", ")", ":", "\n", "\n", "        ", "acc_train", "=", "np", ".", "zeros", "(", "(", "nrof_thresholds", ")", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "_", ",", "_", ",", "acc_train", "[", "threshold_idx", "]", "=", "calculate_accuracy", "(", "threshold", ",", "dist", "[", "train_set", "]", ",", "actual_issame", "[", "train_set", "]", ")", "\n", "", "best_threshold_index", "=", "np", ".", "argmax", "(", "acc_train", ")", "\n", "for", "threshold_idx", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "tprs", "[", "fold_idx", ",", "threshold_idx", "]", ",", "fprs", "[", "fold_idx", ",", "threshold_idx", "]", ",", "_", "=", "calculate_accuracy", "(", "threshold", ",", "\n", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "\n", "test_set", "]", ")", "\n", "", "_", ",", "_", ",", "accuracy", "[", "fold_idx", "]", "=", "calculate_accuracy", "(", "thresholds", "[", "best_threshold_index", "]", ",", "dist", "[", "test_set", "]", ",", "\n", "actual_issame", "[", "test_set", "]", ")", "\n", "\n", "", "tpr", "=", "np", ".", "mean", "(", "tprs", ",", "0", ")", "\n", "fpr", "=", "np", ".", "mean", "(", "fprs", ",", "0", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.evaluate": [[161, 173], ["numpy.arange", "test.calculate_roc", "numpy.arange", "test.calculate_val", "print", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_roc", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.calculate_val"], ["", "def", "evaluate", "(", "embeddings", ",", "actual_issame", ",", "nrof_folds", "=", "10", ")", ":", "\n", "    ", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.01", ")", "\n", "embeddings1", "=", "embeddings", "[", "0", ":", ":", "2", "]", "\n", "embeddings2", "=", "embeddings", "[", "1", ":", ":", "2", "]", "\n", "tpr", ",", "fpr", ",", "accuracy", "=", "calculate_roc", "(", "thresholds", ",", "embeddings1", ",", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "nrof_folds", "=", "nrof_folds", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "4", ",", "0.001", ")", "\n", "val", ",", "val_std", ",", "far", "=", "calculate_val", "(", "thresholds", ",", "embeddings1", ",", "embeddings2", ",", "\n", "np", ".", "asarray", "(", "actual_issame", ")", ",", "1e-3", ",", "nrof_folds", "=", "nrof_folds", ")", "\n", "\n", "print", "(", "'\\nEvaluating'", ")", "\n", "return", "tpr", ",", "fpr", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "\n", "\n"]], "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.test": [[174, 223], ["retrieval_model.FOP", "torch.load", "torch.load", "retrieval_model.FOP.load_state_dict", "print", "retrieval_model.FOP.eval", "retrieval_model.FOP.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.no_grad", "torch.no_grad", "retrieval_model.FOP.", "face.cpu().detach().numpy.cpu().detach().numpy", "voice.cpu().detach().numpy.cpu().detach().numpy", "enumerate", "print", "test.same_func", "numpy.asarray", "test.evaluate", "print", "sklearn.metrics.auc", "print", "numpy.abs", "numpy.argmin", "numpy.mean", "print", "face_test.cuda", "voice_test.cuda", "np.asarray.append", "np.asarray.append", "len", "face.cpu().detach().numpy.cpu().detach", "voice.cpu().detach().numpy.cpu().detach", "numpy.nanargmin", "numpy.mean", "numpy.std", "numpy.absolute", "face.cpu().detach().numpy.cpu", "voice.cpu().detach().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.same_func", "home.repos.pwc.inspect_result.msaadsaeed_FOP.None.test.evaluate"], ["", "def", "test", "(", "face_test", ",", "voice_test", ")", ":", "\n", "    ", "n_class", "=", "64", "\n", "model", "=", "FOP", "(", "FLAGS", ",", "face_test", ".", "shape", "[", "1", "]", ",", "voice_test", ".", "shape", "[", "1", "]", ",", "n_class", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "FLAGS", ".", "ckpt", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "'checkpoint.pth.tar'", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "if", "FLAGS", ".", "cuda", ":", "\n", "        ", "face_test", ",", "voice_test", "=", "face_test", ".", "cuda", "(", ")", ",", "voice_test", ".", "cuda", "(", ")", "\n", "\n", "", "face_test", ",", "voice_test", "=", "Variable", "(", "face_test", ")", ",", "Variable", "(", "voice_test", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_", ",", "face", ",", "voice", "=", "model", "(", "face_test", ",", "voice_test", ")", "\n", "\n", "face", ",", "voice", "=", "face", ".", "data", ",", "voice", ".", "data", "\n", "\n", "face", "=", "face", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "voice", "=", "voice", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "feat_list", "=", "[", "]", "\n", "\n", "for", "idx", ",", "sfeat", "in", "enumerate", "(", "face", ")", ":", "\n", "            ", "feat_list", ".", "append", "(", "voice", "[", "idx", "]", ")", "\n", "feat_list", ".", "append", "(", "sfeat", ")", "\n", "\n", "", "print", "(", "'Total Number of Samples: '", ",", "len", "(", "feat_list", ")", ")", "\n", "\n", "issame_lst", "=", "same_func", "(", "feat_list", ")", "\n", "feat_list", "=", "np", ".", "asarray", "(", "feat_list", ")", "\n", "\n", "tpr", ",", "fpr", ",", "accuracy", ",", "val", ",", "val_std", ",", "far", "=", "evaluate", "(", "feat_list", ",", "issame_lst", ",", "10", ")", "\n", "\n", "print", "(", "'Accuracy: %1.3f+-%1.3f'", "%", "(", "np", ".", "mean", "(", "accuracy", ")", ",", "np", ".", "std", "(", "accuracy", ")", ")", ")", "\n", "\n", "auc", "=", "metrics", ".", "auc", "(", "fpr", ",", "tpr", ")", "\n", "print", "(", "'Area Under Curve (AUC): %1.3f'", "%", "auc", ")", "\n", "fnr", "=", "1", "-", "tpr", "\n", "abs_diffs", "=", "np", ".", "abs", "(", "fpr", "-", "fnr", ")", "\n", "min_index", "=", "np", ".", "argmin", "(", "abs_diffs", ")", "\n", "eer", "=", "np", ".", "mean", "(", "(", "fpr", "[", "min_index", "]", ",", "fnr", "[", "min_index", "]", ")", ")", "\n", "eer", "=", "fpr", "[", "np", ".", "nanargmin", "(", "np", ".", "absolute", "(", "(", "fnr", "-", "fpr", ")", ")", ")", "]", "\n", "#    eer = brentq(lambda x: 1. - x - interpolate.interp1d(fpr, tpr)(x), 0., 1.)", "\n", "print", "(", "'Equal Error Rate (EER): %1.3f\\n\\n'", "%", "eer", ")", "\n", "\n", "", "return", "eer", "\n", "\n"]]}