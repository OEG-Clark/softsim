{"home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.AttackerStep.__init__": [[24, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "orig_input", ",", "B", ",", "eta", ",", "delta", ",", "alpha", ",", "C", "=", "None", ",", "use_grad", "=", "True", ")", ":", "\n", "        ", "'''\n        Initialize the attacker step with a given perturbation magnitude.\n        Args:\n            eps (float): the perturbation magnitude\n            orig_input (ch.tensor): the original input\n        '''", "\n", "self", ".", "orig_input", "=", "orig_input", "# torch type", "\n", "self", ".", "B", "=", "B", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "use_grad", "=", "use_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.AttackerStep.project": [[40, 51], ["None"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "s", ",", "radius", "=", "1.", ")", ":", "\n", "        ", "'''\n        Given an input s, project it back into the feasible set\n        Args:\n            ch.tensor s : the input to project back into the feasible set.\n        Returns:\n            A `ch.tensor` that is the input projected back into\n            the feasible set, that is,\n        .. math:: \\min_{s' \\in S} \\|s' - s\\|_2\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.AttackerStep.step": [[52, 63], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "s", ",", "g", ")", ":", "\n", "        ", "'''\n        Given a gradient, make the appropriate step according to the\n        perturbation constraint (e.g. dual norm maximization for :math:`\\ell_p`\n        norms).\n        Parameters:\n            g (ch.tensor): the raw gradient\n        Returns:\n            The new input, a ch.tensor for the next step.\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.AttackerStep.random_perturb": [[64, 69], ["None"], "methods", ["None"], ["", "def", "random_perturb", "(", "self", ",", "s", ")", ":", "\n", "        ", "'''\n        Given a starting input, take a random step within the feasible set\n        '''", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.__init__": [[71, 78], ["attack.AttackerStep.__init__", "orig_input.numel", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "orig_input", ",", "B", ",", "eta", ",", "delta", ",", "alpha", ",", "attack_loss", ",", "C", "=", "None", ",", "costVector", "=", "None", ",", "use_grad", "=", "False", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "BlackBoxStep", ",", "self", ")", ".", "__init__", "(", "orig_input", ",", "B", ",", "eta", ",", "delta", ",", "alpha", ",", "C", ",", "use_grad", ")", "\n", "self", ".", "attack_loss", "=", "attack_loss", "\n", "self", ".", "N", "=", "orig_input", ".", "numel", "(", ")", "\n", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "costVector", "=", "costVector", "\n", "self", ".", "vt", "=", "torch", ".", "zeros", "(", "self", ".", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.project": [[79, 87], ["s.renorm.renorm.unsqueeze", "s.renorm.renorm.renorm", "s.renorm.renorm.view", "s.renorm.renorm.renorm"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "s", ",", "radius", "=", "1.", ")", ":", "\n", "        ", "s", "=", "s", ".", "unsqueeze", "(", "0", ")", "\n", "s", "=", "s", ".", "renorm", "(", "p", "=", "1", ",", "dim", "=", "0", ",", "maxnorm", "=", "radius", "*", "self", ".", "B", ")", "\n", "if", "self", ".", "C", "!=", "None", ":", "\n", "            ", "s", "=", "s", "*", "self", ".", "costVector", "\n", "s", "=", "s", ".", "renorm", "(", "p", "=", "1", ",", "dim", "=", "0", ",", "maxnorm", "=", "radius", "*", "self", ".", "C", ")", "\n", "", "s", "=", "s", ".", "view", "(", "-", "1", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.step": [[88, 92], ["attack.BlackBoxStep.project"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.project"], ["", "def", "step", "(", "self", ",", "s", ",", "g", ")", ":", "# v_{t+1}", "\n", "        ", "update", "=", "s", "-", "self", ".", "eta", "*", "g", "\n", "update", "=", "self", ".", "project", "(", "update", ",", "1", "-", "self", ".", "alpha", ")", "\n", "return", "update", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.random_perturb": [[93, 98], ["random.sample", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range"], "methods", ["None"], ["", "def", "random_perturb", "(", "self", ")", ":", "\n", "        ", "top_B", "=", "random", ".", "sample", "(", "range", "(", "self", ".", "N", ")", ",", "self", ".", "B", ")", "\n", "st", "=", "torch", ".", "zeros", "(", "self", ".", "N", ")", "\n", "st", "[", "top_B", "]", "=", "1", "\n", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.randomUnitVector": [[99, 103], ["numpy.array", "numpy.linalg.norm", "numpy.random.normal", "range"], "methods", ["None"], ["", "def", "randomUnitVector", "(", "self", ")", ":", "\n", "        ", "vec", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "normal", "(", "0.", ",", "1.", ")", "for", "i", "in", "range", "(", "self", ".", "N", ")", "]", ")", "\n", "mag", "=", "np", ".", "linalg", ".", "norm", "(", "vec", ")", "\n", "return", "vec", "/", "mag", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.Bandit_step": [[104, 122], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attack.BlackBoxStep.attack_loss", "attack.BlackBoxStep.step", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "attack.BlackBoxStep.randomUnitVector", "attack.BlackBoxStep.vt.sort", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "attack.BlackBoxStep.randomUnitVector"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.step", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.randomUnitVector", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.randomUnitVector"], ["", "def", "Bandit_step", "(", "self", ",", "node", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "cuda", ":", "\n", "                ", "u", "=", "torch", ".", "from_numpy", "(", "self", ".", "randomUnitVector", "(", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "u", "=", "torch", ".", "from_numpy", "(", "self", ".", "randomUnitVector", "(", ")", ")", "\n", "", "self", ".", "vt", "=", "self", ".", "vt", "+", "self", ".", "delta", "*", "u", "\n", "top_B", "=", "self", ".", "vt", ".", "sort", "(", "descending", "=", "True", ")", ".", "indices", "[", ":", "self", ".", "B", "]", "\n", "st", "=", "torch", ".", "zeros", "(", "self", ".", "N", ")", "\n", "st", "[", "top_B", "]", "=", "1", "\n", "L", "=", "self", ".", "attack_loss", "(", "st", ",", "node", ",", "0", ")", "\n", "sign", "=", "1", "\n", "coef", "=", "self", ".", "N", "/", "self", ".", "delta", "\n", "\n", "gradEst", "=", "coef", "*", "sign", "*", "L", "*", "u", "\n", "\n", "self", ".", "vt", "=", "self", ".", "step", "(", "self", ".", "vt", ",", "gradEst", ")", "\n", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_NodeClassification.__init__": [[29, 66], ["utils.utils.load_citation", "pickle.load", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "open", "importlib.import_module", "getattr", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "getattr.", "getattr.load_state_dict", "importlib.import_module", "getattr", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "getattr.", "getattr.load_state_dict", "len"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.load_citation"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "cuda", "=", "False", ")", ":", "\n", "        ", "self", ".", "T", "=", "config", "[", "\"queriesNumber\"", "]", "\n", "self", ".", "cuda", "=", "cuda", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "len", "(", "availble_gpus", ")", ">", "0", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "#", "\n", "", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "graph", "=", "load_citation", "(", "config", "[", "\"dataset\"", "]", ",", "cuda", "=", "cuda", ")", "\n", "self", ".", "x", "=", "features", "\n", "self", ".", "y", "=", "labels", "\n", "self", ".", "tensor_adjacency", "=", "adj", "\n", "self", ".", "idx_test", "=", "idx_test", "\n", "self", ".", "graph", "=", "graph", "\n", "\n", "self", ".", "eta", "=", "config", "[", "\"eta\"", "]", "\n", "self", ".", "delta", "=", "config", "[", "\"delta\"", "]", "\n", "self", ".", "alpha", "=", "config", "[", "\"alpha\"", "]", "\n", "self", ".", "B", "=", "config", "[", "\"B\"", "]", "\n", "self", ".", "C", "=", "None", "\n", "\n", "self", ".", "targetNodeSet", "=", "pickle", ".", "load", "(", "open", "(", "config", "[", "\"attackSet\"", "]", ",", "\"rb\"", ")", ")", "\n", "if", "config", "[", "\"model\"", "]", "==", "\"GCN\"", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "config", "[", "\"model_definition_file\"", "]", ")", "\n", "GCN", "=", "getattr", "(", "module", ",", "config", "[", "\"model\"", "]", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "\"model_path\"", "]", ")", "\n", "model", "=", "GCN", "(", "config", "[", "\"nfeat\"", "]", ",", "config", "[", "\"nhid\"", "]", ",", "config", "[", "\"nclass\"", "]", ",", "config", "[", "\"dropout\"", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "self", ".", "target_model", "=", "model", "\n", "self", ".", "target_model_name", "=", "\"GCN\"", "\n", "", "elif", "config", "[", "\"model\"", "]", "==", "\"SGC\"", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "config", "[", "\"model_definition_file\"", "]", ")", "\n", "SGC", "=", "getattr", "(", "module", ",", "config", "[", "\"model\"", "]", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "\"model_path\"", "]", ")", "\n", "model", "=", "SGC", "(", "nfeat", "=", "config", "[", "\"nfeat\"", "]", ",", "nclass", "=", "config", "[", "\"nclass\"", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "self", ".", "target_model", "=", "model", "\n", "self", ".", "target_model_name", "=", "\"SGC\"", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_NodeClassification.build_adjacency": [[67, 82], ["len", "adj_dict.items", "list", "numpy.asarray", "scipy.coo_matrix", "numpy.asarray.extend", "numpy.asarray.extend", "numpy.ones", "itertools.groupby", "len", "sorted"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "build_adjacency", "(", "adj_dict", ")", ":", "\n", "        ", "\"\"\"create adjacent matric based on adjacent list\"\"\"", "\n", "edge_index", "=", "[", "]", "\n", "num_nodes", "=", "len", "(", "adj_dict", ")", "\n", "for", "src", ",", "dst", "in", "adj_dict", ".", "items", "(", ")", ":", "\n", "            ", "edge_index", ".", "extend", "(", "[", "src", ",", "v", "]", "for", "v", "in", "dst", ")", "\n", "edge_index", ".", "extend", "(", "[", "v", ",", "src", "]", "for", "v", "in", "dst", ")", "\n", "# delete the duplicated edges", "\n", "", "edge_index", "=", "list", "(", "k", "for", "k", ",", "_", "in", "itertools", ".", "groupby", "(", "sorted", "(", "edge_index", ")", ")", ")", "\n", "edge_index", "=", "np", ".", "asarray", "(", "edge_index", ")", "\n", "adjacency", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "edge_index", ")", ")", ",", "\n", "(", "edge_index", "[", ":", ",", "0", "]", ",", "edge_index", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "return", "adjacency", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_NodeClassification.perturb": [[83, 100], ["numpy.argwhere().flatten().tolist", "copy.deepcopy", "blackbox.BlackboxAttackProcedure_NodeClassification.build_adjacency", "utils.normalization.fetch_normalization", "utils.normalization.fetch_normalization.", "utils.utils.sparse_mx_to_torch_sparse_tensor().float", "adj.cuda.cuda.multiply", "adj.cuda.cuda.cuda", "numpy.argwhere().flatten", "adj.cuda.cuda.T.multiply", "utils.utils.sparse_mx_to_torch_sparse_tensor", "numpy.argwhere", "sv.numpy"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.build_adjacency", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.normalization.fetch_normalization", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "perturb", "(", "self", ",", "sv", ",", "node", ")", ":", "# return perturbed graph adj", "\n", "        ", "old_edges", "=", "self", ".", "graph", "[", "node", "]", "\n", "perturbed_edges", "=", "np", ".", "argwhere", "(", "sv", ".", "numpy", "(", ")", "==", "1", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "total_edges", "=", "old_edges", "+", "perturbed_edges", "\n", "common_edges", "=", "[", "edge", "for", "edge", "in", "old_edges", "if", "edge", "in", "perturbed_edges", "]", "\n", "new_edges", "=", "[", "edge", "for", "edge", "in", "total_edges", "if", "edge", "not", "in", "common_edges", "]", "\n", "graph", "=", "copy", ".", "deepcopy", "(", "self", ".", "graph", ")", "\n", "graph", "[", "node", "]", "=", "new_edges", "\n", "adj", "=", "self", ".", "build_adjacency", "(", "graph", ")", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "adj_normalizer", "=", "fetch_normalization", "(", "\"AugNormAdj\"", ")", "\n", "adj", "=", "adj_normalizer", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_NodeClassification.queryBox": [[101, 108], ["blackbox.BlackboxAttackProcedure_NodeClassification.perturb", "[].cpu().detach().numpy", "utils.utils.sgc_precompute", "blackbox.BlackboxAttackProcedure_NodeClassification.target_model().cpu().detach().numpy", "[].cpu().detach", "blackbox.BlackboxAttackProcedure_NodeClassification.target_model().cpu().detach", "[].cpu", "blackbox.BlackboxAttackProcedure_NodeClassification.target_model().cpu", "blackbox.BlackboxAttackProcedure_NodeClassification.target_model", "blackbox.BlackboxAttackProcedure_NodeClassification.target_model"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.perturb", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.sgc_precompute"], ["", "def", "queryBox", "(", "self", ",", "sv", ",", "node", ")", ":", "\n", "        ", "adjacency", "=", "self", ".", "perturb", "(", "sv", ",", "node", ")", "\n", "if", "self", ".", "target_model_name", "==", "\"GCN\"", ":", "\n", "            ", "return", "self", ".", "target_model", "(", "self", ".", "x", ",", "adjacency", ")", "[", "node", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "self", ".", "target_model_name", "==", "\"SGC\"", ":", "\n", "            ", "perturb_feature", ",", "_", "=", "sgc_precompute", "(", "self", ".", "x", ",", "adjacency", ",", "2", ")", "\n", "return", "self", ".", "target_model", "(", "perturb_feature", "[", "node", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_NodeClassification.attackLoss": [[109, 115], ["blackbox.BlackboxAttackProcedure_NodeClassification.queryBox", "numpy.ones", "max", "query_result[].max"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.queryBox"], ["", "", "def", "attackLoss", "(", "self", ",", "sv", ",", "node", ",", "kappa", ")", ":", "\n", "        ", "query_result", "=", "self", ".", "queryBox", "(", "sv", ",", "node", ")", "\n", "mask", "=", "np", ".", "ones", "(", "query_result", ".", "size", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "mask", "[", "self", ".", "y", "[", "node", "]", "]", "=", "False", "\n", "loss", "=", "query_result", "[", "self", ".", "y", "[", "node", "]", "]", "-", "query_result", "[", "mask", "]", ".", "max", "(", ")", "\n", "return", "max", "(", "loss", ",", "-", "kappa", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_NodeClassification.banditAttack": [[116, 129], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attack.BlackBoxStep", "range", "print", "len", "attack.BlackBoxStep.Bandit_step", "blackbox.BlackboxAttackProcedure_NodeClassification.queryBox", "blackbox.BlackboxAttackProcedure_NodeClassification.argmax", "print"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.Bandit_step", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.queryBox"], ["", "def", "banditAttack", "(", "self", ",", "T", ",", "node", ")", ":", "\n", "        ", "adjVector_node", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "graph", ")", ")", "\n", "adjVector_node", "[", "self", ".", "graph", "[", "node", "]", "]", "=", "1", "\n", "step", "=", "BlackBoxStep", "(", "adjVector_node", ",", "self", ".", "B", ",", "self", ".", "eta", ",", "self", ".", "delta", ",", "self", ".", "alpha", ",", "self", ".", "attackLoss", ",", "use_grad", "=", "False", ",", "cuda", "=", "self", ".", "cuda", ")", "\n", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "perturbation", "=", "step", ".", "Bandit_step", "(", "node", ")", "\n", "query_result", "=", "self", ".", "queryBox", "(", "perturbation", ",", "node", ")", "\n", "if", "query_result", ".", "argmax", "(", ")", "!=", "self", ".", "y", "[", "node", "]", ":", "\n", "                ", "print", "(", "\"Bandit attack successfully\"", ",", "t", "+", "1", ",", "node", ")", "\n", "return", "1", ",", "t", "+", "1", "\n", "", "", "print", "(", "\"Bandit attack failed\"", ",", "T", ",", "node", ")", "\n", "return", "0", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_NodeClassification.randomAttack": [[130, 143], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attack.BlackBoxStep", "range", "print", "len", "attack.BlackBoxStep.random_perturb", "blackbox.BlackboxAttackProcedure_NodeClassification.queryBox", "blackbox.BlackboxAttackProcedure_NodeClassification.argmax", "print"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.random_perturb", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.queryBox"], ["", "def", "randomAttack", "(", "self", ",", "T", ",", "node", ")", ":", "\n", "        ", "adjVector_node", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "graph", ")", ")", "\n", "adjVector_node", "[", "self", ".", "graph", "[", "node", "]", "]", "=", "1", "\n", "step", "=", "BlackBoxStep", "(", "adjVector_node", ",", "self", ".", "B", ",", "self", ".", "eta", ",", "self", ".", "delta", ",", "self", ".", "alpha", ",", "self", ".", "attackLoss", ",", "use_grad", "=", "False", ",", "cuda", "=", "self", ".", "cuda", ")", "\n", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "perturbation", "=", "step", ".", "random_perturb", "(", ")", "\n", "query_result", "=", "self", ".", "queryBox", "(", "perturbation", ",", "node", ")", "\n", "if", "query_result", ".", "argmax", "(", ")", "!=", "self", ".", "y", "[", "node", "]", ":", "\n", "                ", "print", "(", "\"Random attack successfully\"", ",", "t", "+", "1", ",", "node", ")", "\n", "return", "1", ",", "t", "+", "1", "\n", "", "", "print", "(", "\"Random attack failed\"", ",", "T", ",", "node", ")", "\n", "return", "0", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_NodeClassification.attack": [[144, 147], ["blackbox.BlackboxAttackProcedure_NodeClassification.banditAttack", "blackbox.BlackboxAttackProcedure_NodeClassification.randomAttack", "random.choice", "random.choice"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.banditAttack", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.randomAttack"], ["", "def", "attack", "(", "self", ")", ":", "\n", "        ", "ret", "=", "self", ".", "banditAttack", "(", "self", ".", "T", ",", "random", ".", "choice", "(", "self", ".", "targetNodeSet", ")", ")", "\n", "ret", "=", "self", ".", "randomAttack", "(", "self", ".", "T", ",", "random", ".", "choice", "(", "self", ".", "targetNodeSet", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.__init__": [[149, 177], ["pickle.load", "utils.utils.LoadGraphDataSet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "list", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "open", "importlib.import_module", "getattr", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "getattr.", "getattr.load_state_dict", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.LoadGraphDataSet"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "cuda", "=", "False", ")", ":", "\n", "        ", "self", ".", "T", "=", "config", "[", "\"queriesNumber\"", "]", "\n", "self", ".", "cuda", "=", "cuda", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "len", "(", "availble_gpus", ")", ">", "0", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "#", "\n", "", "self", ".", "eta", "=", "config", "[", "\"eta\"", "]", "\n", "self", ".", "delta", "=", "config", "[", "\"delta\"", "]", "\n", "self", ".", "alpha", "=", "config", "[", "\"alpha\"", "]", "\n", "self", ".", "B", "=", "config", "[", "\"B\"", "]", "\n", "self", ".", "C", "=", "None", "\n", "\n", "\n", "self", ".", "targetGraphSet", "=", "pickle", ".", "load", "(", "open", "(", "config", "[", "\"attackSet\"", "]", ",", "\"rb\"", ")", ")", "\n", "dataset", "=", "LoadGraphDataSet", "(", "config", "[", "\"dataset\"", "]", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", ".", "test", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "self", ".", "graphs", "=", "list", "(", "test_loader", ")", "\n", "self", ".", "testset", "=", "dataset", ".", "test", "\n", "if", "config", "[", "\"model\"", "]", "==", "\"GIN\"", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "config", "[", "\"model_definition_file\"", "]", ")", "\n", "GIN", "=", "getattr", "(", "module", ",", "config", "[", "\"model\"", "]", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "\"model_path\"", "]", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "net_params", "=", "config", "[", "'net_params'", "]", "\n", "model", "=", "GIN", "(", "net_params", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "self", ".", "target_model", "=", "model", "\n", "self", ".", "target_model_name", "=", "\"GIN\"", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.perturb": [[178, 192], ["copy.deepcopy", "copy.deepcopy.number_of_nodes", "range", "range", "copy.deepcopy.has_edge_between", "copy.deepcopy.remove_edges", "copy.deepcopy.add_edge", "copy.deepcopy.edge_ids"], "methods", ["None"], ["", "", "def", "perturb", "(", "self", ",", "graphid", ",", "S", ")", ":", "\n", "        ", "A", "=", "self", ".", "testset", ".", "Adj_matrices", "[", "graphid", "]", "\n", "graph", ",", "label", "=", "self", ".", "graphs", "[", "graphid", "]", "\n", "graph2", "=", "copy", ".", "deepcopy", "(", "graph", ")", "\n", "num_nodes", "=", "graph2", ".", "number_of_nodes", "(", ")", "\n", "for", "i", "in", "range", "(", "num_nodes", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_nodes", ")", ":", "\n", "                ", "if", "S", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "if", "graph2", ".", "has_edge_between", "(", "i", ",", "j", ")", ":", "\n", "                        ", "graph2", ".", "remove_edges", "(", "graph2", ".", "edge_ids", "(", "i", ",", "j", ")", ")", "\n", "", "else", ":", "\n", "                        ", "graph2", ".", "add_edge", "(", "i", ",", "j", ")", "\n", "graph2", ".", "edata", "[", "\"feat\"", "]", "[", "-", "1", "]", "=", "A", "[", "i", ",", "j", "]", "\n", "", "", "", "", "return", "graph2", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.queryBox": [[193, 200], ["blackbox.BlackboxAttackProcedure_GraphClassification.perturb", "blackbox.BlackboxAttackProcedure_GraphClassification.to", "blackbox.BlackboxAttackProcedure_GraphClassification.ndata[].to", "blackbox.BlackboxAttackProcedure_GraphClassification.edata[].to", "blackbox.BlackboxAttackProcedure_GraphClassification.target_model", "blackbox.BlackboxAttackProcedure_GraphClassification.cpu().detach().numpy", "blackbox.BlackboxAttackProcedure_GraphClassification.cpu().detach", "blackbox.BlackboxAttackProcedure_GraphClassification.cpu"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.perturb"], ["", "def", "queryBox", "(", "self", ",", "graphid", ",", "S", ")", ":", "\n", "        ", "graph", "=", "self", ".", "perturb", "(", "graphid", ",", "S", ")", "\n", "g", "=", "graph", ".", "to", "(", "self", ".", "device", ")", "\n", "h", "=", "graph", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "e", "=", "graph", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "logits", "=", "self", ".", "target_model", "(", "g", ",", "h", ",", "e", ")", "\n", "return", "logits", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.attackLoss": [[201, 210], ["graph.number_of_nodes", "sv.reshape.reshape.reshape", "blackbox.BlackboxAttackProcedure_GraphClassification.queryBox", "numpy.ones", "max", "query_result[].max", "label.item", "label.item"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.queryBox"], ["", "def", "attackLoss", "(", "self", ",", "sv", ",", "graphid", ",", "kappa", ")", ":", "\n", "        ", "graph", ",", "label", "=", "self", ".", "graphs", "[", "graphid", "]", "\n", "num_nodes", "=", "graph", ".", "number_of_nodes", "(", ")", "\n", "sv", "=", "sv", ".", "reshape", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "query_result", "=", "self", ".", "queryBox", "(", "graphid", ",", "sv", ")", "\n", "mask", "=", "np", ".", "ones", "(", "query_result", ".", "size", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "mask", "[", "label", ".", "item", "(", ")", "]", "=", "False", "\n", "loss", "=", "query_result", "[", "label", ".", "item", "(", ")", "]", "-", "query_result", "[", "mask", "]", ".", "max", "(", ")", "\n", "return", "max", "(", "loss", ",", "-", "kappa", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.banditAttack": [[211, 227], ["graph.number_of_nodes", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "attack.BlackBoxStep", "range", "print", "attack.BlackBoxStep.Bandit_step", "perturbation.reshape.reshape.reshape", "blackbox.BlackboxAttackProcedure_GraphClassification.queryBox", "blackbox.BlackboxAttackProcedure_GraphClassification.argmax", "label.item", "print"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.Bandit_step", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.queryBox"], ["", "def", "banditAttack", "(", "self", ",", "T", ",", "graphid", ")", ":", "\n", "        ", "graph", ",", "label", "=", "self", ".", "graphs", "[", "graphid", "]", "\n", "num_nodes", "=", "graph", ".", "number_of_nodes", "(", ")", "\n", "targetgraph_adj", "=", "self", ".", "testset", ".", "Adj_matrices", "[", "graphid", "]", "\n", "targetgraph_adj", "=", "torch", ".", "from_numpy", "(", "targetgraph_adj", ")", "\n", "step", "=", "BlackBoxStep", "(", "targetgraph_adj", ",", "self", ".", "B", ",", "self", ".", "eta", ",", "self", ".", "delta", ",", "self", ".", "alpha", ",", "self", ".", "attackLoss", ",", "use_grad", "=", "False", ",", "cuda", "=", "self", ".", "cuda", ")", "\n", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "perturbation", "=", "step", ".", "Bandit_step", "(", "graphid", ")", "\n", "perturbation", "=", "perturbation", ".", "reshape", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "query_result", "=", "self", ".", "queryBox", "(", "graphid", ",", "perturbation", ")", "\n", "if", "query_result", ".", "argmax", "(", ")", "!=", "label", ".", "item", "(", ")", ":", "\n", "                ", "print", "(", "\"Bandit attack successfully\"", ",", "t", "+", "1", ",", "graphid", ")", "\n", "return", "1", ",", "t", "+", "1", "\n", "", "", "print", "(", "\"Bandit attack failed\"", ",", "T", ",", "graphid", ")", "\n", "return", "0", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.randomAttack": [[228, 244], ["graph.number_of_nodes", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "attack.BlackBoxStep", "range", "print", "attack.BlackBoxStep.random_perturb", "perturbation.reshape.reshape.reshape", "blackbox.BlackboxAttackProcedure_GraphClassification.queryBox", "blackbox.BlackboxAttackProcedure_GraphClassification.argmax", "label.item", "print"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.attack.BlackBoxStep.random_perturb", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.queryBox"], ["", "def", "randomAttack", "(", "self", ",", "T", ",", "graphid", ")", ":", "\n", "        ", "graph", ",", "label", "=", "self", ".", "graphs", "[", "graphid", "]", "\n", "num_nodes", "=", "graph", ".", "number_of_nodes", "(", ")", "\n", "targetgraph_adj", "=", "self", ".", "testset", ".", "Adj_matrices", "[", "graphid", "]", "\n", "targetgraph_adj", "=", "torch", ".", "from_numpy", "(", "targetgraph_adj", ")", "\n", "step", "=", "BlackBoxStep", "(", "targetgraph_adj", ",", "self", ".", "B", ",", "self", ".", "eta", ",", "self", ".", "delta", ",", "self", ".", "alpha", ",", "self", ".", "attackLoss", ",", "use_grad", "=", "False", ",", "cuda", "=", "self", ".", "cuda", ")", "\n", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "perturbation", "=", "step", ".", "random_perturb", "(", ")", "\n", "perturbation", "=", "perturbation", ".", "reshape", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "query_result", "=", "self", ".", "queryBox", "(", "graphid", ",", "perturbation", ")", "\n", "if", "query_result", ".", "argmax", "(", ")", "!=", "label", ".", "item", "(", ")", ":", "\n", "                ", "print", "(", "\"Random attack successfully\"", ",", "t", "+", "1", ",", "graphid", ")", "\n", "return", "1", ",", "t", "+", "1", "\n", "", "", "print", "(", "\"Random attack failed\"", ",", "T", ",", "graphid", ")", "\n", "return", "0", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.attack": [[245, 248], ["blackbox.BlackboxAttackProcedure_GraphClassification.banditAttack", "blackbox.BlackboxAttackProcedure_GraphClassification.randomAttack", "random.choice", "random.choice"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.banditAttack", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.randomAttack"], ["", "def", "attack", "(", "self", ")", ":", "\n", "        ", "ret", "=", "self", ".", "banditAttack", "(", "self", ".", "T", ",", "random", ".", "choice", "(", "self", ".", "targetGraphSet", ")", ")", "\n", "ret", "=", "self", ".", "randomAttack", "(", "self", ".", "T", ",", "random", ".", "choice", "(", "self", ".", "targetGraphSet", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.main": [[252, 257], ["blackbox.BlackboxAttackProcedure_GraphClassification", "blackbox.BlackboxAttackProcedure_GraphClassification.attack"], "function", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.None.blackbox.BlackboxAttackProcedure_GraphClassification.attack"], ["", "", "def", "main", "(", "config", ")", ":", "\n", "# attacker = BlackboxAttackProcedure_NodeClassification(config)", "\n", "# attacker.attack()", "\n", "\t", "attacker", "=", "BlackboxAttackProcedure_GraphClassification", "(", "config", ")", "\n", "attacker", ".", "attack", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.normalization.aug_normalized_adjacency": [[5, 13], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().dot().tocoo", "scipy.eye", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.diags.dot().dot", "sp.diags.dot"], "function", ["None"], ["def", "aug_normalized_adjacency", "(", "adj", ")", ":", "\n", "   ", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "row_sum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "row_sum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "d_mat_inv_sqrt", ".", "dot", "(", "adj", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.normalization.fetch_normalization": [[14, 20], ["switcher.get"], "function", ["None"], ["", "def", "fetch_normalization", "(", "type", ")", ":", "\n", "   ", "switcher", "=", "{", "\n", "'AugNormAdj'", ":", "aug_normalized_adjacency", ",", "# A' = (D + I)^-1/2 * ( A + I ) * (D + I)^-1/2", "\n", "}", "\n", "func", "=", "switcher", ".", "get", "(", "type", ",", "lambda", ":", "\"Invalid normalization technique.\"", ")", "\n", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.normalization.row_normalize": [[21, 29], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "row_normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "", ""]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.parse_index_file": [[20, 26], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.preprocess_citation": [[27, 32], ["normalization.fetch_normalization", "normalization.fetch_normalization.", "normalization.row_normalize"], "function", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.normalization.fetch_normalization", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.normalization.row_normalize"], ["", "def", "preprocess_citation", "(", "adj", ",", "features", ",", "normalization", "=", "\"FirstOrderGCN\"", ")", ":", "\n", "    ", "adj_normalizer", "=", "fetch_normalization", "(", "normalization", ")", "\n", "adj", "=", "adj_normalizer", "(", "adj", ")", "\n", "features", "=", "row_normalize", "(", "features", ")", "\n", "return", "adj", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.load_citation": [[33, 92], ["range", "tuple", "utils.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "np.sort.tolist", "range", "range", "utils.preprocess_citation", "torch.FloatTensor().float", "torch.LongTensor", "sparse_mx_to_torch_sparse_tensor().float", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "adj.cuda.multiply", "len", "len", "torch.max", "features.cuda.cuda", "adj.cuda.cuda", "labels.cuda.cuda", "idx_train.cuda.cuda", "idx_val.cuda.cuda", "idx_test.cuda.cuda", "open", "dataset_str.lower", "dataset_str.lower", "min", "scipy.vstack", "adj.cuda.T.multiply", "len", "torch.FloatTensor", "utils.sparse_mx_to_torch_sparse_tensor", "objects.append", "objects.append", "max", "len", "len", "numpy.array", "dataset_str.lower", "dataset_str.lower", "pickle.load", "pickle.load", "features.cuda.todense", "min", "min"], "function", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.parse_index_file", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.preprocess_citation", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_citation", "(", "dataset_str", "=", "\"cora\"", ",", "normalization", "=", "\"AugNormAdj\"", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Load Citation Networks Datasets.\n    \"\"\"", "\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"./data/node_classification/{}/ind.{}.{}\"", ".", "format", "(", "dataset_str", ".", "lower", "(", ")", ",", "dataset_str", ".", "lower", "(", ")", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pickle", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"./data/node_classification/{}/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ".", "lower", "(", ")", ",", "dataset_str", ".", "lower", "(", ")", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "idx_val", "=", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", "\n", "\n", "adj", ",", "features", "=", "preprocess_citation", "(", "adj", ",", "features", ",", "normalization", ")", "\n", "\n", "# porting to pytorch", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "labels", "=", "torch", ".", "max", "(", "labels", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", ".", "float", "(", ")", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "features", "=", "features", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "idx_train", "=", "idx_train", ".", "cuda", "(", ")", "\n", "idx_val", "=", "idx_val", ".", "cuda", "(", ")", "\n", "idx_test", "=", "idx_test", ".", "cuda", "(", ")", "\n", "\n", "", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.encode_onehot": [[93, 100], ["set", "numpy.array", "list", "numpy.identity", "enumerate", "map", "len"], "function", ["None"], ["", "def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "classes", "=", "set", "(", "labels", ")", "\n", "classes_dict", "=", "{", "c", ":", "np", ".", "identity", "(", "len", "(", "classes", ")", ")", "[", "i", ",", ":", "]", "for", "i", ",", "c", "in", "\n", "enumerate", "(", "classes", ")", "}", "\n", "labels_onehot", "=", "np", ".", "array", "(", "list", "(", "map", "(", "classes_dict", ".", "get", ",", "labels", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.read_data": [[101, 111], ["os.basename", "numpy.genfromtxt", "pickle.load", "open", "hasattr", "pickle.load.toarray"], "function", ["None"], ["", "def", "read_data", "(", "path", ",", "dataset", "=", "\"cora\"", ")", ":", "\n", "    ", "\"\"\"\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u8bfb\u53d6\u539f\u59cb\u6570\u636e\u4ee5\u8fdb\u4e00\u6b65\u5904\u7406\"\"\"", "\n", "name", "=", "osp", ".", "basename", "(", "path", ")", "\n", "if", "name", "==", "\"ind.{}.test.index\"", ".", "format", "(", "dataset", ")", ":", "\n", "        ", "out", "=", "np", ".", "genfromtxt", "(", "path", ",", "dtype", "=", "\"int64\"", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "out", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "\"rb\"", ")", ",", "encoding", "=", "\"latin1\"", ")", "\n", "out", "=", "out", ".", "toarray", "(", ")", "if", "hasattr", "(", "out", ",", "\"toarray\"", ")", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.build_adjacency": [[112, 126], ["len", "adj_dict.items", "list", "numpy.asarray", "scipy.coo_matrix", "np.asarray.extend", "np.asarray.extend", "numpy.ones", "itertools.groupby", "len", "sorted"], "function", ["None"], ["", "", "def", "build_adjacency", "(", "adj_dict", ")", ":", "\n", "    ", "\"\"\"\u6839\u636e\u90bb\u63a5\u8868\u521b\u5efa\u90bb\u63a5\u77e9\u9635\"\"\"", "\n", "edge_index", "=", "[", "]", "\n", "num_nodes", "=", "len", "(", "adj_dict", ")", "\n", "for", "src", ",", "dst", "in", "adj_dict", ".", "items", "(", ")", ":", "\n", "        ", "edge_index", ".", "extend", "(", "[", "src", ",", "v", "]", "for", "v", "in", "dst", ")", "\n", "edge_index", ".", "extend", "(", "[", "v", ",", "src", "]", "for", "v", "in", "dst", ")", "\n", "# \u53bb\u9664\u91cd\u590d\u7684\u8fb9", "\n", "", "edge_index", "=", "list", "(", "k", "for", "k", ",", "_", "in", "itertools", ".", "groupby", "(", "sorted", "(", "edge_index", ")", ")", ")", "\n", "edge_index", "=", "np", ".", "asarray", "(", "edge_index", ")", "\n", "adjacency", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "edge_index", ")", ")", ",", "\n", "(", "edge_index", "[", ":", ",", "0", "]", ",", "edge_index", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "return", "adjacency", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.load_predata": [[127, 160], ["print", "numpy.concatenate", "numpy.concatenate", "scipy.csr_matrix", "utils.build_adjacency", "utils.normalize", "utils.normalize", "range", "range", "range", "torch.FloatTensor", "torch.LongTensor", "utils.sparse_mx_to_torch_sparse_tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "utils.read_data", "sparse_mx_to_torch_sparse_tensor.multiply", "numpy.array", "os.join", "sparse_mx_to_torch_sparse_tensor.T.multiply", "scipy.eye", "torch.FloatTensor.todense", "numpy.where"], "function", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.build_adjacency", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.normalize", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.normalize", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.read_data"], ["", "def", "load_predata", "(", "path", "=", "\"./data/node_classification/\"", ",", "dataset", "=", "\"cora\"", ")", ":", "\n", "    ", "filenames", "=", "[", "\"ind.{}.{}\"", ".", "format", "(", "dataset", ",", "name", ")", "for", "name", "in", "\n", "[", "'x'", ",", "'tx'", ",", "'allx'", ",", "'y'", ",", "'ty'", ",", "'ally'", ",", "'graph'", ",", "'test.index'", "]", "]", "\n", "path", "=", "\"./data/node_classification/{}\"", ".", "format", "(", "dataset", ")", "\n", "print", "(", "'Loading {} dataset...'", ".", "format", "(", "dataset", ")", ")", "\n", "x", ",", "tx", ",", "allx", ",", "y", ",", "ty", ",", "ally", ",", "graph", ",", "test_index", "=", "[", "read_data", "(", "\n", "osp", ".", "join", "(", "path", ",", "name", ")", ",", "dataset", ")", "for", "name", "in", "filenames", "]", "\n", "trlen", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "allx", ",", "tx", ")", ",", "axis", "=", "0", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "ally", ",", "ty", ")", ",", "axis", "=", "0", ")", "\n", "features", "=", "sp", ".", "csr_matrix", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "y", "\n", "adj", "=", "build_adjacency", "(", "graph", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "adj", "=", "normalize", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "idx_train", "=", "range", "(", "140", ")", "\n", "idx_val", "=", "range", "(", "200", ",", "500", ")", "\n", "idx_test", "=", "range", "(", "500", ",", "1500", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "np", ".", "where", "(", "labels", ")", "[", "1", "]", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.load_data": [[162, 202], ["print", "numpy.genfromtxt", "scipy.csr_matrix", "utils.encode_onehot", "numpy.array", "numpy.genfromtxt", "numpy.array().reshape", "scipy.coo_matrix", "utils.normalize", "utils.normalize", "range", "range", "range", "torch.FloatTensor", "torch.LongTensor", "utils.sparse_mx_to_torch_sparse_tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "sparse_mx_to_torch_sparse_tensor.multiply", "numpy.array", "numpy.dtype", "enumerate", "numpy.array", "numpy.ones", "sparse_mx_to_torch_sparse_tensor.T.multiply", "scipy.eye", "torch.FloatTensor.todense", "numpy.where", "list", "map", "np.genfromtxt.flatten"], "function", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.encode_onehot", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.normalize", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.normalize", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_data", "(", "path", "=", "\"./data/cora/\"", ",", "dataset", "=", "\"cora\"", ")", ":", "\n", "    ", "\"\"\"Load citation network dataset (cora only for now)\"\"\"", "\n", "print", "(", "'Loading {} dataset...'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "idx_features_labels", "=", "np", ".", "genfromtxt", "(", "\"{}{}.content\"", ".", "format", "(", "path", ",", "dataset", ")", ",", "\n", "dtype", "=", "np", ".", "dtype", "(", "str", ")", ")", "\n", "features", "=", "sp", ".", "csr_matrix", "(", "idx_features_labels", "[", ":", ",", "1", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "encode_onehot", "(", "idx_features_labels", "[", ":", ",", "-", "1", "]", ")", "\n", "\n", "\n", "# build graph", "\n", "idx", "=", "np", ".", "array", "(", "idx_features_labels", "[", ":", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "idx", ")", "}", "\n", "edges_unordered", "=", "np", ".", "genfromtxt", "(", "\"{}{}.cites\"", ".", "format", "(", "path", ",", "dataset", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "map", "(", "idx_map", ".", "get", ",", "edges_unordered", ".", "flatten", "(", ")", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "edges_unordered", ".", "shape", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "(", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "adj", "=", "normalize", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "idx_train", "=", "range", "(", "140", ")", "\n", "idx_val", "=", "range", "(", "200", ",", "500", ")", "\n", "idx_test", "=", "range", "(", "500", ",", "1500", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "np", ".", "where", "(", "labels", ")", "[", "1", "]", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.normalize": [[204, 212], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.accuracy": [[214, 219], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.sparse_mx_to_torch_sparse_tensor": [[221, 229], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.sgc_precompute": [[231, 237], ["time.perf_counter", "range", "torch.spmm", "time.perf_counter"], "function", ["None"], ["", "def", "sgc_precompute", "(", "features", ",", "adj", ",", "degree", ")", ":", "\n", "    ", "t", "=", "perf_counter", "(", ")", "\n", "for", "i", "in", "range", "(", "degree", ")", ":", "\n", "        ", "features", "=", "torch", ".", "spmm", "(", "adj", ",", "features", ")", "\n", "", "precompute_time", "=", "perf_counter", "(", ")", "-", "t", "\n", "return", "features", ",", "precompute_time", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.utils.utils.LoadGraphDataSet": [[238, 242], ["data.superpixels.SuperPixDataset"], "function", ["None"], ["", "def", "LoadGraphDataSet", "(", "DATASET_NAME", ")", ":", "\n", "# handling for MNIST or CIFAR Superpixels", "\n", "    ", "if", "DATASET_NAME", "==", "'MNIST'", "or", "DATASET_NAME", "==", "'CIFAR10'", ":", "\n", "        ", "return", "SuperPixDataset", "(", "DATASET_NAME", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GCN_model.GraphConvolution.__init__": [[17, 27], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "GCN_model.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "GCN_model.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GCN_model.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GCN_model.GraphConvolution.reset_parameters": [[28, 33], ["GCN_model.GraphConvolution.weight.data.uniform_", "math.sqrt", "GCN_model.GraphConvolution.bias.data.uniform_", "GCN_model.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GCN_model.GraphConvolution.forward": [[34, 41], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "spmm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GCN_model.GraphConvolution.__repr__": [[42, 46], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GCN_model.GCN.__init__": [[51, 57], ["torch.Module.__init__", "GCN_model.GraphConvolution", "GCN_model.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "nhid", ",", "nclass", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GCN_model.GCN.forward": [[58, 63], ["torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "GCN_model.GCN.gc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "GCN_model.GCN.gc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "adj", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.SGC.__init__": [[12, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__"], ["def", "__init__", "(", "self", ",", "nfeat", ",", "nclass", ")", ":", "\n", "        ", "super", "(", "SGC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "nfeat", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.SGC.forward": [[17, 20], ["SGC_model.SGC.W"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "W", "(", "x", ")", "\n", "return", "tmp", "\n", "# if tmp.shape[0] == 7:", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.GraphConvolution.__init__": [[31, 37], ["torch.nn.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "SGC_model.GraphConvolution.init"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.GraphConvolution.init"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "self", ".", "init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.GraphConvolution.init": [[38, 41], ["SGC_model.GraphConvolution.W.weight.data.uniform_", "math.sqrt", "SGC_model.GraphConvolution.W.weight.size"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "W", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "W", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.GraphConvolution.forward": [[42, 45], ["SGC_model.GraphConvolution.W", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "self", ".", "W", "(", "input", ")", "\n", "output", "=", "torch", ".", "spmm", "(", "adj", ",", "support", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.GCN.__init__": [[50, 56], ["torch.Module.__init__", "SGC_model.GraphConvolution", "SGC_model.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__"], ["def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "nhid", ",", "nclass", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.GCN.forward": [[57, 64], ["SGC_model.GCN.gc1", "torch.dropout", "torch.dropout", "torch.dropout", "SGC_model.GCN.gc2", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "use_relu", "=", "True", ")", ":", "\n", "        ", "x", "=", "self", ".", "gc1", "(", "x", ",", "adj", ")", "\n", "if", "use_relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "adj", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.SGC_model.get_model": [[65, 79], ["SGC_model.GCN", "SGC.cuda", "SGC_model.SGC", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_model", "(", "model_opt", ",", "nfeat", ",", "nclass", ",", "nhid", "=", "0", ",", "dropout", "=", "0", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "if", "model_opt", "==", "\"GCN\"", ":", "\n", "        ", "model", "=", "GCN", "(", "nfeat", "=", "nfeat", ",", "\n", "nhid", "=", "nhid", ",", "\n", "nclass", "=", "nclass", ",", "\n", "dropout", "=", "dropout", ")", "\n", "", "elif", "model_opt", "==", "\"SGC\"", ":", "\n", "        ", "model", "=", "SGC", "(", "nfeat", "=", "nfeat", ",", "\n", "nclass", "=", "nclass", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'model:{} is not implemented!'", ".", "format", "(", "model_opt", ")", ")", "\n", "\n", "", "if", "cuda", ":", "model", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.GINLayer.__init__": [[40, 70], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "GIN_model.GINLayer.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "KeyError"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__"], ["def", "__init__", "(", "self", ",", "apply_func", ",", "aggr_type", ",", "dropout", ",", "batch_norm", ",", "residual", "=", "False", ",", "init_eps", "=", "0", ",", "learn_eps", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_func", "=", "apply_func", "\n", "\n", "if", "aggr_type", "==", "'sum'", ":", "\n", "            ", "self", ".", "_reducer", "=", "fn", ".", "sum", "\n", "", "elif", "aggr_type", "==", "'max'", ":", "\n", "            ", "self", ".", "_reducer", "=", "fn", ".", "max", "\n", "", "elif", "aggr_type", "==", "'mean'", ":", "\n", "            ", "self", ".", "_reducer", "=", "fn", ".", "mean", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'Aggregator type {} not recognized.'", ".", "format", "(", "aggr_type", ")", ")", "\n", "\n", "", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "in_dim", "=", "apply_func", ".", "mlp", ".", "input_dim", "\n", "out_dim", "=", "apply_func", ".", "mlp", ".", "output_dim", "\n", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n", "# to specify whether eps is trainable or not.", "\n", "", "if", "learn_eps", ":", "\n", "            ", "self", ".", "eps", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "init_eps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'eps'", ",", "torch", ".", "FloatTensor", "(", "[", "init_eps", "]", ")", ")", "\n", "\n", "", "self", ".", "bn_node_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.GINLayer.forward": [[71, 92], ["g.local_var.local_var.local_var", "g.local_var.local_var.update_all", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "dgl.copy_u", "dgl.copy_u", "GIN_model.GINLayer._reducer", "GIN_model.GINLayer.apply_func", "GIN_model.GINLayer.bn_node_h"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ")", ":", "\n", "        ", "h_in", "=", "h", "# for residual connection", "\n", "\n", "g", "=", "g", ".", "local_var", "(", ")", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "g", ".", "update_all", "(", "fn", ".", "copy_u", "(", "'h'", ",", "'m'", ")", ",", "self", ".", "_reducer", "(", "'m'", ",", "'neigh'", ")", ")", "\n", "h", "=", "(", "1", "+", "self", ".", "eps", ")", "*", "h", "+", "g", ".", "ndata", "[", "'neigh'", "]", "\n", "if", "self", ".", "apply_func", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "apply_func", "(", "h", ")", "\n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "bn_node_h", "(", "h", ")", "# batch normalization  ", "\n", "\n", "", "h", "=", "F", ".", "relu", "(", "h", ")", "# non-linear activation", "\n", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in", "+", "h", "# residual connection", "\n", "\n", "", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.ApplyNodeFunc.__init__": [[99, 102], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__"], ["def", "__init__", "(", "self", ",", "mlp", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "mlp", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.ApplyNodeFunc.forward": [[103, 106], ["GIN_model.ApplyNodeFunc.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h", "=", "self", ".", "mlp", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.MLP.__init__": [[110, 136], ["torch.Module.__init__", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "GIN_model.MLP.linears.append", "range", "GIN_model.MLP.linears.append", "range", "torch.Linear", "torch.Linear", "torch.Linear", "GIN_model.MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "GIN_model.MLP.batch_norms.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_or_not", "=", "True", "# default is linear model", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "if", "num_layers", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"number of layers should be positive!\"", ")", "\n", "", "elif", "num_layers", "==", "1", ":", "\n", "# Linear model", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ")", "\n", "", "else", ":", "\n", "# Multi-layer model", "\n", "            ", "self", ".", "linear_or_not", "=", "False", "\n", "self", ".", "linears", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "                ", "self", ".", "batch_norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "(", "hidden_dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.MLP.forward": [[137, 147], ["GIN_model.MLP.linear", "range", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "linear_or_not", ":", "\n", "# If linear model", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "", "else", ":", "\n", "# If MLP", "\n", "            ", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "                ", "h", "=", "F", ".", "relu", "(", "self", ".", "batch_norms", "[", "i", "]", "(", "self", ".", "linears", "[", "i", "]", "(", "h", ")", ")", ")", "\n", "", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.GIN.__init__": [[151, 191], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "GIN_model.MLP", "GIN_model.GIN.ginlayers.append", "GIN_model.GIN.linears_prediction.append", "dgl.nn.pytorch.glob.SumPooling", "dgl.nn.pytorch.glob.SumPooling", "GIN_model.GINLayer", "torch.Linear", "torch.Linear", "torch.Linear", "dgl.nn.pytorch.glob.AvgPooling", "dgl.nn.pytorch.glob.AvgPooling", "GIN_model.ApplyNodeFunc", "dgl.nn.pytorch.glob.MaxPooling", "dgl.nn.pytorch.glob.MaxPooling"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "in_dim", "=", "net_params", "[", "'in_dim'", "]", "\n", "hidden_dim", "=", "net_params", "[", "'hidden_dim'", "]", "\n", "n_classes", "=", "net_params", "[", "'n_classes'", "]", "\n", "dropout", "=", "net_params", "[", "'dropout'", "]", "\n", "self", ".", "n_layers", "=", "net_params", "[", "'L'", "]", "\n", "n_mlp_layers", "=", "net_params", "[", "'n_mlp_GIN'", "]", "# GIN", "\n", "learn_eps", "=", "net_params", "[", "'learn_eps_GIN'", "]", "# GIN", "\n", "neighbor_aggr_type", "=", "net_params", "[", "'neighbor_aggr_GIN'", "]", "# GIN", "\n", "readout", "=", "net_params", "[", "'readout'", "]", "# this is graph_pooling_type     ", "\n", "batch_norm", "=", "net_params", "[", "'batch_norm'", "]", "\n", "residual", "=", "net_params", "[", "'residual'", "]", "\n", "\n", "# List of MLPs", "\n", "self", ".", "ginlayers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "embedding_h", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "mlp", "=", "MLP", "(", "n_mlp_layers", ",", "hidden_dim", ",", "hidden_dim", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "ginlayers", ".", "append", "(", "GINLayer", "(", "ApplyNodeFunc", "(", "mlp", ")", ",", "neighbor_aggr_type", ",", "\n", "dropout", ",", "batch_norm", ",", "residual", ",", "0", ",", "learn_eps", ")", ")", "\n", "\n", "# Linear function for graph poolings (readout) of output of each layer", "\n", "# which maps the output of different layers into a prediction score", "\n", "", "self", ".", "linears_prediction", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "n_layers", "+", "1", ")", ":", "\n", "            ", "self", ".", "linears_prediction", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "n_classes", ")", ")", "\n", "\n", "", "if", "readout", "==", "'sum'", ":", "\n", "            ", "self", ".", "pool", "=", "SumPooling", "(", ")", "\n", "", "elif", "readout", "==", "'mean'", ":", "\n", "            ", "self", ".", "pool", "=", "AvgPooling", "(", ")", "\n", "", "elif", "readout", "==", "'max'", ":", "\n", "            ", "self", ".", "pool", "=", "MaxPooling", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.GIN.forward": [[192, 211], ["GIN_model.GIN.embedding_h", "range", "enumerate", "hidden_rep.append", "GIN_model.GIN.pool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ")", ":", "\n", "\n", "        ", "h", "=", "self", ".", "embedding_h", "(", "h", ")", "\n", "\n", "# list of hidden representation at each layer (including input)", "\n", "hidden_rep", "=", "[", "h", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "ginlayers", "[", "i", "]", "(", "g", ",", "h", ")", "\n", "hidden_rep", ".", "append", "(", "h", ")", "\n", "\n", "", "score_over_layer", "=", "0", "\n", "\n", "# perform pooling over all nodes in each graph in every layer", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "hidden_rep", ")", ":", "\n", "            ", "pooled_h", "=", "self", ".", "pool", "(", "g", ",", "h", ")", "\n", "score_over_layer", "+=", "self", ".", "linears_prediction", "[", "i", "]", "(", "pooled_h", ")", "\n", "\n", "", "return", "score_over_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.models.GIN_model.GIN.loss": [[212, 216], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss."], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "pred", ",", "label", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "criterion", "(", "pred", ",", "label", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDGL.__init__": [[75, 102], ["len", "superpixels.SuperPixDGL._prepare", "open", "pickle.load", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.join", "open", "pickle.load", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDGL._prepare"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_dir", ",", "\n", "dataset", ",", "\n", "split", ",", "\n", "use_mean_px", "=", "True", ",", "\n", "use_coord", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "split", "=", "split", "\n", "\n", "self", ".", "graph_lists", "=", "[", "]", "\n", "\n", "if", "dataset", "==", "'MNIST'", ":", "\n", "            ", "self", ".", "img_size", "=", "28", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'mnist_75sp_%s.pkl'", "%", "split", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "labels", ",", "self", ".", "sp_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "graph_labels", "=", "torch", ".", "LongTensor", "(", "self", ".", "labels", ")", "\n", "", "", "elif", "dataset", "==", "'CIFAR10'", ":", "\n", "            ", "self", ".", "img_size", "=", "32", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'cifar10_150sp_%s.pkl'", "%", "split", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "labels", ",", "self", ".", "sp_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "graph_labels", "=", "torch", ".", "LongTensor", "(", "self", ".", "labels", ")", "\n", "\n", "", "", "self", ".", "use_mean_px", "=", "use_mean_px", "\n", "self", ".", "use_coord", "=", "use_coord", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "labels", ")", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDGL._prepare": [[103, 152], ["print", "enumerate", "range", "superpixels.compute_edges_list", "mean_px.reshape.reshape.reshape", "coord.reshape.reshape.reshape", "numpy.concatenate", "edge_values_list.reshape.reshape.reshape", "superpixels.SuperPixDGL.node_features.append", "superpixels.SuperPixDGL.edge_features.append", "superpixels.SuperPixDGL.Adj_matrices.append", "superpixels.SuperPixDGL.edges_lists.append", "len", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "torch.Tensor().half", "torch.Tensor().half", "torch.Tensor().half", "torch.Tensor().half", "enumerate", "torch.Tensor().unsqueeze().half", "torch.Tensor().unsqueeze().half", "torch.Tensor().unsqueeze().half", "torch.Tensor().unsqueeze().half", "superpixels.SuperPixDGL.graph_lists.append", "superpixels.compute_adjacency_matrix_images", "superpixels.compute_adjacency_matrix_images", "superpixels.SuperPixDGL.split.upper", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.add_edges", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.compute_edges_list", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.compute_adjacency_matrix_images", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.compute_adjacency_matrix_images"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"preparing %d graphs for the %s set...\"", "%", "(", "self", ".", "n_samples", ",", "self", ".", "split", ".", "upper", "(", ")", ")", ")", "\n", "self", ".", "Adj_matrices", ",", "self", ".", "node_features", ",", "self", ".", "edges_lists", ",", "self", ".", "edge_features", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "index", ",", "sample", "in", "enumerate", "(", "self", ".", "sp_data", ")", ":", "\n", "            ", "mean_px", ",", "coord", "=", "sample", "[", ":", "2", "]", "\n", "\n", "try", ":", "\n", "                ", "coord", "=", "coord", "/", "self", ".", "img_size", "\n", "", "except", "AttributeError", ":", "\n", "                ", "VOC_has_variable_image_sizes", "=", "True", "\n", "\n", "", "if", "self", ".", "use_mean_px", ":", "\n", "                ", "A", "=", "compute_adjacency_matrix_images", "(", "coord", ",", "mean_px", ")", "# using super-pixel locations + features", "\n", "", "else", ":", "\n", "                ", "A", "=", "compute_adjacency_matrix_images", "(", "coord", ",", "mean_px", ",", "False", ")", "# using only super-pixel locations", "\n", "", "edges_list", ",", "edge_values_list", "=", "compute_edges_list", "(", "A", ")", "# NEW", "\n", "\n", "N_nodes", "=", "A", ".", "shape", "[", "0", "]", "\n", "\n", "mean_px", "=", "mean_px", ".", "reshape", "(", "N_nodes", ",", "-", "1", ")", "\n", "coord", "=", "coord", ".", "reshape", "(", "N_nodes", ",", "2", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "mean_px", ",", "coord", ")", ",", "axis", "=", "1", ")", "\n", "\n", "edge_values_list", "=", "edge_values_list", ".", "reshape", "(", "-", "1", ")", "# NEW # TO DOUBLE-CHECK !", "\n", "\n", "self", ".", "node_features", ".", "append", "(", "x", ")", "\n", "self", ".", "edge_features", ".", "append", "(", "edge_values_list", ")", "# NEW", "\n", "self", ".", "Adj_matrices", ".", "append", "(", "A", ")", "\n", "self", ".", "edges_lists", ".", "append", "(", "edges_list", ")", "\n", "\n", "", "for", "index", "in", "range", "(", "len", "(", "self", ".", "sp_data", ")", ")", ":", "\n", "            ", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "self", ".", "node_features", "[", "index", "]", ".", "shape", "[", "0", "]", ")", "\n", "g", ".", "ndata", "[", "'feat'", "]", "=", "torch", ".", "Tensor", "(", "self", ".", "node_features", "[", "index", "]", ")", ".", "half", "(", ")", "\n", "\n", "for", "src", ",", "dsts", "in", "enumerate", "(", "self", ".", "edges_lists", "[", "index", "]", ")", ":", "\n", "# handling for 1 node where the self loop would be the only edge", "\n", "# since, VOC Superpixels has few samples (5 samples) with only 1 node", "\n", "                ", "if", "self", ".", "node_features", "[", "index", "]", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                    ", "g", ".", "add_edges", "(", "src", ",", "dsts", ")", "\n", "", "else", ":", "\n", "                    ", "g", ".", "add_edges", "(", "src", ",", "dsts", "[", "dsts", "!=", "src", "]", ")", "\n", "\n", "# adding edge features for Residual Gated ConvNet", "\n", "", "", "edge_feat_dim", "=", "g", ".", "ndata", "[", "'feat'", "]", ".", "shape", "[", "1", "]", "# dim same as node feature dim", "\n", "#g.edata['feat'] = torch.ones(g.number_of_edges(), edge_feat_dim).half() ", "\n", "g", ".", "edata", "[", "'feat'", "]", "=", "torch", ".", "Tensor", "(", "self", ".", "edge_features", "[", "index", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "half", "(", ")", "# NEW ", "\n", "\n", "self", ".", "graph_lists", ".", "append", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDGL.__len__": [[153, 156], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of graphs in the dataset.\"\"\"", "\n", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDGL.__getitem__": [[157, 171], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n            Get the idx^th sample.\n            Parameters\n            ---------\n            idx : int\n                The sample index.\n            Returns\n            -------\n            (dgl.DGLGraph, int)\n                DGLGraph with node feature stored in `feat` field\n                And its label.\n        \"\"\"", "\n", "return", "self", ".", "graph_lists", "[", "idx", "]", ",", "self", ".", "graph_labels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.DGLFormDataset.__init__": [[178, 183], ["all", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "lists", ")", ":", "\n", "        ", "assert", "all", "(", "len", "(", "lists", "[", "0", "]", ")", "==", "len", "(", "li", ")", "for", "li", "in", "lists", ")", "\n", "self", ".", "lists", "=", "lists", "\n", "self", ".", "graph_lists", "=", "lists", "[", "0", "]", "\n", "self", ".", "graph_labels", "=", "lists", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.DGLFormDataset.__getitem__": [[184, 186], ["tuple"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "tuple", "(", "li", "[", "index", "]", "for", "li", "in", "self", ".", "lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.DGLFormDataset.__len__": [[187, 189], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lists", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDatasetDGL.__init__": [[192, 229], ["time.time", "superpixels.SuperPixDGL", "superpixels.SuperPixDGL", "superpixels.DGLFormDataset", "superpixels.DGLFormDataset", "print", "print", "print", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "num_val", "=", "5000", ")", ":", "\n", "        ", "\"\"\"\n            Takes input standard image dataset name (MNIST/CIFAR10) \n            and returns the superpixels graph.\n            \n            This class uses results from the above SuperPix class.\n            which contains the steps for the generation of the Superpixels\n            graph from a superpixel .pkl file that has been given by\n            https://github.com/bknyaz/graph_attention_pool\n            \n            Please refer the SuperPix class for details.\n        \"\"\"", "\n", "t_data", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n", "use_mean_px", "=", "True", "# using super-pixel locations + features", "\n", "use_mean_px", "=", "False", "# using only super-pixel locations", "\n", "if", "use_mean_px", ":", "\n", "            ", "print", "(", "'Adj matrix defined from super-pixel locations + features'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Adj matrix defined from super-pixel locations (only)'", ")", "\n", "", "use_coord", "=", "True", "\n", "self", ".", "test", "=", "SuperPixDGL", "(", "\"./data/superpixels\"", ",", "dataset", "=", "self", ".", "name", ",", "split", "=", "'test'", ",", "\n", "use_mean_px", "=", "use_mean_px", ",", "\n", "use_coord", "=", "use_coord", ")", "\n", "\n", "self", ".", "train_", "=", "SuperPixDGL", "(", "\"./data/superpixels\"", ",", "dataset", "=", "self", ".", "name", ",", "split", "=", "'train'", ",", "\n", "use_mean_px", "=", "use_mean_px", ",", "\n", "use_coord", "=", "use_coord", ")", "\n", "\n", "_val_graphs", ",", "_val_labels", "=", "self", ".", "train_", "[", ":", "num_val", "]", "\n", "_train_graphs", ",", "_train_labels", "=", "self", ".", "train_", "[", "num_val", ":", "]", "\n", "\n", "self", ".", "val", "=", "DGLFormDataset", "(", "_val_graphs", ",", "_val_labels", ")", "\n", "self", ".", "train", "=", "DGLFormDataset", "(", "_train_graphs", ",", "_train_labels", ")", "\n", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t_data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.__init__": [[261, 277], ["time.time", "print", "print", "print", "print", "open", "pickle.load", "len", "len", "len", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n            Loading Superpixels datasets\n        \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"[I] Loading dataset %s...\"", "%", "(", "name", ")", ")", "\n", "self", ".", "name", "=", "name", "\n", "data_dir", "=", "'data/graph_classification/{}/'", ".", "format", "(", "name", ")", "\n", "with", "open", "(", "data_dir", "+", "name", "+", "'.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "f", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "train", "=", "f", "[", "0", "]", "\n", "self", ".", "val", "=", "f", "[", "1", "]", "\n", "self", ".", "test", "=", "f", "[", "2", "]", "\n", "", "print", "(", "'train, test, val sizes :'", ",", "len", "(", "self", ".", "train", ")", ",", "len", "(", "self", ".", "test", ")", ",", "len", "(", "self", ".", "val", ")", ")", "\n", "print", "(", "\"[I] Finished loading.\"", ")", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.collate": [[280, 296], ["map", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "dgl.batch", "zip", "numpy.array", "graph.ndata[].float", "graph.edata[].float"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "samples", ")", ":", "\n", "# The input samples is a list of pairs (graph, label).", "\n", "        ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "samples", ")", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "labels", ")", ")", "\n", "#tab_sizes_n = [ graphs[i].number_of_nodes() for i in range(len(graphs))]", "\n", "#tab_snorm_n = [ torch.FloatTensor(size,1).fill_(1./float(size)) for size in tab_sizes_n ]", "\n", "#snorm_n = torch.cat(tab_snorm_n).sqrt()  ", "\n", "#tab_sizes_e = [ graphs[i].number_of_edges() for i in range(len(graphs))]", "\n", "#tab_snorm_e = [ torch.FloatTensor(size,1).fill_(1./float(size)) for size in tab_sizes_e ]", "\n", "#snorm_e = torch.cat(tab_snorm_e).sqrt()", "\n", "for", "idx", ",", "graph", "in", "enumerate", "(", "graphs", ")", ":", "\n", "            ", "graphs", "[", "idx", "]", ".", "ndata", "[", "'feat'", "]", "=", "graph", ".", "ndata", "[", "'feat'", "]", ".", "float", "(", ")", "\n", "graphs", "[", "idx", "]", ".", "edata", "[", "'feat'", "]", "=", "graph", ".", "edata", "[", "'feat'", "]", ".", "float", "(", ")", "\n", "", "batched_graph", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "\n", "return", "batched_graph", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset.collate_dense_gnn": [[299, 334], ["map", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "superpixels.SuperPixDataset._sym_normalize_adj", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "zip", "numpy.array", "g.adjacency_matrix().to_dense", "superpixels.SuperPixDataset.unsqueeze", "g.adjacency_matrix", "range"], "methods", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset._sym_normalize_adj"], ["", "def", "collate_dense_gnn", "(", "self", ",", "samples", ")", ":", "\n", "# The input samples is a list of pairs (graph, label).", "\n", "        ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "samples", ")", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "labels", ")", ")", "\n", "#tab_sizes_n = [ graphs[i].number_of_nodes() for i in range(len(graphs))]", "\n", "#tab_snorm_n = [ torch.FloatTensor(size,1).fill_(1./float(size)) for size in tab_sizes_n ]", "\n", "#snorm_n = tab_snorm_n[0][0].sqrt()  ", "\n", "\n", "#batched_graph = dgl.batch(graphs)", "\n", "\n", "g", "=", "graphs", "[", "0", "]", "\n", "adj", "=", "self", ".", "_sym_normalize_adj", "(", "g", ".", "adjacency_matrix", "(", ")", ".", "to_dense", "(", ")", ")", "\n", "\"\"\"\n            Adapted from https://github.com/leichen2018/Ring-GNN/\n            Assigning node and edge feats::\n            we have the adjacency matrix in R^{n x n}, the node features in R^{d_n} and edge features R^{d_e}.\n            Then we build a zero-initialized tensor, say T, in R^{(1 + d_n + d_e) x n x n}. T[0, :, :] is the adjacency matrix.\n            The diagonal T[1:1+d_n, i, i], i = 0 to n-1, store the node feature of node i. \n            The off diagonal T[1+d_n:, i, j] store edge features of edge(i, j).\n        \"\"\"", "\n", "\n", "zero_adj", "=", "torch", ".", "zeros_like", "(", "adj", ")", "\n", "\n", "in_dim", "=", "g", ".", "ndata", "[", "'feat'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "# use node feats to prepare adj", "\n", "adj_node_feat", "=", "torch", ".", "stack", "(", "[", "zero_adj", "for", "j", "in", "range", "(", "in_dim", ")", "]", ")", "\n", "adj_node_feat", "=", "torch", ".", "cat", "(", "[", "adj", ".", "unsqueeze", "(", "0", ")", ",", "adj_node_feat", "]", ",", "dim", "=", "0", ")", "\n", "\n", "for", "node", ",", "node_feat", "in", "enumerate", "(", "g", ".", "ndata", "[", "'feat'", "]", ")", ":", "\n", "            ", "adj_node_feat", "[", "1", ":", ",", "node", ",", "node", "]", "=", "node_feat", "\n", "\n", "", "x_node_feat", "=", "adj_node_feat", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "x_node_feat", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset._sym_normalize_adj": [[335, 340], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.where", "torch.where", "torch.where", "torch.where", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum.size", "torch.sum.size"], "methods", ["None"], ["", "def", "_sym_normalize_adj", "(", "self", ",", "adj", ")", ":", "\n", "        ", "deg", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "0", ")", "#.squeeze()", "\n", "deg_inv", "=", "torch", ".", "where", "(", "deg", ">", "0", ",", "1.", "/", "torch", ".", "sqrt", "(", "deg", ")", ",", "torch", ".", "zeros", "(", "deg", ".", "size", "(", ")", ")", ")", "\n", "deg_inv", "=", "torch", ".", "diag", "(", "deg_inv", ")", "\n", "return", "torch", ".", "mm", "(", "deg_inv", ",", "torch", ".", "mm", "(", "adj", ",", "deg_inv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.SuperPixDataset._add_self_loops": [[343, 355], ["superpixels.DGLFormDataset", "superpixels.DGLFormDataset", "superpixels.DGLFormDataset", "superpixels.SuperPixDataset.", "superpixels.SuperPixDataset.", "superpixels.SuperPixDataset."], "methods", ["None"], ["", "def", "_add_self_loops", "(", "self", ")", ":", "\n", "\n", "# function for adding self loops", "\n", "# this function will be called only if self_loop flag is True", "\n", "\n", "        ", "self", ".", "train", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "train", ".", "graph_lists", "]", "\n", "self", ".", "val", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "val", ".", "graph_lists", "]", "\n", "self", ".", "test", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "test", ".", "graph_lists", "]", "\n", "\n", "self", ".", "train", "=", "DGLFormDataset", "(", "self", ".", "train", ".", "graph_lists", ",", "self", ".", "train", ".", "graph_labels", ")", "\n", "self", ".", "val", "=", "DGLFormDataset", "(", "self", ".", "val", ".", "graph_lists", ",", "self", ".", "val", ".", "graph_labels", ")", "\n", "self", ".", "test", "=", "DGLFormDataset", "(", "self", ".", "test", ".", "graph_lists", ",", "self", ".", "test", ".", "graph_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.sigma": [[19, 31], ["numpy.partition", "knns.sum().reshape", "numpy.array().reshape", "knns.sum", "numpy.array"], "function", ["None"], ["def", "sigma", "(", "dists", ",", "kth", "=", "8", ")", ":", "\n", "# Compute sigma and reshape", "\n", "    ", "try", ":", "\n", "# Get k-nearest neighbors for each node", "\n", "        ", "knns", "=", "np", ".", "partition", "(", "dists", ",", "kth", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "kth", ":", ":", "-", "1", "]", "\n", "sigma", "=", "knns", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "knns", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "/", "kth", "\n", "", "except", "ValueError", ":", "# handling for graphs with num_nodes less than kth", "\n", "        ", "num_nodes", "=", "dists", ".", "shape", "[", "0", "]", "\n", "# this sigma value is irrelevant since not used for final compute_edge_list", "\n", "sigma", "=", "np", ".", "array", "(", "[", "1", "]", "*", "num_nodes", ")", ".", "reshape", "(", "num_nodes", ",", "1", ")", "\n", "\n", "", "return", "sigma", "+", "1e-8", "# adding epsilon to avoid zero value of sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.compute_adjacency_matrix_images": [[33, 50], ["coord.reshape.reshape", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "numpy.exp", "numpy.exp", "numpy.diag_indices_from", "superpixels.sigma", "superpixels.sigma", "superpixels.sigma"], "function", ["home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.sigma", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.sigma", "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.sigma"], ["", "def", "compute_adjacency_matrix_images", "(", "coord", ",", "feat", ",", "use_feat", "=", "True", ",", "kth", "=", "8", ")", ":", "\n", "    ", "coord", "=", "coord", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "# Compute coordinate distance", "\n", "c_dist", "=", "cdist", "(", "coord", ",", "coord", ")", "\n", "\n", "if", "use_feat", ":", "\n", "# Compute feature distance", "\n", "        ", "f_dist", "=", "cdist", "(", "feat", ",", "feat", ")", "\n", "# Compute adjacency", "\n", "A", "=", "np", ".", "exp", "(", "-", "(", "c_dist", "/", "sigma", "(", "c_dist", ")", ")", "**", "2", "-", "(", "f_dist", "/", "sigma", "(", "f_dist", ")", ")", "**", "2", ")", "\n", "", "else", ":", "\n", "        ", "A", "=", "np", ".", "exp", "(", "-", "(", "c_dist", "/", "sigma", "(", "c_dist", ")", ")", "**", "2", ")", "\n", "\n", "# Convert to symmetric matrix", "\n", "", "A", "=", "0.5", "*", "(", "A", "+", "A", ".", "T", ")", "\n", "A", "[", "np", ".", "diag_indices_from", "(", "A", ")", "]", "=", "0", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.compute_edges_list": [[52, 72], ["numpy.tile().reshape", "numpy.argpartition", "numpy.partition", "A[].reshape", "knns[].reshape", "numpy.tile", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "compute_edges_list", "(", "A", ",", "kth", "=", "8", "+", "1", ")", ":", "\n", "# Get k-similar neighbor indices for each node", "\n", "\n", "    ", "num_nodes", "=", "A", ".", "shape", "[", "0", "]", "\n", "new_kth", "=", "num_nodes", "-", "kth", "\n", "\n", "if", "num_nodes", ">", "9", ":", "\n", "        ", "knns", "=", "np", ".", "argpartition", "(", "A", ",", "new_kth", "-", "1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "new_kth", ":", "-", "1", "]", "\n", "knn_values", "=", "np", ".", "partition", "(", "A", ",", "new_kth", "-", "1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "new_kth", ":", "-", "1", "]", "# NEW", "\n", "", "else", ":", "\n", "# handling for graphs with less than kth nodes", "\n", "# in such cases, the resulting graph will be fully connected", "\n", "        ", "knns", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "num_nodes", ")", ",", "num_nodes", ")", ".", "reshape", "(", "num_nodes", ",", "num_nodes", ")", "\n", "knn_values", "=", "A", "# NEW", "\n", "\n", "# removing self loop", "\n", "if", "num_nodes", "!=", "1", ":", "\n", "            ", "knn_values", "=", "A", "[", "knns", "!=", "np", ".", "arange", "(", "num_nodes", ")", "[", ":", ",", "None", "]", "]", ".", "reshape", "(", "num_nodes", ",", "-", "1", ")", "# NEW", "\n", "knns", "=", "knns", "[", "knns", "!=", "np", ".", "arange", "(", "num_nodes", ")", "[", ":", ",", "None", "]", "]", ".", "reshape", "(", "num_nodes", ",", "-", "1", ")", "\n", "", "", "return", "knns", ",", "knn_values", "# NEW", "\n", "\n"]], "home.repos.pwc.inspect_result.metaoblivion_bandit_gnn_attack.data.superpixels.self_loop": [[232, 256], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "g.all_edges", "dgl.backend.zerocopy_to_numpy", "dgl.backend.zerocopy_to_numpy", "numpy.arange", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.add_edges", "torch.zeros", "torch.zeros", "g.number_of_nodes", "g.number_of_nodes", "dgl.DGLGraph.number_of_edges"], "function", ["None"], ["", "", "def", "self_loop", "(", "g", ")", ":", "\n", "    ", "\"\"\"\n        Utility function only, to be used only when necessary as per user self_loop flag\n        : Overwriting the function dgl.transform.add_self_loop() to not miss ndata['feat'] and edata['feat']\n        \n        \n        This function is called inside a function in SuperPixDataset class.\n    \"\"\"", "\n", "new_g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "new_g", ".", "add_nodes", "(", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "new_g", ".", "ndata", "[", "'feat'", "]", "=", "g", ".", "ndata", "[", "'feat'", "]", "\n", "\n", "src", ",", "dst", "=", "g", ".", "all_edges", "(", "order", "=", "\"eid\"", ")", "\n", "src", "=", "dgl", ".", "backend", ".", "zerocopy_to_numpy", "(", "src", ")", "\n", "dst", "=", "dgl", ".", "backend", ".", "zerocopy_to_numpy", "(", "dst", ")", "\n", "non_self_edges_idx", "=", "src", "!=", "dst", "\n", "nodes", "=", "np", ".", "arange", "(", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "new_g", ".", "add_edges", "(", "src", "[", "non_self_edges_idx", "]", ",", "dst", "[", "non_self_edges_idx", "]", ")", "\n", "new_g", ".", "add_edges", "(", "nodes", ",", "nodes", ")", "\n", "\n", "# This new edata is not used since this function gets called only for GCN, GAT", "\n", "# However, we need this for the generic requirement of ndata and edata", "\n", "new_g", ".", "edata", "[", "'feat'", "]", "=", "torch", ".", "zeros", "(", "new_g", ".", "number_of_edges", "(", ")", ")", "\n", "return", "new_g", "\n", "\n"]]}