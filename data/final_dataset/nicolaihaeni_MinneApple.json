{"home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.train_rcnn.get_transform": [[23, 29], ["transforms.append", "utility.Compose", "utility.ToTensor", "transforms.append", "utility.RandomHorizontalFlip"], "function", ["None"], ["def", "get_transform", "(", "train", ")", ":", "\n", "    ", "transforms", "=", "[", "]", "\n", "transforms", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "if", "train", ":", "\n", "        ", "transforms", ".", "append", "(", "T", ".", "RandomHorizontalFlip", "(", "0.5", ")", ")", "\n", "", "return", "T", ".", "Compose", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.train_rcnn.get_maskrcnn_model_instance": [[31, 46], ["torchvision.models.detection.maskrcnn_resnet50_fpn", "torchvision.models.detection.faster_rcnn.FastRCNNPredictor", "torchvision.models.detection.mask_rcnn.MaskRCNNPredictor"], "function", ["None"], ["", "def", "get_maskrcnn_model_instance", "(", "num_classes", ")", ":", "\n", "# load an instance segmentation model pre-trained pre-trained on COCO", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "detection", ".", "maskrcnn_resnet50_fpn", "(", "pretrained", "=", "True", ")", "\n", "\n", "# get number of input features for the classifier", "\n", "in_features", "=", "model", ".", "roi_heads", ".", "box_predictor", ".", "cls_score", ".", "in_features", "\n", "# replace the pre-trained head with a new one", "\n", "model", ".", "roi_heads", ".", "box_predictor", "=", "FastRCNNPredictor", "(", "in_features", ",", "num_classes", ")", "\n", "\n", "# now get the number of input features for the mask classifier", "\n", "in_features_mask", "=", "model", ".", "roi_heads", ".", "mask_predictor", ".", "conv5_mask", ".", "in_channels", "\n", "hidden_layer", "=", "256", "\n", "# and replace the mask predictor with a new one", "\n", "model", ".", "roi_heads", ".", "mask_predictor", "=", "MaskRCNNPredictor", "(", "in_features_mask", ",", "hidden_layer", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.train_rcnn.get_frcnn_model_instance": [[48, 57], ["torchvision.models.detection.fasterrcnn_resnet50_fpn", "torchvision.models.detection.faster_rcnn.FastRCNNPredictor"], "function", ["None"], ["", "def", "get_frcnn_model_instance", "(", "num_classes", ")", ":", "\n", "# load an instance segmentation model pre-trained pre-trained on COCO", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "detection", ".", "fasterrcnn_resnet50_fpn", "(", "pretrained", "=", "True", ")", "\n", "\n", "# get number of input features for the classifier", "\n", "in_features", "=", "model", ".", "roi_heads", ".", "box_predictor", ".", "cls_score", ".", "in_features", "\n", "# replace the pre-trained head with a new one", "\n", "model", ".", "roi_heads", ".", "box_predictor", "=", "FastRCNNPredictor", "(", "in_features", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.train_rcnn.main": [[59, 119], ["print", "print", "data.apple_dataset.AppleDataset", "data.apple_dataset.AppleDataset", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "get_frcnn_model_instance.to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "print", "time.time", "range", "str", "print", "os.path.join", "train_rcnn.get_transform", "os.path.join", "train_rcnn.get_transform", "train_rcnn.get_maskrcnn_model_instance", "train_rcnn.get_frcnn_model_instance", "torch.load", "torch.load", "get_frcnn_model_instance.load_state_dict", "torch.optim.SGD.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "utility.engine.train_one_epoch", "torch.optim.lr_scheduler.MultiStepLR.step", "utility.engine.evaluate", "time.time", "datetime.timedelta", "get_frcnn_model_instance.parameters", "torch.save", "torch.save", "os.path.join", "int", "get_frcnn_model_instance.state_dict", "torch.optim.SGD.state_dict", "torch.optim.lr_scheduler.MultiStepLR.state_dict"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_transform", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_transform", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_maskrcnn_model_instance", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_frcnn_model_instance", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.engine.train_one_epoch", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.engine.evaluate"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "device", "=", "args", ".", "device", "\n", "\n", "# Data loading code", "\n", "print", "(", "\"Loading data\"", ")", "\n", "num_classes", "=", "2", "\n", "dataset", "=", "AppleDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", ")", ",", "get_transform", "(", "train", "=", "True", ")", ")", "\n", "dataset_test", "=", "AppleDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'test'", ")", ",", "get_transform", "(", "train", "=", "False", ")", ")", "\n", "\n", "print", "(", "\"Creating data loaders\"", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "collate_fn", "=", "utils", ".", "collate_fn", ")", "\n", "\n", "data_loader_test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_test", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "collate_fn", "=", "utils", ".", "collate_fn", ")", "\n", "\n", "print", "(", "\"Creating model\"", ")", "\n", "# Create the correct model type", "\n", "if", "args", ".", "model", "==", "'maskrcnn'", ":", "\n", "        ", "model", "=", "get_maskrcnn_model_instance", "(", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "get_frcnn_model_instance", "(", "num_classes", ")", "\n", "\n", "# Move model to the right device", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "#  lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=args.lr_step_size, gamma=args.lr_gamma)", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "lr_steps", ",", "gamma", "=", "args", ".", "lr_gamma", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "lr_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler'", "]", ")", "\n", "\n", "", "print", "(", "\"Start training\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "train_one_epoch", "(", "model", ",", "optimizer", ",", "data_loader", ",", "device", ",", "epoch", ",", "args", ".", "print_freq", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "output_dir", ":", "\n", "            ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'model_{}.pth'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n", "# evaluate after every epoch", "\n", "", "evaluate", "(", "model", ",", "data_loader_test", ",", "device", "=", "device", ")", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.detection_eval.get_transform": [[14, 20], ["transforms.append", "utility.Compose", "utility.ToTensor", "transforms.append", "utility.RandomHorizontalFlip"], "function", ["None"], ["def", "get_transform", "(", "train", ")", ":", "\n", "    ", "transforms", "=", "[", "]", "\n", "transforms", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "if", "train", ":", "\n", "        ", "transforms", ".", "append", "(", "T", ".", "RandomHorizontalFlip", "(", "0.5", ")", ")", "\n", "", "return", "T", ".", "Compose", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.detection_eval.read_detections": [[22, 43], ["os.path.isfile", "print", "open", "line.rstrip().split", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.vstack", "numpy.vstack", "numpy.concatenate", "numpy.concatenate", "line.rstrip", "numpy.empty", "numpy.array", "numpy.array", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "read_detections", "(", "file_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "        ", "print", "(", "\"Could not read the detection file {}. No such file or directory.\"", ".", "format", "(", "file_path", ")", ")", "\n", "\n", "", "detections", "=", "{", "}", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "im_name", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "score", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "','", ")", "\n", "if", "im_name", "not", "in", "detections", ":", "\n", "                ", "detections", "[", "im_name", "]", "=", "{", "'boxes'", ":", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ",", "'scores'", ":", "np", ".", "array", "(", "[", "float", "(", "score", ")", "]", ")", ",", "'labels'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "\n", "detections", "[", "im_name", "]", "[", "'boxes'", "]", "=", "np", ".", "vstack", "(", "(", "detections", "[", "im_name", "]", "[", "'boxes'", "]", ",", "[", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "x2", ")", ",", "float", "(", "y2", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "detections", "[", "im_name", "]", "[", "'boxes'", "]", "=", "np", ".", "vstack", "(", "(", "detections", "[", "im_name", "]", "[", "'boxes'", "]", ",", "[", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "x2", ")", ",", "float", "(", "y2", ")", "]", ")", ")", "\n", "detections", "[", "im_name", "]", "[", "'scores'", "]", "=", "np", ".", "concatenate", "(", "(", "detections", "[", "im_name", "]", "[", "'scores'", "]", ",", "[", "float", "(", "score", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "detections", "[", "im_name", "]", "[", "'labels'", "]", "=", "np", ".", "concatenate", "(", "(", "detections", "[", "im_name", "]", "[", "'labels'", "]", ",", "[", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "for", "im_name", "in", "detections", ":", "\n", "            ", "detections", "[", "im_name", "]", "[", "'boxes'", "]", "=", "torch", ".", "from_numpy", "(", "detections", "[", "im_name", "]", "[", "'boxes'", "]", ")", "\n", "detections", "[", "im_name", "]", "[", "'scores'", "]", "=", "torch", ".", "from_numpy", "(", "detections", "[", "im_name", "]", "[", "'scores'", "]", ")", "\n", "detections", "[", "im_name", "]", "[", "'labels'", "]", "=", "torch", ".", "from_numpy", "(", "detections", "[", "im_name", "]", "[", "'labels'", "]", ")", "\n", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.counting_eval.read_file": [[5, 13], ["open", "line.rstrip().split.rstrip().split", "line.rstrip().split.rstrip"], "function", ["None"], ["def", "read_file", "(", "path", ")", ":", "\n", "    ", "struct", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "','", ")", "\n", "im_name", ",", "count", "=", "line", "\n", "struct", "[", "im_name", "]", "=", "count", "\n", "", "", "return", "struct", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_transform": [[19, 25], ["transforms.append", "utility.Compose", "utility.ToTensor", "transforms.append", "utility.RandomHorizontalFlip"], "function", ["None"], ["def", "get_transform", "(", "train", ")", ":", "\n", "    ", "transforms", "=", "[", "]", "\n", "transforms", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "if", "train", ":", "\n", "        ", "transforms", ".", "append", "(", "T", ".", "RandomHorizontalFlip", "(", "0.5", ")", ")", "\n", "", "return", "T", ".", "Compose", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_maskrcnn_model_instance": [[27, 42], ["torchvision.models.detection.maskrcnn_resnet50_fpn", "torchvision.models.detection.faster_rcnn.FastRCNNPredictor", "torchvision.models.detection.mask_rcnn.MaskRCNNPredictor"], "function", ["None"], ["", "def", "get_maskrcnn_model_instance", "(", "num_classes", ")", ":", "\n", "# load an instance segmentation model pre-trained pre-trained on COCO", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "detection", ".", "maskrcnn_resnet50_fpn", "(", "pretrained", "=", "False", ")", "\n", "\n", "# get number of input features for the classifier", "\n", "in_features", "=", "model", ".", "roi_heads", ".", "box_predictor", ".", "cls_score", ".", "in_features", "\n", "# replace the pre-trained head with a new one", "\n", "model", ".", "roi_heads", ".", "box_predictor", "=", "FastRCNNPredictor", "(", "in_features", ",", "num_classes", ")", "\n", "\n", "# now get the number of input features for the mask classifier", "\n", "in_features_mask", "=", "model", ".", "roi_heads", ".", "mask_predictor", ".", "conv5_mask", ".", "in_channels", "\n", "hidden_layer", "=", "256", "\n", "# and replace the mask predictor with a new one", "\n", "model", ".", "roi_heads", ".", "mask_predictor", "=", "MaskRCNNPredictor", "(", "in_features_mask", ",", "hidden_layer", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_frcnn_model_instance": [[44, 53], ["torchvision.models.detection.fasterrcnn_resnet50_fpn", "torchvision.models.detection.faster_rcnn.FastRCNNPredictor"], "function", ["None"], ["", "def", "get_frcnn_model_instance", "(", "num_classes", ")", ":", "\n", "# load an instance segmentation model pre-trained pre-trained on COCO", "\n", "    ", "model", "=", "torchvision", ".", "models", ".", "detection", ".", "fasterrcnn_resnet50_fpn", "(", "pretrained", "=", "False", ")", "\n", "\n", "# get number of input features for the classifier", "\n", "in_features", "=", "model", ".", "roi_heads", ".", "box_predictor", ".", "cls_score", ".", "in_features", "\n", "# replace the pre-trained head with a new one", "\n", "model", ".", "roi_heads", ".", "box_predictor", "=", "FastRCNNPredictor", "(", "in_features", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.main": [[55, 100], ["print", "torch.load", "torch.load", "get_frcnn_model_instance.load_state_dict", "get_frcnn_model_instance.eval", "print", "data.apple_dataset.AppleDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.dirname", "open", "predict_rcnn.get_maskrcnn_model_instance", "predict_rcnn.get_frcnn_model_instance", "predict_rcnn.get_transform", "os.path.exists", "os.makedirs", "list", "get_frcnn_model_instance.", "enumerate", "torch.utils.data.DataLoader.dataset.get_img_name", "print", "output[].detach().numpy", "output[].detach().numpy", "numpy.repeat", "numpy.hstack", "numpy.savetxt", "img.to", "len", "output[].detach", "output[].detach", "np.repeat.reshape", "output[].detach().numpy.astype", "output[].detach().numpy.reshape", "len", "len"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_maskrcnn_model_instance", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_frcnn_model_instance", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.None.predict_rcnn.get_transform", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.data.apple_dataset.AppleDataset.get_img_name"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "num_classes", "=", "2", "\n", "device", "=", "args", ".", "device", "\n", "\n", "# Load the model from", "\n", "print", "(", "\"Loading model\"", ")", "\n", "# Create the correct model type", "\n", "if", "args", ".", "mrcnn", ":", "\n", "        ", "model", "=", "get_maskrcnn_model_instance", "(", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "get_frcnn_model_instance", "(", "num_classes", ")", "\n", "\n", "# Load model parameters and keep on CPU", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "weight_file", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"Creating data loaders\"", ")", "\n", "dataset_test", "=", "AppleDataset", "(", "args", ".", "data_path", ",", "get_transform", "(", "train", "=", "False", ")", ")", "\n", "data_loader_test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_test", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "\n", "collate_fn", "=", "utils", ".", "collate_fn", ")", "\n", "\n", "# Create output directory", "\n", "base_path", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "output_file", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "base_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "base_path", ")", "\n", "\n", "# Predict on bboxes on each image", "\n", "", "f", "=", "open", "(", "args", ".", "output_file", ",", "'a'", ")", "\n", "for", "image", ",", "targets", "in", "data_loader_test", ":", "\n", "        ", "image", "=", "list", "(", "img", ".", "to", "(", "device", ")", "for", "img", "in", "image", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "for", "ii", ",", "output", "in", "enumerate", "(", "outputs", ")", ":", "\n", "            ", "img_id", "=", "targets", "[", "ii", "]", "[", "'image_id'", "]", "\n", "img_name", "=", "data_loader_test", ".", "dataset", ".", "get_img_name", "(", "img_id", ")", "\n", "print", "(", "\"Predicting on image: {}\"", ".", "format", "(", "img_name", ")", ")", "\n", "boxes", "=", "output", "[", "'boxes'", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "output", "[", "'scores'", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "im_names", "=", "np", ".", "repeat", "(", "img_name", ",", "len", "(", "boxes", ")", ",", "axis", "=", "0", ")", "\n", "stacked", "=", "np", ".", "hstack", "(", "(", "im_names", ".", "reshape", "(", "len", "(", "scores", ")", ",", "1", ")", ",", "boxes", ".", "astype", "(", "int", ")", ",", "scores", ".", "reshape", "(", "len", "(", "scores", ")", ",", "1", ")", ")", ")", "\n", "\n", "# File to write predictions to", "\n", "np", ".", "savetxt", "(", "f", ",", "stacked", ",", "fmt", "=", "'%s'", ",", "delimiter", "=", "','", ",", "newline", "=", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.create_output_folders": [[9, 15], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "create_output_folders", "(", "out_path", ",", "parts", ")", ":", "\n", "    ", "for", "part", "in", "parts", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "part", ",", "'images'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "part", ",", "'images'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "part", ",", "'masks'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "part", ",", "'masks'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.save_output_images": [[17, 34], ["os.listdir", "os.path.join", "json.load", "open", "os.listdir", "f.endswith", "os.path.join", "shutil.copy2", "cv2.imread", "cv2.resize", "cv2.imwrite", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "save_output_images", "(", "in_path", ",", "out_path", ",", "part", ")", ":", "\n", "    ", "datasets", "=", "os", ".", "listdir", "(", "in_path", ")", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "in_path", ",", "dataset", ")", "\n", "json_path", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "dataset_path", ")", "if", "f", ".", "endswith", "(", "'.json'", ")", "]", "\n", "annotations", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "json_path", "[", "0", "]", ")", ")", ")", "\n", "\n", "for", "a", "in", "annotations", ":", "\n", "            ", "if", "annotations", "[", "a", "]", "[", "\"regions\"", "]", ":", "\n", "                ", "if", "part", "==", "'train'", ":", "\n", "                    ", "image_name", "=", "annotations", "[", "a", "]", "[", "\"filename\"", "]", "\n", "shutil", ".", "copy2", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "image_name", ")", ",", "os", ".", "path", ".", "join", "(", "out_path", ",", "\"images\"", ",", "dataset", "+", "\"_\"", "+", "image_name", ")", ")", "\n", "", "else", ":", "\n", "                    ", "image_name", "=", "annotations", "[", "a", "]", "[", "\"filename\"", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "in_path", ",", "dataset", ",", "image_name", ")", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "720", ",", "1280", ")", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "\"images\"", ",", "dataset", "+", "\"_\"", "+", "image_name", ")", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.save_output_masks": [[36, 63], ["os.listdir", "os.path.join", "json.load", "open", "os.listdir", "f.endswith", "os.path.join", "os.path.join", "numpy.zeros", "cv2.imwrite", "print", "[].lower", "numpy.array", "pts.reshape.reshape", "cv2.fillPoly", "numpy.column_stack"], "function", ["None"], ["", "", "", "", "", "def", "save_output_masks", "(", "in_path", ",", "out_path", ",", "part", ")", ":", "\n", "    ", "datasets", "=", "os", ".", "listdir", "(", "in_path", ")", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "in_path", ",", "dataset", ")", "\n", "json_path", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "dataset_path", ")", "if", "f", ".", "endswith", "(", "'.json'", ")", "]", "\n", "annotations", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "json_path", "[", "0", "]", ")", ")", ")", "\n", "\n", "for", "a", "in", "annotations", ":", "\n", "            ", "if", "annotations", "[", "a", "]", "[", "\"regions\"", "]", ":", "\n", "                ", "image_name", "=", "annotations", "[", "a", "]", "[", "\"filename\"", "]", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "\"masks\"", ",", "dataset", "+", "\"_\"", "+", "image_name", ")", "\n", "\n", "# Create the mask file", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "1280", ",", "720", ")", ",", "np", ".", "uint8", ")", "\n", "count", "=", "1", "\n", "for", "region", "in", "annotations", "[", "a", "]", "[", "\"regions\"", "]", ":", "\n", "                    ", "print", "(", "dataset", ")", "\n", "if", "region", "[", "'region_attributes'", "]", "[", "'class'", "]", ".", "lower", "(", ")", "==", "'Apple'", ".", "lower", "(", ")", ":", "\n", "                        ", "x", "=", "region", "[", "\"shape_attributes\"", "]", "[", "\"all_points_x\"", "]", "\n", "y", "=", "region", "[", "\"shape_attributes\"", "]", "[", "\"all_points_y\"", "]", "\n", "\n", "pts", "=", "np", ".", "array", "(", "np", ".", "column_stack", "(", "(", "x", ",", "y", ")", ")", ",", "np", ".", "int32", ")", "\n", "pts", "=", "pts", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "2", ")", ")", "\n", "cv2", ".", "fillPoly", "(", "mask", ",", "[", "pts", "]", ",", "count", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "cv2", ".", "imwrite", "(", "mask_path", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.main": [[65, 80], ["json_to_masks.get_args", "json_to_masks.create_output_folders", "os.path.join", "os.path.join", "json_to_masks.save_output_images", "json_to_masks.save_output_masks"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.get_args", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.create_output_folders", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.save_output_images", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.save_output_masks"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "base_path", "=", "args", ".", "base_path", "\n", "out_path", "=", "args", ".", "out_path", "\n", "parts", "=", "[", "'train'", ",", "'test'", "]", "\n", "\n", "#Create output folders", "\n", "create_output_folders", "(", "out_path", ",", "parts", ")", "\n", "\n", "for", "part", "in", "parts", ":", "\n", "        ", "read_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "part", ")", "\n", "write_path", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "part", ")", "\n", "\n", "save_output_images", "(", "read_path", ",", "write_path", ",", "part", ")", "\n", "save_output_masks", "(", "read_path", ",", "write_path", ",", "part", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.scripts.json_to_masks.get_args": [[82, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--base_path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--out_path'", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.__init__": [[20, 32], ["isinstance", "copy.deepcopy", "pycocotools.cocoeval.COCOeval"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "coco_gt", ",", "iou_types", ")", ":", "\n", "        ", "assert", "isinstance", "(", "iou_types", ",", "(", "list", ",", "tuple", ")", ")", "\n", "coco_gt", "=", "copy", ".", "deepcopy", "(", "coco_gt", ")", "\n", "self", ".", "coco_gt", "=", "coco_gt", "\n", "\n", "self", ".", "iou_types", "=", "iou_types", "\n", "self", ".", "coco_eval", "=", "{", "}", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "self", ".", "coco_eval", "[", "iou_type", "]", "=", "COCOeval", "(", "coco_gt", ",", "iouType", "=", "iou_type", ")", "\n", "\n", "", "self", ".", "img_ids", "=", "[", "]", "\n", "self", ".", "eval_imgs", "=", "{", "k", ":", "[", "]", "for", "k", "in", "iou_types", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.update": [[33, 47], ["list", "coco_eval.CocoEvaluator.img_ids.extend", "numpy.unique", "coco_eval.CocoEvaluator.prepare", "list", "coco_eval.evaluate", "coco_eval.CocoEvaluator.eval_imgs[].append", "list", "coco_eval.loadRes", "pycocotools.coco.COCO", "predictions.keys"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.prepare", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.engine.evaluate", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.loadRes"], ["", "def", "update", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "img_ids", "=", "list", "(", "np", ".", "unique", "(", "list", "(", "predictions", ".", "keys", "(", ")", ")", ")", ")", "\n", "self", ".", "img_ids", ".", "extend", "(", "img_ids", ")", "\n", "\n", "for", "iou_type", "in", "self", ".", "iou_types", ":", "\n", "            ", "results", "=", "self", ".", "prepare", "(", "predictions", ",", "iou_type", ")", "\n", "coco_dt", "=", "loadRes", "(", "self", ".", "coco_gt", ",", "results", ")", "if", "results", "else", "COCO", "(", ")", "\n", "coco_eval", "=", "self", ".", "coco_eval", "[", "iou_type", "]", "\n", "\n", "coco_eval", ".", "cocoDt", "=", "coco_dt", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "list", "(", "img_ids", ")", "\n", "img_ids", ",", "eval_imgs", "=", "evaluate", "(", "coco_eval", ")", "\n", "\n", "self", ".", "eval_imgs", "[", "iou_type", "]", ".", "append", "(", "eval_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.synchronize_between_processes": [[48, 52], ["numpy.concatenate", "coco_eval.create_common_coco_eval"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.create_common_coco_eval"], ["", "", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "iou_type", "in", "self", ".", "iou_types", ":", "\n", "            ", "self", ".", "eval_imgs", "[", "iou_type", "]", "=", "np", ".", "concatenate", "(", "self", ".", "eval_imgs", "[", "iou_type", "]", ",", "2", ")", "\n", "create_common_coco_eval", "(", "self", ".", "coco_eval", "[", "iou_type", "]", ",", "self", ".", "img_ids", ",", "self", ".", "eval_imgs", "[", "iou_type", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.accumulate": [[53, 56], ["coco_eval.CocoEvaluator.coco_eval.values", "coco_eval.accumulate"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.accumulate"], ["", "", "def", "accumulate", "(", "self", ")", ":", "\n", "        ", "for", "coco_eval", "in", "self", ".", "coco_eval", ".", "values", "(", ")", ":", "\n", "            ", "coco_eval", ".", "accumulate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.summarize": [[57, 61], ["coco_eval.CocoEvaluator.coco_eval.items", "print", "coco_eval.summarize"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.summarize"], ["", "", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "for", "iou_type", ",", "coco_eval", "in", "self", ".", "coco_eval", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"IoU metric: {}\"", ".", "format", "(", "iou_type", ")", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.prepare": [[62, 71], ["coco_eval.CocoEvaluator.prepare_for_coco_detection", "coco_eval.CocoEvaluator.prepare_for_coco_segmentation", "coco_eval.CocoEvaluator.prepare_for_coco_keypoint", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.prepare_for_coco_detection", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.prepare_for_coco_segmentation", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.prepare_for_coco_keypoint"], ["", "", "def", "prepare", "(", "self", ",", "predictions", ",", "iou_type", ")", ":", "\n", "        ", "if", "iou_type", "==", "\"bbox\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_detection", "(", "predictions", ")", "\n", "", "elif", "iou_type", "==", "\"segm\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_segmentation", "(", "predictions", ")", "\n", "", "elif", "iou_type", "==", "\"keypoints\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_keypoint", "(", "predictions", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown iou type {}\"", ".", "format", "(", "iou_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.prepare_for_coco_detection": [[72, 95], ["predictions.items", "convert_to_xywh().tolist", "prediction[].tolist", "prediction[].tolist", "coco_results.extend", "len", "coco_eval.convert_to_xywh", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.convert_to_xywh"], ["", "", "def", "prepare_for_coco_detection", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "boxes", "=", "prediction", "[", "\"boxes\"", "]", "\n", "boxes", "=", "convert_to_xywh", "(", "boxes", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "box", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "boxes", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.prepare_for_coco_segmentation": [[96, 130], ["predictions.items", "prediction[].tolist", "prediction[].tolist", "coco_results.extend", "len", "rle[].decode", "pycocotools.encode", "numpy.array", "enumerate"], "methods", ["None"], ["", "def", "prepare_for_coco_segmentation", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "scores", "=", "prediction", "[", "\"scores\"", "]", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", "\n", "masks", "=", "prediction", "[", "\"masks\"", "]", "\n", "\n", "masks", "=", "masks", ">", "0.5", "\n", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "\n", "rles", "=", "[", "\n", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", "0", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "\"F\"", ")", ")", "[", "0", "]", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "for", "rle", "in", "rles", ":", "\n", "                ", "rle", "[", "\"counts\"", "]", "=", "rle", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "\"segmentation\"", ":", "rle", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "rle", "in", "enumerate", "(", "rles", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.prepare_for_coco_keypoint": [[131, 156], ["predictions.items", "convert_to_xywh().tolist", "prediction[].tolist", "prediction[].tolist", "keypoints.flatten().tolist.flatten().tolist.flatten().tolist", "coco_results.extend", "len", "coco_eval.convert_to_xywh", "keypoints.flatten().tolist.flatten().tolist.flatten", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.convert_to_xywh"], ["", "def", "prepare_for_coco_keypoint", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "boxes", "=", "prediction", "[", "\"boxes\"", "]", "\n", "boxes", "=", "convert_to_xywh", "(", "boxes", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "keypoints", "=", "prediction", "[", "\"keypoints\"", "]", "\n", "keypoints", "=", "keypoints", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "'keypoints'", ":", "keypoint", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "keypoint", "in", "enumerate", "(", "keypoints", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.convert_to_xywh": [[158, 161], ["boxes.unbind", "torch.stack", "torch.stack"], "function", ["None"], ["", "", "def", "convert_to_xywh", "(", "boxes", ")", ":", "\n", "    ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "boxes", ".", "unbind", "(", "1", ")", "\n", "return", "torch", ".", "stack", "(", "(", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.merge": [[163, 183], ["utility.all_gather", "utility.all_gather", "numpy.array", "numpy.concatenate", "numpy.unique", "np.array.extend", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.all_gather", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.all_gather"], ["", "def", "merge", "(", "img_ids", ",", "eval_imgs", ")", ":", "\n", "    ", "all_img_ids", "=", "utils", ".", "all_gather", "(", "img_ids", ")", "\n", "all_eval_imgs", "=", "utils", ".", "all_gather", "(", "eval_imgs", ")", "\n", "\n", "merged_img_ids", "=", "[", "]", "\n", "for", "p", "in", "all_img_ids", ":", "\n", "        ", "merged_img_ids", ".", "extend", "(", "p", ")", "\n", "\n", "", "merged_eval_imgs", "=", "[", "]", "\n", "for", "p", "in", "all_eval_imgs", ":", "\n", "        ", "merged_eval_imgs", ".", "append", "(", "p", ")", "\n", "\n", "", "merged_img_ids", "=", "np", ".", "array", "(", "merged_img_ids", ")", "\n", "merged_eval_imgs", "=", "np", ".", "concatenate", "(", "merged_eval_imgs", ",", "2", ")", "\n", "\n", "# keep only unique (and in sorted order) images", "\n", "merged_img_ids", ",", "idx", "=", "np", ".", "unique", "(", "merged_img_ids", ",", "return_index", "=", "True", ")", "\n", "merged_eval_imgs", "=", "merged_eval_imgs", "[", "...", ",", "idx", "]", "\n", "\n", "return", "merged_img_ids", ",", "merged_eval_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.create_common_coco_eval": [[185, 193], ["coco_eval.merge", "list", "list", "copy.deepcopy", "list.flatten"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.merge"], ["", "def", "create_common_coco_eval", "(", "coco_eval", ",", "img_ids", ",", "eval_imgs", ")", ":", "\n", "    ", "img_ids", ",", "eval_imgs", "=", "merge", "(", "img_ids", ",", "eval_imgs", ")", "\n", "img_ids", "=", "list", "(", "img_ids", ")", "\n", "eval_imgs", "=", "list", "(", "eval_imgs", ".", "flatten", "(", ")", ")", "\n", "\n", "coco_eval", ".", "evalImgs", "=", "eval_imgs", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "coco_eval", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "coco_eval", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.createIndex": [[203, 233], ["collections.defaultdict", "collections.defaultdict", "imgToAnns[].append", "catToImgs[].append"], "function", ["None"], ["", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "# print('creating index...')", "\n", "    ", "anns", ",", "cats", ",", "imgs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "imgToAnns", ",", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "'annotations'", "in", "self", ".", "dataset", ":", "\n", "        ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "            ", "imgToAnns", "[", "ann", "[", "'image_id'", "]", "]", ".", "append", "(", "ann", ")", "\n", "anns", "[", "ann", "[", "'id'", "]", "]", "=", "ann", "\n", "\n", "", "", "if", "'images'", "in", "self", ".", "dataset", ":", "\n", "        ", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", ":", "\n", "            ", "imgs", "[", "img", "[", "'id'", "]", "]", "=", "img", "\n", "\n", "", "", "if", "'categories'", "in", "self", ".", "dataset", ":", "\n", "        ", "for", "cat", "in", "self", ".", "dataset", "[", "'categories'", "]", ":", "\n", "            ", "cats", "[", "cat", "[", "'id'", "]", "]", "=", "cat", "\n", "\n", "", "", "if", "'annotations'", "in", "self", ".", "dataset", "and", "'categories'", "in", "self", ".", "dataset", ":", "\n", "        ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "            ", "catToImgs", "[", "ann", "[", "'category_id'", "]", "]", ".", "append", "(", "ann", "[", "'image_id'", "]", ")", "\n", "\n", "# print('index created!')", "\n", "\n", "# create class members", "\n", "", "", "self", ".", "anns", "=", "anns", "\n", "self", ".", "imgToAnns", "=", "imgToAnns", "\n", "self", ".", "catToImgs", "=", "catToImgs", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "cats", "=", "cats", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.loadRes": [[238, 298], ["pycocotools.coco.COCO", "isinstance", "coco_eval.createIndex", "json.load", "type", "set", "enumerate", "open", "type", "coco_eval..loadNumpyAnnotations", "set", "set", "set", "set", "copy.deepcopy", "enumerate", "coco_eval..getImgIds", "copy.deepcopy", "enumerate", "maskUtils.area", "copy.deepcopy", "enumerate", "maskUtils.toBbox", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.createIndex", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.max"], ["def", "loadRes", "(", "self", ",", "resFile", ")", ":", "\n", "    ", "\"\"\"\n    Load result file and return a result api object.\n    :param   resFile (str)     : file name of result file\n    :return: res (obj)         : result api object\n    \"\"\"", "\n", "res", "=", "COCO", "(", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", "]", "\n", "\n", "# print('Loading and preparing results...')", "\n", "# tic = time.time()", "\n", "if", "isinstance", "(", "resFile", ",", "torch", ".", "_six", ".", "string_classes", ")", ":", "\n", "        ", "anns", "=", "json", ".", "load", "(", "open", "(", "resFile", ")", ")", "\n", "", "elif", "type", "(", "resFile", ")", "==", "np", ".", "ndarray", ":", "\n", "        ", "anns", "=", "self", ".", "loadNumpyAnnotations", "(", "resFile", ")", "\n", "", "else", ":", "\n", "        ", "anns", "=", "resFile", "\n", "", "assert", "type", "(", "anns", ")", "==", "list", ",", "'results in not an array of objects'", "\n", "annsImgIds", "=", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", "\n", "assert", "set", "(", "annsImgIds", ")", "==", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ",", "'Results do not correspond to current coco set'", "\n", "if", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "        ", "imgIds", "=", "set", "(", "[", "img", "[", "'id'", "]", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "]", ")", "&", "set", "(", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "if", "img", "[", "'id'", "]", "in", "imgIds", "]", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "", "", "elif", "'bbox'", "in", "anns", "[", "0", "]", "and", "not", "anns", "[", "0", "]", "[", "'bbox'", "]", "==", "[", "]", ":", "\n", "        ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "bb", "=", "ann", "[", "'bbox'", "]", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "[", "bb", "[", "0", "]", ",", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ",", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "]", "\n", "if", "'segmentation'", "not", "in", "ann", ":", "\n", "                ", "ann", "[", "'segmentation'", "]", "=", "[", "[", "x1", ",", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "y2", ",", "x2", ",", "y1", "]", "]", "\n", "", "ann", "[", "'area'", "]", "=", "bb", "[", "2", "]", "*", "bb", "[", "3", "]", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'segmentation'", "in", "anns", "[", "0", "]", ":", "\n", "        ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "# now only support compressed RLE format as segmentation results", "\n", "            ", "ann", "[", "'area'", "]", "=", "maskUtils", ".", "area", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "if", "'bbox'", "not", "in", "ann", ":", "\n", "                ", "ann", "[", "'bbox'", "]", "=", "maskUtils", ".", "toBbox", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "        ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "s", "=", "ann", "[", "'keypoints'", "]", "\n", "x", "=", "s", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "s", "[", "1", ":", ":", "3", "]", "\n", "x0", ",", "x1", ",", "y0", ",", "y1", "=", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "max", "(", "y", ")", "\n", "ann", "[", "'area'", "]", "=", "(", "x1", "-", "x0", ")", "*", "(", "y1", "-", "y0", ")", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'bbox'", "]", "=", "[", "x0", ",", "y0", ",", "x1", "-", "x0", ",", "y1", "-", "y0", "]", "\n", "# print('DONE (t={:0.2f}s)'.format(time.time()- tic))", "\n", "\n", "", "", "res", ".", "dataset", "[", "'annotations'", "]", "=", "anns", "\n", "createIndex", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.evaluate": [[300, 346], ["list", "sorted", "coco_eval.._prepare", "numpy.asarray().reshape", "copy.deepcopy", "print", "numpy.unique", "list", "computeIoU", "evaluateImg", "len", "len", "len", "numpy.unique", "numpy.asarray"], "function", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "    ", "'''\n    Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n    :return: None\n    '''", "\n", "# tic = time.time()", "\n", "# print('Running per image evaluation...')", "\n", "p", "=", "self", ".", "params", "\n", "# add backward compatibility if useSegm is specified in params", "\n", "if", "p", ".", "useSegm", "is", "not", "None", ":", "\n", "        ", "p", ".", "iouType", "=", "'segm'", "if", "p", ".", "useSegm", "==", "1", "else", "'bbox'", "\n", "print", "(", "'useSegm (deprecated) is not None. Running {} evaluation'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "# print('Evaluate annotation type *{}*'.format(p.iouType))", "\n", "", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "        ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "\n", "if", "p", ".", "iouType", "==", "'segm'", "or", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "        ", "computeIoU", "=", "self", ".", "computeIoU", "\n", "", "elif", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "        ", "computeIoU", "=", "self", ".", "computeOks", "\n", "", "self", ".", "ious", "=", "{", "\n", "(", "imgId", ",", "catId", ")", ":", "computeIoU", "(", "imgId", ",", "catId", ")", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "catIds", "}", "\n", "\n", "evaluateImg", "=", "self", ".", "evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "evalImgs", "=", "[", "\n", "evaluateImg", "(", "imgId", ",", "catId", ",", "areaRng", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "areaRng", "in", "p", ".", "areaRng", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "# this is NOT in the pycocotools code, but could be done outside", "\n", "evalImgs", "=", "np", ".", "asarray", "(", "evalImgs", ")", ".", "reshape", "(", "len", "(", "catIds", ")", ",", "len", "(", "p", ".", "areaRng", ")", ",", "len", "(", "p", ".", "imgIds", ")", ")", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "# toc = time.time()", "\n", "# print('DONE (t={:0.2f}s).'.format(toc-tic))", "\n", "return", "p", ".", "imgIds", ",", "evalImgs", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.transforms.Compose.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.transforms.Compose.__call__": [[21, 25], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.transforms.RandomHorizontalFlip.__init__": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.transforms.RandomHorizontalFlip.__call__": [[31, 45], ["random.random", "image.flip.flip.flip", "target[].flip", "transforms._flip_coco_person_keypoints"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.transforms._flip_coco_person_keypoints"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "height", ",", "width", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "image", "=", "image", ".", "flip", "(", "-", "1", ")", "\n", "bbox", "=", "target", "[", "\"boxes\"", "]", "\n", "bbox", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "width", "-", "bbox", "[", ":", ",", "[", "2", ",", "0", "]", "]", "\n", "target", "[", "\"boxes\"", "]", "=", "bbox", "\n", "if", "\"masks\"", "in", "target", ":", "\n", "                ", "target", "[", "\"masks\"", "]", "=", "target", "[", "\"masks\"", "]", ".", "flip", "(", "-", "1", ")", "\n", "", "if", "\"keypoints\"", "in", "target", ":", "\n", "                ", "keypoints", "=", "target", "[", "\"keypoints\"", "]", "\n", "keypoints", "=", "_flip_coco_person_keypoints", "(", "keypoints", ",", "width", ")", "\n", "target", "[", "\"keypoints\"", "]", "=", "keypoints", "\n", "", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.transforms.ToTensor.__call__": [[48, 51], ["torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "image", "=", "F", ".", "to_tensor", "(", "image", ")", "\n", "return", "image", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.transforms._flip_coco_person_keypoints": [[7, 15], ["None"], "function", ["None"], ["def", "_flip_coco_person_keypoints", "(", "kps", ",", "width", ")", ":", "\n", "    ", "flip_inds", "=", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", ",", "6", ",", "5", ",", "8", ",", "7", ",", "10", ",", "9", ",", "12", ",", "11", ",", "14", ",", "13", ",", "16", ",", "15", "]", "\n", "flipped_data", "=", "kps", "[", ":", ",", "flip_inds", "]", "\n", "flipped_data", "[", "...", ",", "0", "]", "=", "width", "-", "flipped_data", "[", "...", ",", "0", "]", "\n", "# Maintain COCO convention that if visibility == 0, then x, y = 0", "\n", "inds", "=", "flipped_data", "[", "...", ",", "2", "]", "==", "0", "\n", "flipped_data", "[", "inds", "]", "=", "0", "\n", "return", "flipped_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.engine.train_one_epoch": [[13, 54], ["model.train", "utility.MetricLogger", "utils.MetricLogger.add_meter", "utils.MetricLogger.log_every", "utility.SmoothedValue", "min", "utility.warmup_lr_scheduler", "list", "model", "sum", "utility.reduce_dict", "sum", "sum.item", "optimizer.zero_grad", "sum.backward", "optimizer.step", "utils.MetricLogger.update", "utils.MetricLogger.update", "math.isfinite", "print", "print", "sys.exit", "utils.warmup_lr_scheduler.step", "len", "image.to", "v.to", "t.items", "model.values", "utils.reduce_dict.values"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.warmup_lr_scheduler", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.reduce_dict", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.update", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.update"], ["def", "train_one_epoch", "(", "model", ",", "optimizer", ",", "data_loader", ",", "device", ",", "epoch", ",", "print_freq", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "\n", "lr_scheduler", "=", "None", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "warmup_factor", "=", "1.", "/", "1000", "\n", "warmup_iters", "=", "min", "(", "1000", ",", "len", "(", "data_loader", ")", "-", "1", ")", "\n", "\n", "lr_scheduler", "=", "utils", ".", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", "\n", "\n", "", "for", "images", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "images", "=", "list", "(", "image", ".", "to", "(", "device", ")", "for", "image", "in", "images", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "loss_dict", "=", "model", "(", "images", ",", "targets", ")", "\n", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "utils", ".", "reduce_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "\n", "loss_value", "=", "losses_reduced", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "print", "(", "loss_dict_reduced", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "metric_logger", ".", "update", "(", "loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.engine._get_iou_types": [[56, 66], ["isinstance", "isinstance", "isinstance", "iou_types.append", "iou_types.append"], "function", ["None"], ["", "", "def", "_get_iou_types", "(", "model", ")", ":", "\n", "    ", "model_without_ddp", "=", "model", "\n", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "        ", "model_without_ddp", "=", "model", ".", "module", "\n", "", "iou_types", "=", "[", "\"bbox\"", "]", "\n", "if", "isinstance", "(", "model_without_ddp", ",", "torchvision", ".", "models", ".", "detection", ".", "MaskRCNN", ")", ":", "\n", "        ", "iou_types", ".", "append", "(", "\"segm\"", ")", "\n", "", "if", "isinstance", "(", "model_without_ddp", ",", "torchvision", ".", "models", ".", "detection", ".", "KeypointRCNN", ")", ":", "\n", "        ", "iou_types", ".", "append", "(", "\"keypoints\"", ")", "\n", "", "return", "iou_types", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.engine.evaluate": [[68, 109], ["torch.no_grad", "torch.get_num_threads", "torch.set_num_threads", "torch.device", "model.eval", "utility.MetricLogger", "utility.coco_utils.get_coco_api_from_dataset", "engine._get_iou_types", "utility.coco_eval.CocoEvaluator", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "utility.coco_eval.CocoEvaluator.synchronize_between_processes", "utility.coco_eval.CocoEvaluator.accumulate", "utility.coco_eval.CocoEvaluator.summarize", "torch.set_num_threads", "list", "torch.cuda.synchronize", "time.time", "model", "time.time", "utility.coco_eval.CocoEvaluator.update", "utils.MetricLogger.update", "time.time", "target[].item", "time.time", "img.to", "v.to", "v.to", "zip", "t.items", "t.items"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.get_coco_api_from_dataset", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.engine._get_iou_types", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.accumulate", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.CocoEvaluator.summarize", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.update", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "model", ",", "data_loader", ",", "device", ")", ":", "\n", "    ", "n_threads", "=", "torch", ".", "get_num_threads", "(", ")", "\n", "# FIXME remove this and make paste_masks_in_image run on the GPU", "\n", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Test:'", "\n", "\n", "coco", "=", "get_coco_api_from_dataset", "(", "data_loader", ".", "dataset", ")", "\n", "iou_types", "=", "_get_iou_types", "(", "model", ")", "\n", "coco_evaluator", "=", "CocoEvaluator", "(", "coco", ",", "iou_types", ")", "\n", "\n", "for", "image", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "100", ",", "header", ")", ":", "\n", "        ", "image", "=", "list", "(", "img", ".", "to", "(", "device", ")", "for", "img", "in", "image", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "model_time", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "\n", "outputs", "=", "[", "{", "k", ":", "v", ".", "to", "(", "cpu_device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "outputs", "]", "\n", "model_time", "=", "time", ".", "time", "(", ")", "-", "model_time", "\n", "\n", "res", "=", "{", "target", "[", "\"image_id\"", "]", ".", "item", "(", ")", ":", "output", "for", "target", ",", "output", "in", "zip", "(", "targets", ",", "outputs", ")", "}", "\n", "evaluator_time", "=", "time", ".", "time", "(", ")", "\n", "coco_evaluator", ".", "update", "(", "res", ")", "\n", "evaluator_time", "=", "time", ".", "time", "(", ")", "-", "evaluator_time", "\n", "metric_logger", ".", "update", "(", "model_time", "=", "model_time", ",", "evaluator_time", "=", "evaluator_time", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "coco_evaluator", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "# accumulate predictions from all images", "\n", "coco_evaluator", ".", "accumulate", "(", ")", "\n", "coco_evaluator", ".", "summarize", "(", ")", "\n", "torch", ".", "set_num_threads", "(", "n_threads", ")", "\n", "return", "coco_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.FilterAndRemapCocoCategories.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "categories", ",", "remap", "=", "True", ")", ":", "\n", "        ", "self", ".", "categories", "=", "categories", "\n", "self", ".", "remap", "=", "remap", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.FilterAndRemapCocoCategories.__call__": [[20, 31], ["copy.deepcopy", "coco_utils.FilterAndRemapCocoCategories.categories.index"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "anno", "=", "target", "[", "\"annotations\"", "]", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "\"category_id\"", "]", "in", "self", ".", "categories", "]", "\n", "if", "not", "self", ".", "remap", ":", "\n", "            ", "target", "[", "\"annotations\"", "]", "=", "anno", "\n", "return", "image", ",", "target", "\n", "", "anno", "=", "copy", ".", "deepcopy", "(", "anno", ")", "\n", "for", "obj", "in", "anno", ":", "\n", "            ", "obj", "[", "\"category_id\"", "]", "=", "self", ".", "categories", ".", "index", "(", "obj", "[", "\"category_id\"", "]", ")", "\n", "", "target", "[", "\"annotations\"", "]", "=", "anno", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.ConvertCocoPolysToMask.__call__": [[51, 104], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "boxes[].clamp_", "boxes[].clamp_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "coco_utils.convert_coco_poly_to_mask", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "keypoints.view.view.view"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.convert_coco_poly_to_mask"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "image_id", "=", "target", "[", "\"image_id\"", "]", "\n", "image_id", "=", "torch", ".", "tensor", "(", "[", "image_id", "]", ")", "\n", "\n", "anno", "=", "target", "[", "\"annotations\"", "]", "\n", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "]", "\n", "# guard against no boxes via resizing", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "boxes", "[", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "boxes", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "boxes", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "\"category_id\"", "]", "for", "obj", "in", "anno", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "segmentations", "=", "[", "obj", "[", "\"segmentation\"", "]", "for", "obj", "in", "anno", "]", "\n", "masks", "=", "convert_coco_poly_to_mask", "(", "segmentations", ",", "h", ",", "w", ")", "\n", "\n", "keypoints", "=", "None", "\n", "if", "anno", "and", "\"keypoints\"", "in", "anno", "[", "0", "]", ":", "\n", "            ", "keypoints", "=", "[", "obj", "[", "\"keypoints\"", "]", "for", "obj", "in", "anno", "]", "\n", "keypoints", "=", "torch", ".", "as_tensor", "(", "keypoints", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "num_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "if", "num_keypoints", ":", "\n", "                ", "keypoints", "=", "keypoints", ".", "view", "(", "num_keypoints", ",", "-", "1", ",", "3", ")", "\n", "\n", "", "", "keep", "=", "(", "boxes", "[", ":", ",", "3", "]", ">", "boxes", "[", ":", ",", "1", "]", ")", "&", "(", "boxes", "[", ":", ",", "2", "]", ">", "boxes", "[", ":", ",", "0", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", "]", "\n", "classes", "=", "classes", "[", "keep", "]", "\n", "masks", "=", "masks", "[", "keep", "]", "\n", "if", "keypoints", "is", "not", "None", ":", "\n", "            ", "keypoints", "=", "keypoints", "[", "keep", "]", "\n", "\n", "", "target", "=", "{", "}", "\n", "target", "[", "\"boxes\"", "]", "=", "boxes", "\n", "target", "[", "\"labels\"", "]", "=", "classes", "\n", "target", "[", "\"masks\"", "]", "=", "masks", "\n", "target", "[", "\"image_id\"", "]", "=", "image_id", "\n", "if", "keypoints", "is", "not", "None", ":", "\n", "            ", "target", "[", "\"keypoints\"", "]", "=", "keypoints", "\n", "\n", "# for conversion to coco api", "\n", "", "area", "=", "torch", ".", "tensor", "(", "[", "obj", "[", "\"area\"", "]", "for", "obj", "in", "anno", "]", ")", "\n", "iscrowd", "=", "torch", ".", "tensor", "(", "[", "obj", "[", "\"iscrowd\"", "]", "for", "obj", "in", "anno", "]", ")", "\n", "target", "[", "\"area\"", "]", "=", "area", "\n", "target", "[", "\"iscrowd\"", "]", "=", "iscrowd", "\n", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.CocoDetection.__init__": [[209, 212], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.data.apple_dataset.AppleDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_folder", ",", "ann_file", ",", "transforms", ")", ":", "\n", "        ", "super", "(", "CocoDetection", ",", "self", ")", ".", "__init__", "(", "img_folder", ",", "ann_file", ")", "\n", "self", ".", "_transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.CocoDetection.__getitem__": [[213, 220], ["super().__getitem__", "dict", "coco_utils.CocoDetection._transforms"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.data.apple_dataset.AppleDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "target", "=", "super", "(", "CocoDetection", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "image_id", "=", "self", ".", "ids", "[", "idx", "]", "\n", "target", "=", "dict", "(", "image_id", "=", "image_id", ",", "annotations", "=", "target", ")", "\n", "if", "self", ".", "_transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "_transforms", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.convert_coco_poly_to_mask": [[33, 48], ["pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "torch.as_tensor", "torch.as_tensor", "mask.any.any", "torch.zeros.append", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "len"], "function", ["None"], ["", "", "def", "convert_coco_poly_to_mask", "(", "segmentations", ",", "height", ",", "width", ")", ":", "\n", "    ", "masks", "=", "[", "]", "\n", "for", "polygons", "in", "segmentations", ":", "\n", "        ", "rles", "=", "coco_mask", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "mask", "=", "coco_mask", ".", "decode", "(", "rles", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "<", "3", ":", "\n", "            ", "mask", "=", "mask", "[", "...", ",", "None", "]", "\n", "", "mask", "=", "torch", ".", "as_tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "mask", "=", "mask", ".", "any", "(", "dim", "=", "2", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "if", "masks", ":", "\n", "        ", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "masks", "=", "torch", ".", "zeros", "(", "(", "0", ",", "height", ",", "width", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils._coco_remove_images_without_annotations": [[106, 144], ["isinstance", "enumerate", "torch.utils.data.Subset", "torch.utils.data.Subset", "all", "sum", "coco_utils._coco_remove_images_without_annotations._has_only_empty_bbox"], "function", ["None"], ["", "", "def", "_coco_remove_images_without_annotations", "(", "dataset", ",", "cat_list", "=", "None", ")", ":", "\n", "    ", "def", "_has_only_empty_bbox", "(", "anno", ")", ":", "\n", "        ", "return", "all", "(", "any", "(", "o", "<=", "1", "for", "o", "in", "obj", "[", "\"bbox\"", "]", "[", "2", ":", "]", ")", "for", "obj", "in", "anno", ")", "\n", "\n", "", "def", "_count_visible_keypoints", "(", "anno", ")", ":", "\n", "        ", "return", "sum", "(", "sum", "(", "1", "for", "v", "in", "ann", "[", "\"keypoints\"", "]", "[", "2", ":", ":", "3", "]", "if", "v", ">", "0", ")", "for", "ann", "in", "anno", ")", "\n", "\n", "", "min_keypoints_per_image", "=", "10", "\n", "\n", "def", "_has_valid_annotation", "(", "anno", ")", ":", "\n", "# if it's empty, there is no annotation", "\n", "        ", "if", "len", "(", "anno", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "# if all boxes have close to zero area, there is no annotation", "\n", "", "if", "_has_only_empty_bbox", "(", "anno", ")", ":", "\n", "            ", "return", "False", "\n", "# keypoints task have a slight different critera for considering", "\n", "# if an annotation is valid", "\n", "", "if", "\"keypoints\"", "not", "in", "anno", "[", "0", "]", ":", "\n", "            ", "return", "True", "\n", "# for keypoint detection tasks, only consider valid images those", "\n", "# containing at least min_keypoints_per_image", "\n", "", "if", "_count_visible_keypoints", "(", "anno", ")", ">=", "min_keypoints_per_image", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "assert", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", "\n", "ids", "=", "[", "]", "\n", "for", "ds_idx", ",", "img_id", "in", "enumerate", "(", "dataset", ".", "ids", ")", ":", "\n", "        ", "ann_ids", "=", "dataset", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", "\n", "anno", "=", "dataset", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "if", "cat_list", ":", "\n", "            ", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "\"category_id\"", "]", "in", "cat_list", "]", "\n", "", "if", "_has_valid_annotation", "(", "anno", ")", ":", "\n", "            ", "ids", ".", "append", "(", "ds_idx", ")", "\n", "\n", "", "", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dataset", ",", "ids", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.convert_to_coco_api": [[146, 195], ["pycocotools.coco.COCO", "set", "range", "pycocotools.coco.COCO.createIndex", "len", "targets[].item", "dataset[].append", "bboxes.tolist.tolist", "targets[].tolist", "targets[].tolist", "targets[].tolist", "len", "range", "masks.permute().contiguous().permute.permute().contiguous().permute", "keypoints.reshape().tolist.reshape().tolist", "set.add", "dataset[].append", "sorted", "pycocotools.mask.encode", "sum", "masks.permute().contiguous().permute.permute().contiguous", "keypoints.reshape().tolist.reshape", "masks[].numpy", "masks.permute().contiguous().permute.permute"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_eval.createIndex"], ["", "def", "convert_to_coco_api", "(", "ds", ")", ":", "\n", "    ", "coco_ds", "=", "COCO", "(", ")", "\n", "ann_id", "=", "0", "\n", "dataset", "=", "{", "'images'", ":", "[", "]", ",", "'categories'", ":", "[", "]", ",", "'annotations'", ":", "[", "]", "}", "\n", "categories", "=", "set", "(", ")", "\n", "for", "img_idx", "in", "range", "(", "len", "(", "ds", ")", ")", ":", "\n", "# find better way to get target", "\n", "# targets = ds.get_annotations(img_idx)", "\n", "        ", "img", ",", "targets", "=", "ds", "[", "img_idx", "]", "\n", "image_id", "=", "targets", "[", "\"image_id\"", "]", ".", "item", "(", ")", "\n", "img_dict", "=", "{", "}", "\n", "img_dict", "[", "'id'", "]", "=", "image_id", "\n", "img_dict", "[", "'height'", "]", "=", "img", ".", "shape", "[", "-", "2", "]", "\n", "img_dict", "[", "'width'", "]", "=", "img", ".", "shape", "[", "-", "1", "]", "\n", "dataset", "[", "'images'", "]", ".", "append", "(", "img_dict", ")", "\n", "bboxes", "=", "targets", "[", "\"boxes\"", "]", "\n", "bboxes", "[", ":", ",", "2", ":", "]", "-=", "bboxes", "[", ":", ",", ":", "2", "]", "\n", "bboxes", "=", "bboxes", ".", "tolist", "(", ")", "\n", "labels", "=", "targets", "[", "'labels'", "]", ".", "tolist", "(", ")", "\n", "areas", "=", "targets", "[", "'area'", "]", ".", "tolist", "(", ")", "\n", "iscrowd", "=", "targets", "[", "'iscrowd'", "]", ".", "tolist", "(", ")", "\n", "if", "'masks'", "in", "targets", ":", "\n", "            ", "masks", "=", "targets", "[", "'masks'", "]", "\n", "# make masks Fortran contiguous for coco_mask", "\n", "masks", "=", "masks", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "if", "'keypoints'", "in", "targets", ":", "\n", "            ", "keypoints", "=", "targets", "[", "'keypoints'", "]", "\n", "keypoints", "=", "keypoints", ".", "reshape", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "tolist", "(", ")", "\n", "", "num_objs", "=", "len", "(", "bboxes", ")", "\n", "for", "i", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "ann", "=", "{", "}", "\n", "ann", "[", "'image_id'", "]", "=", "image_id", "\n", "ann", "[", "'bbox'", "]", "=", "bboxes", "[", "i", "]", "\n", "ann", "[", "'category_id'", "]", "=", "labels", "[", "i", "]", "\n", "categories", ".", "add", "(", "labels", "[", "i", "]", ")", "\n", "ann", "[", "'area'", "]", "=", "areas", "[", "i", "]", "\n", "ann", "[", "'iscrowd'", "]", "=", "iscrowd", "[", "i", "]", "\n", "ann", "[", "'id'", "]", "=", "ann_id", "\n", "if", "'masks'", "in", "targets", ":", "\n", "                ", "ann", "[", "\"segmentation\"", "]", "=", "coco_mask", ".", "encode", "(", "masks", "[", "i", "]", ".", "numpy", "(", ")", ")", "\n", "", "if", "'keypoints'", "in", "targets", ":", "\n", "                ", "ann", "[", "'keypoints'", "]", "=", "keypoints", "[", "i", "]", "\n", "ann", "[", "'num_keypoints'", "]", "=", "sum", "(", "k", "!=", "0", "for", "k", "in", "keypoints", "[", "i", "]", "[", "2", ":", ":", "3", "]", ")", "\n", "", "dataset", "[", "'annotations'", "]", ".", "append", "(", "ann", ")", "\n", "ann_id", "+=", "1", "\n", "", "", "dataset", "[", "'categories'", "]", "=", "[", "{", "'id'", ":", "i", "}", "for", "i", "in", "sorted", "(", "categories", ")", "]", "\n", "coco_ds", ".", "dataset", "=", "dataset", "\n", "coco_ds", ".", "createIndex", "(", ")", "\n", "return", "coco_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.get_coco_api_from_dataset": [[197, 206], ["range", "isinstance", "coco_utils.convert_to_coco_api", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.convert_to_coco_api"], ["", "def", "get_coco_api_from_dataset", "(", "dataset", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", ":", "\n", "            ", "break", "\n", "", "if", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "Subset", ")", ":", "\n", "            ", "dataset", "=", "dataset", ".", "dataset", "\n", "", "", "if", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", ":", "\n", "        ", "return", "dataset", ".", "coco", "\n", "", "return", "convert_to_coco_api", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.get_coco": [[222, 248], ["utility.Compose", "os.path.join", "os.path.join", "coco_utils.CocoDetection", "coco_utils.ConvertCocoPolysToMask", "t.append", "coco_utils._coco_remove_images_without_annotations", "os.path.join", "os.path.join", "anno_file_template.format", "anno_file_template.format"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils._coco_remove_images_without_annotations"], ["", "", "def", "get_coco", "(", "root", ",", "image_set", ",", "transforms", ",", "mode", "=", "'instances'", ")", ":", "\n", "    ", "anno_file_template", "=", "\"{}_{}2017.json\"", "\n", "PATHS", "=", "{", "\n", "\"train\"", ":", "(", "\"train2017\"", ",", "os", ".", "path", ".", "join", "(", "\"annotations\"", ",", "anno_file_template", ".", "format", "(", "mode", ",", "\"train\"", ")", ")", ")", ",", "\n", "\"val\"", ":", "(", "\"val2017\"", ",", "os", ".", "path", ".", "join", "(", "\"annotations\"", ",", "anno_file_template", ".", "format", "(", "mode", ",", "\"val\"", ")", ")", ")", ",", "\n", "# \"train\": (\"val2017\", os.path.join(\"annotations\", anno_file_template.format(mode, \"val\")))", "\n", "}", "\n", "\n", "t", "=", "[", "ConvertCocoPolysToMask", "(", ")", "]", "\n", "\n", "if", "transforms", "is", "not", "None", ":", "\n", "        ", "t", ".", "append", "(", "transforms", ")", "\n", "", "transforms", "=", "T", ".", "Compose", "(", "t", ")", "\n", "\n", "img_folder", ",", "ann_file", "=", "PATHS", "[", "image_set", "]", "\n", "img_folder", "=", "os", ".", "path", ".", "join", "(", "root", ",", "img_folder", ")", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "ann_file", ")", "\n", "\n", "dataset", "=", "CocoDetection", "(", "img_folder", ",", "ann_file", ",", "transforms", "=", "transforms", ")", "\n", "\n", "if", "image_set", "==", "\"train\"", ":", "\n", "        ", "dataset", "=", "_coco_remove_images_without_annotations", "(", "dataset", ")", "\n", "\n", "# dataset = torch.utils.data.Subset(dataset, [i for i in range(500)])", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.get_coco_kp": [[250, 252], ["coco_utils.get_coco"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.coco_utils.get_coco"], ["", "def", "get_coco_kp", "(", "root", ",", "image_set", ",", "transforms", ")", ":", "\n", "    ", "return", "get_coco", "(", "root", ",", "image_set", ",", "transforms", ",", "mode", "=", "\"person_keypoints\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.__init__": [[20, 27], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.update": [[28, 32], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.synchronize_between_processes": [[33, 45], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.median": [[46, 50], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.avg": [[51, 55], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.global_avg": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.max": [[60, 63], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.value": [[64, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.__str__": [[68, 75], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.__init__": [[148, 151], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.update": [[152, 158], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.__getattr__": [[159, 166], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.__str__": [[167, 174], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.synchronize_between_processes": [[175, 178], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.add_meter": [[179, 181], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.log_every": [[182, 219], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "utils.MetricLogger.delimiter.join", "str", "print", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "print", "len", "time.time", "time.time", "datetime.timedelta", "utils.MetricLogger.format", "int", "len", "str", "len", "len", "len", "len", "int", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.update", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.all_gather": [[77, 118], ["utils.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.tensor", "torch.tensor", "int", "tensor_list.append", "torch.empty", "torch.empty", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "range", "size.item", "torch.empty", "torch.empty", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.get_world_size", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.all_gather", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.all_gather"], ["", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "empty", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.reduce_dict": [[120, 145], ["utils.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.get_world_size"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.collate_fn": [[221, 223], ["tuple", "zip"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "return", "tuple", "(", "zip", "(", "*", "batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.warmup_lr_scheduler": [[225, 234], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "float"], "function", ["None"], ["", "def", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", ":", "\n", "\n", "    ", "def", "f", "(", "x", ")", ":", "\n", "        ", "if", "x", ">=", "warmup_iters", ":", "\n", "            ", "return", "1", "\n", "", "alpha", "=", "float", "(", "x", ")", "/", "warmup_iters", "\n", "return", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "\n", "", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.mkdir": [[236, 242], ["os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.setup_for_distributed": [[244, 257], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "", "", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.is_dist_avail_and_initialized": [[259, 265], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.get_world_size": [[267, 271], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.get_world_size", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.get_rank": [[273, 277], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.get_rank", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.is_main_process": [[279, 281], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.save_on_master": [[283, 286], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.init_distributed_mode": [[288, 311], ["torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "utils.setup_for_distributed", "int", "int", "int", "int", "utils.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.data.apple_dataset.AppleDataset.__init__": [[11, 18], ["list", "list", "sorted", "sorted", "os.listdir", "os.listdir", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "# Load all image and mask files, sorting them to ensure they are aligned", "\n", "self", ".", "imgs", "=", "list", "(", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"images\"", ")", ")", ")", ")", "\n", "self", ".", "masks", "=", "list", "(", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"masks\"", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.data.apple_dataset.AppleDataset.__getitem__": [[19, 82], ["os.path.join", "os.path.join", "PIL.Image.open().convert", "PIL.Image.open", "numpy.array", "numpy.unique", "len", "range", "torch.as_tensor", "torch.ones", "torch.as_tensor", "torch.tensor", "torch.zeros", "numpy.where", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.as_tensor.append", "apple_dataset.AppleDataset.transforms", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.utility.utils.SmoothedValue.max"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# Load images and masks", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"images\"", ",", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "mask_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"masks\"", ",", "self", ".", "masks", "[", "idx", "]", ")", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "mask", "=", "Image", ".", "open", "(", "mask_path", ")", "# Each color of mask corresponds to a different instance with 0 being the background", "\n", "\n", "# Convert the PIL image to np array", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "obj_ids", "=", "np", ".", "unique", "(", "mask", ")", "\n", "\n", "# Remove background id", "\n", "obj_ids", "=", "obj_ids", "[", "1", ":", "]", "\n", "\n", "# Split the color-encoded masks into a set of binary masks", "\n", "masks", "=", "mask", "==", "obj_ids", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "# Get bbox coordinates for each mask", "\n", "num_objs", "=", "len", "(", "obj_ids", ")", "\n", "boxes", "=", "[", "]", "\n", "h", ",", "w", "=", "mask", ".", "shape", "\n", "for", "ii", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "pos", "=", "np", ".", "where", "(", "masks", "[", "ii", "]", ")", "\n", "xmin", "=", "np", ".", "min", "(", "pos", "[", "1", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "pos", "[", "1", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "pos", "[", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "pos", "[", "0", "]", ")", "\n", "\n", "if", "xmin", "==", "xmax", "or", "ymin", "==", "ymax", ":", "\n", "                ", "continue", "\n", "\n", "", "xmin", "=", "np", ".", "clip", "(", "xmin", ",", "a_min", "=", "0", ",", "a_max", "=", "w", ")", "\n", "xmax", "=", "np", ".", "clip", "(", "xmax", ",", "a_min", "=", "0", ",", "a_max", "=", "w", ")", "\n", "ymin", "=", "np", ".", "clip", "(", "ymin", ",", "a_min", "=", "0", ",", "a_max", "=", "h", ")", "\n", "ymax", "=", "np", ".", "clip", "(", "ymax", ",", "a_min", "=", "0", ",", "a_max", "=", "h", ")", "\n", "boxes", ".", "append", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "\n", "# Convert everything into a torch.Tensor", "\n", "", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# There is only one class (apples)", "\n", "labels", "=", "torch", ".", "ones", "(", "(", "num_objs", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "masks", "=", "torch", ".", "as_tensor", "(", "masks", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "image_id", "=", "torch", ".", "tensor", "(", "[", "idx", "]", ")", "\n", "area", "=", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "*", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "\n", "\n", "# All instances are not crowd", "\n", "iscrowd", "=", "torch", ".", "zeros", "(", "(", "num_objs", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "target", "=", "{", "}", "\n", "target", "[", "\"boxes\"", "]", "=", "boxes", "\n", "target", "[", "\"labels\"", "]", "=", "labels", "\n", "target", "[", "\"masks\"", "]", "=", "masks", "\n", "target", "[", "\"image_id\"", "]", "=", "image_id", "\n", "target", "[", "\"area\"", "]", "=", "area", "\n", "target", "[", "\"iscrowd\"", "]", "=", "iscrowd", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.data.apple_dataset.AppleDataset.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicolaihaeni_MinneApple.data.apple_dataset.AppleDataset.get_img_name": [[86, 88], ["None"], "methods", ["None"], ["", "def", "get_img_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "imgs", "[", "idx", "]", "\n", "", "", ""]]}