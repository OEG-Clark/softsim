{"home.repos.pwc.inspect_result.xharlie_btcdet.None.setup.get_git_commit_number": [[8, 15], ["subprocess.run", "os.path.exists", "subprocess.run.stdout.decode"], "function", ["None"], ["def", "get_git_commit_number", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'.git'", ")", ":", "\n", "        ", "return", "'0000000'", "\n", "\n", "", "cmd_out", "=", "subprocess", ".", "run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "git_commit_number", "=", "cmd_out", ".", "stdout", ".", "decode", "(", "'utf-8'", ")", "[", ":", "7", "]", "\n", "return", "git_commit_number", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.None.setup.make_cuda_ext": [[17, 23], ["torch.utils.cpp_extension.CUDAExtension", "os.path.join", "module.split"], "function", ["None"], ["", "def", "make_cuda_ext", "(", "name", ",", "module", ",", "sources", ")", ":", "\n", "    ", "cuda_ext", "=", "CUDAExtension", "(", "\n", "name", "=", "'%s.%s'", "%", "(", "module", ",", "name", ")", ",", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "*", "module", ".", "split", "(", "'.'", ")", ",", "src", ")", "for", "src", "in", "sources", "]", "\n", ")", "\n", "return", "cuda_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.None.setup.write_version_to_file": [[25, 28], ["open", "print"], "function", ["None"], ["", "def", "write_version_to_file", "(", "version", ",", "target_file", ")", ":", "\n", "    ", "with", "open", "(", "target_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "print", "(", "'__version__ = \"%s\"'", "%", "version", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.log_config_to_file": [[7, 14], ["cfg.items", "isinstance", "logger.info", "logger.info", "config.log_config_to_file"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.log_config_to_file"], ["def", "log_config_to_file", "(", "cfg", ",", "pre", "=", "'cfg'", ",", "logger", "=", "None", ")", ":", "\n", "    ", "for", "key", ",", "val", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "cfg", "[", "key", "]", ",", "EasyDict", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'\\n%s.%s = edict()'", "%", "(", "pre", ",", "key", ")", ")", "\n", "log_config_to_file", "(", "cfg", "[", "key", "]", ",", "pre", "=", "pre", "+", "'.'", "+", "key", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "", "logger", ".", "info", "(", "'%s.%s: %s'", "%", "(", "pre", ",", "key", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.cfg_from_list": [[16, 49], ["zip", "k.split", "len", "literal_eval", "isinstance", "literal_eval.split", "type", "type", "src.split", "type", "type.", "isinstance", "literal_eval.split", "enumerate", "type", "type", "type", "type", "type", "type", "type"], "function", ["None"], ["", "", "def", "cfg_from_list", "(", "cfg_list", ",", "config", ")", ":", "\n", "    ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "from", "ast", "import", "literal_eval", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "key_list", "=", "k", ".", "split", "(", "'.'", ")", "\n", "d", "=", "config", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "            ", "assert", "subkey", "in", "d", ",", "'NotFoundKey: %s'", "%", "subkey", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "subkey", "in", "d", ",", "'NotFoundKey: %s'", "%", "subkey", "\n", "try", ":", "\n", "            ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "            ", "value", "=", "v", "\n", "\n", "", "if", "type", "(", "value", ")", "!=", "type", "(", "d", "[", "subkey", "]", ")", "and", "isinstance", "(", "d", "[", "subkey", "]", ",", "EasyDict", ")", ":", "\n", "            ", "key_val_list", "=", "value", ".", "split", "(", "','", ")", "\n", "for", "src", "in", "key_val_list", ":", "\n", "                ", "cur_key", ",", "cur_val", "=", "src", ".", "split", "(", "':'", ")", "\n", "val_type", "=", "type", "(", "d", "[", "subkey", "]", "[", "cur_key", "]", ")", "\n", "cur_val", "=", "val_type", "(", "cur_val", ")", "\n", "d", "[", "subkey", "]", "[", "cur_key", "]", "=", "cur_val", "\n", "", "", "elif", "type", "(", "value", ")", "!=", "type", "(", "d", "[", "subkey", "]", ")", "and", "isinstance", "(", "d", "[", "subkey", "]", ",", "list", ")", ":", "\n", "            ", "val_list", "=", "value", ".", "split", "(", "','", ")", "\n", "for", "k", ",", "x", "in", "enumerate", "(", "val_list", ")", ":", "\n", "                ", "val_list", "[", "k", "]", "=", "type", "(", "d", "[", "subkey", "]", "[", "0", "]", ")", "(", "x", ")", "\n", "", "d", "[", "subkey", "]", "=", "val_list", "\n", "", "else", ":", "\n", "            ", "assert", "type", "(", "value", ")", "==", "type", "(", "d", "[", "subkey", "]", ")", ",", "'type {} does not match original type {}'", ".", "format", "(", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.merge_new_config": [[51, 69], ["new_config.items", "config.update", "config.merge_new_config", "open", "easydict.EasyDict", "isinstance", "easydict.EasyDict", "yaml.load", "yaml.load"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.merge_new_config"], ["", "", "", "def", "merge_new_config", "(", "config", ",", "new_config", ")", ":", "\n", "    ", "if", "'_BASE_CONFIG_'", "in", "new_config", ":", "\n", "        ", "with", "open", "(", "new_config", "[", "'_BASE_CONFIG_'", "]", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "yaml_config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "except", ":", "\n", "                ", "yaml_config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "", "config", ".", "update", "(", "EasyDict", "(", "yaml_config", ")", ")", "\n", "\n", "", "for", "key", ",", "val", "in", "new_config", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "val", ",", "dict", ")", ":", "\n", "            ", "config", "[", "key", "]", "=", "val", "\n", "continue", "\n", "", "if", "key", "not", "in", "config", ":", "\n", "            ", "config", "[", "key", "]", "=", "EasyDict", "(", ")", "\n", "", "merge_new_config", "(", "config", "[", "key", "]", ",", "val", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.cfg_from_yaml_file": [[71, 82], ["open", "print", "config.merge_new_config", "yaml.load", "yaml.load"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.merge_new_config"], ["", "def", "cfg_from_yaml_file", "(", "cfg_file", ",", "config", ")", ":", "\n", "    ", "with", "open", "(", "cfg_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "try", ":", "\n", "            ", "new_config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "except", ":", "\n", "            ", "new_config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "print", "(", "cfg_file", ")", "\n", "\n", "merge_new_config", "(", "config", "=", "config", ",", "new_config", "=", "new_config", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.AbsResidualCoder.__init__": [[5, 11], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "7", ",", "encode_angle_by_sincos", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "self", ".", "encode_angle_by_sincos", "=", "encode_angle_by_sincos", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "self", ".", "code_size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.AbsResidualCoder.encode_torch": [[12, 42], ["torch.clamp_min", "torch.clamp_min", "torch.split", "torch.split", "torch.cat", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "zip"], "methods", ["None"], ["", "", "def", "encode_torch", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n            anchors: (N, 7 + C) [x, y, z, dx, dy, dz, heading or *[cos, sin], ...]\n\n        Returns:\n\n        \"\"\"", "\n", "anchors", "[", ":", ",", "3", ":", "6", "]", "=", "torch", ".", "clamp_min", "(", "anchors", "[", ":", ",", "3", ":", "6", "]", ",", "min", "=", "1e-5", ")", "\n", "boxes", "[", ":", ",", "3", ":", "6", "]", "=", "torch", ".", "clamp_min", "(", "boxes", "[", ":", ",", "3", ":", "6", "]", ",", "min", "=", "1e-5", ")", "\n", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "=", "torch", ".", "split", "(", "boxes", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "xt", "=", "xg", "-", "xa", "\n", "yt", "=", "yg", "-", "ya", "\n", "zt", "=", "zg", "-", "za", "\n", "dxt", "=", "dxg", "-", "dxa", "\n", "dyt", "=", "dyg", "-", "dya", "\n", "dzt", "=", "dzg", "-", "dza", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "rt_cos", "=", "torch", ".", "cos", "(", "rg", ")", "-", "torch", ".", "cos", "(", "ra", ")", "\n", "rt_sin", "=", "torch", ".", "sin", "(", "rg", ")", "-", "torch", ".", "sin", "(", "ra", ")", "\n", "rts", "=", "[", "rt_cos", ",", "rt_sin", "]", "\n", "", "else", ":", "\n", "            ", "rts", "=", "[", "rg", "-", "ra", "]", "\n", "\n", "", "cts", "=", "[", "g", "-", "a", "for", "g", ",", "a", "in", "zip", "(", "cgs", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "*", "rts", ",", "*", "cts", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.AbsResidualCoder.decode_torch": [[43, 75], ["torch.split", "torch.cat", "torch.split", "torch.split", "torch.atan2", "torch.cos", "torch.sin", "zip"], "methods", ["None"], ["", "def", "decode_torch", "(", "self", ",", "box_encodings", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading or *[cos, sin], ...]\n            anchors: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "not", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "rt", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "cost", ",", "sint", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "xg", "=", "xt", "+", "xa", "\n", "yg", "=", "yt", "+", "ya", "\n", "zg", "=", "zt", "+", "za", "\n", "\n", "dxg", "=", "dxt", "+", "dxa", "\n", "dyg", "=", "dyt", "+", "dya", "\n", "dzg", "=", "dzt", "+", "dza", "\n", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "rg_cos", "=", "cost", "+", "torch", ".", "cos", "(", "ra", ")", "\n", "rg_sin", "=", "sint", "+", "torch", ".", "sin", "(", "ra", ")", "\n", "rg", "=", "torch", ".", "atan2", "(", "rg_sin", ",", "rg_cos", ")", "\n", "", "else", ":", "\n", "            ", "rg", "=", "rt", "+", "ra", "\n", "\n", "", "cgs", "=", "[", "t", "+", "a", "for", "t", ",", "a", "in", "zip", "(", "cts", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.ResidualCoder.__init__": [[79, 85], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "7", ",", "encode_angle_by_sincos", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "self", ".", "encode_angle_by_sincos", "=", "encode_angle_by_sincos", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "self", ".", "code_size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.ResidualCoder.encode_torch": [[86, 117], ["torch.clamp_min", "torch.clamp_min", "torch.split", "torch.split", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.cat", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "zip"], "methods", ["None"], ["", "", "def", "encode_torch", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n            anchors: (N, 7 + C) [x, y, z, dx, dy, dz, heading or *[cos, sin], ...]\n\n        Returns:\n\n        \"\"\"", "\n", "anchors", "[", ":", ",", "3", ":", "6", "]", "=", "torch", ".", "clamp_min", "(", "anchors", "[", ":", ",", "3", ":", "6", "]", ",", "min", "=", "1e-5", ")", "\n", "boxes", "[", ":", ",", "3", ":", "6", "]", "=", "torch", ".", "clamp_min", "(", "boxes", "[", ":", ",", "3", ":", "6", "]", ",", "min", "=", "1e-5", ")", "\n", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "=", "torch", ".", "split", "(", "boxes", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "zt", "=", "(", "zg", "-", "za", ")", "/", "dza", "\n", "dxt", "=", "torch", ".", "log", "(", "dxg", "/", "dxa", ")", "\n", "dyt", "=", "torch", ".", "log", "(", "dyg", "/", "dya", ")", "\n", "dzt", "=", "torch", ".", "log", "(", "dzg", "/", "dza", ")", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "rt_cos", "=", "torch", ".", "cos", "(", "rg", ")", "-", "torch", ".", "cos", "(", "ra", ")", "\n", "rt_sin", "=", "torch", ".", "sin", "(", "rg", ")", "-", "torch", ".", "sin", "(", "ra", ")", "\n", "rts", "=", "[", "rt_cos", ",", "rt_sin", "]", "\n", "", "else", ":", "\n", "            ", "rts", "=", "[", "rg", "-", "ra", "]", "\n", "\n", "", "cts", "=", "[", "g", "-", "a", "for", "g", ",", "a", "in", "zip", "(", "cgs", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "*", "rts", ",", "*", "cts", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.ResidualCoder.decode_torch": [[118, 151], ["torch.split", "torch.sqrt", "torch.cat", "torch.split", "torch.split", "torch.exp", "torch.exp", "torch.exp", "torch.atan2", "torch.cos", "torch.sin", "zip"], "methods", ["None"], ["", "def", "decode_torch", "(", "self", ",", "box_encodings", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading or *[cos, sin], ...]\n            anchors: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "not", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "rt", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "cost", ",", "sint", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "dza", "+", "za", "\n", "\n", "dxg", "=", "torch", ".", "exp", "(", "dxt", ")", "*", "dxa", "\n", "dyg", "=", "torch", ".", "exp", "(", "dyt", ")", "*", "dya", "\n", "dzg", "=", "torch", ".", "exp", "(", "dzt", ")", "*", "dza", "\n", "\n", "if", "self", ".", "encode_angle_by_sincos", ":", "\n", "            ", "rg_cos", "=", "cost", "+", "torch", ".", "cos", "(", "ra", ")", "\n", "rg_sin", "=", "sint", "+", "torch", ".", "sin", "(", "ra", ")", "\n", "rg", "=", "torch", ".", "atan2", "(", "rg_sin", ",", "rg_cos", ")", "\n", "", "else", ":", "\n", "            ", "rg", "=", "rt", "+", "ra", "\n", "\n", "", "cgs", "=", "[", "t", "+", "a", "for", "t", ",", "a", "in", "zip", "(", "cts", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PreviousResidualDecoder.__init__": [[154, 157], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "7", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PreviousResidualDecoder.decode_torch": [[158, 183], ["torch.split", "torch.split", "torch.sqrt", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "decode_torch", "(", "box_encodings", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings:  (B, N, 7 + ?) x, y, z, w, l, h, r, custom values\n            anchors: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "dza", "+", "za", "\n", "\n", "dxg", "=", "torch", ".", "exp", "(", "lt", ")", "*", "dxa", "\n", "dyg", "=", "torch", ".", "exp", "(", "wt", ")", "*", "dya", "\n", "dzg", "=", "torch", ".", "exp", "(", "ht", ")", "*", "dza", "\n", "rg", "=", "rt", "+", "ra", "\n", "\n", "cgs", "=", "[", "t", "+", "a", "for", "t", ",", "a", "in", "zip", "(", "cts", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PreviousResidualRoIDecoder.__init__": [[186, 189], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "7", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PreviousResidualRoIDecoder.decode_torch": [[190, 215], ["torch.split", "torch.split", "torch.sqrt", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "decode_torch", "(", "box_encodings", ",", "anchors", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings:  (B, N, 7 + ?) x, y, z, w, l, h, r, custom values\n            anchors: (B, N, 7 + C) or (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "dxa", ",", "dya", ",", "dza", ",", "ra", ",", "*", "cas", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "dza", "+", "za", "\n", "\n", "dxg", "=", "torch", ".", "exp", "(", "lt", ")", "*", "dxa", "\n", "dyg", "=", "torch", ".", "exp", "(", "wt", ")", "*", "dya", "\n", "dzg", "=", "torch", ".", "exp", "(", "ht", ")", "*", "dza", "\n", "rg", "=", "ra", "-", "rt", "\n", "\n", "cgs", "=", "[", "t", "+", "a", "for", "t", ",", "a", "in", "zip", "(", "cts", ",", "cas", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.__init__": [[218, 225], ["object.__init__", "torch.from_numpy().cuda().float", "box_coder_utils.PointResidualCoder.mean_size.min", "torch.from_numpy().cuda", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_size", "=", "8", ",", "use_mean_size", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_size", "=", "code_size", "\n", "self", ".", "use_mean_size", "=", "use_mean_size", "\n", "if", "self", ".", "use_mean_size", ":", "\n", "            ", "self", ".", "mean_size", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "kwargs", "[", "'mean_size'", "]", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "assert", "self", ".", "mean_size", ".", "min", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.encode_torch": [[226, 260], ["torch.clamp_min", "torch.split", "torch.split", "torch.cat", "torch.split", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "gt_classes.max", "torch.cos", "torch.sin"], "methods", ["None"], ["", "", "def", "encode_torch", "(", "self", ",", "gt_boxes", ",", "points", ",", "gt_classes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n            points: (N, 3) [x, y, z]\n            gt_classes: (N) [1, num_classes]\n        Returns:\n            box_coding: (N, 8 + C)\n        \"\"\"", "\n", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", "=", "torch", ".", "clamp_min", "(", "gt_boxes", "[", ":", ",", "3", ":", "6", "]", ",", "min", "=", "1e-5", ")", "\n", "\n", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "=", "torch", ".", "split", "(", "gt_boxes", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xa", ",", "ya", ",", "za", "=", "torch", ".", "split", "(", "points", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "use_mean_size", ":", "\n", "            ", "assert", "gt_classes", ".", "max", "(", ")", "<=", "self", ".", "mean_size", ".", "shape", "[", "0", "]", "\n", "point_anchor_size", "=", "self", ".", "mean_size", "[", "gt_classes", "-", "1", "]", "\n", "dxa", ",", "dya", ",", "dza", "=", "torch", ".", "split", "(", "point_anchor_size", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "zt", "=", "(", "zg", "-", "za", ")", "/", "dza", "\n", "dxt", "=", "torch", ".", "log", "(", "dxg", "/", "dxa", ")", "\n", "dyt", "=", "torch", ".", "log", "(", "dyg", "/", "dya", ")", "\n", "dzt", "=", "torch", ".", "log", "(", "dzg", "/", "dza", ")", "\n", "", "else", ":", "\n", "            ", "xt", "=", "(", "xg", "-", "xa", ")", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "\n", "zt", "=", "(", "zg", "-", "za", ")", "\n", "dxt", "=", "torch", ".", "log", "(", "dxg", ")", "\n", "dyt", "=", "torch", ".", "log", "(", "dyg", ")", "\n", "dzt", "=", "torch", ".", "log", "(", "dzg", ")", "\n", "\n", "", "cts", "=", "[", "g", "for", "g", "in", "cgs", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "torch", ".", "cos", "(", "rg", ")", ",", "torch", ".", "sin", "(", "rg", ")", ",", "*", "cts", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.decode_torch": [[261, 295], ["torch.split", "torch.split", "torch.atan2", "torch.cat", "torch.split", "torch.sqrt", "torch.split", "pred_classes.max", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "decode_torch", "(", "self", ",", "box_encodings", ",", "points", ",", "pred_classes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_encodings: (N, 8 + C) [x, y, z, dx, dy, dz, cos, sin, ...]\n            points: [x, y, z]\n            pred_classes: (N) [1, num_classes]\n        Returns:\n\n        \"\"\"", "\n", "xt", ",", "yt", ",", "zt", ",", "dxt", ",", "dyt", ",", "dzt", ",", "cost", ",", "sint", ",", "*", "cts", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xa", ",", "ya", ",", "za", "=", "torch", ".", "split", "(", "points", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_mean_size", ":", "\n", "            ", "assert", "pred_classes", ".", "max", "(", ")", "<=", "self", ".", "mean_size", ".", "shape", "[", "0", "]", "\n", "point_anchor_size", "=", "self", ".", "mean_size", "[", "pred_classes", "-", "1", "]", "\n", "dxa", ",", "dya", ",", "dza", "=", "torch", ".", "split", "(", "point_anchor_size", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "dxa", "**", "2", "+", "dya", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "dza", "+", "za", "\n", "\n", "dxg", "=", "torch", ".", "exp", "(", "dxt", ")", "*", "dxa", "\n", "dyg", "=", "torch", ".", "exp", "(", "dyt", ")", "*", "dya", "\n", "dzg", "=", "torch", ".", "exp", "(", "dzt", ")", "*", "dza", "\n", "", "else", ":", "\n", "            ", "xg", "=", "xt", "+", "xa", "\n", "yg", "=", "yt", "+", "ya", "\n", "zg", "=", "zt", "+", "za", "\n", "dxg", ",", "dyg", ",", "dzg", "=", "torch", ".", "split", "(", "torch", ".", "exp", "(", "box_encodings", "[", "...", ",", "3", ":", "6", "]", ")", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "rg", "=", "torch", ".", "atan2", "(", "sint", ",", "cost", ")", "\n", "\n", "cgs", "=", "[", "t", "for", "t", "in", "cts", "]", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "dxg", ",", "dyg", ",", "dzg", ",", "rg", ",", "*", "cgs", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.Object3d.__init__": [[19, 37], ["line.strip().split", "object3d_kitti.cls_type_to_id", "float", "float", "float", "numpy.array", "float", "float", "float", "numpy.array", "numpy.linalg.norm", "float", "object3d_kitti.Object3d.get_kitti_obj_level", "float", "line.strip", "float", "float", "float", "float", "float", "float", "float", "line.strip().split.__len__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.cls_type_to_id", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.Object3d.get_kitti_obj_level", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "line", ")", ":", "\n", "        ", "label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "src", "=", "line", "\n", "self", ".", "cls_type", "=", "label", "[", "0", "]", "\n", "self", ".", "cls_id", "=", "cls_type_to_id", "(", "self", ".", "cls_type", ")", "\n", "self", ".", "truncation", "=", "float", "(", "label", "[", "1", "]", ")", "\n", "self", ".", "occlusion", "=", "float", "(", "label", "[", "2", "]", ")", "# 0:fully visible 1:partly occluded 2:largely occluded 3:unknown", "\n", "self", ".", "alpha", "=", "float", "(", "label", "[", "3", "]", ")", "\n", "self", ".", "box2d", "=", "np", ".", "array", "(", "(", "float", "(", "label", "[", "4", "]", ")", ",", "float", "(", "label", "[", "5", "]", ")", ",", "float", "(", "label", "[", "6", "]", ")", ",", "float", "(", "label", "[", "7", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "h", "=", "float", "(", "label", "[", "8", "]", ")", "\n", "self", ".", "w", "=", "float", "(", "label", "[", "9", "]", ")", "\n", "self", ".", "l", "=", "float", "(", "label", "[", "10", "]", ")", "\n", "self", ".", "loc", "=", "np", ".", "array", "(", "(", "float", "(", "label", "[", "11", "]", ")", ",", "float", "(", "label", "[", "12", "]", ")", ",", "float", "(", "label", "[", "13", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "dis_to_cam", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "loc", ")", "\n", "self", ".", "ry", "=", "float", "(", "label", "[", "14", "]", ")", "\n", "self", ".", "score", "=", "float", "(", "label", "[", "15", "]", ")", "if", "label", ".", "__len__", "(", ")", "==", "16", "else", "-", "1.0", "\n", "self", ".", "level_str", "=", "None", "\n", "self", ".", "level", "=", "self", ".", "get_kitti_obj_level", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.Object3d.get_kitti_obj_level": [[38, 53], ["float", "float"], "methods", ["None"], ["", "def", "get_kitti_obj_level", "(", "self", ")", ":", "\n", "        ", "height", "=", "float", "(", "self", ".", "box2d", "[", "3", "]", ")", "-", "float", "(", "self", ".", "box2d", "[", "1", "]", ")", "+", "1", "\n", "\n", "if", "height", ">=", "40", "and", "self", ".", "truncation", "<=", "0.15", "and", "self", ".", "occlusion", "<=", "0", ":", "\n", "            ", "self", ".", "level_str", "=", "'Easy'", "\n", "return", "0", "# Easy", "\n", "", "elif", "height", ">=", "25", "and", "self", ".", "truncation", "<=", "0.3", "and", "self", ".", "occlusion", "<=", "1", ":", "\n", "            ", "self", ".", "level_str", "=", "'Moderate'", "\n", "return", "1", "# Moderate", "\n", "", "elif", "height", ">=", "25", "and", "self", ".", "truncation", "<=", "0.5", "and", "self", ".", "occlusion", "<=", "2", ":", "\n", "            ", "self", ".", "level_str", "=", "'Hard'", "\n", "return", "2", "# Hard", "\n", "", "else", ":", "\n", "            ", "self", ".", "level_str", "=", "'UnKnown'", "\n", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.Object3d.generate_corners3d": [[54, 71], ["numpy.array", "numpy.vstack", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "", "def", "generate_corners3d", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        generate corners3d representation for this object\n        :return corners_3d: (8, 3) corners of box3d in camera coord\n        \"\"\"", "\n", "l", ",", "h", ",", "w", "=", "self", ".", "l", ",", "self", ".", "h", ",", "self", ".", "w", "\n", "x_corners", "=", "[", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", "]", "\n", "y_corners", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "-", "h", ",", "-", "h", ",", "-", "h", ",", "-", "h", "]", "\n", "z_corners", "=", "[", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", "]", "\n", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "self", ".", "ry", ")", ",", "0", ",", "np", ".", "sin", "(", "self", ".", "ry", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "self", ".", "ry", ")", ",", "0", ",", "np", ".", "cos", "(", "self", ".", "ry", ")", "]", "]", ")", "\n", "corners3d", "=", "np", ".", "vstack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", "# (3, 8)", "\n", "corners3d", "=", "np", ".", "dot", "(", "R", ",", "corners3d", ")", ".", "T", "\n", "corners3d", "=", "corners3d", "+", "self", ".", "loc", "\n", "return", "corners3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.Object3d.to_str": [[72, 77], ["None"], "methods", ["None"], ["", "def", "to_str", "(", "self", ")", ":", "\n", "        ", "print_str", "=", "'%s %.3f %.3f %.3f box2d: %s hwl: [%.3f %.3f %.3f] pos: %s ry: %.3f'", "%", "(", "self", ".", "cls_type", ",", "self", ".", "truncation", ",", "self", ".", "occlusion", ",", "self", ".", "alpha", ",", "self", ".", "box2d", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ",", "\n", "self", ".", "loc", ",", "self", ".", "ry", ")", "\n", "return", "print_str", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.Object3d.to_kitti_format": [[78, 84], ["int"], "methods", ["None"], ["", "def", "to_kitti_format", "(", "self", ")", ":", "\n", "        ", "kitti_str", "=", "'%s %.2f %d %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f %.2f'", "%", "(", "self", ".", "cls_type", ",", "self", ".", "truncation", ",", "int", "(", "self", ".", "occlusion", ")", ",", "self", ".", "alpha", ",", "self", ".", "box2d", "[", "0", "]", ",", "self", ".", "box2d", "[", "1", "]", ",", "\n", "self", ".", "box2d", "[", "2", "]", ",", "self", ".", "box2d", "[", "3", "]", ",", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ",", "self", ".", "loc", "[", "0", "]", ",", "self", ".", "loc", "[", "1", "]", ",", "self", ".", "loc", "[", "2", "]", ",", "\n", "self", ".", "ry", ")", "\n", "return", "kitti_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.get_objects_from_label": [[4, 9], ["open", "f.readlines", "object3d_kitti.Object3d"], "function", ["None"], ["def", "get_objects_from_label", "(", "label_file", ")", ":", "\n", "    ", "with", "open", "(", "label_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "objects", "=", "[", "Object3d", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.cls_type_to_id": [[11, 16], ["type_to_id.keys"], "function", ["None"], ["", "def", "cls_type_to_id", "(", "cls_type", ")", ":", "\n", "    ", "type_to_id", "=", "{", "'Car'", ":", "1", ",", "'Pedestrian'", ":", "2", ",", "'Cyclist'", ":", "3", ",", "'Van'", ":", "4", "}", "\n", "if", "cls_type", "not", "in", "type_to_id", ".", "keys", "(", ")", ":", "\n", "        ", "return", "-", "1", "\n", "", "return", "type_to_id", "[", "cls_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.check_numpy_to_torch": [[14, 18], ["isinstance", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "check_numpy_to_torch", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", ",", "True", "\n", "", "return", "x", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.limit_period": [[20, 24], ["common_utils.check_numpy_to_torch", "ans.numpy", "torch.floor", "torch.floor", "torch.floor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch"], ["", "def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ":", "\n", "    ", "val", ",", "is_numpy", "=", "check_numpy_to_torch", "(", "val", ")", "\n", "ans", "=", "val", "-", "torch", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "return", "ans", ".", "numpy", "(", ")", "if", "is_numpy", "else", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.drop_info_with_name": [[26, 32], ["info.keys", "enumerate"], "function", ["None"], ["", "def", "drop_info_with_name", "(", "info", ",", "name", ")", ":", "\n", "    ", "ret_info", "=", "{", "}", "\n", "keep_indices", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "info", "[", "'name'", "]", ")", "if", "x", "!=", "name", "]", "\n", "for", "key", "in", "info", ".", "keys", "(", ")", ":", "\n", "        ", "ret_info", "[", "key", "]", "=", "info", "[", "key", "]", "[", "keep_indices", "]", "\n", "", "return", "ret_info", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.rotate_points_along_z": [[34, 57], ["common_utils.check_numpy_to_torch", "common_utils.check_numpy_to_torch", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "angle.new_zeros", "angle.new_ones", "torch.stack().view().float", "torch.stack().view().float", "torch.stack().view().float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat.numpy", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch"], ["", "def", "rotate_points_along_z", "(", "points", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (B, N, 3 + C)\n        angle: (B), angle along z-axis, angle increases x ==> y\n    Returns:\n\n    \"\"\"", "\n", "points", ",", "is_numpy", "=", "check_numpy_to_torch", "(", "points", ")", "\n", "angle", ",", "_", "=", "check_numpy_to_torch", "(", "angle", ")", "\n", "\n", "cosa", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sina", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "zeros", "=", "angle", ".", "new_zeros", "(", "angle", ".", "shape", "[", "0", "]", ")", "\n", "ones", "=", "angle", ".", "new_ones", "(", "angle", ".", "shape", "[", "0", "]", ")", "\n", "rot_matrix", "=", "torch", ".", "stack", "(", "(", "\n", "cosa", ",", "sina", ",", "zeros", ",", "\n", "-", "sina", ",", "cosa", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "\n", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", ".", "float", "(", ")", "\n", "points_rot", "=", "torch", ".", "matmul", "(", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "rot_matrix", ")", "\n", "points_rot", "=", "torch", ".", "cat", "(", "(", "points_rot", ",", "points", "[", ":", ",", ":", ",", "3", ":", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "points_rot", ".", "numpy", "(", ")", "if", "is_numpy", "else", "points_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.mask_points_by_range": [[59, 63], ["None"], "function", ["None"], ["", "def", "mask_points_by_range", "(", "points", ",", "limit_range", ")", ":", "\n", "    ", "mask", "=", "(", "points", "[", ":", ",", "0", "]", ">=", "limit_range", "[", "0", "]", ")", "&", "(", "points", "[", ":", ",", "0", "]", "<=", "limit_range", "[", "3", "]", ")", "&", "(", "points", "[", ":", ",", "1", "]", ">=", "limit_range", "[", "1", "]", ")", "&", "(", "points", "[", ":", ",", "1", "]", "<=", "limit_range", "[", "4", "]", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.get_voxel_centers": [[65, 82], ["voxel_coords[].float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "get_voxel_centers", "(", "voxel_coords", ",", "downsample_times", ",", "voxel_size", ",", "point_cloud_range", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        voxel_coords: (N, 3)\n        downsample_times:\n        voxel_size:\n        point_cloud_range:\n\n    Returns:\n\n    \"\"\"", "\n", "assert", "voxel_coords", ".", "shape", "[", "1", "]", "==", "3", "\n", "voxel_centers", "=", "voxel_coords", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ".", "float", "(", ")", "# (xyz)", "\n", "voxel_size", "=", "torch", ".", "tensor", "(", "voxel_size", ",", "device", "=", "voxel_centers", ".", "device", ")", ".", "float", "(", ")", "*", "downsample_times", "\n", "pc_range", "=", "torch", ".", "tensor", "(", "point_cloud_range", "[", "0", ":", "3", "]", ",", "device", "=", "voxel_centers", ".", "device", ")", ".", "float", "(", ")", "\n", "voxel_centers", "=", "(", "voxel_centers", "+", "0.5", ")", "*", "voxel_size", "+", "pc_range", "\n", "return", "voxel_centers", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.create_logger": [[84, 98], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "create_logger", "(", "log_file", "=", "None", ",", "rank", "=", "0", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "log_level", "if", "rank", "==", "0", "else", "'ERROR'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s  %(levelname)5s  %(message)s'", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "log_level", "if", "rank", "==", "0", "else", "'ERROR'", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "\n", "if", "log_file", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "filename", "=", "log_file", ")", "\n", "file_handler", ".", "setLevel", "(", "log_level", "if", "rank", "==", "0", "else", "'ERROR'", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.set_random_seed": [[100, 106], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.keep_arrays_by_name": [[108, 112], ["numpy.array", "enumerate"], "function", ["None"], ["", "def", "keep_arrays_by_name", "(", "gt_names", ",", "used_classes", ")", ":", "\n", "    ", "inds", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "gt_names", ")", "if", "x", "in", "used_classes", "]", "\n", "inds", "=", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.init_dist_slurm": [[114, 139], ["int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "str", "torch.init_process_group", "torch.get_world_size", "torch.get_rank"], "function", ["None"], ["", "def", "init_dist_slurm", "(", "tcp_port", ",", "local_rank", ",", "backend", "=", "'nccl'", ")", ":", "\n", "    ", "\"\"\"\n    modified from https://github.com/open-mmlab/mmdetection\n    Args:\n        tcp_port:\n        backend:\n\n    Returns:\n\n    \"\"\"", "\n", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "tcp_port", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ")", "\n", "\n", "total_gpus", "=", "dist", ".", "get_world_size", "(", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "return", "total_gpus", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.init_dist_pytorch": [[141, 155], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.get_rank", "torch.get_start_method", "torch.set_start_method"], "function", ["None"], ["", "def", "init_dist_pytorch", "(", "tcp_port", ",", "local_rank", ",", "backend", "=", "'nccl'", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "\n", "", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "backend", ",", "\n", "init_method", "=", "'tcp://127.0.0.1:%d'", "%", "tcp_port", ",", "\n", "rank", "=", "local_rank", ",", "\n", "world_size", "=", "num_gpus", "\n", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "return", "num_gpus", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.get_dist_info": [[157, 172], ["torch.is_available", "torch.get_rank", "torch.get_world_size", "torch.is_initialized"], "function", ["None"], ["", "def", "get_dist_info", "(", ")", ":", "\n", "    ", "if", "torch", ".", "__version__", "<", "'1.0'", ":", "\n", "        ", "initialized", "=", "dist", ".", "_initialized", "\n", "", "else", ":", "\n", "        ", "if", "dist", ".", "is_available", "(", ")", ":", "\n", "            ", "initialized", "=", "dist", ".", "is_initialized", "(", ")", "\n", "", "else", ":", "\n", "            ", "initialized", "=", "False", "\n", "", "", "if", "initialized", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "world_size", "=", "1", "\n", "", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.merge_results_dist": [[174, 196], ["common_utils.get_dist_info", "os.makedirs", "torch.barrier", "pickle.dump", "torch.barrier", "range", "zip", "shutil.rmtree", "open", "os.path.join", "part_list.append", "ordered_results.extend", "os.path.join", "pickle.load", "list", "open"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.get_dist_info"], ["", "def", "merge_results_dist", "(", "result_part", ",", "size", ",", "tmpdir", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "os", ".", "makedirs", "(", "tmpdir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "dist", ".", "barrier", "(", ")", "\n", "pickle", ".", "dump", "(", "result_part", ",", "open", "(", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'result_part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ",", "'wb'", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "        ", "part_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'result_part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "pickle", ".", "load", "(", "open", "(", "part_file", ",", "'rb'", ")", ")", ")", "\n", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "        ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.trilinear_interpolate_torch": [[198, 245], ["torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.t", "torch.t", "torch.t", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.t", "torch.t", "torch.t", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "trilinear_interpolate_torch", "(", "im", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        im: (Z, H, W, C) [z, y, x]\n        x: (N)\n        y: (N)\n        z: (N)\n\n    Returns:\n\n    \"\"\"", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", ".", "long", "(", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", ".", "long", "(", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "z0", "=", "torch", ".", "floor", "(", "z", ")", ".", "long", "(", ")", "\n", "z1", "=", "z0", "+", "1", "\n", "\n", "x0", "=", "torch", ".", "clamp", "(", "x0", ",", "0", ",", "im", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1", ",", "0", ",", "im", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "y0", "=", "torch", ".", "clamp", "(", "y0", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "y1", "=", "torch", ".", "clamp", "(", "y1", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "z0", "=", "torch", ".", "clamp", "(", "z0", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "z1", "=", "torch", ".", "clamp", "(", "z1", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "I000", "=", "im", "[", "z0", ",", "y0", ",", "x0", "]", "\n", "I010", "=", "im", "[", "z0", ",", "y1", ",", "x0", "]", "\n", "I001", "=", "im", "[", "z0", ",", "y0", ",", "x1", "]", "\n", "I011", "=", "im", "[", "z0", ",", "y1", ",", "x1", "]", "\n", "I100", "=", "im", "[", "z1", ",", "y0", ",", "x0", "]", "\n", "I110", "=", "im", "[", "z1", ",", "y1", ",", "x0", "]", "\n", "I101", "=", "im", "[", "z1", ",", "y0", ",", "x1", "]", "\n", "I111", "=", "im", "[", "z1", ",", "y1", ",", "x1", "]", "\n", "\n", "w000", "=", "(", "z1", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "\n", "w010", "=", "-", "(", "z1", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y0", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "\n", "w001", "=", "-", "(", "z1", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x0", ".", "type_as", "(", "x", ")", "-", "x", ")", "\n", "w011", "=", "(", "z1", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y0", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x0", ".", "type_as", "(", "x", ")", "-", "x", ")", "\n", "w100", "=", "-", "(", "z0", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "\n", "w110", "=", "(", "z0", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y0", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "\n", "w101", "=", "(", "z0", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x0", ".", "type_as", "(", "x", ")", "-", "x", ")", "\n", "w111", "=", "-", "(", "z0", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y0", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x0", ".", "type_as", "(", "x", ")", "-", "x", ")", "\n", "\n", "ans", "=", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "I000", ")", "*", "w000", ")", ")", "+", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "I010", ")", "*", "w010", ")", ")", "+", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "I001", ")", "*", "w001", ")", ")", "+", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "I011", ")", "*", "w011", ")", ")", "+", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "I100", ")", "*", "w100", ")", ")", "+", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "I110", ")", "*", "w110", ")", ")", "+", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "I101", ")", "*", "w101", ")", ")", "+", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "I111", ")", "*", "w111", ")", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.reverse_sparse_trilinear_interpolate_torch": [[247, 312], ["torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "feat.dense", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.abs.unsqueeze", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.abs.unsqueeze", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.abs.unsqueeze", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.abs.unsqueeze", "torch.abs.unsqueeze", "torch.abs.unsqueeze", "torch.abs.unsqueeze", "torch.abs.unsqueeze"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "reverse_sparse_trilinear_interpolate_torch", "(", "feat", ",", "b", ",", "zyx", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        im: (Z, H, W, C) [z, y, x]\n        x: (N)\n        y: (N)\n        z: (N)\n\n    Returns:\n\n    \"\"\"", "\n", "im", ",", "spatial_shape", "=", "feat", ".", "dense", "(", ")", ",", "feat", ".", "spatial_shape", "\n", "x", ",", "y", ",", "z", "=", "zyx", "[", "...", ",", "2", "]", ",", "zyx", "[", "...", ",", "1", "]", ",", "zyx", "[", "...", ",", "0", "]", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", ".", "long", "(", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", ".", "long", "(", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "z0", "=", "torch", ".", "floor", "(", "z", ")", ".", "long", "(", ")", "\n", "z1", "=", "z0", "+", "1", "\n", "\n", "if", "normalize", ":", "\n", "        ", "z0_mask", "=", "1", "\n", "z1_mask", "=", "1", "\n", "y0_mask", "=", "1", "\n", "y1_mask", "=", "1", "\n", "x0_mask", "=", "1", "\n", "x1_mask", "=", "1", "\n", "", "else", ":", "\n", "        ", "z0_mask", "=", "(", "(", "z0", ">=", "0", ")", "&", "(", "z0", "<", "spatial_shape", "[", "0", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "z1_mask", "=", "(", "(", "z1", ">=", "0", ")", "&", "(", "z1", "<", "spatial_shape", "[", "0", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "y0_mask", "=", "(", "(", "y0", ">=", "0", ")", "&", "(", "y0", "<", "spatial_shape", "[", "1", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "y1_mask", "=", "(", "(", "y1", ">=", "0", ")", "&", "(", "y1", "<", "spatial_shape", "[", "1", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x0_mask", "=", "(", "(", "x0", ">=", "0", ")", "&", "(", "x0", "<", "spatial_shape", "[", "2", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x1_mask", "=", "(", "(", "x1", ">=", "0", ")", "&", "(", "x1", "<", "spatial_shape", "[", "2", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "w000", "=", "torch", ".", "abs", "(", "(", "z1", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", ")", "\n", "w010", "=", "torch", ".", "abs", "(", "-", "(", "z1", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y0", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", ")", "\n", "w001", "=", "torch", ".", "abs", "(", "-", "(", "z1", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x0", ".", "type_as", "(", "x", ")", "-", "x", ")", ")", "\n", "w011", "=", "torch", ".", "abs", "(", "(", "z1", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y0", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x0", ".", "type_as", "(", "x", ")", "-", "x", ")", ")", "\n", "w100", "=", "torch", ".", "abs", "(", "-", "(", "z0", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", ")", "\n", "w110", "=", "torch", ".", "abs", "(", "(", "z0", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y0", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", ")", "\n", "w101", "=", "torch", ".", "abs", "(", "(", "z0", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x0", ".", "type_as", "(", "x", ")", "-", "x", ")", ")", "\n", "w111", "=", "torch", ".", "abs", "(", "-", "(", "z0", ".", "type_as", "(", "z", ")", "-", "z", ")", "*", "(", "y0", ".", "type_as", "(", "y", ")", "-", "y", ")", "*", "(", "x0", ".", "type_as", "(", "x", ")", "-", "x", ")", ")", "\n", "\n", "x0", "=", "torch", ".", "clamp", "(", "x0", ",", "0", ",", "spatial_shape", "[", "2", "]", "-", "1", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1", ",", "0", ",", "spatial_shape", "[", "2", "]", "-", "1", ")", "\n", "y0", "=", "torch", ".", "clamp", "(", "y0", ",", "0", ",", "spatial_shape", "[", "1", "]", "-", "1", ")", "\n", "y1", "=", "torch", ".", "clamp", "(", "y1", ",", "0", ",", "spatial_shape", "[", "1", "]", "-", "1", ")", "\n", "z0", "=", "torch", ".", "clamp", "(", "z0", ",", "0", ",", "spatial_shape", "[", "0", "]", "-", "1", ")", "\n", "z1", "=", "torch", ".", "clamp", "(", "z1", ",", "0", ",", "spatial_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "I000", "=", "im", "[", "b", ",", ":", ",", "z0", ",", "y0", ",", "x0", "]", "*", "z0_mask", "*", "y0_mask", "*", "x0_mask", "# [1, 65536, 352]", "\n", "I010", "=", "im", "[", "b", ",", ":", ",", "z0", ",", "y1", ",", "x0", "]", "*", "z0_mask", "*", "y1_mask", "*", "x0_mask", "\n", "I001", "=", "im", "[", "b", ",", ":", ",", "z0", ",", "y0", ",", "x1", "]", "*", "z0_mask", "*", "y0_mask", "*", "x1_mask", "\n", "I011", "=", "im", "[", "b", ",", ":", ",", "z0", ",", "y1", ",", "x1", "]", "*", "z0_mask", "*", "y1_mask", "*", "x1_mask", "\n", "I100", "=", "im", "[", "b", ",", ":", ",", "z1", ",", "y0", ",", "x0", "]", "*", "z1_mask", "*", "y0_mask", "*", "x0_mask", "\n", "I110", "=", "im", "[", "b", ",", ":", ",", "z1", ",", "y1", ",", "x0", "]", "*", "z1_mask", "*", "y1_mask", "*", "x0_mask", "\n", "I101", "=", "im", "[", "b", ",", ":", ",", "z1", ",", "y0", ",", "x1", "]", "*", "z1_mask", "*", "y0_mask", "*", "x1_mask", "\n", "I111", "=", "im", "[", "b", ",", ":", ",", "z1", ",", "y1", ",", "x1", "]", "*", "z1_mask", "*", "y1_mask", "*", "x1_mask", "\n", "\n", "\n", "ans", "=", "I000", "*", "w000", ".", "unsqueeze", "(", "-", "1", ")", "+", "I010", "*", "w010", ".", "unsqueeze", "(", "-", "1", ")", "+", "I001", "*", "w001", ".", "unsqueeze", "(", "-", "1", ")", "+", "I011", "*", "w011", ".", "unsqueeze", "(", "-", "1", ")", "+", "I100", "*", "w100", ".", "unsqueeze", "(", "-", "1", ")", "+", "I110", "*", "w110", ".", "unsqueeze", "(", "-", "1", ")", "+", "I101", "*", "w101", ".", "unsqueeze", "(", "-", "1", ")", "+", "I111", "*", "w111", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.sparse_trilinear_interpolate_torch": [[315, 355], ["list", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unique", "torch.zeros().index_add_", "torch.zeros().index_add_", "torch.zeros().index_add_", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "reverse_idxs.long", "unique_idxs.long", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "binds.repeat().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().index_add_.view", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.as_tensor().unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "binds.repeat", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "sparse_trilinear_interpolate_torch", "(", "features", ",", "binds", ",", "idxs", ",", "grid_size", ")", ":", "\n", "    ", "N", ",", "F", "=", "list", "(", "features", ".", "shape", ")", "\n", "z", ",", "y", ",", "x", "=", "idxs", "[", "...", ",", "2", "]", ",", "idxs", "[", "...", ",", "1", "]", ",", "idxs", "[", "...", ",", "0", "]", ",", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "z0", "=", "torch", ".", "floor", "(", "z", ")", "\n", "z1", "=", "z0", "+", "1", "\n", "\n", "w000", "=", "torch", ".", "abs", "(", "(", "z1", "-", "z", ")", "*", "(", "y1", "-", "y", ")", "*", "(", "x1", "-", "x", ")", ")", "\n", "w010", "=", "torch", ".", "abs", "(", "-", "(", "z1", "-", "z", ")", "*", "(", "y0", "-", "y", ")", "*", "(", "x1", "-", "x", ")", ")", "\n", "w001", "=", "torch", ".", "abs", "(", "-", "(", "z1", "-", "z", ")", "*", "(", "y1", "-", "y", ")", "*", "(", "x0", "-", "x", ")", ")", "\n", "w011", "=", "torch", ".", "abs", "(", "(", "z1", "-", "z", ")", "*", "(", "y0", "-", "y", ")", "*", "(", "x0", "-", "x", ")", ")", "\n", "w100", "=", "torch", ".", "abs", "(", "-", "(", "z0", "-", "z", ")", "*", "(", "y1", "-", "y", ")", "*", "(", "x1", "-", "x", ")", ")", "\n", "w110", "=", "torch", ".", "abs", "(", "(", "z0", "-", "z", ")", "*", "(", "y0", "-", "y", ")", "*", "(", "x1", "-", "x", ")", ")", "\n", "w101", "=", "torch", ".", "abs", "(", "(", "z0", "-", "z", ")", "*", "(", "y1", "-", "y", ")", "*", "(", "x0", "-", "x", ")", ")", "\n", "w111", "=", "torch", ".", "abs", "(", "-", "(", "z0", "-", "z", ")", "*", "(", "y0", "-", "y", ")", "*", "(", "x0", "-", "x", ")", ")", "\n", "\n", "x0", "=", "torch", ".", "clamp", "(", "x0", ",", "-", "1", ",", "grid_size", "[", "2", "]", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1", ",", "-", "1", ",", "grid_size", "[", "2", "]", ")", "\n", "y0", "=", "torch", ".", "clamp", "(", "y0", ",", "-", "1", ",", "grid_size", "[", "1", "]", ")", "\n", "y1", "=", "torch", ".", "clamp", "(", "y1", ",", "-", "1", ",", "grid_size", "[", "1", "]", ")", "\n", "z0", "=", "torch", ".", "clamp", "(", "z0", ",", "-", "1", ",", "grid_size", "[", "0", "]", ")", "\n", "z1", "=", "torch", ".", "clamp", "(", "z1", ",", "-", "1", ",", "grid_size", "[", "0", "]", ")", "\n", "\n", "\n", "weights", "=", "torch", ".", "stack", "(", "[", "w000", ",", "w010", ",", "w001", ",", "w011", ",", "w100", ",", "w110", ",", "w101", ",", "w111", "]", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# N, 8, 1", "\n", "x0", ",", "y0", ",", "z0", ",", "x1", ",", "y1", ",", "z1", "=", "x0", ".", "type_as", "(", "binds", ")", ",", "y0", ".", "type_as", "(", "binds", ")", ",", "z0", ".", "type_as", "(", "binds", ")", ",", "x1", ".", "type_as", "(", "binds", ")", ",", "y1", ".", "type_as", "(", "binds", ")", ",", "z1", ".", "type_as", "(", "binds", ")", "\n", "idxs", "=", "torch", ".", "stack", "(", "[", "torch", ".", "stack", "(", "[", "z0", ",", "y0", ",", "x0", "]", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "stack", "(", "[", "z0", ",", "y1", ",", "x0", "]", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "stack", "(", "[", "z0", ",", "y0", ",", "x1", "]", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "stack", "(", "[", "z0", ",", "y1", ",", "x1", "]", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "stack", "(", "[", "z1", ",", "y0", ",", "x0", "]", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "stack", "(", "[", "z1", ",", "y1", ",", "x0", "]", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "stack", "(", "[", "z1", ",", "y0", ",", "x1", "]", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "stack", "(", "[", "z1", ",", "y1", ",", "x1", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "N", "*", "8", ",", "3", ")", "# N*8, 3", "\n", "bidxs", "=", "torch", ".", "cat", "(", "[", "binds", ".", "repeat", "(", "1", ",", "8", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "idxs", "]", ",", "dim", "=", "-", "1", ")", "\n", "features", "=", "(", "features", ".", "view", "(", "N", ",", "1", ",", "F", ")", "*", "weights", ")", ".", "view", "(", "-", "1", ",", "F", ")", "# N*8, F", "\n", "idx_mask", "=", "torch", ".", "all", "(", "idxs", ">=", "0", ",", "dim", "=", "-", "1", ")", "&", "torch", ".", "all", "(", "idxs", "<", "torch", ".", "as_tensor", "(", "grid_size", ",", "device", "=", "idxs", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ",", "dim", "=", "-", "1", ")", "\n", "features", ",", "bidxs", "=", "features", "[", "idx_mask", "]", ",", "bidxs", "[", "idx_mask", "]", "\n", "unique_idxs", ",", "reverse_idxs", ",", "labels_count", "=", "bidxs", ".", "unique", "(", "dim", "=", "0", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "# print(binds.dtype, bidxs.dtype, unique_idxs.dtype, reverse_idxs.dtype)", "\n", "features", "=", "torch", ".", "zeros", "(", "[", "unique_idxs", ".", "shape", "[", "0", "]", ",", "F", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "features", ".", "device", ")", ".", "index_add_", "(", "0", ",", "reverse_idxs", ".", "long", "(", ")", ",", "features", ")", "\n", "# print(\"features\", unique_idxs.shape, reverse_idxs.shape, features.shape) # torch.Size([147940, 4]) torch.Size([313096]) torch.Size([147940, 64])", "\n", "# print(\"unique_idxs\", unique_idxs[0], unique_idxs[-1])", "\n", "return", "unique_idxs", ".", "long", "(", ")", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.bilinear_interpolate_torch": [[358, 402], ["torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.t", "torch.t", "torch.t", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.t", "torch.t", "torch.t", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "bilinear_interpolate_torch", "(", "im", ",", "x", ",", "y", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        im: (H, W, C) [y, x]\n        x: (N)\n        y: (N)\n\n    Returns:\n\n    \"\"\"", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", ".", "long", "(", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", ".", "long", "(", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "if", "normalize", ":", "\n", "        ", "y0_mask", "=", "1", "\n", "y1_mask", "=", "1", "\n", "x0_mask", "=", "1", "\n", "x1_mask", "=", "1", "\n", "", "else", ":", "\n", "        ", "y0_mask", "=", "(", "(", "y0", ">=", "0", ")", "&", "(", "y0", "<", "im", ".", "shape", "[", "0", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "y1_mask", "=", "(", "(", "y1", ">=", "0", ")", "&", "(", "y1", "<", "im", ".", "shape", "[", "0", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x0_mask", "=", "(", "(", "x0", ">=", "0", ")", "&", "(", "x0", "<", "im", ".", "shape", "[", "1", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x1_mask", "=", "(", "(", "x1", ">=", "0", ")", "&", "(", "x1", "<", "im", ".", "shape", "[", "1", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "wa", "=", "torch", ".", "abs", "(", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", ")", "\n", "wb", "=", "torch", ".", "abs", "(", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "*", "(", "y", "-", "y0", ".", "type_as", "(", "y", ")", ")", ")", "\n", "wc", "=", "torch", ".", "abs", "(", "(", "x", "-", "x0", ".", "type_as", "(", "x", ")", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", ")", "\n", "wd", "=", "torch", ".", "abs", "(", "(", "x", "-", "x0", ".", "type_as", "(", "x", ")", ")", "*", "(", "y", "-", "y0", ".", "type_as", "(", "y", ")", ")", ")", "\n", "\n", "x0", "=", "torch", ".", "clamp", "(", "x0", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "y0", "=", "torch", ".", "clamp", "(", "y0", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "y1", "=", "torch", ".", "clamp", "(", "y1", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "Ia", "=", "im", "[", "y0", ",", "x0", "]", "*", "y0_mask", "*", "x0_mask", "\n", "Ib", "=", "im", "[", "y1", ",", "x0", "]", "*", "y1_mask", "*", "x0_mask", "\n", "Ic", "=", "im", "[", "y0", ",", "x1", "]", "*", "y0_mask", "*", "x1_mask", "\n", "Id", "=", "im", "[", "y1", ",", "x1", "]", "*", "y1_mask", "*", "x1_mask", "\n", "\n", "\n", "ans", "=", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "Ia", ")", "*", "wa", ")", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Ib", ")", "*", "wb", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Ic", ")", "*", "wc", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Id", ")", "*", "wd", ")", "\n", "return", "ans", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.in_hull": [[10, 25], ["isinstance", "scipy.spatial.Delaunay", "scipy.spatial.Delaunay.find_simplex", "print", "numpy.zeros", "str"], "function", ["None"], ["def", "in_hull", "(", "p", ",", "hull", ")", ":", "\n", "    ", "\"\"\"\n    :param p: (N, K) test points\n    :param hull: (M, K) M corners of a box\n    :return (N) bool\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "not", "isinstance", "(", "hull", ",", "Delaunay", ")", ":", "\n", "            ", "hull", "=", "Delaunay", "(", "hull", ")", "\n", "", "flag", "=", "hull", ".", "find_simplex", "(", "p", ")", ">=", "0", "\n", "", "except", "scipy", ".", "spatial", ".", "qhull", ".", "QhullError", ":", "\n", "        ", "print", "(", "'Warning: not a hull %s'", "%", "str", "(", "hull", ")", ")", "\n", "flag", "=", "np", ".", "zeros", "(", "p", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "", "return", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes_to_corners_3d": [[27, 53], ["common_utils.check_numpy_to_torch", "common_utils.rotate_points_along_z().view", "boxes3d.new_tensor", "boxes3d[].repeat", "common_utils.rotate_points_along_z().view.numpy", "common_utils.rotate_points_along_z", "common_utils.rotate_points_along_z().view.view"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "boxes_to_corners_3d", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n        7 -------- 4\n       /|         /|\n      6 -------- 5 .\n      | |        | |\n      . 3 -------- 0\n      |/         |/\n      2 -------- 1\n    Args:\n        boxes3d:  (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    Returns:\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "\n", "template", "=", "boxes3d", ".", "new_tensor", "(", "(", "\n", "[", "1", ",", "1", ",", "-", "1", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ",", "\n", ")", ")", "/", "2", "\n", "\n", "corners3d", "=", "boxes3d", "[", ":", ",", "None", ",", "3", ":", "6", "]", ".", "repeat", "(", "1", ",", "8", ",", "1", ")", "*", "template", "[", "None", ",", ":", ",", ":", "]", "\n", "corners3d", "=", "common_utils", ".", "rotate_points_along_z", "(", "corners3d", ".", "view", "(", "-", "1", ",", "8", ",", "3", ")", ",", "boxes3d", "[", ":", ",", "6", "]", ")", ".", "view", "(", "-", "1", ",", "8", ",", "3", ")", "\n", "corners3d", "+=", "boxes3d", "[", ":", ",", "None", ",", "0", ":", "3", "]", "\n", "\n", "return", "corners3d", ".", "numpy", "(", ")", "if", "is_numpy", "else", "corners3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.mask_boxes_outside_range_numpy": [[55, 72], ["box_utils.boxes_to_corners_3d", "mask.sum"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d"], ["", "def", "mask_boxes_outside_range_numpy", "(", "boxes", ",", "limit_range", ",", "min_num_corners", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes: (N, 7) [x, y, z, dx, dy, dz, heading, ...], (x, y, z) is the box center\n        limit_range: [minx, miny, minz, maxx, maxy, maxz]\n        min_num_corners:\n\n    Returns:\n\n    \"\"\"", "\n", "if", "boxes", ".", "shape", "[", "1", "]", ">", "7", ":", "\n", "        ", "boxes", "=", "boxes", "[", ":", ",", "0", ":", "7", "]", "\n", "", "corners", "=", "boxes_to_corners_3d", "(", "boxes", ")", "# (N, 8, 3)", "\n", "mask", "=", "(", "(", "corners", ">=", "limit_range", "[", "0", ":", "3", "]", ")", "&", "(", "corners", "<=", "limit_range", "[", "3", ":", "6", "]", ")", ")", ".", "all", "(", "axis", "=", "2", ")", "\n", "mask", "=", "mask", ".", "sum", "(", "axis", "=", "1", ")", ">=", "min_num_corners", "# (N)", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.remove_points_in_boxes3d": [[74, 90], ["common_utils.check_numpy_to_torch", "common_utils.check_numpy_to_torch", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu", "points.numpy", "roiaware_pool3d_utils.points_in_boxes_cpu.sum"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["", "def", "remove_points_in_boxes3d", "(", "points", ",", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (num_points, 3 + C)\n        boxes3d: (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center, each box DO NOT overlaps\n\n    Returns:\n\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "points", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "points", ")", "\n", "point_masks", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_cpu", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "boxes3d", ")", "\n", "# print(\"point_masks\", point_masks.shape, points.shape, boxes3d.shape)", "\n", "points", "=", "points", "[", "point_masks", ".", "sum", "(", "dim", "=", "0", ")", "==", "0", "]", "\n", "\n", "return", "points", ".", "numpy", "(", ")", "if", "is_numpy", "else", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_contain_point_thresh": [[93, 111], ["common_utils.check_numpy_to_torch", "common_utils.check_numpy_to_torch", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu", "mask.numpy", "roiaware_pool3d_utils.points_in_boxes_cpu.sum", "roiaware_pool3d_utils.points_in_boxes_cpu.sum"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["", "def", "boxes3d_contain_point_thresh", "(", "points", ",", "boxes3d", ",", "thresh", "=", "0", ",", "smaller", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (num_points, 3 + C)\n        boxes3d: (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center, each box DO NOT overlaps\n\n    Returns:\n\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "points", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "points", ")", "\n", "point_masks", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_cpu", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "boxes3d", ")", "\n", "if", "smaller", ":", "\n", "        ", "mask", "=", "point_masks", ".", "sum", "(", "dim", "=", "1", ")", "<=", "thresh", "\n", "", "else", ":", "\n", "        ", "mask", "=", "point_masks", ".", "sum", "(", "dim", "=", "1", ")", ">=", "thresh", "\n", "# print(\"mask\", mask)", "\n", "", "return", "mask", ".", "numpy", "(", ")", "if", "is_numpy", "else", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_contain_points": [[113, 127], ["common_utils.check_numpy_to_torch", "common_utils.check_numpy_to_torch", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu", "roiaware_pool3d_utils.points_in_boxes_cpu.numpy"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["", "def", "boxes3d_contain_points", "(", "points", ",", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (num_points, 3 + C)\n        boxes3d: (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center, each box DO NOT overlaps\n\n    Returns:\n\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "points", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "points", ")", "\n", "point_masks", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_cpu", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "boxes3d", ")", "\n", "# print(\"mask\", mask)", "\n", "return", "point_masks", ".", "numpy", "(", ")", "if", "is_numpy", "else", "point_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_kitti_camera_to_lidar": [[129, 144], ["calib.rect_to_lidar", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_lidar"], ["", "def", "boxes3d_kitti_camera_to_lidar", "(", "boxes3d_camera", ",", "calib", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d_camera: (N, 7) [x, y, z, l, h, w, r] in rect camera coords\n        calib:\n\n    Returns:\n        boxes3d_lidar: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    \"\"\"", "\n", "xyz_camera", "=", "boxes3d_camera", "[", ":", ",", "0", ":", "3", "]", "\n", "l", ",", "h", ",", "w", ",", "r", "=", "boxes3d_camera", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_camera", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_camera", "[", ":", ",", "5", ":", "6", "]", ",", "boxes3d_camera", "[", ":", ",", "6", ":", "7", "]", "\n", "xyz_lidar", "=", "calib", ".", "rect_to_lidar", "(", "xyz_camera", ")", "\n", "xyz_lidar", "[", ":", ",", "2", "]", "+=", "h", "[", ":", ",", "0", "]", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz_lidar", ",", "l", ",", "w", ",", "h", ",", "-", "(", "r", "+", "np", ".", "pi", "/", "2", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_kitti_fakelidar_to_lidar": [[146, 158], ["numpy.concatenate"], "function", ["None"], ["", "def", "boxes3d_kitti_fakelidar_to_lidar", "(", "boxes3d_lidar", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d_fakelidar: (N, 7) [x, y, z, w, l, h, r] in old LiDAR coordinates, z is bottom center\n\n    Returns:\n        boxes3d_lidar: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    \"\"\"", "\n", "w", ",", "l", ",", "h", ",", "r", "=", "boxes3d_lidar", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_lidar", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_lidar", "[", ":", ",", "5", ":", "6", "]", ",", "boxes3d_lidar", "[", ":", ",", "6", ":", "7", "]", "\n", "boxes3d_lidar", "[", ":", ",", "2", "]", "+=", "h", "[", ":", ",", "0", "]", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "boxes3d_lidar", "[", ":", ",", "0", ":", "3", "]", ",", "l", ",", "w", ",", "h", ",", "-", "(", "r", "+", "np", ".", "pi", "/", "2", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_kitti_lidar_to_fakelidar": [[160, 172], ["numpy.concatenate"], "function", ["None"], ["", "def", "boxes3d_kitti_lidar_to_fakelidar", "(", "boxes3d_lidar", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d_lidar: (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    Returns:\n        boxes3d_fakelidar: [x, y, z, w, l, h, r] in old LiDAR coordinates, z is bottom center\n\n    \"\"\"", "\n", "dx", ",", "dy", ",", "dz", ",", "heading", "=", "boxes3d_lidar", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_lidar", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_lidar", "[", ":", ",", "5", ":", "6", "]", ",", "boxes3d_lidar", "[", ":", ",", "6", ":", "7", "]", "\n", "boxes3d_lidar", "[", ":", ",", "2", "]", "-=", "dz", "[", ":", ",", "0", "]", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "boxes3d_lidar", "[", ":", ",", "0", ":", "3", "]", ",", "dy", ",", "dx", ",", "dz", ",", "-", "heading", "-", "np", ".", "pi", "/", "2", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.enlarge_box3d": [[174, 189], ["common_utils.check_numpy_to_torch", "sum", "boxes3d.clone", "boxes3d.new_tensor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch"], ["", "def", "enlarge_box3d", "(", "boxes3d", ",", "extra_width", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n        extra_width: [extra_x, extra_y, extra_z]\n\n    Returns:\n\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "if", "sum", "(", "extra_width", ")", ">", "1e-3", ":", "\n", "        ", "large_boxes3d", "=", "boxes3d", ".", "clone", "(", ")", "\n", "large_boxes3d", "[", ":", ",", "3", ":", "6", "]", "+=", "boxes3d", ".", "new_tensor", "(", "extra_width", ")", "[", "None", ",", ":", "]", "\n", "return", "large_boxes3d", "\n", "", "return", "boxes3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_lidar_to_kitti_camera": [[190, 205], ["calib.lidar_to_rect", "numpy.concatenate", "h.reshape"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_rect"], ["", "def", "boxes3d_lidar_to_kitti_camera", "(", "boxes3d_lidar", ",", "calib", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d_lidar: (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n    :param calib:\n    :return:\n        boxes3d_camera: (N, 7) [x, y, z, l, h, w, r] in rect camera coords\n    \"\"\"", "\n", "xyz_lidar", "=", "boxes3d_lidar", "[", ":", ",", "0", ":", "3", "]", "\n", "l", ",", "w", ",", "h", ",", "r", "=", "boxes3d_lidar", "[", ":", ",", "3", ":", "4", "]", ",", "boxes3d_lidar", "[", ":", ",", "4", ":", "5", "]", ",", "boxes3d_lidar", "[", ":", ",", "5", ":", "6", "]", ",", "boxes3d_lidar", "[", ":", ",", "6", ":", "7", "]", "\n", "\n", "xyz_lidar", "[", ":", ",", "2", "]", "-=", "h", ".", "reshape", "(", "-", "1", ")", "/", "2", "\n", "xyz_cam", "=", "calib", ".", "lidar_to_rect", "(", "xyz_lidar", ")", "\n", "# xyz_cam[:, 1] += h.reshape(-1) / 2", "\n", "r", "=", "-", "r", "-", "np", ".", "pi", "/", "2", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz_cam", ",", "l", ",", "h", ",", "w", ",", "r", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_to_corners3d_kitti_camera": [[207, 251], ["numpy.array", "numpy.transpose", "numpy.concatenate", "numpy.matmul", "numpy.concatenate", "np.concatenate.astype", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.ones", "x_loc.reshape", "x_corners.reshape", "y_loc.reshape", "np.zeros.reshape", "z_loc.reshape", "z_corners.reshape", "h.reshape().repeat", "numpy.array", "x_corners.reshape", "np.zeros.reshape", "z_corners.reshape", "x.reshape", "y.reshape", "z.reshape", "numpy.cos", "numpy.sin", "numpy.cos", "h.reshape", "numpy.sin"], "function", ["None"], ["", "def", "boxes3d_to_corners3d_kitti_camera", "(", "boxes3d", ",", "bottom_center", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, l, h, w, ry] in camera coords, see the definition of ry in KITTI dataset\n    :param bottom_center: whether y is on the bottom center of object\n    :return: corners3d: (N, 8, 3)\n        7 -------- 4\n       /|         /|\n      6 -------- 5 .\n      | |        | |\n      . 3 -------- 0\n      |/         |/\n      2 -------- 1\n    \"\"\"", "\n", "boxes_num", "=", "boxes3d", ".", "shape", "[", "0", "]", "\n", "l", ",", "h", ",", "w", "=", "boxes3d", "[", ":", ",", "3", "]", ",", "boxes3d", "[", ":", ",", "4", "]", ",", "boxes3d", "[", ":", ",", "5", "]", "\n", "x_corners", "=", "np", ".", "array", "(", "[", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "l", "/", "2.", ",", "l", "/", "2.", ",", "-", "l", "/", "2.", ",", "-", "l", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "z_corners", "=", "np", ".", "array", "(", "[", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", ",", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "-", "w", "/", "2.", ",", "w", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "if", "bottom_center", ":", "\n", "        ", "y_corners", "=", "np", ".", "zeros", "(", "(", "boxes_num", ",", "8", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_corners", "[", ":", ",", "4", ":", "8", "]", "=", "-", "h", ".", "reshape", "(", "boxes_num", ",", "1", ")", ".", "repeat", "(", "4", ",", "axis", "=", "1", ")", "# (N, 8)", "\n", "", "else", ":", "\n", "        ", "y_corners", "=", "np", ".", "array", "(", "[", "h", "/", "2.", ",", "h", "/", "2.", ",", "h", "/", "2.", ",", "h", "/", "2.", ",", "-", "h", "/", "2.", ",", "-", "h", "/", "2.", ",", "-", "h", "/", "2.", ",", "-", "h", "/", "2.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "\n", "", "ry", "=", "boxes3d", "[", ":", ",", "6", "]", "\n", "zeros", ",", "ones", "=", "np", ".", "zeros", "(", "ry", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "ones", "(", "ry", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rot_list", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "ry", ")", ",", "zeros", ",", "-", "np", ".", "sin", "(", "ry", ")", "]", ",", "\n", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "\n", "[", "np", ".", "sin", "(", "ry", ")", ",", "zeros", ",", "np", ".", "cos", "(", "ry", ")", "]", "]", ")", "# (3, 3, N)", "\n", "R_list", "=", "np", ".", "transpose", "(", "rot_list", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# (N, 3, 3)", "\n", "\n", "temp_corners", "=", "np", ".", "concatenate", "(", "(", "x_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "\n", "z_corners", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "# (N, 8, 3)", "\n", "rotated_corners", "=", "np", ".", "matmul", "(", "temp_corners", ",", "R_list", ")", "# (N, 8, 3)", "\n", "x_corners", ",", "y_corners", ",", "z_corners", "=", "rotated_corners", "[", ":", ",", ":", ",", "0", "]", ",", "rotated_corners", "[", ":", ",", ":", ",", "1", "]", ",", "rotated_corners", "[", ":", ",", ":", ",", "2", "]", "\n", "\n", "x_loc", ",", "y_loc", ",", "z_loc", "=", "boxes3d", "[", ":", ",", "0", "]", ",", "boxes3d", "[", ":", ",", "1", "]", ",", "boxes3d", "[", ":", ",", "2", "]", "\n", "\n", "x", "=", "x_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "x_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "y", "=", "y_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "y_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "z", "=", "z_loc", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "z_corners", ".", "reshape", "(", "-", "1", ",", "8", ")", "\n", "\n", "corners", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "z", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "corners", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_kitti_camera_to_imageboxes": [[253, 274], ["box_utils.boxes3d_to_corners3d_kitti_camera", "calib.rect_to_img", "pts_img.reshape", "numpy.min", "numpy.max", "numpy.concatenate", "boxes3d_to_corners3d_kitti_camera.reshape", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_to_corners3d_kitti_camera", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_img"], ["", "def", "boxes3d_kitti_camera_to_imageboxes", "(", "boxes3d", ",", "calib", ",", "image_shape", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, l, h, w, r] in rect camera coords\n    :param calib:\n    :return:\n        box_2d_preds: (N, 4) [x1, y1, x2, y2]\n    \"\"\"", "\n", "corners3d", "=", "boxes3d_to_corners3d_kitti_camera", "(", "boxes3d", ")", "\n", "pts_img", ",", "_", "=", "calib", ".", "rect_to_img", "(", "corners3d", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", "\n", "corners_in_image", "=", "pts_img", ".", "reshape", "(", "-", "1", ",", "8", ",", "2", ")", "\n", "\n", "min_uv", "=", "np", ".", "min", "(", "corners_in_image", ",", "axis", "=", "1", ")", "# (N, 2)", "\n", "max_uv", "=", "np", ".", "max", "(", "corners_in_image", ",", "axis", "=", "1", ")", "# (N, 2)", "\n", "boxes2d_image", "=", "np", ".", "concatenate", "(", "[", "min_uv", ",", "max_uv", "]", ",", "axis", "=", "1", ")", "\n", "if", "image_shape", "is", "not", "None", ":", "\n", "        ", "boxes2d_image", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "boxes2d_image", "[", ":", ",", "0", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_shape", "[", "1", "]", "-", "1", ")", "\n", "boxes2d_image", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "boxes2d_image", "[", ":", ",", "1", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_shape", "[", "0", "]", "-", "1", ")", "\n", "boxes2d_image", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "boxes2d_image", "[", ":", ",", "2", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_shape", "[", "1", "]", "-", "1", ")", "\n", "boxes2d_image", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "boxes2d_image", "[", ":", ",", "3", "]", ",", "a_min", "=", "0", ",", "a_max", "=", "image_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "", "return", "boxes2d_image", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes_iou_normal": [[276, 297], ["torch.max", "torch.min", "torch.max", "torch.min", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min"], "function", ["None"], ["", "def", "boxes_iou_normal", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 4) [x1, y1, x2, y2]\n        boxes_b: (M, 4) [x1, y1, x2, y2]\n\n    Returns:\n\n    \"\"\"", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "boxes_b", ".", "shape", "[", "1", "]", "==", "4", "\n", "x_min", "=", "torch", ".", "max", "(", "boxes_a", "[", ":", ",", "0", ",", "None", "]", ",", "boxes_b", "[", "None", ",", ":", ",", "0", "]", ")", "\n", "x_max", "=", "torch", ".", "min", "(", "boxes_a", "[", ":", ",", "2", ",", "None", "]", ",", "boxes_b", "[", "None", ",", ":", ",", "2", "]", ")", "\n", "y_min", "=", "torch", ".", "max", "(", "boxes_a", "[", ":", ",", "1", ",", "None", "]", ",", "boxes_b", "[", "None", ",", ":", ",", "1", "]", ")", "\n", "y_max", "=", "torch", ".", "min", "(", "boxes_a", "[", ":", ",", "3", ",", "None", "]", ",", "boxes_b", "[", "None", ",", ":", ",", "3", "]", ")", "\n", "x_len", "=", "torch", ".", "clamp_min", "(", "x_max", "-", "x_min", ",", "min", "=", "0", ")", "\n", "y_len", "=", "torch", ".", "clamp_min", "(", "y_max", "-", "y_min", ",", "min", "=", "0", ")", "\n", "area_a", "=", "(", "boxes_a", "[", ":", ",", "2", "]", "-", "boxes_a", "[", ":", ",", "0", "]", ")", "*", "(", "boxes_a", "[", ":", ",", "3", "]", "-", "boxes_a", "[", ":", ",", "1", "]", ")", "\n", "area_b", "=", "(", "boxes_b", "[", ":", ",", "2", "]", "-", "boxes_b", "[", ":", ",", "0", "]", ")", "*", "(", "boxes_b", "[", ":", ",", "3", "]", "-", "boxes_b", "[", ":", ",", "1", "]", ")", "\n", "a_intersect_b", "=", "x_len", "*", "y_len", "\n", "iou", "=", "a_intersect_b", "/", "torch", ".", "clamp_min", "(", "area_a", "[", ":", ",", "None", "]", "+", "area_b", "[", "None", ",", ":", "]", "-", "a_intersect_b", ",", "min", "=", "1e-6", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_lidar_to_aligned_bev_boxes": [[299, 311], ["common_utils.limit_period().abs", "torch.where", "torch.cat", "common_utils.limit_period"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.limit_period"], ["", "def", "boxes3d_lidar_to_aligned_bev_boxes", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes3d: (N, 7 + C) [x, y, z, dx, dy, dz, heading] in lidar coordinate\n\n    Returns:\n        aligned_bev_boxes: (N, 4) [x1, y1, x2, y2] in the above lidar coordinate\n    \"\"\"", "\n", "rot_angle", "=", "common_utils", ".", "limit_period", "(", "boxes3d", "[", ":", ",", "6", "]", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ".", "abs", "(", ")", "\n", "choose_dims", "=", "torch", ".", "where", "(", "rot_angle", "[", ":", ",", "None", "]", "<", "np", ".", "pi", "/", "4", ",", "boxes3d", "[", ":", ",", "[", "3", ",", "4", "]", "]", ",", "boxes3d", "[", ":", ",", "[", "4", ",", "3", "]", "]", ")", "\n", "aligned_bev_boxes", "=", "torch", ".", "cat", "(", "(", "boxes3d", "[", ":", ",", "0", ":", "2", "]", "-", "choose_dims", "/", "2", ",", "boxes3d", "[", ":", ",", "0", ":", "2", "]", "+", "choose_dims", "/", "2", ")", ",", "dim", "=", "1", ")", "\n", "return", "aligned_bev_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_nearest_bev_iou": [[313, 326], ["box_utils.boxes3d_lidar_to_aligned_bev_boxes", "box_utils.boxes3d_lidar_to_aligned_bev_boxes", "box_utils.boxes_iou_normal"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_lidar_to_aligned_bev_boxes", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_lidar_to_aligned_bev_boxes", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes_iou_normal"], ["", "def", "boxes3d_nearest_bev_iou", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (N, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n\n    \"\"\"", "\n", "boxes_bev_a", "=", "boxes3d_lidar_to_aligned_bev_boxes", "(", "boxes_a", ")", "\n", "boxes_bev_b", "=", "boxes3d_lidar_to_aligned_bev_boxes", "(", "boxes_b", ")", "\n", "\n", "return", "boxes_iou_normal", "(", "boxes_bev_a", ",", "boxes_bev_b", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.coords3inds": [[10, 25], ["coords.to.to", "torch.tensor", "torch.tensor", "torch.tensor", "inds.to"], "function", ["None"], ["def", "coords3inds", "(", "coords", ",", "nz", ",", "ny", ",", "nx", ")", ":", "\n", "    ", "coords", "=", "coords", ".", "to", "(", "torch", ".", "int32", ")", "\n", "# gperm = nx * ny * nz", "\n", "# gperm1 = nx * ny", "\n", "# gperm2 = nx", "\n", "gperm", "=", "torch", ".", "tensor", "(", "nx", "*", "ny", "*", "nz", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", "\n", "gperm1", "=", "torch", ".", "tensor", "(", "nx", "*", "ny", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", "\n", "gperm2", "=", "torch", ".", "tensor", "(", "nx", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", "\n", "\n", "bdim", "=", "coords", "[", ":", ",", "0", "]", "*", "gperm", "\n", "zdim", "=", "coords", "[", ":", ",", "1", "]", "*", "gperm1", "\n", "ydim", "=", "coords", "[", ":", ",", "2", "]", "*", "gperm2", "\n", "xdim", "=", "coords", "[", ":", ",", "3", "]", "\n", "inds", "=", "bdim", "+", "zdim", "+", "ydim", "+", "xdim", "\n", "return", "inds", ".", "to", "(", "torch", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.inds3coords": [[27, 40], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.div", "torch.div", "torch.div", "torch.stack"], "function", ["None"], ["", "def", "inds3coords", "(", "inds", ",", "nz", ",", "ny", ",", "nx", ")", ":", "\n", "    ", "gperm", "=", "torch", ".", "tensor", "(", "nx", "*", "ny", "*", "nz", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", "\n", "gperm1", "=", "torch", ".", "tensor", "(", "nx", "*", "ny", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", "\n", "gperm2", "=", "torch", ".", "tensor", "(", "nx", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", "\n", "\n", "b_dim", "=", "torch", ".", "div", "(", "inds", ",", "gperm", ")", "\n", "inds_leftover", "=", "inds", "-", "b_dim", "*", "gperm", "\n", "z_dim", "=", "torch", ".", "div", "(", "inds_leftover", ",", "gperm1", ")", "\n", "inds_leftover", "=", "inds_leftover", "-", "z_dim", "*", "gperm1", "\n", "y_dim", "=", "torch", ".", "div", "(", "inds_leftover", ",", "gperm2", ")", "\n", "x_dim", "=", "inds_leftover", "-", "y_dim", "*", "gperm2", "\n", "coords", "=", "torch", ".", "stack", "(", "(", "b_dim", ",", "z_dim", ",", "y_dim", ",", "x_dim", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.coords6inds": [[42, 54], ["torch.tensor().view", "torch.sum", "coords.to", "torch.tensor"], "function", ["None"], ["", "def", "coords6inds", "(", "coords", ",", "nz", ",", "ny", ",", "nx", ",", "sz", ",", "sy", ",", "sx", ")", ":", "\n", "# coords -> n * bnznynxszsysx", "\n", "    ", "gperm0", "=", "nz", "*", "ny", "*", "nx", "*", "sz", "*", "sy", "*", "sx", "\n", "gperm1", "=", "ny", "*", "nx", "*", "sz", "*", "sy", "*", "sx", "\n", "gperm2", "=", "nx", "*", "sz", "*", "sy", "*", "sx", "\n", "gperm3", "=", "sz", "*", "sy", "*", "sx", "\n", "gperm4", "=", "sy", "*", "sx", "\n", "gperm5", "=", "sx", "\n", "\n", "gperm", "=", "torch", ".", "tensor", "(", "[", "gperm0", ",", "gperm1", ",", "gperm2", ",", "gperm3", ",", "gperm4", ",", "gperm5", ",", "1", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "coords", "=", "coords", ".", "to", "(", "torch", ".", "int32", ")", "*", "gperm", "\n", "return", "torch", ".", "sum", "(", "coords", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.inds6coords": [[56, 69], ["inds.to.to", "torch.tensor().view", "torch.tensor().view", "torch.fmod", "torch.div", "torch.tensor", "torch.tensor", "inds.to.view"], "function", ["None"], ["", "def", "inds6coords", "(", "inds", ",", "nz", ",", "ny", ",", "nx", ",", "sz", ",", "sy", ",", "sx", ")", ":", "\n", "# coords -> n * bnznynxszsysx", "\n", "    ", "inds", "=", "inds", ".", "to", "(", "torch", ".", "int32", ")", "\n", "gperm0", "=", "nz", "*", "ny", "*", "nx", "*", "sz", "*", "sy", "*", "sx", "\n", "gperm1", "=", "ny", "*", "nx", "*", "sz", "*", "sy", "*", "sx", "\n", "gperm2", "=", "nx", "*", "sz", "*", "sy", "*", "sx", "\n", "gperm3", "=", "sz", "*", "sy", "*", "sx", "\n", "gperm4", "=", "sy", "*", "sx", "\n", "gperm5", "=", "sx", "\n", "\n", "gperm", "=", "torch", ".", "tensor", "(", "[", "gperm0", ",", "gperm1", ",", "gperm2", ",", "gperm3", ",", "gperm4", ",", "gperm5", ",", "1", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "mods", "=", "torch", ".", "tensor", "(", "[", "9000000", ",", "nz", ",", "ny", ",", "nx", ",", "sz", ",", "sy", ",", "sx", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "return", "torch", ".", "fmod", "(", "torch", ".", "div", "(", "inds", ".", "view", "(", "-", "1", ",", "1", ")", ",", "gperm", ")", ",", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.coords4inds": [[70, 80], ["torch.tensor().view", "torch.sum", "coords.to", "torch.tensor"], "function", ["None"], ["", "def", "coords4inds", "(", "coords", ",", "nz", ",", "ny", ",", "nx", ",", "nl", ")", ":", "\n", "# coords -> n * bnznynxszsysx", "\n", "    ", "gperm0", "=", "nz", "*", "ny", "*", "nx", "*", "nl", "\n", "gperm1", "=", "ny", "*", "nx", "*", "nl", "\n", "gperm2", "=", "nx", "*", "nl", "\n", "gperm3", "=", "nl", "\n", "\n", "gperm", "=", "torch", ".", "tensor", "(", "[", "gperm0", ",", "gperm1", ",", "gperm2", ",", "gperm3", ",", "1", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "coords", "=", "coords", ".", "to", "(", "torch", ".", "int32", ")", "*", "gperm", "\n", "return", "torch", ".", "sum", "(", "coords", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.inds4coords": [[82, 93], ["inds.to.to", "torch.tensor().view", "torch.tensor().view", "torch.fmod", "torch.div", "torch.tensor", "torch.tensor", "inds.to.view"], "function", ["None"], ["", "def", "inds4coords", "(", "inds", ",", "nz", ",", "ny", ",", "nx", ",", "nl", ")", ":", "\n", "# coords -> n * bnznynxszsysx", "\n", "    ", "inds", "=", "inds", ".", "to", "(", "torch", ".", "int32", ")", "\n", "gperm0", "=", "nz", "*", "ny", "*", "nx", "*", "nl", "\n", "gperm1", "=", "ny", "*", "nx", "*", "nl", "\n", "gperm2", "=", "nx", "*", "nl", "\n", "gperm3", "=", "nl", "\n", "\n", "gperm", "=", "torch", ".", "tensor", "(", "[", "gperm0", ",", "gperm1", ",", "gperm2", ",", "gperm3", ",", "1", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "mods", "=", "torch", ".", "tensor", "(", "[", "90000", ",", "nz", ",", "ny", ",", "nx", ",", "nl", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "return", "torch", ".", "fmod", "(", "torch", ".", "div", "(", "inds", ".", "view", "(", "-", "1", ",", "1", ")", ",", "gperm", ")", ",", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.voxel_perm": [[95, 99], ["mask.view", "perm_mask.permute.permute", "perm_mask.permute.reshape"], "function", ["None"], ["", "def", "voxel_perm", "(", "mask", ",", "bs", ",", "nz", ",", "ny", ",", "nx", ",", "sz", ",", "sy", ",", "sx", ",", "perm", "=", "[", "0", ",", "3", ",", "5", ",", "2", ",", "4", ",", "6", ",", "1", "]", ",", "f_dims", "=", "1", ")", ":", "\n", "    ", "perm_mask", "=", "mask", ".", "view", "(", "bs", ",", "f_dims", ",", "nz", "*", "sz", ",", "ny", ",", "sy", ",", "nx", ",", "sx", ")", "\n", "perm_mask", "=", "perm_mask", ".", "permute", "(", "perm", ")", "\n", "return", "perm_mask", ".", "reshape", "(", "bs", ",", "ny", ",", "nx", ",", "nz", "*", "sz", "*", "sy", "*", "sx", ",", "f_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.voxelize_pad": [[101, 111], ["torch.max().data.cpu().numpy", "torch.arange", "torch.cumsum", "voxel_num_points.size", "torch.cat", "torch.stack", "torch.max().data.cpu", "torch.zeros", "torch.max"], "function", ["None"], ["", "def", "voxelize_pad", "(", "voxel_num_points", ",", "inds", ",", "inverse_indices", ")", ":", "\n", "\n", "    ", "cluster_num", "=", "voxel_num_points", ".", "size", "(", ")", "[", "0", "]", "\n", "max_points", "=", "torch", ".", "max", "(", "voxel_num_points", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "P", "=", "inds", ".", "shape", "[", "0", "]", "\n", "inverse_indices", "=", "inverse_indices", "[", "inds", "]", "# 0, 0, 0, 1, 1, 1", "\n", "range_indices", "=", "torch", ".", "arange", "(", "0", ",", "P", ",", "device", "=", "\"cuda\"", ")", "\n", "voxel_num_points_addaxis", "=", "torch", ".", "cumsum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "'cuda'", ")", ",", "voxel_num_points", "[", ":", "-", "1", "]", "]", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "indices_voxel", "=", "range_indices", "-", "voxel_num_points_addaxis", "[", "inverse_indices", "]", "\n", "return", "torch", ".", "stack", "(", "[", "inverse_indices", ",", "indices_voxel", "]", ",", "axis", "=", "-", "1", ")", ",", "inds", ",", "[", "cluster_num", ",", "max_points", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.unq_subvoxel_pid_padding": [[113, 131], ["torch.unique", "torch.cat", "torch.unique", "torch.sort", "coords_utils.voxelize_pad", "torch.unsqueeze", "torch.unsqueeze"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.voxelize_pad"], ["", "def", "unq_subvoxel_pid_padding", "(", "valid_coords_szsysx", ",", "valid_coords_bnznynx", ",", "valid_point_label", ",", "sz", ",", "sy", ",", "sx", ",", "num_class", ")", ":", "\n", "    ", "valid_coords_bnznynx", ",", "cluster_inds", "=", "torch", ".", "unique", "(", "valid_coords_bnznynx", ",", "return_inverse", "=", "True", ",", "dim", "=", "0", ")", "\n", "valid_coords_cszsysxl", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "cluster_inds", ",", "-", "1", ")", ",", "valid_coords_szsysx", ",", "torch", ".", "unsqueeze", "(", "valid_point_label", ",", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "# C, 4", "\n", "\n", "# oneD_cszsysxl = coords4inds(valid_coords_cszsysxl, sz, sy, sx, num_class)", "\n", "# unique_coord_inds, inverse_indices, voxel_num_points = torch.unique(oneD_cszsysxl, sorted=False, return_inverse=True, return_counts=True)", "\n", "# _, inds = torch.sort(inverse_indices)", "\n", "# voxel_cszsysxl = inds4coords(unique_coord_inds, sz, sy, sx, num_class).to(torch.int64)", "\n", "voxel_cszsysxl", ",", "inverse_indices", ",", "voxel_num_points", "=", "torch", ".", "unique", "(", "valid_coords_cszsysxl", ",", "dim", "=", "0", ",", "sorted", "=", "False", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "_", ",", "inds", "=", "torch", ".", "sort", "(", "inverse_indices", ")", "\n", "\n", "subvoxel_inds", ",", "point_inds", ",", "vp_size", "=", "voxelize_pad", "(", "voxel_num_points", ",", "inds", ",", "inverse_indices", ")", "\n", "voxel_coords_bnznynx", "=", "valid_coords_bnznynx", "[", "voxel_cszsysxl", "[", ":", ",", "0", "]", "]", "\n", "voxel_coords_szsysxl", "=", "voxel_cszsysxl", "[", ":", ",", "1", ":", "]", "\n", "voxel_bnynxnzszsysxl", "=", "[", "voxel_coords_bnznynx", "[", ":", ",", "0", "]", ",", "voxel_coords_bnznynx", "[", ":", ",", "2", "]", ",", "voxel_coords_bnznynx", "[", ":", ",", "3", "]", ",", "voxel_coords_bnznynx", "[", ":", ",", "1", "]", ",", "voxel_coords_szsysxl", "[", ":", ",", "0", "]", ",", "voxel_coords_szsysxl", "[", ":", ",", "1", "]", ",", "voxel_coords_szsysxl", "[", ":", ",", "2", "]", ",", "voxel_coords_szsysxl", "[", ":", ",", "3", "]", "]", "\n", "voxel_bnysynxsx", "=", "[", "voxel_coords_bnznynx", "[", ":", ",", "0", "]", ",", "voxel_coords_bnznynx", "[", ":", ",", "2", "]", ",", "voxel_coords_szsysxl", "[", ":", ",", "1", "]", ",", "voxel_coords_bnznynx", "[", ":", ",", "3", "]", ",", "voxel_coords_szsysxl", "[", ":", ",", "2", "]", "]", "\n", "# print(\"point_inds\", point_inds, unique_coord_inds, unique_coord_inds.shape)", "\n", "return", "valid_coords_bnznynx", ",", "valid_coords_cszsysxl", ",", "voxel_coords_bnznynx", ",", "voxel_coords_szsysxl", ",", "voxel_bnynxnzszsysxl", ",", "voxel_bnysynxsx", ",", "subvoxel_inds", ",", "point_inds", ",", "vp_size", ",", "voxel_num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.unq_subvoxel": [[133, 150], ["torch.unique", "torch.sort", "coords_utils.voxelize_pad", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.voxelize_pad"], ["", "def", "unq_subvoxel", "(", "valid_coords_cszsysxl", ",", "valid_coords_bnznynx", ",", "valid_inds", ",", "sz", ",", "sy", ",", "sx", ")", ":", "\n", "    ", "valid_coords_cszsysx", "=", "valid_coords_cszsysxl", "[", "...", ",", ":", "-", "1", "]", "# C, 4", "\n", "\n", "# oneD_cszsysx = coords3inds(valid_coords_cszsysx, sz, sy, sx)", "\n", "# unique_coord_inds, inverse_indices, voxel_num_points = torch.unique(oneD_cszsysx, sorted=False, return_inverse=True, return_counts=True)", "\n", "# _, inds = torch.sort(inverse_indices)", "\n", "# voxel_cszsysx = inds3coords(unique_coord_inds, sz, sy, sx).to(torch.int64)", "\n", "voxel_cszsysx", ",", "inverse_indices", ",", "voxel_num_points", "=", "torch", ".", "unique", "(", "valid_coords_cszsysx", ",", "dim", "=", "0", ",", "sorted", "=", "False", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "_", ",", "inds", "=", "torch", ".", "sort", "(", "inverse_indices", ")", "\n", "\n", "subvoxel_inds", ",", "point_inds", ",", "vp_size", "=", "voxelize_pad", "(", "voxel_num_points", ",", "inds", ",", "inverse_indices", ")", "\n", "ind_vox", "=", "torch", ".", "zeros", "(", "[", "vp_size", "[", "0", "]", ",", "vp_size", "[", "1", "]", ",", "2", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "\"cuda\"", ")", "\n", "ind_vox", "[", "subvoxel_inds", "[", ":", ",", "0", "]", ",", "subvoxel_inds", "[", ":", ",", "1", "]", "]", "=", "valid_inds", "[", "point_inds", ",", ":", "]", "+", "1", "\n", "voxel_coords_bnznynx", "=", "valid_coords_bnznynx", "[", "voxel_cszsysx", "[", ":", ",", "0", "]", "]", "\n", "voxel_coords_szsysx", "=", "voxel_cszsysx", "[", ":", ",", "1", ":", "]", "\n", "voxel_bnynxnzszsysx", "=", "[", "voxel_coords_bnznynx", "[", ":", ",", "0", "]", ",", "voxel_coords_bnznynx", "[", ":", ",", "2", "]", ",", "voxel_coords_bnznynx", "[", ":", ",", "3", "]", ",", "voxel_coords_bnznynx", "[", ":", ",", "1", "]", ",", "voxel_coords_szsysx", "[", ":", ",", "0", "]", ",", "voxel_coords_szsysx", "[", ":", ",", "1", "]", ",", "voxel_coords_szsysx", "[", ":", ",", "2", "]", "]", "\n", "return", "ind_vox", ",", "voxel_bnynxnzszsysx", ",", "vp_size", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.get_all_voxel_centers_xyz": [[153, 164], ["torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.stack", "voxel_centers.repeat.repeat", "finer_grid_origin.view", "finer_voxel_size.view", "torch.stack.to"], "function", ["None"], ["", "def", "get_all_voxel_centers_xyz", "(", "bs", ",", "finer_grids_num", ",", "finer_grid_origin", ",", "finer_voxel_size", ")", ":", "\n", "    ", "nx", ",", "ny", ",", "nz", "=", "finer_grids_num", "[", "0", "]", ",", "finer_grids_num", "[", "1", "]", ",", "finer_grids_num", "[", "2", "]", "\n", "x_ind", "=", "torch", ".", "arange", "(", "nx", ",", "device", "=", "\"cuda\"", ")", "\n", "y_ind", "=", "torch", ".", "arange", "(", "ny", ",", "device", "=", "\"cuda\"", ")", "\n", "z_ind", "=", "torch", ".", "arange", "(", "nz", ",", "device", "=", "\"cuda\"", ")", "\n", "x", ",", "y", ",", "z", "=", "torch", ".", "meshgrid", "(", "x_ind", ",", "y_ind", ",", "z_ind", ")", "\n", "xyz", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "-", "1", ")", "\n", "# print(\"xyz\", xyz.shape, \"finer_voxel_size\", finer_voxel_size.shape, \"finer_grid_origin\", finer_grid_origin.shape)", "\n", "voxel_centers", "=", "(", "0.5", "+", "xyz", ".", "to", "(", "torch", ".", "float32", ")", ")", "*", "finer_voxel_size", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ",", "3", ")", "+", "finer_grid_origin", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ",", "3", ")", "\n", "voxel_centers", "=", "voxel_centers", ".", "repeat", "(", "bs", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "voxel_centers", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.get_all_voxel_centers_zyx": [[166, 178], ["torch.tensor", "torch.tensor", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.stack", "voxel_centers.view().repeat.view().repeat", "torch.tensor.view", "torch.tensor.view", "voxel_centers.view().repeat.view", "torch.stack.to"], "function", ["None"], ["", "def", "get_all_voxel_centers_zyx", "(", "bs", ",", "grids_num", ",", "grid_origin", ",", "voxel_size", ")", ":", "\n", "    ", "voxel_size", "=", "torch", ".", "tensor", "(", "[", "voxel_size", "[", "2", "]", ",", "voxel_size", "[", "1", "]", ",", "voxel_size", "[", "0", "]", "]", ",", "device", "=", "\"cuda\"", ")", "# oz, oy, ox", "\n", "grid_origin", "=", "torch", ".", "tensor", "(", "[", "grid_origin", "[", "2", "]", ",", "grid_origin", "[", "1", "]", ",", "grid_origin", "[", "0", "]", "]", ",", "device", "=", "\"cuda\"", ")", "# oz, oy, ox", "\n", "nx", ",", "ny", ",", "nz", "=", "grids_num", "[", "0", "]", ",", "grids_num", "[", "1", "]", ",", "grids_num", "[", "2", "]", "\n", "x_ind", "=", "torch", ".", "arange", "(", "nx", ",", "device", "=", "\"cuda\"", ")", "\n", "y_ind", "=", "torch", ".", "arange", "(", "ny", ",", "device", "=", "\"cuda\"", ")", "\n", "z_ind", "=", "torch", ".", "arange", "(", "nz", ",", "device", "=", "\"cuda\"", ")", "\n", "z", ",", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "z_ind", ",", "y_ind", ",", "x_ind", ")", "\n", "zyx", "=", "torch", ".", "stack", "(", "[", "z", ",", "y", ",", "x", "]", ",", "axis", "=", "0", ")", "\n", "voxel_centers", "=", "(", "0.5", "+", "zyx", ".", "to", "(", "torch", ".", "float32", ")", ")", "*", "voxel_size", ".", "view", "(", "3", ",", "1", ",", "1", ",", "1", ")", "+", "grid_origin", ".", "view", "(", "3", ",", "1", ",", "1", ",", "1", ")", "\n", "voxel_centers", "=", "voxel_centers", ".", "view", "(", "1", ",", "3", ",", "nz", ",", "ny", ",", "nx", ")", ".", "repeat", "(", "bs", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "voxel_centers", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.sphere_uvd2absxyz": [[180, 187], ["torch.stack", "torch.cos", "torch.cos", "torch.sin", "torch.sin"], "function", ["None"], ["", "def", "sphere_uvd2absxyz", "(", "sphere_x", ",", "sphere_y", ",", "sphere_z", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "xydist", "=", "sphere_x", "*", "torch", ".", "cos", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absx", "=", "xydist", "*", "torch", ".", "cos", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absy", "=", "-", "xydist", "*", "torch", ".", "sin", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absz", "=", "sphere_x", "*", "torch", ".", "sin", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "occpnt_absxyz", "=", "torch", ".", "stack", "(", "[", "carte_coords_absx", ",", "carte_coords_absy", ",", "carte_coords_absz", "]", ",", "dim", "=", "dim", ")", "\n", "return", "occpnt_absxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.sphere_uvd2absxyz_np": [[189, 196], ["numpy.stack", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "sphere_uvd2absxyz_np", "(", "sphere_x", ",", "sphere_y", ",", "sphere_z", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "xydist", "=", "sphere_x", "*", "np", ".", "cos", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absx", "=", "xydist", "*", "np", ".", "cos", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absy", "=", "-", "xydist", "*", "np", ".", "sin", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absz", "=", "sphere_x", "*", "np", ".", "sin", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "occpnt_absxyz", "=", "np", ".", "stack", "(", "[", "carte_coords_absx", ",", "carte_coords_absy", ",", "carte_coords_absz", "]", ",", "axis", "=", "dim", ")", "\n", "return", "occpnt_absxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cylinder_uvd2absxyz": [[198, 205], ["torch.stack", "torch.cos", "torch.sin"], "function", ["None"], ["", "def", "cylinder_uvd2absxyz", "(", "cylin_x", ",", "cylin_y", ",", "cylin_z", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "xydist", "=", "cylin_x", "\n", "carte_coords_absx", "=", "xydist", "*", "torch", ".", "cos", "(", "cylin_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absy", "=", "-", "xydist", "*", "torch", ".", "sin", "(", "cylin_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absz", "=", "cylin_z", "\n", "occpnt_absxyz", "=", "torch", ".", "stack", "(", "[", "carte_coords_absx", ",", "carte_coords_absy", ",", "carte_coords_absz", "]", ",", "dim", "=", "dim", ")", "\n", "return", "occpnt_absxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cylinder_uvd2absxyz_np": [[207, 214], ["numpy.stack", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "cylinder_uvd2absxyz_np", "(", "cylin_x", ",", "cylin_y", ",", "cylin_z", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "xydist", "=", "cylin_x", "\n", "carte_coords_absx", "=", "xydist", "*", "np", ".", "cos", "(", "cylin_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absy", "=", "-", "xydist", "*", "np", ".", "sin", "(", "cylin_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "carte_coords_absz", "=", "cylin_z", "\n", "occpnt_absxyz", "=", "np", ".", "stack", "(", "[", "carte_coords_absx", ",", "carte_coords_absy", ",", "carte_coords_absz", "]", ",", "axis", "=", "dim", ")", "\n", "return", "occpnt_absxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_sphere_coords": [[216, 227], ["torch.square", "torch.stack", "torch.sqrt", "torch.sqrt", "torch.atan2", "torch.atan2", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "cartesian_sphere_coords", "(", "cartesian_points", ",", "perm", "=", "\"xyz\"", ")", ":", "\n", "    ", "cartesian_sqr", "=", "torch", ".", "square", "(", "cartesian_points", ")", "\n", "i", ",", "j", ",", "k", ",", "l", ",", "m", "=", "perm_dict", "[", "perm", "]", "\n", "x", ",", "y", ",", "z", "=", "cartesian_points", "[", "...", ",", "i", "]", ",", "cartesian_points", "[", "...", ",", "j", "]", ",", "cartesian_points", "[", "...", ",", "k", "]", "\n", "dist", ",", "xydist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "cartesian_sqr", ",", "dim", "=", "1", ")", ")", ",", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "cartesian_sqr", "[", "...", ",", "l", ":", "m", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "sphere_x", "=", "dist", "\n", "sphere_y", "=", "torch", ".", "atan2", "(", "-", "y", ",", "x", ")", "*", "(", "180.", "/", "np", ".", "pi", ")", "\n", "sphere_z", "=", "torch", ".", "atan2", "(", "z", ",", "xydist", ")", "*", "(", "180.", "/", "np", ".", "pi", ")", "\n", "out", "=", "[", "sphere_x", ",", "sphere_y", ",", "sphere_z", "]", "\n", "sphere_coords_points", "=", "torch", ".", "stack", "(", "[", "out", "[", "i", "]", ",", "out", "[", "j", "]", ",", "out", "[", "k", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "sphere_coords_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_cylinder_coords": [[229, 240], ["torch.square", "torch.sqrt", "torch.stack", "torch.sum", "torch.atan2"], "function", ["None"], ["", "def", "cartesian_cylinder_coords", "(", "cartesian_points", ",", "perm", "=", "\"xyz\"", ")", ":", "\n", "    ", "cartesian_sqr", "=", "torch", ".", "square", "(", "cartesian_points", ")", "\n", "i", ",", "j", ",", "k", ",", "l", ",", "m", "=", "perm_dict", "[", "perm", "]", "\n", "x", ",", "y", ",", "z", "=", "cartesian_points", "[", "...", ",", "i", "]", ",", "cartesian_points", "[", "...", ",", "j", "]", ",", "cartesian_points", "[", "...", ",", "k", "]", "\n", "xydist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "cartesian_sqr", "[", "...", ",", "l", ":", "m", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "cylin_x", "=", "xydist", "\n", "cylin_y", "=", "torch", ".", "atan2", "(", "-", "y", ",", "x", ")", "*", "(", "180.", "/", "np", ".", "pi", ")", "\n", "cylin_z", "=", "z", "\n", "out", "=", "[", "cylin_x", ",", "cylin_y", ",", "cylin_z", "]", "\n", "cylin_coords_points", "=", "torch", ".", "stack", "(", "[", "out", "[", "i", "]", ",", "out", "[", "j", "]", ",", "out", "[", "k", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "cylin_coords_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_occ_coords": [[242, 249], ["coords_utils.cartesian_sphere_coords", "coords_utils.cartesian_cylinder_coords"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_sphere_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_cylinder_coords"], ["", "def", "cartesian_occ_coords", "(", "cartesian_points", ",", "type", ",", "perm", "=", "\"xyz\"", ")", ":", "\n", "    ", "if", "type", "==", "\"sphere\"", ":", "\n", "        ", "return", "cartesian_sphere_coords", "(", "cartesian_points", ",", "perm", "=", "perm", ")", "\n", "", "elif", "type", "==", "\"cylinder\"", ":", "\n", "        ", "return", "cartesian_cylinder_coords", "(", "cartesian_points", ",", "perm", "=", "perm", ")", "\n", "", "elif", "type", "==", "\"cartesian\"", ":", "\n", "        ", "return", "cartesian_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz": [[251, 258], ["coords_utils.sphere_uvd2absxyz", "coords_utils.cylinder_uvd2absxyz", "torch.stack"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.sphere_uvd2absxyz", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cylinder_uvd2absxyz"], ["", "", "def", "uvd2absxyz", "(", "coord_x", ",", "coord_y", ",", "coord_z", ",", "type", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "if", "type", "==", "\"sphere\"", ":", "\n", "        ", "return", "sphere_uvd2absxyz", "(", "coord_x", ",", "coord_y", ",", "coord_z", ",", "dim", "=", "dim", ")", "\n", "", "elif", "type", "==", "\"cylinder\"", ":", "\n", "        ", "return", "cylinder_uvd2absxyz", "(", "coord_x", ",", "coord_y", ",", "coord_z", ",", "dim", "=", "dim", ")", "\n", "", "elif", "type", "==", "\"cartesian\"", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "coord_x", ",", "coord_y", ",", "coord_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz_np": [[260, 267], ["coords_utils.sphere_uvd2absxyz_np", "coords_utils.cylinder_uvd2absxyz_np", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.sphere_uvd2absxyz_np", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cylinder_uvd2absxyz_np"], ["", "", "def", "uvd2absxyz_np", "(", "coord_x", ",", "coord_y", ",", "coord_z", ",", "type", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "if", "type", "==", "\"sphere\"", ":", "\n", "        ", "return", "sphere_uvd2absxyz_np", "(", "coord_x", ",", "coord_y", ",", "coord_z", ",", "dim", "=", "dim", ")", "\n", "", "elif", "type", "==", "\"cylinder\"", ":", "\n", "        ", "return", "cylinder_uvd2absxyz_np", "(", "coord_x", ",", "coord_y", ",", "coord_z", ",", "dim", "=", "dim", ")", "\n", "", "elif", "type", "==", "\"cartesian\"", ":", "\n", "        ", "return", "np", ".", "stack", "(", "[", "coord_x", ",", "coord_y", ",", "coord_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.absxyz_2_spherexyz_np": [[268, 280], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.stack", "numpy.concatenate", "numpy.arctan2", "numpy.arctan2"], "function", ["None"], ["", "", "def", "absxyz_2_spherexyz_np", "(", "points", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "points", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", "# np.sqrt(x ** 2 + y ** 2 + z ** 2)", "\n", "xydist", "=", "np", ".", "linalg", ".", "norm", "(", "points", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "# np.sqrt((abs(x)) ** 2 + y ** 2)", "\n", "sphere_x", "=", "dist", "\n", "sphere_y", "=", "np", ".", "arctan2", "(", "-", "y", ",", "x", ")", "*", "180.", "/", "np", ".", "pi", "\n", "sphere_z", "=", "np", ".", "arctan2", "(", "z", ",", "xydist", ")", "*", "180.", "/", "np", ".", "pi", "\n", "sphere_xyz", "=", "np", ".", "stack", "(", "[", "sphere_x", ",", "sphere_y", ",", "sphere_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "points", ".", "shape", "[", "1", "]", ">", "3", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "sphere_xyz", ",", "points", "[", ":", ",", "3", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "sphere_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.absxyz_2_cylinxyz_np": [[282, 293], ["numpy.linalg.norm", "numpy.stack", "numpy.concatenate", "numpy.arctan2"], "function", ["None"], ["", "", "def", "absxyz_2_cylinxyz_np", "(", "points", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", "\n", "xydist", "=", "np", ".", "linalg", ".", "norm", "(", "points", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "cylin_x", "=", "xydist", "\n", "cylin_y", "=", "np", ".", "arctan2", "(", "-", "y", ",", "x", ")", "*", "180.", "/", "np", ".", "pi", "\n", "cylin_z", "=", "z", "\n", "xyz", "=", "np", ".", "stack", "(", "[", "cylin_x", ",", "cylin_y", ",", "cylin_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "points", ".", "shape", "[", "1", "]", ">", "3", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "xyz", ",", "points", "[", ":", ",", "3", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.creat_grid_coords": [[295, 311], ["int", "int", "int", "numpy.asarray", "numpy.asarray", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.meshgrid", "numpy.stack", "np.asarray.reshape", "np.asarray.reshape", "np.stack.astype"], "function", ["None"], ["", "", "def", "creat_grid_coords", "(", "pntrange", ",", "voxel_size", ")", ":", "\n", "    ", "nx", "=", "int", "(", "(", "pntrange", "[", "3", "]", "-", "pntrange", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", ")", "\n", "ny", "=", "int", "(", "(", "pntrange", "[", "4", "]", "-", "pntrange", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", ")", "\n", "nz", "=", "int", "(", "(", "pntrange", "[", "5", "]", "-", "pntrange", "[", "2", "]", ")", "/", "voxel_size", "[", "2", "]", ")", "\n", "voxel_size", "=", "np", ".", "asarray", "(", "voxel_size", ")", "\n", "origin", "=", "np", ".", "asarray", "(", "pntrange", "[", ":", "3", "]", ")", "\n", "# grids_num = np.array([nx, ny, nz], dtype=np.int)", "\n", "x_ind", "=", "np", ".", "arange", "(", "nx", ")", "\n", "y_ind", "=", "np", ".", "arange", "(", "ny", ")", "\n", "z_ind", "=", "np", ".", "arange", "(", "nz", ")", "\n", "x", ",", "y", ",", "z", "=", "np", ".", "meshgrid", "(", "x_ind", ",", "y_ind", ",", "z_ind", ",", "indexing", "=", "'ij'", ")", "\n", "xyz", "=", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "-", "1", ")", "\n", "# print(\"xyz\", xyz.shape)", "\n", "voxel_centers", "=", "(", "0.5", "+", "xyz", ".", "astype", "(", "np", ".", "float32", ")", ")", "*", "voxel_size", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "3", ")", "+", "origin", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "3", ")", "\n", "# voxel_centers = voxel_centers.reshape(nx, ny, nz, 3)", "\n", "return", "voxel_centers", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.__init__": [[24, 41], ["isinstance", "calibration_kitti.get_calib_from_file"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.get_calib_from_file"], ["    ", "def", "__init__", "(", "self", ",", "calib_file", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "calib_file", ",", "dict", ")", ":", "\n", "            ", "calib", "=", "get_calib_from_file", "(", "calib_file", ")", "\n", "", "else", ":", "\n", "            ", "calib", "=", "calib_file", "\n", "\n", "", "self", ".", "P2", "=", "calib", "[", "'P2'", "]", "# 3 x 4", "\n", "self", ".", "R0", "=", "calib", "[", "'R0'", "]", "# 3 x 3", "\n", "self", ".", "V2C", "=", "calib", "[", "'Tr_velo2cam'", "]", "# 3 x 4", "\n", "\n", "# Camera intrinsics and extrinsics", "\n", "self", ".", "cu", "=", "self", ".", "P2", "[", "0", ",", "2", "]", "\n", "self", ".", "cv", "=", "self", ".", "P2", "[", "1", ",", "2", "]", "\n", "self", ".", "fu", "=", "self", ".", "P2", "[", "0", ",", "0", "]", "\n", "self", ".", "fv", "=", "self", ".", "P2", "[", "1", ",", "1", "]", "\n", "self", ".", "tx", "=", "self", ".", "P2", "[", "0", ",", "3", "]", "/", "(", "-", "self", ".", "fu", ")", "\n", "self", ".", "ty", "=", "self", ".", "P2", "[", "1", ",", "3", "]", "/", "(", "-", "self", ".", "fv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.cart_to_hom": [[42, 49], ["numpy.hstack", "numpy.ones"], "methods", ["None"], ["", "def", "cart_to_hom", "(", "self", ",", "pts", ")", ":", "\n", "        ", "\"\"\"\n        :param pts: (N, 3 or 2)\n        :return pts_hom: (N, 4 or 3)\n        \"\"\"", "\n", "pts_hom", "=", "np", ".", "hstack", "(", "(", "pts", ",", "np", ".", "ones", "(", "(", "pts", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "return", "pts_hom", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_lidar": [[50, 64], ["calibration_kitti.Calibration.cart_to_hom", "numpy.hstack", "numpy.vstack", "numpy.vstack", "numpy.dot", "numpy.linalg.inv", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.cart_to_hom"], ["", "def", "rect_to_lidar", "(", "self", ",", "pts_rect", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_lidar: (N, 3)\n        :return pts_rect: (N, 3)\n        \"\"\"", "\n", "pts_rect_hom", "=", "self", ".", "cart_to_hom", "(", "pts_rect", ")", "# (N, 4)", "\n", "R0_ext", "=", "np", ".", "hstack", "(", "(", "self", ".", "R0", ",", "np", ".", "zeros", "(", "(", "3", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (3, 4)", "\n", "R0_ext", "=", "np", ".", "vstack", "(", "(", "R0_ext", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (4, 4)", "\n", "R0_ext", "[", "3", ",", "3", "]", "=", "1", "\n", "V2C_ext", "=", "np", ".", "vstack", "(", "(", "self", ".", "V2C", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "# (4, 4)", "\n", "V2C_ext", "[", "3", ",", "3", "]", "=", "1", "\n", "\n", "pts_lidar", "=", "np", ".", "dot", "(", "pts_rect_hom", ",", "np", ".", "linalg", ".", "inv", "(", "np", ".", "dot", "(", "R0_ext", ",", "V2C_ext", ")", ".", "T", ")", ")", "\n", "return", "pts_lidar", "[", ":", ",", "0", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_rect": [[65, 74], ["calibration_kitti.Calibration.cart_to_hom", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.cart_to_hom"], ["", "def", "lidar_to_rect", "(", "self", ",", "pts_lidar", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_lidar: (N, 3)\n        :return pts_rect: (N, 3)\n        \"\"\"", "\n", "pts_lidar_hom", "=", "self", ".", "cart_to_hom", "(", "pts_lidar", ")", "\n", "pts_rect", "=", "np", ".", "dot", "(", "pts_lidar_hom", ",", "np", ".", "dot", "(", "self", ".", "V2C", ".", "T", ",", "self", ".", "R0", ".", "T", ")", ")", "\n", "# pts_rect = reduce(np.dot, (pts_lidar_hom, self.V2C.T, self.R0.T))", "\n", "return", "pts_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_img": [[75, 85], ["calibration_kitti.Calibration.cart_to_hom", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.cart_to_hom"], ["", "def", "rect_to_img", "(", "self", ",", "pts_rect", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_rect: (N, 3)\n        :return pts_img: (N, 2)\n        \"\"\"", "\n", "pts_rect_hom", "=", "self", ".", "cart_to_hom", "(", "pts_rect", ")", "\n", "pts_2d_hom", "=", "np", ".", "dot", "(", "pts_rect_hom", ",", "self", ".", "P2", ".", "T", ")", "\n", "pts_img", "=", "(", "pts_2d_hom", "[", ":", ",", "0", ":", "2", "]", ".", "T", "/", "pts_rect_hom", "[", ":", ",", "2", "]", ")", ".", "T", "# (N, 2)", "\n", "pts_rect_depth", "=", "pts_2d_hom", "[", ":", ",", "2", "]", "-", "self", ".", "P2", ".", "T", "[", "3", ",", "2", "]", "# depth in rect camera coord", "\n", "return", "pts_img", ",", "pts_rect_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_img": [[86, 94], ["calibration_kitti.Calibration.lidar_to_rect", "calibration_kitti.Calibration.rect_to_img"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_img"], ["", "def", "lidar_to_img", "(", "self", ",", "pts_lidar", ")", ":", "\n", "        ", "\"\"\"\n        :param pts_lidar: (N, 3)\n        :return pts_img: (N, 2)\n        \"\"\"", "\n", "pts_rect", "=", "self", ".", "lidar_to_rect", "(", "pts_lidar", ")", "\n", "pts_img", ",", "pts_depth", "=", "self", ".", "rect_to_img", "(", "pts_rect", ")", "\n", "return", "pts_img", ",", "pts_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.img_to_rect": [[95, 106], ["numpy.concatenate", "x.reshape", "y.reshape", "depth_rect.reshape"], "methods", ["None"], ["", "def", "img_to_rect", "(", "self", ",", "u", ",", "v", ",", "depth_rect", ")", ":", "\n", "        ", "\"\"\"\n        :param u: (N)\n        :param v: (N)\n        :param depth_rect: (N)\n        :return:\n        \"\"\"", "\n", "x", "=", "(", "(", "u", "-", "self", ".", "cu", ")", "*", "depth_rect", ")", "/", "self", ".", "fu", "+", "self", ".", "tx", "\n", "y", "=", "(", "(", "v", "-", "self", ".", "cv", ")", "*", "depth_rect", ")", "/", "self", ".", "fv", "+", "self", ".", "ty", "\n", "pts_rect", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "depth_rect", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "return", "pts_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.corners3d_to_img_boxes": [[107, 126], ["numpy.concatenate", "numpy.matmul", "numpy.concatenate", "numpy.concatenate", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.ones", "x1.reshape", "y1.reshape", "x2.reshape", "y2.reshape", "x.reshape", "y.reshape"], "methods", ["None"], ["", "def", "corners3d_to_img_boxes", "(", "self", ",", "corners3d", ")", ":", "\n", "        ", "\"\"\"\n        :param corners3d: (N, 8, 3) corners in rect coordinate\n        :return: boxes: (None, 4) [x1, y1, x2, y2] in rgb coordinate\n        :return: boxes_corner: (None, 8) [xi, yi] in rgb coordinate\n        \"\"\"", "\n", "sample_num", "=", "corners3d", ".", "shape", "[", "0", "]", "\n", "corners3d_hom", "=", "np", ".", "concatenate", "(", "(", "corners3d", ",", "np", ".", "ones", "(", "(", "sample_num", ",", "8", ",", "1", ")", ")", ")", ",", "axis", "=", "2", ")", "# (N, 8, 4)", "\n", "\n", "img_pts", "=", "np", ".", "matmul", "(", "corners3d_hom", ",", "self", ".", "P2", ".", "T", ")", "# (N, 8, 3)", "\n", "\n", "x", ",", "y", "=", "img_pts", "[", ":", ",", ":", ",", "0", "]", "/", "img_pts", "[", ":", ",", ":", ",", "2", "]", ",", "img_pts", "[", ":", ",", ":", ",", "1", "]", "/", "img_pts", "[", ":", ",", ":", ",", "2", "]", "\n", "x1", ",", "y1", "=", "np", ".", "min", "(", "x", ",", "axis", "=", "1", ")", ",", "np", ".", "min", "(", "y", ",", "axis", "=", "1", ")", "\n", "x2", ",", "y2", "=", "np", ".", "max", "(", "x", ",", "axis", "=", "1", ")", ",", "np", ".", "max", "(", "y", ",", "axis", "=", "1", ")", "\n", "\n", "boxes", "=", "np", ".", "concatenate", "(", "(", "x1", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y1", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "x2", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "y2", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "boxes_corner", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ",", "8", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "return", "boxes", ",", "boxes_corner", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.get_calib_from_file": [[4, 21], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "open", "f.readlines", "lines[].strip().split", "lines[].strip().split", "lines[].strip().split", "lines[].strip().split", "np.array.reshape", "np.array.reshape", "np.array.reshape", "np.array.reshape", "lines[].strip", "lines[].strip", "lines[].strip", "lines[].strip"], "function", ["None"], ["def", "get_calib_from_file", "(", "calib_file", ")", ":", "\n", "    ", "with", "open", "(", "calib_file", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "obj", "=", "lines", "[", "2", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "P2", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "3", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "P3", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "4", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "R0", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj", "=", "lines", "[", "5", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "\n", "Tr_velo_to_cam", "=", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "{", "'P2'", ":", "P2", ".", "reshape", "(", "3", ",", "4", ")", ",", "\n", "'P3'", ":", "P3", ".", "reshape", "(", "3", ",", "4", ")", ",", "\n", "'R0'", ":", "R0", ".", "reshape", "(", "3", ",", "3", ")", ",", "\n", "'Tr_velo2cam'", ":", "Tr_velo_to_cam", ".", "reshape", "(", "3", ",", "4", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.SigmoidFocalClassificationLoss.__init__": [[14, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "gamma", ":", "float", "=", "2.0", ",", "alpha", ":", "float", "=", "0.25", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gamma: Weighting parameter to balance loss for hard and easy examples.\n            alpha: Weighting parameter to balance loss for positive and negative examples.\n        \"\"\"", "\n", "super", "(", "SigmoidFocalClassificationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits": [[24, 43], ["torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "@", "staticmethod", "\n", "def", "sigmoid_cross_entropy_with_logits", "(", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\" PyTorch Implementation for tf.nn.sigmoid_cross_entropy_with_logits:\n            max(x, 0) - x * z + log(1 + exp(-abs(x))) in\n            https://www.tensorflow.org/api_docs/python/tf/nn/sigmoid_cross_entropy_with_logits\n\n        Args:\n            input: (B, #anchors, #classes) float tensor.\n                Predicted logits for each class\n            target: (B, #anchors, #classes) float tensor.\n                One-hot encoded classification targets\n\n        Returns:\n            loss: (B, #anchors, #classes) float tensor.\n                Sigmoid cross entropy loss without reduction\n        \"\"\"", "\n", "loss", "=", "torch", ".", "clamp", "(", "input", ",", "min", "=", "0", ")", "-", "input", "*", "target", "+", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "input", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.SigmoidFocalClassificationLoss.forward": [[44, 74], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss_utils.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "weights.unsqueeze.unsqueeze.unsqueeze", "weights.unsqueeze.unsqueeze.shape.__len__", "loss.shape.__len__", "weights.unsqueeze.unsqueeze.shape.__len__", "weights.unsqueeze.unsqueeze.shape.__len__", "target.shape.__len__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #anchors, #classes) float tensor.\n                Predicted logits for each class\n            target: (B, #anchors, #classes) float tensor.\n                One-hot encoded classification targets\n            weights: (B, #anchors) float tensor.\n                Anchor-wise weights.\n\n        Returns:\n            weighted_loss: (B, #anchors, #classes) float tensor after weighting.\n        \"\"\"", "\n", "pred_sigmoid", "=", "torch", ".", "sigmoid", "(", "input", ")", "\n", "alpha_weight", "=", "target", "*", "self", ".", "alpha", "+", "(", "1", "-", "target", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "pt", "=", "target", "*", "(", "1.0", "-", "pred_sigmoid", ")", "+", "(", "1.0", "-", "target", ")", "*", "pred_sigmoid", "\n", "focal_weight", "=", "alpha_weight", "*", "torch", ".", "pow", "(", "pt", ",", "self", ".", "gamma", ")", "\n", "\n", "bce_loss", "=", "self", ".", "sigmoid_cross_entropy_with_logits", "(", "input", ",", "target", ")", "\n", "\n", "loss", "=", "focal_weight", "*", "bce_loss", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "if", "weights", ".", "shape", ".", "__len__", "(", ")", "==", "2", "or", "(", "weights", ".", "shape", ".", "__len__", "(", ")", "<", "target", ".", "shape", ".", "__len__", "(", ")", ")", ":", "\n", "                ", "weights", "=", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "assert", "weights", ".", "shape", ".", "__len__", "(", ")", "==", "loss", ".", "shape", ".", "__len__", "(", ")", "\n", "\n", "return", "loss", "*", "weights", "\n", "", "else", ":", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.SoftmaxFocalClassificationLoss.__init__": [[107, 114], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ":", "float", "=", "1.0", ",", "gamma", ":", "float", "=", "2.0", ",", "\n", "reduction", ":", "str", "=", "'none'", ")", "->", "None", ":", "\n", "        ", "super", "(", "SoftmaxFocalClassificationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", ":", "float", "=", "alpha", "\n", "self", ".", "gamma", ":", "float", "=", "gamma", "\n", "self", ".", "reduction", ":", "str", "=", "reduction", "\n", "self", ".", "eps", ":", "float", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.SoftmaxFocalClassificationLoss.focal_loss": [[115, 167], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "TypeError", "ValueError", "input.size", "target.size", "ValueError", "ValueError", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "len", "type", "input.size", "target.size"], "methods", ["None"], ["", "def", "focal_loss", "(", "self", ",", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", "target", ":", "torch", ".", "Tensor", ",", "\n", "weights", ":", "torch", ".", "Tensor", ",", "\n", "alpha", ":", "float", "=", "1.0", ",", "\n", "gamma", ":", "float", "=", "2.0", ",", "\n", "reduction", ":", "str", "=", "'none'", ",", "\n", "eps", ":", "float", "=", "1e-8", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\"Function that computes Focal loss.\n        See :class:`~kornia.losses.FocalLoss` for details.\n        \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "input", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", "\n", ".", "format", "(", "type", "(", "input", ")", ")", ")", "\n", "\n", "", "if", "not", "len", "(", "input", ".", "shape", ")", ">=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid input shape, we expect BxCx*. Got: {}\"", "\n", ".", "format", "(", "input", ".", "shape", ")", ")", "\n", "\n", "", "if", "input", ".", "size", "(", "0", ")", "!=", "target", ".", "size", "(", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected input batch_size ({}) to match target batch_size ({}).'", "\n", ".", "format", "(", "input", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "", "if", "not", "input", ".", "device", "==", "target", ".", "device", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"input and target must be in the same device. Got: {} and {}\"", ".", "format", "(", "\n", "input", ".", "device", ",", "target", ".", "device", ")", ")", "\n", "\n", "# compute softmax over the classes axis", "\n", "", "input_soft", ":", "torch", ".", "Tensor", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "+", "eps", "\n", "# # create the labels one hot tensor", "\n", "# target_one_hot: torch.Tensor = one_hot(", "\n", "#     target, num_classes=input.shape[1],", "\n", "#     device=input.device, dtype=input.dtype)", "\n", "\n", "# compute the actual focal loss", "\n", "weight", "=", "torch", ".", "pow", "(", "-", "input_soft", "+", "1.", ",", "gamma", ")", "\n", "\n", "focal", "=", "-", "alpha", "*", "weight", "*", "torch", ".", "log", "(", "input_soft", ")", "\n", "loss_tmp", "=", "torch", ".", "sum", "(", "target", "*", "focal", ",", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "# if reduction == 'none':", "\n", "#     loss = loss_tmp", "\n", "# elif reduction == 'mean':", "\n", "#     loss = torch.mean(loss_tmp)", "\n", "# elif reduction == 'sum':", "\n", "#     loss = torch.sum(loss_tmp)", "\n", "# else:", "\n", "#     raise NotImplementedError(\"Invalid reduction mode: {}\"", "\n", "#                               .format(reduction))", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "return", "loss_tmp", "\n", "", "return", "loss_tmp", "*", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.SoftmaxFocalClassificationLoss.forward": [[168, 170], ["loss_utils.SoftmaxFocalClassificationLoss.focal_loss"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.SoftmaxFocalClassificationLoss.focal_loss"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "focal_loss", "(", "input", ",", "target", ",", "weights", ",", "self", ".", "alpha", ",", "self", ".", "gamma", ",", "self", ".", "reduction", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedSmoothL1Loss.__init__": [[183, 197], ["torch.Module.__init__", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "beta", ":", "float", "=", "1.0", "/", "9.0", ",", "code_weights", ":", "list", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            beta: Scalar float.\n                L1 to L2 change point.\n                For beta values < 1e-5, L1 loss is computed.\n            code_weights: (#codes) float list if not None.\n                Code-wise weights.\n        \"\"\"", "\n", "super", "(", "WeightedSmoothL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "if", "code_weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "code_weights", "=", "np", ".", "array", "(", "code_weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "code_weights", "=", "torch", ".", "from_numpy", "(", "self", ".", "code_weights", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedSmoothL1Loss.smooth_l1_loss": [[198, 207], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "smooth_l1_loss", "(", "diff", ",", "beta", ")", ":", "\n", "        ", "if", "beta", "<", "1e-5", ":", "\n", "            ", "loss", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "loss", "=", "torch", ".", "where", "(", "n", "<", "beta", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedSmoothL1Loss.forward": [[208, 237], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "loss_utils.WeightedSmoothL1Loss.smooth_l1_loss", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "weights.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedSmoothL1Loss.smooth_l1_loss"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #anchors, #codes) float tensor.\n                Ecoded predicted locations of objects.\n            target: (B, #anchors, #codes) float tensor.\n                Regression targets.\n            weights: (B, #anchors) float tensor if not None.\n\n        Returns:\n            loss: (B, #anchors) float tensor.\n                Weighted smooth l1 loss without reduction.\n        \"\"\"", "\n", "target", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "target", ")", ",", "input", ",", "target", ")", "# ignore nan targets", "\n", "\n", "diff", "=", "input", "-", "target", "\n", "# print(\"input\",input.shape, \"target\", target.shape)", "\n", "# code-wise weighting", "\n", "# if self.code_weights is not None:", "\n", "#     diff = diff * self.code_weights.view(1, 1, -1)", "\n", "\n", "loss", "=", "self", ".", "smooth_l1_loss", "(", "diff", ",", "self", ".", "beta", ")", "\n", "\n", "# anchor-wise weighting", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "assert", "weights", ".", "shape", "[", "0", "]", "==", "loss", ".", "shape", "[", "0", "]", "and", "weights", ".", "shape", "[", "1", "]", "==", "loss", ".", "shape", "[", "1", "]", "\n", "loss", "=", "loss", "*", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedL1Loss.__init__": [[240, 250], ["torch.Module.__init__", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_weights", ":", "list", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            code_weights: (#codes) float list if not None.\n                Code-wise weights.\n        \"\"\"", "\n", "super", "(", "WeightedL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "code_weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "code_weights", "=", "np", ".", "array", "(", "code_weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "code_weights", "=", "torch", ".", "from_numpy", "(", "self", ".", "code_weights", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedL1Loss.forward": [[251, 279], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "loss_utils.WeightedL1Loss.code_weights.view", "weights.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #anchors, #codes) float tensor.\n                Ecoded predicted locations of objects.\n            target: (B, #anchors, #codes) float tensor.\n                Regression targets.\n            weights: (B, #anchors) float tensor if not None.\n\n        Returns:\n            loss: (B, #anchors) float tensor.\n                Weighted smooth l1 loss without reduction.\n        \"\"\"", "\n", "target", "=", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "target", ")", ",", "input", ",", "target", ")", "# ignore nan targets", "\n", "\n", "diff", "=", "input", "-", "target", "\n", "# code-wise weighting", "\n", "if", "self", ".", "code_weights", "is", "not", "None", ":", "\n", "            ", "diff", "=", "diff", "*", "self", ".", "code_weights", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "", "loss", "=", "torch", ".", "abs", "(", "diff", ")", "\n", "\n", "# anchor-wise weighting", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "assert", "weights", ".", "shape", "[", "0", "]", "==", "loss", ".", "shape", "[", "0", "]", "and", "weights", ".", "shape", "[", "1", "]", "==", "loss", ".", "shape", "[", "1", "]", "\n", "loss", "=", "loss", "*", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedCrossEntropyLoss.__init__": [[286, 288], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "WeightedCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedCrossEntropyLoss.forward": [[289, 307], ["input.permute.permute.permute", "target.argmax.argmax.argmax", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #anchors, #classes) float tensor.\n                Predited logits for each class.\n            target: (B, #anchors, #classes) float tensor.\n                One-hot classification targets.\n            weights: (B, #anchors) float tensor.\n                Anchor-wise weights.\n\n        Returns:\n            loss: (B, #anchors) float tensor.\n                Weighted cross entropy loss without reduction\n        \"\"\"", "\n", "input", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "target", "=", "target", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "reduction", "=", "'none'", ")", "*", "weights", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.get_corner_loss_lidar": [[309, 333], ["box_utils.boxes_to_corners_3d", "box_utils.boxes_to_corners_3d", "gt_bbox3d.clone", "box_utils.boxes_to_corners_3d", "torch.min", "torch.min", "torch.min", "loss_utils.WeightedSmoothL1Loss.smooth_l1_loss", "WeightedSmoothL1Loss.smooth_l1_loss.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.WeightedSmoothL1Loss.smooth_l1_loss"], ["", "", "def", "get_corner_loss_lidar", "(", "pred_bbox3d", ":", "torch", ".", "Tensor", ",", "gt_bbox3d", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        pred_bbox3d: (N, 7) float Tensor.\n        gt_bbox3d: (N, 7) float Tensor.\n\n    Returns:\n        corner_loss: (N) float Tensor.\n    \"\"\"", "\n", "assert", "pred_bbox3d", ".", "shape", "[", "0", "]", "==", "gt_bbox3d", ".", "shape", "[", "0", "]", "\n", "\n", "pred_box_corners", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "pred_bbox3d", ")", "\n", "gt_box_corners", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "gt_bbox3d", ")", "\n", "\n", "gt_bbox3d_flip", "=", "gt_bbox3d", ".", "clone", "(", ")", "\n", "gt_bbox3d_flip", "[", ":", ",", "6", "]", "+=", "np", ".", "pi", "\n", "gt_box_corners_flip", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "gt_bbox3d_flip", ")", "\n", "# (N, 8)", "\n", "corner_dist", "=", "torch", ".", "min", "(", "torch", ".", "norm", "(", "pred_box_corners", "-", "gt_box_corners", ",", "dim", "=", "2", ")", ",", "\n", "torch", ".", "norm", "(", "pred_box_corners", "-", "gt_box_corners_flip", ",", "dim", "=", "2", ")", ")", "\n", "# (N, 8)", "\n", "corner_loss", "=", "WeightedSmoothL1Loss", ".", "smooth_l1_loss", "(", "corner_dist", ",", "beta", "=", "1.0", ")", "\n", "\n", "return", "corner_loss", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.draw_lidars_box3d_on_birdview": [[6, 33], ["vis_occ_utils.lidar_to_bird_view_img", "lidar_to_bird_view_img.copy", "vis_occ_utils.lidar_to_bird_view_img", "lidar_to_bird_view_img.copy", "vis_occ_utils.center_to_corner_box3d", "numpy.array", "image.copy.astype", "vis_occ_utils.lidar_to_bird_view", "vis_occ_utils.lidar_to_bird_view", "vis_occ_utils.lidar_to_bird_view", "vis_occ_utils.lidar_to_bird_view", "vis_occ_utils._draw_line", "vis_occ_utils._draw_line", "vis_occ_utils._draw_line", "vis_occ_utils._draw_line", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.lidar_to_bird_view_img", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.lidar_to_bird_view_img", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.center_to_corner_box3d", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.lidar_to_bird_view", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.lidar_to_bird_view", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.lidar_to_bird_view", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.lidar_to_bird_view", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils._draw_line", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils._draw_line", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils._draw_line", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils._draw_line"], ["def", "draw_lidars_box3d_on_birdview", "(", "lidars1", ",", "lidars2", ",", "colors", ",", "gt_box3d_center", ",", "input_map_h", ",", "input_map_w", ",", "xrange_min", ",", "xrange_max", ",", "yrange_min", ",", "yrange_max", ",", "vw", "=", "0.1", ",", "vh", "=", "0.1", ",", "bv_log_factor", "=", "1", ")", ":", "\n", "\n", "    ", "image", "=", "lidar_to_bird_view_img", "(", "lidars1", ",", "input_map_h", ",", "input_map_w", ",", "xrange_min", ",", "xrange_max", ",", "yrange_min", ",", "yrange_max", ",", "vw", ",", "vh", ",", "bv_log_factor", ",", "color", "=", "colors", "[", "0", "]", ")", "\n", "image", "=", "image", ".", "copy", "(", ")", "\n", "image", "=", "lidar_to_bird_view_img", "(", "lidars2", ",", "input_map_h", ",", "input_map_w", ",", "xrange_min", ",", "xrange_max", ",", "yrange_min", ",", "yrange_max", ",", "vw", ",", "vh", ",", "bv_log_factor", ",", "color", "=", "colors", "[", "1", "]", ",", "birdview", "=", "image", ")", "\n", "img", "=", "image", ".", "copy", "(", ")", "\n", "# color = np.array(80, 255, 80)", "\n", "gt_box3d_corner", "=", "center_to_corner_box3d", "(", "gt_box3d_center", ")", "\n", "color", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "255", "]", ")", "\n", "for", "box", "in", "gt_box3d_corner", ":", "\n", "        ", "x0", ",", "y0", "=", "lidar_to_bird_view", "(", "\n", "box", "[", "0", ",", "0", "]", ",", "box", "[", "0", ",", "1", "]", ",", "xrange_min", ",", "xrange_max", ",", "yrange_min", ",", "yrange_max", ",", "vw", ",", "vh", ",", "factor", "=", "bv_log_factor", "\n", ")", "\n", "x1", ",", "y1", "=", "lidar_to_bird_view", "(", "\n", "box", "[", "1", ",", "0", "]", ",", "box", "[", "1", ",", "1", "]", ",", "xrange_min", ",", "xrange_max", ",", "yrange_min", ",", "yrange_max", ",", "vw", ",", "vh", ",", "factor", "=", "bv_log_factor", "\n", ")", "\n", "x2", ",", "y2", "=", "lidar_to_bird_view", "(", "\n", "box", "[", "2", ",", "0", "]", ",", "box", "[", "2", ",", "1", "]", ",", "xrange_min", ",", "xrange_max", ",", "yrange_min", ",", "yrange_max", ",", "vw", ",", "vh", ",", "factor", "=", "bv_log_factor", "\n", ")", "\n", "x3", ",", "y3", "=", "lidar_to_bird_view", "(", "\n", "box", "[", "3", ",", "0", "]", ",", "box", "[", "3", ",", "1", "]", ",", "xrange_min", ",", "xrange_max", ",", "yrange_min", ",", "yrange_max", ",", "vw", ",", "vh", ",", "factor", "=", "bv_log_factor", "\n", ")", "\n", "_draw_line", "(", "img", ",", "[", "int", "(", "y0", ")", ",", "int", "(", "x0", ")", "]", ",", "[", "int", "(", "y1", ")", ",", "int", "(", "x1", ")", "]", ",", "color", ",", "max_value", "=", "255", ")", "\n", "_draw_line", "(", "img", ",", "[", "int", "(", "y1", ")", ",", "int", "(", "x1", ")", "]", ",", "[", "int", "(", "y2", ")", ",", "int", "(", "x2", ")", "]", ",", "color", ",", "max_value", "=", "255", ")", "\n", "_draw_line", "(", "img", ",", "[", "int", "(", "y2", ")", ",", "int", "(", "x2", ")", "]", ",", "[", "int", "(", "y3", ")", ",", "int", "(", "x3", ")", "]", ",", "color", ",", "max_value", "=", "255", ")", "\n", "_draw_line", "(", "img", ",", "[", "int", "(", "y3", ")", ",", "int", "(", "x3", ")", "]", ",", "[", "int", "(", "y0", ")", ",", "int", "(", "x0", ")", "]", ",", "color", ",", "max_value", "=", "255", ")", "\n", "", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils._draw_line": [[35, 50], ["all", "skimage.draw.line_aa", "val[].reshape", "len", "int", "int", "int", "int", "numpy.array", "round", "round", "round", "round"], "function", ["None"], ["", "def", "_draw_line", "(", "image", ",", "p1", ",", "p2", ",", "color", ",", "max_value", ")", ":", "\n", "    ", "assert", "len", "(", "image", ".", "shape", ")", "==", "3", "\n", "image_h", ",", "image_w", ",", "channels", "=", "image", ".", "shape", "\n", "assert", "channels", "in", "[", "1", ",", "3", "]", "\n", "assert", "color", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "all", "(", "0", "<=", "c", "<=", "255", "for", "c", "in", "color", ")", "\n", "rr", ",", "cc", ",", "val", "=", "line_aa", "(", "\n", "int", "(", "round", "(", "p1", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "p1", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "p2", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "p2", "[", "1", "]", ")", ")", "\n", ")", "\n", "in_bound", "=", "(", "rr", ">=", "0", ")", "&", "(", "rr", "<", "image_h", ")", "&", "(", "cc", ">=", "0", ")", "&", "(", "cc", "<", "image_w", ")", "\n", "rr", "=", "rr", "[", "in_bound", "]", "\n", "cc", "=", "cc", "[", "in_bound", "]", "\n", "val", "=", "val", "[", "in_bound", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "color", "=", "np", ".", "array", "(", "color", "if", "channels", "==", "3", "else", "[", "color", "[", "0", "]", "]", ")", "/", "255.0", "\n", "image", "[", "rr", ",", "cc", "]", "=", "val", "*", "color", "*", "max_value", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.lidar_to_bird_view": [[52, 58], ["numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "lidar_to_bird_view", "(", "x", ",", "y", ",", "xrange_min", ",", "xrange_max", ",", "yrange_min", ",", "yrange_max", ",", "vw", ",", "vh", ",", "factor", "=", "1", ")", ":", "\n", "    ", "a", "=", "(", "x", "-", "xrange_min", ")", "/", "vw", "*", "factor", "\n", "b", "=", "(", "y", "-", "yrange_min", ")", "/", "vh", "*", "factor", "\n", "a", "=", "np", ".", "clip", "(", "a", ",", "a_max", "=", "(", "xrange_max", "-", "xrange_min", ")", "/", "vw", "*", "factor", ",", "a_min", "=", "0", ")", "\n", "b", "=", "np", ".", "clip", "(", "b", ",", "a_max", "=", "(", "yrange_max", "-", "yrange_min", ")", "/", "vh", "*", "factor", ",", "a_min", "=", "0", ")", "\n", "return", "a", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.lidar_to_bird_view_img": [[59, 74], ["numpy.zeros", "numpy.where", "numpy.logical_and", "int", "int", "int", "int", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["", "def", "lidar_to_bird_view_img", "(", "lidar", ",", "input_map_h", "=", "794", ",", "input_map_w", "=", "692", ",", "xrange_min", "=", "0", ",", "xrange_max", "=", "69.12", ",", "yrange_min", "=", "-", "39.68", ",", "yrange_max", "=", "39.68", ",", "vw", "=", "0.1", ",", "vh", "=", "0.1", ",", "factor", "=", "1", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "birdview", "=", "None", ")", ":", "\n", "    ", "if", "birdview", "is", "None", ":", "\n", "        ", "birdview", "=", "np", ".", "zeros", "(", "\n", "(", "int", "(", "input_map_h", "*", "factor", ")", ",", "int", "(", "input_map_w", "*", "factor", ")", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "lidar_mask", "=", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "lidar", "[", ":", ",", "0", "]", ">=", "xrange_min", ",", "lidar", "[", ":", ",", "0", "]", "<", "xrange_max", ")", ",", "\n", "np", ".", "logical_and", "(", "lidar", "[", ":", ",", "1", "]", ">=", "yrange_min", ",", "lidar", "[", ":", ",", "1", "]", "<", "yrange_max", ")", "\n", ")", "\n", ")", "[", "0", "]", "\n", "for", "point", "in", "lidar", "[", "lidar_mask", "]", ":", "\n", "        ", "x", ",", "y", "=", "point", "[", "0", ":", "2", "]", "\n", "x", ",", "y", "=", "int", "(", "(", "x", "-", "xrange_min", ")", "/", "vw", "*", "factor", ")", ",", "int", "(", "(", "y", "-", "yrange_min", ")", "/", "vh", "*", "factor", ")", "\n", "birdview", "[", "y", ",", "x", ",", ":", "]", "=", "color", "\n", "", "return", "birdview", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.center_to_corner_box3d": [[75, 102], ["numpy.zeros", "range", "numpy.array", "corner_pos_in_cam.transpose", "numpy.array", "numpy.array", "numpy.dot", "numpy.tile", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "center_to_corner_box3d", "(", "boxes_center", ",", "bottom_center", "=", "False", ")", ":", "\n", "    ", "batch_size", "=", "boxes_center", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "8", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "box", "=", "boxes_center", "[", "i", "]", "\n", "translation", "=", "box", "[", "0", ":", "3", "]", "\n", "size", "=", "box", "[", "3", ":", "6", "]", "\n", "rotation", "=", "[", "0", ",", "0", ",", "box", "[", "6", "]", "]", "\n", "l", ",", "w", ",", "h", "=", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", "\n", "# print(\"l, w, h\", l, w, h)", "\n", "mat", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", "]", ",", "\n", "[", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "h", ",", "h", ",", "h", ",", "h", "]", "\n", "]", ")", "if", "bottom_center", "else", "np", ".", "array", "(", "[", "\n", "[", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", "]", ",", "\n", "[", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", "]", ",", "\n", "[", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", "]", "\n", "]", ")", "\n", "yaw", "=", "rotation", "[", "2", "]", "\n", "rot_mat", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "yaw", ")", ",", "-", "np", ".", "sin", "(", "yaw", ")", ",", "0.0", "]", ",", "\n", "[", "np", ".", "sin", "(", "yaw", ")", ",", "np", ".", "cos", "(", "yaw", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "corner_pos_in_cam", "=", "np", ".", "dot", "(", "rot_mat", ",", "mat", ")", "+", "np", ".", "tile", "(", "translation", ",", "(", "8", ",", "1", ")", ")", ".", "T", "\n", "box3d", "=", "corner_pos_in_cam", ".", "transpose", "(", ")", "\n", "ret", "[", "i", "]", "=", "box3d", "\n", "", "return", "ret", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.points_in_box_3d_label": [[10, 49], ["numpy.array", "point_box_utils.get_yaw_rotation", "point_box_utils.get_transform", "numpy.linalg.inv", "numpy.logical_and", "numpy.prod", "numpy.max", "numpy.zeros_like", "numpy.einsum", "np.prod.astype"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_transform"], ["def", "points_in_box_3d_label", "(", "points", ",", "boxes", ",", "slack", "=", "1.0", ",", "shift", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ")", ")", ":", "\n", "    ", "'''\n    :param points: N, 3\n    :param boxes: M, 8\n    :param slack: scalar\n    :return:\n        foreground_pnt_mask: N\n    '''", "\n", "center", "=", "boxes", "[", ":", ",", ":", "3", "]", "\n", "dim", "=", "boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "heading", "=", "boxes", "[", ":", ",", "6", "]", "\n", "box_label", "=", "boxes", "[", "...", ",", "7", "]", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "M", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "assert", "N", ">", "0", ",", "\"point number == 0\"", "\n", "if", "M", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros_like", "(", "points", "[", "...", ",", "0", "]", ")", "\n", "# M, 3, 3", "\n", "", "rotation", "=", "get_yaw_rotation", "(", "heading", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "get_transform", "(", "rotation", ",", "center", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "np", ".", "linalg", ".", "inv", "(", "transform", ")", "\n", "# M, 3, 3", "\n", "rotation", "=", "transform", "[", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "# M, 3", "\n", "translation", "=", "transform", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "# N, M, 3", "\n", "point_in_box_frame", "=", "np", ".", "einsum", "(", "\"nj,mij->nmi\"", ",", "points", ",", "rotation", ")", "+", "translation", "\n", "# N, M, 3", "\n", "point_in_box_mask", "=", "np", ".", "logical_and", "(", "point_in_box_frame", "<=", "dim", "*", "0.5", "*", "slack", "+", "shift", "[", ":", ",", "3", ":", "]", ",", "point_in_box_frame", ">=", "-", "dim", "*", "0.5", "*", "slack", "+", "shift", "[", ":", ",", ":", "3", "]", ")", "\n", "# N, M", "\n", "point_in_box_mask", "=", "np", ".", "prod", "(", "point_in_box_mask", ".", "astype", "(", "np", ".", "int8", ")", ",", "axis", "=", "-", "1", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "# N, M", "\n", "point_in_box_label", "=", "point_in_box_mask", "*", "box_label", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "# N", "\n", "point_label", "=", "np", ".", "max", "(", "point_in_box_label", ",", "axis", "=", "1", ")", "\n", "# print(\"point_label\", point_label.shape)", "\n", "return", "point_label", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation": [[50, 60], ["numpy.cos", "numpy.sin", "numpy.ones_like", "numpy.zeros_like", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "get_yaw_rotation", "(", "yaw", ")", ":", "\n", "    ", "cos_yaw", "=", "np", ".", "cos", "(", "yaw", ")", "\n", "sin_yaw", "=", "np", ".", "sin", "(", "yaw", ")", "\n", "ones", "=", "np", ".", "ones_like", "(", "yaw", ")", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "yaw", ")", "\n", "return", "np", ".", "stack", "(", "[", "\n", "np", ".", "stack", "(", "[", "cos_yaw", ",", "-", "1.0", "*", "sin_yaw", ",", "zeros", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "np", ".", "stack", "(", "[", "sin_yaw", ",", "cos_yaw", ",", "zeros", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "np", ".", "stack", "(", "[", "zeros", ",", "zeros", ",", "ones", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_transform": [[61, 68], ["numpy.concatenate", "numpy.zeros_like", "numpy.concatenate", "numpy.concatenate", "numpy.ones_like"], "function", ["None"], ["", "def", "get_transform", "(", "rotation", ",", "translation", ")", ":", "\n", "    ", "translation_n_1", "=", "translation", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "transform", "=", "np", ".", "concatenate", "(", "[", "rotation", ",", "translation_n_1", "]", ",", "axis", "=", "-", "1", ")", "\n", "last_row", "=", "np", ".", "zeros_like", "(", "translation", ")", "\n", "last_row", "=", "np", ".", "concatenate", "(", "[", "last_row", ",", "np", ".", "ones_like", "(", "last_row", "[", "...", ",", "0", ":", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "transform", "=", "np", ".", "concatenate", "(", "[", "transform", ",", "last_row", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", "]", ",", "axis", "=", "-", "2", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_and_sym_in_box_3d_batch": [[70, 98], ["torch.zeros_like", "torch.zeros_like", "range", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero", "torch.nonzero", "point_box_utils.torch_points_in_box_3d_label_mirr_points", "print", "len", "torch.eq", "torch.eq", "list", "mirr_bind_lst.append", "mirr_inbox_point_lst.append", "list", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label_mirr_points"], ["", "def", "torch_points_and_sym_in_box_3d_batch", "(", "valid_points", ",", "valid_coords", ",", "boxes", ",", "boxes_num", ",", "batch_size", ",", "mirr_flag", ",", "slack", "=", "1.0", ")", ":", "\n", "    ", "b_ind", "=", "valid_coords", "[", ":", ",", "0", "]", "\n", "label_array", "=", "torch", ".", "zeros_like", "(", "valid_points", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "mirr_inbox_point_lst", "=", "[", "]", "\n", "mirr_bind_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "valid_b_num_box", "=", "boxes_num", "[", "i", "]", "\n", "valid_b_box", "=", "boxes", "[", "i", ",", ":", "valid_b_num_box", ",", ":", "]", "\n", "valid_b_mirr_flag", "=", "mirr_flag", "[", "i", ",", ":", "valid_b_num_box", "]", "\n", "vox_ind", "=", "torch", ".", "nonzero", "(", "torch", ".", "eq", "(", "b_ind", ",", "i", ")", ")", "[", ":", ",", "0", "]", "\n", "# print(\"list(vox_ind.shape)[0]\",list(vox_ind.shape)[0])", "\n", "if", "list", "(", "vox_ind", ".", "shape", ")", "[", "0", "]", ">", "0", ":", "\n", "            ", "valid_b_points", "=", "valid_points", "[", "vox_ind", ",", ":", "]", "\n", "label_array", "[", "vox_ind", "]", ",", "mirr_points", "=", "torch_points_in_box_3d_label_mirr_points", "(", "valid_b_points", ",", "valid_b_box", ",", "valid_b_mirr_flag", ")", "\n", "if", "mirr_points", "is", "not", "None", ":", "\n", "                ", "mirr_bind_lst", ".", "append", "(", "torch", ".", "ones", "(", "mirr_points", ".", "shape", "[", "0", "]", ",", "device", "=", "mirr_points", ".", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "*", "i", ")", "\n", "mirr_inbox_point_lst", ".", "append", "(", "mirr_points", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"skip batch_{}, valid_points ind:\"", ".", "format", "(", "i", ")", ",", "list", "(", "vox_ind", ".", "shape", ")", ")", "\n", "", "", "if", "len", "(", "mirr_bind_lst", ")", ">", "1", ":", "\n", "        ", "mirr_inbox_point", "=", "torch", ".", "cat", "(", "mirr_inbox_point_lst", ",", "dim", "=", "0", ")", "\n", "mirr_binds", "=", "torch", ".", "cat", "(", "mirr_bind_lst", ",", "dim", "=", "0", ")", "\n", "", "elif", "len", "(", "mirr_bind_lst", ")", "==", "1", ":", "\n", "        ", "mirr_inbox_point", "=", "mirr_inbox_point_lst", "[", "0", "]", "\n", "mirr_binds", "=", "mirr_bind_lst", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "mirr_inbox_point", ",", "mirr_binds", "=", "None", ",", "None", "\n", "", "return", "label_array", ">", "0", ",", "mirr_inbox_point", ",", "mirr_binds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label_batch": [[101, 122], ["torch.zeros_like", "torch.zeros_like", "range", "torch.eq().nonzero", "torch.eq().nonzero", "list", "point_box_utils.torch_points_in_box_3d_label", "torch.eq", "torch.eq"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label"], ["", "def", "torch_points_in_box_3d_label_batch", "(", "valid_points", ",", "valid_coords", ",", "boxes", ",", "boxes_num", ",", "batch_size", ",", "slack", "=", "1.0", ")", ":", "\n", "    ", "'''\n    :param voxel_points: V, N, 3\n    :param boxes: B M, 8\n    :param slack: scalar\n    :return:\n        foreground_pnt_mask: N\n    '''", "\n", "b_ind", "=", "valid_coords", "[", ":", ",", "0", "]", "\n", "label_array", "=", "torch", ".", "zeros_like", "(", "valid_points", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "valid_b_num_box", "=", "boxes_num", "[", "i", "]", "\n", "valid_b_box", "=", "boxes", "[", "i", ",", ":", "valid_b_num_box", ",", ":", "]", "\n", "vox_ind", "=", "torch", ".", "eq", "(", "b_ind", ",", "i", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "# print(\"list(vox_ind.shape)[0]\",list(vox_ind.shape)[0])", "\n", "if", "list", "(", "vox_ind", ".", "shape", ")", "[", "0", "]", ">", "0", ":", "\n", "            ", "valid_b_points", "=", "valid_points", "[", "vox_ind", ",", ":", "]", "\n", "label_array", "[", "vox_ind", "]", "=", "torch_points_in_box_3d_label", "(", "valid_b_points", ",", "valid_b_box", ",", "valid_b_num_box", ")", "[", "0", "]", "\n", "# else:", "\n", "#     print(\"119 skip batch_{}, valid_points ind:\".format(i), list(vox_ind.shape))", "\n", "", "", "return", "label_array", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_box_label_batch": [[124, 147], ["range", "torch.eq().nonzero", "torch.eq().nonzero", "point_box_utils.torch_points_in_box_3d_label_box_label", "box_point_mask_lst.append", "valid_b_point_ind_lst.append", "list", "torch.eq", "torch.eq"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label_box_label"], ["", "def", "torch_points_in_box_3d_box_label_batch", "(", "valid_points", ",", "valid_coords", ",", "boxes", ",", "boxes_num", ",", "batch_size", ",", "slack", "=", "1.0", ")", ":", "\n", "    ", "'''\n    :param voxel_points: V, N, 3\n    :param boxes: B M, 8\n    :param slack: scalar\n    :return:\n        foreground_pnt_mask: N\n    '''", "\n", "b_ind", "=", "valid_coords", "[", ":", ",", "0", "]", "\n", "# label_array = torch.zeros_like(valid_points[..., 0], dtype=torch.int8, device=\"cuda\")", "\n", "box_point_mask_lst", "=", "[", "]", "\n", "valid_b_point_ind_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "valid_b_num_box", "=", "boxes_num", "[", "i", "]", "\n", "valid_b_box", "=", "boxes", "[", "i", ",", ":", "valid_b_num_box", ",", ":", "]", "\n", "vox_ind", "=", "torch", ".", "eq", "(", "b_ind", ",", "i", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "# print(\"list(vox_ind.shape)[0]\",list(vox_ind.shape)[0])", "\n", "if", "list", "(", "vox_ind", ".", "shape", ")", "[", "0", "]", ">", "0", ":", "\n", "            ", "valid_b_points", "=", "valid_points", "[", "vox_ind", ",", ":", "]", "\n", "point_in_box_mask", "=", "torch_points_in_box_3d_label_box_label", "(", "valid_b_points", ",", "valid_b_box", ",", "valid_b_num_box", ")", "\n", "box_point_mask_lst", ".", "append", "(", "point_in_box_mask", ")", "\n", "valid_b_point_ind_lst", ".", "append", "(", "vox_ind", ")", "\n", "", "", "return", "box_point_mask_lst", ",", "valid_b_point_ind_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label_box_label": [[149, 188], ["torch.zeros", "torch.zeros", "boxes[].to", "point_box_utils.torch_get_yaw_rotation", "point_box_utils.torch_get_transform", "torch.inverse", "torch.inverse", "torch.prod", "torch.prod", "torch.einsum", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_transform"], ["", "def", "torch_points_in_box_3d_label_box_label", "(", "points", ",", "boxes", ",", "boxes_num", ",", "shift", "=", "0", ")", ":", "\n", "    ", "'''\n    :param points: N, 3\n    :param boxes: M, 8\n    :param slack: scalar\n    :return:\n        foreground_pnt_mask: N\n    '''", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "M", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "assert", "N", ">", "0", ",", "\"point number {} == 0\"", ".", "format", "(", "N", ")", "\n", "if", "M", "==", "0", ":", "\n", "        ", "point_in_box_mask", "=", "torch", ".", "zeros", "(", "(", "N", ",", "M", ")", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "center", "=", "boxes", "[", ":", ",", ":", "3", "]", "\n", "dim", "=", "boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "heading", "=", "boxes", "[", ":", ",", "6", "]", "\n", "box_label", "=", "boxes", "[", "...", ",", "7", "]", ".", "to", "(", "torch", ".", "int8", ")", "\n", "\n", "# M, 3, 3", "\n", "rotation", "=", "torch_get_yaw_rotation", "(", "heading", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "torch_get_transform", "(", "rotation", ",", "center", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "torch", ".", "inverse", "(", "transform", ")", "\n", "# M, 3, 3", "\n", "rotation", "=", "transform", "[", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "# M, 3", "\n", "translation", "=", "transform", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "# N, M, 3", "\n", "# print(\"points, rotation, translation\", points.shape, rotation.shape, translation.shape)", "\n", "point_in_box_frame", "=", "torch", ".", "einsum", "(", "\"nj,mij->nmi\"", ",", "points", ",", "rotation", ")", "+", "translation", "\n", "# N, M, 3", "\n", "point_in_box_mask", "=", "(", "point_in_box_frame", "<=", "dim", "*", "0.5", "+", "shift", ")", "&", "(", "point_in_box_frame", ">=", "-", "dim", "*", "0.5", "-", "shift", ")", "\n", "# N, M", "\n", "point_in_box_mask", "=", "torch", ".", "prod", "(", "point_in_box_mask", ",", "axis", "=", "-", "1", ",", "dtype", "=", "torch", ".", "int8", ")", "\n", "# point_labels = torch.max(point_in_box_mask, axis=1)[0]", "\n", "# box_labels = torch.max(point_in_box_mask, axis=0)[0]", "\n", "", "return", "point_in_box_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label": [[190, 239], ["boxes[].to", "point_box_utils.torch_get_yaw_rotation", "point_box_utils.torch_get_transform", "torch.inverse", "torch.inverse", "torch.prod", "torch.prod", "isinstance", "torch.einsum", "torch.einsum", "torch.unsqueeze", "torch.unsqueeze", "isinstance", "torch.split", "torch.split", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.max", "torch.max", "torch.max", "torch.max", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_transform"], ["", "def", "torch_points_in_box_3d_label", "(", "points", ",", "boxes", ",", "boxes_num", ",", "shift", "=", "0", ")", ":", "\n", "    ", "'''\n    :param points: N, 3\n    :param boxes: M, 8\n    :param slack: scalar\n    :return:\n        foreground_pnt_mask: N\n    '''", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "M", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "assert", "N", ">", "0", ",", "\"point number {} == 0\"", ".", "format", "(", "N", ")", "\n", "if", "M", "==", "0", ":", "\n", "        ", "if", "not", "isinstance", "(", "boxes_num", ",", "int", ")", ":", "\n", "# N", "\n", "            ", "point_label_lst", "=", "[", "torch", ".", "zeros", "(", "(", "N", ")", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "for", "num", "in", "boxes_num", "]", "\n", "", "else", ":", "\n", "            ", "point_label_lst", "=", "[", "torch", ".", "zeros", "(", "(", "N", ")", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "center", "=", "boxes", "[", ":", ",", ":", "3", "]", "\n", "dim", "=", "boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "heading", "=", "boxes", "[", ":", ",", "6", "]", "\n", "box_label", "=", "boxes", "[", "...", ",", "7", "]", ".", "to", "(", "torch", ".", "int8", ")", "\n", "\n", "# M, 3, 3", "\n", "rotation", "=", "torch_get_yaw_rotation", "(", "heading", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "torch_get_transform", "(", "rotation", ",", "center", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "torch", ".", "inverse", "(", "transform", ")", "\n", "# M, 3, 3", "\n", "rotation", "=", "transform", "[", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "# M, 3", "\n", "translation", "=", "transform", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "# N, M, 3", "\n", "# print(\"points, rotation, translation\", points.shape, rotation.shape, translation.shape)", "\n", "point_in_box_frame", "=", "torch", ".", "einsum", "(", "\"nj,mij->nmi\"", ",", "points", ",", "rotation", ")", "+", "translation", "\n", "# N, M, 3", "\n", "point_in_box_mask", "=", "(", "point_in_box_frame", "<=", "dim", "*", "0.5", "+", "shift", ")", "&", "(", "point_in_box_frame", ">=", "-", "dim", "*", "0.5", "-", "shift", ")", "\n", "# N, M", "\n", "point_in_box_mask", "=", "torch", ".", "prod", "(", "point_in_box_mask", ",", "axis", "=", "-", "1", ",", "dtype", "=", "torch", ".", "int8", ")", "\n", "# N, M", "\n", "point_in_box_label", "=", "point_in_box_mask", "*", "torch", ".", "unsqueeze", "(", "box_label", ",", "0", ")", "\n", "if", "not", "isinstance", "(", "boxes_num", ",", "int", ")", ":", "\n", "# N", "\n", "            ", "point_in_box_label_lst", "=", "torch", ".", "split", "(", "point_in_box_label", ",", "boxes_num", ",", "dim", "=", "1", ")", "\n", "point_label_lst", "=", "[", "torch", ".", "max", "(", "point_in_box_label_lst", "[", "i", "]", ",", "axis", "=", "1", ")", "[", "0", "]", "if", "boxes_num", "[", "i", "]", ">", "0", "else", "torch", ".", "zeros", "(", "(", "N", ")", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "for", "i", "in", "range", "(", "len", "(", "boxes_num", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "point_label_lst", "=", "[", "torch", ".", "max", "(", "point_in_box_label", ",", "axis", "=", "1", ")", "[", "0", "]", "]", "\n", "", "", "return", "point_label_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.rotatez": [[241, 250], ["torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "list", "point_box_utils.torch_get_yaw_rotation", "point_box_utils.torch_get_yaw_rotation_2d"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation_2d"], ["", "def", "rotatez", "(", "points", ",", "zyaw", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "if", "list", "(", "points", ".", "shape", ")", "[", "dim", "]", "==", "3", ":", "\n", "        ", "rotation", "=", "torch", ".", "transpose", "(", "torch_get_yaw_rotation", "(", "zyaw", "*", "np", ".", "pi", "/", "180.", ")", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "rotation", "=", "torch", ".", "transpose", "(", "torch_get_yaw_rotation_2d", "(", "zyaw", "*", "np", ".", "pi", "/", "180.", ")", ",", "0", ",", "1", ")", "\n", "\n", "", "points_rot", "=", "torch", ".", "matmul", "(", "points", ",", "rotation", ")", "\n", "# print(\"points\", points.shape, rotation.shape, points_rot.shape)", "\n", "return", "points_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label_mirr_points": [[252, 307], ["torch.zeros", "torch.zeros", "boxes[].to", "point_box_utils.torch_get_yaw_rotation", "point_box_utils.torch_get_transform", "torch.inverse", "torch.inverse", "torch.prod", "torch.prod", "torch.nonzero", "torch.nonzero", "point_in_box_frame.clone", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.unsqueeze", "torch.unsqueeze", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_transform"], ["", "def", "torch_points_in_box_3d_label_mirr_points", "(", "points", ",", "boxes", ",", "mirr_flag", ",", "shift", "=", "0", ")", ":", "\n", "    ", "'''\n    :param points: N, 3\n    :param boxes: M, 8\n    :param slack: scalar\n    :return:\n        foreground_pnt_mask: N\n    '''", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "M", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "assert", "N", ">", "0", ",", "\"point number {} == 0\"", ".", "format", "(", "N", ")", "\n", "if", "M", "==", "0", ":", "\n", "        ", "point_label", "=", "torch", ".", "zeros", "(", "(", "N", ")", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "mirror_fore_point", "=", "None", "\n", "", "else", ":", "\n", "        ", "center", "=", "boxes", "[", ":", ",", ":", "3", "]", "\n", "dim", "=", "boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "heading", "=", "boxes", "[", ":", ",", "6", "]", "\n", "box_label", "=", "boxes", "[", "...", ",", "7", "]", ".", "to", "(", "torch", ".", "int8", ")", "\n", "# M, 3, 3", "\n", "rotation", "=", "torch_get_yaw_rotation", "(", "heading", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "torch_get_transform", "(", "rotation", ",", "center", ")", "\n", "\n", "# M, 4, 4", "\n", "transform", "=", "torch", ".", "inverse", "(", "transform", ")", "\n", "# M, 3, 3", "\n", "reversed_rotation", "=", "transform", "[", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "# M, 3", "\n", "reversed_translation", "=", "transform", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "# N, M, 3", "\n", "# print(\"points, rotation, translation\", points.shape, rotation.shape, translation.shape)", "\n", "point_in_box_frame", "=", "torch", ".", "einsum", "(", "\"nj,mij->nmi\"", ",", "points", ",", "reversed_rotation", ")", "+", "reversed_translation", "\n", "# N, M, 3", "\n", "point_in_box_mask", "=", "(", "point_in_box_frame", "<=", "dim", "*", "0.5", "+", "shift", ")", "&", "(", "point_in_box_frame", ">=", "-", "dim", "*", "0.5", "-", "shift", ")", "\n", "# N, M", "\n", "point_in_box_mask", "=", "torch", ".", "prod", "(", "point_in_box_mask", ",", "axis", "=", "-", "1", ",", "dtype", "=", "torch", ".", "int8", ")", "\n", "# N, M", "\n", "mirr_point_in_box_mask", "=", "point_in_box_mask", "*", "(", "mirr_flag", ">", "0.5", ")", ".", "to", "(", "torch", ".", "int8", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# V, 2", "\n", "# point_in_box_inds = torch.nonzero(point_in_box_mask)", "\n", "mirr_point_in_box_inds", "=", "torch", ".", "nonzero", "(", "mirr_point_in_box_mask", ")", "\n", "\n", "mirror_point_in_box_frame", "=", "point_in_box_frame", ".", "clone", "(", ")", "\n", "# N, M, 3", "\n", "mirror_point_in_box_frame", "[", ":", ",", ":", ",", "1", "]", "=", "-", "mirror_point_in_box_frame", "[", ":", ",", ":", ",", "1", "]", "\n", "# N, M, 3", "\n", "mirror_point_in_box_frame", "=", "torch", ".", "einsum", "(", "\"nmj,mij->nmi\"", ",", "mirror_point_in_box_frame", ",", "rotation", ")", "+", "center", "\n", "# P, 3", "\n", "mirror_fore_point", "=", "mirror_point_in_box_frame", "[", "mirr_point_in_box_inds", "[", ":", ",", "0", "]", ",", "mirr_point_in_box_inds", "[", ":", ",", "1", "]", ",", ":", "]", "\n", "# N, M", "\n", "point_in_box_label", "=", "point_in_box_mask", "*", "torch", ".", "unsqueeze", "(", "box_label", ",", "0", ")", "\n", "# print(\"point_in_box_label\", point_in_box_label.shape)", "\n", "point_label", "=", "torch", ".", "max", "(", "point_in_box_label", ",", "axis", "=", "1", ")", "[", "0", "]", "\n", "", "return", "point_label", ",", "mirror_fore_point", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation": [[310, 320], ["torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "torch_get_yaw_rotation", "(", "yaw", ")", ":", "\n", "    ", "cos_yaw", "=", "torch", ".", "cos", "(", "yaw", ")", "\n", "sin_yaw", "=", "torch", ".", "sin", "(", "yaw", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "yaw", ")", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "yaw", ")", "\n", "return", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "stack", "(", "[", "cos_yaw", ",", "-", "1.0", "*", "sin_yaw", ",", "zeros", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "sin_yaw", ",", "cos_yaw", ",", "zeros", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "zeros", ",", "zeros", ",", "ones", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_transform": [[323, 330], ["torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.unsqueeze", "torch.unsqueeze"], "function", ["None"], ["", "def", "torch_get_transform", "(", "rotation", ",", "translation", ")", ":", "\n", "    ", "translation_n_1", "=", "torch", ".", "unsqueeze", "(", "translation", ",", "-", "1", ")", "\n", "transform", "=", "torch", ".", "cat", "(", "[", "rotation", ",", "translation_n_1", "]", ",", "axis", "=", "-", "1", ")", "\n", "last_row", "=", "torch", ".", "zeros_like", "(", "translation", ")", "\n", "last_row", "=", "torch", ".", "cat", "(", "[", "last_row", ",", "torch", ".", "ones_like", "(", "last_row", "[", "...", ",", "0", ":", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "transform", "=", "torch", ".", "cat", "(", "[", "transform", ",", "torch", ".", "unsqueeze", "(", "last_row", ",", "-", "2", ")", "]", ",", "axis", "=", "-", "2", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_2d_mask": [[332, 369], ["torch.zeros", "torch.zeros", "point_box_utils.torch_get_yaw_rotation_2d", "point_box_utils.torch_get_transform_2d", "torch.inverse", "torch.inverse", "torch.any", "torch.any", "torch.einsum", "torch.einsum", "torch.prod", "torch.prod"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation_2d", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_transform_2d"], ["", "def", "torch_points_in_box_2d_mask", "(", "points", ",", "boxes", ",", "shift", "=", "0", ")", ":", "\n", "    ", "'''\n    :param points: N, 3\n    :param boxes: M, 8\n    :param slack: scalar\n    :return:\n        foreground_pnt_mask: N\n    '''", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "assert", "N", ">", "0", ",", "\"point number == 0\"", "\n", "M", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "if", "M", "==", "0", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "(", "N", ")", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "center", "=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "dim", "=", "boxes", "[", ":", ",", "3", ":", "5", "]", "\n", "heading", "=", "boxes", "[", ":", ",", "6", "]", "\n", "# M, 3, 3", "\n", "rotation", "=", "torch_get_yaw_rotation_2d", "(", "heading", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "torch_get_transform_2d", "(", "rotation", ",", "center", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "torch", ".", "inverse", "(", "transform", ")", "\n", "# M, 3, 3", "\n", "rotation", "=", "transform", "[", ":", ",", ":", "2", ",", ":", "2", "]", "\n", "# M, 3", "\n", "translation", "=", "transform", "[", ":", ",", ":", "2", ",", "2", "]", "\n", "# N, M, 3", "\n", "point_in_box_frame", "=", "torch", ".", "einsum", "(", "\"nj,mij->nmi\"", ",", "points", ",", "rotation", ")", "+", "translation", "\n", "# N, M, 3", "\n", "point_in_box_mask", "=", "(", "point_in_box_frame", "<=", "dim", "*", "0.5", "+", "shift", ")", "&", "(", "point_in_box_frame", ">=", "-", "dim", "*", "0.5", "-", "shift", ")", "\n", "# N, M", "\n", "point_in_box_mask", "=", "torch", ".", "prod", "(", "point_in_box_mask", ",", "axis", "=", "-", "1", ",", "dtype", "=", "torch", ".", "int8", ")", ">", "0", "\n", "# N, M", "\n", "point_mask", "=", "torch", ".", "any", "(", "point_in_box_mask", ",", "axis", "=", "-", "1", ")", "\n", "# print(\"point_label\", point_label.shape)", "\n", "", "return", "point_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation_2d": [[371, 378], ["torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "torch_get_yaw_rotation_2d", "(", "yaw", ")", ":", "\n", "    ", "cos_yaw", "=", "torch", ".", "cos", "(", "yaw", ")", "\n", "sin_yaw", "=", "torch", ".", "sin", "(", "yaw", ")", "\n", "return", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "stack", "(", "[", "cos_yaw", ",", "-", "1.0", "*", "sin_yaw", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "torch", ".", "stack", "(", "[", "sin_yaw", ",", "cos_yaw", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_transform_2d": [[380, 387], ["torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.unsqueeze", "torch.unsqueeze"], "function", ["None"], ["", "def", "torch_get_transform_2d", "(", "rotation", ",", "translation", ")", ":", "\n", "    ", "translation_n_1", "=", "torch", ".", "unsqueeze", "(", "translation", ",", "-", "1", ")", "\n", "transform", "=", "torch", ".", "cat", "(", "[", "rotation", ",", "translation_n_1", "]", ",", "axis", "=", "-", "1", ")", "\n", "last_row", "=", "torch", ".", "zeros_like", "(", "translation", ")", "\n", "last_row", "=", "torch", ".", "cat", "(", "[", "last_row", ",", "torch", ".", "ones_like", "(", "last_row", "[", "...", ",", "0", ":", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "transform", "=", "torch", ".", "cat", "(", "[", "transform", ",", "torch", ".", "unsqueeze", "(", "last_row", ",", "-", "2", ")", "]", ",", "axis", "=", "-", "2", ")", "\n", "return", "transform", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.extract_allpnts": [[27, 50], ["range", "pathlib.Path", "open", "len", "box_dims_lst.append", "all_db_infos_lst.append", "findbestfit.mirror", "pnts_lst.append", "mirrored_pnts_lst.append", "pickle.load", "numpy.concatenate", "findbestfit.get_normalized_cloud", "str", "numpy.zeros_like", "numpy.array", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.mirror", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_normalized_cloud"], ["def", "extract_allpnts", "(", "root_path", "=", "None", ",", "splits", "=", "[", "'train'", ",", "'val'", "]", ")", ":", "\n", "    ", "all_db_infos_lst", "=", "[", "]", "\n", "box_dims_lst", "=", "[", "]", "\n", "pnts_lst", "=", "[", "]", "\n", "mirrored_pnts_lst", "=", "[", "]", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "db_info_save_path", "=", "Path", "(", "root_path", ")", "/", "(", "'kitti_dbinfos_%s.pkl'", "%", "split", ")", "\n", "with", "open", "(", "db_info_save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "all_db_infos", "=", "pickle", ".", "load", "(", "f", ")", "[", "'Car'", "]", "\n", "", "for", "k", "in", "range", "(", "len", "(", "all_db_infos", ")", ")", ":", "\n", "            ", "info", "=", "all_db_infos", "[", "k", "]", "\n", "obj_type", "=", "info", "[", "'name'", "]", "\n", "if", "obj_type", "!=", "\"Car\"", ":", "\n", "                ", "continue", "\n", "", "gt_box", "=", "info", "[", "'box3d_lidar'", "]", "\n", "box_dims_lst", ".", "append", "(", "np", ".", "concatenate", "(", "[", "np", ".", "zeros_like", "(", "gt_box", "[", "0", ":", "3", "]", ")", ",", "np", ".", "array", "(", "gt_box", "[", "3", ":", "6", "]", ")", ",", "np", ".", "zeros_like", "(", "gt_box", "[", "6", ":", "7", "]", ")", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "all_db_infos_lst", ".", "append", "(", "info", ")", "\n", "obj_pnt_fpath", "=", "\"/home/xharlie/dev/occlusion_pcd/data/kitti/detection3d/\"", "+", "info", "[", "'path'", "]", "\n", "car_pnts", "=", "get_normalized_cloud", "(", "str", "(", "obj_pnt_fpath", ")", ",", "gt_box", ",", "bottom", "=", "0.15", ")", "[", ":", ",", ":", "3", "]", "\n", "mirrored_car_pnts", "=", "mirror", "(", "car_pnts", ")", "\n", "pnts_lst", ".", "append", "(", "car_pnts", ")", "\n", "mirrored_pnts_lst", ".", "append", "(", "mirrored_car_pnts", ")", "\n", "", "", "return", "all_db_infos_lst", ",", "box_dims_lst", ",", "pnts_lst", ",", "mirrored_pnts_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.clustering": [[51, 65], ["sklearn.cluster.KMeans().fit", "sklearn.cluster.DBSCAN().fit", "numpy.zeros_like", "numpy.asarray", "range", "sklearn.cluster.KMeans", "sklearn.cluster.DBSCAN"], "function", ["None"], ["", "def", "clustering", "(", "m_nm", ",", "num_cluster", ",", "box_dims_lst", ")", ":", "\n", "    ", "train_box_dims", ",", "val_box_dims", "=", "box_dims_lst", "[", "0", "]", ",", "box_dims_lst", "[", "1", "]", "\n", "if", "m_nm", "==", "\"kmeans\"", ":", "\n", "        ", "clusterer", "=", "KMeans", "(", "n_clusters", "=", "num_cluster", ",", "random_state", "=", "1", ")", ".", "fit", "(", "train_box_dims", ")", "\n", "", "elif", "m_nm", "==", "\"DBSCAN\"", ":", "\n", "        ", "clusterer", "=", "DBSCAN", "(", "eps", "=", "0.3", ",", "min_samples", "=", "10", ")", ".", "fit", "(", "train_box_dims", ")", "\n", "core_samples_mask", "=", "np", ".", "zeros_like", "(", "clusterer", ".", "labels_", ",", "dtype", "=", "bool", ")", "\n", "core_samples_mask", "[", "clusterer", ".", "core_sample_indices_", "]", "=", "True", "\n", "labels", "=", "clusterer", ".", "labels_", "\n", "# print(train_box_dims.shape, clusterer.labels_.shape)", "\n", "# print(clusterer.cluster_centers_)", "\n", "# print(np.min(train_box_dims, axis=0))", "\n", "", "indices", "=", "[", "np", ".", "asarray", "(", "(", "clusterer", ".", "labels_", "==", "i", ")", ".", "nonzero", "(", ")", ")", "[", "0", ",", ":", "]", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "return", "clusterer", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.get_normalized_cloud": [[66, 70], ["numpy.fromfile().reshape", "numpy.concatenate", "findbestfit.remove_bottom", "numpy.fromfile", "findbestfit.single_rotate_points_along_z", "str"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_bottom", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.single_rotate_points_along_z"], ["", "def", "get_normalized_cloud", "(", "obj_pnt_fpath", ",", "gt_box", ",", "bottom", "=", "0.0", ")", ":", "\n", "    ", "pnts", "=", "np", ".", "fromfile", "(", "str", "(", "obj_pnt_fpath", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "pnts", "=", "np", ".", "concatenate", "(", "[", "single_rotate_points_along_z", "(", "pnts", "[", ":", ",", ":", "3", "]", ",", "-", "gt_box", "[", "6", "]", ")", ",", "pnts", "[", ":", ",", "3", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "return", "remove_bottom", "(", "pnts", ",", "gt_box", ",", "bottom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.remove_bottom": [[71, 77], ["None"], "function", ["None"], ["", "def", "remove_bottom", "(", "pnts", ",", "gt_box", ",", "bottom", ")", ":", "\n", "    ", "if", "bottom", "==", "0.0", ":", "\n", "        ", "return", "pnts", "\n", "", "zthresh", "=", "-", "gt_box", "[", "5", "]", "/", "2", "+", "bottom", "\n", "keep_bool", "=", "pnts", "[", ":", ",", "2", "]", ">", "zthresh", "\n", "return", "pnts", "[", "keep_bool", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.vis_cluster": [[78, 106], ["visualize_utils.draw_scenes_multi", "mayavi.axes", "mayavi.show", "tuple", "range", "range", "range", "range", "range", "numpy.array", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "vis_cluster", "(", "clusterer", ",", "box_dims", ",", "cluster_num", ")", ":", "\n", "    ", "colors", "=", "[", "'#e6194b'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#4363d8'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "# fig = plt.figure()", "\n", "# ax = fig.add_subplot(111, projection='3d')", "\n", "#", "\n", "# # For each set of style and range settings, plot n random points in the box", "\n", "# # defined by x in [23, 32], y in [0, 100], z in [zlow, zhigh].", "\n", "# for i in range(box_dims.shape[0]):", "\n", "#     xs = box_dims[i,0]", "\n", "#     ys = box_dims[i,1]", "\n", "#     zs = box_dims[i,2]", "\n", "#     ax.scatter(xs, ys, zs, c=colors[clusterer.labels_[i]])", "\n", "#", "\n", "# ax.set_xlabel('X Label')", "\n", "# ax.set_ylabel('Y Label')", "\n", "# ax.set_zlabel('Z Label')", "\n", "# ax.set_aspect('equal')", "\n", "#", "\n", "# plt.show()", "\n", "binary", "=", "[", "clusterer", ".", "labels_", "==", "i", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "box_pnt_lst", "=", "[", "box_dims", "[", "binary", "[", "i", "]", "]", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "i", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "# vu.draw_scenes_multi(box_pnt_lst, colors_lst, size_lst, mode_lst, bgcolor=(1,1,1))", "\n", "vu", ".", "draw_scenes_multi", "(", "box_pnt_lst", ",", "colors_lst", ",", "size_lst", ",", "mode_lst", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "axes", "=", "mlab", ".", "axes", "(", ")", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.sample_template": [[107, 156], ["print", "numpy.array", "numpy.array", "findbestfit.cal_in_cluster_template", "os.makedirs", "findbestfit.get_normalized_cloud", "gt_box_lst.append", "pnts_lst.append", "max", "num_pnts_lst.append", "numpy.argsort", "range", "range", "str", "len", "findbestfit.mirror", "findbestfit.vis_pair", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cal_in_cluster_template", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_normalized_cloud", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.mirror", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.vis_pair"], ["", "def", "sample_template", "(", "all_db_infos", ",", "indices", ",", "cluster_num", ",", "clu_id", "=", "None", ")", ":", "\n", "    ", "if", "clu_id", "is", "None", ":", "\n", "        ", "clu_id", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", "]", "\n", "", "for", "i", "in", "clu_id", ":", "\n", "        ", "inds", "=", "indices", "[", "i", "]", "\n", "# print(\"inds\", inds.shape)", "\n", "pnts_lst", "=", "[", "]", "\n", "gt_box_lst", "=", "[", "]", "\n", "max_num_pnts", "=", "0", "\n", "num_pnts_lst", "=", "[", "]", "\n", "print", "(", "\"-----------cluster{}------------\"", ".", "format", "(", "i", ")", ")", "\n", "for", "k", "in", "inds", ":", "\n", "            ", "info", "=", "all_db_infos", "[", "k", "]", "\n", "obj_pnt_fpath", "=", "\"/home/xharlie/dev/occlusion_pcd/data/kitti/detection3d/\"", "+", "info", "[", "'path'", "]", "\n", "gt_box", "=", "info", "[", "'box3d_lidar'", "]", "\n", "car_pnts", "=", "get_normalized_cloud", "(", "str", "(", "obj_pnt_fpath", ")", ",", "gt_box", ",", "bottom", "=", "0.15", ")", "\n", "if", "car_pnts", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "gt_box_lst", ".", "append", "(", "gt_box", ")", "\n", "pnts_lst", ".", "append", "(", "car_pnts", ")", "\n", "max_num_pnts", "=", "max", "(", "max_num_pnts", ",", "car_pnts", ".", "shape", "[", "0", "]", ")", "\n", "num_pnts_lst", ".", "append", "(", "car_pnts", ".", "shape", "[", "0", "]", ")", "\n", "", "num_pnts_arry", "=", "np", ".", "array", "(", "num_pnts_lst", ")", "\n", "ranks", "=", "np", ".", "argsort", "(", "num_pnts_arry", ")", "[", ":", ":", "-", "1", "]", "\n", "gt_box_arry", "=", "np", ".", "array", "(", "gt_box_lst", ")", "\n", "num_template", "=", "2", "\n", "tmplate_id_lst", "=", "cal_in_cluster_template", "(", "pnts_lst", ",", "max_num_pnts", ",", "num_pnts_arry", ",", "num_template", "=", "num_template", ")", "\n", "path", "=", "\"/home/xharlie/dev/occlusion_pcd/kitti/detection3d/template/{}_{}/\"", ".", "format", "(", "cluster_num", ",", "num_template", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "# ######## save ########", "\n", "# template_pnts = None", "\n", "# for ind in range(len(tmplate_id_lst)):", "\n", "#     tmp_id = tmplate_id_lst[ind]", "\n", "#     secnd_tmp = mirror(pnts_lst[tmp_id])", "\n", "#     save_pnts_box(secnd_tmp, gt_box_arry[tmp_id, :], \"clstr_{}_tmplt_{}.bin\".format(i,ind), path + \"clstr_{}_tmplt_{}.bin\".format(i,ind))", "\n", "#     if template_pnts is None:", "\n", "#         template_pnts = secnd_tmp", "\n", "#     else:", "\n", "#         secnd_tmp = remove_voxelpnts(template_pnts, secnd_tmp, voxel_size=[0.02, 0.02, 0.02], nearest_dist=0.05)", "\n", "#         template_pnts = np.concatenate([template_pnts, secnd_tmp], axis=0)", "\n", "# save_pnts_box(template_pnts, gt_box_arry[tmplate_id_lst[0], :], \"clstr_{}_combine.bin\".format(i), path + \"clstr_{}_combine.bin\".format(i))", "\n", "\n", "####### iter view", "\n", "for", "tmp_id", "in", "tmplate_id_lst", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "                ", "tind", ",", "sind", "=", "tmp_id", ",", "ranks", "[", "10", "]", "\n", "template_pnts", "=", "mirror", "(", "pnts_lst", "[", "tmp_id", "]", ")", "\n", "vis_pair", "(", "template_pnts", ",", "gt_box_arry", "[", "tind", ":", "tind", "+", "1", ",", ":", "]", ",", "pnts_lst", "[", "sind", "]", ",", "gt_box_arry", "[", "sind", ":", "sind", "+", "1", ",", ":", "]", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.save_pnts_box": [[175, 183], ["open", "pickle.dump"], "function", ["None"], ["", "", "", "", "def", "save_pnts_box", "(", "pnts", ",", "box", ",", "name", ",", "path", ")", ":", "\n", "    ", "template", "=", "{", "\n", "\"name\"", ":", "name", ",", "\n", "\"points\"", ":", "pnts", ",", "\n", "\"box\"", ":", "box", "\n", "}", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "template", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.toTensor": [[443, 445], ["torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "function", ["None"], ["", "def", "toTensor", "(", "sample", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "sample", ")", ".", "float", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.get_batch_stats": [[496, 505], ["torch.sum", "torch.min", "torch.max"], "function", ["None"], ["", "def", "get_batch_stats", "(", "dist", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", ":", "\n", "    ", "masked_dist", "=", "dist", "*", "mask_arry", "\n", "addmin_dist", "=", "masked_dist", "+", "reversemask_arry", "\n", "addmax_dist", "=", "masked_dist", "-", "reversemask_arry", "\n", "mean_instance", "=", "torch", ".", "sum", "(", "masked_dist", ",", "dim", "=", "1", ")", "/", "num_pnts_tensor", "# N CARS to the template", "\n", "min_instance", "=", "torch", ".", "min", "(", "addmin_dist", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "max_instance", "=", "torch", ".", "max", "(", "addmax_dist", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "mean_instance", "[", "mean_instance", "!=", "mean_instance", "]", "=", "100.0", "\n", "return", "mean_instance", ",", "min_instance", ",", "max_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.cal_in_cluster_template": [[197, 261], ["range", "findbestfit.toTensor", "findbestfit.toTensor", "findbestfit.toTensor", "findbestfit.toTensor", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "pnts_padding_lst.append", "mask_lst.append", "reversemask_lst.append", "numpy.array", "numpy.array", "numpy.array", "range", "numpy.array", "numpy.array", "numpy.array", "range", "findbestfit.cal_template_cd_pntlst", "print", "len", "findbestfit.mirror", "findbestfit.cal_template_cd_pntlst", "mean_lst.append", "max_lst.append", "min_lst.append", "numpy.mean", "numpy.max", "numpy.mean", "numpy.argsort", "range", "tmplate_id_lst.append", "numpy.mean", "numpy.mean", "numpy.max", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.zeros", "len", "print", "print", "numpy.ones", "numpy.sum", "print", "numpy.mean", "numpy.mean", "numpy.max", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cal_template_cd_pntlst", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.mirror", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cal_template_cd_pntlst"], ["", "def", "cal_in_cluster_template", "(", "pnts_lst", ",", "max_num_pnts", ",", "num_pnts_arry", ",", "num_template", "=", "1", ",", "template_pnts", "=", "None", ")", ":", "\n", "########## single for loop ###########", "\n", "# tind, sind = ranks[rtind], ranks[1]", "\n", "# template_pnts = mirror(pnts_lst[tind][:, :3])", "\n", "# cd_4pose(pnts_lst[sind][:, :3], template_pnts)", "\n", "# vis_pair(template_pnts, gt_box_arry[tind:tind+1,:], pnts_lst[sind], gt_box_arry[sind:sind+1,:])", "\n", "########## match for loop ###########", "\n", "    ", "pnts_padding_lst", "=", "[", "]", "\n", "mask_lst", "=", "[", "]", "\n", "reversemask_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "        ", "padding_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts_lst", "[", "i", "]", ",", "np", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", ",", "4", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "mask", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "[", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "np", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", ")", "\n", "reversemask", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "10.0", "*", "np", ".", "ones", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", ")", "\n", "pnts_padding_lst", ".", "append", "(", "padding_pnts", ")", "\n", "mask_lst", ".", "append", "(", "mask", ")", "\n", "reversemask_lst", ".", "append", "(", "reversemask", ")", "\n", "", "pnts_padding_arry", "=", "toTensor", "(", "np", ".", "array", "(", "pnts_padding_lst", ")", ")", "\n", "mask_arry", "=", "toTensor", "(", "np", ".", "array", "(", "mask_lst", ")", ")", "\n", "reversemask_arry", "=", "toTensor", "(", "np", ".", "array", "(", "reversemask_lst", ")", ")", "\n", "num_pnts_tensor", "=", "toTensor", "(", "num_pnts_arry", ")", "\n", "\n", "if", "template_pnts", "is", "None", ":", "\n", "        ", "mean_lst", "=", "[", "]", "\n", "max_lst", "=", "[", "]", "\n", "min_lst", "=", "[", "]", "\n", "for", "rtind", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "            ", "tind", "=", "rtind", "# ranks[rtind]", "\n", "template_pnts", "=", "mirror", "(", "pnts_lst", "[", "tind", "]", "[", ":", ",", ":", "3", "]", ")", "\n", "mean_instance", ",", "min_instance", ",", "max_instance", "=", "cal_template_cd_pntlst", "(", "template_pnts", ",", "pnts_padding_arry", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", "\n", "mean_lst", ".", "append", "(", "mean_instance", ")", "\n", "max_lst", ".", "append", "(", "max_instance", ")", "\n", "min_lst", ".", "append", "(", "min_instance", ")", "\n", "\n", "", "mean_array", "=", "np", ".", "array", "(", "mean_lst", ")", "\n", "max_array", "=", "np", ".", "array", "(", "max_lst", ")", "\n", "min_array", "=", "np", ".", "array", "(", "min_lst", ")", "\n", "tmplate_id_lst", "=", "[", "]", "\n", "\n", "for", "num", "in", "range", "(", "num_template", ")", ":", "\n", "            ", "mean_max_array", "=", "np", ".", "mean", "(", "max_array", ",", "axis", "=", "1", ")", "\n", "max_max_array", "=", "np", ".", "max", "(", "max_array", ",", "axis", "=", "1", ")", "\n", "mean_mean_array", "=", "np", ".", "mean", "(", "mean_array", ",", "axis", "=", "1", ")", "\n", "fit_ranks", "=", "np", ".", "argsort", "(", "mean_max_array", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "fit_ranks", ")", ")", ":", "\n", "                ", "tmp_id", "=", "fit_ranks", "[", "i", "]", "\n", "# print(\"best tmplt id\", tmp_id, \"mean_mean\", mean_mean_array[tmp_id], \"mean_max\", mean_max_array[tmp_id], \"max_max\", max_max_array[tmp_id])", "\n", "leftover_ind", "=", "max_array", "[", "tmp_id", "]", ">", "0.3", "\n", "preserve_ind", "=", "max_array", "[", "tmp_id", "]", "<=", "0.3", "\n", "if", "np", ".", "sum", "(", "preserve_ind", ")", ">", "0", ":", "\n", "                    ", "print", "(", "i", ",", "\" max_array\"", ",", "max_array", ".", "shape", ",", "\"leftover_ind\"", ",", "np", ".", "sum", "(", "leftover_ind", ")", ",", "\"preserve_ind\"", ",", "np", ".", "sum", "(", "preserve_ind", ")", ")", "\n", "break", "\n", "", "", "if", "num", "==", "num_template", "-", "1", ":", "\n", "                ", "print", "(", "\"last tmplt id\"", ",", "tmp_id", ",", "\"mean_mean\"", ",", "mean_mean_array", "[", "tmp_id", "]", ",", "\"mean_max\"", ",", "mean_max_array", "[", "tmp_id", "]", ",", "\"max_max\"", ",", "max_max_array", "[", "tmp_id", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"preserved tmplt id \"", ",", "tmp_id", ",", "\"mean_mean\"", ",", "np", ".", "mean", "(", "mean_array", "[", "tmp_id", "]", "[", "preserve_ind", "]", ")", ",", "\"mean_max\"", ",", "np", ".", "mean", "(", "max_array", "[", "tmp_id", "]", "[", "preserve_ind", "]", ")", ",", "\"max_max\"", ",", "np", ".", "max", "(", "max_array", "[", "tmp_id", "]", "[", "preserve_ind", "]", ")", ")", "\n", "mean_array", "=", "mean_array", "[", ":", ",", "leftover_ind", "]", "\n", "max_array", "=", "max_array", "[", ":", ",", "leftover_ind", "]", "\n", "", "tmplate_id_lst", ".", "append", "(", "tmp_id", ")", "\n", "", "", "else", ":", "\n", "        ", "mean_instance", ",", "min_instance", ",", "max_instance", "=", "cal_template_cd_pntlst", "(", "template_pnts", ",", "pnts_padding_arry", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", "\n", "print", "(", "\"target tmplt \"", ",", "\"mean_mean\"", ",", "np", ".", "mean", "(", "mean_instance", ")", ",", "\"mean_max\"", ",", "np", ".", "mean", "(", "max_instance", ")", ",", "\"max_max\"", ",", "np", ".", "max", "(", "max_instance", ")", ")", "\n", "tmplate_id_lst", "=", "None", "\n", "", "return", "tmplate_id_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.cal_template_cd_pntlst": [[262, 269], ["numpy.stack", "chamfer_dist", "torch.sqrt", "findbestfit.get_batch_stats", "findbestfit.toTensor", "mean_instance.cpu().numpy", "min_instance.cpu().numpy", "max_instance.cpu().numpy", "range", "mean_instance.cpu", "min_instance.cpu", "max_instance.cpu", "list"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_batch_stats", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor"], ["", "def", "cal_template_cd_pntlst", "(", "template_pnts", ",", "pnts_padding_arry", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", ":", "\n", "    ", "batch_template_pnts", "=", "np", ".", "stack", "(", "[", "template_pnts", "[", ":", ",", ":", "3", "]", "for", "j", "in", "range", "(", "list", "(", "pnts_padding_arry", ".", "shape", ")", "[", "0", "]", ")", "]", ")", "\n", "dist1", ",", "_", "=", "chamfer_dist", "(", "pnts_padding_arry", "[", ":", ",", ":", ",", ":", "3", "]", ",", "toTensor", "(", "batch_template_pnts", ")", ")", "\n", "# print(\"dist1.shape\", dist1.shape, pnts_padding_arry.shape, batch_template_pnts.shape)", "\n", "dist_l1", "=", "torch", ".", "sqrt", "(", "dist1", ")", "\n", "mean_instance", ",", "min_instance", ",", "max_instance", "=", "get_batch_stats", "(", "dist_l1", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", "\n", "return", "mean_instance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "min_instance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "max_instance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.remove_voxelpnts": [[271, 286], ["numpy.array", "numpy.concatenate", "numpy.floor", "numpy.floor", "findbestfit.find_overlaps", "findbestfit.cd_4pose", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.ceil().astype", "numpy.ceil().astype", "findbestfit.coords3inds", "findbestfit.coords3inds", "numpy.expand_dims", "numpy.expand_dims", "numpy.minimum", "numpy.maximum", "numpy.expand_dims", "numpy.expand_dims", "cd_4pose.cpu().numpy", "numpy.expand_dims", "numpy.expand_dims", "numpy.ceil", "numpy.ceil", "cd_4pose.cpu"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.find_overlaps", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.cd_4pose", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.coords3inds", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.coords3inds"], ["", "def", "remove_voxelpnts", "(", "sourcepnts", ",", "target_pnts", ",", "voxel_size", "=", "np", ".", "array", "(", "[", "0.01", ",", "0.01", ",", "0.01", "]", ")", ",", "nearest_dist", "=", "None", ")", ":", "\n", "    ", "augpnts", "=", "target_pnts", "[", ":", ",", ":", "3", "]", "\n", "gtpnts", "=", "sourcepnts", "[", ":", ",", ":", "3", "]", "\n", "if", "nearest_dist", "is", "None", ":", "\n", "        ", "min_gtpnts", ",", "max_gtpnts", ",", "min_augpnts", ",", "max_augpnts", "=", "np", ".", "min", "(", "gtpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "gtpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "min", "(", "augpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "augpnts", ",", "axis", "=", "0", ")", "\n", "range", "=", "np", ".", "concatenate", "(", "[", "np", ".", "minimum", "(", "min_gtpnts", ",", "min_augpnts", ")", ",", "np", ".", "maximum", "(", "max_gtpnts", ",", "max_augpnts", ")", "]", ",", "axis", "=", "0", ")", "\n", "gtpnts_ind", "=", "np", ".", "floor", "(", "(", "gtpnts", "-", "np", ".", "expand_dims", "(", "range", "[", ":", "3", "]", ",", "axis", "=", "0", ")", ")", "/", "np", ".", "expand_dims", "(", "voxel_size", ",", "axis", "=", "0", ")", ")", "\n", "augpnts_ind", "=", "np", ".", "floor", "(", "(", "augpnts", "-", "np", ".", "expand_dims", "(", "range", "[", ":", "3", "]", ",", "axis", "=", "0", ")", ")", "/", "np", ".", "expand_dims", "(", "voxel_size", ",", "axis", "=", "0", ")", ")", "\n", "nx", ",", "ny", "=", "np", ".", "ceil", "(", "(", "range", "[", "3", "]", "-", "range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "np", ".", "ceil", "(", "(", "range", "[", "4", "]", "-", "range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "mask", "=", "find_overlaps", "(", "coords3inds", "(", "gtpnts_ind", ",", "nx", ",", "ny", ")", ",", "coords3inds", "(", "augpnts_ind", ",", "nx", ",", "ny", ")", ")", "\n", "# print(\"augpnts_ind\", mask.shape, augpnts_ind.shape, augpnts_ind[mask].shape)", "\n", "", "else", ":", "\n", "        ", "dist_l1", "=", "cd_4pose", "(", "np", ".", "expand_dims", "(", "augpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "expand_dims", "(", "gtpnts", ",", "axis", "=", "0", ")", ")", "\n", "mask", "=", "dist_l1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ">", "nearest_dist", "\n", "", "return", "target_pnts", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.find_overlaps": [[289, 297], ["numpy.argsort", "numpy.searchsorted", "numpy.take"], "function", ["None"], ["", "def", "find_overlaps", "(", "base", ",", "aug", ")", ":", "\n", "    ", "x", ",", "y", "=", "base", ",", "aug", "\n", "index", "=", "np", ".", "argsort", "(", "x", ")", "\n", "sorted_x", "=", "x", "[", "index", "]", "\n", "sorted_index", "=", "np", ".", "searchsorted", "(", "sorted_x", ",", "y", ")", "\n", "yindex", "=", "np", ".", "take", "(", "index", ",", "sorted_index", ",", "mode", "=", "\"clip\"", ")", "\n", "mask", "=", "x", "[", "yindex", "]", "!=", "y", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.coords3inds": [[298, 306], ["inds.astype"], "function", ["None"], ["", "def", "coords3inds", "(", "coords", ",", "ny", ",", "nx", ")", ":", "\n", "    ", "gperm1", "=", "nx", "*", "ny", "\n", "gperm2", "=", "nx", "\n", "zdim", "=", "coords", "[", ":", ",", "2", "]", "*", "gperm1", "\n", "ydim", "=", "coords", "[", ":", ",", "1", "]", "*", "gperm2", "\n", "xdim", "=", "coords", "[", ":", ",", "0", "]", "\n", "inds", "=", "zdim", "+", "ydim", "+", "xdim", "\n", "return", "inds", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.mirror": [[309, 313], ["numpy.concatenate", "findbestfit.remove_voxelpnts", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_voxelpnts"], ["", "def", "mirror", "(", "pnts", ",", "lastchannel", "=", "3", ")", ":", "\n", "    ", "mirror_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts", "[", "...", ",", "0", ":", "1", "]", ",", "-", "pnts", "[", "...", ",", "1", ":", "2", "]", ",", "pnts", "[", "...", ",", "2", ":", "lastchannel", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "mirror_pnts", "=", "remove_voxelpnts", "(", "pnts", ",", "mirror_pnts", ",", "nearest_dist", "=", "0.05", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "pnts", ",", "mirror_pnts", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.batch_vis_pair": [[315, 352], ["numpy.tile", "numpy.zeros_like", "numpy.zeros_like", "int", "int", "numpy.meshgrid", "range", "numpy.concatenate", "numpy.concatenate", "visualize_utils.draw_scenes_multi", "mayavi.show", "xv.reshape", "yv.reshape", "len", "numpy.array", "moved_pnts_lst.append", "moved_temp_lst.append", "len", "numpy.ceil", "numpy.ceil", "numpy.arange", "numpy.arange", "len", "len", "tuple", "tuple", "numpy.sqrt", "numpy.sqrt", "range", "range", "range", "range", "range", "range", "range", "range", "len", "len", "numpy.array", "numpy.array", "PIL.ImageColor.getcolor", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "batch_vis_pair", "(", "template", ",", "temp_box", ",", "pnts_lst", ",", "gt_box_arry", ",", "ranks", ")", ":", "\n", "    ", "moved_temp_lst", "=", "[", "]", "\n", "moved_pnts_lst", "=", "[", "]", "\n", "temp_box", "=", "np", ".", "tile", "(", "temp_box", ",", "[", "len", "(", "pnts_lst", ")", ",", "1", "]", ")", "\n", "temp_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "temp_box", "[", ":", ",", "-", "1", "]", ")", "\n", "gt_box_arry", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "gt_box_arry", "[", ":", ",", "-", "1", "]", ")", "\n", "width", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "pnts_lst", ")", ")", ")", "*", "1.2", ")", "\n", "height", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "pnts_lst", ")", ")", ")", "/", "1.2", ")", "\n", "x", "=", "(", "np", ".", "arange", "(", "height", ")", "-", "height", "//", "2", ")", "*", "6", "\n", "y", "=", "(", "np", ".", "arange", "(", "width", ")", "-", "width", "//", "2", ")", "*", "4", "\n", "xv", ",", "yv", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ",", "indexing", "=", "'ij'", ")", "\n", "xv", ",", "yv", "=", "xv", ".", "reshape", "(", "-", "1", ")", ",", "yv", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "        ", "i", "=", "ranks", "[", "ind", "]", "\n", "shift", "=", "np", ".", "array", "(", "[", "[", "xv", "[", "ind", "]", ",", "yv", "[", "ind", "]", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "temp_box", "[", "i", ",", ":", "3", "]", ",", "gt_box_arry", "[", "i", ",", ":", "3", "]", "=", "shift", "[", "0", "]", ",", "shift", "[", "0", "]", "\n", "# print(template.shape, pnts.shape)", "\n", "colors", "=", "[", "'#e6194b'", ",", "'#4363d8'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "moved_pnts_lst", ".", "append", "(", "pnts_lst", "[", "i", "]", "+", "shift", ")", "\n", "moved_temp_lst", ".", "append", "(", "template", "+", "shift", ")", "\n", "# print(shift, template.shape, shift.shape, np.mean((template + shift), axis=0))", "\n", "# print(\"xv\",xv.shape, len(moved_pnts_lst), len(moved_temp_lst))", "\n", "", "moved_temp_pnt", "=", "np", ".", "concatenate", "(", "moved_temp_lst", ",", "axis", "=", "0", ")", "\n", "moved_pnts", "=", "np", ".", "concatenate", "(", "moved_pnts_lst", ",", "axis", "=", "0", ")", "\n", "tmp_section", "=", "len", "(", "moved_temp_pnt", ")", "//", "200000", "+", "1", "\n", "pnt_section", "=", "len", "(", "moved_pnts", ")", "//", "200000", "+", "1", "\n", "render_pnts_lst", "=", "[", "moved_temp_pnt", "[", "i", "*", "200000", ":", "(", "i", "+", "1", ")", "*", "200000", "]", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "moved_pnts", "[", "i", "*", "200000", ":", "(", "i", "+", "1", ")", "*", "200000", "]", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "0", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "1", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "0.04", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "\"sphere\"", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "\n", "vu", ".", "draw_scenes_multi", "(", "render_pnts_lst", ",", "colors_lst", ",", "size_lst", ",", "mode_lst", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ")", "#, gt_boxes=temp_box, gt_boxes_color=colors_lst[0], ref_boxes=gt_box_arry, ref_boxes_color=colors_lst[1])", "\n", "\n", "# vu.draw_scenes_multi([np.concatenate(moved_temp_lst[:3], axis=0), np.concatenate(moved_pnts_lst[:3], axis=0)], colors_lst, size_lst, mode_lst, bgcolor=(1, 1, 1), gt_boxes=temp_box, gt_boxes_color=colors_lst[0], ref_boxes=gt_box_arry, ref_boxes_color=colors_lst[1])", "\n", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.vis_pair": [[354, 371], ["numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "visualize_utils.draw_scenes_multi", "mayavi.show", "tuple", "range", "range", "range", "numpy.array", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "vis_pair", "(", "template", ",", "temp_box", ",", "pnts", ",", "pnts_box", ")", ":", "\n", "    ", "temp_box", "[", ":", ",", ":", "3", "]", "=", "np", ".", "zeros_like", "(", "temp_box", "[", ":", ",", ":", "3", "]", ")", "\n", "temp_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", "-", "1", "]", ")", "\n", "pnts_box", "[", ":", ",", ":", "3", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", ":", "3", "]", ")", "\n", "pnts_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", "-", "1", "]", ")", "\n", "# print(template.shape, pnts.shape)", "\n", "colors", "=", "[", "'#e6194b'", ",", "'#4363d8'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "\n", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "\n", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "pnts_lst", "=", "[", "template", ",", "pnts", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "i", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "# vu.draw_scenes_multi(box_pnt_lst, colors_lst, size_lst, mode_lst, bgcolor=(1,1,1))", "\n", "vu", ".", "draw_scenes_multi", "(", "pnts_lst", ",", "colors_lst", ",", "size_lst", ",", "mode_lst", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ",", "gt_boxes", "=", "temp_box", ",", "gt_boxes_color", "=", "colors_lst", "[", "0", "]", ",", "ref_boxes", "=", "pnts_box", ",", "ref_boxes_color", "=", "colors_lst", "[", "1", "]", ")", "\n", "# axes = mlab.axes()", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.cd_4pose": [[372, 380], ["chamfer_dist", "torch.sqrt", "findbestfit.toTensor", "findbestfit.toTensor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor"], ["", "def", "cd_4pose", "(", "scene", ",", "template", ")", ":", "\n", "# points and points_reconstructed are n_points x 3 matrices", "\n", "    ", "dist1", ",", "_", "=", "chamfer_dist", "(", "toTensor", "(", "scene", ")", ",", "toTensor", "(", "template", ")", ")", "\n", "# print(\"dist1.shape\", dist1.shape)", "\n", "dist_l1", "=", "torch", ".", "sqrt", "(", "dist1", ")", "\n", "# mean_l1, min_l1, max_l1 = torch.mean(dist_l1, dim=1), torch.min(dist_l1, dim=1)[0], torch.max(dist_l1, dim=1)[0]", "\n", "# print(\"mean_l1 {}, min_l1 {}, max_l1 {}\".format(mean_l1, min_l1, max_l1))", "\n", "return", "dist_l1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.single_rotate_points_along_z": [[381, 401], ["numpy.cos", "numpy.sin", "numpy.zeros_like", "numpy.ones_like", "numpy.stack().reshape", "numpy.matmul", "numpy.stack"], "function", ["None"], ["", "def", "single_rotate_points_along_z", "(", "points", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (B, N, 3 + C)\n        angle: (B), angle along z-axis, angle increases x ==> y\n    Returns:\n\n    \"\"\"", "\n", "\n", "cosa", "=", "np", ".", "cos", "(", "angle", ")", "\n", "sina", "=", "np", ".", "sin", "(", "angle", ")", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "angle", ")", "\n", "ones", "=", "np", ".", "ones_like", "(", "angle", ")", "\n", "rot_matrix", "=", "np", ".", "stack", "(", "(", "\n", "cosa", ",", "sina", ",", "zeros", ",", "\n", "-", "sina", ",", "cosa", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "\n", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "points_rot", "=", "np", ".", "matmul", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "rot_matrix", ")", "\n", "return", "points_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.get_iou": [[403, 415], ["len", "range", "torch.cat", "print", "min", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "iou3d_lst.append"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "def", "get_iou", "(", "box_tensor", ")", ":", "\n", "    ", "limit", "=", "len", "(", "box_dims_lst", ")", "\n", "start", "=", "0", "\n", "iou3d_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "11", ")", ":", "\n", "        ", "end", "=", "min", "(", "start", "+", "limit", "//", "10", ",", "limit", ")", "\n", "iou3d", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "box_tensor", "[", "start", ":", "end", ",", ":", "]", ",", "box_tensor", ")", "\n", "iou3d_lst", ".", "append", "(", "iou3d", ")", "\n", "start", "=", "end", "\n", "", "iou3d", "=", "torch", ".", "cat", "(", "iou3d_lst", ",", "dim", "=", "0", ")", "\n", "print", "(", "\"iou3d\"", ",", "iou3d", ".", "shape", ")", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.padding_pnt_tensors": [[417, 441], ["range", "isinstance", "findbestfit.toTensor", "findbestfit.toTensor", "findbestfit.toTensor", "len", "isinstance", "numpy.concatenate", "numpy.concatenate", "pnts_padding_lst.append", "mask_lst.append", "reversemask_lst.append", "torch.stack", "findbestfit.toTensor", "numpy.array", "numpy.array", "torch.cat", "numpy.concatenate", "numpy.array", "numpy.ones", "numpy.zeros", "numpy.zeros", "torch.zeros", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor"], ["", "def", "padding_pnt_tensors", "(", "pnts_lst", ",", "max_num_pnts", "=", "None", ",", "num_pnts_arry", "=", "None", ")", ":", "\n", "    ", "pnts_padding_lst", "=", "[", "]", "\n", "mask_lst", "=", "[", "]", "\n", "reversemask_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "pnts_lst", "[", "i", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "padding_pnts", "=", "torch", ".", "cat", "(", "[", "pnts_lst", "[", "i", "]", ",", "torch", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", ",", "3", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "\"cuda\"", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "padding_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts_lst", "[", "i", "]", ",", "np", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", ",", "3", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "mask", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "[", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", ")", "\n", "reversemask", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "10.0", "*", "np", ".", "ones", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", ")", "\n", "pnts_padding_lst", ".", "append", "(", "padding_pnts", ")", "\n", "mask_lst", ".", "append", "(", "mask", ")", "\n", "reversemask_lst", ".", "append", "(", "reversemask", ")", "\n", "", "if", "isinstance", "(", "pnts_padding_lst", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "pnts_padding_tensor", "=", "torch", ".", "stack", "(", "pnts_padding_lst", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "pnts_padding_tensor", "=", "toTensor", "(", "np", ".", "array", "(", "pnts_padding_lst", ")", ")", "\n", "", "mask_tensor", "=", "toTensor", "(", "np", ".", "array", "(", "mask_lst", ")", ")", "\n", "reversemask_tensor", "=", "toTensor", "(", "np", ".", "array", "(", "reversemask_lst", ")", ")", "\n", "num_pnts_tensor", "=", "toTensor", "(", "num_pnts_arry", ")", "\n", "return", "pnts_padding_tensor", ",", "mask_tensor", ",", "reversemask_tensor", ",", "num_pnts_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.get_padding_boxpnts_tensors": [[447, 456], ["numpy.array", "findbestfit.padding_pnt_tensors", "max", "num_pnts_lst.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.padding_pnt_tensors"], ["", "def", "get_padding_boxpnts_tensors", "(", "point_in_box_lst", ")", ":", "\n", "    ", "max_num_pnts", "=", "0", "\n", "num_pnts_lst", "=", "[", "]", "\n", "for", "point_in_box", "in", "point_in_box_lst", ":", "\n", "        ", "max_num_pnts", "=", "max", "(", "max_num_pnts", ",", "len", "(", "point_in_box", ")", ")", "\n", "num_pnts_lst", ".", "append", "(", "len", "(", "point_in_box", ")", ")", "\n", "", "num_pnts_array", "=", "np", ".", "array", "(", "num_pnts_lst", ")", "\n", "box_pnts_padding_tensor", ",", "box_mask_tensor", ",", "box_reversemask_tensor", ",", "box_num_pnts_tensor", "=", "padding_pnt_tensors", "(", "point_in_box_lst", ",", "max_num_pnts", ",", "num_pnts_array", ")", "\n", "return", "box_pnts_padding_tensor", ",", "box_mask_tensor", ",", "box_reversemask_tensor", ",", "box_num_pnts_tensor", ",", "num_pnts_array", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.repeat_boxpoints_tensor": [[458, 469], ["boxpoint_tensor.dim", "list", "torch.unsqueeze().repeat().view", "boxpoint_tensor.dim", "list", "torch.unsqueeze().repeat().view", "torch.unsqueeze().repeat().view", "torch.unsqueeze().repeat", "list", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "function", ["None"], ["", "def", "repeat_boxpoints_tensor", "(", "boxpoint_tensor", ",", "candidate_num", ")", ":", "\n", "    ", "if", "boxpoint_tensor", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "gt_boxnum", ",", "max_point_num", ",", "point_dims", "=", "list", "(", "boxpoint_tensor", ".", "shape", ")", "\n", "box_pnts_padding_tensor", "=", "torch", ".", "unsqueeze", "(", "boxpoint_tensor", ",", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "candidate_num", ",", "1", ",", "1", ")", ".", "view", "(", "gt_boxnum", "*", "candidate_num", ",", "max_point_num", ",", "point_dims", ")", "\n", "", "elif", "boxpoint_tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "gt_boxnum", ",", "max_point_num", "=", "list", "(", "boxpoint_tensor", ".", "shape", ")", "\n", "box_pnts_padding_tensor", "=", "torch", ".", "unsqueeze", "(", "boxpoint_tensor", ",", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "candidate_num", ",", "1", ")", ".", "view", "(", "gt_boxnum", "*", "candidate_num", ",", "max_point_num", ")", "\n", "", "else", ":", "\n", "        ", "gt_boxnum", "=", "list", "(", "boxpoint_tensor", ".", "shape", ")", "[", "0", "]", "\n", "box_pnts_padding_tensor", "=", "torch", ".", "unsqueeze", "(", "boxpoint_tensor", ",", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "candidate_num", ")", ".", "view", "(", "gt_boxnum", "*", "candidate_num", ")", "\n", "", "return", "box_pnts_padding_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.find_best_match_boxpnts": [[472, 494], ["range", "len", "tuple", "findbestfit.find_single_best_match_boxpnts", "print", "best_match_ind_lst.append", "best_match_iou_lst.append", "best_match_max_dist_lst.append", "pnt_thresh_best_iou_indices[].cpu", "match_car_ind.cpu().numpy().astype", "iou.cpu().numpy", "best_match_mean_dist_lst.append", "max_dist.cpu().numpy", "len", "mean_dist.cpu().numpy", "match_car_ind.cpu().numpy", "iou.cpu", "max_dist.cpu", "mean_dist.cpu", "match_car_ind.cpu"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.find_single_best_match_boxpnts"], ["", "def", "find_best_match_boxpnts", "(", "sorted_iou", ",", "pnt_thresh_best_iou_indices", ",", "mirrored_pnts_lst", ",", "coords_num", ",", "occ_map", ")", ":", "\n", "    ", "best_match_ind_lst", "=", "[", "]", "\n", "# best_match_pnts_lst = []", "\n", "best_match_iou_lst", "=", "[", "]", "\n", "best_match_mean_dist_lst", "=", "[", "]", "\n", "best_match_max_dist_lst", "=", "[", "]", "\n", "for", "car_id", "in", "range", "(", "len", "(", "mirrored_pnts_lst", ")", ")", ":", "\n", "        ", "cur_mirrored_pnts_lst", "=", "[", "mirrored_pnts_lst", "[", "car_id", "]", "]", "\n", "picked_indices", "=", "tuple", "(", "pnt_thresh_best_iou_indices", "[", "car_id", "]", ".", "cpu", "(", ")", ")", "\n", "selected_mirrored_pnts_lst", "=", "[", "mirrored_pnts_lst", "[", "i", "]", "for", "i", "in", "picked_indices", "]", "\n", "# print(\"pnt_thresh_best_iou_indices[car_id]\", pnt_thresh_best_iou_indices[car_id].shape, coords_num.shape)", "\n", "cur_occ_map", "=", "occ_map", "[", "car_id", "]", "\n", "selected_occ_map", "=", "occ_map", "[", "pnt_thresh_best_iou_indices", "[", "car_id", "]", "]", "\n", "selected_coord_nums", "=", "coords_num", "[", "pnt_thresh_best_iou_indices", "[", "car_id", "]", "]", "\n", "iou", ",", "match_car_ind", ",", "vox_num", ",", "extra_vox_num", ",", "mean_dist", ",", "max_dist", "=", "find_single_best_match_boxpnts", "(", "sorted_iou", "[", "car_id", "]", ",", "cur_mirrored_pnts_lst", ",", "selected_mirrored_pnts_lst", ",", "selected_coord_nums", ",", "pnt_thresh_best_iou_indices", "[", "car_id", "]", ",", "cur_occ_map", ",", "selected_occ_map", ")", "\n", "print", "(", "\"{}/{}: match_car_ind {}, iou {}, vox_num {}, extra_vox_num {}, mean_dist {}, max_dist {}\"", ".", "format", "(", "car_id", ",", "len", "(", "mirrored_pnts_lst", ")", ",", "match_car_ind", ",", "iou", ",", "vox_num", ",", "extra_vox_num", ",", "mean_dist", ",", "max_dist", ")", ")", "\n", "best_match_ind_lst", ".", "append", "(", "match_car_ind", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "# best_match_pnts_lst.append(mirrored_pnts_lst[match_car_ind])", "\n", "best_match_iou_lst", ".", "append", "(", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "best_match_mean_dist_lst", ".", "append", "(", "mean_dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "\n", "best_match_max_dist_lst", ".", "append", "(", "max_dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "best_match_ind_lst", ",", "best_match_iou_lst", ",", "best_match_mean_dist_lst", ",", "best_match_max_dist_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.find_single_best_match_boxpnts": [[507, 537], ["len", "findbestfit.get_padding_boxpnts_tensors", "findbestfit.get_padding_boxpnts_tensors", "list", "findbestfit.repeat_boxpoints_tensor", "findbestfit.repeat_boxpoints_tensor", "findbestfit.repeat_boxpoints_tensor", "findbestfit.repeat_boxpoints_tensor", "findbestfit.extra_occ", "torch.sort", "torch.arange().unsqueeze().repeat", "torch.unsqueeze", "chamfer_dist", "torch.sqrt", "print", "findbestfit.get_batch_stats", "torch.zeros.view", "min_instance.view.view", "mean_instance.clone.view", "torch.zeros", "torch.zeros.clone", "torch.arange().unsqueeze", "torch.arange"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_padding_boxpnts_tensors", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_padding_boxpnts_tensors", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.extra_occ", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_batch_stats"], ["", "def", "find_single_best_match_boxpnts", "(", "sorted_iou", ",", "cur_mirrored_pnts_lst", ",", "picked_mirrored_pnts_lst", ",", "selected_coord_nums", ",", "selected_indices", ",", "cur_occ_map", ",", "selected_occ_map", ")", ":", "\n", "    ", "gt_boxnum", "=", "len", "(", "cur_mirrored_pnts_lst", ")", "\n", "box_pnts_padding_tensor", ",", "box_mask_tensor", ",", "box_reversemask_tensor", ",", "box_num_pnts_tensor", ",", "box_num_pnts_array", "=", "get_padding_boxpnts_tensors", "(", "cur_mirrored_pnts_lst", ")", "\n", "mirr_box_pnts_padding_tensor", ",", "mirr_box_mask_tensor", ",", "mirr_box_reversemask_tensor", ",", "mirr_box_num_pnts_tensor", ",", "mirr_box_num_pnts_array", "=", "get_padding_boxpnts_tensors", "(", "picked_mirrored_pnts_lst", ")", "\n", "candidate_num", ",", "num_max_template_points", ",", "point_dims", "=", "list", "(", "mirr_box_pnts_padding_tensor", ".", "shape", ")", "\n", "mirr_box_reversemask_tensor_remote", "=", "mirr_box_pnts_padding_tensor", "+", "torch", ".", "unsqueeze", "(", "mirr_box_reversemask_tensor", ",", "dim", "=", "-", "1", ")", "\n", "box_pnts_padding_tensor", "=", "repeat_boxpoints_tensor", "(", "box_pnts_padding_tensor", ",", "candidate_num", ")", "\n", "box_num_pnts_tensor", "=", "repeat_boxpoints_tensor", "(", "box_num_pnts_tensor", ",", "candidate_num", ")", "\n", "box_mask_tensor", "=", "repeat_boxpoints_tensor", "(", "box_mask_tensor", ",", "candidate_num", ")", "\n", "box_reversemask_tensor", "=", "repeat_boxpoints_tensor", "(", "box_reversemask_tensor", ",", "candidate_num", ")", "\n", "if", "box_pnts_padding_tensor", ".", "shape", "[", "-", "2", "]", ">", "0", ":", "\n", "        ", "dist1", ",", "_", "=", "chamfer_dist", "(", "box_pnts_padding_tensor", ",", "mirr_box_reversemask_tensor_remote", ")", "# candidate_num X max num pnt X 3", "\n", "dist_l1", "=", "torch", ".", "sqrt", "(", "dist1", ")", "\n", "print", "(", "\"dist_l1\"", ",", "dist_l1", ".", "shape", ",", "mirr_box_pnts_padding_tensor", ".", "shape", ")", "\n", "mean_instance", ",", "min_instance", ",", "max_instance", "=", "get_batch_stats", "(", "dist_l1", ",", "box_num_pnts_tensor", ",", "box_mask_tensor", ",", "box_reversemask_tensor", ")", "\n", "mean_instance", "=", "mean_instance", ".", "view", "(", "gt_boxnum", ",", "candidate_num", ")", "\n", "min_instance", "=", "min_instance", ".", "view", "(", "gt_boxnum", ",", "candidate_num", ")", "\n", "max_instance", "=", "max_instance", ".", "view", "(", "gt_boxnum", ",", "candidate_num", ")", "\n", "", "else", ":", "\n", "        ", "mean_instance", "=", "torch", ".", "zeros", "(", "[", "gt_boxnum", ",", "candidate_num", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "max_instance", "=", "mean_instance", ".", "clone", "(", ")", "\n", "\n", "", "extra_coord_nums", "=", "extra_occ", "(", "cur_occ_map", ",", "selected_occ_map", ",", "selected_coord_nums", ")", "\n", "heuristic", "=", "max_instance", "+", "10.", "/", "extra_coord_nums", "+", "(", "sorted_iou", "<", "0.84", ")", "*", "1.0", "# mean_instance + 10. / extra_coord_nums + (sorted_iou < 0.84) * 1.0 #", "\n", "heur_sorted", ",", "heur_indices", "=", "torch", ".", "sort", "(", "heuristic", ",", "dim", "=", "1", ")", "\n", "gt_index", "=", "torch", ".", "arange", "(", "gt_boxnum", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "candidate_num", ")", "\n", "# print(\"heur_indices\", heur_indices.shape, mean_instance.shape, torch.max(selected_coord_nums))", "\n", "# print(\"selected_coord_nums {}, mean_instance {}, min_instance {}, max_instance {}\".format(selected_coord_nums[heur_indices][0,0], mean_instance[gt_index[0,0], heur_indices[0,0]], min_instance[gt_index[0,0], heur_indices[0,0]], max_instance[gt_index[0,0], heur_indices[0,0]]))", "\n", "# print(\"selected_indices\", selected_indices.shape, heur_indices[0,0].shape, selected_indices[heur_indices[0,0]].shape, selected_coord_nums[heur_indices[0,0]].shape, mean_instance[gt_index[0,0]].shape, max_instance[gt_index[0,0]].shape)", "\n", "return", "sorted_iou", "[", "heur_indices", "[", "0", ",", "0", "]", "]", ",", "selected_indices", "[", "heur_indices", "[", "0", ",", "0", "]", "]", ",", "selected_coord_nums", "[", "heur_indices", "[", "0", ",", "0", "]", "]", ",", "extra_coord_nums", "[", "heur_indices", "[", "0", ",", "0", "]", "]", ",", "mean_instance", "[", "gt_index", "[", "0", ",", "0", "]", ",", "heur_indices", "[", "0", ",", "0", "]", "]", ",", "max_instance", "[", "gt_index", "[", "0", ",", "0", "]", ",", "heur_indices", "[", "0", ",", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.extra_occ": [[539, 544], ["print", "list", "cur_occ_map.view().repeat.view().repeat", "torch.sum", "cur_occ_map.view().repeat.view"], "function", ["None"], ["", "def", "extra_occ", "(", "cur_occ_map", ",", "selected_occ_map", ",", "selected_coord_nums", ")", ":", "\n", "    ", "print", "(", "\"cur_occ_map, selected_occ_map\"", ",", "cur_occ_map", ".", "shape", ",", "selected_occ_map", ".", "shape", ")", "\n", "candi_num", ",", "nx", ",", "ny", "=", "list", "(", "selected_occ_map", ".", "shape", ")", "\n", "cur_occ_map", "=", "cur_occ_map", ".", "view", "(", "1", ",", "nx", ",", "ny", ")", ".", "repeat", "(", "candi_num", ",", "1", ",", "1", ")", "\n", "return", "selected_coord_nums", "-", "torch", ".", "sum", "(", "(", "selected_occ_map", "*", "cur_occ_map", ")", ".", "view", "(", "-", "1", ",", "nx", "*", "ny", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.findbestfit.space_occ_voxelpnts": [[546, 555], ["numpy.zeros", "numpy.array", "numpy.floor().astype", "numpy.ones_like", "numpy.floor", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "space_occ_voxelpnts", "(", "sourcepnts", ",", "allrange", ",", "nx", ",", "ny", ",", "voxel_size", "=", "[", "0.08", ",", "0.08", ",", "0.08", "]", ")", ":", "\n", "    ", "occmap", "=", "np", ".", "zeros", "(", "[", "nx", ",", "ny", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "sourcepnts", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ")", "\n", "gtpnts", "=", "sourcepnts", "[", ":", ",", ":", "3", "]", "\n", "gtpnts_ind", "=", "np", ".", "floor", "(", "(", "gtpnts", "-", "np", ".", "expand_dims", "(", "allrange", "[", ":", "3", "]", ",", "axis", "=", "0", ")", ")", "/", "np", ".", "expand_dims", "(", "voxel_size", ",", "axis", "=", "0", ")", ")", ".", "astype", "(", "int", ")", "\n", "occmap", "[", "gtpnts_ind", "[", "...", ",", "0", "]", ",", "gtpnts_ind", "[", "...", ",", "1", "]", "]", "=", "np", ".", "ones_like", "(", "gtpnts_ind", "[", "...", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# unique_coords_num = np.sum(occmap)", "\n", "", "return", "occmap", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.__init__": [[14, 45], ["torch.Dataset.__init__", "numpy.array", "processor.point_feature_encoder.PointFeatureEncoder", "processor.data_processor.DataProcessor", "getattr", "getattr", "getattr", "getattr", "dataset.DatasetTemplate.dataset_cfg.get", "pathlib.Path", "numpy.array", "augmentor.data_augmentor.DataAugmentor", "dataset_cfg.get", "dataset_cfg.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", "=", "None", ",", "class_names", "=", "None", ",", "training", "=", "True", ",", "root_path", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_cfg", "=", "dataset_cfg", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "root_path", "=", "root_path", "if", "root_path", "is", "not", "None", "else", "Path", "(", "self", ".", "dataset_cfg", ".", "DATA_PATH", ")", "\n", "self", ".", "logger", "=", "logger", "\n", "if", "self", ".", "dataset_cfg", "is", "None", "or", "class_names", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "point_cloud_range", "=", "np", ".", "array", "(", "self", ".", "dataset_cfg", ".", "POINT_CLOUD_RANGE", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "occ_point_cloud_range", "=", "self", ".", "point_cloud_range", "if", "dataset_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "None", "else", "np", ".", "array", "(", "self", ".", "dataset_cfg", ".", "OCC", ".", "POINT_CLOUD_RANGE", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "point_feature_encoder", "=", "PointFeatureEncoder", "(", "\n", "self", ".", "dataset_cfg", ".", "POINT_FEATURE_ENCODING", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "\n", "self", ".", "data_augmentor", "=", "DataAugmentor", "(", "\n", "self", ".", "root_path", ",", "self", ".", "dataset_cfg", ".", "DATA_AUGMENTOR", ",", "self", ".", "class_names", ",", "logger", "=", "self", ".", "logger", "\n", ")", "if", "self", ".", "training", "or", "self", ".", "dataset_cfg", ".", "DATA_AUGMENTOR", ".", "AUG_CONFIG_LIST", "[", "1", "]", ".", "NAME", "in", "[", "\"add_best_match\"", ",", "\"add_multi_best_match\"", "]", "else", "None", "\n", "self", ".", "data_processor", "=", "DataProcessor", "(", "\n", "self", ".", "dataset_cfg", ".", "DATA_PROCESSOR", ",", "point_cloud_range", "=", "self", ".", "occ_point_cloud_range", ",", "training", "=", "self", ".", "training", ",", "occ_config", "=", "dataset_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", ",", "det_point_cloud_range", "=", "self", ".", "point_cloud_range", ")", "\n", "self", ".", "occ_dim", "=", "self", ".", "data_processor", ".", "occ_dim", "\n", "self", ".", "det_grid_size", "=", "getattr", "(", "self", ".", "data_processor", ",", "'det_grid_size'", ",", "None", ")", "\n", "self", ".", "det_voxel_size", "=", "getattr", "(", "self", ".", "data_processor", ",", "'det_voxel_size'", ",", "None", ")", "\n", "\n", "self", ".", "occ_grid_size", "=", "getattr", "(", "self", ".", "data_processor", ",", "'occ_grid_size'", ",", "None", ")", "\n", "self", ".", "occ_voxel_size", "=", "getattr", "(", "self", ".", "data_processor", ",", "'occ_voxel_size'", ",", "None", ")", "\n", "self", ".", "min_points_in_box", "=", "self", ".", "dataset_cfg", ".", "get", "(", "\"MIN_POINTS_IN_BOX\"", ",", "0", ")", "\n", "self", ".", "total_epochs", "=", "0", "\n", "self", ".", "_merge_all_iters_to_one_epoch", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.mode": [[46, 49], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "'train'", "if", "self", ".", "training", "else", "'test'", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.__getstate__": [[50, 54], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.__setstate__": [[55, 57], ["dataset.DatasetTemplate.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.generate_prediction_dicts": [[58, 75], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_prediction_dicts", "(", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        To support a custom dataset, implement this function to receive the predicted results from the model, and then\n        transform the unified normative coordinate to your required coordinate, and optionally save them to disk.\n\n        Args:\n            batch_dict: dict of original data from the dataloader\n            pred_dicts: dict of predicted results from the model\n                pred_boxes: (N, 7), Tensor\n                pred_scores: (N), Tensor\n                pred_labels: (N), Tensor\n            class_names:\n            output_path: if it is not None, save the results to this path\n        Returns:\n\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.merge_all_iters_to_one_epoch": [[76, 82], ["None"], "methods", ["None"], ["", "def", "merge_all_iters_to_one_epoch", "(", "self", ",", "merge", "=", "True", ",", "epochs", "=", "None", ")", ":", "\n", "        ", "if", "merge", ":", "\n", "            ", "self", ".", "_merge_all_iters_to_one_epoch", "=", "True", "\n", "self", ".", "total_epochs", "=", "epochs", "\n", "", "else", ":", "\n", "            ", "self", ".", "_merge_all_iters_to_one_epoch", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.__len__": [[83, 85], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.__getitem__": [[86, 99], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        To support a custom dataset, implement this function to load the raw data (and labels), then transform them to\n        the unified normative coordinate and call the function self.prepare_data() to process the data and send them\n        to the model.\n\n        Args:\n            index:\n\n        Returns:\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.prepare_data": [[100, 166], ["numpy.array", "dataset.DatasetTemplate.point_feature_encoder.forward", "dataset.DatasetTemplate.data_processor.forward", "dataset.DatasetTemplate.pop", "dataset.DatasetTemplate.data_augmentor.forward", "dataset.DatasetTemplate.get", "utils.common_utils.keep_arrays_by_name", "numpy.array", "numpy.concatenate", "numpy.array", "dataset.DatasetTemplate.data_augmentor.forward", "print", "len", "dataset.DatasetTemplate.dataset_cfg.get", "len", "numpy.random.randint", "dataset.DatasetTemplate.__getitem__", "numpy.array.reshape().astype", "dataset.DatasetTemplate.__len__", "dataset.DatasetTemplate.class_names.index", "numpy.array.reshape"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.keep_arrays_by_name", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__getitem__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "prepare_data", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                points: (N, 3 + C_in)\n                gt_boxes: optional, (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n                gt_names: optional, (N), string\n                ...\n\n        Returns:\n            data_dict:\n                frame_id: string\n                points: (N, 3 + C_in)\n                gt_boxes: optional, (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n                gt_names: optional, (N), string\n                use_lead_xyz: bool\n                voxels: optional (num_voxels, max_points_per_voxel, 3 + C)\n                voxel_coords: optional (num_voxels, 3)\n                voxel_num_points: optional (num_voxels)\n                ...\n        \"\"\"", "\n", "gt_boxes_mask", "=", "np", ".", "array", "(", "[", "n", "in", "self", ".", "class_names", "for", "n", "in", "data_dict", "[", "'gt_names'", "]", "]", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "'gt_boxes'", "in", "data_dict", ",", "'gt_boxes should be provided for training'", "\n", "data_dict", "=", "self", ".", "data_augmentor", ".", "forward", "(", "\n", "data_dict", "=", "{", "\n", "**", "data_dict", ",", "\n", "'gt_boxes_mask'", ":", "gt_boxes_mask", "\n", "}", "\n", ")", "\n", "if", "self", ".", "dataset_cfg", ".", "get", "(", "\"SKIP_NOBOX\"", ",", "None", ")", "is", "None", "or", "self", ".", "dataset_cfg", ".", "SKIP_NOBOX", ":", "\n", "                ", "if", "len", "(", "data_dict", "[", "'gt_boxes'", "]", ")", "==", "0", ":", "\n", "                    ", "new_index", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "__len__", "(", ")", ")", "\n", "return", "self", ".", "__getitem__", "(", "new_index", ")", "\n", "", "", "", "elif", "self", ".", "dataset_cfg", ".", "DATA_AUGMENTOR", ".", "AUG_CONFIG_LIST", "[", "1", "]", ".", "NAME", "==", "\"add_best_match\"", "or", "self", ".", "dataset_cfg", ".", "DATA_AUGMENTOR", ".", "AUG_CONFIG_LIST", "[", "1", "]", ".", "NAME", "==", "\"add_multi_best_match\"", ":", "\n", "            ", "data_dict", "=", "self", ".", "data_augmentor", ".", "forward", "(", "\n", "data_dict", "=", "{", "\n", "**", "data_dict", ",", "\n", "'gt_boxes_mask'", ":", "gt_boxes_mask", "\n", "}", ",", "\n", "validation", "=", "True", "\n", ")", "\n", "\n", "", "if", "data_dict", ".", "get", "(", "'gt_boxes'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "selected", "=", "common_utils", ".", "keep_arrays_by_name", "(", "data_dict", "[", "'gt_names'", "]", ",", "self", ".", "class_names", ")", "\n", "if", "data_dict", "[", "'gt_boxes'", "]", ".", "ndim", "==", "1", ":", "\n", "                ", "print", "(", "\"!!!!!!!!!!!!!\"", ",", "data_dict", "[", "'gt_boxes'", "]", ".", "shape", ",", "data_dict", "[", "\"frame_id\"", "]", ")", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "selected", "]", "\n", "data_dict", "[", "'gt_names'", "]", "=", "data_dict", "[", "'gt_names'", "]", "[", "selected", "]", "\n", "\n", "\n", "gt_classes", "=", "np", ".", "array", "(", "[", "self", ".", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "data_dict", "[", "'gt_names'", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "(", "data_dict", "[", "'gt_boxes'", "]", ",", "gt_classes", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "axis", "=", "1", ")", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "\n", "", "data_dict", "=", "self", ".", "point_feature_encoder", ".", "forward", "(", "data_dict", ")", "\n", "\n", "data_dict", "=", "self", ".", "data_processor", ".", "forward", "(", "\n", "data_dict", "=", "data_dict", "\n", ")", "\n", "data_dict", "[", "'box_mirr_flag'", "]", "=", "data_dict", "[", "'gt_names'", "]", "!=", "\"Pedestrian\"", "if", "len", "(", "data_dict", "[", "'gt_names'", "]", ")", ">", "0", "else", "np", ".", "array", "(", "[", "]", ")", "\n", "data_dict", ".", "pop", "(", "'gt_names'", ",", "None", ")", "\n", "data_dict", "[", "'is_train'", "]", "=", "self", ".", "training", "\n", "if", "\"augment_box_num\"", "not", "in", "data_dict", ":", "\n", "            ", "data_dict", "[", "\"augment_box_num\"", "]", "=", "0", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.collate_batch": [[167, 224], ["collections.defaultdict", "len", "collections.defaultdict.pop", "collections.defaultdict.pop", "collections.defaultdict.pop", "collections.defaultdict.pop", "collections.defaultdict.items", "cur_sample.items", "data_dict[].append", "data_dict[].append", "data_dict[].append", "numpy.concatenate", "print", "enumerate", "numpy.concatenate", "numpy.pad", "coors.append", "max", "numpy.zeros", "range", "ret[].append", "max", "numpy.zeros", "range", "len", "val[].__len__", "max", "numpy.zeros", "range", "len", "val[].astype", "numpy.stack", "val[].__len__", "len", "val[].__len__", "val[].__len__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "@", "staticmethod", "\n", "def", "collate_batch", "(", "batch_list", ",", "_unused", "=", "False", ")", ":", "\n", "        ", "data_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "cur_sample", "in", "batch_list", ":", "\n", "            ", "for", "key", ",", "val", "in", "cur_sample", ".", "items", "(", ")", ":", "\n", "                ", "data_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "if", "key", "==", "\"voxel_num_points\"", ":", "\n", "                    ", "data_dict", "[", "\"batch_voxel_num\"", "]", ".", "append", "(", "val", ".", "shape", "[", "0", "]", ")", "\n", "", "if", "key", "==", "\"det_voxel_num_points\"", ":", "\n", "                    ", "data_dict", "[", "\"batch_det_voxel_num\"", "]", ".", "append", "(", "val", ".", "shape", "[", "0", "]", ")", "\n", "", "", "", "batch_size", "=", "len", "(", "batch_list", ")", "\n", "data_dict", ".", "pop", "(", "'aug_boxes_image_idx'", ",", "None", ")", "\n", "data_dict", ".", "pop", "(", "'aug_boxes_gt_idx'", ",", "None", ")", "\n", "data_dict", ".", "pop", "(", "'aug_boxes_obj_ids'", ",", "None", ")", "\n", "data_dict", ".", "pop", "(", "'obj_ids'", ",", "None", ")", "\n", "ret", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "key", "in", "[", "'voxels'", ",", "'voxel_num_points'", ",", "'voxel_points_label'", ",", "'det_voxels'", ",", "'det_voxel_num_points'", "]", ":", "\n", "                    ", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "val", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "in", "[", "'points'", ",", "'voxel_coords'", ",", "'det_voxel_coords'", ",", "'bm_points'", "]", ":", "\n", "                    ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "val", ")", ":", "\n", "                        ", "coor_pad", "=", "np", ".", "pad", "(", "coor", ",", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "i", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "np", ".", "concatenate", "(", "coors", ",", "axis", "=", "0", ")", "\n", "", "elif", "key", "in", "[", "'gt_boxes'", "]", ":", "\n", "                    ", "ret", "[", "\"gt_boxes_num\"", "]", "=", "[", "]", "\n", "max_gt", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "val", "]", ")", "\n", "batch_gt_boxes3d", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_gt", ",", "val", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "batch_gt_boxes3d", "[", "k", ",", ":", "val", "[", "k", "]", ".", "__len__", "(", ")", ",", ":", "]", "=", "val", "[", "k", "]", "\n", "ret", "[", "\"gt_boxes_num\"", "]", ".", "append", "(", "val", "[", "k", "]", ".", "__len__", "(", ")", ")", "\n", "", "ret", "[", "key", "]", "=", "batch_gt_boxes3d", "\n", "", "elif", "key", "in", "[", "'coverage_rates'", "]", ":", "\n", "                    ", "max_gt", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "val", "]", ")", "\n", "batch_coverage_rates", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_gt", ",", "val", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "batch_coverage_rates", "[", "k", ",", ":", "val", "[", "k", "]", ".", "__len__", "(", ")", ",", ":", "]", "=", "val", "[", "k", "]", "\n", "", "ret", "[", "key", "]", "=", "batch_coverage_rates", "\n", "", "elif", "key", "in", "[", "'box_mirr_flag'", "]", ":", "\n", "                    ", "max_gt", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "val", "]", ")", "\n", "batch_gt_box_mirr_flag", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_gt", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "batch_gt_box_mirr_flag", "[", "k", ",", ":", "val", "[", "k", "]", ".", "__len__", "(", ")", "]", "=", "val", "[", "k", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "ret", "[", "key", "]", "=", "batch_gt_box_mirr_flag", "\n", "", "elif", "key", "in", "[", "\"miss_points\"", ",", "\"self_points\"", ",", "\"other_points\"", ",", "\"miss_occ_points\"", ",", "\"self_occ_points\"", ",", "\"other_occ_points\"", "]", ":", "\n", "                    ", "ret", "[", "key", "]", "=", "val", "\n", "", "else", ":", "\n", "                    ", "ret", "[", "key", "]", "=", "np", ".", "stack", "(", "val", ",", "axis", "=", "0", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "'Error in collate_batch: key=%s'", "%", "key", ")", "\n", "raise", "TypeError", "\n", "\n", "", "", "ret", "[", "'batch_size'", "]", "=", "batch_size", "\n", "ret", "[", "'is_train'", "]", "=", "ret", "[", "'is_train'", "]", "[", "0", "]", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.__init__.DistributedSampler.__init__": [[18, 21], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.__init__.DistributedSampler.__iter__": [[22, 37], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.__init__.build_dataloader": [[39, 69], ["torch.utils.data.DataLoader", "hasattr", "dataset.merge_all_iters_to_one_epoch", "torch.utils.data.distributed.DistributedSampler", "btcdet.utils.common_utils.get_dist_info", "__init__.DistributedSampler"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.merge_all_iters_to_one_epoch", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.get_dist_info"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.finddiff.extract_allpnts": [[27, 44], ["range", "pathlib.Path", "open", "len", "all_db_infos_lst.append", "pickle.load"], "function", ["None"], ["def", "extract_allpnts", "(", "root_path", "=", "None", ",", "splits", "=", "[", "'train'", ",", "'val'", "]", ")", ":", "\n", "    ", "all_db_infos_lst", "=", "[", "]", "\n", "box_dims_lst", "=", "[", "]", "\n", "pnts_lst", "=", "[", "]", "\n", "mirrored_pnts_lst", "=", "[", "]", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "db_info_save_path", "=", "Path", "(", "root_path", ")", "/", "(", "'kitti_dbinfos_%s.pkl'", "%", "split", ")", "\n", "with", "open", "(", "db_info_save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "all_db_infos", "=", "pickle", ".", "load", "(", "f", ")", "[", "'Car'", "]", "\n", "", "for", "k", "in", "range", "(", "len", "(", "all_db_infos", ")", ")", ":", "\n", "            ", "info", "=", "all_db_infos", "[", "k", "]", "\n", "obj_type", "=", "info", "[", "'name'", "]", "\n", "if", "obj_type", "!=", "\"Car\"", ":", "\n", "                ", "continue", "\n", "", "gt_box", "=", "info", "[", "'box3d_lidar'", "]", "\n", "all_db_infos_lst", ".", "append", "(", "info", ")", "\n", "", "", "return", "all_db_infos_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.extract_template": [[25, 45], ["range", "all_db_infos_lst.append", "box_dims_lst.append", "pathlib.Path", "open", "len", "box_dims.append", "pickle.load", "numpy.array"], "function", ["None"], ["def", "extract_template", "(", "root_path", "=", "None", ",", "splits", "=", "[", "'train'", ",", "'val'", "]", ")", ":", "\n", "    ", "all_db_infos_lst", "=", "[", "]", "\n", "box_dims_lst", "=", "[", "]", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "db_info_save_path", "=", "Path", "(", "root_path", ")", "/", "(", "'kitti_dbinfos_%s.pkl'", "%", "split", ")", "\n", "\n", "with", "open", "(", "db_info_save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "all_db_infos", "=", "pickle", ".", "load", "(", "f", ")", "[", "'Car'", "]", "\n", "", "box_dims", "=", "[", "]", "\n", "pnts", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "all_db_infos", ")", ")", ":", "\n", "            ", "info", "=", "all_db_infos", "[", "k", "]", "\n", "obj_type", "=", "info", "[", "'name'", "]", "\n", "if", "obj_type", "!=", "\"Car\"", ":", "\n", "                ", "continue", "\n", "", "gt_box", "=", "info", "[", "'box3d_lidar'", "]", "\n", "box_dims", ".", "append", "(", "gt_box", "[", "3", ":", "6", "]", ")", "\n", "", "all_db_infos_lst", ".", "append", "(", "all_db_infos", "[", ":", ":", "1", "]", ")", "\n", "box_dims_lst", ".", "append", "(", "np", ".", "array", "(", "box_dims", ")", "[", ":", ":", "1", ",", ":", "]", ")", "\n", "", "return", "all_db_infos_lst", ",", "box_dims_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.clustering": [[46, 60], ["sklearn.cluster.KMeans().fit", "sklearn.cluster.DBSCAN().fit", "numpy.zeros_like", "numpy.asarray", "range", "sklearn.cluster.KMeans", "sklearn.cluster.DBSCAN"], "function", ["None"], ["", "def", "clustering", "(", "m_nm", ",", "num_cluster", ",", "box_dims_lst", ")", ":", "\n", "    ", "train_box_dims", ",", "val_box_dims", "=", "box_dims_lst", "[", "0", "]", ",", "box_dims_lst", "[", "1", "]", "\n", "if", "m_nm", "==", "\"kmeans\"", ":", "\n", "        ", "clusterer", "=", "KMeans", "(", "n_clusters", "=", "num_cluster", ",", "random_state", "=", "1", ")", ".", "fit", "(", "train_box_dims", ")", "\n", "", "elif", "m_nm", "==", "\"DBSCAN\"", ":", "\n", "        ", "clusterer", "=", "DBSCAN", "(", "eps", "=", "0.3", ",", "min_samples", "=", "10", ")", ".", "fit", "(", "train_box_dims", ")", "\n", "core_samples_mask", "=", "np", ".", "zeros_like", "(", "clusterer", ".", "labels_", ",", "dtype", "=", "bool", ")", "\n", "core_samples_mask", "[", "clusterer", ".", "core_sample_indices_", "]", "=", "True", "\n", "labels", "=", "clusterer", ".", "labels_", "\n", "# print(train_box_dims.shape, clusterer.labels_.shape)", "\n", "# print(clusterer.cluster_centers_)", "\n", "# print(np.min(train_box_dims, axis=0))", "\n", "", "indices", "=", "[", "np", ".", "asarray", "(", "(", "clusterer", ".", "labels_", "==", "i", ")", ".", "nonzero", "(", ")", ")", "[", "0", ",", ":", "]", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "return", "clusterer", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.get_normalized_cloud": [[61, 65], ["numpy.fromfile().reshape", "numpy.concatenate", "template.remove_bottom", "numpy.fromfile", "template.single_rotate_points_along_z", "str"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_bottom", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.single_rotate_points_along_z"], ["", "def", "get_normalized_cloud", "(", "obj_pnt_fpath", ",", "gt_box", ",", "bottom", "=", "0.0", ")", ":", "\n", "    ", "pnts", "=", "np", ".", "fromfile", "(", "str", "(", "obj_pnt_fpath", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "pnts", "=", "np", ".", "concatenate", "(", "[", "single_rotate_points_along_z", "(", "pnts", "[", ":", ",", ":", "3", "]", ",", "-", "gt_box", "[", "6", "]", ")", ",", "pnts", "[", ":", ",", "3", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "return", "remove_bottom", "(", "pnts", ",", "gt_box", ",", "bottom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.remove_bottom": [[66, 72], ["None"], "function", ["None"], ["", "def", "remove_bottom", "(", "pnts", ",", "gt_box", ",", "bottom", ")", ":", "\n", "    ", "if", "bottom", "==", "0.0", ":", "\n", "        ", "return", "pnts", "\n", "", "zthresh", "=", "-", "gt_box", "[", "5", "]", "/", "2", "+", "bottom", "\n", "keep_bool", "=", "pnts", "[", ":", ",", "2", "]", ">", "zthresh", "\n", "return", "pnts", "[", "keep_bool", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.vis_cluster": [[73, 101], ["visualize_utils.draw_scenes_multi", "mayavi.axes", "mayavi.show", "tuple", "range", "range", "range", "range", "range", "numpy.array", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "vis_cluster", "(", "clusterer", ",", "box_dims", ",", "cluster_num", ")", ":", "\n", "    ", "colors", "=", "[", "'#e6194b'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#4363d8'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "# fig = plt.figure()", "\n", "# ax = fig.add_subplot(111, projection='3d')", "\n", "#", "\n", "# # For each set of style and range settings, plot n random points in the box", "\n", "# # defined by x in [23, 32], y in [0, 100], z in [zlow, zhigh].", "\n", "# for i in range(box_dims.shape[0]):", "\n", "#     xs = box_dims[i,0]", "\n", "#     ys = box_dims[i,1]", "\n", "#     zs = box_dims[i,2]", "\n", "#     ax.scatter(xs, ys, zs, c=colors[clusterer.labels_[i]])", "\n", "#", "\n", "# ax.set_xlabel('X Label')", "\n", "# ax.set_ylabel('Y Label')", "\n", "# ax.set_zlabel('Z Label')", "\n", "# ax.set_aspect('equal')", "\n", "#", "\n", "# plt.show()", "\n", "binary", "=", "[", "clusterer", ".", "labels_", "==", "i", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "box_pnt_lst", "=", "[", "box_dims", "[", "binary", "[", "i", "]", "]", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "i", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "# vu.draw_scenes_multi(box_pnt_lst, colors_lst, size_lst, mode_lst, bgcolor=(1,1,1))", "\n", "vu", ".", "draw_scenes_multi", "(", "box_pnt_lst", ",", "colors_lst", ",", "size_lst", ",", "mode_lst", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "axes", "=", "mlab", ".", "axes", "(", ")", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.sample_template": [[102, 131], ["print", "numpy.array", "numpy.array", "template.cal_in_cluster_template", "os.makedirs", "template.get_normalized_cloud", "gt_box_lst.append", "pnts_lst.append", "max", "num_pnts_lst.append", "numpy.argsort", "range", "str", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cal_in_cluster_template", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_normalized_cloud"], ["", "def", "sample_template", "(", "all_db_infos", ",", "indices", ",", "cluster_num", ",", "clu_id", "=", "None", ")", ":", "\n", "    ", "if", "clu_id", "is", "None", ":", "\n", "        ", "clu_id", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", "]", "\n", "", "for", "i", "in", "clu_id", ":", "\n", "        ", "inds", "=", "indices", "[", "i", "]", "\n", "# print(\"inds\", inds.shape)", "\n", "pnts_lst", "=", "[", "]", "\n", "gt_box_lst", "=", "[", "]", "\n", "max_num_pnts", "=", "0", "\n", "num_pnts_lst", "=", "[", "]", "\n", "print", "(", "\"-----------cluster{}------------\"", ".", "format", "(", "i", ")", ")", "\n", "for", "k", "in", "inds", ":", "\n", "            ", "info", "=", "all_db_infos", "[", "k", "]", "\n", "obj_pnt_fpath", "=", "\"/home/xharlie/dev/occlusion_pcd/data/kitti/detection3d/\"", "+", "info", "[", "'path'", "]", "\n", "gt_box", "=", "info", "[", "'box3d_lidar'", "]", "\n", "car_pnts", "=", "get_normalized_cloud", "(", "str", "(", "obj_pnt_fpath", ")", ",", "gt_box", ",", "bottom", "=", "0.15", ")", "\n", "if", "car_pnts", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "gt_box_lst", ".", "append", "(", "gt_box", ")", "\n", "pnts_lst", ".", "append", "(", "car_pnts", ")", "\n", "max_num_pnts", "=", "max", "(", "max_num_pnts", ",", "car_pnts", ".", "shape", "[", "0", "]", ")", "\n", "num_pnts_lst", ".", "append", "(", "car_pnts", ".", "shape", "[", "0", "]", ")", "\n", "", "num_pnts_arry", "=", "np", ".", "array", "(", "num_pnts_lst", ")", "\n", "ranks", "=", "np", ".", "argsort", "(", "num_pnts_arry", ")", "[", ":", ":", "-", "1", "]", "\n", "gt_box_arry", "=", "np", ".", "array", "(", "gt_box_lst", ")", "\n", "num_template", "=", "5", "\n", "tmplate_id_lst", "=", "cal_in_cluster_template", "(", "pnts_lst", ",", "max_num_pnts", ",", "num_pnts_arry", ",", "num_template", "=", "num_template", ")", "\n", "path", "=", "\"/home/xharlie/dev/occlusion_pcd/kitti/detection3d/template/{}_{}/\"", ".", "format", "(", "cluster_num", ",", "num_template", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "# ######## save ########", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.save_pnts_box": [[175, 183], ["open", "pickle.dump"], "function", ["None"], ["", "", "def", "save_pnts_box", "(", "pnts", ",", "box", ",", "name", ",", "path", ")", ":", "\n", "    ", "template", "=", "{", "\n", "\"name\"", ":", "name", ",", "\n", "\"points\"", ":", "pnts", ",", "\n", "\"box\"", ":", "box", "\n", "}", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "template", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.toTensor": [[184, 186], ["torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "function", ["None"], ["", "", "def", "toTensor", "(", "sample", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "sample", ")", ".", "float", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.get_batch_stats": [[187, 195], ["torch.sum", "torch.min", "torch.max"], "function", ["None"], ["", "def", "get_batch_stats", "(", "dist", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", ":", "\n", "    ", "masked_dist", "=", "dist", "*", "mask_arry", "\n", "addmin_dist", "=", "masked_dist", "+", "reversemask_arry", "\n", "addmax_dist", "=", "masked_dist", "-", "reversemask_arry", "\n", "mean_instance", "=", "torch", ".", "sum", "(", "masked_dist", ",", "dim", "=", "1", ")", "/", "num_pnts_tensor", "# N CARS to the template", "\n", "min_instance", "=", "torch", ".", "min", "(", "addmin_dist", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "max_instance", "=", "torch", ".", "max", "(", "addmax_dist", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "mean_instance", ",", "min_instance", ",", "max_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cal_in_cluster_template": [[197, 261], ["range", "template.toTensor", "template.toTensor", "template.toTensor", "template.toTensor", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "pnts_padding_lst.append", "mask_lst.append", "reversemask_lst.append", "numpy.array", "numpy.array", "numpy.array", "range", "numpy.array", "numpy.array", "numpy.array", "range", "template.cal_template_cd_pntlst", "print", "len", "template.mirror", "template.cal_template_cd_pntlst", "mean_lst.append", "max_lst.append", "min_lst.append", "numpy.mean", "numpy.max", "numpy.mean", "numpy.argsort", "range", "tmplate_id_lst.append", "numpy.mean", "numpy.mean", "numpy.max", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.zeros", "len", "print", "print", "numpy.ones", "numpy.sum", "print", "numpy.mean", "numpy.mean", "numpy.max", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cal_template_cd_pntlst", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.mirror", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cal_template_cd_pntlst"], ["", "def", "cal_in_cluster_template", "(", "pnts_lst", ",", "max_num_pnts", ",", "num_pnts_arry", ",", "num_template", "=", "1", ",", "template_pnts", "=", "None", ")", ":", "\n", "########## single for loop ###########", "\n", "# tind, sind = ranks[rtind], ranks[1]", "\n", "# template_pnts = mirror(pnts_lst[tind][:, :3])", "\n", "# cd_4pose(pnts_lst[sind][:, :3], template_pnts)", "\n", "# vis_pair(template_pnts, gt_box_arry[tind:tind+1,:], pnts_lst[sind], gt_box_arry[sind:sind+1,:])", "\n", "########## match for loop ###########", "\n", "    ", "pnts_padding_lst", "=", "[", "]", "\n", "mask_lst", "=", "[", "]", "\n", "reversemask_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "        ", "padding_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts_lst", "[", "i", "]", ",", "np", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", ",", "4", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "mask", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "[", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "np", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", ")", "\n", "reversemask", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "10.0", "*", "np", ".", "ones", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", ")", "\n", "pnts_padding_lst", ".", "append", "(", "padding_pnts", ")", "\n", "mask_lst", ".", "append", "(", "mask", ")", "\n", "reversemask_lst", ".", "append", "(", "reversemask", ")", "\n", "", "pnts_padding_arry", "=", "toTensor", "(", "np", ".", "array", "(", "pnts_padding_lst", ")", ")", "\n", "mask_arry", "=", "toTensor", "(", "np", ".", "array", "(", "mask_lst", ")", ")", "\n", "reversemask_arry", "=", "toTensor", "(", "np", ".", "array", "(", "reversemask_lst", ")", ")", "\n", "num_pnts_tensor", "=", "toTensor", "(", "num_pnts_arry", ")", "\n", "\n", "if", "template_pnts", "is", "None", ":", "\n", "        ", "mean_lst", "=", "[", "]", "\n", "max_lst", "=", "[", "]", "\n", "min_lst", "=", "[", "]", "\n", "for", "rtind", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "            ", "tind", "=", "rtind", "# ranks[rtind]", "\n", "template_pnts", "=", "mirror", "(", "pnts_lst", "[", "tind", "]", "[", ":", ",", ":", "3", "]", ")", "\n", "mean_instance", ",", "min_instance", ",", "max_instance", "=", "cal_template_cd_pntlst", "(", "template_pnts", ",", "pnts_padding_arry", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", "\n", "mean_lst", ".", "append", "(", "mean_instance", ")", "\n", "max_lst", ".", "append", "(", "max_instance", ")", "\n", "min_lst", ".", "append", "(", "min_instance", ")", "\n", "\n", "", "mean_array", "=", "np", ".", "array", "(", "mean_lst", ")", "\n", "max_array", "=", "np", ".", "array", "(", "max_lst", ")", "\n", "min_array", "=", "np", ".", "array", "(", "min_lst", ")", "\n", "tmplate_id_lst", "=", "[", "]", "\n", "\n", "for", "num", "in", "range", "(", "num_template", ")", ":", "\n", "            ", "mean_max_array", "=", "np", ".", "mean", "(", "max_array", ",", "axis", "=", "1", ")", "\n", "max_max_array", "=", "np", ".", "max", "(", "max_array", ",", "axis", "=", "1", ")", "\n", "mean_mean_array", "=", "np", ".", "mean", "(", "mean_array", ",", "axis", "=", "1", ")", "\n", "fit_ranks", "=", "np", ".", "argsort", "(", "mean_max_array", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "fit_ranks", ")", ")", ":", "\n", "                ", "tmp_id", "=", "fit_ranks", "[", "i", "]", "\n", "# print(\"best tmplt id\", tmp_id, \"mean_mean\", mean_mean_array[tmp_id], \"mean_max\", mean_max_array[tmp_id], \"max_max\", max_max_array[tmp_id])", "\n", "leftover_ind", "=", "max_array", "[", "tmp_id", "]", ">", "0.3", "\n", "preserve_ind", "=", "max_array", "[", "tmp_id", "]", "<=", "0.3", "\n", "if", "np", ".", "sum", "(", "preserve_ind", ")", ">", "0", ":", "\n", "                    ", "print", "(", "i", ",", "\" max_array\"", ",", "max_array", ".", "shape", ",", "\"leftover_ind\"", ",", "np", ".", "sum", "(", "leftover_ind", ")", ",", "\"preserve_ind\"", ",", "np", ".", "sum", "(", "preserve_ind", ")", ")", "\n", "break", "\n", "", "", "if", "num", "==", "num_template", "-", "1", ":", "\n", "                ", "print", "(", "\"last tmplt id\"", ",", "tmp_id", ",", "\"mean_mean\"", ",", "mean_mean_array", "[", "tmp_id", "]", ",", "\"mean_max\"", ",", "mean_max_array", "[", "tmp_id", "]", ",", "\"max_max\"", ",", "max_max_array", "[", "tmp_id", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"preserved tmplt id \"", ",", "tmp_id", ",", "\"mean_mean\"", ",", "np", ".", "mean", "(", "mean_array", "[", "tmp_id", "]", "[", "preserve_ind", "]", ")", ",", "\"mean_max\"", ",", "np", ".", "mean", "(", "max_array", "[", "tmp_id", "]", "[", "preserve_ind", "]", ")", ",", "\"max_max\"", ",", "np", ".", "max", "(", "max_array", "[", "tmp_id", "]", "[", "preserve_ind", "]", ")", ")", "\n", "mean_array", "=", "mean_array", "[", ":", ",", "leftover_ind", "]", "\n", "max_array", "=", "max_array", "[", ":", ",", "leftover_ind", "]", "\n", "", "tmplate_id_lst", ".", "append", "(", "tmp_id", ")", "\n", "", "", "else", ":", "\n", "        ", "mean_instance", ",", "min_instance", ",", "max_instance", "=", "cal_template_cd_pntlst", "(", "template_pnts", ",", "pnts_padding_arry", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", "\n", "print", "(", "\"target tmplt \"", ",", "\"mean_mean\"", ",", "np", ".", "mean", "(", "mean_instance", ")", ",", "\"mean_max\"", ",", "np", ".", "mean", "(", "max_instance", ")", ",", "\"max_max\"", ",", "np", ".", "max", "(", "max_instance", ")", ")", "\n", "tmplate_id_lst", "=", "None", "\n", "", "return", "tmplate_id_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cal_template_cd_pntlst": [[262, 269], ["numpy.stack", "chamfer_dist", "torch.sqrt", "template.get_batch_stats", "template.toTensor", "mean_instance.cpu().numpy", "min_instance.cpu().numpy", "max_instance.cpu().numpy", "range", "mean_instance.cpu", "min_instance.cpu", "max_instance.cpu", "list"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_batch_stats", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor"], ["", "def", "cal_template_cd_pntlst", "(", "template_pnts", ",", "pnts_padding_arry", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", ":", "\n", "    ", "batch_template_pnts", "=", "np", ".", "stack", "(", "[", "template_pnts", "[", ":", ",", ":", "3", "]", "for", "j", "in", "range", "(", "list", "(", "pnts_padding_arry", ".", "shape", ")", "[", "0", "]", ")", "]", ")", "\n", "dist1", ",", "_", "=", "chamfer_dist", "(", "pnts_padding_arry", "[", ":", ",", ":", ",", ":", "3", "]", ",", "toTensor", "(", "batch_template_pnts", ")", ")", "\n", "# print(\"dist1.shape\", dist1.shape, pnts_padding_arry.shape, batch_template_pnts.shape)", "\n", "dist_l1", "=", "torch", ".", "sqrt", "(", "dist1", ")", "\n", "mean_instance", ",", "min_instance", ",", "max_instance", "=", "get_batch_stats", "(", "dist_l1", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", "\n", "return", "mean_instance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "min_instance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "max_instance", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.remove_voxelpnts": [[271, 286], ["numpy.array", "numpy.concatenate", "numpy.floor", "numpy.floor", "template.find_overlaps", "template.cd_4pose", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.ceil().astype", "numpy.ceil().astype", "template.coords3inds", "template.coords3inds", "numpy.expand_dims", "numpy.expand_dims", "numpy.minimum", "numpy.maximum", "numpy.expand_dims", "numpy.expand_dims", "cd_4pose.cpu().numpy", "numpy.expand_dims", "numpy.expand_dims", "numpy.ceil", "numpy.ceil", "cd_4pose.cpu"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.find_overlaps", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.cd_4pose", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.coords3inds", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.coords3inds"], ["", "def", "remove_voxelpnts", "(", "sourcepnts", ",", "target_pnts", ",", "voxel_size", "=", "np", ".", "array", "(", "[", "0.01", ",", "0.01", ",", "0.01", "]", ")", ",", "nearest_dist", "=", "None", ")", ":", "\n", "    ", "augpnts", "=", "target_pnts", "[", ":", ",", ":", "3", "]", "\n", "gtpnts", "=", "sourcepnts", "[", ":", ",", ":", "3", "]", "\n", "if", "nearest_dist", "is", "None", ":", "\n", "        ", "min_gtpnts", ",", "max_gtpnts", ",", "min_augpnts", ",", "max_augpnts", "=", "np", ".", "min", "(", "gtpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "gtpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "min", "(", "augpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "augpnts", ",", "axis", "=", "0", ")", "\n", "range", "=", "np", ".", "concatenate", "(", "[", "np", ".", "minimum", "(", "min_gtpnts", ",", "min_augpnts", ")", ",", "np", ".", "maximum", "(", "max_gtpnts", ",", "max_augpnts", ")", "]", ",", "axis", "=", "0", ")", "\n", "gtpnts_ind", "=", "np", ".", "floor", "(", "(", "gtpnts", "-", "np", ".", "expand_dims", "(", "range", "[", ":", "3", "]", ",", "axis", "=", "0", ")", ")", "/", "np", ".", "expand_dims", "(", "voxel_size", ",", "axis", "=", "0", ")", ")", "\n", "augpnts_ind", "=", "np", ".", "floor", "(", "(", "augpnts", "-", "np", ".", "expand_dims", "(", "range", "[", ":", "3", "]", ",", "axis", "=", "0", ")", ")", "/", "np", ".", "expand_dims", "(", "voxel_size", ",", "axis", "=", "0", ")", ")", "\n", "nx", ",", "ny", "=", "np", ".", "ceil", "(", "(", "range", "[", "3", "]", "-", "range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "np", ".", "ceil", "(", "(", "range", "[", "4", "]", "-", "range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "mask", "=", "find_overlaps", "(", "coords3inds", "(", "gtpnts_ind", ",", "nx", ",", "ny", ")", ",", "coords3inds", "(", "augpnts_ind", ",", "nx", ",", "ny", ")", ")", "\n", "# print(\"augpnts_ind\", mask.shape, augpnts_ind.shape, augpnts_ind[mask].shape)", "\n", "", "else", ":", "\n", "        ", "dist_l1", "=", "cd_4pose", "(", "np", ".", "expand_dims", "(", "augpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "expand_dims", "(", "gtpnts", ",", "axis", "=", "0", ")", ")", "\n", "mask", "=", "dist_l1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ">", "nearest_dist", "\n", "", "return", "target_pnts", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.find_overlaps": [[289, 297], ["numpy.argsort", "numpy.searchsorted", "numpy.take"], "function", ["None"], ["", "def", "find_overlaps", "(", "base", ",", "aug", ")", ":", "\n", "    ", "x", ",", "y", "=", "base", ",", "aug", "\n", "index", "=", "np", ".", "argsort", "(", "x", ")", "\n", "sorted_x", "=", "x", "[", "index", "]", "\n", "sorted_index", "=", "np", ".", "searchsorted", "(", "sorted_x", ",", "y", ")", "\n", "yindex", "=", "np", ".", "take", "(", "index", ",", "sorted_index", ",", "mode", "=", "\"clip\"", ")", "\n", "mask", "=", "x", "[", "yindex", "]", "!=", "y", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.coords3inds": [[298, 306], ["inds.astype"], "function", ["None"], ["", "def", "coords3inds", "(", "coords", ",", "ny", ",", "nx", ")", ":", "\n", "    ", "gperm1", "=", "nx", "*", "ny", "\n", "gperm2", "=", "nx", "\n", "zdim", "=", "coords", "[", ":", ",", "2", "]", "*", "gperm1", "\n", "ydim", "=", "coords", "[", ":", ",", "1", "]", "*", "gperm2", "\n", "xdim", "=", "coords", "[", ":", ",", "0", "]", "\n", "inds", "=", "zdim", "+", "ydim", "+", "xdim", "\n", "return", "inds", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.mirror": [[309, 313], ["numpy.concatenate", "template.remove_voxelpnts", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_voxelpnts"], ["", "def", "mirror", "(", "pnts", ")", ":", "\n", "    ", "mirror_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts", "[", "...", ",", "0", ":", "1", "]", ",", "-", "pnts", "[", "...", ",", "1", ":", "2", "]", ",", "pnts", "[", "...", ",", "2", ":", "4", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "mirror_pnts", "=", "remove_voxelpnts", "(", "pnts", ",", "mirror_pnts", ",", "nearest_dist", "=", "0.05", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "pnts", ",", "mirror_pnts", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.batch_vis_pair": [[315, 355], ["numpy.tile", "numpy.zeros_like", "numpy.zeros_like", "int", "int", "numpy.meshgrid", "range", "numpy.concatenate", "numpy.concatenate", "visualize_utils.draw_scenes_multi", "mayavi.show", "xv.reshape", "yv.reshape", "len", "numpy.array", "moved_pnts_lst.append", "moved_temp_lst.append", "len", "numpy.ceil", "numpy.ceil", "numpy.arange", "numpy.arange", "len", "len", "tuple", "tuple", "numpy.sqrt", "numpy.sqrt", "range", "range", "numpy.array", "range", "range", "range", "range", "range", "range", "len", "len", "PIL.ImageColor.getcolor", "numpy.array", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "batch_vis_pair", "(", "template", ",", "temp_box", ",", "pnts_lst", ",", "gt_box_arry", ",", "ranks", ")", ":", "\n", "    ", "moved_temp_lst", "=", "[", "]", "\n", "moved_pnts_lst", "=", "[", "]", "\n", "temp_box", "=", "np", ".", "tile", "(", "temp_box", ",", "[", "len", "(", "pnts_lst", ")", ",", "1", "]", ")", "\n", "temp_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "temp_box", "[", ":", ",", "-", "1", "]", ")", "\n", "gt_box_arry", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "gt_box_arry", "[", ":", ",", "-", "1", "]", ")", "\n", "width", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "pnts_lst", ")", ")", ")", "*", "1.2", ")", "\n", "height", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "pnts_lst", ")", ")", ")", "/", "1.2", ")", "\n", "x", "=", "(", "np", ".", "arange", "(", "height", ")", "-", "height", "//", "2", ")", "*", "6", "\n", "y", "=", "(", "np", ".", "arange", "(", "width", ")", "-", "width", "//", "2", ")", "*", "4", "\n", "xv", ",", "yv", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ",", "indexing", "=", "'ij'", ")", "\n", "xv", ",", "yv", "=", "xv", ".", "reshape", "(", "-", "1", ")", ",", "yv", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "colors", "=", "[", "'#e6194b'", ",", "'#4363d8'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "\n", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "\n", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "        ", "i", "=", "ranks", "[", "ind", "]", "\n", "shift", "=", "np", ".", "array", "(", "[", "[", "xv", "[", "ind", "]", ",", "yv", "[", "ind", "]", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "temp_box", "[", "i", ",", ":", "3", "]", ",", "gt_box_arry", "[", "i", ",", ":", "3", "]", "=", "shift", "[", "0", "]", ",", "shift", "[", "0", "]", "\n", "# print(template.shape, pnts.shape)", "\n", "moved_pnts_lst", ".", "append", "(", "pnts_lst", "[", "i", "]", "[", ":", ",", ":", "3", "]", "+", "shift", ")", "\n", "moved_temp_lst", ".", "append", "(", "template", "[", ":", ",", ":", "3", "]", "+", "shift", ")", "\n", "# print(shift, template.shape, shift.shape, np.mean((template + shift), axis=0))", "\n", "# print(\"xv\",xv.shape, len(moved_pnts_lst), len(moved_temp_lst))", "\n", "", "moved_temp_pnt", "=", "np", ".", "concatenate", "(", "moved_temp_lst", ",", "axis", "=", "0", ")", "\n", "moved_pnts", "=", "np", ".", "concatenate", "(", "moved_pnts_lst", ",", "axis", "=", "0", ")", "\n", "tmp_section", "=", "len", "(", "moved_temp_pnt", ")", "//", "200000", "+", "1", "\n", "pnt_section", "=", "len", "(", "moved_pnts", ")", "//", "200000", "+", "1", "\n", "render_pnts_lst", "=", "[", "moved_temp_pnt", "[", "i", "*", "200000", ":", "(", "i", "+", "1", ")", "*", "200000", "]", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "moved_pnts", "[", "i", "*", "200000", ":", "(", "i", "+", "1", ")", "*", "200000", "]", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "0", "]", ",", "\"RGB\"", ")", ")", ")", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "1", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "0.04", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "\"sphere\"", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "\n", "vu", ".", "draw_scenes_multi", "(", "render_pnts_lst", ",", "colors_lst", ",", "size_lst", ",", "mode_lst", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ")", "#, gt_boxes=temp_box, gt_boxes_color=colors_lst[0], ref_boxes=gt_box_arry, ref_boxes_color=colors_lst[1])", "\n", "\n", "# vu.draw_scenes_multi([np.concatenate(moved_temp_lst[:3], axis=0), np.concatenate(moved_pnts_lst[:3], axis=0)], colors_lst, size_lst, mode_lst, bgcolor=(1, 1, 1), gt_boxes=temp_box, gt_boxes_color=colors_lst[0], ref_boxes=gt_box_arry, ref_boxes_color=colors_lst[1])", "\n", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.vis_pair": [[357, 374], ["numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "visualize_utils.draw_scenes_multi", "mayavi.show", "tuple", "range", "range", "range", "numpy.array", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "vis_pair", "(", "template", ",", "temp_box", ",", "pnts", ",", "pnts_box", ")", ":", "\n", "    ", "temp_box", "[", ":", ",", ":", "3", "]", "=", "np", ".", "zeros_like", "(", "temp_box", "[", ":", ",", ":", "3", "]", ")", "\n", "temp_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", "-", "1", "]", ")", "\n", "pnts_box", "[", ":", ",", ":", "3", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", ":", "3", "]", ")", "\n", "pnts_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", "-", "1", "]", ")", "\n", "# print(template.shape, pnts.shape)", "\n", "colors", "=", "[", "'#e6194b'", ",", "'#4363d8'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "\n", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "\n", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "pnts_lst", "=", "[", "template", ",", "pnts", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "i", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "# vu.draw_scenes_multi(box_pnt_lst, colors_lst, size_lst, mode_lst, bgcolor=(1,1,1))", "\n", "vu", ".", "draw_scenes_multi", "(", "pnts_lst", ",", "colors_lst", ",", "size_lst", ",", "mode_lst", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ",", "gt_boxes", "=", "temp_box", ",", "gt_boxes_color", "=", "colors_lst", "[", "0", "]", ",", "ref_boxes", "=", "pnts_box", ",", "ref_boxes_color", "=", "colors_lst", "[", "1", "]", ")", "\n", "# axes = mlab.axes()", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.cd_4pose": [[375, 383], ["chamfer_dist", "torch.sqrt", "template.toTensor", "template.toTensor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor"], ["", "def", "cd_4pose", "(", "scene", ",", "template", ")", ":", "\n", "# points and points_reconstructed are n_points x 3 matrices", "\n", "    ", "dist1", ",", "_", "=", "chamfer_dist", "(", "toTensor", "(", "scene", ")", ",", "toTensor", "(", "template", ")", ")", "\n", "# print(\"dist1.shape\", dist1.shape)", "\n", "dist_l1", "=", "torch", ".", "sqrt", "(", "dist1", ")", "\n", "# mean_l1, min_l1, max_l1 = torch.mean(dist_l1, dim=1), torch.min(dist_l1, dim=1)[0], torch.max(dist_l1, dim=1)[0]", "\n", "# print(\"mean_l1 {}, min_l1 {}, max_l1 {}\".format(mean_l1, min_l1, max_l1))", "\n", "return", "dist_l1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.template.single_rotate_points_along_z": [[384, 404], ["numpy.cos", "numpy.sin", "numpy.zeros_like", "numpy.ones_like", "numpy.stack().reshape", "numpy.matmul", "numpy.stack"], "function", ["None"], ["", "def", "single_rotate_points_along_z", "(", "points", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (B, N, 3 + C)\n        angle: (B), angle along z-axis, angle increases x ==> y\n    Returns:\n\n    \"\"\"", "\n", "\n", "cosa", "=", "np", ".", "cos", "(", "angle", ")", "\n", "sina", "=", "np", ".", "sin", "(", "angle", ")", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "angle", ")", "\n", "ones", "=", "np", ".", "ones_like", "(", "angle", ")", "\n", "rot_matrix", "=", "np", ".", "stack", "(", "(", "\n", "cosa", ",", "sina", ",", "zeros", ",", "\n", "-", "sina", ",", "cosa", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "\n", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "points_rot", "=", "np", ".", "matmul", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "rot_matrix", ")", "\n", "return", "points_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.extract_allpnts": [[27, 53], ["range", "pathlib.Path", "open", "len", "box_dims_lst.append", "all_db_infos_lst.append", "multifindbestfit.mirror", "pnts_lst.append", "pickle.load", "numpy.concatenate", "multifindbestfit.get_normalized_cloud", "mirrored_pnts_lst.append", "mirrored_pnts_lst.append", "str", "numpy.zeros_like", "numpy.array", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.mirror", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_normalized_cloud"], ["def", "extract_allpnts", "(", "root_path", "=", "None", ",", "splits", "=", "[", "'train'", ",", "'val'", "]", ",", "type", "=", "'Car'", ",", "apply_mirror", "=", "True", ")", ":", "\n", "    ", "all_db_infos_lst", "=", "[", "]", "\n", "box_dims_lst", "=", "[", "]", "\n", "pnts_lst", "=", "[", "]", "\n", "mirrored_pnts_lst", "=", "[", "]", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "db_info_save_path", "=", "Path", "(", "root_path", ")", "/", "(", "'kitti_dbinfos_%s.pkl'", "%", "split", ")", "\n", "with", "open", "(", "db_info_save_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "all_db_infos", "=", "pickle", ".", "load", "(", "f", ")", "[", "type", "]", "\n", "", "for", "k", "in", "range", "(", "len", "(", "all_db_infos", ")", ")", ":", "\n", "            ", "info", "=", "all_db_infos", "[", "k", "]", "\n", "obj_type", "=", "info", "[", "'name'", "]", "\n", "if", "obj_type", "!=", "type", ":", "\n", "                ", "continue", "\n", "", "gt_box", "=", "info", "[", "'box3d_lidar'", "]", "\n", "box_dims_lst", ".", "append", "(", "np", ".", "concatenate", "(", "[", "np", ".", "zeros_like", "(", "gt_box", "[", "0", ":", "3", "]", ")", ",", "np", ".", "array", "(", "gt_box", "[", "3", ":", "6", "]", ")", ",", "np", ".", "zeros_like", "(", "gt_box", "[", "6", ":", "7", "]", ")", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "all_db_infos_lst", ".", "append", "(", "info", ")", "\n", "obj_pnt_fpath", "=", "\"/home/xharlie/dev/occlusion_pcd/data/kitti/detection3d/\"", "+", "info", "[", "'path'", "]", "\n", "car_pnts", "=", "get_normalized_cloud", "(", "str", "(", "obj_pnt_fpath", ")", ",", "gt_box", ",", "bottom", "=", "0.15", ")", "[", ":", ",", ":", "3", "]", "\n", "mirrored_car_pnts", "=", "mirror", "(", "car_pnts", ")", "\n", "pnts_lst", ".", "append", "(", "car_pnts", ")", "\n", "if", "apply_mirror", ":", "\n", "                ", "mirrored_pnts_lst", ".", "append", "(", "mirrored_car_pnts", ")", "\n", "", "else", ":", "\n", "                ", "mirrored_pnts_lst", ".", "append", "(", "car_pnts", ")", "\n", "", "", "", "return", "all_db_infos_lst", ",", "box_dims_lst", ",", "pnts_lst", ",", "mirrored_pnts_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.clustering": [[54, 68], ["sklearn.cluster.KMeans().fit", "sklearn.cluster.DBSCAN().fit", "numpy.zeros_like", "numpy.asarray", "range", "sklearn.cluster.KMeans", "sklearn.cluster.DBSCAN"], "function", ["None"], ["", "def", "clustering", "(", "m_nm", ",", "num_cluster", ",", "box_dims_lst", ")", ":", "\n", "    ", "train_box_dims", ",", "val_box_dims", "=", "box_dims_lst", "[", "0", "]", ",", "box_dims_lst", "[", "1", "]", "\n", "if", "m_nm", "==", "\"kmeans\"", ":", "\n", "        ", "clusterer", "=", "KMeans", "(", "n_clusters", "=", "num_cluster", ",", "random_state", "=", "1", ")", ".", "fit", "(", "train_box_dims", ")", "\n", "", "elif", "m_nm", "==", "\"DBSCAN\"", ":", "\n", "        ", "clusterer", "=", "DBSCAN", "(", "eps", "=", "0.3", ",", "min_samples", "=", "10", ")", ".", "fit", "(", "train_box_dims", ")", "\n", "core_samples_mask", "=", "np", ".", "zeros_like", "(", "clusterer", ".", "labels_", ",", "dtype", "=", "bool", ")", "\n", "core_samples_mask", "[", "clusterer", ".", "core_sample_indices_", "]", "=", "True", "\n", "labels", "=", "clusterer", ".", "labels_", "\n", "# print(train_box_dims.shape, clusterer.labels_.shape)", "\n", "# print(clusterer.cluster_centers_)", "\n", "# print(np.min(train_box_dims, axis=0))", "\n", "", "indices", "=", "[", "np", ".", "asarray", "(", "(", "clusterer", ".", "labels_", "==", "i", ")", ".", "nonzero", "(", ")", ")", "[", "0", ",", ":", "]", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "return", "clusterer", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_normalized_cloud": [[69, 73], ["numpy.fromfile().reshape", "numpy.concatenate", "multifindbestfit.remove_bottom", "numpy.fromfile", "multifindbestfit.single_rotate_points_along_z", "str"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_bottom", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.single_rotate_points_along_z"], ["", "def", "get_normalized_cloud", "(", "obj_pnt_fpath", ",", "gt_box", ",", "bottom", "=", "0.0", ")", ":", "\n", "    ", "pnts", "=", "np", ".", "fromfile", "(", "str", "(", "obj_pnt_fpath", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "pnts", "=", "np", ".", "concatenate", "(", "[", "single_rotate_points_along_z", "(", "pnts", "[", ":", ",", ":", "3", "]", ",", "-", "gt_box", "[", "6", "]", ")", ",", "pnts", "[", ":", ",", "3", ":", "]", "]", ",", "axis", "=", "1", ")", "\n", "return", "remove_bottom", "(", "pnts", ",", "gt_box", ",", "bottom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_bottom": [[74, 80], ["None"], "function", ["None"], ["", "def", "remove_bottom", "(", "pnts", ",", "gt_box", ",", "bottom", ")", ":", "\n", "    ", "if", "bottom", "==", "0.0", ":", "\n", "        ", "return", "pnts", "\n", "", "zthresh", "=", "-", "gt_box", "[", "5", "]", "/", "2", "+", "bottom", "\n", "keep_bool", "=", "pnts", "[", ":", ",", "2", "]", ">", "zthresh", "\n", "return", "pnts", "[", "keep_bool", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.vis_cluster": [[81, 109], ["visualize_utils.draw_scenes_multi", "mayavi.axes", "mayavi.show", "tuple", "range", "range", "range", "range", "range", "numpy.array", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "vis_cluster", "(", "clusterer", ",", "box_dims", ",", "cluster_num", ")", ":", "\n", "    ", "colors", "=", "[", "'#e6194b'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#4363d8'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "# fig = plt.figure()", "\n", "# ax = fig.add_subplot(111, projection='3d')", "\n", "#", "\n", "# # For each set of style and range settings, plot n random points in the box", "\n", "# # defined by x in [23, 32], y in [0, 100], z in [zlow, zhigh].", "\n", "# for i in range(box_dims.shape[0]):", "\n", "#     xs = box_dims[i,0]", "\n", "#     ys = box_dims[i,1]", "\n", "#     zs = box_dims[i,2]", "\n", "#     ax.scatter(xs, ys, zs, c=colors[clusterer.labels_[i]])", "\n", "#", "\n", "# ax.set_xlabel('X Label')", "\n", "# ax.set_ylabel('Y Label')", "\n", "# ax.set_zlabel('Z Label')", "\n", "# ax.set_aspect('equal')", "\n", "#", "\n", "# plt.show()", "\n", "binary", "=", "[", "clusterer", ".", "labels_", "==", "i", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "box_pnt_lst", "=", "[", "box_dims", "[", "binary", "[", "i", "]", "]", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "i", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "cluster_num", ")", "]", "\n", "# vu.draw_scenes_multi(box_pnt_lst, colors_lst, size_lst, mode_lst, bgcolor=(1,1,1))", "\n", "vu", ".", "draw_scenes_multi", "(", "box_pnt_lst", ",", "colors_lst", ",", "size_lst", ",", "mode_lst", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "axes", "=", "mlab", ".", "axes", "(", ")", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.save_pnts_box": [[110, 118], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_pnts_box", "(", "pnts", ",", "box", ",", "name", ",", "path", ")", ":", "\n", "    ", "template", "=", "{", "\n", "\"name\"", ":", "name", ",", "\n", "\"points\"", ":", "pnts", ",", "\n", "\"box\"", ":", "box", "\n", "}", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "template", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.find_overlaps": [[120, 128], ["numpy.argsort", "numpy.searchsorted", "numpy.take"], "function", ["None"], ["", "", "def", "find_overlaps", "(", "base", ",", "aug", ")", ":", "\n", "    ", "x", ",", "y", "=", "base", ",", "aug", "\n", "index", "=", "np", ".", "argsort", "(", "x", ")", "\n", "sorted_x", "=", "x", "[", "index", "]", "\n", "sorted_index", "=", "np", ".", "searchsorted", "(", "sorted_x", ",", "y", ")", "\n", "yindex", "=", "np", ".", "take", "(", "index", ",", "sorted_index", ",", "mode", "=", "\"clip\"", ")", "\n", "mask", "=", "x", "[", "yindex", "]", "!=", "y", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.coords3inds": [[129, 137], ["inds.astype"], "function", ["None"], ["", "def", "coords3inds", "(", "coords", ",", "ny", ",", "nx", ")", ":", "\n", "    ", "gperm1", "=", "nx", "*", "ny", "\n", "gperm2", "=", "nx", "\n", "zdim", "=", "coords", "[", ":", ",", "2", "]", "*", "gperm1", "\n", "ydim", "=", "coords", "[", ":", ",", "1", "]", "*", "gperm2", "\n", "xdim", "=", "coords", "[", ":", ",", "0", "]", "\n", "inds", "=", "zdim", "+", "ydim", "+", "xdim", "\n", "return", "inds", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.mirror": [[140, 144], ["numpy.concatenate", "multifindbestfit.remove_voxelpnts", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_voxelpnts"], ["", "def", "mirror", "(", "pnts", ",", "lastchannel", "=", "3", ")", ":", "\n", "    ", "mirror_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts", "[", "...", ",", "0", ":", "1", "]", ",", "-", "pnts", "[", "...", ",", "1", ":", "2", "]", ",", "pnts", "[", "...", ",", "2", ":", "lastchannel", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "mirror_pnts", "=", "remove_voxelpnts", "(", "pnts", ",", "mirror_pnts", ",", "nearest_dist", "=", "0.05", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "pnts", ",", "mirror_pnts", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.batch_vis_pair": [[146, 182], ["numpy.tile", "numpy.zeros_like", "numpy.zeros_like", "int", "int", "numpy.meshgrid", "range", "numpy.concatenate", "numpy.concatenate", "visualize_utils.draw_scenes_multi", "mayavi.show", "xv.reshape", "yv.reshape", "len", "numpy.array", "moved_pnts_lst.append", "moved_temp_lst.append", "len", "numpy.ceil", "numpy.ceil", "numpy.arange", "numpy.arange", "len", "len", "tuple", "tuple", "numpy.sqrt", "numpy.sqrt", "range", "range", "range", "range", "range", "range", "range", "range", "len", "len", "numpy.array", "numpy.array", "PIL.ImageColor.getcolor", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "batch_vis_pair", "(", "template", ",", "temp_box", ",", "pnts_lst", ",", "gt_box_arry", ",", "ranks", ")", ":", "\n", "    ", "moved_temp_lst", "=", "[", "]", "\n", "moved_pnts_lst", "=", "[", "]", "\n", "temp_box", "=", "np", ".", "tile", "(", "temp_box", ",", "[", "len", "(", "pnts_lst", ")", ",", "1", "]", ")", "\n", "temp_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "temp_box", "[", ":", ",", "-", "1", "]", ")", "\n", "gt_box_arry", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "gt_box_arry", "[", ":", ",", "-", "1", "]", ")", "\n", "width", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "pnts_lst", ")", ")", ")", "*", "1.2", ")", "\n", "height", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "pnts_lst", ")", ")", ")", "/", "1.2", ")", "\n", "x", "=", "(", "np", ".", "arange", "(", "height", ")", "-", "height", "//", "2", ")", "*", "6", "\n", "y", "=", "(", "np", ".", "arange", "(", "width", ")", "-", "width", "//", "2", ")", "*", "4", "\n", "xv", ",", "yv", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ",", "indexing", "=", "'ij'", ")", "\n", "xv", ",", "yv", "=", "xv", ".", "reshape", "(", "-", "1", ")", ",", "yv", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "        ", "i", "=", "ranks", "[", "ind", "]", "\n", "shift", "=", "np", ".", "array", "(", "[", "[", "xv", "[", "ind", "]", ",", "yv", "[", "ind", "]", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "temp_box", "[", "i", ",", ":", "3", "]", ",", "gt_box_arry", "[", "i", ",", ":", "3", "]", "=", "shift", "[", "0", "]", ",", "shift", "[", "0", "]", "\n", "# print(template.shape, pnts.shape)", "\n", "colors", "=", "[", "'#e6194b'", ",", "'#4363d8'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "moved_pnts_lst", ".", "append", "(", "pnts_lst", "[", "i", "]", "+", "shift", ")", "\n", "moved_temp_lst", ".", "append", "(", "template", "+", "shift", ")", "\n", "# print(shift, template.shape, shift.shape, np.mean((template + shift), axis=0))", "\n", "# print(\"xv\",xv.shape, len(moved_pnts_lst), len(moved_temp_lst))", "\n", "", "moved_temp_pnt", "=", "np", ".", "concatenate", "(", "moved_temp_lst", ",", "axis", "=", "0", ")", "\n", "moved_pnts", "=", "np", ".", "concatenate", "(", "moved_pnts_lst", ",", "axis", "=", "0", ")", "\n", "tmp_section", "=", "len", "(", "moved_temp_pnt", ")", "//", "200000", "+", "1", "\n", "pnt_section", "=", "len", "(", "moved_pnts", ")", "//", "200000", "+", "1", "\n", "render_pnts_lst", "=", "[", "moved_temp_pnt", "[", "i", "*", "200000", ":", "(", "i", "+", "1", ")", "*", "200000", "]", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "moved_pnts", "[", "i", "*", "200000", ":", "(", "i", "+", "1", ")", "*", "200000", "]", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "0", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "1", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "0.04", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "tmp_section", ")", "]", "+", "[", "\"sphere\"", "for", "i", "in", "range", "(", "pnt_section", ")", "]", "\n", "\n", "vu", ".", "draw_scenes_multi", "(", "render_pnts_lst", ",", "colors_lst", ",", "size_lst", ",", "mode_lst", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ")", "#, gt_boxes=temp_box, gt_boxes_color=colors_lst[0], ref_boxes=gt_box_arry, ref_boxes_color=colors_lst[1])", "\n", "\n", "# vu.draw_scenes_multi([np.concatenate(moved_temp_lst[:3], axis=0), np.concatenate(moved_pnts_lst[:3], axis=0)], colors_lst, size_lst, mode_lst, bgcolor=(1, 1, 1), gt_boxes=temp_box, gt_boxes_color=colors_lst[0], ref_boxes=gt_box_arry, ref_boxes_color=colors_lst[1])", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.vis_pair": [[184, 204], ["visualize_utils.draw_scenes_multi", "visualize_utils.draw_scenes_multi", "mayavi.show", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "tuple", "range", "range", "range", "numpy.array", "PIL.ImageColor.getcolor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi"], ["", "def", "vis_pair", "(", "template", ",", "temp_box", ",", "pnts", ",", "pnts_box", ")", ":", "\n", "    ", "if", "temp_box", "is", "not", "None", "and", "pnts_box", "is", "not", "None", ":", "\n", "        ", "temp_box", "[", ":", ",", ":", "3", "]", "=", "np", ".", "zeros_like", "(", "temp_box", "[", ":", ",", ":", "3", "]", ")", "\n", "temp_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", "-", "1", "]", ")", "\n", "pnts_box", "[", ":", ",", ":", "3", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", ":", "3", "]", ")", "\n", "pnts_box", "[", ":", ",", "-", "1", "]", "=", "np", ".", "zeros_like", "(", "pnts_box", "[", ":", ",", "-", "1", "]", ")", "\n", "# print(template.shape, pnts.shape)", "\n", "", "colors", "=", "[", "'#e6194b'", ",", "'#4363d8'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "'#bcf60c'", ",", "\n", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#9a6324'", ",", "'#fffac8'", ",", "'#800000'", ",", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "\n", "'#000075'", ",", "'#808080'", ",", "'#ffffff'", ",", "'#000000'", "]", "\n", "pnts_lst", "=", "[", "template", ",", "pnts", "]", "\n", "colors_lst", "=", "[", "tuple", "(", "np", ".", "array", "(", "ImageColor", ".", "getcolor", "(", "colors", "[", "i", "]", ",", "\"RGB\"", ")", ")", "/", "255.0", ")", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "size_lst", "=", "[", "0.02", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "mode_lst", "=", "[", "\"sphere\"", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "# vu.draw_scenes_multi(pnts_lst, colors_lst, size_lst, mode_lst, bgcolor=(1, 1, 1), gt_boxes=temp_box, ref_boxes=pnts_box)", "\n", "\n", "vu", ".", "draw_scenes_multi", "(", "[", "pnts_lst", "[", "0", "]", "]", ",", "[", "colors_lst", "[", "0", "]", "]", ",", "[", "size_lst", "[", "0", "]", "]", ",", "[", "mode_lst", "[", "0", "]", "]", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ",", "gt_boxes", "=", "None", ",", "ref_boxes", "=", "None", ")", "\n", "\n", "vu", ".", "draw_scenes_multi", "(", "[", "pnts_lst", "[", "1", "]", "]", ",", "[", "colors_lst", "[", "1", "]", "]", ",", "[", "size_lst", "[", "1", "]", "]", ",", "[", "mode_lst", "[", "1", "]", "]", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ",", "gt_boxes", "=", "None", ",", "ref_boxes", "=", "None", ")", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.cd_4pose": [[206, 214], ["chamfer_dist", "torch.sqrt", "multifindbestfit.toTensor", "multifindbestfit.toTensor"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor"], ["", "def", "cd_4pose", "(", "scene", ",", "template", ")", ":", "\n", "# points and points_reconstructed are n_points x 3 matrices", "\n", "    ", "dist1", ",", "_", "=", "chamfer_dist", "(", "toTensor", "(", "scene", ")", ",", "toTensor", "(", "template", ")", ")", "\n", "# print(\"dist1.shape\", dist1.shape)", "\n", "dist_l1", "=", "torch", ".", "sqrt", "(", "dist1", ")", "\n", "# mean_l1, min_l1, max_l1 = torch.mean(dist_l1, dim=1), torch.min(dist_l1, dim=1)[0], torch.max(dist_l1, dim=1)[0]", "\n", "# print(\"mean_l1 {}, min_l1 {}, max_l1 {}\".format(mean_l1, min_l1, max_l1))", "\n", "return", "dist_l1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.single_rotate_points_along_z": [[215, 235], ["numpy.cos", "numpy.sin", "numpy.zeros_like", "numpy.ones_like", "numpy.stack().reshape", "numpy.matmul", "numpy.stack"], "function", ["None"], ["", "def", "single_rotate_points_along_z", "(", "points", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (B, N, 3 + C)\n        angle: (B), angle along z-axis, angle increases x ==> y\n    Returns:\n\n    \"\"\"", "\n", "\n", "cosa", "=", "np", ".", "cos", "(", "angle", ")", "\n", "sina", "=", "np", ".", "sin", "(", "angle", ")", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "angle", ")", "\n", "ones", "=", "np", ".", "ones_like", "(", "angle", ")", "\n", "rot_matrix", "=", "np", ".", "stack", "(", "(", "\n", "cosa", ",", "sina", ",", "zeros", ",", "\n", "-", "sina", ",", "cosa", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "\n", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "points_rot", "=", "np", ".", "matmul", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "rot_matrix", ")", "\n", "return", "points_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_iou": [[237, 249], ["len", "range", "torch.cat", "print", "min", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "iou3d_lst.append"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "def", "get_iou", "(", "box_tensor", ")", ":", "\n", "    ", "limit", "=", "len", "(", "box_dims_lst", ")", "\n", "start", "=", "0", "\n", "iou3d_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "11", ")", ":", "\n", "        ", "end", "=", "min", "(", "start", "+", "limit", "//", "10", ",", "limit", ")", "\n", "iou3d", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "box_tensor", "[", "start", ":", "end", ",", ":", "]", ",", "box_tensor", ")", "\n", "iou3d_lst", ".", "append", "(", "iou3d", ")", "\n", "start", "=", "end", "\n", "", "iou3d", "=", "torch", ".", "cat", "(", "iou3d_lst", ",", "dim", "=", "0", ")", "\n", "print", "(", "\"iou3d\"", ",", "iou3d", ".", "shape", ")", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.padding_pnt_tensors": [[251, 275], ["range", "isinstance", "multifindbestfit.toTensor", "multifindbestfit.toTensor", "multifindbestfit.toTensor", "len", "isinstance", "numpy.concatenate", "numpy.concatenate", "pnts_padding_lst.append", "mask_lst.append", "reversemask_lst.append", "torch.stack", "multifindbestfit.toTensor", "numpy.array", "numpy.array", "torch.cat", "numpy.concatenate", "numpy.array", "numpy.ones", "numpy.zeros", "numpy.zeros", "torch.zeros", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor"], ["", "def", "padding_pnt_tensors", "(", "pnts_lst", ",", "max_num_pnts", "=", "None", ",", "num_pnts_arry", "=", "None", ")", ":", "\n", "    ", "pnts_padding_lst", "=", "[", "]", "\n", "mask_lst", "=", "[", "]", "\n", "reversemask_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pnts_lst", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "pnts_lst", "[", "i", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "padding_pnts", "=", "torch", ".", "cat", "(", "[", "pnts_lst", "[", "i", "]", ",", "torch", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", ",", "3", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "\"cuda\"", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "padding_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts_lst", "[", "i", "]", ",", "np", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", ",", "3", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "mask", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "[", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "zeros", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", ")", "\n", "reversemask", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "[", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "10.0", "*", "np", ".", "ones", "(", "[", "max_num_pnts", "-", "num_pnts_arry", "[", "i", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", ")", "\n", "pnts_padding_lst", ".", "append", "(", "padding_pnts", ")", "\n", "mask_lst", ".", "append", "(", "mask", ")", "\n", "reversemask_lst", ".", "append", "(", "reversemask", ")", "\n", "", "if", "isinstance", "(", "pnts_padding_lst", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "pnts_padding_tensor", "=", "torch", ".", "stack", "(", "pnts_padding_lst", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "pnts_padding_tensor", "=", "toTensor", "(", "np", ".", "array", "(", "pnts_padding_lst", ")", ")", "\n", "", "mask_tensor", "=", "toTensor", "(", "np", ".", "array", "(", "mask_lst", ")", ")", "\n", "reversemask_tensor", "=", "toTensor", "(", "np", ".", "array", "(", "reversemask_lst", ")", ")", "\n", "num_pnts_tensor", "=", "toTensor", "(", "num_pnts_arry", ")", "\n", "return", "pnts_padding_tensor", ",", "mask_tensor", ",", "reversemask_tensor", ",", "num_pnts_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.toTensor": [[277, 279], ["torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "function", ["None"], ["", "def", "toTensor", "(", "sample", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "sample", ")", ".", "float", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_padding_boxpnts_tensors": [[281, 290], ["numpy.array", "multifindbestfit.padding_pnt_tensors", "max", "num_pnts_lst.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.padding_pnt_tensors"], ["", "def", "get_padding_boxpnts_tensors", "(", "point_in_box_lst", ")", ":", "\n", "    ", "max_num_pnts", "=", "0", "\n", "num_pnts_lst", "=", "[", "]", "\n", "for", "point_in_box", "in", "point_in_box_lst", ":", "\n", "        ", "max_num_pnts", "=", "max", "(", "max_num_pnts", ",", "len", "(", "point_in_box", ")", ")", "\n", "num_pnts_lst", ".", "append", "(", "len", "(", "point_in_box", ")", ")", "\n", "", "num_pnts_array", "=", "np", ".", "array", "(", "num_pnts_lst", ")", "\n", "box_pnts_padding_tensor", ",", "box_mask_tensor", ",", "box_reversemask_tensor", ",", "box_num_pnts_tensor", "=", "padding_pnt_tensors", "(", "point_in_box_lst", ",", "max_num_pnts", ",", "num_pnts_array", ")", "\n", "return", "box_pnts_padding_tensor", ",", "box_mask_tensor", ",", "box_reversemask_tensor", ",", "box_num_pnts_tensor", ",", "num_pnts_array", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor": [[292, 303], ["boxpoint_tensor.dim", "list", "torch.unsqueeze().repeat().view", "boxpoint_tensor.dim", "list", "torch.unsqueeze().repeat().view", "torch.unsqueeze().repeat().view", "torch.unsqueeze().repeat", "list", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "function", ["None"], ["", "def", "repeat_boxpoints_tensor", "(", "boxpoint_tensor", ",", "candidate_num", ")", ":", "\n", "    ", "if", "boxpoint_tensor", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "gt_boxnum", ",", "max_point_num", ",", "point_dims", "=", "list", "(", "boxpoint_tensor", ".", "shape", ")", "\n", "box_pnts_padding_tensor", "=", "torch", ".", "unsqueeze", "(", "boxpoint_tensor", ",", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "candidate_num", ",", "1", ",", "1", ")", ".", "view", "(", "gt_boxnum", "*", "candidate_num", ",", "max_point_num", ",", "point_dims", ")", "\n", "", "elif", "boxpoint_tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "gt_boxnum", ",", "max_point_num", "=", "list", "(", "boxpoint_tensor", ".", "shape", ")", "\n", "box_pnts_padding_tensor", "=", "torch", ".", "unsqueeze", "(", "boxpoint_tensor", ",", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "candidate_num", ",", "1", ")", ".", "view", "(", "gt_boxnum", "*", "candidate_num", ",", "max_point_num", ")", "\n", "", "else", ":", "\n", "        ", "gt_boxnum", "=", "list", "(", "boxpoint_tensor", ".", "shape", ")", "[", "0", "]", "\n", "box_pnts_padding_tensor", "=", "torch", ".", "unsqueeze", "(", "boxpoint_tensor", ",", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "candidate_num", ")", ".", "view", "(", "gt_boxnum", "*", "candidate_num", ")", "\n", "", "return", "box_pnts_padding_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.find_best_match_boxpnts": [[306, 337], ["range", "len", "print", "tuple", "torch.stack", "multifindbestfit.find_multi_best_match_boxpnts", "pnt_thresh_best_iou_indices[].cpu", "str", "str", "print", "torch.as_tensor", "int", "int", "open", "pickle.dump", "multifindbestfit.space_occ_voxelpnts", "range", "os.path.join", "bm_pnts.astype", "len", "multifindbestfit.remove_outofbox", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.find_multi_best_match_boxpnts", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.space_occ_voxelpnts", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_outofbox"], ["", "def", "find_best_match_boxpnts", "(", "all_db_infos_lst", ",", "box_dims_lst", ",", "sorted_iou", ",", "pnt_thresh_best_iou_indices", ",", "mirrored_pnts_lst", ",", "pnts_lst", ",", "coords_num", ",", "occ_map", ",", "bm_dir", ",", "allrange", ",", "nx", ",", "ny", ",", "voxel_size", ",", "max_num_bm", "=", "5", ",", "num_extra_coords", "=", "2000", ",", "iou_thresh", "=", "0.84", ",", "ex_coords_ratio", "=", "10.", ",", "nearest_dist", "=", "0.16", ",", "vis", "=", "False", ",", "save", "=", "False", ")", ":", "\n", "    ", "'''\n    :param all_db_infos_lst: list of info\n    :param box_dims_lst: M * 7\n    :param sorted_iou: sorted top 800 iou: M * 800\n    :param pnt_thresh_best_iou_indices: mirror car indices with coords num > 400 and top 800 iou: M * 800\n    :param mirrored_pnts_lst: M lst\n    :param coords_num: M\n    :param occ_map: M * dim\n    :param max_num_bm: 5\n    :return:\n    '''", "\n", "for", "car_id", "in", "range", "(", "0", ",", "len", "(", "mirrored_pnts_lst", ")", ")", ":", "\n", "        ", "cur_mirrored_pnts_lst", "=", "[", "mirrored_pnts_lst", "[", "car_id", "]", "]", "\n", "cur_pnts_lst", "=", "[", "pnts_lst", "[", "car_id", "]", "]", "\n", "print", "(", "\"pnt_thresh_best_iou_indices\"", ",", "pnt_thresh_best_iou_indices", ".", "shape", ")", "\n", "picked_indices", "=", "tuple", "(", "pnt_thresh_best_iou_indices", "[", "car_id", "]", ".", "cpu", "(", ")", ")", "\n", "selected_mirrored_pnts_lst", "=", "[", "mirrored_pnts_lst", "[", "i", "]", "for", "i", "in", "picked_indices", "]", "\n", "selected_pnts_lst", "=", "[", "pnts_lst", "[", "i", "]", "for", "i", "in", "picked_indices", "]", "\n", "# print(\"pnt_thresh_best_iou_indices[car_id]\", pnt_thresh_best_iou_indices[car_id].shape, coords_num.shape)", "\n", "cur_occ_map", "=", "occ_map", "[", "car_id", "]", "\n", "selected_occ_map", "=", "torch", ".", "stack", "(", "[", "torch", ".", "as_tensor", "(", "space_occ_voxelpnts", "(", "remove_outofbox", "(", "selected_mirrored_pnts_lst", "[", "i", "]", ",", "box_dims_lst", "[", "car_id", "]", ")", ",", "allrange", ",", "nx", ",", "ny", ",", "voxel_size", "=", "voxel_size", ")", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "int32", ")", "for", "i", "in", "range", "(", "len", "(", "selected_mirrored_pnts_lst", ")", ")", "]", ",", "dim", "=", "0", ")", "# M nx ny", "\n", "selected_sorted_iou", ",", "cur_box", ",", "selected_pnt_thresh_best_iou_indices", "=", "sorted_iou", "[", "car_id", "]", ",", "box_dims_lst", "[", "car_id", "]", ",", "pnt_thresh_best_iou_indices", "[", "car_id", "]", "\n", "bm_pnts", ",", "bm_coords_num", "=", "find_multi_best_match_boxpnts", "(", "selected_sorted_iou", ",", "cur_box", ",", "cur_mirrored_pnts_lst", ",", "cur_pnts_lst", ",", "selected_mirrored_pnts_lst", ",", "selected_pnts_lst", ",", "selected_pnt_thresh_best_iou_indices", ",", "cur_occ_map", ",", "selected_occ_map", ",", "max_num_bm", "=", "max_num_bm", ",", "num_extra_coords", "=", "num_extra_coords", ",", "iou_thresh", "=", "iou_thresh", ",", "ex_coords_ratio", "=", "ex_coords_ratio", ",", "nearest_dist", "=", "nearest_dist", ",", "vis", "=", "vis", ")", "\n", "\n", "info", "=", "all_db_infos_lst", "[", "car_id", "]", "\n", "image_idx", ",", "gt_idx", "=", "str", "(", "int", "(", "info", "[", "'image_idx'", "]", ")", ")", ",", "str", "(", "int", "(", "info", "[", "'gt_idx'", "]", ")", ")", "\n", "if", "save", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "bm_dir", ",", "image_idx", "+", "\"_\"", "+", "gt_idx", "+", "\".pkl\"", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "bm_pnts", ".", "astype", "(", "np", ".", "float32", ")", ",", "f", ")", "\n", "", "print", "(", "\"{}/{}: bm_vox_num {}, bm_pnt_num {} \"", ".", "format", "(", "car_id", ",", "len", "(", "mirrored_pnts_lst", ")", ",", "bm_coords_num", ",", "bm_pnts", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_outofbox": [[339, 345], ["numpy.logical_and", "numpy.prod", "np.prod.astype"], "function", ["None"], ["", "", "", "def", "remove_outofbox", "(", "pnts", ",", "box", ")", ":", "\n", "    ", "dim", "=", "box", "[", "3", ":", "6", "]", "\n", "point_in_box_mask", "=", "np", ".", "logical_and", "(", "pnts", "<=", "dim", "*", "0.5", ",", "pnts", ">=", "-", "dim", "*", "0.5", ")", "\n", "# N, M", "\n", "point_in_box_mask", "=", "np", ".", "prod", "(", "point_in_box_mask", ".", "astype", "(", "np", ".", "int8", ")", ",", "axis", "=", "-", "1", ",", "dtype", "=", "bool", ")", "\n", "return", "pnts", "[", "point_in_box_mask", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_batch_stats": [[347, 356], ["torch.sum", "torch.min", "torch.max"], "function", ["None"], ["", "def", "get_batch_stats", "(", "dist", ",", "num_pnts_tensor", ",", "mask_arry", ",", "reversemask_arry", ")", ":", "\n", "    ", "masked_dist", "=", "dist", "*", "mask_arry", "\n", "addmin_dist", "=", "masked_dist", "+", "reversemask_arry", "\n", "addmax_dist", "=", "masked_dist", "-", "reversemask_arry", "\n", "mean_instance", "=", "torch", ".", "sum", "(", "masked_dist", ",", "dim", "=", "1", ")", "/", "num_pnts_tensor", "# N CARS to the template", "\n", "min_instance", "=", "torch", ".", "min", "(", "addmin_dist", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "max_instance", "=", "torch", ".", "max", "(", "addmax_dist", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "mean_instance", "[", "mean_instance", "!=", "mean_instance", "]", "=", "100.0", "\n", "return", "mean_instance", ",", "min_instance", ",", "max_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.find_multi_best_match_boxpnts": [[358, 418], ["len", "multifindbestfit.get_padding_boxpnts_tensors", "multifindbestfit.get_padding_boxpnts_tensors", "list", "multifindbestfit.repeat_boxpoints_tensor", "multifindbestfit.repeat_boxpoints_tensor", "multifindbestfit.repeat_boxpoints_tensor", "multifindbestfit.repeat_boxpoints_tensor", "range", "print", "torch.unsqueeze", "chamfer_dist", "torch.sqrt", "multifindbestfit.get_batch_stats", "torch.cat.view", "torch.cat.view", "torch.zeros", "torch.cat.clone", "multifindbestfit.extra_occ", "torch.min", "min_heur_indices.cpu().item", "multifindbestfit.remove_voxelpnts", "multifindbestfit.vis_pair", "multifindbestfit.vis_pair", "numpy.concatenate", "torch.sum().cpu", "print", "bm_extra_vox_num.cpu", "min_heur_indices.cpu", "numpy.expand_dims", "numpy.expand_dims", "len", "extra_occ.unsqueeze", "bm_iou.cpu", "torch.sum", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "extra_occ.unsqueeze", "torch.cat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_padding_boxpnts_tensors", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_padding_boxpnts_tensors", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.repeat_boxpoints_tensor", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.get_batch_stats", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.extra_occ", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_voxelpnts", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.vis_pair", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.vis_pair"], ["", "def", "find_multi_best_match_boxpnts", "(", "sorted_iou", ",", "gt_box", ",", "cur_mirrored_pnts_lst", ",", "cur_pnts_lst", ",", "picked_mirrored_pnts_lst", ",", "picked_pnts_lst", ",", "selected_indices", ",", "cur_occ_map", ",", "selected_occ_map", ",", "max_num_bm", "=", "5", ",", "num_extra_coords", "=", "2000", ",", "iou_thresh", "=", "0.84", ",", "ex_coords_ratio", "=", "10.", ",", "nearest_dist", "=", "0.16", ",", "vis", "=", "False", ")", ":", "\n", "\n", "    ", "gt_boxnum", "=", "len", "(", "cur_mirrored_pnts_lst", ")", "\n", "box_pnts_padding_tensor", ",", "box_mask_tensor", ",", "box_reversemask_tensor", ",", "box_num_pnts_tensor", ",", "box_num_pnts_array", "=", "get_padding_boxpnts_tensors", "(", "cur_mirrored_pnts_lst", ")", "\n", "mirr_box_pnts_padding_tensor", ",", "mirr_box_mask_tensor", ",", "mirr_box_reversemask_tensor", ",", "mirr_box_num_pnts_tensor", ",", "mirr_box_num_pnts_array", "=", "get_padding_boxpnts_tensors", "(", "picked_mirrored_pnts_lst", ")", "\n", "\n", "candidate_num", ",", "num_max_template_points", ",", "point_dims", "=", "list", "(", "mirr_box_pnts_padding_tensor", ".", "shape", ")", "\n", "mirr_box_reversemask_tensor_remote", "=", "mirr_box_pnts_padding_tensor", "+", "torch", ".", "unsqueeze", "(", "mirr_box_reversemask_tensor", ",", "dim", "=", "-", "1", ")", "\n", "box_pnts_padding_tensor", "=", "repeat_boxpoints_tensor", "(", "box_pnts_padding_tensor", ",", "candidate_num", ")", "\n", "box_num_pnts_tensor", "=", "repeat_boxpoints_tensor", "(", "box_num_pnts_tensor", ",", "candidate_num", ")", "\n", "box_mask_tensor", "=", "repeat_boxpoints_tensor", "(", "box_mask_tensor", ",", "candidate_num", ")", "\n", "box_reversemask_tensor", "=", "repeat_boxpoints_tensor", "(", "box_reversemask_tensor", ",", "candidate_num", ")", "\n", "if", "box_pnts_padding_tensor", ".", "shape", "[", "-", "2", "]", ">", "0", ":", "\n", "        ", "dist1", ",", "_", "=", "chamfer_dist", "(", "box_pnts_padding_tensor", ",", "mirr_box_reversemask_tensor_remote", ")", "# candidate_num X max num pnt X 3", "\n", "dist_l1", "=", "torch", ".", "sqrt", "(", "dist1", ")", "\n", "# print(\"dist_l1\", dist_l1.shape, mirr_box_pnts_padding_tensor.shape)", "\n", "mean_instance", ",", "min_instance", ",", "max_instance", "=", "get_batch_stats", "(", "dist_l1", ",", "box_num_pnts_tensor", ",", "box_mask_tensor", ",", "box_reversemask_tensor", ")", "\n", "mean_instance", "=", "mean_instance", ".", "view", "(", "gt_boxnum", ",", "candidate_num", ")", "\n", "# min_instance = min_instance.view(gt_boxnum, candidate_num)", "\n", "max_instance", "=", "max_instance", ".", "view", "(", "gt_boxnum", ",", "candidate_num", ")", "\n", "", "else", ":", "\n", "        ", "mean_instance", "=", "torch", ".", "zeros", "(", "[", "gt_boxnum", ",", "candidate_num", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "max_instance", "=", "mean_instance", ".", "clone", "(", ")", "\n", "", "aug_map", "=", "cur_occ_map", "\n", "bm_pnts", "=", "cur_mirrored_pnts_lst", "[", "0", "]", "\n", "oneside_bm_pnts", "=", "cur_pnts_lst", "[", "0", "]", "\n", "aug_coords_num", "=", "0", "\n", "for", "round", "in", "range", "(", "max_num_bm", ")", ":", "\n", "        ", "extra_coord_nums", "=", "extra_occ", "(", "aug_map", ",", "selected_occ_map", ")", "\n", "heuristic", "=", "max_instance", "+", "ex_coords_ratio", "/", "extra_coord_nums", ".", "unsqueeze", "(", "0", ")", "+", "(", "sorted_iou", ".", "unsqueeze", "(", "0", ")", "<", "iou_thresh", ")", "*", "2.0", "+", "(", "extra_coord_nums", ".", "unsqueeze", "(", "0", ")", "<", "30", ")", "*", "1.0", "# mean_instance + 10. / extra_coord_nums + (sorted_iou < 0.84) * 1.0 #", "\n", "min_heur_sorted", ",", "min_heur_indices", "=", "torch", ".", "min", "(", "heuristic", ",", "dim", "=", "1", ")", "\n", "bm_iou", ",", "bm_match_car_ind", ",", "bm_extra_vox_num", ",", "bm_match_occ_map", "=", "sorted_iou", "[", "min_heur_indices", "]", ",", "selected_indices", "[", "min_heur_indices", "]", ",", "extra_coord_nums", "[", "min_heur_indices", "]", ",", "selected_occ_map", "[", "min_heur_indices", ",", "...", "]", "\n", "if", "(", "bm_iou", ".", "cpu", "(", ")", "<", "iou_thresh", "and", "bm_pnts", ".", "shape", "[", "0", "]", ">", "0", ")", "or", "bm_extra_vox_num", ".", "cpu", "(", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "ind", "=", "min_heur_indices", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "added_pnts", "=", "remove_voxelpnts", "(", "bm_pnts", ",", "picked_mirrored_pnts_lst", "[", "ind", "]", ",", "nearest_dist", "=", "nearest_dist", ")", "\n", "if", "vis", ":", "\n", "# vis_pair(added_pnts, None, bm_pnts, np.expand_dims(gt_box, axis=0))", "\n", "            ", "vis_pair", "(", "picked_mirrored_pnts_lst", "[", "ind", "]", ",", "None", ",", "bm_pnts", ",", "np", ".", "expand_dims", "(", "gt_box", ",", "axis", "=", "0", ")", ")", "\n", "vis_pair", "(", "picked_pnts_lst", "[", "ind", "]", ",", "None", ",", "oneside_bm_pnts", ",", "np", ".", "expand_dims", "(", "gt_box", ",", "axis", "=", "0", ")", ")", "\n", "", "if", "added_pnts", ".", "shape", "[", "0", "]", ">", "4", ":", "\n", "            ", "bm_pnts", "=", "np", ".", "concatenate", "(", "[", "bm_pnts", ",", "added_pnts", "]", ",", "axis", "=", "0", ")", "\n", "aug_map", "=", "aug_map", "|", "bm_match_occ_map", "\n", "aug_coords_num", "=", "torch", ".", "sum", "(", "aug_map", ")", ".", "cpu", "(", ")", "\n", "print", "(", "\"added_pnts\"", ",", "bm_pnts", ".", "shape", ",", "added_pnts", ".", "shape", ",", "ind", ",", "picked_mirrored_pnts_lst", "[", "ind", "]", ".", "shape", ",", "aug_coords_num", ",", "\"bm_extra_vox_num\"", ",", "bm_extra_vox_num", ")", "\n", "", "if", "len", "(", "sorted_iou", ")", "==", "1", "or", "aug_coords_num", ">=", "num_extra_coords", ":", "\n", "            ", "break", "\n", "", "elif", "ind", "==", "len", "(", "sorted_iou", ")", "-", "1", ":", "\n", "            ", "sorted_iou", ",", "selected_indices", ",", "selected_occ_map", ",", "max_instance", ",", "mean_instance", "=", "sorted_iou", "[", ":", "ind", "]", ",", "selected_indices", "[", ":", "ind", "]", ",", "selected_occ_map", "[", ":", "ind", "]", ",", "max_instance", "[", ":", ",", ":", "ind", "]", ",", "mean_instance", "[", ":", ",", ":", "ind", "]", "\n", "", "elif", "ind", "==", "0", ":", "\n", "            ", "sorted_iou", ",", "selected_indices", ",", "selected_occ_map", ",", "max_instance", ",", "mean_instance", "=", "sorted_iou", "[", "ind", "+", "1", ":", "]", ",", "selected_indices", "[", "ind", "+", "1", ":", "]", ",", "selected_occ_map", "[", "ind", "+", "1", ":", "]", ",", "max_instance", "[", ":", ",", "ind", "+", "1", ":", "]", ",", "mean_instance", "[", ":", ",", "ind", "+", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "sorted_iou", "=", "torch", ".", "cat", "(", "[", "sorted_iou", "[", ":", "ind", "]", ",", "sorted_iou", "[", "ind", "+", "1", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "selected_indices", "=", "torch", ".", "cat", "(", "[", "selected_indices", "[", ":", "ind", "]", ",", "selected_indices", "[", "ind", "+", "1", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "selected_occ_map", "=", "torch", ".", "cat", "(", "[", "selected_occ_map", "[", ":", "ind", "]", ",", "selected_occ_map", "[", "ind", "+", "1", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "max_instance", "=", "torch", ".", "cat", "(", "[", "max_instance", "[", ":", ",", ":", "ind", "]", ",", "max_instance", "[", ":", ",", "ind", "+", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "mean_instance", "=", "torch", ".", "cat", "(", "[", "mean_instance", "[", ":", ",", ":", "ind", "]", ",", "mean_instance", "[", ":", ",", "ind", "+", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "print", "(", "\"finish one \"", ")", "\n", "return", "bm_pnts", ",", "aug_coords_num", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.remove_voxelpnts": [[420, 435], ["numpy.array", "numpy.concatenate", "numpy.floor", "numpy.floor", "multifindbestfit.find_overlaps", "multifindbestfit.cd_4pose", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.ceil().astype", "numpy.ceil().astype", "multifindbestfit.coords3inds", "multifindbestfit.coords3inds", "numpy.expand_dims", "numpy.expand_dims", "numpy.minimum", "numpy.maximum", "numpy.expand_dims", "numpy.expand_dims", "cd_4pose.cpu().numpy", "numpy.expand_dims", "numpy.expand_dims", "numpy.ceil", "numpy.ceil", "cd_4pose.cpu"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.find_overlaps", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.cd_4pose", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.coords3inds", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.coords3inds"], ["", "def", "remove_voxelpnts", "(", "sourcepnts", ",", "target_pnts", ",", "voxel_size", "=", "np", ".", "array", "(", "[", "0.08", ",", "0.08", ",", "0.08", "]", ")", ",", "nearest_dist", "=", "None", ")", ":", "\n", "    ", "augpnts", "=", "target_pnts", "[", ":", ",", ":", "3", "]", "\n", "gtpnts", "=", "sourcepnts", "[", ":", ",", ":", "3", "]", "\n", "if", "nearest_dist", "is", "None", ":", "\n", "        ", "min_gtpnts", ",", "max_gtpnts", ",", "min_augpnts", ",", "max_augpnts", "=", "np", ".", "min", "(", "gtpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "gtpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "min", "(", "augpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "augpnts", ",", "axis", "=", "0", ")", "\n", "range", "=", "np", ".", "concatenate", "(", "[", "np", ".", "minimum", "(", "min_gtpnts", ",", "min_augpnts", ")", ",", "np", ".", "maximum", "(", "max_gtpnts", ",", "max_augpnts", ")", "]", ",", "axis", "=", "0", ")", "\n", "gtpnts_ind", "=", "np", ".", "floor", "(", "(", "gtpnts", "-", "np", ".", "expand_dims", "(", "range", "[", ":", "3", "]", ",", "axis", "=", "0", ")", ")", "/", "np", ".", "expand_dims", "(", "voxel_size", ",", "axis", "=", "0", ")", ")", "\n", "augpnts_ind", "=", "np", ".", "floor", "(", "(", "augpnts", "-", "np", ".", "expand_dims", "(", "range", "[", ":", "3", "]", ",", "axis", "=", "0", ")", ")", "/", "np", ".", "expand_dims", "(", "voxel_size", ",", "axis", "=", "0", ")", ")", "\n", "nx", ",", "ny", "=", "np", ".", "ceil", "(", "(", "range", "[", "3", "]", "-", "range", "[", "0", "]", ")", "/", "voxel_size", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "np", ".", "ceil", "(", "(", "range", "[", "4", "]", "-", "range", "[", "1", "]", ")", "/", "voxel_size", "[", "1", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "mask", "=", "find_overlaps", "(", "coords3inds", "(", "gtpnts_ind", ",", "nx", ",", "ny", ")", ",", "coords3inds", "(", "augpnts_ind", ",", "nx", ",", "ny", ")", ")", "\n", "# print(\"augpnts_ind\", mask.shape, augpnts_ind.shape, augpnts_ind[mask].shape)", "\n", "", "else", ":", "\n", "        ", "dist_l1", "=", "cd_4pose", "(", "np", ".", "expand_dims", "(", "augpnts", ",", "axis", "=", "0", ")", ",", "np", ".", "expand_dims", "(", "gtpnts", ",", "axis", "=", "0", ")", ")", "\n", "mask", "=", "dist_l1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ">", "nearest_dist", "\n", "", "return", "target_pnts", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.extra_occ": [[437, 442], ["list", "torch.sum"], "function", ["None"], ["", "def", "extra_occ", "(", "cur_occ_map", ",", "selected_occ_map", ")", ":", "\n", "# print(\"cur_occ_map, selected_occ_map\", cur_occ_map.shape, selected_occ_map.shape)", "\n", "    ", "candi_num", ",", "nx", ",", "ny", "=", "list", "(", "selected_occ_map", ".", "shape", ")", "\n", "excluded_map", "=", "(", "1", "-", "cur_occ_map", ")", ".", "view", "(", "1", ",", "nx", ",", "ny", ")", ".", "repeat", "(", "candi_num", ",", "1", ",", "1", ")", "\n", "return", "torch", ".", "sum", "(", "(", "selected_occ_map", "*", "excluded_map", ")", ".", "view", "(", "-", "1", ",", "nx", "*", "ny", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.multifindbestfit.space_occ_voxelpnts": [[444, 453], ["numpy.zeros", "numpy.array", "numpy.floor().astype", "numpy.ones_like", "numpy.floor", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "space_occ_voxelpnts", "(", "sourcepnts", ",", "allrange", ",", "nx", ",", "ny", ",", "voxel_size", "=", "[", "0.08", ",", "0.08", ",", "0.08", "]", ")", ":", "\n", "    ", "occmap", "=", "np", ".", "zeros", "(", "[", "nx", ",", "ny", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "sourcepnts", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ")", "\n", "gtpnts", "=", "sourcepnts", "[", ":", ",", ":", "3", "]", "\n", "gtpnts_ind", "=", "np", ".", "floor", "(", "(", "gtpnts", "-", "np", ".", "expand_dims", "(", "allrange", "[", ":", "3", "]", ",", "axis", "=", "0", ")", ")", "/", "np", ".", "expand_dims", "(", "voxel_size", ",", "axis", "=", "0", ")", ")", ".", "astype", "(", "int", ")", "\n", "occmap", "[", "gtpnts_ind", "[", "...", ",", "0", "]", ",", "gtpnts_ind", "[", "...", ",", "1", "]", "]", "=", "np", ".", "ones_like", "(", "gtpnts_ind", "[", "...", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# unique_coords_num = np.sum(occmap)", "\n", "", "return", "occmap", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__init__": [[14, 38], ["dataset.DatasetTemplate.__init__", "kitti_dataset.KittiDataset.dataset_cfg.get", "kitti_dataset.KittiDataset.include_kitti_data", "split_dir.exists", "x.strip", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.include_kitti_data"], ["    ", "def", "__init__", "(", "self", ",", "dataset_cfg", ",", "class_names", ",", "training", "=", "True", ",", "root_path", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root_path:\n            dataset_cfg:\n            class_names:\n            training:\n            logger:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "training", "=", "training", ",", "root_path", "=", "root_path", ",", "logger", "=", "logger", "\n", ")", "\n", "# print(\"dataset_cfg\", dataset_cfg)", "\n", "self", ".", "frame_id", "=", "self", ".", "dataset_cfg", ".", "get", "(", "\"FRAME_ID\"", ",", "None", ")", "\n", "self", ".", "split", "=", "self", ".", "dataset_cfg", ".", "DATA_SPLIT", "[", "self", ".", "mode", "]", "\n", "# print(\"split\", self.split, \" root_path\", self.root_path)", "\n", "\n", "self", ".", "root_split_path", "=", "self", ".", "root_path", "/", "(", "'training'", "if", "self", ".", "split", "!=", "'test'", "else", "'testing'", ")", "\n", "\n", "split_dir", "=", "self", ".", "root_path", "/", "'ImageSets'", "/", "(", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "sample_id_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "split_dir", ")", ".", "readlines", "(", ")", "]", "if", "split_dir", ".", "exists", "(", ")", "else", "None", "\n", "\n", "self", ".", "kitti_infos", "=", "[", "]", "\n", "self", ".", "include_kitti_data", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.include_kitti_data": [[40, 61], ["print", "kitti_dataset.KittiDataset.kitti_infos.extend", "kitti_dataset.KittiDataset.logger.info", "kitti_dataset.KittiDataset.logger.info", "info_path.exists", "open", "pickle.load", "kitti_infos.extend", "len"], "methods", ["None"], ["", "def", "include_kitti_data", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Loading KITTI dataset'", ")", "\n", "", "kitti_infos", "=", "[", "]", "\n", "print", "(", "\"self.dataset_cfg.INFO_PATH\"", ",", "self", ".", "dataset_cfg", ".", "INFO_PATH", ")", "\n", "for", "info_path", "in", "self", ".", "dataset_cfg", ".", "INFO_PATH", "[", "mode", "]", ":", "\n", "            ", "info_path", "=", "self", ".", "root_path", "/", "info_path", "\n", "# print(\"info_path!!!!!!!!!!!!!!!!!!\", info_path)", "\n", "if", "not", "info_path", ".", "exists", "(", ")", ":", "\n", "                ", "continue", "\n", "", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "# print(\"info_path################\", info_path)", "\n", "                ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "kitti_infos", ".", "extend", "(", "infos", ")", "\n", "\n", "", "", "self", ".", "kitti_infos", ".", "extend", "(", "kitti_infos", ")", "\n", "if", "self", ".", "frame_id", "is", "not", "None", ":", "\n", "            ", "self", ".", "kitti_infos", "=", "[", "info", "for", "info", "in", "self", ".", "kitti_infos", "if", "info", "[", "'point_cloud'", "]", "[", "'lidar_idx'", "]", "==", "self", ".", "frame_id", "]", "\n", "\n", "", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Total samples for KITTI dataset: %d'", "%", "(", "len", "(", "kitti_infos", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.set_split": [[62, 71], ["dataset.DatasetTemplate.__init__", "split_dir.exists", "x.strip", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["", "", "def", "set_split", "(", "self", ",", "split", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "dataset_cfg", "=", "self", ".", "dataset_cfg", ",", "class_names", "=", "self", ".", "class_names", ",", "training", "=", "self", ".", "training", ",", "root_path", "=", "self", ".", "root_path", ",", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "root_split_path", "=", "self", ".", "root_path", "/", "(", "'training'", "if", "self", ".", "split", "!=", "'test'", "else", "'testing'", ")", "\n", "\n", "split_dir", "=", "self", ".", "root_path", "/", "'ImageSets'", "/", "(", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "sample_id_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "split_dir", ")", ".", "readlines", "(", ")", "]", "if", "split_dir", ".", "exists", "(", ")", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_lidar": [[72, 76], ["lidar_file.exists", "numpy.fromfile().reshape", "numpy.fromfile", "str"], "methods", ["None"], ["", "def", "get_lidar", "(", "self", ",", "idx", ")", ":", "\n", "        ", "lidar_file", "=", "self", ".", "root_split_path", "/", "'velodyne'", "/", "(", "'%s.bin'", "%", "idx", ")", "\n", "assert", "lidar_file", ".", "exists", "(", ")", "\n", "return", "np", ".", "fromfile", "(", "str", "(", "lidar_file", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_image_shape": [[77, 81], ["img_file.exists", "numpy.array", "skimage.io.imread"], "methods", ["None"], ["", "def", "get_image_shape", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_file", "=", "self", ".", "root_split_path", "/", "'image_2'", "/", "(", "'%s.png'", "%", "idx", ")", "\n", "assert", "img_file", ".", "exists", "(", ")", "\n", "return", "np", ".", "array", "(", "io", ".", "imread", "(", "img_file", ")", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_label": [[82, 86], ["label_file.exists", "utils.object3d_kitti.get_objects_from_label"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.object3d_kitti.get_objects_from_label"], ["", "def", "get_label", "(", "self", ",", "idx", ")", ":", "\n", "        ", "label_file", "=", "self", ".", "root_split_path", "/", "'label_2'", "/", "(", "'%s.txt'", "%", "idx", ")", "\n", "assert", "label_file", ".", "exists", "(", ")", "\n", "return", "object3d_kitti", ".", "get_objects_from_label", "(", "label_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_calib": [[87, 91], ["calib_file.exists", "utils.calibration_kitti.Calibration"], "methods", ["None"], ["", "def", "get_calib", "(", "self", ",", "idx", ")", ":", "\n", "        ", "calib_file", "=", "self", ".", "root_split_path", "/", "'calib'", "/", "(", "'%s.txt'", "%", "idx", ")", "\n", "assert", "calib_file", ".", "exists", "(", ")", "\n", "return", "calibration_kitti", ".", "Calibration", "(", "calib_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_road_plane": [[92, 109], ["numpy.asarray", "numpy.linalg.norm", "plane_file.exists", "open", "f.readlines", "float", "lines[].split"], "methods", ["None"], ["", "def", "get_road_plane", "(", "self", ",", "idx", ")", ":", "\n", "        ", "plane_file", "=", "self", ".", "root_split_path", "/", "'planes'", "/", "(", "'%s.txt'", "%", "idx", ")", "\n", "if", "not", "plane_file", ".", "exists", "(", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "with", "open", "(", "plane_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "float", "(", "i", ")", "for", "i", "in", "lines", "[", "3", "]", ".", "split", "(", ")", "]", "\n", "plane", "=", "np", ".", "asarray", "(", "lines", ")", "\n", "\n", "# Ensure normal is always facing up, this is in the rectified camera coordinate", "\n", "if", "plane", "[", "1", "]", ">", "0", ":", "\n", "            ", "plane", "=", "-", "plane", "\n", "\n", "", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "plane", "[", "0", ":", "3", "]", ")", "\n", "plane", "=", "plane", "/", "norm", "\n", "return", "plane", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_fov_flag": [[110, 128], ["calib.rect_to_img", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_img"], ["", "@", "staticmethod", "\n", "def", "get_fov_flag", "(", "pts_rect", ",", "img_shape", ",", "calib", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pts_rect:\n            img_shape:\n            calib:\n\n        Returns:\n\n        \"\"\"", "\n", "pts_img", ",", "pts_rect_depth", "=", "calib", ".", "rect_to_img", "(", "pts_rect", ")", "\n", "val_flag_1", "=", "np", ".", "logical_and", "(", "pts_img", "[", ":", ",", "0", "]", ">=", "0", ",", "pts_img", "[", ":", ",", "0", "]", "<", "img_shape", "[", "1", "]", ")", "\n", "val_flag_2", "=", "np", ".", "logical_and", "(", "pts_img", "[", ":", ",", "1", "]", ">=", "0", ",", "pts_img", "[", ":", ",", "1", "]", "<", "img_shape", "[", "0", "]", ")", "\n", "val_flag_merge", "=", "np", ".", "logical_and", "(", "val_flag_1", ",", "val_flag_2", ")", "\n", "pts_valid_flag", "=", "np", ".", "logical_and", "(", "val_flag_merge", ",", "pts_rect_depth", ">=", "0", ")", "\n", "\n", "return", "pts_valid_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_infos": [[129, 202], ["list", "kitti_dataset.KittiDataset.get_calib", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "futures.ThreadPoolExecutor", "executor.map", "kitti_dataset.KittiDataset.get_image_shape", "kitti_dataset.KittiDataset.get_label", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array", "len", "len", "numpy.array", "kitti_dataset.KittiDataset.rect_to_lidar", "numpy.concatenate", "numpy.array", "numpy.array", "list", "kitti_dataset.KittiDataset.get_lidar", "kitti_dataset.KittiDataset.get_calib", "kitti_dataset.KittiDataset.lidar_to_rect", "kitti_dataset.KittiDataset.get_fov_flag", "utils.box_utils.boxes_to_corners_3d", "range", "obj.box2d.reshape", "obj.loc.reshape", "range", "numpy.ones", "utils.box_utils.in_hull", "utils.box_utils.in_hull.sum"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_calib", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_image_shape", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_label", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_lidar", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_calib", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_fov_flag", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.in_hull"], ["", "def", "get_infos", "(", "self", ",", "num_workers", "=", "4", ",", "has_label", "=", "True", ",", "count_inside_pts", "=", "True", ",", "sample_id_list", "=", "None", ")", ":", "\n", "        ", "import", "concurrent", ".", "futures", "as", "futures", "\n", "\n", "def", "process_single_scene", "(", "sample_idx", ")", ":", "\n", "# print('%s sample_idx: %s' % (self.split, sample_idx))", "\n", "            ", "info", "=", "{", "}", "\n", "pc_info", "=", "{", "'num_features'", ":", "4", ",", "'lidar_idx'", ":", "sample_idx", "}", "\n", "info", "[", "'point_cloud'", "]", "=", "pc_info", "\n", "\n", "image_info", "=", "{", "'image_idx'", ":", "sample_idx", ",", "'image_shape'", ":", "self", ".", "get_image_shape", "(", "sample_idx", ")", "}", "\n", "info", "[", "'image'", "]", "=", "image_info", "\n", "calib", "=", "self", ".", "get_calib", "(", "sample_idx", ")", "\n", "\n", "P2", "=", "np", ".", "concatenate", "(", "[", "calib", ".", "P2", ",", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "R0_4x4", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ",", "dtype", "=", "calib", ".", "R0", ".", "dtype", ")", "\n", "R0_4x4", "[", "3", ",", "3", "]", "=", "1.", "\n", "R0_4x4", "[", ":", "3", ",", ":", "3", "]", "=", "calib", ".", "R0", "\n", "V2C_4x4", "=", "np", ".", "concatenate", "(", "[", "calib", ".", "V2C", ",", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "calib_info", "=", "{", "'P2'", ":", "P2", ",", "'R0_rect'", ":", "R0_4x4", ",", "'Tr_velo_to_cam'", ":", "V2C_4x4", "}", "\n", "\n", "info", "[", "'calib'", "]", "=", "calib_info", "\n", "\n", "if", "has_label", ":", "\n", "                ", "obj_list", "=", "self", ".", "get_label", "(", "sample_idx", ")", "\n", "annotations", "=", "{", "}", "\n", "annotations", "[", "'name'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "cls_type", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'truncated'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "truncation", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'occluded'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "occlusion", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'alpha'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "alpha", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'bbox'", "]", "=", "np", ".", "concatenate", "(", "[", "obj", ".", "box2d", ".", "reshape", "(", "1", ",", "4", ")", "for", "obj", "in", "obj_list", "]", ",", "axis", "=", "0", ")", "\n", "annotations", "[", "'dimensions'", "]", "=", "np", ".", "array", "(", "[", "[", "obj", ".", "l", ",", "obj", ".", "h", ",", "obj", ".", "w", "]", "for", "obj", "in", "obj_list", "]", ")", "# lhw(camera) format", "\n", "annotations", "[", "'location'", "]", "=", "np", ".", "concatenate", "(", "[", "obj", ".", "loc", ".", "reshape", "(", "1", ",", "3", ")", "for", "obj", "in", "obj_list", "]", ",", "axis", "=", "0", ")", "\n", "annotations", "[", "'rotation_y'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "ry", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'score'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "score", "for", "obj", "in", "obj_list", "]", ")", "\n", "annotations", "[", "'difficulty'", "]", "=", "np", ".", "array", "(", "[", "obj", ".", "level", "for", "obj", "in", "obj_list", "]", ",", "np", ".", "int32", ")", "\n", "\n", "num_objects", "=", "len", "(", "[", "obj", ".", "cls_type", "for", "obj", "in", "obj_list", "if", "obj", ".", "cls_type", "!=", "'DontCare'", "]", ")", "\n", "num_gt", "=", "len", "(", "annotations", "[", "'name'", "]", ")", "\n", "index", "=", "list", "(", "range", "(", "num_objects", ")", ")", "+", "[", "-", "1", "]", "*", "(", "num_gt", "-", "num_objects", ")", "\n", "annotations", "[", "'index'", "]", "=", "np", ".", "array", "(", "index", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "loc", "=", "annotations", "[", "'location'", "]", "[", ":", "num_objects", "]", "\n", "dims", "=", "annotations", "[", "'dimensions'", "]", "[", ":", "num_objects", "]", "\n", "rots", "=", "annotations", "[", "'rotation_y'", "]", "[", ":", "num_objects", "]", "\n", "loc_lidar", "=", "calib", ".", "rect_to_lidar", "(", "loc", ")", "\n", "l", ",", "h", ",", "w", "=", "dims", "[", ":", ",", "0", ":", "1", "]", ",", "dims", "[", ":", ",", "1", ":", "2", "]", ",", "dims", "[", ":", ",", "2", ":", "3", "]", "\n", "loc_lidar", "[", ":", ",", "2", "]", "+=", "h", "[", ":", ",", "0", "]", "/", "2", "\n", "gt_boxes_lidar", "=", "np", ".", "concatenate", "(", "[", "loc_lidar", ",", "l", ",", "w", ",", "h", ",", "-", "(", "np", ".", "pi", "/", "2", "+", "rots", "[", "...", ",", "np", ".", "newaxis", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "annotations", "[", "'gt_boxes_lidar'", "]", "=", "gt_boxes_lidar", "\n", "\n", "info", "[", "'annos'", "]", "=", "annotations", "\n", "\n", "if", "count_inside_pts", ":", "\n", "                    ", "points", "=", "self", ".", "get_lidar", "(", "sample_idx", ")", "\n", "calib", "=", "self", ".", "get_calib", "(", "sample_idx", ")", "\n", "pts_rect", "=", "calib", ".", "lidar_to_rect", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "\n", "fov_flag", "=", "self", ".", "get_fov_flag", "(", "pts_rect", ",", "info", "[", "'image'", "]", "[", "'image_shape'", "]", ",", "calib", ")", "\n", "pts_fov", "=", "points", "[", "fov_flag", "]", "\n", "corners_lidar", "=", "box_utils", ".", "boxes_to_corners_3d", "(", "gt_boxes_lidar", ")", "\n", "num_points_in_gt", "=", "-", "np", ".", "ones", "(", "num_gt", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "k", "in", "range", "(", "num_objects", ")", ":", "\n", "                        ", "flag", "=", "box_utils", ".", "in_hull", "(", "pts_fov", "[", ":", ",", "0", ":", "3", "]", ",", "corners_lidar", "[", "k", "]", ")", "\n", "num_points_in_gt", "[", "k", "]", "=", "flag", ".", "sum", "(", ")", "\n", "", "annotations", "[", "'num_points_in_gt'", "]", "=", "num_points_in_gt", "\n", "\n", "", "", "return", "info", "\n", "\n", "", "sample_id_list", "=", "sample_id_list", "if", "sample_id_list", "is", "not", "None", "else", "self", ".", "sample_id_list", "\n", "with", "futures", ".", "ThreadPoolExecutor", "(", "num_workers", ")", "as", "executor", ":", "\n", "            ", "infos", "=", "executor", ".", "map", "(", "process_single_scene", ",", "sample_id_list", ")", "\n", "", "return", "list", "(", "infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.create_info_file_with_coverage": [[204, 265], ["numpy.asarray", "list", "utils.coords_utils.absxyz_2_spherexyz_np", "numpy.floor_divide().astype", "len", "range", "futures.ThreadPoolExecutor", "executor.map", "len", "numpy.minimum().reshape", "list", "numpy.unique", "len", "len", "numpy.zeros", "numpy.array", "numpy.floor_divide", "numpy.max", "numpy.all", "numpy.all", "coverage_rate_lst.append", "utils.point_box_utils.get_yaw_rotation", "kitti_dataset.KittiDataset.create_info_file_with_coverage.get_coords"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.absxyz_2_spherexyz_np", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_coords"], ["", "def", "create_info_file_with_coverage", "(", "self", ",", "mlt_bm_root", ",", "gt_db_root", ",", "num_workers", "=", "1", ")", ":", "\n", "        ", "import", "concurrent", ".", "futures", "as", "futures", "\n", "sphere_coords_res", "=", "np", ".", "asarray", "(", "[", "[", "0.32", ",", "0.5184", ",", "0.4203125", "]", "]", ")", "\n", "\n", "def", "get_coords", "(", "points", ",", "nx", "=", "None", ",", "ny", "=", "None", ",", "nz", "=", "None", ",", "sphere_coords_min", "=", "None", ")", ":", "\n", "            ", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "", "raw_sphere_points", "=", "coords_utils", ".", "absxyz_2_spherexyz_np", "(", "points", "[", "...", ",", ":", "3", "]", ")", "\n", "if", "sphere_coords_min", "is", "None", ":", "\n", "                ", "sphere_coords_min", "=", "np", ".", "minimum", "(", "np", ".", "min", "(", "raw_sphere_points", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", ")", ".", "reshape", "(", "1", ",", "3", ")", "\n", "", "raw_sphere_coords", "=", "np", ".", "floor_divide", "(", "raw_sphere_points", "-", "sphere_coords_min", ",", "sphere_coords_res", ")", ".", "astype", "(", "\n", "np", ".", "int32", ")", "\n", "# print(nx is None, np.min(raw_sphere_points, axis=0, keepdims=False))", "\n", "if", "nx", "is", "None", ":", "\n", "                ", "nx", ",", "ny", ",", "nz", "=", "list", "(", "np", ".", "max", "(", "raw_sphere_coords", ",", "axis", "=", "0", ")", ")", "\n", "nx", ",", "ny", ",", "nz", "=", "nx", "+", "1", "+", "10", ",", "ny", "+", "1", "+", "10", ",", "nz", "+", "1", "+", "10", "\n", "", "else", ":", "\n", "                ", "keep_mask", "=", "np", ".", "all", "(", "raw_sphere_coords", ">=", "0", ",", "axis", "=", "-", "1", ")", "&", "np", ".", "all", "(", "\n", "raw_sphere_coords", "<", "np", ".", "array", "(", "[", "[", "nx", ",", "ny", ",", "nz", "]", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "raw_sphere_coords", "=", "raw_sphere_coords", "[", "keep_mask", ",", ":", "]", "\n", "", "unique_occupied", "=", "len", "(", "np", ".", "unique", "(", "raw_sphere_coords", ",", "axis", "=", "0", ")", ")", "\n", "return", "sphere_coords_min", ",", "nx", ",", "ny", ",", "nz", ",", "unique_occupied", "\n", "\n", "# mlt_bm_root = {", "\n", "#     \"Car\": self.root_path.resolve() / querier_cfg.CAR_MLT_BM_ROOT,", "\n", "#     \"Cyclist\": self.root_path.resolve() / querier_cfg.CYC_MLT_BM_ROOT,", "\n", "#     \"Pedestrian\": self.root_path.resolve() / querier_cfg.PED_MLT_BM_ROOT,", "\n", "# }", "\n", "\n", "", "def", "process_single_info", "(", "info", ")", ":", "\n", "# print('%s sample_idx: %s' % (self.split, sample_idx))", "\n", "            ", "image_idx", "=", "info", "[", "'point_cloud'", "]", "[", "'lidar_idx'", "]", "\n", "annotations", "=", "info", "[", "'annos'", "]", "\n", "coverage_rate_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "annotations", "[", "'name'", "]", ")", ")", ":", "\n", "                ", "if", "annotations", "[", "'name'", "]", "[", "i", "]", "not", "in", "[", "'Car'", ",", "'Pedestrian'", ",", "'Cyclist'", "]", ":", "\n", "                    ", "coverage_rate_lst", ".", "append", "(", "0.0", ")", "\n", "", "else", ":", "\n", "                    ", "gt_box", "=", "annotations", "[", "'gt_boxes_lidar'", "]", "[", "i", "]", "\n", "bm_file_path", "=", "mlt_bm_root", "[", "annotations", "[", "'name'", "]", "[", "i", "]", "]", "/", "\"{}_{}.pkl\"", ".", "format", "(", "int", "(", "image_idx", ")", ",", "i", ")", "\n", "gt_db_path", "=", "gt_db_root", "/", "\"{}_{}_{}.bin\"", ".", "format", "(", "image_idx", ",", "annotations", "[", "'name'", "]", "[", "i", "]", ",", "i", ")", "\n", "with", "open", "(", "bm_file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "bm_points", "=", "pickle", ".", "load", "(", "f", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "[", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "obj_points", "=", "np", ".", "fromfile", "(", "str", "(", "gt_db_path", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "[", ":", ",", ":", "3", "]", "+", "gt_box", "[", ":", "3", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "gtrotation", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "gt_box", "[", "6", "]", ")", "\n", "bm_points", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "bm_points", ",", "gtrotation", ")", "+", "gt_box", "[", ":", "3", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "sphere_coords_min", ",", "nx", ",", "ny", ",", "nz", ",", "num_unique_bm", "=", "get_coords", "(", "bm_points", ",", "nx", "=", "None", ",", "ny", "=", "None", ",", "nz", "=", "None", ",", "sphere_coords_min", "=", "None", ")", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "num_unique_obj", "=", "get_coords", "(", "obj_points", ",", "nx", "=", "nx", ",", "ny", "=", "ny", ",", "nz", "=", "nz", ",", "sphere_coords_min", "=", "sphere_coords_min", ")", "\n", "print", "(", "annotations", "[", "'name'", "]", "[", "i", "]", ",", "num_unique_obj", "/", "max", "(", "1", ",", "num_unique_bm", ")", ",", "num_unique_obj", ",", "num_unique_bm", ")", "\n", "coverage_rate_lst", ".", "append", "(", "num_unique_obj", "/", "max", "(", "1", ",", "num_unique_bm", ")", ")", "\n", "", "", "if", "len", "(", "coverage_rate_lst", ")", "==", "0", ":", "\n", "                ", "info", "[", "'annos'", "]", "[", "\"coverage_rates\"", "]", "=", "np", ".", "zeros", "(", "[", "0", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "len", "(", "coverage_rate_lst", ")", "==", "1", ":", "\n", "                ", "info", "[", "'annos'", "]", "[", "\"coverage_rates\"", "]", "=", "np", ".", "asarray", "(", "coverage_rate_lst", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "info", "[", "'annos'", "]", "[", "\"coverage_rates\"", "]", "=", "np", ".", "stack", "(", "coverage_rate_lst", ",", "axis", "=", "0", ")", "\n", "", "return", "info", "\n", "\n", "", "with", "futures", ".", "ThreadPoolExecutor", "(", "num_workers", ")", "as", "executor", ":", "\n", "            ", "coveraged_infos", "=", "executor", ".", "map", "(", "process_single_info", ",", "self", ".", "kitti_infos", ")", "\n", "", "return", "list", "(", "coveraged_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.create_groundtruth_database": [[267, 318], ["database_save_path.mkdir", "range", "all_db_infos.items", "Path", "Path", "open", "pickle.load", "len", "print", "kitti_dataset.KittiDataset.get_lidar", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu().numpy", "range", "print", "open", "pickle.dump", "ops.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu", "open", "gt_points.tofile", "str", "len", "torch.from_numpy", "torch.from_numpy", "filepath.relative_to", "all_db_infos[].append", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["", "def", "create_groundtruth_database", "(", "self", ",", "info_path", "=", "None", ",", "used_classes", "=", "None", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "import", "torch", "\n", "\n", "database_save_path", "=", "Path", "(", "self", ".", "root_path", ")", "/", "(", "'gt_database'", "if", "split", "==", "'train'", "else", "(", "'gt_database_%s'", "%", "split", ")", ")", "\n", "db_info_save_path", "=", "Path", "(", "self", ".", "root_path", ")", "/", "(", "'kitti_dbinfos_%s.pkl'", "%", "split", ")", "\n", "\n", "database_save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "all_db_infos", "=", "{", "}", "\n", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "infos", ")", ")", ":", "\n", "            ", "print", "(", "'gt_database sample: %d/%d'", "%", "(", "k", "+", "1", ",", "len", "(", "infos", ")", ")", ")", "\n", "info", "=", "infos", "[", "k", "]", "\n", "sample_idx", "=", "info", "[", "'point_cloud'", "]", "[", "'lidar_idx'", "]", "\n", "points", "=", "self", ".", "get_lidar", "(", "sample_idx", ")", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "names", "=", "annos", "[", "'name'", "]", "\n", "difficulty", "=", "annos", "[", "'difficulty'", "]", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "\n", "gt_boxes", "=", "annos", "[", "'gt_boxes_lidar'", "]", "\n", "\n", "num_obj", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "point_indices", "=", "roiaware_pool3d_utils", ".", "points_in_boxes_cpu", "(", "\n", "torch", ".", "from_numpy", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", ",", "torch", ".", "from_numpy", "(", "gt_boxes", ")", "\n", ")", ".", "numpy", "(", ")", "# (nboxes, npoints)", "\n", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "                ", "filename", "=", "'%s_%s_%d.bin'", "%", "(", "sample_idx", ",", "names", "[", "i", "]", ",", "i", ")", "\n", "filepath", "=", "database_save_path", "/", "filename", "\n", "gt_points", "=", "points", "[", "point_indices", "[", "i", "]", ">", "0", "]", "\n", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "gt_boxes", "[", "i", ",", ":", "3", "]", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "\n", "", "if", "(", "used_classes", "is", "None", ")", "or", "names", "[", "i", "]", "in", "used_classes", ":", "\n", "                    ", "db_path", "=", "str", "(", "filepath", ".", "relative_to", "(", "self", ".", "root_path", ")", ")", "# gt_database/xxxxx.bin", "\n", "db_info", "=", "{", "'name'", ":", "names", "[", "i", "]", ",", "'path'", ":", "db_path", ",", "'image_idx'", ":", "sample_idx", ",", "'gt_idx'", ":", "i", ",", "\n", "'box3d_lidar'", ":", "gt_boxes", "[", "i", "]", ",", "'num_points_in_gt'", ":", "gt_points", ".", "shape", "[", "0", "]", ",", "\n", "'difficulty'", ":", "difficulty", "[", "i", "]", ",", "'bbox'", ":", "bbox", "[", "i", "]", ",", "'score'", ":", "annos", "[", "'score'", "]", "[", "i", "]", "}", "\n", "if", "names", "[", "i", "]", "in", "all_db_infos", ":", "\n", "                        ", "all_db_infos", "[", "names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "else", ":", "\n", "                        ", "all_db_infos", "[", "names", "[", "i", "]", "]", "=", "[", "db_info", "]", "\n", "", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Database %s: %d'", "%", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.generate_prediction_dicts": [[319, 394], ["enumerate", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "box_dict[].cpu().numpy", "kitti_dataset.KittiDataset.generate_prediction_dicts.get_template_prediction"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "generate_prediction_dicts", "(", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                frame_id:\n            pred_dicts: list of pred_dicts\n                pred_boxes: (N, 7), Tensor\n                pred_scores: (N), Tensor\n                pred_labels: (N), Tensor\n            class_names:\n            output_path:\n\n        Returns:\n\n        \"\"\"", "\n", "def", "get_template_prediction", "(", "num_samples", ")", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'name'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'truncated'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'occluded'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'alpha'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'bbox'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "4", "]", ")", ",", "'dimensions'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "3", "]", ")", ",", "\n", "'location'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "3", "]", ")", ",", "'rotation_y'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "\n", "'score'", ":", "np", ".", "zeros", "(", "num_samples", ")", ",", "'boxes_lidar'", ":", "np", ".", "zeros", "(", "[", "num_samples", ",", "7", "]", ")", "\n", "}", "\n", "return", "ret_dict", "\n", "\n", "", "def", "generate_single_sample_dict", "(", "batch_index", ",", "box_dict", ")", ":", "\n", "            ", "pred_scores", "=", "box_dict", "[", "'pred_scores'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_boxes", "=", "box_dict", "[", "'pred_boxes'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_labels", "=", "box_dict", "[", "'pred_labels'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_dict", "=", "get_template_prediction", "(", "pred_scores", ".", "shape", "[", "0", "]", ")", "\n", "if", "pred_scores", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "return", "pred_dict", "\n", "\n", "", "calib", "=", "batch_dict", "[", "'calib'", "]", "[", "batch_index", "]", "\n", "image_shape", "=", "batch_dict", "[", "'image_shape'", "]", "[", "batch_index", "]", "\n", "pred_boxes_camera", "=", "box_utils", ".", "boxes3d_lidar_to_kitti_camera", "(", "pred_boxes", ",", "calib", ")", "\n", "pred_boxes_img", "=", "box_utils", ".", "boxes3d_kitti_camera_to_imageboxes", "(", "\n", "pred_boxes_camera", ",", "calib", ",", "image_shape", "=", "image_shape", "\n", ")", "\n", "\n", "pred_dict", "[", "'name'", "]", "=", "np", ".", "array", "(", "class_names", ")", "[", "pred_labels", "-", "1", "]", "\n", "pred_dict", "[", "'bbox'", "]", "=", "pred_boxes_img", "\n", "pred_dict", "[", "'dimensions'", "]", "=", "pred_boxes_camera", "[", ":", ",", "3", ":", "6", "]", "\n", "pred_dict", "[", "'location'", "]", "=", "pred_boxes_camera", "[", ":", ",", "0", ":", "3", "]", "\n", "pred_dict", "[", "'rotation_y'", "]", "=", "pred_boxes_camera", "[", ":", ",", "6", "]", "\n", "pred_dict", "[", "'score'", "]", "=", "pred_scores", "\n", "pred_dict", "[", "'boxes_lidar'", "]", "=", "pred_boxes", "\n", "\n", "return", "pred_dict", "\n", "\n", "", "annos", "=", "[", "]", "\n", "for", "index", ",", "box_dict", "in", "enumerate", "(", "pred_dicts", ")", ":", "\n", "            ", "frame_id", "=", "batch_dict", "[", "'frame_id'", "]", "[", "index", "]", "\n", "\n", "single_pred_dict", "=", "generate_single_sample_dict", "(", "index", ",", "box_dict", ")", "\n", "single_pred_dict", "[", "'frame_id'", "]", "=", "frame_id", "\n", "annos", ".", "append", "(", "single_pred_dict", ")", "\n", "\n", "if", "output_path", "is", "not", "None", ":", "\n", "                ", "cur_det_file", "=", "output_path", "/", "(", "'%s.txt'", "%", "frame_id", ")", "\n", "with", "open", "(", "cur_det_file", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "bbox", "=", "single_pred_dict", "[", "'bbox'", "]", "\n", "loc", "=", "single_pred_dict", "[", "'location'", "]", "\n", "dims", "=", "single_pred_dict", "[", "'dimensions'", "]", "# lhw -> hwl", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "bbox", ")", ")", ":", "\n", "                        ", "print", "(", "'%s -1 -1 %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f'", "\n", "%", "(", "single_pred_dict", "[", "'name'", "]", "[", "idx", "]", ",", "single_pred_dict", "[", "'alpha'", "]", "[", "idx", "]", ",", "\n", "bbox", "[", "idx", "]", "[", "0", "]", ",", "bbox", "[", "idx", "]", "[", "1", "]", ",", "bbox", "[", "idx", "]", "[", "2", "]", ",", "bbox", "[", "idx", "]", "[", "3", "]", ",", "\n", "dims", "[", "idx", "]", "[", "1", "]", ",", "dims", "[", "idx", "]", "[", "2", "]", ",", "dims", "[", "idx", "]", "[", "0", "]", ",", "loc", "[", "idx", "]", "[", "0", "]", ",", "\n", "loc", "[", "idx", "]", "[", "1", "]", ",", "loc", "[", "idx", "]", "[", "2", "]", ",", "single_pred_dict", "[", "'rotation_y'", "]", "[", "idx", "]", ",", "\n", "single_pred_dict", "[", "'score'", "]", "[", "idx", "]", ")", ",", "file", "=", "f", ")", "\n", "\n", "", "", "", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.evaluation": [[395, 406], ["copy.deepcopy", "kitti_eval.get_official_eval_result", "kitti_dataset.KittiDataset.kitti_infos[].keys", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_official_eval_result"], ["", "def", "evaluation", "(", "self", ",", "det_annos", ",", "class_names", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "'annos'", "not", "in", "self", ".", "kitti_infos", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "return", "None", ",", "{", "}", ",", "{", "}", "\n", "\n", "", "from", ".", "kitti_object_eval_python", "import", "eval", "as", "kitti_eval", "\n", "\n", "eval_det_annos", "=", "copy", ".", "deepcopy", "(", "det_annos", ")", "\n", "eval_gt_annos", "=", "[", "copy", ".", "deepcopy", "(", "info", "[", "'annos'", "]", ")", "for", "info", "in", "self", ".", "kitti_infos", "]", "\n", "ap_result_str", ",", "ap_dict", ",", "pcrc_dict", "=", "kitti_eval", ".", "get_official_eval_result", "(", "eval_gt_annos", ",", "eval_det_annos", ",", "class_names", ",", "coverage_rates", "=", "kwargs", "[", "\"coverage_rates\"", "]", ")", "\n", "\n", "return", "ap_result_str", ",", "ap_dict", ",", "pcrc_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__": [[407, 412], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "return", "len", "(", "self", ".", "kitti_infos", ")", "*", "self", ".", "total_epochs", "\n", "\n", "", "return", "len", "(", "self", ".", "kitti_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__getitem__": [[413, 461], ["copy.deepcopy", "kitti_dataset.KittiDataset.get_lidar", "kitti_dataset.KittiDataset.get_calib", "kitti_dataset.KittiDataset.prepare_data", "kitti_dataset.KittiDataset.lidar_to_rect", "kitti_dataset.KittiDataset.get_fov_flag", "utils.common_utils.drop_info_with_name", "numpy.concatenate().astype", "utils.box_utils.boxes3d_kitti_camera_to_lidar", "input_dict.update", "kitti_dataset.KittiDataset.get_road_plane", "input_dict.update", "len", "numpy.concatenate", "numpy.array", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_lidar", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_calib", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.prepare_data", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_fov_flag", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.drop_info_with_name", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_kitti_camera_to_lidar", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_road_plane"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# index = 4", "\n", "        ", "if", "self", ".", "_merge_all_iters_to_one_epoch", ":", "\n", "            ", "index", "=", "index", "%", "len", "(", "self", ".", "kitti_infos", ")", "\n", "\n", "", "info", "=", "copy", ".", "deepcopy", "(", "self", ".", "kitti_infos", "[", "index", "]", ")", "\n", "\n", "sample_idx", "=", "info", "[", "'point_cloud'", "]", "[", "'lidar_idx'", "]", "\n", "\n", "points", "=", "self", ".", "get_lidar", "(", "sample_idx", ")", "\n", "calib", "=", "self", ".", "get_calib", "(", "sample_idx", ")", "\n", "\n", "img_shape", "=", "info", "[", "'image'", "]", "[", "'image_shape'", "]", "\n", "if", "self", ".", "dataset_cfg", ".", "FOV_POINTS_ONLY", ":", "\n", "            ", "pts_rect", "=", "calib", ".", "lidar_to_rect", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "fov_flag", "=", "self", ".", "get_fov_flag", "(", "pts_rect", ",", "img_shape", ",", "calib", ")", "\n", "points", "=", "points", "[", "fov_flag", "]", "\n", "\n", "", "input_dict", "=", "{", "\n", "'points'", ":", "points", ",", "\n", "'frame_id'", ":", "sample_idx", ",", "\n", "'calib'", ":", "calib", ",", "\n", "}", "\n", "\n", "if", "'annos'", "in", "info", ":", "\n", "            ", "annos", "=", "info", "[", "'annos'", "]", "\n", "annos", "=", "common_utils", ".", "drop_info_with_name", "(", "annos", ",", "name", "=", "'DontCare'", ")", "\n", "loc", ",", "dims", ",", "rots", "=", "annos", "[", "'location'", "]", ",", "annos", "[", "'dimensions'", "]", ",", "annos", "[", "'rotation_y'", "]", "\n", "gt_names", "=", "annos", "[", "'name'", "]", "\n", "gt_boxes_camera", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt_boxes_lidar", "=", "box_utils", ".", "boxes3d_kitti_camera_to_lidar", "(", "gt_boxes_camera", ",", "calib", ")", "\n", "\n", "input_dict", ".", "update", "(", "{", "\n", "'gt_names'", ":", "gt_names", ",", "\n", "'gt_boxes'", ":", "gt_boxes_lidar", "\n", "}", ")", "\n", "road_plane", "=", "self", ".", "get_road_plane", "(", "sample_idx", ")", "\n", "if", "road_plane", "is", "not", "None", ":", "\n", "                ", "input_dict", "[", "'road_plane'", "]", "=", "road_plane", "\n", "", "", "else", ":", "\n", "            ", "input_dict", ".", "update", "(", "{", "\n", "'gt_names'", ":", "np", ".", "array", "(", "[", "1", "]", ",", "np", ".", "int32", ")", ",", "\n", "'gt_boxes'", ":", "np", ".", "zeros", "(", "[", "1", ",", "7", "]", ",", "np", ".", "float32", ")", "\n", "}", ")", "\n", "", "data_dict", "=", "self", ".", "prepare_data", "(", "data_dict", "=", "input_dict", ")", "\n", "\n", "data_dict", "[", "'image_shape'", "]", "=", "img_shape", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.create_kitti_infos": [[463, 504], ["kitti_dataset.KittiDataset", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.get_infos", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.get_infos", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.get_infos", "print", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.create_groundtruth_database", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.create_groundtruth_database", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.set_split", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_infos", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.set_split", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_infos", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.set_split", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.get_infos", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.set_split", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.create_groundtruth_database", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.set_split", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.create_groundtruth_database"], ["", "", "def", "create_kitti_infos", "(", "dataset_cfg", ",", "class_names", ",", "data_path", ",", "save_path", ",", "workers", "=", "1", ")", ":", "\n", "    ", "dataset", "=", "KittiDataset", "(", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "root_path", "=", "data_path", ",", "training", "=", "False", ")", "\n", "train_split", ",", "val_split", "=", "'train'", ",", "'val'", "\n", "#", "\n", "train_filename", "=", "save_path", "/", "(", "'kitti_infos_%s.pkl'", "%", "train_split", ")", "\n", "val_filename", "=", "save_path", "/", "(", "'kitti_infos_%s.pkl'", "%", "val_split", ")", "\n", "# trainval_filename = save_path / 'kitti_infos_trainval.pkl'", "\n", "test_filename", "=", "save_path", "/", "'kitti_infos_test.pkl'", "\n", "\n", "print", "(", "'---------------Start to generate data infos---------------'", ")", "\n", "\n", "dataset", ".", "set_split", "(", "train_split", ")", "\n", "kitti_infos_train", "=", "dataset", ".", "get_infos", "(", "num_workers", "=", "workers", ",", "has_label", "=", "True", ",", "count_inside_pts", "=", "True", ")", "\n", "with", "open", "(", "train_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", ",", "f", ")", "\n", "", "print", "(", "'Kitti info train file is saved to %s'", "%", "train_filename", ")", "\n", "\n", "dataset", ".", "set_split", "(", "val_split", ")", "\n", "kitti_infos_val", "=", "dataset", ".", "get_infos", "(", "num_workers", "=", "workers", ",", "has_label", "=", "True", ",", "count_inside_pts", "=", "True", ")", "\n", "with", "open", "(", "val_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_val", ",", "f", ")", "\n", "", "print", "(", "'Kitti info val file is saved to %s'", "%", "val_filename", ")", "\n", "#", "\n", "# with open(trainval_filename, 'wb') as f:", "\n", "#     pickle.dump(kitti_infos_train + kitti_infos_val, f)", "\n", "# print('Kitti info trainval file is saved to %s' % trainval_filename)", "\n", "\n", "dataset", ".", "set_split", "(", "'test'", ")", "\n", "kitti_infos_test", "=", "dataset", ".", "get_infos", "(", "num_workers", "=", "workers", ",", "has_label", "=", "False", ",", "count_inside_pts", "=", "False", ")", "\n", "with", "open", "(", "test_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_test", ",", "f", ")", "\n", "", "print", "(", "'Kitti info test file is saved to %s'", "%", "test_filename", ")", "\n", "\n", "print", "(", "'---------------Start create groundtruth database for data augmentation---------------'", ")", "\n", "dataset", ".", "set_split", "(", "train_split", ")", "\n", "dataset", ".", "create_groundtruth_database", "(", "train_filename", ",", "split", "=", "train_split", ")", "\n", "\n", "dataset", ".", "set_split", "(", "val_split", ")", "\n", "dataset", ".", "create_groundtruth_database", "(", "val_filename", ",", "split", "=", "val_split", ")", "\n", "\n", "print", "(", "'---------------Data preparation Done---------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.create_kitti_infos_with_coverage": [[505, 532], ["kitti_dataset.KittiDataset", "print", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.include_kitti_data", "kitti_dataset.KittiDataset.create_info_file_with_coverage", "kitti_dataset.KittiDataset.set_split", "kitti_dataset.KittiDataset.include_kitti_data", "kitti_dataset.KittiDataset.create_info_file_with_coverage", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.set_split", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.include_kitti_data", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.create_info_file_with_coverage", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.set_split", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.include_kitti_data", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.create_info_file_with_coverage"], ["", "def", "create_kitti_infos_with_coverage", "(", "dataset_cfg", ",", "class_names", ",", "data_path", ",", "save_path", ",", "workers", "=", "4", ")", ":", "\n", "    ", "dataset", "=", "KittiDataset", "(", "dataset_cfg", "=", "dataset_cfg", ",", "class_names", "=", "class_names", ",", "root_path", "=", "data_path", ",", "training", "=", "False", ")", "\n", "train_split", ",", "val_split", "=", "'train'", ",", "'val'", "\n", "#", "\n", "train_gt_root", "=", "save_path", "/", "'gt_database'", "\n", "val_gt_root", "=", "save_path", "/", "'gt_database_val'", "\n", "train_coverage_info_filename", "=", "save_path", "/", "(", "'kitti_cvrg_infos_%s.pkl'", "%", "train_split", ")", "\n", "val_coverage_info_filename", "=", "save_path", "/", "(", "'kitti_cvrg_infos_%s.pkl'", "%", "val_split", ")", "\n", "mlt_bm_root", "=", "{", "\n", "\"Car\"", ":", "save_path", "/", "\"bm_50maxdist_2num_car\"", ",", "\n", "\"Cyclist\"", ":", "save_path", "/", "\"bm_5maxdist_1num_Cyclist\"", ",", "# bm_5maxdist_2num_Cyclist", "\n", "\"Pedestrian\"", ":", "save_path", "/", "\"bm_5maxdist_1num_Pedestrian\"", ",", "# bm_5maxdist_2num_Pedestrian", "\n", "}", "\n", "\n", "print", "(", "'---------------Start to generate data infos---------------'", ")", "\n", "dataset", ".", "kitti_infos", "=", "[", "]", "\n", "dataset", ".", "set_split", "(", "train_split", ")", "\n", "dataset", ".", "include_kitti_data", "(", "train_split", ")", "\n", "train_coveraged_infos", "=", "dataset", ".", "create_info_file_with_coverage", "(", "mlt_bm_root", ",", "train_gt_root", ",", "num_workers", "=", "workers", ")", "\n", "with", "open", "(", "train_coverage_info_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "train_coveraged_infos", ",", "f", ")", "\n", "", "dataset", ".", "kitti_infos", "=", "[", "]", "\n", "dataset", ".", "set_split", "(", "val_split", ")", "\n", "dataset", ".", "include_kitti_data", "(", "\"test\"", ")", "\n", "val_coveraged_infos", "=", "dataset", ".", "create_info_file_with_coverage", "(", "mlt_bm_root", ",", "val_gt_root", ",", "num_workers", "=", "workers", ")", "\n", "with", "open", "(", "val_coverage_info_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "val_coveraged_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_image_index_str": [[11, 13], ["None"], "function", ["None"], ["def", "get_image_index_str", "(", "img_idx", ")", ":", "\n", "    ", "return", "\"{:06d}\"", ".", "format", "(", "img_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_kitti_info_path": [[15, 34], ["kitti_common.get_image_index_str", "pathlib.Path", "ValueError", "str", "str", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_image_index_str"], ["", "def", "get_kitti_info_path", "(", "idx", ",", "\n", "prefix", ",", "\n", "info_type", "=", "'image_2'", ",", "\n", "file_tail", "=", "'.png'", ",", "\n", "training", "=", "True", ",", "\n", "relative_path", "=", "True", ")", ":", "\n", "    ", "img_idx_str", "=", "get_image_index_str", "(", "idx", ")", "\n", "img_idx_str", "+=", "file_tail", "\n", "prefix", "=", "pathlib", ".", "Path", "(", "prefix", ")", "\n", "if", "training", ":", "\n", "        ", "file_path", "=", "pathlib", ".", "Path", "(", "'training'", ")", "/", "info_type", "/", "img_idx_str", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "pathlib", ".", "Path", "(", "'testing'", ")", "/", "info_type", "/", "img_idx_str", "\n", "", "if", "not", "(", "prefix", "/", "file_path", ")", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"file not exist: {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "", "if", "relative_path", ":", "\n", "        ", "return", "str", "(", "file_path", ")", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "prefix", "/", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_image_path": [[36, 39], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_kitti_info_path"], ["", "", "def", "get_image_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'image_2'", ",", "'.png'", ",", "training", ",", "\n", "relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_label_path": [[41, 44], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_kitti_info_path"], ["", "def", "get_label_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'label_2'", ",", "'.txt'", ",", "training", ",", "\n", "relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_velodyne_path": [[46, 49], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_kitti_info_path"], ["", "def", "get_velodyne_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'velodyne'", ",", "'.bin'", ",", "training", ",", "\n", "relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_calib_path": [[51, 54], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_kitti_info_path"], ["", "def", "get_calib_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'calib'", ",", "'.txt'", ",", "training", ",", "\n", "relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common._extend_matrix": [[56, 59], ["numpy.concatenate", "numpy.array"], "function", ["None"], ["", "def", "_extend_matrix", "(", "mat", ")", ":", "\n", "    ", "mat", "=", "np", ".", "concatenate", "(", "[", "mat", ",", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_kitti_image_info": [[61, 150], ["pathlib.Path", "list", "isinstance", "list", "kitti_common.get_image_path", "concurrent.ThreadPoolExecutor", "executor.map", "range", "kitti_common.get_velodyne_path", "numpy.array", "kitti_common.get_label_path", "kitti_common.get_label_anno", "kitti_common.get_calib_path", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "kitti_common.add_difficulty_to_annos", "str", "str", "open", "f.readlines", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "numpy.zeros", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "skimage.io.imread", "float", "float", "float", "float", "float", "float", "float", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_image_path", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_velodyne_path", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_label_path", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_label_anno", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_calib_path", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.add_difficulty_to_annos", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common._extend_matrix"], ["", "def", "get_kitti_image_info", "(", "path", ",", "\n", "training", "=", "True", ",", "\n", "label_info", "=", "True", ",", "\n", "velodyne", "=", "False", ",", "\n", "calib", "=", "False", ",", "\n", "image_ids", "=", "7481", ",", "\n", "extend_matrix", "=", "True", ",", "\n", "num_worker", "=", "8", ",", "\n", "relative_path", "=", "True", ",", "\n", "with_imageshape", "=", "True", ")", ":", "\n", "# image_infos = []", "\n", "    ", "root_path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "\n", "", "def", "map_func", "(", "idx", ")", ":", "\n", "        ", "image_info", "=", "{", "'image_idx'", ":", "idx", "}", "\n", "annotations", "=", "None", "\n", "if", "velodyne", ":", "\n", "            ", "image_info", "[", "'velodyne_path'", "]", "=", "get_velodyne_path", "(", "\n", "idx", ",", "path", ",", "training", ",", "relative_path", ")", "\n", "", "image_info", "[", "'img_path'", "]", "=", "get_image_path", "(", "idx", ",", "path", ",", "training", ",", "\n", "relative_path", ")", "\n", "if", "with_imageshape", ":", "\n", "            ", "img_path", "=", "image_info", "[", "'img_path'", "]", "\n", "if", "relative_path", ":", "\n", "                ", "img_path", "=", "str", "(", "root_path", "/", "img_path", ")", "\n", "", "image_info", "[", "'img_shape'", "]", "=", "np", ".", "array", "(", "\n", "io", ".", "imread", "(", "img_path", ")", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "if", "label_info", ":", "\n", "            ", "label_path", "=", "get_label_path", "(", "idx", ",", "path", ",", "training", ",", "relative_path", ")", "\n", "if", "relative_path", ":", "\n", "                ", "label_path", "=", "str", "(", "root_path", "/", "label_path", ")", "\n", "", "annotations", "=", "get_label_anno", "(", "label_path", ")", "\n", "", "if", "calib", ":", "\n", "            ", "calib_path", "=", "get_calib_path", "(", "\n", "idx", ",", "path", ",", "training", ",", "relative_path", "=", "False", ")", "\n", "with", "open", "(", "calib_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "P0", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "0", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P2", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "2", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P3", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "3", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "P0", "=", "_extend_matrix", "(", "P0", ")", "\n", "P1", "=", "_extend_matrix", "(", "P1", ")", "\n", "P2", "=", "_extend_matrix", "(", "P2", ")", "\n", "P3", "=", "_extend_matrix", "(", "P3", ")", "\n", "", "image_info", "[", "'calib/P0'", "]", "=", "P0", "\n", "image_info", "[", "'calib/P1'", "]", "=", "P1", "\n", "image_info", "[", "'calib/P2'", "]", "=", "P2", "\n", "image_info", "[", "'calib/P3'", "]", "=", "P3", "\n", "R0_rect", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "4", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "10", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "3", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "rect_4x4", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ",", "dtype", "=", "R0_rect", ".", "dtype", ")", "\n", "rect_4x4", "[", "3", ",", "3", "]", "=", "1.", "\n", "rect_4x4", "[", ":", "3", ",", ":", "3", "]", "=", "R0_rect", "\n", "", "else", ":", "\n", "                ", "rect_4x4", "=", "R0_rect", "\n", "", "image_info", "[", "'calib/R0_rect'", "]", "=", "rect_4x4", "\n", "Tr_velo_to_cam", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "5", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "4", "]", ")", "\n", "Tr_imu_to_velo", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "6", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "4", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "Tr_velo_to_cam", "=", "_extend_matrix", "(", "Tr_velo_to_cam", ")", "\n", "Tr_imu_to_velo", "=", "_extend_matrix", "(", "Tr_imu_to_velo", ")", "\n", "", "image_info", "[", "'calib/Tr_velo_to_cam'", "]", "=", "Tr_velo_to_cam", "\n", "image_info", "[", "'calib/Tr_imu_to_velo'", "]", "=", "Tr_imu_to_velo", "\n", "", "if", "annotations", "is", "not", "None", ":", "\n", "            ", "image_info", "[", "'annos'", "]", "=", "annotations", "\n", "add_difficulty_to_annos", "(", "image_info", ")", "\n", "", "return", "image_info", "\n", "\n", "", "with", "futures", ".", "ThreadPoolExecutor", "(", "num_worker", ")", "as", "executor", ":", "\n", "        ", "image_infos", "=", "executor", ".", "map", "(", "map_func", ",", "image_ids", ")", "\n", "", "return", "list", "(", "image_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.filter_kitti_anno": [[152, 190], ["image_anno.keys", "isinstance", "image_anno.keys", "kitti_common.iou", "enumerate", "image_anno.keys", "enumerate", "enumerate", "numpy.amax", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.iou"], ["", "def", "filter_kitti_anno", "(", "image_anno", ",", "\n", "used_classes", ",", "\n", "used_difficulty", "=", "None", ",", "\n", "dontcare_iou", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "used_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "used_classes", "=", "[", "used_classes", "]", "\n", "", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "image_anno", "[", "'name'", "]", ")", "if", "x", "in", "used_classes", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "if", "used_difficulty", "is", "not", "None", ":", "\n", "        ", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "img_filtered_annotations", "[", "'difficulty'", "]", ")", "\n", "if", "x", "in", "used_difficulty", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "img_filtered_annotations", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "\n", "", "", "if", "'DontCare'", "in", "used_classes", "and", "dontcare_iou", "is", "not", "None", ":", "\n", "        ", "dont_care_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "img_filtered_annotations", "[", "'name'", "]", ")", "\n", "if", "x", "==", "'DontCare'", "\n", "]", "\n", "# bounding box format [y_min, x_min, y_max, x_max]", "\n", "all_boxes", "=", "img_filtered_annotations", "[", "'bbox'", "]", "\n", "ious", "=", "iou", "(", "all_boxes", ",", "all_boxes", "[", "dont_care_indices", "]", ")", "\n", "\n", "# Remove all bounding boxes that overlap with a dontcare region.", "\n", "if", "ious", ".", "size", ">", "0", ":", "\n", "            ", "boxes_to_remove", "=", "np", ".", "amax", "(", "ious", ",", "axis", "=", "1", ")", ">", "dontcare_iou", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "                ", "img_filtered_annotations", "[", "key", "]", "=", "(", "img_filtered_annotations", "[", "key", "]", "[", "\n", "np", ".", "logical_not", "(", "boxes_to_remove", ")", "]", ")", "\n", "", "", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.filter_annos_low_score": [[191, 203], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_low_score", "(", "image_annos", ",", "thresh", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "anno", "[", "'score'", "]", ")", "if", "s", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.kitti_result_line": [[204, 247], ["collections.OrderedDict", "collections.OrderedDict", "result_dict.items", "collections.OrderedDict.items", "collections.OrderedDict.items", "ValueError", "res_line.append", "res_line.append", "res_line.append", "str", "prec_float.format", "res_line.append", "res_line.append", "ValueError", "str", "str", "prec_float.format", "collections.OrderedDict.keys"], "function", ["None"], ["", "def", "kitti_result_line", "(", "result_dict", ",", "precision", "=", "4", ")", ":", "\n", "    ", "prec_float", "=", "\"{\"", "+", "\":.{}f\"", ".", "format", "(", "precision", ")", "+", "\"}\"", "\n", "res_line", "=", "[", "]", "\n", "all_field_default", "=", "OrderedDict", "(", "[", "\n", "(", "'name'", ",", "None", ")", ",", "\n", "(", "'truncated'", ",", "-", "1", ")", ",", "\n", "(", "'occluded'", ",", "-", "1", ")", ",", "\n", "(", "'alpha'", ",", "-", "10", ")", ",", "\n", "(", "'bbox'", ",", "None", ")", ",", "\n", "(", "'dimensions'", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "\n", "(", "'location'", ",", "[", "-", "1000", ",", "-", "1000", ",", "-", "1000", "]", ")", ",", "\n", "(", "'rotation_y'", ",", "-", "10", ")", ",", "\n", "(", "'score'", ",", "None", ")", ",", "\n", "]", ")", "\n", "res_dict", "=", "[", "(", "key", ",", "None", ")", "for", "key", ",", "val", "in", "all_field_default", ".", "items", "(", ")", "]", "\n", "res_dict", "=", "OrderedDict", "(", "res_dict", ")", "\n", "for", "key", ",", "val", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "all_field_default", "[", "key", "]", "is", "None", "and", "val", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"you must specify a value for {}\"", ".", "format", "(", "key", ")", ")", "\n", "", "res_dict", "[", "key", "]", "=", "val", "\n", "\n", "", "for", "key", ",", "val", "in", "res_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "==", "'name'", ":", "\n", "            ", "res_line", ".", "append", "(", "val", ")", "\n", "", "elif", "key", "in", "[", "'truncated'", ",", "'alpha'", ",", "'rotation_y'", ",", "'score'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "prec_float", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "==", "'occluded'", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "'{}'", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "in", "[", "'bbox'", ",", "'dimensions'", ",", "'location'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", "+=", "[", "str", "(", "v", ")", "for", "v", "in", "all_field_default", "[", "key", "]", "]", "\n", "", "else", ":", "\n", "                ", "res_line", "+=", "[", "prec_float", ".", "format", "(", "v", ")", "for", "v", "in", "val", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown key. supported key:{}\"", ".", "format", "(", "\n", "res_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "", "return", "' '", ".", "join", "(", "res_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.add_difficulty_to_annos": [[249, 292], ["numpy.ones", "numpy.ones", "numpy.ones", "zip", "numpy.logical_xor", "numpy.logical_xor", "range", "numpy.array", "len", "len", "len", "len", "diff.append", "diff.append", "diff.append", "diff.append"], "function", ["None"], ["", "def", "add_difficulty_to_annos", "(", "info", ")", ":", "\n", "    ", "min_height", "=", "[", "40", ",", "25", ",", "\n", "25", "]", "# minimum height for evaluated groundtruth/detections", "\n", "max_occlusion", "=", "[", "\n", "0", ",", "1", ",", "2", "\n", "]", "# maximum occlusion level of the groundtruth used for eval_utils", "\n", "max_trunc", "=", "[", "\n", "0.15", ",", "0.3", ",", "0.5", "\n", "]", "# maximum truncation level of the groundtruth used for eval_utils", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "# lhw format", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "\n", "height", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "occlusion", "=", "annos", "[", "'occluded'", "]", "\n", "truncation", "=", "annos", "[", "'truncated'", "]", "\n", "diff", "=", "[", "]", "\n", "easy_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "moderate_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "hard_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "i", "=", "0", "\n", "for", "h", ",", "o", ",", "t", "in", "zip", "(", "height", ",", "occlusion", ",", "truncation", ")", ":", "\n", "        ", "if", "o", ">", "max_occlusion", "[", "0", "]", "or", "h", "<=", "min_height", "[", "0", "]", "or", "t", ">", "max_trunc", "[", "0", "]", ":", "\n", "            ", "easy_mask", "[", "i", "]", "=", "False", "\n", "", "if", "o", ">", "max_occlusion", "[", "1", "]", "or", "h", "<=", "min_height", "[", "1", "]", "or", "t", ">", "max_trunc", "[", "1", "]", ":", "\n", "            ", "moderate_mask", "[", "i", "]", "=", "False", "\n", "", "if", "o", ">", "max_occlusion", "[", "2", "]", "or", "h", "<=", "min_height", "[", "2", "]", "or", "t", ">", "max_trunc", "[", "2", "]", ":", "\n", "            ", "hard_mask", "[", "i", "]", "=", "False", "\n", "", "i", "+=", "1", "\n", "", "is_easy", "=", "easy_mask", "\n", "is_moderate", "=", "np", ".", "logical_xor", "(", "easy_mask", ",", "moderate_mask", ")", "\n", "is_hard", "=", "np", ".", "logical_xor", "(", "hard_mask", ",", "moderate_mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", ")", ":", "\n", "        ", "if", "is_easy", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "0", ")", "\n", "", "elif", "is_moderate", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "1", ")", "\n", "", "elif", "is_hard", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "diff", ".", "append", "(", "-", "1", ")", "\n", "", "", "annos", "[", "\"difficulty\"", "]", "=", "np", ".", "array", "(", "diff", ",", "np", ".", "int32", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_label_anno": [[294, 331], ["annotations.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "open", "f.readlines", "line.strip().split", "numpy.array().reshape", "numpy.array", "numpy.zeros", "float", "int", "float", "numpy.array", "numpy.array", "numpy.array", "len", "len", "line.strip", "numpy.array", "float", "len", "float", "float", "float", "float"], "function", ["None"], ["", "def", "get_label_anno", "(", "label_path", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "[", "]", ",", "\n", "'truncated'", ":", "[", "]", ",", "\n", "'occluded'", ":", "[", "]", ",", "\n", "'alpha'", ":", "[", "]", ",", "\n", "'bbox'", ":", "[", "]", ",", "\n", "'dimensions'", ":", "[", "]", ",", "\n", "'location'", ":", "[", "]", ",", "\n", "'rotation_y'", ":", "[", "]", "\n", "}", ")", "\n", "with", "open", "(", "label_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "# if len(lines) == 0 or len(lines[0]) < 15:", "\n", "#     content = []", "\n", "# else:", "\n", "", "content", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "annotations", "[", "'name'", "]", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'truncated'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'occluded'", "]", "=", "np", ".", "array", "(", "[", "int", "(", "x", "[", "2", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'alpha'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "3", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'bbox'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "4", ":", "8", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# dimensions will convert hwl format to standard lhw(camera) format.", "\n", "annotations", "[", "'dimensions'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "8", ":", "11", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "\n", "-", "1", ",", "3", ")", "[", ":", ",", "[", "2", ",", "0", ",", "1", "]", "]", "\n", "annotations", "[", "'location'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "11", ":", "14", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "annotations", "[", "'rotation_y'", "]", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "x", "[", "14", "]", ")", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "len", "(", "content", ")", "!=", "0", "and", "len", "(", "content", "[", "0", "]", ")", "==", "16", ":", "# have score", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "15", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "", "else", ":", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "zeros", "(", "[", "len", "(", "annotations", "[", "'bbox'", "]", ")", "]", ")", "\n", "", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_label_annos": [[332, 348], ["pathlib.Path", "pathlib.Path().glob", "re.compile", "filter", "sorted", "isinstance", "list", "kitti_common.get_image_index_str", "annos.append", "int", "range", "kitti_common.get_label_anno", "pathlib.Path", "re.compile.match"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_image_index_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.get_label_anno"], ["", "def", "get_label_annos", "(", "label_folder", ",", "image_ids", "=", "None", ")", ":", "\n", "    ", "if", "image_ids", "is", "None", ":", "\n", "        ", "filepaths", "=", "pathlib", ".", "Path", "(", "label_folder", ")", ".", "glob", "(", "'*.txt'", ")", "\n", "prog", "=", "re", ".", "compile", "(", "r'^\\d{6}.txt$'", ")", "\n", "filepaths", "=", "filter", "(", "lambda", "f", ":", "prog", ".", "match", "(", "f", ".", "name", ")", ",", "filepaths", ")", "\n", "image_ids", "=", "[", "int", "(", "p", ".", "stem", ")", "for", "p", "in", "filepaths", "]", "\n", "image_ids", "=", "sorted", "(", "image_ids", ")", "\n", "", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "", "annos", "=", "[", "]", "\n", "label_folder", "=", "pathlib", ".", "Path", "(", "label_folder", ")", "\n", "for", "idx", "in", "image_ids", ":", "\n", "        ", "image_idx", "=", "get_image_index_str", "(", "idx", ")", "\n", "label_filename", "=", "label_folder", "/", "(", "image_idx", "+", "'.txt'", ")", "\n", "annos", ".", "append", "(", "get_label_anno", "(", "label_filename", ")", ")", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.area": [[349, 363], ["None"], "function", ["None"], ["", "def", "area", "(", "boxes", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes area of boxes.\n\n    Args:\n        boxes: Numpy array with shape [N, 4] holding N boxes\n\n    Returns:\n        a numpy array with shape [N*1] representing box areas\n    \"\"\"", "\n", "if", "add1", ":", "\n", "        ", "return", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", ")", "*", "(", "\n", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.intersection": [[365, 394], ["numpy.split", "numpy.split", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.zeros"], "function", ["None"], ["", "", "def", "intersection", "(", "boxes1", ",", "boxes2", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute pairwise intersection areas between boxes.\n\n    Args:\n        boxes1: a numpy array with shape [N, 4] holding N boxes\n        boxes2: a numpy array with shape [M, 4] holding M boxes\n\n    Returns:\n        a numpy array with shape [N*M] representing pairwise intersection area\n    \"\"\"", "\n", "[", "y_min1", ",", "x_min1", ",", "y_max1", ",", "x_max1", "]", "=", "np", ".", "split", "(", "boxes1", ",", "4", ",", "axis", "=", "1", ")", "\n", "[", "y_min2", ",", "x_min2", ",", "y_max2", ",", "x_max2", "]", "=", "np", ".", "split", "(", "boxes2", ",", "4", ",", "axis", "=", "1", ")", "\n", "\n", "all_pairs_min_ymax", "=", "np", ".", "minimum", "(", "y_max1", ",", "np", ".", "transpose", "(", "y_max2", ")", ")", "\n", "all_pairs_max_ymin", "=", "np", ".", "maximum", "(", "y_min1", ",", "np", ".", "transpose", "(", "y_min2", ")", ")", "\n", "if", "add1", ":", "\n", "        ", "all_pairs_min_ymax", "+=", "1.0", "\n", "", "intersect_heights", "=", "np", ".", "maximum", "(", "\n", "np", ".", "zeros", "(", "all_pairs_max_ymin", ".", "shape", ")", ",", "\n", "all_pairs_min_ymax", "-", "all_pairs_max_ymin", ")", "\n", "\n", "all_pairs_min_xmax", "=", "np", ".", "minimum", "(", "x_max1", ",", "np", ".", "transpose", "(", "x_max2", ")", ")", "\n", "all_pairs_max_xmin", "=", "np", ".", "maximum", "(", "x_min1", ",", "np", ".", "transpose", "(", "x_min2", ")", ")", "\n", "if", "add1", ":", "\n", "        ", "all_pairs_min_xmax", "+=", "1.0", "\n", "", "intersect_widths", "=", "np", ".", "maximum", "(", "\n", "np", ".", "zeros", "(", "all_pairs_max_xmin", ".", "shape", ")", ",", "\n", "all_pairs_min_xmax", "-", "all_pairs_max_xmin", ")", "\n", "return", "intersect_heights", "*", "intersect_widths", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.iou": [[396, 413], ["kitti_common.intersection", "kitti_common.area", "kitti_common.area", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.kitti_common.intersection", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.area", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.area"], ["", "def", "iou", "(", "boxes1", ",", "boxes2", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes pairwise intersection-over-union between box collections.\n\n    Args:\n        boxes1: a numpy array with shape [N, 4] holding N boxes.\n        boxes2: a numpy array with shape [M, 4] holding N boxes.\n\n    Returns:\n        a numpy array with shape [N, M] representing pairwise iou scores.\n    \"\"\"", "\n", "intersect", "=", "intersection", "(", "boxes1", ",", "boxes2", ",", "add1", ")", "\n", "area1", "=", "area", "(", "boxes1", ",", "add1", ")", "\n", "area2", "=", "area", "(", "boxes2", ",", "add1", ")", "\n", "union", "=", "np", ".", "expand_dims", "(", "\n", "area1", ",", "axis", "=", "1", ")", "+", "np", ".", "expand_dims", "(", "\n", "area2", ",", "axis", "=", "0", ")", "-", "intersect", "\n", "return", "intersect", "/", "union", "\n", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_thresholds": [[9, 28], ["scores.sort", "enumerate", "thresholds.append", "len", "len"], "function", ["None"], ["@", "numba", ".", "jit", "\n", "def", "get_thresholds", "(", "scores", ":", "np", ".", "ndarray", ",", "num_gt", ",", "num_sample_pts", "=", "41", ")", ":", "\n", "    ", "scores", ".", "sort", "(", ")", "\n", "scores", "=", "scores", "[", ":", ":", "-", "1", "]", "\n", "current_recall", "=", "0", "\n", "thresholds", "=", "[", "]", "\n", "for", "i", ",", "score", "in", "enumerate", "(", "scores", ")", ":", "\n", "        ", "l_recall", "=", "(", "i", "+", "1", ")", "/", "num_gt", "\n", "if", "i", "<", "(", "len", "(", "scores", ")", "-", "1", ")", ":", "\n", "            ", "r_recall", "=", "(", "i", "+", "2", ")", "/", "num_gt", "\n", "", "else", ":", "\n", "            ", "r_recall", "=", "l_recall", "\n", "", "if", "(", "(", "(", "r_recall", "-", "current_recall", ")", "<", "(", "current_recall", "-", "l_recall", ")", ")", "\n", "and", "(", "i", "<", "(", "len", "(", "scores", ")", "-", "1", ")", ")", ")", ":", "\n", "            ", "continue", "\n", "# recall = l_recall", "\n", "", "thresholds", ".", "append", "(", "score", ")", "\n", "current_recall", "+=", "1", "/", "(", "num_sample_pts", "-", "1.0", ")", "\n", "", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.clean_data": [[30, 90], ["CLASS_NAMES[].lower", "len", "len", "range", "range", "[].lower", "abs", "isinstance", "ignored_gt.append", "dc_bboxes.append", "[].lower", "isinstance", "ignored_dt.append", "len", "ignored_gt.append", "ignored_gt.append", "len", "isinstance", "ignored_dt.append", "ignored_dt.append", "ignored_dt.append"], "function", ["None"], ["", "def", "clean_data", "(", "gt_anno", ",", "dt_anno", ",", "current_class", ",", "difficulty", ")", ":", "\n", "    ", "CLASS_NAMES", "=", "[", "'car'", ",", "'pedestrian'", ",", "'cyclist'", ",", "'van'", ",", "'person_sitting'", ",", "'truck'", "]", "\n", "MIN_HEIGHT", "=", "[", "40", ",", "25", ",", "25", "]", "\n", "MAX_OCCLUSION", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "MAX_TRUNCATION", "=", "[", "0.15", ",", "0.3", ",", "0.5", "]", "\n", "dc_bboxes", ",", "ignored_gt", ",", "ignored_dt", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "current_cls_name", "=", "CLASS_NAMES", "[", "current_class", "]", ".", "lower", "(", ")", "\n", "num_gt", "=", "len", "(", "gt_anno", "[", "\"name\"", "]", ")", "\n", "num_dt", "=", "len", "(", "dt_anno", "[", "\"name\"", "]", ")", "\n", "num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "        ", "bbox", "=", "gt_anno", "[", "\"bbox\"", "]", "[", "i", "]", "\n", "gt_name", "=", "gt_anno", "[", "\"name\"", "]", "[", "i", "]", ".", "lower", "(", ")", "\n", "height", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "valid_class", "=", "-", "1", "\n", "if", "(", "gt_name", "==", "current_cls_name", ")", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "elif", "(", "current_cls_name", "==", "\"Pedestrian\"", ".", "lower", "(", ")", "\n", "and", "\"Person_sitting\"", ".", "lower", "(", ")", "==", "gt_name", ")", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "elif", "(", "current_cls_name", "==", "\"Car\"", ".", "lower", "(", ")", "and", "\"Van\"", ".", "lower", "(", ")", "==", "gt_name", ")", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "-", "1", "\n", "", "ignore", "=", "False", "\n", "if", "isinstance", "(", "difficulty", ",", "list", ")", "and", "len", "(", "difficulty", ")", "==", "2", ":", "\n", "            ", "if", "gt_anno", "[", "\"coverage_rates\"", "]", "[", "i", "]", ">=", "difficulty", "[", "0", "]", "and", "gt_anno", "[", "\"coverage_rates\"", "]", "[", "i", "]", "<", "difficulty", "[", "1", "]", ":", "\n", "                ", "ignore", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "(", "gt_anno", "[", "\"occluded\"", "]", "[", "i", "]", ">", "MAX_OCCLUSION", "[", "difficulty", "]", ")", "\n", "or", "(", "gt_anno", "[", "\"truncated\"", "]", "[", "i", "]", ">", "MAX_TRUNCATION", "[", "difficulty", "]", ")", "\n", "or", "(", "height", "<=", "MIN_HEIGHT", "[", "difficulty", "]", ")", ")", ":", "\n", "# if gt_anno[\"difficulty\"][i] > difficulty or gt_anno[\"difficulty\"][i] == -1:", "\n", "                ", "ignore", "=", "True", "\n", "", "", "if", "valid_class", "==", "1", "and", "not", "ignore", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "0", ")", "\n", "num_valid_gt", "+=", "1", "\n", "", "elif", "(", "valid_class", "==", "0", "or", "(", "ignore", "and", "(", "valid_class", "==", "1", ")", ")", ")", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "-", "1", ")", "\n", "# for i in range(num_gt):", "\n", "", "if", "gt_anno", "[", "\"name\"", "]", "[", "i", "]", "==", "\"DontCare\"", ":", "\n", "            ", "dc_bboxes", ".", "append", "(", "gt_anno", "[", "\"bbox\"", "]", "[", "i", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "num_dt", ")", ":", "\n", "        ", "if", "(", "dt_anno", "[", "\"name\"", "]", "[", "i", "]", ".", "lower", "(", ")", "==", "current_cls_name", ")", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "-", "1", "\n", "", "height", "=", "abs", "(", "dt_anno", "[", "\"bbox\"", "]", "[", "i", ",", "3", "]", "-", "dt_anno", "[", "\"bbox\"", "]", "[", "i", ",", "1", "]", ")", "\n", "if", "isinstance", "(", "difficulty", ",", "list", ")", "and", "len", "(", "difficulty", ")", "==", "2", "and", "height", "<", "MIN_HEIGHT", "[", "2", "]", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "1", ")", "\n", "", "elif", "isinstance", "(", "difficulty", ",", "int", ")", "and", "height", "<", "MIN_HEIGHT", "[", "difficulty", "]", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "1", ")", "\n", "", "elif", "valid_class", "==", "1", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "-", "1", ")", "\n", "\n", "", "", "return", "num_valid_gt", ",", "ignored_gt", ",", "ignored_dt", ",", "dc_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.image_box_overlap": [[92, 120], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "image_box_overlap", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "qbox_area", "=", "(", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", "+", "qbox_area", "-", "iw", "*", "ih", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "(", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", ")", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "qbox_area", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.bev_box_overlap": [[122, 125], ["rotate_iou.rotate_iou_gpu_eval"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.rotate_iou_gpu_eval"], ["", "def", "bev_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "riou", "=", "rotate_iou_gpu_eval", "(", "boxes", ",", "qboxes", ",", "criterion", ")", "\n", "return", "riou", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.d3_box_overlap_kernel": [[127, 154], ["numba.jit", "range", "range", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "parallel", "=", "True", ")", "\n", "def", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", "=", "-", "1", ")", ":", "\n", "# ONLY support overlap in CAMERA, not lider.", "\n", "    ", "N", ",", "K", "=", "boxes", ".", "shape", "[", "0", "]", ",", "qboxes", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "if", "rinc", "[", "i", ",", "j", "]", ">", "0", ":", "\n", "# iw = (min(boxes[i, 1] + boxes[i, 4], qboxes[j, 1] +", "\n", "#         qboxes[j, 4]) - max(boxes[i, 1], qboxes[j, 1]))", "\n", "                ", "iw", "=", "(", "min", "(", "boxes", "[", "i", ",", "1", "]", ",", "qboxes", "[", "j", ",", "1", "]", ")", "-", "max", "(", "\n", "boxes", "[", "i", ",", "1", "]", "-", "boxes", "[", "i", ",", "4", "]", ",", "qboxes", "[", "j", ",", "1", "]", "-", "qboxes", "[", "j", ",", "4", "]", ")", ")", "\n", "\n", "if", "iw", ">", "0", ":", "\n", "                    ", "area1", "=", "boxes", "[", "i", ",", "3", "]", "*", "boxes", "[", "i", ",", "4", "]", "*", "boxes", "[", "i", ",", "5", "]", "\n", "area2", "=", "qboxes", "[", "j", ",", "3", "]", "*", "qboxes", "[", "j", ",", "4", "]", "*", "qboxes", "[", "j", ",", "5", "]", "\n", "inc", "=", "iw", "*", "rinc", "[", "i", ",", "j", "]", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "area1", "+", "area2", "-", "inc", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "area2", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "inc", "\n", "", "rinc", "[", "i", ",", "j", "]", "=", "inc", "/", "ua", "\n", "", "else", ":", "\n", "                    ", "rinc", "[", "i", ",", "j", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.d3_box_overlap": [[156, 161], ["rotate_iou.rotate_iou_gpu_eval", "eval.d3_box_overlap_kernel"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.rotate_iou_gpu_eval", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.d3_box_overlap_kernel"], ["", "", "", "", "", "def", "d3_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "rinc", "=", "rotate_iou_gpu_eval", "(", "boxes", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", ",", "\n", "qboxes", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", ",", "2", ")", "\n", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", ")", "\n", "return", "rinc", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.compute_statistics_jit": [[163, 282], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "eval.image_box_overlap", "range", "numpy.zeros", "range", "range", "numpy.sum", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.image_box_overlap"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "compute_statistics_jit", "(", "overlaps", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dc_bboxes", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresh", "=", "0", ",", "\n", "compute_fp", "=", "False", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "\n", "    ", "det_size", "=", "dt_datas", ".", "shape", "[", "0", "]", "\n", "gt_size", "=", "gt_datas", ".", "shape", "[", "0", "]", "\n", "dt_scores", "=", "dt_datas", "[", ":", ",", "-", "1", "]", "\n", "dt_alphas", "=", "dt_datas", "[", ":", ",", "4", "]", "\n", "gt_alphas", "=", "gt_datas", "[", ":", ",", "4", "]", "\n", "dt_bboxes", "=", "dt_datas", "[", ":", ",", ":", "4", "]", "\n", "gt_bboxes", "=", "gt_datas", "[", ":", ",", ":", "4", "]", "\n", "\n", "assigned_detection", "=", "[", "False", "]", "*", "det_size", "\n", "ignored_threshold", "=", "[", "False", "]", "*", "det_size", "\n", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "dt_scores", "[", "i", "]", "<", "thresh", ")", ":", "\n", "                ", "ignored_threshold", "[", "i", "]", "=", "True", "\n", "", "", "", "NO_DETECTION", "=", "-", "10000000", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "# thresholds = [0.0]", "\n", "# delta = [0.0]", "\n", "thresholds", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "thresh_idx", "=", "0", "\n", "delta", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "delta_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_size", ")", ":", "\n", "        ", "if", "ignored_gt", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "det_idx", "=", "-", "1", "\n", "valid_detection", "=", "NO_DETECTION", "\n", "max_overlap", "=", "0", "\n", "assigned_ignored_det", "=", "False", "\n", "\n", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "ignored_det", "[", "j", "]", "==", "-", "1", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "assigned_detection", "[", "j", "]", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "ignored_threshold", "[", "j", "]", ")", ":", "\n", "                ", "continue", "\n", "", "overlap", "=", "overlaps", "[", "j", ",", "i", "]", "\n", "dt_score", "=", "dt_scores", "[", "j", "]", "\n", "if", "(", "not", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "dt_score", ">", "valid_detection", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "dt_score", "\n", "", "elif", "(", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "overlap", ">", "max_overlap", "or", "assigned_ignored_det", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "0", ")", ":", "\n", "                ", "max_overlap", "=", "overlap", "\n", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "False", "\n", "", "elif", "(", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "valid_detection", "==", "NO_DETECTION", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "1", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "True", "\n", "\n", "", "", "if", "(", "valid_detection", "==", "NO_DETECTION", ")", "and", "ignored_gt", "[", "i", "]", "==", "0", ":", "\n", "            ", "fn", "+=", "1", "\n", "", "elif", "(", "(", "valid_detection", "!=", "NO_DETECTION", ")", "\n", "and", "(", "ignored_gt", "[", "i", "]", "==", "1", "or", "ignored_det", "[", "det_idx", "]", "==", "1", ")", ")", ":", "\n", "            ", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "elif", "valid_detection", "!=", "NO_DETECTION", ":", "\n", "            ", "tp", "+=", "1", "\n", "# thresholds.append(dt_scores[det_idx])", "\n", "thresholds", "[", "thresh_idx", "]", "=", "dt_scores", "[", "det_idx", "]", "\n", "thresh_idx", "+=", "1", "\n", "if", "compute_aos", ":", "\n", "# delta.append(gt_alphas[i] - dt_alphas[det_idx])", "\n", "                ", "delta", "[", "delta_idx", "]", "=", "gt_alphas", "[", "i", "]", "-", "dt_alphas", "[", "det_idx", "]", "\n", "delta_idx", "+=", "1", "\n", "\n", "", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "not", "(", "assigned_detection", "[", "i", "]", "or", "ignored_det", "[", "i", "]", "==", "-", "1", "\n", "or", "ignored_det", "[", "i", "]", "==", "1", "or", "ignored_threshold", "[", "i", "]", ")", ")", ":", "\n", "                ", "fp", "+=", "1", "\n", "", "", "nstuff", "=", "0", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "overlaps_dt_dc", "=", "image_box_overlap", "(", "dt_bboxes", ",", "dc_bboxes", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "                    ", "if", "(", "assigned_detection", "[", "j", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "ignored_det", "[", "j", "]", "==", "-", "1", "or", "ignored_det", "[", "j", "]", "==", "1", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "ignored_threshold", "[", "j", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "overlaps_dt_dc", "[", "j", ",", "i", "]", ">", "min_overlap", ":", "\n", "                        ", "assigned_detection", "[", "j", "]", "=", "True", "\n", "nstuff", "+=", "1", "\n", "", "", "", "", "fp", "-=", "nstuff", "\n", "if", "compute_aos", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "fp", "+", "delta_idx", ",", ")", ")", "\n", "# tmp = [0] * fp", "\n", "for", "i", "in", "range", "(", "delta_idx", ")", ":", "\n", "                ", "tmp", "[", "i", "+", "fp", "]", "=", "(", "1.0", "+", "np", ".", "cos", "(", "delta", "[", "i", "]", ")", ")", "/", "2.0", "\n", "# tmp.append((1.0 + np.cos(delta[i])) / 2.0)", "\n", "# assert len(tmp) == fp + tp", "\n", "# assert len(delta) == tp", "\n", "", "if", "tp", ">", "0", "or", "fp", ">", "0", ":", "\n", "                ", "similarity", "=", "np", ".", "sum", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "similarity", "=", "-", "1", "\n", "", "", "", "return", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "[", ":", "thresh_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_split_parts": [[284, 294], ["None"], "function", ["None"], ["", "def", "get_split_parts", "(", "num", ",", "num_part", ")", ":", "\n", "    ", "same_part", "=", "num", "//", "num_part", "\n", "remain_num", "=", "num", "%", "num_part", "\n", "if", "same_part", "==", "0", ":", "\n", "        ", "return", "[", "num", "]", "\n", "\n", "", "if", "remain_num", "==", "0", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "\n", "", "else", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "+", "[", "remain_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.fused_compute_statistics": [[296, 344], ["numba.jit", "range", "enumerate", "eval.compute_statistics_jit"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.compute_statistics_jit"], ["", "", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "fused_compute_statistics", "(", "overlaps", ",", "\n", "pr", ",", "\n", "gt_nums", ",", "\n", "dt_nums", ",", "\n", "dc_nums", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "dontcares", ",", "\n", "ignored_gts", ",", "\n", "ignored_dets", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresholds", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "    ", "gt_num", "=", "0", "\n", "dt_num", "=", "0", "\n", "dc_num", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_nums", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "t", ",", "thresh", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "overlap", "=", "overlaps", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", ",", "gt_num", ":", "\n", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "\n", "gt_data", "=", "gt_datas", "[", "gt_num", ":", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "dt_data", "=", "dt_datas", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", "]", "\n", "ignored_gt", "=", "ignored_gts", "[", "gt_num", ":", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "ignored_det", "=", "ignored_dets", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", "]", "\n", "dontcare", "=", "dontcares", "[", "dc_num", ":", "dc_num", "+", "dc_nums", "[", "i", "]", "]", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "_", "=", "compute_statistics_jit", "(", "\n", "overlap", ",", "\n", "gt_data", ",", "\n", "dt_data", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dontcare", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "thresh", ",", "\n", "compute_fp", "=", "True", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "pr", "[", "t", ",", "0", "]", "+=", "tp", "\n", "pr", "[", "t", ",", "1", "]", "+=", "fp", "\n", "pr", "[", "t", ",", "2", "]", "+=", "fn", "\n", "if", "similarity", "!=", "-", "1", ":", "\n", "                ", "pr", "[", "t", ",", "3", "]", "+=", "similarity", "\n", "", "", "gt_num", "+=", "gt_nums", "[", "i", "]", "\n", "dt_num", "+=", "dt_nums", "[", "i", "]", "\n", "dc_num", "+=", "dc_nums", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.calculate_iou_partly": [[346, 421], ["numpy.stack", "numpy.stack", "len", "eval.get_split_parts", "enumerate", "len", "len", "parted_overlaps.append", "range", "len", "len", "numpy.concatenate", "numpy.concatenate", "eval.image_box_overlap", "overlaps.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "bev_box_overlap().astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "d3_box_overlap().astype", "ValueError", "eval.bev_box_overlap", "eval.d3_box_overlap"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_split_parts", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.image_box_overlap", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.bev_box_overlap", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.d3_box_overlap"], ["", "", "def", "calculate_iou_partly", "(", "gt_annos", ",", "dt_annos", ",", "metric", ",", "num_parts", "=", "50", ")", ":", "\n", "    ", "\"\"\"fast iou algorithm. this function can be used independently to\n    do result analysis. Must be used in CAMERA coordinate system.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        num_parts: int. a parameter for fast calculate algorithm\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "total_dt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "dt_annos", "]", ",", "0", ")", "\n", "total_gt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "gt_annos", "]", ",", "0", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "parted_overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "\n", "for", "num_part", "in", "split_parts", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "overlap_part", "=", "image_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", "\n", "", "elif", "metric", "==", "1", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "bev_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "elif", "metric", "==", "2", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "d3_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown metric\"", ")", "\n", "", "parted_overlaps", ".", "append", "(", "overlap_part", ")", "\n", "example_idx", "+=", "num_part", "\n", "", "overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "gt_num_idx", ",", "dt_num_idx", "=", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "num_part", ")", ":", "\n", "            ", "gt_box_num", "=", "total_gt_num", "[", "example_idx", "+", "i", "]", "\n", "dt_box_num", "=", "total_dt_num", "[", "example_idx", "+", "i", "]", "\n", "overlaps", ".", "append", "(", "\n", "parted_overlaps", "[", "j", "]", "[", "gt_num_idx", ":", "gt_num_idx", "+", "gt_box_num", ",", "\n", "dt_num_idx", ":", "dt_num_idx", "+", "dt_box_num", "]", ")", "\n", "gt_num_idx", "+=", "gt_box_num", "\n", "dt_num_idx", "+=", "dt_box_num", "\n", "", "example_idx", "+=", "num_part", "\n", "\n", "", "return", "overlaps", ",", "parted_overlaps", ",", "total_gt_num", ",", "total_dt_num", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval._prepare_data": [[423, 452], ["range", "numpy.stack", "len", "eval.clean_data", "ignored_gts.append", "ignored_dets.append", "np.stack.append", "dontcares.append", "numpy.concatenate", "numpy.concatenate", "gt_datas_list.append", "dt_datas_list.append", "numpy.array", "numpy.array", "len", "numpy.zeros().astype", "numpy.stack().astype", "numpy.zeros", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.clean_data"], ["", "def", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", ":", "\n", "    ", "gt_datas_list", "=", "[", "]", "\n", "dt_datas_list", "=", "[", "]", "\n", "total_dc_num", "=", "[", "]", "\n", "ignored_gts", ",", "ignored_dets", ",", "dontcares", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "        ", "rets", "=", "clean_data", "(", "gt_annos", "[", "i", "]", ",", "dt_annos", "[", "i", "]", ",", "current_class", ",", "difficulty", ")", "\n", "num_valid_gt", ",", "ignored_gt", ",", "ignored_det", ",", "dc_bboxes", "=", "rets", "\n", "ignored_gts", ".", "append", "(", "np", ".", "array", "(", "ignored_gt", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "ignored_dets", ".", "append", "(", "np", ".", "array", "(", "ignored_det", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "if", "len", "(", "dc_bboxes", ")", "==", "0", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "stack", "(", "dc_bboxes", ",", "0", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "total_dc_num", ".", "append", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "dontcares", ".", "append", "(", "dc_bboxes", ")", "\n", "total_num_valid_gt", "+=", "num_valid_gt", "\n", "gt_datas", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "gt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "1", ")", "\n", "dt_datas", "=", "np", ".", "concatenate", "(", "[", "\n", "dt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "dt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", ",", "\n", "dt_annos", "[", "i", "]", "[", "\"score\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "]", ",", "1", ")", "\n", "gt_datas_list", ".", "append", "(", "gt_datas", ")", "\n", "dt_datas_list", ".", "append", "(", "dt_datas", ")", "\n", "", "total_dc_num", "=", "np", ".", "stack", "(", "total_dc_num", ",", "axis", "=", "0", ")", "\n", "return", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "dontcares", ",", "\n", "total_dc_num", ",", "total_num_valid_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.eval_class": [[454, 564], ["len", "eval.get_split_parts", "eval.calculate_iou_partly", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "enumerate", "eval._prepare_data", "enumerate", "range", "numpy.array", "eval.get_thresholds", "numpy.array", "numpy.zeros", "enumerate", "range", "range", "len", "eval.compute_statistics_jit", "np.array.tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "eval.fused_compute_statistics", "len", "numpy.max", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_split_parts", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.calculate_iou_partly", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval._prepare_data", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_thresholds", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.compute_statistics_jit", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.fused_compute_statistics"], ["", "def", "eval_class", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_classes", ",", "\n", "difficultys", ",", "\n", "metric", ",", "\n", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ",", "\n", "num_parts", "=", "100", ")", ":", "\n", "    ", "\"\"\"Kitti eval. support 2d/bev/3d/aos eval. support 0.5:0.05:0.95 coco AP.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        current_classes: list of int, 0: car, 1: pedestrian, 2: cyclist\n        difficultys: list of int. eval difficulty, 0: easy, 1: normal, 2: hard\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        min_overlaps: float, min overlap. format: [num_overlap, metric, class].\n        num_parts: int. a parameter for fast calculate algorithm\n\n    Returns:\n        dict of recall, precision and aos\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "\n", "rets", "=", "calculate_iou_partly", "(", "dt_annos", ",", "gt_annos", ",", "metric", ",", "num_parts", ")", "\n", "overlaps", ",", "parted_overlaps", ",", "total_dt_num", ",", "total_gt_num", "=", "rets", "\n", "N_SAMPLE_PTS", "=", "41", "\n", "num_minoverlap", "=", "len", "(", "min_overlaps", ")", "\n", "num_class", "=", "len", "(", "current_classes", ")", "\n", "num_difficulty", "=", "len", "(", "difficultys", ")", "\n", "precision", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "real_recall", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "aos", "=", "np", ".", "zeros", "(", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "for", "m", ",", "current_class", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "for", "l", ",", "difficulty", "in", "enumerate", "(", "difficultys", ")", ":", "\n", "            ", "rets", "=", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", "\n", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "\n", "dontcares", ",", "total_dc_num", ",", "total_num_valid_gt", ")", "=", "rets", "\n", "for", "k", ",", "min_overlap", "in", "enumerate", "(", "min_overlaps", "[", ":", ",", "metric", ",", "m", "]", ")", ":", "\n", "                ", "thresholdss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "                    ", "rets", "=", "compute_statistics_jit", "(", "\n", "overlaps", "[", "i", "]", ",", "\n", "gt_datas_list", "[", "i", "]", ",", "\n", "dt_datas_list", "[", "i", "]", ",", "\n", "ignored_gts", "[", "i", "]", ",", "\n", "ignored_dets", "[", "i", "]", ",", "\n", "dontcares", "[", "i", "]", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "0.0", ",", "\n", "compute_fp", "=", "False", ")", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "=", "rets", "\n", "thresholdss", "+=", "thresholds", ".", "tolist", "(", ")", "\n", "", "thresholdss", "=", "np", ".", "array", "(", "thresholdss", ")", "\n", "thresholds", "=", "get_thresholds", "(", "thresholdss", ",", "total_num_valid_gt", ")", "\n", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "pr", "=", "np", ".", "zeros", "(", "[", "len", "(", "thresholds", ")", ",", "4", "]", ")", "\n", "idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "                    ", "gt_datas_part", "=", "np", ".", "concatenate", "(", "\n", "gt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dt_datas_part", "=", "np", ".", "concatenate", "(", "\n", "dt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dc_datas_part", "=", "np", ".", "concatenate", "(", "\n", "dontcares", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_dets_part", "=", "np", ".", "concatenate", "(", "\n", "ignored_dets", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_gts_part", "=", "np", ".", "concatenate", "(", "\n", "ignored_gts", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "fused_compute_statistics", "(", "\n", "parted_overlaps", "[", "j", "]", ",", "\n", "pr", ",", "\n", "total_gt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dc_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "gt_datas_part", ",", "\n", "dt_datas_part", ",", "\n", "dc_datas_part", ",", "\n", "ignored_gts_part", ",", "\n", "ignored_dets_part", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresholds", "=", "thresholds", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "idx", "+=", "num_part", "\n", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "                    ", "recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "2", "]", ")", "\n", "precision", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "if", "compute_aos", ":", "\n", "                        ", "aos", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "3", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "", "real_recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "recall", "[", "m", ",", "l", ",", "k", ",", ":", "i", "+", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "                    ", "precision", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "\n", "precision", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "recall", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "compute_aos", ":", "\n", "                        ", "aos", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "aos", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "", "", "", "ret_dict", "=", "{", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"real_recall\"", ":", "real_recall", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"orientation\"", ":", "aos", ",", "\n", "}", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP": [[566, 571], ["range"], "function", ["None"], ["", "def", "get_mAP", "(", "prec", ")", ":", "\n", "    ", "sums", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "prec", ".", "shape", "[", "-", "1", "]", ",", "4", ")", ":", "\n", "        ", "sums", "=", "sums", "+", "prec", "[", "...", ",", "i", "]", "\n", "", "return", "sums", "/", "11", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP_R40": [[573, 578], ["range"], "function", ["None"], ["", "def", "get_mAP_R40", "(", "prec", ")", ":", "\n", "    ", "sums", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "prec", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "sums", "=", "sums", "+", "prec", "[", "...", ",", "i", "]", "\n", "", "return", "sums", "/", "40", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str": [[580, 587], ["sysio.StringIO.truncate", "sysio.StringIO.seek", "print", "sysio.StringIO.getvalue", "io.StringIO"], "function", ["None"], ["", "def", "print_str", "(", "value", ",", "*", "arg", ",", "sstream", "=", "None", ")", ":", "\n", "    ", "if", "sstream", "is", "None", ":", "\n", "        ", "sstream", "=", "sysio", ".", "StringIO", "(", ")", "\n", "", "sstream", ".", "truncate", "(", "0", ")", "\n", "sstream", ".", "seek", "(", "0", ")", "\n", "print", "(", "value", ",", "*", "arg", ",", "file", "=", "sstream", ")", "\n", "return", "sstream", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.do_eval": [[589, 638], ["eval.eval_class", "eval.get_mAP", "eval.get_mAP_R40", "eval.eval_class", "eval.get_mAP", "eval.get_mAP_R40", "eval.eval_class", "eval.get_mAP", "eval.get_mAP_R40", "eval.get_mAP", "eval.get_mAP_R40", "eval.create_details", "eval.create_details"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.eval_class", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP_R40", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.eval_class", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP_R40", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.eval_class", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP_R40", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_mAP_R40", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.create_details", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.create_details"], ["", "def", "do_eval", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_classes", ",", "\n", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ",", "\n", "PR_detail_dict", "=", "None", ",", "pr_rc_details", "=", "None", ",", "coverage_rates", "=", "None", ")", ":", "\n", "# min_overlaps: [num_minoverlap, metric, num_class]", "\n", "\n", "    ", "difficultys", "=", "[", "0", ",", "1", ",", "2", "]", "if", "coverage_rates", "is", "None", "else", "coverage_rates", "\n", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "0", ",", "\n", "min_overlaps", ",", "compute_aos", ")", "\n", "# ret: [num_class, num_diff, num_minoverlap, num_sample_points]", "\n", "mAP_bbox", "=", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "mAP_bbox_R40", "=", "get_mAP_R40", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "\n", "if", "PR_detail_dict", "is", "not", "None", ":", "\n", "        ", "PR_detail_dict", "[", "'bbox'", "]", "=", "ret", "[", "'precision'", "]", "\n", "\n", "", "mAP_aos", "=", "mAP_aos_R40", "=", "None", "\n", "if", "compute_aos", ":", "\n", "        ", "mAP_aos", "=", "get_mAP", "(", "ret", "[", "\"orientation\"", "]", ")", "\n", "mAP_aos_R40", "=", "get_mAP_R40", "(", "ret", "[", "\"orientation\"", "]", ")", "\n", "\n", "if", "PR_detail_dict", "is", "not", "None", ":", "\n", "            ", "PR_detail_dict", "[", "'aos'", "]", "=", "ret", "[", "'orientation'", "]", "\n", "\n", "", "", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "1", ",", "\n", "min_overlaps", ")", "\n", "mAP_bev", "=", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "mAP_bev_R40", "=", "get_mAP_R40", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "\n", "if", "PR_detail_dict", "is", "not", "None", ":", "\n", "        ", "PR_detail_dict", "[", "'bev'", "]", "=", "ret", "[", "'precision'", "]", "\n", "\n", "", "if", "pr_rc_details", "is", "not", "None", ":", "\n", "        ", "pr_rc_details", "[", "'bev'", "]", "=", "create_details", "(", "current_classes", ",", "ret", "[", "\"precision\"", "]", ",", "ret", "[", "\"real_recall\"", "]", ",", "difficultys", "=", "difficultys", ")", "\n", "\n", "\n", "", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "2", ",", "\n", "min_overlaps", ")", "\n", "mAP_3d", "=", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "mAP_3d_R40", "=", "get_mAP_R40", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "if", "PR_detail_dict", "is", "not", "None", ":", "\n", "        ", "PR_detail_dict", "[", "'3d'", "]", "=", "ret", "[", "'precision'", "]", "\n", "\n", "", "if", "pr_rc_details", "is", "not", "None", ":", "\n", "        ", "pr_rc_details", "[", "'3d'", "]", "=", "create_details", "(", "current_classes", ",", "ret", "[", "\"precision\"", "]", ",", "ret", "[", "\"real_recall\"", "]", ",", "difficultys", "=", "difficultys", ")", "\n", "\n", "", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", ",", "mAP_bbox_R40", ",", "mAP_bev_R40", ",", "mAP_3d_R40", ",", "mAP_aos_R40", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.create_details": [[639, 666], ["print", "isinstance", "enumerate", "range", "range", "len"], "function", ["None"], ["", "def", "create_details", "(", "current_classes", ",", "pc", ",", "rc", ",", "difficultys", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"pc, rc\"", ",", "pc", ".", "shape", ",", "rc", ".", "shape", ")", "\n", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "5", ":", "'Truck'", "\n", "}", "\n", "if", "isinstance", "(", "difficultys", "[", "0", "]", ",", "int", ")", ":", "\n", "        ", "diff_to_name", "=", "{", "0", ":", "\"easy\"", ",", "1", ":", "\"moderate\"", ",", "2", ":", "\"hard\"", "}", "\n", "", "else", ":", "\n", "        ", "diff_to_name", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "difficultys", ")", ")", ":", "\n", "            ", "diff_to_name", "[", "i", "]", "=", "\"{}<=cvrg<{}\"", ".", "format", "(", "difficultys", "[", "i", "]", "[", "0", "]", ",", "difficultys", "[", "i", "]", "[", "1", "]", ")", "\n", "", "", "dict", "=", "{", "}", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "dict", "[", "class_to_name", "[", "curcls", "]", "]", "=", "{", "}", "\n", "for", "d", "in", "range", "(", "pc", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "R11pc_lst", "=", "pc", "[", "j", ",", "d", ",", "0", ",", "0", ":", ":", "4", "]", "\n", "R11rc_lst", "=", "rc", "[", "j", ",", "d", ",", "0", ",", "0", ":", ":", "4", "]", "\n", "R40pc_lst", "=", "pc", "[", "j", ",", "d", ",", "0", ",", "1", ":", "]", "\n", "R40rc_lst", "=", "rc", "[", "j", ",", "d", ",", "0", ",", "1", ":", "]", "\n", "cls_diff_dict", "=", "{", "\"R11_pc\"", ":", "R11pc_lst", ",", "\"R11_rc\"", ":", "R11rc_lst", ",", "\"R40_pc\"", ":", "R40pc_lst", ",", "\"R40_rc\"", ":", "R40rc_lst", "}", "\n", "dict", "[", "class_to_name", "[", "curcls", "]", "]", "[", "diff_to_name", "[", "d", "]", "]", "=", "cls_diff_dict", "\n", "", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.do_coco_style_eval": [[667, 683], ["numpy.zeros", "range", "eval.do_eval", "mAP_bbox.mean.mean", "mAP_bev.mean.mean", "mAP_3d.mean.mean", "range", "mAP_aos.mean.mean", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.do_eval"], ["", "def", "do_coco_style_eval", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "overlap_ranges", ",", "\n", "compute_aos", ")", ":", "\n", "# overlap_ranges: [range, metric, num_class]", "\n", "    ", "min_overlaps", "=", "np", ".", "zeros", "(", "[", "10", ",", "*", "overlap_ranges", ".", "shape", "[", "1", ":", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "overlap_ranges", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "overlap_ranges", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "min_overlaps", "[", ":", ",", "i", ",", "j", "]", "=", "np", ".", "linspace", "(", "*", "overlap_ranges", "[", ":", ",", "i", ",", "j", "]", ")", "\n", "", "", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "=", "do_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "min_overlaps", ",", "compute_aos", ")", "\n", "# ret: [num_class, num_diff, num_minoverlap]", "\n", "mAP_bbox", "=", "mAP_bbox", ".", "mean", "(", "-", "1", ")", "\n", "mAP_bev", "=", "mAP_bev", ".", "mean", "(", "-", "1", ")", "\n", "mAP_3d", "=", "mAP_3d", ".", "mean", "(", "-", "1", ")", "\n", "if", "mAP_aos", "is", "not", "None", ":", "\n", "        ", "mAP_aos", "=", "mAP_aos", ".", "mean", "(", "-", "1", ")", "\n", "", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_official_eval_result": [[685, 804], ["numpy.array", "numpy.array", "numpy.stack", "eval.do_eval", "enumerate", "isinstance", "isinstance", "range", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.do_eval", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str"], ["", "def", "get_official_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "coverage_rates", "=", "None", ",", "PR_detail_dict", "=", "None", ")", ":", "\n", "    ", "overlap_0_7", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.7", "]", ",", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", "]", ",", "\n", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", "]", "]", ")", "\n", "overlap_0_5", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", ",", "0.5", "]", ",", "\n", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", ",", "0.5", "]", "]", ")", "\n", "min_overlaps", "=", "np", ".", "stack", "(", "[", "overlap_0_7", ",", "overlap_0_5", "]", ",", "axis", "=", "0", ")", "# [2, 3, 5]", "\n", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "5", ":", "'Truck'", "\n", "}", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "not", "isinstance", "(", "current_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "current_classes", "=", "[", "current_classes", "]", "\n", "", "current_classes_int", "=", "[", "]", "\n", "for", "curcls", "in", "current_classes", ":", "\n", "        ", "if", "isinstance", "(", "curcls", ",", "str", ")", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "name_to_class", "[", "curcls", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "curcls", ")", "\n", "", "", "current_classes", "=", "current_classes_int", "\n", "min_overlaps", "=", "min_overlaps", "[", ":", ",", ":", ",", "current_classes", "]", "\n", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "pr_rc_details", "=", "{", "}", "\n", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", ",", "mAPbbox_R40", ",", "mAPbev_R40", ",", "mAP3d_R40", ",", "mAPaos_R40", "=", "do_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "min_overlaps", ",", "compute_aos", ",", "PR_detail_dict", "=", "PR_detail_dict", ",", "pr_rc_details", "=", "pr_rc_details", ",", "coverage_rates", "=", "coverage_rates", ")", "\n", "\n", "ret_dict", "=", "{", "}", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "# mAP threshold array: [num_minoverlap, metric, class]", "\n", "# mAP result: [num_class, num_diff, num_minoverlap]", "\n", "        ", "for", "i", "in", "range", "(", "min_overlaps", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"AP@{:.2f}, {:.2f}, {:.2f}:\"", ".", "format", "(", "*", "min_overlaps", "[", "i", ",", ":", ",", "j", "]", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[j, 0, i]:.4f}, \"", "\n", "f\"{mAPbbox[j, 1, i]:.4f}, \"", "\n", "f\"{mAPbbox[j, 2, i]:.4f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[j, 0, i]:.4f}, \"", "\n", "f\"{mAPbev[j, 1, i]:.4f}, \"", "\n", "f\"{mAPbev[j, 2, i]:.4f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[j, 0, i]:.4f}, \"", "\n", "f\"{mAP3d[j, 1, i]:.4f}, \"", "\n", "f\"{mAP3d[j, 2, i]:.4f}\"", ")", ")", "\n", "# result += print_str((f\"3d   AP:{mAP3d[j, 0, i]:.4f}, \"", "\n", "#                      f\"{mAP3d[j, 1, i]:.4f}, \"", "\n", "#                      f\"{mAP3d[j, 2, i]:.4f}, \"", "\n", "#                      f\"{mAP3d[j, 3, i]:.4f}, \"", "\n", "#                      f\"{mAP3d[j, 4, i]:.4f}, \"))", "\n", "\n", "if", "compute_aos", ":", "\n", "                ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[j, 0, i]:.2f}, \"", "\n", "f\"{mAPaos[j, 1, i]:.2f}, \"", "\n", "f\"{mAPaos[j, 2, i]:.2f}\"", ")", ")", "\n", "# if i == 0:", "\n", "# ret_dict['%s_aos/easy' % class_to_name[curcls]] = mAPaos[j, 0, 0]", "\n", "# ret_dict['%s_aos/moderate' % class_to_name[curcls]] = mAPaos[j, 1, 0]", "\n", "# ret_dict['%s_aos/hard' % class_to_name[curcls]] = mAPaos[j, 2, 0]", "\n", "\n", "", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"AP_R40@{:.2f}, {:.2f}, {:.2f}:\"", ".", "format", "(", "*", "min_overlaps", "[", "i", ",", ":", ",", "j", "]", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox_R40[j, 0, i]:.4f}, \"", "\n", "f\"{mAPbbox_R40[j, 1, i]:.4f}, \"", "\n", "f\"{mAPbbox_R40[j, 2, i]:.4f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev_R40[j, 0, i]:.4f}, \"", "\n", "f\"{mAPbev_R40[j, 1, i]:.4f}, \"", "\n", "f\"{mAPbev_R40[j, 2, i]:.4f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d_R40[j, 0, i]:.4f}, \"", "\n", "f\"{mAP3d_R40[j, 1, i]:.4f}, \"", "\n", "f\"{mAP3d_R40[j, 2, i]:.4f}\"", ")", ")", "\n", "# result += print_str((f\"3d   AP:{mAP3d_R40[j, 0, i]:.4f}, \"", "\n", "#                      f\"{mAP3d_R40[j, 1, i]:.4f}, \"", "\n", "#                      f\"{mAP3d_R40[j, 2, i]:.4f}, \"", "\n", "#                      f\"{mAP3d_R40[j, 3, i]:.4f}, \"", "\n", "#                      f\"{mAP3d_R40[j, 4, i]:.4f}, \"))", "\n", "if", "compute_aos", ":", "\n", "                ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos_R40[j, 0, i]:.2f}, \"", "\n", "f\"{mAPaos_R40[j, 1, i]:.2f}, \"", "\n", "f\"{mAPaos_R40[j, 2, i]:.2f}\"", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                   ", "ret_dict", "[", "'%s_aos/easy_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPaos_R40", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_aos/moderate_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPaos_R40", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_aos/hard_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPaos_R40", "[", "j", ",", "2", ",", "0", "]", "\n", "\n", "", "", "if", "i", "==", "0", ":", "\n", "                ", "ret_dict", "[", "'%s_3d/11R_easy'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_3d/11R_moderate'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_3d/11R_hard'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d", "[", "j", ",", "2", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/11R_easy'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/11R_moderate'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/11R_hard'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev", "[", "j", ",", "2", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/11R_easy'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/11R_moderate'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/11R_hard'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox", "[", "j", ",", "2", ",", "0", "]", "\n", "\n", "ret_dict", "[", "'%s_3d/easy_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d_R40", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_3d/moderate_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d_R40", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_3d/hard_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAP3d_R40", "[", "j", ",", "2", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/easy_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev_R40", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/moderate_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev_R40", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_bev/hard_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbev_R40", "[", "j", ",", "2", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/easy_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox_R40", "[", "j", ",", "0", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/moderate_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox_R40", "[", "j", ",", "1", ",", "0", "]", "\n", "ret_dict", "[", "'%s_image/hard_R40'", "%", "class_to_name", "[", "curcls", "]", "]", "=", "mAPbbox_R40", "[", "j", ",", "2", ",", "0", "]", "\n", "\n", "", "", "", "return", "result", ",", "ret_dict", ",", "pr_rc_details", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.get_coco_eval_result": [[806, 866], ["numpy.zeros", "enumerate", "eval.do_coco_style_eval", "enumerate", "isinstance", "isinstance", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "len", "numpy.array", "numpy.array", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.do_coco_style_eval", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.eval.print_str"], ["", "def", "get_coco_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ")", ":", "\n", "    ", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "}", "\n", "class_to_range", "=", "{", "\n", "0", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "1", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "2", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "3", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "4", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "}", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "not", "isinstance", "(", "current_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "current_classes", "=", "[", "current_classes", "]", "\n", "", "current_classes_int", "=", "[", "]", "\n", "for", "curcls", "in", "current_classes", ":", "\n", "        ", "if", "isinstance", "(", "curcls", ",", "str", ")", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "name_to_class", "[", "curcls", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "curcls", ")", "\n", "", "", "current_classes", "=", "current_classes_int", "\n", "overlap_ranges", "=", "np", ".", "zeros", "(", "[", "3", ",", "3", ",", "len", "(", "current_classes", ")", "]", ")", "\n", "for", "i", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "overlap_ranges", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "array", "(", "\n", "class_to_range", "[", "curcls", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", "=", "do_coco_style_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "overlap_ranges", ",", "compute_aos", ")", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "# mAP threshold array: [num_minoverlap, metric, class]", "\n", "# mAP result: [num_class, num_diff, num_minoverlap]", "\n", "        ", "o_range", "=", "np", ".", "array", "(", "class_to_range", "[", "curcls", "]", ")", "[", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "o_range", "[", "1", "]", "=", "(", "o_range", "[", "2", "]", "-", "o_range", "[", "0", "]", ")", "/", "(", "o_range", "[", "1", "]", "-", "1", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"coco AP@{:.2f}:{:.2f}:{:.2f}:\"", ".", "format", "(", "*", "o_range", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[j, 0]:.2f}, \"", "\n", "f\"{mAPbbox[j, 1]:.2f}, \"", "\n", "f\"{mAPbbox[j, 2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[j, 0]:.2f}, \"", "\n", "f\"{mAPbev[j, 1]:.2f}, \"", "\n", "f\"{mAPbev[j, 2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[j, 0]:.2f}, \"", "\n", "f\"{mAP3d[j, 1]:.2f}, \"", "\n", "f\"{mAP3d[j, 2]:.2f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[j, 0]:.2f}, \"", "\n", "f\"{mAPaos[j, 1]:.2f}, \"", "\n", "f\"{mAPaos[j, 2]:.2f}\"", ")", ")", "\n", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.div_up": [[13, 16], ["numba.jit"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "div_up", "(", "m", ",", "n", ")", ":", "\n", "    ", "return", "m", "//", "n", "+", "(", "m", "%", "n", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.trangle_area": [[17, 21], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "trangle_area", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "(", "(", "a", "[", "0", "]", "-", "c", "[", "0", "]", ")", "*", "(", "b", "[", "1", "]", "-", "c", "[", "1", "]", ")", "-", "(", "a", "[", "1", "]", "-", "c", "[", "1", "]", ")", "*", "\n", "(", "b", "[", "0", "]", "-", "c", "[", "0", "]", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.area": [[23, 31], ["numba.cuda.jit", "range", "abs", "rotate_iou.trangle_area"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "area", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "area_val", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", "-", "2", ")", ":", "\n", "        ", "area_val", "+=", "abs", "(", "\n", "trangle_area", "(", "int_pts", "[", ":", "2", "]", ",", "int_pts", "[", "2", "*", "i", "+", "2", ":", "2", "*", "i", "+", "4", "]", ",", "\n", "int_pts", "[", "2", "*", "i", "+", "4", ":", "2", "*", "i", "+", "6", "]", ")", ")", "\n", "", "return", "area_val", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.sort_vertex_in_convex_polygon": [[33, 71], ["numba.cuda.jit", "numba.cuda.local.array", "range", "numba.cuda.local.array", "numba.cuda.local.array", "range", "range", "math.sqrt"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "sort_vertex_in_convex_polygon", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "if", "num_of_inter", ">", "0", ":", "\n", "        ", "center", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "center", "[", ":", "]", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "center", "[", "0", "]", "+=", "int_pts", "[", "2", "*", "i", "]", "\n", "center", "[", "1", "]", "+=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "", "center", "[", "0", "]", "/=", "num_of_inter", "\n", "center", "[", "1", "]", "/=", "num_of_inter", "\n", "v", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "vs", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "v", "[", "0", "]", "=", "int_pts", "[", "2", "*", "i", "]", "-", "center", "[", "0", "]", "\n", "v", "[", "1", "]", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "-", "center", "[", "1", "]", "\n", "d", "=", "math", ".", "sqrt", "(", "v", "[", "0", "]", "*", "v", "[", "0", "]", "+", "v", "[", "1", "]", "*", "v", "[", "1", "]", ")", "\n", "v", "[", "0", "]", "=", "v", "[", "0", "]", "/", "d", "\n", "v", "[", "1", "]", "=", "v", "[", "1", "]", "/", "d", "\n", "if", "v", "[", "1", "]", "<", "0", ":", "\n", "                ", "v", "[", "0", "]", "=", "-", "2", "-", "v", "[", "0", "]", "\n", "", "vs", "[", "i", "]", "=", "v", "[", "0", "]", "\n", "", "j", "=", "0", "\n", "temp", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "num_of_inter", ")", ":", "\n", "            ", "if", "vs", "[", "i", "-", "1", "]", ">", "vs", "[", "i", "]", ":", "\n", "                ", "temp", "=", "vs", "[", "i", "]", "\n", "tx", "=", "int_pts", "[", "2", "*", "i", "]", "\n", "ty", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "j", "=", "i", "\n", "while", "j", ">", "0", "and", "vs", "[", "j", "-", "1", "]", ">", "temp", ":", "\n", "                    ", "vs", "[", "j", "]", "=", "vs", "[", "j", "-", "1", "]", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "int_pts", "[", "j", "*", "2", "-", "2", "]", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "int_pts", "[", "j", "*", "2", "-", "1", "]", "\n", "j", "-=", "1", "\n", "\n", "", "vs", "[", "j", "]", "=", "temp", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "tx", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "ty", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.line_segment_intersection": [[73, 117], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array"], "function", ["None"], ["", "", "", "", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "A", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "B", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "C", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "D", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "A", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "A", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "B", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "B", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "C", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "C", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "D", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "D", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "BA0", "=", "B", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "BA1", "=", "B", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "DA0", "=", "D", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "CA0", "=", "C", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "DA1", "=", "D", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "CA1", "=", "C", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "acd", "=", "DA1", "*", "CA0", ">", "CA1", "*", "DA0", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "CA1", "*", "BA0", ">", "BA1", "*", "CA0", "\n", "abd", "=", "DA1", "*", "BA0", ">", "BA1", "*", "DA0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "DC0", "=", "D", "[", "0", "]", "-", "C", "[", "0", "]", "\n", "DC1", "=", "D", "[", "1", "]", "-", "C", "[", "1", "]", "\n", "ABBA", "=", "A", "[", "0", "]", "*", "B", "[", "1", "]", "-", "B", "[", "0", "]", "*", "A", "[", "1", "]", "\n", "CDDC", "=", "C", "[", "0", "]", "*", "D", "[", "1", "]", "-", "D", "[", "0", "]", "*", "C", "[", "1", "]", "\n", "DH", "=", "BA1", "*", "DC0", "-", "BA0", "*", "DC1", "\n", "Dx", "=", "ABBA", "*", "DC0", "-", "BA0", "*", "CDDC", "\n", "Dy", "=", "ABBA", "*", "DC1", "-", "BA1", "*", "CDDC", "\n", "temp_pts", "[", "0", "]", "=", "Dx", "/", "DH", "\n", "temp_pts", "[", "1", "]", "=", "Dy", "/", "DH", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.line_segment_intersection_v1": [[119, 159], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "rotate_iou.trangle_area", "rotate_iou.trangle_area", "rotate_iou.trangle_area"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.trangle_area", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.trangle_area", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection_v1", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "a", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "b", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "c", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "d", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "a", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "a", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "b", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "b", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "c", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "c", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "d", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "d", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "area_abc", "=", "trangle_area", "(", "a", ",", "b", ",", "c", ")", "\n", "area_abd", "=", "trangle_area", "(", "a", ",", "b", ",", "d", ")", "\n", "\n", "if", "area_abc", "*", "area_abd", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "area_cda", "=", "trangle_area", "(", "c", ",", "d", ",", "a", ")", "\n", "area_cdb", "=", "area_cda", "+", "area_abc", "-", "area_abd", "\n", "\n", "if", "area_cda", "*", "area_cdb", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "", "t", "=", "area_cda", "/", "(", "area_abd", "-", "area_abc", ")", "\n", "\n", "dx", "=", "t", "*", "(", "b", "[", "0", "]", "-", "a", "[", "0", "]", ")", "\n", "dy", "=", "t", "*", "(", "b", "[", "1", "]", "-", "a", "[", "1", "]", ")", "\n", "temp_pts", "[", "0", "]", "=", "a", "[", "0", "]", "+", "dx", "\n", "temp_pts", "[", "1", "]", "=", "a", "[", "1", "]", "+", "dy", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.point_in_quadrilateral": [[161, 178], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32, float32, float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "point_in_quadrilateral", "(", "pt_x", ",", "pt_y", ",", "corners", ")", ":", "\n", "    ", "ab0", "=", "corners", "[", "2", "]", "-", "corners", "[", "0", "]", "\n", "ab1", "=", "corners", "[", "3", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ad0", "=", "corners", "[", "6", "]", "-", "corners", "[", "0", "]", "\n", "ad1", "=", "corners", "[", "7", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ap0", "=", "pt_x", "-", "corners", "[", "0", "]", "\n", "ap1", "=", "pt_y", "-", "corners", "[", "1", "]", "\n", "\n", "abab", "=", "ab0", "*", "ab0", "+", "ab1", "*", "ab1", "\n", "abap", "=", "ab0", "*", "ap0", "+", "ab1", "*", "ap1", "\n", "adad", "=", "ad0", "*", "ad0", "+", "ad1", "*", "ad1", "\n", "adap", "=", "ad0", "*", "ap0", "+", "ad1", "*", "ap1", "\n", "\n", "return", "abab", ">=", "abap", "and", "abap", ">=", "0", "and", "adad", ">=", "adap", "and", "adap", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.quadrilateral_intersection": [[180, 202], ["numba.cuda.jit", "range", "numba.cuda.local.array", "range", "rotate_iou.point_in_quadrilateral", "rotate_iou.point_in_quadrilateral", "range", "rotate_iou.line_segment_intersection"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.point_in_quadrilateral", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.point_in_quadrilateral", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.line_segment_intersection"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "quadrilateral_intersection", "(", "pts1", ",", "pts2", ",", "int_pts", ")", ":", "\n", "    ", "num_of_inter", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "point_in_quadrilateral", "(", "pts1", "[", "2", "*", "i", "]", ",", "pts1", "[", "2", "*", "i", "+", "1", "]", ",", "pts2", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "if", "point_in_quadrilateral", "(", "pts2", "[", "2", "*", "i", "]", ",", "pts2", "[", "2", "*", "i", "+", "1", "]", ",", "pts1", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts2", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts2", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "", "temp_pts", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "has_pts", "=", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", "\n", "if", "has_pts", ":", "\n", "                ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "temp_pts", "[", "0", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "temp_pts", "[", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "\n", "", "", "", "return", "num_of_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.rbbox_to_corners": [[204, 229], ["numba.cuda.jit", "math.cos", "math.sin", "numba.cuda.local.array", "numba.cuda.local.array", "range"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "rbbox_to_corners", "(", "corners", ",", "rbbox", ")", ":", "\n", "# generate clockwise corners and rotate it clockwise", "\n", "    ", "angle", "=", "rbbox", "[", "4", "]", "\n", "a_cos", "=", "math", ".", "cos", "(", "angle", ")", "\n", "a_sin", "=", "math", ".", "sin", "(", "angle", ")", "\n", "center_x", "=", "rbbox", "[", "0", "]", "\n", "center_y", "=", "rbbox", "[", "1", "]", "\n", "x_d", "=", "rbbox", "[", "2", "]", "\n", "y_d", "=", "rbbox", "[", "3", "]", "\n", "corners_x", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_y", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_x", "[", "0", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "1", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "2", "]", "=", "x_d", "/", "2", "\n", "corners_x", "[", "3", "]", "=", "x_d", "/", "2", "\n", "corners_y", "[", "0", "]", "=", "-", "y_d", "/", "2", "\n", "corners_y", "[", "1", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "2", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "3", "]", "=", "-", "y_d", "/", "2", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "corners", "[", "2", "*", "\n", "i", "]", "=", "a_cos", "*", "corners_x", "[", "i", "]", "+", "a_sin", "*", "corners_y", "[", "i", "]", "+", "center_x", "\n", "corners", "[", "2", "*", "i", "\n", "+", "1", "]", "=", "-", "a_sin", "*", "corners_x", "[", "i", "]", "+", "a_cos", "*", "corners_y", "[", "i", "]", "+", "center_y", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.inter": [[231, 246], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "rotate_iou.rbbox_to_corners", "rotate_iou.rbbox_to_corners", "rotate_iou.quadrilateral_intersection", "rotate_iou.sort_vertex_in_convex_polygon", "rotate_iou.area"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.rbbox_to_corners", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.rbbox_to_corners", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.quadrilateral_intersection", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.sort_vertex_in_convex_polygon", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.area"], ["", "", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "inter", "(", "rbbox1", ",", "rbbox2", ")", ":", "\n", "    ", "corners1", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners2", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "intersection_corners", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "rbbox_to_corners", "(", "corners1", ",", "rbbox1", ")", "\n", "rbbox_to_corners", "(", "corners2", ",", "rbbox2", ")", "\n", "\n", "num_intersection", "=", "quadrilateral_intersection", "(", "corners1", ",", "corners2", ",", "\n", "intersection_corners", ")", "\n", "sort_vertex_in_convex_polygon", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "# print(intersection_corners.reshape([-1, 2])[:num_intersection])", "\n", "\n", "return", "area", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.devRotateIoUEval": [[248, 261], ["numba.cuda.jit", "rotate_iou.inter"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.inter"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "devRotateIoUEval", "(", "rbox1", ",", "rbox2", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "area1", "=", "rbox1", "[", "2", "]", "*", "rbox1", "[", "3", "]", "\n", "area2", "=", "rbox2", "[", "2", "]", "*", "rbox2", "[", "3", "]", "\n", "area_inter", "=", "inter", "(", "rbox1", ",", "rbox2", ")", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "        ", "return", "area_inter", "/", "(", "area1", "+", "area2", "-", "area_inter", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "        ", "return", "area_inter", "/", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "        ", "return", "area_inter", "/", "area2", "\n", "", "else", ":", "\n", "        ", "return", "area_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.rotate_iou_kernel_eval": [[262, 293], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "rotate_iou.devRotateIoUEval"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.devRotateIoUEval"], ["", "", "@", "cuda", ".", "jit", "(", "'(int64, int64, float32[:], float32[:], float32[:], int32)'", ",", "fastmath", "=", "False", ")", "\n", "def", "rotate_iou_kernel_eval", "(", "N", ",", "K", ",", "dev_boxes", ",", "dev_query_boxes", ",", "dev_iou", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "N", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "K", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "block_qboxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "dev_query_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_qboxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "0", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "1", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "2", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "3", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "4", "]", "\n", "", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "tx", "<", "row_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "col_size", ")", ":", "\n", "            ", "offset", "=", "row_start", "*", "threadsPerBlock", "*", "K", "+", "col_start", "*", "threadsPerBlock", "+", "tx", "*", "K", "+", "i", "\n", "dev_iou", "[", "offset", "]", "=", "devRotateIoUEval", "(", "block_qboxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "5", "]", ",", "\n", "block_boxes", "[", "tx", "*", "5", ":", "tx", "*", "5", "+", "5", "]", ",", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.rotate_iou_gpu_eval": [[295, 331], ["boxes.astype.astype", "query_boxes.astype.astype", "numpy.zeros", "numba.cuda.select_device", "numba.cuda.stream", "np.zeros.astype", "rotate_iou.div_up", "rotate_iou.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes.astype.reshape", "query_boxes.astype.reshape", "np.zeros.reshape", "np.zeros.reshape"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.div_up", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti_object_eval_python.rotate_iou.div_up"], ["", "", "", "def", "rotate_iou_gpu_eval", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"rotated box iou running in gpu. 500x faster than cpu version\n    (take 5ms in one example with numba.cuda code).\n    convert from [this project](\n        https://github.com/hongzhenwang/RRPN-revise/tree/master/btcdet/rotation).\n    \n    Args:\n        boxes (float tensor: [N, 5]): rbboxes. format: centers, dims, \n            angles(clockwise when positive)\n        query_boxes (float tensor: [K, 5]): [description]\n        device_id (int, optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "box_dtype", "=", "boxes", ".", "dtype", "\n", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "query_boxes", "=", "query_boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "N", "==", "0", "or", "K", "==", "0", ":", "\n", "        ", "return", "iou", "\n", "", "threadsPerBlock", "=", "8", "*", "8", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "N", ",", "threadsPerBlock", ")", ",", "div_up", "(", "K", ",", "threadsPerBlock", ")", ")", "\n", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "query_boxes_dev", "=", "cuda", ".", "to_device", "(", "query_boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "iou_dev", "=", "cuda", ".", "to_device", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "rotate_iou_kernel_eval", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "N", ",", "K", ",", "boxes_dev", ",", "query_boxes_dev", ",", "iou_dev", ",", "criterion", ")", "\n", "iou_dev", ".", "copy_to_host", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", "=", "stream", ")", "\n", "", "return", "iou", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.load_from_bin": [[13, 18], ["numpy.fromfile().reshape", "numpy.fromfile"], "function", ["None"], ["", "def", "load_from_bin", "(", "root_split_path", ",", "idx", ")", ":", "\n", "    ", "bin_path", "=", "root_split_path", "/", "'velodyne'", "/", "(", "'%s.bin'", "%", "idx", ")", "\n", "obj", "=", "np", ".", "fromfile", "(", "bin_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# ignore reflectivity info", "\n", "return", "obj", "[", ":", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.normalize_depth": [[20, 26], ["None"], "function", ["None"], ["", "def", "normalize_depth", "(", "val", ",", "min_v", ",", "max_v", ")", ":", "\n", "    ", "\"\"\"\n    print 'nomalized depth value'\n    nomalize values to 0-255 & close distance value has high value. (similar to stereo vision's disparity map)\n    \"\"\"", "\n", "return", "(", "(", "(", "max_v", "-", "val", ")", "/", "(", "max_v", "-", "min_v", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.normalize_val": [[28, 34], ["None"], "function", ["None"], ["", "def", "normalize_val", "(", "val", ",", "min_v", ",", "max_v", ")", ":", "\n", "    ", "\"\"\"\n    print 'nomalized depth value'\n    nomalize values to 0-255 & close distance value has low value.\n    \"\"\"", "\n", "return", "(", "(", "(", "val", "-", "min_v", ")", "/", "(", "max_v", "-", "min_v", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.in_h_range_points": [[36, 40], ["numpy.logical_and", "numpy.arctan2", "numpy.arctan2"], "function", ["None"], ["", "def", "in_h_range_points", "(", "m", ",", "n", ",", "fov", ")", ":", "\n", "    ", "\"\"\" extract horizontal in-range points \"\"\"", "\n", "return", "np", ".", "logical_and", "(", "np", ".", "arctan2", "(", "n", ",", "m", ")", ">", "(", "-", "fov", "[", "1", "]", "*", "np", ".", "pi", "/", "180", ")", ",", "np", ".", "arctan2", "(", "n", ",", "m", ")", "<", "(", "-", "fov", "[", "0", "]", "*", "np", ".", "pi", "/", "180", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.in_v_range_points": [[42, 46], ["numpy.logical_and", "numpy.arctan2", "numpy.arctan2"], "function", ["None"], ["", "def", "in_v_range_points", "(", "m", ",", "n", ",", "fov", ")", ":", "\n", "    ", "\"\"\" extract vertical in-range points \"\"\"", "\n", "return", "np", ".", "logical_and", "(", "np", ".", "arctan2", "(", "n", ",", "m", ")", "<", "(", "fov", "[", "1", "]", "*", "np", ".", "pi", "/", "180", ")", ",", "np", ".", "arctan2", "(", "n", ",", "m", ")", ">", "(", "fov", "[", "0", "]", "*", "np", ".", "pi", "/", "180", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.fov_setting": [[48, 62], ["lidar2sphere.in_h_range_points", "lidar2sphere.in_v_range_points", "lidar2sphere.in_v_range_points", "lidar2sphere.in_h_range_points", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.in_h_range_points", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.in_v_range_points", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.in_v_range_points", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.in_h_range_points"], ["", "def", "fov_setting", "(", "points", ",", "x", ",", "y", ",", "z", ",", "dist", ",", "h_fov", ",", "v_fov", ")", ":", "\n", "    ", "\"\"\" filter points based on h,v FOV  \"\"\"", "\n", "\n", "if", "h_fov", "[", "1", "]", "==", "180", "and", "h_fov", "[", "0", "]", "==", "-", "180", "and", "v_fov", "[", "1", "]", "==", "2.0", "and", "v_fov", "[", "0", "]", "==", "-", "24.9", ":", "\n", "        ", "return", "points", "\n", "\n", "", "if", "h_fov", "[", "1", "]", "==", "180", "and", "h_fov", "[", "0", "]", "==", "-", "180", ":", "\n", "        ", "return", "points", "[", "in_v_range_points", "(", "dist", ",", "z", ",", "v_fov", ")", "]", "\n", "", "elif", "v_fov", "[", "1", "]", "==", "2.0", "and", "v_fov", "[", "0", "]", "==", "-", "24.9", ":", "\n", "        ", "return", "points", "[", "in_h_range_points", "(", "x", ",", "y", ",", "h_fov", ")", "]", "\n", "", "else", ":", "\n", "        ", "h_points", "=", "in_h_range_points", "(", "x", ",", "y", ",", "h_fov", ")", "\n", "v_points", "=", "in_v_range_points", "(", "dist", ",", "z", ",", "v_fov", ")", "\n", "return", "points", "[", "np", ".", "logical_and", "(", "h_points", ",", "v_points", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.velo_points_2_pano": [[64, 119], ["print", "numpy.sqrt", "lidar2sphere.fov_setting", "numpy.sqrt", "numpy.sqrt", "numpy.trunc().astype", "numpy.trunc().astype", "int", "int", "numpy.zeros", "print", "print", "print", "lidar2sphere.dup", "numpy.ceil", "numpy.ceil", "lidar2sphere.normalize_depth", "lidar2sphere.normalize_val", "max", "min", "max", "min", "max", "min", "numpy.arctan2", "numpy.trunc", "numpy.trunc", "max", "min", "abs", "abs", "numpy.arctan2", "numpy.arctan2"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.fov_setting", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.dup", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.normalize_depth", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.normalize_val"], ["", "", "def", "velo_points_2_pano", "(", "points", ",", "v_res", ",", "h_res", ",", "v_fov", ",", "h_fov", ",", "depth", "=", "False", ")", ":", "\n", "# Projecting to 2D", "\n", "    ", "x", "=", "points", "[", ":", ",", "0", "]", "\n", "y", "=", "points", "[", ":", ",", "1", "]", "\n", "z", "=", "points", "[", ":", ",", "2", "]", "\n", "print", "(", "\"z\"", ",", "z", ".", "shape", ")", "\n", "xydist", "=", "np", ".", "sqrt", "(", "(", "abs", "(", "x", ")", ")", "**", "2", "+", "y", "**", "2", ")", "\n", "\n", "points", "=", "fov_setting", "(", "points", ",", "x", ",", "y", ",", "z", ",", "xydist", ",", "h_fov", ",", "v_fov", ")", "\n", "x", "=", "points", "[", ":", ",", "0", "]", "\n", "y", "=", "points", "[", ":", ",", "1", "]", "\n", "z", "=", "points", "[", ":", ",", "2", "]", "\n", "\n", "dist", "=", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", "+", "z", "**", "2", ")", "\n", "xydist", "=", "np", ".", "sqrt", "(", "(", "abs", "(", "x", ")", ")", "**", "2", "+", "y", "**", "2", ")", "\n", "\n", "y_angel", "=", "np", ".", "arctan2", "(", "z", ",", "xydist", ")", "*", "180", "/", "np", ".", "pi", "\n", "\n", "# project point cloud to 2D point map", "\n", "# x_img = np.arctan2(-y, x) / (h_res * (np.pi / 180))", "\n", "# x_offset = (h_fov[0]) / h_res", "\n", "# x_img = np.trunc(x_img - x_offset).astype(np.int32)", "\n", "#", "\n", "# y_img = -(np.arctan2(z, xydist) / (v_res * (np.pi / 180)))", "\n", "# y_offset = v_fov[1] / v_res", "\n", "# y_img = np.trunc(y_img + y_offset).astype(np.int32)", "\n", "\n", "x_img", "=", "np", ".", "trunc", "(", "(", "np", ".", "arctan2", "(", "-", "y", ",", "x", ")", "*", "180", "/", "np", ".", "pi", "-", "h_fov", "[", "0", "]", ")", "/", "h_res", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "y_img", "=", "np", ".", "trunc", "(", "(", "v_fov", "[", "1", "]", "-", "np", ".", "arctan2", "(", "z", ",", "xydist", ")", "*", "180", "/", "np", ".", "pi", ")", "/", "v_res", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "\n", "\"\"\" filter points based on h,v FOV  \"\"\"", "\n", "\n", "\n", "x_size", "=", "int", "(", "np", ".", "ceil", "(", "(", "h_fov", "[", "1", "]", "-", "h_fov", "[", "0", "]", ")", "/", "h_res", ")", ")", "\n", "y_size", "=", "int", "(", "np", ".", "ceil", "(", "(", "v_fov", "[", "1", "]", "-", "v_fov", "[", "0", "]", ")", "/", "v_res", ")", ")", "\n", "\n", "# shift negative points to positive points (shift minimum value to 0)", "\n", "\n", "\n", "\n", "if", "depth", "==", "True", ":", "\n", "# nomalize distance value & convert to depth map", "\n", "        ", "dist", "=", "normalize_depth", "(", "dist", ",", "min_v", "=", "0", ",", "max_v", "=", "120", ")", "\n", "", "else", ":", "\n", "        ", "dist", "=", "normalize_val", "(", "dist", ",", "min_v", "=", "0", ",", "max_v", "=", "120", ")", "\n", "\n", "# array to img", "\n", "", "img", "=", "np", ".", "zeros", "(", "[", "y_size", ",", "x_size", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "print", "(", "\"x_img\"", ",", "max", "(", "x_img", ")", ",", "min", "(", "x_img", ")", ")", "\n", "print", "(", "\"y_img\"", ",", "max", "(", "y_img", ")", ",", "min", "(", "y_img", ")", ")", "\n", "print", "(", "\"y_angel\"", ",", "max", "(", "y_angel", ")", ",", "min", "(", "y_angel", ")", ",", "max", "(", "y_angel", ")", "-", "min", "(", "y_angel", ")", ")", "\n", "img", "[", "y_img", ",", "x_img", "]", "=", "dist", "\n", "dup", "(", "y_img", ",", "x_img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.velo_points_2_spherical_voxel": [[120, 148], ["print", "lidar2sphere.get_fov", "numpy.sqrt", "lidar2sphere.fov_setting", "numpy.sqrt", "numpy.sqrt", "numpy.trunc().astype", "numpy.trunc().astype", "numpy.trunc().astype", "int", "int", "int", "print", "lidar2sphere.dup3d", "numpy.ceil", "numpy.ceil", "numpy.trunc", "numpy.trunc", "numpy.trunc", "abs", "abs", "numpy.arctan2", "numpy.arctan2"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_fov", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.fov_setting", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.dup3d"], ["", "def", "velo_points_2_spherical_voxel", "(", "points", ",", "v_res", ",", "h_res", ",", "dist_res", ",", "v_fov", ",", "h_fov", ",", "depth", "=", "False", ",", "dist_fov", "=", "80", ")", ":", "\n", "# Projecting to 2D", "\n", "    ", "x", "=", "points", "[", ":", ",", "0", "]", "\n", "y", "=", "points", "[", ":", ",", "1", "]", "\n", "z", "=", "points", "[", ":", ",", "2", "]", "\n", "print", "(", "\"z\"", ",", "z", ".", "shape", ")", "\n", "get_fov", "(", "x", ",", "y", ",", "z", ")", "\n", "xydist", "=", "np", ".", "sqrt", "(", "(", "abs", "(", "x", ")", ")", "**", "2", "+", "y", "**", "2", ")", "\n", "\n", "\"\"\" filter points based on h,v FOV  \"\"\"", "\n", "points", "=", "fov_setting", "(", "points", ",", "x", ",", "y", ",", "z", ",", "xydist", ",", "h_fov", ",", "v_fov", ")", "\n", "x", "=", "points", "[", ":", ",", "0", "]", "\n", "y", "=", "points", "[", ":", ",", "1", "]", "\n", "z", "=", "points", "[", ":", ",", "2", "]", "\n", "\n", "dist", "=", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", "+", "z", "**", "2", ")", "\n", "xydist", "=", "np", ".", "sqrt", "(", "(", "abs", "(", "x", ")", ")", "**", "2", "+", "y", "**", "2", ")", "\n", "\n", "# project point cloud to 2D point map", "\n", "y_axis", "=", "np", ".", "trunc", "(", "(", "np", ".", "arctan2", "(", "-", "y", ",", "x", ")", "*", "180", "/", "np", ".", "pi", "-", "h_fov", "[", "0", "]", ")", "/", "h_res", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "z_axis", "=", "np", ".", "trunc", "(", "(", "np", ".", "arctan2", "(", "z", ",", "xydist", ")", "*", "180", "/", "np", ".", "pi", "-", "v_fov", "[", "0", "]", ")", "/", "v_res", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x_axis", "=", "np", ".", "trunc", "(", "dist", "/", "dist_res", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "y_size", "=", "int", "(", "np", ".", "ceil", "(", "(", "h_fov", "[", "1", "]", "-", "h_fov", "[", "0", "]", ")", "/", "h_res", ")", ")", "\n", "z_size", "=", "int", "(", "np", ".", "ceil", "(", "(", "v_fov", "[", "1", "]", "-", "v_fov", "[", "0", "]", ")", "/", "v_res", ")", ")", "\n", "x_size", "=", "int", "(", "dist_fov", "/", "dist_res", ")", "\n", "print", "(", "\"x_size\"", ",", "x_size", ",", "\" y_size\"", ",", "y_size", ",", "\" z_size\"", ",", "z_size", ")", "\n", "dup3d", "(", "y_axis", ",", "x_axis", ",", "z_axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.dup3d": [[151, 170], ["numpy.unique", "print", "numpy.unique", "print", "numpy.max", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "dup3d", "(", "y_axis", ",", "x_axis", ",", "z_axis", ")", ":", "\n", "    ", "mx", ",", "my", ",", "mz", "=", "np", ".", "max", "(", "x_axis", ")", "+", "1", ",", "np", ".", "max", "(", "y_axis", ")", "+", "1", ",", "np", ".", "max", "(", "z_axis", ")", "+", "1", "\n", "hash", "=", "x_axis", "*", "my", "*", "mz", "+", "z_axis", "*", "my", "+", "y_axis", "\n", "u", ",", "c", "=", "np", ".", "unique", "(", "hash", ",", "return_counts", "=", "True", ")", "\n", "dupxzy", "=", "u", "[", "c", ">", "1", "]", "\n", "dupx", "=", "dupxzy", "//", "(", "my", "*", "mz", ")", "\n", "dupy", "=", "dupxzy", "%", "my", "\n", "dupz", "=", "(", "dupxzy", "-", "dupy", "-", "dupx", "*", "my", "*", "mz", ")", "/", "my", "\n", "# print(\"dupx\", dupx, dupx.shape)", "\n", "# print(\"dupy\", dupy, dupy.shape)", "\n", "# print(\"dupz\", dupz, dupz.shape)", "\n", "print", "(", "\"3d dup shape\"", ",", "dupz", ".", "shape", ")", "\n", "\n", "hash", "=", "x_axis", "*", "my", "+", "y_axis", "\n", "u", ",", "c", "=", "np", ".", "unique", "(", "hash", ",", "return_counts", "=", "True", ")", "\n", "dupxy", "=", "u", "[", "c", ">", "1", "]", "\n", "dupx", "=", "dupxy", "//", "my", "\n", "dupy", "=", "dupxy", "%", "my", "\n", "print", "(", "\"2d dup shape\"", ",", "dupy", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.dup": [[172, 190], ["numpy.unique", "print", "print", "print", "print", "numpy.unique", "numpy.unique", "print", "print"], "function", ["None"], ["", "def", "dup", "(", "y_img", ",", "x_img", ")", ":", "\n", "    ", "hash", "=", "x_img", "*", "100", "+", "y_img", "\n", "u", ",", "c", "=", "np", ".", "unique", "(", "hash", ",", "return_counts", "=", "True", ")", "\n", "dupyx", "=", "u", "[", "c", ">", "1", "]", "\n", "dupx", "=", "dupyx", "//", "100", "\n", "dupy", "=", "dupyx", "%", "100", "\n", "uniquex", "=", "u", "//", "100", "\n", "uniquey", "=", "u", "%", "100", "\n", "print", "(", "\"dupx\"", ",", "dupx", ",", "dupx", ".", "shape", ")", "\n", "print", "(", "\"dupy\"", ",", "dupy", ")", "\n", "\n", "print", "(", "\"uniquex\"", ",", "uniquex", ",", "uniquex", ".", "shape", ")", "\n", "print", "(", "\"uniquey\"", ",", "uniquey", ")", "\n", "uuniquex", ",", "cuniquex", "=", "np", ".", "unique", "(", "uniquex", ",", "return_counts", "=", "True", ")", "\n", "uuniquey", ",", "cuniquey", "=", "np", ".", "unique", "(", "uniquey", ",", "return_counts", "=", "True", ")", "\n", "# print(\"uuniquex\", uuniquex)", "\n", "print", "(", "\"uuniquey\"", ",", "uuniquey", ")", "\n", "print", "(", "\"cuniquey\"", ",", "cuniquey", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_fov": [[191, 196], ["print", "print", "print", "numpy.arcsin", "min", "max", "min", "max", "min", "max", "numpy.sqrt"], "function", ["None"], ["", "def", "get_fov", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "print", "(", "\"x:\"", ",", "min", "(", "x", ")", ",", "max", "(", "x", ")", ")", "\n", "print", "(", "\"y:\"", ",", "min", "(", "y", ")", ",", "max", "(", "y", ")", ")", "\n", "print", "(", "\"z:\"", ",", "min", "(", "z", ")", ",", "max", "(", "z", ")", ")", "\n", "angle", "=", "np", ".", "arcsin", "(", "y", "/", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", ")", ")", "\n", "# print(\"angle:\", min(angle), max(angle))", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.filter_fov": [[199, 204], ["lidar2sphere.get_calib", "get_calib.lidar_to_rect", "lidar2sphere.get_fov_flag"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_calib", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_fov_flag"], ["", "def", "filter_fov", "(", "points", ",", "img_shape", ",", "root_split_path", ",", "idx", ")", ":", "\n", "    ", "calib", "=", "get_calib", "(", "root_split_path", ",", "idx", ")", "\n", "pts_rect", "=", "calib", ".", "lidar_to_rect", "(", "points", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "fov_flag", "=", "get_fov_flag", "(", "pts_rect", ",", "img_shape", ",", "calib", ")", "\n", "return", "points", "[", "fov_flag", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_fov_flag": [[206, 213], ["calib.rect_to_img", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_img"], ["", "def", "get_fov_flag", "(", "pts_rect", ",", "img_shape", ",", "calib", ")", ":", "\n", "    ", "pts_img", ",", "pts_rect_depth", "=", "calib", ".", "rect_to_img", "(", "pts_rect", ")", "\n", "val_flag_1", "=", "np", ".", "logical_and", "(", "pts_img", "[", ":", ",", "0", "]", ">=", "0", ",", "pts_img", "[", ":", ",", "0", "]", "<", "img_shape", "[", "1", "]", ")", "\n", "val_flag_2", "=", "np", ".", "logical_and", "(", "pts_img", "[", ":", ",", "1", "]", ">=", "0", ",", "pts_img", "[", ":", ",", "1", "]", "<", "img_shape", "[", "0", "]", ")", "\n", "val_flag_merge", "=", "np", ".", "logical_and", "(", "val_flag_1", ",", "val_flag_2", ")", "\n", "pts_valid_flag", "=", "np", ".", "logical_and", "(", "val_flag_merge", ",", "pts_rect_depth", ">=", "0", ")", "\n", "return", "pts_valid_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_calib": [[215, 219], ["calib_file.exists", "utils.calibration_kitti.Calibration"], "function", ["None"], ["", "def", "get_calib", "(", "root_split_path", ",", "idx", ")", ":", "\n", "    ", "calib_file", "=", "root_split_path", "/", "'calib'", "/", "(", "'%s.txt'", "%", "idx", ")", "\n", "assert", "calib_file", ".", "exists", "(", ")", "\n", "return", "calibration_kitti", ".", "Calibration", "(", "calib_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_image_n_shape": [[221, 226], ["img_file.exists", "skimage.io.imread", "numpy.array"], "function", ["None"], ["", "def", "get_image_n_shape", "(", "root_split_path", ",", "idx", ")", ":", "\n", "    ", "img_file", "=", "root_split_path", "/", "'image_2'", "/", "(", "'%s.png'", "%", "idx", ")", "\n", "assert", "img_file", ".", "exists", "(", ")", "\n", "img", "=", "io", ".", "imread", "(", "img_file", ")", "\n", "return", "img", ",", "np", ".", "array", "(", "img", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.velo_points_2_spherical_sparse": [[228, 267], ["print", "lidar2sphere.get_fov", "numpy.sqrt", "lidar2sphere.fov_setting", "numpy.sqrt", "numpy.sqrt", "numpy.stack", "print", "print", "print", "print", "voxel_generator.generate", "isinstance", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.arctan2", "numpy.arctan2", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_fov", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.fov_setting"], ["", "def", "velo_points_2_spherical_sparse", "(", "points", ",", "voxel_generator", ",", "v_res", ",", "h_res", ",", "dist_res", ",", "v_fov", ",", "h_fov", ",", "dist_fov", ",", "depth", "=", "False", ")", ":", "\n", "# Projecting to 2D", "\n", "    ", "x", "=", "points", "[", ":", ",", "0", "]", "\n", "y", "=", "points", "[", ":", ",", "1", "]", "\n", "z", "=", "points", "[", ":", ",", "2", "]", "\n", "print", "(", "\"z\"", ",", "z", ".", "shape", ")", "\n", "get_fov", "(", "x", ",", "y", ",", "z", ")", "\n", "xydist", "=", "np", ".", "sqrt", "(", "(", "abs", "(", "x", ")", ")", "**", "2", "+", "y", "**", "2", ")", "\n", "\n", "\"\"\" filter points based on h,v FOV  \"\"\"", "\n", "points", "=", "fov_setting", "(", "points", ",", "x", ",", "y", ",", "z", ",", "xydist", ",", "h_fov", ",", "v_fov", ")", "\n", "x", "=", "points", "[", ":", ",", "0", "]", "\n", "y", "=", "points", "[", ":", ",", "1", "]", "\n", "z", "=", "points", "[", ":", ",", "2", "]", "\n", "\n", "dist", "=", "np", ".", "sqrt", "(", "x", "**", "2", "+", "y", "**", "2", "+", "z", "**", "2", ")", "\n", "xydist", "=", "np", ".", "sqrt", "(", "(", "abs", "(", "x", ")", ")", "**", "2", "+", "y", "**", "2", ")", "\n", "\n", "# y_axis = np.trunc((np.arctan2(-y, x) * 180 / np.pi - h_fov[0]) / h_res).astype(np.int32)", "\n", "# z_axis = np.trunc((np.arctan2(z, xydist) * 180 / np.pi - v_fov[0]) / v_res).astype(np.int32)", "\n", "# x_axis = np.trunc(dist / dist_res).astype(np.int32)", "\n", "\n", "sphere_x", "=", "dist", "\n", "sphere_y", "=", "np", ".", "arctan2", "(", "-", "y", ",", "x", ")", "*", "180", "/", "np", ".", "pi", "\n", "sphere_z", "=", "np", ".", "arctan2", "(", "z", ",", "xydist", ")", "*", "180", "/", "np", ".", "pi", "\n", "sphere_coords_points", "=", "np", ".", "stack", "(", "[", "sphere_x", ",", "sphere_y", ",", "sphere_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "print", "(", "\"sphere_x\"", ",", "np", ".", "min", "(", "sphere_x", ")", ",", "np", ".", "max", "(", "sphere_x", ")", ")", "\n", "print", "(", "\"sphere_y\"", ",", "np", ".", "min", "(", "sphere_y", ")", ",", "np", ".", "max", "(", "sphere_y", ")", ")", "\n", "print", "(", "\"sphere_z\"", ",", "np", ".", "min", "(", "sphere_z", ")", ",", "np", ".", "max", "(", "sphere_z", ")", ")", "\n", "print", "(", "\"sphere_coords_points\"", ",", "sphere_coords_points", ".", "shape", ")", "\n", "\n", "voxel_output", "=", "voxel_generator", ".", "generate", "(", "sphere_coords_points", ")", "\n", "if", "isinstance", "(", "voxel_output", ",", "dict", ")", ":", "\n", "        ", "voxel_features", ",", "voxel_coords", ",", "num_points", "=", "voxel_output", "[", "'voxels'", "]", ",", "voxel_output", "[", "'coordinates'", "]", ",", "voxel_output", "[", "'num_points_per_voxel'", "]", "\n", "", "else", ":", "\n", "        ", "voxel_features", ",", "voxel_coords", ",", "num_points", "=", "voxel_output", "\n", "\n", "", "return", "voxel_features", ",", "voxel_coords", ",", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.vis_pano": [[269, 284], ["lidar2sphere.load_from_bin", "lidar2sphere.get_image_n_shape", "print", "lidar2sphere.velo_points_2_pano", "matplotlib.subplots", "ax1.set_title", "ax1.imshow", "ax2.imshow", "matplotlib.show", "print", "lidar2sphere.filter_fov"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.load_from_bin", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_image_n_shape", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.velo_points_2_pano", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.filter_fov"], ["", "def", "vis_pano", "(", "root_split_path", ",", "idx", ",", "v_res", "=", "0.4203125", ",", "h_res", "=", "0.0875", ",", "dist_res", "=", "0.2", ",", "v_fov", "=", "(", "-", "24.9", ",", "4", ")", ",", "h_fov", "=", "(", "-", "60", ",", "60", ")", ",", "dist_fov", "=", "(", "0", ",", "80", ")", ",", "FOV", "=", "True", ")", ":", "\n", "    ", "velo_points", "=", "load_from_bin", "(", "root_split_path", ",", "idx", ")", "\n", "img", ",", "img_shape", "=", "get_image_n_shape", "(", "root_split_path", ",", "idx", ")", "\n", "if", "FOV", ":", "\n", "        ", "velo_points", "=", "filter_fov", "(", "velo_points", ",", "img_shape", ",", "root_split_path", ",", "idx", ")", "\n", "", "print", "(", "velo_points", ".", "shape", ")", "\n", "pano_img", "=", "velo_points_2_pano", "(", "velo_points", ",", "v_res", "=", "v_res", ",", "h_res", "=", "h_res", ",", "v_fov", "=", "v_fov", ",", "h_fov", "=", "h_fov", ",", "depth", "=", "False", ")", "\n", "# velo_points_2_spherical_voxel(velo_points, v_res=v_res, h_res=h_res, dist_res=dist_res, v_fov=v_fov, h_fov=h_fov, depth=False)", "\n", "# display result image", "\n", "fig", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "2", ",", "figsize", "=", "(", "15", ",", "5", ")", ")", "\n", "ax1", ".", "set_title", "(", "\"Result of Vertical FOV ({} , {}) & Horizontal FOV ({} , {})\"", ".", "format", "(", "v_fov", "[", "0", "]", ",", "v_fov", "[", "1", "]", ",", "h_fov", "[", "0", "]", ",", "h_fov", "[", "1", "]", ")", ")", "\n", "ax1", ".", "imshow", "(", "pano_img", ")", "\n", "ax2", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "show", "(", ")", "\n", "print", "(", "pano_img", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.preprocess_sparse": [[286, 294], ["lidar2sphere.load_from_bin", "lidar2sphere.get_image_n_shape", "print", "lidar2sphere.velo_points_2_spherical_sparse", "print", "lidar2sphere.filter_fov", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.load_from_bin", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.get_image_n_shape", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.velo_points_2_spherical_sparse", "home.repos.pwc.inspect_result.xharlie_btcdet.spherical_coords.lidar2sphere.filter_fov"], ["", "def", "preprocess_sparse", "(", "root_split_path", ",", "idx", ",", "voxel_generator", ",", "v_res", "=", "0.4203125", ",", "h_res", "=", "0.0875", ",", "dist_res", "=", "0.2", ",", "v_fov", "=", "(", "-", "24.9", ",", "4", ")", ",", "h_fov", "=", "(", "-", "60", ",", "60", ")", ",", "dist_fov", "=", "(", "0", ",", "80", ")", ",", "FOV", "=", "True", ")", ":", "\n", "    ", "velo_points", "=", "load_from_bin", "(", "root_split_path", ",", "idx", ")", "\n", "img", ",", "img_shape", "=", "get_image_n_shape", "(", "root_split_path", ",", "idx", ")", "\n", "if", "FOV", ":", "\n", "        ", "velo_points", "=", "filter_fov", "(", "velo_points", ",", "img_shape", ",", "root_split_path", ",", "idx", ")", "\n", "", "print", "(", "velo_points", ".", "shape", ")", "\n", "voxel_features", ",", "voxel_coords", ",", "num_points", "=", "velo_points_2_spherical_sparse", "(", "velo_points", ",", "voxel_generator", ",", "v_res", ",", "h_res", ",", "dist_res", ",", "v_fov", ",", "h_fov", ",", "dist_fov", ",", "depth", "=", "False", ")", "\n", "print", "(", "voxel_coords", ".", "shape", ",", "np", ".", "min", "(", "num_points", ")", ",", "np", ".", "max", "(", "num_points", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.__init__": [[8, 21], ["print", "data_processor.DataProcessor.data_processor_queue.append", "getattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "processor_configs", ",", "point_cloud_range", ",", "training", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "mode", "=", "'train'", "if", "training", "else", "'test'", "\n", "self", ".", "grid_size", "=", "self", ".", "voxel_size", "=", "None", "\n", "self", ".", "occ_config", "=", "kwargs", "[", "\"occ_config\"", "]", "\n", "self", ".", "det_point_cloud_range", "=", "kwargs", "[", "\"det_point_cloud_range\"", "]", "\n", "self", ".", "data_processor_queue", "=", "[", "]", "\n", "self", ".", "occ_dim", "=", "None", "\n", "for", "cur_cfg", "in", "processor_configs", ":", "\n", "            ", "cur_processor", "=", "getattr", "(", "self", ",", "cur_cfg", ".", "NAME", ")", "(", "config", "=", "cur_cfg", ")", "\n", "print", "(", "\"cur_cfg.NAME\"", ",", "cur_cfg", ".", "NAME", ")", "\n", "self", ".", "data_processor_queue", ".", "append", "(", "cur_processor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.mask_points_and_boxes_outside_range": [[23, 40], ["utils.common_utils.mask_points_by_range", "functools.partial", "utils.box_utils.mask_boxes_outside_range_numpy", "data_dict.get", "config.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.mask_points_by_range", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.mask_boxes_outside_range_numpy"], ["", "", "def", "mask_points_and_boxes_outside_range", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "mask_points_and_boxes_outside_range", ",", "config", "=", "config", ")", "\n", "", "mask", "=", "common_utils", ".", "mask_points_by_range", "(", "data_dict", "[", "'points'", "]", ",", "self", ".", "det_point_cloud_range", ")", "\n", "data_dict", "[", "'points'", "]", "=", "data_dict", "[", "'points'", "]", "[", "mask", "]", "\n", "if", "'pre_rot_points'", "in", "data_dict", ":", "\n", "            ", "data_dict", "[", "'pre_rot_points'", "]", "=", "data_dict", "[", "'pre_rot_points'", "]", "[", "mask", "]", "\n", "# print(\"self.point_cloud_range\", self.point_cloud_range)", "\n", "# print(\"points\", np.min(data_dict['points'], axis=0), np.max(data_dict['points'], axis=0))", "\n", "", "if", "data_dict", ".", "get", "(", "'gt_boxes'", ",", "None", ")", "is", "not", "None", "and", "config", ".", "REMOVE_OUTSIDE_BOXES", "and", "self", ".", "training", ":", "\n", "            ", "mask", "=", "box_utils", ".", "mask_boxes_outside_range_numpy", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", ",", "self", ".", "det_point_cloud_range", ",", "min_num_corners", "=", "config", ".", "get", "(", "'min_num_corners'", ",", "1", ")", "\n", ")", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "mask", "]", "\n", "\n", "# print(data_dict['gt_boxes'])", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.shuffle_points": [[41, 52], ["functools.partial", "numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle_points", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "shuffle_points", ",", "config", "=", "config", ")", "\n", "\n", "", "if", "config", ".", "SHUFFLE_ENABLED", "[", "self", ".", "mode", "]", ":", "\n", "            ", "points", "=", "data_dict", "[", "'points'", "]", "\n", "shuffle_idx", "=", "np", ".", "random", ".", "permutation", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "points", "=", "points", "[", "shuffle_idx", "]", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.get_paddings_indicator": [[53, 60], ["numpy.expand_dims", "numpy.arange().reshape", "len", "numpy.arange"], "methods", ["None"], ["", "def", "get_paddings_indicator", "(", "self", ",", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "        ", "actual_num", "=", "np", ".", "expand_dims", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n", "max_num", "=", "np", ".", "arange", "(", "max_num", ",", "dtype", "=", "np", ".", "int", ")", ".", "reshape", "(", "max_num_shape", ")", "\n", "paddings_indicator", "=", "actual_num", ">", "max_num", "\n", "return", "paddings_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.transform_points_to_voxels": [[61, 103], ["VoxelGenerator.generate", "isinstance", "VoxelGenerator", "numpy.round().astype", "numpy.arange", "functools.partial", "utils.common_utils.rotate_points_along_z", "data_dict.pop", "numpy.array", "numpy.array", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "transform_points_to_voxels", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ",", "voxel_generator", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "spconv", ".", "utils", "import", "VoxelGeneratorV2", "as", "VoxelGenerator", "\n", "", "except", ":", "\n", "                ", "from", "spconv", ".", "utils", "import", "VoxelGenerator", "\n", "\n", "", "voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "config", ".", "VOXEL_SIZE", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", ",", "\n", "max_num_points", "=", "config", ".", "MAX_POINTS_PER_VOXEL", ",", "\n", "max_voxels", "=", "config", ".", "MAX_NUMBER_OF_VOXELS", "[", "self", ".", "mode", "]", "\n", ")", "\n", "# print(\"max_voxels\", self.mode, config.MAX_NUMBER_OF_VOXELS[self.mode])", "\n", "grid_size", "=", "(", "self", ".", "point_cloud_range", "[", "3", ":", "6", "]", "-", "self", ".", "point_cloud_range", "[", "0", ":", "3", "]", ")", "/", "np", ".", "array", "(", "config", ".", "VOXEL_SIZE", ")", "\n", "self", ".", "occ_grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "occ_voxel_size", "=", "config", ".", "VOXEL_SIZE", "\n", "self", ".", "det_grid_size", "=", "self", ".", "occ_grid_size", "\n", "self", ".", "det_voxel_size", "=", "self", ".", "occ_voxel_size", "\n", "self", ".", "max_points_per_voxel", "=", "config", ".", "MAX_POINTS_PER_VOXEL", "\n", "self", ".", "voxel_array", "=", "np", ".", "arange", "(", "self", ".", "max_points_per_voxel", ")", "\n", "return", "partial", "(", "self", ".", "transform_points_to_voxels", ",", "voxel_generator", "=", "voxel_generator", ")", "\n", "\n", "", "points", "=", "data_dict", "[", "'pre_rot_points'", "]", "if", "'pre_rot_points'", "in", "data_dict", "else", "data_dict", "[", "'points'", "]", "\n", "voxel_output", "=", "voxel_generator", ".", "generate", "(", "points", ")", "\n", "if", "isinstance", "(", "voxel_output", ",", "dict", ")", ":", "\n", "            ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "[", "'voxels'", "]", ",", "voxel_output", "[", "'coordinates'", "]", ",", "voxel_output", "[", "'num_points_per_voxel'", "]", "\n", "", "else", ":", "\n", "            ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "\n", "# print(\"points\", np.min(voxels.reshape(-1,4), axis=0), np.max(voxels.reshape(-1,4), axis=0))", "\n", "", "if", "not", "data_dict", "[", "'use_lead_xyz'", "]", ":", "\n", "            ", "voxels", "=", "voxels", "[", "...", ",", "3", ":", "]", "# remove xyz in voxels(N, 3)", "\n", "", "if", "'pre_rot_points'", "in", "data_dict", ":", "\n", "            ", "noise_rotation", "=", "data_dict", "[", "'rot_z'", "]", "*", "np", ".", "pi", "/", "180", "\n", "voxels", "=", "common_utils", ".", "rotate_points_along_z", "(", "voxels", ",", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", ")", "\n", "data_dict", ".", "pop", "(", "'pre_rot_points'", ")", "\n", "\n", "", "data_dict", "[", "'voxels'", "]", "=", "voxels", "\n", "data_dict", "[", "'voxel_coords'", "]", "=", "coordinates", "\n", "data_dict", "[", "'voxel_num_points'", "]", "=", "num_points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.transform_points_to_sphere_voxels": [[105, 156], ["VoxelGenerator.generate", "isinstance", "VoxelGenerator", "numpy.round().astype", "numpy.arange", "functools.partial", "utils.coords_utils.absxyz_2_spherexyz_np", "data_dict.pop", "numpy.array", "utils.coords_utils.absxyz_2_cylinxyz_np", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.absxyz_2_spherexyz_np", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.absxyz_2_cylinxyz_np"], ["", "def", "transform_points_to_sphere_voxels", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ",", "voxel_generator", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "spconv", ".", "utils", "import", "VoxelGeneratorV2", "as", "VoxelGenerator", "\n", "", "except", ":", "\n", "                ", "from", "spconv", ".", "utils", "import", "VoxelGenerator", "\n", "\n", "", "voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "config", ".", "VOXEL_SIZE", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", ",", "\n", "max_num_points", "=", "config", ".", "MAX_POINTS_PER_VOXEL", ",", "\n", "max_voxels", "=", "config", ".", "MAX_NUMBER_OF_VOXELS", "[", "self", ".", "mode", "]", "\n", ")", "\n", "# print(\"max_voxels\", self.mode, config.MAX_NUMBER_OF_VOXELS[self.mode])", "\n", "grid_size", "=", "(", "self", ".", "point_cloud_range", "[", "3", ":", "6", "]", "-", "self", ".", "point_cloud_range", "[", "0", ":", "3", "]", ")", "/", "np", ".", "array", "(", "config", ".", "VOXEL_SIZE", ")", "\n", "self", ".", "occ_grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "occ_voxel_size", "=", "config", ".", "VOXEL_SIZE", "\n", "# self.det_grid_size = self.occ_grid_size", "\n", "# self.det_voxel_size = self.occ_voxel_size", "\n", "self", ".", "max_points_per_voxel", "=", "config", ".", "MAX_POINTS_PER_VOXEL", "\n", "self", ".", "voxel_array", "=", "np", ".", "arange", "(", "self", ".", "max_points_per_voxel", ")", "\n", "return", "partial", "(", "self", ".", "transform_points_to_sphere_voxels", ",", "voxel_generator", "=", "voxel_generator", ")", "\n", "\n", "", "points", "=", "data_dict", "[", "'pre_rot_points'", "]", "if", "'pre_rot_points'", "in", "data_dict", "else", "data_dict", "[", "'points'", "]", "\n", "if", "self", ".", "occ_config", ".", "COORD_TYPE", "==", "\"sphere\"", ":", "\n", "            ", "occ_coords_points", "=", "coords_utils", ".", "absxyz_2_spherexyz_np", "(", "points", ")", "\n", "", "elif", "self", ".", "occ_config", ".", "COORD_TYPE", "==", "\"cylinder\"", ":", "\n", "            ", "occ_coords_points", "=", "coords_utils", ".", "absxyz_2_cylinxyz_np", "(", "points", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"{}!!!\"", ".", "format", "(", "self", ".", "occ_config", ".", "COORD_TYPE", ")", "\n", "\n", "", "voxel_output", "=", "voxel_generator", ".", "generate", "(", "occ_coords_points", ")", "\n", "if", "isinstance", "(", "voxel_output", ",", "dict", ")", ":", "\n", "            ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "[", "'voxels'", "]", ",", "voxel_output", "[", "'coordinates'", "]", ",", "voxel_output", "[", "'num_points_per_voxel'", "]", "\n", "", "else", ":", "\n", "            ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "\n", "\n", "", "if", "not", "data_dict", "[", "'use_lead_xyz'", "]", ":", "\n", "            ", "voxels", "=", "voxels", "[", "...", ",", "3", ":", "]", "# remove xyz in voxels(N, 3)", "\n", "# print(\"leng x\", np.min(voxels[..., 0]), np.max(voxels[..., 0])-np.min(voxels[..., 0]))", "\n", "# print(\"leng y\", np.min(voxels[..., 1]), np.max(voxels[..., 1])-np.min(voxels[..., 1]))", "\n", "# print(\"leng z\", np.min(voxels[..., 2]), np.max(voxels[..., 2]))", "\n", "", "if", "'pre_rot_points'", "in", "data_dict", ":", "\n", "            ", "voxels", "[", "...", ",", "1", "]", "=", "voxels", "[", "...", ",", "1", "]", "-", "data_dict", "[", "'rot_z'", "]", "\n", "data_dict", ".", "pop", "(", "'pre_rot_points'", ")", "\n", "# print(\"voxels\", voxels.shape) # waymo < 19429", "\n", "", "data_dict", "[", "'voxels'", "]", "=", "voxels", "\n", "data_dict", "[", "'voxel_coords'", "]", "=", "coordinates", "\n", "data_dict", "[", "'voxel_num_points'", "]", "=", "num_points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.det_transform_points_to_voxels": [[158, 191], ["VoxelGenerator.generate", "isinstance", "VoxelGenerator", "numpy.round().astype", "functools.partial", "numpy.array", "numpy.round"], "methods", ["None"], ["", "def", "det_transform_points_to_voxels", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ",", "det_voxel_generator", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "spconv", ".", "utils", "import", "VoxelGeneratorV2", "as", "VoxelGenerator", "\n", "", "except", ":", "\n", "                ", "from", "spconv", ".", "utils", "import", "VoxelGenerator", "\n", "\n", "", "det_voxel_generator", "=", "VoxelGenerator", "(", "\n", "voxel_size", "=", "config", ".", "VOXEL_SIZE", ",", "\n", "point_cloud_range", "=", "self", ".", "det_point_cloud_range", ",", "\n", "max_num_points", "=", "config", ".", "MAX_POINTS_PER_VOXEL", ",", "\n", "max_voxels", "=", "config", ".", "MAX_NUMBER_OF_VOXELS", "[", "self", ".", "mode", "]", "\n", ")", "\n", "grid_size", "=", "(", "self", ".", "det_point_cloud_range", "[", "3", ":", "6", "]", "-", "self", ".", "det_point_cloud_range", "[", "0", ":", "3", "]", ")", "/", "np", ".", "array", "(", "config", ".", "VOXEL_SIZE", ")", "\n", "self", ".", "det_grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "det_voxel_size", "=", "config", ".", "VOXEL_SIZE", "\n", "return", "partial", "(", "self", ".", "det_transform_points_to_voxels", ",", "det_voxel_generator", "=", "det_voxel_generator", ")", "\n", "\n", "", "points", "=", "data_dict", "[", "'points'", "]", "\n", "voxel_output", "=", "det_voxel_generator", ".", "generate", "(", "points", ")", "\n", "if", "isinstance", "(", "voxel_output", ",", "dict", ")", ":", "\n", "            ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "[", "'voxels'", "]", ",", "voxel_output", "[", "'coordinates'", "]", ",", "voxel_output", "[", "'num_points_per_voxel'", "]", "\n", "", "else", ":", "\n", "            ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "\n", "\n", "", "if", "not", "data_dict", "[", "'use_lead_xyz'", "]", ":", "\n", "            ", "voxels", "=", "voxels", "[", "...", ",", "3", ":", "]", "# remove xyz in voxels(N, 3)", "\n", "\n", "", "data_dict", "[", "'det_voxels'", "]", "=", "voxels", "\n", "data_dict", "[", "'det_voxel_coords'", "]", "=", "coordinates", "\n", "data_dict", "[", "'det_voxel_num_points'", "]", "=", "num_points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.gen_pnt_label": [[193, 209], ["data_processor.DataProcessor.get_paddings_indicator", "data_processor.DataProcessor.nonzero", "utils.point_box_utils.points_in_box_3d_label", "numpy.zeros", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_paddings_indicator", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.points_in_box_3d_label"], ["", "def", "gen_pnt_label", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "gen_pnt_label", ",", "config", "=", "config", ")", "\n", "", "voxel_points", "=", "data_dict", "[", "'voxels'", "]", "\n", "V", ",", "VP", ",", "C", "=", "voxel_points", ".", "shape", "\n", "# print(\"V, VP, C\", V, VP, C)", "\n", "voxel_num_points", "=", "data_dict", "[", "'voxel_num_points'", "]", "\n", "mask", "=", "self", ".", "get_paddings_indicator", "(", "voxel_num_points", ",", "VP", ",", "axis", "=", "0", ")", "\n", "inds", "=", "mask", ".", "nonzero", "(", ")", "\n", "point_xyz", "=", "voxel_points", "[", "inds", "[", "0", "]", ",", "inds", "[", "1", "]", ",", ":", "3", "]", "\n", "point_label", "=", "point_box_utils", ".", "points_in_box_3d_label", "(", "point_xyz", ",", "data_dict", "[", "'gt_boxes'", "]", ",", "slack", "=", "1.0", ")", "\n", "voxel_points_label", "=", "np", ".", "zeros", "(", "(", "V", ",", "VP", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "voxel_points_label", "[", "inds", "[", "0", "]", ",", "inds", "[", "1", "]", "]", "=", "point_label", "\n", "data_dict", "[", "\"voxel_points_label\"", "]", "=", "voxel_points_label", "\n", "# print(np.max(voxel_points_label))", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.sample_points": [[210, 242], ["functools.partial", "len", "numpy.linalg.norm", "numpy.random.choice", "numpy.random.shuffle", "numpy.arange", "numpy.random.shuffle", "numpy.where", "numpy.where", "len", "numpy.random.choice", "numpy.arange", "numpy.random.choice", "len", "len", "numpy.random.choice", "numpy.concatenate", "len", "numpy.concatenate", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "sample_points", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "sample_points", ",", "config", "=", "config", ")", "\n", "\n", "", "num_points", "=", "config", ".", "NUM_POINTS", "[", "self", ".", "mode", "]", "\n", "if", "num_points", "==", "-", "1", ":", "\n", "            ", "return", "data_dict", "\n", "\n", "", "points", "=", "data_dict", "[", "'points'", "]", "\n", "if", "num_points", "<", "len", "(", "points", ")", ":", "\n", "            ", "pts_depth", "=", "np", ".", "linalg", ".", "norm", "(", "points", "[", ":", ",", "0", ":", "3", "]", ",", "axis", "=", "1", ")", "\n", "pts_near_flag", "=", "pts_depth", "<", "40.0", "\n", "far_idxs_choice", "=", "np", ".", "where", "(", "pts_near_flag", "==", "0", ")", "[", "0", "]", "\n", "near_idxs", "=", "np", ".", "where", "(", "pts_near_flag", "==", "1", ")", "[", "0", "]", "\n", "near_idxs_choice", "=", "np", ".", "random", ".", "choice", "(", "near_idxs", ",", "num_points", "-", "len", "(", "far_idxs_choice", ")", ",", "replace", "=", "False", ")", "\n", "choice", "=", "[", "]", "\n", "if", "num_points", ">", "len", "(", "far_idxs_choice", ")", ":", "\n", "                ", "near_idxs_choice", "=", "np", ".", "random", ".", "choice", "(", "near_idxs", ",", "num_points", "-", "len", "(", "far_idxs_choice", ")", ",", "replace", "=", "False", ")", "\n", "choice", "=", "np", ".", "concatenate", "(", "(", "near_idxs_choice", ",", "far_idxs_choice", ")", ",", "axis", "=", "0", ")", "if", "len", "(", "far_idxs_choice", ")", ">", "0", "else", "near_idxs_choice", "\n", "", "else", ":", "\n", "                ", "choice", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "points", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "choice", ",", "num_points", ",", "replace", "=", "False", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "choice", ")", "\n", "", "else", ":", "\n", "            ", "choice", "=", "np", ".", "arange", "(", "0", ",", "len", "(", "points", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "num_points", ">", "len", "(", "points", ")", ":", "\n", "                ", "extra_choice", "=", "np", ".", "random", ".", "choice", "(", "choice", ",", "num_points", "-", "len", "(", "points", ")", ",", "replace", "=", "False", ")", "\n", "choice", "=", "np", ".", "concatenate", "(", "(", "choice", ",", "extra_choice", ")", ",", "axis", "=", "0", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "choice", ")", "\n", "", "data_dict", "[", "'points'", "]", "=", "points", "[", "choice", "]", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.data_processor.DataProcessor.forward": [[243, 259], ["cur_processor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                points: (N, 3 + C_in)\n                gt_boxes: optional, (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n                gt_names: optional, (N), string\n                ...\n\n        Returns:\n        \"\"\"", "\n", "\n", "for", "cur_processor", "in", "self", ".", "data_processor_queue", ":", "\n", "            ", "data_dict", "=", "cur_processor", "(", "data_dict", "=", "data_dict", ")", "\n", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.point_feature_encoder.PointFeatureEncoder.__init__": [[5, 12], ["object.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "point_cloud_range", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "point_encoding_config", "=", "config", "\n", "assert", "list", "(", "self", ".", "point_encoding_config", ".", "src_feature_list", "[", "0", ":", "3", "]", ")", "==", "[", "'x'", ",", "'y'", ",", "'z'", "]", "\n", "self", ".", "used_feature_list", "=", "self", ".", "point_encoding_config", ".", "used_feature_list", "\n", "self", ".", "src_feature_list", "=", "self", ".", "point_encoding_config", ".", "src_feature_list", "\n", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.point_feature_encoder.PointFeatureEncoder.num_point_features": [[13, 16], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_point_features", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "point_encoding_config", ".", "encoding_type", ")", "(", "points", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.point_feature_encoder.PointFeatureEncoder.forward": [[17, 38], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                points: (N, 3 + C_in)\n                ...\n        Returns:\n            data_dict:\n                points: (N, 3 + C_out),\n                use_lead_xyz: whether to use xyz as point-wise features\n                ...\n        \"\"\"", "\n", "# data_dict['points'], use_lead_xyz = getattr(self, self.point_encoding_config.encoding_type)(", "\n", "#     data_dict['points']", "\n", "# )", "\n", "if", "self", ".", "point_encoding_config", ".", "encoding_type", "==", "\"absolute_coordinates_encoding\"", ":", "\n", "            ", "data_dict", "[", "'use_lead_xyz'", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "'use_lead_xyz'", "]", "=", "False", "\n", "# print(\"points_intensity\", np.min(data_dict['points'][:,3]), np.max(data_dict['points'][:,3]))", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.processor.point_feature_encoder.PointFeatureEncoder.absolute_coordinates_encoding": [[39, 61], ["point_feature_encoder.PointFeatureEncoder.point_encoding_config.get", "numpy.concatenate", "len", "point_feature_encoder.PointFeatureEncoder.src_feature_list.index", "point_feature_list.append", "int", "numpy.tanh", "function[].startswith", "[].split", "numpy.tanh", "float", "float", "numpy.clip"], "methods", ["None"], ["", "def", "absolute_coordinates_encoding", "(", "self", ",", "points", "=", "None", ")", ":", "\n", "        ", "if", "points", "is", "None", ":", "\n", "            ", "num_output_features", "=", "len", "(", "self", ".", "used_feature_list", ")", "\n", "return", "num_output_features", "\n", "\n", "", "point_feature_list", "=", "[", "points", "[", ":", ",", "0", ":", "3", "]", "]", "\n", "for", "x", "in", "self", ".", "used_feature_list", ":", "\n", "            ", "if", "x", "in", "[", "'x'", ",", "'y'", ",", "'z'", "]", ":", "\n", "                ", "continue", "\n", "", "idx", "=", "self", ".", "src_feature_list", ".", "index", "(", "x", ")", "\n", "point_feature_list", ".", "append", "(", "points", "[", ":", ",", "idx", ":", "idx", "+", "1", "]", ")", "\n", "", "function", "=", "self", ".", "point_encoding_config", ".", "get", "(", "\"function\"", ",", "None", ")", "\n", "if", "function", "is", "not", "None", ":", "\n", "            ", "pos", "=", "int", "(", "function", "[", "0", "]", ")", "-", "2", "\n", "if", "function", "[", "1", "]", "==", "\"tanh\"", ":", "\n", "                ", "point_feature_list", "[", "pos", "]", "=", "np", ".", "tanh", "(", "point_feature_list", "[", "pos", "]", ")", "\n", "", "elif", "function", "[", "1", "]", ".", "startswith", "(", "\"clip\"", ")", ":", "\n", "                ", "min", ",", "max", "=", "function", "[", "1", "]", "[", "5", ":", "]", ".", "split", "(", "\"-\"", ")", "\n", "min", ",", "max", "=", "float", "(", "min", ")", ",", "float", "(", "max", ")", "\n", "point_feature_list", "[", "pos", "]", "=", "np", ".", "tanh", "(", "np", ".", "clip", "(", "point_feature_list", "[", "pos", "]", ",", "min", ",", "max", ")", ")", "\n", "", "", "point_features", "=", "np", ".", "concatenate", "(", "point_feature_list", ",", "axis", "=", "1", ")", "\n", "return", "point_features", ",", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.__init__": [[10, 32], ["sampler_cfg.PREPARE.items", "sampler_cfg.get", "x.split", "getattr", "len", "numpy.arange", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "sampler_cfg", ",", "class_names", ",", "db_infos", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "sampler_cfg", "=", "sampler_cfg", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "db_infos", "=", "db_infos", "\n", "\n", "for", "func_name", ",", "val", "in", "sampler_cfg", ".", "PREPARE", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "db_infos", "=", "getattr", "(", "self", ",", "func_name", ")", "(", "self", ".", "db_infos", ",", "val", ")", "\n", "\n", "", "self", ".", "sample_groups", "=", "{", "}", "\n", "self", ".", "sample_class_num", "=", "{", "}", "\n", "self", ".", "limit_whole_scene", "=", "sampler_cfg", ".", "get", "(", "'LIMIT_WHOLE_SCENE'", ",", "False", ")", "\n", "for", "x", "in", "sampler_cfg", ".", "SAMPLE_GROUPS", ":", "\n", "            ", "class_name", ",", "sample_num", "=", "x", ".", "split", "(", "':'", ")", "\n", "if", "class_name", "not", "in", "class_names", ":", "\n", "                ", "continue", "\n", "", "self", ".", "sample_class_num", "[", "class_name", "]", "=", "sample_num", "\n", "self", ".", "sample_groups", "[", "class_name", "]", "=", "{", "\n", "'sample_num'", ":", "sample_num", ",", "\n", "'pointer'", ":", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ",", "\n", "'indices'", ":", "np", ".", "arange", "(", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.__getstate__": [[34, 38], ["dict"], "methods", ["None"], ["", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.__setstate__": [[39, 41], ["database_sampler.DataBaseSampler.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.filter_by_difficulty": [[42, 53], ["db_infos.items", "len", "database_sampler.DataBaseSampler.logger.info", "len"], "methods", ["None"], ["", "def", "filter_by_difficulty", "(", "self", ",", "db_infos", ",", "removed_difficulty", ")", ":", "\n", "        ", "new_db_infos", "=", "{", "}", "\n", "for", "key", ",", "dinfos", "in", "db_infos", ".", "items", "(", ")", ":", "\n", "            ", "pre_len", "=", "len", "(", "dinfos", ")", "\n", "new_db_infos", "[", "key", "]", "=", "[", "\n", "info", "for", "info", "in", "dinfos", "\n", "if", "info", "[", "'difficulty'", "]", "not", "in", "removed_difficulty", "\n", "]", "\n", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Database filter by difficulty %s: %d => %d'", "%", "(", "key", ",", "pre_len", ",", "len", "(", "new_db_infos", "[", "key", "]", ")", ")", ")", "\n", "", "", "return", "new_db_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.filter_by_min_points": [[54, 70], ["name_num.split", "int", "db_infos.keys", "database_sampler.DataBaseSampler.logger.info", "filtered_infos.append", "len", "len"], "methods", ["None"], ["", "def", "filter_by_min_points", "(", "self", ",", "db_infos", ",", "min_gt_points_list", ")", ":", "\n", "        ", "for", "name_num", "in", "min_gt_points_list", ":", "\n", "            ", "name", ",", "min_num", "=", "name_num", ".", "split", "(", "':'", ")", "\n", "min_num", "=", "int", "(", "min_num", ")", "\n", "if", "min_num", ">", "0", "and", "name", "in", "db_infos", ".", "keys", "(", ")", ":", "\n", "                ", "filtered_infos", "=", "[", "]", "\n", "for", "info", "in", "db_infos", "[", "name", "]", ":", "\n", "                    ", "if", "info", "[", "'num_points_in_gt'", "]", ">=", "min_num", ":", "\n", "                        ", "filtered_infos", ".", "append", "(", "info", ")", "\n", "\n", "", "", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'Database filter by min points %s: %d => %d'", "%", "\n", "(", "name", ",", "len", "(", "db_infos", "[", "name", "]", ")", ",", "len", "(", "filtered_infos", ")", ")", ")", "\n", "", "db_infos", "[", "name", "]", "=", "filtered_infos", "\n", "# print(\"!!!!!!!sys.getsizeof, new_db_infos\", get_size(1), get_size(db_infos))", "\n", "", "", "return", "db_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.sample_with_fixed_number": [[71, 89], ["int", "len", "numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "sample_with_fixed_number", "(", "self", ",", "class_name", ",", "sample_group", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            class_name:\n            sample_group:\n        Returns:\n\n        \"\"\"", "\n", "sample_num", ",", "pointer", ",", "indices", "=", "int", "(", "sample_group", "[", "'sample_num'", "]", ")", ",", "sample_group", "[", "'pointer'", "]", ",", "sample_group", "[", "'indices'", "]", "\n", "if", "pointer", ">=", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ")", "\n", "pointer", "=", "0", "\n", "\n", "", "sampled_dict", "=", "[", "self", ".", "db_infos", "[", "class_name", "]", "[", "idx", "]", "for", "idx", "in", "indices", "[", "pointer", ":", "pointer", "+", "sample_num", "]", "]", "\n", "pointer", "+=", "sample_num", "\n", "sample_group", "[", "'pointer'", "]", "=", "pointer", "\n", "sample_group", "[", "'indices'", "]", "=", "indices", "\n", "return", "sampled_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.put_boxes_on_road_planes": [[90, 109], ["calib.lidar_to_rect", "calib.rect_to_lidar"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_lidar"], ["", "@", "staticmethod", "\n", "def", "put_boxes_on_road_planes", "(", "gt_boxes", ",", "road_planes", ",", "calib", ")", ":", "\n", "        ", "\"\"\"\n        Only validate in KITTIDataset\n        Args:\n            gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n            road_planes: [a, b, c, d]\n            calib:\n\n        Returns:\n        \"\"\"", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "road_planes", "\n", "center_cam", "=", "calib", ".", "lidar_to_rect", "(", "gt_boxes", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "cur_height_cam", "=", "(", "-", "d", "-", "a", "*", "center_cam", "[", ":", ",", "0", "]", "-", "c", "*", "center_cam", "[", ":", ",", "2", "]", ")", "/", "b", "\n", "center_cam", "[", ":", ",", "1", "]", "=", "cur_height_cam", "\n", "cur_lidar_height", "=", "calib", ".", "rect_to_lidar", "(", "center_cam", ")", "[", ":", ",", "2", "]", "\n", "mv_height", "=", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "5", "]", "/", "2", "-", "cur_lidar_height", "\n", "gt_boxes", "[", ":", ",", "2", "]", "-=", "mv_height", "# lidar view", "\n", "return", "gt_boxes", ",", "mv_height", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.add_sampled_boxes_to_scene": [[110, 158], ["database_sampler.DataBaseSampler.sampler_cfg.get", "enumerate", "numpy.concatenate", "numpy.array", "utils.box_utils.enlarge_box3d", "utils.box_utils.remove_points_in_boxes3d", "numpy.concatenate", "database_sampler.DataBaseSampler.put_boxes_on_road_planes", "data_dict.pop", "data_dict.pop", "numpy.fromfile().reshape", "database_sampler.DataBaseSampler.sampler_cfg.get", "obj_points_list.append", "numpy.concatenate", "numpy.concatenate", "numpy.fromfile", "str"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.enlarge_box3d", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.remove_points_in_boxes3d", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.put_boxes_on_road_planes"], ["", "def", "add_sampled_boxes_to_scene", "(", "self", ",", "data_dict", ",", "sampled_gt_boxes", ",", "total_valid_sampled_dict", ")", ":", "\n", "        ", "gt_boxes_mask", "=", "data_dict", "[", "'gt_boxes_mask'", "]", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "gt_boxes_mask", "]", "\n", "gt_names", "=", "data_dict", "[", "'gt_names'", "]", "[", "gt_boxes_mask", "]", "\n", "data_dict", "[", "\"gt_boxes_inds\"", "]", "=", "data_dict", "[", "\"gt_boxes_inds\"", "]", "[", "gt_boxes_mask", "]", "\n", "points", "=", "data_dict", "[", "'points'", "]", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'USE_ROAD_PLANE'", ",", "False", ")", ":", "\n", "            ", "sampled_gt_boxes", ",", "mv_height", "=", "self", ".", "put_boxes_on_road_planes", "(", "\n", "sampled_gt_boxes", ",", "data_dict", "[", "'road_plane'", "]", ",", "data_dict", "[", "'calib'", "]", "\n", ")", "\n", "data_dict", ".", "pop", "(", "'calib'", ")", "\n", "data_dict", ".", "pop", "(", "'road_plane'", ")", "\n", "\n", "", "obj_points_list", "=", "[", "]", "\n", "for", "idx", ",", "info", "in", "enumerate", "(", "total_valid_sampled_dict", ")", ":", "\n", "            ", "file_path", "=", "self", ".", "root_path", "/", "info", "[", "'path'", "]", "\n", "obj_points", "=", "np", ".", "fromfile", "(", "str", "(", "file_path", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "self", ".", "sampler_cfg", ".", "NUM_POINT_FEATURES", "]", ")", "\n", "\n", "obj_points", "[", ":", ",", ":", "3", "]", "+=", "info", "[", "'box3d_lidar'", "]", "[", ":", "3", "]", "\n", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'USE_ROAD_PLANE'", ",", "False", ")", ":", "\n", "# mv height", "\n", "                ", "obj_points", "[", ":", ",", "2", "]", "-=", "mv_height", "[", "idx", "]", "\n", "\n", "", "obj_points_list", ".", "append", "(", "obj_points", ")", "\n", "\n", "", "obj_points", "=", "np", ".", "concatenate", "(", "obj_points_list", ",", "axis", "=", "0", ")", "\n", "sampled_gt_names", "=", "np", ".", "array", "(", "[", "x", "[", "'name'", "]", "for", "x", "in", "total_valid_sampled_dict", "]", ")", "\n", "large_sampled_gt_boxes", "=", "box_utils", ".", "enlarge_box3d", "(", "\n", "sampled_gt_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "extra_width", "=", "self", ".", "sampler_cfg", ".", "REMOVE_EXTRA_WIDTH", "\n", ")", "\n", "points", "=", "box_utils", ".", "remove_points_in_boxes3d", "(", "points", ",", "large_sampled_gt_boxes", ")", "\n", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "obj_points", "]", ",", "axis", "=", "0", ")", "\n", "if", "gt_boxes", ".", "ndim", "!=", "2", "or", "gt_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "# print(\"prefilter gt name:\", data_dict['gt_names'], \" filtered gt name:\", gt_names)", "\n", "            ", "gt_names", "=", "sampled_gt_names", "\n", "gt_boxes", "=", "sampled_gt_boxes", "\n", "", "else", ":", "\n", "            ", "gt_names", "=", "np", ".", "concatenate", "(", "[", "gt_names", ",", "sampled_gt_names", "]", ",", "axis", "=", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "sampled_gt_boxes", "]", ",", "axis", "=", "0", ")", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'gt_names'", "]", "=", "gt_names", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "\n", "data_dict", "[", "\"augment_box_num\"", "]", "=", "sampled_gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.__call__": [[159, 218], ["data_dict[].astype", "database_sampler.DataBaseSampler.sample_groups.items", "database_sampler.DataBaseSampler.pop", "total_valid_sampled_dict.__len__", "database_sampler.DataBaseSampler.add_sampled_boxes_to_scene", "numpy.sum", "str", "int", "database_sampler.DataBaseSampler.sample_with_fixed_number", "numpy.stack().astype", "numpy.stack().astype", "numpy.stack().astype", "database_sampler.DataBaseSampler.sampler_cfg.get", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "total_valid_sampled_dict.extend", "total_valid_sampled_boxes_image_idx.append", "total_valid_sampled_boxes_gt_idx.append", "numpy.concatenate", "numpy.concatenate", "utils.box_utils.boxes3d_kitti_fakelidar_to_lidar", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "numpy.concatenate", "len", "len", "int", "numpy.stack", "numpy.stack", "numpy.stack", "range", "range", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu.max", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu.max"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.DataBaseSampler.add_sampled_boxes_to_scene", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.sample_with_fixed_number", "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_kitti_fakelidar_to_lidar", "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu"], ["", "def", "__call__", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "\n", "gt_names", "=", "data_dict", "[", "'gt_names'", "]", ".", "astype", "(", "str", ")", "\n", "existed_boxes", "=", "gt_boxes", "\n", "total_valid_sampled_dict", "=", "[", "]", "\n", "total_valid_sampled_boxes_image_idx", "=", "[", "]", "\n", "total_valid_sampled_boxes_gt_idx", "=", "[", "]", "\n", "\n", "for", "class_name", ",", "sample_group", "in", "self", ".", "sample_groups", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "limit_whole_scene", ":", "\n", "                ", "num_gt", "=", "np", ".", "sum", "(", "class_name", "==", "gt_names", ")", "\n", "sample_group", "[", "'sample_num'", "]", "=", "str", "(", "int", "(", "self", ".", "sample_class_num", "[", "class_name", "]", ")", "-", "num_gt", ")", "\n", "", "if", "int", "(", "sample_group", "[", "'sample_num'", "]", ")", ">", "0", ":", "\n", "                ", "sampled_dict", "=", "self", ".", "sample_with_fixed_number", "(", "class_name", ",", "sample_group", ")", "\n", "\n", "sampled_boxes", "=", "np", ".", "stack", "(", "[", "x", "[", "'box3d_lidar'", "]", "for", "x", "in", "sampled_dict", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "sampled_boxes_image_idx", "=", "np", ".", "stack", "(", "[", "x", "[", "'image_idx'", "]", "if", "'image_idx'", "in", "x", "else", "x", "[", "'sample_idx'", "]", "for", "x", "in", "sampled_dict", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "sampled_boxes_gt_idx", "=", "np", ".", "stack", "(", "[", "x", "[", "'gt_idx'", "]", "for", "x", "in", "sampled_dict", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'DATABASE_WITH_FAKELIDAR'", ",", "False", ")", ":", "\n", "                    ", "sampled_boxes", "=", "box_utils", ".", "boxes3d_kitti_fakelidar_to_lidar", "(", "sampled_boxes", ")", "\n", "\n", "", "iou2", "=", "iou3d_nms_utils", ".", "boxes_bev_iou_cpu", "(", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "iou2", "[", "range", "(", "sampled_boxes", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "sampled_boxes", ".", "shape", "[", "0", "]", ")", "]", "=", "0", "\n", "iou1", "=", "None", "\n", "if", "existed_boxes", ".", "ndim", "==", "2", "and", "existed_boxes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                    ", "iou1", "=", "iou3d_nms_utils", ".", "boxes_bev_iou_cpu", "(", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "existed_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "# else:", "\n", "#     print(\"existed_boxes: skip iou \", existed_boxes.shape)", "\n", "", "iou1", "=", "iou1", "if", "iou1", "is", "not", "None", "and", "(", "iou1", ".", "shape", "[", "1", "]", ">", "0", ")", "else", "iou2", "\n", "valid_mask", "=", "(", "(", "iou1", ".", "max", "(", "axis", "=", "1", ")", "+", "iou2", ".", "max", "(", "axis", "=", "1", ")", ")", "==", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "valid_sampled_dict", "=", "[", "sampled_dict", "[", "x", "]", "for", "x", "in", "valid_mask", "]", "\n", "valid_sampled_boxes", "=", "sampled_boxes", "[", "valid_mask", "]", "\n", "valid_sampled_boxes_image_idx", "=", "sampled_boxes_image_idx", "[", "valid_mask", "]", "\n", "valid_sampled_boxes_gt_idx", "=", "sampled_boxes_gt_idx", "[", "valid_mask", "]", "\n", "if", "existed_boxes", ".", "ndim", "!=", "2", "or", "existed_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "existed_boxes", "=", "valid_sampled_boxes", "\n", "", "else", ":", "\n", "                    ", "existed_boxes", "=", "np", ".", "concatenate", "(", "(", "existed_boxes", ",", "valid_sampled_boxes", ")", ",", "axis", "=", "0", ")", "\n", "", "total_valid_sampled_dict", ".", "extend", "(", "valid_sampled_dict", ")", "\n", "total_valid_sampled_boxes_image_idx", ".", "append", "(", "valid_sampled_boxes_image_idx", ")", "\n", "total_valid_sampled_boxes_gt_idx", ".", "append", "(", "valid_sampled_boxes_gt_idx", ")", "\n", "\n", "", "", "sampled_gt_boxes", "=", "existed_boxes", "[", "gt_boxes", ".", "shape", "[", "0", "]", ":", ",", ":", "]", "\n", "if", "total_valid_sampled_dict", ".", "__len__", "(", ")", ">", "0", ":", "\n", "            ", "data_dict", "=", "self", ".", "add_sampled_boxes_to_scene", "(", "data_dict", ",", "sampled_gt_boxes", ",", "total_valid_sampled_dict", ")", "\n", "data_dict", "[", "'aug_boxes_image_idx'", "]", "=", "total_valid_sampled_boxes_image_idx", "[", "0", "]", "if", "len", "(", "total_valid_sampled_boxes_image_idx", ")", "==", "1", "else", "np", ".", "concatenate", "(", "total_valid_sampled_boxes_image_idx", ",", "axis", "=", "0", ")", "\n", "data_dict", "[", "'aug_boxes_gt_idx'", "]", "=", "total_valid_sampled_boxes_gt_idx", "[", "0", "]", "if", "len", "(", "total_valid_sampled_boxes_gt_idx", ")", "==", "1", "else", "np", ".", "concatenate", "(", "total_valid_sampled_boxes_gt_idx", ",", "axis", "=", "0", ")", "\n", "", "data_dict", ".", "pop", "(", "'gt_boxes_mask'", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.database_sampler.get_size": [[219, 238], ["sys.getsizeof", "id", "set.add", "isinstance", "set", "sum", "sum", "hasattr", "database_sampler.get_size", "database_sampler.get_size", "database_sampler.get_size", "hasattr", "sum", "obj.values", "obj.keys", "isinstance", "database_sampler.get_size"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size"], ["", "", "def", "get_size", "(", "obj", ",", "seen", "=", "None", ")", ":", "\n", "    ", "\"\"\"Recursively finds size of objects\"\"\"", "\n", "size", "=", "sys", ".", "getsizeof", "(", "obj", ")", "\n", "if", "seen", "is", "None", ":", "\n", "        ", "seen", "=", "set", "(", ")", "\n", "", "obj_id", "=", "id", "(", "obj", ")", "\n", "if", "obj_id", "in", "seen", ":", "\n", "        ", "return", "0", "\n", "# Important mark as seen *before* entering recursion to gracefully handle", "\n", "# self-referential objects", "\n", "", "seen", ".", "add", "(", "obj_id", ")", "\n", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "size", "+=", "sum", "(", "[", "get_size", "(", "v", ",", "seen", ")", "for", "v", "in", "obj", ".", "values", "(", ")", "]", ")", "\n", "size", "+=", "sum", "(", "[", "get_size", "(", "k", ",", "seen", ")", "for", "k", "in", "obj", ".", "keys", "(", ")", "]", ")", "\n", "", "elif", "hasattr", "(", "obj", ",", "'__dict__'", ")", ":", "\n", "        ", "size", "+=", "get_size", "(", "obj", ".", "__dict__", ",", "seen", ")", "\n", "", "elif", "hasattr", "(", "obj", ",", "'__iter__'", ")", "and", "not", "isinstance", "(", "obj", ",", "(", "str", ",", "bytes", ",", "bytearray", ")", ")", ":", "\n", "        ", "size", "+=", "sum", "(", "[", "get_size", "(", "i", ",", "seen", ")", "for", "i", "in", "obj", "]", ")", "\n", "", "return", "size", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.augmentor_utils.random_flip_along_x": [[6, 23], ["numpy.random.choice"], "function", ["None"], ["def", "random_flip_along_x", "(", "gt_boxes", ",", "points", ",", "special_points_lst", "=", "[", "]", ",", "enable", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7 + C), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C)\n    Returns:\n    \"\"\"", "\n", "enable", "=", "np", ".", "random", ".", "choice", "(", "[", "False", ",", "True", "]", ",", "replace", "=", "False", ",", "p", "=", "[", "0.5", ",", "0.5", "]", ")", "if", "enable", "is", "None", "else", "enable", "\n", "if", "enable", ":", "\n", "        ", "gt_boxes", "[", ":", ",", "1", "]", "=", "-", "gt_boxes", "[", ":", ",", "1", "]", "\n", "gt_boxes", "[", ":", ",", "6", "]", "=", "-", "gt_boxes", "[", ":", ",", "6", "]", "\n", "points", "[", ":", ",", "1", "]", "=", "-", "points", "[", ":", ",", "1", "]", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", ">", "7", ":", "\n", "            ", "gt_boxes", "[", ":", ",", "8", "]", "=", "-", "gt_boxes", "[", ":", ",", "8", "]", "\n", "", "for", "special_points", "in", "special_points_lst", ":", "\n", "            ", "special_points", "[", ":", ",", "1", "]", "=", "-", "special_points", "[", ":", ",", "1", "]", "\n", "", "", "return", "gt_boxes", ",", "points", ",", "special_points_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.augmentor_utils.random_flip_along_y": [[25, 42], ["numpy.random.choice"], "function", ["None"], ["", "def", "random_flip_along_y", "(", "gt_boxes", ",", "points", ",", "special_points_lst", "=", "[", "]", ",", "enable", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7 + C), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C)\n    Returns:\n    \"\"\"", "\n", "enable", "=", "np", ".", "random", ".", "choice", "(", "[", "False", ",", "True", "]", ",", "replace", "=", "False", ",", "p", "=", "[", "0.5", ",", "0.5", "]", ")", "if", "enable", "is", "None", "else", "enable", "\n", "if", "enable", ":", "\n", "        ", "gt_boxes", "[", ":", ",", "0", "]", "=", "-", "gt_boxes", "[", ":", ",", "0", "]", "\n", "gt_boxes", "[", ":", ",", "6", "]", "=", "-", "(", "gt_boxes", "[", ":", ",", "6", "]", "+", "np", ".", "pi", ")", "\n", "points", "[", ":", ",", "0", "]", "=", "-", "points", "[", ":", ",", "0", "]", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", ">", "7", ":", "\n", "            ", "gt_boxes", "[", ":", ",", "7", "]", "=", "-", "gt_boxes", "[", ":", ",", "7", "]", "\n", "", "for", "special_points", "in", "special_points_lst", ":", "\n", "            ", "special_points", "[", ":", ",", "0", "]", "=", "-", "special_points", "[", ":", ",", "0", "]", "\n", "", "", "return", "gt_boxes", ",", "points", ",", "special_points_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.augmentor_utils.global_rotation": [[44, 65], ["numpy.random.uniform", "range", "utils.common_utils.rotate_points_along_z", "utils.common_utils.rotate_points_along_z", "len", "numpy.array", "numpy.array", "utils.common_utils.rotate_points_along_z", "utils.common_utils.rotate_points_along_z", "numpy.array", "numpy.array", "numpy.hstack", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "global_rotation", "(", "gt_boxes", ",", "points", ",", "rot_range", ",", "special_points_lst", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7 + C), [x, y, z, dx, dy, dz, heading, [vx], [vy]]\n        points: (M, 3 + C),\n        rot_range: [min, max]\n    Returns:\n    \"\"\"", "\n", "noise_rotation", "=", "np", ".", "random", ".", "uniform", "(", "rot_range", "[", "0", "]", ",", "rot_range", "[", "1", "]", ")", "\n", "points", "=", "common_utils", ".", "rotate_points_along_z", "(", "points", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", ")", "[", "0", "]", "\n", "gt_boxes", "[", ":", ",", "0", ":", "3", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "gt_boxes", "[", "np", ".", "newaxis", ",", ":", ",", "0", ":", "3", "]", ",", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", ")", "[", "0", "]", "\n", "gt_boxes", "[", ":", ",", "6", "]", "+=", "noise_rotation", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", ">", "7", ":", "\n", "        ", "gt_boxes", "[", ":", ",", "7", ":", "9", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "np", ".", "hstack", "(", "(", "gt_boxes", "[", ":", ",", "7", ":", "9", "]", ",", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "\n", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", "\n", ")", "[", "0", "]", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "special_points_lst", ")", ")", ":", "\n", "        ", "special_points_lst", "[", "i", "]", "=", "common_utils", ".", "rotate_points_along_z", "(", "special_points_lst", "[", "i", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "np", ".", "array", "(", "[", "noise_rotation", "]", ")", ")", "[", "0", "]", "\n", "", "return", "gt_boxes", ",", "points", ",", "noise_rotation", ",", "special_points_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.augmentor_utils.global_scaling": [[67, 83], ["numpy.random.uniform"], "function", ["None"], ["", "def", "global_scaling", "(", "gt_boxes", ",", "points", ",", "scale_range", ",", "special_points_lst", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_boxes: (N, 7), [x, y, z, dx, dy, dz, heading]\n        points: (M, 3 + C),\n        scale_range: [min, max]\n    Returns:\n    \"\"\"", "\n", "if", "scale_range", "[", "1", "]", "-", "scale_range", "[", "0", "]", "<", "1e-3", ":", "\n", "        ", "return", "gt_boxes", ",", "points", "\n", "", "noise_scale", "=", "np", ".", "random", ".", "uniform", "(", "scale_range", "[", "0", "]", ",", "scale_range", "[", "1", "]", ")", "\n", "points", "[", ":", ",", ":", "3", "]", "*=", "noise_scale", "\n", "gt_boxes", "[", ":", ",", ":", "6", "]", "*=", "noise_scale", "\n", "for", "special_points", "in", "special_points_lst", ":", "\n", "        ", "special_points", "[", ":", ",", ":", "3", "]", "*=", "noise_scale", "\n", "", "return", "gt_boxes", ",", "points", ",", "special_points_lst", "\n", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.__init__": [[10, 33], ["querier_cfg.get", "querier_cfg.get", "numpy.asarray", "querier_cfg.get", "querier_cfg.ABLATION.get", "querier_cfg.ABLATION.get", "querier_cfg.ABLATION.get", "querier_cfg.ABLATION.get", "multi_best_match_querier.MltBestMatchQuerier.root_path.resolve", "multi_best_match_querier.MltBestMatchQuerier.root_path.resolve", "multi_best_match_querier.MltBestMatchQuerier.root_path.resolve"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "querier_cfg", ",", "class_names", ",", "db_infos", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "querier_cfg", "=", "querier_cfg", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "bmatch_infos", "=", "{", "}", "\n", "\n", "self", ".", "mlt_bm_root", "=", "{", "\n", "\"Car\"", ":", "self", ".", "root_path", ".", "resolve", "(", ")", "/", "querier_cfg", ".", "CAR_MLT_BM_ROOT", ",", "\n", "\"Cyclist\"", ":", "self", ".", "root_path", ".", "resolve", "(", ")", "/", "querier_cfg", ".", "CYC_MLT_BM_ROOT", ",", "\n", "\"Pedestrian\"", ":", "self", ".", "root_path", ".", "resolve", "(", ")", "/", "querier_cfg", ".", "PED_MLT_BM_ROOT", ",", "\n", "}", "\n", "self", ".", "db_infos", ",", "self", ".", "vis", "=", "db_infos", ",", "False", "\n", "self", ".", "load_point_features", "=", "querier_cfg", ".", "get", "(", "\"LOAD_POINT_FEATURES\"", ",", "3", ")", "\n", "self", ".", "add_bm_2_raw", "=", "querier_cfg", ".", "get", "(", "\"ADD_BM_2_RAW\"", ",", "False", ")", "\n", "if", "querier_cfg", ".", "get", "(", "\"ABLATION\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "rmv_self_occ", "=", "querier_cfg", ".", "ABLATION", ".", "get", "(", "\"RMV_SELF_OCC\"", ",", "False", ")", "\n", "self", ".", "rmv_miss", "=", "querier_cfg", ".", "ABLATION", ".", "get", "(", "\"RMV_MISS\"", ",", "False", ")", "\n", "self", ".", "num_point_features", "=", "querier_cfg", ".", "ABLATION", ".", "get", "(", "\"NUM_POINT_FEATURES\"", ",", "4", ")", "\n", "self", ".", "vis", "=", "querier_cfg", ".", "ABLATION", ".", "get", "(", "\"VIS\"", ",", "False", ")", "\n", "# self.sphere_coords_res = np.asarray([[0.2, 0.0875*2, 0.4203125]])", "\n", "", "self", ".", "sphere_coords_res", "=", "np", ".", "asarray", "(", "[", "[", "0.32", ",", "0.5184", ",", "0.4203125", "]", "]", ")", "\n", "self", ".", "expand", "=", "False", "\n", "# self.expand = False", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.__getstate__": [[35, 39], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.__setstate__": [[41, 43], ["multi_best_match_querier.MltBestMatchQuerier.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.mirror": [[45, 48], ["numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "mirror", "(", "self", ",", "pnts", ",", "lastchannel", "=", "3", ")", ":", "\n", "        ", "mirror_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts", "[", "...", ",", "0", ":", "1", "]", ",", "-", "pnts", "[", "...", ",", "1", ":", "2", "]", ",", "pnts", "[", "...", ",", "2", ":", "lastchannel", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "pnts", ",", "mirror_pnts", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.add_gtbox_best_match_points_to_scene": [[50, 78], ["int", "range", "data_dict[].extend", "[].astype", "utils.point_box_utils.get_yaw_rotation", "obj_points_list.append", "open", "pickle.load", "numpy.einsum", "pickle.load.reshape"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation"], ["", "def", "add_gtbox_best_match_points_to_scene", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "obj_points_list", "=", "[", "]", "\n", "aug_boxes_num", "=", "data_dict", "[", "'aug_boxes_image_idx'", "]", ".", "shape", "[", "0", "]", "if", "'aug_boxes_image_idx'", "in", "data_dict", "else", "0", "\n", "gt_boxes_num", "=", "data_dict", "[", "'gt_boxes'", "]", ".", "shape", "[", "0", "]", "-", "aug_boxes_num", "\n", "image_idx", "=", "int", "(", "data_dict", "[", "'frame_id'", "]", ")", "\n", "assert", "gt_boxes_num", "==", "data_dict", "[", "\"gt_boxes_inds\"", "]", ".", "shape", "[", "0", "]", "\n", "for", "idx", "in", "range", "(", "gt_boxes_num", ")", ":", "\n", "            ", "gt_box", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "idx", "]", "\n", "gt_name", "=", "data_dict", "[", "'gt_names'", "]", "[", "idx", "]", "\n", "# print(\"self.bmatch_infos[gt_names]\", self.bmatch_infos[gt_names].keys())", "\n", "# print(\"gt_names\", gt_names, gt_boxes_num, aug_boxes_num, data_dict[\"gt_boxes_inds\"])", "\n", "if", "gt_name", "in", "self", ".", "class_names", ":", "\n", "                ", "gt_box_id", "=", "data_dict", "[", "\"gt_boxes_inds\"", "]", "[", "idx", "]", "\n", "file_path", "=", "self", ".", "mlt_bm_root", "[", "gt_name", "]", "/", "\"{}_{}.pkl\"", ".", "format", "(", "image_idx", ",", "gt_box_id", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "obj_points", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "obj_points", "=", "obj_points", ".", "reshape", "(", "\n", "[", "-", "1", ",", "self", ".", "load_point_features", "]", ")", "[", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gtrotation", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "gt_box", "[", "6", "]", ")", "\n", "obj_points", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "obj_points", ",", "gtrotation", ")", "+", "gt_box", "[", ":", "3", "]", "\n", "obj_points_list", ".", "append", "(", "obj_points", ")", "\n", "# else:", "\n", "#     print(\"found \", gt_name,\" skip\")", "\n", "", "", "if", "\"bm_points\"", "in", "data_dict", ":", "\n", "            ", "data_dict", "[", "'bm_points'", "]", ".", "extend", "(", "obj_points_list", ")", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "'bm_points'", "]", "=", "obj_points_list", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.add_sampled_boxes_best_match_points_to_scene": [[79, 99], ["range", "data_dict[].extend", "[].astype", "utils.point_box_utils.get_yaw_rotation", "obj_points_list.append", "open", "pickle.load", "numpy.einsum", "pickle.load.reshape"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation"], ["", "def", "add_sampled_boxes_best_match_points_to_scene", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "aug_boxes_image_idx", "=", "data_dict", "[", "'aug_boxes_image_idx'", "]", "\n", "aug_length", "=", "aug_boxes_image_idx", ".", "shape", "[", "0", "]", "\n", "aug_boxes_gt_idx", "=", "data_dict", "[", "'aug_boxes_gt_idx'", "]", "\n", "aug_box", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "-", "aug_length", ":", "]", "\n", "aug_box_names", "=", "data_dict", "[", "'gt_names'", "]", "[", "-", "aug_length", ":", "]", "\n", "obj_points_list", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "aug_length", ")", ":", "\n", "            ", "gt_box", "=", "aug_box", "[", "ind", "]", "\n", "gt_name", "=", "aug_box_names", "[", "ind", "]", "\n", "file_path", "=", "self", ".", "mlt_bm_root", "[", "gt_name", "]", "/", "\"{}_{}.pkl\"", ".", "format", "(", "aug_boxes_image_idx", "[", "ind", "]", ",", "aug_boxes_gt_idx", "[", "ind", "]", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "obj_points", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "obj_points", "=", "obj_points", ".", "reshape", "(", "\n", "[", "-", "1", ",", "self", ".", "load_point_features", "]", ")", "[", ":", ",", ":", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gtrotation", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "gt_box", "[", "6", "]", ")", "\n", "obj_points", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "obj_points", ",", "gtrotation", ")", "+", "gt_box", "[", ":", "3", "]", "\n", "obj_points_list", ".", "append", "(", "obj_points", ")", "\n", "", "data_dict", "[", "'bm_points'", "]", ".", "extend", "(", "obj_points_list", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.filter_bm": [[101, 195], ["numpy.linalg.norm", "numpy.argsort", "numpy.concatenate", "numpy.round().astype", "multi_best_match_querier.MltBestMatchQuerier.get_coords", "len", "range", "len", "len", "len", "len", "numpy.arange().reshape", "len", "multi_best_match_querier.MltBestMatchQuerier.get_coords", "numpy.concatenate", "multi_best_match_querier.MltBestMatchQuerier.get_coords", "coverage_rate_lst.append", "keep_mask.astype.astype.astype", "multi_best_match_querier.MltBestMatchQuerier.get_nearest_points", "numpy.ones_like", "numpy.cumsum", "numpy.flip", "numpy.ones_like", "multi_best_match_querier.MltBestMatchQuerier.propagate_323", "data_dict.update", "numpy.round", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.mean", "numpy.zeros", "multi_best_match_querier.MltBestMatchQuerier.get_nearest_points", "multi_best_match_querier.MltBestMatchQuerier.get_nearest_points", "multi_best_match_querier.MltBestMatchQuerier.get_nearest_points", "numpy.ones_like", "numpy.maximum", "numpy.ones_like", "multi_best_match_querier.MltBestMatchQuerier.expand_voxel", "numpy.concatenate", "numpy.cumsum", "multi_best_match_querier.MltBestMatchQuerier.propagate_323", "range", "numpy.arange", "utils.point_box_utils.points_in_box_3d_label", "numpy.cumsum", "len", "numpy.tile", "max", "other_bm_points_lst.append", "multi_best_match_querier.MltBestMatchQuerier.append", "miss_bm_points_lst.append", "numpy.flip", "multi_best_match_querier.MltBestMatchQuerier.combine_lst", "multi_best_match_querier.MltBestMatchQuerier.combine_lst", "multi_best_match_querier.MltBestMatchQuerier.combine_lst", "multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "len", "len", "numpy.cumsum", "numpy.cumsum", "numpy.array", "numpy.cumsum"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_nearest_points", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.propagate_323", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_nearest_points", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_nearest_points", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_nearest_points", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.expand_voxel", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.propagate_323", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.points_in_box_3d_label", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.combine_lst", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.combine_lst", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.combine_lst", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers"], ["", "def", "filter_bm", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "gt_boxes_filtered", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "data_dict", "[", "'gt_boxes_mask'", "]", "]", "if", "'gt_boxes_mask'", "in", "data_dict", "else", "data_dict", "[", "'gt_boxes'", "]", "\n", "\n", "assert", "len", "(", "gt_boxes_filtered", ")", "==", "len", "(", "data_dict", "[", "'bm_points'", "]", ")", ",", "\"{}_{}\"", ".", "format", "(", "len", "(", "data_dict", "[", "'gt_boxes'", "]", ")", ",", "len", "(", "data_dict", "[", "'bm_points'", "]", ")", ")", "\n", "boxes_xy_dist", "=", "np", ".", "linalg", ".", "norm", "(", "gt_boxes_filtered", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "-", "1", ")", "\n", "box_inds", "=", "np", ".", "argsort", "(", "boxes_xy_dist", ")", "\n", "gt_boxes", ",", "bm_points_lst", "=", "gt_boxes_filtered", "[", "box_inds", ",", ":", "]", ",", "[", "data_dict", "[", "'bm_points'", "]", "[", "box_inds", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "box_inds", ")", ")", "]", "\n", "box_labels", "=", "np", ".", "arange", "(", "len", "(", "gt_boxes_filtered", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "1", "\n", "boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "box_labels", "]", ",", "axis", "=", "-", "1", ")", "\n", "pointwise_box_label", "=", "np", ".", "round", "(", "point_box_utils", ".", "points_in_box_3d_label", "(", "data_dict", "[", "\"points\"", "]", "[", ":", ",", ":", "3", "]", ",", "boxes", ",", "slack", "=", "1.0", ",", "shift", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.15", ",", "0.", ",", "0.", ",", "0.", "]", "]", ")", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "_", ",", "raw_sphere_points", ",", "raw_sphere_coords", ",", "raw_expand_sphere_coords", ",", "voxelwise_mask", ",", "sphere_coords_min", ",", "nx", ",", "ny", ",", "nz", ",", "_", "=", "self", ".", "get_coords", "(", "data_dict", "[", "\"points\"", "]", ",", "nx", "=", "None", ",", "ny", "=", "None", ",", "nz", "=", "None", ",", "sphere_coords_min", "=", "None", ")", "\n", "occ_mask", "=", "(", "np", ".", "cumsum", "(", "voxelwise_mask", ",", "axis", "=", "0", ")", ">", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "raw_points_len", "=", "len", "(", "data_dict", "[", "\"points\"", "]", ")", "\n", "other_bm_points_lst", ",", "self_bm_points_lst", ",", "miss_bm_points_lst", ",", "coverage_rate_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "self", ".", "vis", ":", "\n", "            ", "other_occluder_mask", ",", "miss_tot_mask", ",", "bm_tot_mask", ",", "other_tot_mask", "=", "np", ".", "zeros", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "np", ".", "zeros", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "np", ".", "zeros", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "np", ".", "zeros", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "bm_points_lst", ")", ")", ":", "\n", "            ", "obj_points", "=", "data_dict", "[", "\"points\"", "]", "[", ":", "raw_points_len", ",", ":", "]", "[", "pointwise_box_label", "==", "(", "i", "+", "1", ")", ",", ":", "]", "\n", "avg_feature", "=", "np", ".", "mean", "(", "obj_points", "[", ":", ",", "3", ":", "self", ".", "num_point_features", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "if", "len", "(", "obj_points", ")", ">", "0", "else", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_point_features", "-", "3", "]", ")", "\n", "_", ",", "obj_sphere_points", ",", "obj_sphere_coords", ",", "obj_expand_sphere_coords", ",", "obj_voxelwise_mask", ",", "_", ",", "_", ",", "_", ",", "_", ",", "num_unique_obj", "=", "self", ".", "get_coords", "(", "obj_points", ",", "nx", "=", "nx", ",", "ny", "=", "ny", ",", "nz", "=", "nz", ",", "sphere_coords_min", "=", "sphere_coords_min", ",", "expand", "=", "False", ",", "x_expand", "=", "True", ")", "\n", "\n", "bm_points", "=", "np", ".", "concatenate", "(", "[", "bm_points_lst", "[", "i", "]", ",", "np", ".", "tile", "(", "avg_feature", ",", "(", "bm_points_lst", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bm_points", ",", "bm_sphere_points", ",", "bm_sphere_coords", ",", "bm_expand_sphere_coords", ",", "bm_voxelwise_mask", ",", "_", ",", "_", ",", "_", ",", "_", ",", "num_unique_bm", "=", "self", ".", "get_coords", "(", "bm_points", ",", "nx", "=", "nx", ",", "ny", "=", "ny", ",", "nz", "=", "nz", ",", "sphere_coords_min", "=", "sphere_coords_min", ",", "expand", "=", "False", ")", "\n", "coverage_rate_lst", ".", "append", "(", "num_unique_obj", "/", "max", "(", "1", ",", "num_unique_bm", ")", ")", "\n", "\n", "keep_mask", "=", "1", "-", "obj_voxelwise_mask", "[", "bm_sphere_coords", "[", "...", ",", "0", "]", ",", "bm_sphere_coords", "[", "...", ",", "1", "]", ",", "bm_sphere_coords", "[", "...", ",", "2", "]", "]", "\n", "rmv_miss_filter_mask", "=", "occ_mask", "[", "bm_sphere_coords", "[", "...", ",", "0", "]", ",", "bm_sphere_coords", "[", "...", ",", "1", "]", ",", "bm_sphere_coords", "[", "...", ",", "2", "]", "]", "\n", "bm_occ_mask", "=", "(", "np", ".", "cumsum", "(", "bm_voxelwise_mask", ",", "axis", "=", "0", ")", "<", "1.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "rmv_self_filter_mask", "=", "bm_occ_mask", "[", "bm_sphere_coords", "[", "...", ",", "0", "]", ",", "bm_sphere_coords", "[", "...", ",", "1", "]", ",", "bm_sphere_coords", "[", "...", ",", "2", "]", "]", "\n", "\n", "if", "self", ".", "vis", ":", "\n", "                ", "miss_mask", "=", "(", "keep_mask", "*", "rmv_self_filter_mask", "*", "(", "1", "-", "rmv_miss_filter_mask", ")", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "self_mask", "=", "(", "keep_mask", "*", "(", "1", "-", "rmv_self_filter_mask", ")", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "other_mask", "=", "(", "keep_mask", "*", "rmv_miss_filter_mask", "*", "rmv_self_filter_mask", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "miss_sphere_coords", ",", "miss_points", "=", "self", ".", "get_nearest_points", "(", "miss_mask", ",", "bm_sphere_points", ",", "bm_sphere_coords", ",", "bm_points", ",", "axis", "=", "0", ")", "\n", "self_sphere_coords", ",", "self_points", "=", "self", ".", "get_nearest_points", "(", "self_mask", ",", "bm_sphere_points", ",", "bm_sphere_coords", ",", "bm_points", ",", "axis", "=", "0", ")", "\n", "other_sphere_coords", ",", "other_points", "=", "self", ".", "get_nearest_points", "(", "other_mask", ",", "bm_sphere_points", ",", "bm_sphere_coords", ",", "bm_points", ",", "axis", "=", "0", ")", "\n", "other_bm_points_lst", ".", "append", "(", "other_points", ")", ",", "self_bm_points_lst", ".", "append", "(", "self_points", ")", ",", "miss_bm_points_lst", ".", "append", "(", "miss_points", ")", "\n", "miss_tot_mask", "[", "miss_sphere_coords", "[", "...", ",", "0", "]", ",", "miss_sphere_coords", "[", "...", ",", "1", "]", ",", "miss_sphere_coords", "[", "...", ",", "2", "]", "]", "=", "np", ".", "ones_like", "(", "miss_sphere_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "bm_tot_mask", "=", "np", ".", "maximum", "(", "bm_tot_mask", ",", "bm_voxelwise_mask", ")", "\n", "other_tot_mask", "[", "other_sphere_coords", "[", "...", ",", "0", "]", ",", "other_sphere_coords", "[", "...", ",", "1", "]", ",", "other_sphere_coords", "[", "...", ",", "2", "]", "]", "=", "np", ".", "ones_like", "(", "other_sphere_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "if", "self", ".", "rmv_self_occ", ":", "\n", "                ", "keep_mask", "*=", "rmv_self_filter_mask", "\n", "", "if", "self", ".", "rmv_miss", ":", "\n", "                ", "keep_mask", "*=", "rmv_miss_filter_mask", "\n", "\n", "", "keep_mask", "=", "keep_mask", ".", "astype", "(", "np", ".", "bool", ")", "\n", "bm_sphere_coords", ",", "bm_points", "=", "self", ".", "get_nearest_points", "(", "keep_mask", ",", "bm_sphere_points", ",", "bm_sphere_coords", ",", "bm_points", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "expand", ":", "\n", "                ", "bm_expand_sphere_coords", "=", "self", ".", "expand_voxel", "(", "bm_sphere_coords", ",", "nx", ",", "ny", ",", "nz", ")", "\n", "", "else", ":", "\n", "                ", "bm_expand_sphere_coords", "=", "bm_sphere_coords", "\n", "\n", "## update voxel mask and occ mask", "\n", "", "voxelwise_mask", "[", "bm_expand_sphere_coords", "[", "...", ",", "0", "]", ",", "bm_expand_sphere_coords", "[", "...", ",", "1", "]", ",", "bm_expand_sphere_coords", "[", "...", ",", "2", "]", "]", "=", "np", ".", "ones_like", "(", "bm_expand_sphere_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "occ_mask", "=", "(", "np", ".", "cumsum", "(", "voxelwise_mask", ",", "axis", "=", "0", ")", ">", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "add_bm_2_raw", ":", "\n", "                ", "data_dict", "[", "\"points\"", "]", "=", "np", ".", "concatenate", "(", "[", "data_dict", "[", "\"points\"", "]", ",", "bm_points", "]", ",", "axis", "=", "0", ")", "\n", "", "", "if", "self", ".", "vis", ":", "\n", "            ", "self_cum", "=", "np", ".", "cumsum", "(", "bm_tot_mask", ",", "axis", "=", "0", ")", "\n", "self_reverse_cum", "=", "np", ".", "flip", "(", "np", ".", "cumsum", "(", "np", ".", "flip", "(", "bm_tot_mask", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "self_tot_occ_mask", "=", "(", "self_cum", ">", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# - bm_tot_mask.astype(np.uint8)", "\n", "self_limit_occ_mask", "=", "(", "self_reverse_cum", ">", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "self_tot_occ_mask", "\n", "\n", "other_occluder_mask", "[", "raw_sphere_coords", "[", "...", ",", "0", "]", ",", "raw_sphere_coords", "[", "...", ",", "1", "]", ",", "raw_sphere_coords", "[", "...", ",", "2", "]", "]", "=", "np", ".", "ones_like", "(", "raw_sphere_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "other_full_tot_occ_mask", "=", "(", "np", ".", "cumsum", "(", "other_occluder_mask", ",", "axis", "=", "0", ")", ">", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "self", ".", "propagate_323", "(", "other_tot_mask", ")", "\n", "other_tot_occ_mask", "=", "other_full_tot_occ_mask", "*", "(", "1", "-", "self_tot_occ_mask", ")", "\n", "miss_full_tot_occ_mask", "=", "self", ".", "propagate_323", "(", "miss_tot_mask", ")", "\n", "miss_tot_occ_mask", "=", "miss_full_tot_occ_mask", "*", "(", "1", "-", "self_tot_occ_mask", ")", "\n", "\n", "data_dict", ".", "update", "(", "{", "\n", "'miss_points'", ":", "self", ".", "combine_lst", "(", "miss_bm_points_lst", ")", ",", "\n", "'self_points'", ":", "self", ".", "combine_lst", "(", "self_bm_points_lst", ")", ",", "\n", "'other_points'", ":", "self", ".", "combine_lst", "(", "other_bm_points_lst", ")", ",", "\n", "'miss_occ_points'", ":", "self", ".", "get_voxel_centers", "(", "miss_tot_occ_mask", ",", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ",", "\n", "'miss_full_occ_points'", ":", "self", ".", "get_voxel_centers", "(", "miss_full_tot_occ_mask", ",", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ",", "\n", "'self_occ_points'", ":", "self", ".", "get_voxel_centers", "(", "self_tot_occ_mask", ",", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ",", "\n", "'self_limit_occ_mask'", ":", "self", ".", "get_voxel_centers", "(", "self_limit_occ_mask", ",", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ",", "\n", "'other_occ_points'", ":", "self", ".", "get_voxel_centers", "(", "other_tot_occ_mask", ",", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ",", "\n", "'other_full_occ_points'", ":", "self", ".", "get_voxel_centers", "(", "other_full_tot_occ_mask", ",", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ",", "\n", "}", ")", "\n", "# if len(coverage_rate_lst) == 0:", "\n", "#     data_dict[\"coverage_rates\"] = np.zeros([0,1], dtype=np.float32)", "\n", "# elif len(coverage_rate_lst) == 1:", "\n", "#     data_dict[\"coverage_rates\"] = np.asarray(coverage_rate_lst[0]).reshape(-1, 1)", "\n", "# else:", "\n", "#     data_dict[\"coverage_rates\"] = np.stack(coverage_rate_lst, axis=0)", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers": [[197, 202], ["numpy.stack", "utils.coords_utils.uvd2absxyz_np", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz_np"], ["", "def", "get_voxel_centers", "(", "self", ",", "mask", ",", "sphere_coords_min", ",", "sphere_coords_res", ")", ":", "\n", "        ", "coords", "=", "np", ".", "stack", "(", "np", ".", "nonzero", "(", "mask", ")", ",", "axis", "=", "-", "1", ")", "\n", "# print(\"coords\", coords.shape, sphere_coords_min.shape, sphere_coords_res.shape)", "\n", "sphere_points", "=", "sphere_coords_min", "+", "(", "coords", "+", "0.5", ")", "*", "sphere_coords_res", "\n", "return", "coords_utils", ".", "uvd2absxyz_np", "(", "sphere_points", "[", "...", ",", "0", "]", ",", "sphere_points", "[", "...", ",", "1", "]", ",", "sphere_points", "[", "...", ",", "2", "]", ",", "type", "=", "\"sphere\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.propagate_323": [[204, 208], ["numpy.max", "numpy.tile"], "methods", ["None"], ["", "def", "propagate_323", "(", "self", ",", "mask_3d", ")", ":", "\n", "        ", "mask_2d", "=", "np", ".", "max", "(", "mask_3d", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "mask_3d", "=", "np", ".", "tile", "(", "mask_2d", ",", "[", "mask_3d", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "return", "mask_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.exclude_map": [[210, 218], ["numpy.arange", "numpy.stack().reshape", "numpy.maximum", "numpy.zeros_like", "numpy.zeros_like", "len", "numpy.array", "numpy.stack", "numpy.expand_dims"], "methods", ["None"], ["", "def", "exclude_map", "(", "self", ",", "occ_coords", ",", "x_epansion", "=", "2", ")", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "-", "x_epansion", ",", "1", ")", "\n", "y", ",", "z", "=", "np", ".", "zeros_like", "(", "x", ")", ",", "np", ".", "zeros_like", "(", "x", ")", "\n", "xyz_shift", "=", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "1", ",", "len", "(", "x", ")", ",", "3", ")", "\n", "\n", "expand_occ_coords", "=", "(", "np", ".", "expand_dims", "(", "occ_coords", ",", "axis", "=", "1", ")", "+", "xyz_shift", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "expand_occ_coords", "=", "np", ".", "maximum", "(", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "expand_occ_coords", ")", "\n", "return", "expand_occ_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.expand_voxel": [[220, 232], ["numpy.arange", "numpy.arange", "numpy.meshgrid", "numpy.ones_like", "numpy.stack().reshape", "numpy.minimum", "numpy.maximum", "numpy.array", "numpy.stack", "numpy.array", "numpy.expand_dims"], "methods", ["None"], ["", "def", "expand_voxel", "(", "self", ",", "occ_coords", ",", "nx", ",", "ny", ",", "nz", ",", "yz_epansion", "=", "2", ")", ":", "\n", "        ", "y_ind", "=", "np", ".", "arange", "(", "-", "1", ",", "yz_epansion", ")", "\n", "z_ind", "=", "np", ".", "arange", "(", "-", "1", ",", "yz_epansion", ")", "\n", "y", ",", "z", "=", "np", ".", "meshgrid", "(", "y_ind", ",", "z_ind", ")", "\n", "x", "=", "np", ".", "ones_like", "(", "y", ")", "\n", "xyz_shift", "=", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "1", ",", "9", ",", "3", ")", "\n", "xyz_shift", "[", "0", ",", "4", ",", "0", "]", "=", "0", "\n", "# print(\"xyz_shift\", y.shape, y, xyz_shift.shape, xyz_shift[0,0], xyz_shift[0,1], xyz_shift[0,2])", "\n", "expand_occ_coords", "=", "(", "np", ".", "expand_dims", "(", "occ_coords", ",", "axis", "=", "1", ")", "+", "xyz_shift", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "expand_occ_coords", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "expand_occ_coords", ")", ",", "np", ".", "array", "(", "[", "[", "nx", "-", "1", ",", "ny", "-", "1", ",", "nz", "-", "1", "]", "]", ")", ")", "\n", "\n", "return", "expand_occ_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_nearest_points": [[234, 242], ["numpy.argsort", "numpy.unique"], "methods", ["None"], ["", "def", "get_nearest_points", "(", "self", ",", "keep_mask", ",", "bm_sphere_points", ",", "bm_sphere_coords", ",", "bm_points", ",", "axis", "=", "0", ")", ":", "\n", "        ", "bm_sphere_coords", "=", "bm_sphere_coords", "[", "keep_mask", ",", ":", "]", "\n", "bm_sphere_points", "=", "bm_sphere_points", "[", "keep_mask", ",", ":", "]", "\n", "bm_points", "=", "bm_points", "[", "keep_mask", ",", ":", "]", "\n", "closeind", "=", "np", ".", "argsort", "(", "bm_sphere_points", "[", "...", ",", "0", "]", ")", "\n", "bm_points", ",", "bm_sphere_coords", "=", "bm_points", "[", "closeind", ",", ":", "]", ",", "bm_sphere_coords", "[", "closeind", ",", ":", "]", "\n", "uniq_coords", ",", "indices", "=", "np", ".", "unique", "(", "bm_sphere_coords", ",", "axis", "=", "0", ",", "return_index", "=", "True", ")", "\n", "return", "bm_sphere_coords", ",", "bm_points", "[", "indices", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_coords": [[244, 266], ["utils.coords_utils.absxyz_2_spherexyz_np", "numpy.floor_divide().astype", "numpy.zeros", "numpy.ones_like", "list", "len", "multi_best_match_querier.MltBestMatchQuerier.expand_voxel", "multi_best_match_querier.MltBestMatchQuerier.exclude_map", "numpy.min", "numpy.asarray", "numpy.floor_divide", "numpy.max", "numpy.all", "numpy.all", "numpy.unique", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.absxyz_2_spherexyz_np", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.expand_voxel", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.exclude_map"], ["", "def", "get_coords", "(", "self", ",", "points", ",", "nx", "=", "None", ",", "ny", "=", "None", ",", "nz", "=", "None", ",", "sphere_coords_min", "=", "None", ",", "expand", "=", "True", ",", "x_expand", "=", "False", ")", ":", "\n", "        ", "raw_sphere_points", "=", "coords_utils", ".", "absxyz_2_spherexyz_np", "(", "points", "[", "...", ",", ":", "3", "]", ")", "\n", "if", "sphere_coords_min", "is", "None", ":", "\n", "            ", "sphere_coords_min", "=", "np", ".", "min", "(", "raw_sphere_points", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "asarray", "(", "\n", "[", "[", "0.2", "*", "10", ",", "0.0875", "*", "2", "*", "10", ",", "0.4203125", "*", "10", "]", "]", ")", "\n", "", "raw_sphere_coords", "=", "np", ".", "floor_divide", "(", "raw_sphere_points", "-", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "unique_occupied", "=", "0", "\n", "if", "nx", "is", "None", ":", "\n", "            ", "nx", ",", "ny", ",", "nz", "=", "list", "(", "np", ".", "max", "(", "raw_sphere_coords", ",", "axis", "=", "0", ")", ")", "\n", "nx", ",", "ny", ",", "nz", "=", "nx", "+", "1", "+", "10", ",", "ny", "+", "1", "+", "10", ",", "nz", "+", "1", "+", "10", "\n", "", "else", ":", "\n", "            ", "keep_mask", "=", "np", ".", "all", "(", "raw_sphere_coords", ">=", "0", ",", "axis", "=", "-", "1", ")", "&", "np", ".", "all", "(", "raw_sphere_coords", "<", "np", ".", "array", "(", "[", "[", "nx", ",", "ny", ",", "nz", "]", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "raw_sphere_points", "=", "raw_sphere_points", "[", "keep_mask", ",", ":", "]", "\n", "raw_sphere_coords", "=", "raw_sphere_coords", "[", "keep_mask", ",", ":", "]", "\n", "points", "=", "points", "[", "keep_mask", ",", ":", "]", "\n", "unique_occupied", "=", "len", "(", "np", ".", "unique", "(", "raw_sphere_coords", ",", "axis", "=", "0", ")", ")", "\n", "# print(\"nx\",nx,ny,nz)", "\n", "", "raw_expand_sphere_coords", "=", "self", ".", "expand_voxel", "(", "raw_sphere_coords", ",", "nx", ",", "ny", ",", "nz", ")", "if", "(", "expand", "and", "self", ".", "expand", ")", "else", "raw_sphere_coords", "\n", "raw_expand_sphere_coords", "=", "self", ".", "exclude_map", "(", "raw_sphere_coords", ")", "if", "x_expand", "else", "raw_expand_sphere_coords", "\n", "voxelwise_mask", "=", "np", ".", "zeros", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "voxelwise_mask", "[", "raw_expand_sphere_coords", "[", "...", ",", "0", "]", ",", "raw_expand_sphere_coords", "[", "...", ",", "1", "]", ",", "raw_expand_sphere_coords", "[", "...", ",", "2", "]", "]", "=", "np", ".", "ones_like", "(", "raw_expand_sphere_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "points", ",", "raw_sphere_points", ",", "raw_sphere_coords", ",", "raw_expand_sphere_coords", ",", "voxelwise_mask", ",", "sphere_coords_min", ",", "nx", ",", "ny", ",", "nz", ",", "unique_occupied", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.combine_lst": [[269, 276], ["len", "numpy.concatenate", "len", "numpy.zeros"], "methods", ["None"], ["", "def", "combine_lst", "(", "self", ",", "bm_points_lst", ")", ":", "\n", "        ", "if", "len", "(", "bm_points_lst", ")", ">", "1", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "bm_points_lst", ",", "axis", "=", "0", ")", "[", "...", ",", ":", "3", "]", "\n", "", "elif", "len", "(", "bm_points_lst", ")", "==", "1", ":", "\n", "            ", "return", "bm_points_lst", "[", "0", "]", "[", "...", ",", ":", "3", "]", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "[", "0", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.__call__": [[278, 297], ["multi_best_match_querier.MltBestMatchQuerier.add_gtbox_best_match_points_to_scene", "multi_best_match_querier.MltBestMatchQuerier.combine_lst", "multi_best_match_querier.MltBestMatchQuerier.add_sampled_boxes_best_match_points_to_scene", "multi_best_match_querier.MltBestMatchQuerier.filter_bm", "multi_best_match_querier.MltBestMatchQuerier.querier_cfg.get", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.add_gtbox_best_match_points_to_scene", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.combine_lst", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.add_sampled_boxes_best_match_points_to_scene", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.filter_bm"], ["", "", "def", "__call__", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "# data_dict['bm_points'] = []", "\n", "data_dict", "=", "self", ".", "add_gtbox_best_match_points_to_scene", "(", "data_dict", ")", "\n", "if", "\"aug_boxes_image_idx\"", "in", "data_dict", "and", "'pre_aug_bm'", "not", "in", "data_dict", ":", "\n", "            ", "data_dict", "=", "self", ".", "add_sampled_boxes_best_match_points_to_scene", "(", "data_dict", ")", "\n", "", "if", "self", ".", "querier_cfg", ".", "get", "(", "\"ABLATION\"", ",", "None", ")", "is", "not", "None", "and", "len", "(", "data_dict", "[", "'bm_points'", "]", ")", ">", "0", ":", "\n", "            ", "data_dict", "=", "self", ".", "filter_bm", "(", "data_dict", ")", "\n", "", "data_dict", "[", "'bm_points'", "]", "=", "self", ".", "combine_lst", "(", "data_dict", "[", "'bm_points'", "]", ")", "\n", "# print(data_dict['bm_points'].shape)", "\n", "\n", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.__init__": [[10, 24], ["best_match_querier.BestMatchQuerier.root_path.resolve", "open", "pickle.load", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "querier_cfg", ",", "class_names", ",", "db_infos", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "querier_cfg", "=", "querier_cfg", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "bmatch_infos", "=", "{", "}", "\n", "\n", "for", "bm_info_path", "in", "querier_cfg", ".", "BM_INFO_PATH", ":", "\n", "            ", "bm_info_path", "=", "self", ".", "root_path", ".", "resolve", "(", ")", "/", "bm_info_path", "\n", "with", "open", "(", "str", "(", "bm_info_path", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "bmatch_infos", "=", "infos", "\n", "\n", "", "", "self", ".", "db_infos", "=", "db_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.__getstate__": [[26, 30], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.__setstate__": [[32, 34], ["best_match_querier.BestMatchQuerier.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.mirror": [[36, 39], ["numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "mirror", "(", "self", ",", "pnts", ",", "lastchannel", "=", "3", ")", ":", "\n", "        ", "mirror_pnts", "=", "np", ".", "concatenate", "(", "[", "pnts", "[", "...", ",", "0", ":", "1", "]", ",", "-", "pnts", "[", "...", ",", "1", ":", "2", "]", ",", "pnts", "[", "...", ",", "2", ":", "lastchannel", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "pnts", ",", "mirror_pnts", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.add_gtbox_best_match_points_to_scene": [[41, 66], ["int", "range", "utils.point_box_utils.get_yaw_rotation", "numpy.einsum", "best_match_querier.BestMatchQuerier.mirror", "utils.point_box_utils.get_yaw_rotation", "obj_points_list.append", "numpy.fromfile().reshape", "numpy.einsum", "numpy.fromfile", "str"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.mirror", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation"], ["", "def", "add_gtbox_best_match_points_to_scene", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "obj_points_list", "=", "[", "]", "\n", "aug_boxes_num", "=", "data_dict", "[", "'aug_boxes_image_idx'", "]", ".", "shape", "[", "0", "]", "if", "'aug_boxes_image_idx'", "in", "data_dict", "else", "0", "\n", "gt_boxes_num", "=", "data_dict", "[", "'gt_boxes'", "]", ".", "shape", "[", "0", "]", "-", "aug_boxes_num", "\n", "image_idx", "=", "int", "(", "data_dict", "[", "'frame_id'", "]", ")", "\n", "for", "idx", "in", "range", "(", "gt_boxes_num", ")", ":", "\n", "            ", "gt_box", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "idx", "]", "\n", "gt_name", "=", "data_dict", "[", "'gt_names'", "]", "[", "idx", "]", "\n", "# print(\"self.bmatch_infos[gt_names]\", self.bmatch_infos[gt_names].keys())", "\n", "# print(\"gt_names\", gt_names, gt_boxes_num, aug_boxes_num, data_dict[\"gt_boxes_inds\"])", "\n", "if", "gt_name", "in", "self", ".", "class_names", ":", "\n", "                ", "info", "=", "self", ".", "bmatch_infos", "[", "gt_name", "]", "[", "(", "image_idx", ",", "data_dict", "[", "\"gt_boxes_inds\"", "]", "[", "idx", "]", ")", "]", "\n", "file_path", "=", "self", ".", "root_path", "/", "info", "[", "'path'", "]", "\n", "obj_points", "=", "np", ".", "fromfile", "(", "str", "(", "file_path", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "self", ".", "querier_cfg", ".", "NUM_POINT_FEATURES", "]", ")", "[", ":", ",", ":", "3", "]", "\n", "rverbm", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "-", "info", "[", "'box3d_lidar'", "]", "[", "6", "]", ")", "\n", "obj_points", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "obj_points", ",", "rverbm", ")", "\n", "obj_points", "=", "self", ".", "mirror", "(", "obj_points", ")", "\n", "gtrotation", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "gt_box", "[", "6", "]", ")", "\n", "obj_points", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "obj_points", ",", "gtrotation", ")", "+", "gt_box", "[", ":", "3", "]", "\n", "obj_points_list", ".", "append", "(", "obj_points", ")", "\n", "# else:", "\n", "#     print(\"found \", gt_name,\" skip\")", "\n", "", "", "data_dict", "[", "'bm_points'", "]", "=", "obj_points_list", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.add_sampled_boxes_best_match_points_to_scene": [[67, 89], ["range", "data_dict[].extend", "utils.point_box_utils.get_yaw_rotation", "numpy.einsum", "best_match_querier.BestMatchQuerier.mirror", "utils.point_box_utils.get_yaw_rotation", "obj_points_list.append", "numpy.fromfile().reshape", "numpy.einsum", "numpy.fromfile", "str"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.mirror", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation"], ["", "def", "add_sampled_boxes_best_match_points_to_scene", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "aug_boxes_image_idx", "=", "data_dict", "[", "'aug_boxes_image_idx'", "]", "\n", "aug_length", "=", "aug_boxes_image_idx", ".", "shape", "[", "0", "]", "\n", "aug_boxes_gt_idx", "=", "data_dict", "[", "'aug_boxes_gt_idx'", "]", "\n", "aug_box", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "-", "aug_length", ":", "]", "\n", "aug_box_names", "=", "data_dict", "[", "'gt_names'", "]", "[", "-", "aug_length", ":", "]", "\n", "obj_points_list", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "aug_length", ")", ":", "\n", "            ", "image_idx", ",", "idx", "=", "aug_boxes_image_idx", "[", "ind", "]", ",", "aug_boxes_gt_idx", "[", "ind", "]", "\n", "info", "=", "self", ".", "bmatch_infos", "[", "aug_box_names", "[", "ind", "]", "]", "[", "(", "image_idx", ",", "idx", ")", "]", "\n", "gt_box", "=", "aug_box", "[", "ind", "]", "\n", "file_path", "=", "self", ".", "root_path", "/", "info", "[", "'path'", "]", "\n", "obj_points", "=", "np", ".", "fromfile", "(", "str", "(", "file_path", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "self", ".", "querier_cfg", ".", "NUM_POINT_FEATURES", "]", ")", "[", ":", ",", ":", "3", "]", "\n", "rverbm", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "-", "info", "[", "'box3d_lidar'", "]", "[", "6", "]", ")", "\n", "obj_points", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "obj_points", ",", "rverbm", ")", "\n", "obj_points", "=", "self", ".", "mirror", "(", "obj_points", ")", "\n", "gtrotation", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "gt_box", "[", "6", "]", ")", "\n", "obj_points", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "obj_points", ",", "gtrotation", ")", "+", "gt_box", "[", ":", "3", "]", "\n", "obj_points_list", ".", "append", "(", "obj_points", ")", "\n", "", "data_dict", "[", "'bm_points'", "]", ".", "extend", "(", "obj_points_list", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.__call__": [[90, 111], ["best_match_querier.BestMatchQuerier.add_gtbox_best_match_points_to_scene", "best_match_querier.BestMatchQuerier.add_sampled_boxes_best_match_points_to_scene", "len", "numpy.concatenate", "len", "numpy.array().reshape", "numpy.zeros", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.best_match_querier.BestMatchQuerier.add_gtbox_best_match_points_to_scene", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.add_sampled_boxes_best_match_points_to_scene"], ["", "def", "__call__", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "data_dict", "[", "'bm_points'", "]", "=", "[", "]", "\n", "data_dict", "=", "self", ".", "add_gtbox_best_match_points_to_scene", "(", "data_dict", ")", "\n", "if", "\"aug_boxes_image_idx\"", "in", "data_dict", ":", "\n", "            ", "data_dict", "=", "self", ".", "add_sampled_boxes_best_match_points_to_scene", "(", "data_dict", ")", "\n", "\n", "", "if", "len", "(", "data_dict", "[", "'bm_points'", "]", ")", ">", "1", ":", "\n", "            ", "data_dict", "[", "'bm_points'", "]", "=", "np", ".", "concatenate", "(", "data_dict", "[", "'bm_points'", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "len", "(", "data_dict", "[", "'bm_points'", "]", ")", "==", "1", ":", "\n", "            ", "data_dict", "[", "'bm_points'", "]", "=", "np", ".", "array", "(", "data_dict", "[", "'bm_points'", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "'bm_points'", "]", "=", "np", ".", "zeros", "(", "[", "0", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.__init__": [[9, 76], ["sampler_cfg.PREPARE.items", "sampler_cfg.get", "sampler_cfg.get", "sampler_cfg.get", "sampler_cfg.get", "sampler_cfg.get", "sampler_cfg.get", "numpy.asarray", "sup_gt_sampling.SupGTSampling.root_path.resolve", "sampler_cfg.get", "sampler_cfg.get", "sampler_cfg.get", "x.split", "getattr", "sampler_cfg.GT_SMP.get", "sampler_cfg.GT_SMP.get", "sampler_cfg.GT_SMP.get", "sampler_cfg.GT_SMP.get", "sampler_cfg.GT_SMP.get", "sampler_cfg.GT_SMP.get", "x.split", "int", "sampler_cfg.MLT_BM.get", "sampler_cfg.MLT_BM.get", "sampler_cfg.MLT_BM.get", "sampler_cfg.MLT_BM.get", "sampler_cfg.MLT_BM.get", "sampler_cfg.MLT_BM.get", "x.split", "int", "len", "numpy.arange", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "sampler_cfg", ",", "class_names", ",", "db_infos", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "sampler_cfg", "=", "sampler_cfg", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "db_infos", "=", "db_infos", "\n", "\n", "for", "func_name", ",", "val", "in", "sampler_cfg", ".", "PREPARE", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "db_infos", "=", "getattr", "(", "self", ",", "func_name", ")", "(", "self", ".", "db_infos", ",", "val", ")", "\n", "\n", "", "self", ".", "sample_groups", "=", "{", "}", "\n", "self", ".", "sample_class_num", "=", "{", "}", "\n", "self", ".", "limit_whole_scene", "=", "sampler_cfg", ".", "get", "(", "'LIMIT_WHOLE_SCENE'", ",", "False", ")", "\n", "self", ".", "det_height_shift", "=", "sampler_cfg", ".", "get", "(", "'DETECT_HEIGHT_SHIFT'", ",", "0.0", ")", "\n", "self", ".", "no_stucking", "=", "sampler_cfg", ".", "get", "(", "'NO_STUCKING'", ",", "False", ")", "\n", "self", ".", "drop_rate", "=", "sampler_cfg", ".", "get", "(", "'DROP_RATE'", ",", "0.0", ")", "\n", "\n", "self", ".", "mlt_bm_root", "=", "self", ".", "root_path", ".", "resolve", "(", ")", "/", "sampler_cfg", ".", "get", "(", "'MLT_BM_ROOT'", ",", "None", ")", "\n", "self", ".", "bm_num_point_features", "=", "sampler_cfg", ".", "get", "(", "'BM_NUM_POINT_FEATURES'", ",", "3", ")", "\n", "self", ".", "num_point_features", "=", "sampler_cfg", ".", "get", "(", "'NUM_POINT_FEATURES'", ",", "4", ")", "\n", "\n", "if", "sampler_cfg", ".", "get", "(", "'GT_SMP'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "gt_smp_cfg", "=", "{", "\n", "\"sample_groups\"", ":", "{", "}", ",", "\n", "\"box_range_jitter\"", ":", "sampler_cfg", ".", "GT_SMP", ".", "get", "(", "'BOX_RANGE_JITTER'", ",", "None", ")", ",", "\n", "\"box_rot_jitter\"", ":", "sampler_cfg", ".", "GT_SMP", ".", "get", "(", "'BOX_ROT_JITTER'", ",", "None", ")", ",", "\n", "\"box_yaw_jitter\"", ":", "sampler_cfg", ".", "GT_SMP", ".", "get", "(", "'BOX_YAW_JITTER'", ",", "None", ")", ",", "\n", "\"yaw_type\"", ":", "sampler_cfg", ".", "GT_SMP", ".", "get", "(", "'YAW_TYPE'", ",", "None", ")", ",", "\n", "\"remove_yz_expansion\"", ":", "sampler_cfg", ".", "GT_SMP", ".", "get", "(", "'RMV_YZ_EXPSN'", ",", "0", ")", ",", "\n", "\"dp_rate\"", ":", "sampler_cfg", ".", "GT_SMP", ".", "get", "(", "'DROP_RATE'", ",", "0", ")", ",", "\n", "}", "\n", "for", "x", "in", "sampler_cfg", ".", "GT_SMP", ".", "SAMPLE_GROUPS", ":", "\n", "                ", "class_name", ",", "sample_num", "=", "x", ".", "split", "(", "':'", ")", "\n", "if", "class_name", "not", "in", "class_names", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "gt_smp_cfg", "[", "\"sample_groups\"", "]", "[", "class_name", "]", "=", "int", "(", "sample_num", ")", "\n", "\n", "", "", "if", "sampler_cfg", ".", "get", "(", "'MLT_BM'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "mlt_bm_cfg", "=", "{", "\n", "\"sample_groups\"", ":", "{", "}", ",", "\n", "\"box_range_jitter\"", ":", "sampler_cfg", ".", "MLT_BM", ".", "get", "(", "'BOX_RANGE_JITTER'", ",", "None", ")", ",", "\n", "\"box_rot_jitter\"", ":", "sampler_cfg", ".", "MLT_BM", ".", "get", "(", "'BOX_ROT_JITTER'", ",", "None", ")", ",", "\n", "\"box_yaw_jitter\"", ":", "sampler_cfg", ".", "MLT_BM", ".", "get", "(", "'BOX_YAW_JITTER'", ",", "None", ")", ",", "\n", "\"yaw_type\"", ":", "sampler_cfg", ".", "MLT_BM", ".", "get", "(", "'YAW_TYPE'", ",", "None", ")", ",", "\n", "\"remove_yz_expansion\"", ":", "sampler_cfg", ".", "MLT_BM", ".", "get", "(", "'RMV_YZ_EXPSN'", ",", "0", ")", ",", "\n", "\"dp_rate\"", ":", "sampler_cfg", ".", "MLT_BM", ".", "get", "(", "'DROP_RATE'", ",", "0", ")", ",", "\n", "}", "\n", "for", "x", "in", "sampler_cfg", ".", "MLT_BM", ".", "SAMPLE_GROUPS", ":", "\n", "                ", "class_name", ",", "sample_num", "=", "x", ".", "split", "(", "':'", ")", "\n", "if", "class_name", "not", "in", "class_names", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "mlt_bm_cfg", "[", "\"sample_groups\"", "]", "[", "class_name", "]", "=", "int", "(", "sample_num", ")", "\n", "\n", "\n", "", "", "for", "x", "in", "sampler_cfg", ".", "SAMPLE_GROUPS", ":", "\n", "            ", "class_name", ",", "sample_num", "=", "x", ".", "split", "(", "':'", ")", "\n", "if", "class_name", "not", "in", "class_names", ":", "\n", "                ", "continue", "\n", "", "self", ".", "sample_class_num", "[", "class_name", "]", "=", "sample_num", "\n", "self", ".", "sample_groups", "[", "class_name", "]", "=", "{", "\n", "'sample_num'", ":", "sample_num", ",", "\n", "'pointer'", ":", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ",", "\n", "'indices'", ":", "np", ".", "arange", "(", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ")", "\n", "}", "\n", "\n", "# self.sphere_coords_min = np.asarray([[0, -42.0, -16.9]])", "\n", "", "self", ".", "sphere_coords_res", "=", "np", ".", "asarray", "(", "[", "[", "0.2", ",", "0.0875", "*", "2", ",", "0.4203125", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.__getstate__": [[77, 81], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.__setstate__": [[82, 84], ["sup_gt_sampling.SupGTSampling.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.filter_by_difficulty": [[85, 96], ["db_infos.items", "len", "sup_gt_sampling.SupGTSampling.logger.info", "len"], "methods", ["None"], ["", "def", "filter_by_difficulty", "(", "self", ",", "db_infos", ",", "removed_difficulty", ")", ":", "\n", "        ", "new_db_infos", "=", "{", "}", "\n", "for", "key", ",", "dinfos", "in", "db_infos", ".", "items", "(", ")", ":", "\n", "            ", "pre_len", "=", "len", "(", "dinfos", ")", "\n", "new_db_infos", "[", "key", "]", "=", "[", "\n", "info", "for", "info", "in", "dinfos", "\n", "if", "info", "[", "'difficulty'", "]", "not", "in", "removed_difficulty", "\n", "]", "\n", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Database filter by difficulty %s: %d => %d'", "%", "(", "key", ",", "pre_len", ",", "len", "(", "new_db_infos", "[", "key", "]", ")", ")", ")", "\n", "", "", "return", "new_db_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.filter_by_min_points": [[97, 113], ["name_num.split", "int", "db_infos.keys", "sup_gt_sampling.SupGTSampling.logger.info", "filtered_infos.append", "len", "len"], "methods", ["None"], ["", "def", "filter_by_min_points", "(", "self", ",", "db_infos", ",", "min_gt_points_list", ")", ":", "\n", "        ", "for", "name_num", "in", "min_gt_points_list", ":", "\n", "            ", "name", ",", "min_num", "=", "name_num", ".", "split", "(", "':'", ")", "\n", "min_num", "=", "int", "(", "min_num", ")", "\n", "if", "min_num", ">", "0", "and", "name", "in", "db_infos", ".", "keys", "(", ")", ":", "\n", "                ", "filtered_infos", "=", "[", "]", "\n", "for", "info", "in", "db_infos", "[", "name", "]", ":", "\n", "                    ", "if", "info", "[", "'num_points_in_gt'", "]", ">=", "min_num", ":", "\n", "                        ", "filtered_infos", ".", "append", "(", "info", ")", "\n", "\n", "", "", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'Database filter by min points %s: %d => %d'", "%", "\n", "(", "name", ",", "len", "(", "db_infos", "[", "name", "]", ")", ",", "len", "(", "filtered_infos", ")", ")", ")", "\n", "", "db_infos", "[", "name", "]", "=", "filtered_infos", "\n", "# print(\"!!!!!!!sys.getsizeof, new_db_infos\", get_size(1), get_size(db_infos))", "\n", "", "", "return", "db_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.sample_with_fixed_number": [[115, 133], ["int", "len", "numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "sample_with_fixed_number", "(", "self", ",", "class_name", ",", "sample_group", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            class_name:\n            sample_group:\n        Returns:\n\n        \"\"\"", "\n", "sample_num", ",", "pointer", ",", "indices", "=", "int", "(", "sample_group", "[", "'sample_num'", "]", ")", ",", "sample_group", "[", "'pointer'", "]", ",", "sample_group", "[", "'indices'", "]", "\n", "if", "pointer", ">=", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "db_infos", "[", "class_name", "]", ")", ")", "\n", "pointer", "=", "0", "\n", "\n", "", "sampled_dict", "=", "[", "self", ".", "db_infos", "[", "class_name", "]", "[", "idx", "]", "for", "idx", "in", "indices", "[", "pointer", ":", "pointer", "+", "sample_num", "]", "]", "\n", "pointer", "+=", "sample_num", "\n", "sample_group", "[", "'pointer'", "]", "=", "pointer", "\n", "sample_group", "[", "'indices'", "]", "=", "indices", "\n", "return", "sampled_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.put_boxes_on_road_planes": [[135, 154], ["calib.lidar_to_rect", "calib.rect_to_lidar"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.lidar_to_rect", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.calibration_kitti.Calibration.rect_to_lidar"], ["", "@", "staticmethod", "\n", "def", "put_boxes_on_road_planes", "(", "gt_boxes", ",", "road_planes", ",", "calib", ")", ":", "\n", "        ", "\"\"\"\n        Only validate in KITTIDataset\n        Args:\n            gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n            road_planes: [a, b, c, d]\n            calib:\n\n        Returns:\n        \"\"\"", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "road_planes", "\n", "center_cam", "=", "calib", ".", "lidar_to_rect", "(", "gt_boxes", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "cur_height_cam", "=", "(", "-", "d", "-", "a", "*", "center_cam", "[", ":", ",", "0", "]", "-", "c", "*", "center_cam", "[", ":", ",", "2", "]", ")", "/", "b", "\n", "center_cam", "[", ":", ",", "1", "]", "=", "cur_height_cam", "\n", "cur_lidar_height", "=", "calib", ".", "rect_to_lidar", "(", "center_cam", ")", "[", ":", ",", "2", "]", "\n", "mv_height", "=", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "5", "]", "/", "2", "-", "cur_lidar_height", "\n", "gt_boxes", "[", ":", ",", "2", "]", "-=", "mv_height", "# lidar view", "\n", "return", "gt_boxes", ",", "mv_height", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.add_sampled_boxes_best_match_points_to_scene": [[156, 255], ["sup_gt_sampling.SupGTSampling.sampler_cfg.get", "enumerate", "sup_gt_sampling.SupGTSampling.put_boxes_on_road_planes", "data_dict.pop", "data_dict.pop", "numpy.fromfile().reshape", "numpy.concatenate.reshape().astype", "utils.point_box_utils.get_yaw_rotation", "utils.box_utils.enlarge_box3d", "utils.box_utils.remove_points_in_boxes3d", "len", "numpy.concatenate", "numpy.concatenate", "final_sampled_gt_boxes.append", "final_aug_boxes_image_idx.append", "final_aug_boxes_gt_idx.append", "final_total_valid_sampled_dict.extend", "len", "numpy.concatenate", "numpy.concatenate", "final_sampled_gt_boxes.append", "final_aug_boxes_image_idx.append", "final_aug_boxes_gt_idx.append", "final_total_valid_sampled_dict.extend", "len", "numpy.array", "open", "pickle.load", "numpy.einsum", "utils.point_box_utils.get_yaw_rotation", "gt_smp_points_list.append", "gt_smp_bm_points_list.append", "numpy.mean", "numpy.concatenate", "bm_points_list.append", "sup_gt_sampling.SupGTSampling.remove_occ", "final_bm_points_list.extend", "final_bm_points_list.extend", "sup_gt_sampling.SupGTSampling.remove_occ", "final_bm_points_list.extend", "final_bm_points_list.extend", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.fromfile", "numpy.concatenate.reshape", "numpy.einsum", "numpy.concatenate", "len", "len", "str", "numpy.tile", "range", "range", "range", "len", "range", "len", "len", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.put_boxes_on_road_planes", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.enlarge_box3d", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.remove_points_in_boxes3d", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.remove_occ", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.remove_occ"], ["", "def", "add_sampled_boxes_best_match_points_to_scene", "(", "self", ",", "data_dict", ",", "sampled_gt_boxes", ",", "boxes_oriyaw", ",", "total_valid_sampled_dict", ",", "aug_boxes_image_idx", ",", "aug_boxes_gt_idx", ",", "valid_boxes_type", ")", ":", "\n", "        ", "gt_boxes_mask", "=", "data_dict", "[", "'gt_boxes_mask'", "]", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "gt_boxes_mask", "]", "\n", "gt_names", "=", "data_dict", "[", "'gt_names'", "]", "[", "gt_boxes_mask", "]", "\n", "data_dict", "[", "\"gt_boxes_inds\"", "]", "=", "data_dict", "[", "\"gt_boxes_inds\"", "]", "[", "gt_boxes_mask", "]", "\n", "points", "=", "data_dict", "[", "'points'", "]", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'USE_ROAD_PLANE'", ",", "False", ")", ":", "\n", "            ", "sampled_gt_boxes", ",", "mv_height", "=", "self", ".", "put_boxes_on_road_planes", "(", "\n", "sampled_gt_boxes", ",", "data_dict", "[", "'road_plane'", "]", ",", "data_dict", "[", "'calib'", "]", "\n", ")", "\n", "data_dict", ".", "pop", "(", "'calib'", ")", "\n", "data_dict", ".", "pop", "(", "'road_plane'", ")", "\n", "", "gt_smp_points_list", "=", "[", "]", "\n", "gt_smp_bm_points_list", "=", "[", "]", "\n", "bm_points_list", "=", "[", "]", "\n", "final_bm_points_list", "=", "[", "]", "\n", "final_total_valid_sampled_dict", "=", "[", "]", "\n", "final_sampled_gt_boxes", "=", "[", "]", "\n", "final_aug_boxes_image_idx", "=", "[", "]", "\n", "final_aug_boxes_gt_idx", "=", "[", "]", "\n", "for", "idx", ",", "info", "in", "enumerate", "(", "total_valid_sampled_dict", ")", ":", "\n", "            ", "type", "=", "valid_boxes_type", "[", "idx", "]", "\n", "smp_box", "=", "sampled_gt_boxes", "[", "idx", "]", "\n", "ori_yaw", "=", "boxes_oriyaw", "[", "idx", "]", "\n", "file_path", "=", "self", ".", "root_path", "/", "info", "[", "'path'", "]", "\n", "bm_file_path", "=", "self", ".", "mlt_bm_root", "/", "\"{}_{}.pkl\"", ".", "format", "(", "aug_boxes_image_idx", "[", "idx", "]", ",", "aug_boxes_gt_idx", "[", "idx", "]", ")", "\n", "obj_points", "=", "np", ".", "fromfile", "(", "str", "(", "file_path", ")", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "num_point_features", "]", ")", "\n", "with", "open", "(", "bm_file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "bm_obj_points", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "bm_obj_points", "=", "bm_obj_points", ".", "reshape", "(", "[", "-", "1", ",", "self", ".", "bm_num_point_features", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gtrotation", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "smp_box", "[", "6", "]", ")", "\n", "bm_obj_points", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "bm_obj_points", ",", "gtrotation", ")", "+", "smp_box", "[", ":", "3", "]", "\n", "if", "type", ">", "0", ":", "\n", "                ", "gtrotation", "=", "point_box_utils", ".", "get_yaw_rotation", "(", "smp_box", "[", "6", "]", "-", "ori_yaw", "[", "0", "]", ")", "\n", "obj_points", "[", "...", ",", ":", "3", "]", "=", "np", ".", "einsum", "(", "\"nj,ij->ni\"", ",", "obj_points", "[", "...", ",", ":", "3", "]", ",", "gtrotation", ")", "+", "smp_box", "[", ":", "3", "]", "\n", "gt_smp_points_list", ".", "append", "(", "obj_points", ")", "\n", "gt_smp_bm_points_list", ".", "append", "(", "bm_obj_points", ")", "\n", "", "else", ":", "\n", "                ", "avg_feature", "=", "np", ".", "mean", "(", "obj_points", "[", ":", ",", "3", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "bm_obj_points", "=", "np", ".", "concatenate", "(", "[", "bm_obj_points", ",", "np", ".", "tile", "(", "avg_feature", ",", "(", "bm_obj_points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "bm_points_list", ".", "append", "(", "bm_obj_points", ")", "\n", "", "", "if", "not", "self", ".", "no_stucking", ":", "\n", "            ", "large_sampled_gt_boxes", "=", "box_utils", ".", "enlarge_box3d", "(", "\n", "sampled_gt_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "extra_width", "=", "self", ".", "sampler_cfg", ".", "REMOVE_EXTRA_WIDTH", "\n", ")", "\n", "points", "=", "box_utils", ".", "remove_points_in_boxes3d", "(", "points", ",", "large_sampled_gt_boxes", ")", "\n", "\n", "", "if", "len", "(", "gt_smp_points_list", ")", ">", "0", ":", "\n", "            ", "smp_points", "=", "np", ".", "concatenate", "(", "gt_smp_points_list", ",", "axis", "=", "0", ")", "\n", "smp_inds", "=", "(", "valid_boxes_type", ">", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "self", ".", "gt_smp_cfg", "[", "\"remove_yz_expansion\"", "]", ">", "0", ":", "\n", "                ", "smp_points", ",", "pnt_num_mask", "=", "self", ".", "remove_occ", "(", "points", ",", "smp_points", ",", "sampled_gt_boxes", "[", "smp_inds", ",", ":", "]", ",", "self", ".", "gt_smp_cfg", "[", "\"remove_yz_expansion\"", "]", ",", "self", ".", "gt_smp_cfg", "[", "\"dp_rate\"", "]", ")", "\n", "smp_inds", "=", "smp_inds", "[", "pnt_num_mask", "]", "\n", "final_bm_points_list", ".", "extend", "(", "[", "gt_smp_bm_points_list", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "gt_smp_bm_points_list", ")", ")", "if", "pnt_num_mask", "[", "i", "]", "]", ")", "\n", "bm_points_list", "=", "[", "bm_points_list", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "bm_points_list", ")", ")", "if", "pnt_num_mask", "[", "i", "]", "]", "\n", "", "else", ":", "\n", "                ", "final_bm_points_list", ".", "extend", "(", "gt_smp_bm_points_list", ")", "\n", "", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "smp_points", "]", ",", "axis", "=", "0", ")", "\n", "final_sampled_gt_boxes", ".", "append", "(", "sampled_gt_boxes", "[", "smp_inds", ",", ":", "]", ")", "\n", "final_aug_boxes_image_idx", ".", "append", "(", "aug_boxes_image_idx", "[", "smp_inds", "]", ")", "\n", "final_aug_boxes_gt_idx", ".", "append", "(", "aug_boxes_gt_idx", "[", "smp_inds", "]", ")", "\n", "final_total_valid_sampled_dict", ".", "extend", "(", "[", "total_valid_sampled_dict", "[", "smp_inds", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "smp_inds", ")", ")", "]", ")", "\n", "\n", "", "if", "len", "(", "bm_points_list", ")", ">", "0", ":", "\n", "            ", "bm_points", "=", "np", ".", "concatenate", "(", "bm_points_list", ",", "axis", "=", "0", ")", "\n", "bm_inds", "=", "(", "valid_boxes_type", "==", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "### remove occ, drop ratio", "\n", "if", "self", ".", "mlt_bm_cfg", "[", "\"remove_yz_expansion\"", "]", ">", "0", ":", "\n", "                ", "bm_points", ",", "pnt_num_mask", "=", "self", ".", "remove_occ", "(", "points", ",", "bm_points", ",", "sampled_gt_boxes", "[", "bm_inds", ",", ":", "]", ",", "self", ".", "mlt_bm_cfg", "[", "\"remove_yz_expansion\"", "]", ",", "self", ".", "mlt_bm_cfg", "[", "\"dp_rate\"", "]", ")", "\n", "bm_inds", "=", "bm_inds", "[", "pnt_num_mask", "]", "\n", "final_bm_points_list", ".", "extend", "(", "[", "bm_points_list", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "bm_points_list", ")", ")", "if", "pnt_num_mask", "[", "i", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "final_bm_points_list", ".", "extend", "(", "bm_points_list", ")", "\n", "", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "bm_points", "]", ",", "axis", "=", "0", ")", "\n", "final_sampled_gt_boxes", ".", "append", "(", "sampled_gt_boxes", "[", "bm_inds", ",", ":", "]", ")", "\n", "final_aug_boxes_image_idx", ".", "append", "(", "aug_boxes_image_idx", "[", "bm_inds", "]", ")", "\n", "final_aug_boxes_gt_idx", ".", "append", "(", "aug_boxes_gt_idx", "[", "bm_inds", "]", ")", "\n", "final_total_valid_sampled_dict", ".", "extend", "(", "[", "total_valid_sampled_dict", "[", "bm_inds", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "bm_inds", ")", ")", "]", ")", "\n", "\n", "", "if", "len", "(", "final_bm_points_list", ")", ">", "0", ":", "\n", "            ", "sampled_gt_names", "=", "np", ".", "array", "(", "[", "x", "[", "'name'", "]", "for", "x", "in", "final_total_valid_sampled_dict", "]", ")", "\n", "data_dict", "[", "'bm_points'", "]", "=", "[", "bm_points_raw", "[", ":", ",", ":", "3", "]", "for", "bm_points_raw", "in", "final_bm_points_list", "]", "\n", "del", "bm_points_list", ",", "gt_smp_bm_points_list", ",", "gt_smp_points_list", "\n", "if", "gt_boxes", ".", "ndim", "!=", "2", "or", "gt_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "# print(\"prefilter gt name:\", data_dict['gt_names'], \" filtered gt name:\", gt_names)", "\n", "                ", "gt_names", "=", "sampled_gt_names", "\n", "gt_boxes", "=", "final_sampled_gt_boxes", "[", "0", "]", "if", "len", "(", "final_sampled_gt_boxes", ")", "==", "1", "else", "np", ".", "concatenate", "(", "final_sampled_gt_boxes", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "gt_names", "=", "np", ".", "concatenate", "(", "[", "gt_names", ",", "sampled_gt_names", "]", ",", "axis", "=", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "*", "final_sampled_gt_boxes", "]", ",", "axis", "=", "0", ")", "\n", "# print(\"points\", len(points), len(data_dict['points']), len(final_bm_points_list))", "\n", "", "data_dict", "[", "'points'", "]", "=", "points", "\n", "data_dict", "[", "\"augment_box_num\"", "]", "=", "sampled_gt_names", ".", "shape", "[", "0", "]", "\n", "data_dict", "[", "'aug_boxes_image_idx'", "]", "=", "final_aug_boxes_image_idx", "[", "0", "]", "if", "len", "(", "final_aug_boxes_image_idx", ")", "==", "1", "else", "np", ".", "concatenate", "(", "final_aug_boxes_image_idx", ",", "axis", "=", "0", ")", "\n", "data_dict", "[", "'aug_boxes_gt_idx'", "]", "=", "final_aug_boxes_gt_idx", "[", "0", "]", "if", "len", "(", "final_aug_boxes_gt_idx", ")", "==", "1", "else", "np", ".", "concatenate", "(", "final_aug_boxes_gt_idx", ",", "axis", "=", "0", ")", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'gt_names'", "]", "=", "gt_names", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.expand_voxel": [[257, 266], ["numpy.arange", "numpy.arange", "numpy.meshgrid", "numpy.ones_like", "numpy.stack().reshape", "numpy.clip().reshape", "numpy.stack", "numpy.clip", "numpy.expand_dims"], "methods", ["None"], ["", "def", "expand_voxel", "(", "self", ",", "bm_occ_coords", ",", "yz_epansion", "=", "2", ")", ":", "\n", "        ", "y_ind", "=", "np", ".", "arange", "(", "-", "1", ",", "yz_epansion", ")", "\n", "z_ind", "=", "np", ".", "arange", "(", "-", "1", ",", "yz_epansion", ")", "\n", "y", ",", "z", "=", "np", ".", "meshgrid", "(", "y_ind", ",", "z_ind", ")", "\n", "x", "=", "np", ".", "ones_like", "(", "y", ")", "\n", "xyz_shift", "=", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "1", ",", "9", ",", "3", ")", "\n", "# print(\"xyz_shift\", y.shape, y, xyz_shift.shape, xyz_shift[0,0], xyz_shift[0,1], xyz_shift[0,2])", "\n", "expand_bm_occ_coords", "=", "np", ".", "clip", "(", "np", ".", "expand_dims", "(", "bm_occ_coords", ",", "axis", "=", "1", ")", "+", "xyz_shift", ",", "a_min", "=", "0", ",", "a_max", "=", "None", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "return", "expand_bm_occ_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.remove_occ": [[268, 313], ["utils.box_utils.boxes3d_contain_points", "numpy.min", "numpy.floor_divide().astype", "numpy.floor_divide().astype", "sup_gt_sampling.SupGTSampling.expand_voxel", "numpy.concatenate", "list", "numpy.zeros", "numpy.ones_like", "numpy.argsort", "numpy.unique", "numpy.ones", "numpy.random.shuffle", "post_drop_mask.astype.astype.astype", "numpy.sum", "numpy.sum", "numpy.zeros", "utils.coords_utils.absxyz_2_spherexyz_np", "utils.coords_utils.absxyz_2_spherexyz_np", "numpy.concatenate", "numpy.max", "numpy.cumsum", "numpy.sum", "numpy.floor_divide", "numpy.floor_divide", "int"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_contain_points", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.expand_voxel", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.absxyz_2_spherexyz_np", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.absxyz_2_spherexyz_np"], ["", "def", "remove_occ", "(", "self", ",", "points", ",", "bm_points", ",", "sampled_gt_boxes", ",", "yz_epansion", ",", "drop_rate", ")", ":", "\n", "        ", "if", "yz_epansion", ">", "1", ":", "\n", "            ", "occ_coords_points", "=", "coords_utils", ".", "absxyz_2_spherexyz_np", "(", "points", ")", "[", "...", ",", ":", "3", "]", "\n", "bm_occ_coords_points", "=", "coords_utils", ".", "absxyz_2_spherexyz_np", "(", "bm_points", ")", "[", "...", ",", ":", "3", "]", "\n", "\n", "# v_res = 0.4203125, h_res = 0.0875, dist_res = 0.2, v_fov = (-24.9, 4), h_fov = (-60, 60), dist_fov = (0, 80)", "\n", "sphere_coords_min", "=", "np", ".", "min", "(", "np", ".", "concatenate", "(", "[", "occ_coords_points", ",", "bm_occ_coords_points", "]", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "occ_coords", "=", "np", ".", "floor_divide", "(", "occ_coords_points", "-", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "bm_occ_coords", "=", "np", ".", "floor_divide", "(", "bm_occ_coords_points", "-", "sphere_coords_min", ",", "self", ".", "sphere_coords_res", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "expand_bm_occ_coords", "=", "self", ".", "expand_voxel", "(", "bm_occ_coords", ",", "yz_epansion", "=", "yz_epansion", ")", "\n", "occ_coords", "=", "np", ".", "concatenate", "(", "[", "occ_coords", ",", "expand_bm_occ_coords", "]", ",", "axis", "=", "0", ")", "\n", "nx", ",", "ny", ",", "nz", "=", "list", "(", "np", ".", "max", "(", "occ_coords", ",", "axis", "=", "0", ")", ")", "\n", "nx", ",", "ny", ",", "nz", "=", "nx", "+", "1", ",", "ny", "+", "1", ",", "nz", "+", "1", "\n", "# print(\"nx\",nx,ny,nz)", "\n", "voxelwise_mask", "=", "np", ".", "zeros", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "voxelwise_mask", "[", "occ_coords", "[", "...", ",", "0", "]", ",", "occ_coords", "[", "...", ",", "1", "]", ",", "occ_coords", "[", "...", ",", "2", "]", "]", "=", "np", ".", "ones_like", "(", "occ_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "voxelwise_mask", "=", "np", ".", "cumsum", "(", "voxelwise_mask", ",", "axis", "=", "0", ")", "<", "1.5", "\n", "bm_occ_coords_mask", "=", "voxelwise_mask", "[", "bm_occ_coords", "[", "...", ",", "0", "]", ",", "bm_occ_coords", "[", "...", ",", "1", "]", ",", "bm_occ_coords", "[", "...", ",", "2", "]", "]", "\n", "bm_points", "=", "bm_points", "[", "bm_occ_coords_mask", ",", ":", "]", "\n", "bm_occ_coords", "=", "bm_occ_coords", "[", "bm_occ_coords_mask", ",", ":", "]", "\n", "# return bm_points[bm_occ_coords_mask,:]", "\n", "closeind", "=", "np", ".", "argsort", "(", "bm_points", "[", "...", ",", "2", "]", ")", "\n", "bm_points", ",", "bm_occ_coords", "=", "bm_points", "[", "closeind", ",", ":", "]", ",", "bm_occ_coords", "[", "closeind", ",", ":", "]", "\n", "_", ",", "indices", "=", "np", ".", "unique", "(", "bm_occ_coords", ",", "axis", "=", "0", ",", "return_index", "=", "True", ")", "\n", "bm_points", "=", "bm_points", "[", "indices", ",", ":", "]", "\n", "", "if", "drop_rate", ">", "0", ":", "\n", "            ", "post_drop_mask", "=", "np", ".", "ones", "(", "bm_points", ".", "shape", "[", "0", "]", ",", "dtype", "=", "int", ")", "\n", "post_drop_mask", "[", ":", "int", "(", "bm_points", ".", "shape", "[", "0", "]", "*", "drop_rate", ")", "]", "=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "post_drop_mask", ")", "\n", "post_drop_mask", "=", "post_drop_mask", ".", "astype", "(", "bool", ")", "\n", "bm_points", "=", "bm_points", "[", "post_drop_mask", ",", ":", "]", "\n", "\n", "", "point_belong_mask", "=", "box_utils", ".", "boxes3d_contain_points", "(", "bm_points", ",", "sampled_gt_boxes", ")", "\n", "# point_box_ind = np.amax(point_belong_mask, axis=0)", "\n", "pnt_num_box_mask", "=", "np", ".", "sum", "(", "point_belong_mask", ",", "axis", "=", "1", ")", ">=", "5", "\n", "if", "np", ".", "sum", "(", "pnt_num_box_mask", ")", ">", "0", ":", "\n", "            ", "point_mask", "=", "np", ".", "sum", "(", "point_belong_mask", "[", "pnt_num_box_mask", ",", ":", "]", ",", "axis", "=", "0", ")", ">", "0", "\n", "bm_points", "=", "bm_points", "[", "point_mask", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "bm_points", "=", "np", ".", "zeros", "(", "[", "0", ",", "bm_points", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "bm_points", ".", "dtype", ")", "\n", "# xavg = np.bincount(rinds, bm_points[...,0]) / counts", "\n", "# yavg = np.bincount(rinds, bm_points[...,1]) / counts", "\n", "# zavg = np.bincount(rinds, bm_points[...,2]) / counts", "\n", "# bm_points = np.concatenate([np.stack([xavg, yavg, zavg], axis=-1), bm_points[indices,:][...,3:]],axis=-1)", "\n", "", "return", "bm_points", ",", "pnt_num_box_mask", "# bm_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.add_box_jitter": [[315, 339], ["utils.coords_utils.absxyz_2_cylinxyz_np", "numpy.random.uniform", "numpy.clip", "numpy.clip", "utils.coords_utils.uvd2absxyz_np", "numpy.concatenate", "min", "max", "min", "max", "numpy.clip", "numpy.clip", "numpy.random.randint", "numpy.min", "numpy.max", "min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.absxyz_2_cylinxyz_np", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz_np"], ["", "def", "add_box_jitter", "(", "self", ",", "sampled_boxes", ",", "points", ",", "existed_boxes", ",", "cfg", ")", ":", "\n", "# occ_coords_points = coords_utils.absxyz_2_cylinxyz_np(points)", "\n", "        ", "centers", "=", "coords_utils", ".", "absxyz_2_cylinxyz_np", "(", "sampled_boxes", "[", "...", ",", ":", "3", "]", ")", "\n", "range_scale", "=", "[", "min", "(", "5.3", ",", "np", ".", "min", "(", "centers", "[", "...", ",", "0", "]", ")", ")", ",", "max", "(", "67.00", ",", "np", ".", "max", "(", "centers", "[", "...", ",", "0", "]", ")", ")", "]", "\n", "rot_scale", "=", "[", "min", "(", "-", "40.6944", ",", "min", "(", "centers", "[", "...", ",", "1", "]", ")", ")", ",", "max", "(", "40.6944", ",", "np", ".", "max", "(", "centers", "[", "...", ",", "1", "]", ")", ")", "]", "\n", "jitters", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.0", ",", "high", "=", "1.0", ",", "size", "=", "(", "3", ",", "centers", ".", "shape", "[", "0", "]", ")", ")", "\n", "center_base_min", "=", "np", ".", "clip", "(", "centers", "[", "...", ",", "0", "]", "-", "cfg", "[", "'box_range_jitter'", "]", ",", "a_min", "=", "range_scale", "[", "0", "]", ",", "a_max", "=", "range_scale", "[", "1", "]", ")", "\n", "center_change", "=", "np", ".", "clip", "(", "centers", "[", "...", ",", "0", "]", "+", "cfg", "[", "'box_range_jitter'", "]", ",", "a_min", "=", "range_scale", "[", "0", "]", ",", "a_max", "=", "range_scale", "[", "1", "]", ")", "-", "center_base_min", "\n", "center_range", "=", "center_base_min", "+", "jitters", "[", "0", ",", ":", "]", "*", "center_change", "\n", "rot_base_min", "=", "np", ".", "clip", "(", "centers", "[", "...", ",", "1", "]", "-", "cfg", "[", "'box_rot_jitter'", "]", ",", "a_min", "=", "rot_scale", "[", "0", "]", ",", "a_max", "=", "rot_scale", "[", "1", "]", ")", "\n", "rot_change", "=", "np", ".", "clip", "(", "centers", "[", "...", ",", "1", "]", "+", "cfg", "[", "'box_rot_jitter'", "]", ",", "a_min", "=", "rot_scale", "[", "0", "]", ",", "a_max", "=", "rot_scale", "[", "1", "]", ")", "-", "rot_base_min", "\n", "rot_range", "=", "rot_base_min", "+", "jitters", "[", "1", ",", ":", "]", "*", "rot_change", "\n", "if", "cfg", "[", "'yaw_type'", "]", "==", "\"main\"", "and", "existed_boxes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "indx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "high", "=", "existed_boxes", ".", "shape", "[", "0", "]", ",", "size", "=", "sampled_boxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "int", ")", "\n", "base_yaw", "=", "existed_boxes", "[", "indx", ",", "6", "]", "\n", "", "else", ":", "\n", "            ", "base_yaw", "=", "sampled_boxes", "[", "...", ",", "6", "]", "-", "(", "rot_range", "-", "centers", "[", "...", ",", "1", "]", ")", "*", "np", ".", "pi", "/", "180", "\n", "", "yaw_base_min", "=", "base_yaw", "-", "cfg", "[", "'box_yaw_jitter'", "]", "\n", "yaw_change", "=", "base_yaw", "+", "cfg", "[", "'box_yaw_jitter'", "]", "-", "yaw_base_min", "\n", "yaw_range", "=", "yaw_base_min", "+", "jitters", "[", "2", ",", ":", "]", "*", "yaw_change", "\n", "sampled_boxes", "[", ":", ",", ":", "3", "]", "=", "coords_utils", ".", "uvd2absxyz_np", "(", "center_range", ",", "rot_range", ",", "centers", "[", "...", ",", "2", "]", ",", "\"cylinder\"", ")", "\n", "sampled_boxes", "=", "np", ".", "concatenate", "(", "[", "sampled_boxes", ",", "sampled_boxes", "[", "...", ",", "6", ":", "7", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "sampled_boxes", "[", ":", ",", "6", "]", "=", "yaw_range", "\n", "return", "sampled_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.individual_no_stucking": [[341, 353], ["copy.deepcopy", "utils.box_utils.boxes3d_contain_point_thresh().nonzero", "utils.box_utils.boxes3d_contain_point_thresh"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_contain_point_thresh"], ["", "def", "individual_no_stucking", "(", "self", ")", ":", "\n", "        ", "det_boxes", "=", "copy", ".", "deepcopy", "(", "valid_sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "det_boxes", "[", ":", ",", "2", "]", "+=", "self", ".", "det_height_shift", "\n", "clean_mask", "=", "box_utils", ".", "boxes3d_contain_point_thresh", "(", "data_dict", "[", "'points'", "]", ",", "det_boxes", ",", "thresh", "=", "0", ",", "smaller", "=", "True", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "\n", "\n", "valid_boxes_type", "=", "valid_boxes_type", "[", "clean_mask", "]", "\n", "valid_sampled_dict", "=", "[", "valid_sampled_dict", "[", "x", "]", "for", "x", "in", "clean_mask", "]", "\n", "valid_sampled_boxes", "=", "valid_sampled_boxes", "[", "clean_mask", "]", "\n", "valid_sampled_boxes_image_idx", "=", "valid_sampled_boxes_image_idx", "[", "clean_mask", "]", "\n", "valid_sampled_boxes_gt_idx", "=", "valid_sampled_boxes_gt_idx", "[", "clean_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.__call__": [[355, 422], ["data_dict[].astype", "sup_gt_sampling.SupGTSampling.sample_groups.items", "sup_gt_sampling.SupGTSampling.pop", "total_valid_sampled_dict.__len__", "sup_gt_sampling.SupGTSampling.add_sampled_boxes_best_match_points_to_scene", "numpy.sum", "str", "int", "sup_gt_sampling.SupGTSampling.sample_with_fixed_number", "numpy.stack().astype", "numpy.stack().astype", "numpy.stack().astype", "sup_gt_sampling.SupGTSampling.sampler_cfg.get", "sup_gt_sampling.SupGTSampling.remove_collide_boxes", "total_valid_sampled_dict.extend", "min", "sampled_boxes_lst.append", "sampled_boxes_type_lst.append", "sampled_boxes_lst.append", "sampled_boxes_type_lst.append", "numpy.concatenate", "numpy.concatenate", "utils.box_utils.boxes3d_kitti_fakelidar_to_lidar", "copy.deepcopy", "numpy.concatenate", "int", "numpy.stack", "numpy.stack", "numpy.stack", "sup_gt_sampling.SupGTSampling.sampler_cfg.get", "len", "sup_gt_sampling.SupGTSampling.add_box_jitter", "numpy.ones", "len", "sup_gt_sampling.SupGTSampling.sampler_cfg.get", "sup_gt_sampling.SupGTSampling.add_box_jitter", "numpy.zeros", "len", "len", "utils.box_utils.boxes3d_contain_point_thresh().nonzero", "utils.box_utils.boxes3d_contain_point_thresh", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.add_sampled_boxes_best_match_points_to_scene", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.sample_with_fixed_number", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.remove_collide_boxes", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_kitti_fakelidar_to_lidar", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.add_box_jitter", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.add_box_jitter", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_contain_point_thresh"], ["", "def", "__call__", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                gt_boxes: (N, 7 + C) [x, y, z, dx, dy, dz, heading, ...]\n\n        Returns:\n\n        \"\"\"", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "\n", "gt_names", "=", "data_dict", "[", "'gt_names'", "]", ".", "astype", "(", "str", ")", "\n", "existed_boxes", "=", "gt_boxes", "\n", "total_valid_sampled_dict", "=", "[", "]", "\n", "for", "class_name", ",", "sample_group", "in", "self", ".", "sample_groups", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "limit_whole_scene", ":", "\n", "                ", "num_gt", "=", "np", ".", "sum", "(", "class_name", "==", "gt_names", ")", "\n", "sample_group", "[", "'sample_num'", "]", "=", "str", "(", "int", "(", "self", ".", "sample_class_num", "[", "class_name", "]", ")", "-", "num_gt", ")", "\n", "", "if", "int", "(", "sample_group", "[", "'sample_num'", "]", ")", ">", "0", ":", "\n", "                ", "sampled_dict", "=", "self", ".", "sample_with_fixed_number", "(", "class_name", ",", "sample_group", ")", "\n", "sampled_boxes", "=", "np", ".", "stack", "(", "[", "x", "[", "'box3d_lidar'", "]", "for", "x", "in", "sampled_dict", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sampled_boxes_image_idx", "=", "np", ".", "stack", "(", "[", "x", "[", "'image_idx'", "]", "for", "x", "in", "sampled_dict", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "sampled_boxes_gt_idx", "=", "np", ".", "stack", "(", "[", "x", "[", "'gt_idx'", "]", "for", "x", "in", "sampled_dict", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "sampled_boxes_lst", "=", "[", "]", "\n", "sampled_boxes_type_lst", "=", "[", "]", "\n", "gt_num", ",", "bm_num", "=", "0", ",", "0", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'GT_SMP'", ",", "None", ")", "is", "not", "None", "and", "self", ".", "gt_smp_cfg", "[", "'sample_groups'", "]", "[", "class_name", "]", ">", "0", ":", "\n", "                    ", "gt_num", "=", "min", "(", "self", ".", "gt_smp_cfg", "[", "'sample_groups'", "]", "[", "class_name", "]", ",", "len", "(", "sampled_dict", ")", ")", "\n", "sampled_boxes_lst", ".", "append", "(", "self", ".", "add_box_jitter", "(", "sampled_boxes", "[", ":", "gt_num", ",", ":", "]", ",", "data_dict", "[", "'points'", "]", ",", "existed_boxes", ",", "self", ".", "gt_smp_cfg", ")", ")", "\n", "sampled_boxes_type_lst", ".", "append", "(", "np", ".", "ones", "(", "[", "gt_num", "]", ")", ")", "\n", "bm_num", "=", "len", "(", "sampled_dict", ")", "-", "gt_num", "\n", "", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'MLT_BM'", ",", "None", ")", "is", "not", "None", "and", "bm_num", ">", "0", ":", "\n", "                    ", "sampled_boxes_lst", ".", "append", "(", "self", ".", "add_box_jitter", "(", "sampled_boxes", "[", "len", "(", "sampled_boxes", ")", "-", "bm_num", ":", ",", ":", "]", ",", "data_dict", "[", "'points'", "]", ",", "existed_boxes", ",", "self", ".", "mlt_bm_cfg", ")", ")", "\n", "sampled_boxes_type_lst", ".", "append", "(", "np", ".", "zeros", "(", "[", "bm_num", "]", ")", ")", "\n", "", "sampled_boxes", "=", "sampled_boxes_lst", "[", "0", "]", "if", "len", "(", "sampled_boxes_lst", ")", "==", "1", "else", "np", ".", "concatenate", "(", "sampled_boxes_lst", ",", "axis", "=", "0", ")", "\n", "sampled_boxes_type", "=", "sampled_boxes_type_lst", "[", "0", "]", "if", "len", "(", "sampled_boxes_type_lst", ")", "==", "1", "else", "np", ".", "concatenate", "(", "sampled_boxes_type_lst", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "sampler_cfg", ".", "get", "(", "'DATABASE_WITH_FAKELIDAR'", ",", "False", ")", ":", "\n", "                    ", "sampled_boxes", "=", "box_utils", ".", "boxes3d_kitti_fakelidar_to_lidar", "(", "sampled_boxes", ")", "\n", "\n", "", "valid_mask", "=", "self", ".", "remove_collide_boxes", "(", "sampled_boxes", ",", "existed_boxes", ")", "\n", "valid_boxes_type", "=", "sampled_boxes_type", "[", "valid_mask", "]", "\n", "valid_sampled_dict", "=", "[", "sampled_dict", "[", "x", "]", "for", "x", "in", "valid_mask", "]", "\n", "valid_sampled_boxes", "=", "sampled_boxes", "[", "valid_mask", "]", "\n", "valid_sampled_boxes_image_idx", "=", "sampled_boxes_image_idx", "[", "valid_mask", "]", "\n", "valid_sampled_boxes_gt_idx", "=", "sampled_boxes_gt_idx", "[", "valid_mask", "]", "\n", "if", "self", ".", "no_stucking", ":", "\n", "                    ", "det_boxes", "=", "copy", ".", "deepcopy", "(", "valid_sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "det_boxes", "[", ":", ",", "2", "]", "+=", "self", ".", "det_height_shift", "\n", "clean_mask", "=", "box_utils", ".", "boxes3d_contain_point_thresh", "(", "data_dict", "[", "'points'", "]", ",", "det_boxes", ",", "thresh", "=", "0", ",", "smaller", "=", "True", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "valid_boxes_type", "=", "valid_boxes_type", "[", "clean_mask", "]", "\n", "valid_sampled_dict", "=", "[", "valid_sampled_dict", "[", "x", "]", "for", "x", "in", "clean_mask", "]", "\n", "valid_sampled_boxes", "=", "valid_sampled_boxes", "[", "clean_mask", "]", "\n", "valid_sampled_boxes_image_idx", "=", "valid_sampled_boxes_image_idx", "[", "clean_mask", "]", "\n", "valid_sampled_boxes_gt_idx", "=", "valid_sampled_boxes_gt_idx", "[", "clean_mask", "]", "\n", "", "valid_sampled_boxes", ",", "valid_sampled_boxes_oriyaw", "=", "valid_sampled_boxes", "[", "...", ",", ":", "7", "]", ",", "valid_sampled_boxes", "[", "...", ",", "7", ":", "8", "]", "\n", "# print(\"valid_mask\", len(valid_mask), len(clean_mask))", "\n", "if", "existed_boxes", ".", "ndim", "!=", "2", "or", "existed_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "existed_boxes", "=", "valid_sampled_boxes", "\n", "", "else", ":", "\n", "                    ", "existed_boxes", "=", "np", ".", "concatenate", "(", "(", "existed_boxes", ",", "valid_sampled_boxes", ")", ",", "axis", "=", "0", ")", "\n", "", "total_valid_sampled_dict", ".", "extend", "(", "valid_sampled_dict", ")", "\n", "\n", "", "", "sampled_gt_boxes", "=", "existed_boxes", "[", "gt_boxes", ".", "shape", "[", "0", "]", ":", ",", ":", "]", "\n", "if", "total_valid_sampled_dict", ".", "__len__", "(", ")", ">", "0", ":", "\n", "            ", "data_dict", "=", "self", ".", "add_sampled_boxes_best_match_points_to_scene", "(", "data_dict", ",", "sampled_gt_boxes", ",", "valid_sampled_boxes_oriyaw", ",", "total_valid_sampled_dict", ",", "valid_sampled_boxes_image_idx", ",", "valid_sampled_boxes_gt_idx", ",", "valid_boxes_type", ")", "\n", "data_dict", "[", "'pre_aug_bm'", "]", "=", "True", "\n", "", "data_dict", ".", "pop", "(", "'gt_boxes_mask'", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.SupGTSampling.remove_collide_boxes": [[423, 450], ["ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "range", "print", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "len", "numpy.delete.max", "numpy.argmax", "numpy.delete", "numpy.delete", "range", "range", "numpy.delete.sum", "numpy.delete", "ops.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu.max"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu", "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu"], ["", "def", "remove_collide_boxes", "(", "self", ",", "sampled_boxes", ",", "existed_boxes", ")", ":", "\n", "        ", "if", "existed_boxes", ".", "ndim", "!=", "2", "or", "existed_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "print", "(", "\"existed_boxes: skip iou \"", ",", "existed_boxes", ".", "shape", ")", "\n", "iou1", "=", "None", "\n", "", "else", ":", "\n", "            ", "iou1", "=", "iou3d_nms_utils", ".", "boxes_bev_iou_cpu", "(", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "existed_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "", "valid_inds", "=", "(", "iou1", ".", "max", "(", "axis", "=", "1", ")", "==", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "iou2", "=", "iou3d_nms_utils", ".", "boxes_bev_iou_cpu", "(", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ",", "sampled_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "iou2", "[", "range", "(", "sampled_boxes", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "sampled_boxes", ".", "shape", "[", "0", "]", ")", "]", "=", "0", "\n", "iou2", "=", "iou2", "[", "valid_inds", ",", ":", "]", "[", ":", ",", "valid_inds", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "valid_inds", ")", ")", ":", "\n", "            ", "if", "iou2", ".", "max", "(", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "max_ind", "=", "np", ".", "argmax", "(", "iou2", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "valid_inds", "=", "np", ".", "delete", "(", "valid_inds", ",", "max_ind", ")", "\n", "iou2", "=", "np", ".", "delete", "(", "np", ".", "delete", "(", "iou2", ",", "max_ind", ",", "axis", "=", "0", ")", ",", "max_ind", ",", "axis", "=", "1", ")", "\n", "# iou2 = iou3d_nms_utils.boxes_bev_iou_cpu(sampled_boxes[:, 0:7], sampled_boxes[:, 0:7])", "\n", "# iou2[range(sampled_boxes.shape[0]), range(sampled_boxes.shape[0])] = 0", "\n", "# iou1 = None", "\n", "# if existed_boxes.ndim != 2 or existed_boxes.shape[0] == 0:", "\n", "#     print(\"existed_boxes: skip iou \", existed_boxes.shape)", "\n", "# else:", "\n", "#     iou1 = iou3d_nms_utils.boxes_bev_iou_cpu(sampled_boxes[:, 0:7], existed_boxes[:, 0:7])", "\n", "# iou1 = iou1 if iou1 is not None and (iou1.shape[1] > 0) else iou2", "\n", "# valid_inds = ((iou1.max(axis=1) + iou2.max(axis=1)) == 0).nonzero()[0]", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size": [[451, 470], ["sys.getsizeof", "id", "set.add", "isinstance", "set", "sum", "sum", "hasattr", "sup_gt_sampling.get_size", "sup_gt_sampling.get_size", "sup_gt_sampling.get_size", "hasattr", "sum", "obj.values", "obj.keys", "isinstance", "sup_gt_sampling.get_size"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size", "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.sup_gt_sampling.get_size"], ["", "", "def", "get_size", "(", "obj", ",", "seen", "=", "None", ")", ":", "\n", "    ", "\"\"\"Recursively finds size of objects\"\"\"", "\n", "size", "=", "sys", ".", "getsizeof", "(", "obj", ")", "\n", "if", "seen", "is", "None", ":", "\n", "        ", "seen", "=", "set", "(", ")", "\n", "", "obj_id", "=", "id", "(", "obj", ")", "\n", "if", "obj_id", "in", "seen", ":", "\n", "        ", "return", "0", "\n", "# Important mark as seen *before* entering recursion to gracefully handle", "\n", "# self-referential objects", "\n", "", "seen", ".", "add", "(", "obj_id", ")", "\n", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "size", "+=", "sum", "(", "[", "get_size", "(", "v", ",", "seen", ")", "for", "v", "in", "obj", ".", "values", "(", ")", "]", ")", "\n", "size", "+=", "sum", "(", "[", "get_size", "(", "k", ",", "seen", ")", "for", "k", "in", "obj", ".", "keys", "(", ")", "]", ")", "\n", "", "elif", "hasattr", "(", "obj", ",", "'__dict__'", ")", ":", "\n", "        ", "size", "+=", "get_size", "(", "obj", ".", "__dict__", ",", "seen", ")", "\n", "", "elif", "hasattr", "(", "obj", ",", "'__iter__'", ")", "and", "not", "isinstance", "(", "obj", ",", "(", "str", ",", "bytes", ",", "bytearray", ")", ")", ":", "\n", "        ", "size", "+=", "sum", "(", "[", "get_size", "(", "i", ",", "seen", ")", "for", "i", "in", "obj", "]", ")", "\n", "", "return", "size", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.__init__": [[10, 36], ["isinstance", "data_augmentor.DataAugmentor.data_augmentor_queue.append", "isinstance", "getattr", "len", "data_augmentor.DataAugmentor.db_infos.keys", "data_augmentor.DataAugmentor.root_path.resolve", "open", "pickle.load", "print", "str", "data_augmentor.DataAugmentor.db_infos[].extend", "data_augmentor.DataAugmentor.db_infos.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "augmentor_configs", ",", "class_names", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "data_augmentor_queue", "=", "[", "]", "\n", "aug_config_list", "=", "augmentor_configs", "if", "isinstance", "(", "augmentor_configs", ",", "list", ")", "else", "augmentor_configs", ".", "AUG_CONFIG_LIST", "\n", "self", ".", "db_infos", "=", "{", "}", "\n", "for", "cur_cfg", "in", "aug_config_list", ":", "\n", "            ", "if", "not", "isinstance", "(", "augmentor_configs", ",", "list", ")", ":", "\n", "                ", "if", "cur_cfg", ".", "NAME", "in", "augmentor_configs", ".", "DISABLE_AUG_LIST", ":", "\n", "                    ", "continue", "\n", "", "", "if", "(", "cur_cfg", ".", "NAME", "in", "[", "\"waymo_gt_sampling\"", ",", "\"gt_sampling\"", ",", "\"add_best_match\"", ",", "\"sup_gt_sampling\"", "]", ")", "and", "len", "(", "self", ".", "db_infos", ".", "keys", "(", ")", ")", "==", "0", ":", "\n", "                ", "for", "class_name", "in", "class_names", ":", "\n", "                    ", "self", ".", "db_infos", "[", "class_name", "]", "=", "[", "]", "\n", "\n", "", "for", "db_info_path", "in", "cur_cfg", ".", "DB_INFO_PATH", ":", "\n", "                    ", "db_info_path", "=", "self", ".", "root_path", ".", "resolve", "(", ")", "/", "db_info_path", "\n", "with", "open", "(", "str", "(", "db_info_path", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                        ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "[", "self", ".", "db_infos", "[", "cur_class", "]", ".", "extend", "(", "infos", "[", "cur_class", "]", ")", "for", "cur_class", "in", "class_names", "]", "\n", "print", "(", "\"self.db_infos\"", ",", "self", ".", "db_infos", ".", "keys", "(", ")", ")", "\n", "\n", "", "", "", "cur_augmentor", "=", "getattr", "(", "self", ",", "cur_cfg", ".", "NAME", ")", "(", "config", "=", "cur_cfg", ")", "\n", "self", ".", "data_augmentor_queue", ".", "append", "(", "cur_augmentor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.sup_gt_sampling": [[38, 47], ["sup_gt_sampling.SupGTSampling"], "methods", ["None"], ["", "", "def", "sup_gt_sampling", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "db_sampler", "=", "sup_gt_sampling", ".", "SupGTSampling", "(", "\n", "root_path", "=", "self", ".", "root_path", ",", "\n", "sampler_cfg", "=", "config", ",", "\n", "db_infos", "=", "self", ".", "db_infos", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "return", "db_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.gt_sampling": [[48, 57], ["database_sampler.DataBaseSampler"], "methods", ["None"], ["", "def", "gt_sampling", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "db_sampler", "=", "database_sampler", ".", "DataBaseSampler", "(", "\n", "root_path", "=", "self", ".", "root_path", ",", "\n", "sampler_cfg", "=", "config", ",", "\n", "db_infos", "=", "self", ".", "db_infos", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "return", "db_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.waymo_gt_sampling": [[58, 67], ["waymo_database_sampler.DataBaseSampler"], "methods", ["None"], ["", "def", "waymo_gt_sampling", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "db_sampler", "=", "waymo_database_sampler", ".", "DataBaseSampler", "(", "\n", "root_path", "=", "self", ".", "root_path", ",", "\n", "sampler_cfg", "=", "config", ",", "\n", "db_infos", "=", "self", ".", "db_infos", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "return", "db_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.waymo_obj_gt_sampling": [[68, 76], ["waymo_obj_database_sampler.DataBaseSampler"], "methods", ["None"], ["", "def", "waymo_obj_gt_sampling", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "db_sampler", "=", "waymo_obj_database_sampler", ".", "DataBaseSampler", "(", "\n", "root_path", "=", "self", ".", "root_path", ",", "\n", "sampler_cfg", "=", "config", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "return", "db_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.add_best_match": [[77, 86], ["best_match_querier.BestMatchQuerier"], "methods", ["None"], ["", "def", "add_best_match", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "bm_querier", "=", "best_match_querier", ".", "BestMatchQuerier", "(", "\n", "root_path", "=", "self", ".", "root_path", ",", "\n", "querier_cfg", "=", "config", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "db_infos", "=", "self", ".", "db_infos", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "return", "bm_querier", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.add_multi_best_match": [[87, 96], ["multi_best_match_querier.MltBestMatchQuerier"], "methods", ["None"], ["", "def", "add_multi_best_match", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "bm_querier", "=", "multi_best_match_querier", ".", "MltBestMatchQuerier", "(", "\n", "root_path", "=", "self", ".", "root_path", ",", "\n", "querier_cfg", "=", "config", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "db_infos", "=", "self", ".", "db_infos", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "return", "bm_querier", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.add_waymo_multi_best_match": [[97, 106], ["waymo_multi_best_match_querier.MltBestMatchQuerier"], "methods", ["None"], ["", "def", "add_waymo_multi_best_match", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "bm_querier", "=", "waymo_multi_best_match_querier", ".", "MltBestMatchQuerier", "(", "\n", "root_path", "=", "self", ".", "root_path", ",", "\n", "querier_cfg", "=", "config", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "db_infos", "=", "self", ".", "db_infos", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n", "return", "bm_querier", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.__getstate__": [[107, 111], ["dict"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "d", "[", "'logger'", "]", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.__setstate__": [[112, 114], ["data_augmentor.DataAugmentor.__dict__.update"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.random_world_flip": [[115, 131], ["zip", "functools.partial", "getattr"], "methods", ["None"], ["", "def", "random_world_flip", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ",", "enable", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_world_flip", ",", "config", "=", "config", ",", "enable", "=", "enable", ")", "\n", "", "gt_boxes", ",", "points", ",", "bm_points", ",", "miss_points", ",", "self_points", ",", "other_points", "=", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", ",", "data_dict", "[", "'bm_points'", "]", "if", "\"bm_points\"", "in", "data_dict", "else", "None", ",", "data_dict", "[", "'miss_points'", "]", "if", "\"miss_points\"", "in", "data_dict", "else", "None", ",", "data_dict", "[", "'self_points'", "]", "if", "\"self_points\"", "in", "data_dict", "else", "None", ",", "data_dict", "[", "'other_points'", "]", "if", "\"other_points\"", "in", "data_dict", "else", "None", "\n", "special_points_lst", "=", "[", "data_dict", "[", "pt_key", "]", "for", "pt_key", "in", "SPECIAL_NAMES", "if", "pt_key", "in", "data_dict", "]", "\n", "special_name_lst", "=", "[", "pt_key", "for", "pt_key", "in", "SPECIAL_NAMES", "if", "pt_key", "in", "data_dict", "]", "\n", "for", "cur_axis", "in", "config", "[", "'ALONG_AXIS_LIST'", "]", ":", "\n", "            ", "assert", "cur_axis", "in", "[", "'x'", ",", "'y'", "]", "\n", "gt_boxes", ",", "points", ",", "special_points_lst", "=", "getattr", "(", "augmentor_utils", ",", "'random_flip_along_%s'", "%", "cur_axis", ")", "(", "\n", "gt_boxes", ",", "points", ",", "special_points_lst", "=", "special_points_lst", ",", "enable", "=", "enable", "\n", ")", "\n", "", "for", "name", ",", "val", "in", "zip", "(", "special_name_lst", ",", "special_points_lst", ")", ":", "\n", "            ", "data_dict", "[", "name", "]", "=", "val", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.abs_world_flip": [[132, 134], ["data_augmentor.DataAugmentor.random_world_flip"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.random_world_flip"], ["", "def", "abs_world_flip", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "random_world_flip", "(", "data_dict", "=", "data_dict", ",", "config", "=", "config", ",", "enable", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.random_world_rotation": [[136, 156], ["augmentor_utils.global_rotation", "zip", "config.get", "functools.partial", "isinstance"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.augmentor_utils.global_rotation"], ["", "def", "random_world_rotation", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_world_rotation", ",", "config", "=", "config", ")", "\n", "", "rot_range", "=", "config", "[", "'WORLD_ROT_ANGLE'", "]", "\n", "if", "not", "isinstance", "(", "rot_range", ",", "list", ")", ":", "\n", "            ", "rot_range", "=", "[", "-", "rot_range", ",", "rot_range", "]", "\n", "", "pre_rot_points", "=", "data_dict", "[", "'points'", "]", "\n", "special_points_lst", "=", "[", "data_dict", "[", "pt_key", "]", "for", "pt_key", "in", "SPECIAL_NAMES", "if", "pt_key", "in", "data_dict", "]", "\n", "special_name_lst", "=", "[", "pt_key", "for", "pt_key", "in", "SPECIAL_NAMES", "if", "pt_key", "in", "data_dict", "]", "\n", "gt_boxes", ",", "points", ",", "noise_rotation", ",", "special_points_lst", "=", "augmentor_utils", ".", "global_rotation", "(", "data_dict", "[", "'gt_boxes'", "]", ",", "pre_rot_points", ",", "rot_range", "=", "rot_range", ",", "special_points_lst", "=", "special_points_lst", ")", "\n", "\n", "for", "name", ",", "val", "in", "zip", "(", "special_name_lst", ",", "special_points_lst", ")", ":", "\n", "            ", "data_dict", "[", "name", "]", "=", "val", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "if", "config", ".", "get", "(", "\"SAVE_PRE_ROT\"", ",", "False", ")", ":", "\n", "            ", "data_dict", "[", "'pre_rot_points'", "]", "=", "pre_rot_points", "\n", "data_dict", "[", "'rot_z'", "]", "=", "noise_rotation", "*", "180", "/", "np", ".", "pi", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.random_world_scaling": [[157, 170], ["augmentor_utils.global_scaling", "zip", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.augmentor_utils.global_scaling"], ["", "def", "random_world_scaling", "(", "self", ",", "data_dict", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "data_dict", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "random_world_scaling", ",", "config", "=", "config", ")", "\n", "", "special_points_lst", "=", "[", "data_dict", "[", "pt_key", "]", "for", "pt_key", "in", "SPECIAL_NAMES", "if", "pt_key", "in", "data_dict", "]", "\n", "special_name_lst", "=", "[", "pt_key", "for", "pt_key", "in", "SPECIAL_NAMES", "if", "pt_key", "in", "data_dict", "]", "\n", "gt_boxes", ",", "points", ",", "special_points_lst", "=", "augmentor_utils", ".", "global_scaling", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", ",", "data_dict", "[", "'points'", "]", ",", "config", "[", "'WORLD_SCALE_RANGE'", "]", ",", "special_points_lst", "=", "special_points_lst", ")", "\n", "for", "name", ",", "val", "in", "zip", "(", "special_name_lst", ",", "special_points_lst", ")", ":", "\n", "            ", "data_dict", "[", "name", "]", "=", "val", "\n", "\n", "", "data_dict", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "data_dict", "[", "'points'", "]", "=", "points", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.data_augmentor.DataAugmentor.forward": [[171, 203], ["numpy.arange", "utils.common_utils.limit_period", "cur_augmentor.pop", "cur_augmentor.pop", "cur_augmentor.pop", "list", "cur_augmentor", "type"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.limit_period"], ["", "def", "forward", "(", "self", ",", "data_dict", ",", "validation", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                points: (N, 3 + C_in)\n                gt_boxes: optional, (N, 7) [x, y, z, dx, dy, dz, heading]\n                gt_names: optional, (N), string\n                ...\n\n        Returns:\n        \"\"\"", "\n", "data_dict", "[", "\"gt_boxes_inds\"", "]", "=", "np", ".", "arange", "(", "list", "(", "data_dict", "[", "\"gt_boxes_mask\"", "]", ".", "shape", ")", "[", "0", "]", ")", "\n", "for", "cur_augmentor", "in", "self", ".", "data_augmentor_queue", ":", "\n", "            ", "if", "not", "validation", "or", "type", "(", "cur_augmentor", ")", ".", "__name__", "in", "[", "\"BestMatchQuerier\"", ",", "\"MltBestMatchQuerier\"", "]", ":", "\n", "                ", "data_dict", "=", "cur_augmentor", "(", "data_dict", "=", "data_dict", ")", "\n", "\n", "", "", "data_dict", "[", "'gt_boxes'", "]", "[", ":", ",", "6", "]", "=", "common_utils", ".", "limit_period", "(", "\n", "data_dict", "[", "'gt_boxes'", "]", "[", ":", ",", "6", "]", ",", "offset", "=", "0.5", ",", "period", "=", "2", "*", "np", ".", "pi", "\n", ")", "\n", "# if 'calib' in data_dict:", "\n", "#     data_dict.pop('calib')", "\n", "if", "'road_plane'", "in", "data_dict", ":", "\n", "            ", "data_dict", ".", "pop", "(", "'road_plane'", ")", "\n", "", "if", "'gt_boxes_mask'", "in", "data_dict", ":", "\n", "            ", "gt_boxes_mask", "=", "data_dict", "[", "'gt_boxes_mask'", "]", "\n", "data_dict", "[", "'gt_boxes'", "]", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "gt_boxes_mask", "]", "\n", "data_dict", "[", "'gt_names'", "]", "=", "data_dict", "[", "'gt_names'", "]", "[", "gt_boxes_mask", "]", "\n", "if", "\"obj_ids\"", "in", "data_dict", ":", "\n", "                ", "data_dict", "[", "'obj_ids'", "]", "=", "data_dict", "[", "'obj_ids'", "]", "[", "gt_boxes_mask", "]", "\n", "", "data_dict", ".", "pop", "(", "'gt_boxes_mask'", ")", "\n", "", "data_dict", ".", "pop", "(", "'gt_boxes_inds'", ",", "None", ")", "\n", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_bev_iou_cpu": [[12, 29], ["utils.common_utils.check_numpy_to_torch", "utils.common_utils.check_numpy_to_torch", "boxes_a.new_zeros", "iou3d_nms_cuda.boxes_iou_bev_cpu", "torch.Size", "boxes_a.contiguous", "boxes_b.contiguous", "boxes_a.new_zeros.numpy"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch"], ["def", "boxes_bev_iou_cpu", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (N, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n\n    \"\"\"", "\n", "boxes_a", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes_a", ")", "\n", "boxes_b", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes_b", ")", "\n", "assert", "not", "(", "boxes_a", ".", "is_cuda", "or", "boxes_b", ".", "is_cuda", ")", ",", "'Only support CPU tensors'", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "7", "and", "boxes_b", ".", "shape", "[", "1", "]", "==", "7", "\n", "ans_iou", "=", "boxes_a", ".", "new_zeros", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "iou3d_nms_cuda", ".", "boxes_iou_bev_cpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "ans_iou", ")", "\n", "\n", "return", "ans_iou", ".", "numpy", "(", ")", "if", "is_numpy", "else", "ans_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou_bev": [[31, 46], ["torch.cuda.FloatTensor().zero_", "iou3d_nms_cuda.boxes_iou_bev_gpu", "boxes_a.contiguous", "boxes_b.contiguous", "torch.cuda.FloatTensor", "torch.Size"], "function", ["None"], ["", "def", "boxes_iou_bev", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (N, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n        ans_iou: (N, M)\n    \"\"\"", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "boxes_b", ".", "shape", "[", "1", "]", "==", "7", "\n", "ans_iou", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "iou3d_nms_cuda", ".", "boxes_iou_bev_gpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "ans_iou", ")", "\n", "\n", "return", "ans_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu": [[48, 82], ["torch.cuda.FloatTensor().zero_", "iou3d_nms_cuda.boxes_overlap_bev_gpu", "torch.max", "torch.min", "torch.clamp", "boxes_a.contiguous", "boxes_b.contiguous", "torch.clamp", "torch.cuda.FloatTensor", "torch.Size"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "boxes_iou3d_gpu", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        boxes_a: (N, 7) [x, y, z, dx, dy, dz, heading]\n        boxes_b: (N, 7) [x, y, z, dx, dy, dz, heading]\n\n    Returns:\n        ans_iou: (N, M)\n    \"\"\"", "\n", "assert", "boxes_a", ".", "shape", "[", "1", "]", "==", "boxes_b", ".", "shape", "[", "1", "]", "==", "7", "\n", "\n", "# height overlap", "\n", "boxes_a_height_max", "=", "(", "boxes_a", "[", ":", ",", "2", "]", "+", "boxes_a", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "boxes_a_height_min", "=", "(", "boxes_a", "[", ":", ",", "2", "]", "-", "boxes_a", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "boxes_b_height_max", "=", "(", "boxes_b", "[", ":", ",", "2", "]", "+", "boxes_b", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "boxes_b_height_min", "=", "(", "boxes_b", "[", ":", ",", "2", "]", "-", "boxes_b", "[", ":", ",", "5", "]", "/", "2", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# bev overlap", "\n", "overlaps_bev", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a", ".", "shape", "[", "0", "]", ",", "boxes_b", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "# (N, M)", "\n", "iou3d_nms_cuda", ".", "boxes_overlap_bev_gpu", "(", "boxes_a", ".", "contiguous", "(", ")", ",", "boxes_b", ".", "contiguous", "(", ")", ",", "overlaps_bev", ")", "\n", "\n", "max_of_min", "=", "torch", ".", "max", "(", "boxes_a_height_min", ",", "boxes_b_height_min", ")", "\n", "min_of_max", "=", "torch", ".", "min", "(", "boxes_a_height_max", ",", "boxes_b_height_max", ")", "\n", "overlaps_h", "=", "torch", ".", "clamp", "(", "min_of_max", "-", "max_of_min", ",", "min", "=", "0", ")", "\n", "\n", "# 3d iou", "\n", "overlaps_3d", "=", "overlaps_bev", "*", "overlaps_h", "\n", "\n", "vol_a", "=", "(", "boxes_a", "[", ":", ",", "3", "]", "*", "boxes_a", "[", ":", ",", "4", "]", "*", "boxes_a", "[", ":", ",", "5", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "vol_b", "=", "(", "boxes_b", "[", ":", ",", "3", "]", "*", "boxes_b", "[", ":", ",", "4", "]", "*", "boxes_b", "[", ":", ",", "5", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "iou3d", "=", "overlaps_3d", "/", "torch", ".", "clamp", "(", "vol_a", "+", "vol_b", "-", "overlaps_3d", ",", "min", "=", "1e-6", ")", "\n", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.nms_gpu": [[84, 100], ["boxes[].contiguous", "torch.LongTensor", "iou3d_nms_cuda.nms_gpu", "scores.sort", "boxes[].contiguous.size", "order[].contiguous", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.nms_gpu"], ["", "def", "nms_gpu", "(", "boxes", ",", "scores", ",", "thresh", ",", "pre_maxsize", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 7) [x, y, z, dx, dy, dz, heading]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "if", "pre_maxsize", "is", "not", "None", ":", "\n", "        ", "order", "=", "order", "[", ":", "pre_maxsize", "]", "\n", "\n", "", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_nms_cuda", ".", "nms_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.nms_normal_gpu": [[102, 117], ["boxes[].contiguous", "torch.LongTensor", "iou3d_nms_cuda.nms_normal_gpu", "scores.sort", "boxes[].contiguous.size", "order[].contiguous", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.nms_normal_gpu"], ["", "def", "nms_normal_gpu", "(", "boxes", ",", "scores", ",", "thresh", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 7) [x, y, z, dx, dy, dz, heading]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "\n", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_nms_cuda", ".", "nms_normal_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.nms_gpu_cpu": [[119, 135], ["boxes[].contiguous", "torch.LongTensor", "iou3d_nms_cuda.nms_gpu", "scores.sort", "boxes[].contiguous.size", "order[].contiguous().cpu().numpy", "order[].contiguous().cpu", "order[].contiguous", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.nms_gpu"], ["", "def", "nms_gpu_cpu", "(", "boxes", ",", "scores", ",", "thresh", ",", "pre_maxsize", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 7) [x, y, z, dx, dy, dz, heading]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "if", "pre_maxsize", "is", "not", "None", ":", "\n", "        ", "order", "=", "order", "[", ":", "pre_maxsize", "]", "\n", "\n", "", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_nms_cuda", ".", "nms_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "None", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_modules._PointnetSAModuleBase.__init__": [[12, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "self", ".", "pool_method", "=", "'max_pool'", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_modules._PointnetSAModuleBase.forward": [[19, 56], ["xyz.transpose().contiguous", "range", "len", "torch.avg_pool2d.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose().contiguous", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pointnet2_utils.gather_operation().transpose", "torch.avg_pool2d.size", "pointnet2_utils.gather_operation", "torch.avg_pool2d.size", "pointnet2_utils.furthest_point_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "new_xyz", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) tensor of the xyz coordinates of the features\n        :param features: (B, N, C) tensor of the descriptors of the the features\n        :param new_xyz:\n        :return:\n            new_xyz: (B, npoint, 3) tensor of the new features' xyz\n            new_features: (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "new_xyz", "is", "None", ":", "\n", "            ", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "xyz", ",", "new_xyz", ",", "features", ")", "# (B, C, npoint, nsample)", "\n", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "new_features", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pool_method", "==", "'max_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pool_method", "==", "'avg_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_modules.PointnetSAModuleMSG.__init__": [[61, 100], ["pointnet2_modules._PointnetSAModuleBase.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSG.groupers.append", "range", "pointnet2_modules.PointnetSAModuleMSG.mlps.append", "shared_mlps.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "npoint", ":", "int", ",", "radii", ":", "List", "[", "float", "]", ",", "nsamples", ":", "List", "[", "int", "]", ",", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        ", "\"\"\"\n        :param npoint: int\n        :param radii: list of float, list of radii to group with\n        :param nsamples: list of int, number of samples in each ball query\n        :param mlps: list of list of int, spec of the pointnet before the global pooling for each scale\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mlp_spec", ")", "-", "1", ")", ":", "\n", "                ", "shared_mlps", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "mlp_spec", "[", "k", "]", ",", "mlp_spec", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp_spec", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "mlps", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", ")", "\n", "\n", "", "self", ".", "pool_method", "=", "pool_method", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_modules.PointnetSAModule.__init__": [[105, 119], ["pointnet2_modules.PointnetSAModuleMSG.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "npoint", ":", "int", "=", "None", ",", "radius", ":", "float", "=", "None", ",", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int, spec of the pointnet before the global max_pool\n        :param npoint: int, number of features\n        :param radius: float, radius of ball\n        :param nsample: int, number of samples in the ball query\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "npoint", "=", "npoint", ",", "radii", "=", "[", "radius", "]", ",", "nsamples", "=", "[", "nsample", "]", ",", "bn", "=", "bn", ",", "use_xyz", "=", "use_xyz", ",", "\n", "pool_method", "=", "pool_method", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_modules.PointnetFPModule.__init__": [[125, 140], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shared_mlps.extend", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int\n        :param bn: whether to use batchnorm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mlp", ")", "-", "1", ")", ":", "\n", "            ", "shared_mlps", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "mlp", "[", "k", "]", ",", "mlp", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_modules.PointnetFPModule.forward": [[141, 171], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetFPModule.mlp", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "known_feats.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unknown.size", "known_feats.size"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param unknown: (B, n, 3) tensor of the xyz positions of the unknown features\n        :param known: (B, m, 3) tensor of the xyz positions of the known features\n        :param unknow_feats: (B, C1, n) tensor of the features to be propigated to\n        :param known_feats: (B, C2, m) tensor of features to be propigated\n        :return:\n            new_features: (B, mlp[-1], n) tensor of the features of the unknown features\n        \"\"\"", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "known_feats", ",", "idx", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "interpolated_feats", "=", "known_feats", ".", "expand", "(", "*", "known_feats", ".", "size", "(", ")", "[", "0", ":", "2", "]", ",", "unknown", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "if", "unknow_feats", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "interpolated_feats", ",", "unknow_feats", "]", ",", "dim", "=", "1", ")", "# (B, C2 + C1, n)", "\n", "", "else", ":", "\n", "            ", "new_features", "=", "interpolated_feats", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "mlp", "(", "new_features", ")", "\n", "\n", "return", "new_features", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.FurthestPointSampling.forward": [[11, 30], ["xyz.is_contiguous", "xyz.size", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "pointnet2_batch_cuda.furthest_point_sampling_wrapper", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ":", "torch", ".", "Tensor", ",", "npoint", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Uses iterative furthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n        :param ctx:\n        :param xyz: (B, N, 3) where N > npoint\n        :param npoint: int, number of features in the sampled set\n        :return:\n             output: (B, npoint) tensor containing the set\n        \"\"\"", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ")", "\n", "temp", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ")", ".", "fill_", "(", "1e10", ")", "\n", "\n", "pointnet2", ".", "furthest_point_sampling_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "xyz", ",", "temp", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.FurthestPointSampling.backward": [[31, 34], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.GatherOperation.forward": [[41, 61], ["features.is_contiguous", "idx.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_batch_cuda.gather_points_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N)\n        :param idx: (B, npoint) index tensor of the features to gather\n        :return:\n            output: (B, C, npoint)\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "npoint", ")", "\n", "\n", "pointnet2", ".", "gather_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.GatherOperation.backward": [[62, 71], ["idx.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_batch_cuda.gather_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "gather_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.ThreeNN.forward": [[78, 99], ["unknown.is_contiguous", "known.is_contiguous", "unknown.size", "known.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "pointnet2_batch_cuda.three_nn_wrapper", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Find the three nearest neighbors of unknown in known\n        :param ctx:\n        :param unknown: (B, N, 3)\n        :param known: (B, M, 3)\n        :return:\n            dist: (B, N, 3) l2 distance to the three nearest neighbors\n            idx: (B, N, 3) index of 3 nearest neighbors\n        \"\"\"", "\n", "assert", "unknown", ".", "is_contiguous", "(", ")", "\n", "assert", "known", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "unknown", ".", "size", "(", ")", "\n", "m", "=", "known", ".", "size", "(", "1", ")", "\n", "dist2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "\n", "pointnet2", ".", "three_nn_wrapper", "(", "B", ",", "N", ",", "m", ",", "unknown", ",", "known", ",", "dist2", ",", "idx", ")", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.ThreeNN.backward": [[100, 103], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.ThreeInterpolate.forward": [[110, 132], ["features.is_contiguous", "idx.is_contiguous", "weight.is_contiguous", "features.size", "idx.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_batch_cuda.three_interpolate_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs weight linear interpolation on 3 features\n        :param ctx:\n        :param features: (B, C, M) Features descriptors to be interpolated from\n        :param idx: (B, n, 3) three nearest neighbors of the target features in features\n        :param weight: (B, n, 3) weights\n        :return:\n            output: (B, C, N) tensor of the interpolated features\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "assert", "weight", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "n", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_wrapper", "(", "B", ",", "c", ",", "m", ",", "n", ",", "features", ",", "idx", ",", "weight", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.ThreeInterpolate.backward": [[133, 151], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_batch_cuda.three_interpolate_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, N) tensor with gradients of outputs\n        :return:\n            grad_features: (B, C, M) tensor with gradients of features\n            None:\n            None:\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "B", ",", "c", ",", "n", "=", "grad_out", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "m", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_grad_wrapper", "(", "B", ",", "c", ",", "n", ",", "m", ",", "grad_out_data", ",", "idx", ",", "weight", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.GroupingOperation.forward": [[158, 178], ["features.is_contiguous", "idx.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_batch_cuda.group_points_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N) tensor of features to group\n        :param idx: (B, npoint, nsample) tensor containing the indicies of features to group with\n        :return:\n            output: (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "nfeatures", ",", "nsample", ")", "\n", "\n", "pointnet2", ".", "group_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "nfeatures", ",", "nsample", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.GroupingOperation.backward": [[179, 195], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_batch_cuda.group_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, npoint, nsample) tensor of the gradients of the output from forward\n        :return:\n            grad_features: (B, C, N) gradient of the features\n        \"\"\"", "\n", "idx", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "B", ",", "C", ",", "npoint", ",", "nsample", "=", "grad_out", ".", "size", "(", ")", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "group_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "nsample", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.BallQuery.forward": [[202, 222], ["new_xyz.is_contiguous", "xyz.is_contiguous", "xyz.size", "new_xyz.size", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "pointnet2_batch_cuda.ball_query_wrapper", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param radius: float, radius of the balls\n        :param nsample: int, maximum number of features in the balls\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centers of the ball query\n        :return:\n            idx: (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "assert", "new_xyz", ".", "is_contiguous", "(", ")", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "npoint", "=", "new_xyz", ".", "size", "(", "1", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ",", "nsample", ")", ".", "zero_", "(", ")", "\n", "\n", "pointnet2", ".", "ball_query_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "radius", ",", "nsample", ",", "new_xyz", ",", "xyz", ",", "idx", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.BallQuery.backward": [[223, 226], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.QueryAndGroup.__init__": [[232, 240], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param radius: float, radius of ball\n        :param nsample: int, maximum number of features to gather in the ball\n        :param use_xyz:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.QueryAndGroup.forward": [[241, 265], ["ball_query", "xyz.transpose().contiguous", "grouping_operation", "new_xyz.transpose().unsqueeze", "grouping_operation", "xyz.transpose", "new_xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centroids\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, 3 + C, npoint, nsample)\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, C + 3, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "use_xyz", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.GroupAll.__init__": [[268, 271], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_batch.pointnet2_utils.GroupAll.forward": [[272, 291], ["xyz.transpose().unsqueeze", "features.unsqueeze", "xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: ignored\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, C + 3, 1, N)\n        \"\"\"", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_modules.StackSAModuleMSG.__init__": [[12, 47], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "pointnet2_modules.StackSAModuleMSG.init_weights", "len", "len", "len", "len", "pointnet2_modules.StackSAModuleMSG.groupers.append", "range", "pointnet2_modules.StackSAModuleMSG.mlps.append", "pointnet2_utils.QueryAndGroup", "shared_mlps.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.init_weights"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "self", ".", "pool_method", "=", "'max_pool'", "\n", "\n", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "new_xyz", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) tensor of the xyz coordinates of the features\n        :param features: (B, N, C) tensor of the descriptors of the the features\n        :param new_xyz:\n        :return:\n            new_xyz: (B, npoint, 3) tensor of the new features' xyz\n            new_features: (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "new_xyz", "is", "None", ":", "\n", "            ", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "xyz", ",", "new_xyz", ",", "features", ")", "# (B, C, npoint, nsample)", "\n", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "new_features", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pool_method", "==", "'max_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pool_method", "==", "'avg_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_modules.StackSAModuleMSG.init_weights": [[48, 57], ["pointnet2_modules.StackSAModuleMSG.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], [")", "# (B, mlp[-1], npoint, 1)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_modules.StackSAModuleMSG.forward": [[58, 109], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.avg_pool2d().squeeze.permute().unsqueeze", "torch.avg_pool2d().squeeze.squeeze().permute", "new_features_list.append", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "points_lst.append", "torch.max_pool2d().squeeze", "torch.max_pool2d().squeeze", "torch.max_pool2d().squeeze", "torch.avg_pool2d().squeeze.permute", "new_xyz_batch_cnt.tolist", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "prerot_points_lst.append", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze.squeeze", "new_features[].permute", "prerot_xyz.permute", "new_xyz_batch_cnt.tolist", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d().squeeze.size", "torch.avg_pool2d().squeeze.size"], "methods", ["None"], ["", "", "class", "PointnetSAModuleMSG", "(", "_PointnetSAModuleBase", ")", ":", "\n", "    ", "\"\"\"Pointnet set abstraction layer with multiscale grouping\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "*", ",", "npoint", ":", "int", ",", "radii", ":", "List", "[", "float", "]", ",", "nsamples", ":", "List", "[", "int", "]", ",", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        ", "\"\"\"\n        :param npoint: int\n        :param radii: list of float, list of radii to group with\n        :param nsamples: list of int, number of samples in each ball query\n        :param mlps: list of list of int, spec of the pointnet before the global pooling for each scale\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mlp_spec", ")", "-", "1", ")", ":", "\n", "                ", "shared_mlps", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "mlp_spec", "[", "k", "]", ",", "mlp_spec", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp_spec", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "mlps", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", ")", "\n", "\n", "", "self", ".", "pool_method", "=", "pool_method", "\n", "\n", "\n", "", "", "class", "PointnetSAModule", "(", "PointnetSAModuleMSG", ")", ":", "\n", "    ", "\"\"\"Pointnet set abstraction layer\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "npoint", ":", "int", "=", "None", ",", "radius", ":", "float", "=", "None", ",", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_modules.StackPointnetFPModule.__init__": [[112, 126], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shared_mlps.extend", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["\n", "super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "npoint", "=", "npoint", ",", "radii", "=", "[", "radius", "]", ",", "nsamples", "=", "[", "nsample", "]", ",", "bn", "=", "bn", ",", "use_xyz", "=", "use_xyz", ",", "\n", "pool_method", "=", "pool_method", "\n", ")", "\n", "\n", "\n", "", "", "class", "PointnetFPModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "r\"\"\"Propigates the features of one set to another\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_modules.StackPointnetFPModule.forward": [[127, 154], ["pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "pointnet2_modules.StackPointnetFPModule.mlp", "torch.cat.squeeze().squeeze().permute", "torch.cat.squeeze().squeeze().permute", "torch.cat.squeeze().squeeze().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze"], "methods", ["None"], ["\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "shared_mlps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mlp", ")", "-", "1", ")", ":", "\n", "            ", "shared_mlps", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "mlp", "[", "k", "]", ",", "mlp", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mlp", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "shared_mlps", ")", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param unknown: (B, n, 3) tensor of the xyz positions of the unknown features\n        :param known: (B, m, 3) tensor of the xyz positions of the known features\n        :param unknow_feats: (B, C1, n) tensor of the features to be propigated to\n        :param known_feats: (B, C2, m) tensor of features to be propigated\n        :return:\n            new_features: (B, mlp[-1], n) tensor of the features of the unknown features\n        \"\"\"", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.BallQuery.forward": [[10, 41], ["new_xyz.is_contiguous", "new_xyz_batch_cnt.is_contiguous", "xyz.is_contiguous", "xyz_batch_cnt.is_contiguous", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "isinstance", "pointnet2_stack_cuda.shell_query_wrapper", "pointnet2_stack_cuda.ball_query_wrapper", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor"], "methods", ["None"], ["class", "FurthestPointSampling", "(", "Function", ")", ":", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ":", "torch", ".", "Tensor", ",", "npoint", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Uses iterative furthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n        :param ctx:\n        :param xyz: (B, N, 3) where N > npoint\n        :param npoint: int, number of features in the sampled set\n        :return:\n             output: (B, npoint) tensor containing the set\n        \"\"\"", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ")", "\n", "temp", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ")", ".", "fill_", "(", "1e10", ")", "\n", "\n", "pointnet2", ".", "furthest_point_sampling_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "xyz", ",", "temp", ",", "output", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "\n", "", "", "furthest_point_sample", "=", "FurthestPointSampling", ".", "apply", "\n", "\n", "\n", "class", "GatherOperation", "(", "Function", ")", ":", "\n", "\n", "    ", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.BallQuery.backward": [[42, 45], ["None"], "methods", ["None"], ["def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.GroupingOperation.forward": [[52, 85], ["features.is_contiguous", "features_batch_cnt.is_contiguous", "idx.is_contiguous", "idx_batch_cnt.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_stack_cuda.group_points_wrapper", "features_batch_cnt.sum", "idx_batch_cnt.sum", "str", "str", "str", "str"], "methods", ["None"], ["\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "npoint", ")", "\n", "\n", "pointnet2", ".", "gather_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "gather_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n", "\n", "", "", "gather_operation", "=", "GatherOperation", ".", "apply", "\n", "\n", "\n", "class", "ThreeNN", "(", "Function", ")", ":", "\n", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.GroupingOperation.backward": [[86, 105], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_stack_cuda.group_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["\n", "assert", "unknown", ".", "is_contiguous", "(", ")", "\n", "assert", "known", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "unknown", ".", "size", "(", ")", "\n", "m", "=", "known", ".", "size", "(", "1", ")", "\n", "dist2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "\n", "pointnet2", ".", "three_nn_wrapper", "(", "B", ",", "N", ",", "m", ",", "unknown", ",", "known", ",", "dist2", ",", "idx", ")", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "\n", "", "", "three_nn", "=", "ThreeNN", ".", "apply", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.QueryAndGroup.__init__": [[111, 120], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs weight linear interpolation on 3 features\n        :param ctx:\n        :param features: (B, C, M) Features descriptors to be interpolated from\n        :param idx: (B, n, 3) three nearest neighbors of the target features in features\n        :param weight: (B, n, 3) weights\n        :return:\n            output: (B, C, N) tensor of the interpolated features\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.QueryAndGroup.forward": [[121, 174], ["ball_query", "new_xyz.unsqueeze", "xyz_batch_cnt.sum", "new_xyz_batch_cnt.sum", "grouping_operation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grouping_operation", "pointnet2_utils.QueryAndGroup.rotate", "str", "str", "str", "str", "len", "grouping_operation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grouping_operation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.QueryAndGroup.rotate"], ["assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "assert", "weight", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "n", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_wrapper", "(", "B", ",", "c", ",", "m", ",", "n", ",", "features", ",", "idx", ",", "weight", ",", "output", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, N) tensor with gradients of outputs\n        :return:\n            grad_features: (B, C, M) tensor with gradients of features\n            None:\n            None:\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "B", ",", "c", ",", "n", "=", "grad_out", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "m", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_grad_wrapper", "(", "B", ",", "c", ",", "n", ",", "m", ",", "grad_out_data", ",", "idx", ",", "weight", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "three_interpolate", "=", "ThreeInterpolate", ".", "apply", "\n", "\n", "\n", "class", "GroupingOperation", "(", "Function", ")", ":", "\n", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N) tensor of features to group\n        :param idx: (B, npoint, nsample) tensor containing the indicies of features to group with\n        :return:\n            output: (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "nfeatures", ",", "nsample", ")", "\n", "\n", "pointnet2", ".", "group_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "nfeatures", ",", "nsample", ",", "features", ",", "idx", ",", "output", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.QueryAndGroup.rotate": [[184, 194], ["list", "list", "rotateMatrix.view().repeat().view.view().repeat().view.view().repeat().view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.permute", "torch.einsum.permute", "grouped_xyz.permute", "rotateMatrix.view().repeat().view.view().repeat().view.view().repeat", "rotateMatrix.view().repeat().view.view().repeat().view.view"], "methods", ["None"], ["\n", "idx", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "B", ",", "C", ",", "npoint", ",", "nsample", "=", "grad_out", ".", "size", "(", ")", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "group_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "nsample", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.FurthestPointSampling.forward": [[196, 215], ["xyz.is_contiguous", "xyz.size", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "pointnet2_stack_cuda.furthest_point_sampling_wrapper", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["\n", "", "", "grouping_operation", "=", "GroupingOperation", ".", "apply", "\n", "\n", "\n", "class", "BallQuery", "(", "Function", ")", ":", "\n", "\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param radius: float, radius of the balls\n        :param nsample: int, maximum number of features in the balls\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centers of the ball query\n        :return:\n            idx: (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "assert", "new_xyz", ".", "is_contiguous", "(", ")", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.FurthestPointSampling.backward": [[216, 219], ["None"], "methods", ["None"], ["B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "npoint", "=", "new_xyz", ".", "size", "(", "1", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ",", "nsample", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.ThreeNN.forward": [[225, 251], ["unknown.new_zeros", "unknown_batch_cnt.new_zeros().int", "pointnet2_stack_cuda.three_nn_wrapper", "unknown_batch_cnt.__len__", "known_batch_cnt.__len__", "unknown.contiguous", "unknown_batch_cnt.contiguous", "known.contiguous", "known_batch_cnt.contiguous", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "unknown.shape.__len__", "known.shape.__len__", "unknown_batch_cnt.new_zeros"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "ball_query", "=", "BallQuery", ".", "apply", "\n", "\n", "\n", "class", "QueryAndGroup", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param radius: float, radius of ball\n        :param nsample: int, maximum number of features to gather in the ball\n        :param use_xyz:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "\n", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centroids\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, 3 + C, npoint, nsample)\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.ThreeNN.backward": [[252, 255], ["None"], "methods", ["None"], ["grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.ThreeInterpolate.forward": [[262, 280], ["features.new_zeros", "pointnet2_stack_cuda.three_interpolate_wrapper", "features.contiguous", "idx.contiguous", "weight.contiguous"], "methods", ["None"], ["new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "\n", "\n", "", "", "class", "GroupAll", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "\n", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: ignored\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, C + 3, 1, N)\n        \"\"\"", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pointnet2_stack.pointnet2_utils.ThreeInterpolate.backward": [[281, 297], ["grad_out.new_zeros", "pointnet2_stack_cuda.three_interpolate_grad_wrapper", "grad_out.contiguous", "idx.contiguous", "weight.contiguous"], "methods", ["None"], ["if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3d.__init__": [[45, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "max_pts_each_voxel", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "max_pts_each_voxel", "=", "max_pts_each_voxel", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3d.forward": [[50, 53], ["RoIAwarePool3dFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "rois", ",", "pts", ",", "pts_feature", ",", "pool_method", "=", "'max'", ")", ":", "\n", "        ", "assert", "pool_method", "in", "[", "'max'", ",", "'avg'", "]", "\n", "return", "RoIAwarePool3dFunction", ".", "apply", "(", "rois", ",", "pts", ",", "pts_feature", ",", "self", ".", "out_size", ",", "self", ".", "max_pts_each_voxel", ",", "pool_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3dFunction.forward": [[56, 94], ["isinstance", "pts_feature.new_zeros", "pts_feature.new_zeros", "pts_feature.new_zeros", "roiaware_pool3d_cuda.forward", "range", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "rois", ",", "pts", ",", "pts_feature", ",", "out_size", ",", "max_pts_each_voxel", ",", "pool_method", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            ctx:\n            rois: (N, 7) [x, y, z, dx, dy, dz, heading] (x, y, z) is the box center\n            pts: (npoints, 3)\n            pts_feature: (npoints, C)\n            out_size: int or tuple, like 7 or (7, 7, 7)\n            max_pts_each_voxel:\n            pool_method: 'max' or 'avg'\n\n        Returns:\n            pooled_features: (N, out_x, out_y, out_z, C)\n        \"\"\"", "\n", "assert", "rois", ".", "shape", "[", "1", "]", "==", "7", "and", "pts", ".", "shape", "[", "1", "]", "==", "3", "\n", "if", "isinstance", "(", "out_size", ",", "int", ")", ":", "\n", "            ", "out_x", "=", "out_y", "=", "out_z", "=", "out_size", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "out_size", ")", "==", "3", "\n", "for", "k", "in", "range", "(", "3", ")", ":", "\n", "                ", "assert", "isinstance", "(", "out_size", "[", "k", "]", ",", "int", ")", "\n", "", "out_x", ",", "out_y", ",", "out_z", "=", "out_size", "\n", "\n", "", "num_rois", "=", "rois", ".", "shape", "[", "0", "]", "\n", "num_channels", "=", "pts_feature", ".", "shape", "[", "-", "1", "]", "\n", "num_pts", "=", "pts", ".", "shape", "[", "0", "]", "\n", "\n", "pooled_features", "=", "pts_feature", ".", "new_zeros", "(", "(", "num_rois", ",", "out_x", ",", "out_y", ",", "out_z", ",", "num_channels", ")", ")", "\n", "argmax", "=", "pts_feature", ".", "new_zeros", "(", "(", "num_rois", ",", "out_x", ",", "out_y", ",", "out_z", ",", "num_channels", ")", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "pts_idx_of_voxels", "=", "pts_feature", ".", "new_zeros", "(", "(", "num_rois", ",", "out_x", ",", "out_y", ",", "out_z", ",", "max_pts_each_voxel", ")", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "pool_method_map", "=", "{", "'max'", ":", "0", ",", "'avg'", ":", "1", "}", "\n", "pool_method", "=", "pool_method_map", "[", "pool_method", "]", "\n", "roiaware_pool3d_cuda", ".", "forward", "(", "rois", ",", "pts", ",", "pts_feature", ",", "argmax", ",", "pts_idx_of_voxels", ",", "pooled_features", ",", "pool_method", ")", "\n", "\n", "ctx", ".", "roiaware_pool3d_for_backward", "=", "(", "pts_idx_of_voxels", ",", "argmax", ",", "pool_method", ",", "num_pts", ",", "num_channels", ")", "\n", "return", "pooled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.RoIAwarePool3dFunction.backward": [[95, 108], ["grad_out.new_zeros", "roiaware_pool3d_cuda.backward", "grad_out.contiguous"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "\"\"\"\n        :param grad_out: (N, out_x, out_y, out_z, C)\n        :return:\n            grad_in: (npoints, C)\n        \"\"\"", "\n", "pts_idx_of_voxels", ",", "argmax", ",", "pool_method", ",", "num_pts", ",", "num_channels", "=", "ctx", ".", "roiaware_pool3d_for_backward", "\n", "\n", "grad_in", "=", "grad_out", ".", "new_zeros", "(", "(", "num_pts", ",", "num_channels", ")", ")", "\n", "roiaware_pool3d_cuda", ".", "backward", "(", "pts_idx_of_voxels", ",", "argmax", ",", "grad_out", ".", "contiguous", "(", ")", ",", "grad_in", ",", "pool_method", ")", "\n", "\n", "return", "None", ",", "None", ",", "grad_in", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu": [[9, 26], ["utils.common_utils.check_numpy_to_torch", "utils.common_utils.check_numpy_to_torch", "points.new_zeros", "roiaware_pool3d_cuda.points_in_boxes_cpu", "boxes.float().contiguous", "points.float().contiguous", "points.new_zeros.numpy", "boxes.float", "points.float"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_cpu"], ["def", "points_in_boxes_cpu", "(", "points", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (num_points, 3)\n        boxes: [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center, each box DO NOT overlaps\n    Returns:\n        point_indices: (N, num_points)\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "==", "7", "\n", "assert", "points", ".", "shape", "[", "1", "]", "==", "3", "\n", "points", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "points", ")", "\n", "boxes", ",", "is_numpy", "=", "common_utils", ".", "check_numpy_to_torch", "(", "boxes", ")", "\n", "\n", "point_indices", "=", "points", ".", "new_zeros", "(", "(", "boxes", ".", "shape", "[", "0", "]", ",", "points", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "roiaware_pool3d_cuda", ".", "points_in_boxes_cpu", "(", "boxes", ".", "float", "(", ")", ".", "contiguous", "(", ")", ",", "points", ".", "float", "(", ")", ".", "contiguous", "(", ")", ",", "point_indices", ")", "\n", "\n", "return", "point_indices", ".", "numpy", "(", ")", "if", "is_numpy", "else", "point_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu": [[28, 42], ["points.new_zeros().fill_", "roiaware_pool3d_cuda.points_in_boxes_gpu", "boxes.contiguous", "points.contiguous", "points.new_zeros"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.roiaware_pool3d.roiaware_pool3d_utils.points_in_boxes_gpu"], ["", "def", "points_in_boxes_gpu", "(", "points", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    :param points: (B, M, 3)\n    :param boxes: (B, T, 7), num_valid_boxes <= T\n    :return box_idxs_of_pts: (B, M), default background = -1\n    \"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "0", "]", "==", "points", ".", "shape", "[", "0", "]", "\n", "assert", "boxes", ".", "shape", "[", "2", "]", "==", "7", "and", "points", ".", "shape", "[", "2", "]", "==", "3", "\n", "batch_size", ",", "num_points", ",", "_", "=", "points", ".", "shape", "\n", "\n", "box_idxs_of_pts", "=", "points", ".", "new_zeros", "(", "(", "batch_size", ",", "num_points", ")", ",", "dtype", "=", "torch", ".", "int", ")", ".", "fill_", "(", "-", "1", ")", "\n", "roiaware_pool3d_cuda", ".", "points_in_boxes_gpu", "(", "boxes", ".", "contiguous", "(", ")", ",", "points", ".", "contiguous", "(", ")", ",", "box_idxs_of_pts", ")", "\n", "\n", "return", "box_idxs_of_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.chamfer_distance.chamfer_distance.ChamferDistanceFunction.forward": [[16, 40], ["xyz1.contiguous.contiguous.size", "xyz2.contiguous.contiguous.size", "xyz1.contiguous.contiguous.contiguous", "xyz2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ctx.save_for_backward", "cd.forward", "dist1.cuda.cuda.cuda", "dist2.cuda.cuda.cuda", "idx1.cuda.cuda.cuda", "idx2.cuda.cuda.cuda", "cd.forward_cuda"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "batchsize", ",", "n", ",", "_", "=", "xyz1", ".", "size", "(", ")", "\n", "_", ",", "m", ",", "_", "=", "xyz2", ".", "size", "(", ")", "\n", "xyz1", "=", "xyz1", ".", "contiguous", "(", ")", "\n", "xyz2", "=", "xyz2", ".", "contiguous", "(", ")", "\n", "dist1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", "\n", "dist2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", "\n", "\n", "idx1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "idx2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "if", "not", "xyz1", ".", "is_cuda", ":", "\n", "            ", "cd", ".", "forward", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "dist1", "=", "dist1", ".", "cuda", "(", ")", "\n", "dist2", "=", "dist2", ".", "cuda", "(", ")", "\n", "idx1", "=", "idx1", ".", "cuda", "(", ")", "\n", "idx2", "=", "idx2", ".", "cuda", "(", ")", "\n", "cd", ".", "forward_cuda", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "return", "dist1", ",", "dist2", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.chamfer_distance.chamfer_distance.ChamferDistanceFunction.backward": [[41, 59], ["graddist1.contiguous.contiguous.contiguous", "graddist2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "xyz1.size", "xyz2.size", "cd.backward", "gradxyz1.cuda.cuda.cuda", "gradxyz2.cuda.cuda.cuda", "cd.backward_cuda"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "graddist1", ",", "graddist2", ")", ":", "\n", "        ", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", "=", "ctx", ".", "saved_tensors", "\n", "\n", "graddist1", "=", "graddist1", ".", "contiguous", "(", ")", "\n", "graddist2", "=", "graddist2", ".", "contiguous", "(", ")", "\n", "\n", "gradxyz1", "=", "torch", ".", "zeros", "(", "xyz1", ".", "size", "(", ")", ")", "\n", "gradxyz2", "=", "torch", ".", "zeros", "(", "xyz2", ".", "size", "(", ")", ")", "\n", "\n", "if", "not", "graddist1", ".", "is_cuda", ":", "\n", "            ", "cd", ".", "backward", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "gradxyz1", "=", "gradxyz1", ".", "cuda", "(", ")", "\n", "gradxyz2", "=", "gradxyz2", ".", "cuda", "(", ")", "\n", "cd", ".", "backward_cuda", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "", "return", "gradxyz1", ",", "gradxyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.chamfer_distance.chamfer_distance.ChamferDistance.forward": [[62, 64], ["ChamferDistanceFunction.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "return", "ChamferDistanceFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3d.__init__": [[10, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_sampled_points", "=", "512", ",", "pool_extra_width", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_sampled_points", "=", "num_sampled_points", "\n", "self", ".", "pool_extra_width", "=", "pool_extra_width", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3d.forward": [[15, 28], ["RoIPointPool3dFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "points", ",", "point_features", ",", "boxes3d", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            points: (B, N, 3)\n            point_features: (B, N, C)\n            boxes3d: (B, M, 7), [x, y, z, dx, dy, dz, heading]\n\n        Returns:\n            pooled_features: (B, M, 512, 3 + C)\n            pooled_empty_flag: (B, M)\n        \"\"\"", "\n", "return", "RoIPointPool3dFunction", ".", "apply", "(", "\n", "points", ",", "point_features", ",", "boxes3d", ",", "self", ".", "pool_extra_width", ",", "self", ".", "num_sampled_points", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.forward": [[32, 60], ["utils.box_utils.enlarge_box3d().view", "point_features.new_zeros", "point_features.new_zeros().int", "roipoint_pool3d_cuda.forward", "points.contiguous", "utils.box_utils.enlarge_box3d().view.contiguous", "point_features.contiguous", "points.shape.__len__", "utils.box_utils.enlarge_box3d", "point_features.new_zeros", "boxes3d.view"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.enlarge_box3d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "points", ",", "point_features", ",", "boxes3d", ",", "pool_extra_width", ",", "num_sampled_points", "=", "512", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            ctx:\n            points: (B, N, 3)\n            point_features: (B, N, C)\n            boxes3d: (B, num_boxes, 7), [x, y, z, dx, dy, dz, heading]\n            pool_extra_width:\n            num_sampled_points:\n\n        Returns:\n            pooled_features: (B, num_boxes, 512, 3 + C)\n            pooled_empty_flag: (B, num_boxes)\n        \"\"\"", "\n", "assert", "points", ".", "shape", ".", "__len__", "(", ")", "==", "3", "and", "points", ".", "shape", "[", "2", "]", "==", "3", "\n", "batch_size", ",", "boxes_num", ",", "feature_len", "=", "points", ".", "shape", "[", "0", "]", ",", "boxes3d", ".", "shape", "[", "1", "]", ",", "point_features", ".", "shape", "[", "2", "]", "\n", "pooled_boxes3d", "=", "box_utils", ".", "enlarge_box3d", "(", "boxes3d", ".", "view", "(", "-", "1", ",", "7", ")", ",", "pool_extra_width", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "\n", "pooled_features", "=", "point_features", ".", "new_zeros", "(", "(", "batch_size", ",", "boxes_num", ",", "num_sampled_points", ",", "3", "+", "feature_len", ")", ")", "\n", "pooled_empty_flag", "=", "point_features", ".", "new_zeros", "(", "(", "batch_size", ",", "boxes_num", ")", ")", ".", "int", "(", ")", "\n", "\n", "roipoint_pool3d_cuda", ".", "forward", "(", "\n", "points", ".", "contiguous", "(", ")", ",", "pooled_boxes3d", ".", "contiguous", "(", ")", ",", "\n", "point_features", ".", "contiguous", "(", ")", ",", "pooled_features", ",", "pooled_empty_flag", "\n", ")", "\n", "\n", "return", "pooled_features", ",", "pooled_empty_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.backward": [[61, 64], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.models.__init__.build_network": [[9, 14], ["detectors.build_detector"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.__init__.build_detector"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.models.__init__.load_data_to_gpu": [[16, 23], ["batch_dict.items", "torch.from_numpy().float().cuda", "isinstance", "torch.from_numpy().float", "torch.from_numpy"], "function", ["None"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.models.__init__.model_fn_decorator": [[25, 41], ["collections.namedtuple", "__init__.load_data_to_gpu", "model", "ret_dict[].mean", "hasattr", "collections.namedtuple.", "model.update_global_step", "model.module.update_global_step"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.models.__init__.load_data_to_gpu", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.update_global_step", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.update_global_step"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_2d.base_bev_backbone.BaseBEVBackbone.__init__": [[7, 80], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "sum", "base_bev_backbone.BaseBEVBackbone.model_cfg.get", "base_bev_backbone.BaseBEVBackbone.model_cfg.get", "range", "base_bev_backbone.BaseBEVBackbone.blocks.append", "len", "base_bev_backbone.BaseBEVBackbone.deblocks.append", "len", "len", "len", "len", "len", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cur_layers.extend", "torch.Sequential", "torch.Sequential", "len", "torch.Sequential", "torch.Sequential", "base_bev_backbone.BaseBEVBackbone.deblocks.append", "numpy.round().astype", "base_bev_backbone.BaseBEVBackbone.deblocks.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "numpy.round", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'LAYER_NUMS'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "model_cfg", ".", "LAYER_NUMS", ")", "==", "len", "(", "self", ".", "model_cfg", ".", "LAYER_STRIDES", ")", "==", "len", "(", "self", ".", "model_cfg", ".", "NUM_FILTERS", ")", "\n", "layer_nums", "=", "self", ".", "model_cfg", ".", "LAYER_NUMS", "\n", "layer_strides", "=", "self", ".", "model_cfg", ".", "LAYER_STRIDES", "\n", "num_filters", "=", "self", ".", "model_cfg", ".", "NUM_FILTERS", "\n", "", "else", ":", "\n", "            ", "layer_nums", "=", "layer_strides", "=", "num_filters", "=", "[", "]", "\n", "\n", "", "if", "self", ".", "model_cfg", ".", "get", "(", "'UPSAMPLE_STRIDES'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "model_cfg", ".", "UPSAMPLE_STRIDES", ")", "==", "len", "(", "self", ".", "model_cfg", ".", "NUM_UPSAMPLE_FILTERS", ")", "\n", "num_upsample_filters", "=", "self", ".", "model_cfg", ".", "NUM_UPSAMPLE_FILTERS", "\n", "upsample_strides", "=", "self", ".", "model_cfg", ".", "UPSAMPLE_STRIDES", "\n", "", "else", ":", "\n", "            ", "upsample_strides", "=", "num_upsample_filters", "=", "[", "]", "\n", "\n", "", "num_levels", "=", "len", "(", "layer_nums", ")", "\n", "c_in_list", "=", "[", "input_channels", ",", "*", "num_filters", "[", ":", "-", "1", "]", "]", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "deblocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "idx", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "cur_layers", "=", "[", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "c_in_list", "[", "idx", "]", ",", "num_filters", "[", "idx", "]", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "layer_strides", "[", "idx", "]", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "[", "idx", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "for", "k", "in", "range", "(", "layer_nums", "[", "idx", "]", ")", ":", "\n", "                ", "cur_layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "num_filters", "[", "idx", "]", ",", "num_filters", "[", "idx", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_filters", "[", "idx", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "cur_layers", ")", ")", "\n", "if", "len", "(", "upsample_strides", ")", ">", "0", ":", "\n", "                ", "stride", "=", "upsample_strides", "[", "idx", "]", "\n", "if", "stride", ">=", "1", ":", "\n", "                    ", "self", ".", "deblocks", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "num_filters", "[", "idx", "]", ",", "num_upsample_filters", "[", "idx", "]", ",", "\n", "upsample_strides", "[", "idx", "]", ",", "\n", "stride", "=", "upsample_strides", "[", "idx", "]", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_upsample_filters", "[", "idx", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "np", ".", "round", "(", "1", "/", "stride", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "self", ".", "deblocks", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "num_filters", "[", "idx", "]", ",", "num_upsample_filters", "[", "idx", "]", ",", "\n", "stride", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_upsample_filters", "[", "idx", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", ")", "\n", "\n", "", "", "", "c_in", "=", "sum", "(", "num_upsample_filters", ")", "\n", "if", "len", "(", "upsample_strides", ")", ">", "num_levels", ":", "\n", "            ", "self", ".", "deblocks", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "c_in", ",", "c_in", ",", "upsample_strides", "[", "-", "1", "]", ",", "stride", "=", "upsample_strides", "[", "-", "1", "]", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "c_in", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", ")", "\n", "\n", "", "self", ".", "num_bev_features", "=", "c_in", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_2d.base_bev_backbone.BaseBEVBackbone.forward": [[81, 113], ["range", "len", "int", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "len", "ups.append", "ups.append", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_dict:\n                spatial_features\n        Returns:\n        \"\"\"", "\n", "spatial_features", "=", "data_dict", "[", "'spatial_features'", "]", "\n", "ups", "=", "[", "]", "\n", "ret_dict", "=", "{", "}", "\n", "x", "=", "spatial_features", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "[", "i", "]", "(", "x", ")", "\n", "\n", "stride", "=", "int", "(", "spatial_features", ".", "shape", "[", "2", "]", "/", "x", ".", "shape", "[", "2", "]", ")", "\n", "ret_dict", "[", "'spatial_features_%dx'", "%", "stride", "]", "=", "x", "\n", "if", "len", "(", "self", ".", "deblocks", ")", ">", "0", ":", "\n", "                ", "ups", ".", "append", "(", "self", ".", "deblocks", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "ups", ".", "append", "(", "x", ")", "\n", "\n", "", "", "if", "len", "(", "ups", ")", ">", "1", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "ups", ",", "dim", "=", "1", ")", "\n", "", "elif", "len", "(", "ups", ")", "==", "1", ":", "\n", "            ", "x", "=", "ups", "[", "0", "]", "\n", "\n", "", "if", "len", "(", "self", ".", "deblocks", ")", ">", "len", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "self", ".", "deblocks", "[", "-", "1", "]", "(", "x", ")", "\n", "\n", "", "data_dict", "[", "'spatial_features_2d'", "]", "=", "x", "\n", "\n", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.map_to_bev.pointpillar_scatter.PointPillarScatter.__init__": [[6, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_bev_features", "=", "self", ".", "raw_num_bev_features", "=", "self", ".", "model_cfg", ".", "NUM_BEV_FEATURES", "\n", "self", ".", "occ_dim", "=", "kwargs", "[", "\"occ_dim\"", "]", "\n", "if", "self", ".", "occ_dim", "is", "not", "None", ":", "\n", "            ", "self", ".", "num_bev_features", "+=", "self", ".", "occ_dim", "[", "-", "1", "]", "\n", "", "self", ".", "nx", ",", "self", ".", "ny", ",", "self", ".", "nz", "=", "grid_size", "\n", "assert", "self", ".", "nz", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.map_to_bev.pointpillar_scatter.PointPillarScatter.forward": [[17, 45], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "batch_spatial_features.view.view.view", "coords[].max().int().item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "indices.type.type.type", "pillars.t.t.t", "batch_spatial_features.view.view.append", "[].permute().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "coords[].max().int", "[].permute", "coords[].max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "pillar_features", ",", "coords", "=", "batch_dict", "[", "'pillar_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "batch_spatial_features", "=", "[", "]", "\n", "batch_size", "=", "coords", "[", ":", ",", "0", "]", ".", "max", "(", ")", ".", "int", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "spatial_feature", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "raw_num_bev_features", ",", "\n", "self", ".", "nz", "*", "self", ".", "nx", "*", "self", ".", "ny", ",", "\n", "dtype", "=", "pillar_features", ".", "dtype", ",", "\n", "device", "=", "pillar_features", ".", "device", ")", "\n", "\n", "batch_mask", "=", "coords", "[", ":", ",", "0", "]", "==", "batch_idx", "\n", "this_coords", "=", "coords", "[", "batch_mask", ",", ":", "]", "\n", "indices", "=", "this_coords", "[", ":", ",", "1", "]", "+", "this_coords", "[", ":", ",", "2", "]", "*", "self", ".", "nx", "+", "this_coords", "[", ":", ",", "3", "]", "\n", "indices", "=", "indices", ".", "type", "(", "torch", ".", "long", ")", "\n", "pillars", "=", "pillar_features", "[", "batch_mask", ",", ":", "]", "\n", "pillars", "=", "pillars", ".", "t", "(", ")", "\n", "spatial_feature", "[", ":", ",", "indices", "]", "=", "pillars", "\n", "if", "\"occ_map\"", "in", "batch_dict", ":", "\n", "                ", "occ_map", "=", "batch_dict", "[", "\"occ_map\"", "]", "[", "batch_idx", ",", "...", "]", ".", "permute", "(", "2", ",", "1", ",", "0", ")", ".", "reshape", "(", "self", ".", "occ_dim", "[", "2", "]", ",", "self", ".", "occ_dim", "[", "0", "]", "*", "self", ".", "occ_dim", "[", "1", "]", ")", "\n", "spatial_feature", "=", "torch", ".", "cat", "(", "[", "spatial_feature", ",", "occ_map", "]", ",", "axis", "=", "0", ")", "\n", "", "batch_spatial_features", ".", "append", "(", "spatial_feature", ")", "\n", "\n", "", "batch_spatial_features", "=", "torch", ".", "stack", "(", "batch_spatial_features", ",", "0", ")", "\n", "batch_spatial_features", "=", "batch_spatial_features", ".", "view", "(", "batch_size", ",", "self", ".", "num_bev_features", "*", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", ")", "\n", "batch_dict", "[", "'spatial_features'", "]", "=", "batch_spatial_features", "\n", "# print(\"map2bev, batch_spatial_features\", batch_spatial_features.shape)", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.map_to_bev.height_compression.HeightCompression.__init__": [[5, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_bev_features", "=", "self", ".", "model_cfg", ".", "NUM_BEV_FEATURES", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.map_to_bev.height_compression.HeightCompression.forward": [[10, 27], ["encoded_spconv_tensor.dense", "spatial_features.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        Returns:\n            batch_dict:\n                spatial_features:\n\n        \"\"\"", "\n", "encoded_spconv_tensor", "=", "batch_dict", "[", "'encoded_spconv_tensor'", "]", "\n", "spatial_features", "=", "encoded_spconv_tensor", ".", "dense", "(", ")", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "spatial_features", ".", "shape", "\n", "spatial_features", "=", "spatial_features", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "batch_dict", "[", "'spatial_features'", "]", "=", "spatial_features", "\n", "batch_dict", "[", "'spatial_features_stride'", "]", "=", "batch_dict", "[", "'encoded_spconv_tensor_stride'", "]", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.fixSparseConv3d.__init__": [[46, 49], ["spconv.SparseConv3d.__init__", "spconv_backbone.fixSparseConv3d.weight.data.fill_"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "indice_key", "=", "None", ",", "defaultvalue", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "fixSparseConv3d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ",", "indice_key", "=", "indice_key", ")", "\n", "self", ".", "weight", ".", "data", ".", "fill_", "(", "defaultvalue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.SparseBasicBlock.__init__": [[53, 69], ["spconv.SparseModule.__init__", "spconv.SubMConv3d", "norm_fn", "torch.ReLU", "torch.ReLU", "spconv.SubMConv3d", "norm_fn"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "norm_fn", "=", "None", ",", "downsample", "=", "None", ",", "indice_key", "=", "None", ")", ":", "\n", "        ", "super", "(", "SparseBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "norm_fn", "is", "not", "None", "\n", "bias", "=", "norm_fn", "is", "not", "None", "\n", "self", ".", "conv1", "=", "spconv", ".", "SubMConv3d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "bias", ",", "indice_key", "=", "indice_key", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_fn", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "spconv", ".", "SubMConv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "bias", ",", "indice_key", "=", "indice_key", "\n", ")", "\n", "self", ".", "bn2", "=", "norm_fn", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.SparseBasicBlock.forward": [[70, 87], ["spconv_backbone.SparseBasicBlock.conv1", "spconv_backbone.SparseBasicBlock.bn1", "spconv_backbone.SparseBasicBlock.relu", "spconv_backbone.SparseBasicBlock.conv2", "spconv_backbone.SparseBasicBlock.bn2", "spconv_backbone.SparseBasicBlock.relu", "spconv_backbone.SparseBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", ".", "features", "=", "self", ".", "bn1", "(", "out", ".", "features", ")", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", ".", "features", "=", "self", ".", "bn2", "(", "out", ".", "features", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", ".", "features", "+=", "identity", ".", "features", "\n", "out", ".", "features", "=", "self", ".", "relu", "(", "out", ".", "features", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconv.__init__": [[92, 137], ["torch.Module.__init__", "model_cfg.get", "functools.partial", "print", "print", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "block", "block", "block", "block", "block", "block", "block", "block", "block"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "y_shift", "=", "model_cfg", ".", "get", "(", "\"SHIFT\"", ",", "0", ")", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "self", ".", "sparse_shape", "=", "grid_size", "[", ":", ":", "-", "1", "]", "# + [1, 0, 0]", "\n", "self", ".", "sparse_shape", "[", "1", "]", "+=", "self", ".", "y_shift", "*", "2", "\n", "\n", "print", "(", "\"self.sparse_shape\"", ",", "self", ".", "sparse_shape", ")", "# [  10 400 352]", "\n", "print", "(", "\"input_channels\"", ",", "input_channels", ")", "\n", "block", "=", "post_act_block", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "# [16, 64, 128] # [16, 32, 64] # [16, 64, 128]", "\n", "\n", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "input_channels", ",", "channels", "[", "0", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv1'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "# 1", "\n", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", ")", "# 2", "\n", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", ")", "# 2", "\n", "\n", "self", ".", "deconv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'spdeconv'", ")", ",", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", "\n", ")", "\n", "\n", "self", ".", "deconv5", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv5'", ",", "conv_type", "=", "'spdeconv'", ")", ",", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm5'", ")", "\n", ")", "\n", "\n", "#", "\n", "# self.convlast = spconv.SparseSequential(", "\n", "#     block(channels[1], channels[1], 3, norm_fn=norm_fn, padding=1, indice_key='sublast'),", "\n", "#     # block(64, 64, 3, norm_fn=norm_fn, stride=1, padding=1, indice_key='spconv4'),", "\n", "# )", "\n", "\n", "self", ".", "num_point_features", "=", "channels", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconv.forward": [[138, 204], ["spconv.SparseConvTensor", "spconv_backbone.VoxelBackBoneDeconv.conv1", "spconv_backbone.VoxelBackBoneDeconv.conv2", "spconv_backbone.VoxelBackBoneDeconv.conv3", "spconv_backbone.VoxelBackBoneDeconv.deconv4", "spconv_backbone.VoxelBackBoneDeconv.deconv5", "batch_dict.update", "batch_dict[].int", "spconv_backbone.VoxelBackBoneDeconv.add_shift", "spconv_backbone.VoxelBackBoneDeconv.remove_shift"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconv.add_shift", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconv.remove_shift"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        \"\"\"", "\n", "# voxel_features, voxel_coords = batch_dict['voxel_features'], batch_dict['voxel_coords']", "\n", "voxel_features", ",", "voxel_coords", "=", "batch_dict", "[", "'voxel_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", ".", "int", "(", ")", "#batch_dict[\"valid_coords_bnznynx\"]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "# print(\"voxel_features\",voxel_features.shape, voxel_coords.shape)", "\n", "if", "self", ".", "y_shift", ">", "0", ":", "\n", "            ", "voxel_features", ",", "voxel_coords", "=", "self", ".", "add_shift", "(", "voxel_features", ",", "voxel_coords", ")", "\n", "", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "# print(\"voxel_features\", voxel_features.shape)", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "input_sp_tensor", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "x_conv2d", "=", "self", ".", "deconv4", "(", "x_conv3", ")", "\n", "x_conv1d", "=", "self", ".", "deconv5", "(", "x_conv2d", ")", "\n", "if", "self", ".", "y_shift", ">", "0", ":", "\n", "            ", "x_conv1d", "=", "self", ".", "remove_shift", "(", "x_conv1d", ")", "\n", "# print(input_sp_tensor.spatial_shape)", "\n", "# print(x_conv1.spatial_shape)", "\n", "# print(x_conv2.spatial_shape)", "\n", "# print(x_conv3.spatial_shape)", "\n", "# print(x_conv2d.spatial_shape)", "\n", "# print(x_conv1d.spatial_shape)", "\n", "# out = self.convlast(x_conv1d)", "\n", "\n", "# for name, param in self.conv1.named_parameters():", "\n", "#     print(\"name grad:\", param.data, name)", "\n", "#     break", "\n", "# print(\"input_sp_tensor\", torch.nonzero(input_sp_tensor.dense()).shape)", "\n", "# print(\"x_conv1\", x_conv1.features.shape, x_conv1.dense().shape)", "\n", "# print(\"x_conv2\", x_conv2.features.shape, x_conv2.dense().shape)", "\n", "# print(\"x_conv3\", x_conv3.features.shape, x_conv3.dense().shape)", "\n", "# print(\"x_conv2d\", x_conv2d.features.shape, x_conv2d.dense().shape)", "\n", "# print(\"x_conv1d\", x_conv1d.features.shape, x_conv1d.dense().shape)", "\n", "# for detection head", "\n", "# [200, 176, 5] -> [200, 176, 2]", "\n", "# out = x_conv4", "\n", "\n", "", "batch_dict", ".", "update", "(", "{", "\n", "'encoded_spconv_tensor'", ":", "x_conv1d", ",", "\n", "'encoded_spconv_tensor_stride'", ":", "1", "\n", "}", ")", "\n", "# batch_dict.update({", "\n", "#     'multi_scale_3d_features': {", "\n", "#         'x_conv1': x_conv1,", "\n", "#         'x_conv2': x_conv2,", "\n", "#         'x_conv3': x_conv3,", "\n", "#         'x_conv2d': x_conv2d,", "\n", "#         'x_conv1d': x_conv1d,", "\n", "#     }", "\n", "# })", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconv.remove_shift": [[205, 213], ["None"], "methods", ["None"], ["", "def", "remove_shift", "(", "self", ",", "sparse_feat", ")", ":", "\n", "        ", "y_max", "=", "self", ".", "sparse_shape", "[", "1", "]", "-", "2", "*", "self", ".", "y_shift", "\n", "sparse_feat", ".", "indices", "[", "...", ",", "2", "]", "-=", "self", ".", "y_shift", "\n", "keep_inds", "=", "(", "sparse_feat", ".", "indices", "[", "...", ",", "2", "]", ">=", "0", ")", "&", "(", "sparse_feat", ".", "indices", "[", "...", ",", "2", "]", "<", "y_max", ")", "\n", "sparse_feat", ".", "features", "=", "sparse_feat", ".", "features", "[", "keep_inds", ",", ":", "]", "\n", "sparse_feat", ".", "indices", "=", "sparse_feat", ".", "indices", "[", "keep_inds", ",", ":", "]", "\n", "sparse_feat", ".", "spatial_shape", "[", "1", "]", "-=", "self", ".", "y_shift", "*", "2", "\n", "return", "sparse_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconv.add_shift": [[214, 225], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "voxel_coords[].clone", "voxel_coords[].clone"], "methods", ["None"], ["", "def", "add_shift", "(", "self", ",", "voxel_features", ",", "voxel_coords", ")", ":", "\n", "        ", "y_max", "=", "self", ".", "sparse_shape", "[", "1", "]", "-", "2", "*", "self", ".", "y_shift", "\n", "left_ind", "=", "voxel_coords", "[", "...", ",", "2", "]", "<", "self", ".", "y_shift", "\n", "right_ind", "=", "voxel_coords", "[", "...", ",", "2", "]", ">=", "(", "y_max", "-", "self", ".", "y_shift", ")", "\n", "left_feat", ",", "left_coords", ",", "right_feat", ",", "right_coords", "=", "voxel_features", "[", "left_ind", ",", ":", "]", ",", "voxel_coords", "[", "left_ind", ",", ":", "]", ".", "clone", "(", ")", ",", "voxel_features", "[", "right_ind", ",", ":", "]", ",", "voxel_coords", "[", "right_ind", ",", ":", "]", ".", "clone", "(", ")", "\n", "right_coords", "[", "...", ",", "2", "]", "-=", "y_max", "\n", "left_coords", "[", "...", ",", "2", "]", "+=", "y_max", "\n", "all_features", "=", "torch", ".", "cat", "(", "[", "right_feat", ",", "voxel_features", ",", "left_feat", "]", ",", "dim", "=", "0", ")", "\n", "all_coords", "=", "torch", ".", "cat", "(", "[", "right_coords", ",", "voxel_coords", ",", "left_coords", "]", ",", "dim", "=", "0", ")", "\n", "all_coords", "[", "...", ",", "2", "]", "+=", "self", ".", "y_shift", "\n", "return", "all_features", ",", "all_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconvRes.__init__": [[227, 293], ["torch.Module.__init__", "functools.partial", "print", "print", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "block", "block", "block", "block", "block", "block", "block", "block", "block", "block", "block"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "self", ".", "sparse_shape", "=", "grid_size", "[", ":", ":", "-", "1", "]", "# + [1, 0, 0]", "\n", "print", "(", "\"self.sparse_shape\"", ",", "self", ".", "sparse_shape", ")", "# [  10 400 352]", "\n", "print", "(", "\"input_channels\"", ",", "input_channels", ")", "\n", "block", "=", "post_act_block", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "# [16, 64, 128] # [16, 32, 64] # [16, 64, 128]", "\n", "\n", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "input_channels", ",", "channels", "[", "0", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv1'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "# 1", "\n", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", ")", "# 2", "\n", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", ")", "# 2", "\n", "\n", "self", ".", "conv22", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv22'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "deconv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconvd2'", ",", "\n", "conv_type", "=", "'spdeconv'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "comb_conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", "+", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'submd2'", ")", "\n", ")", "\n", "\n", "self", ".", "conv11", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "0", "]", ",", "channels", "[", "0", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv11'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "deconv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconvd1'", ",", "\n", "conv_type", "=", "'spdeconv'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "comb_conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", "+", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'submd1'", ")", "\n", ")", "\n", "\n", "# self.deconv5 = spconv.SparseSequential(", "\n", "#     block(channels[1], channels[1], 3, norm_fn=norm_fn, stride=2, padding=1, indice_key='spconvd1',", "\n", "#           conv_type='spdeconv'),", "\n", "#     block(channels[1], channels[1], 3, norm_fn=norm_fn, padding=1, indice_key='subm5')", "\n", "# )", "\n", "\n", "# self.convlast = spconv.SparseSequential(", "\n", "#     block(channels[1], channels[1], 3, norm_fn=norm_fn, padding=1, indice_key='sublast'),", "\n", "#     # block(64, 64, 3, norm_fn=norm_fn, stride=1, padding=1, indice_key='spconv4'),", "\n", "# )", "\n", "self", ".", "num_point_features", "=", "channels", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconvRes.combine": [[306, 319], ["conv_expnd", "list", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "comb_conv"], "methods", ["None"], ["", "def", "combine", "(", "self", ",", "x_lateral", ",", "x_bottom", ",", "conv_expnd", ",", "comb_conv", ")", ":", "\n", "        ", "x_expnd", "=", "conv_expnd", "(", "x_lateral", ")", "\n", "N", ",", "Fe", "=", "list", "(", "x_expnd", ".", "features", ".", "shape", ")", "\n", "M", ",", "Fb", "=", "list", "(", "x_bottom", ".", "features", ".", "shape", ")", "\n", "ind_e", "=", "x_expnd", ".", "indices", "\n", "ind_b", "=", "x_bottom", ".", "indices", "\n", "ind_all", "=", "torch", ".", "cat", "(", "[", "ind_b", ",", "ind_e", "]", ",", "dim", "=", "0", ")", "\n", "_", ",", "rinds", "=", "torch", ".", "unique", "(", "ind_all", ",", "dim", "=", "0", ",", "return_inverse", "=", "True", ")", "\n", "pad_feat", "=", "torch", ".", "zeros", "(", "[", "M", ",", "Fe", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "pad_feat", "[", "rinds", "[", "M", ":", "]", ",", ":", "]", "=", "x_expnd", ".", "features", "\n", "x_bottom", ".", "features", "=", "torch", ".", "cat", "(", "[", "x_bottom", ".", "features", ",", "pad_feat", "]", ",", "dim", "=", "-", "1", ")", "\n", "# print(\"ind_e\", ind_e.shape, ind_b.shape)", "\n", "return", "comb_conv", "(", "x_bottom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneDeconvRes.forward": [[321, 382], ["spconv.SparseConvTensor", "spconv_backbone.VoxelBackBoneDeconvRes.conv1", "spconv_backbone.VoxelBackBoneDeconvRes.conv2", "spconv_backbone.VoxelBackBoneDeconvRes.conv3", "spconv_backbone.VoxelBackBoneDeconvRes.deconv2", "spconv_backbone.VoxelBackBoneDeconvRes.combine", "spconv_backbone.VoxelBackBoneDeconvRes.deconv1", "spconv_backbone.VoxelBackBoneDeconvRes.combine", "batch_dict.update", "voxel_coords.int"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneInverseRes.combine", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneInverseRes.combine"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        \"\"\"", "\n", "# voxel_features, voxel_coords = batch_dict['voxel_features'], batch_dict['voxel_coords']", "\n", "voxel_features", ",", "voxel_coords", "=", "batch_dict", "[", "'voxel_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "#batch_dict[\"valid_coords_bnznynx\"]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "# print(\"voxel_features\",voxel_features.shape, voxel_coords.shape)", "\n", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "input_sp_tensor", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "x_conv2d", "=", "self", ".", "deconv2", "(", "x_conv3", ")", "\n", "x_conv2d", "=", "self", ".", "combine", "(", "x_conv2", ",", "x_conv2d", ",", "self", ".", "conv22", ",", "self", ".", "comb_conv2", ")", "\n", "x_conv1d", "=", "self", ".", "deconv1", "(", "x_conv2d", ")", "\n", "x_conv1d", "=", "self", ".", "combine", "(", "x_conv1", ",", "x_conv1d", ",", "self", ".", "conv11", ",", "self", ".", "comb_conv1", ")", "\n", "# x_conv1d = self.deconv5(x_conv2d)", "\n", "# out = self.convlast(x_conv1d)", "\n", "\n", "# for name, param in self.conv1.named_parameters():", "\n", "#     print(\"name grad:\", param.data, name)", "\n", "#     break", "\n", "# print(\"input_sp_tensor\", torch.nonzero(input_sp_tensor.dense()).shape)", "\n", "# print(\"x_conv1\", x_conv1.features.shape, x_conv1.dense().shape)", "\n", "# print(\"x_conv2\", x_conv2.features.shape, x_conv2.dense().shape)", "\n", "# print(\"x_conv3\", x_conv3.features.shape, x_conv3.dense().shape)", "\n", "# print(\"x_conv2d\", x_conv2d.features.shape, x_conv2d.dense().shape)", "\n", "# print(\"x_conv1d\", x_conv1d.features.shape, x_conv1d.dense().shape)", "\n", "# print(\"out\", out.features.shape, out.dense().shape)", "\n", "\n", "# for detection head", "\n", "# [200, 176, 5] -> [200, 176, 2]", "\n", "# out = x_conv4", "\n", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'encoded_spconv_tensor'", ":", "x_conv1d", ",", "\n", "'encoded_spconv_tensor_stride'", ":", "1", "\n", "}", ")", "\n", "# batch_dict.update({", "\n", "#     'multi_scale_3d_features': {", "\n", "#         'x_conv1': x_conv1,", "\n", "#         'x_conv2': x_conv2,", "\n", "#         'x_conv3': x_conv3,", "\n", "#         'x_conv2d': x_conv2d,", "\n", "#         'x_conv1d': x_conv1d,", "\n", "#     }", "\n", "# })", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneInverseRes.__init__": [[386, 439], ["torch.Module.__init__", "functools.partial", "print", "print", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "block", "block", "block", "block", "block", "block", "block", "block", "block", "block", "block"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "self", ".", "sparse_shape", "=", "grid_size", "[", ":", ":", "-", "1", "]", "# + [1, 0, 0]", "\n", "print", "(", "\"self.sparse_shape\"", ",", "self", ".", "sparse_shape", ")", "# [  10 400 352]", "\n", "print", "(", "\"input_channels\"", ",", "input_channels", ")", "\n", "block", "=", "post_act_block", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", "]", "# [16, 64, 128] # [16, 32, 64] # [16, 64, 128]", "\n", "\n", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "input_channels", ",", "channels", "[", "0", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", ")", "# 1", "\n", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", ")", "# 2", "\n", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", ")", "# 2", "\n", "\n", "self", ".", "conv22", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "deconv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "\n", "conv_type", "=", "'inverseconv'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "comb_conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", "+", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", "\n", ")", "\n", "\n", "self", ".", "conv11", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "0", "]", ",", "channels", "[", "0", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "deconv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'inverseconv'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "comb_conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "1", "]", "+", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "num_point_features", "=", "channels", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneInverseRes.combine": [[452, 465], ["conv_expnd", "list", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "comb_conv"], "methods", ["None"], ["", "def", "combine", "(", "self", ",", "x_lateral", ",", "x_bottom", ",", "conv_expnd", ",", "comb_conv", ")", ":", "\n", "        ", "x_expnd", "=", "conv_expnd", "(", "x_lateral", ")", "\n", "N", ",", "Fe", "=", "list", "(", "x_expnd", ".", "features", ".", "shape", ")", "\n", "M", ",", "Fb", "=", "list", "(", "x_bottom", ".", "features", ".", "shape", ")", "\n", "ind_e", "=", "x_expnd", ".", "indices", "\n", "ind_b", "=", "x_bottom", ".", "indices", "\n", "ind_all", "=", "torch", ".", "cat", "(", "[", "ind_b", ",", "ind_e", "]", ",", "dim", "=", "0", ")", "\n", "_", ",", "rinds", "=", "torch", ".", "unique", "(", "ind_all", ",", "dim", "=", "0", ",", "return_inverse", "=", "True", ")", "\n", "pad_feat", "=", "torch", ".", "zeros", "(", "[", "M", ",", "Fe", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "pad_feat", "[", "rinds", "[", "M", ":", "]", ",", ":", "]", "=", "x_expnd", ".", "features", "\n", "x_bottom", ".", "features", "=", "torch", ".", "cat", "(", "[", "x_bottom", ".", "features", ",", "pad_feat", "]", ",", "dim", "=", "-", "1", ")", "\n", "# print(\"ind_e\", ind_e.shape, ind_b.shape)", "\n", "return", "comb_conv", "(", "x_bottom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneInverseRes.forward": [[467, 528], ["spconv.SparseConvTensor", "spconv_backbone.VoxelBackBoneInverseRes.conv1", "spconv_backbone.VoxelBackBoneInverseRes.conv2", "spconv_backbone.VoxelBackBoneInverseRes.conv3", "spconv_backbone.VoxelBackBoneInverseRes.deconv2", "spconv_backbone.VoxelBackBoneInverseRes.combine", "spconv_backbone.VoxelBackBoneInverseRes.deconv1", "spconv_backbone.VoxelBackBoneInverseRes.combine", "batch_dict.update", "voxel_coords.int"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneInverseRes.combine", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBoneInverseRes.combine"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        \"\"\"", "\n", "# voxel_features, voxel_coords = batch_dict['voxel_features'], batch_dict['voxel_coords']", "\n", "voxel_features", ",", "voxel_coords", "=", "batch_dict", "[", "'voxel_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "#batch_dict[\"valid_coords_bnznynx\"]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "# print(\"voxel_features\",voxel_features.shape, voxel_coords.shape)", "\n", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "input_sp_tensor", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "x_conv2d", "=", "self", ".", "deconv2", "(", "x_conv3", ")", "\n", "x_conv2d", "=", "self", ".", "combine", "(", "x_conv2", ",", "x_conv2d", ",", "self", ".", "conv22", ",", "self", ".", "comb_conv2", ")", "\n", "x_conv1d", "=", "self", ".", "deconv1", "(", "x_conv2d", ")", "\n", "x_conv1d", "=", "self", ".", "combine", "(", "x_conv1", ",", "x_conv1d", ",", "self", ".", "conv11", ",", "self", ".", "comb_conv1", ")", "\n", "# x_conv1d = self.deconv5(x_conv2d)", "\n", "# out = self.convlast(x_conv1d)", "\n", "\n", "# for name, param in self.conv1.named_parameters():", "\n", "#     print(\"name grad:\", param.data, name)", "\n", "#     break", "\n", "# print(\"input_sp_tensor\", torch.nonzero(input_sp_tensor.dense()).shape)", "\n", "# print(\"x_conv1\", x_conv1.features.shape, x_conv1.dense().shape)", "\n", "# print(\"x_conv2\", x_conv2.features.shape, x_conv2.dense().shape)", "\n", "# print(\"x_conv3\", x_conv3.features.shape, x_conv3.dense().shape)", "\n", "# print(\"x_conv2d\", x_conv2d.features.shape, x_conv2d.dense().shape)", "\n", "# print(\"x_conv1d\", x_conv1d.features.shape, x_conv1d.dense().shape)", "\n", "# print(\"out\", out.features.shape, out.dense().shape)", "\n", "\n", "# for detection head", "\n", "# [200, 176, 5] -> [200, 176, 2]", "\n", "# out = x_conv4", "\n", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'encoded_spconv_tensor'", ":", "x_conv1d", ",", "\n", "'encoded_spconv_tensor_stride'", ":", "1", "\n", "}", ")", "\n", "# batch_dict.update({", "\n", "#     'multi_scale_3d_features': {", "\n", "#         'x_conv1': x_conv1,", "\n", "#         'x_conv2': x_conv2,", "\n", "#         'x_conv3': x_conv3,", "\n", "#         'x_conv2d': x_conv2d,", "\n", "#         'x_conv1d': x_conv1d,", "\n", "#     }", "\n", "# })", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelResBackBone8x.__init__": [[532, 582], ["torch.Module.__init__", "functools.partial", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv_backbone.VoxelResBackBone8x.model_cfg.get", "spconv.SparseSequential", "spconv.SubMConv3d", "functools.partial.", "torch.ReLU", "torch.ReLU", "spconv_backbone.SparseBasicBlock", "spconv_backbone.SparseBasicBlock", "block", "spconv_backbone.SparseBasicBlock", "spconv_backbone.SparseBasicBlock", "block", "spconv_backbone.SparseBasicBlock", "spconv_backbone.SparseBasicBlock", "block", "spconv_backbone.SparseBasicBlock", "spconv_backbone.SparseBasicBlock", "spconv.SparseConv3d", "functools.partial.", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "self", ".", "sparse_shape", "=", "grid_size", "[", ":", ":", "-", "1", "]", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "\n", "self", ".", "conv_input", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "input_channels", ",", "16", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", "norm_fn", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "block", "=", "post_act_block", "\n", "\n", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "SparseBasicBlock", "(", "16", ",", "16", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res1'", ")", ",", "\n", "SparseBasicBlock", "(", "16", ",", "16", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res1'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "16", ",", "32", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res2'", ")", ",", "\n", "SparseBasicBlock", "(", "32", ",", "32", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res2'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "32", ",", "64", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res3'", ")", ",", "\n", "SparseBasicBlock", "(", "64", ",", "64", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res3'", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "64", ",", "128", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "SparseBasicBlock", "(", "128", ",", "128", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res4'", ")", ",", "\n", "SparseBasicBlock", "(", "128", ",", "128", ",", "norm_fn", "=", "norm_fn", ",", "indice_key", "=", "'res4'", ")", ",", "\n", ")", "\n", "\n", "last_pad", "=", "0", "\n", "last_pad", "=", "self", ".", "model_cfg", ".", "get", "(", "'last_pad'", ",", "last_pad", ")", "\n", "self", ".", "conv_out", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [200, 150, 5] -> [200, 150, 2]", "\n", "spconv", ".", "SparseConv3d", "(", "128", ",", "128", ",", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "last_pad", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "'spconv_down2'", ")", ",", "\n", "norm_fn", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "num_point_features", "=", "128", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelResBackBone8x.forward": [[583, 628], ["spconv.SparseConvTensor", "spconv_backbone.VoxelResBackBone8x.conv_input", "spconv_backbone.VoxelResBackBone8x.conv1", "spconv_backbone.VoxelResBackBone8x.conv2", "spconv_backbone.VoxelResBackBone8x.conv3", "spconv_backbone.VoxelResBackBone8x.conv4", "spconv_backbone.VoxelResBackBone8x.conv_out", "batch_dict.update", "batch_dict.update", "voxel_coords.int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        \"\"\"", "\n", "voxel_features", ",", "voxel_coords", "=", "batch_dict", "[", "'voxel_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "x", "=", "self", ".", "conv_input", "(", "input_sp_tensor", ")", "\n", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "x_conv4", "=", "self", ".", "conv4", "(", "x_conv3", ")", "\n", "\n", "\n", "# for detection head", "\n", "# [200, 176, 5] -> [200, 176, 2]", "\n", "out", "=", "self", ".", "conv_out", "(", "x_conv4", ")", "\n", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'encoded_spconv_tensor'", ":", "out", ",", "\n", "'encoded_spconv_tensor_stride'", ":", "8", "\n", "}", ")", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'multi_scale_3d_features'", ":", "{", "\n", "'x_conv1'", ":", "x_conv1", ",", "\n", "'x_conv2'", ":", "x_conv2", ",", "\n", "'x_conv3'", ":", "x_conv3", ",", "\n", "'x_conv4'", ":", "x_conv4", ",", "\n", "}", "\n", "}", ")", "\n", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.__init__": [[631, 708], ["torch.Module.__init__", "functools.partial", "getattr", "getattr", "print", "print", "range", "range", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SparseSequential", "spconv_backbone.VoxelBackBone8xOcc.model_cfg.get", "spconv.SparseSequential", "range", "spconv_backbone.VoxelBackBone8xOcc.build_combine_net", "len", "len", "spconv.SubMConv3d", "functools.partial.", "torch.ReLU", "torch.ReLU", "block", "block", "block", "block", "block", "block", "block", "block", "block", "block", "spconv.SparseConv3d", "functools.partial.", "torch.ReLU", "torch.ReLU", "getattr", "spconv_backbone.VoxelBackBone8xOcc.build_occ_att_net", "spconv_backbone.VoxelBackBone8xOcc.build_3d22d_net", "range", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_combine_net", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_occ_att_net", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_3d22d_net"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "grid_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "self", ".", "sparse_shape", "=", "grid_size", "[", ":", ":", "-", "1", "]", "+", "[", "1", ",", "0", ",", "0", "]", "\n", "# self.sparse_shape = grid_size", "\n", "self", ".", "occ_conv_type", "=", "self", ".", "model_cfg", ".", "OCC_CONV_TYPE", "\n", "self", ".", "occ_conv_exec", "=", "self", ".", "model_cfg", ".", "OCC_CONV_EXECUTE", "\n", "self", ".", "out_feat_type", "=", "getattr", "(", "self", ".", "model_cfg", ",", "\"OUT_FEAT_TYPE\"", ",", "[", "\"None\"", ",", "\"None\"", ",", "\"None\"", ",", "\"None\"", ",", "\"combine\"", "]", ")", "\n", "self", ".", "out_att", "=", "getattr", "(", "self", ".", "model_cfg", ",", "\"OCC_ATT\"", ",", "[", "False", ",", "False", ",", "False", ",", "False", "]", ")", "\n", "\n", "print", "(", "\"self.sparse_shape\"", ",", "self", ".", "sparse_shape", ")", "# [  41 1600 1408]", "\n", "channels", "=", "[", "16", ",", "32", ",", "64", ",", "64", ",", "128", "]", "\n", "print", "(", "\"input_channels\"", ",", "input_channels", ")", "\n", "self", ".", "occ_code_num", "=", "input_channels", "-", "kwargs", "[", "\"original_num_rawpoint_features\"", "]", "\n", "block", "=", "post_act_block", "\n", "add_channels", "=", "[", "self", ".", "occ_code_num", "if", "t", "else", "0", "for", "t", "in", "self", ".", "occ_conv_exec", "]", "+", "[", "0", "for", "i", "in", "range", "(", "len", "(", "self", ".", "occ_conv_exec", ")", ",", "4", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "occ_conv_exec", ")", ")", ":", "\n", "            ", "getattr", "(", "self", ",", "'build_occ_%s_net'", "%", "self", ".", "occ_conv_type", "[", "i", "]", ")", "(", "norm_fn", ",", "i", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "occ_conv_exec", ")", ")", ":", "\n", "            ", "if", "self", ".", "out_att", "[", "i", "]", ":", "\n", "                ", "self", ".", "build_occ_att_net", "(", "norm_fn", ",", "i", ",", "channels", "[", "i", "]", "+", "add_channels", "[", "i", "]", ")", "\n", "\n", "\n", "", "", "self", ".", "conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "input_channels", ",", "channels", "[", "0", "]", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", "norm_fn", "(", "channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv1_combine", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "0", "]", "+", "add_channels", "[", "0", "]", ",", "channels", "[", "0", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm1'", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "\n", "self", ".", "conv2_combine", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "channels", "[", "1", "]", "+", "add_channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ")", ",", "\n", ")", "\n", "self", ".", "conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "\n", "self", ".", "conv3_combine", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "channels", "[", "2", "]", "+", "add_channels", "[", "2", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ")", ",", "\n", ")", "\n", "self", ".", "conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "\n", "self", ".", "conv4_combine", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "channels", "[", "3", "]", "+", "add_channels", "[", "3", "]", ",", "channels", "[", "3", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", ",", "\n", "block", "(", "channels", "[", "3", "]", ",", "channels", "[", "3", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", ",", "\n", ")", "\n", "last_pad", "=", "0", "\n", "last_pad", "=", "self", ".", "model_cfg", ".", "get", "(", "'last_pad'", ",", "last_pad", ")", "\n", "self", ".", "conv_out", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [200, 150, 5] -> [200, 150, 2]", "\n", "spconv", ".", "SparseConv3d", "(", "channels", "[", "3", "]", ",", "channels", "[", "4", "]", ",", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "last_pad", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "'spconv_down2'", ")", ",", "\n", "norm_fn", "(", "channels", "[", "4", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "num_point_features", "=", "128", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "z_channel", "=", "[", "41", ",", "21", ",", "11", ",", "5", "]", "[", "i", "]", "\n", "if", "self", ".", "out_feat_type", "[", "i", "]", "==", "\"2D\"", ":", "\n", "                ", "self", ".", "build_3d22d_net", "(", "norm_fn", ",", "i", ",", "channels", "[", "i", "]", "*", "z_channel", ")", "\n", "", "", "self", ".", "build_combine_net", "(", "norm_fn", ",", "channels", ",", "comb_type", "=", "self", ".", "out_feat_type", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_3d22d_net": [[709, 724], ["spconv.SparseSequential", "block", "spconv.SparseSequential", "block", "spconv.SparseSequential", "block", "spconv.SparseSequential", "block"], "methods", ["None"], ["", "def", "build_3d22d_net", "(", "self", ",", "norm_fn", ",", "ind", ",", "in_channel", ")", ":", "\n", "# print(\"x_conv1\", x_conv1.spatial_shape) # [41 1600 1408]", "\n", "# print(\"x_conv2\", x_conv2.spatial_shape) # [21, 800, 704]", "\n", "# print(\"x_conv3\", x_conv3.spatial_shape) # [11, 400, 352]", "\n", "# print(\"x_conv4\", x_conv4.spatial_shape) # [5, 200, 176]", "\n", "        ", "block", "=", "post_act_block", "\n", "if", "ind", "==", "0", ":", "\n", "            ", "self", ".", "squeeze_z_conv1", "=", "spconv", ".", "SparseSequential", "(", "block", "(", "in_channel", ",", "in_channel", "//", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'submsqueez1'", ",", "conv_type", "=", "'subm2d'", ")", ")", "\n", "", "elif", "ind", "==", "1", ":", "\n", "            ", "self", ".", "squeeze_z_conv2", "=", "spconv", ".", "SparseSequential", "(", "block", "(", "in_channel", ",", "in_channel", "//", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'submsqueez2'", ",", "conv_type", "=", "'subm2d'", ")", ")", "\n", "", "elif", "ind", "==", "2", ":", "\n", "# self.squeeze_z_conv3 = nn.Sequential(nn.Conv2d(in_channel, in_channel // 2, kernel_size=3, padding=1, stride=1, bias=False), nn.BatchNorm2d(in_channel // 2, eps=1e-3, momentum=0.01), nn.ReLU())", "\n", "            ", "self", ".", "squeeze_z_conv3", "=", "spconv", ".", "SparseSequential", "(", "block", "(", "in_channel", ",", "in_channel", "//", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'submsqueez3'", ",", "conv_type", "=", "'subm2d'", ")", ")", "\n", "", "elif", "ind", "==", "3", ":", "\n", "            ", "self", ".", "squeeze_z_conv4", "=", "spconv", ".", "SparseSequential", "(", "block", "(", "in_channel", ",", "in_channel", "//", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'submsqueez4'", ",", "conv_type", "=", "'subm2d'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_combine_net": [[726, 767], ["spconv.SparseSequential", "spconv.SparseSequential", "block", "block", "block", "spconv.SparseSequential", "block", "block", "spconv.SparseSequential", "block", "block", "block", "spconv.SparseSequential", "spconv.SparseSequential", "block", "block", "block"], "methods", ["None"], ["", "", "def", "build_combine_net", "(", "self", ",", "norm_fn", ",", "channels", ",", "comb_type", "=", "\"combine\"", ")", ":", "\n", "# print(\"x_conv1\", x_conv1.spatial_shape) # [41 1600 1408]", "\n", "# print(\"x_conv2\", x_conv2.spatial_shape) # [21, 800, 704]", "\n", "# print(\"x_conv3\", x_conv3.spatial_shape) # [11, 400, 352]", "\n", "# print(\"x_conv4\", x_conv4.spatial_shape) # [5, 200, 176]", "\n", "        ", "block", "=", "post_act_block", "\n", "self", ".", "down2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "1", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "\n", "self", ".", "down3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "channels", "[", "2", "]", ",", "channels", "[", "2", "]", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "\n", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "\n", "if", "comb_type", "==", "\"big_combine\"", ":", "\n", "            ", "self", ".", "down_combine", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 5]", "\n", "block", "(", "channels", "[", "2", "]", "*", "2", "+", "channels", "[", "3", "]", ",", "channels", "[", "3", "]", "*", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", ",", "\n", "block", "(", "channels", "[", "3", "]", "*", "2", ",", "channels", "[", "3", "]", "*", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", "\n", ")", "\n", "", "elif", "comb_type", "==", "\"combine\"", ":", "\n", "            ", "self", ".", "down_combine", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [200, 176, 5]", "\n", "block", "(", "channels", "[", "2", "]", "*", "2", "+", "channels", "[", "3", "]", ",", "channels", "[", "3", "]", "*", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", ",", "\n", "block", "(", "channels", "[", "3", "]", "*", "2", ",", "channels", "[", "3", "]", "*", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "[", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "indice_key", "=", "'spconv5'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", "block", "(", "channels", "[", "3", "]", "*", "2", ",", "channels", "[", "3", "]", "*", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm5'", ")", "\n", ")", "\n", "", "elif", "comb_type", "==", "\"big_bev_combine\"", ":", "\n", "            ", "self", ".", "squeezeBev", "=", "spconv", ".", "SparseSequential", "(", "\n", "block", "(", "channels", "[", "4", "]", ",", "channels", "[", "3", "]", ",", "(", "2", ",", "1", ",", "1", ")", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "0", ",", "indice_key", "=", "'subm_down2'", ",", "conv_type", "=", "'spconv'", ")", ",", "\n", ")", "\n", "self", ".", "down_combine", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 5]", "\n", "block", "(", "channels", "[", "2", "]", "*", "2", "+", "channels", "[", "3", "]", "*", "2", ",", "channels", "[", "3", "]", "*", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "\n", "indice_key", "=", "'subm4'", ")", ",", "\n", "block", "(", "channels", "[", "3", "]", "*", "2", ",", "channels", "[", "3", "]", "*", "2", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_occ_att_net": [[769, 790], ["spconv.SparseSequential", "block", "spconv.SparseSequential", "block", "spconv.SparseSequential", "block", "spconv.SparseSequential", "block"], "methods", ["None"], ["", "", "def", "build_occ_att_net", "(", "self", ",", "norm_fn", ",", "ind", ",", "channels", ")", ":", "\n", "        ", "block", "=", "post_act_block", "\n", "if", "ind", "==", "0", ":", "\n", "            ", "self", ".", "att_conv1", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "channels", ",", "channels", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm1'", ",", "activation", "=", "nn", ".", "LeakyReLU", ")", "\n", ")", "\n", "", "elif", "ind", "==", "1", ":", "\n", "            ", "self", ".", "att_conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "channels", ",", "channels", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm2'", ",", "activation", "=", "nn", ".", "LeakyReLU", ")", "\n", ")", "\n", "", "elif", "ind", "==", "2", ":", "\n", "            ", "self", ".", "att_conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "channels", ",", "channels", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm3'", ",", "activation", "=", "nn", ".", "LeakyReLU", ")", "\n", ")", "\n", "", "elif", "ind", "==", "3", ":", "\n", "            ", "self", ".", "att_conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "channels", ",", "channels", ",", "3", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "indice_key", "=", "'subm4'", ",", "activation", "=", "nn", ".", "LeakyReLU", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_occ_weight_net": [[793, 809], ["spconv.SparseSequential", "block", "spconv.SparseSequential", "block", "spconv.SparseSequential", "block"], "methods", ["None"], ["", "", "def", "build_occ_weight_net", "(", "self", ",", "norm_fn", ",", "ind", ")", ":", "\n", "        ", "block", "=", "post_act_block", "\n", "if", "ind", "==", "1", ":", "\n", "            ", "self", ".", "occ_conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'spconv'", ")", "\n", ")", "\n", "", "elif", "ind", "==", "2", ":", "\n", "            ", "self", ".", "occ_conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'spconv'", ")", "\n", ")", "\n", "", "elif", "ind", "==", "3", ":", "\n", "            ", "self", ".", "occ_conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'spconv'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_occ_fix_net": [[812, 828], ["spconv.SparseSequential", "block", "spconv.SparseSequential", "block", "spconv.SparseSequential", "block"], "methods", ["None"], ["", "", "def", "build_occ_fix_net", "(", "self", ",", "norm_fn", ",", "ind", ")", ":", "\n", "        ", "block", "=", "post_act_block", "\n", "if", "ind", "==", "1", ":", "\n", "            ", "self", ".", "occ_conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'fixspconv'", ",", "defaultvalue", "=", "1.0", "/", "27", ")", "\n", ")", "\n", "", "elif", "ind", "==", "2", ":", "\n", "            ", "self", ".", "occ_conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'fixspconv'", ",", "defaultvalue", "=", "1.0", "/", "27", ")", "\n", ")", "\n", "", "elif", "ind", "==", "3", ":", "\n", "            ", "self", ".", "occ_conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'fixspconv'", ",", "defaultvalue", "=", "1.0", "/", "27", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_occ_maxpool_net": [[831, 847], ["spconv.SparseSequential", "block", "spconv.SparseSequential", "block", "spconv.SparseSequential", "block"], "methods", ["None"], ["", "", "def", "build_occ_maxpool_net", "(", "self", ",", "norm_fn", ",", "ind", ")", ":", "\n", "        ", "block", "=", "post_act_block", "\n", "if", "ind", "==", "1", ":", "\n", "            ", "self", ".", "occ_conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'maxpool'", ")", "\n", ")", "\n", "", "elif", "ind", "==", "2", ":", "\n", "            ", "self", ".", "occ_conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'maxpool'", ")", "\n", ")", "\n", "", "elif", "ind", "==", "3", ":", "\n", "            ", "self", ".", "occ_conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "3", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'maxpool'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.build_occ_avgpool_net": [[850, 866], ["spconv.SparseSequential", "block", "spconv.SparseSequential", "block", "spconv.SparseSequential", "block"], "methods", ["None"], ["", "", "def", "build_occ_avgpool_net", "(", "self", ",", "norm_fn", ",", "ind", ")", ":", "\n", "        ", "block", "=", "post_act_block", "\n", "if", "ind", "==", "1", ":", "\n", "            ", "self", ".", "occ_conv2", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [1600, 1408, 41] <- [800, 704, 21]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "2", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv2'", ",", "conv_type", "=", "'fixspconv'", ",", "defaultvalue", "=", "1", ")", "\n", ")", "\n", "", "elif", "ind", "==", "2", ":", "\n", "            ", "self", ".", "occ_conv3", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [800, 704, 21] <- [400, 352, 11]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "2", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "indice_key", "=", "'spconv3'", ",", "conv_type", "=", "'fixspconv'", ",", "defaultvalue", "=", "1", ")", "\n", ")", "\n", "", "elif", "ind", "==", "3", ":", "\n", "            ", "self", ".", "occ_conv4", "=", "spconv", ".", "SparseSequential", "(", "\n", "# [400, 352, 11] <- [200, 176, 5]", "\n", "block", "(", "self", ".", "occ_code_num", ",", "self", ".", "occ_code_num", ",", "2", ",", "norm_fn", "=", "None", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "indice_key", "=", "'spconv4'", ",", "conv_type", "=", "'fixspconv'", ",", "defaultvalue", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.sparse_cat": [[869, 874], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "sparse_cat", "(", "self", ",", "input_lst", ")", ":", "\n", "        ", "xrep", ",", "xocc", "=", "input_lst", "\n", "# print(\"xrep.features, xocc.features\", xrep.features.shape, xocc.features.shape)", "\n", "xrep", ".", "features", "=", "torch", ".", "cat", "(", "(", "xrep", ".", "features", ",", "xocc", ".", "features", ")", ",", "dim", "=", "1", ")", "\n", "return", "xrep", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.apply_att": [[876, 881], ["att_conv"], "methods", ["None"], ["", "def", "apply_att", "(", "self", ",", "x_conv", ",", "att_conv", ")", ":", "\n", "        ", "x_conv_att", "=", "att_conv", "(", "x_conv", ")", "\n", "# print(\"xrep.features, xocc.features\", xrep.features.shape, xocc.features.shape)", "\n", "x_conv", ".", "features", "=", "x_conv", ".", "features", "*", "x_conv_att", ".", "features", "+", "x_conv", ".", "features", "\n", "return", "x_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.suqeeze": [[883, 903], ["getattr", "feat.dense", "list", "torch.unique().long", "torch.unique().long", "torch.unique().long", "torch.unique().long", "feat.dense.reshape", "spconv.SparseConvTensor", "getattr.dense", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique().long.int", "torch.unique().long.int", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "suqeeze", "(", "self", ",", "feat", ",", "i", ",", "type", ")", ":", "\n", "        ", "if", "type", "==", "\"None\"", ":", "\n", "            ", "return", "None", "\n", "", "elif", "type", "==", "\"3D\"", ":", "\n", "            ", "return", "feat", "\n", "", "else", ":", "\n", "            ", "conv", "=", "getattr", "(", "self", ",", "\"squeeze_z_conv{}\"", ".", "format", "(", "i", ")", ",", "None", ")", "\n", "threeD_feat", "=", "feat", ".", "dense", "(", ")", "\n", "B", ",", "C", ",", "Z", ",", "Y", ",", "X", "=", "list", "(", "threeD_feat", ".", "shape", ")", "\n", "inds", "=", "torch", ".", "unique", "(", "torch", ".", "cat", "(", "[", "feat", ".", "indices", "[", "...", ",", "0", ":", "1", "]", ",", "feat", ".", "indices", "[", "...", ",", "2", ":", "]", "]", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", ".", "long", "(", ")", "\n", "# print(\"inds\",inds.shape, inds.dtype)", "\n", "twoD_feat", "=", "threeD_feat", ".", "reshape", "(", "B", ",", "C", "*", "Z", ",", "Y", ",", "X", ")", "\n", "pixel_features", "=", "twoD_feat", "[", "inds", "[", "...", ",", "0", "]", ",", ":", ",", "inds", "[", "...", ",", "1", "]", ",", "inds", "[", "...", ",", "2", "]", "]", "\n", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "pixel_features", ",", "\n", "indices", "=", "inds", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "[", "Y", ",", "X", "]", ",", "\n", "batch_size", "=", "B", "\n", ")", "\n", "return", "conv", "(", "input_sp_tensor", ")", ".", "dense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.res_combine": [[905, 919], ["getattr", "spconv_backbone.VoxelBackBone8xOcc.down2", "spconv_backbone.VoxelBackBone8xOcc.down3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spconv_backbone.VoxelBackBone8xOcc.down_combine", "spconv_backbone.VoxelBackBone8xOcc.squeezeBev", "spconv_backbone.VoxelBackBone8xOcc.compress_height", "spconv_backbone.VoxelBackBone8xOcc.indices.long", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.compress_height"], ["", "", "def", "res_combine", "(", "self", ",", "x_conv2", ",", "x_conv3", ",", "x_conv4", ",", "bev_conv", ",", "out_feat_type", "=", "\"combine\"", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ",", "\"down3\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "x_conv2", "=", "self", ".", "down2", "(", "x_conv2", ")", "\n", "x_conv3", "=", "self", ".", "down3", "(", "x_conv3", ")", "\n", "x_conv4", ".", "features", "=", "torch", ".", "cat", "(", "(", "x_conv2", ".", "features", ",", "x_conv3", ".", "features", ",", "x_conv4", ".", "features", ")", ",", "dim", "=", "1", ")", "\n", "if", "out_feat_type", "==", "\"big_bev_combine\"", ":", "\n", "                ", "bev_conv", "=", "self", ".", "squeezeBev", "(", "bev_conv", ")", "\n", "bev_conv", "=", "self", ".", "compress_height", "(", "bev_conv", ")", "\n", "inds", "=", "x_conv4", ".", "indices", ".", "long", "(", ")", "\n", "bev_conv", "=", "bev_conv", "[", "inds", "[", "...", ",", "0", "]", ",", ":", ",", "inds", "[", "...", ",", "2", "]", ",", "inds", "[", "...", ",", "3", "]", "]", "\n", "x_conv4", ".", "features", "=", "torch", ".", "cat", "(", "(", "x_conv4", ".", "features", ",", "bev_conv", ")", ",", "dim", "=", "1", ")", "\n", "", "x_conv4", "=", "self", ".", "down_combine", "(", "x_conv4", ")", "\n", "# print(x_conv4.dense().shape, x_conv4.spatial_shape)", "\n", "return", "x_conv4", "# [2, 64, 5, 200, 176] [2, 128, 5, 100, 88]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.compress_height": [[920, 934], ["bev_conv.dense", "spatial_features.view.view.view"], "methods", ["None"], ["", "", "def", "compress_height", "(", "self", ",", "bev_conv", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        Returns:\n            batch_dict:\n                spatial_features:\n\n        \"\"\"", "\n", "spatial_features", "=", "bev_conv", ".", "dense", "(", ")", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "spatial_features", ".", "shape", "\n", "spatial_features", "=", "spatial_features", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "return", "spatial_features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.forward": [[936, 1021], ["spconv.SparseConvTensor", "spconv_backbone.VoxelBackBone8xOcc.conv1", "spconv_backbone.VoxelBackBone8xOcc.conv1_combine", "spconv_backbone.VoxelBackBone8xOcc.conv2", "spconv_backbone.VoxelBackBone8xOcc.conv2_combine", "spconv_backbone.VoxelBackBone8xOcc.conv3", "spconv_backbone.VoxelBackBone8xOcc.conv3_combine", "spconv_backbone.VoxelBackBone8xOcc.conv4", "spconv_backbone.VoxelBackBone8xOcc.conv4_combine", "spconv_backbone.VoxelBackBone8xOcc.conv_out", "batch_dict.update", "batch_dict.update", "len", "spconv.SparseConvTensor", "spconv_backbone.VoxelBackBone8xOcc.sparse_cat", "len", "spconv_backbone.VoxelBackBone8xOcc.occ_conv2", "len", "spconv_backbone.VoxelBackBone8xOcc.occ_conv3", "len", "spconv_backbone.VoxelBackBone8xOcc.occ_conv4", "voxel_coords.int", "len", "spconv_backbone.VoxelBackBone8xOcc.apply_att", "spconv_backbone.VoxelBackBone8xOcc.sparse_cat", "spconv_backbone.VoxelBackBone8xOcc.sparse_cat", "spconv_backbone.VoxelBackBone8xOcc.sparse_cat", "voxel_coords.int", "spconv_backbone.VoxelBackBone8xOcc.apply_att", "spconv_backbone.VoxelBackBone8xOcc.apply_att", "spconv_backbone.VoxelBackBone8xOcc.apply_att", "spconv_backbone.VoxelBackBone8xOcc.suqeeze", "spconv_backbone.VoxelBackBone8xOcc.suqeeze", "spconv_backbone.VoxelBackBone8xOcc.suqeeze", "spconv_backbone.VoxelBackBone8xOcc.suqeeze", "spconv_backbone.VoxelBackBone8xOcc.res_combine"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.sparse_cat", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.apply_att", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.sparse_cat", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.sparse_cat", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.sparse_cat", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.apply_att", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.apply_att", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.apply_att", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.suqeeze", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.suqeeze", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.suqeeze", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.suqeeze", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.VoxelBackBone8xOcc.res_combine"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size: int\n                vfe_features: (num_voxels, C)\n                voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]\n        Returns:\n            batch_dict:\n                encoded_spconv_tensor: sparse tensor\n        \"\"\"", "\n", "voxel_features", ",", "voxel_coords", "=", "batch_dict", "[", "'voxel_features'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "# print(\"voxel_features\",voxel_features.shape)", "\n", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "\n", "x_conv1", "=", "self", ".", "conv1", "(", "input_sp_tensor", ")", "\n", "if", "len", "(", "self", ".", "occ_conv_exec", ")", ">", "0", ":", "\n", "            ", "occ_input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "batch_dict", "[", "\"occ_voxel_features\"", "]", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "self", ".", "sparse_shape", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "", "if", "len", "(", "self", ".", "occ_conv_exec", ")", ">", "0", "and", "self", ".", "occ_conv_exec", "[", "0", "]", ":", "\n", "            ", "x_conv1", "=", "self", ".", "sparse_cat", "(", "[", "x_conv1", ",", "occ_input_sp_tensor", "]", ")", "\n", "if", "self", ".", "out_att", "[", "0", "]", ":", "\n", "                ", "x_conv1", "=", "self", ".", "apply_att", "(", "x_conv1", ",", "self", ".", "att_conv1", ")", "\n", "", "", "x_conv1", "=", "self", ".", "conv1_combine", "(", "x_conv1", ")", "\n", "x_conv2", "=", "self", ".", "conv2", "(", "x_conv1", ")", "\n", "if", "len", "(", "self", ".", "occ_conv_exec", ")", ">", "1", ":", "\n", "            ", "x_occ_conv2", "=", "self", ".", "occ_conv2", "(", "occ_input_sp_tensor", ")", "\n", "if", "self", ".", "occ_conv_exec", "[", "1", "]", ":", "\n", "                ", "x_conv2", "=", "self", ".", "sparse_cat", "(", "[", "x_conv2", ",", "x_occ_conv2", "]", ")", "\n", "if", "self", ".", "out_att", "[", "1", "]", ":", "\n", "                    ", "x_conv2", "=", "self", ".", "apply_att", "(", "x_conv2", ",", "self", ".", "att_conv2", ")", "\n", "", "", "", "x_conv2", "=", "self", ".", "conv2_combine", "(", "x_conv2", ")", "\n", "x_conv3", "=", "self", ".", "conv3", "(", "x_conv2", ")", "\n", "if", "len", "(", "self", ".", "occ_conv_exec", ")", ">", "2", ":", "\n", "            ", "x_occ_conv3", "=", "self", ".", "occ_conv3", "(", "x_occ_conv2", ")", "\n", "if", "self", ".", "occ_conv_exec", "[", "2", "]", ":", "\n", "                ", "x_conv3", "=", "self", ".", "sparse_cat", "(", "[", "x_conv3", ",", "x_occ_conv3", "]", ")", "\n", "if", "self", ".", "out_att", "[", "2", "]", ":", "\n", "                    ", "x_conv3", "=", "self", ".", "apply_att", "(", "x_conv3", ",", "self", ".", "att_conv3", ")", "\n", "", "", "", "x_conv3", "=", "self", ".", "conv3_combine", "(", "x_conv3", ")", "\n", "\n", "x_conv4", "=", "self", ".", "conv4", "(", "x_conv3", ")", "\n", "if", "len", "(", "self", ".", "occ_conv_exec", ")", ">", "3", ":", "\n", "            ", "x_occ_conv4", "=", "self", ".", "occ_conv4", "(", "x_occ_conv3", ")", "\n", "if", "self", ".", "occ_conv_exec", "[", "3", "]", ":", "\n", "                ", "x_conv4", "=", "self", ".", "sparse_cat", "(", "[", "x_conv4", ",", "x_occ_conv4", "]", ")", "\n", "if", "self", ".", "out_att", "[", "3", "]", ":", "\n", "                    ", "x_conv4", "=", "self", ".", "apply_att", "(", "x_conv4", ",", "self", ".", "att_conv4", ")", "\n", "", "", "", "x_conv4", "=", "self", ".", "conv4_combine", "(", "x_conv4", ")", "\n", "\n", "# print(\"x\", x.spatial_shape) # [41 1600 1408]", "\n", "# print(\"x_conv1\", x_conv1.spatial_shape) # [41 1600 1408]", "\n", "# print(\"x_conv2\", x_conv2.spatial_shape) # [21, 800, 704]", "\n", "# print(\"x_conv3\", x_conv3.spatial_shape) # [11, 400, 352]", "\n", "# print(\"x_conv4\", x_conv4.spatial_shape) # [5, 200, 176]", "\n", "# for detection head", "\n", "# [200, 176, 5] -> [200, 176, 2]", "\n", "out", "=", "self", ".", "conv_out", "(", "x_conv4", ")", "\n", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'encoded_spconv_tensor'", ":", "out", ",", "\n", "'encoded_spconv_tensor_stride'", ":", "8", "\n", "}", ")", "\n", "\n", "batch_dict", ".", "update", "(", "{", "\n", "'multi_scale_3d_features'", ":", "{", "\n", "'x_conv1'", ":", "self", ".", "suqeeze", "(", "x_conv1", ",", "1", ",", "self", ".", "out_feat_type", "[", "0", "]", ")", ",", "\n", "'x_conv2'", ":", "self", ".", "suqeeze", "(", "x_conv2", ",", "2", ",", "self", ".", "out_feat_type", "[", "1", "]", ")", ",", "\n", "'x_conv3'", ":", "self", ".", "suqeeze", "(", "x_conv3", ",", "3", ",", "self", ".", "out_feat_type", "[", "2", "]", ")", ",", "\n", "'x_conv4'", ":", "self", ".", "suqeeze", "(", "x_conv4", ",", "4", ",", "self", ".", "out_feat_type", "[", "3", "]", ")", ",", "\n", "'x_combine'", ":", "self", ".", "res_combine", "(", "x_conv2", ",", "x_conv3", ",", "x_conv4", ",", "out", ",", "out_feat_type", "=", "self", ".", "out_feat_type", "[", "4", "]", ")", "\n", "}", "\n", "}", ")", "\n", "\n", "return", "batch_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.post_act_block": [[7, 44], ["spconv.SubMConv3d", "spconv.SparseSequential", "spconv.SparseSequential", "spconv.SubMConv2d", "norm_fn", "activation", "spconv.SparseConv3d", "spconv_backbone.fixSparseConv3d", "spconv.SparseMaxPool3d.requires_grad_", "spconv.SparseConvTranspose3d", "spconv.SparseInverseConv3d", "spconv.SubMConv3d", "spconv.SparseMaxPool3d"], "function", ["None"], ["def", "post_act_block", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "indice_key", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "conv_type", "=", "'subm'", ",", "norm_fn", "=", "None", ",", "defaultvalue", "=", "1.0", ",", "activation", "=", "nn", ".", "ReLU", ")", ":", "\n", "# spconv.SparseConv3d(64, 128, (3, 3, 3), stride=(1, 1, 1), padding=1,", "\n", "#                     bias=False, indice_key='spconv_down2'),", "\n", "    ", "if", "conv_type", "==", "'subm'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SubMConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", "\n", "", "elif", "conv_type", "==", "'subm2d'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SubMConv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", "\n", "", "elif", "conv_type", "==", "'spconv'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SparseConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", "\n", "", "elif", "conv_type", "==", "'fixspconv'", ":", "\n", "        ", "conv", "=", "fixSparseConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ",", "defaultvalue", "=", "defaultvalue", ")", "\n", "conv", ".", "requires_grad_", "(", "False", ")", "\n", "", "elif", "conv_type", "==", "'spdeconv'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SparseConvTranspose3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", "\n", "", "elif", "conv_type", "==", "'inverseconv'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SparseInverseConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "indice_key", "=", "indice_key", ",", "bias", "=", "False", ")", "\n", "", "elif", "conv_type", "==", "'submbias'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SubMConv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "True", ",", "indice_key", "=", "indice_key", ")", "\n", "", "elif", "conv_type", "==", "'maxpool'", ":", "\n", "        ", "conv", "=", "spconv", ".", "SparseMaxPool3d", "(", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "norm_fn", "is", "not", "None", ":", "\n", "        ", "m", "=", "spconv", ".", "SparseSequential", "(", "\n", "conv", ",", "\n", "norm_fn", "(", "out_channels", ")", ",", "\n", "activation", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "m", "=", "spconv", ".", "SparseSequential", "(", "\n", "conv", "\n", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.mean_vfe.MeanVFE.__init__": [[7, 14], ["vfe_template.VFETemplate.__init__", "model_cfg.get", "len", "data_cfg.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_point_features", ",", "data_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "maxprob", "=", "kwargs", "[", "\"maxprob\"", "]", "\n", "self", ".", "OCC_CODE", "=", "model_cfg", ".", "get", "(", "\"OCC_CODE\"", ",", "None", ")", "\n", "self", ".", "xyz_dim", "=", "6", "if", "data_cfg", ".", "get", "(", "\"OCC\"", ",", "None", ")", "is", "not", "None", "and", "data_cfg", ".", "OCC", ".", "USE_ABSXYZ", "==", "\"both\"", "else", "3", "\n", "self", ".", "num_point_features", "=", "num_point_features", "+", "(", "1", "if", "self", ".", "OCC_CODE", "is", "not", "None", "and", "self", ".", "OCC_CODE", "else", "0", ")", "+", "self", ".", "xyz_dim", "-", "3", "\n", "self", ".", "num_raw_features", "=", "len", "(", "data_cfg", ".", "POINT_FEATURE_ENCODING", ".", "used_feature_list", ")", "+", "self", ".", "xyz_dim", "-", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.mean_vfe.MeanVFE.get_output_feature_dim": [[16, 18], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_point_features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.mean_vfe.MeanVFE.get_paddings_indicator": [[19, 26], ["torch.unsqueeze", "torch.arange().view", "len", "torch.unsqueeze.int", "torch.arange"], "methods", ["None"], ["", "def", "get_paddings_indicator", "(", "self", ",", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "        ", "actual_num", "=", "torch", ".", "unsqueeze", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n", "max_num_range", "=", "torch", ".", "arange", "(", "max_num", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "actual_num", ".", "device", ")", ".", "view", "(", "max_num_shape", ")", "\n", "paddings_indicator", "=", "max_num_range", "<", "actual_num", ".", "int", "(", ")", "\n", "return", "paddings_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.mean_vfe.MeanVFE.forward": [[27, 69], ["voxel_features[].sum", "torch.clamp_min().type_as", "voxel_features[].sum.contiguous", "mean_vfe.MeanVFE.get_paddings_indicator", "torch.clamp_min().type_as", "torch.clamp_min().type_as", "torch.cat().contiguous", "list", "torch.nonzero", "list", "torch.cat", "voxel_features[].sum", "voxel_features[].sum", "voxel_features[].max", "torch.cat", "torch.cat", "torch.clamp_min", "torch.clamp_min", "torch.clamp_min", "torch.cat", "voxel_num_points.view", "voxel_num_points.view", "raw_mask[].sum().view", "torch.zeros", "torch.cat", "torch.cat", "raw_mask[].sum", "torch.ones", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_paddings_indicator"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                voxels: (num_voxels, max_points_per_voxel, C)\n                voxel_num_points: optional (num_voxels)\n            **kwargs:\n\n        Returns:\n            vfe_features: (num_voxels, C)\n        \"\"\"", "\n", "voxel_features", ",", "voxel_num_points", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", "\n", "\n", "if", "not", "self", ".", "maxprob", ":", "\n", "            ", "points_mean", "=", "voxel_features", "[", ":", ",", ":", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "\n", "normalizer", "=", "torch", ".", "clamp_min", "(", "voxel_num_points", ".", "view", "(", "-", "1", ",", "1", ")", ",", "min", "=", "1.0", ")", ".", "type_as", "(", "voxel_features", ")", "\n", "points_mean", "=", "points_mean", "/", "normalizer", "\n", "batch_dict", "[", "'voxel_features'", "]", "=", "points_mean", ".", "contiguous", "(", ")", "\n", "\n", "# max prob", "\n", "", "else", ":", "\n", "            ", "voxel_count", "=", "voxel_features", ".", "shape", "[", "1", "]", "\n", "mask", "=", "self", ".", "get_paddings_indicator", "(", "voxel_num_points", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "normalizer", "=", "torch", ".", "clamp_min", "(", "voxel_num_points", ".", "view", "(", "-", "1", ",", "1", ")", ",", "min", "=", "1.0", ")", ".", "type_as", "(", "voxel_features", ")", "\n", "raw_mask", "=", "(", "voxel_features", "[", ":", ",", ":", ",", "-", "1", "]", "<", "0.1", ")", "&", "mask", "\n", "raw_normalizer", "=", "torch", ".", "clamp_min", "(", "raw_mask", "[", ":", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "min", "=", "1.0", ")", ".", "type_as", "(", "voxel_features", ")", "\n", "\n", "xyz_mean", "=", "voxel_features", "[", ":", ",", ":", ",", ":", "self", ".", "xyz_dim", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "/", "normalizer", "\n", "inten_elong_mean", "=", "voxel_features", "[", ":", ",", ":", ",", "self", ".", "xyz_dim", ":", "self", ".", "num_raw_features", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "/", "raw_normalizer", "\n", "occ_max", "=", "voxel_features", "[", ":", ",", ":", ",", "self", ".", "num_raw_features", ":", "]", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "\n", "batch_dict", "[", "'voxel_features'", "]", "=", "torch", ".", "cat", "(", "[", "xyz_mean", ",", "inten_elong_mean", ",", "occ_max", "]", ",", "axis", "=", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "#", "\n", "", "if", "self", ".", "OCC_CODE", "is", "not", "None", ":", "\n", "            ", "M", ",", "F", "=", "list", "(", "batch_dict", "[", "'voxel_features'", "]", ".", "shape", ")", "\n", "occ_bzyx", "=", "torch", ".", "nonzero", "(", "(", "batch_dict", "[", "\"general_cls_loss_mask\"", "]", "&", "(", "1", "-", "batch_dict", "[", "\"voxelwise_mask\"", "]", ")", ")", ">", "0", ")", "\n", "N", ",", "_", "=", "list", "(", "occ_bzyx", ".", "shape", ")", "\n", "batch_dict", "[", "'voxel_coords'", "]", "=", "torch", ".", "cat", "(", "[", "batch_dict", "[", "'voxel_coords'", "]", ",", "occ_bzyx", "]", ",", "dim", "=", "0", ")", "\n", "if", "not", "self", ".", "OCC_CODE", ":", "\n", "                ", "batch_dict", "[", "'voxel_features'", "]", "=", "torch", ".", "cat", "(", "[", "batch_dict", "[", "'voxel_features'", "]", ",", "torch", ".", "zeros", "(", "[", "N", ",", "F", "]", ",", "device", "=", "batch_dict", "[", "'voxel_features'", "]", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "batch_dict", "[", "'voxel_features'", "]", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "[", "batch_dict", "[", "'voxel_features'", "]", ",", "torch", ".", "ones", "(", "[", "M", ",", "1", "]", ",", "device", "=", "batch_dict", "[", "'voxel_features'", "]", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "]", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "[", "N", ",", "F", "]", ",", "device", "=", "batch_dict", "[", "'voxel_features'", "]", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "torch", ".", "zeros", "(", "[", "N", ",", "1", "]", ",", "device", "=", "batch_dict", "[", "'voxel_features'", "]", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "]", ",", "dim", "=", "-", "1", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.vfe_template.VFETemplate.__init__": [[5, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.vfe_template.VFETemplate.get_output_feature_dim": [[9, 11], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.vfe_template.VFETemplate.forward": [[12, 23], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            **kwargs:\n\n        Returns:\n            batch_dict:\n                ...\n                vfe_features: (num_voxels, C)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.occ_vfe.OccVFE.__init__": [[7, 12], ["vfe_template.VFETemplate.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_point_features", ",", "data_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ")", "\n", "self", ".", "num_point_features", "=", "num_point_features", "\n", "self", ".", "maxprob", "=", "kwargs", "[", "\"maxprob\"", "]", "\n", "self", ".", "num_raw_features", "=", "len", "(", "data_cfg", ".", "POINT_FEATURE_ENCODING", ".", "used_feature_list", ")", "# DATA_AUGMENTOR.AUG_CONFIG_LIST[0].get('NUM_POINT_FEATURES', None)", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.occ_vfe.OccVFE.get_output_feature_dim": [[13, 15], ["None"], "methods", ["None"], ["", "def", "get_output_feature_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_point_features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.occ_vfe.OccVFE.get_paddings_indicator": [[16, 23], ["torch.unsqueeze", "torch.arange().view", "len", "torch.unsqueeze.int", "torch.arange"], "methods", ["None"], ["", "def", "get_paddings_indicator", "(", "self", ",", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "        ", "actual_num", "=", "torch", ".", "unsqueeze", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n", "max_num_range", "=", "torch", ".", "arange", "(", "max_num", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "actual_num", ".", "device", ")", ".", "view", "(", "max_num_shape", ")", "\n", "paddings_indicator", "=", "max_num_range", "<", "actual_num", ".", "int", "(", ")", "\n", "return", "paddings_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.vfe.occ_vfe.OccVFE.forward": [[24, 56], ["occ_vfe.OccVFE.get_paddings_indicator", "raw_mask[].sum().view", "occ_mask[].sum().view", "torch.clamp_min().type_as", "torch.clamp_min().type_as", "torch.cat", "voxel_features[].max", "raw_mask[].sum", "occ_mask[].sum", "torch.clamp_min", "torch.clamp_min", "raw_mask.unsqueeze", "occ_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_paddings_indicator"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                voxels: (num_voxels, max_points_per_voxel, C)\n                voxel_num_points: optional (num_voxels)\n            **kwargs:\n\n        Returns:\n            vfe_features: (num_voxels, C)\n        \"\"\"", "\n", "voxel_features", ",", "voxel_num_points", ",", "voxel_coords", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "\n", "voxel_count", "=", "voxel_features", ".", "shape", "[", "1", "]", "\n", "mask", "=", "self", ".", "get_paddings_indicator", "(", "voxel_num_points", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "raw_mask", "=", "(", "voxel_features", "[", ":", ",", ":", ",", "-", "1", "]", "<", "0.05", ")", "&", "mask", "\n", "occ_mask", "=", "(", "voxel_features", "[", ":", ",", ":", ",", "-", "1", "]", ">=", "0.05", ")", "&", "mask", "\n", "raw_normalizer", "=", "raw_mask", "[", ":", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "occ_normalizer", "=", "occ_mask", "[", ":", ",", ":", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "occ_voxel_mask", "=", "(", "occ_normalizer", ">", "0.5", ")", "&", "(", "raw_normalizer", "<", "0.5", ")", "\n", "raw_normalizer", "=", "torch", ".", "clamp_min", "(", "raw_normalizer", ",", "min", "=", "1.0", ")", ".", "type_as", "(", "voxel_features", ")", "\n", "occ_normalizer", "=", "torch", ".", "clamp_min", "(", "occ_normalizer", ",", "min", "=", "1.0", ")", ".", "type_as", "(", "voxel_features", ")", "\n", "\n", "voxel_features_raw", "=", "(", "raw_mask", ".", "unsqueeze", "(", "-", "1", ")", "*", "voxel_features", "[", ":", ",", ":", ",", ":", "self", ".", "num_raw_features", "]", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "/", "raw_normalizer", "\n", "voxel_features_occ", "=", "(", "occ_mask", ".", "unsqueeze", "(", "-", "1", ")", "*", "voxel_features", "[", ":", ",", ":", ",", ":", "self", ".", "num_raw_features", "]", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "/", "occ_normalizer", "\n", "\n", "batch_dict", "[", "'voxel_features'", "]", "=", "voxel_features_raw", "+", "occ_voxel_mask", "*", "voxel_features_occ", "\n", "occ_max", "=", "voxel_features", "[", ":", ",", ":", ",", "self", ".", "num_raw_features", ":", "]", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "\n", "batch_dict", "[", "'voxel_features'", "]", "=", "torch", ".", "cat", "(", "[", "batch_dict", "[", "'voxel_features'", "]", ",", "occ_max", "]", ",", "dim", "=", "-", "1", ")", "\n", "batch_dict", "[", "'occ_voxel_features'", "]", "=", "occ_max", "\n", "# print(\"voxel_features\", torch.min(batch_dict['voxel_features'],dim=0)[0], torch.max(batch_dict['voxel_features'],dim=0)[0])", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pfe.abstraction_template.AbstractionTemplate.__init__": [[44, 114], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "print", "range", "ops.pointnet2.pointnet2_stack.pointnet2_modules.StackSAModuleMSG", "abstraction_template.AbstractionTemplate.SA_layers.append", "abstraction_template.AbstractionTemplate.SA_layer_names.append", "sum", "range", "ops.pointnet2.pointnet2_stack.pointnet2_modules.StackSAModuleMSG", "sum", "range", "ops.pointnet2.pointnet2_stack.pointnet2_modules.StackSAModuleMSG", "sum", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "voxel_size", ",", "point_cloud_range", ",", "num_bev_features", "=", "None", ",", "\n", "num_rawpoint_features", "=", "None", ",", "original_num_rawpoint_features", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "voxel_size", "=", "voxel_size", "\n", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "\n", "SA_cfg", "=", "self", ".", "model_cfg", ".", "SA_LAYER", "\n", "\n", "self", ".", "SA_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "SA_layer_names", "=", "[", "]", "\n", "self", ".", "downsample_times_map", "=", "{", "}", "\n", "self", ".", "num_rawpoint_features", "=", "num_rawpoint_features", "\n", "self", ".", "original_num_rawpoint_features", "=", "original_num_rawpoint_features", "\n", "c_in", "=", "0", "\n", "for", "src_name", "in", "self", ".", "model_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "if", "src_name", "in", "[", "'raw_points'", ",", "'occ_points'", "]", ":", "\n", "                ", "continue", "\n", "", "self", ".", "downsample_times_map", "[", "src_name", "]", "=", "SA_cfg", "[", "src_name", "]", ".", "DOWNSAMPLE_FACTOR", "\n", "mlps", "=", "SA_cfg", "[", "src_name", "]", ".", "MLPS", "\n", "for", "k", "in", "range", "(", "len", "(", "mlps", ")", ")", ":", "\n", "                ", "mlps", "[", "k", "]", "=", "[", "mlps", "[", "k", "]", "[", "0", "]", "]", "+", "mlps", "[", "k", "]", "\n", "", "cur_layer", "=", "pointnet2_stack_modules", ".", "StackSAModuleMSG", "(", "\n", "radii", "=", "SA_cfg", "[", "src_name", "]", ".", "POOL_RADIUS", ",", "\n", "nsamples", "=", "SA_cfg", "[", "src_name", "]", ".", "NSAMPLE", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "True", ",", "\n", "pool_method", "=", "'max_pool'", ",", "\n", ")", "\n", "self", ".", "SA_layers", ".", "append", "(", "cur_layer", ")", "\n", "self", ".", "SA_layer_names", ".", "append", "(", "src_name", ")", "\n", "\n", "c_in", "+=", "sum", "(", "[", "x", "[", "-", "1", "]", "for", "x", "in", "mlps", "]", ")", "\n", "\n", "", "if", "'raw_points'", "in", "self", ".", "model_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "mlps", "=", "SA_cfg", "[", "'raw_points'", "]", ".", "MLPS", "\n", "for", "k", "in", "range", "(", "len", "(", "mlps", ")", ")", ":", "\n", "                ", "mlps", "[", "k", "]", "=", "[", "num_rawpoint_features", "-", "3", "]", "+", "mlps", "[", "k", "]", "\n", "\n", "", "self", ".", "SA_rawpoints", "=", "pointnet2_stack_modules", ".", "StackSAModuleMSG", "(", "\n", "radii", "=", "SA_cfg", "[", "'raw_points'", "]", ".", "POOL_RADIUS", ",", "\n", "nsamples", "=", "SA_cfg", "[", "'raw_points'", "]", ".", "NSAMPLE", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "True", ",", "\n", "pool_method", "=", "'max_pool'", "\n", ")", "\n", "c_in", "+=", "sum", "(", "[", "x", "[", "-", "1", "]", "for", "x", "in", "mlps", "]", ")", "\n", "\n", "", "if", "'occ_points'", "in", "self", ".", "model_cfg", ".", "FEATURES_SOURCE", ":", "\n", "            ", "mlps", "=", "SA_cfg", "[", "'occ_points'", "]", ".", "MLPS", "\n", "for", "k", "in", "range", "(", "len", "(", "mlps", ")", ")", ":", "\n", "                ", "mlps", "[", "k", "]", "=", "[", "1", "]", "+", "mlps", "[", "k", "]", "\n", "\n", "", "self", ".", "SA_occpoints", "=", "pointnet2_stack_modules", ".", "StackSAModuleMSG", "(", "\n", "radii", "=", "SA_cfg", "[", "'occ_points'", "]", ".", "POOL_RADIUS", ",", "\n", "nsamples", "=", "SA_cfg", "[", "'occ_points'", "]", ".", "NSAMPLE", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "True", ",", "\n", "pool_method", "=", "'max_pool'", "\n", ")", "\n", "c_in", "+=", "sum", "(", "[", "x", "[", "-", "1", "]", "for", "x", "in", "mlps", "]", ")", "\n", "\n", "", "self", ".", "vsa_point_feature_fusion", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "c_in", ",", "self", ".", "model_cfg", ".", "NUM_OUTPUT_FEATURES", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "NUM_OUTPUT_FEATURES", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "num_point_features", "=", "self", ".", "model_cfg", ".", "NUM_OUTPUT_FEATURES", "\n", "self", ".", "num_point_features_before_fusion", "=", "c_in", "\n", "print", "(", "\"c_in\"", ",", "c_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pfe.abstraction_template.AbstractionTemplate.interpolate_from_bev_features": [[115, 131], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bev_features[].permute", "bilinear_interpolate", "point_bev_features_list.append", "bilinear_interpolate.unsqueeze"], "methods", ["None"], ["", "def", "interpolate_from_bev_features", "(", "self", ",", "keypoints", ",", "bev_features", ",", "batch_size", ",", "bev_stride", ",", "correction", "=", "False", ")", ":", "\n", "        ", "x_idxs", "=", "(", "keypoints", "[", ":", ",", ":", ",", "0", "]", "-", "self", ".", "point_cloud_range", "[", "0", "]", ")", "/", "self", ".", "voxel_size", "[", "0", "]", "\n", "y_idxs", "=", "(", "keypoints", "[", ":", ",", ":", ",", "1", "]", "-", "self", ".", "point_cloud_range", "[", "1", "]", ")", "/", "self", ".", "voxel_size", "[", "1", "]", "\n", "x_idxs", "=", "x_idxs", "/", "bev_stride", "-", "(", "0.5", "if", "correction", "else", "0.0", ")", "\n", "y_idxs", "=", "y_idxs", "/", "bev_stride", "-", "(", "0.5", "if", "correction", "else", "0.0", ")", "\n", "point_bev_features_list", "=", "[", "]", "\n", "bilinear_interpolate", "=", "common_utils", ".", "bilinear_interpolate_torch", "if", "correction", "else", "bilinear_interpolate_torch", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_x_idxs", "=", "x_idxs", "[", "k", "]", "\n", "cur_y_idxs", "=", "y_idxs", "[", "k", "]", "\n", "cur_bev_features", "=", "bev_features", "[", "k", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "# (H, W, C)", "\n", "point_bev_features", "=", "bilinear_interpolate", "(", "cur_bev_features", ",", "cur_x_idxs", ",", "cur_y_idxs", ")", "\n", "point_bev_features_list", ".", "append", "(", "point_bev_features", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "", "point_bev_features", "=", "torch", ".", "cat", "(", "point_bev_features_list", ",", "dim", "=", "0", ")", "# (B, N, C0)", "\n", "return", "point_bev_features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pfe.abstraction_template.AbstractionTemplate.get_sampled_points": [[133, 179], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].long", "src_points[].unsqueeze", "keypoints_list.append", "utils.common_utils.get_voxel_centers", "[].long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "batch_dict[].long", "ops.pointnet2.pointnet2_stack.pointnet2_utils.furthest_point_sample().long", "[].unsqueeze", "ops.pointnet2.pointnet2_stack.pointnet2_utils.furthest_point_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sampled_points[].contiguous", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers"], ["", "def", "get_sampled_points", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "if", "self", ".", "model_cfg", ".", "POINT_SOURCE", "==", "'raw_points'", ":", "\n", "            ", "src_points", "=", "batch_dict", "[", "'points'", "]", "[", ":", ",", "1", ":", "4", "]", "\n", "batch_indices", "=", "batch_dict", "[", "'points'", "]", "[", ":", ",", "0", "]", ".", "long", "(", ")", "\n", "", "elif", "self", ".", "model_cfg", ".", "POINT_SOURCE", "==", "'voxel_centers'", ":", "\n", "            ", "src_points", "=", "common_utils", ".", "get_voxel_centers", "(", "\n", "batch_dict", "[", "'voxel_coords'", "]", "[", ":", ",", "1", ":", "4", "]", ",", "\n", "downsample_times", "=", "1", ",", "\n", "voxel_size", "=", "self", ".", "voxel_size", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "\n", "batch_indices", "=", "batch_dict", "[", "'voxel_coords'", "]", "[", ":", ",", "0", "]", ".", "long", "(", ")", "\n", "", "elif", "self", ".", "model_cfg", ".", "POINT_SOURCE", "==", "'occ_points'", ":", "\n", "            ", "src_points", "=", "batch_dict", "[", "'added_occ_xyz'", "]", "\n", "batch_indices", "=", "batch_dict", "[", "'added_occ_b_ind'", "]", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "keypoints_list", "=", "[", "]", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "bs_mask", "=", "(", "batch_indices", "==", "bs_idx", ")", "\n", "sampled_points", "=", "src_points", "[", "bs_mask", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "if", "sampled_points", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "sampled_points", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", ",", "3", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "src_points", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "model_cfg", ".", "SAMPLE_METHOD", "==", "'FPS'", ":", "\n", "                    ", "cur_pt_idxs", "=", "pointnet2_stack_utils", ".", "furthest_point_sample", "(", "\n", "sampled_points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", ",", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "\n", ")", ".", "long", "(", ")", "\n", "\n", "if", "sampled_points", ".", "shape", "[", "1", "]", "<", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", ":", "\n", "                        ", "empty_num", "=", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "-", "sampled_points", ".", "shape", "[", "1", "]", "\n", "if", "empty_num", "<", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "/", "2", ":", "\n", "                            ", "cur_pt_idxs", "[", "0", ",", "-", "empty_num", ":", "]", "=", "cur_pt_idxs", "[", "0", ",", ":", "empty_num", "]", "\n", "", "else", ":", "\n", "                            ", "rand_cur_pt_idxs", "=", "cur_pt_idxs", "[", ":", ",", "torch", ".", "randint", "(", "sampled_points", ".", "shape", "[", "1", "]", ",", "(", "empty_num", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "]", "\n", "cur_pt_idxs", "=", "torch", ".", "cat", "(", "[", "cur_pt_idxs", "[", ":", ",", ":", "sampled_points", ".", "shape", "[", "1", "]", "]", ",", "rand_cur_pt_idxs", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "", "sampled_points", "=", "sampled_points", "[", "0", "]", "[", "cur_pt_idxs", "[", "0", "]", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "", "elif", "self", ".", "model_cfg", ".", "SAMPLE_METHOD", "==", "'FastFPS'", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "keypoints_list", ".", "append", "(", "sampled_points", ")", "\n", "", "keypoints", "=", "torch", ".", "cat", "(", "keypoints_list", ",", "dim", "=", "0", ")", "# (B, M, 3)", "\n", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pfe.abstraction_template.AbstractionTemplate.multi_get_sampled_points": [[181, 229], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multi_keypoints_list.append", "[].long", "src_points[].unsqueeze", "keypoints_list.append", "utils.common_utils.get_voxel_centers", "[].long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "batch_dict[].long", "ops.pointnet2.pointnet2_stack.pointnet2_utils.furthest_point_sample().long", "[].unsqueeze", "ops.pointnet2.pointnet2_stack.pointnet2_utils.furthest_point_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sampled_points[].contiguous", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers"], ["", "def", "multi_get_sampled_points", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "multi_keypoints_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "model_cfg", ".", "POINT_SOURCE", ")", ")", ":", "\n", "            ", "if", "self", ".", "model_cfg", ".", "POINT_SOURCE", "[", "i", "]", "==", "'raw_points'", ":", "\n", "                ", "src_points", "=", "batch_dict", "[", "'points'", "]", "[", ":", ",", "1", ":", "4", "]", "\n", "batch_indices", "=", "batch_dict", "[", "'points'", "]", "[", ":", ",", "0", "]", ".", "long", "(", ")", "\n", "", "elif", "self", ".", "model_cfg", ".", "POINT_SOURCE", "[", "i", "]", "==", "'voxel_centers'", ":", "\n", "                ", "src_points", "=", "common_utils", ".", "get_voxel_centers", "(", "\n", "batch_dict", "[", "'voxel_coords'", "]", "[", ":", ",", "1", ":", "4", "]", ",", "\n", "downsample_times", "=", "1", ",", "\n", "voxel_size", "=", "self", ".", "voxel_size", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "\n", "batch_indices", "=", "batch_dict", "[", "'voxel_coords'", "]", "[", ":", ",", "0", "]", ".", "long", "(", ")", "\n", "", "elif", "self", ".", "model_cfg", ".", "POINT_SOURCE", "[", "i", "]", "==", "'occ_points'", ":", "\n", "                ", "src_points", "=", "batch_dict", "[", "'added_occ_xyz'", "]", "\n", "batch_indices", "=", "batch_dict", "[", "'added_occ_b_ind'", "]", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "keypoints_list", "=", "[", "]", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "bs_mask", "=", "(", "batch_indices", "==", "bs_idx", ")", "\n", "sampled_points", "=", "src_points", "[", "bs_mask", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "if", "sampled_points", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                    ", "sampled_points", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "[", "i", "]", ",", "3", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "src_points", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "model_cfg", ".", "SAMPLE_METHOD", "[", "i", "]", "==", "'FPS'", ":", "\n", "                        ", "cur_pt_idxs", "=", "pointnet2_stack_utils", ".", "furthest_point_sample", "(", "\n", "sampled_points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", ",", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "[", "i", "]", "\n", ")", ".", "long", "(", ")", "\n", "if", "sampled_points", ".", "shape", "[", "1", "]", "<", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "[", "i", "]", ":", "\n", "                            ", "empty_num", "=", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "[", "i", "]", "-", "sampled_points", ".", "shape", "[", "1", "]", "\n", "if", "empty_num", "<", "self", ".", "model_cfg", ".", "NUM_KEYPOINTS", "[", "i", "]", "/", "2", ":", "\n", "                                ", "cur_pt_idxs", "[", "0", ",", "-", "empty_num", ":", "]", "=", "cur_pt_idxs", "[", "0", ",", ":", "empty_num", "]", "\n", "", "else", ":", "\n", "                                ", "rand_cur_pt_idxs", "=", "cur_pt_idxs", "[", ":", ",", "torch", ".", "randint", "(", "sampled_points", ".", "shape", "[", "1", "]", ",", "(", "empty_num", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "]", "\n", "cur_pt_idxs", "=", "torch", ".", "cat", "(", "[", "cur_pt_idxs", "[", ":", ",", ":", "sampled_points", ".", "shape", "[", "1", "]", "]", ",", "rand_cur_pt_idxs", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "", "sampled_points", "=", "sampled_points", "[", "0", "]", "[", "cur_pt_idxs", "[", "0", "]", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "model_cfg", ".", "SAMPLE_METHOD", "[", "i", "]", "==", "'FastFPS'", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "\n", "", "", "keypoints_list", ".", "append", "(", "sampled_points", ")", "\n", "", "keypoints", "=", "torch", ".", "cat", "(", "keypoints_list", ",", "dim", "=", "0", ")", "# (B, M, 3)", "\n", "multi_keypoints_list", ".", "append", "(", "keypoints", ")", "\n", "", "keypoints", "=", "torch", ".", "cat", "(", "multi_keypoints_list", ",", "dim", "=", "1", ")", "\n", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.pfe.abstraction_template.AbstractionTemplate.forward": [[231, 233], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.pfe.abstraction_template.bilinear_interpolate_torch": [[9, 41], ["torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.t", "torch.t", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.clamp.type_as", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["def", "bilinear_interpolate_torch", "(", "im", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        im: (H, W, C) [y, x]\n        x: (N)\n        y: (N)\n\n    Returns:\n\n    \"\"\"", "\n", "x0", "=", "torch", ".", "floor", "(", "x", ")", ".", "long", "(", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "\n", "y0", "=", "torch", ".", "floor", "(", "y", ")", ".", "long", "(", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "x0", "=", "torch", ".", "clamp", "(", "x0", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "x1", "=", "torch", ".", "clamp", "(", "x1", ",", "0", ",", "im", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "y0", "=", "torch", ".", "clamp", "(", "y0", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "y1", "=", "torch", ".", "clamp", "(", "y1", ",", "0", ",", "im", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "Ia", "=", "im", "[", "y0", ",", "x0", "]", "\n", "Ib", "=", "im", "[", "y1", ",", "x0", "]", "\n", "Ic", "=", "im", "[", "y0", ",", "x1", "]", "\n", "Id", "=", "im", "[", "y1", ",", "x1", "]", "\n", "\n", "wa", "=", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "\n", "wb", "=", "(", "x1", ".", "type_as", "(", "x", ")", "-", "x", ")", "*", "(", "y", "-", "y0", ".", "type_as", "(", "y", ")", ")", "\n", "wc", "=", "(", "x", "-", "x0", ".", "type_as", "(", "x", ")", ")", "*", "(", "y1", ".", "type_as", "(", "y", ")", "-", "y", ")", "\n", "wd", "=", "(", "x", "-", "x0", ".", "type_as", "(", "x", ")", ")", "*", "(", "y", "-", "y0", ".", "type_as", "(", "y", ")", ")", "\n", "ans", "=", "torch", ".", "t", "(", "(", "torch", ".", "t", "(", "Ia", ")", "*", "wa", ")", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Ib", ")", "*", "wb", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Ic", ")", "*", "wc", ")", "+", "torch", ".", "t", "(", "torch", ".", "t", "(", "Id", ")", "*", "wd", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.__init__": [[16, 45], ["torch.Module.__init__", "detector3d_template.Detector3DTemplate.register_buffer", "torch.Module", "torch.Module", "torch.Module", "torch.Module", "detector3d_template.Detector3DTemplate.dataset.dataset_cfg.get", "model_cfg.get", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "detector3d_template.Detector3DTemplate.dataset.dataset_cfg.get", "detector3d_template.Detector3DTemplate.create_subvox_loc", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.create_subvox_loc"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ",", "full_config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "model_cfg", ".", "get", "(", "\"OCC\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "occ_num_class", "=", "1", "if", "model_cfg", ".", "OCC", ".", "PARAMS", ".", "CLASS_AGNOSTIC", "else", "num_class", "\n", "", "else", ":", "\n", "            ", "self", ".", "occ_num_class", "=", "None", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "class_names", "=", "dataset", ".", "class_names", "\n", "self", ".", "register_buffer", "(", "'global_step'", ",", "torch", ".", "LongTensor", "(", "1", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "self", ".", "module_topology", "=", "[", "\n", "'occ'", ",", "'vfe'", ",", "'backbone_3d'", ",", "'map_to_bev_module'", ",", "'backbone_2d'", ",", "'occ_pfe'", ",", "'occ_point_head'", ",", "'pfe'", ",", "'dense_head'", ",", "'point_head'", ",", "'roi_head'", "\n", "]", "\n", "\n", "self", ".", "occ_module_topology", "=", "[", "\n", "'occ_targets'", ",", "'vfe'", ",", "'backbone_3d'", ",", "'map_to_bev_module'", ",", "'backbone_2d'", ",", "'occ_dense_head'", ",", "'occ_pnt_update'", "\n", "]", "\n", "\n", "self", ".", "voxel_centers", "=", "None", "\n", "if", "self", ".", "dataset", ".", "dataset_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "voxel_centers", "=", "self", ".", "create_subvox_loc", "(", ")", "\n", "\n", "", "self", ".", "occ_modules", "=", "nn", ".", "Module", "(", ")", "\n", "self", ".", "det_modules", "=", "nn", ".", "Module", "(", ")", "\n", "self", ".", "clamp_max", "=", "self", ".", "dataset", ".", "dataset_cfg", ".", "get", "(", "\"CLAMP\"", ",", "None", ")", "\n", "self", ".", "occ_dim", "=", "self", ".", "dataset", ".", "occ_dim", "\n", "self", ".", "print", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.filter_by_bind": [[46, 51], ["trgt_binds.to.to.to", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "points[].data.cpu().numpy", "points[].data.cpu"], "methods", ["None"], ["", "def", "filter_by_bind", "(", "self", ",", "trgt_binds", ",", "binds", ",", "points", ")", ":", "\n", "        ", "trgt_binds", "=", "trgt_binds", ".", "to", "(", "torch", ".", "int64", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "binds", "==", "trgt_binds", ")", "\n", "points", "=", "points", "[", "inds", "[", ":", ",", "0", "]", ",", "...", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.create_subvox_loc": [[52, 64], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.coords_utils.uvd2absxyz", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "utils.coords_utils.get_all_voxel_centers_zyx", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.get_all_voxel_centers_zyx"], ["", "def", "create_subvox_loc", "(", "self", ")", ":", "\n", "        ", "nx", ",", "ny", ",", "nz", "=", "self", ".", "dataset", ".", "occ_grid_size", "\n", "x_origin", "=", "self", ".", "dataset", ".", "dataset_cfg", ".", "OCC", ".", "POINT_CLOUD_RANGE", "[", "0", "]", "\n", "y_origin", "=", "self", ".", "dataset", ".", "dataset_cfg", ".", "OCC", ".", "POINT_CLOUD_RANGE", "[", "1", "]", "\n", "z_origin", "=", "self", ".", "dataset", ".", "dataset_cfg", ".", "OCC", ".", "POINT_CLOUD_RANGE", "[", "2", "]", "\n", "range_origin", "=", "[", "x_origin", ",", "y_origin", ",", "z_origin", "]", "\n", "grids_num", "=", "torch", ".", "tensor", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", "\n", "voxel_size", "=", "torch", ".", "tensor", "(", "self", ".", "dataset", ".", "dataset_cfg", ".", "OCC", ".", "VOXEL_SIZE", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "all_voxel_centers", "=", "coords_utils", ".", "get_all_voxel_centers_zyx", "(", "1", ",", "grids_num", ",", "range_origin", ",", "voxel_size", ")", "[", "0", ",", "...", "]", "# 3 sphere zyx nz ny nx", "\n", "all_voxel_centers", "=", "coords_utils", ".", "uvd2absxyz", "(", "all_voxel_centers", "[", "2", ",", "...", "]", ",", "all_voxel_centers", "[", "1", ",", "...", "]", ",", "all_voxel_centers", "[", "0", ",", "...", "]", ",", "self", ".", "dataset", ".", "dataset_cfg", ".", "OCC", ".", "COORD_TYPE", ",", "dim", "=", "-", "1", ")", "#  nz X ny X nx X 3", "\n", "all_voxel_centers_2d", "=", "torch", ".", "mean", "(", "all_voxel_centers", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ",", "2", ")", "# N, 2", "\n", "return", "{", "\"all_voxel_centers\"", ":", "all_voxel_centers", ",", "\"all_voxel_centers_2d\"", ":", "all_voxel_centers_2d", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.mode": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.update_global_step": [[70, 72], ["None"], "methods", ["None"], ["", "def", "update_global_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_networks": [[73, 99], ["getattr", "detector3d_template.Detector3DTemplate.det_modules.add_module", "print"], "methods", ["None"], ["", "def", "build_networks", "(", "self", ")", ":", "\n", "        ", "model_info_dict", "=", "{", "\n", "'occ_module_list'", ":", "[", "]", ",", "\n", "'det_module_list'", ":", "[", "]", ",", "\n", "'num_rawpoint_features'", ":", "self", ".", "dataset", ".", "point_feature_encoder", ".", "num_point_features", ",", "\n", "'num_voxel_point_features'", ":", "self", ".", "dataset", ".", "point_feature_encoder", ".", "num_point_features", ",", "\n", "'num_point_features'", ":", "self", ".", "dataset", ".", "point_feature_encoder", ".", "num_point_features", ",", "\n", "'det_grid_size'", ":", "self", ".", "dataset", ".", "det_grid_size", ",", "\n", "'occ_grid_size'", ":", "self", ".", "dataset", ".", "occ_grid_size", ",", "\n", "'point_cloud_range'", ":", "self", ".", "dataset", ".", "point_cloud_range", ",", "\n", "'occ_point_cloud_range'", ":", "self", ".", "dataset", ".", "occ_point_cloud_range", ",", "\n", "'occ_voxel_size'", ":", "self", ".", "dataset", ".", "occ_voxel_size", ",", "\n", "'det_voxel_size'", ":", "self", ".", "dataset", ".", "det_voxel_size", ",", "\n", "}", "\n", "\n", "for", "module_name", "in", "self", ".", "module_topology", ":", "\n", "            ", "module", ",", "model_info_dict", "=", "getattr", "(", "self", ",", "'build_%s'", "%", "module_name", ")", "(", "\n", "model_info_dict", "=", "model_info_dict", "\n", ")", "\n", "if", "module_name", "!=", "\"occ\"", ":", "\n", "# self.add_module(module_name, module)", "\n", "                ", "if", "module", "is", "not", "None", ":", "\n", "                    ", "self", ".", "det_modules", ".", "add_module", "(", "module_name", ",", "module", ")", "\n", "if", "self", ".", "print", ":", "print", "(", "\"det module:\"", ",", "module_name", ")", "\n", "\n", "", "", "", "return", "model_info_dict", "[", "'occ_module_list'", "]", ",", "model_info_dict", "[", "'det_module_list'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_occ": [[101, 114], ["detector3d_template.Detector3DTemplate.model_cfg.get", "getattr", "detector3d_template.Detector3DTemplate.occ_modules.add_module", "print"], "methods", ["None"], ["", "def", "build_occ", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "for", "module_name", "in", "self", ".", "occ_module_topology", ":", "\n", "            ", "module", ",", "model_info_dict", "=", "getattr", "(", "self", ",", "'build_%s'", "%", "module_name", ")", "(", "\n", "model_info_dict", "=", "model_info_dict", ",", "occ", "=", "True", "\n", ")", "\n", "# self.add_module('occ_%s' % module_name, module)", "\n", "if", "module", "is", "not", "None", ":", "\n", "                ", "self", ".", "occ_modules", ".", "add_module", "(", "module_name", ",", "module", ")", "\n", "if", "self", ".", "print", ":", "print", "(", "\"occ module:\"", ",", "module_name", ")", "\n", "", "", "return", "None", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_occ_targets": [[116, 131], ["model_info_dict[].append", "model_cfg.get"], "methods", ["None"], ["", "def", "build_occ_targets", "(", "self", ",", "model_info_dict", ",", "occ", "=", "True", ")", ":", "\n", "        ", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC", "\n", "if", "model_cfg", ".", "get", "(", "'TARGETS'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "occ_target_module", "=", "occ_training_targets", ".", "__all__", "[", "model_cfg", ".", "TARGETS", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "model_cfg", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'occ_point_cloud_range'", "]", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'occ_voxel_size'", "]", ",", "\n", "data_cfg", "=", "self", ".", "dataset", ".", "dataset_cfg", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'occ_grid_size'", "]", ",", "\n", "num_class", "=", "self", ".", "occ_num_class", ",", "\n", "voxel_centers", "=", "self", ".", "voxel_centers", ",", "\n", ")", "\n", "model_info_dict", "[", "'occ_module_list'", "]", ".", "append", "(", "occ_target_module", ")", "\n", "return", "occ_target_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_occ_pnt_update": [[133, 155], ["model_info_dict[].append", "model_cfg.get", "print"], "methods", ["None"], ["", "def", "build_occ_pnt_update", "(", "self", ",", "model_info_dict", ",", "occ", "=", "True", ")", ":", "\n", "        ", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC", "if", "occ", "else", "self", ".", "model_cfg", "\n", "if", "model_cfg", ".", "get", "(", "'OCC_PNT_UPDATE'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "occ_pnt_module", "=", "occ_pnt", ".", "__all__", "[", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "model_cfg", ",", "\n", "data_cfg", "=", "self", ".", "dataset", ".", "dataset_cfg", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "occ_voxel_size", "=", "model_info_dict", "[", "'occ_voxel_size'", "]", ",", "\n", "occ_grid_size", "=", "model_info_dict", "[", "'occ_grid_size'", "]", ",", "\n", "det_voxel_size", "=", "model_info_dict", "[", "'det_voxel_size'", "]", ",", "\n", "det_grid_size", "=", "model_info_dict", "[", "'det_grid_size'", "]", ",", "\n", "mode", "=", "self", ".", "dataset", ".", "mode", ",", "\n", "voxel_centers", "=", "self", ".", "voxel_centers", ",", "\n", ")", "\n", "if", "self", ".", "print", ":", "print", "(", "\"build occ pnt update mode:\"", ",", "self", ".", "dataset", ".", "mode", ")", "\n", "model_info_dict", "[", "'occ_module_list'", "]", ".", "append", "(", "occ_pnt_module", ")", "\n", "if", "occ_pnt_module", ".", "config_rawadd", ":", "\n", "            ", "model_info_dict", "[", "'num_rawpoint_features'", "]", "=", "model_info_dict", "[", "'num_rawpoint_features'", "]", "+", "occ_pnt_module", ".", "code_num_dim", "\n", "", "model_info_dict", "[", "'num_voxel_point_features'", "]", "=", "model_info_dict", "[", "'num_voxel_point_features'", "]", "+", "occ_pnt_module", ".", "code_num_dim", "\n", "return", "occ_pnt_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_vfe": [[156, 179], ["vfe_module.get_output_feature_dim", "model_cfg.get", "model_info_dict[].append", "model_info_dict[].append", "detector3d_template.Detector3DTemplate.dataset.dataset_cfg.get", "detector3d_template.Detector3DTemplate.dataset.dataset_cfg.OCC.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.vfe.occ_vfe.OccVFE.get_output_feature_dim"], ["", "def", "build_vfe", "(", "self", ",", "model_info_dict", ",", "occ", "=", "False", ")", ":", "\n", "        ", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC", "if", "occ", "else", "self", ".", "model_cfg", "\n", "if", "model_cfg", ".", "get", "(", "'VFE'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "maxprob", "=", "False", "\n", "if", "not", "occ", ":", "\n", "            ", "maxprob", "=", "self", ".", "dataset", ".", "dataset_cfg", ".", "OCC", ".", "MAX_VFE", "if", "self", ".", "dataset", ".", "dataset_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "not", "None", "and", "self", ".", "dataset", ".", "dataset_cfg", ".", "OCC", ".", "get", "(", "\"MAX_VFE\"", ",", "None", ")", "is", "not", "None", "else", "False", "\n", "", "vfe_module", "=", "vfe", ".", "__all__", "[", "model_cfg", ".", "VFE", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "model_cfg", ".", "VFE", ",", "\n", "num_point_features", "=", "model_info_dict", "[", "'num_voxel_point_features'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'occ_voxel_size'", "]", "if", "occ", "else", "model_info_dict", "[", "'det_voxel_size'", "]", ",", "\n", "data_cfg", "=", "self", ".", "dataset", ".", "dataset_cfg", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'occ_grid_size'", "]", "if", "occ", "else", "model_info_dict", "[", "'det_grid_size'", "]", ",", "\n", "num_class", "=", "self", ".", "occ_num_class", "if", "occ", "else", "self", ".", "num_class", ",", "\n", "maxprob", "=", "maxprob", "\n", ")", "\n", "model_info_dict", "[", "'num_point_features'", "]", "=", "vfe_module", ".", "get_output_feature_dim", "(", ")", "\n", "if", "occ", ":", "\n", "            ", "model_info_dict", "[", "'occ_module_list'", "]", ".", "append", "(", "vfe_module", ")", "\n", "", "else", ":", "\n", "            ", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "vfe_module", ")", "\n", "", "return", "vfe_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_backbone_3d": [[181, 202], ["model_cfg.get", "model_info_dict[].append", "model_info_dict[].append"], "methods", ["None"], ["", "def", "build_backbone_3d", "(", "self", ",", "model_info_dict", ",", "occ", "=", "False", ")", ":", "\n", "        ", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC", "if", "occ", "else", "self", ".", "model_cfg", "\n", "if", "model_cfg", ".", "get", "(", "'BACKBONE_3D'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "input_channels", "=", "model_info_dict", "[", "'num_point_features'", "]", "\n", "\n", "backbone_3d_module", "=", "backbones_3d", ".", "__all__", "[", "model_cfg", ".", "BACKBONE_3D", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "model_cfg", ".", "BACKBONE_3D", ",", "\n", "input_channels", "=", "input_channels", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'occ_grid_size'", "]", "if", "occ", "else", "model_info_dict", "[", "'det_grid_size'", "]", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'occ_voxel_size'", "]", "if", "occ", "else", "model_info_dict", "[", "'det_voxel_size'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "original_num_rawpoint_features", "=", "self", ".", "dataset", ".", "point_feature_encoder", ".", "num_point_features", ",", "\n", ")", "\n", "if", "occ", ":", "\n", "            ", "model_info_dict", "[", "'occ_module_list'", "]", ".", "append", "(", "backbone_3d_module", ")", "\n", "model_info_dict", "[", "'num_occ_3d_features'", "]", "=", "backbone_3d_module", ".", "num_point_features", "\n", "", "else", ":", "\n", "            ", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "backbone_3d_module", ")", "\n", "model_info_dict", "[", "'num_point_features'", "]", "=", "backbone_3d_module", ".", "num_point_features", "\n", "", "return", "backbone_3d_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_map_to_bev_module": [[204, 220], ["model_cfg.get", "model_info_dict[].append", "model_info_dict[].append"], "methods", ["None"], ["", "def", "build_map_to_bev_module", "(", "self", ",", "model_info_dict", ",", "occ", "=", "False", ")", ":", "\n", "        ", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC", "if", "occ", "else", "self", ".", "model_cfg", "\n", "if", "model_cfg", ".", "get", "(", "'MAP_TO_BEV'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "map_to_bev_module", "=", "map_to_bev", ".", "__all__", "[", "model_cfg", ".", "MAP_TO_BEV", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "model_cfg", ".", "MAP_TO_BEV", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'occ_grid_size'", "]", "if", "occ", "else", "model_info_dict", "[", "'det_grid_size'", "]", ",", "\n", "occ_dim", "=", "self", ".", "occ_dim", "\n", ")", "\n", "if", "occ", ":", "\n", "            ", "model_info_dict", "[", "'occ_module_list'", "]", ".", "append", "(", "map_to_bev_module", ")", "\n", "", "else", ":", "\n", "            ", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "map_to_bev_module", ")", "\n", "", "model_info_dict", "[", "'num_bev_features'", "]", "=", "map_to_bev_module", ".", "num_bev_features", "\n", "model_info_dict", "[", "'pre_conv_num_bev_features'", "]", "=", "map_to_bev_module", ".", "num_bev_features", "\n", "return", "map_to_bev_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_backbone_2d": [[221, 236], ["model_cfg.get", "model_info_dict[].append", "model_info_dict[].append"], "methods", ["None"], ["", "def", "build_backbone_2d", "(", "self", ",", "model_info_dict", ",", "occ", "=", "False", ")", ":", "\n", "        ", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC", "if", "occ", "else", "self", ".", "model_cfg", "\n", "if", "model_cfg", ".", "get", "(", "'BACKBONE_2D'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "backbone_2d_module", "=", "backbones_2d", ".", "__all__", "[", "model_cfg", ".", "BACKBONE_2D", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "model_cfg", ".", "BACKBONE_2D", ",", "\n", "input_channels", "=", "model_info_dict", "[", "'num_bev_features'", "]", ",", "\n", ")", "\n", "if", "occ", ":", "\n", "            ", "model_info_dict", "[", "'occ_module_list'", "]", ".", "append", "(", "backbone_2d_module", ")", "\n", "", "else", ":", "\n", "            ", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "backbone_2d_module", ")", "\n", "", "model_info_dict", "[", "'num_bev_features'", "]", "=", "backbone_2d_module", ".", "num_bev_features", "\n", "return", "backbone_2d_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_pfe": [[237, 254], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_pfe", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'PFE'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "pfe_module", "=", "pfe", ".", "__all__", "[", "self", ".", "model_cfg", ".", "PFE", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "PFE", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'det_voxel_size'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "num_bev_features", "=", "model_info_dict", "[", "'num_bev_features'", "]", ",", "\n", "num_rawpoint_features", "=", "model_info_dict", "[", "'num_rawpoint_features'", "]", ",", "\n", "original_num_rawpoint_features", "=", "self", ".", "dataset", ".", "point_feature_encoder", ".", "num_point_features", ",", "\n", "pre_conv_num_bev_features", "=", "model_info_dict", "[", "'pre_conv_num_bev_features'", "]", "\n", ")", "\n", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "pfe_module", ")", "\n", "model_info_dict", "[", "'num_point_features'", "]", "=", "pfe_module", ".", "num_point_features", "\n", "model_info_dict", "[", "'num_point_features_before_fusion'", "]", "=", "pfe_module", ".", "num_point_features_before_fusion", "\n", "return", "pfe_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_occ_pfe": [[256, 273], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_occ_pfe", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'OCC_PFE'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "pfe_module", "=", "pfe", ".", "__all__", "[", "self", ".", "model_cfg", ".", "OCC_PFE", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC_PFE", ",", "\n", "voxel_size", "=", "model_info_dict", "[", "'det_voxel_size'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "num_bev_features", "=", "model_info_dict", "[", "'num_bev_features'", "]", ",", "\n", "num_rawpoint_features", "=", "model_info_dict", "[", "'num_rawpoint_features'", "]", ",", "\n", "original_num_rawpoint_features", "=", "self", ".", "dataset", ".", "point_feature_encoder", ".", "num_point_features", ",", "\n", "pre_conv_num_bev_features", "=", "model_info_dict", "[", "'pre_conv_num_bev_features'", "]", "\n", ")", "\n", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "pfe_module", ")", "\n", "model_info_dict", "[", "'num_point_features'", "]", "=", "pfe_module", ".", "num_point_features", "\n", "model_info_dict", "[", "'num_point_features_before_fusion'", "]", "=", "pfe_module", ".", "num_point_features_before_fusion", "\n", "return", "pfe_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_occ_point_head": [[275, 293], ["detector3d_template.Detector3DTemplate.model_cfg.OCC_POINT_HEAD.get", "model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_occ_point_head", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'OCC_POINT_HEAD'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_POINT_HEAD", ".", "get", "(", "'USE_POINT_FEATURES_BEFORE_FUSION'", ",", "False", ")", ":", "\n", "            ", "num_point_features", "=", "model_info_dict", "[", "'num_point_features_before_fusion'", "]", "\n", "", "else", ":", "\n", "            ", "num_point_features", "=", "model_info_dict", "[", "'num_point_features'", "]", "\n", "\n", "", "point_head_module", "=", "dense_heads", ".", "__all__", "[", "self", ".", "model_cfg", ".", "OCC_POINT_HEAD", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC_POINT_HEAD", ",", "\n", "input_channels", "=", "num_point_features", ",", "\n", "num_class", "=", "self", ".", "num_class", "if", "not", "self", ".", "model_cfg", ".", "OCC_POINT_HEAD", ".", "CLASS_AGNOSTIC", "else", "1", ",", "\n", "predict_boxes_when_training", "=", "self", ".", "model_cfg", ".", "get", "(", "'ROI_HEAD'", ",", "False", ")", "\n", ")", "\n", "\n", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "point_head_module", ")", "\n", "return", "point_head_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_dense_head": [[296, 310], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_dense_head", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'DENSE_HEAD'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "dense_head_module", "=", "dense_heads", ".", "__all__", "[", "self", ".", "model_cfg", ".", "DENSE_HEAD", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "DENSE_HEAD", ",", "\n", "input_channels", "=", "model_info_dict", "[", "'num_bev_features'", "]", ",", "\n", "num_class", "=", "self", ".", "num_class", "if", "not", "self", ".", "model_cfg", ".", "DENSE_HEAD", ".", "CLASS_AGNOSTIC", "else", "1", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'det_grid_size'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "predict_boxes_when_training", "=", "self", ".", "model_cfg", ".", "get", "(", "'ROI_HEAD'", ",", "False", ")", ",", "\n", ")", "\n", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "dense_head_module", ")", "\n", "return", "dense_head_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_occ_dense_head": [[311, 324], ["model_info_dict[].append", "model_cfg.get"], "methods", ["None"], ["", "def", "build_occ_dense_head", "(", "self", ",", "model_info_dict", ",", "occ", "=", "True", ")", ":", "\n", "        ", "model_cfg", "=", "self", ".", "model_cfg", ".", "OCC", "\n", "if", "model_cfg", ".", "get", "(", "'OCC_DENSE_HEAD'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "occ_dense_head_module", "=", "occ_pnt", ".", "occ_dense_heads", ".", "__all__", "[", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "model_cfg", ",", "\n", "data_cfg", "=", "self", ".", "dataset", ".", "dataset_cfg", ",", "\n", "input_channels", "=", "model_info_dict", "[", "'num_occ_3d_features'", "]", "if", "\"num_occ_3d_features\"", "in", "model_info_dict", "else", "model_info_dict", "[", "'num_bev_features'", "]", ",", "\n", "num_class", "=", "self", ".", "occ_num_class", ",", "\n", "grid_size", "=", "model_info_dict", "[", "'occ_grid_size'", "]", ",", "\n", ")", "\n", "model_info_dict", "[", "'occ_module_list'", "]", ".", "append", "(", "occ_dense_head_module", ")", "\n", "return", "occ_dense_head_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_point_head": [[325, 343], ["detector3d_template.Detector3DTemplate.model_cfg.POINT_HEAD.get", "model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_point_head", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'POINT_HEAD'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "\n", "", "if", "self", ".", "model_cfg", ".", "POINT_HEAD", ".", "get", "(", "'USE_POINT_FEATURES_BEFORE_FUSION'", ",", "False", ")", ":", "\n", "            ", "num_point_features", "=", "model_info_dict", "[", "'num_point_features_before_fusion'", "]", "\n", "", "else", ":", "\n", "            ", "num_point_features", "=", "model_info_dict", "[", "'num_point_features'", "]", "\n", "\n", "", "point_head_module", "=", "dense_heads", ".", "__all__", "[", "self", ".", "model_cfg", ".", "POINT_HEAD", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "POINT_HEAD", ",", "\n", "input_channels", "=", "num_point_features", ",", "\n", "num_class", "=", "self", ".", "num_class", "if", "not", "self", ".", "model_cfg", ".", "POINT_HEAD", ".", "CLASS_AGNOSTIC", "else", "1", ",", "\n", "predict_boxes_when_training", "=", "self", ".", "model_cfg", ".", "get", "(", "'ROI_HEAD'", ",", "False", ")", "\n", ")", "\n", "\n", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "point_head_module", ")", "\n", "return", "point_head_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_roi_head": [[344, 359], ["model_info_dict[].append", "detector3d_template.Detector3DTemplate.model_cfg.get"], "methods", ["None"], ["", "def", "build_roi_head", "(", "self", ",", "model_info_dict", ")", ":", "\n", "        ", "if", "self", ".", "model_cfg", ".", "get", "(", "'ROI_HEAD'", ",", "None", ")", "is", "None", ":", "\n", "            ", "return", "None", ",", "model_info_dict", "\n", "", "point_head_module", "=", "roi_heads", ".", "__all__", "[", "self", ".", "model_cfg", ".", "ROI_HEAD", ".", "NAME", "]", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ".", "ROI_HEAD", ",", "\n", "input_channels", "=", "model_info_dict", "[", "'num_point_features'", "]", ",", "\n", "num_class", "=", "self", ".", "num_class", "if", "not", "self", ".", "model_cfg", ".", "ROI_HEAD", ".", "CLASS_AGNOSTIC", "else", "1", ",", "\n", "det_voxel_size", "=", "model_info_dict", "[", "'det_voxel_size'", "]", ",", "\n", "point_cloud_range", "=", "model_info_dict", "[", "'point_cloud_range'", "]", ",", "\n", "num_rawpoint_features", "=", "model_info_dict", "[", "'num_rawpoint_features'", "]", ",", "\n", "pre_conv_num_bev_features", "=", "model_info_dict", "[", "'pre_conv_num_bev_features'", "]", ",", "\n", ")", "\n", "\n", "model_info_dict", "[", "'det_module_list'", "]", ".", "append", "(", "point_head_module", ")", "\n", "return", "point_head_module", ",", "model_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.forward": [[360, 362], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.post_processing": [[363, 477], ["range", "detector3d_template.Detector3DTemplate.generate_recall_record", "record_dict.update", "pred_dicts.append", "batch_dict.get", "isinstance", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "batch_dict.get", "model_utils.model_nms_utils.class_agnostic_nms", "batch_dict[].shape.__len__", "batch_dict[].shape.__len__", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "isinstance", "model_utils.model_nms_utils.multi_classes_nms", "pred_scores.append", "pred_labels.append", "pred_boxes.append", "torch.max", "torch.max", "torch.max", "torch.max", "len", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "iou3d.cpu().numpy", "len", "len", "iou3d.cpu"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.generate_recall_record", "home.repos.pwc.inspect_result.xharlie_btcdet.model_utils.model_nms_utils.class_agnostic_nms", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.model_utils.model_nms_utils.multi_classes_nms"], ["", "def", "post_processing", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                batch_cls_preds: (B, num_boxes, num_classes | 1) or (N1+N2+..., num_classes | 1)\n                                or [(B, num_boxes, num_class1), (B, num_boxes, num_class2) ...]\n                multihead_label_mapping: [(num_class1), (num_class2), ...]\n                batch_box_preds: (B, num_boxes, 7+C) or (N1+N2+..., 7+C)\n                cls_preds_normalized: indicate whether batch_cls_preds is normalized\n                batch_index: optional (N1+N2+...)\n                has_class_labels: True/False\n                roi_labels: (B, num_rois)  1 .. num_classes\n                batch_pred_labels: (B, num_boxes, 1)\n        Returns:\n\n        \"\"\"", "\n", "post_process_cfg", "=", "self", ".", "model_cfg", ".", "POST_PROCESSING", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "recall_dict", "=", "{", "}", "\n", "pred_dicts", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "record_dict", "=", "{", "}", "\n", "if", "batch_dict", ".", "get", "(", "'batch_index'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "assert", "batch_dict", "[", "'batch_box_preds'", "]", ".", "shape", ".", "__len__", "(", ")", "==", "2", "\n", "batch_mask", "=", "(", "batch_dict", "[", "'batch_index'", "]", "==", "index", ")", "\n", "", "else", ":", "\n", "                ", "assert", "batch_dict", "[", "'batch_box_preds'", "]", ".", "shape", ".", "__len__", "(", ")", "==", "3", "\n", "batch_mask", "=", "index", "\n", "\n", "", "box_preds", "=", "batch_dict", "[", "'batch_box_preds'", "]", "[", "batch_mask", "]", "\n", "src_box_preds", "=", "box_preds", "\n", "\n", "if", "not", "isinstance", "(", "batch_dict", "[", "'batch_cls_preds'", "]", ",", "list", ")", ":", "\n", "                ", "cls_preds", "=", "batch_dict", "[", "'batch_cls_preds'", "]", "[", "batch_mask", "]", "\n", "\n", "src_cls_preds", "=", "cls_preds", "\n", "assert", "cls_preds", ".", "shape", "[", "1", "]", "in", "[", "1", ",", "self", ".", "num_class", "]", "\n", "\n", "if", "not", "batch_dict", "[", "'cls_preds_normalized'", "]", ":", "\n", "                    ", "cls_preds", "=", "torch", ".", "sigmoid", "(", "cls_preds", ")", "\n", "", "", "else", ":", "\n", "                ", "cls_preds", "=", "[", "x", "[", "batch_mask", "]", "for", "x", "in", "batch_dict", "[", "'batch_cls_preds'", "]", "]", "\n", "src_cls_preds", "=", "cls_preds", "\n", "if", "not", "batch_dict", "[", "'cls_preds_normalized'", "]", ":", "\n", "                    ", "cls_preds", "=", "[", "torch", ".", "sigmoid", "(", "x", ")", "for", "x", "in", "cls_preds", "]", "\n", "\n", "", "", "if", "post_process_cfg", ".", "NMS_CONFIG", ".", "MULTI_CLASSES_NMS", ":", "\n", "                ", "if", "not", "isinstance", "(", "cls_preds", ",", "list", ")", ":", "\n", "                    ", "cls_preds", "=", "[", "cls_preds", "]", "\n", "multihead_label_mapping", "=", "[", "torch", ".", "arange", "(", "1", ",", "self", ".", "num_class", ",", "device", "=", "cls_preds", "[", "0", "]", ".", "device", ")", "]", "\n", "", "else", ":", "\n", "                    ", "multihead_label_mapping", "=", "batch_dict", "[", "'multihead_label_mapping'", "]", "\n", "\n", "", "cur_start_idx", "=", "0", "\n", "pred_scores", ",", "pred_labels", ",", "pred_boxes", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "cur_cls_preds", ",", "cur_label_mapping", "in", "zip", "(", "cls_preds", ",", "multihead_label_mapping", ")", ":", "\n", "                    ", "assert", "cur_cls_preds", ".", "shape", "[", "1", "]", "==", "len", "(", "cur_label_mapping", ")", "\n", "cur_box_preds", "=", "box_preds", "[", "cur_start_idx", ":", "cur_start_idx", "+", "cur_cls_preds", ".", "shape", "[", "0", "]", "]", "\n", "cur_pred_scores", ",", "cur_pred_labels", ",", "cur_pred_boxes", "=", "model_nms_utils", ".", "multi_classes_nms", "(", "\n", "cls_scores", "=", "cur_cls_preds", ",", "box_preds", "=", "cur_box_preds", ",", "\n", "nms_config", "=", "post_process_cfg", ".", "NMS_CONFIG", ",", "\n", "score_thresh", "=", "post_process_cfg", ".", "SCORE_THRESH", "\n", ")", "\n", "cur_pred_labels", "=", "cur_label_mapping", "[", "cur_pred_labels", "]", "\n", "pred_scores", ".", "append", "(", "cur_pred_scores", ")", "\n", "pred_labels", ".", "append", "(", "cur_pred_labels", ")", "\n", "pred_boxes", ".", "append", "(", "cur_pred_boxes", ")", "\n", "cur_start_idx", "+=", "cur_cls_preds", ".", "shape", "[", "0", "]", "\n", "\n", "", "final_scores", "=", "torch", ".", "cat", "(", "pred_scores", ",", "dim", "=", "0", ")", "\n", "final_labels", "=", "torch", ".", "cat", "(", "pred_labels", ",", "dim", "=", "0", ")", "\n", "final_boxes", "=", "torch", ".", "cat", "(", "pred_boxes", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cls_preds", ",", "label_preds", "=", "torch", ".", "max", "(", "cls_preds", ",", "dim", "=", "-", "1", ")", "\n", "if", "batch_dict", ".", "get", "(", "'has_class_labels'", ",", "False", ")", ":", "\n", "                    ", "label_key", "=", "'roi_labels'", "if", "'roi_labels'", "in", "batch_dict", "else", "'batch_pred_labels'", "\n", "label_preds", "=", "batch_dict", "[", "label_key", "]", "[", "index", "]", "\n", "", "else", ":", "\n", "                    ", "label_preds", "=", "label_preds", "+", "1", "\n", "\n", "", "selected", ",", "selected_scores", "=", "model_nms_utils", ".", "class_agnostic_nms", "(", "\n", "box_scores", "=", "cls_preds", ",", "box_preds", "=", "box_preds", ",", "\n", "nms_config", "=", "post_process_cfg", ".", "NMS_CONFIG", ",", "\n", "score_thresh", "=", "post_process_cfg", ".", "SCORE_THRESH", "\n", ")", "\n", "\n", "if", "post_process_cfg", ".", "OUTPUT_RAW_SCORE", ":", "\n", "                    ", "max_cls_preds", ",", "_", "=", "torch", ".", "max", "(", "src_cls_preds", ",", "dim", "=", "-", "1", ")", "\n", "selected_scores", "=", "max_cls_preds", "[", "selected", "]", "\n", "\n", "", "final_scores", "=", "selected_scores", "\n", "final_labels", "=", "label_preds", "[", "selected", "]", "\n", "final_boxes", "=", "box_preds", "[", "selected", "]", "\n", "\n", "", "recall_dict", ",", "iou3d_rcnn", "=", "self", ".", "generate_recall_record", "(", "\n", "box_preds", "=", "final_boxes", "if", "'rois'", "not", "in", "batch_dict", "else", "src_box_preds", ",", "\n", "recall_dict", "=", "recall_dict", ",", "batch_index", "=", "index", ",", "data_dict", "=", "batch_dict", ",", "\n", "thresh_list", "=", "post_process_cfg", ".", "RECALL_THRESH_LIST", "\n", ")", "\n", "if", "iou3d_rcnn", "is", "None", "or", "len", "(", "iou3d_rcnn", ")", "==", "0", ":", "\n", "                ", "iou3d", "=", "None", "\n", "", "else", ":", "\n", "                ", "iou3d", "=", "torch", ".", "max", "(", "iou3d_rcnn", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "record_dict", ".", "update", "(", "{", "\n", "'pred_boxes'", ":", "final_boxes", ",", "\n", "'pred_scores'", ":", "final_scores", ",", "\n", "'pred_labels'", ":", "final_labels", ",", "\n", "'iou'", ":", "iou3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "if", "iou3d", "is", "not", "None", "and", "len", "(", "iou3d", ")", "==", "len", "(", "final_boxes", ")", "else", "None", "\n", "}", ")", "\n", "\n", "pred_dicts", ".", "append", "(", "record_dict", ")", "\n", "\n", "", "return", "pred_dicts", ",", "recall_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.occ_post_processing": [[479, 538], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "detector3d_template.Detector3DTemplate.call_precision_recall_f1", "torch.sum.cpu", "torch.sum.cpu", "torch.sum.cpu", "torch.sum.cpu", "batch_dict[].cpu", "torch.sum.cpu", "torch.sum.cpu", "precision.cpu", "recall.cpu", "f1.cpu", "utils.point_box_utils.torch_points_in_box_3d_box_label_batch", "sum", "range", "match_dicts.update", "added_occ_b_ind.unsqueeze", "zip", "occ_thresh_box_num.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.call_precision_recall_f1", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_box_label_batch"], ["", "def", "occ_post_processing", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                batch_cls_preds: (B, num_boxes, num_classes | 1) or (N1+N2+..., num_classes | 1)\n                                or [(B, num_boxes, num_class1), (B, num_boxes, num_class2) ...]\n                multihead_label_mapping: [(num_class1), (num_class2), ...]\n                batch_box_preds: (B, num_boxes, 7+C) or (N1+N2+..., 7+C)\n                cls_preds_normalized: indicate whether batch_cls_preds is normalized\n                batch_index: optional (N1+N2+...)\n                has_class_labels: True/False\n                roi_labels: (B, num_rois)  1 .. num_classes\n                batch_pred_labels: (B, num_boxes, 1)\n        Returns:\n\n        \"\"\"", "\n", "\n", "general_cls_loss_mask", "=", "batch_dict", "[", "'general_cls_loss_mask'", "]", "\n", "total", "=", "torch", ".", "sum", "(", "general_cls_loss_mask", ")", "\n", "pos_mask", "=", "batch_dict", "[", "\"pos_mask\"", "]", "\n", "pos_num", "=", "torch", ".", "sum", "(", "pos_mask", ")", "\n", "neg_mask", "=", "batch_dict", "[", "\"neg_mask\"", "]", "\n", "neg_num", "=", "torch", ".", "sum", "(", "neg_mask", ")", "\n", "batch_pred_occ_prob", "=", "batch_dict", "[", "'batch_pred_occ_prob'", "]", "\n", "precision", ",", "recall", ",", "f1", "=", "self", ".", "call_precision_recall_f1", "(", "pos_num", ",", "pos_mask", ",", "batch_pred_occ_prob", ",", "0.5", ")", "\n", "match_dicts", "=", "{", "\n", "\"pos_num\"", ":", "pos_num", ".", "cpu", "(", ")", ",", "\n", "\"neg_num\"", ":", "neg_num", ".", "cpu", "(", ")", ",", "\n", "\"pos_all_num\"", ":", "batch_dict", "[", "\"pos_all_num\"", "]", ".", "cpu", "(", ")", ",", "\n", "\"total\"", ":", "total", ".", "cpu", "(", ")", ",", "\n", "\"precision\"", ":", "precision", ".", "cpu", "(", ")", ",", "\n", "\"recall\"", ":", "recall", ".", "cpu", "(", ")", ",", "\n", "\"f1\"", ":", "f1", ".", "cpu", "(", ")", ",", "\n", "}", "\n", "if", "\"occ_pnts\"", "in", "batch_dict", ":", "\n", "            ", "batch_size", ",", "added_occ_b_ind", ",", "occ_pnts", ",", "gt_boxes_num", ",", "gt_boxes", "=", "batch_dict", "[", "\"batch_size\"", "]", ",", "batch_dict", "[", "\"added_occ_b_ind\"", "]", ",", "batch_dict", "[", "\"occ_pnts\"", "]", ",", "batch_dict", "[", "\"gt_boxes_num\"", "]", ",", "batch_dict", "[", "\"gt_boxes\"", "]", "\n", "\n", "box_point_mask_lst", ",", "valid_b_point_ind_lst", "=", "point_box_utils", ".", "torch_points_in_box_3d_box_label_batch", "(", "occ_pnts", "[", "...", ",", ":", "3", "]", ",", "added_occ_b_ind", ".", "unsqueeze", "(", "-", "1", ")", ",", "gt_boxes", ",", "gt_boxes_num", ",", "batch_size", ")", "\n", "occ_point_lst", "=", "[", "occ_pnts", "[", "vox_ind", ",", ":", "]", "for", "vox_ind", "in", "valid_b_point_ind_lst", "]", "\n", "occ_thresh_box_num", "=", "[", "]", "\n", "box_num_sum", "=", "sum", "(", "gt_boxes_num", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "                ", "thresh", "=", "i", "*", "0.1", "\n", "box_occ_num_sum", "=", "0", "\n", "for", "occ", ",", "mask", "in", "zip", "(", "occ_point_lst", ",", "box_point_mask_lst", ")", ":", "\n", "                    ", "thresh_ind", "=", "torch", ".", "nonzero", "(", "occ", "[", "...", ",", "3", "]", ">=", "thresh", ")", "\n", "# print(\"thresh_ind\", thresh_ind.shape, occ.shape, mask.shape)", "\n", "if", "thresh_ind", ".", "shape", "[", "0", "]", ">", "0", "and", "mask", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                        ", "box_labels", "=", "torch", ".", "max", "(", "mask", "[", "thresh_ind", "[", "...", ",", "0", "]", ",", ":", "]", ",", "dim", "=", "0", ")", "[", "0", "]", "\n", "box_occ_num_sum", "+=", "torch", ".", "sum", "(", "box_labels", ")", ".", "item", "(", ")", "\n", "", "", "occ_thresh_box_num", ".", "append", "(", "box_occ_num_sum", ")", "\n", "", "match_dicts", ".", "update", "(", "{", "\n", "\"box_num_sum\"", ":", "box_num_sum", ",", "\n", "\"occ_box_num\"", ":", "occ_thresh_box_num", "\n", "}", ")", "\n", "# print(box_num_sum)", "\n", "# print(occ_thresh_box_num)", "\n", "", "return", "match_dicts", ",", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.call_precision_recall_f1": [[539, 547], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "call_precision_recall_f1", "(", "self", ",", "pos_num", ",", "pos_mask", ",", "batch_pred_occ_prob", ",", "thresh", ")", ":", "\n", "        ", "pos_predict", "=", "batch_pred_occ_prob", ">=", "thresh", "\n", "pos_predict_num", "=", "torch", ".", "sum", "(", "pos_predict", ")", "\n", "pos_correct", "=", "torch", ".", "sum", "(", "pos_mask", "&", "pos_predict", ")", "\n", "precision", "=", "pos_correct", "/", "torch", ".", "clamp", "(", "pos_predict_num", ",", "min", "=", "1.0", ")", "\n", "recall", "=", "pos_correct", "/", "torch", ".", "clamp", "(", "pos_num", ",", "min", "=", "1.0", ")", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "torch", ".", "clamp", "(", "precision", "+", "recall", ",", "min", "=", "1e-8", ")", "\n", "return", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.generate_recall_record": [[548, 592], ["recall_dict.__len__", "cur_gt.__len__", "box_preds.new_zeros", "cur_gt[].sum", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "str", "str", "str", "str", "str", "torch.zeros.max", "torch.zeros.max", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu.max"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "@", "staticmethod", "\n", "def", "generate_recall_record", "(", "box_preds", ",", "recall_dict", ",", "batch_index", ",", "data_dict", "=", "None", ",", "thresh_list", "=", "None", ")", ":", "\n", "        ", "if", "'gt_boxes'", "not", "in", "data_dict", ":", "\n", "            ", "return", "recall_dict", "\n", "\n", "", "rois", "=", "data_dict", "[", "'rois'", "]", "[", "batch_index", "]", "if", "'rois'", "in", "data_dict", "else", "None", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "[", "batch_index", "]", "\n", "\n", "if", "recall_dict", ".", "__len__", "(", ")", "==", "0", ":", "\n", "            ", "recall_dict", "=", "{", "'gt'", ":", "0", "}", "\n", "for", "cur_thresh", "in", "thresh_list", ":", "\n", "                ", "recall_dict", "[", "'roi_%s'", "%", "(", "str", "(", "cur_thresh", ")", ")", "]", "=", "0", "\n", "recall_dict", "[", "'rcnn_%s'", "%", "(", "str", "(", "cur_thresh", ")", ")", "]", "=", "0", "\n", "\n", "", "", "cur_gt", "=", "gt_boxes", "\n", "k", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "k", ">", "0", "and", "cur_gt", "[", "k", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "k", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "k", "+", "1", "]", "\n", "\n", "iou3d_rcnn", "=", "None", "\n", "if", "cur_gt", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "if", "box_preds", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "iou3d_rcnn", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "box_preds", "[", ":", ",", "0", ":", "7", "]", ",", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "", "else", ":", "\n", "                ", "iou3d_rcnn", "=", "torch", ".", "zeros", "(", "(", "0", ",", "cur_gt", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "if", "rois", "is", "not", "None", ":", "\n", "                ", "iou3d_roi", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "rois", "[", ":", ",", "0", ":", "7", "]", ",", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "\n", "", "for", "cur_thresh", "in", "thresh_list", ":", "\n", "                ", "if", "iou3d_rcnn", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "recall_dict", "[", "'rcnn_%s'", "%", "str", "(", "cur_thresh", ")", "]", "+=", "0", "\n", "", "else", ":", "\n", "                    ", "rcnn_recalled", "=", "(", "iou3d_rcnn", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ">", "cur_thresh", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "recall_dict", "[", "'rcnn_%s'", "%", "str", "(", "cur_thresh", ")", "]", "+=", "rcnn_recalled", "\n", "", "if", "rois", "is", "not", "None", ":", "\n", "                    ", "roi_recalled", "=", "(", "iou3d_roi", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ">", "cur_thresh", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "recall_dict", "[", "'roi_%s'", "%", "str", "(", "cur_thresh", ")", "]", "+=", "roi_recalled", "\n", "\n", "", "", "recall_dict", "[", "'gt'", "]", "+=", "cur_gt", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "gt_iou", "=", "box_preds", ".", "new_zeros", "(", "box_preds", ".", "shape", "[", "0", "]", ")", "\n", "", "return", "recall_dict", ",", "iou3d_rcnn", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_from_file": [[594, 619], ["os.path.isfile", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "model_state_disk.items", "detector3d_template.Detector3DTemplate.state_dict", "detector3d_template.Detector3DTemplate.update", "detector3d_template.Detector3DTemplate.load_state_dict", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "key.startswith", "detector3d_template.Detector3DTemplate.state_dict", "logger.info", "len", "len", "detector3d_template.Detector3DTemplate.state_dict", "detector3d_template.Detector3DTemplate.state_dict", "str"], "methods", ["None"], ["", "def", "load_params_from_file", "(", "self", ",", "filename", ",", "logger", ",", "to_cpu", "=", "False", ",", "verbose", "=", "True", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", ",", "\"wrong file path: {}\"", ".", "format", "(", "filename", ")", "\n", "\n", "logger", ".", "info", "(", "'==> Loading %s parameters from checkpoint %s to %s'", "%", "(", "prefix", ",", "filename", ",", "'CPU'", "if", "to_cpu", "else", "'GPU'", ")", ")", "\n", "loc_type", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "to_cpu", "else", "None", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "loc_type", ")", "\n", "model_state_disk", "=", "checkpoint", "[", "'model_state'", "]", "\n", "\n", "\n", "update_model_state", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "model_state_disk", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "self", ".", "state_dict", "(", ")", "and", "self", ".", "state_dict", "(", ")", "[", "key", "]", ".", "shape", "==", "model_state_disk", "[", "key", "]", ".", "shape", "and", "key", ".", "startswith", "(", "prefix", ")", ":", "\n", "                ", "update_model_state", "[", "key", "]", "=", "val", "\n", "\n", "", "", "state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "state_dict", ".", "update", "(", "update_model_state", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "for", "key", "in", "state_dict", ":", "\n", "            ", "if", "key", "not", "in", "update_model_state", ":", "\n", "                ", "if", "verbose", ":", "\n", "                    ", "logger", ".", "info", "(", "'Not updated weight %s: %s'", "%", "(", "key", ",", "str", "(", "state_dict", "[", "key", "]", ".", "shape", ")", ")", ")", "\n", "\n", "", "", "", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "'==> Done (loaded %d/%d)'", "%", "(", "len", "(", "update_model_state", ")", ",", "len", "(", "self", ".", "state_dict", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_with_optimizer": [[620, 648], ["logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get", "detector3d_template.Detector3DTemplate.load_state_dict", "logger.info", "os.path.isfile", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "optimizer.load_state_dict", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "optimizer.load_state_dict"], "methods", ["None"], ["", "", "def", "load_params_with_optimizer", "(", "self", ",", "filename", ",", "to_cpu", "=", "False", ",", "optimizer", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "\n", "\n", "", "logger", ".", "info", "(", "'==> Loading parameters from checkpoint %s to %s'", "%", "(", "filename", ",", "'CPU'", "if", "to_cpu", "else", "'GPU'", ")", ")", "\n", "loc_type", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "to_cpu", "else", "None", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "loc_type", ")", "\n", "epoch", "=", "checkpoint", ".", "get", "(", "'epoch'", ",", "-", "1", ")", "\n", "it", "=", "checkpoint", ".", "get", "(", "'it'", ",", "0.0", ")", "\n", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ")", "\n", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "if", "'optimizer_state'", "in", "checkpoint", "and", "checkpoint", "[", "'optimizer_state'", "]", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "'==> Loading optimizer parameters from checkpoint %s to %s'", "\n", "%", "(", "filename", ",", "'CPU'", "if", "to_cpu", "else", "'GPU'", ")", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state'", "]", ")", "\n", "", "else", ":", "\n", "                ", "assert", "filename", "[", "-", "4", "]", "==", "'.'", ",", "filename", "\n", "src_file", ",", "ext", "=", "filename", "[", ":", "-", "4", "]", ",", "filename", "[", "-", "3", ":", "]", "\n", "optimizer_filename", "=", "'%s_optim.%s'", "%", "(", "src_file", ",", "ext", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "optimizer_filename", ")", ":", "\n", "                    ", "optimizer_ckpt", "=", "torch", ".", "load", "(", "optimizer_filename", ",", "map_location", "=", "loc_type", ")", "\n", "optimizer", ".", "load_state_dict", "(", "optimizer_ckpt", "[", "'optimizer_state'", "]", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'==> Done'", ")", "\n", "\n", "return", "it", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_with_optimizer_lst": [[650, 679], ["logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get", "detector3d_template.Detector3DTemplate.load_state_dict", "logger.info", "os.path.isfile", "torch.device", "torch.device", "torch.device", "torch.device", "logger.info", "range", "os.path.exists", "len", "optimizer_lst[].load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "optimizer.load_state_dict"], "methods", ["None"], ["", "def", "load_params_with_optimizer_lst", "(", "self", ",", "filename", ",", "to_cpu", "=", "False", ",", "optimizer_lst", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "\n", "\n", "", "logger", ".", "info", "(", "'==> Loading parameters from checkpoint %s to %s'", "%", "(", "filename", ",", "'CPU'", "if", "to_cpu", "else", "'GPU'", ")", ")", "\n", "loc_type", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "to_cpu", "else", "None", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "loc_type", ")", "\n", "epoch", "=", "checkpoint", ".", "get", "(", "'epoch'", ",", "-", "1", ")", "\n", "it", "=", "checkpoint", ".", "get", "(", "'it'", ",", "0.0", ")", "\n", "\n", "self", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ")", "\n", "\n", "if", "optimizer_lst", "is", "not", "None", ":", "\n", "            ", "if", "'optimizer_state_lst'", "in", "checkpoint", "and", "checkpoint", "[", "'optimizer_state_lst'", "]", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "'==> Loading optimizer_lst parameters from checkpoint %s to %s'", "\n", "%", "(", "filename", ",", "'CPU'", "if", "to_cpu", "else", "'GPU'", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer_lst", ")", ")", ":", "\n", "                    ", "optimizer_lst", "[", "i", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_lst'", "]", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "filename", "[", "-", "4", "]", "==", "'.'", ",", "filename", "\n", "src_file", ",", "ext", "=", "filename", "[", ":", "-", "4", "]", ",", "filename", "[", "-", "3", ":", "]", "\n", "optimizer_filename", "=", "'%s_optim.%s'", "%", "(", "src_file", ",", "ext", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "optimizer_filename", ")", ":", "\n", "                    ", "optimizer_ckpt", "=", "torch", ".", "load", "(", "optimizer_filename", ",", "map_location", "=", "loc_type", ")", "\n", "optimizer", ".", "load_state_dict", "(", "optimizer_ckpt", "[", "'optimizer_state'", "]", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'==> Done'", ")", "\n", "\n", "return", "it", ",", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.__init__": [[7, 15], ["detector3d_template.Detector3DTemplate.__init__", "btcnet.BtcNet.build_networks", "print", "full_config.DATA_CONFIG.get", "full_config.DATA_CONFIG.OCC.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.build_networks"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "dataset", ",", "full_config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "dataset", "=", "dataset", ",", "full_config", "=", "full_config", ")", "\n", "self", ".", "occ_module_list", ",", "self", ".", "det_module_list", "=", "self", ".", "build_networks", "(", ")", "\n", "self", ".", "eval_count", "=", "-", "1", "\n", "self", ".", "occ_nograd", "=", "True", "if", "full_config", "is", "not", "None", "and", "full_config", ".", "OCC_OPTIMIZATION", ".", "LR", "==", "0.0", "else", "False", "\n", "self", ".", "det_nograd", "=", "True", "if", "full_config", "is", "not", "None", "and", "full_config", ".", "OPTIMIZATION", ".", "LR", "==", "0.0", "else", "False", "\n", "self", ".", "percentage", "=", "full_config", ".", "DATA_CONFIG", ".", "OCC", ".", "USEOCC_PERCENTAGE", "if", "full_config", "is", "not", "None", "and", "full_config", ".", "DATA_CONFIG", ".", "get", "(", "\"OCC\"", ",", "None", ")", "is", "not", "None", "and", "full_config", ".", "DATA_CONFIG", ".", "OCC", ".", "get", "(", "\"USEOCC_PERCENTAGE\"", ",", "None", ")", "is", "not", "None", "else", "1.0", "\n", "print", "(", "\"self.clamp_max\"", ",", "self", ".", "clamp_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp": [[16, 31], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "clamp", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "if", "self", ".", "clamp_max", "==", "\"tanh\"", ":", "\n", "            ", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "4", "]", "=", "torch", ".", "tanh", "(", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "4", "]", ")", "\n", "if", "\"voxels\"", "in", "batch_dict", ":", "\n", "                ", "batch_dict", "[", "\"voxels\"", "]", "[", "...", ",", "3", "]", "=", "torch", ".", "tanh", "(", "batch_dict", "[", "\"voxels\"", "]", "[", "...", ",", "3", "]", ")", "\n", "", "if", "\"det_voxels\"", "in", "batch_dict", ":", "\n", "                ", "batch_dict", "[", "\"det_voxels\"", "]", "[", "...", ",", "3", "]", "=", "torch", ".", "tanh", "(", "batch_dict", "[", "\"det_voxels\"", "]", "[", "...", ",", "3", "]", ")", "\n", "# print(\"use tanh\")", "\n", "", "", "elif", "self", ".", "clamp_max", ">", "0.0", ":", "\n", "            ", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "4", "]", "=", "torch", ".", "clamp", "(", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "4", "]", ",", "min", "=", "0.0", ",", "max", "=", "self", ".", "clamp_max", ")", "\n", "if", "\"voxels\"", "in", "batch_dict", ":", "\n", "                ", "batch_dict", "[", "\"voxels\"", "]", "[", "...", ",", "3", "]", "=", "torch", ".", "clamp", "(", "batch_dict", "[", "\"voxels\"", "]", "[", "...", ",", "3", "]", ",", "min", "=", "0.0", ",", "max", "=", "self", ".", "clamp_max", ")", "\n", "", "if", "\"det_voxels\"", "in", "batch_dict", ":", "\n", "                ", "batch_dict", "[", "\"det_voxels\"", "]", "[", "...", ",", "3", "]", "=", "torch", ".", "clamp", "(", "batch_dict", "[", "\"det_voxels\"", "]", "[", "...", ",", "3", "]", ",", "min", "=", "0.0", ",", "max", "=", "self", ".", "clamp_max", ")", "\n", "", "", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.forward": [[32, 89], ["numpy.random.uniform", "btcnet.BtcNet.get_vis", "btcnet.BtcNet.clamp", "btcnet.BtcNet.get_training_loss", "tb_dict.update", "hasattr", "range", "torch.no_grad", "cur_module", "torch.no_grad", "cur_module", "hasattr", "hasattr", "btcnet.BtcNet.occ_post_processing", "metric_dicts.update", "btcnet.BtcNet.post_processing", "metric_dicts.update", "cur_module", "cur_module", "pc_dict.update", "btcnet.BtcNet.model_cfg.get", "btcnet.BtcNet.filter_by_bind", "pc_dict.update", "pc_dict.update", "torch.zeros", "btcnet.BtcNet.model_cfg.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.get_vis", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.get_training_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.occ_post_processing", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.post_processing", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.filter_by_bind"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "bind", "=", "0", "\n", "if", "self", ".", "clamp_max", "is", "not", "None", ":", "\n", "            ", "batch_dict", "=", "self", ".", "clamp", "(", "batch_dict", ")", "\n", "\n", "", "use_occ_prob", "=", "[", "True", "for", "i", "in", "range", "(", "batch_dict", "[", "\"batch_size\"", "]", ")", "]", "# False", "\n", "prob", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_dict", "[", "\"batch_size\"", "]", ",", "high", "=", "0.9999", ")", "\n", "if", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "            ", "use_occ_prob", "=", "prob", "<=", "self", ".", "percentage", "\n", "", "batch_dict", "[", "\"use_occ_prob\"", "]", "=", "use_occ_prob", "\n", "if", "self", ".", "occ_nograd", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "cur_module", "in", "self", ".", "occ_module_list", ":", "\n", "                    ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "cur_module", "in", "self", ".", "occ_module_list", ":", "\n", "                ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "", "if", "self", ".", "det_nograd", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "cur_module", "in", "self", ".", "det_module_list", ":", "\n", "                    ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "cur_module", "in", "self", ".", "det_module_list", ":", "\n", "                ", "batch_dict", "=", "cur_module", "(", "batch_dict", ")", "\n", "\n", "", "", "if", "not", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "            ", "self", ".", "eval_count", "+=", "1", "\n", "", "tb_dict", ",", "pc_dict", "=", "self", ".", "get_vis", "(", "batch_dict", ",", "bind", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss", ",", "det_tb_dict", ",", "disp_dict", "=", "self", ".", "get_training_loss", "(", "batch_dict", ")", "\n", "ret_dict", "=", "{", "\n", "'loss'", ":", "loss", "\n", "}", "\n", "tb_dict", ".", "update", "(", "det_tb_dict", ")", "\n", "return", "ret_dict", ",", "tb_dict", ",", "disp_dict", ",", "pc_dict", "\n", "", "else", ":", "\n", "            ", "metric_dicts", "=", "{", "}", "\n", "if", "hasattr", "(", "self", ".", "model_cfg", ",", "\"OCC\"", ")", "and", "hasattr", "(", "self", ".", "model_cfg", ".", "OCC", ",", "'OCC_POST_PROCESSING'", ")", ":", "\n", "                ", "occ_dicts", ",", "batch_dict", "=", "self", ".", "occ_post_processing", "(", "batch_dict", ")", "\n", "metric_dicts", ".", "update", "(", "occ_dicts", ")", "\n", "", "if", "hasattr", "(", "self", ".", "model_cfg", ",", "'POST_PROCESSING'", ")", ":", "\n", "                ", "pred_dicts", ",", "recall_dicts", "=", "self", ".", "post_processing", "(", "batch_dict", ")", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "not", "None", "and", "self", ".", "eval_count", "%", "self", ".", "model_cfg", ".", "OCC", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "STEP_STRIDE", "==", "0", ":", "\n", "                    ", "pc_dict", ".", "update", "(", "pred_dicts", "[", "bind", "]", ")", "\n", "", "elif", "self", ".", "model_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "None", "and", "self", ".", "eval_count", "%", "EVL_VIS", "==", "0", ":", "\n", "                    ", "gt_points", "=", "self", ".", "filter_by_bind", "(", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "0", "]", ",", "bind", ",", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "1", ":", "4", "]", ")", "\n", "pc_dict", ".", "update", "(", "pred_dicts", "[", "bind", "]", ")", "\n", "pc_dict", ".", "update", "(", "{", "\n", "\"gt_points\"", ":", "gt_points", ",", "\n", "\"gt_boxes\"", ":", "batch_dict", "[", "\"gt_boxes\"", "]", "[", "bind", ",", ":", "batch_dict", "[", "\"gt_boxes_num\"", "]", "[", "bind", "]", ",", "...", "]", "\n", "}", ")", "\n", "", "metric_dicts", ".", "update", "(", "recall_dicts", ")", "\n", "return", "pred_dicts", ",", "metric_dicts", ",", "tb_dict", ",", "pc_dict", "\n", "", "else", ":", "\n", "                ", "return", "{", "'loss'", ":", "torch", ".", "zeros", "(", "1", ")", "}", ",", "metric_dicts", ",", "{", "}", ",", "pc_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.get_training_loss": [[91, 130], ["hasattr", "hasattr", "btcnet.BtcNet.occ_modules.occ_dense_head.get_loss", "tb_dict.update", "btcnet.BtcNet.det_modules.dense_head.get_loss", "btcnet.BtcNet.det_modules.roi_head.get_loss", "tb_dict.update", "hasattr", "btcnet.BtcNet.det_modules.occ_point_head.get_loss", "btcnet.BtcNet.det_modules.roi_head.get_loss", "tb_dict.update", "hasattr", "occ_loss_rpn.item", "det_loss_rpn.item", "btcnet.BtcNet.det_modules.point_head.get_loss", "tb_dict.update", "det_loss_rpn.item"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_loss"], ["", "", "", "def", "get_training_loss", "(", "self", ",", "batch_dict", ",", "no_occ", "=", "False", ")", ":", "\n", "        ", "disp_dict", "=", "{", "}", "\n", "tb_dict", "=", "{", "}", "\n", "loss", ",", "det_loss_rpn", ",", "det_loss_point", ",", "det_loss_rcnn", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "if", "hasattr", "(", "self", ".", "occ_modules", ",", "'occ_dense_head'", ")", "and", "not", "no_occ", ":", "\n", "            ", "occ_loss_rpn", ",", "occ_tb_scalar_dict", "=", "self", ".", "occ_modules", ".", "occ_dense_head", ".", "get_loss", "(", "batch_dict", ")", "\n", "tb_dict", ".", "update", "(", "{", "\n", "'loss_occ'", ":", "occ_loss_rpn", ".", "item", "(", ")", ",", "\n", "**", "occ_tb_scalar_dict", "\n", "}", ")", "\n", "loss", "+=", "occ_loss_rpn", "\n", "# print(\"loss\", loss)", "\n", "\n", "", "if", "hasattr", "(", "self", ".", "det_modules", ",", "'dense_head'", ")", ":", "\n", "            ", "det_loss_rpn", ",", "det_tb_dict", "=", "self", ".", "det_modules", ".", "dense_head", ".", "get_loss", "(", ")", "\n", "det_loss_rcnn", ",", "det_tb_dict", "=", "self", ".", "det_modules", ".", "roi_head", ".", "get_loss", "(", "det_tb_dict", ")", "\n", "tb_dict", ".", "update", "(", "{", "\n", "'loss_rpn'", ":", "det_loss_rpn", ".", "item", "(", ")", ",", "\n", "**", "det_tb_dict", "\n", "}", ")", "\n", "", "elif", "hasattr", "(", "self", ".", "det_modules", ",", "'occ_point_head'", ")", ":", "\n", "            ", "det_loss_rpn", ",", "det_tb_dict", "=", "self", ".", "det_modules", ".", "occ_point_head", ".", "get_loss", "(", ")", "\n", "det_loss_rcnn", ",", "det_tb_dict", "=", "self", ".", "det_modules", ".", "roi_head", ".", "get_loss", "(", "det_tb_dict", ")", "\n", "tb_dict", ".", "update", "(", "{", "\n", "'loss_rpn'", ":", "det_loss_rpn", ".", "item", "(", ")", ",", "\n", "**", "det_tb_dict", "\n", "}", ")", "\n", "if", "hasattr", "(", "self", ".", "det_modules", ",", "'point_head'", ")", ":", "\n", "                ", "det_loss_point", ",", "det_tb_dict", "=", "self", ".", "det_modules", ".", "point_head", ".", "get_loss", "(", "det_tb_dict", ")", "\n", "tb_dict", ".", "update", "(", "{", "\n", "**", "det_tb_dict", "\n", "}", ")", "\n", "# print(\"det loss\", det_loss_rcnn)", "\n", "# else:", "\n", "#     print(\"SPG only!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")", "\n", "# print(\"loss {} det_loss_rpn {} det_loss_point {} det_loss_rcnn {}\".format(loss, det_loss_rpn, det_loss_point, det_loss_rcnn))", "\n", "", "", "loss", "=", "loss", "+", "det_loss_rpn", "+", "det_loss_point", "+", "det_loss_rcnn", "\n", "\n", "return", "loss", ",", "tb_dict", ",", "disp_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.voxelpoints_filter_by_bind": [[132, 137], ["voxel_coords[].repeat", "btcnet.BtcNet.filter_by_bind", "voxel_coords[].repeat.view", "list"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.filter_by_bind"], ["", "def", "voxelpoints_filter_by_bind", "(", "self", ",", "voxel_coords", ",", "bind", ",", "voxels", ")", ":", "\n", "        ", "repeat", "=", "list", "(", "voxels", ".", "shape", ")", "[", "1", "]", "if", "voxels", ".", "dim", "==", "3", "else", "1", "\n", "real_b", "=", "voxel_coords", "[", "...", ",", ":", "1", "]", ".", "repeat", "(", "1", ",", "repeat", ")", "\n", "voxels_pnts", "=", "self", ".", "filter_by_bind", "(", "real_b", ".", "view", "(", "-", "1", ")", ",", "bind", ",", "voxels", ")", "\n", "return", "voxels_pnts", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.get_vis": [[138, 173], ["btcnet.BtcNet.filter_by_bind", "btcnet.BtcNet.voxelpoints_filter_by_bind", "pc_dict.update", "btcnet.BtcNet.occ_modules.occ_pnt_update.visualize", "tb_dict.update", "pc_dict.update", "pc_dict.update", "batch_dict.pop", "btcnet.BtcNet.model_cfg.get", "btcnet.BtcNet.model_cfg.OCC.get", "btcnet.BtcNet.model_cfg.get", "btcnet.BtcNet.model_cfg.OCC.get", "btcnet.BtcNet.model_cfg.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.filter_by_bind", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.voxelpoints_filter_by_bind", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.visualize"], ["", "def", "get_vis", "(", "self", ",", "batch_dict", ",", "bind", ",", "no_occ", "=", "False", ")", ":", "\n", "        ", "tb_dict", "=", "{", "}", "\n", "pc_dict", "=", "{", "}", "\n", "if", "no_occ", ":", "\n", "            ", "return", "tb_dict", ",", "pc_dict", "\n", "", "if", "self", ".", "model_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "not", "None", "and", "self", ".", "model_cfg", ".", "OCC", ".", "get", "(", "'OCC_PNT_UPDATE'", ",", "None", ")", "is", "not", "None", "and", "(", "self", ".", "global_step", "+", "1", ")", "%", "self", ".", "model_cfg", ".", "OCC", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "STEP_STRIDE", "==", "0", "or", "self", ".", "model_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "None", "and", "(", "self", ".", "global_step", "+", "1", ")", "%", "1000", "==", "0", "or", "self", ".", "eval_count", "%", "EVL_VIS", "==", "0", ":", "\n", "            ", "raw_points", "=", "self", ".", "filter_by_bind", "(", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "0", "]", ",", "bind", ",", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "1", ":", "4", "]", ")", "\n", "voxels_pnts", "=", "self", ".", "voxelpoints_filter_by_bind", "(", "batch_dict", "[", "'voxel_coords'", "]", ",", "bind", ",", "batch_dict", "[", "'voxels'", "]", ")", "# batch_dict['voxels'])", "\n", "voxels_pnts", "=", "voxels_pnts", "[", "voxels_pnts", "[", "...", ",", "-", "1", "]", ">", "0", ",", ":", "]", "\n", "# print(\"voxels_pnts\", voxels_pnts.shape, batch_dict['voxel_features'].shape)", "\n", "pc_dict", ".", "update", "(", "{", "\n", "\"raw_points\"", ":", "raw_points", ",", "\n", "\"gt_boxes\"", ":", "batch_dict", "[", "\"gt_boxes\"", "]", "[", "bind", ",", ":", "batch_dict", "[", "\"gt_boxes_num\"", "]", "[", "bind", "]", ",", "...", "]", ",", "\n", "\"augment_box_num\"", ":", "batch_dict", "[", "\"augment_box_num\"", "]", ",", "\n", "\"frame_id\"", ":", "batch_dict", "[", "\"frame_id\"", "]", ",", "\n", "\"voxels\"", ":", "voxels_pnts", ",", "\n", "\"btc_miss_points\"", ":", "batch_dict", "[", "\"miss_points\"", "]", "[", "bind", "]", "if", "\"miss_points\"", "in", "batch_dict", "else", "None", ",", "\n", "\"btc_self_points\"", ":", "batch_dict", "[", "\"self_points\"", "]", "[", "bind", "]", "if", "\"self_points\"", "in", "batch_dict", "else", "None", ",", "\n", "\"btc_other_points\"", ":", "batch_dict", "[", "\"other_points\"", "]", "[", "bind", "]", "if", "\"other_points\"", "in", "batch_dict", "else", "None", ",", "\n", "\"btc_miss_voxelpoints\"", ":", "batch_dict", "[", "\"miss_occ_points\"", "]", "[", "bind", "]", "if", "\"miss_occ_points\"", "in", "batch_dict", "else", "None", ",", "\n", "\"btc_miss_full_voxelpoints\"", ":", "batch_dict", "[", "\"miss_full_occ_points\"", "]", "[", "bind", "]", "if", "\"miss_full_occ_points\"", "in", "batch_dict", "else", "None", ",", "\n", "\"btc_self_voxelpoints\"", ":", "batch_dict", "[", "\"self_occ_points\"", "]", "[", "bind", "]", "if", "\"self_occ_points\"", "in", "batch_dict", "else", "None", ",", "\n", "\"btc_self_limit_voxelpoints\"", ":", "batch_dict", "[", "\"self_limit_occ_mask\"", "]", "[", "bind", "]", "if", "\"self_limit_occ_mask\"", "in", "batch_dict", "else", "None", ",", "\n", "\"btc_other_voxelpoints\"", ":", "batch_dict", "[", "\"other_occ_points\"", "]", "[", "bind", "]", "if", "\"other_occ_points\"", "in", "batch_dict", "else", "None", ",", "\n", "\"btc_other_full_voxelpoints\"", ":", "batch_dict", "[", "\"other_full_occ_points\"", "]", "[", "bind", "]", "if", "\"other_full_occ_points\"", "in", "batch_dict", "else", "None", ",", "\n", "}", ")", "\n", "\n", "", "if", "self", ".", "model_cfg", ".", "get", "(", "'OCC'", ",", "None", ")", "is", "not", "None", "and", "self", ".", "model_cfg", ".", "OCC", ".", "get", "(", "'OCC_PNT_UPDATE'", ",", "None", ")", "is", "not", "None", "and", "(", "(", "self", ".", "global_step", "+", "1", ")", "%", "self", ".", "model_cfg", ".", "OCC", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "STEP_STRIDE", "==", "0", "or", "self", ".", "eval_count", "%", "EVL_VIS", "==", "0", ")", ":", "\n", "            ", "occ_tb", ",", "occ_pc", "=", "self", ".", "occ_modules", ".", "occ_pnt_update", ".", "visualize", "(", "batch_dict", ",", "bind", ")", "\n", "tb_dict", ".", "update", "(", "occ_tb", ")", "\n", "pc_dict", ".", "update", "(", "occ_pc", ")", "\n", "", "if", "\"conv_vis_dict\"", "in", "batch_dict", ":", "\n", "            ", "pc_dict", ".", "update", "(", "batch_dict", "[", "\"conv_vis_dict\"", "]", ")", "\n", "batch_dict", ".", "pop", "(", "\"conv_vis_dict\"", ")", "\n", "", "return", "tb_dict", ",", "pc_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.__init__.build_detector": [[10, 16], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.__init__": [[12, 22], ["torch.Module.__init__", "target_assigner.proposal_target_layer.ProposalTargetLayer", "roi_head_template.RoIHeadTemplate.build_losses", "getattr", "roi_head_template.RoIHeadTemplate.model_cfg.TARGET_CONFIG.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.build_losses"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "model_cfg", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "box_coder", "=", "getattr", "(", "box_coder_utils", ",", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ".", "BOX_CODER", ")", "(", "\n", "**", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ".", "get", "(", "'BOX_CODER_CONFIG'", ",", "{", "}", ")", "\n", ")", "\n", "self", ".", "proposal_target_layer", "=", "ProposalTargetLayer", "(", "roi_sampler_cfg", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ")", "\n", "self", ".", "build_losses", "(", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ")", "\n", "self", ".", "forward_ret_dict", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.build_losses": [[23, 27], ["roi_head_template.RoIHeadTemplate.add_module", "utils.loss_utils.WeightedSmoothL1Loss"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ",", "losses_cfg", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "'reg_loss_func'", ",", "\n", "loss_utils", ".", "WeightedSmoothL1Loss", "(", "code_weights", "=", "losses_cfg", ".", "LOSS_WEIGHTS", "[", "'code_weights'", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.make_fc_layers": [[29, 44], ["range", "torch.Sequential.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fc_list.__len__", "torch.Sequential.extend", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sequential.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "make_fc_layers", "(", "self", ",", "input_channels", ",", "output_channels", ",", "fc_list", ")", ":", "\n", "        ", "fc_layers", "=", "[", "]", "\n", "pre_channel", "=", "input_channels", "\n", "for", "k", "in", "range", "(", "0", ",", "fc_list", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "fc_layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "pre_channel", ",", "fc_list", "[", "k", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_list", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "fc_list", "[", "k", "]", "\n", "if", "self", ".", "model_cfg", ".", "DP_RATIO", ">=", "0", "and", "k", "==", "0", ":", "\n", "                ", "fc_layers", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "", "", "fc_layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "pre_channel", ",", "output_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "fc_layers", "=", "nn", ".", "Sequential", "(", "*", "fc_layers", ")", "\n", "return", "fc_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer": [[45, 101], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "batch_box_preds.new_zeros", "batch_box_preds.new_zeros", "batch_box_preds.new_zeros", "range", "batch_dict.pop", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "batch_dict.get", "model_utils.model_nms_utils.class_agnostic_nms", "batch_cls_preds.shape.__len__", "batch_dict[].shape.__len__", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.model_utils.model_nms_utils.class_agnostic_nms", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "proposal_layer", "(", "self", ",", "batch_dict", ",", "nms_config", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                batch_cls_preds: (B, num_boxes, num_classes | 1) or (N1+N2+..., num_classes | 1)\n                batch_box_preds: (B, num_boxes, 7+C) or (N1+N2+..., 7+C)\n                cls_preds_normalized: indicate whether batch_cls_preds is normalized\n                batch_index: optional (N1+N2+...)\n            nms_config:\n\n        Returns:\n            batch_dict:\n                rois: (B, num_rois, 7+C)\n                roi_scores: (B, num_rois)\n                roi_labels: (B, num_rois)\n\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "batch_box_preds", "=", "batch_dict", "[", "'batch_box_preds'", "]", "\n", "batch_cls_preds", "=", "batch_dict", "[", "'batch_cls_preds'", "]", "\n", "rois", "=", "batch_box_preds", ".", "new_zeros", "(", "(", "batch_size", ",", "nms_config", ".", "NMS_POST_MAXSIZE", ",", "batch_box_preds", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "roi_scores", "=", "batch_box_preds", ".", "new_zeros", "(", "(", "batch_size", ",", "nms_config", ".", "NMS_POST_MAXSIZE", ")", ")", "\n", "roi_labels", "=", "batch_box_preds", ".", "new_zeros", "(", "(", "batch_size", ",", "nms_config", ".", "NMS_POST_MAXSIZE", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "if", "batch_dict", ".", "get", "(", "'batch_index'", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "assert", "batch_cls_preds", ".", "shape", ".", "__len__", "(", ")", "==", "2", "\n", "batch_mask", "=", "(", "batch_dict", "[", "'batch_index'", "]", "==", "index", ")", "\n", "", "else", ":", "\n", "                ", "assert", "batch_dict", "[", "'batch_cls_preds'", "]", ".", "shape", ".", "__len__", "(", ")", "==", "3", "\n", "batch_mask", "=", "index", "\n", "", "box_preds", "=", "batch_box_preds", "[", "batch_mask", "]", "\n", "cls_preds", "=", "batch_cls_preds", "[", "batch_mask", "]", "\n", "\n", "cur_roi_scores", ",", "cur_roi_labels", "=", "torch", ".", "max", "(", "cls_preds", ",", "dim", "=", "1", ")", "\n", "\n", "if", "nms_config", ".", "MULTI_CLASSES_NMS", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "selected", ",", "selected_scores", "=", "class_agnostic_nms", "(", "\n", "box_scores", "=", "cur_roi_scores", ",", "box_preds", "=", "box_preds", ",", "nms_config", "=", "nms_config", "\n", ")", "\n", "", "rois", "[", "index", ",", ":", "len", "(", "selected", ")", ",", ":", "]", "=", "box_preds", "[", "selected", "]", "\n", "roi_scores", "[", "index", ",", ":", "len", "(", "selected", ")", "]", "=", "cur_roi_scores", "[", "selected", "]", "\n", "roi_labels", "[", "index", ",", ":", "len", "(", "selected", ")", "]", "=", "cur_roi_labels", "[", "selected", "]", "\n", "# if index == 0:", "\n", "#     print(\"box_preds\", box_preds.shape, selected.shape, batch_dict['anchors'].shape)", "\n", "#     batch_dict['anchors'] = batch_dict['anchors'][selected]", "\n", "", "batch_dict", "[", "'rois'", "]", "=", "rois", "\n", "batch_dict", "[", "'roi_scores'", "]", "=", "roi_scores", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "roi_labels", "+", "1", "\n", "batch_dict", "[", "'has_class_labels'", "]", "=", "True", "if", "batch_cls_preds", ".", "shape", "[", "-", "1", "]", ">", "1", "else", "False", "\n", "batch_dict", ".", "pop", "(", "'batch_index'", ",", "None", ")", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.assign_targets": [[102, 133], ["utils.common_utils.rotate_points_along_z().view.clone().detach", "utils.common_utils.rotate_points_along_z().view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "roi_head_template.RoIHeadTemplate.proposal_target_layer.forward", "utils.common_utils.rotate_points_along_z().view.clone", "utils.common_utils.rotate_points_along_z", "utils.common_utils.rotate_points_along_z().view.view", "roi_ry.view"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "assign_targets", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "targets_dict", "=", "self", ".", "proposal_target_layer", ".", "forward", "(", "batch_dict", ")", "\n", "\n", "", "rois", "=", "targets_dict", "[", "'rois'", "]", "# (B, N, 7 + C)", "\n", "gt_of_rois", "=", "targets_dict", "[", "'gt_of_rois'", "]", "# (B, N, 7 + C + 1)", "\n", "targets_dict", "[", "'gt_of_rois_src'", "]", "=", "gt_of_rois", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# canonical transformation", "\n", "roi_center", "=", "rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "roi_ry", "=", "rois", "[", ":", ",", ":", ",", "6", "]", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "-", "roi_center", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "-", "roi_ry", "\n", "\n", "# transfer LiDAR coords to local coords", "\n", "gt_of_rois", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "points", "=", "gt_of_rois", ".", "view", "(", "-", "1", ",", "1", ",", "gt_of_rois", ".", "shape", "[", "-", "1", "]", ")", ",", "angle", "=", "-", "roi_ry", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "gt_of_rois", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# flip orientation if rois have opposite orientation", "\n", "heading_label", "=", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "%", "(", "2", "*", "np", ".", "pi", ")", "# 0 ~ 2pi", "\n", "opposite_flag", "=", "(", "heading_label", ">", "np", ".", "pi", "*", "0.5", ")", "&", "(", "heading_label", "<", "np", ".", "pi", "*", "1.5", ")", "\n", "heading_label", "[", "opposite_flag", "]", "=", "(", "heading_label", "[", "opposite_flag", "]", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "# (0 ~ pi/2, 3pi/2 ~ 2pi)", "\n", "flag", "=", "heading_label", ">", "np", ".", "pi", "\n", "heading_label", "[", "flag", "]", "=", "heading_label", "[", "flag", "]", "-", "np", ".", "pi", "*", "2", "# (-pi/2, pi/2)", "\n", "heading_label", "=", "torch", ".", "clamp", "(", "heading_label", ",", "min", "=", "-", "np", ".", "pi", "/", "2", ",", "max", "=", "np", ".", "pi", "/", "2", ")", "\n", "\n", "gt_of_rois", "[", ":", ",", ":", ",", "6", "]", "=", "heading_label", "\n", "targets_dict", "[", "'gt_of_rois'", "]", "=", "gt_of_rois", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.get_box_reg_layer_loss": [[134, 197], ["forward_ret_dict[].view", "[].view", "fg_mask.long().sum().item", "roi_boxes3d.clone().detach().view", "roi_head_template.RoIHeadTemplate.box_coder.encode_torch", "roi_head_template.RoIHeadTemplate.reg_loss_func", "roi_head_template.RoIHeadTemplate.item", "gt_boxes3d_ct.view", "fg_mask.long().sum", "gt_boxes3d_ct.view", "rcnn_reg.view().unsqueeze", "roi_head_template.RoIHeadTemplate.unsqueeze", "max", "fg_roi_boxes3d.view.view.view", "fg_roi_boxes3d.view.view.clone().detach", "fg_roi_boxes3d[].view", "fg_roi_boxes3d[].view", "roi_head_template.RoIHeadTemplate.box_coder.decode_torch().view", "utils.common_utils.rotate_points_along_z().squeeze", "utils.loss_utils.get_corner_loss_lidar", "loss_corner.mean.mean.mean", "loss_corner.mean.mean.item", "roi_boxes3d.clone().detach", "rcnn_reg.view", "roi_boxes3d.view", "fg_mask.long", "rcnn_reg.view", "fg_roi_boxes3d.view.view.clone", "roi_head_template.RoIHeadTemplate.box_coder.decode_torch", "utils.common_utils.rotate_points_along_z", "roi_boxes3d.clone", "roi_head_template.RoIHeadTemplate.view", "fg_mask.unsqueeze().float", "fg_rcnn_reg.view", "utils.common_utils.rotate_points_along_z().squeeze.unsqueeze", "fg_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.encode_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.loss_utils.get_corner_loss_lidar", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.decode_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "get_box_reg_layer_loss", "(", "self", ",", "forward_ret_dict", ")", ":", "\n", "        ", "loss_cfgs", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", "\n", "code_size", "=", "self", ".", "box_coder", ".", "code_size", "\n", "reg_valid_mask", "=", "forward_ret_dict", "[", "'reg_valid_mask'", "]", ".", "view", "(", "-", "1", ")", "\n", "gt_boxes3d_ct", "=", "forward_ret_dict", "[", "'gt_of_rois'", "]", "[", "...", ",", "0", ":", "code_size", "]", "\n", "gt_of_rois_src", "=", "forward_ret_dict", "[", "'gt_of_rois_src'", "]", "[", "...", ",", "0", ":", "code_size", "]", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "rcnn_reg", "=", "forward_ret_dict", "[", "'rcnn_reg'", "]", "# (rcnn_batch_size, C)", "\n", "roi_boxes3d", "=", "forward_ret_dict", "[", "'rois'", "]", "\n", "rcnn_batch_size", "=", "gt_boxes3d_ct", ".", "view", "(", "-", "1", ",", "code_size", ")", ".", "shape", "[", "0", "]", "\n", "\n", "fg_mask", "=", "(", "reg_valid_mask", ">", "0", ")", "\n", "fg_sum", "=", "fg_mask", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "tb_dict", "=", "{", "}", "\n", "\n", "if", "loss_cfgs", ".", "REG_LOSS", "==", "'smooth-l1'", ":", "\n", "            ", "rois_anchor", "=", "roi_boxes3d", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "rois_anchor", "[", ":", ",", "0", ":", "3", "]", "=", "0", "\n", "rois_anchor", "[", ":", ",", "6", "]", "=", "0", "\n", "reg_targets", "=", "self", ".", "box_coder", ".", "encode_torch", "(", "\n", "gt_boxes3d_ct", ".", "view", "(", "rcnn_batch_size", ",", "code_size", ")", ",", "rois_anchor", "\n", ")", "\n", "\n", "rcnn_loss_reg", "=", "self", ".", "reg_loss_func", "(", "\n", "rcnn_reg", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "reg_targets", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", ")", "# [B, M, 7]", "\n", "rcnn_loss_reg", "=", "(", "rcnn_loss_reg", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", "*", "fg_mask", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "/", "max", "(", "fg_sum", ",", "1", ")", "\n", "rcnn_loss_reg", "=", "rcnn_loss_reg", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_reg_weight'", "]", "\n", "tb_dict", "[", "'rcnn_loss_reg'", "]", "=", "rcnn_loss_reg", ".", "item", "(", ")", "\n", "\n", "if", "loss_cfgs", ".", "CORNER_LOSS_REGULARIZATION", "and", "fg_sum", ">", "0", ":", "\n", "# TODO: NEED to BE CHECK", "\n", "                ", "fg_rcnn_reg", "=", "rcnn_reg", ".", "view", "(", "rcnn_batch_size", ",", "-", "1", ")", "[", "fg_mask", "]", "\n", "fg_roi_boxes3d", "=", "roi_boxes3d", ".", "view", "(", "-", "1", ",", "code_size", ")", "[", "fg_mask", "]", "\n", "\n", "fg_roi_boxes3d", "=", "fg_roi_boxes3d", ".", "view", "(", "1", ",", "-", "1", ",", "code_size", ")", "\n", "batch_anchors", "=", "fg_roi_boxes3d", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "roi_ry", "=", "fg_roi_boxes3d", "[", ":", ",", ":", ",", "6", "]", ".", "view", "(", "-", "1", ")", "\n", "roi_xyz", "=", "fg_roi_boxes3d", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "batch_anchors", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "0", "\n", "rcnn_boxes3d", "=", "self", ".", "box_coder", ".", "decode_torch", "(", "\n", "fg_rcnn_reg", ".", "view", "(", "batch_anchors", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "code_size", ")", ",", "batch_anchors", "\n", ")", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "\n", "rcnn_boxes3d", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "rcnn_boxes3d", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "roi_ry", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "rcnn_boxes3d", "[", ":", ",", "0", ":", "3", "]", "+=", "roi_xyz", "\n", "\n", "loss_corner", "=", "loss_utils", ".", "get_corner_loss_lidar", "(", "\n", "rcnn_boxes3d", "[", ":", ",", "0", ":", "7", "]", ",", "\n", "gt_of_rois_src", "[", "fg_mask", "]", "[", ":", ",", "0", ":", "7", "]", "\n", ")", "\n", "loss_corner", "=", "loss_corner", ".", "mean", "(", ")", "\n", "loss_corner", "=", "loss_corner", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_corner_weight'", "]", "\n", "\n", "rcnn_loss_reg", "+=", "loss_corner", "\n", "tb_dict", "[", "'rcnn_loss_corner'", "]", "=", "loss_corner", ".", "item", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "rcnn_loss_reg", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss": [[198, 217], ["forward_ret_dict[].view", "rcnn_cls.view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "rcnn_loss_cls.item", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "forward_ret_dict[].view.float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "cls_valid_mask.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "cls_valid_mask.sum"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "get_box_cls_layer_loss", "(", "self", ",", "forward_ret_dict", ")", ":", "\n", "        ", "loss_cfgs", "=", "self", ".", "model_cfg", ".", "LOSS_CONFIG", "\n", "rcnn_cls", "=", "forward_ret_dict", "[", "'rcnn_cls'", "]", "\n", "rcnn_cls_labels", "=", "forward_ret_dict", "[", "'rcnn_cls_labels'", "]", ".", "view", "(", "-", "1", ")", "\n", "if", "loss_cfgs", ".", "CLS_LOSS", "==", "'BinaryCrossEntropy'", ":", "\n", "            ", "rcnn_cls_flat", "=", "rcnn_cls", ".", "view", "(", "-", "1", ")", "\n", "batch_loss_cls", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "rcnn_cls_flat", ")", ",", "rcnn_cls_labels", ".", "float", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "cls_valid_mask", "=", "(", "rcnn_cls_labels", ">=", "0", ")", ".", "float", "(", ")", "\n", "rcnn_loss_cls", "=", "(", "batch_loss_cls", "*", "cls_valid_mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "", "elif", "loss_cfgs", ".", "CLS_LOSS", "==", "'CrossEntropy'", ":", "\n", "            ", "batch_loss_cls", "=", "F", ".", "cross_entropy", "(", "rcnn_cls", ",", "rcnn_cls_labels", ",", "reduction", "=", "'none'", ",", "ignore_index", "=", "-", "1", ")", "\n", "cls_valid_mask", "=", "(", "rcnn_cls_labels", ">=", "0", ")", ".", "float", "(", ")", "\n", "rcnn_loss_cls", "=", "(", "batch_loss_cls", "*", "cls_valid_mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "cls_valid_mask", ".", "sum", "(", ")", ",", "min", "=", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "rcnn_loss_cls", "=", "rcnn_loss_cls", "*", "loss_cfgs", ".", "LOSS_WEIGHTS", "[", "'rcnn_cls_weight'", "]", "\n", "tb_dict", "=", "{", "'rcnn_loss_cls'", ":", "rcnn_loss_cls", ".", "item", "(", ")", "}", "\n", "return", "rcnn_loss_cls", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.get_loss": [[218, 230], ["roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss", "tb_dict.update", "roi_head_template.RoIHeadTemplate.get_box_reg_layer_loss", "tb_dict.update", "rcnn_loss.item"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.get_box_cls_layer_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_box_reg_layer_loss"], ["", "def", "get_loss", "(", "self", ",", "tb_dict", "=", "None", ")", ":", "\n", "        ", "tb_dict", "=", "{", "}", "if", "tb_dict", "is", "None", "else", "tb_dict", "\n", "rcnn_loss", "=", "0", "\n", "rcnn_loss_cls", ",", "cls_tb_dict", "=", "self", ".", "get_box_cls_layer_loss", "(", "self", ".", "forward_ret_dict", ")", "\n", "rcnn_loss", "+=", "rcnn_loss_cls", "\n", "tb_dict", ".", "update", "(", "cls_tb_dict", ")", "\n", "\n", "rcnn_loss_reg", ",", "reg_tb_dict", "=", "self", ".", "get_box_reg_layer_loss", "(", "self", ".", "forward_ret_dict", ")", "\n", "rcnn_loss", "+=", "rcnn_loss_reg", "\n", "tb_dict", ".", "update", "(", "reg_tb_dict", ")", "\n", "tb_dict", "[", "'rcnn_loss'", "]", "=", "rcnn_loss", ".", "item", "(", ")", "\n", "return", "rcnn_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.generate_predicted_boxes": [[231, 260], ["cls_preds.view", "box_preds.view", "rois[].view", "rois[].view", "rois.clone().detach", "roi_head_template.RoIHeadTemplate.box_coder.decode_torch().view", "utils.common_utils.rotate_points_along_z().squeeze", "batch_box_preds.view.view.view", "rois.clone", "roi_head_template.RoIHeadTemplate.box_coder.decode_torch", "utils.common_utils.rotate_points_along_z", "batch_box_preds.view.view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.decode_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "generate_predicted_boxes", "(", "self", ",", "batch_size", ",", "rois", ",", "cls_preds", ",", "box_preds", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_size:\n            rois: (B, N, 7)\n            cls_preds: (BN, num_class)\n            box_preds: (BN, code_size)\n\n        Returns:\n\n        \"\"\"", "\n", "code_size", "=", "self", ".", "box_coder", ".", "code_size", "\n", "# batch_cls_preds: (B, N, num_class or 1)", "\n", "batch_cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "cls_preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "code_size", ")", "\n", "\n", "roi_ry", "=", "rois", "[", ":", ",", ":", ",", "6", "]", ".", "view", "(", "-", "1", ")", "\n", "roi_xyz", "=", "rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "local_rois", "=", "rois", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "local_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "0", "\n", "\n", "batch_box_preds", "=", "self", ".", "box_coder", ".", "decode_torch", "(", "batch_box_preds", ",", "local_rois", ")", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "\n", "batch_box_preds", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "batch_box_preds", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "roi_ry", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "batch_box_preds", "[", ":", ",", "0", ":", "3", "]", "+=", "roi_xyz", "\n", "batch_box_preds", "=", "batch_box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "code_size", ")", "\n", "return", "batch_cls_preds", ",", "batch_box_preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.__init__": [[13, 151], ["roi_head_template.RoIHeadTemplate.__init__", "functools.partial", "numpy.prod", "getattr", "getattr", "torch.ModuleList", "torch.ModuleList", "getattr", "getattr", "getattr", "conv_head.ConvHead.make_fc_layers", "conv_head.ConvHead.make_fc_layers", "conv_head.ConvHead.init_weights", "conv_head.ConvHead.model_cfg.TARGET_CONFIG.get", "isinstance", "range", "ops.pointnet2.pointnet2_stack.pointnet2_modules.StackSAModuleMSG", "getattr", "range", "ops.pointnet2.pointnet2_stack.pointnet2_modules.StackSAModuleMSG", "getattr", "numpy.array", "len", "numpy.around().astype", "print", "print", "conv_head.ConvHead.conv_layers.append", "conv_head.ConvHead.conv_layer_names.append", "conv_head.ConvHead.create_shared_3dconv", "conv_head.ConvHead.create_shared_fc", "len", "range", "torch.Sequential", "torch.Sequential", "sum", "len", "range", "torch.Sequential", "torch.Sequential", "sum", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "conv_head.ConvHead.pyramid_cfg[].get", "spconv.SparseSequential", "range", "torch.Sequential", "torch.Sequential", "getattr", "conv_head.ConvHead.model_cfg.SHARED_3D_CONV.KERNEL.__len__", "getattr", "conv_head.ConvHead.model_cfg.SHARED_FC.__len__", "conv_head.ConvHead.raw_points_agg.extend", "conv_head.ConvHead.occ_points_agg.extend", "numpy.around", "len", "bev_conv.extend", "len", "len", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "range", "range", "range", "backbones_3d.spconv_backbone.post_act_block", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "range", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.make_fc_layers", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.init_weights", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.create_shared_3dconv", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.create_shared_fc", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.backbones_3d.spconv_backbone.post_act_block"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "model_cfg", ",", "num_class", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_class", "=", "num_class", ",", "model_cfg", "=", "model_cfg", ",", "**", "kwargs", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "norm_fn", "=", "partial", "(", "nn", ".", "BatchNorm1d", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "\n", "\n", "# mlps = self.model_cfg.ROI_GRID_POOL.MLPS", "\n", "# for k in range(len(mlps)):", "\n", "#     mlps[k] = [input_channels] + mlps[k]", "\n", "#", "\n", "# self.roi_grid_pool_layer = pointnet2_stack_modules.StackSAModuleMSG(", "\n", "#     radii=self.model_cfg.ROI_GRID_POOL.POOL_RADIUS,", "\n", "#     nsamples=self.model_cfg.ROI_GRID_POOL.NSAMPLE,", "\n", "#     mlps=mlps,", "\n", "#     use_xyz=True,", "\n", "#     pool_method=self.model_cfg.ROI_GRID_POOL.POOL_METHOD,", "\n", "# )", "\n", "\n", "self", ".", "fix_dims", "=", "self", ".", "model_cfg", ".", "TARGET_CONFIG", ".", "get", "(", "'BOX_CODER_CONFIG'", ",", "None", ")", "==", "\"AbsResidualCoder\"", "\n", "self", ".", "grid_size", "=", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ".", "GRID_SIZE", "\n", "if", "not", "isinstance", "(", "self", ".", "grid_size", ",", "list", ")", ":", "\n", "            ", "self", ".", "grid_size", "=", "[", "self", ".", "grid_size", ",", "self", ".", "grid_size", ",", "self", ".", "grid_size", "]", "\n", "", "self", ".", "grid_num", "=", "np", ".", "prod", "(", "self", ".", "grid_size", ")", "\n", "self", ".", "pyramid_cfg", "=", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ".", "CONV_LAYER", "\n", "self", ".", "vis", "=", "getattr", "(", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ",", "\"VIS\"", ",", "False", ")", "\n", "self", ".", "dim_times", "=", "getattr", "(", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ",", "\"DIM_TIMES\"", ",", "1.0", ")", "\n", "self", ".", "downsample_times_map", "=", "{", "}", "\n", "self", ".", "size_map", "=", "{", "}", "\n", "self", ".", "src_features", "=", "{", "}", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "conv_layer_names", "=", "[", "]", "\n", "self", ".", "raw_points_agg", ",", "self", ".", "occ_points_agg", "=", "None", ",", "None", "\n", "self", ".", "point_rot", "=", "getattr", "(", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ",", "\"POINT_ROT\"", ",", "False", ")", "\n", "self", ".", "point_scale", "=", "getattr", "(", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ",", "\"POINT_SCALE\"", ",", "False", ")", "\n", "self", ".", "intrp_norm", "=", "getattr", "(", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ",", "\"INTRP_NORM\"", ",", "False", ")", "\n", "c_out", "=", "0", "\n", "\n", "if", "'raw_points'", "in", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ".", "FEATURES_SOURCE", ":", "\n", "            ", "mlps", "=", "self", ".", "pyramid_cfg", "[", "'raw_points'", "]", ".", "MLPS", "\n", "for", "k", "in", "range", "(", "len", "(", "mlps", ")", ")", ":", "\n", "                ", "mlps", "[", "k", "]", "=", "[", "kwargs", "[", "'num_rawpoint_features'", "]", "-", "3", "]", "+", "mlps", "[", "k", "]", "\n", "", "self", ".", "SA_rawpoints", "=", "pointnet2_stack_modules", ".", "StackSAModuleMSG", "(", "\n", "radii", "=", "self", ".", "pyramid_cfg", "[", "'raw_points'", "]", ".", "POOL_RADIUS", ",", "\n", "nsamples", "=", "self", ".", "pyramid_cfg", "[", "'raw_points'", "]", ".", "NSAMPLE", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "True", ",", "\n", "pool_method", "=", "'max_pool'", "\n", ")", "\n", "agg_mlps", "=", "getattr", "(", "self", ".", "pyramid_cfg", "[", "'raw_points'", "]", ",", "\"AGG_MLPS\"", ",", "None", ")", "\n", "if", "agg_mlps", "is", "not", "None", ":", "\n", "                ", "self", ".", "raw_points_agg", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "agg_mlps", ")", "-", "1", ")", ":", "\n", "                    ", "self", ".", "raw_points_agg", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "agg_mlps", "[", "k", "]", ",", "agg_mlps", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "agg_mlps", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "raw_points_agg", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "raw_points_agg", ")", "\n", "c_out", "+=", "agg_mlps", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "c_out", "+=", "sum", "(", "[", "x", "[", "-", "1", "]", "for", "x", "in", "mlps", "]", ")", "\n", "\n", "", "", "if", "'occ_points'", "in", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ".", "FEATURES_SOURCE", ":", "\n", "            ", "mlps", "=", "self", ".", "pyramid_cfg", "[", "'occ_points'", "]", ".", "MLPS", "\n", "for", "k", "in", "range", "(", "len", "(", "mlps", ")", ")", ":", "\n", "                ", "mlps", "[", "k", "]", "=", "[", "1", "]", "+", "mlps", "[", "k", "]", "\n", "\n", "", "self", ".", "SA_occpoints", "=", "pointnet2_stack_modules", ".", "StackSAModuleMSG", "(", "\n", "radii", "=", "self", ".", "pyramid_cfg", "[", "'occ_points'", "]", ".", "POOL_RADIUS", ",", "\n", "nsamples", "=", "self", ".", "pyramid_cfg", "[", "'occ_points'", "]", ".", "NSAMPLE", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "True", ",", "\n", "pool_method", "=", "'max_pool'", "\n", ")", "\n", "agg_mlps", "=", "getattr", "(", "self", ".", "pyramid_cfg", "[", "'occ_points'", "]", ",", "\"AGG_MLPS\"", ",", "None", ")", "\n", "if", "agg_mlps", "is", "not", "None", ":", "\n", "                ", "self", ".", "occ_points_agg", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "agg_mlps", ")", "-", "1", ")", ":", "\n", "                    ", "self", ".", "occ_points_agg", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "agg_mlps", "[", "k", "]", ",", "agg_mlps", "[", "k", "+", "1", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "agg_mlps", "[", "k", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "occ_points_agg", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "occ_points_agg", ")", "\n", "c_out", "+=", "agg_mlps", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "c_out", "+=", "sum", "(", "[", "x", "[", "-", "1", "]", "for", "x", "in", "mlps", "]", ")", "\n", "\n", "", "", "for", "src_name", "in", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ".", "FEATURES_SOURCE", ":", "\n", "            ", "if", "src_name", "in", "[", "'bev_conv'", ",", "'raw_points'", ",", "'occ_points'", "]", ":", "\n", "                ", "continue", "\n", "", "self", ".", "downsample_times_map", "[", "src_name", "]", "=", "self", ".", "pyramid_cfg", "[", "src_name", "]", ".", "DOWNSAMPLE_FACTOR", "\n", "part_scene_size", "=", "np", ".", "array", "(", "self", ".", "pyramid_cfg", "[", "src_name", "]", ".", "PART_SCENE_SIZE", ")", "# zyx", "\n", "ker_size", "=", "self", ".", "pyramid_cfg", "[", "src_name", "]", ".", "KER_SIZE", "# zyx", "\n", "strides", "=", "self", ".", "pyramid_cfg", "[", "src_name", "]", ".", "STRIDE", "# zyx", "\n", "channels", "=", "self", ".", "pyramid_cfg", "[", "src_name", "]", ".", "CHANNEL", "# zyx", "\n", "kernels", "=", "self", ".", "pyramid_cfg", "[", "src_name", "]", ".", "KERNEL", "# zyx", "\n", "paddings", "=", "self", ".", "pyramid_cfg", "[", "src_name", "]", ".", "PADDING", "# zyx", "\n", "dms", "=", "len", "(", "part_scene_size", ")", "\n", "local_grid_size", "=", "np", ".", "around", "(", "(", "(", "part_scene_size", "[", "dms", "//", "2", ":", "dms", "]", "-", "part_scene_size", "[", ":", "dms", "//", "2", "]", ")", "/", "ker_size", ")", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "size_map", "[", "src_name", "]", "=", "{", "\n", "\"local_grid_size\"", ":", "local_grid_size", ",", "\n", "\"scene_xyz_orgin_shifted\"", ":", "torch", ".", "as_tensor", "(", "[", "part_scene_size", "[", "i", "]", "+", "0.5", "*", "ker_size", "[", "i", "]", "for", "i", "in", "range", "(", "dms", "//", "2", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "\"ker_xyz_size\"", ":", "torch", ".", "as_tensor", "(", "[", "ker_size", "[", "i", "]", "for", "i", "in", "range", "(", "dms", "//", "2", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "\"dims\"", ":", "torch", ".", "as_tensor", "(", "[", "(", "part_scene_size", "[", "i", "+", "dms", "//", "2", "]", "-", "part_scene_size", "[", "i", "]", ")", "for", "i", "in", "range", "(", "dms", "//", "2", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ",", "device", "=", "'cuda'", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "\"scene_times\"", ":", "self", ".", "pyramid_cfg", "[", "src_name", "]", ".", "get", "(", "\"SCENE_TIMES\"", ",", "1", ")", "\n", "}", "\n", "print", "(", "\"!!!local_grid_size\"", ",", "self", ".", "size_map", "[", "src_name", "]", "[", "\"local_grid_size\"", "]", ")", "\n", "print", "(", "\"!!!dims\"", ",", "self", ".", "size_map", "[", "src_name", "]", "[", "\"dims\"", "]", ")", "\n", "if", "dms", "==", "6", ":", "\n", "                ", "cur_layer", "=", "spconv", ".", "SparseSequential", "(", "*", "[", "block", "(", "channels", "[", "i", "]", ",", "channels", "[", "i", "+", "1", "]", ",", "kernels", "[", "i", "]", ",", "norm_fn", "=", "norm_fn", ",", "stride", "=", "strides", "[", "i", "]", ",", "padding", "=", "paddings", "[", "i", "]", ",", "indice_key", "=", "'{}_spconv{}'", ".", "format", "(", "src_name", ",", "i", ")", ",", "conv_type", "=", "'spconv'", ")", "for", "i", "in", "range", "(", "len", "(", "strides", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "bev_conv", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "strides", ")", ")", ":", "\n", "                    ", "bev_conv", ".", "extend", "(", "[", "nn", ".", "Conv2d", "(", "channels", "[", "i", "]", ",", "channels", "[", "i", "+", "1", "]", ",", "kernel_size", "=", "kernels", "[", "i", "]", ",", "padding", "=", "paddings", "[", "i", "]", ",", "stride", "=", "strides", "[", "i", "]", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "channels", "[", "i", "+", "1", "]", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "nn", ".", "ReLU", "(", ")", "]", ")", "\n", "", "cur_layer", "=", "nn", ".", "Sequential", "(", "*", "bev_conv", ")", "\n", "", "self", ".", "conv_layers", ".", "append", "(", "cur_layer", ")", "\n", "self", ".", "conv_layer_names", ".", "append", "(", "src_name", ")", "\n", "c_out", "+=", "channels", "[", "-", "1", "]", "\n", "\n", "", "pre_channel", "=", "self", ".", "grid_num", "*", "c_out", "\n", "self", ".", "det_voxel_size", "=", "kwargs", "[", "\"det_voxel_size\"", "]", "\n", "self", ".", "point_cloud_range", "=", "kwargs", "[", "\"point_cloud_range\"", "]", "\n", "\n", "if", "getattr", "(", "self", ".", "model_cfg", ",", "\"SHARED_3D_CONV\"", ",", "None", ")", "is", "not", "None", "and", "self", ".", "model_cfg", ".", "SHARED_3D_CONV", ".", "KERNEL", ".", "__len__", "(", ")", ">", "0", ":", "\n", "            ", "pre_channel", "=", "self", ".", "create_shared_3dconv", "(", "c_out", ")", "\n", "\n", "", "if", "getattr", "(", "self", ".", "model_cfg", ",", "\"SHARED_FC\"", ",", "None", ")", "is", "not", "None", "and", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", ">", "0", ":", "\n", "            ", "pre_channel", "=", "self", ".", "create_shared_fc", "(", "pre_channel", ")", "\n", "\n", "", "self", ".", "cls_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "output_channels", "=", "self", ".", "num_class", ",", "fc_list", "=", "self", ".", "model_cfg", ".", "CLS_FC", "\n", ")", "\n", "self", ".", "reg_layers", "=", "self", ".", "make_fc_layers", "(", "\n", "input_channels", "=", "pre_channel", ",", "\n", "output_channels", "=", "self", ".", "box_coder", ".", "code_size", "*", "self", ".", "num_class", ",", "\n", "fc_list", "=", "self", ".", "model_cfg", ".", "REG_FC", "\n", ")", "\n", "self", ".", "init_weights", "(", "weight_init", "=", "'xavier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.create_shared_fc": [[153, 168], ["range", "torch.Sequential", "torch.Sequential", "conv_head.ConvHead.model_cfg.SHARED_FC.__len__", "shared_fc_list.extend", "shared_fc_list.append", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "conv_head.ConvHead.model_cfg.SHARED_FC.__len__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "create_shared_fc", "(", "self", ",", "pre_channel", ")", ":", "\n", "        ", "shared_fc_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "shared_fc_list", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "pre_channel", ",", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "self", ".", "model_cfg", ".", "SHARED_FC", "[", "k", "]", "\n", "\n", "if", "k", "!=", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "shared_fc_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "\n", "", "", "self", ".", "shared_fc_layer", "=", "nn", ".", "Sequential", "(", "*", "shared_fc_list", ")", "\n", "return", "pre_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.create_shared_3dconv": [[169, 188], ["range", "torch.Sequential", "torch.Sequential", "kernels.__len__", "shared_3dconv_list.extend", "shared_3dconv_list.append", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "getattr", "conv_head.ConvHead.model_cfg.SHARED_FC.__len__", "kernels.__len__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "create_shared_3dconv", "(", "self", ",", "pre_channel", ")", ":", "\n", "        ", "shared_3dconv_list", "=", "[", "]", "\n", "kernels", "=", "self", ".", "model_cfg", ".", "SHARED_3D_CONV", ".", "KERNEL", "\n", "paddings", "=", "self", ".", "model_cfg", ".", "SHARED_3D_CONV", ".", "PADDING", "\n", "strides", "=", "self", ".", "model_cfg", ".", "SHARED_3D_CONV", ".", "STRIDE", "\n", "channels", "=", "self", ".", "model_cfg", ".", "SHARED_3D_CONV", ".", "CHANNEL", "\n", "for", "k", "in", "range", "(", "0", ",", "kernels", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "shared_3dconv_list", ".", "extend", "(", "[", "\n", "nn", ".", "Conv3d", "(", "pre_channel", ",", "channels", "[", "k", "]", ",", "kernel_size", "=", "kernels", "[", "k", "]", ",", "bias", "=", "False", ",", "stride", "=", "strides", "[", "k", "]", ",", "padding", "=", "paddings", "[", "k", "]", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "channels", "[", "k", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "pre_channel", "=", "channels", "[", "k", "]", "\n", "\n", "if", "(", "getattr", "(", "self", ".", "model_cfg", ",", "\"SHARED_FC\"", ",", "None", ")", "is", "None", "or", "self", ".", "model_cfg", ".", "SHARED_FC", ".", "__len__", "(", ")", "==", "0", ")", "and", "k", "!=", "kernels", ".", "__len__", "(", ")", "-", "1", "and", "self", ".", "model_cfg", ".", "DP_RATIO", ">", "0", ":", "\n", "                ", "shared_3dconv_list", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "model_cfg", ".", "DP_RATIO", ")", ")", "\n", "\n", "", "", "self", ".", "shared_3dconv_layer", "=", "nn", ".", "Sequential", "(", "*", "shared_3dconv_list", ")", "\n", "return", "pre_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.init_weights": [[189, 208], ["conv_head.ConvHead.modules", "torch.init.normal_", "torch.init.normal_", "isinstance", "isinstance", "init_func", "init_func", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "weight_init", "=", "'xavier'", ")", ":", "\n", "        ", "if", "weight_init", "==", "'kaiming'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "kaiming_normal_", "\n", "", "elif", "weight_init", "==", "'xavier'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "xavier_normal_", "\n", "", "elif", "weight_init", "==", "'normal'", ":", "\n", "            ", "init_func", "=", "nn", ".", "init", ".", "normal_", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "if", "weight_init", "==", "'normal'", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "", "else", ":", "\n", "                    ", "init_func", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "reg_layers", "[", "-", "1", "]", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.create_local_conv_grid": [[209, 223], ["list", "rois.view().unsqueeze().repeat().view", "conv_head.ConvHead.get_global_grid_points_of_roi", "dims.view().repeat", "global_conv_grid_points.view", "rois.view().unsqueeze().repeat", "dims.view", "rois.view().unsqueeze", "rois.view"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.get_global_grid_points_of_roi"], ["", "def", "create_local_conv_grid", "(", "self", ",", "global_roi_grid_points", ",", "rois", ",", "local_grid_size", ",", "dims", ",", "scene_times", ")", ":", "\n", "# rois (B, num_rois, 7 + C)", "\n", "# global_roi_grid_points (BxNXx6x6, 3)", "\n", "        ", "B", ",", "N_box", ",", "F", "=", "list", "(", "rois", ".", "shape", ")", "\n", "local_rois", "=", "rois", ".", "view", "(", "-", "1", ",", "rois", ".", "shape", "[", "-", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "grid_num", ",", "1", ")", ".", "view", "(", "-", "1", ",", "F", ")", "\n", "local_rois", "[", "...", ",", ":", "3", "]", "=", "global_roi_grid_points", "# (BxNX6x6x6, 7+C)", "\n", "if", "self", ".", "fix_dims", ":", "\n", "            ", "local_rois", "[", "...", ",", "3", ":", "6", "]", "=", "dims", ".", "view", "(", "1", ",", "3", ")", ".", "repeat", "(", "local_rois", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "local_rois", "[", "...", ",", "3", ":", "6", "]", "*=", "scene_times", "\n", "", "global_conv_grid_points", ",", "dense_idx", "=", "self", ".", "get_global_grid_points_of_roi", "(", "\n", "local_rois", ",", "grid_size", "=", "local_grid_size", ",", "dim_times", "=", "1.0", "\n", ")", "# BXNX6X6X6, 8x32x32, 3", "\n", "return", "global_conv_grid_points", ".", "view", "(", "B", ",", "-", "1", ",", "3", ")", ",", "dense_idx", "# B, NX6X6X6 X 8X32X32, 3", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.get_local_conv_regions": [[225, 233], ["list", "list", "yaw.view().unsqueeze().repeat().view", "dims.view().repeat().view.view().repeat().view.view().repeat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "yaw.view().unsqueeze().repeat", "dims.view().repeat().view.view().repeat().view.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "yaw.view().unsqueeze", "dims.view().repeat().view.view().repeat().view.view", "yaw.view"], "methods", ["None"], ["", "def", "get_local_conv_regions", "(", "self", ",", "points", ",", "yaw", ",", "dims", ")", ":", "\n", "# points (BxN, 6x6x6, 3)", "\n", "# yaw (B, N, 1)", "\n", "        ", "B", ",", "N", ",", "_", "=", "list", "(", "yaw", ".", "shape", ")", "\n", "BNG", ",", "_", "=", "list", "(", "points", ".", "shape", ")", "\n", "local_yaw", "=", "yaw", ".", "view", "(", "-", "1", ",", "yaw", ".", "shape", "[", "-", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "grid_num", ",", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "# (BXN, 6X6X6, 1)", "\n", "dims", "=", "dims", ".", "view", "(", "1", ",", "3", ")", ".", "repeat", "(", "BNG", ",", "1", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "return", "torch", ".", "cat", "(", "[", "points", ",", "dims", ",", "local_yaw", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "B", ",", "-", "1", ",", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.splat_features_2_grids": [[235, 246], ["conv_head.ConvHead.interpolate_from_3d_features"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.interpolate_from_3d_features"], ["", "def", "splat_features_2_grids", "(", "self", ",", "batch_size", ",", "conv_grid_points", ",", "dense_idx", ",", "conv_regions", ",", "features", ",", "src_name", ",", "size_map", ",", "N_boxes", ")", ":", "\n", "        ", "indices", "=", "features", ".", "indices", "\n", "# center_xyz = common_utils.get_voxel_centers(", "\n", "#     indices[:, 1:4],", "\n", "#     downsample_times=self.downsample_times_map[src_name],", "\n", "#     voxel_size=self.det_voxel_size,", "\n", "#     point_cloud_range=self.point_cloud_range", "\n", "# ) # M, 3", "\n", "# unique_idxs, features = self.interpolate_from_3d_sparse_features(conv_regions, features, center_xyz, indices, batch_size, size_map, N_boxes)", "\n", "unique_idxs", ",", "features", "=", "self", ".", "interpolate_from_3d_features", "(", "conv_grid_points", ",", "dense_idx", ",", "features", ",", "self", ".", "downsample_times_map", "[", "src_name", "]", ")", "\n", "return", "unique_idxs", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.roi_conv_pool": [[247, 380], ["list", "conv_head.ConvHead.get_global_grid_points_of_roi", "global_roi_grid_points.view.view.view", "new_xyz.new_zeros().int().fill_", "zip", "torch.squeeze.view().permute().contiguous", "torch.squeeze.view().permute().contiguous", "utils.point_box_utils.torch_get_yaw_rotation", "xyscales.view().repeat().view.view().repeat().view.view().repeat().view", "zscales.view().repeat().view.view().repeat().view.view().repeat().view", "xyz.new_zeros().int", "range", "conv_head.ConvHead.SA_rawpoints", "out_features_lst.append", "xyz.new_zeros().int", "range", "conv_head.ConvHead.SA_occpoints", "out_features_lst.append", "conv_head.ConvHead.create_local_conv_grid", "out_features_lst.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "conv_head.ConvHead.shared_3dconv_layer", "torch.squeeze.view", "torch.squeeze.view", "global_roi_grid_points.view.view.view", "new_xyz.new_zeros().int", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "raw_points[].contiguous", "range", "conv_head.ConvHead.raw_points_agg", "conv_head.ConvHead.view", "occ_points[].contiguous", "range", "conv_head.ConvHead.occ_points_agg", "conv_head.ConvHead.view", "len", "conv_head.ConvHead.splat_features_2_grids", "spconv.SparseConvTensor", "conv_layer().dense", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "conv_head.ConvHead.interpolate_from_bev_features", "torch.squeeze.view().permute", "torch.squeeze.view().permute", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "torch.squeeze.view().permute", "torch.squeeze.view().permute", "rois[].view", "xyscales.view().repeat().view.view().repeat().view.view().repeat", "zscales.view().repeat().view.view().repeat().view.view().repeat", "xyz.new_zeros", "xyz.contiguous", "len", "conv_head.ConvHead.view", "xyz.new_zeros", "xyz.contiguous", "len", "conv_head.ConvHead.view", "numpy.concatenate", "conv_head.ConvHead.vis_voxel", "conv_grid_points.view", "conv_layer", "new_xyz.new_zeros", "len", "voxel_coords.int", "conv_layer", "torch.squeeze.view", "torch.squeeze.view", "torch.squeeze.view", "torch.squeeze.view", "xyscales.view().repeat().view.view().repeat().view.view", "zscales.view().repeat().view.view().repeat().view.view", "numpy.ones_like", "[].reshape", "[].reshape", "[].reshape", "[].reshape", "global_roi_grid_points.view.view.view", "global_roi_grid_points.view.view.view", "global_roi_grid_points.view.view.view", "global_roi_grid_points.view.view.view"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.get_global_grid_points_of_roi", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.create_local_conv_grid", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.splat_features_2_grids", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.interpolate_from_bev_features", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.vis_voxel"], ["", "def", "roi_conv_pool", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                point_coords: (num_points, 4)  [bs_idx, x, y, z]\n                point_features: (num_points, C)\n                point_cls_scores: (N1 + N2 + N3 + ..., 1)\n                point_part_offset: (N1 + N2 + N3 + ..., 3)\n        Returns:\n\n        \"\"\"", "\n", "vis_dict", "=", "{", "}", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", "# (B, num_rois, 7 + C)", "\n", "\n", "B", ",", "N_box", ",", "_", "=", "list", "(", "rois", ".", "shape", ")", "\n", "global_roi_grid_points", ",", "_", "=", "self", ".", "get_global_grid_points_of_roi", "(", "\n", "rois", ",", "grid_size", "=", "self", ".", "grid_size", ",", "e2e", "=", "False", ",", "dim_times", "=", "self", ".", "dim_times", "\n", ")", "# (BxN, 6x6x6, 3)", "\n", "if", "self", ".", "vis", ":", "\n", "            ", "vis_dict", "[", "\"rois\"", "]", "=", "batch_dict", "[", "'rois'", "]", "\n", "vis_dict", "[", "\"rois_global_grid_points\"", "]", "=", "global_roi_grid_points", ".", "view", "(", "B", ",", "-", "1", ",", "3", ")", "[", "0", "]", "\n", "# print(\"global_roi_grid_points\", global_roi_grid_points.shape)", "\n", "", "global_roi_grid_points", "=", "global_roi_grid_points", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "new_xyz", "=", "global_roi_grid_points", "\n", "new_xyz_batch_cnt", "=", "new_xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", ".", "fill_", "(", "N_box", "*", "self", ".", "grid_num", ")", "\n", "out_features_lst", "=", "[", "]", "\n", "rotateMatrix", ",", "xyscales", ",", "zscales", "=", "None", ",", "None", ",", "None", "\n", "if", "self", ".", "point_rot", ":", "\n", "            ", "rotateMatrix", "=", "point_box_utils", ".", "torch_get_yaw_rotation", "(", "-", "rois", "[", "...", ",", "6", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "", "if", "self", ".", "point_scale", ":", "\n", "            ", "xyscales", ",", "zscales", "=", "torch", ".", "sqrt", "(", "rois", "[", "...", ",", "3", "]", "**", "2", "+", "rois", "[", "...", ",", "4", "]", "**", "2", ")", ",", "rois", "[", "...", ",", "5", "]", "\n", "xyscales", "=", "xyscales", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "grid_num", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "zscales", "=", "zscales", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "grid_num", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "", "if", "'raw_points'", "in", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ".", "FEATURES_SOURCE", ":", "\n", "            ", "raw_points", "=", "batch_dict", "[", "'points'", "]", "\n", "# print(\"raw_points\", raw_points.shape)", "\n", "xyz", "=", "raw_points", "[", ":", ",", "1", ":", "4", "]", "\n", "xyz_batch_cnt", "=", "xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "xyz_batch_cnt", "[", "bs_idx", "]", "=", "(", "raw_points", "[", ":", ",", "0", "]", "==", "bs_idx", ")", ".", "sum", "(", ")", "\n", "", "point_features", "=", "raw_points", "[", ":", ",", "4", ":", "]", ".", "contiguous", "(", ")", "if", "raw_points", ".", "shape", "[", "1", "]", ">", "4", "else", "None", "\n", "\n", "result_lst", "=", "self", ".", "SA_rawpoints", "(", "\n", "xyz", "=", "xyz", ".", "contiguous", "(", ")", ",", "\n", "xyz_batch_cnt", "=", "xyz_batch_cnt", ",", "\n", "new_xyz", "=", "new_xyz", ",", "\n", "new_xyz_batch_cnt", "=", "new_xyz_batch_cnt", ",", "\n", "features", "=", "point_features", ",", "\n", "rotateMatrix", "=", "rotateMatrix", ",", "\n", "xyscales", "=", "xyscales", ",", "\n", "zscales", "=", "zscales", ",", "\n", "vis", "=", "self", ".", "vis", "\n", ")", "\n", "if", "self", ".", "vis", ":", "\n", "                ", "pooled_points", ",", "pooled_features", ",", "point_lst_lst", "=", "result_lst", "\n", "points_lst", ",", "prerot_points_lst", "=", "point_lst_lst", "\n", "for", "i", "in", "range", "(", "len", "(", "points_lst", ")", ")", ":", "\n", "                    ", "vis_dict", "[", "\"rois_raw_points_{}\"", ".", "format", "(", "i", ")", "]", "=", "(", "points_lst", "[", "i", "]", "+", "global_roi_grid_points", ".", "view", "(", "B", ",", "-", "1", ",", "3", ")", "[", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "# [6912, 3]", "\n", "vis_dict", "[", "\"rois_raw_rot_points_{}\"", ".", "format", "(", "i", ")", "]", "=", "(", "prerot_points_lst", "[", "i", "]", "+", "global_roi_grid_points", ".", "view", "(", "B", ",", "-", "1", ",", "3", ")", "[", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "# [6912, 3]", "\n", "", "", "else", ":", "\n", "                ", "pooled_points", ",", "pooled_features", "=", "result_lst", "\n", "", "pooled_features", "=", "self", ".", "raw_points_agg", "(", "pooled_features", ".", "view", "(", "B", "*", "N_box", "*", "self", ".", "grid_num", ",", "-", "1", ",", "1", ",", "1", ")", ")", "if", "self", ".", "raw_points_agg", "is", "not", "None", "else", "pooled_features", "\n", "out_features_lst", ".", "append", "(", "pooled_features", ".", "view", "(", "B", "*", "N_box", "*", "self", ".", "grid_num", ",", "-", "1", ")", ")", "\n", "\n", "", "if", "'occ_points'", "in", "self", ".", "model_cfg", ".", "CONV_GRID_POOL", ".", "FEATURES_SOURCE", ":", "\n", "            ", "occ_points", "=", "batch_dict", "[", "'occ_pnts'", "]", "\n", "# print(\"raw_points\", raw_points.shape)", "\n", "xyz", "=", "occ_points", "[", ":", ",", "0", ":", "3", "]", "\n", "xyz_batch_cnt", "=", "xyz", ".", "new_zeros", "(", "batch_size", ")", ".", "int", "(", ")", "\n", "for", "bs_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "xyz_batch_cnt", "[", "bs_idx", "]", "=", "(", "batch_dict", "[", "'added_occ_b_ind'", "]", "==", "bs_idx", ")", ".", "sum", "(", ")", "\n", "", "point_features", "=", "occ_points", "[", ":", ",", "3", ":", "]", ".", "contiguous", "(", ")", "if", "occ_points", ".", "shape", "[", "1", "]", ">", "3", "else", "None", "\n", "\n", "result_lst", "=", "self", ".", "SA_occpoints", "(", "\n", "xyz", "=", "xyz", ".", "contiguous", "(", ")", ",", "\n", "xyz_batch_cnt", "=", "xyz_batch_cnt", ",", "\n", "new_xyz", "=", "new_xyz", ",", "\n", "new_xyz_batch_cnt", "=", "new_xyz_batch_cnt", ",", "\n", "features", "=", "point_features", ",", "\n", "rotateMatrix", "=", "rotateMatrix", ",", "\n", "xyscales", "=", "xyscales", ",", "\n", "zscales", "=", "zscales", ",", "\n", "vis", "=", "self", ".", "vis", "\n", ")", "\n", "if", "self", ".", "vis", ":", "\n", "                ", "pooled_points", ",", "pooled_features", ",", "point_lst_lst", "=", "result_lst", "\n", "points_lst", ",", "prerot_points_lst", "=", "point_lst_lst", "\n", "for", "i", "in", "range", "(", "len", "(", "points_lst", ")", ")", ":", "\n", "                    ", "vis_dict", "[", "\"rois_occ_points_{}\"", ".", "format", "(", "i", ")", "]", "=", "(", "points_lst", "[", "i", "]", "+", "global_roi_grid_points", ".", "view", "(", "B", ",", "-", "1", ",", "3", ")", "[", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "# [6912, 3]", "\n", "vis_dict", "[", "\"rois_occ_rot_points_{}\"", ".", "format", "(", "i", ")", "]", "=", "(", "prerot_points_lst", "[", "i", "]", "+", "global_roi_grid_points", ".", "view", "(", "B", ",", "-", "1", ",", "3", ")", "[", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "# [6912, 3]", "\n", "", "", "else", ":", "\n", "                ", "pooled_points", ",", "pooled_features", "=", "result_lst", "\n", "", "if", "self", ".", "occ_points_agg", "is", "not", "None", ":", "\n", "                ", "pooled_features", "=", "self", ".", "occ_points_agg", "(", "pooled_features", ".", "view", "(", "B", "*", "N_box", "*", "self", ".", "grid_num", ",", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "", "out_features_lst", ".", "append", "(", "pooled_features", ".", "view", "(", "B", "*", "N_box", "*", "self", ".", "grid_num", ",", "-", "1", ")", ")", "\n", "\n", "", "for", "src_name", ",", "conv_layer", "in", "zip", "(", "self", ".", "conv_layer_names", ",", "self", ".", "conv_layers", ")", ":", "\n", "            ", "size_map", "=", "self", ".", "size_map", "[", "src_name", "]", "\n", "# conv_regions = self.get_local_conv_regions(global_roi_grid_points, rois[..., 6:7], size_map[\"dims\"]) # B, N X 666, 7", "\n", "conv_grid_points", ",", "dense_idx", "=", "self", ".", "create_local_conv_grid", "(", "global_roi_grid_points", ",", "rois", ",", "size_map", "[", "\"local_grid_size\"", "]", "if", "len", "(", "size_map", "[", "\"local_grid_size\"", "]", ")", "==", "3", "else", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "size_map", "[", "\"local_grid_size\"", "]", "[", "0", ":", "1", "]", ")", ",", "size_map", "[", "\"local_grid_size\"", "]", "]", ",", "axis", "=", "0", ")", ",", "self", ".", "size_map", "[", "src_name", "]", "[", "\"dims\"", "]", ",", "self", ".", "size_map", "[", "src_name", "]", "[", "\"scene_times\"", "]", ")", "# B, NX6X6X6 * 8x32x32, 3", "\n", "# print(\"conv_grid_points\", conv_grid_points.shape)", "\n", "\n", "in_features", "=", "batch_dict", "[", "\"spatial_features\"", "]", "if", "src_name", "==", "\"bev\"", "else", "batch_dict", "[", "'multi_scale_3d_features'", "]", "[", "src_name", "]", "\n", "if", "len", "(", "size_map", "[", "\"local_grid_size\"", "]", ")", "==", "3", ":", "\n", "                ", "voxel_coords", ",", "voxel_features", "=", "self", ".", "splat_features_2_grids", "(", "batch_size", ",", "conv_grid_points", ",", "dense_idx", ",", "None", ",", "in_features", ",", "src_name", ",", "size_map", ",", "N_box", ")", "\n", "if", "self", ".", "vis", ":", "\n", "                    ", "vis_dict", "[", "\"rois_conv_grid_points\"", "]", "=", "conv_grid_points", "[", "0", "]", "\n", "vis_dict", "[", "\"rois_sparse_grid\"", "]", "=", "self", ".", "vis_voxel", "(", "B", ",", "voxel_coords", ",", "global_roi_grid_points", ",", "size_map", "[", "\"ker_xyz_size\"", "]", ")", "\n", "\n", "", "input_sp_tensor", "=", "spconv", ".", "SparseConvTensor", "(", "\n", "features", "=", "voxel_features", ",", "\n", "indices", "=", "voxel_coords", ".", "int", "(", ")", ",", "\n", "spatial_shape", "=", "size_map", "[", "\"local_grid_size\"", "]", ",", "\n", "batch_size", "=", "batch_size", "*", "N_box", "*", "self", ".", "grid_num", "\n", ")", "\n", "out_features", "=", "conv_layer", "(", "input_sp_tensor", ")", ".", "dense", "(", ")", "\n", "out_features", "=", "torch", ".", "squeeze", "(", "out_features", ")", "\n", "# print(\"out_features\", out_features.shape, B, N_box)", "\n", "", "else", ":", "\n", "                ", "out_features", "=", "self", ".", "interpolate_from_bev_features", "(", "conv_grid_points", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", ",", "in_features", ",", "batch_dict", "[", "'batch_size'", "]", ",", "bev_stride", "=", "self", ".", "downsample_times_map", "[", "src_name", "]", ")", "# B, NboxX666X", "\n", "out_features", "=", "out_features", ".", "view", "(", "batch_size", "*", "N_box", "*", "self", ".", "grid_num", ",", "size_map", "[", "\"local_grid_size\"", "]", "[", "0", "]", ",", "size_map", "[", "\"local_grid_size\"", "]", "[", "1", "]", ",", "out_features", ".", "shape", "[", "-", "1", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "out_features", "=", "torch", ".", "squeeze", "(", "conv_layer", "(", "out_features", ")", ")", "\n", "", "out_features_lst", ".", "append", "(", "out_features", ")", "\n", "", "out_features", "=", "torch", ".", "cat", "(", "out_features_lst", ",", "dim", "=", "-", "1", ")", "if", "len", "(", "out_features_lst", ")", ">", "0", "else", "out_features_lst", "[", "0", "]", "\n", "out_features", "=", "out_features", ".", "view", "(", "B", "*", "N_box", ",", "*", "self", ".", "grid_size", ",", "out_features", ".", "shape", "[", "-", "1", "]", ")", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "# BN, C, 6, 6, 6", "\n", "\n", "if", "getattr", "(", "self", ",", "\"shared_3dconv_layer\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "out_features", "=", "self", ".", "shared_3dconv_layer", "(", "out_features", ")", "# BN, C, 1, 1, 1", "\n", "# print(\"out_features\", out_features.shape)", "\n", "", "return", "out_features", ".", "view", "(", "B", "*", "N_box", ",", "-", "1", ",", "1", ")", ",", "vis_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.vis_voxel": [[382, 393], ["utils.common_utils.get_voxel_centers", "list", "voxel_coords[].long", "voxel_coords[].long"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.augmentor.multi_best_match_querier.MltBestMatchQuerier.get_voxel_centers"], ["", "def", "vis_voxel", "(", "self", ",", "B", ",", "voxel_coords", ",", "global_roi_grid_points", ",", "ker_xyz_size", ")", ":", "\n", "        ", "center_xyz", "=", "common_utils", ".", "get_voxel_centers", "(", "\n", "voxel_coords", "[", "...", ",", "1", ":", "4", "]", ",", "\n", "downsample_times", "=", "1", ",", "\n", "voxel_size", "=", "ker_xyz_size", ",", "\n", "point_cloud_range", "=", "self", ".", "point_cloud_range", "\n", ")", "# M, 3", "\n", "center_xyz", "+=", "global_roi_grid_points", "[", "voxel_coords", "[", "...", ",", "0", "]", ".", "long", "(", ")", ",", ":", "]", "\n", "BN", "=", "list", "(", "global_roi_grid_points", ".", "shape", ")", "[", "0", "]", "\n", "mask", "=", "voxel_coords", "[", "...", ",", "0", "]", ".", "long", "(", ")", "<", "(", "BN", "//", "B", ")", "\n", "return", "center_xyz", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.get_global_grid_points_of_roi": [[394, 406], ["rois.view.view.view", "conv_head.ConvHead.get_dense_grid_points", "utils.common_utils.rotate_points_along_z", "rois[].clone", "rois[].clone.unsqueeze", "local_roi_grid_points.clone"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.get_dense_grid_points", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "get_global_grid_points_of_roi", "(", "self", ",", "rois", ",", "grid_size", ",", "e2e", "=", "False", ",", "dim_times", "=", "1.0", ")", ":", "\n", "        ", "rois", "=", "rois", ".", "view", "(", "-", "1", ",", "rois", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_size_rcnn", "=", "rois", ".", "shape", "[", "0", "]", "\n", "\n", "local_roi_grid_points", ",", "dense_idx", "=", "self", ".", "get_dense_grid_points", "(", "rois", ",", "batch_size_rcnn", ",", "grid_size", ",", "e2e", "=", "e2e", ",", "dim_times", "=", "dim_times", ")", "# (B, 6x6x6, 3)", "\n", "global_roi_grid_points", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "local_roi_grid_points", ".", "clone", "(", ")", ",", "rois", "[", ":", ",", "6", "]", "\n", ")", "# .squeeze(dim=1)", "\n", "# print(\"local_roi_grid_points\", local_roi_grid_points.shape, dense_idx.shape, global_roi_grid_points.shape)", "\n", "global_center", "=", "rois", "[", ":", ",", "0", ":", "3", "]", ".", "clone", "(", ")", "\n", "global_roi_grid_points", "+=", "global_center", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "return", "global_roi_grid_points", ",", "dense_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.get_dense_grid_points": [[408, 425], ["isinstance", "numpy.array", "rois.new_ones", "rois.new_ones.nonzero", "dense_idx.repeat().float.repeat().float.repeat().float", "dense_idx.repeat().float.repeat().float.repeat", "rois.view", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "local_roi_size.unsqueeze", "torch.flip().reshape", "torch.flip().reshape", "torch.flip().reshape", "torch.flip().reshape", "local_roi_size.unsqueeze", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "local_roi_size.unsqueeze", "local_roi_size.unsqueeze", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_dense_grid_points", "(", "rois", ",", "batch_size_rcnn", ",", "grid_size", ",", "e2e", "=", "False", ",", "dim_times", "=", "1.0", ")", ":", "\n", "        ", "if", "isinstance", "(", "grid_size", ",", "int", ")", ":", "\n", "            ", "grid_size", "=", "[", "grid_size", ",", "grid_size", ",", "grid_size", "]", "\n", "", "grid_size", "=", "np", ".", "array", "(", "grid_size", ")", "\n", "faked_features", "=", "rois", ".", "new_ones", "(", "(", "grid_size", "[", "0", "]", ",", "grid_size", "[", "1", "]", ",", "grid_size", "[", "2", "]", ")", ")", "\n", "dense_idx", "=", "faked_features", ".", "nonzero", "(", ")", "# (N, 666, 3) [z_idx, y_idx, x_idx]", "\n", "dense_idx", "=", "dense_idx", ".", "repeat", "(", "batch_size_rcnn", ",", "1", ",", "1", ")", ".", "float", "(", ")", "# (B, 6x6x6, 3)", "\n", "# print(\"dense_idx\", dense_idx.shape)", "\n", "local_roi_size", "=", "rois", ".", "view", "(", "batch_size_rcnn", ",", "-", "1", ")", "[", ":", ",", "3", ":", "6", "]", "*", "dim_times", "\n", "if", "e2e", "and", "grid_size", "[", "2", "]", ">", "1", ":", "\n", "            ", "roi_grid_points", "=", "(", "torch", ".", "flip", "(", "dense_idx", ",", "[", "-", "1", "]", ")", ")", "*", "local_roi_size", ".", "unsqueeze", "(", "dim", "=", "1", ")", "/", "torch", ".", "as_tensor", "(", "(", "grid_size", "-", "1", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", ",", "device", "=", "dense_idx", ".", "device", ")", "-", "(", "local_roi_size", ".", "unsqueeze", "(", "dim", "=", "1", ")", "/", "2", ")", "# (B, 6x6x6, 3)", "\n", "", "else", ":", "\n", "            ", "roi_grid_points", "=", "(", "torch", ".", "flip", "(", "dense_idx", ",", "[", "-", "1", "]", ")", "+", "0.5", ")", "*", "local_roi_size", ".", "unsqueeze", "(", "dim", "=", "1", ")", "/", "torch", ".", "flip", "(", "torch", ".", "as_tensor", "(", "grid_size", ",", "device", "=", "dense_idx", ".", "device", ")", ",", "[", "0", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "-", "(", "local_roi_size", ".", "unsqueeze", "(", "dim", "=", "1", ")", "/", "2", ")", "# (B, 6x6x6, 3)", "\n", "# print(\"dense_idx\",  torch.flip(dense_idx, [-1])[0,:,:], torch.flip(torch.as_tensor(grid_size, device=dense_idx.device), [0]), local_roi_size)", "\n", "\n", "", "return", "roi_grid_points", ",", "dense_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.generate_predicted_boxes": [[427, 456], ["cls_preds.view", "box_preds.view", "rois[].view", "rois[].view", "rois.clone().detach", "conv_head.ConvHead.box_coder.decode_torch().view", "utils.common_utils.rotate_points_along_z().squeeze", "batch_box_preds.view.view.view", "rois.clone", "conv_head.ConvHead.box_coder.decode_torch", "utils.common_utils.rotate_points_along_z", "batch_box_preds.view.view.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.decode_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "generate_predicted_boxes", "(", "self", ",", "batch_size", ",", "rois", ",", "cls_preds", ",", "box_preds", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_size:\n            rois: (B, N, 7)\n            cls_preds: (BN, num_class)\n            box_preds: (BN, code_size)\n\n        Returns:\n\n        \"\"\"", "\n", "code_size", "=", "self", ".", "box_coder", ".", "code_size", "\n", "# batch_cls_preds: (B, N, num_class or 1)", "\n", "batch_cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "cls_preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "batch_box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "code_size", ")", "\n", "\n", "roi_ry", "=", "rois", "[", ":", ",", ":", ",", "6", "]", ".", "view", "(", "-", "1", ")", "\n", "roi_xyz", "=", "rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "local_rois", "=", "rois", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "local_rois", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "0", "\n", "\n", "batch_box_preds", "=", "self", ".", "box_coder", ".", "decode_torch", "(", "batch_box_preds", ",", "local_rois", ")", ".", "view", "(", "-", "1", ",", "code_size", ")", "\n", "\n", "batch_box_preds", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "batch_box_preds", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "roi_ry", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "batch_box_preds", "[", ":", ",", "0", ":", "3", "]", "+=", "roi_xyz", "\n", "batch_box_preds", "=", "batch_box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "code_size", ")", "\n", "return", "batch_cls_preds", ",", "batch_box_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.forward": [[458, 492], ["conv_head.ConvHead.proposal_layer", "conv_head.ConvHead.roi_conv_pool", "conv_head.ConvHead.cls_layers().transpose().contiguous().squeeze", "conv_head.ConvHead.reg_layers().transpose().contiguous().squeeze", "conv_head.ConvHead.assign_targets", "getattr", "conv_head.ConvHead.shared_fc_layer", "conv_head.ConvHead.generate_predicted_boxes", "conv_head.ConvHead.cls_layers().transpose().contiguous", "conv_head.ConvHead.reg_layers().transpose().contiguous", "conv_head.ConvHead.cls_layers().transpose", "conv_head.ConvHead.reg_layers().transpose", "conv_head.ConvHead.cls_layers", "conv_head.ConvHead.reg_layers"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.roi_head_template.RoIHeadTemplate.proposal_layer", "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.roi_conv_pool", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.assign_targets", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param input_data: input dict\n        :return:\n        \"\"\"", "\n", "targets_dict", "=", "self", ".", "proposal_layer", "(", "\n", "batch_dict", ",", "nms_config", "=", "self", ".", "model_cfg", ".", "NMS_CONFIG", "[", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "]", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "batch_dict", ")", "\n", "batch_dict", "[", "'rois'", "]", "=", "targets_dict", "[", "'rois'", "]", "\n", "batch_dict", "[", "'roi_labels'", "]", "=", "targets_dict", "[", "'roi_labels'", "]", "\n", "\n", "# RoI aware pooling", "\n", "", "shared_features", ",", "vis_dict", "=", "self", ".", "roi_conv_pool", "(", "batch_dict", ")", "# (BxN, 6x6x6, C)", "\n", "batch_dict", "[", "\"pooled_features\"", "]", "=", "shared_features", "\n", "if", "getattr", "(", "self", ",", "\"shared_fc_layer\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "shared_features", "=", "self", ".", "shared_fc_layer", "(", "shared_features", ")", "\n", "", "rcnn_cls", "=", "self", ".", "cls_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, 1 or 2)", "\n", "rcnn_reg", "=", "self", ".", "reg_layers", "(", "shared_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# (B, C)", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", ",", "rois", "=", "batch_dict", "[", "'rois'", "]", ",", "cls_preds", "=", "rcnn_cls", ",", "box_preds", "=", "rcnn_reg", "\n", ")", "\n", "batch_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "batch_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "batch_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "targets_dict", "[", "'rcnn_cls'", "]", "=", "rcnn_cls", "\n", "targets_dict", "[", "'rcnn_reg'", "]", "=", "rcnn_reg", "\n", "self", ".", "forward_ret_dict", "=", "targets_dict", "\n", "", "if", "self", ".", "vis", ":", "\n", "            ", "batch_dict", "[", "'conv_vis_dict'", "]", "=", "vis_dict", "\n", "", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.interpolate_from_bev_features": [[494, 507], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bev_features[].permute", "utils.common_utils.bilinear_interpolate_torch", "point_bev_features_list.append", "utils.common_utils.bilinear_interpolate_torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.pfe.abstraction_template.bilinear_interpolate_torch"], ["", "def", "interpolate_from_bev_features", "(", "self", ",", "keypoints", ",", "bev_features", ",", "batch_size", ",", "bev_stride", ")", ":", "\n", "        ", "x_idxs", "=", "(", "keypoints", "[", ":", ",", ":", ",", "0", "]", "-", "self", ".", "point_cloud_range", "[", "0", "]", ")", "/", "self", ".", "det_voxel_size", "[", "0", "]", "/", "bev_stride", "-", "0.5", "\n", "y_idxs", "=", "(", "keypoints", "[", ":", ",", ":", ",", "1", "]", "-", "self", ".", "point_cloud_range", "[", "1", "]", ")", "/", "self", ".", "det_voxel_size", "[", "1", "]", "/", "bev_stride", "-", "0.5", "\n", "point_bev_features_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_x_idxs", "=", "x_idxs", "[", "k", "]", "\n", "cur_y_idxs", "=", "y_idxs", "[", "k", "]", "\n", "cur_bev_features", "=", "bev_features", "[", "k", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "# (H, W, C)", "\n", "point_bev_features", "=", "common_utils", ".", "bilinear_interpolate_torch", "(", "cur_bev_features", ",", "cur_x_idxs", ",", "cur_y_idxs", ",", "normalize", "=", "self", ".", "intrp_norm", ")", "\n", "point_bev_features_list", ".", "append", "(", "point_bev_features", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "", "point_bev_features", "=", "torch", ".", "cat", "(", "point_bev_features_list", ",", "dim", "=", "0", ")", "# (B, N, C0)", "\n", "return", "point_bev_features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.interpolate_from_3d_features": [[509, 530], ["isinstance", "list", "list", "dense_idx.view.view.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.arange().view().repeat().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "utils.common_utils.reverse_sparse_trilinear_interpolate_torch", "torch.any", "torch.any", "torch.any", "torch.any", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "z_target_idxs.view", "y_target_idxs.view", "x_target_idxs.view", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.reverse_sparse_trilinear_interpolate_torch"], ["", "def", "interpolate_from_3d_features", "(", "self", ",", "conv_grid_points", ",", "dense_idx", ",", "features", ",", "stride", ")", ":", "\n", "        ", "if", "isinstance", "(", "stride", ",", "int", ")", ":", "\n", "            ", "stride", "=", "[", "stride", ",", "stride", ",", "stride", "]", "\n", "# B, N*666*, 3", "\n", "", "B", ",", "NP", ",", "_", "=", "list", "(", "conv_grid_points", ".", "shape", ")", "\n", "BN", ",", "P", ",", "_", "=", "list", "(", "dense_idx", ".", "shape", ")", "\n", "dense_idx", "=", "dense_idx", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "x_target_idxs", "=", "(", "conv_grid_points", "[", ":", ",", ":", ",", "0", "]", "-", "self", ".", "point_cloud_range", "[", "0", "]", ")", "/", "self", ".", "det_voxel_size", "[", "0", "]", "/", "stride", "[", "2", "]", "-", "0.5", "\n", "y_target_idxs", "=", "(", "conv_grid_points", "[", ":", ",", ":", ",", "1", "]", "-", "self", ".", "point_cloud_range", "[", "1", "]", ")", "/", "self", ".", "det_voxel_size", "[", "1", "]", "/", "stride", "[", "1", "]", "-", "0.5", "\n", "z_target_idxs", "=", "(", "conv_grid_points", "[", ":", ",", ":", ",", "2", "]", "-", "self", ".", "point_cloud_range", "[", "2", "]", ")", "/", "self", ".", "det_voxel_size", "[", "2", "]", "/", "stride", "[", "0", "]", "-", "0.5", "\n", "spatial_target_idxs", "=", "torch", ".", "stack", "(", "[", "z_target_idxs", ".", "view", "(", "-", "1", ")", ",", "y_target_idxs", ".", "view", "(", "-", "1", ")", ",", "x_target_idxs", ".", "view", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "b_target_idxs", "=", "torch", ".", "arange", "(", "B", ",", "device", "=", "conv_grid_points", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ".", "view", "(", "B", ",", "1", ")", ".", "repeat", "(", "1", ",", "NP", ")", ".", "view", "(", "-", "1", ")", "\n", "b_idxs", "=", "torch", ".", "arange", "(", "BN", ",", "device", "=", "conv_grid_points", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ".", "view", "(", "BN", ",", "1", ")", ".", "repeat", "(", "1", ",", "P", ")", ".", "view", "(", "-", "1", ")", "\n", "bzyx", "=", "torch", ".", "stack", "(", "[", "b_idxs", ",", "dense_idx", "[", "...", ",", "0", "]", ",", "dense_idx", "[", "...", ",", "1", "]", ",", "dense_idx", "[", "...", ",", "2", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# print(\"conv_grid_points\", conv_grid_points.shape, b_target_idxs.shape, spatial_target_idxs.shape)", "\n", "\n", "feat", "=", "common_utils", ".", "reverse_sparse_trilinear_interpolate_torch", "(", "features", ",", "b_target_idxs", ",", "spatial_target_idxs", ",", "normalize", "=", "self", ".", "intrp_norm", ")", "\n", "mask", "=", "torch", ".", "any", "(", "torch", ".", "abs", "(", "feat", ")", ">", "0.0", ",", "dim", "=", "-", "1", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "mask", ")", "[", "...", ",", "0", "]", "\n", "return", "bzyx", "[", "inds", ",", ":", "]", ",", "feat", "[", "inds", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.interpolate_from_3d_sparse_features": [[533, 561], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv_head.ConvHead.retrieve_feat_in_region_norot", "list", "list", "in_features[].unsqueeze().repeat", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "utils.common_utils.sparse_trilinear_interpolate_torch", "features_list.append", "idxs_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "in_features[].unsqueeze", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "center_in_box_mask.unsqueeze", "center_in_box_mask.unsqueeze", "center_in_box_mask.unsqueeze", "torch.masked_select().view.new_zeros", "torch.masked_select().view.new_zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.masked_select().view.new_zeros", "torch.masked_select().view.new_zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.retrieve_feat_in_region_norot", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.sparse_trilinear_interpolate_torch"], ["", "def", "interpolate_from_3d_sparse_features", "(", "self", ",", "conv_regions", ",", "in_features", ",", "center_xyz", ",", "indices", ",", "batch_size", ",", "size_map", ",", "N_boxes", ")", ":", "\n", "# conv_regions  B, NX666, 7", "\n", "# center_xyz    M, 3", "\n", "# print(\"x_conv1\", x_conv1.spatial_shape) # [41 1600 1408]", "\n", "# print(\"x_conv2\", x_conv2.spatial_shape) # [21, 800, 704]", "\n", "# print(\"x_conv3\", x_conv3.spatial_shape) # [11, 400, 352]", "\n", "# print(\"x_conv4\", x_conv4.spatial_shape) # [5, 200, 176]", "\n", "        ", "idxs_list", "=", "[", "]", "\n", "features_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "mask", "=", "indices", "[", "...", ",", "0", "]", "==", "k", "\n", "cur_center_xyz", "=", "center_xyz", "[", "mask", ",", ":", "]", "\n", "binds", ",", "center_idxs", ",", "center_in_box_mask", "=", "self", ".", "retrieve_feat_in_region_norot", "(", "conv_regions", "[", "k", "]", ",", "cur_center_xyz", ",", "size_map", ")", "\n", "N", ",", "M", "=", "list", "(", "center_in_box_mask", ".", "shape", ")", "\n", "_", ",", "F", "=", "list", "(", "in_features", ".", "shape", ")", "\n", "cur_features", "=", "in_features", "[", "mask", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "M", ",", "1", ")", "# (C, F", "\n", "valid_features", "=", "torch", ".", "masked_select", "(", "cur_features", ",", "center_in_box_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "view", "(", "-", "1", ",", "F", ")", "\n", "valid_binds", "=", "torch", ".", "masked_select", "(", "binds", ",", "center_in_box_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "valid_center_idxs", "=", "torch", ".", "masked_select", "(", "center_idxs", ",", "center_in_box_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "# print(conv_regions.shape,\"valid_features\", valid_features.shape, valid_binds.shape, valid_center_idxs.shape, valid_binds.dtype, valid_center_idxs.dtype)", "\n", "valid_features", ",", "valid_binds", ",", "valid_center_idxs", "=", "torch", ".", "cat", "(", "[", "valid_features", ".", "new_zeros", "(", "N_boxes", ",", "F", ")", ",", "valid_features", "]", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "N_boxes", ",", "device", "=", "valid_binds", ".", "device", ",", "dtype", "=", "valid_binds", ".", "dtype", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "valid_binds", "]", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "[", "valid_center_idxs", ".", "new_zeros", "(", "N_boxes", ",", "3", ")", ",", "valid_center_idxs", "]", ",", "dim", "=", "0", ")", "\n", "unique_idxs", ",", "features", "=", "common_utils", ".", "sparse_trilinear_interpolate_torch", "(", "valid_features", ",", "valid_binds", ",", "valid_center_idxs", ",", "size_map", "[", "'local_grid_size'", "]", ")", "\n", "unique_idxs", "[", "...", ",", "0", "]", "+=", "k", "*", "M", "\n", "features_list", ".", "append", "(", "features", ")", "\n", "idxs_list", ".", "append", "(", "unique_idxs", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features_list", ",", "dim", "=", "0", ")", "# (B, N, C0)", "\n", "unique_idxs", "=", "torch", ".", "cat", "(", "idxs_list", ",", "dim", "=", "0", ")", "# (B, N, C0)", "\n", "return", "unique_idxs", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.retrieve_feat_in_region": [[563, 586], ["utils.point_box_utils.torch_get_yaw_rotation", "utils.point_box_utils.torch_get_transform", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "size_map[].view", "size_map[].view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_yaw_rotation", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_get_transform"], ["", "def", "retrieve_feat_in_region", "(", "self", ",", "regions", ",", "points", ",", "size_map", ",", "shift", "=", "0.0", ")", ":", "\n", "        ", "center", "=", "regions", "[", ":", ",", ":", "3", "]", "\n", "dim", "=", "regions", "[", ":", ",", "3", ":", "6", "]", "\n", "heading", "=", "regions", "[", ":", ",", "6", "]", "\n", "# M, 3, 3", "\n", "rotation", "=", "point_box_utils", ".", "torch_get_yaw_rotation", "(", "heading", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "point_box_utils", ".", "torch_get_transform", "(", "rotation", ",", "center", ")", "\n", "# M, 4, 4", "\n", "transform", "=", "torch", ".", "inverse", "(", "transform", ")", "\n", "# M, 3, 3", "\n", "reversed_rotation", "=", "transform", "[", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "# M, 3", "\n", "reversed_translation", "=", "transform", "[", ":", ",", ":", "3", ",", "3", "]", "\n", "# N, M, 3", "\n", "# print(\"points, rotation, translation\", points.shape, rotation.shape, translation.shape)", "\n", "point_in_box_frame", "=", "torch", ".", "einsum", "(", "\"nj,mij->nmi\"", ",", "points", ",", "reversed_rotation", ")", "+", "reversed_translation", "\n", "# N, M, 3", "\n", "point_in_box_mask", "=", "(", "point_in_box_frame", "<=", "dim", "*", "0.5", "+", "shift", ")", "&", "(", "point_in_box_frame", ">=", "-", "dim", "*", "0.5", "-", "shift", ")", "\n", "point_in_box_mask", "=", "torch", ".", "prod", "(", "point_in_box_mask", ",", "axis", "=", "-", "1", ",", "dtype", "=", "torch", ".", "int8", ")", "# N, M", "\n", "idxs", "=", "(", "point_in_box_frame", "-", "size_map", "[", "'scene_xyz_orgin_shifted'", "]", ".", "view", "(", "1", ",", "1", ",", "3", ")", ")", "/", "size_map", "[", "'ker_xyz_size'", "]", ".", "view", "(", "1", ",", "1", ",", "3", ")", "# N, M, 3", "\n", "binds", "=", "torch", ".", "arange", "(", "idxs", ".", "shape", "[", "1", "]", ",", "device", "=", "idxs", ".", "device", ",", "dtype", "=", "torch", ".", "int16", ")", ".", "view", "(", "1", ",", "idxs", ".", "shape", "[", "1", "]", ",", "1", ")", ".", "repeat", "(", "idxs", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "return", "binds", ",", "idxs", ",", "point_in_box_mask", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.roi_heads.conv_head.ConvHead.retrieve_feat_in_region_norot": [[587, 611], ["torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "points.unsqueeze", "center.unsqueeze", "size_map[].view", "size_map[].view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "retrieve_feat_in_region_norot", "(", "self", ",", "regions", ",", "points", ",", "size_map", ",", "shift", "=", "0.0", ")", ":", "\n", "        ", "center", "=", "regions", "[", ":", ",", ":", "3", "]", "\n", "dim", "=", "regions", "[", ":", ",", "3", ":", "6", "]", "\n", "# heading = regions[:, 6]", "\n", "# M, 3, 3", "\n", "# rotation = point_box_utils.torch_get_yaw_rotation(heading)", "\n", "# # M, 4, 4", "\n", "# transform = point_box_utils.torch_get_transform(rotation, center)", "\n", "# # M, 4, 4", "\n", "# transform = torch.inverse(transform)", "\n", "# # M, 3, 3", "\n", "# reversed_rotation = transform[:, :3, :3]", "\n", "# # M, 3", "\n", "# reversed_translation = transform[:, :3, 3]", "\n", "# # N, M, 3", "\n", "# # print(\"points, rotation, translation\", points.shape, rotation.shape, translation.shape)", "\n", "# point_in_box_frame = torch.einsum(\"nj,mij->nmi\", points, reversed_rotation) + reversed_translation", "\n", "point_in_box_frame", "=", "points", ".", "unsqueeze", "(", "1", ")", "-", "center", ".", "unsqueeze", "(", "0", ")", "\n", "# N, M, 3", "\n", "point_in_box_mask", "=", "(", "point_in_box_frame", "<=", "dim", "*", "0.5", "+", "shift", ")", "&", "(", "point_in_box_frame", ">=", "-", "dim", "*", "0.5", "-", "shift", ")", "\n", "point_in_box_mask", "=", "torch", ".", "prod", "(", "point_in_box_mask", ",", "axis", "=", "-", "1", ",", "dtype", "=", "torch", ".", "int8", ")", "# N, M", "\n", "idxs", "=", "(", "point_in_box_frame", "-", "size_map", "[", "'scene_xyz_orgin_shifted'", "]", ".", "view", "(", "1", ",", "1", ",", "3", ")", ")", "/", "size_map", "[", "'ker_xyz_size'", "]", ".", "view", "(", "1", ",", "1", ",", "3", ")", "# N, M, 3", "\n", "binds", "=", "torch", ".", "arange", "(", "idxs", ".", "shape", "[", "1", "]", ",", "device", "=", "idxs", ".", "device", ",", "dtype", "=", "torch", ".", "int16", ")", ".", "view", "(", "1", ",", "idxs", ".", "shape", "[", "1", "]", ",", "1", ")", ".", "repeat", "(", "idxs", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "return", "binds", ",", "idxs", ",", "point_in_box_mask", ">", "0", "", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "roi_sampler_cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "roi_sampler_cfg", "=", "roi_sampler_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.forward": [[13, 63], ["proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn"], ["", "def", "forward", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                roi_scores: (B, num_rois)\n                gt_boxes: (B, N, 7 + C + 1)\n                roi_labels: (B, num_rois)\n        Returns:\n            batch_dict:\n                rois: (B, M, 7 + C)\n                gt_of_rois: (B, M, 7 + C)\n                gt_iou_of_rois: (B, M)\n                roi_scores: (B, M)\n                roi_labels: (B, M)\n                reg_valid_mask: (B, M)\n                rcnn_cls_labels: (B, M)\n        \"\"\"", "\n", "batch_rois", ",", "batch_gt_of_rois", ",", "batch_roi_ious", ",", "batch_roi_scores", ",", "batch_roi_labels", "=", "self", ".", "sample_rois_for_rcnn", "(", "\n", "batch_dict", "=", "batch_dict", "\n", ")", "\n", "# regression valid mask", "\n", "reg_valid_mask", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ")", ".", "long", "(", ")", "\n", "\n", "# classification label", "\n", "if", "self", ".", "roi_sampler_cfg", ".", "CLS_SCORE_TYPE", "==", "'cls'", ":", "\n", "            ", "batch_cls_labels", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", ".", "long", "(", ")", "\n", "ignore_mask", "=", "(", "batch_roi_ious", ">", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH", ")", "&", "(", "batch_roi_ious", "<", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", "\n", "batch_cls_labels", "[", "ignore_mask", ">", "0", "]", "=", "-", "1", "\n", "", "elif", "self", ".", "roi_sampler_cfg", ".", "CLS_SCORE_TYPE", "==", "'roi_iou'", ":", "\n", "            ", "iou_bg_thresh", "=", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH", "\n", "iou_fg_thresh", "=", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", "\n", "fg_mask", "=", "batch_roi_ious", ">", "iou_fg_thresh", "\n", "bg_mask", "=", "batch_roi_ious", "<", "iou_bg_thresh", "\n", "interval_mask", "=", "(", "fg_mask", "==", "0", ")", "&", "(", "bg_mask", "==", "0", ")", "\n", "\n", "batch_cls_labels", "=", "(", "fg_mask", ">", "0", ")", ".", "float", "(", ")", "\n", "batch_cls_labels", "[", "interval_mask", "]", "=", "(", "batch_roi_ious", "[", "interval_mask", "]", "-", "iou_bg_thresh", ")", "/", "(", "iou_fg_thresh", "-", "iou_bg_thresh", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "targets_dict", "=", "{", "'rois'", ":", "batch_rois", ",", "'gt_of_rois'", ":", "batch_gt_of_rois", ",", "'gt_iou_of_rois'", ":", "batch_roi_ious", ",", "\n", "'roi_scores'", ":", "batch_roi_scores", ",", "'roi_labels'", ":", "batch_roi_labels", ",", "\n", "'reg_valid_mask'", ":", "reg_valid_mask", ",", "\n", "'rcnn_cls_labels'", ":", "batch_cls_labels", "}", "\n", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_rois_for_rcnn": [[64, 116], ["rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "rois.new_zeros", "range", "proposal_target_layer.ProposalTargetLayer.roi_sampler_cfg.get", "proposal_target_layer.ProposalTargetLayer.subsample_rois", "cur_gt.__len__", "cur_gt.new_zeros", "proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "torch.max", "torch.max", "torch.max", "torch.max", "cur_gt[].sum", "len", "cur_gt[].long"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.subsample_rois", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class", "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "def", "sample_rois_for_rcnn", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_dict:\n                batch_size:\n                rois: (B, num_rois, 7 + C)\n                roi_scores: (B, num_rois)\n                gt_boxes: (B, N, 7 + C + 1)\n                roi_labels: (B, num_rois)\n        Returns:\n\n        \"\"\"", "\n", "batch_size", "=", "batch_dict", "[", "'batch_size'", "]", "\n", "rois", "=", "batch_dict", "[", "'rois'", "]", "\n", "roi_scores", "=", "batch_dict", "[", "'roi_scores'", "]", "\n", "roi_labels", "=", "batch_dict", "[", "'roi_labels'", "]", "\n", "gt_boxes", "=", "batch_dict", "[", "'gt_boxes'", "]", "\n", "\n", "code_size", "=", "rois", ".", "shape", "[", "-", "1", "]", "\n", "batch_rois", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ",", "code_size", ")", "\n", "batch_gt_of_rois", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ",", "code_size", "+", "1", ")", "\n", "batch_roi_ious", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "\n", "batch_roi_scores", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "\n", "batch_roi_labels", "=", "rois", ".", "new_zeros", "(", "(", "batch_size", ",", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "for", "index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_roi", ",", "cur_gt", ",", "cur_roi_labels", ",", "cur_roi_scores", "=", "rois", "[", "index", "]", ",", "gt_boxes", "[", "index", "]", ",", "roi_labels", "[", "index", "]", ",", "roi_scores", "[", "index", "]", "\n", "k", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "k", ">", "0", "and", "cur_gt", "[", "k", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "k", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "k", "+", "1", "]", "\n", "cur_gt", "=", "cur_gt", ".", "new_zeros", "(", "(", "1", ",", "cur_gt", ".", "shape", "[", "1", "]", ")", ")", "if", "len", "(", "cur_gt", ")", "==", "0", "else", "cur_gt", "\n", "\n", "if", "self", ".", "roi_sampler_cfg", ".", "get", "(", "'SAMPLE_ROI_BY_EACH_CLASS'", ",", "False", ")", ":", "\n", "                ", "max_overlaps", ",", "gt_assignment", "=", "self", ".", "get_max_iou_with_same_class", "(", "\n", "rois", "=", "cur_roi", ",", "roi_labels", "=", "cur_roi_labels", ",", "\n", "gt_boxes", "=", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ",", "gt_labels", "=", "cur_gt", "[", ":", ",", "-", "1", "]", ".", "long", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "iou3d", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "cur_roi", ",", "cur_gt", "[", ":", ",", "0", ":", "7", "]", ")", "# (M, N)", "\n", "max_overlaps", ",", "gt_assignment", "=", "torch", ".", "max", "(", "iou3d", ",", "dim", "=", "1", ")", "\n", "\n", "", "sampled_inds", "=", "self", ".", "subsample_rois", "(", "max_overlaps", "=", "max_overlaps", ")", "\n", "\n", "batch_rois", "[", "index", "]", "=", "cur_roi", "[", "sampled_inds", "]", "\n", "batch_roi_labels", "[", "index", "]", "=", "cur_roi_labels", "[", "sampled_inds", "]", "\n", "batch_roi_ious", "[", "index", "]", "=", "max_overlaps", "[", "sampled_inds", "]", "\n", "batch_roi_scores", "[", "index", "]", "=", "cur_roi_scores", "[", "sampled_inds", "]", "\n", "batch_gt_of_rois", "[", "index", "]", "=", "cur_gt", "[", "gt_assignment", "[", "sampled_inds", "]", "]", "\n", "\n", "", "return", "batch_rois", ",", "batch_gt_of_rois", ",", "batch_roi_ious", ",", "batch_roi_scores", ",", "batch_roi_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.subsample_rois": [[117, 163], ["int", "min", "fg_inds.numel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.round", "hard_bg_inds.numel", "easy_bg_inds.numel", "min", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "print", "print", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.permutation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "max_overlaps.min().item", "max_overlaps.max().item", "max_overlaps.min", "max_overlaps.max"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds", "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds"], ["", "def", "subsample_rois", "(", "self", ",", "max_overlaps", ")", ":", "\n", "# sample fg, easy_bg, hard_bg", "\n", "        ", "fg_rois_per_image", "=", "int", "(", "np", ".", "round", "(", "self", ".", "roi_sampler_cfg", ".", "FG_RATIO", "*", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", ")", "\n", "fg_thresh", "=", "min", "(", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ",", "self", ".", "roi_sampler_cfg", ".", "CLS_FG_THRESH", ")", "\n", "\n", "fg_inds", "=", "(", "(", "max_overlaps", ">=", "fg_thresh", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "easy_bg_inds", "=", "(", "(", "max_overlaps", "<", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH_LO", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "hard_bg_inds", "=", "(", "(", "max_overlaps", "<", "self", ".", "roi_sampler_cfg", ".", "REG_FG_THRESH", ")", "&", "\n", "(", "max_overlaps", ">=", "self", ".", "roi_sampler_cfg", ".", "CLS_BG_THRESH_LO", ")", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "fg_num_rois", "=", "fg_inds", ".", "numel", "(", ")", "\n", "bg_num_rois", "=", "hard_bg_inds", ".", "numel", "(", ")", "+", "easy_bg_inds", ".", "numel", "(", ")", "\n", "\n", "if", "fg_num_rois", ">", "0", "and", "bg_num_rois", ">", "0", ":", "\n", "# sampling fg", "\n", "            ", "fg_rois_per_this_image", "=", "min", "(", "fg_rois_per_image", ",", "fg_num_rois", ")", "\n", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "fg_num_rois", ")", ")", ".", "type_as", "(", "max_overlaps", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "[", ":", "fg_rois_per_this_image", "]", "]", "\n", "\n", "# sampling bg", "\n", "bg_rois_per_this_image", "=", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", "-", "fg_rois_per_this_image", "\n", "bg_inds", "=", "self", ".", "sample_bg_inds", "(", "\n", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "self", ".", "roi_sampler_cfg", ".", "HARD_BG_RATIO", "\n", ")", "\n", "\n", "", "elif", "fg_num_rois", ">", "0", "and", "bg_num_rois", "==", "0", ":", "\n", "# sampling fg", "\n", "            ", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", ")", "*", "fg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "max_overlaps", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "]", "\n", "bg_inds", "=", "[", "]", "\n", "\n", "", "elif", "bg_num_rois", ">", "0", "and", "fg_num_rois", "==", "0", ":", "\n", "# sampling bg", "\n", "            ", "bg_rois_per_this_image", "=", "self", ".", "roi_sampler_cfg", ".", "ROI_PER_IMAGE", "\n", "bg_inds", "=", "self", ".", "sample_bg_inds", "(", "\n", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "self", ".", "roi_sampler_cfg", ".", "HARD_BG_RATIO", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'maxoverlaps:(min=%f, max=%f)'", "%", "(", "max_overlaps", ".", "min", "(", ")", ".", "item", "(", ")", ",", "max_overlaps", ".", "max", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "'ERROR: FG=%d, BG=%d'", "%", "(", "fg_num_rois", ",", "bg_num_rois", ")", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "", "sampled_inds", "=", "torch", ".", "cat", "(", "(", "fg_inds", ",", "bg_inds", ")", ",", "dim", "=", "0", ")", "\n", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.sample_bg_inds": [[164, 193], ["min", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hard_bg_inds.numel", "easy_bg_inds.numel", "int", "len", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel", "hard_bg_inds.numel", "easy_bg_inds.numel", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "hard_bg_inds.numel", "easy_bg_inds.numel"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sample_bg_inds", "(", "hard_bg_inds", ",", "easy_bg_inds", ",", "bg_rois_per_this_image", ",", "hard_bg_ratio", ")", ":", "\n", "        ", "if", "hard_bg_inds", ".", "numel", "(", ")", ">", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "hard_bg_rois_num", "=", "min", "(", "int", "(", "bg_rois_per_this_image", "*", "hard_bg_ratio", ")", ",", "len", "(", "hard_bg_inds", ")", ")", "\n", "easy_bg_rois_num", "=", "bg_rois_per_this_image", "-", "hard_bg_rois_num", "\n", "\n", "# sampling hard bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hard_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "hard_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "hard_bg_inds", "=", "hard_bg_inds", "[", "rand_idx", "]", "\n", "\n", "# sampling easy bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "easy_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "easy_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "easy_bg_inds", "=", "easy_bg_inds", "[", "rand_idx", "]", "\n", "\n", "bg_inds", "=", "torch", ".", "cat", "(", "[", "hard_bg_inds", ",", "easy_bg_inds", "]", ",", "dim", "=", "0", ")", "\n", "", "elif", "hard_bg_inds", ".", "numel", "(", ")", ">", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "hard_bg_rois_num", "=", "bg_rois_per_this_image", "\n", "# sampling hard bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hard_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "hard_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "hard_bg_inds", "[", "rand_idx", "]", "\n", "", "elif", "hard_bg_inds", ".", "numel", "(", ")", "==", "0", "and", "easy_bg_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "easy_bg_rois_num", "=", "bg_rois_per_this_image", "\n", "# sampling easy bg", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "easy_bg_inds", ".", "numel", "(", ")", ",", "size", "=", "(", "easy_bg_rois_num", ",", ")", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "easy_bg_inds", "[", "rand_idx", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "bg_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.proposal_target_layer.ProposalTargetLayer.get_max_iou_with_same_class": [[194, 229], ["rois.new_zeros", "roi_labels.new_zeros", "range", "gt_labels.min().item", "gt_labels.max().item", "gt_mask.nonzero().view", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "torch.max", "torch.max", "torch.max", "torch.max", "gt_labels.min", "roi_mask.sum", "gt_mask.sum", "gt_labels.max", "gt_mask.nonzero"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu"], ["", "@", "staticmethod", "\n", "def", "get_max_iou_with_same_class", "(", "rois", ",", "roi_labels", ",", "gt_boxes", ",", "gt_labels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            rois: (N, 7)\n            roi_labels: (N)\n            gt_boxes: (N, )\n            gt_labels:\n\n        Returns:\n\n        \"\"\"", "\n", "\"\"\"\n        :param rois: (N, 7)\n        :param roi_labels: (N)\n        :param gt_boxes: (N, 8)\n        :return:\n        \"\"\"", "\n", "max_overlaps", "=", "rois", ".", "new_zeros", "(", "rois", ".", "shape", "[", "0", "]", ")", "\n", "gt_assignment", "=", "roi_labels", ".", "new_zeros", "(", "roi_labels", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "gt_labels", ".", "min", "(", ")", ".", "item", "(", ")", ",", "gt_labels", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", ")", ":", "\n", "            ", "roi_mask", "=", "(", "roi_labels", "==", "k", ")", "\n", "gt_mask", "=", "(", "gt_labels", "==", "k", ")", "\n", "if", "roi_mask", ".", "sum", "(", ")", ">", "0", "and", "gt_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "cur_roi", "=", "rois", "[", "roi_mask", "]", "\n", "cur_gt", "=", "gt_boxes", "[", "gt_mask", "]", "\n", "original_gt_assignment", "=", "gt_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "iou3d", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "cur_roi", ",", "cur_gt", ")", "# (M, N)", "\n", "cur_max_overlaps", ",", "cur_gt_assignment", "=", "torch", ".", "max", "(", "iou3d", ",", "dim", "=", "1", ")", "\n", "max_overlaps", "[", "roi_mask", "]", "=", "cur_max_overlaps", "\n", "gt_assignment", "[", "roi_mask", "]", "=", "original_gt_assignment", "[", "cur_gt_assignment", "]", "\n", "\n", "", "", "return", "max_overlaps", ",", "gt_assignment", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.atss_target_assigner.ATSSTargetAssigner.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "topk", ",", "box_coder", ",", "match_height", "=", "False", ")", ":", "\n", "        ", "self", ".", "topk", "=", "topk", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "match_height", "=", "match_height", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.atss_target_assigner.ATSSTargetAssigner.assign_targets": [[16, 74], ["isinstance", "range", "torch.stack", "torch.stack", "torch.stack", "cls_labels_list.append", "reg_targets_list.append", "reg_weights_list.append", "len", "anchors.view.view.permute().contiguous().view", "anchors.view.view.view", "atss_target_assigner.ATSSTargetAssigner.assign_targets_single", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.cat", "torch.cat", "torch.cat", "cur_gt.__len__", "anchors.view.view.permute().contiguous", "cur_gt[].sum", "anchors.view.view.permute"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets_single", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "assign_targets", "(", "self", ",", "anchors_list", ",", "gt_boxes_with_classes", ",", "use_multihead", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            anchors: [(N, 7), ...]\n            gt_boxes: (B, M, 8)\n        Returns:\n\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "anchors_list", ",", "list", ")", ":", "\n", "            ", "anchors_list", "=", "[", "anchors_list", "]", "\n", "single_set_of_anchor", "=", "True", "\n", "", "else", ":", "\n", "            ", "single_set_of_anchor", "=", "len", "(", "anchors_list", ")", "==", "1", "\n", "", "cls_labels_list", ",", "reg_targets_list", ",", "reg_weights_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "anchors", "in", "anchors_list", ":", "\n", "            ", "batch_size", "=", "gt_boxes_with_classes", ".", "shape", "[", "0", "]", "\n", "gt_classes", "=", "gt_boxes_with_classes", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "gt_boxes", "=", "gt_boxes_with_classes", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "if", "use_multihead", ":", "\n", "                ", "anchors", "=", "anchors", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "anchors", "=", "anchors", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "cls_labels", ",", "reg_targets", ",", "reg_weights", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "cur_gt", "=", "gt_boxes", "[", "k", "]", "\n", "cnt", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "cnt", ">", "0", "and", "cur_gt", "[", "cnt", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "cnt", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "cnt", "+", "1", "]", "\n", "\n", "cur_gt_classes", "=", "gt_classes", "[", "k", "]", "[", ":", "cnt", "+", "1", "]", "\n", "cur_cls_labels", ",", "cur_reg_targets", ",", "cur_reg_weights", "=", "self", ".", "assign_targets_single", "(", "\n", "anchors", ",", "cur_gt", ",", "cur_gt_classes", "\n", ")", "\n", "cls_labels", ".", "append", "(", "cur_cls_labels", ")", "\n", "reg_targets", ".", "append", "(", "cur_reg_targets", ")", "\n", "reg_weights", ".", "append", "(", "cur_reg_weights", ")", "\n", "\n", "", "cls_labels", "=", "torch", ".", "stack", "(", "cls_labels", ",", "dim", "=", "0", ")", "\n", "reg_targets", "=", "torch", ".", "stack", "(", "reg_targets", ",", "dim", "=", "0", ")", "\n", "reg_weights", "=", "torch", ".", "stack", "(", "reg_weights", ",", "dim", "=", "0", ")", "\n", "cls_labels_list", ".", "append", "(", "cls_labels", ")", "\n", "reg_targets_list", ".", "append", "(", "reg_targets", ")", "\n", "reg_weights_list", ".", "append", "(", "reg_weights", ")", "\n", "\n", "", "if", "single_set_of_anchor", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'box_cls_labels'", ":", "cls_labels_list", "[", "0", "]", ",", "\n", "'box_reg_targets'", ":", "reg_targets_list", "[", "0", "]", ",", "\n", "'reg_weights'", ":", "reg_weights_list", "[", "0", "]", "\n", "}", "\n", "", "else", ":", "\n", "            ", "ret_dict", "=", "{", "\n", "'box_cls_labels'", ":", "torch", ".", "cat", "(", "cls_labels_list", ",", "dim", "=", "1", ")", ",", "\n", "'box_reg_targets'", ":", "torch", ".", "cat", "(", "reg_targets_list", ",", "dim", "=", "1", ")", ",", "\n", "'reg_weights'", ":", "torch", ".", "cat", "(", "reg_weights_list", ",", "dim", "=", "1", ")", "\n", "}", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.atss_target_assigner.ATSSTargetAssigner.assign_targets_single": [[75, 142], ["distance.topk", "candidate_ious.mean", "candidate_ious.std", "gt_boxes[].repeat", "utils.common_utils.rotate_points_along_z().squeeze", "range", "torch.full_like().t().contiguous().view", "ious_inf.view().t.view().t.view().t", "ious_inf.view().t.view().t.max", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev.max", "torch.arange", "matched_gts.new_zeros", "matched_gts.new_zeros", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev", "topk_idxs.view", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev.t().contiguous().view", "pos_mask.sum", "atss_target_assigner.ATSSTargetAssigner.box_coder.encode_torch", "topk_idxs.view", "utils.common_utils.rotate_points_along_z", "torch.full_like().t().contiguous", "is_pos.view", "ious_inf.view().t.view().t.view", "torch.arange", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev.t().contiguous", "torch.full_like().t", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou_bev.t", "torch.full_like"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou_bev", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.encode_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "assign_targets_single", "(", "self", ",", "anchors", ",", "gt_boxes", ",", "gt_classes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            anchors: (N, 7) [x, y, z, dx, dy, dz, heading]\n            gt_boxes: (M, 7) [x, y, z, dx, dy, dz, heading]\n            gt_classes: (M)\n        Returns:\n\n        \"\"\"", "\n", "num_anchor", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "# select topk anchors for each gt_boxes", "\n", "if", "self", ".", "match_height", ":", "\n", "            ", "ious", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "anchors", "[", ":", ",", "0", ":", "7", "]", ",", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "# (N, M)", "\n", "", "else", ":", "\n", "            ", "ious", "=", "iou3d_nms_utils", ".", "boxes_iou_bev", "(", "anchors", "[", ":", ",", "0", ":", "7", "]", ",", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "\n", "", "distance", "=", "(", "anchors", "[", ":", ",", "None", ",", "0", ":", "3", "]", "-", "gt_boxes", "[", "None", ",", ":", ",", "0", ":", "3", "]", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "# (N, M)", "\n", "_", ",", "topk_idxs", "=", "distance", ".", "topk", "(", "self", ".", "topk", ",", "dim", "=", "0", ",", "largest", "=", "False", ")", "# (K, M)", "\n", "candidate_ious", "=", "ious", "[", "topk_idxs", ",", "torch", ".", "arange", "(", "num_gt", ")", "]", "# (K, M)", "\n", "iou_mean_per_gt", "=", "candidate_ious", ".", "mean", "(", "dim", "=", "0", ")", "\n", "iou_std_per_gt", "=", "candidate_ious", ".", "std", "(", "dim", "=", "0", ")", "\n", "iou_thresh_per_gt", "=", "iou_mean_per_gt", "+", "iou_std_per_gt", "+", "1e-6", "\n", "is_pos", "=", "candidate_ious", ">=", "iou_thresh_per_gt", "[", "None", ",", ":", "]", "# (K, M)", "\n", "\n", "# check whether anchor_center in gt_boxes, only check BEV x-y axes", "\n", "candidate_anchors", "=", "anchors", "[", "topk_idxs", ".", "view", "(", "-", "1", ")", "]", "# (KxM, 7)", "\n", "gt_boxes_of_each_anchor", "=", "gt_boxes", "[", ":", ",", ":", "]", ".", "repeat", "(", "self", ".", "topk", ",", "1", ")", "# (KxM, 7)", "\n", "xyz_local", "=", "candidate_anchors", "[", ":", ",", "0", ":", "3", "]", "-", "gt_boxes_of_each_anchor", "[", ":", ",", "0", ":", "3", "]", "\n", "xyz_local", "=", "common_utils", ".", "rotate_points_along_z", "(", "\n", "xyz_local", "[", ":", ",", "None", ",", ":", "]", ",", "-", "gt_boxes_of_each_anchor", "[", ":", ",", "6", "]", "\n", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "xy_local", "=", "xyz_local", "[", ":", ",", "0", ":", "2", "]", "\n", "lw", "=", "gt_boxes_of_each_anchor", "[", ":", ",", "3", ":", "5", "]", "[", ":", ",", "[", "1", ",", "0", "]", "]", "# bugfixed: w ==> y, l ==> x in local coords", "\n", "is_in_gt", "=", "(", "(", "xy_local", "<=", "lw", "/", "2", ")", "&", "(", "xy_local", ">=", "-", "lw", "/", "2", ")", ")", ".", "all", "(", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ",", "num_gt", ")", "# (K, M)", "\n", "is_pos", "=", "is_pos", "&", "is_in_gt", "# (K, M)", "\n", "\n", "for", "ng", "in", "range", "(", "num_gt", ")", ":", "\n", "            ", "topk_idxs", "[", ":", ",", "ng", "]", "+=", "ng", "*", "num_anchor", "\n", "\n", "# select the highest IoU if an anchor box is assigned with multiple gt_boxes", "\n", "", "INF", "=", "-", "0x7FFFFFFF", "\n", "ious_inf", "=", "torch", ".", "full_like", "(", "ious", ",", "INF", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "# (MxN)", "\n", "index", "=", "topk_idxs", ".", "view", "(", "-", "1", ")", "[", "is_pos", ".", "view", "(", "-", "1", ")", "]", "\n", "ious_inf", "[", "index", "]", "=", "ious", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "index", "]", "\n", "ious_inf", "=", "ious_inf", ".", "view", "(", "num_gt", ",", "-", "1", ")", ".", "t", "(", ")", "# (N, M)", "\n", "\n", "anchors_to_gt_values", ",", "anchors_to_gt_indexs", "=", "ious_inf", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "# match the gt_boxes to the anchors which have maximum iou with them", "\n", "max_iou_of_each_gt", ",", "argmax_iou_of_each_gt", "=", "ious", ".", "max", "(", "dim", "=", "0", ")", "\n", "anchors_to_gt_indexs", "[", "argmax_iou_of_each_gt", "]", "=", "torch", ".", "arange", "(", "0", ",", "num_gt", ",", "device", "=", "ious", ".", "device", ")", "\n", "anchors_to_gt_values", "[", "argmax_iou_of_each_gt", "]", "=", "max_iou_of_each_gt", "\n", "\n", "cls_labels", "=", "gt_classes", "[", "anchors_to_gt_indexs", "]", "\n", "cls_labels", "[", "anchors_to_gt_values", "==", "INF", "]", "=", "0", "\n", "matched_gts", "=", "gt_boxes", "[", "anchors_to_gt_indexs", "]", "\n", "\n", "pos_mask", "=", "cls_labels", ">", "0", "\n", "reg_targets", "=", "matched_gts", ".", "new_zeros", "(", "(", "num_anchor", ",", "self", ".", "box_coder", ".", "code_size", ")", ")", "\n", "reg_weights", "=", "matched_gts", ".", "new_zeros", "(", "num_anchor", ")", "\n", "if", "pos_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "reg_targets", "[", "pos_mask", ">", "0", "]", "=", "self", ".", "box_coder", ".", "encode_torch", "(", "matched_gts", "[", "pos_mask", ">", "0", "]", ",", "anchors", "[", "pos_mask", ">", "0", "]", ")", "\n", "reg_weights", "[", "pos_mask", "]", "=", "1.0", "\n", "\n", "", "return", "cls_labels", ",", "reg_targets", ",", "reg_weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.anchor_generator.AnchorGenerator.__init__": [[5, 16], ["object.__init__", "len", "config.get", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "anchor_range", ",", "anchor_generator_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "anchor_generator_cfg", "=", "anchor_generator_config", "\n", "self", ".", "anchor_range", "=", "anchor_range", "\n", "self", ".", "anchor_sizes", "=", "[", "config", "[", "'anchor_sizes'", "]", "for", "config", "in", "anchor_generator_config", "]", "\n", "self", ".", "anchor_rotations", "=", "[", "config", "[", "'anchor_rotations'", "]", "for", "config", "in", "anchor_generator_config", "]", "\n", "self", ".", "anchor_heights", "=", "[", "config", "[", "'anchor_bottom_heights'", "]", "for", "config", "in", "anchor_generator_config", "]", "\n", "self", ".", "align_center", "=", "[", "config", ".", "get", "(", "'align_center'", ",", "False", ")", "for", "config", "in", "anchor_generator_config", "]", "\n", "\n", "assert", "len", "(", "self", ".", "anchor_sizes", ")", "==", "len", "(", "self", ".", "anchor_rotations", ")", "==", "len", "(", "self", ".", "anchor_heights", ")", "\n", "self", ".", "num_of_anchor_sets", "=", "len", "(", "self", ".", "anchor_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.anchor_generator.AnchorGenerator.generate_anchors": [[17, 60], ["zip", "len", "num_anchors_per_location.append", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda.new_tensor", "torch.arange().cuda.new_tensor", "torch.arange().cuda.new_tensor", "torch.meshgrid", "torch.stack", "anchors[].repeat", "anchor_size.view().repeat.view().repeat.view().repeat", "torch.cat", "anchors[].repeat", "anchor_rotation.view().repeat.view().repeat.view().repeat", "torch.cat", "anchors.permute().contiguous.permute().contiguous.permute().contiguous", "all_anchors.append", "anchor_size.view().repeat.view().repeat.__len__", "anchor_rotation.view().repeat.view().repeat.__len__", "len", "torch.arange", "torch.arange", "anchor_size.view().repeat.view().repeat.view", "anchor_rotation.view().repeat.view().repeat.view", "anchors.permute().contiguous.permute().contiguous.permute", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "generate_anchors", "(", "self", ",", "grid_sizes", ")", ":", "\n", "        ", "assert", "len", "(", "grid_sizes", ")", "==", "self", ".", "num_of_anchor_sets", "\n", "all_anchors", "=", "[", "]", "\n", "num_anchors_per_location", "=", "[", "]", "\n", "for", "grid_size", ",", "anchor_size", ",", "anchor_rotation", ",", "anchor_height", ",", "align_center", "in", "zip", "(", "\n", "grid_sizes", ",", "self", ".", "anchor_sizes", ",", "self", ".", "anchor_rotations", ",", "self", ".", "anchor_heights", ",", "self", ".", "align_center", ")", ":", "\n", "            ", "num_anchors_per_location", ".", "append", "(", "len", "(", "anchor_rotation", ")", "*", "len", "(", "anchor_size", ")", "*", "len", "(", "anchor_height", ")", ")", "\n", "if", "align_center", ":", "\n", "                ", "x_stride", "=", "(", "self", ".", "anchor_range", "[", "3", "]", "-", "self", ".", "anchor_range", "[", "0", "]", ")", "/", "grid_size", "[", "0", "]", "\n", "y_stride", "=", "(", "self", ".", "anchor_range", "[", "4", "]", "-", "self", ".", "anchor_range", "[", "1", "]", ")", "/", "grid_size", "[", "1", "]", "\n", "x_offset", ",", "y_offset", "=", "x_stride", "/", "2", ",", "y_stride", "/", "2", "\n", "", "else", ":", "\n", "                ", "x_stride", "=", "(", "self", ".", "anchor_range", "[", "3", "]", "-", "self", ".", "anchor_range", "[", "0", "]", ")", "/", "(", "grid_size", "[", "0", "]", "-", "1", ")", "\n", "y_stride", "=", "(", "self", ".", "anchor_range", "[", "4", "]", "-", "self", ".", "anchor_range", "[", "1", "]", ")", "/", "(", "grid_size", "[", "1", "]", "-", "1", ")", "\n", "x_offset", ",", "y_offset", "=", "0", ",", "0", "\n", "\n", "", "x_shifts", "=", "torch", ".", "arange", "(", "\n", "self", ".", "anchor_range", "[", "0", "]", "+", "x_offset", ",", "self", ".", "anchor_range", "[", "3", "]", "+", "1e-5", ",", "step", "=", "x_stride", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "y_shifts", "=", "torch", ".", "arange", "(", "\n", "self", ".", "anchor_range", "[", "1", "]", "+", "y_offset", ",", "self", ".", "anchor_range", "[", "4", "]", "+", "1e-5", ",", "step", "=", "y_stride", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "z_shifts", "=", "x_shifts", ".", "new_tensor", "(", "anchor_height", ")", "\n", "\n", "num_anchor_size", ",", "num_anchor_rotation", "=", "anchor_size", ".", "__len__", "(", ")", ",", "anchor_rotation", ".", "__len__", "(", ")", "\n", "anchor_rotation", "=", "x_shifts", ".", "new_tensor", "(", "anchor_rotation", ")", "\n", "anchor_size", "=", "x_shifts", ".", "new_tensor", "(", "anchor_size", ")", "\n", "x_shifts", ",", "y_shifts", ",", "z_shifts", "=", "torch", ".", "meshgrid", "(", "[", "\n", "x_shifts", ",", "y_shifts", ",", "z_shifts", "\n", "]", ")", "# [x_grid, y_grid, z_grid]", "\n", "anchors", "=", "torch", ".", "stack", "(", "(", "x_shifts", ",", "y_shifts", ",", "z_shifts", ")", ",", "dim", "=", "-", "1", ")", "# [x, y, z, 3]", "\n", "anchors", "=", "anchors", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "anchor_size", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "anchor_size", "=", "anchor_size", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ",", "3", ")", ".", "repeat", "(", "[", "*", "anchors", ".", "shape", "[", "0", ":", "3", "]", ",", "1", ",", "1", "]", ")", "\n", "anchors", "=", "torch", ".", "cat", "(", "(", "anchors", ",", "anchor_size", ")", ",", "dim", "=", "-", "1", ")", "\n", "anchors", "=", "anchors", "[", ":", ",", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ",", "num_anchor_rotation", ",", "1", ")", "\n", "anchor_rotation", "=", "anchor_rotation", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", ")", ".", "repeat", "(", "[", "*", "anchors", ".", "shape", "[", "0", ":", "3", "]", ",", "num_anchor_size", ",", "1", ",", "1", "]", ")", "\n", "anchors", "=", "torch", ".", "cat", "(", "(", "anchors", ",", "anchor_rotation", ")", ",", "dim", "=", "-", "1", ")", "# [x, y, z, num_size, num_rot, 7]", "\n", "\n", "anchors", "=", "anchors", ".", "permute", "(", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "#anchors = anchors.view(-1, anchors.shape[-1])", "\n", "anchors", "[", "...", ",", "2", "]", "+=", "anchors", "[", "...", ",", "5", "]", "/", "2", "# shift to box centers", "\n", "all_anchors", ".", "append", "(", "anchors", ")", "\n", "", "return", "all_anchors", ",", "num_anchors_per_location", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.__init__": [[9, 35], ["object.__init__", "numpy.array", "model_cfg.get", "model_cfg.get", "enumerate"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "class_names", ",", "box_coder", ",", "match_height", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "anchor_generator_cfg", "=", "model_cfg", ".", "ANCHOR_GENERATOR_CONFIG", "\n", "anchor_target_cfg", "=", "model_cfg", ".", "TARGET_ASSIGNER_CONFIG", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "match_height", "=", "match_height", "\n", "self", ".", "class_names", "=", "np", ".", "array", "(", "class_names", ")", "\n", "self", ".", "anchor_class_names", "=", "[", "config", "[", "'class_name'", "]", "for", "config", "in", "anchor_generator_cfg", "]", "\n", "self", ".", "pos_fraction", "=", "anchor_target_cfg", ".", "POS_FRACTION", "if", "anchor_target_cfg", ".", "POS_FRACTION", ">=", "0", "else", "None", "\n", "self", ".", "sample_size", "=", "anchor_target_cfg", ".", "SAMPLE_SIZE", "\n", "self", ".", "norm_by_num_examples", "=", "anchor_target_cfg", ".", "NORM_BY_NUM_EXAMPLES", "\n", "self", ".", "matched_thresholds", "=", "{", "}", "\n", "self", ".", "unmatched_thresholds", "=", "{", "}", "\n", "for", "config", "in", "anchor_generator_cfg", ":", "\n", "            ", "self", ".", "matched_thresholds", "[", "config", "[", "'class_name'", "]", "]", "=", "config", "[", "'matched_threshold'", "]", "\n", "self", ".", "unmatched_thresholds", "[", "config", "[", "'class_name'", "]", "]", "=", "config", "[", "'unmatched_threshold'", "]", "\n", "\n", "", "self", ".", "use_multihead", "=", "model_cfg", ".", "get", "(", "'USE_MULTIHEAD'", ",", "False", ")", "\n", "self", ".", "seperate_multihead", "=", "model_cfg", ".", "get", "(", "'SEPERATE_MULTIHEAD'", ",", "False", ")", "\n", "if", "self", ".", "seperate_multihead", ":", "\n", "            ", "rpn_head_cfgs", "=", "model_cfg", ".", "RPN_HEAD_CFGS", "\n", "self", ".", "gt_remapping", "=", "{", "}", "\n", "for", "rpn_head_cfg", "in", "rpn_head_cfgs", ":", "\n", "                ", "for", "idx", ",", "name", "in", "enumerate", "(", "rpn_head_cfg", "[", "'HEAD_CLS_NAME'", "]", ")", ":", "\n", "                    ", "self", ".", "gt_remapping", "[", "name", "]", "=", "idx", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets": [[36, 130], ["range", "torch.stack", "torch.stack", "torch.stack", "[].int", "zip", "torch.stack.append", "torch.stack.append", "torch.stack.append", "cur_gt.__len__", "axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets_single", "target_list.append", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "cur_gt[].sum", "torch.from_numpy", "torch.tensor", "anchors.view.view.permute().contiguous().view", "anchors.view.view.view", "cur_gt_classes[].clone", "t[].view", "t[].view", "t[].view", "torch.cat", "torch.cat", "t[].view", "t[].view", "t[].view", "torch.cat", "torch.cat", "torch.cat", "anchors.view.view.permute().contiguous", "len", "anchors.view.view.permute", "[].int.cpu"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets_single"], ["", "", "", "", "def", "assign_targets", "(", "self", ",", "all_anchors", ",", "gt_boxes_with_classes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            all_anchors: [(N, 7), ...]\n            gt_boxes: (B, M, 8)\n        Returns:\n\n        \"\"\"", "\n", "\n", "bbox_targets", "=", "[", "]", "\n", "cls_labels", "=", "[", "]", "\n", "reg_weights", "=", "[", "]", "\n", "\n", "batch_size", "=", "gt_boxes_with_classes", ".", "shape", "[", "0", "]", "\n", "gt_classes", "=", "gt_boxes_with_classes", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "gt_boxes", "=", "gt_boxes_with_classes", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_gt", "=", "gt_boxes", "[", "k", "]", "\n", "cnt", "=", "cur_gt", ".", "__len__", "(", ")", "-", "1", "\n", "while", "cnt", ">", "0", "and", "cur_gt", "[", "cnt", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "cnt", "-=", "1", "\n", "", "cur_gt", "=", "cur_gt", "[", ":", "cnt", "+", "1", "]", "\n", "cur_gt_classes", "=", "gt_classes", "[", "k", "]", "[", ":", "cnt", "+", "1", "]", ".", "int", "(", ")", "\n", "\n", "target_list", "=", "[", "]", "\n", "for", "anchor_class_name", ",", "anchors", "in", "zip", "(", "self", ".", "anchor_class_names", ",", "all_anchors", ")", ":", "\n", "                ", "if", "cur_gt_classes", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                    ", "mask", "=", "torch", ".", "from_numpy", "(", "self", ".", "class_names", "[", "cur_gt_classes", ".", "cpu", "(", ")", "-", "1", "]", "==", "anchor_class_name", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "torch", ".", "tensor", "(", "[", "self", ".", "class_names", "[", "c", "-", "1", "]", "==", "anchor_class_name", "\n", "for", "c", "in", "cur_gt_classes", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "", "if", "self", ".", "use_multihead", ":", "\n", "                    ", "anchors", "=", "anchors", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "seperate_multihead", ":", "\n", "                        ", "selected_classes", "=", "cur_gt_classes", "[", "mask", "]", ".", "clone", "(", ")", "\n", "if", "len", "(", "selected_classes", ")", ">", "0", ":", "\n", "                            ", "new_cls_id", "=", "self", ".", "gt_remapping", "[", "anchor_class_name", "]", "\n", "selected_classes", "[", ":", "]", "=", "new_cls_id", "\n", "", "", "else", ":", "\n", "                        ", "selected_classes", "=", "cur_gt_classes", "[", "mask", "]", "\n", "", "", "else", ":", "\n", "                    ", "feature_map_size", "=", "anchors", ".", "shape", "[", ":", "3", "]", "\n", "anchors", "=", "anchors", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "selected_classes", "=", "cur_gt_classes", "[", "mask", "]", "\n", "\n", "", "single_target", "=", "self", ".", "assign_targets_single", "(", "\n", "anchors", ",", "\n", "cur_gt", "[", "mask", "]", ",", "\n", "gt_classes", "=", "selected_classes", ",", "\n", "matched_threshold", "=", "self", ".", "matched_thresholds", "[", "anchor_class_name", "]", ",", "\n", "unmatched_threshold", "=", "self", ".", "unmatched_thresholds", "[", "anchor_class_name", "]", "\n", ")", "\n", "target_list", ".", "append", "(", "single_target", ")", "\n", "\n", "", "if", "self", ".", "use_multihead", ":", "\n", "                ", "target_dict", "=", "{", "\n", "'box_cls_labels'", ":", "[", "t", "[", "'box_cls_labels'", "]", ".", "view", "(", "-", "1", ")", "for", "t", "in", "target_list", "]", ",", "\n", "'box_reg_targets'", ":", "[", "t", "[", "'box_reg_targets'", "]", ".", "view", "(", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", "for", "t", "in", "target_list", "]", ",", "\n", "'reg_weights'", ":", "[", "t", "[", "'reg_weights'", "]", ".", "view", "(", "-", "1", ")", "for", "t", "in", "target_list", "]", "\n", "}", "\n", "\n", "target_dict", "[", "'box_reg_targets'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'box_reg_targets'", "]", ",", "dim", "=", "0", ")", "\n", "target_dict", "[", "'box_cls_labels'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'box_cls_labels'", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "target_dict", "[", "'reg_weights'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'reg_weights'", "]", ",", "dim", "=", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "target_dict", "=", "{", "\n", "'box_cls_labels'", ":", "[", "t", "[", "'box_cls_labels'", "]", ".", "view", "(", "*", "feature_map_size", ",", "-", "1", ")", "for", "t", "in", "target_list", "]", ",", "\n", "'box_reg_targets'", ":", "[", "t", "[", "'box_reg_targets'", "]", ".", "view", "(", "*", "feature_map_size", ",", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", "\n", "for", "t", "in", "target_list", "]", ",", "\n", "'reg_weights'", ":", "[", "t", "[", "'reg_weights'", "]", ".", "view", "(", "*", "feature_map_size", ",", "-", "1", ")", "for", "t", "in", "target_list", "]", "\n", "}", "\n", "target_dict", "[", "'box_reg_targets'", "]", "=", "torch", ".", "cat", "(", "\n", "target_dict", "[", "'box_reg_targets'", "]", ",", "dim", "=", "-", "2", "\n", ")", ".", "view", "(", "-", "1", ",", "self", ".", "box_coder", ".", "code_size", ")", "\n", "\n", "target_dict", "[", "'box_cls_labels'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'box_cls_labels'", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "target_dict", "[", "'reg_weights'", "]", "=", "torch", ".", "cat", "(", "target_dict", "[", "'reg_weights'", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "bbox_targets", ".", "append", "(", "target_dict", "[", "'box_reg_targets'", "]", ")", "\n", "cls_labels", ".", "append", "(", "target_dict", "[", "'box_cls_labels'", "]", ")", "\n", "reg_weights", ".", "append", "(", "target_dict", "[", "'reg_weights'", "]", ")", "\n", "\n", "", "bbox_targets", "=", "torch", ".", "stack", "(", "bbox_targets", ",", "dim", "=", "0", ")", "\n", "\n", "cls_labels", "=", "torch", ".", "stack", "(", "cls_labels", ",", "dim", "=", "0", ")", "\n", "reg_weights", "=", "torch", ".", "stack", "(", "reg_weights", ",", "dim", "=", "0", ")", "\n", "all_targets_dict", "=", "{", "\n", "'box_cls_labels'", ":", "cls_labels", ",", "\n", "'box_reg_targets'", ":", "bbox_targets", ",", "\n", "'reg_weights'", ":", "reg_weights", "\n", "\n", "}", "\n", "return", "all_targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.assign_targets_single": [[131, 214], ["anchors.new_zeros", "anchors.new_zeros", "torch.ones", "torch.ones", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "gt_inds_force.int", "gt_inds_over_thresh.int", "torch.arange", "torch.nonzero", "int", "axis_aligned_target_assigner.AxisAlignedTargetAssigner.box_coder.encode_torch", "len", "ops.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "utils.box_utils.boxes3d_nearest_bev_iou", "torch.nonzero", "torch.nonzero", "len", "len", "len", "torch.from_numpy", "torch.from_numpy", "len", "torch.randperm", "torch.nonzero", "len", "anchor_by_gt_overlap.cpu().numpy().argmax", "torch.arange", "anchor_by_gt_overlap.cpu().numpy().argmax", "torch.arange", "len", "torch.randint", "len", "anchor_by_gt_overlap.cpu().numpy", "anchor_by_gt_overlap.cpu().numpy", "anchor_by_gt_overlap.cpu", "anchor_by_gt_overlap.cpu"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.encode_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.iou3d_nms.iou3d_nms_utils.boxes_iou3d_gpu", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_utils.boxes3d_nearest_bev_iou"], ["", "def", "assign_targets_single", "(", "self", ",", "anchors", ",", "\n", "gt_boxes", ",", "\n", "gt_classes", ",", "\n", "matched_threshold", "=", "0.6", ",", "\n", "unmatched_threshold", "=", "0.45", "\n", ")", ":", "\n", "\n", "        ", "num_anchors", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "labels", "=", "torch", ".", "ones", "(", "(", "num_anchors", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "anchors", ".", "device", ")", "*", "-", "1", "\n", "gt_ids", "=", "torch", ".", "ones", "(", "(", "num_anchors", ",", ")", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "anchors", ".", "device", ")", "*", "-", "1", "\n", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "anchor_by_gt_overlap", "=", "iou3d_nms_utils", ".", "boxes_iou3d_gpu", "(", "anchors", "[", ":", ",", "0", ":", "7", "]", ",", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "if", "self", ".", "match_height", "else", "box_utils", ".", "boxes3d_nearest_bev_iou", "(", "anchors", "[", ":", ",", "0", ":", "7", "]", ",", "gt_boxes", "[", ":", ",", "0", ":", "7", "]", ")", "\n", "\n", "anchor_to_gt_argmax", "=", "torch", ".", "from_numpy", "(", "anchor_by_gt_overlap", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "1", ")", ")", ".", "cuda", "(", ")", "\n", "anchor_to_gt_max", "=", "anchor_by_gt_overlap", "[", "\n", "torch", ".", "arange", "(", "num_anchors", ",", "device", "=", "anchors", ".", "device", ")", ",", "anchor_to_gt_argmax", "\n", "]", "\n", "\n", "gt_to_anchor_argmax", "=", "torch", ".", "from_numpy", "(", "anchor_by_gt_overlap", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "axis", "=", "0", ")", ")", ".", "cuda", "(", ")", "\n", "gt_to_anchor_max", "=", "anchor_by_gt_overlap", "[", "gt_to_anchor_argmax", ",", "torch", ".", "arange", "(", "num_gt", ",", "device", "=", "anchors", ".", "device", ")", "]", "\n", "empty_gt_mask", "=", "gt_to_anchor_max", "==", "0", "\n", "gt_to_anchor_max", "[", "empty_gt_mask", "]", "=", "-", "1", "\n", "\n", "anchors_with_max_overlap", "=", "torch", ".", "nonzero", "(", "anchor_by_gt_overlap", "==", "gt_to_anchor_max", ")", "[", ":", ",", "0", "]", "\n", "gt_inds_force", "=", "anchor_to_gt_argmax", "[", "anchors_with_max_overlap", "]", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "gt_ids", "[", "anchors_with_max_overlap", "]", "=", "gt_inds_force", ".", "int", "(", ")", "\n", "\n", "pos_inds", "=", "anchor_to_gt_max", ">=", "matched_threshold", "\n", "gt_inds_over_thresh", "=", "anchor_to_gt_argmax", "[", "pos_inds", "]", "\n", "labels", "[", "pos_inds", "]", "=", "gt_classes", "[", "gt_inds_over_thresh", "]", "\n", "gt_ids", "[", "pos_inds", "]", "=", "gt_inds_over_thresh", ".", "int", "(", ")", "\n", "bg_inds", "=", "torch", ".", "nonzero", "(", "anchor_to_gt_max", "<", "unmatched_threshold", ")", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "bg_inds", "=", "torch", ".", "arange", "(", "num_anchors", ",", "device", "=", "anchors", ".", "device", ")", "\n", "\n", "", "fg_inds", "=", "torch", ".", "nonzero", "(", "labels", ">", "0", ")", "[", ":", ",", "0", "]", "\n", "\n", "if", "self", ".", "pos_fraction", "is", "not", "None", ":", "\n", "            ", "num_fg", "=", "int", "(", "self", ".", "pos_fraction", "*", "self", ".", "sample_size", ")", "\n", "if", "len", "(", "fg_inds", ")", ">", "num_fg", ":", "\n", "                ", "num_disabled", "=", "len", "(", "fg_inds", ")", "-", "num_fg", "\n", "disable_inds", "=", "torch", ".", "randperm", "(", "len", "(", "fg_inds", ")", ")", "[", ":", "num_disabled", "]", "\n", "labels", "[", "disable_inds", "]", "=", "-", "1", "\n", "fg_inds", "=", "torch", ".", "nonzero", "(", "labels", ">", "0", ")", "[", ":", ",", "0", "]", "\n", "\n", "", "num_bg", "=", "self", ".", "sample_size", "-", "(", "labels", ">", "0", ")", ".", "sum", "(", ")", "\n", "if", "len", "(", "bg_inds", ")", ">", "num_bg", ":", "\n", "                ", "enable_inds", "=", "bg_inds", "[", "torch", ".", "randint", "(", "0", ",", "len", "(", "bg_inds", ")", ",", "size", "=", "(", "num_bg", ",", ")", ")", "]", "\n", "labels", "[", "enable_inds", "]", "=", "0", "\n", "# bg_inds = torch.nonzero(labels == 0)[:, 0]", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "gt_boxes", ")", "==", "0", "or", "anchors", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "labels", "[", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "labels", "[", "bg_inds", "]", "=", "0", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "\n", "", "", "bbox_targets", "=", "anchors", ".", "new_zeros", "(", "(", "num_anchors", ",", "self", ".", "box_coder", ".", "code_size", ")", ")", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "fg_gt_boxes", "=", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", ":", "]", "\n", "fg_anchors", "=", "anchors", "[", "fg_inds", ",", ":", "]", "\n", "bbox_targets", "[", "fg_inds", ",", ":", "]", "=", "self", ".", "box_coder", ".", "encode_torch", "(", "fg_gt_boxes", ",", "fg_anchors", ")", "\n", "\n", "", "reg_weights", "=", "anchors", ".", "new_zeros", "(", "(", "num_anchors", ",", ")", ")", "\n", "\n", "if", "self", ".", "norm_by_num_examples", ":", "\n", "            ", "num_examples", "=", "(", "labels", ">=", "0", ")", ".", "sum", "(", ")", "\n", "num_examples", "=", "num_examples", "if", "num_examples", ">", "1.0", "else", "1.0", "\n", "reg_weights", "[", "labels", ">", "0", "]", "=", "1.0", "/", "num_examples", "\n", "", "else", ":", "\n", "            ", "reg_weights", "[", "labels", ">", "0", "]", "=", "1.0", "\n", "\n", "", "ret_dict", "=", "{", "\n", "'box_cls_labels'", ":", "labels", ",", "\n", "'box_reg_targets'", ":", "bbox_targets", ",", "\n", "'reg_weights'", ":", "reg_weights", ",", "\n", "}", "\n", "return", "ret_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_single.AnchorHeadSingle.__init__": [[8, 36], ["anchor_head_template.AnchorHeadTemplate.__init__", "sum", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "anchor_head_single.AnchorHeadSingle.init_weights", "anchor_head_single.AnchorHeadSingle.model_cfg.get", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "input_channels", ",", "num_class", ",", "class_names", ",", "grid_size", ",", "point_cloud_range", ",", "\n", "predict_boxes_when_training", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "model_cfg", "=", "model_cfg", ",", "num_class", "=", "num_class", ",", "class_names", "=", "class_names", ",", "grid_size", "=", "grid_size", ",", "point_cloud_range", "=", "point_cloud_range", ",", "\n", "predict_boxes_when_training", "=", "predict_boxes_when_training", "\n", ")", "\n", "self", ".", "real_pred_box_coder_size", "=", "self", ".", "box_coder", ".", "code_size", "\n", "\n", "self", ".", "num_anchors_per_location", "=", "sum", "(", "self", ".", "num_anchors_per_location", ")", "\n", "\n", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "num_anchors_per_location", "*", "self", ".", "num_class", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "self", ".", "conv_box", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "num_anchors_per_location", "*", "self", ".", "real_pred_box_coder_size", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "\n", "if", "self", ".", "model_cfg", ".", "get", "(", "'USE_DIRECTION_CLASSIFIER'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "\n", "self", ".", "num_anchors_per_location", "*", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "None", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_single.AnchorHeadSingle.init_weights": [[37, 41], ["torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "numpy.log"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pi", "=", "0.01", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_cls", ".", "bias", ",", "-", "np", ".", "log", "(", "(", "1", "-", "pi", ")", "/", "pi", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv_box", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_single.AnchorHeadSingle.forward": [[42, 83], ["anchor_head_single.AnchorHeadSingle.conv_cls", "anchor_head_single.AnchorHeadSingle.conv_box", "cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "box_preds.permute().contiguous.permute().contiguous.permute().contiguous", "anchor_head_single.AnchorHeadSingle.conv_dir_cls", "dir_cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "anchor_head_single.AnchorHeadSingle.assign_targets", "anchor_head_single.AnchorHeadSingle.forward_ret_dict.update", "anchor_head_single.AnchorHeadSingle.generate_predicted_boxes", "cls_preds.permute().contiguous.permute().contiguous.permute", "box_preds.permute().contiguous.permute().contiguous.permute", "dir_cls_preds.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.assign_targets", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "spatial_features_2d", "=", "data_dict", "[", "'spatial_features_2d'", "]", "\n", "\n", "cls_preds", "=", "self", ".", "conv_cls", "(", "spatial_features_2d", ")", "# [2, 2, 200, 176]", "\n", "box_preds", "=", "self", ".", "conv_box", "(", "spatial_features_2d", ")", "\n", "\n", "# if not self.size_reg:", "\n", "#     B, _, H, W  = list(box_preds.shape)", "\n", "#     box_preds = box_preds.view(B, self.num_anchors_per_location, self.real_pred_box_coder_size, H, W)", "\n", "#     box_preds = torch.cat([box_preds[:,:,:3,...], torch.zeros_like(box_preds[:,:,:3,...], dtype=box_preds.dtype, device=box_preds.device), box_preds[:,:,-1:,...]], dim=2).view(B, self.num_anchors_per_location * self.box_coder.code_size, H, W)", "\n", "\n", "cls_preds", "=", "cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "# [N, H, W, C]", "\n", "box_preds", "=", "box_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "# [N, H, W, C]", "\n", "# print(\"cls_preds\", cls_preds.shape, self.num_anchors_per_location)", "\n", "self", ".", "forward_ret_dict", "[", "'cls_preds'", "]", "=", "cls_preds", "\n", "self", ".", "forward_ret_dict", "[", "'box_preds'", "]", "=", "box_preds", "\n", "\n", "if", "self", ".", "conv_dir_cls", "is", "not", "None", ":", "\n", "            ", "dir_cls_preds", "=", "self", ".", "conv_dir_cls", "(", "spatial_features_2d", ")", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "forward_ret_dict", "[", "'dir_cls_preds'", "]", "=", "dir_cls_preds", "\n", "", "else", ":", "\n", "            ", "dir_cls_preds", "=", "None", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "targets_dict", "=", "self", ".", "assign_targets", "(", "\n", "gt_boxes", "=", "data_dict", "[", "'gt_boxes'", "]", "\n", ")", "\n", "self", ".", "forward_ret_dict", ".", "update", "(", "targets_dict", ")", "\n", "\n", "", "if", "not", "self", ".", "training", "or", "self", ".", "predict_boxes_when_training", ":", "\n", "            ", "batch_cls_preds", ",", "batch_box_preds", "=", "self", ".", "generate_predicted_boxes", "(", "\n", "batch_size", "=", "data_dict", "[", "'batch_size'", "]", ",", "\n", "cls_preds", "=", "cls_preds", ",", "box_preds", "=", "box_preds", ",", "dir_cls_preds", "=", "dir_cls_preds", "\n", ")", "\n", "data_dict", "[", "'batch_cls_preds'", "]", "=", "batch_cls_preds", "\n", "data_dict", "[", "'batch_box_preds'", "]", "=", "batch_box_preds", "\n", "data_dict", "[", "'cls_preds_normalized'", "]", "=", "False", "\n", "# anchors = torch.cat(self.anchors, dim=-3)", "\n", "# data_dict[\"anchors\"] = anchors.view(-1, anchors.shape[-1])", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.__init__": [[12, 36], ["torch.Module.__init__", "anchor_head_template.AnchorHeadTemplate.model_cfg.get", "anchor_head_template.AnchorHeadTemplate.generate_anchors", "anchor_head_template.AnchorHeadTemplate.get_target_assigner", "anchor_head_template.AnchorHeadTemplate.build_losses", "getattr", "x.cuda", "anchor_target_cfg.get", "anchor_target_cfg.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_anchors", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_target_assigner", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.build_losses"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "num_class", ",", "class_names", ",", "grid_size", ",", "point_cloud_range", ",", "predict_boxes_when_training", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "predict_boxes_when_training", "=", "predict_boxes_when_training", "\n", "self", ".", "use_multihead", "=", "self", ".", "model_cfg", ".", "get", "(", "'USE_MULTIHEAD'", ",", "False", ")", "\n", "\n", "anchor_target_cfg", "=", "self", ".", "model_cfg", ".", "TARGET_ASSIGNER_CONFIG", "\n", "self", ".", "box_coder", "=", "getattr", "(", "box_coder_utils", ",", "anchor_target_cfg", ".", "BOX_CODER", ")", "(", "\n", "num_dir_bins", "=", "anchor_target_cfg", ".", "get", "(", "'NUM_DIR_BINS'", ",", "6", ")", ",", "\n", "**", "anchor_target_cfg", ".", "get", "(", "'BOX_CODER_CONFIG'", ",", "{", "}", ")", "\n", ")", "\n", "\n", "anchor_generator_cfg", "=", "self", ".", "model_cfg", ".", "ANCHOR_GENERATOR_CONFIG", "\n", "anchors", ",", "self", ".", "num_anchors_per_location", "=", "self", ".", "generate_anchors", "(", "\n", "anchor_generator_cfg", ",", "grid_size", "=", "grid_size", ",", "point_cloud_range", "=", "point_cloud_range", ",", "\n", "anchor_ndim", "=", "self", ".", "box_coder", ".", "code_size", "\n", ")", "\n", "self", ".", "anchors", "=", "[", "x", ".", "cuda", "(", ")", "for", "x", "in", "anchors", "]", "\n", "self", ".", "target_assigner", "=", "self", ".", "get_target_assigner", "(", "anchor_target_cfg", ")", "\n", "\n", "self", ".", "forward_ret_dict", "=", "{", "}", "\n", "self", ".", "build_losses", "(", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_anchors": [[37, 54], ["target_assigner.anchor_generator.AnchorGenerator", "target_assigner.anchor_generator.AnchorGenerator.generate_anchors", "enumerate", "anchors.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_anchors"], ["", "@", "staticmethod", "\n", "def", "generate_anchors", "(", "anchor_generator_cfg", ",", "grid_size", ",", "point_cloud_range", ",", "anchor_ndim", "=", "7", ")", ":", "\n", "        ", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "anchor_range", "=", "point_cloud_range", ",", "\n", "anchor_generator_config", "=", "anchor_generator_cfg", "\n", ")", "\n", "feature_map_size", "=", "[", "grid_size", "[", ":", "2", "]", "//", "config", "[", "'feature_map_stride'", "]", "for", "config", "in", "anchor_generator_cfg", "]", "\n", "# print(\"anchor feature_map_size\", feature_map_size)", "\n", "anchors_list", ",", "num_anchors_per_location_list", "=", "anchor_generator", ".", "generate_anchors", "(", "feature_map_size", ")", "\n", "\n", "if", "anchor_ndim", "!=", "7", ":", "\n", "            ", "for", "idx", ",", "anchors", "in", "enumerate", "(", "anchors_list", ")", ":", "\n", "                ", "pad_zeros", "=", "anchors", ".", "new_zeros", "(", "[", "*", "anchors", ".", "shape", "[", "0", ":", "-", "1", "]", ",", "anchor_ndim", "-", "7", "]", ")", "\n", "new_anchors", "=", "torch", ".", "cat", "(", "(", "anchors", ",", "pad_zeros", ")", ",", "dim", "=", "-", "1", ")", "\n", "anchors_list", "[", "idx", "]", "=", "new_anchors", "\n", "\n", "", "", "return", "anchors_list", ",", "num_anchors_per_location_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_target_assigner": [[55, 73], ["target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.atss_target_assigner.ATSSTargetAssigner", "target_assigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner.axis_aligned_target_assigner.AxisAlignedTargetAssigner"], "methods", ["None"], ["", "def", "get_target_assigner", "(", "self", ",", "anchor_target_cfg", ")", ":", "\n", "        ", "if", "anchor_target_cfg", ".", "NAME", "==", "'ATSS'", ":", "\n", "            ", "target_assigner", "=", "ATSSTargetAssigner", "(", "\n", "topk", "=", "anchor_target_cfg", ".", "TOPK", ",", "\n", "box_coder", "=", "self", ".", "box_coder", ",", "\n", "use_multihead", "=", "self", ".", "use_multihead", ",", "\n", "match_height", "=", "anchor_target_cfg", ".", "MATCH_HEIGHT", "\n", ")", "\n", "", "elif", "anchor_target_cfg", ".", "NAME", "==", "'AxisAlignedTargetAssigner'", ":", "\n", "            ", "target_assigner", "=", "AxisAlignedTargetAssigner", "(", "\n", "model_cfg", "=", "self", ".", "model_cfg", ",", "\n", "class_names", "=", "self", ".", "class_names", ",", "\n", "box_coder", "=", "self", ".", "box_coder", ",", "\n", "match_height", "=", "anchor_target_cfg", ".", "MATCH_HEIGHT", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "target_assigner", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.build_losses": [[74, 88], ["anchor_head_template.AnchorHeadTemplate.add_module", "anchor_head_template.AnchorHeadTemplate.add_module", "anchor_head_template.AnchorHeadTemplate.add_module", "utils.loss_utils.SigmoidFocalClassificationLoss", "utils.loss_utils.WeightedCrossEntropyLoss", "losses_cfg.get", "getattr"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ",", "losses_cfg", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "'cls_loss_func'", ",", "\n", "loss_utils", ".", "SigmoidFocalClassificationLoss", "(", "alpha", "=", "0.25", ",", "gamma", "=", "2.0", ")", "\n", ")", "\n", "reg_loss_name", "=", "'WeightedSmoothL1Loss'", "if", "losses_cfg", ".", "get", "(", "'REG_LOSS_TYPE'", ",", "None", ")", "is", "None", "else", "losses_cfg", ".", "REG_LOSS_TYPE", "\n", "self", ".", "add_module", "(", "\n", "'reg_loss_func'", ",", "\n", "getattr", "(", "loss_utils", ",", "reg_loss_name", ")", "(", "code_weights", "=", "losses_cfg", ".", "LOSS_WEIGHTS", "[", "'code_weights'", "]", ")", "\n", ")", "\n", "self", ".", "add_module", "(", "\n", "'dir_loss_func'", ",", "\n", "loss_utils", ".", "WeightedCrossEntropyLoss", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.assign_targets": [[90, 101], ["anchor_head_template.AnchorHeadTemplate.target_assigner.assign_targets"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.assign_targets"], ["", "def", "assign_targets", "(", "self", ",", "gt_boxes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gt_boxes: (B, M, 8)\n        Returns:\n\n        \"\"\"", "\n", "targets_dict", "=", "self", ".", "target_assigner", ".", "assign_targets", "(", "\n", "self", ".", "anchors", ",", "gt_boxes", "\n", ")", "\n", "return", "targets_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_cls_layer_loss": [[102, 138], ["int", "positives.float", "positives.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "cls_targets.squeeze.squeeze.unsqueeze", "cls_targets.squeeze.squeeze.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "cls_preds.view.view.view", "anchor_head_template.AnchorHeadTemplate.cls_loss_func", "cared.type_as", "cls_targets.squeeze.squeeze.unsqueeze().long", "anchor_head_template.AnchorHeadTemplate.sum", "cls_loss.item", "positives.sum", "list", "cls_targets.squeeze.squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "get_cls_layer_loss", "(", "self", ")", ":", "\n", "        ", "cls_preds", "=", "self", ".", "forward_ret_dict", "[", "'cls_preds'", "]", "\n", "box_cls_labels", "=", "self", ".", "forward_ret_dict", "[", "'box_cls_labels'", "]", "\n", "batch_size", "=", "int", "(", "cls_preds", ".", "shape", "[", "0", "]", ")", "\n", "cared", "=", "box_cls_labels", ">=", "0", "# [N, num_anchors]", "\n", "positives", "=", "box_cls_labels", ">", "0", "\n", "negatives", "=", "box_cls_labels", "==", "0", "\n", "negative_cls_weights", "=", "negatives", "*", "1.0", "\n", "cls_weights", "=", "(", "negative_cls_weights", "+", "1.0", "*", "positives", ")", ".", "float", "(", ")", "\n", "reg_weights", "=", "positives", ".", "float", "(", ")", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "# class agnostic", "\n", "            ", "box_cls_labels", "[", "positives", "]", "=", "1", "\n", "\n", "", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_targets", "=", "box_cls_labels", "*", "cared", ".", "type_as", "(", "box_cls_labels", ")", "\n", "cls_targets", "=", "cls_targets", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "\n", "cls_targets", "=", "cls_targets", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "one_hot_targets", "=", "torch", ".", "zeros", "(", "\n", "*", "list", "(", "cls_targets", ".", "shape", ")", ",", "self", ".", "num_class", "+", "1", ",", "dtype", "=", "cls_preds", ".", "dtype", ",", "device", "=", "cls_targets", ".", "device", "\n", ")", "\n", "one_hot_targets", ".", "scatter_", "(", "-", "1", ",", "cls_targets", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "long", "(", ")", ",", "1.0", ")", "\n", "cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_class", ")", "\n", "one_hot_targets", "=", "one_hot_targets", "[", "...", ",", "1", ":", "]", "\n", "# print(\"cls_preds.shape, one_hot_targets.shape\", cls_preds.shape, one_hot_targets.shape)", "\n", "cls_loss_src", "=", "self", ".", "cls_loss_func", "(", "cls_preds", ",", "one_hot_targets", ",", "weights", "=", "cls_weights", ")", "# [N, M]", "\n", "cls_loss", "=", "cls_loss_src", ".", "sum", "(", ")", "/", "batch_size", "\n", "\n", "cls_loss", "=", "cls_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'cls_weight'", "]", "\n", "tb_dict", "=", "{", "\n", "'rpn_loss_cls'", ":", "cls_loss", ".", "item", "(", ")", "\n", "}", "\n", "return", "cls_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.add_sin_difference": [[139, 147], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_sin_difference", "(", "boxes1", ",", "boxes2", ",", "dim", "=", "6", ")", ":", "\n", "        ", "assert", "dim", "!=", "-", "1", "\n", "rad_pred_encoding", "=", "torch", ".", "sin", "(", "boxes1", "[", "...", ",", "dim", ":", "dim", "+", "1", "]", ")", "*", "torch", ".", "cos", "(", "boxes2", "[", "...", ",", "dim", ":", "dim", "+", "1", "]", ")", "\n", "rad_tg_encoding", "=", "torch", ".", "cos", "(", "boxes1", "[", "...", ",", "dim", ":", "dim", "+", "1", "]", ")", "*", "torch", ".", "sin", "(", "boxes2", "[", "...", ",", "dim", ":", "dim", "+", "1", "]", ")", "\n", "boxes1", "=", "torch", ".", "cat", "(", "[", "boxes1", "[", "...", ",", ":", "dim", "]", ",", "rad_pred_encoding", ",", "boxes1", "[", "...", ",", "dim", "+", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "boxes2", "=", "torch", ".", "cat", "(", "[", "boxes2", "[", "...", ",", ":", "dim", "]", ",", "rad_tg_encoding", ",", "boxes2", "[", "...", ",", "dim", "+", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "boxes1", ",", "boxes2", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_direction_target": [[148, 163], ["anchors.view.view.view", "utils.common_utils.limit_period", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp.unsqueeze().long", "torch.clamp.unsqueeze().long", "list", "torch.clamp.unsqueeze", "torch.clamp.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.limit_period", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "@", "staticmethod", "\n", "def", "get_direction_target", "(", "anchors", ",", "reg_targets", ",", "one_hot", "=", "True", ",", "dir_offset", "=", "0", ",", "num_bins", "=", "2", ")", ":", "\n", "        ", "batch_size", "=", "reg_targets", ".", "shape", "[", "0", "]", "\n", "anchors", "=", "anchors", ".", "view", "(", "batch_size", ",", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", "\n", "rot_gt", "=", "reg_targets", "[", "...", ",", "6", "]", "+", "anchors", "[", "...", ",", "6", "]", "\n", "offset_rot", "=", "common_utils", ".", "limit_period", "(", "rot_gt", "-", "dir_offset", ",", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "dir_cls_targets", "=", "torch", ".", "floor", "(", "offset_rot", "/", "(", "2", "*", "np", ".", "pi", "/", "num_bins", ")", ")", ".", "long", "(", ")", "\n", "dir_cls_targets", "=", "torch", ".", "clamp", "(", "dir_cls_targets", ",", "min", "=", "0", ",", "max", "=", "num_bins", "-", "1", ")", "\n", "\n", "if", "one_hot", ":", "\n", "            ", "dir_targets", "=", "torch", ".", "zeros", "(", "*", "list", "(", "dir_cls_targets", ".", "shape", ")", ",", "num_bins", ",", "dtype", "=", "anchors", ".", "dtype", ",", "\n", "device", "=", "dir_cls_targets", ".", "device", ")", "\n", "dir_targets", ".", "scatter_", "(", "-", "1", ",", "dir_cls_targets", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "long", "(", ")", ",", "1.0", ")", "\n", "dir_cls_targets", "=", "dir_targets", "\n", "", "return", "dir_cls_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_box_reg_layer_loss": [[164, 217], ["anchor_head_template.AnchorHeadTemplate.forward_ret_dict.get", "int", "positives.float", "positives.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "isinstance", "torch.cat.view().repeat", "torch.cat.view().repeat", "box_preds.view.view.view", "anchor_head_template.AnchorHeadTemplate.add_sin_difference", "anchor_head_template.AnchorHeadTemplate.reg_loss_func", "anchor_head_template.AnchorHeadTemplate.sum", "loc_loss.item", "anchor_head_template.AnchorHeadTemplate.get_direction_target", "anchor_head_template.AnchorHeadTemplate.view", "positives.type_as", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "anchor_head_template.AnchorHeadTemplate.dir_loss_func", "anchor_head_template.AnchorHeadTemplate.item", "positives.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "positives.type_as.sum", "anchor_head_template.AnchorHeadTemplate.sum", "anchor.permute().contiguous().view", "anchor.permute().contiguous", "anchor.permute"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.add_sin_difference", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_direction_target", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "get_box_reg_layer_loss", "(", "self", ")", ":", "\n", "        ", "box_preds", "=", "self", ".", "forward_ret_dict", "[", "'box_preds'", "]", "\n", "box_dir_cls_preds", "=", "self", ".", "forward_ret_dict", ".", "get", "(", "'dir_cls_preds'", ",", "None", ")", "\n", "box_reg_targets", "=", "self", ".", "forward_ret_dict", "[", "'box_reg_targets'", "]", "\n", "box_cls_labels", "=", "self", ".", "forward_ret_dict", "[", "'box_cls_labels'", "]", "\n", "batch_size", "=", "int", "(", "box_preds", ".", "shape", "[", "0", "]", ")", "\n", "\n", "positives", "=", "box_cls_labels", ">", "0", "\n", "reg_weights", "=", "positives", ".", "float", "(", ")", "\n", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "anchors", ",", "list", ")", ":", "\n", "            ", "if", "self", ".", "use_multihead", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "\n", "[", "anchor", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchor", ".", "shape", "[", "-", "1", "]", ")", "for", "anchor", "in", "\n", "self", ".", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "self", ".", "anchors", ",", "dim", "=", "-", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "anchors", "=", "self", ".", "anchors", "\n", "", "anchors", "=", "anchors", ".", "view", "(", "1", ",", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "\n", "box_preds", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "num_anchors_per_location", "if", "not", "self", ".", "use_multihead", "else", "\n", "box_preds", ".", "shape", "[", "-", "1", "]", ")", "\n", "# sin(a - b) = sinacosb-cosasinb", "\n", "box_preds_sin", ",", "reg_targets_sin", "=", "self", ".", "add_sin_difference", "(", "box_preds", ",", "box_reg_targets", ")", "\n", "loc_loss_src", "=", "self", ".", "reg_loss_func", "(", "box_preds_sin", ",", "reg_targets_sin", ",", "weights", "=", "reg_weights", ")", "# [N, M]", "\n", "loc_loss", "=", "loc_loss_src", ".", "sum", "(", ")", "/", "batch_size", "\n", "\n", "loc_loss", "=", "loc_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'loc_weight'", "]", "\n", "box_loss", "=", "loc_loss", "\n", "tb_dict", "=", "{", "\n", "'rpn_loss_loc'", ":", "loc_loss", ".", "item", "(", ")", "\n", "}", "\n", "\n", "if", "box_dir_cls_preds", "is", "not", "None", ":", "\n", "            ", "dir_targets", "=", "self", ".", "get_direction_target", "(", "\n", "anchors", ",", "box_reg_targets", ",", "\n", "dir_offset", "=", "self", ".", "model_cfg", ".", "DIR_OFFSET", ",", "\n", "num_bins", "=", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", "\n", ")", "\n", "\n", "dir_logits", "=", "box_dir_cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ")", "\n", "weights", "=", "positives", ".", "type_as", "(", "dir_logits", ")", "\n", "weights", "/=", "torch", ".", "clamp", "(", "weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1.0", ")", "\n", "dir_loss", "=", "self", ".", "dir_loss_func", "(", "dir_logits", ",", "dir_targets", ",", "weights", "=", "weights", ")", "\n", "dir_loss", "=", "dir_loss", ".", "sum", "(", ")", "/", "batch_size", "\n", "dir_loss", "=", "dir_loss", "*", "self", ".", "model_cfg", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "'dir_weight'", "]", "\n", "box_loss", "+=", "dir_loss", "\n", "tb_dict", "[", "'rpn_loss_dir'", "]", "=", "dir_loss", ".", "item", "(", ")", "\n", "\n", "", "return", "box_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_loss": [[218, 226], ["anchor_head_template.AnchorHeadTemplate.get_cls_layer_loss", "anchor_head_template.AnchorHeadTemplate.get_box_reg_layer_loss", "tb_dict.update", "rpn_loss.item"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_cls_layer_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.get_box_reg_layer_loss"], ["", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "cls_loss", ",", "tb_dict", "=", "self", ".", "get_cls_layer_loss", "(", ")", "\n", "box_loss", ",", "tb_dict_box", "=", "self", ".", "get_box_reg_layer_loss", "(", ")", "\n", "tb_dict", ".", "update", "(", "tb_dict_box", ")", "\n", "rpn_loss", "=", "cls_loss", "+", "box_loss", "\n", "\n", "tb_dict", "[", "'rpn_loss'", "]", "=", "rpn_loss", ".", "item", "(", ")", "\n", "return", "rpn_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.generate_predicted_boxes": [[227, 275], ["isinstance", "torch.cat.view().repeat", "torch.cat.view().repeat", "anchor_head_template.AnchorHeadTemplate.box_coder.decode_torch", "isinstance", "cls_preds.view().float", "box_preds.view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "utils.common_utils.limit_period", "utils.common_utils.limit_period", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "isinstance", "isinstance", "dir_cls_preds.view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.max", "torch.max", "torch.max", "torch.max", "cls_preds.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "dir_labels.to", "anchor.permute().contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "anchor.permute().contiguous", "anchor.permute"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.box_coder_utils.PointResidualCoder.decode_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.limit_period", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.limit_period"], ["", "def", "generate_predicted_boxes", "(", "self", ",", "batch_size", ",", "cls_preds", ",", "box_preds", ",", "dir_cls_preds", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_size:\n            cls_preds: (N, H, W, C1)\n            box_preds: (N, H, W, C2)\n            dir_cls_preds: (N, H, W, C3)\n\n        Returns:\n            batch_cls_preds: (B, num_boxes, num_classes)\n            batch_box_preds: (B, num_boxes, 7+C)\n\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "anchors", ",", "list", ")", ":", "\n", "            ", "if", "self", ".", "use_multihead", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "[", "anchor", ".", "permute", "(", "3", ",", "4", ",", "0", ",", "1", ",", "2", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "anchor", ".", "shape", "[", "-", "1", "]", ")", "\n", "for", "anchor", "in", "self", ".", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "anchors", "=", "torch", ".", "cat", "(", "self", ".", "anchors", ",", "dim", "=", "-", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "anchors", "=", "self", ".", "anchors", "\n", "", "num_anchors", "=", "anchors", ".", "view", "(", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", ".", "shape", "[", "0", "]", "\n", "batch_anchors", "=", "anchors", ".", "view", "(", "1", ",", "-", "1", ",", "anchors", ".", "shape", "[", "-", "1", "]", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "batch_cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", ".", "float", "(", ")", "if", "not", "isinstance", "(", "cls_preds", ",", "list", ")", "else", "cls_preds", "\n", "batch_box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", "if", "not", "isinstance", "(", "box_preds", ",", "list", ")", "else", "torch", ".", "cat", "(", "box_preds", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", "\n", "batch_box_preds", "=", "self", ".", "box_coder", ".", "decode_torch", "(", "batch_box_preds", ",", "batch_anchors", ")", "\n", "\n", "if", "dir_cls_preds", "is", "not", "None", ":", "\n", "            ", "dir_offset", "=", "self", ".", "model_cfg", ".", "DIR_OFFSET", "\n", "dir_limit_offset", "=", "self", ".", "model_cfg", ".", "DIR_LIMIT_OFFSET", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", "if", "not", "isinstance", "(", "dir_cls_preds", ",", "list", ")", "else", "torch", ".", "cat", "(", "dir_cls_preds", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "num_anchors", ",", "-", "1", ")", "\n", "dir_labels", "=", "torch", ".", "max", "(", "dir_cls_preds", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "\n", "period", "=", "(", "2", "*", "np", ".", "pi", "/", "self", ".", "model_cfg", ".", "NUM_DIR_BINS", ")", "\n", "dir_rot", "=", "common_utils", ".", "limit_period", "(", "\n", "batch_box_preds", "[", "...", ",", "6", "]", "-", "dir_offset", ",", "dir_limit_offset", ",", "period", "\n", ")", "\n", "batch_box_preds", "[", "...", ",", "6", "]", "=", "dir_rot", "+", "dir_offset", "+", "period", "*", "dir_labels", ".", "to", "(", "batch_box_preds", ".", "dtype", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "box_coder", ",", "box_coder_utils", ".", "PreviousResidualDecoder", ")", ":", "\n", "            ", "batch_box_preds", "[", "...", ",", "6", "]", "=", "common_utils", ".", "limit_period", "(", "\n", "-", "(", "batch_box_preds", "[", "...", ",", "6", "]", "+", "np", ".", "pi", "/", "2", ")", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", "*", "2", "\n", ")", "\n", "\n", "", "return", "batch_cls_preds", ",", "batch_box_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.dense_heads.anchor_head_template.AnchorHeadTemplate.forward": [[276, 278], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.model_utils.model_nms_utils.class_agnostic_nms": [[6, 26], ["torch.topk", "torch.nonzero().view", "getattr", "min", "torch.nonzero"], "function", ["None"], ["def", "class_agnostic_nms", "(", "box_scores", ",", "box_preds", ",", "nms_config", ",", "score_thresh", "=", "None", ")", ":", "\n", "    ", "src_box_scores", "=", "box_scores", "\n", "if", "score_thresh", "is", "not", "None", ":", "\n", "        ", "scores_mask", "=", "(", "box_scores", ">=", "score_thresh", ")", "\n", "box_scores", "=", "box_scores", "[", "scores_mask", "]", "\n", "box_preds", "=", "box_preds", "[", "scores_mask", "]", "\n", "\n", "", "selected", "=", "[", "]", "\n", "if", "box_scores", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "box_scores_nms", ",", "indices", "=", "torch", ".", "topk", "(", "box_scores", ",", "k", "=", "min", "(", "nms_config", ".", "NMS_PRE_MAXSIZE", ",", "box_scores", ".", "shape", "[", "0", "]", ")", ")", "\n", "boxes_for_nms", "=", "box_preds", "[", "indices", "]", "\n", "keep_idx", ",", "selected_scores", "=", "getattr", "(", "iou3d_nms_utils", ",", "nms_config", ".", "NMS_TYPE", ")", "(", "\n", "boxes_for_nms", "[", ":", ",", "0", ":", "7", "]", ",", "box_scores_nms", ",", "nms_config", ".", "NMS_THRESH", ",", "**", "nms_config", "\n", ")", "\n", "selected", "=", "indices", "[", "keep_idx", "[", ":", "nms_config", ".", "NMS_POST_MAXSIZE", "]", "]", "\n", "\n", "", "if", "score_thresh", "is", "not", "None", ":", "\n", "        ", "original_idxs", "=", "torch", ".", "nonzero", "(", "scores_mask", ")", ".", "view", "(", "-", "1", ")", "\n", "selected", "=", "original_idxs", "[", "selected", "]", "\n", "", "return", "selected", ",", "src_box_scores", "[", "selected", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.model_utils.model_nms_utils.multi_classes_nms": [[28, 66], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.topk", "getattr", "box_scores.new_ones().long", "min", "box_scores.new_ones", "len"], "function", ["None"], ["", "def", "multi_classes_nms", "(", "cls_scores", ",", "box_preds", ",", "nms_config", ",", "score_thresh", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        cls_scores: (N, num_class)\n        box_preds: (N, 7 + C)\n        nms_config:\n        score_thresh:\n\n    Returns:\n\n    \"\"\"", "\n", "pred_scores", ",", "pred_labels", ",", "pred_boxes", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "range", "(", "cls_scores", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "score_thresh", "is", "not", "None", ":", "\n", "            ", "scores_mask", "=", "(", "cls_scores", "[", ":", ",", "k", "]", ">=", "score_thresh", ")", "\n", "box_scores", "=", "cls_scores", "[", "scores_mask", ",", "k", "]", "\n", "cur_box_preds", "=", "box_preds", "[", "scores_mask", "]", "\n", "", "else", ":", "\n", "            ", "box_scores", "=", "cls_scores", "[", ":", ",", "k", "]", "\n", "\n", "", "selected", "=", "[", "]", "\n", "if", "box_scores", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "box_scores_nms", ",", "indices", "=", "torch", ".", "topk", "(", "box_scores", ",", "k", "=", "min", "(", "nms_config", ".", "NMS_PRE_MAXSIZE", ",", "box_scores", ".", "shape", "[", "0", "]", ")", ")", "\n", "boxes_for_nms", "=", "cur_box_preds", "[", "indices", "]", "\n", "keep_idx", ",", "selected_scores", "=", "getattr", "(", "iou3d_nms_utils", ",", "nms_config", ".", "NMS_TYPE", ")", "(", "\n", "boxes_for_nms", "[", ":", ",", "0", ":", "7", "]", ",", "box_scores_nms", ",", "nms_config", ".", "NMS_THRESH", ",", "**", "nms_config", "\n", ")", "\n", "selected", "=", "indices", "[", "keep_idx", "[", ":", "nms_config", ".", "NMS_POST_MAXSIZE", "]", "]", "\n", "\n", "", "pred_scores", ".", "append", "(", "box_scores", "[", "selected", "]", ")", "\n", "pred_labels", ".", "append", "(", "box_scores", ".", "new_ones", "(", "len", "(", "selected", ")", ")", ".", "long", "(", ")", "*", "k", ")", "\n", "pred_boxes", ".", "append", "(", "cur_box_preds", "[", "selected", "]", ")", "\n", "\n", "", "pred_scores", "=", "torch", ".", "cat", "(", "pred_scores", ",", "dim", "=", "0", ")", "\n", "pred_labels", "=", "torch", ".", "cat", "(", "pred_labels", ",", "dim", "=", "0", ")", "\n", "pred_boxes", "=", "torch", ".", "cat", "(", "pred_boxes", ",", "dim", "=", "0", ")", "\n", "\n", "return", "pred_scores", ",", "pred_labels", ",", "pred_boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.pass_occ_vox.PassOccVox.__init__": [[7, 9], ["add_occ_template.AddOccTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "data_cfg", ",", "point_cloud_range", ",", "occ_voxel_size", ",", "occ_grid_size", ",", "det_voxel_size", ",", "det_grid_size", ",", "mode", ",", "voxel_centers", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", ",", "data_cfg", ",", "point_cloud_range", ",", "occ_voxel_size", ",", "occ_grid_size", ",", "det_voxel_size", ",", "det_grid_size", ",", "mode", ",", "voxel_centers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.pass_occ_vox.PassOccVox.forward": [[10, 60], ["list", "pass_occ_vox.PassOccVox.filter_occ_points", "voxel_features.size", "len", "pass_occ_vox.PassOccVox.occ_coords2absxyz", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pass_occ_vox.PassOccVox.trans_voxel_grid", "pass_occ_vox.PassOccVox.assemble_occ_points", "pass_occ_vox.PassOccVox.assemble_gt_vox_points", "pass_occ_vox.PassOccVox.combine_gt_occ_voxel_point", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batch_dict[].detach", "batch_dict[].detach", "batch_dict[].detach", "batch_dict[].detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pass_occ_vox.PassOccVox.db_proj_func", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occ_probs.unsqueeze", "len"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.filter_occ_points", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.occ_coords2absxyz", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.trans_voxel_grid", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.assemble_occ_points", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.assemble_gt_vox_points", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.combine_gt_occ_voxel_point", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.db_proj_func"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "voxel_features", ",", "voxel_num_points", ",", "coords", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "\n", "'voxel_coords'", "]", "\n", "_", ",", "_", ",", "pnt_feat_dim", "=", "list", "(", "voxel_features", ".", "size", "(", ")", ")", "\n", "\n", "batch_size", ",", "pre_occ_probs", "=", "batch_dict", "[", "'batch_size'", "]", ",", "batch_dict", "[", "'batch_pred_occ_prob'", "]", "\n", "res_lst", ",", "probs_lst", ",", "occ_coords_lst", "=", "self", ".", "filter_occ_points", "(", "batch_size", ",", "pre_occ_probs", ",", "batch_dict", ")", "\n", "batch_dict", "[", "\"added_occ_xyz\"", "]", "=", "None", "\n", "batch_dict", "[", "\"occ_pnts\"", "]", "=", "None", "\n", "batch_dict", "[", "\"added_occ_b_ind\"", "]", "=", "None", "\n", "# debug", "\n", "# valid_inds=torch.nonzero(batch_dict[\"voxel_point_mask\"])", "\n", "# batch_dict[\"gt_points_xyz\"] = voxel_features[valid_inds[:, 0], valid_inds[:, 1]][...,:3]", "\n", "# batch_dict[\"gt_b_ind\"] = coords[valid_inds[:, 0]][...,0]", "\n", "batch_dict", "[", "\"gt_points_xyz\"", "]", "=", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "1", ":", "4", "]", "\n", "batch_dict", "[", "\"gt_b_ind\"", "]", "=", "batch_dict", "[", "\"points\"", "]", "[", "...", ",", "0", "]", "\n", "\n", "if", "'det_voxel_coords'", "in", "batch_dict", ":", "\n", "            ", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "=", "batch_dict", "[", "'det_voxels'", "]", ",", "batch_dict", "[", "'det_voxel_num_points'", "]", ",", "batch_dict", "[", "'det_voxel_coords'", "]", "\n", "\n", "", "if", "len", "(", "probs_lst", ")", ">", "0", ":", "\n", "            ", "occ_probs", "=", "probs_lst", "[", "0", "]", "if", "len", "(", "probs_lst", ")", "==", "1", "else", "torch", ".", "cat", "(", "probs_lst", ",", "axis", "=", "0", ")", "\n", "occ_coords", "=", "occ_coords_lst", "[", "0", "]", "if", "len", "(", "occ_coords_lst", ")", "==", "1", "else", "torch", ".", "cat", "(", "occ_coords_lst", ",", "axis", "=", "0", ")", "\n", "batch_dict", "[", "\"added_occ_xyz\"", "]", "=", "self", ".", "occ_coords2absxyz", "(", "occ_coords", ",", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ",", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "if", "\"rot_z\"", "in", "batch_dict", "else", "None", ")", "\n", "if", "self", ".", "reg", ":", "\n", "                ", "occ_res", "=", "res_lst", "[", "0", "]", "if", "len", "(", "res_lst", ")", "==", "1", "else", "torch", ".", "cat", "(", "res_lst", ",", "axis", "=", "0", ")", "\n", "batch_dict", "[", "\"added_occ_xyz\"", "]", "+=", "occ_res", "\n", "", "occ_pnts", "=", "torch", ".", "cat", "(", "[", "batch_dict", "[", "\"added_occ_xyz\"", "]", ",", "occ_probs", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "batch_dict", "[", "\"added_occ_b_ind\"", "]", "=", "occ_coords", "[", "...", ",", "0", "]", "\n", "batch_dict", "[", "\"occ_pnts\"", "]", "=", "occ_pnts", "\n", "occ_carte_coords", "=", "self", ".", "trans_voxel_grid", "(", "batch_dict", "[", "\"added_occ_xyz\"", "]", ",", "occ_coords", "[", "...", ",", "0", "]", ",", "self", ".", "det_voxel_size", ",", "self", ".", "det_grid_size", ",", "self", ".", "point_cloud_range", ")", "\n", "occ_pnts", "=", "self", ".", "assemble_occ_points", "(", "batch_dict", "[", "\"added_occ_xyz\"", "]", ",", "pnt_feat_dim", ",", "occ_probs", ")", "\n", "if", "self", ".", "db_proj", ":", "\n", "                ", "occ_pnts", ",", "occ_carte_coords", "=", "self", ".", "db_proj_func", "(", "occ_pnts", ",", "occ_coords", ",", "occ_carte_coords", ",", "batch_dict", ",", "expand", "=", "[", "1.0", ",", "5.0", ",", "3.0", "]", ",", "stride", "=", "[", "1.0", ",", "2.5", ",", "1.5", "]", ")", "\n", "", "gt_points", ",", "gt_voxel_coords", "=", "self", ".", "assemble_gt_vox_points", "(", "batch_dict", ")", "\n", "voxels", ",", "voxel_num_points", ",", "voxel_coords", "=", "self", ".", "combine_gt_occ_voxel_point", "(", "gt_points", ",", "gt_voxel_coords", ",", "occ_pnts", ",", "occ_carte_coords", ",", "self", ".", "det_grid_size", ")", "\n", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "=", "voxels", ",", "voxel_num_points", ",", "voxel_coords", "\n", "", "else", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros_like", "(", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "0", ":", "self", ".", "code_num_dim", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "batch_dict", "[", "\"added_occ_b_ind\"", "]", "=", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "\"cuda\"", ")", "\n", "batch_dict", "[", "\"added_occ_xyz\"", "]", "=", "torch", ".", "zeros", "(", "[", "1", ",", "3", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "batch_dict", "[", "\"occ_pnts\"", "]", "=", "torch", ".", "zeros", "(", "[", "1", ",", "4", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "batch_dict", "[", "'voxels'", "]", "=", "torch", ".", "cat", "(", "(", "batch_dict", "[", "'voxels'", "]", ",", "zeros", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "not", "self", ".", "pass_gradient", ":", "\n", "            ", "batch_dict", "[", "'occ_pnts'", "]", "=", "batch_dict", "[", "'occ_pnts'", "]", ".", "detach", "(", ")", "\n", "batch_dict", "[", "'added_occ_xyz'", "]", "=", "batch_dict", "[", "'added_occ_xyz'", "]", ".", "detach", "(", ")", "\n", "batch_dict", "[", "'added_occ_b_ind'", "]", "=", "batch_dict", "[", "'added_occ_b_ind'", "]", ".", "detach", "(", ")", "\n", "batch_dict", "[", "'voxels'", "]", "=", "batch_dict", "[", "'voxels'", "]", ".", "detach", "(", ")", "\n", "", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.__init__": [[7, 44], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().view().contiguous", "torch.tensor().view().contiguous", "torch.tensor().view().contiguous", "torch.tensor().view().contiguous", "print", "add_occ_template.AddOccTemplate.data_cfg.OCC.get", "add_occ_template.AddOccTemplate.data_cfg.OCC.get", "model_cfg.PARAMS.get", "model_cfg.OCC_PNT_UPDATE.get", "model_cfg.PARAMS.get", "int", "int", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "numpy.ceil", "numpy.ceil", "add_occ_template.AddOccTemplate.data_cfg.OCC.get", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "data_cfg", ",", "point_cloud_range", ",", "occ_voxel_size", ",", "occ_grid_size", ",", "det_voxel_size", ",", "det_grid_size", ",", "mode", ",", "voxel_centers", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "data_cfg", "=", "data_cfg", "\n", "self", ".", "occ_thresh", "=", "model_cfg", ".", "PARAMS", ".", "OCC_THRESH", "\n", "self", ".", "eval_occ_thresh", "=", "model_cfg", ".", "PARAMS", ".", "EVAL_OCC_THRESH", "\n", "self", ".", "max_add_occpnts_num", "=", "model_cfg", ".", "PARAMS", ".", "MAX_NUM_OCC_PNTS", "\n", "self", ".", "eval_max_add_occpnts_num", "=", "model_cfg", ".", "PARAMS", ".", "EVAL_MAX_NUM_OCC_PNTS", "\n", "self", ".", "pass_gradient", "=", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "PASS_GRAD", "\n", "self", ".", "res_num_dim", "=", "data_cfg", ".", "OCC", ".", "RES_NUM_DIM", "\n", "self", ".", "point_cloud_range", "=", "torch", ".", "tensor", "(", "point_cloud_range", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "# original pc range", "\n", "self", ".", "occ_voxel_size", "=", "occ_voxel_size", "\n", "self", ".", "nvx", ",", "self", ".", "nvy", ",", "self", ".", "nvz", "=", "occ_voxel_size", "\n", "self", ".", "occ_grid_size", "=", "occ_grid_size", "\n", "self", ".", "det_grid_size", "=", "det_grid_size", "\n", "self", ".", "det_voxel_size", "=", "torch", ".", "tensor", "(", "det_voxel_size", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "self", ".", "occ_point_cloud_range", "=", "data_cfg", ".", "OCC", ".", "POINT_CLOUD_RANGE", "\n", "self", ".", "occ_point_cloud_range_tensor", "=", "torch", ".", "tensor", "(", "self", ".", "occ_point_cloud_range", ",", "device", "=", "\"cuda\"", ")", ".", "view", "(", "1", ",", "6", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "occ_x_origin", "=", "data_cfg", ".", "OCC", ".", "POINT_CLOUD_RANGE", "[", "0", "]", "\n", "self", ".", "occ_y_origin", "=", "data_cfg", ".", "OCC", ".", "POINT_CLOUD_RANGE", "[", "1", "]", "\n", "self", ".", "occ_z_origin", "=", "data_cfg", ".", "OCC", ".", "POINT_CLOUD_RANGE", "[", "2", "]", "\n", "\n", "self", ".", "all_voxel_centers", "=", "voxel_centers", "[", "\"all_voxel_centers\"", "]", "\n", "print", "(", "\"self.all_voxel_centers\"", ",", "self", ".", "all_voxel_centers", ".", "shape", ")", "\n", "self", ".", "xrange", "=", "[", "point_cloud_range", "[", "0", "]", ",", "point_cloud_range", "[", "3", "]", "]", "\n", "self", ".", "yrange", "=", "[", "point_cloud_range", "[", "1", "]", ",", "point_cloud_range", "[", "4", "]", "]", "\n", "self", ".", "vis_r", "=", "0.1", "\n", "self", ".", "bev_img_h", "=", "int", "(", "np", ".", "ceil", "(", "(", "self", ".", "yrange", "[", "1", "]", "-", "self", ".", "yrange", "[", "0", "]", ")", "/", "self", ".", "vis_r", ")", ")", "+", "1", "\n", "self", ".", "bev_img_w", "=", "int", "(", "np", ".", "ceil", "(", "(", "self", ".", "xrange", "[", "1", "]", "-", "self", ".", "xrange", "[", "0", "]", ")", "/", "self", ".", "vis_r", ")", ")", "+", "1", "\n", "self", ".", "config_realdrop", "=", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "'REAL_DROP'", ",", "None", ")", "is", "None", "or", "self", ".", "data_cfg", ".", "OCC", ".", "REAL_DROP", "\n", "self", ".", "config_rawadd", "=", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "'RAW_ADD'", ",", "False", ")", "\n", "self", ".", "code_num_dim", "=", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "'CODE_NUM_DIM'", ",", "2", ")", "\n", "self", ".", "reg", "=", "model_cfg", ".", "PARAMS", ".", "get", "(", "\"REG\"", ",", "False", ")", "\n", "self", ".", "db_proj", "=", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "get", "(", "'DB_PROJ'", ",", "False", ")", "\n", "self", ".", "remain_percentage", "=", "model_cfg", ".", "PARAMS", ".", "get", "(", "'REMAIN_PERCENTAGE'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.db_proj_func": [[45, 77], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "utils.coords_utils.cartesian_occ_coords", "torch.floor().to", "torch.floor().to", "torch.floor().to", "torch.floor().to", "torch.all", "torch.all", "torch.all", "torch.all", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.cat().all", "occ_carte_coords[].unsqueeze", "torch.tensor.view", "torch.tensor.view", "[].unsqueeze", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor.view", "torch.tensor.view", "utils.common_utils.rotate_points_along_z().squeeze", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "occ_pnts[].unsqueeze().repeat", "occ_carte_coords[].unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.to", "torch.cat.to", "occ_coords[].unsqueeze", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "utils.common_utils.rotate_points_along_z", "occ_pnts[].unsqueeze", "occ_carte_coords[].unsqueeze", "utils.common_utils.rotate_points_along_z().squeeze.unsqueeze", "torch.tensor.view", "torch.tensor.view"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_occ_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "db_proj_func", "(", "self", ",", "occ_pnts", ",", "occ_coords", ",", "occ_carte_coords", ",", "batch_dict", ",", "expand", "=", "[", "2", ",", "6", ",", "3", "]", ",", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ")", ":", "\n", "# occ_carte_coords: M X 3 (z, y, x)", "\n", "        ", "occ_zyx_origin", "=", "torch", ".", "tensor", "(", "[", "self", ".", "occ_z_origin", ",", "self", ".", "occ_y_origin", ",", "self", ".", "occ_x_origin", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "det_voxel_size_zyx", "=", "torch", ".", "tensor", "(", "[", "self", ".", "det_voxel_size", "[", "2", "]", ",", "self", ".", "det_voxel_size", "[", "1", "]", ",", "self", ".", "det_voxel_size", "[", "0", "]", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "point_cloud_origin_zyx", "=", "torch", ".", "tensor", "(", "[", "self", ".", "point_cloud_range", "[", "2", "]", ",", "self", ".", "point_cloud_range", "[", "1", "]", ",", "self", ".", "point_cloud_range", "[", "0", "]", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "# original pc range", "\n", "occ_voxel_size_zyx", "=", "torch", ".", "tensor", "(", "[", "self", ".", "nvz", ",", "self", ".", "nvy", ",", "self", ".", "nvx", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "min_det_grid_ind", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "max_det_grid_ind", "=", "torch", ".", "tensor", "(", "[", "[", "self", ".", "det_grid_size", "[", "2", "]", "-", "1", ",", "self", ".", "det_grid_size", "[", "1", "]", "-", "1", ",", "self", ".", "det_grid_size", "[", "0", "]", "-", "1", "]", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "expandz", ",", "expandy", ",", "expandx", "=", "expand", "\n", "z_ind", "=", "torch", ".", "arange", "(", "-", "expandz", ",", "expandz", "+", "1", ",", "stride", "[", "0", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "y_ind", "=", "torch", ".", "arange", "(", "-", "expandy", ",", "expandy", "+", "1", ",", "stride", "[", "1", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "x_ind", "=", "torch", ".", "arange", "(", "-", "expandx", ",", "expandx", "+", "1", ",", "stride", "[", "2", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "z", ",", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "z_ind", ",", "y_ind", ",", "x_ind", ")", "\n", "zyx", "=", "torch", ".", "stack", "(", "[", "z", ",", "y", ",", "x", "]", ",", "axis", "=", "-", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "3", ")", "\n", "occ_carte_coords_aug", "=", "occ_carte_coords", "[", "...", ",", "1", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "zyx", "# N X 5X13X7 X 3", "\n", "occ_carte_loc", "=", "(", "0.5", "+", "occ_carte_coords_aug", ".", "to", "(", "torch", ".", "float32", ")", ")", "*", "det_voxel_size_zyx", ".", "view", "(", "1", ",", "1", ",", "3", ")", "+", "point_cloud_origin_zyx", ".", "view", "(", "1", ",", "1", ",", "3", ")", "\n", "occ_coords_loc", "=", "coords_utils", ".", "cartesian_occ_coords", "(", "occ_carte_loc", ",", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ",", "perm", "=", "\"zyx\"", ")", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "            ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "occ_coords", "[", "...", ",", "0", "]", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", "==", "\"cartesian\"", ":", "\n", "                ", "noise_rotation", "=", "-", "rot_z", "*", "np", ".", "pi", "/", "180", "\n", "occ_coords_loc", "=", "common_utils", ".", "rotate_points_along_z", "(", "occ_coords_loc", ".", "unsqueeze", "(", "1", ")", ",", "noise_rotation", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "occ_coords_loc", "[", "...", ",", "1", "]", "+=", "rot_z", "\n", "", "", "occ_coords_coords", "=", "(", "torch", ".", "floor", "(", "(", "occ_coords_loc", "-", "occ_zyx_origin", ".", "view", "(", "1", ",", "1", ",", "3", ")", ")", "/", "occ_voxel_size_zyx", ")", ")", ".", "to", "(", "torch", ".", "int64", ")", "# N X 5X13X7 X 3", "\n", "pick_masks", "=", "torch", ".", "all", "(", "(", "occ_coords_coords", "-", "occ_coords", "[", "...", ",", "1", ":", "]", ".", "unsqueeze", "(", "1", ")", ")", "==", "0", ",", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "# N X 5X13X7", "\n", "occ_exp_pnts", "=", "torch", ".", "cat", "(", "[", "occ_carte_loc", "[", "...", ",", "2", ":", "3", "]", ",", "occ_carte_loc", "[", "...", ",", "1", ":", "2", "]", ",", "occ_carte_loc", "[", "...", ",", "0", ":", "1", "]", ",", "occ_pnts", "[", "...", ",", "3", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "zyx", ".", "shape", "[", "1", "]", ",", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "occ_carte_coords_aug", "=", "torch", ".", "cat", "(", "[", "occ_carte_coords", "[", "...", ",", ":", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "zyx", ".", "shape", "[", "1", "]", ",", "1", ")", ",", "occ_carte_coords_aug", "]", ",", "dim", "=", "-", "1", ")", "\n", "occ_exp_pnts", ",", "occ_carte_coords_aug", "=", "torch", ".", "masked_select", "(", "occ_exp_pnts", ",", "pick_masks", ")", ".", "view", "(", "-", "1", ",", "occ_pnts", ".", "shape", "[", "-", "1", "]", ")", ",", "torch", ".", "masked_select", "(", "occ_carte_coords_aug", ",", "pick_masks", ")", ".", "view", "(", "-", "1", ",", "occ_carte_coords", ".", "shape", "[", "1", "]", ")", "\n", "inrange_mask", "=", "torch", ".", "cat", "(", "[", "occ_carte_coords_aug", "[", ":", ",", "1", ":", "4", "]", ">=", "min_det_grid_ind", ",", "occ_carte_coords_aug", "[", ":", ",", "1", ":", "4", "]", "<=", "max_det_grid_ind", "]", ",", "dim", "=", "-", "1", ")", ".", "all", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "torch", ".", "masked_select", "(", "occ_exp_pnts", ",", "inrange_mask", ")", ".", "view", "(", "-", "1", ",", "occ_pnts", ".", "shape", "[", "-", "1", "]", ")", ",", "torch", ".", "masked_select", "(", "occ_carte_coords_aug", ",", "inrange_mask", ")", ".", "view", "(", "-", "1", ",", "occ_carte_coords", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.trans_voxel_grid": [[78, 89], ["torch.div", "torch.div", "torch.div", "torch.div", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.clamp().to", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "point_cloud_range[].unsqueeze", "voxel_size.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "trans_voxel_grid", "(", "self", ",", "occ_xyz", ",", "b_inds", ",", "voxel_size", ",", "grid_size", ",", "point_cloud_range", ")", ":", "\n", "        ", "nx", ",", "ny", ",", "nz", "=", "grid_size", "[", "0", "]", ",", "grid_size", "[", "1", "]", ",", "grid_size", "[", "2", "]", "\n", "\n", "f_corner", "=", "occ_xyz", "-", "point_cloud_range", "[", "0", ":", "3", "]", ".", "unsqueeze", "(", "0", ")", "\n", "coords", "=", "torch", ".", "div", "(", "f_corner", ",", "voxel_size", ".", "unsqueeze", "(", "0", ")", ")", "\n", "coords_x", "=", "torch", ".", "clamp", "(", "torch", ".", "floor", "(", "coords", "[", "...", ",", "0", "]", ")", ",", "min", "=", "0", ",", "max", "=", "nx", "-", "1", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "coords_y", "=", "torch", ".", "clamp", "(", "torch", ".", "floor", "(", "coords", "[", "...", ",", "1", "]", ")", ",", "min", "=", "0", ",", "max", "=", "ny", "-", "1", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "coords_z", "=", "torch", ".", "clamp", "(", "torch", ".", "floor", "(", "coords", "[", "...", ",", "2", "]", ")", ",", "min", "=", "0", ",", "max", "=", "nz", "-", "1", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "# print(\"b_inds.shape, coords_x.shape\", b_inds.shape, occ_xyz.shape, f_corner.shape, coords_x.shape)", "\n", "# print(nz, ny, nx, coords.shape)", "\n", "return", "torch", ".", "stack", "(", "[", "b_inds", ",", "coords_z", ",", "coords_y", ",", "coords_x", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.get_rand_range": [[90, 93], ["torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "get_rand_range", "(", "self", ",", "rand_range", ")", ":", "\n", "        ", "r1", ",", "r2", "=", "rand_range", "\n", "return", "(", "r1", "-", "r2", ")", "*", "torch", ".", "rand", "(", "1", ",", "device", "=", "\"cuda\"", ")", "+", "r2", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.filter_occ_points": [[94, 129], ["list", "range", "occ_probs.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occ_coords_lst.append", "probs_lst.append", "[].permute", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "res_lst.append", "torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "torch.cuda.FloatTensor().uniform_", "add_occ_template.AddOccTemplate.get_rand_range", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.get_rand_range"], ["", "def", "filter_occ_points", "(", "self", ",", "batch_size", ",", "occ_probs", ",", "batch_dict", ")", ":", "\n", "# occ_probs B X NZ X NY X NX", "\n", "        ", "probs_lst", "=", "[", "]", "\n", "res_lst", "=", "[", "]", "\n", "occ_coords_lst", "=", "[", "]", "\n", "B", ",", "NZ", ",", "NY", ",", "NX", "=", "list", "(", "occ_probs", ".", "size", "(", ")", ")", "\n", "occ_thresh", "=", "self", ".", "occ_thresh", "if", "batch_dict", "[", "\"is_train\"", "]", "else", "self", ".", "eval_occ_thresh", "\n", "max_add_occpnts_num", "=", "self", ".", "max_add_occpnts_num", "if", "batch_dict", "[", "\"is_train\"", "]", "else", "self", ".", "eval_max_add_occpnts_num", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "occ_mask", "=", "occ_probs", "[", "i", "]", ">", "self", ".", "occ_thresh", "\n", "occ_coords", "=", "torch", ".", "nonzero", "(", "occ_mask", ")", "\n", "numpass", "=", "torch", ".", "sum", "(", "occ_mask", ")", "\n", "if", "numpass", ">", "0", "and", "batch_dict", "[", "\"use_occ_prob\"", "]", "[", "i", "]", ":", "\n", "                ", "top_prob", "=", "occ_probs", "[", "i", "]", "[", "occ_mask", "]", "\n", "if", "self", ".", "reg", ":", "\n", "                    ", "top_pnt", "=", "batch_dict", "[", "\"pred_sem_residuals\"", "]", "[", "i", "]", "[", ":", ",", "occ_mask", "]", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "if", "(", "self", ".", "remain_percentage", "is", "not", "None", ")", "and", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "                    ", "rand_use_mask", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "top_prob", ".", "shape", ")", ".", "uniform_", "(", ")", "<=", "self", ".", "get_rand_range", "(", "self", ".", "remain_percentage", ")", "\n", "# print(top_prob.shape, torch.sum(rand_use_mask))", "\n", "top_prob", "=", "top_prob", "[", "rand_use_mask", "]", "\n", "if", "self", ".", "reg", ":", "\n", "                        ", "top_pnt", "=", "top_pnt", "[", "rand_use_mask", ",", "...", "]", "\n", "", "occ_coords", "=", "occ_coords", "[", "rand_use_mask", "]", "\n", "\n", "", "if", "top_prob", ".", "shape", "[", "0", "]", ">", "max_add_occpnts_num", ":", "\n", "                    ", "top_prob", ",", "top_ind", "=", "torch", ".", "topk", "(", "top_prob", ",", "max_add_occpnts_num", ",", "largest", "=", "True", ",", "sorted", "=", "False", ")", "\n", "occ_coords", "=", "occ_coords", "[", "top_ind", ",", "...", "]", "\n", "if", "self", ".", "reg", ":", "\n", "                        ", "top_pnt", "=", "top_pnt", "[", "top_ind", ",", "...", "]", "\n", "", "", "top_occ_coords", "=", "torch", ".", "cat", "(", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "ones_like", "(", "occ_coords", "[", "...", ",", "0", "]", ",", "device", "=", "occ_coords", ".", "device", ",", "dtype", "=", "occ_coords", ".", "dtype", ")", ",", "-", "1", ")", "*", "i", ",", "occ_coords", ")", ",", "axis", "=", "-", "1", ")", "\n", "occ_coords_lst", ".", "append", "(", "top_occ_coords", ")", "\n", "probs_lst", ".", "append", "(", "top_prob", ")", "\n", "if", "self", ".", "reg", ":", "\n", "                    ", "res_lst", ".", "append", "(", "top_pnt", ")", "\n", "", "", "", "return", "res_lst", ",", "probs_lst", ",", "occ_coords_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.occ_coords2absxyz": [[131, 147], ["utils.coords_utils.uvd2absxyz", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "utils.common_utils.rotate_points_along_z().squeeze", "utils.common_utils.rotate_points_along_z", "utils.common_utils.rotate_points_along_z().squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "occ_coords2absxyz", "(", "self", ",", "occ_coords", ",", "type", ",", "rot_z", "=", "None", ")", ":", "\n", "# occ_coords  P X 5 (B,NZ,NY,NX)", "\n", "        ", "coord_center_x", "=", "self", ".", "occ_x_origin", "+", "(", "occ_coords", "[", "...", ",", "3", "]", "+", "0.5", ")", "*", "self", ".", "nvx", "\n", "coord_center_y", "=", "self", ".", "occ_y_origin", "+", "(", "occ_coords", "[", "...", ",", "2", "]", "+", "0.5", ")", "*", "self", ".", "nvy", "\n", "coord_center_z", "=", "self", ".", "occ_z_origin", "+", "(", "occ_coords", "[", "...", ",", "1", "]", "+", "0.5", ")", "*", "self", ".", "nvz", "\n", "if", "rot_z", "is", "not", "None", ":", "\n", "            ", "rot_z_batch", "=", "rot_z", "[", "occ_coords", "[", "...", ",", "0", "]", "]", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", "==", "\"cartesian\"", ":", "\n", "                ", "noise_rotation", "=", "rot_z_batch", "*", "np", ".", "pi", "/", "180", "\n", "points", "=", "torch", ".", "stack", "(", "[", "coord_center_x", ",", "coord_center_y", ",", "coord_center_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "points", "=", "common_utils", ".", "rotate_points_along_z", "(", "points", ".", "unsqueeze", "(", "1", ")", ",", "noise_rotation", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "points", "\n", "", "else", ":", "\n", "                ", "coord_center_y", "-=", "rot_z_batch", "\n", "", "", "occpnt_absxyz", "=", "coords_utils", ".", "uvd2absxyz", "(", "coord_center_x", ",", "coord_center_y", ",", "coord_center_z", ",", "type", ")", "\n", "return", "occpnt_absxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.assemble_occ_points": [[149, 166], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "add_occ_template.AddOccTemplate.data_cfg.OCC.get", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "assemble_occ_points", "(", "self", ",", "occ_pnts", ",", "pnt_feat_dim", ",", "occ_probs", ")", ":", "\n", "        ", "if", "self", ".", "res_num_dim", "<", "pnt_feat_dim", ":", "\n", "# feat_zeros = torch.zeros_like(occ_pnts[..., :(pnt_feat_dim - self.res_num_dim)], device=\"cuda\")", "\n", "            ", "default_inten", "=", "self", ".", "data_cfg", ".", "OCC", ".", "INTEN", "if", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "\"INTEN\"", ",", "None", ")", "is", "not", "None", "else", "0.0", "\n", "feat_inten", "=", "torch", ".", "ones_like", "(", "occ_pnts", "[", "...", ",", ":", "1", "]", ",", "device", "=", "\"cuda\"", ")", "*", "default_inten", "\n", "feat_padding", "=", "feat_inten", "\n", "if", "pnt_feat_dim", ">", "4", ":", "\n", "                ", "feat_elong", "=", "torch", ".", "zeros_like", "(", "occ_pnts", "[", "...", ",", ":", "1", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "feat_padding", "=", "torch", ".", "cat", "(", "[", "feat_inten", ",", "feat_elong", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "occ_pnts", "=", "torch", ".", "cat", "(", "[", "occ_pnts", ",", "feat_padding", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "occ_probs", "=", "torch", ".", "unsqueeze", "(", "occ_probs", ",", "-", "1", ")", "\n", "# print(\"occ_probs.shape\", occ_probs.shape)", "\n", "# print(\"occ_pnts.shape\", occ_pnts.shape)", "\n", "occ_pnts", "=", "torch", ".", "cat", "(", "[", "occ_pnts", ",", "occ_probs", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "self", ".", "code_num_dim", ">", "1", ":", "\n", "            ", "occ_pnts", "=", "torch", ".", "cat", "(", "[", "occ_pnts", ",", "torch", ".", "ones_like", "(", "occ_probs", ",", "device", "=", "\"cuda\"", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "occ_pnts", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.assemble_gt_vox_points": [[168, 191], ["list", "add_occ_template.AddOccTemplate.nonzero", "gt_voxel_coords[].to", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "range", "gt_voxels.size", "add_occ_template.AddOccTemplate.get_paddings_indicator", "add_occ_template.AddOccTemplate.drop_points_with_drop_mask", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_paddings_indicator", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.drop_points_with_drop_mask"], ["", "def", "assemble_gt_vox_points", "(", "self", ",", "batch_dict", ",", "dropmask", "=", "None", ",", "voxel_size", "=", "None", ",", "grid_size", "=", "None", ",", "finer_point_cloud_range", "=", "None", ",", "batch_size", "=", "None", ",", "code_num_dim", "=", "None", ")", ":", "\n", "        ", "gt_voxels", ",", "gt_voxel_num_points", ",", "gt_voxel_coords", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "M", ",", "P", ",", "C", "=", "list", "(", "gt_voxels", ".", "size", "(", ")", ")", "\n", "voxel_count", "=", "gt_voxels", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "config_realdrop", "and", "batch_dict", "[", "\"final_point_mask\"", "]", "is", "not", "None", "and", "voxel_count", "==", "batch_dict", "[", "\"final_point_mask\"", "]", ".", "shape", "[", "1", "]", ":", "\n", "            ", "mask", "=", "batch_dict", "[", "\"final_point_mask\"", "]", "\n", "", "else", ":", "\n", "            ", "mask", "=", "self", ".", "get_paddings_indicator", "(", "gt_voxel_num_points", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "", "inds", "=", "mask", ".", "nonzero", "(", ")", "\n", "det_gt_points", "=", "gt_voxels", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", ":", "]", "\n", "det_gt_voxel_coords", "=", "gt_voxel_coords", "[", "inds", "[", ":", ",", "0", "]", ",", ":", "]", ".", "to", "(", "torch", ".", "int64", ")", "\n", "if", "self", ".", "config_realdrop", "and", "dropmask", "is", "not", "None", ":", "\n", "            ", "gt_points", ",", "gt_voxel_coords", ",", "drop_valid_inds", "=", "self", ".", "drop_points_with_drop_mask", "(", "det_gt_points", ",", "det_gt_voxel_coords", ",", "dropmask", ",", "voxel_size", ",", "grid_size", ",", "finer_point_cloud_range", ",", "batch_size", ")", "\n", "batch_dict", "[", "\"drop_det_voxel_point_xyz\"", "]", "=", "det_gt_points", "[", "drop_valid_inds", ",", ":", "]", "\n", "batch_dict", "[", "\"drop_det_voxel_coords\"", "]", "=", "det_gt_voxel_coords", "[", "drop_valid_inds", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "gt_points", "=", "det_gt_points", "\n", "gt_voxel_coords", "=", "det_gt_voxel_coords", "\n", "# ones = torch.unsqueeze(torch.ones_like(gt_points[...,0], device=\"cuda\"),-1) #  ps, 1", "\n", "", "zeros", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "zeros_like", "(", "gt_points", "[", "...", ",", "0", "]", ",", "device", "=", "\"cuda\"", ")", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "code_num_dim", "if", "code_num_dim", "is", "not", "None", "else", "self", ".", "code_num_dim", ")", ":", "\n", "            ", "gt_points", "=", "torch", ".", "cat", "(", "(", "gt_points", ",", "zeros", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "gt_points", ",", "gt_voxel_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.drop_points_with_drop_mask": [[193, 230], ["list", "torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.cat().all", "add_occ_template.AddOccTemplate.trans_voxel_grid", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat().all.nonzero", "torch.cat().all.nonzero", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.div", "torch.div", "torch.div", "torch.div", "voxel_drop_mask.view", "drop_mask.nonzero", "torch.ones.nonzero", "torch.ones.nonzero", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "points_bnznynx[].to", "points_bnznynx[].to", "points_bnznynx[].to"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.trans_voxel_grid", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "drop_points_with_drop_mask", "(", "self", ",", "gt_points", ",", "gt_voxel_coords", ",", "voxel_drop_mask", ",", "voxel_size", ",", "grid_size", ",", "finer_point_cloud_range", ",", "bs", ")", ":", "\n", "# batch_dict[\"voxel_drop_mask\"] = voxel_drop_mask.view(bs, self.ny, self.nx, self.nz * self.sz * self.sy * self.sx)", "\n", "        ", "nvx", ",", "nvy", ",", "nvz", "=", "voxel_size", "\n", "nx", ",", "ny", ",", "nz", "=", "grid_size", "\n", "P", ",", "_", "=", "list", "(", "gt_points", ".", "shape", ")", "\n", "finer_x_origin", ",", "finer_y_origin", ",", "finer_z_origin", "=", "finer_point_cloud_range", "[", "0", "]", ",", "finer_point_cloud_range", "[", "1", "]", ",", "finer_point_cloud_range", "[", "2", "]", "\n", "inrange_mask", "=", "torch", ".", "cat", "(", "[", "gt_points", "[", ":", ",", ":", "3", "]", ">=", "self", ".", "finer_range", "[", "...", ",", ":", "3", "]", ",", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "<=", "self", ".", "finer_range", "[", "...", ",", "3", ":", "]", "]", ",", "axis", "=", "-", "1", ")", ".", "all", "(", "-", "1", ")", "\n", "valid_inds", "=", "inrange_mask", ".", "nonzero", "(", ")", "[", "...", ",", "0", "]", "\n", "# print(gt_points.shape, self.finer_range.shape, \"inrange_mask:\", inrange_mask.shape, \"valid_inds:\", valid_inds.shape, \"gt_voxel_coords.shape\", gt_voxel_coords.shape)", "\n", "points_inrange", "=", "gt_points", "[", "valid_inds", ",", "...", "]", "[", "...", ",", ":", "3", "]", "\n", "voxel_coords_inrange", "=", "gt_voxel_coords", "[", "valid_inds", ",", "...", "]", "\n", "# print(\"points_inrange\", points_inrange.shape)", "\n", "\n", "points_bnznynx", "=", "self", ".", "trans_voxel_grid", "(", "points_inrange", ",", "voxel_coords_inrange", "[", "...", ",", "0", "]", ",", "torch", ".", "tensor", "(", "voxel_size", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "grid_size", ",", "torch", ".", "tensor", "(", "finer_point_cloud_range", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "\n", "f_corner_x", "=", "points_inrange", "[", ":", ",", "0", "]", "-", "(", "\n", "points_bnznynx", "[", ":", ",", "3", "]", ".", "to", "(", "points_inrange", ".", "dtype", ")", "*", "nvx", "+", "finer_x_origin", ")", "\n", "f_corner_y", "=", "points_inrange", "[", ":", ",", "1", "]", "-", "(", "\n", "points_bnznynx", "[", ":", ",", "2", "]", ".", "to", "(", "points_inrange", ".", "dtype", ")", "*", "nvy", "+", "finer_y_origin", ")", "\n", "f_corner_z", "=", "points_inrange", "[", ":", ",", "2", "]", "-", "(", "\n", "points_bnznynx", "[", ":", ",", "1", "]", ".", "to", "(", "points_inrange", ".", "dtype", ")", "*", "nvz", "+", "finer_z_origin", ")", "\n", "f_corner", "=", "torch", ".", "stack", "(", "[", "f_corner_x", ",", "f_corner_y", ",", "f_corner_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "sub_coords", "=", "torch", ".", "floor", "(", "torch", ".", "div", "(", "f_corner", ",", "self", ".", "sub_voxel_size", ")", ")", "\n", "sub_coords", "[", "...", ",", "0", "]", "=", "torch", ".", "clamp", "(", "sub_coords", "[", "...", ",", "0", "]", ",", "min", "=", "0", ",", "max", "=", "self", ".", "sx", "-", "1", ")", "\n", "sub_coords", "[", "...", ",", "1", "]", "=", "torch", ".", "clamp", "(", "sub_coords", "[", "...", ",", "1", "]", ",", "min", "=", "0", ",", "max", "=", "self", ".", "sy", "-", "1", ")", "\n", "sub_coords", "[", "...", ",", "2", "]", "=", "torch", ".", "clamp", "(", "sub_coords", "[", "...", ",", "2", "]", ",", "min", "=", "0", ",", "max", "=", "self", ".", "sz", "-", "1", ")", "\n", "point_coords_szsysx", "=", "torch", ".", "stack", "(", "[", "sub_coords", "[", "...", ",", "2", "]", ",", "sub_coords", "[", "...", ",", "1", "]", ",", "sub_coords", "[", "...", ",", "0", "]", "]", ",", "axis", "=", "-", "1", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "drop_mask", "=", "voxel_drop_mask", ".", "view", "(", "bs", ",", "ny", ",", "nx", ",", "nz", ",", "self", ".", "sz", ",", "self", ".", "sy", ",", "self", ".", "sx", ")", "[", "points_bnznynx", "[", "...", ",", "0", "]", ",", "points_bnznynx", "[", "...", ",", "2", "]", ",", "points_bnznynx", "[", "...", ",", "3", "]", ",", "points_bnznynx", "[", "...", ",", "1", "]", ",", "point_coords_szsysx", "[", "...", ",", "0", "]", ",", "point_coords_szsysx", "[", "...", ",", "1", "]", ",", "point_coords_szsysx", "[", "...", ",", "2", "]", "]", "\n", "drop_ind", "=", "drop_mask", ".", "nonzero", "(", ")", "[", "...", ",", "0", "]", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "drop_ind", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "keep_mask", "=", "torch", ".", "ones", "(", "(", "P", ")", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "drop_valid_inds", "=", "valid_inds", "[", "drop_ind", "]", "\n", "keep_mask", "[", "drop_valid_inds", "]", "=", "zeros", "\n", "keep_ind", "=", "keep_mask", ".", "nonzero", "(", ")", "[", "...", ",", "0", "]", "\n", "return", "gt_points", "[", "keep_ind", ",", "...", "]", ",", "gt_voxel_coords", "[", "keep_ind", ",", "...", "]", ",", "drop_valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.assemble_gt_points": [[231, 238], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "assemble_gt_points", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "gt_points", "=", "batch_dict", "[", "\"points\"", "]", "\n", "# ones = torch.unsqueeze(torch.ones_like(gt_points[...,0], device=\"cuda\"),-1) #  ps, 1", "\n", "zeros", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "zeros_like", "(", "gt_points", "[", "...", ",", "0", "]", ",", "device", "=", "\"cuda\"", ")", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "code_num_dim", ")", ":", "\n", "            ", "gt_points", "=", "torch", ".", "cat", "(", "(", "gt_points", ",", "zeros", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "gt_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.get_paddings_indicator": [[239, 246], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "get_paddings_indicator", "(", "self", ",", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "        ", "actual_num", "=", "torch", ".", "unsqueeze", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n", "max_num", "=", "torch", ".", "arange", "(", "max_num", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "actual_num", ".", "device", ")", ".", "view", "(", "max_num_shape", ")", "\n", "paddings_indicator", "=", "actual_num", ">", "max_num", "\n", "return", "paddings_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.voxelize_pad": [[248, 261], ["torch.max().data.cpu().numpy", "torch.max().data.cpu().numpy", "torch.max().data.cpu().numpy", "torch.max().data.cpu().numpy", "points.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "voxel_num_points.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max().data.cpu", "torch.max().data.cpu", "torch.max().data.cpu", "torch.max().data.cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "voxelize_pad", "(", "self", ",", "voxel_num_points", ",", "inds", ",", "inverse_indices", ",", "points", ")", ":", "\n", "\n", "        ", "cluster_num", "=", "voxel_num_points", ".", "size", "(", ")", "[", "0", "]", "\n", "max_points", "=", "torch", ".", "max", "(", "voxel_num_points", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "P", ",", "C", "=", "points", ".", "size", "(", ")", "\n", "points", "=", "points", "[", "inds", ",", ":", "]", "\n", "inverse_indices", "=", "inverse_indices", "[", "inds", "]", "# 0, 0, 0, 1, 1, 1", "\n", "range_indices", "=", "torch", ".", "arange", "(", "0", ",", "P", ",", "device", "=", "\"cuda\"", ")", "\n", "voxel_num_points_addaxis", "=", "torch", ".", "cumsum", "(", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "'cuda'", ")", ",", "voxel_num_points", "[", ":", "-", "1", "]", "]", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "indices_voxel", "=", "range_indices", "-", "voxel_num_points_addaxis", "[", "inverse_indices", "]", "\n", "voxel_points", "=", "torch", ".", "zeros", "(", "(", "cluster_num", ",", "max_points", ",", "C", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "voxel_points", "[", "inverse_indices", ",", "indices_voxel", ",", ":", "]", "=", "points", "\n", "return", "voxel_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.combine_gt_occ_voxel_point": [[262, 269], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "add_occ_template.AddOccTemplate.voxelize_pad"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.voxelize_pad"], ["", "def", "combine_gt_occ_voxel_point", "(", "self", ",", "gt_points", ",", "gt_voxel_coords", ",", "occ_pnts", ",", "occ_voxel_coords", ",", "grid_size", ")", ":", "\n", "        ", "points", "=", "torch", ".", "cat", "(", "(", "gt_points", ",", "occ_pnts", ")", ",", "axis", "=", "0", ")", "\n", "coords", "=", "torch", ".", "cat", "(", "(", "gt_voxel_coords", ",", "occ_voxel_coords", ")", ",", "axis", "=", "0", ")", "\n", "voxel_coords", ",", "inverse_indices", ",", "voxel_num_points", "=", "torch", ".", "unique", "(", "coords", ",", "dim", "=", "0", ",", "sorted", "=", "True", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "_", ",", "inds", "=", "torch", ".", "sort", "(", "inverse_indices", ")", "\n", "voxel_points", "=", "self", ".", "voxelize_pad", "(", "voxel_num_points", ",", "inds", ",", "inverse_indices", ",", "points", ")", "\n", "return", "voxel_points", ",", "voxel_num_points", ",", "voxel_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.pad_tensor": [[270, 278], ["list", "tensor.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "pad_tensor", "(", "self", ",", "tensor", ",", "intent_length", ",", "dim", "=", "0", ")", ":", "\n", "        ", "shape_lst", "=", "list", "(", "tensor", ".", "size", "(", ")", ")", "\n", "if", "intent_length", "-", "shape_lst", "[", "dim", "]", ">", "0", ":", "\n", "            ", "shape_lst", "[", "dim", "]", "=", "intent_length", "-", "shape_lst", "[", "dim", "]", "\n", "zeros", "=", "torch", ".", "zeros", "(", "shape_lst", ",", "device", "=", "'cuda'", ")", "\n", "return", "torch", ".", "cat", "(", "(", "tensor", ",", "zeros", ")", ",", "axis", "=", "dim", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.transform_points_to_voxels": [[280, 288], ["add_occ_template.AddOccTemplate.voxel_generator.generate", "isinstance"], "methods", ["None"], ["", "", "def", "transform_points_to_voxels", "(", "self", ",", "points", ")", ":", "\n", "        ", "voxel_output", "=", "self", ".", "voxel_generator", ".", "generate", "(", "points", ")", "\n", "if", "isinstance", "(", "voxel_output", ",", "dict", ")", ":", "\n", "            ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "[", "'voxels'", "]", ",", "voxel_output", "[", "'coordinates'", "]", ",", "voxel_output", "[", "'num_points_per_voxel'", "]", "\n", "", "else", ":", "\n", "            ", "voxels", ",", "coordinates", ",", "num_points", "=", "voxel_output", "\n", "", "return", "voxels", ",", "coordinates", ",", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.visualize": [[290, 423], ["[].data.cpu().numpy", "[].data.cpu().numpy", "[].data.cpu().numpy", "add_occ_template.AddOccTemplate.model_cfg.OCC_PNT_UPDATE.VIS.get", "utils.point_box_utils.rotatez", "numpy.zeros", "[].nonzero", "utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "[].nonzero", "[].nonzero", "[].nonzero", "[].nonzero", "[].nonzero", "[].nonzero", "[].nonzero", "[].nonzero", "utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "[].nonzero", "utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "[].nonzero", "[].data.cpu().numpy", "pc.update", "pc.update", "[].permute", "range", "[].data.cpu", "[].data.cpu", "[].data.cpu", "fore_gt_center.data.cpu().numpy", "filter_center.data.cpu().numpy", "boxvoxel_center.data.cpu().numpy", "predicted_occ_abspred_fitlered.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "[].data.cpu", "fore_gt_center.data.cpu", "filter_center.data.cpu", "boxvoxel_center.data.cpu", "predicted_occ_abspred_fitlered.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "predicted_occ_abspred_fitlered.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.rotatez", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.draw_lidars_box3d_on_birdview", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.vis_occ_utils.draw_lidars_box3d_on_birdview"], ["", "def", "visualize", "(", "self", ",", "batch_dict", ",", "binds", ")", ":", "\n", "        ", "tb", "=", "{", "}", "\n", "pc", "=", "{", "}", "\n", "occ_fore_center", ",", "occ_mirr_center", ",", "occ_bm_center", ",", "occ_pos_center", ",", "occ_neg_center", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "batch_dict", "[", "\"gt_b_ind\"", "]", "is", "None", ":", "\n", "            ", "return", "tb", ",", "pc", "\n", "", "all_voxel_centers", "=", "point_box_utils", ".", "rotatez", "(", "self", ".", "all_voxel_centers", ",", "batch_dict", "[", "\"rot_z\"", "]", "[", "binds", "]", ")", "if", "\"rot_z\"", "in", "batch_dict", "else", "self", ".", "all_voxel_centers", "\n", "if", "self", ".", "reg", ":", "\n", "            ", "gt_voxel_centers", "=", "all_voxel_centers", "+", "batch_dict", "[", "\"res_mtrx\"", "]", "[", "binds", "]", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "gt_voxel_centers", "=", "all_voxel_centers", "\n", "", "points", ",", "bm_points", ",", "fore_gt_center", ",", "filter_center", ",", "boxvoxel_center", ",", "addpnt_view", ",", "drop_voxel_center", ",", "drop_det_voxel_point", ",", "drop_det_point_xyz", "=", "[", "np", ".", "zeros", "(", "[", "0", ",", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "for", "i", "in", "range", "(", "9", ")", "]", "\n", "gt_batch_inds", "=", "(", "batch_dict", "[", "\"gt_b_ind\"", "]", "==", "binds", ")", ".", "nonzero", "(", ")", "\n", "points", "=", "batch_dict", "[", "\"gt_points_xyz\"", "]", "[", "gt_batch_inds", "[", ":", ",", "0", "]", ",", "...", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "occ_batch_inds", "=", "(", "batch_dict", "[", "\"added_occ_b_ind\"", "]", "==", "binds", ")", ".", "nonzero", "(", ")", "\n", "occ_points", "=", "batch_dict", "[", "\"added_occ_xyz\"", "]", "[", "occ_batch_inds", "[", ":", ",", "0", "]", ",", "...", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "filtered_occpoints", "=", "occ_points", "[", "...", ",", ":", "3", "]", "\n", "predicted_occ_prob", "=", "batch_dict", "[", "'batch_pred_occ_prob'", "]", "[", "binds", ",", "...", "]", "\n", "predicted_occ_abspred", "=", "all_voxel_centers", "#", "\n", "# print(\"predicted_occ_abspred\", torch.min(predicted_occ_abspred.view(-1,3),dim=0)[0], torch.max(predicted_occ_abspred.view(-1,3),dim=0)[0])", "\n", "occ_center", "=", "None", "\n", "general_cls_loss_center", "=", "None", "\n", "point_dist_mask", "=", "batch_dict", "[", "\"vcc_mask\"", "]", "[", "binds", ",", "...", "]", "\n", "box_3d", "=", "batch_dict", "[", "\"gt_boxes\"", "]", "[", "binds", "]", "[", ":", "batch_dict", "[", "\"gt_boxes_num\"", "]", "[", "binds", "]", ",", "...", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "################# fore_voxel_groundtruth view #################", "\n", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "FORE_VOX_GT_VIEW", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"fore_voxelwise_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "fore_gt_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "forevox_gt_view", "=", "vis_occ_utils", ".", "draw_lidars_box3d_on_birdview", "(", "points", ",", "fore_gt_center", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "(", "200", ",", "200", ",", "200", ")", ",", "(", "255", ",", "211", ",", "0", ")", "]", ",", "box_3d", ",", "self", ".", "bev_img_h", ",", "self", ".", "bev_img_w", ",", "self", ".", "xrange", "[", "0", "]", ",", "self", ".", "xrange", "[", "1", "]", ",", "self", ".", "yrange", "[", "0", "]", ",", "self", ".", "yrange", "[", "1", "]", ")", "\n", "tb", "[", "\"forevox_gt_view_img\"", "]", "=", "forevox_gt_view", "\n", "\n", "################# occ complex view #################", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "OCC_FORE_VOX_GT_VIEW", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"occ_fore_cls_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "occ_fore_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "OCC_MIRR_VOX_GT_VIEW", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"occ_mirr_cls_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "occ_mirr_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "OCC_BM_VOX_GT_VIEW", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"occ_bm_cls_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "occ_bm_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "OCC_POS_VOX_GT_VIEW", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"pos_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "occ_pos_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "OCC_NEG_VOX_GT_VIEW", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"neg_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "occ_neg_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "\n", "################# occ view #########################", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "OCC_VOX", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"occ_voxelwise_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "occ_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "\n", "################# best_match view #########################", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "BM_VOX_VIEW", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"bm_voxelwise_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "bmvoxel_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "\n", "################# general_cls_loss view #########################", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "CLS_LOSS", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"general_cls_loss_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "general_cls_loss_center", "=", "gt_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "\n", "################# filter view #################", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "FILTER_VIEW", "and", "self", ".", "data_cfg", ".", "OCC", ".", "DIST_KERN", "[", "0", "]", ">", "0", ":", "\n", "# (ny, nx, nz * sz * sy * sx) -> p x (nyi, nxj, permk)", "\n", "            ", "inds", "=", "(", "point_dist_mask", ">", "1e-3", ")", ".", "nonzero", "(", ")", "\n", "# print(\"point_dist_mask\",point_dist_mask.shape, self.all_voxel_centers.shape)", "\n", "filter_center", "=", "all_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "filter_view", "=", "vis_occ_utils", ".", "draw_lidars_box3d_on_birdview", "(", "points", ",", "filter_center", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "(", "200", ",", "200", ",", "200", ")", ",", "(", "255", ",", "211", ",", "0", ")", "]", ",", "box_3d", ",", "self", ".", "bev_img_h", ",", "self", ".", "bev_img_w", ",", "self", ".", "xrange", "[", "0", "]", ",", "self", ".", "xrange", "[", "1", "]", ",", "self", ".", "yrange", "[", "0", "]", ",", "self", ".", "yrange", "[", "1", "]", ")", "\n", "tb", "[", "\"filter_view_img\"", "]", "=", "filter_view", "\n", "################# bbox view #################", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "BOX_VIEW", "and", "(", "self", ".", "data_cfg", ".", "OCC", ".", "BOX_WEIGHT", "!=", "\"None\"", "or", "self", ".", "data_cfg", ".", "OCC", ".", "BOX_POSITIVE", ")", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"forebox_label\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "boxvoxel_center", "=", "all_voxel_centers", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "box_view", "=", "vis_occ_utils", ".", "draw_lidars_box3d_on_birdview", "(", "points", ",", "boxvoxel_center", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "(", "200", ",", "200", ",", "200", ")", ",", "(", "255", ",", "211", ",", "0", ")", "]", ",", "box_3d", ",", "self", ".", "bev_img_h", ",", "self", ".", "bev_img_w", ",", "self", ".", "xrange", "[", "0", "]", ",", "self", ".", "xrange", "[", "1", "]", ",", "self", ".", "yrange", "[", "0", "]", ",", "self", ".", "yrange", "[", "1", "]", ")", "\n", "tb", "[", "\"box_view_img\"", "]", "=", "box_view", "\n", "################# predicted foreground points view #################", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "PRED_FORE_VIEW", ":", "\n", "            ", "threshs", "=", "[", "0.9", ",", ".8", ",", ".7", ",", ".6", ",", ".5", ",", ".4", ",", ".3", ",", ".2", ",", ".1", "]", "\n", "for", "thresh", "in", "threshs", ":", "\n", "                ", "inds", "=", "(", "predicted_occ_prob", ">=", "thresh", ")", ".", "nonzero", "(", ")", "\n", "predicted_occ_abspred_fitlered", "=", "predicted_occ_abspred", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "predicted_occ_abspred_fitlered", "=", "predicted_occ_abspred_fitlered", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "thresh", "==", "0.5", ":", "\n", "                    ", "filtered_occpoints", "=", "predicted_occ_abspred_fitlered", "\n", "", "forepnt_view", "=", "vis_occ_utils", ".", "draw_lidars_box3d_on_birdview", "(", "points", ",", "predicted_occ_abspred_fitlered", ",", "[", "(", "200", ",", "200", ",", "200", ")", ",", "(", "255", ",", "69", ",", "0", ")", "]", ",", "box_3d", ",", "self", ".", "bev_img_h", ",", "self", ".", "bev_img_w", ",", "self", ".", "xrange", "[", "0", "]", ",", "self", ".", "xrange", "[", "1", "]", ",", "self", ".", "yrange", "[", "0", "]", ",", "self", ".", "yrange", "[", "1", "]", ")", "\n", "tb", "[", "\"pred_fore_{}_img\"", ".", "format", "(", "thresh", ")", "]", "=", "forepnt_view", "\n", "################# added point view #################", "\n", "", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "ADD_PNT_VIEW", "and", "(", "batch_dict", "[", "\"added_occ_xyz\"", "]", "is", "not", "None", ")", ":", "\n", "            ", "addpnt_view", "=", "vis_occ_utils", ".", "draw_lidars_box3d_on_birdview", "(", "points", ",", "occ_points", ",", "[", "(", "200", ",", "200", ",", "200", ")", ",", "(", "255", ",", "69", ",", "0", ")", "]", ",", "box_3d", ",", "self", ".", "bev_img_h", ",", "self", ".", "bev_img_w", ",", "self", ".", "xrange", "[", "0", "]", ",", "self", ".", "xrange", "[", "1", "]", ",", "self", ".", "yrange", "[", "0", "]", ",", "self", ".", "yrange", "[", "1", "]", ")", "\n", "tb", "[", "\"addpnt_img\"", "]", "=", "addpnt_view", "\n", "################# drop point view #################", "\n", "", "if", "self", ".", "data_cfg", ".", "OCC", ".", "DROPOUT_RATE", ">", "1e-3", "and", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "DROP_VOX_VIEW", "and", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "            ", "fordrop_inds", "=", "batch_dict", "[", "\"voxel_drop_mask\"", "]", "[", "binds", ",", "...", "]", ".", "nonzero", "(", ")", "\n", "drop_voxel_center", "=", "all_voxel_centers", "[", "fordrop_inds", "[", ":", ",", "0", "]", ",", "fordrop_inds", "[", ":", ",", "1", "]", ",", "fordrop_inds", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "# tb[\"drop_view_img\"] = vis_occ_utils.draw_lidars_box3d_on_birdview(gt_points, drop_voxel_center.data.cpu().numpy(), [(200, 200, 200), (255, 211, 0)], box_3d, self.bev_img_h, self.bev_img_w, self.xrange[0], self.xrange[1], self.yrange[0], self.yrange[1])", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "get", "(", "\"BM_POINTS\"", ",", "False", ")", ":", "\n", "            ", "gt_batch_inds", "=", "(", "batch_dict", "[", "\"bm_points\"", "]", "[", ":", ",", "0", "]", "==", "binds", ")", ".", "nonzero", "(", ")", "\n", "bm_points", "=", "batch_dict", "[", "\"bm_points\"", "]", "[", "gt_batch_inds", "[", ":", ",", "0", "]", ",", "1", ":", "4", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "if", "self", ".", "model_cfg", ".", "OCC_PNT_UPDATE", ".", "VIS", ".", "OUTPUT_CLOUD", ":", "\n", "            ", "pc", ".", "update", "(", "{", "\n", "\"gt_points\"", ":", "points", ",", "\n", "\"bm_points\"", ":", "bm_points", ",", "\n", "\"fore_gt_center\"", ":", "fore_gt_center", ",", "\n", "\"occ_center\"", ":", "occ_center", ",", "\n", "\"general_cls_loss_center\"", ":", "general_cls_loss_center", ",", "\n", "\"filter_center\"", ":", "filter_center", ",", "\n", "\"boxvoxel_center\"", ":", "boxvoxel_center", ",", "\n", "\"addpnt_view\"", ":", "occ_points", ",", "\n", "\"proboccpoints\"", ":", "filtered_occpoints", ",", "\n", "\"drop_voxel_center\"", ":", "drop_voxel_center", ",", "\n", "\"drop_det_voxel_point\"", ":", "drop_det_voxel_point", ",", "\n", "\"drop_det_point_xyz\"", ":", "drop_det_point_xyz", ",", "\n", "\"bmvoxel_center\"", ":", "bmvoxel_center", ",", "\n", "\"gt_boxes\"", ":", "batch_dict", "[", "\"gt_boxes\"", "]", "[", "binds", ",", ":", "batch_dict", "[", "\"gt_boxes_num\"", "]", "[", "binds", "]", ",", "...", "]", "\n", "}", ")", "\n", "\n", "pc", ".", "update", "(", "{", "\n", "\"occ_fore_center\"", ":", "occ_fore_center", ",", "\n", "\"occ_mirr_center\"", ":", "occ_mirr_center", ",", "\n", "\"occ_bm_center\"", ":", "occ_bm_center", ",", "\n", "\"occ_pos_center\"", ":", "occ_pos_center", ",", "\n", "\"occ_neg_center\"", ":", "occ_neg_center", "\n", "}", ")", "\n", "\n", "# combined_cloud_ind = (batch_dict['voxel_coords'][:, 0] == binds).nonzero()", "\n", "# combined_cloud_pnts = batch_dict['voxels'][combined_cloud_ind[:, 0], ..., :3].view(-1, 3).data.cpu().numpy()", "\n", "# pc.update({\"combined_cloud_pnts\": combined_cloud_pnts})", "\n", "# pc.update(self.update_occ_vox(batch_dict))", "\n", "", "return", "tb", ",", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.filter_by_bind": [[424, 429], ["trgt_binds.to.to.to", "points[].data.cpu().numpy", "points[].data.cpu"], "methods", ["None"], ["", "def", "filter_by_bind", "(", "self", ",", "trgt_binds", ",", "binds", ",", "points", ")", ":", "\n", "        ", "trgt_binds", "=", "trgt_binds", ".", "to", "(", "torch", ".", "int64", ")", "\n", "inds", "=", "(", "binds", "==", "trgt_binds", ")", ".", "nonzero", "(", ")", "\n", "points", "=", "points", "[", "inds", "[", ":", ",", "0", "]", ",", "...", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.forward": [[430, 441], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            **kwargs:\n\n        Returns:\n            batch_dict:\n                ...\n                vfe_features: (num_voxels, C)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_pnt.add_occ_template.AddOccTemplate.update_occ_vox": [[443, 462], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "print", "print", "all_voxel_centers[].detach().cpu().numpy", "utils.coords_utils.get_all_voxel_centers_xyz", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "all_voxel_centers[].detach().cpu", "all_voxel_centers.view", "all_voxel_centers[].detach"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.get_all_voxel_centers_xyz"], ["", "def", "update_occ_vox", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "nx", ",", "ny", ",", "nz", "=", "[", "1408", ",", "1600", ",", "40", "]", "\n", "x_origin", "=", "self", ".", "data_cfg", ".", "POINT_CLOUD_RANGE", "[", "0", "]", "\n", "y_origin", "=", "self", ".", "data_cfg", ".", "POINT_CLOUD_RANGE", "[", "1", "]", "\n", "z_origin", "=", "self", ".", "data_cfg", ".", "POINT_CLOUD_RANGE", "[", "2", "]", "\n", "range_origin", "=", "torch", ".", "tensor", "(", "[", "x_origin", ",", "y_origin", ",", "z_origin", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "grids_num", "=", "torch", ".", "tensor", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "\"cuda\"", ")", "\n", "voxel_size", "=", "torch", ".", "tensor", "(", "[", "0.05", ",", "0.05", ",", "0.1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "all_voxel_centers", "=", "coords_utils", ".", "get_all_voxel_centers_xyz", "(", "1", ",", "grids_num", ",", "range_origin", ",", "voxel_size", ")", "[", "0", ",", "...", "]", "#", "\n", "print", "(", "\"occ_voxel_features\"", ",", "range_origin", ",", "torch", ".", "max", "(", "all_voxel_centers", ".", "view", "(", "-", "1", ",", "3", ")", ",", "dim", "=", "0", ")", "[", "0", "]", ",", "torch", ".", "max", "(", "batch_dict", "[", "\"voxel_coords\"", "]", ",", "dim", "=", "0", ")", "[", "0", "]", ",", "torch", ".", "min", "(", "batch_dict", "[", "\"voxel_coords\"", "]", ",", "dim", "=", "0", ")", "[", "0", "]", ")", "\n", "inds", "=", "(", "batch_dict", "[", "\"occ_voxel_features\"", "]", "[", "...", ",", "0", "]", ">=", "0.1", ")", ".", "nonzero", "(", ")", "[", "...", ",", "0", "]", "\n", "vox_inds", "=", "batch_dict", "[", "\"voxel_coords\"", "]", "[", "inds", ",", ":", "]", "\n", "batch_vox_inds", "=", "(", "vox_inds", "[", "...", ",", "0", "]", "==", "0", ")", ".", "nonzero", "(", ")", "[", "...", ",", "0", "]", "\n", "vox_inds", "=", "vox_inds", "[", "batch_vox_inds", ",", ":", "]", "\n", "print", "(", "\"inds, voxel_coords, vox_inds\"", ",", "inds", ".", "shape", ",", "batch_vox_inds", ".", "shape", ",", "vox_inds", ".", "shape", ",", "torch", ".", "sum", "(", "vox_inds", "[", "...", ",", "0", "]", ")", ")", "\n", "\n", "predicted_occ_abspred_fitlered", "=", "all_voxel_centers", "[", "vox_inds", "[", "...", ",", "3", "]", ",", "vox_inds", "[", "...", ",", "2", "]", ",", "vox_inds", "[", "...", ",", "1", "]", ",", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "{", "\"proboccpoints\"", ":", "predicted_occ_abspred_fitlered", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_3D.OccHead3D.__init__": [[11, 32], ["occ_head_template.OccHeadTemplate.__init__", "print", "print", "int", "print", "print", "spconv.SparseSequential", "spconv.SubMConv3d", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "spconv.SparseSequential", "model_cfg.OCC_DENSE_HEAD.LOSS_CONFIG.get", "spconv.SubMConv3d"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "data_cfg", ",", "input_channels", ",", "num_class", ",", "grid_size", ")", ":", "\n", "        ", "self", ".", "is_softmax", "=", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "get", "(", "\"CLS_LOSS_TYPE\"", ",", "None", ")", "is", "not", "None", "and", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "CLS_LOSS_TYPE", "==", "\"softmax\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "model_cfg", "=", "model_cfg", ",", "data_cfg", "=", "data_cfg", ",", "num_class", "=", "num_class", ",", "grid_size", "=", "grid_size", ")", "\n", "print", "(", "\"OccHead num_class\"", ",", "num_class", ")", "\n", "print", "(", "\"OccHead input_channels\"", ",", "input_channels", ")", "\n", "\n", "self", ".", "stride", "=", "int", "(", "model_cfg", ".", "BACKBONE_3D", ".", "STRIDE", ")", "\n", "\n", "print", "(", "\"self.stride !!!!!!!!\"", ",", "self", ".", "stride", ",", "self", ".", "num_class", ")", "\n", "print", "(", "\"is_softmax:\"", ",", "self", ".", "is_softmax", ")", "\n", "cls_channel", "=", "num_class", "+", "1", "if", "self", ".", "is_softmax", "else", "num_class", "\n", "# norm_fn = partial(nn.BatchNorm1d, eps=1e-3, momentum=0.01)", "\n", "\n", "self", ".", "conv_cls", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "input_channels", ",", "(", "self", ".", "stride", "**", "3", ")", "*", "cls_channel", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "indice_key", "=", "'cls_ind'", ")", ",", "\n", ")", "\n", "self", ".", "logit2prob", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "if", "self", ".", "is_softmax", "else", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "if", "self", ".", "reg", ":", "\n", "            ", "self", ".", "conv_res", "=", "spconv", ".", "SparseSequential", "(", "spconv", ".", "SubMConv3d", "(", "input_channels", ",", "(", "self", ".", "stride", "**", "3", ")", "*", "self", ".", "num_class", "*", "self", ".", "res_num_dim", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "'res_ind'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_3D.OccHead3D.dim_transfrom": [[33, 40], ["list", "print", "tensor.reshape.reshape.permute", "tensor.reshape.reshape.reshape", "tensor.reshape.reshape.size"], "methods", ["None"], ["", "", "def", "dim_transfrom", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "N", ",", "C", ",", "Z", ",", "H", ",", "W", "=", "list", "(", "tensor", ".", "size", "(", ")", ")", "\n", "print", "(", "\"N, C, Z, H, W\"", ",", "N", ",", "C", ",", "Z", ",", "H", ",", "W", ")", "\n", "# [N, 2, 2, 2, PERM, C, Z, H, W] -> [N, H, 2, W, 2, Z, 2, PERM, C] : [0, 1, 2, 3, 4, 5, 6, 7, 8] -> [0, 7, 2, 8, 3, 6, 1, 4, 5]", "\n", "tensor", "=", "tensor", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "2", ",", "1", ")", "\n", "tensor", "=", "tensor", ".", "reshape", "(", "N", ",", "H", ",", "W", ",", "Z", ",", "C", ")", "#.contiguous()", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_3D.OccHead3D.forward": [[41, 53], ["super().prepare_loss_map", "occ_head_3D.OccHead3D.conv_cls().dense", "occ_head_3D.OccHead3D.logit2prob", "occ_head_3D.OccHead3D.conv_res().dense", "occ_head_3D.OccHead3D.conv_cls", "occ_head_3D.OccHead3D.conv_res"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.prepare_loss_map"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "# if self.training or hasattr(self.model_cfg, \"OCC_POST_PROCESSING\"):", "\n", "        ", "data_dict", "=", "super", "(", "OccHead3D", ",", "self", ")", ".", "prepare_loss_map", "(", "data_dict", ")", "\n", "spatial_features", "=", "data_dict", "[", "'encoded_spconv_tensor'", "]", "\n", "# print(\"spatial_features.shape\", spatial_features.shape)", "\n", "logit_preds", "=", "self", ".", "conv_cls", "(", "spatial_features", ")", ".", "dense", "(", ")", "\n", "prob_preds", "=", "self", ".", "logit2prob", "(", "logit_preds", ")", "[", ":", ",", "-", "1", ":", ",", "...", "]", "# can fit both sigmoid and softmax", "\n", "data_dict", "[", "'pred_occ_logit'", "]", "=", "logit_preds", "# * torch.unsqueeze(data_dict[\"point_dist_mask\"], 3)", "\n", "data_dict", "[", "'batch_pred_occ_prob'", "]", "=", "prob_preds", "[", ":", ",", "-", "1", ",", "...", "]", "*", "data_dict", "[", "\"general_cls_loss_mask\"", "]", "\n", "if", "self", ".", "reg", ":", "\n", "            ", "data_dict", "[", "'pred_sem_residuals'", "]", "=", "self", ".", "conv_res", "(", "spatial_features", ")", ".", "dense", "(", ")", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.__init__": [[8, 34], ["occ_head_template.OccHeadTemplate.__init__", "print", "print", "print", "print", "print", "torch.nn.Conv2d", "torch.nn.Conv2d", "occ_head_2D.OccHead2D.init_weights", "model_cfg.get", "torch.nn.Softmax", "torch.nn.Sigmoid", "model_cfg.OCC_DENSE_HEAD.LOSS_CONFIG.get", "int", "int"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "data_cfg", ",", "input_channels", ",", "num_class", ",", "grid_size", ",", "finer_indx_range", ")", ":", "\n", "        ", "self", ".", "is_softmax", "=", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "get", "(", "\"CLS_LOSS_TYPE\"", ",", "None", ")", "is", "not", "None", "and", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "CLS_LOSS_TYPE", "==", "\"softmax\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "model_cfg", "=", "model_cfg", ",", "data_cfg", "=", "data_cfg", ",", "num_class", "=", "num_class", ",", "grid_size", "=", "grid_size", ",", "finer_indx_range", "=", "finer_indx_range", ")", "\n", "print", "(", "\"OccHead num_class\"", ",", "num_class", ")", "\n", "print", "(", "\"OccHead input_channels\"", ",", "input_channels", ")", "\n", "\n", "print", "(", "\"self.perm\"", ",", "self", ".", "perm", ")", "\n", "if", "model_cfg", ".", "get", "(", "\"BACKBONE_2D\"", ",", "None", ")", "is", "None", ":", "\n", "            ", "self", ".", "stride", "=", "2", "\n", "", "else", ":", "\n", "            ", "self", ".", "stride", "=", "int", "(", "model_cfg", ".", "BACKBONE_2D", ".", "LAYER_STRIDES", "[", "0", "]", ")", "//", "int", "(", "model_cfg", ".", "BACKBONE_2D", ".", "UPSAMPLE_STRIDES", "[", "0", "]", ")", "\n", "", "print", "(", "\"self.stride !!!!!!!!\"", ",", "self", ".", "stride", ",", "self", ".", "num_class", ")", "\n", "print", "(", "\"is_softmax:\"", ",", "self", ".", "is_softmax", ")", "\n", "cls_channel", "=", "num_class", "+", "1", "if", "self", ".", "is_softmax", "else", "num_class", "\n", "self", ".", "conv_cls", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "perm", "*", "self", ".", "stride", "*", "self", ".", "stride", "*", "cls_channel", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "conv_res", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "input_channels", ",", "self", ".", "perm", "*", "self", ".", "stride", "*", "self", ".", "stride", "*", "self", ".", "num_class", "*", "self", ".", "res_num_dim", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "logit2prob", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "if", "self", ".", "is_softmax", "else", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.init_weights": [[35, 39], ["torch.nn.init.constant_", "torch.nn.init.normal_", "numpy.log"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pi", "=", "0.01", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_cls", ".", "bias", ",", "-", "np", ".", "log", "(", "(", "1", "-", "pi", ")", "/", "pi", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "self", ".", "conv_res", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.dim_transfrom": [[40, 48], ["list", "tensor.reshape.reshape.view", "tensor.reshape.reshape.permute", "tensor.reshape.reshape.reshape", "tensor.reshape.reshape.size"], "methods", ["None"], ["", "def", "dim_transfrom", "(", "self", ",", "tensor", ",", "hstride", ",", "wstride", ",", "perm", ")", ":", "\n", "        ", "N", ",", "CC", ",", "H", ",", "W", "=", "list", "(", "tensor", ".", "size", "(", ")", ")", "\n", "C", "=", "CC", "//", "hstride", "//", "wstride", "//", "perm", "\n", "tensor", "=", "tensor", ".", "view", "(", "N", ",", "hstride", ",", "wstride", ",", "perm", ",", "C", ",", "H", ",", "W", ")", "# [N, CC, H, W] -> [N, C, PERM, 2, 2, H, W]", "\n", "# [N, 2, 2, PERM, C, H, W] -> [N, H, 2, W, 2, PERM, C] : [0, 1, 2, 3, 4, 5, 6] -> [0, 5, 1, 6, 2, 3, 4]", "\n", "tensor", "=", "tensor", ".", "permute", "(", "0", ",", "5", ",", "1", ",", "6", ",", "2", ",", "3", ",", "4", ")", "\n", "tensor", "=", "tensor", ".", "reshape", "(", "N", ",", "H", "*", "hstride", ",", "W", "*", "wstride", ",", "perm", ",", "C", ")", "#.contiguous()", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.forward": [[49, 85], ["occ_head_2D.OccHead2D.conv_cls", "occ_head_2D.OccHead2D.conv_res", "occ_head_2D.OccHead2D.dim_transfrom", "occ_head_2D.OccHead2D.dim_transfrom", "list", "res_preds.view.view.view", "list", "occ_head_2D.OccHead2D.logit2prob", "[].view().to", "[].view", "[].view", "torch.ones_like", "res_preds.view.view.squeeze", "super().prepare_loss_map", "hasattr", "torch.arange", "[].view", "res_preds.view.view.view", "prob_preds.view", "torch.max"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.dim_transfrom", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_2D.OccHead2D.dim_transfrom", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.prepare_loss_map"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "spatial_features", "=", "data_dict", "[", "'spatial_features_2d'", "]", "if", "'spatial_features_2d'", "in", "data_dict", "else", "data_dict", "[", "\"spatial_features\"", "]", "\n", "bs", "=", "list", "(", "spatial_features", ".", "shape", ")", "[", "0", "]", "\n", "logit_preds", "=", "self", ".", "conv_cls", "(", "spatial_features", ")", "# [N, C, H, W] -> [N, C, PERM, 2, 2, H, W]", "\n", "res_preds", "=", "self", ".", "conv_res", "(", "spatial_features", ")", "\n", "# if", "\n", "logit_preds", "=", "self", ".", "dim_transfrom", "(", "logit_preds", ",", "self", ".", "stride", ",", "self", ".", "stride", ",", "self", ".", "perm", ")", "\n", "res_preds", "=", "self", ".", "dim_transfrom", "(", "res_preds", ",", "self", ".", "stride", ",", "self", ".", "stride", ",", "self", ".", "perm", ")", "\n", "N", ",", "H", ",", "W", ",", "perm", ",", "C", "=", "list", "(", "res_preds", ".", "shape", ")", "\n", "res_preds", "=", "res_preds", ".", "view", "(", "N", ",", "H", ",", "W", ",", "perm", ",", "self", ".", "num_class", ",", "self", ".", "res_num_dim", ")", "\n", "\n", "prob_preds", "=", "self", ".", "logit2prob", "(", "logit_preds", ")", "[", "...", ",", "-", "1", ":", "]", "# can fit both sigmoid and softmax", "\n", "self", ".", "forward_ret_dict", "[", "'pred_occ_logit'", "]", "=", "logit_preds", "\n", "\n", "if", "self", ".", "num_class", ">", "1", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'first_perm'", ")", ":", "\n", "                ", "self", ".", "first_perm", "=", "torch", ".", "arange", "(", "bs", "*", "self", ".", "ny", "*", "self", ".", "nx", "*", "self", ".", "nz", "*", "self", ".", "sz", "*", "self", ".", "sy", "*", "self", ".", "sx", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "\"cuda\"", ")", "\n", "\n", "", "label_ind", "=", "torch", ".", "max", "(", "logit_preds", ",", "axis", "=", "-", "1", ")", "[", "1", "]", ".", "view", "(", "-", "1", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "res_preds_picked", "=", "res_preds", ".", "view", "(", "-", "1", ",", "self", ".", "num_class", ",", "self", ".", "res_num_dim", ")", "[", "self", ".", "first_perm", ",", "label_ind", ",", ":", "]", ".", "view", "(", "bs", ",", "self", ".", "ny", ",", "self", ".", "nx", ",", "self", ".", "nz", "*", "self", ".", "sz", "*", "self", ".", "sy", "*", "self", ".", "sx", ",", "self", ".", "res_num_dim", ")", "\n", "prob_preds_picked", "=", "prob_preds", ".", "view", "(", "-", "1", ",", "self", ".", "num_class", ")", "[", "self", ".", "first_perm", ",", "label_ind", "]", ".", "view", "(", "bs", ",", "self", ".", "ny", ",", "self", ".", "nx", ",", "self", ".", "nz", "*", "self", ".", "sz", "*", "self", ".", "sy", "*", "self", ".", "sx", ")", "\n", "data_dict", "[", "'batch_pred_occ_label'", "]", "=", "label_ind", "+", "1", "\n", "data_dict", "[", "'batch_pred_occ_pnts'", "]", "=", "res_preds_picked", "\n", "", "else", ":", "\n", "            ", "prob_preds_picked", "=", "prob_preds", "[", "...", ",", "0", "]", "\n", "data_dict", "[", "'batch_pred_occ_label'", "]", "=", "torch", ".", "ones_like", "(", "prob_preds", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "res_preds_picked", "=", "res_preds", ".", "squeeze", "(", "-", "2", ")", "\n", "", "data_dict", "[", "'batch_pred_occ_pnts'", "]", "=", "res_preds_picked", "\n", "data_dict", "[", "'batch_pred_occ_prob'", "]", "=", "prob_preds_picked", "*", "data_dict", "[", "\"point_dist_mask\"", "]", "\n", "# data_dict['batch_pred_occ_prob_prefilter'] = prob_preds_picked", "\n", "self", ".", "forward_ret_dict", "[", "'pred_occ_residuals'", "]", "=", "res_preds_picked", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "super", "(", "OccHead2D", ",", "self", ")", ".", "prepare_loss_map", "(", "data_dict", ")", "\n", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.__init__": [[9, 22], ["torch.Module.__init__", "occ_head_template.OccHeadTemplate.model_cfg.OCC_DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.get", "occ_head_template.OccHeadTemplate.model_cfg.OCC_DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.get", "model_cfg.PARAMS.get", "occ_head_template.OccHeadTemplate.build_losses", "occ_head_template.OccHeadTemplate.model_cfg.OCC_DENSE_HEAD.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.build_losses"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "data_cfg", ",", "num_class", ",", "grid_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_cfg", "=", "data_cfg", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "noloss", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "get", "(", "\"NOLOSS\"", ",", "None", ")", "is", "not", "None", "and", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "NOLOSS", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "forward_ret_dict", "=", "{", "}", "\n", "self", ".", "nx", ",", "self", ".", "ny", ",", "self", ".", "nz", "=", "grid_size", "\n", "self", ".", "occ_fore_res_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", ".", "get", "(", "\"occ_fore_res_weight\"", ",", "0.1", ")", "\n", "self", ".", "occ_fore_cls_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", ".", "get", "(", "\"occ_fore_cls_weight\"", ",", "1.0", ")", "\n", "self", ".", "res_num_dim", "=", "data_cfg", ".", "OCC", ".", "RES_NUM_DIM", "\n", "self", ".", "reg", "=", "model_cfg", ".", "PARAMS", ".", "get", "(", "\"REG\"", ",", "False", ")", "\n", "self", ".", "build_losses", "(", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.prepare_loss_map": [[23, 33], ["None"], "methods", ["None"], ["", "def", "prepare_loss_map", "(", "self", ",", "batch_dict", ")", ":", "\n", "# self.forward_ret_dict.update({", "\n", "#     \"pos_mask\": batch_dict['pos_mask'],", "\n", "#     \"general_cls_loss_mask_float\": batch_dict['general_cls_loss_mask_float'],", "\n", "#     \"general_cls_loss_mask\": batch_dict['general_cls_loss_mask'],", "\n", "# })", "\n", "# batch_dict.pop(\"general_cls_loss_mask_float\")", "\n", "# batch_dict.pop(\"general_cls_loss_mask\")", "\n", "# batch_dict.pop(\"pos_mask\")", "\n", "        ", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.build_losses": [[34, 50], ["occ_head_template.OccHeadTemplate.add_module", "occ_head_template.OccHeadTemplate.add_module", "occ_head_template.OccHeadTemplate.add_module", "utils.loss_utils.SoftmaxFocalClassificationLoss", "utils.loss_utils.SigmoidFocalClassificationLoss", "losses_cfg.get", "getattr", "range"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ",", "losses_cfg", ")", ":", "\n", "        ", "if", "self", ".", "noloss", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "is_softmax", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "'cls_loss_func'", ",", "\n", "loss_utils", ".", "SoftmaxFocalClassificationLoss", "(", "alpha", "=", "1.0", ",", "gamma", "=", "2.0", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "'cls_loss_func'", ",", "\n", "loss_utils", ".", "SigmoidFocalClassificationLoss", "(", "alpha", "=", "losses_cfg", ".", "LOSS_WEIGHTS", "[", "'cls_alpha'", "]", ",", "gamma", "=", "2.0", ")", "\n", ")", "\n", "", "if", "self", ".", "reg", ":", "\n", "            ", "reg_loss_name", "=", "'WeightedSmoothL1Loss'", "if", "losses_cfg", ".", "get", "(", "'REG_LOSS_TYPE'", ",", "None", ")", "is", "None", "else", "losses_cfg", ".", "REG_LOSS_TYPE", "\n", "self", ".", "add_module", "(", "'reg_loss_func'", ",", "getattr", "(", "loss_utils", ",", "reg_loss_name", ")", "(", "beta", "=", "losses_cfg", ".", "LOSS_WEIGHTS", "[", "'res_beta'", "]", ",", "code_weights", "=", "[", "1.0", "for", "i", "in", "range", "(", "self", ".", "res_num_dim", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_res_layer_loss": [[52, 69], ["batch_dict[].unsqueeze", "int", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "[].view", "occ_head_template.OccHeadTemplate.mean_masked_loss", "reg_loss.item", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "[].view.view"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.mean_masked_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "", "def", "get_res_layer_loss", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "general_reg_loss_mask", "=", "batch_dict", "[", "\"general_reg_loss_mask\"", "]", "\n", "general_reg_loss_mask_float", "=", "batch_dict", "[", "\"general_reg_loss_mask_float\"", "]", ".", "unsqueeze", "(", "1", ")", "\n", "preds_sem_res", "=", "batch_dict", "[", "'pred_sem_residuals'", "]", "\n", "res_mtrx", "=", "batch_dict", "[", "'res_mtrx'", "]", "\n", "bs", "=", "int", "(", "preds_sem_res", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "num_class", ">", "1", ":", "\n", "            ", "label_ind", "=", "torch", ".", "clamp", "(", "(", "positive_voxelwise_labels", "-", "1", ")", ",", "min", "=", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "preds_sem_res", "=", "preds_sem_res", ".", "view", "(", "-", "1", ",", "self", ".", "num_class", ",", "self", ".", "res_num_dim", ")", "[", "self", ".", "first_perm", ",", "label_ind", ",", ":", "]", ".", "view", "(", "bs", ",", "self", ".", "ny", ",", "self", ".", "nx", ",", "self", ".", "nz", "*", "self", ".", "sz", "*", "self", ".", "sy", "*", "self", ".", "sx", ",", "self", ".", "res_num_dim", ")", "\n", "", "reg_loss", "=", "self", ".", "mean_masked_loss", "(", "preds_sem_res", ",", "res_mtrx", ",", "self", ".", "reg_loss_func", ",", "general_reg_loss_mask_float", ",", "mask", "=", "general_reg_loss_mask", ")", "*", "self", ".", "occ_fore_res_weight", "\n", "\n", "tb_dict", "=", "{", "\n", "'occ_loss_res'", ":", "reg_loss", ".", "item", "(", ")", "\n", "}", "\n", "\n", "return", "reg_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_cls_layer_loss": [[71, 86], ["batch_dict[].unsqueeze", "batch_dict[].to", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "one_hot_targets.permute.permute.permute", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "occ_head_template.OccHeadTemplate.mean_masked_loss", "cls_loss.item"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.mean_masked_loss"], ["", "def", "get_cls_layer_loss", "(", "self", ",", "batch_dict", ")", ":", "\n", "\n", "        ", "general_cls_loss_mask_float", "=", "batch_dict", "[", "\"general_cls_loss_mask_float\"", "]", ".", "unsqueeze", "(", "1", ")", "\n", "pred_occ_logit", "=", "batch_dict", "[", "'pred_occ_logit'", "]", "\n", "pos_mask", "=", "batch_dict", "[", "\"pos_mask\"", "]", ".", "to", "(", "pred_occ_logit", ".", "dtype", ")", "\n", "complimentary_mask", "=", "torch", ".", "ones_like", "(", "pos_mask", ",", "device", "=", "pos_mask", ".", "device", ",", "dtype", "=", "pos_mask", ".", "dtype", ")", "-", "pos_mask", "\n", "one_hot_targets", "=", "torch", ".", "stack", "(", "[", "complimentary_mask", ",", "pos_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "one_hot_targets", "=", "one_hot_targets", "if", "self", ".", "is_softmax", "else", "one_hot_targets", "[", "...", ",", "1", ":", "]", "\n", "one_hot_targets", "=", "one_hot_targets", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "\n", "\n", "cls_loss", "=", "self", ".", "mean_masked_loss", "(", "pred_occ_logit", ",", "one_hot_targets", ",", "self", ".", "cls_loss_func", ",", "general_cls_loss_mask_float", ",", "mask", "=", "batch_dict", "[", "'general_cls_loss_mask'", "]", ")", "*", "self", ".", "occ_fore_cls_weight", "\n", "tb_dict", "=", "{", "\n", "'occ_loss_cls'", ":", "cls_loss", ".", "item", "(", ")", "\n", "}", "\n", "return", "cls_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.mean_masked_loss": [[88, 100], ["loss_func", "mask.nonzero", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "mean_masked_loss", "(", "self", ",", "pred", ",", "target", ",", "loss_func", ",", "loss_weight_float", ",", "mask", "=", "None", ")", ":", "\n", "# inds = (loss_weight_float > 1e-4).nonzero()", "\n", "# valid_weight = torch.clamp(torch.sum(loss_weight_float), min=1.0)", "\n", "# return torch.sum(loss_map[inds[:,0], inds[:,1], inds[:,2], inds[:,3], :]) / valid_weight", "\n", "        ", "inds", "=", "mask", ".", "nonzero", "(", ")", "if", "mask", "is", "not", "None", "else", "(", "loss_weight_float", ">", "1e-4", ")", ".", "nonzero", "(", ")", "\n", "loss_weight_float", "=", "loss_weight_float", "[", "inds", "[", ":", ",", "0", "]", ",", ":", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", "inds", "[", ":", ",", "3", "]", "]", "\n", "target", "=", "target", "[", "inds", "[", ":", ",", "0", "]", ",", ":", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", "inds", "[", ":", ",", "3", "]", "]", "\n", "pred", "=", "pred", "[", "inds", "[", ":", ",", "0", "]", ",", ":", ",", "inds", "[", ":", ",", "1", "]", ",", "inds", "[", ":", ",", "2", "]", ",", "inds", "[", ":", ",", "3", "]", "]", "\n", "loss", "=", "loss_func", "(", "pred", ",", "target", ",", "weights", "=", "None", ")", "\n", "# print(\"pred\", pred.shape, \"target\", target.shape, \"loss\",loss.shape, loss_weight_float.shape)", "\n", "loss", "*=", "loss_weight_float", "\n", "return", "torch", ".", "sum", "(", "loss", ")", "/", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "loss_weight_float", ")", ",", "min", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_loss": [[102, 112], ["occ_head_template.OccHeadTemplate.get_cls_layer_loss", "occ_head_template.OccHeadTemplate.get_res_layer_loss", "tb_dict.update", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_cls_layer_loss", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.get_res_layer_loss"], ["", "def", "get_loss", "(", "self", ",", "batch_dict", ")", ":", "\n", "        ", "if", "self", ".", "noloss", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "\"cuda\"", ")", ",", "{", "}", "\n", "", "occ_loss", ",", "tb_dict", "=", "self", ".", "get_cls_layer_loss", "(", "batch_dict", ")", "\n", "if", "self", ".", "reg", ":", "\n", "            ", "reg_loss", ",", "tb_dict_res", "=", "self", ".", "get_res_layer_loss", "(", "batch_dict", ")", "\n", "occ_loss", "+=", "reg_loss", "\n", "tb_dict", ".", "update", "(", "tb_dict_res", ")", "\n", "# tb_dict['occ_loss'] = occ_loss.item()", "\n", "", "return", "occ_loss", ",", "tb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_dense_heads.occ_head_template.OccHeadTemplate.forward": [[114, 116], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.__init__": [[12, 72], ["torch.Module.__init__", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "occ_targets_template.OccTargetsTemplate.fix_conv_2dzy.weight.data.fill_", "occ_targets_template.OccTargetsTemplate.fix_conv_2dzy.requires_grad_", "hasattr", "occ_targets_template.OccTargetsTemplate.model_cfg.OCC_DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.get", "occ_targets_template.OccTargetsTemplate.model_cfg.OCC_DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.get", "occ_targets_template.OccTargetsTemplate.model_cfg.OCC_DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.get", "occ_targets_template.OccTargetsTemplate.model_cfg.PARAMS.get", "occ_targets_template.OccTargetsTemplate.data_cfg.OCC.get", "occ_targets_template.OccTargetsTemplate.data_cfg.OCC.get", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "numpy.asarray", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "hasattr", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "occ_targets_template.OccTargetsTemplate.data_cfg.OCC.get", "numpy.array", "numpy.array", "occ_targets_template.OccTargetsTemplate.data_cfg.OCC.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "voxel_size", ",", "point_cloud_range", ",", "data_cfg", ",", "grid_size", ",", "\n", "num_class", ",", "voxel_centers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_cfg", "=", "model_cfg", "\n", "self", ".", "data_cfg", "=", "data_cfg", "\n", "self", ".", "num_class", "=", "num_class", "\n", "\n", "self", ".", "nx", ",", "self", ".", "ny", ",", "self", ".", "nz", "=", "grid_size", "\n", "self", ".", "min_grid_tensor", "=", "torch", ".", "as_tensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "self", ".", "max_grid_tensor", "=", "torch", ".", "as_tensor", "(", "[", "[", "self", ".", "nx", "-", "1", ",", "self", ".", "ny", "-", "1", ",", "self", ".", "nz", "-", "1", "]", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "self", ".", "nvx", ",", "self", ".", "nvy", ",", "self", ".", "nvz", "=", "voxel_size", "\n", "self", ".", "point_cloud_range", "=", "point_cloud_range", "\n", "self", ".", "det_point_cloud_range", "=", "data_cfg", ".", "POINT_CLOUD_RANGE", "\n", "# 1 X 3", "\n", "self", ".", "voxel_size", "=", "torch", ".", "as_tensor", "(", "[", "voxel_size", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "self", ".", "point_origin_tensor", "=", "torch", ".", "as_tensor", "(", "[", "point_cloud_range", "[", ":", "3", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "self", ".", "point_max_tensor", "=", "torch", ".", "as_tensor", "(", "[", "point_cloud_range", "[", "3", ":", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "\n", "self", ".", "fix_conv_2dzy", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "fix_conv_2dzy", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "self", ".", "fix_conv_2dzy", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "# self.fix_conv_3d = spconv.SparseSequential(", "\n", "#     block(1, 1, data_cfg.OCC.DIST_KERN, norm_fn=None, stride=1, padding=[dist // 2 for dist in data_cfg.OCC.DIST_KERN], indice_key='spconvfix', conv_type='fixspconv'))", "\n", "# self.fix_conv_3d.requires_grad_(False)", "\n", "self", ".", "all_voxel_centers", "=", "voxel_centers", "[", "\"all_voxel_centers\"", "]", "\n", "self", ".", "all_voxel_centers_2d", "=", "voxel_centers", "[", "\"all_voxel_centers_2d\"", "]", "\n", "\n", "if", "hasattr", "(", "self", ".", "data_cfg", ".", "OCC", ",", "'SUPPORT_SPHERE_RANGE'", ")", ":", "\n", "            ", "sphere_range", "=", "np", ".", "asarray", "(", "self", ".", "data_cfg", ".", "OCC", ".", "SUPPORT_SPHERE_RANGE", ")", "\n", "self", ".", "sphere_origin_tensor", "=", "torch", ".", "as_tensor", "(", "[", "sphere_range", "[", ":", "3", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "self", ".", "rever_sphere_origin_tensor", "=", "torch", ".", "as_tensor", "(", "[", "sphere_range", "[", "2", ":", ":", "-", "1", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "self", ".", "sphere_max_tensor", "=", "torch", ".", "as_tensor", "(", "[", "sphere_range", "[", "3", ":", "6", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "if", "hasattr", "(", "self", ".", "data_cfg", ".", "OCC", ",", "'SUPPORT_SPHERE_VOXEL_SIZE'", ")", ":", "\n", "                ", "sphere_voxel_size", "=", "np", ".", "array", "(", "[", "self", ".", "data_cfg", ".", "OCC", ".", "SUPPORT_SPHERE_VOXEL_SIZE", "[", "0", "]", ",", "self", ".", "data_cfg", ".", "OCC", ".", "SUPPORT_SPHERE_VOXEL_SIZE", "[", "1", "]", ",", "sphere_range", "[", "6", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "sphere_voxel_size", "=", "np", ".", "array", "(", "[", "voxel_size", "[", "0", "]", ",", "voxel_size", "[", "1", "]", ",", "sphere_range", "[", "6", "]", "]", ")", "\n", "", "self", ".", "sphere_voxel_size", "=", "torch", ".", "as_tensor", "(", "sphere_voxel_size", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "self", ".", "reverse_sphere_voxel_size", "=", "torch", ".", "as_tensor", "(", "[", "sphere_voxel_size", "[", "2", "]", ",", "sphere_voxel_size", "[", "1", "]", ",", "sphere_voxel_size", "[", "0", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "sphere_grid_size", "=", "(", "(", "sphere_range", "[", "3", ":", "6", "]", "-", "sphere_range", "[", ":", "3", "]", ")", "/", "sphere_voxel_size", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "self", ".", "sphere_nx", ",", "self", ".", "sphere_ny", ",", "self", ".", "sphere_nz", "=", "sphere_grid_size", "[", "0", "]", ",", "sphere_grid_size", "[", "1", "]", ",", "sphere_grid_size", "[", "2", "]", "\n", "self", ".", "sphere_min_grid_tensor", "=", "torch", ".", "as_tensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "self", ".", "sphere_max_grid_tensor", "=", "torch", ".", "as_tensor", "(", "[", "[", "self", ".", "sphere_nx", "-", "1", ",", "self", ".", "sphere_ny", "-", "1", ",", "self", ".", "sphere_nz", "-", "1", "]", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "self", ".", "box_weight", "=", "data_cfg", ".", "OCC", ".", "BOX_WEIGHT", "\n", "self", ".", "occ_fore_cls_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "\"occ_fore_cls_weight\"", "]", "\n", "self", ".", "occ_mirr_cls_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "\"occ_mirr_cls_weight\"", "]", "\n", "self", ".", "occ_bm_cls_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "\"occ_bm_cls_weight\"", "]", "\n", "self", ".", "occ_neg_cls_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "\"occ_neg_cls_weight\"", "]", "\n", "self", ".", "fore_dropout_cls_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "\"fore_dropout_cls_weight\"", "]", "\n", "self", ".", "fore_dropout_reg_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", "[", "\"fore_dropout_reg_weight\"", "]", "\n", "\n", "self", ".", "occ_fore_res_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", ".", "get", "(", "\"occ_fore_res_weight\"", ",", "0.1", ")", "\n", "self", ".", "occ_mirr_res_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", ".", "get", "(", "\"occ_mirr_res_weight\"", ",", "0.1", ")", "\n", "self", ".", "occ_bm_res_weight", "=", "self", ".", "model_cfg", ".", "OCC_DENSE_HEAD", ".", "LOSS_CONFIG", ".", "LOSS_WEIGHTS", ".", "get", "(", "\"occ_bm_res_weight\"", ",", "0.1", ")", "\n", "\n", "self", ".", "reverse_vis", "=", "self", ".", "model_cfg", ".", "PARAMS", ".", "get", "(", "\"REVERSE_VIS\"", ",", "\"NOTHING\"", ")", "\n", "self", ".", "concede_x", "=", "self", ".", "data_cfg", ".", "OCC", ".", "DIST_KERN", "[", "-", "1", "]", "//", "2", "if", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "\"HALF_X\"", ",", "False", ")", "else", "0", "\n", "self", ".", "concede_x", "=", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "\"CONCEDE_X\"", ",", "self", ".", "concede_x", ")", "\n", "self", ".", "point_coding", "=", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "\"USE_ABSXYZ\"", ",", "\"original\"", ")", "\n", "self", ".", "sphere_offset", "=", "torch", ".", "as_tensor", "(", "[", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "\"SPHERE_OFFSET\"", ",", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", "]", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_paddings_indicator": [[73, 80], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "len", "torch.unsqueeze.int", "torch.unsqueeze.int", "torch.unsqueeze.int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "get_paddings_indicator", "(", "self", ",", "actual_num", ",", "max_num", ",", "axis", "=", "0", ")", ":", "\n", "        ", "actual_num", "=", "torch", ".", "unsqueeze", "(", "actual_num", ",", "axis", "+", "1", ")", "\n", "max_num_shape", "=", "[", "1", "]", "*", "len", "(", "actual_num", ".", "shape", ")", "\n", "max_num_shape", "[", "axis", "+", "1", "]", "=", "-", "1", "\n", "max_num", "=", "torch", ".", "arange", "(", "max_num", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "actual_num", ".", "device", ")", ".", "view", "(", "max_num_shape", ")", "\n", "paddings_indicator", "=", "actual_num", ".", "int", "(", ")", ">", "max_num", "\n", "return", "paddings_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange": [[82, 91], ["torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.cat().all", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "point2coords_inrange", "(", "self", ",", "points", ",", "point_origin_tensor", ",", "point_max_tensor", ",", "max_grid_tensor", ",", "min_grid_tensor", ",", "voxel_size", ")", ":", "\n", "        ", "inrange_mask", "=", "torch", ".", "cat", "(", "[", "points", "[", ":", ",", ":", "3", "]", ">=", "point_origin_tensor", ",", "\n", "points", "[", ":", ",", ":", "3", "]", "<=", "point_max_tensor", "]", ",", "dim", "=", "-", "1", ")", ".", "all", "(", "-", "1", ")", "\n", "inrange_inds", "=", "torch", ".", "nonzero", "(", "inrange_mask", ")", "[", "...", ",", "0", "]", "\n", "points", "=", "points", "[", "inrange_inds", ",", ":", "]", "\n", "coords", "=", "(", "(", "points", "-", "point_origin_tensor", ")", "/", "voxel_size", ")", ".", "to", "(", "torch", ".", "int64", ")", "\n", "coords", "=", "torch", ".", "minimum", "(", "coords", ",", "max_grid_tensor", ")", "\n", "coords", "=", "torch", ".", "maximum", "(", "coords", ",", "min_grid_tensor", ")", "\n", "return", "coords", ",", "inrange_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.xyz2zyx": [[92, 94], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "xyz2zyx", "(", "self", ",", "xyz", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "xyz", "[", "...", ",", "2", "]", ",", "xyz", "[", "...", ",", "1", "]", ",", "xyz", "[", "...", ",", "0", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.xyz2yxz": [[95, 97], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "xyz2yxz", "(", "self", ",", "xyz", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "xyz", "[", "...", ",", "1", "]", ",", "xyz", "[", "...", ",", "0", "]", ",", "xyz", "[", "...", ",", "2", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_ocp_2d": [[98, 108], ["occ_voxelwise_mask_2d.unsqueeze().repeat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "occ_voxelwise_mask_2d.unsqueeze"], "methods", ["None"], ["", "def", "occ_from_ocp_2d", "(", "self", ",", "voxelwise_mask", ",", "empty_sur_thresh", "=", "\"None\"", ")", ":", "\n", "# if empty_sur_thresh != \"None\" and empty_sur_thresh < 9:", "\n", "#     occ_voxelwise_mask = voxelwise_mask", "\n", "#     occ_voxelwise_mask[:,:,:,0] = self.get_empty_mask(voxelwise_mask, empty_sur_thresh)", "\n", "# else:", "\n", "#     occ_voxelwise_mask = voxelwise_mask", "\n", "        ", "occ_voxelwise_mask", "=", "voxelwise_mask", "\n", "occ_voxelwise_mask_2d", "=", "torch", ".", "max", "(", "occ_voxelwise_mask", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "occ_voxelwise_mask_2d", "=", "torch", ".", "cumsum", "(", "occ_voxelwise_mask_2d", ",", "dim", "=", "2", ")", ">", "0.9", "\n", "return", "occ_voxelwise_mask_2d", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "nz", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_sphere_ocp": [[110, 135], ["torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "inds.view.view.unsqueeze().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "inds.view.view.view", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "inds.view.view.unsqueeze", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "occ_targets_template.OccTargetsTemplate.get_empty_mask", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_empty_mask"], ["", "def", "occ_from_sphere_ocp", "(", "self", ",", "vcc_mask", ",", "voxelwise_mask", ",", "empty_sur_thresh", "=", "\"None\"", ")", ":", "\n", "        ", "if", "self", ".", "reverse_vis", "==", "\"VCC\"", ":", "\n", "            ", "stride", "=", "self", ".", "data_cfg", ".", "OCC", ".", "DIST_KERN", "[", "2", "]", "+", "1", "\n", "inds", "=", "torch", ".", "nonzero", "(", "voxelwise_mask", ")", "\n", "# print(\"pre\", inds[0:2])", "\n", "inds", "=", "inds", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "stride", "//", "2", ",", "1", ")", "\n", "inds", "[", "...", ",", ":", ",", "3", ":", "4", "]", "-=", "torch", ".", "arange", "(", "1", ",", "stride", "//", "2", "+", "1", ",", "device", "=", "inds", ".", "device", ")", ".", "view", "(", "1", ",", "stride", "//", "2", ",", "1", ")", ".", "repeat", "(", "inds", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "inds", "[", "...", ",", ":", ",", "3", "]", "=", "torch", ".", "clamp", "(", "inds", "[", "...", ",", ":", ",", "3", "]", ",", "min", "=", "0", ",", "max", "=", "None", ")", "\n", "inds", "=", "inds", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "# print(\"after\", inds[0:10])", "\n", "occ_voxelwise_mask", "=", "torch", ".", "ones_like", "(", "voxelwise_mask", ",", "device", "=", "voxelwise_mask", ".", "device", ",", "dtype", "=", "voxelwise_mask", ".", "dtype", ")", "\n", "occ_voxelwise_mask", "[", "inds", "[", "...", ",", "0", "]", ",", "inds", "[", "...", ",", "1", "]", ",", "inds", "[", "...", ",", "2", "]", ",", "inds", "[", "...", ",", "3", "]", "]", "=", "0", "\n", "return", "occ_voxelwise_mask", "|", "voxelwise_mask", "\n", "", "elif", "self", ".", "reverse_vis", "==", "\"BACK_TRACK\"", ":", "\n", "            ", "reverse_voxelwise_mask", "=", "torch", ".", "flip", "(", "voxelwise_mask", ",", "[", "3", "]", ")", "\n", "occ_voxelwise_mask", "=", "torch", ".", "flip", "(", "torch", ".", "cumsum", "(", "reverse_voxelwise_mask", ",", "dim", "=", "3", ")", "<", "0.9", ",", "[", "3", "]", ")", "\n", "return", "occ_voxelwise_mask", "|", "(", "torch", ".", "cumsum", "(", "voxelwise_mask", ",", "dim", "=", "3", ")", ">", "0.9", ")", "\n", "", "else", ":", "\n", "            ", "if", "empty_sur_thresh", "!=", "\"None\"", "and", "empty_sur_thresh", "<", "9", ":", "\n", "                ", "occ_voxelwise_mask", "=", "voxelwise_mask", "\n", "occ_voxelwise_mask", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "self", ".", "get_empty_mask", "(", "voxelwise_mask", ",", "empty_sur_thresh", ")", "\n", "", "else", ":", "\n", "                ", "occ_voxelwise_mask", "=", "voxelwise_mask", "\n", "", "occ_voxelwise_mask", "=", "torch", ".", "cumsum", "(", "occ_voxelwise_mask", ",", "dim", "=", "3", ")", "\n", "return", "occ_voxelwise_mask", ">", "0.9", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_cylin_ocp": [[136, 156], ["utils.coords_utils.cartesian_sphere_coords", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "occ_targets_template.OccTargetsTemplate.point2coords_inrange", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "utils.coords_utils.sphere_uvd2absxyz", "utils.coords_utils.cartesian_cylinder_coords", "occ_targets_template.OccTargetsTemplate.point2coords_inrange", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "occ_targets_template.OccTargetsTemplate.occ_from_sphere_ocp"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_sphere_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.sphere_uvd2absxyz", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_cylinder_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_sphere_ocp"], ["", "", "def", "occ_from_cylin_ocp", "(", "self", ",", "vcc_mask", ",", "batch_dict", ",", "bs", ",", "voxelwise_mask", ",", "occ_pnts", ",", "occ_b", ",", "empty_sur_thresh", "=", "\"None\"", ")", ":", "\n", "        ", "occ_sphere_pnts", "=", "coords_utils", ".", "cartesian_sphere_coords", "(", "occ_pnts", "+", "self", ".", "sphere_offset", ")", "# M, spherexyz", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "            ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "occ_b", "]", "\n", "occ_sphere_pnts", "[", "...", ",", "1", "]", "+=", "rot_z", "\n", "", "sphere_voxelwise_map", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "sphere_nz", ",", "self", ".", "sphere_ny", ",", "self", ".", "sphere_nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "inrange_coords", ",", "inrange_inds", "=", "self", ".", "point2coords_inrange", "(", "occ_sphere_pnts", ",", "self", ".", "sphere_origin_tensor", ",", "self", ".", "sphere_max_tensor", ",", "self", ".", "sphere_max_grid_tensor", ",", "self", ".", "sphere_min_grid_tensor", ",", "self", ".", "sphere_voxel_size", ")", "\n", "inrange_occ_b", "=", "occ_b", "[", "inrange_inds", "]", "\n", "sphere_voxelwise_map", "[", "inrange_occ_b", ",", "inrange_coords", "[", "...", ",", "2", "]", ",", "inrange_coords", "[", "...", ",", "1", "]", ",", "inrange_coords", "[", "...", ",", "0", "]", "]", "=", "torch", ".", "ones_like", "(", "inrange_occ_b", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "sphere_voxelwise_map", ".", "device", ")", "\n", "sphere_voxelwise_ind", "=", "torch", ".", "nonzero", "(", "self", ".", "occ_from_sphere_ocp", "(", "vcc_mask", ",", "sphere_voxelwise_map", ",", "empty_sur_thresh", "=", "empty_sur_thresh", ")", ")", "# M nz ny nx", "\n", "occ_sphere_b", "=", "sphere_voxelwise_ind", "[", "...", ",", "0", "]", "\n", "occ_sphere_pnts", "=", "sphere_voxelwise_ind", "[", "...", ",", "1", ":", "]", "*", "self", ".", "reverse_sphere_voxel_size", "+", "self", ".", "rever_sphere_origin_tensor", "\n", "occ_carte_pnts", "=", "coords_utils", ".", "sphere_uvd2absxyz", "(", "occ_sphere_pnts", "[", "...", ",", "2", "]", ",", "occ_sphere_pnts", "[", "...", ",", "1", "]", ",", "occ_sphere_pnts", "[", "...", ",", "0", "]", ")", "# M 3(xyz)", "\n", "occ_cylin_pnts", "=", "coords_utils", ".", "cartesian_cylinder_coords", "(", "occ_carte_pnts", "-", "self", ".", "sphere_offset", ")", "# M 3(xyz)", "\n", "inrange_coords_cylin", ",", "inrange_inds_cylin", "=", "self", ".", "point2coords_inrange", "(", "occ_cylin_pnts", ",", "self", ".", "point_origin_tensor", ",", "self", ".", "point_max_tensor", ",", "self", ".", "max_grid_tensor", ",", "self", ".", "min_grid_tensor", ",", "self", ".", "voxel_size", ")", "\n", "inrange_b_cylin", "=", "occ_sphere_b", "[", "inrange_inds_cylin", "]", "\n", "# print(\"inrange_inds_cylin\", inrange_inds_cylin.shape, occ_cylin_pnts.shape)", "\n", "occ_voxelwise_mask", "=", "torch", ".", "zeros_like", "(", "voxelwise_mask", ",", "device", "=", "voxelwise_mask", ".", "device", ")", "\n", "occ_voxelwise_mask", "[", "inrange_b_cylin", ",", "inrange_coords_cylin", "[", "...", ",", "2", "]", ",", "inrange_coords_cylin", "[", "...", ",", "1", "]", ",", "inrange_coords_cylin", "[", "...", ",", "0", "]", "]", "=", "torch", ".", "ones_like", "(", "inrange_b_cylin", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "sphere_voxelwise_map", ".", "device", ")", "\n", "return", "occ_voxelwise_mask", ">", "0.9", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_carte_ocp": [[158, 176], ["utils.coords_utils.cartesian_sphere_coords", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "occ_targets_template.OccTargetsTemplate.point2coords_inrange", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "occ_targets_template.OccTargetsTemplate.point2coords_inrange", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "occ_targets_template.OccTargetsTemplate.occ_from_sphere_ocp", "utils.coords_utils.sphere_uvd2absxyz"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_sphere_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_sphere_ocp", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.sphere_uvd2absxyz"], ["", "def", "occ_from_carte_ocp", "(", "self", ",", "vcc_mask", ",", "batch_dict", ",", "bs", ",", "voxelwise_mask", ",", "occ_pnts", ",", "occ_b", ",", "empty_sur_thresh", "=", "\"None\"", ")", ":", "\n", "        ", "occ_sphere_pnts", "=", "coords_utils", ".", "cartesian_sphere_coords", "(", "occ_pnts", "+", "self", ".", "sphere_offset", ")", "# M, spherexyz", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "            ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "occ_b", "]", "\n", "occ_sphere_pnts", "[", "...", ",", "1", "]", "+=", "rot_z", "\n", "", "sphere_voxelwise_map", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "sphere_nz", ",", "self", ".", "sphere_ny", ",", "self", ".", "sphere_nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "inrange_coords", ",", "inrange_inds", "=", "self", ".", "point2coords_inrange", "(", "occ_sphere_pnts", ",", "self", ".", "sphere_origin_tensor", ",", "self", ".", "sphere_max_tensor", ",", "self", ".", "sphere_max_grid_tensor", ",", "self", ".", "sphere_min_grid_tensor", ",", "self", ".", "sphere_voxel_size", ")", "\n", "inrange_occ_b", "=", "occ_b", "[", "inrange_inds", "]", "\n", "sphere_voxelwise_map", "[", "inrange_occ_b", ",", "inrange_coords", "[", "...", ",", "2", "]", ",", "inrange_coords", "[", "...", ",", "1", "]", ",", "inrange_coords", "[", "...", ",", "0", "]", "]", "=", "torch", ".", "ones_like", "(", "inrange_occ_b", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "sphere_voxelwise_map", ".", "device", ")", "\n", "sphere_voxelwise_ind", "=", "torch", ".", "nonzero", "(", "self", ".", "occ_from_sphere_ocp", "(", "vcc_mask", ",", "sphere_voxelwise_map", ",", "empty_sur_thresh", "=", "empty_sur_thresh", ")", ")", "# M nz ny nx", "\n", "occ_sphere_b", "=", "sphere_voxelwise_ind", "[", "...", ",", "0", "]", "\n", "occ_sphere_pnts", "=", "sphere_voxelwise_ind", "[", "...", ",", "1", ":", "]", "*", "self", ".", "reverse_sphere_voxel_size", "+", "self", ".", "rever_sphere_origin_tensor", "\n", "occ_carte_pnts", "=", "coords_utils", ".", "sphere_uvd2absxyz", "(", "occ_sphere_pnts", "[", "...", ",", "2", "]", ",", "occ_sphere_pnts", "[", "...", ",", "1", "]", ",", "occ_sphere_pnts", "[", "...", ",", "0", "]", ")", "-", "self", ".", "sphere_offset", "# M 3(xyz)", "\n", "inrange_coords_carte", ",", "inrange_inds_carte", "=", "self", ".", "point2coords_inrange", "(", "occ_carte_pnts", ",", "self", ".", "point_origin_tensor", ",", "self", ".", "point_max_tensor", ",", "self", ".", "max_grid_tensor", ",", "self", ".", "min_grid_tensor", ",", "self", ".", "voxel_size", ")", "\n", "inrange_b_carte", "=", "occ_sphere_b", "[", "inrange_inds_carte", "]", "\n", "occ_voxelwise_mask", "=", "torch", ".", "zeros_like", "(", "voxelwise_mask", ",", "device", "=", "voxelwise_mask", ".", "device", ")", "\n", "occ_voxelwise_mask", "[", "inrange_b_carte", ",", "inrange_coords_carte", "[", "...", ",", "2", "]", ",", "inrange_coords_carte", "[", "...", ",", "1", "]", ",", "inrange_coords_carte", "[", "...", ",", "0", "]", "]", "=", "torch", ".", "ones_like", "(", "inrange_b_carte", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "sphere_voxelwise_map", ".", "device", ")", "\n", "return", "occ_voxelwise_mask", ">", "0.9", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_ocp": [[178, 185], ["occ_targets_template.OccTargetsTemplate.occ_from_sphere_ocp", "occ_targets_template.OccTargetsTemplate.occ_from_cylin_ocp", "occ_targets_template.OccTargetsTemplate.occ_from_carte_ocp"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_sphere_ocp", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_cylin_ocp", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_carte_ocp"], ["", "def", "occ_from_ocp", "(", "self", ",", "vcc_mask", ",", "batch_dict", ",", "bs", ",", "voxelwise_mask", ",", "occ_pnts", ",", "occ_b", ",", "empty_sur_thresh", "=", "\"None\"", ",", "type", "=", "\"sphere\"", ")", ":", "\n", "        ", "if", "type", "==", "\"sphere\"", ":", "\n", "            ", "return", "self", ".", "occ_from_sphere_ocp", "(", "vcc_mask", ",", "voxelwise_mask", ",", "empty_sur_thresh", "=", "empty_sur_thresh", ")", "\n", "", "elif", "type", "==", "\"cylinder\"", ":", "\n", "            ", "return", "self", ".", "occ_from_cylin_ocp", "(", "vcc_mask", ",", "batch_dict", ",", "bs", ",", "voxelwise_mask", ",", "occ_pnts", ",", "occ_b", ",", "empty_sur_thresh", "=", "empty_sur_thresh", ")", "\n", "", "elif", "type", "==", "\"cartesian\"", ":", "\n", "            ", "return", "self", ".", "occ_from_carte_ocp", "(", "vcc_mask", ",", "batch_dict", ",", "bs", ",", "voxelwise_mask", ",", "occ_pnts", ",", "occ_b", ",", "empty_sur_thresh", "=", "empty_sur_thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_empty_mask": [[186, 192], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "occ_targets_template.OccTargetsTemplate.create_predict_area2d", "neighbor_2d_mask.squeeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_predict_area2d"], ["", "", "def", "get_empty_mask", "(", "self", ",", "voxelwise_mask", ",", "surround_thresh", "=", "4", ")", ":", "\n", "        ", "occ_2d_mask", "=", "torch", ".", "sum", "(", "voxelwise_mask", ",", "dim", "=", "3", ")", "\n", "empty_2d_mask", "=", "occ_2d_mask", "==", "0", "\n", "neighbor_2d_mask", "=", "self", ".", "create_predict_area2d", "(", "occ_2d_mask", ".", "unsqueeze", "(", "1", ")", ")", ">", "surround_thresh", "\n", "# print(\"empty2dmask\", neighbor_2d_mask.shape, empty_2d_mask.shape)", "\n", "return", "empty_2d_mask", "&", "neighbor_2d_mask", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_valid": [[194, 197], ["torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "voxel_coords[].to"], "methods", ["None"], ["", "def", "get_valid", "(", "self", ",", "valid_mask", ",", "voxel_coords", ",", "voxel_features", ")", ":", "\n", "        ", "valid_inds", "=", "torch", ".", "nonzero", "(", "valid_mask", ")", "\n", "return", "voxel_coords", "[", "valid_inds", "[", ":", ",", "0", "]", "]", ".", "to", "(", "torch", ".", "int64", ")", ",", "voxel_features", "[", "valid_inds", "[", ":", ",", "0", "]", ",", "valid_inds", "[", ":", ",", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_voxelwise_mask": [[199, 203], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "get_voxelwise_mask", "(", "self", ",", "valid_coords_bnznynx", ",", "bs", ")", ":", "\n", "        ", "voxelwise_mask", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "voxelwise_mask", "[", "valid_coords_bnznynx", "[", "...", ",", "0", "]", ",", "valid_coords_bnznynx", "[", "...", ",", "1", "]", ",", "valid_coords_bnznynx", "[", "...", ",", "2", "]", ",", "valid_coords_bnznynx", "[", "...", ",", "3", "]", "]", "=", "torch", ".", "ones_like", "(", "valid_coords_bnznynx", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "valid_coords_bnznynx", ".", "device", ")", "\n", "return", "voxelwise_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_fore_mirr_voxelwise_mask": [[205, 226], ["utils.point_box_utils.torch_points_and_sym_in_box_3d_batch", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.coords_utils.cartesian_occ_coords", "occ_targets_template.OccTargetsTemplate.point2coords_inrange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "utils.common_utils.rotate_points_along_z().squeeze", "mirr_binds[].unsqueeze", "occ_targets_template.OccTargetsTemplate.xyz2zyx", "utils.common_utils.rotate_points_along_z", "utils.common_utils.rotate_points_along_z().squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_and_sym_in_box_3d_batch", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_occ_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.xyz2zyx", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "get_fore_mirr_voxelwise_mask", "(", "self", ",", "batch_dict", ",", "bs", ",", "valid_coords_bnznynx", ",", "valid_voxel_features", ",", "gt_boxes_num", ",", "gt_boxes", ")", ":", "\n", "        ", "fore_voxelwise_mask", ",", "mirr_fore_voxelwise_mask", "=", "[", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "fore_inds", ",", "mirr_inbox_point", ",", "mirr_binds", "=", "point_box_utils", ".", "torch_points_and_sym_in_box_3d_batch", "(", "valid_voxel_features", "[", "...", ",", ":", "3", "]", ",", "valid_coords_bnznynx", ",", "gt_boxes", ",", "gt_boxes_num", ",", "bs", ",", "batch_dict", "[", "'box_mirr_flag'", "]", ")", "\n", "fore_coords", "=", "valid_coords_bnznynx", "[", "fore_inds", "]", "# b zyx", "\n", "fore_voxelwise_mask", "[", "fore_coords", "[", "...", ",", "0", "]", ",", "fore_coords", "[", "...", ",", "1", "]", ",", "fore_coords", "[", "...", ",", "2", "]", ",", "fore_coords", "[", "...", ",", "3", "]", "]", "=", "torch", ".", "ones_like", "(", "fore_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "fore_voxelwise_mask", ".", "device", ")", "\n", "\n", "if", "mirr_inbox_point", "is", "not", "None", ":", "\n", "            ", "occ_coords_mirr_points", "=", "coords_utils", ".", "cartesian_occ_coords", "(", "mirr_inbox_point", ",", "type", "=", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", "# sphere x y z", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "                ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "mirr_binds", "]", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", "==", "\"cartesian\"", ":", "\n", "                    ", "noise_rotation", "=", "-", "rot_z", "*", "np", ".", "pi", "/", "180", "\n", "occ_coords_mirr_points", "=", "common_utils", ".", "rotate_points_along_z", "(", "occ_coords_mirr_points", ".", "unsqueeze", "(", "1", ")", ",", "noise_rotation", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "occ_coords_mirr_points", "[", "...", ",", "1", "]", "+=", "rot_z", "\n", "", "", "inrange_coords_mirr", ",", "inrange_inds_mirr", "=", "self", ".", "point2coords_inrange", "(", "occ_coords_mirr_points", ",", "self", ".", "point_origin_tensor", ",", "self", ".", "point_max_tensor", ",", "self", ".", "max_grid_tensor", ",", "self", ".", "min_grid_tensor", ",", "self", ".", "voxel_size", ")", "\n", "mirr_coords", "=", "torch", ".", "cat", "(", "[", "mirr_binds", "[", "inrange_inds_mirr", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "xyz2zyx", "(", "inrange_coords_mirr", ")", "]", ",", "dim", "=", "-", "1", ")", "# mirror sphere b z y x", "\n", "\n", "mirr_fore_voxelwise_mask", "[", "mirr_coords", "[", "...", ",", "0", "]", ",", "mirr_coords", "[", "...", ",", "1", "]", ",", "mirr_coords", "[", "...", ",", "2", "]", ",", "mirr_coords", "[", "...", ",", "3", "]", "]", "=", "torch", ".", "ones_like", "(", "mirr_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "mirr_fore_voxelwise_mask", ".", "device", ")", "\n", "\n", "", "return", "fore_voxelwise_mask", ",", "mirr_fore_voxelwise_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_bm_voxelwise_mask": [[228, 248], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.coords_utils.cartesian_occ_coords", "occ_targets_template.OccTargetsTemplate.point2coords_inrange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "len", "[].to", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "utils.point_box_utils.torch_points_in_box_3d_label_batch", "utils.common_utils.rotate_points_along_z().squeeze", "bm_binds[].unsqueeze", "occ_targets_template.OccTargetsTemplate.xyz2zyx", "utils.common_utils.rotate_points_along_z", "utils.common_utils.rotate_points_along_z().squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_occ_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label_batch", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.xyz2zyx", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "get_bm_voxelwise_mask", "(", "self", ",", "batch_dict", ",", "bs", ",", "gt_boxes_num", ",", "gt_boxes", ")", ":", "\n", "\n", "        ", "bm_voxelwise_mask", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "if", "\"bm_points\"", "in", "batch_dict", "and", "len", "(", "batch_dict", "[", "\"bm_points\"", "]", ")", ">", "0", ":", "\n", "            ", "bm_binds", ",", "bm_carte_points", "=", "batch_dict", "[", "\"bm_points\"", "]", "[", "...", ",", "0", ":", "1", "]", ".", "to", "(", "torch", ".", "int64", ")", ",", "batch_dict", "[", "\"bm_points\"", "]", "[", "...", ",", "1", ":", "]", "\n", "label_array", "=", "torch", ".", "nonzero", "(", "point_box_utils", ".", "torch_points_in_box_3d_label_batch", "(", "bm_carte_points", ",", "bm_binds", ",", "gt_boxes", ",", "gt_boxes_num", ",", "bs", ")", ")", "[", "...", ",", "0", "]", "\n", "bm_binds", "=", "bm_binds", "[", "...", ",", "0", "]", "[", "label_array", "]", "\n", "bm_carte_points", "=", "bm_carte_points", "[", "label_array", ",", ":", "]", "\n", "occ_coords_bm_points", "=", "coords_utils", ".", "cartesian_occ_coords", "(", "bm_carte_points", ",", "type", "=", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "                ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "bm_binds", "]", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", "==", "\"cartesian\"", ":", "\n", "                    ", "noise_rotation", "=", "-", "rot_z", "*", "np", ".", "pi", "/", "180", "\n", "occ_coords_bm_points", "=", "common_utils", ".", "rotate_points_along_z", "(", "occ_coords_bm_points", ".", "unsqueeze", "(", "1", ")", ",", "noise_rotation", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "occ_coords_bm_points", "[", "...", ",", "1", "]", "+=", "rot_z", "\n", "", "", "inrange_coords_bm", ",", "inrange_inds_bm", "=", "self", ".", "point2coords_inrange", "(", "occ_coords_bm_points", ",", "self", ".", "point_origin_tensor", ",", "self", ".", "point_max_tensor", ",", "self", ".", "max_grid_tensor", ",", "self", ".", "min_grid_tensor", ",", "self", ".", "voxel_size", ")", "\n", "bm_coords", "=", "torch", ".", "cat", "(", "[", "bm_binds", "[", "inrange_inds_bm", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "xyz2zyx", "(", "inrange_coords_bm", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "bm_voxelwise_mask", "[", "bm_coords", "[", "...", ",", "0", "]", ",", "bm_coords", "[", "...", ",", "1", "]", ",", "bm_coords", "[", "...", ",", "2", "]", ",", "bm_coords", "[", "...", ",", "3", "]", "]", "=", "torch", ".", "ones_like", "(", "bm_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "bm_voxelwise_mask", ".", "device", ")", "##", "\n", "", "return", "bm_voxelwise_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.filter_occ": [[249, 256], ["list", "[].unsqueeze", "occ_targets_template.OccTargetsTemplate.all_voxel_centers[].unsqueeze", "occ_targets_template.OccTargetsTemplate.all_voxel_centers[].unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "occ_targets_template.OccTargetsTemplate.all_voxel_centers[].unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "[].unsqueeze.view"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "filter_occ", "(", "self", ",", "occ_voxelwise_mask", ",", "occ_pnts", ",", "voxelwise_mask", ")", ":", "\n", "        ", "B", ",", "Z", ",", "Y", ",", "X", "=", "list", "(", "voxelwise_mask", ".", "shape", ")", "\n", "voxelwise_mask_z", "=", "(", "1", "-", "voxelwise_mask", ")", "*", "100.0", "+", "self", ".", "all_voxel_centers", "[", "...", ",", "2", "]", ".", "unsqueeze", "(", "0", ")", "\n", "voxelwise_mask_z", "=", "torch", ".", "min", "(", "voxelwise_mask_z", ".", "view", "(", "B", ",", "Z", "*", "Y", ",", "X", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "# print(\"voxelwise_mask_z\", voxelwise_mask_z.shape, voxelwise_mask_z, torch.min(self.all_voxel_centers[..., 2]))", "\n", "voxelwise_mask_z", "-=", "(", "voxelwise_mask_z", ">", "20.0", ")", "*", "200", "\n", "return", "occ_voxelwise_mask", "&", "(", "self", ".", "all_voxel_centers", "[", "...", ",", "2", "]", ".", "unsqueeze", "(", "0", ")", ">", "torch", ".", "clamp", "(", "voxelwise_mask_z", ",", "min", "=", "self", ".", "det_point_cloud_range", "[", "2", "]", ",", "max", "=", "None", ")", ")", "&", "(", "self", ".", "all_voxel_centers", "[", "...", ",", "2", "]", ".", "unsqueeze", "(", "0", ")", "<", "self", ".", "det_point_cloud_range", "[", "5", "]", ")", "\n", "# return occ_voxelwise_mask & (self.all_voxel_centers[..., 2].unsqueeze(0) > max(-2.7, torch.topk(occ_pnts[..., 2].view(-1), 500, largest=False, sorted=True)[0][-1])) & (self.all_voxel_centers[..., 2].unsqueeze(0) < 1.0)", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_voxel_label": [[258, 303], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occ_targets_template.OccTargetsTemplate.get_valid", "occ_targets_template.OccTargetsTemplate.get_voxelwise_mask", "occ_targets_template.OccTargetsTemplate.create_predict_area3d", "occ_targets_template.OccTargetsTemplate.filter_occ", "occ_targets_template.OccTargetsTemplate.get_fore_mirr_voxelwise_mask", "occ_targets_template.OccTargetsTemplate.prepare_cls_loss_map", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occ_targets_template.OccTargetsTemplate.occ_from_ocp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "occ_targets_template.OccTargetsTemplate.dropout", "utils.coords_utils.uvd2absxyz", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "utils.point_box_utils.torch_points_in_box_2d_mask().view().nonzero", "occ_targets_template.OccTargetsTemplate.get_bm_voxelwise_mask", "utils.point_box_utils.rotatez", "occ_targets_template.OccTargetsTemplate.all_voxel_centers[].reshape", "voxel_box_label.view", "utils.point_box_utils.torch_points_in_box_2d_mask().view", "utils.point_box_utils.rotatez", "utils.point_box_utils.torch_points_in_box_3d_label", "utils.point_box_utils.torch_points_in_box_2d_mask"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_valid", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_voxelwise_mask", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_predict_area3d", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.filter_occ", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_fore_mirr_voxelwise_mask", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.prepare_cls_loss_map", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_ocp", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.dropout", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_bm_voxelwise_mask", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.rotatez", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.rotatez", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_2d_mask"], ["", "def", "create_voxel_label", "(", "self", ",", "batch_dict", ",", "valid_mask", ")", ":", "\n", "        ", "occ_pnts", "=", "torch", ".", "cat", "(", "[", "coords_utils", ".", "uvd2absxyz", "(", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "0", "]", ",", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "1", "]", ",", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "2", "]", ",", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", ",", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "3", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "point_coding", "==", "\"absxyz\"", "or", "self", ".", "point_coding", "==", "True", ":", "\n", "            ", "batch_dict", "[", "'voxels'", "]", "=", "occ_pnts", "\n", "", "elif", "self", ".", "point_coding", "==", "\"both\"", ":", "\n", "            ", "batch_dict", "[", "'voxels'", "]", "=", "torch", ".", "cat", "(", "[", "occ_pnts", "[", "...", ",", ":", "3", "]", ",", "batch_dict", "[", "\"voxels\"", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "voxel_features", ",", "voxel_coords", ",", "gt_boxes_num", ",", "gt_boxes", ",", "bs", "=", "occ_pnts", ",", "batch_dict", "[", "'voxel_coords'", "]", ",", "batch_dict", "[", "\"gt_boxes_num\"", "]", ",", "batch_dict", "[", "\"gt_boxes\"", "]", ",", "batch_dict", "[", "\"gt_boxes\"", "]", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "            ", "gt_label", "=", "(", "gt_boxes", "[", "...", ",", "-", "1", ":", "]", ">", "1e-2", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "gt_boxes", "=", "torch", ".", "cat", "(", "[", "gt_boxes", "[", "...", ",", ":", "-", "1", "]", ",", "gt_label", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "valid_coords_bnznynx", ",", "valid_voxel_features", "=", "self", ".", "get_valid", "(", "valid_mask", ",", "voxel_coords", ",", "voxel_features", ")", "\n", "voxelwise_mask", "=", "self", ".", "get_voxelwise_mask", "(", "valid_coords_bnznynx", ",", "bs", ")", "\n", "vcc_mask", "=", "self", ".", "create_predict_area3d", "(", "bs", ",", "valid_coords_bnznynx", ")", "\n", "occ_voxelwise_mask", "=", "self", ".", "filter_occ", "(", "self", ".", "occ_from_ocp", "(", "vcc_mask", ",", "batch_dict", ",", "bs", ",", "voxelwise_mask", ",", "valid_voxel_features", "[", "...", ",", ":", "3", "]", ",", "valid_coords_bnznynx", "[", "...", ",", "0", "]", ",", "empty_sur_thresh", "=", "self", ".", "data_cfg", ".", "OCC", ".", "EMPT_SUR_THRESH", ",", "type", "=", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", ",", "occ_pnts", ",", "voxelwise_mask", ")", "\n", "fore_voxelwise_mask", ",", "mirr_fore_voxelwise_mask", "=", "self", ".", "get_fore_mirr_voxelwise_mask", "(", "batch_dict", ",", "bs", ",", "valid_coords_bnznynx", ",", "valid_voxel_features", ",", "gt_boxes_num", ",", "gt_boxes", ")", "\n", "mirr_fore_voxelwise_mask", "=", "mirr_fore_voxelwise_mask", "*", "(", "1", "-", "voxelwise_mask", ")", "# exclude original occupied", "\n", "\n", "if", "self", ".", "model_cfg", ".", "TARGETS", ".", "TMPLT", ":", "\n", "            ", "bm_voxelwise_mask", "=", "self", ".", "get_bm_voxelwise_mask", "(", "batch_dict", ",", "bs", ",", "gt_boxes_num", ",", "gt_boxes", ")", "*", "(", "1", "-", "voxelwise_mask", ")", "*", "(", "1", "-", "mirr_fore_voxelwise_mask", ")", "\n", "", "else", ":", "\n", "            ", "bm_voxelwise_mask", "=", "torch", ".", "zeros_like", "(", "voxelwise_mask", ",", "dtype", "=", "voxelwise_mask", ".", "dtype", ",", "device", "=", "voxelwise_mask", ".", "device", ")", "\n", "# print(\"grid_size\", self.nz, self.ny, self.nx)", "\n", "# print(\"voxelwise_mask\", voxelwise_mask.shape)", "\n", "##### forebox_label #####", "\n", "", "forebox_label", "=", "None", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "BOX_WEIGHT", "!=", "1.0", ":", "\n", "            ", "bs", ",", "max_num_box", ",", "box_c", "=", "list", "(", "gt_boxes", ".", "shape", ")", "\n", "forebox_label", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "shift", "=", "torch", ".", "tensor", "(", "np", ".", "asarray", "(", "[", "[", "0.0", ",", "0.0", ",", "0.0", "]", "]", ")", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "                ", "cur_gt_boxes", "=", "gt_boxes", "[", "i", ",", ":", "gt_boxes_num", "[", "i", "]", "]", "\n", "all_voxel_centers_2d", "=", "point_box_utils", ".", "rotatez", "(", "self", ".", "all_voxel_centers_2d", ",", "batch_dict", "[", "\"rot_z\"", "]", "[", "i", "]", ")", "if", "\"rot_z\"", "in", "batch_dict", "else", "self", ".", "all_voxel_centers_2d", "\n", "voxel_box_label2d", "=", "point_box_utils", ".", "torch_points_in_box_2d_mask", "(", "all_voxel_centers_2d", ",", "cur_gt_boxes", ",", "shift", "=", "shift", "[", "...", ",", ":", "2", "]", ")", ".", "view", "(", "self", ".", "ny", ",", "self", ".", "nx", ")", ".", "nonzero", "(", ")", "\n", "if", "voxel_box_label2d", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                    ", "all_voxel_centers_filtered", "=", "self", ".", "all_voxel_centers", "[", ":", ",", "voxel_box_label2d", "[", ":", ",", "0", "]", ",", "voxel_box_label2d", "[", ":", ",", "1", "]", ",", "...", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "                        ", "all_voxel_centers_filtered", "=", "point_box_utils", ".", "rotatez", "(", "all_voxel_centers_filtered", ",", "batch_dict", "[", "\"rot_z\"", "]", "[", "i", "]", ")", "\n", "", "voxel_box_label", "=", "point_box_utils", ".", "torch_points_in_box_3d_label", "(", "all_voxel_centers_filtered", ",", "cur_gt_boxes", ",", "gt_boxes_num", "[", "i", "]", ",", "shift", "=", "shift", ")", "[", "0", "]", "\n", "forebox_label", "[", "i", ",", ":", ",", "voxel_box_label2d", "[", ":", ",", "0", "]", ",", "voxel_box_label2d", "[", ":", ",", "1", "]", "]", "=", "voxel_box_label", ".", "view", "(", "self", ".", "nz", ",", "-", "1", ")", "\n", "############## dropout #################", "\n", "", "", "", "if", "self", ".", "data_cfg", ".", "OCC", ".", "DROPOUT_RATE", ">", "1e-3", "and", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "            ", "batch_dict", "=", "self", ".", "dropout", "(", "batch_dict", ",", "fore_voxelwise_mask", ")", "\n", "\n", "", "batch_dict", "=", "self", ".", "prepare_cls_loss_map", "(", "batch_dict", ",", "vcc_mask", ",", "voxelwise_mask", ",", "occ_voxelwise_mask", ",", "fore_voxelwise_mask", ",", "mirr_fore_voxelwise_mask", ",", "bm_voxelwise_mask", ",", "forebox_label", "=", "forebox_label", ")", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.dropout": [[305, 329], ["numpy.random.uniform", "range", "[].long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "occ_targets_template.OccTargetsTemplate.data_cfg.OCC.get", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "drop_inds_lst.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "len", "len", "int", "len"], "methods", ["None"], ["", "def", "dropout", "(", "self", ",", "batch_dict", ",", "fore_voxelwise_mask", ")", ":", "\n", "        ", "bs", "=", "batch_dict", "[", "\"batch_size\"", "]", "\n", "rand_ratios", "=", "np", ".", "random", ".", "uniform", "(", "high", "=", "self", ".", "data_cfg", ".", "OCC", ".", "DROPOUT_RATE", ",", "size", "=", "bs", ")", "\n", "drop_inds_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "bmask", "=", "batch_dict", "[", "'voxel_coords'", "]", "[", "...", ",", "0", "]", "==", "i", "\n", "binds", "=", "torch", ".", "nonzero", "(", "bmask", ")", "[", "...", ",", "0", "]", "\n", "drop_vox_ind", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "binds", ")", ",", "size", "=", "[", "int", "(", "len", "(", "binds", ")", "*", "rand_ratios", "[", "i", "]", ")", "]", ")", "\n", "drop_inds_lst", ".", "append", "(", "binds", "[", "drop_vox_ind", "]", ")", "\n", "", "drop_voxel_inds", "=", "torch", ".", "cat", "(", "drop_inds_lst", ",", "dim", "=", "0", ")", "if", "len", "(", "drop_inds_lst", ")", ">", "1", "else", "drop_inds_lst", "[", "0", "]", "\n", "drop_voxel_coords", "=", "batch_dict", "[", "'voxel_coords'", "]", "[", "drop_voxel_inds", "]", ".", "long", "(", ")", "\n", "voxel_drop_mask", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "voxel_drop_mask", "[", "drop_voxel_coords", "[", "...", ",", "0", "]", ",", "drop_voxel_coords", "[", "...", ",", "1", "]", ",", "drop_voxel_coords", "[", "...", ",", "2", "]", ",", "drop_voxel_coords", "[", "...", ",", "3", "]", "]", "=", "torch", ".", "ones", "(", "len", "(", "drop_voxel_coords", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "batch_dict", "[", "\"voxel_drop_mask\"", "]", "=", "voxel_drop_mask", "\n", "batch_dict", "[", "\"fore_voxel_drop_mask\"", "]", "=", "fore_voxelwise_mask", "&", "voxel_drop_mask", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "get", "(", "\"DROPOUT_RMV\"", ",", "False", ")", ":", "\n", "            ", "keep_mask", "=", "torch", ".", "ones", "(", "[", "len", "(", "batch_dict", "[", "'voxel_coords'", "]", ")", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "\"cuda\"", ")", "\n", "keep_mask", "[", "drop_voxel_inds", "]", "=", "torch", ".", "zeros_like", "(", "keep_mask", "[", "drop_voxel_inds", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "\"cuda\"", ")", "\n", "batch_dict", "[", "'voxels'", "]", "=", "batch_dict", "[", "'voxels'", "]", "[", "keep_mask", ",", ":", ",", ":", "]", "\n", "batch_dict", "[", "'voxel_coords'", "]", "=", "batch_dict", "[", "'voxel_coords'", "]", "[", "keep_mask", ",", "...", "]", "\n", "batch_dict", "[", "'voxel_num_points'", "]", "=", "batch_dict", "[", "'voxel_num_points'", "]", "[", "keep_mask", "]", "\n", "", "else", ":", "\n", "            ", "batch_dict", "[", "'voxels'", "]", "[", "drop_voxel_inds", "]", "=", "torch", ".", "zeros_like", "(", "batch_dict", "[", "'voxels'", "]", "[", "drop_voxel_inds", "]", ",", "device", "=", "batch_dict", "[", "'voxels'", "]", ".", "device", ",", "dtype", "=", "batch_dict", "[", "'voxels'", "]", ".", "dtype", ")", "\n", "", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.prepare_cls_loss_map": [[330, 381], ["batch_dict.update", "neg_mask.to", "box_neg_mask.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "occ_bm_cls_mask.to", "occ_fore_cls_mask.to", "occ_mirr_cls_mask.to"], "methods", ["None"], ["", "def", "prepare_cls_loss_map", "(", "self", ",", "batch_dict", ",", "vcc_mask", ",", "voxelwise_mask", ",", "occ_voxelwise_mask", ",", "fore_voxelwise_mask", ",", "mirr_fore_voxelwise_mask", ",", "bm_voxelwise_mask", ",", "forebox_label", "=", "None", ")", ":", "\n", "\n", "##### create cls loss mask #####", "\n", "        ", "general_cls_loss_mask", "=", "vcc_mask", "&", "occ_voxelwise_mask", "\n", "occ_fore_cls_mask", "=", "fore_voxelwise_mask", "&", "general_cls_loss_mask", "\n", "occ_mirr_cls_mask", "=", "mirr_fore_voxelwise_mask", "&", "general_cls_loss_mask", "\n", "occ_bm_cls_mask", "=", "bm_voxelwise_mask", "&", "general_cls_loss_mask", "\n", "pos_mask", "=", "occ_fore_cls_mask", "|", "occ_mirr_cls_mask", "|", "occ_bm_cls_mask", "\n", "neg_mask", "=", "general_cls_loss_mask", "&", "(", "1", "-", "pos_mask", ")", "\n", "\n", "general_cls_loss_mask_float", "=", "occ_fore_cls_mask", ".", "to", "(", "torch", ".", "float32", ")", "*", "self", ".", "occ_fore_cls_weight", "+", "occ_mirr_cls_mask", ".", "to", "(", "torch", ".", "float32", ")", "*", "self", ".", "occ_mirr_cls_weight", "+", "occ_bm_cls_mask", ".", "to", "(", "torch", ".", "float32", ")", "*", "self", ".", "occ_bm_cls_weight", "+", "neg_mask", ".", "to", "(", "torch", ".", "float32", ")", "*", "self", ".", "occ_neg_cls_weight", "\n", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "DROPOUT_RATE", ">", "1e-3", "and", "self", ".", "fore_dropout_cls_weight", ">", "1e-4", "and", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "            ", "general_cls_loss_mask_float", "+=", "(", "general_cls_loss_mask", "&", "batch_dict", "[", "\"fore_voxel_drop_mask\"", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", "*", "self", ".", "fore_dropout_cls_weight", "\n", "\n", "", "if", "forebox_label", "is", "not", "None", ":", "\n", "            ", "box_neg_mask", "=", "neg_mask", "&", "(", "forebox_label", ">", "1e-3", ")", "\n", "box_neg_mask_float", "=", "box_neg_mask", ".", "to", "(", "torch", ".", "float32", ")", "*", "(", "self", ".", "box_weight", "-", "self", ".", "occ_neg_cls_weight", ")", "\n", "general_cls_loss_mask_float", "+=", "box_neg_mask_float", "\n", "######### create cls label ########", "\n", "\n", "# print(\"neg_mask\",neg_mask.shape)", "\n", "# print(\"pos_mask\",pos_mask.shape)", "\n", "# print(\"general_cls_loss_mask\",general_cls_loss_mask.shape)", "\n", "# print(\"general_cls_loss_mask_float\",general_cls_loss_mask_float.shape)", "\n", "# print(\"occ_fore_cls_mask\",occ_fore_cls_mask.shape)", "\n", "# print(\"occ_mirr_cls_mask\",occ_mirr_cls_mask.shape)", "\n", "# print(\"occ_bm_cls_mask\",occ_bm_cls_mask.shape)", "\n", "# print(\"forebox_label\",forebox_label.shape)", "\n", "\n", "", "batch_dict", "[", "\"occ_fore_cls_mask\"", "]", "=", "occ_fore_cls_mask", "\n", "batch_dict", "[", "\"occ_mirr_cls_mask\"", "]", "=", "occ_mirr_cls_mask", "\n", "batch_dict", "[", "\"occ_bm_cls_mask\"", "]", "=", "occ_bm_cls_mask", "\n", "batch_dict", "[", "\"forebox_label\"", "]", "=", "forebox_label", "\n", "# batch_dict[\"positive_voxelwise_labels\"] = pos_mask.to(torch.int64)", "\n", "# batch_dict[\"neg_mask\"] = neg_mask", "\n", "if", "not", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "            ", "batch_dict", "[", "\"neg_mask\"", "]", "=", "neg_mask", "\n", "\n", "", "batch_dict", ".", "update", "(", "{", "\n", "\"vcc_mask\"", ":", "vcc_mask", ",", "\n", "\"voxelwise_mask\"", ":", "voxelwise_mask", ",", "\n", "\"bm_voxelwise_mask\"", ":", "bm_voxelwise_mask", ",", "\n", "\"occ_voxelwise_mask\"", ":", "occ_voxelwise_mask", ",", "\n", "\"fore_voxelwise_mask\"", ":", "fore_voxelwise_mask", ",", "\n", "\"pos_mask\"", ":", "pos_mask", ",", "\n", "\"pos_all_num\"", ":", "torch", ".", "sum", "(", "fore_voxelwise_mask", "|", "mirr_fore_voxelwise_mask", "|", "bm_voxelwise_mask", ")", ",", "\n", "\"general_cls_loss_mask_float\"", ":", "general_cls_loss_mask_float", ",", "\n", "\"general_cls_loss_mask\"", ":", "general_cls_loss_mask", ",", "\n", "}", ")", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.prepare_reg_loss_map": [[383, 402], ["batch_dict.update", "batch_dict[].to", "general_reg_loss_mask.unsqueeze", "batch_dict[].to", "batch_dict[].to", "general_reg_loss_mask.unsqueeze", "general_reg_loss_mask.unsqueeze"], "methods", ["None"], ["", "def", "prepare_reg_loss_map", "(", "self", ",", "batch_dict", ",", "fore_res_mtrx", ",", "mirr_res_mtrx", ",", "bm_res_mtrx", ")", ":", "\n", "##### create reg loss mask #####", "\n", "        ", "general_reg_loss_mask_float", "=", "batch_dict", "[", "\"occ_fore_cls_mask\"", "]", ".", "to", "(", "\n", "torch", ".", "float32", ")", "*", "self", ".", "occ_fore_res_weight", "+", "batch_dict", "[", "\"occ_mirr_cls_mask\"", "]", ".", "to", "(", "\n", "torch", ".", "float32", ")", "*", "self", ".", "occ_mirr_res_weight", "+", "batch_dict", "[", "\"occ_bm_cls_mask\"", "]", ".", "to", "(", "\n", "torch", ".", "float32", ")", "*", "self", ".", "occ_bm_res_weight", "\n", "general_reg_loss_mask", "=", "(", "general_reg_loss_mask_float", ">", "0", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "DROPOUT_RATE", ">", "1e-3", "and", "self", ".", "fore_dropout_reg_weight", ">", "1e-4", "and", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "            ", "general_reg_loss_mask_float", "+=", "(", "general_reg_loss_mask", "&", "batch_dict", "[", "\"fore_voxel_drop_mask\"", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", "*", "self", ".", "fore_dropout_reg_weight", "\n", "\n", "\n", "", "res_mtrx", "=", "fore_res_mtrx", "*", "general_reg_loss_mask", ".", "unsqueeze", "(", "1", ")", "+", "mirr_res_mtrx", "*", "general_reg_loss_mask", ".", "unsqueeze", "(", "1", ")", "+", "bm_res_mtrx", "*", "general_reg_loss_mask", ".", "unsqueeze", "(", "1", ")", "\n", "batch_dict", ".", "update", "(", "{", "\n", "\"res_mtrx\"", ":", "res_mtrx", ",", "\n", "\"general_reg_loss_mask\"", ":", "general_reg_loss_mask", ",", "\n", "\"general_reg_loss_mask_float\"", ":", "general_reg_loss_mask_float", ",", "\n", "}", ")", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_predict_area2d": [[404, 408], ["bevcount_mask.to.to.to", "occ_targets_template.OccTargetsTemplate.fix_conv_2dzy"], "methods", ["None"], ["", "def", "create_predict_area2d", "(", "self", ",", "bevcount_mask", ")", ":", "\n", "        ", "bevcount_mask", "=", "bevcount_mask", ".", "to", "(", "torch", ".", "float32", ")", "\n", "point_dist_mask", "=", "self", ".", "fix_conv_2dzy", "(", "bevcount_mask", ")", "\n", "return", "point_dist_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_predict_area3d": [[432, 448], ["voxel_coords.view.view.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.btcnet.BtcNet.clamp"], ["", "def", "create_predict_area3d", "(", "self", ",", "bs", ",", "voxel_coords", ")", ":", "\n", "# vfe_features: (num_voxels, C)", "\n", "# voxel_coords: (num_voxels, 4), [batch_idx, z_idx, y_idx, x_idx]", "\n", "        ", "voxel_coords", "=", "voxel_coords", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", "\n", "nz", ",", "ny", ",", "nx", "=", "self", ".", "data_cfg", ".", "OCC", ".", "DIST_KERN", "\n", "startz", ",", "starty", ",", "startx", "=", "-", "(", "nz", "//", "2", ")", ",", "-", "(", "ny", "//", "2", ")", ",", "-", "(", "nx", "//", "2", ")", "\n", "startx", "+=", "self", ".", "concede_x", "\n", "x_ind", "=", "torch", ".", "arange", "(", "startx", ",", "startx", "+", "nx", ",", "device", "=", "\"cuda\"", ")", "\n", "y_ind", "=", "torch", ".", "arange", "(", "starty", ",", "starty", "+", "ny", ",", "device", "=", "\"cuda\"", ")", "\n", "z_ind", "=", "torch", ".", "arange", "(", "startz", ",", "startz", "+", "nz", ",", "device", "=", "\"cuda\"", ")", "\n", "z", ",", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "z_ind", ",", "y_ind", ",", "x_ind", ")", "\n", "bzyx", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros_like", "(", "z", ",", "device", "=", "z", ".", "device", ",", "dtype", "=", "z", ".", "dtype", ")", ",", "z", ",", "y", ",", "x", "]", ",", "axis", "=", "-", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "4", ")", "\n", "voxel_coords", "=", "(", "voxel_coords", "+", "bzyx", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "vcc_mask", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "vcc_mask", "[", "torch", ".", "clamp", "(", "voxel_coords", "[", "...", ",", "0", "]", ",", "min", "=", "0", ",", "max", "=", "bs", "-", "1", ")", ",", "torch", ".", "clamp", "(", "voxel_coords", "[", "...", ",", "1", "]", ",", "min", "=", "0", ",", "max", "=", "self", ".", "nz", "-", "1", ")", ",", "torch", ".", "clamp", "(", "voxel_coords", "[", "...", ",", "2", "]", ",", "min", "=", "0", ",", "max", "=", "self", ".", "ny", "-", "1", ")", ",", "torch", ".", "clamp", "(", "voxel_coords", "[", "...", ",", "3", "]", ",", "min", "=", "0", ",", "max", "=", "self", ".", "nx", "-", "1", ")", "]", "=", "1", "\n", "return", "vcc_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.forward": [[449, 470], ["occ_targets_template.OccTargetsTemplate.get_paddings_indicator", "occ_targets_template.OccTargetsTemplate.create_voxel_res_label"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_paddings_indicator", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.create_voxel_res_label"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "\n", "# voxels: [M, max_points, ndim] float tensor. only contain points.", "\n", "# voxel_coords: [M, 3] int32 tensor. zyx format.", "\n", "# voxel_num_points: [M] int32 tensor.", "\n", "\n", "        ", "voxel_features", ",", "voxel_num_points", ",", "coords", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "# print(\"voxel_features\", voxel_features.shape)", "\n", "\n", "voxel_count", "=", "voxel_features", ".", "shape", "[", "1", "]", "\n", "# print(\"voxel_count\", voxel_features.shape[0])", "\n", "mask", "=", "self", ".", "get_paddings_indicator", "(", "voxel_num_points", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "batch_dict", "[", "\"voxel_point_mask\"", "]", "=", "mask", "\n", "batch_dict", "=", "self", ".", "create_voxel_res_label", "(", "batch_dict", ",", "mask", ")", "\n", "# if test inference speed", "\n", "# if batch_dict[\"is_train\"]:", "\n", "#     batch_dict = self.create_voxel_res_label(batch_dict, mask)", "\n", "# else:", "\n", "#     batch_dict[\"point_dist_mask\"] = torch.zeros((batch_dict[\"gt_boxes\"].shape[0], self.ny, self.nx, self.nz * self.sz * self.sy * self.sx), device=\"cuda\")", "\n", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_pillar.OccTargetsPillar.__init__": [[9, 13], ["occ_targets_template.OccTargetsTemplate.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "voxel_size", ",", "point_cloud_range", ",", "data_cfg", ",", "grid_size", ",", "\n", "num_class", ",", "voxel_centers", ",", "finer_indx_range", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", ",", "voxel_size", ",", "point_cloud_range", ",", "data_cfg", ",", "grid_size", ",", "\n", "num_class", ",", "voxel_centers", ",", "finer_indx_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_pillar.OccTargetsPillar.create_predict_area": [[14, 16], ["occ_targets_pillar.OccTargetsPillar.create_predict_area2d"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_predict_area2d"], ["", "def", "create_predict_area", "(", "self", ",", "voxel_bnysynxsxnzsz", ",", "voxel_num_points_float", ",", "batch_size", ",", "batch_dict", ")", ":", "\n", "        ", "return", "self", ".", "create_predict_area2d", "(", "voxel_bnysynxsxnzsz", ",", "voxel_num_points_float", ",", "batch_size", ",", "batch_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_pillar.OccTargetsPillar.forward": [[17, 44], ["occ_targets_pillar.OccTargetsPillar.get_paddings_indicator", "occ_targets_pillar.OccTargetsPillar.create_voxel_res_label", "occ_targets_pillar.OccTargetsPillar.keys", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_paddings_indicator", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.create_voxel_res_label"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "\n", "# voxels: [M, max_points, ndim] float tensor. only contain points.", "\n", "# voxel_coords: [M, 3] int32 tensor. zyx format.", "\n", "# voxel_num_points: [M] int32 tensor.", "\n", "\n", "        ", "voxel_features", ",", "voxel_num_points", ",", "coords", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "\n", "'voxel_coords'", "]", "\n", "# print(\"voxel_features\", voxel_features.shape)", "\n", "\n", "\n", "voxel_count", "=", "voxel_features", ".", "shape", "[", "1", "]", "\n", "# print(\"voxel_count\", voxel_features.shape[0])", "\n", "mask", "=", "self", ".", "get_paddings_indicator", "(", "voxel_num_points", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "batch_dict", "[", "\"voxel_point_mask\"", "]", "=", "mask", "\n", "batch_dict", "=", "self", ".", "create_voxel_res_label", "(", "batch_dict", ",", "mask", ")", "\n", "# if test inference speed", "\n", "# if batch_dict[\"is_train\"]:", "\n", "#     batch_dict = self.create_voxel_res_label(batch_dict, mask)", "\n", "# else:", "\n", "#     batch_dict[\"point_dist_mask\"] = torch.zeros((batch_dict[\"gt_boxes\"].shape[0], self.ny, self.nx, self.nz * self.sz * self.sy * self.sx), device=\"cuda\")", "\n", "if", "\"point_drop_inds\"", "in", "batch_dict", ".", "keys", "(", ")", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"point_drop_inds\"", "]", "\n", "mask", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", "]", "=", "torch", ".", "zeros_like", "(", "inds", "[", ":", ",", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "", "batch_dict", "[", "\"final_point_mask\"", "]", "=", "mask", "\n", "\n", "return", "batch_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.__init__": [[9, 14], ["occ_targets_template.OccTargetsTemplate.__init__", "model_cfg.PARAMS.get"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_cfg", ",", "voxel_size", ",", "point_cloud_range", ",", "data_cfg", ",", "grid_size", ",", "\n", "num_class", ",", "voxel_centers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cfg", ",", "voxel_size", ",", "point_cloud_range", ",", "data_cfg", ",", "grid_size", ",", "\n", "num_class", ",", "voxel_centers", ")", "\n", "self", ".", "reg", "=", "model_cfg", ".", "PARAMS", ".", "get", "(", "\"REG\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.create_predict_area": [[15, 17], ["occ_targets_3d.OccTargets3D.create_predict_area2d"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_predict_area2d"], ["", "def", "create_predict_area", "(", "self", ",", "voxel_bnysynxsxnzsz", ",", "voxel_num_points_float", ",", "batch_size", ",", "batch_dict", ")", ":", "\n", "        ", "return", "self", ".", "create_predict_area2d", "(", "voxel_bnysynxsxnzsz", ",", "voxel_num_points_float", ",", "batch_size", ",", "batch_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.forward": [[18, 43], ["occ_targets_3d.OccTargets3D.get_paddings_indicator", "occ_targets_3d.OccTargets3D.create_voxel_res_label", "occ_targets_3d.OccTargets3D.create_voxel_label", "batch_dict.keys", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_paddings_indicator", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.create_voxel_res_label", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_voxel_label"], ["", "def", "forward", "(", "self", ",", "batch_dict", ",", "**", "kwargs", ")", ":", "\n", "\n", "# voxels: [M, max_points, ndim] float tensor. only contain points.", "\n", "# voxel_coords: [M, 3] int32 tensor. zyx format.", "\n", "# voxel_num_points: [M] int32 tensor.", "\n", "\n", "        ", "voxel_features", ",", "voxel_num_points", ",", "coords", "=", "batch_dict", "[", "'voxels'", "]", ",", "batch_dict", "[", "'voxel_num_points'", "]", ",", "batch_dict", "[", "'voxel_coords'", "]", "\n", "# print(\"voxel_features\", voxel_features.shape)", "\n", "\n", "voxel_count", "=", "voxel_features", ".", "shape", "[", "1", "]", "\n", "# print(\"voxel_count\", voxel_features.shape[0])", "\n", "mask", "=", "self", ".", "get_paddings_indicator", "(", "voxel_num_points", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "batch_dict", "[", "\"voxel_point_mask\"", "]", "=", "mask", "\n", "batch_dict", "=", "self", ".", "create_voxel_res_label", "(", "batch_dict", ",", "mask", ")", "if", "self", ".", "reg", "else", "self", ".", "create_voxel_label", "(", "batch_dict", ",", "mask", ")", "\n", "# if test inference speed", "\n", "# if batch_dict[\"is_train\"]:", "\n", "#     batch_dict = self.create_voxel_res_label(batch_dict, mask)", "\n", "# else:", "\n", "#     batch_dict[\"point_dist_mask\"] = torch.zeros((batch_dict[\"gt_boxes\"].shape[0], self.ny, self.nx, self.nz * self.sz * self.sy * self.sx), device=\"cuda\")", "\n", "if", "\"point_drop_inds\"", "in", "batch_dict", ".", "keys", "(", ")", ":", "\n", "            ", "inds", "=", "batch_dict", "[", "\"point_drop_inds\"", "]", "\n", "mask", "[", "inds", "[", ":", ",", "0", "]", ",", "inds", "[", ":", ",", "1", "]", "]", "=", "torch", ".", "zeros_like", "(", "inds", "[", ":", ",", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "", "batch_dict", "[", "\"final_point_mask\"", "]", "=", "mask", "\n", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.create_voxel_res_label": [[44, 94], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occ_targets_3d.OccTargets3D.get_valid", "occ_targets_3d.OccTargets3D.get_voxelwise_mask", "occ_targets_3d.OccTargets3D.create_predict_area3d", "occ_targets_3d.OccTargets3D.filter_occ", "occ_targets_3d.OccTargets3D.get_fore_mirr_voxelwise_mask_res", "occ_targets_3d.OccTargets3D.prepare_cls_loss_map", "occ_targets_3d.OccTargets3D.prepare_reg_loss_map", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occ_targets_3d.OccTargets3D.occ_from_ocp", "occ_targets_3d.OccTargets3D.get_bm_voxelwise_mask_res", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "occ_targets_3d.OccTargets3D.dropout", "utils.coords_utils.uvd2absxyz", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "utils.point_box_utils.torch_points_in_box_2d_mask().view().nonzero", "utils.point_box_utils.rotatez", "occ_targets_3d.OccTargets3D.all_voxel_centers[].reshape", "voxel_box_label.view", "utils.point_box_utils.torch_points_in_box_2d_mask().view", "utils.point_box_utils.rotatez", "utils.point_box_utils.torch_points_in_box_3d_label", "utils.point_box_utils.torch_points_in_box_2d_mask"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_valid", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.get_voxelwise_mask", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.create_predict_area3d", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.filter_occ", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_fore_mirr_voxelwise_mask_res", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.prepare_cls_loss_map", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.prepare_reg_loss_map", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.occ_from_ocp", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_bm_voxelwise_mask_res", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.dropout", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.rotatez", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.rotatez", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_2d_mask"], ["", "def", "create_voxel_res_label", "(", "self", ",", "batch_dict", ",", "valid_mask", ")", ":", "\n", "        ", "occ_pnts", "=", "torch", ".", "cat", "(", "[", "coords_utils", ".", "uvd2absxyz", "(", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "0", "]", ",", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "1", "]", ",", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "2", "]", ",", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", ",", "batch_dict", "[", "'voxels'", "]", "[", "...", ",", "3", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "point_coding", "==", "\"absxyz\"", "or", "self", ".", "point_coding", "==", "True", ":", "\n", "            ", "batch_dict", "[", "'voxels'", "]", "=", "occ_pnts", "\n", "", "elif", "self", ".", "point_coding", "==", "\"both\"", ":", "\n", "            ", "batch_dict", "[", "'voxels'", "]", "=", "torch", ".", "cat", "(", "[", "occ_pnts", "[", "...", ",", ":", "3", "]", ",", "batch_dict", "[", "\"voxels\"", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "voxel_features", ",", "voxel_coords", ",", "gt_boxes_num", ",", "gt_boxes", ",", "bs", "=", "occ_pnts", ",", "batch_dict", "[", "'voxel_coords'", "]", ",", "batch_dict", "[", "\n", "\"gt_boxes_num\"", "]", ",", "batch_dict", "[", "\"gt_boxes\"", "]", ",", "batch_dict", "[", "\"gt_boxes\"", "]", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "            ", "gt_label", "=", "(", "gt_boxes", "[", "...", ",", "-", "1", ":", "]", ">", "1e-2", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "gt_boxes", "=", "torch", ".", "cat", "(", "[", "gt_boxes", "[", "...", ",", ":", "-", "1", "]", ",", "gt_label", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "valid_coords_bnznynx", ",", "valid_voxel_features", "=", "self", ".", "get_valid", "(", "valid_mask", ",", "voxel_coords", ",", "voxel_features", ")", "\n", "voxelwise_mask", "=", "self", ".", "get_voxelwise_mask", "(", "valid_coords_bnznynx", ",", "bs", ")", "\n", "vcc_mask", "=", "self", ".", "create_predict_area3d", "(", "bs", ",", "valid_coords_bnznynx", ")", "\n", "occ_voxelwise_mask", "=", "self", ".", "filter_occ", "(", "self", ".", "occ_from_ocp", "(", "vcc_mask", ",", "batch_dict", ",", "bs", ",", "voxelwise_mask", ",", "valid_voxel_features", "[", "...", ",", ":", "3", "]", ",", "valid_coords_bnznynx", "[", "...", ",", "0", "]", ",", "empty_sur_thresh", "=", "self", ".", "data_cfg", ".", "OCC", ".", "EMPT_SUR_THRESH", ",", "type", "=", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", ",", "occ_pnts", ",", "voxelwise_mask", ")", "\n", "fore_voxelwise_mask", ",", "fore_res_mtrx", ",", "mirr_fore_voxelwise_mask", ",", "mirr_res_mtrx", "=", "self", ".", "get_fore_mirr_voxelwise_mask_res", "(", "batch_dict", ",", "bs", ",", "valid_coords_bnznynx", ",", "valid_voxel_features", ",", "gt_boxes_num", ",", "gt_boxes", ")", "\n", "mirr_fore_voxelwise_mask", "=", "mirr_fore_voxelwise_mask", "*", "(", "1", "-", "voxelwise_mask", ")", "# exclude original occupied", "\n", "mirr_res_mtrx", "=", "mirr_res_mtrx", "*", "(", "1", "-", "voxelwise_mask", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "self", ".", "model_cfg", ".", "TARGETS", ".", "TMPLT", ":", "\n", "            ", "bm_voxelwise_mask", ",", "bm_res_mtrx", "=", "self", ".", "get_bm_voxelwise_mask_res", "(", "batch_dict", ",", "bs", ",", "gt_boxes_num", ",", "gt_boxes", ")", "\n", "bm_voxelwise_mask", "=", "bm_voxelwise_mask", "*", "(", "1", "-", "voxelwise_mask", ")", "*", "(", "1", "-", "mirr_fore_voxelwise_mask", ")", "\n", "bm_res_mtrx", "=", "bm_res_mtrx", "*", "(", "1", "-", "voxelwise_mask", ")", ".", "unsqueeze", "(", "1", ")", "*", "(", "1", "-", "mirr_fore_voxelwise_mask", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "bm_voxelwise_mask", "=", "torch", ".", "zeros_like", "(", "voxelwise_mask", ",", "dtype", "=", "voxelwise_mask", ".", "dtype", ",", "\n", "device", "=", "voxelwise_mask", ".", "device", ")", "\n", "##### forebox_label #####", "\n", "", "forebox_label", "=", "None", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "BOX_WEIGHT", "!=", "1.0", ":", "\n", "            ", "bs", ",", "max_num_box", ",", "box_c", "=", "list", "(", "gt_boxes", ".", "shape", ")", "\n", "forebox_label", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "int8", ",", "device", "=", "\"cuda\"", ")", "\n", "shift", "=", "torch", ".", "tensor", "(", "np", ".", "asarray", "(", "[", "[", "0.0", ",", "0.0", ",", "0.0", "]", "]", ")", ",", "device", "=", "\"cuda\"", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "                ", "cur_gt_boxes", "=", "gt_boxes", "[", "i", ",", ":", "gt_boxes_num", "[", "i", "]", "]", "\n", "all_voxel_centers_2d", "=", "point_box_utils", ".", "rotatez", "(", "self", ".", "all_voxel_centers_2d", ",", "batch_dict", "[", "\"rot_z\"", "]", "[", "i", "]", ")", "if", "\"rot_z\"", "in", "batch_dict", "else", "self", ".", "all_voxel_centers_2d", "\n", "voxel_box_label2d", "=", "point_box_utils", ".", "torch_points_in_box_2d_mask", "(", "all_voxel_centers_2d", ",", "cur_gt_boxes", ",", "shift", "=", "shift", "[", "...", ",", ":", "2", "]", ")", ".", "view", "(", "self", ".", "ny", ",", "self", ".", "nx", ")", ".", "nonzero", "(", ")", "\n", "if", "voxel_box_label2d", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                    ", "all_voxel_centers_filtered", "=", "self", ".", "all_voxel_centers", "[", ":", ",", "voxel_box_label2d", "[", ":", ",", "0", "]", ",", "\n", "voxel_box_label2d", "[", ":", ",", "1", "]", ",", "...", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "                        ", "all_voxel_centers_filtered", "=", "point_box_utils", ".", "rotatez", "(", "all_voxel_centers_filtered", ",", "batch_dict", "[", "\"rot_z\"", "]", "[", "i", "]", ")", "\n", "", "voxel_box_label", "=", "point_box_utils", ".", "torch_points_in_box_3d_label", "(", "all_voxel_centers_filtered", ",", "cur_gt_boxes", ",", "gt_boxes_num", "[", "i", "]", ",", "shift", "=", "shift", ")", "[", "0", "]", "\n", "forebox_label", "[", "i", ",", ":", ",", "voxel_box_label2d", "[", ":", ",", "0", "]", ",", "voxel_box_label2d", "[", ":", ",", "1", "]", "]", "=", "voxel_box_label", ".", "view", "(", "self", ".", "nz", ",", "-", "1", ")", "\n", "", "", "", "if", "self", ".", "data_cfg", ".", "OCC", ".", "DROPOUT_RATE", ">", "1e-3", "and", "batch_dict", "[", "\"is_train\"", "]", ":", "\n", "            ", "batch_dict", "=", "self", ".", "dropout", "(", "batch_dict", ",", "fore_voxelwise_mask", ")", "\n", "", "batch_dict", "=", "self", ".", "prepare_cls_loss_map", "(", "batch_dict", ",", "vcc_mask", ",", "voxelwise_mask", ",", "occ_voxelwise_mask", ",", "fore_voxelwise_mask", ",", "mirr_fore_voxelwise_mask", ",", "bm_voxelwise_mask", ",", "forebox_label", "=", "forebox_label", ")", "\n", "\n", "batch_dict", "=", "self", ".", "prepare_reg_loss_map", "(", "batch_dict", ",", "fore_res_mtrx", ",", "mirr_res_mtrx", ",", "bm_res_mtrx", ")", "\n", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_bm_voxelwise_mask_res": [[96, 120], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.coords_utils.cartesian_occ_coords", "occ_targets_3d.OccTargets3D.point2coords_inrange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occ_targets_3d.OccTargets3D.get_mean_res", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "[].to", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "utils.point_box_utils.torch_points_in_box_3d_label_batch", "common_utils.rotate_points_along_z().squeeze", "bm_binds[].unsqueeze", "occ_targets_3d.OccTargets3D.xyz2zyx", "common_utils.rotate_points_along_z", "common_utils.rotate_points_along_z().squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_occ_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_mean_res", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_in_box_3d_label_batch", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.xyz2zyx", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "get_bm_voxelwise_mask_res", "(", "self", ",", "batch_dict", ",", "bs", ",", "gt_boxes_num", ",", "gt_boxes", ")", ":", "\n", "\n", "        ", "bm_voxelwise_mask", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "if", "\"bm_points\"", "in", "batch_dict", "and", "len", "(", "batch_dict", "[", "\"bm_points\"", "]", ")", ">", "0", ":", "\n", "            ", "bm_binds", ",", "bm_carte_points", "=", "batch_dict", "[", "\"bm_points\"", "]", "[", "...", ",", "0", ":", "1", "]", ".", "to", "(", "torch", ".", "int64", ")", ",", "batch_dict", "[", "\"bm_points\"", "]", "[", "...", ",", "1", ":", "]", "\n", "label_array", "=", "torch", ".", "nonzero", "(", "point_box_utils", ".", "torch_points_in_box_3d_label_batch", "(", "bm_carte_points", ",", "bm_binds", ",", "gt_boxes", ",", "gt_boxes_num", ",", "bs", ")", ")", "[", "...", ",", "0", "]", "\n", "bm_binds", "=", "bm_binds", "[", "...", ",", "0", "]", "[", "label_array", "]", "\n", "bm_carte_points", "=", "bm_carte_points", "[", "label_array", ",", ":", "]", "\n", "occ_coords_bm_points", "=", "coords_utils", ".", "cartesian_occ_coords", "(", "bm_carte_points", ",", "type", "=", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "                ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "bm_binds", "]", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", "==", "\"cartesian\"", ":", "\n", "                    ", "noise_rotation", "=", "-", "rot_z", "*", "np", ".", "pi", "/", "180", "\n", "occ_coords_bm_points", "=", "common_utils", ".", "rotate_points_along_z", "(", "occ_coords_bm_points", ".", "unsqueeze", "(", "1", ")", ",", "noise_rotation", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "occ_coords_bm_points", "[", "...", ",", "1", "]", "+=", "rot_z", "\n", "", "", "inrange_coords_bm", ",", "inrange_inds_bm", "=", "self", ".", "point2coords_inrange", "(", "occ_coords_bm_points", ",", "self", ".", "point_origin_tensor", ",", "self", ".", "point_max_tensor", ",", "self", ".", "max_grid_tensor", ",", "self", ".", "min_grid_tensor", ",", "self", ".", "voxel_size", ")", "\n", "bm_coords", "=", "torch", ".", "cat", "(", "[", "bm_binds", "[", "inrange_inds_bm", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "xyz2zyx", "(", "inrange_coords_bm", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "bm_res_mtrx", "=", "self", ".", "get_mean_res", "(", "bm_carte_points", "[", "inrange_inds_bm", "]", ",", "bm_coords", ",", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", ",", "batch_dict", ",", "rot", "=", "True", ")", "\n", "bm_voxelwise_mask", "[", "bm_coords", "[", "...", ",", "0", "]", ",", "bm_coords", "[", "...", ",", "1", "]", ",", "bm_coords", "[", "...", ",", "2", "]", ",", "bm_coords", "[", "...", ",", "3", "]", "]", "=", "torch", ".", "ones_like", "(", "bm_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "bm_voxelwise_mask", ".", "device", ")", "##", "\n", "", "else", ":", "\n", "            ", "bm_res_mtrx", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "3", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "\n", "", "return", "bm_voxelwise_mask", ",", "bm_res_mtrx", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_mean_res": [[122, 131], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "occ_targets_3d.OccTargets3D.get_voxel_center_xyz", "torch.zeros().scatter_add_", "torch.zeros().scatter_add_", "torch.zeros().scatter_add_", "torch.zeros().scatter_add_", "torch.zeros().scatter_add_", "torch.zeros().scatter_add_", "torch.zeros().scatter_add_", "torch.zeros().scatter_add_", "torch.zeros().scatter_add_", "labels_count.float().unsqueeze", "inverse_indices.view().expand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "labels_count.float", "inverse_indices.view", "inverse_indices.size"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_voxel_center_xyz"], ["", "def", "get_mean_res", "(", "self", ",", "feat", ",", "coords", ",", "bs", ",", "nz", ",", "ny", ",", "nx", ",", "batch_dict", ",", "rot", "=", "False", ")", ":", "\n", "        ", "xyz_spatial", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "3", ",", "nz", ",", "ny", ",", "nx", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "\"cuda\"", ")", "\n", "if", "len", "(", "coords", ")", ">", "0", ":", "\n", "            ", "uni_coords", ",", "inverse_indices", ",", "labels_count", "=", "torch", ".", "unique", "(", "coords", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ",", "dim", "=", "0", ")", "\n", "mean_xyz", "=", "torch", ".", "zeros", "(", "[", "uni_coords", ".", "shape", "[", "0", "]", ",", "3", "]", ",", "dtype", "=", "feat", ".", "dtype", ",", "device", "=", "feat", ".", "device", ")", ".", "scatter_add_", "(", "0", ",", "inverse_indices", ".", "view", "(", "inverse_indices", ".", "size", "(", "0", ")", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "3", ")", ",", "feat", "[", "...", ",", ":", "3", "]", ")", "/", "labels_count", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# mean_xyz = torch_scatter.scatter_mean(feat[..., :3], inverse_indices, dim=0)", "\n", "mean_xyz", "-=", "self", ".", "get_voxel_center_xyz", "(", "uni_coords", ",", "batch_dict", ",", "rot", "=", "rot", ")", "\n", "xyz_spatial", "[", "uni_coords", "[", "...", ",", "0", "]", ",", ":", ",", "uni_coords", "[", "...", ",", "1", "]", ",", "uni_coords", "[", "...", ",", "2", "]", ",", "uni_coords", "[", "...", ",", "3", "]", "]", "=", "mean_xyz", "\n", "", "return", "xyz_spatial", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_voxel_center_xyz": [[133, 146], ["utils.coords_utils.uvd2absxyz", "common_utils.rotate_points_along_z().squeeze", "coords[].float", "common_utils.rotate_points_along_z", "common_utils.rotate_points_along_z().squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.uvd2absxyz", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "get_voxel_center_xyz", "(", "self", ",", "coords", ",", "batch_dict", ",", "rot", "=", "True", ")", ":", "\n", "        ", "voxel_centers", "=", "(", "coords", "[", ":", ",", "[", "3", ",", "2", ",", "1", "]", "]", ".", "float", "(", ")", "+", "0.5", ")", "*", "self", ".", "voxel_size", "+", "self", ".", "point_origin_tensor", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", "==", "\"cartesian\"", ":", "\n", "            ", "if", "\"rot_z\"", "in", "batch_dict", "and", "rot", ":", "\n", "                ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "coords", "[", ":", ",", "0", "]", "]", "\n", "noise_rotation", "=", "rot_z", "*", "np", ".", "pi", "/", "180", "\n", "voxel_centers", "=", "common_utils", ".", "rotate_points_along_z", "(", "voxel_centers", ".", "unsqueeze", "(", "1", ")", ",", "noise_rotation", ")", ".", "squeeze", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "\"rot_z\"", "in", "batch_dict", "and", "rot", ":", "\n", "                ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "coords", "[", ":", ",", "0", "]", "]", "\n", "voxel_centers", "[", "...", ",", "1", "]", "-=", "rot_z", "\n", "", "voxel_centers", "=", "coords_utils", ".", "uvd2absxyz", "(", "voxel_centers", "[", "...", ",", "0", "]", ",", "voxel_centers", "[", "...", ",", "1", "]", ",", "voxel_centers", "[", "...", ",", "2", "]", ",", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", "\n", "", "return", "voxel_centers", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_fore_mirr_voxelwise_mask_res": [[148, 172], ["utils.point_box_utils.torch_points_and_sym_in_box_3d_batch", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "occ_targets_3d.OccTargets3D.get_mean_res", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.coords_utils.cartesian_occ_coords", "occ_targets_3d.OccTargets3D.point2coords_inrange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "occ_targets_3d.OccTargets3D.get_mean_res", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "common_utils.rotate_points_along_z().squeeze", "mirr_binds[].unsqueeze", "occ_targets_3d.OccTargets3D.xyz2zyx", "common_utils.rotate_points_along_z", "common_utils.rotate_points_along_z().squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.utils.point_box_utils.torch_points_and_sym_in_box_3d_batch", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_mean_res", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.cartesian_occ_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.point2coords_inrange", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_3d.OccTargets3D.get_mean_res", "home.repos.pwc.inspect_result.xharlie_btcdet.occ_training_targets.occ_targets_template.OccTargetsTemplate.xyz2zyx", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "get_fore_mirr_voxelwise_mask_res", "(", "self", ",", "batch_dict", ",", "bs", ",", "valid_coords_bnznynx", ",", "valid_voxel_features", ",", "gt_boxes_num", ",", "gt_boxes", ")", ":", "\n", "        ", "fore_voxelwise_mask", ",", "mirr_fore_voxelwise_mask", "=", "[", "torch", ".", "zeros", "(", "[", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "fore_inds", ",", "mirr_inbox_point", ",", "mirr_binds", "=", "point_box_utils", ".", "torch_points_and_sym_in_box_3d_batch", "(", "valid_voxel_features", "[", "...", ",", ":", "3", "]", ",", "valid_coords_bnznynx", ",", "gt_boxes", ",", "gt_boxes_num", ",", "bs", ",", "batch_dict", "[", "'box_mirr_flag'", "]", ")", "\n", "fore_coords", "=", "valid_coords_bnznynx", "[", "fore_inds", "]", "# b zyx", "\n", "fore_voxelwise_mask", "[", "fore_coords", "[", "...", ",", "0", "]", ",", "fore_coords", "[", "...", ",", "1", "]", ",", "fore_coords", "[", "...", ",", "2", "]", ",", "fore_coords", "[", "...", ",", "3", "]", "]", "=", "torch", ".", "ones_like", "(", "fore_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "fore_voxelwise_mask", ".", "device", ")", "\n", "fore_res_mtrx", "=", "self", ".", "get_mean_res", "(", "valid_voxel_features", "[", "fore_inds", "]", ",", "fore_coords", ",", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", ",", "batch_dict", ",", "rot", "=", "True", ")", "\n", "mirr_res_mtrx", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "3", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", "]", ",", "device", "=", "fore_voxelwise_mask", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "mirr_inbox_point", "is", "not", "None", ":", "\n", "            ", "occ_coords_mirr_points", "=", "coords_utils", ".", "cartesian_occ_coords", "(", "mirr_inbox_point", ",", "type", "=", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", ")", "# sphere x y z", "\n", "if", "\"rot_z\"", "in", "batch_dict", ":", "\n", "                ", "rot_z", "=", "batch_dict", "[", "\"rot_z\"", "]", "[", "mirr_binds", "]", "\n", "if", "self", ".", "data_cfg", ".", "OCC", ".", "COORD_TYPE", "==", "\"cartesian\"", ":", "\n", "                    ", "noise_rotation", "=", "-", "rot_z", "*", "np", ".", "pi", "/", "180", "\n", "occ_coords_mirr_points", "=", "common_utils", ".", "rotate_points_along_z", "(", "occ_coords_mirr_points", ".", "unsqueeze", "(", "1", ")", ",", "noise_rotation", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "occ_coords_mirr_points", "[", "...", ",", "1", "]", "+=", "rot_z", "\n", "\n", "", "", "inrange_coords_mirr", ",", "inrange_inds_mirr", "=", "self", ".", "point2coords_inrange", "(", "occ_coords_mirr_points", ",", "self", ".", "point_origin_tensor", ",", "self", ".", "point_max_tensor", ",", "self", ".", "max_grid_tensor", ",", "self", ".", "min_grid_tensor", ",", "self", ".", "voxel_size", ")", "\n", "mirr_coords", "=", "torch", ".", "cat", "(", "[", "mirr_binds", "[", "inrange_inds_mirr", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "xyz2zyx", "(", "inrange_coords_mirr", ")", "]", ",", "dim", "=", "-", "1", ")", "# mirror sphere b z y x", "\n", "mirr_res_mtrx", "=", "self", ".", "get_mean_res", "(", "mirr_inbox_point", "[", "inrange_inds_mirr", "]", ",", "mirr_coords", ",", "bs", ",", "self", ".", "nz", ",", "self", ".", "ny", ",", "self", ".", "nx", ",", "batch_dict", ",", "rot", "=", "True", ")", "\n", "\n", "mirr_fore_voxelwise_mask", "[", "mirr_coords", "[", "...", ",", "0", "]", ",", "mirr_coords", "[", "...", ",", "1", "]", ",", "mirr_coords", "[", "...", ",", "2", "]", ",", "mirr_coords", "[", "...", ",", "3", "]", "]", "=", "torch", ".", "ones_like", "(", "mirr_coords", "[", "...", ",", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "mirr_fore_voxelwise_mask", ".", "device", ")", "\n", "\n", "", "return", "fore_voxelwise_mask", ",", "fore_res_mtrx", ",", "mirr_fore_voxelwise_mask", ",", "mirr_res_mtrx", "", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.train.parse_config": [[22, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "btcdet.config.cfg_from_yaml_file", "pathlib.Path", "btcdet.config.cfg_from_list", "parser.parse_args.cfg_file.split"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.cfg_from_yaml_file", "home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.cfg_from_list"], ["def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'arg parser'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "required", "=", "False", ",", "help", "=", "'batch size for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg_file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'specify the config for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "required", "=", "False", ",", "help", "=", "'number of epochs to train for'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of workers for dataloader'", ")", "\n", "parser", ".", "add_argument", "(", "'--extra_tag'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "help", "=", "'extra tag for this experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'checkpoint to start from'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", "]", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--tcp_port'", ",", "type", "=", "int", ",", "default", "=", "18888", ",", "help", "=", "'tcp port for distrbuted training'", ")", "\n", "parser", ".", "add_argument", "(", "'--sync_bn'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'whether to use sync bn'", ")", "\n", "parser", ".", "add_argument", "(", "'--fix_random_seed'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt_save_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'local rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_ckpt_save_num'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'max number of saved checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--merge_all_iters_to_one_epoch'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "default", "=", "None", ",", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", "help", "=", "'set extra config keys if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'log location of training'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'log location of training'", ")", "\n", "parser", ".", "add_argument", "(", "'--pre_occ'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'log location of training'", ")", "\n", "parser", ".", "add_argument", "(", "'--pre_det'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'log location of training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--max_waiting_mins'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'max waiting minutes'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--save_to_file'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "''", ")", "\n", "# my add", "\n", "parser", ".", "add_argument", "(", "'--gpu_str'", ",", "type", "=", "str", ",", "default", "=", "\"0,1,2\"", ",", "help", "=", "'gpu ids'", ")", "\n", "parser", ".", "add_argument", "(", "'--gt'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "''", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "cfg_from_yaml_file", "(", "args", ".", "cfg_file", ",", "cfg", ")", "\n", "cfg", ".", "TAG", "=", "Path", "(", "args", ".", "cfg_file", ")", ".", "stem", "\n", "cfg", ".", "EXP_GROUP_PATH", "=", "'/'", ".", "join", "(", "args", ".", "cfg_file", ".", "split", "(", "'/'", ")", "[", "1", ":", "-", "1", "]", ")", "# remove 'cfgs' and 'xxxx.yaml'", "\n", "\n", "if", "args", ".", "set_cfgs", "is", "not", "None", ":", "\n", "        ", "cfg_from_list", "(", "args", ".", "set_cfgs", ",", "cfg", ")", "\n", "\n", "", "return", "args", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.train.main": [[63, 223], ["train.parse_config", "print", "print", "print", "output_dir.mkdir", "ckpt_dir.mkdir", "pc_dir.mkdir", "btcdet.utils.common_utils.create_logger", "common_utils.create_logger.info", "common_utils.create_logger.info", "vars().items", "btcdet.config.log_config_to_file", "btcdet.datasets.build_dataloader", "btcdet.models.build_network", "nn.parallel.DistributedDataParallel.cuda", "nn.parallel.DistributedDataParallel.train", "common_utils.create_logger.info", "train_utils.optimization.build_schedulers", "common_utils.create_logger.info", "train_utils.train_utils.train_model_multi_opt", "common_utils.create_logger.info", "common_utils.create_logger.info", "btcdet.datasets.build_dataloader", "eval_output_dir.mkdir", "pc_dir_evl.mkdir", "max", "test.repeat_eval_ckpt", "common_utils.create_logger.info", "print", "print", "btcdet.utils.common_utils.set_random_seed", "pathlib.Path", "common_utils.create_logger.info", "common_utils.create_logger.info", "os.system", "tensorboardX.SummaryWriter", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "train_utils.optimization.build_optimizer", "optimizer_lst.append", "optim_cfg_lst.append", "train_utils.optimization.build_optimizer", "optimizer_lst.append", "optim_cfg_lst.append", "nn.parallel.DistributedDataParallel.load_params_from_file", "nn.parallel.DistributedDataParallel.load_params_from_file", "nn.parallel.DistributedDataParallel.load_params_from_file", "nn.parallel.DistributedDataParallel.load_params_with_optimizer_lst", "glob.glob", "torch.parallel.DistributedDataParallel", "getattr", "len", "datetime.datetime.now().strftime", "os.environ.keys", "vars", "len", "btcdet.config.cfg.get", "btcdet.config.cfg.get", "str", "len", "glob.glob.sort", "nn.parallel.DistributedDataParallel.load_params_with_optimizer_lst", "len", "btcdet.models.model_fn_decorator", "str", "len", "datetime.datetime.now", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pcrc_curve.parse_config", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.create_logger", "home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.log_config_to_file", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.__init__.build_dataloader", "home.repos.pwc.inspect_result.xharlie_btcdet.models.__init__.build_network", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.__init__.build_schedulers", "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.train_model_multi_opt", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.__init__.build_dataloader", "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.repeat_eval_ckpt", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.set_random_seed", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.__init__.build_optimizer", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.__init__.build_optimizer", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_from_file", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_from_file", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_from_file", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_with_optimizer_lst", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_with_optimizer_lst", "home.repos.pwc.inspect_result.xharlie_btcdet.models.__init__.model_fn_decorator"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", ",", "cfg", "=", "parse_config", "(", ")", "\n", "# print(args)", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_str", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "dist_train", "=", "False", "\n", "total_gpus", "=", "1", "\n", "", "else", ":", "\n", "        ", "total_gpus", ",", "cfg", ".", "LOCAL_RANK", "=", "getattr", "(", "common_utils", ",", "'init_dist_%s'", "%", "args", ".", "launcher", ")", "(", "\n", "args", ".", "tcp_port", ",", "args", ".", "local_rank", ",", "backend", "=", "'nccl'", "\n", ")", "\n", "dist_train", "=", "True", "\n", "", "print", "(", "\"total_gpus\"", ",", "total_gpus", ")", "# , cfg.LOCAL_RANK)", "\n", "\n", "if", "args", ".", "batch_size", "is", "None", ":", "\n", "        ", "args", ".", "batch_size", "=", "cfg", ".", "OPTIMIZATION", ".", "BATCH_SIZE_PER_GPU", "\n", "print", "(", "\"args.batch_size = cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU = \"", ",", "args", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"args.batch_size\"", ",", "args", ".", "batch_size", ",", "\"total_gpus\"", ",", "total_gpus", ")", "\n", "assert", "args", ".", "batch_size", "%", "total_gpus", "==", "0", ",", "'Batch size should match the number of gpus'", "\n", "args", ".", "batch_size", "=", "args", ".", "batch_size", "//", "total_gpus", "\n", "\n", "", "args", ".", "epochs", "=", "cfg", ".", "OPTIMIZATION", ".", "NUM_EPOCHS", "if", "args", ".", "epochs", "is", "None", "else", "args", ".", "epochs", "\n", "\n", "if", "args", ".", "fix_random_seed", ":", "\n", "        ", "common_utils", ".", "set_random_seed", "(", "666", ")", "\n", "", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "if", "len", "(", "args", ".", "output_dir", ")", ">", "0", "else", "cfg", ".", "ROOT_DIR", "/", "'output'", "/", "cfg", ".", "EXP_GROUP_PATH", "/", "cfg", ".", "TAG", "/", "args", ".", "extra_tag", "/", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ")", "\n", "print", "(", "\"cfg.EXP_GROUP_PATH\"", ",", "cfg", ".", "EXP_GROUP_PATH", ")", "\n", "print", "(", "\"cfg.TAG\"", ",", "cfg", ".", "TAG", ")", "\n", "ckpt_dir", "=", "output_dir", "/", "'ckpt'", "\n", "output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "ckpt_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "pc_dir", "=", "output_dir", "/", "'cloud'", "\n", "pc_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log_file", "=", "output_dir", "/", "'log_train.txt'", "\n", "logger", "=", "common_utils", ".", "create_logger", "(", "log_file", ",", "rank", "=", "cfg", ".", "LOCAL_RANK", ")", "\n", "\n", "# log to file", "\n", "logger", ".", "info", "(", "'**********************Start logging**********************'", ")", "\n", "gpu_list", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ".", "keys", "(", ")", "else", "'ALL'", "\n", "logger", ".", "info", "(", "'CUDA_VISIBLE_DEVICES=%s'", "%", "gpu_list", ")", "\n", "\n", "if", "dist_train", ":", "\n", "        ", "logger", ".", "info", "(", "'total_batch_size: %d'", "%", "(", "total_gpus", "*", "args", ".", "batch_size", ")", ")", "\n", "", "for", "key", ",", "val", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{:16} {}'", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "", "log_config_to_file", "(", "cfg", ",", "logger", "=", "logger", ")", "\n", "if", "cfg", ".", "LOCAL_RANK", "==", "0", ":", "\n", "        ", "os", ".", "system", "(", "'cp %s %s'", "%", "(", "args", ".", "cfg_file", ",", "output_dir", ")", ")", "\n", "\n", "", "tb_log", "=", "SummaryWriter", "(", "log_dir", "=", "str", "(", "output_dir", "/", "'tensorboard'", ")", ")", "if", "cfg", ".", "LOCAL_RANK", "==", "0", "else", "None", "\n", "\n", "# -----------------------create dataloader & network & optimizer---------------------------", "\n", "train_set", ",", "train_loader", ",", "train_sampler", "=", "build_dataloader", "(", "\n", "dataset_cfg", "=", "cfg", ".", "DATA_CONFIG", ",", "\n", "class_names", "=", "cfg", ".", "CLASS_NAMES", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "dist", "=", "dist_train", ",", "workers", "=", "args", ".", "workers", ",", "\n", "logger", "=", "logger", ",", "\n", "training", "=", "True", ",", "\n", "merge_all_iters_to_one_epoch", "=", "args", ".", "merge_all_iters_to_one_epoch", ",", "\n", "total_epochs", "=", "args", ".", "epochs", "\n", ")", "\n", "\n", "model", "=", "build_network", "(", "model_cfg", "=", "cfg", ".", "MODEL", ",", "num_class", "=", "len", "(", "cfg", ".", "CLASS_NAMES", ")", ",", "dataset", "=", "train_set", ",", "full_config", "=", "cfg", ")", "\n", "if", "args", ".", "sync_bn", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "optimizer_lst", "=", "[", "]", "\n", "optim_cfg_lst", "=", "[", "]", "\n", "if", "cfg", ".", "get", "(", "'OCC_OPTIMIZATION'", ",", "None", ")", "is", "not", "None", "and", "cfg", ".", "OCC_OPTIMIZATION", ".", "LR", ">", "0.0", ":", "\n", "        ", "occ_optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "OCC_OPTIMIZATION", ",", "para_lst_name", "=", "\"occ\"", ")", "\n", "optimizer_lst", ".", "append", "(", "occ_optimizer", ")", "\n", "optim_cfg_lst", ".", "append", "(", "cfg", ".", "OCC_OPTIMIZATION", ")", "\n", "", "if", "cfg", ".", "get", "(", "'OPTIMIZATION'", ",", "None", ")", "is", "not", "None", "and", "cfg", ".", "OPTIMIZATION", ".", "LR", ">", "0.0", ":", "\n", "        ", "det_optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "OPTIMIZATION", ",", "para_lst_name", "=", "\"det\"", ")", "\n", "optimizer_lst", ".", "append", "(", "det_optimizer", ")", "\n", "optim_cfg_lst", ".", "append", "(", "cfg", ".", "OPTIMIZATION", ")", "\n", "# load checkpoint if it is possible", "\n", "", "start_epoch", "=", "it", "=", "0", "\n", "last_epoch", "=", "-", "1", "\n", "if", "args", ".", "pretrained_model", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_params_from_file", "(", "filename", "=", "args", ".", "pretrained_model", ",", "to_cpu", "=", "dist", ",", "logger", "=", "logger", ")", "\n", "", "if", "args", ".", "pre_occ", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_params_from_file", "(", "filename", "=", "args", ".", "pre_occ", ",", "to_cpu", "=", "dist", ",", "logger", "=", "logger", ",", "prefix", "=", "\"occ\"", ")", "\n", "", "if", "args", ".", "pre_det", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_params_from_file", "(", "filename", "=", "args", ".", "pre_det", ",", "to_cpu", "=", "dist", ",", "logger", "=", "logger", ",", "prefix", "=", "\"det\"", ")", "\n", "\n", "", "if", "args", ".", "ckpt", "is", "not", "None", ":", "\n", "        ", "it", ",", "start_epoch", "=", "model", ".", "load_params_with_optimizer_lst", "(", "args", ".", "ckpt", ",", "to_cpu", "=", "dist", ",", "optimizer_lst", "=", "optimizer_lst", ",", "logger", "=", "logger", ")", "\n", "last_epoch", "=", "start_epoch", "+", "1", "\n", "", "else", ":", "\n", "        ", "ckpt_list", "=", "glob", ".", "glob", "(", "str", "(", "ckpt_dir", "/", "'*checkpoint_epoch_*.pth'", ")", ")", "\n", "if", "len", "(", "ckpt_list", ")", ">", "0", ":", "\n", "            ", "ckpt_list", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "it", ",", "start_epoch", "=", "model", ".", "load_params_with_optimizer_lst", "(", "\n", "ckpt_list", "[", "-", "1", "]", ",", "to_cpu", "=", "dist", ",", "optimizer_lst", "=", "optimizer_lst", ",", "logger", "=", "logger", "\n", ")", "\n", "last_epoch", "=", "start_epoch", "+", "1", "\n", "\n", "", "", "model", ".", "train", "(", ")", "# before wrap to DistributedDataParallel to support fixed some parameters", "\n", "if", "dist_train", ":", "\n", "        ", "find_unused_parameters", "=", "True", "if", "len", "(", "optim_cfg_lst", ")", "<", "2", "else", "False", "\n", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "cfg", ".", "LOCAL_RANK", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "]", ",", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "logger", ".", "info", "(", "model", ")", "\n", "lr_scheduler_lst", ",", "lr_warmup_scheduler_lst", "=", "build_schedulers", "(", "\n", "optimizer_lst", ",", "total_iters_each_epoch", "=", "len", "(", "train_loader", ")", ",", "total_epochs_lst", "=", "[", "cfg", ".", "OCC_OPTIMIZATION", ".", "NUM_EPOCHS", ",", "cfg", ".", "OPTIMIZATION", ".", "NUM_EPOCHS", "]", ",", "\n", "last_epoch", "=", "last_epoch", ",", "optim_cfg_lst", "=", "optim_cfg_lst", "\n", ")", "\n", "\n", "# -----------------------start training---------------------------", "\n", "logger", ".", "info", "(", "'**********************Start training %s/%s(%s)**********************'", "\n", "%", "(", "cfg", ".", "EXP_GROUP_PATH", ",", "cfg", ".", "TAG", ",", "args", ".", "extra_tag", ")", ")", "\n", "train_model_multi_opt", "(", "\n", "model", ",", "\n", "optimizer_lst", ",", "\n", "train_loader", ",", "\n", "model_func", "=", "model_fn_decorator", "(", ")", ",", "\n", "lr_scheduler_lst", "=", "lr_scheduler_lst", ",", "\n", "optim_cfg_lst", "=", "optim_cfg_lst", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "total_epochs", "=", "args", ".", "epochs", ",", "\n", "start_iter", "=", "it", ",", "\n", "rank", "=", "cfg", ".", "LOCAL_RANK", ",", "\n", "tb_log", "=", "tb_log", ",", "\n", "ckpt_save_dir", "=", "ckpt_dir", ",", "\n", "train_sampler", "=", "train_sampler", ",", "\n", "lr_warmup_scheduler_lst", "=", "lr_warmup_scheduler_lst", ",", "\n", "ckpt_save_interval", "=", "args", ".", "ckpt_save_interval", ",", "\n", "max_ckpt_save_num", "=", "args", ".", "max_ckpt_save_num", ",", "\n", "merge_all_iters_to_one_epoch", "=", "args", ".", "merge_all_iters_to_one_epoch", ",", "\n", "pc_dir", "=", "pc_dir", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "'**********************End training %s/%s(%s)**********************\\n\\n\\n'", "\n", "%", "(", "cfg", ".", "EXP_GROUP_PATH", ",", "cfg", ".", "TAG", ",", "args", ".", "extra_tag", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'**********************Start evaluation %s/%s(%s)**********************'", "%", "\n", "(", "cfg", ".", "EXP_GROUP_PATH", ",", "cfg", ".", "TAG", ",", "args", ".", "extra_tag", ")", ")", "\n", "test_set", ",", "test_loader", ",", "sampler", "=", "build_dataloader", "(", "\n", "dataset_cfg", "=", "cfg", ".", "DATA_CONFIG", ",", "\n", "class_names", "=", "cfg", ".", "CLASS_NAMES", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "dist", "=", "dist_train", ",", "workers", "=", "args", ".", "workers", ",", "logger", "=", "logger", ",", "training", "=", "False", "\n", ")", "\n", "eval_output_dir", "=", "output_dir", "/", "'eval'", "/", "'eval_with_train'", "\n", "eval_output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "pc_dir_evl", "=", "output_dir", "/", "'eval'", "/", "'cloud'", "\n", "pc_dir_evl", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "args", ".", "start_epoch", "=", "max", "(", "args", ".", "epochs", "-", "30", ",", "0", ")", "# Only evaluate the last 10 epochs", "\n", "repeat_eval_ckpt", "(", "\n", "model", ".", "module", "if", "dist_train", "else", "model", ",", "\n", "test_loader", ",", "args", ",", "eval_output_dir", ",", "logger", ",", "ckpt_dir", ",", "\n", "dist_test", "=", "dist_train", ",", "pc_dir", "=", "pc_dir_evl", "\n", ")", "\n", "logger", ".", "info", "(", "'**********************End evaluation %s/%s(%s)**********************'", "%", "\n", "(", "cfg", ".", "EXP_GROUP_PATH", ",", "cfg", ".", "TAG", ",", "args", ".", "extra_tag", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.parse_config": [[19, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "btcdet.config.cfg_from_yaml_file", "numpy.random.seed", "pathlib.Path", "btcdet.config.cfg_from_list", "parser.parse_args.cfg_file.split"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.cfg_from_yaml_file", "home.repos.pwc.inspect_result.xharlie_btcdet.btcdet.config.cfg_from_list"], ["def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'arg parser'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg_file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'specify the config for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "required", "=", "False", ",", "help", "=", "'batch size for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of workers for dataloader'", ")", "\n", "parser", ".", "add_argument", "(", "'--extra_tag'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "help", "=", "'extra tag for this experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'checkpoint to start from'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", "]", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "'--tcp_port'", ",", "type", "=", "int", ",", "default", "=", "18888", ",", "help", "=", "'tcp port for distrbuted training'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'local rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "default", "=", "None", ",", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", "help", "=", "'set extra config keys if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'eval tag for this experiment'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--max_waiting_mins'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'max waiting minutes'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_tag'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "help", "=", "'eval tag for this experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_all'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'whether to evaluate all checkpoints'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'specify a ckpt directory to be evaluated if needed'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_to_file'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_str'", ",", "type", "=", "str", ",", "default", "=", "\"0,1,2\"", ",", "help", "=", "'gpu ids'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cfg_from_yaml_file", "(", "args", ".", "cfg_file", ",", "cfg", ")", "\n", "cfg", ".", "TAG", "=", "Path", "(", "args", ".", "cfg_file", ")", ".", "stem", "\n", "cfg", ".", "EXP_GROUP_PATH", "=", "'/'", ".", "join", "(", "args", ".", "cfg_file", ".", "split", "(", "'/'", ")", "[", "1", ":", "-", "1", "]", ")", "# remove 'cfgs' and 'xxxx.yaml'", "\n", "\n", "np", ".", "random", ".", "seed", "(", "1024", ")", "\n", "\n", "if", "args", ".", "set_cfgs", "is", "not", "None", ":", "\n", "        ", "cfg_from_list", "(", "args", ".", "set_cfgs", ",", "cfg", ")", "\n", "\n", "", "return", "args", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.eval_single_ckpt": [[55, 64], ["model.load_params_from_file", "model.cuda", "eval_utils.eval_utils.eval_one_epoch"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_from_file", "home.repos.pwc.inspect_result.xharlie_btcdet.eval_utils.eval_utils.eval_one_epoch"], ["", "def", "eval_single_ckpt", "(", "model", ",", "test_loader", ",", "args", ",", "eval_output_dir", ",", "logger", ",", "epoch_id", ",", "dist_test", "=", "False", ",", "pc_dir", "=", "None", ")", ":", "\n", "# load checkpoint", "\n", "    ", "model", ".", "load_params_from_file", "(", "filename", "=", "args", ".", "ckpt", ",", "logger", "=", "logger", ",", "to_cpu", "=", "dist_test", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# start evaluation", "\n", "eval_utils", ".", "eval_one_epoch", "(", "\n", "cfg", ",", "model", ",", "test_loader", ",", "epoch_id", ",", "logger", ",", "dist_test", "=", "dist_test", ",", "\n", "result_dir", "=", "eval_output_dir", ",", "save_to_file", "=", "args", ".", "save_to_file", ",", "pc_dir", "=", "pc_dir", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.get_no_evaluated_ckpt": [[67, 82], ["glob.glob", "glob.glob.sort", "os.path.join", "float", "re.findall", "x.strip", "open().readlines", "re.findall.__len__", "float", "int", "open", "float"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "get_no_evaluated_ckpt", "(", "ckpt_dir", ",", "ckpt_record_file", ",", "args", ")", ":", "\n", "    ", "ckpt_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'*checkpoint_epoch_*.pth'", ")", ")", "\n", "ckpt_list", ".", "sort", "(", ")", "\n", "evaluated_ckpt_list", "=", "[", "float", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "open", "(", "ckpt_record_file", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "for", "cur_ckpt", "in", "ckpt_list", ":", "\n", "        ", "num_list", "=", "re", ".", "findall", "(", "'checkpoint_epoch_(.*).pth'", ",", "cur_ckpt", ")", "\n", "if", "num_list", ".", "__len__", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "epoch_id", "=", "num_list", "[", "-", "1", "]", "\n", "if", "'optim'", "in", "epoch_id", ":", "\n", "            ", "continue", "\n", "", "if", "float", "(", "epoch_id", ")", "not", "in", "evaluated_ckpt_list", "and", "int", "(", "float", "(", "epoch_id", ")", ")", ">=", "args", ".", "start_epoch", ":", "\n", "            ", "return", "epoch_id", ",", "cur_ckpt", "\n", "", "", "return", "-", "1", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.repeat_eval_ckpt": [[84, 140], ["open", "tensorboardX.SummaryWriter", "test.get_no_evaluated_ckpt", "model.load_params_from_file", "model.cuda", "eval_utils.eval_utils.eval_one_epoch", "logger.info", "zip", "range", "range", "time.sleep", "eval_utils.eval_one_epoch.items", "open", "print", "logger.info", "logger.info", "str", "int", "print", "key.endswith", "test.update_3d_map", "test.update_bev_map", "float", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_scalar"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.get_no_evaluated_ckpt", "home.repos.pwc.inspect_result.xharlie_btcdet.detectors.detector3d_template.Detector3DTemplate.load_params_from_file", "home.repos.pwc.inspect_result.xharlie_btcdet.eval_utils.eval_utils.eval_one_epoch", "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.update_3d_map", "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.update_bev_map"], ["", "def", "repeat_eval_ckpt", "(", "model", ",", "test_loader", ",", "args", ",", "eval_output_dir", ",", "logger", ",", "ckpt_dir", ",", "dist_test", "=", "False", ",", "pc_dir", "=", "None", ")", ":", "\n", "# evaluated ckpt record", "\n", "    ", "ckpt_record_file", "=", "eval_output_dir", "/", "(", "'eval_list_%s.txt'", "%", "cfg", ".", "DATA_CONFIG", ".", "DATA_SPLIT", "[", "'test'", "]", ")", "\n", "with", "open", "(", "ckpt_record_file", ",", "'a'", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "threed_map_softa", "=", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "bev_map_softa", "=", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "# tensorboard log", "\n", "if", "cfg", ".", "LOCAL_RANK", "==", "0", ":", "\n", "        ", "tb_log", "=", "SummaryWriter", "(", "log_dir", "=", "str", "(", "eval_output_dir", "/", "(", "'tensorboard_%s'", "%", "cfg", ".", "DATA_CONFIG", ".", "DATA_SPLIT", "[", "'test'", "]", ")", ")", ")", "\n", "", "total_time", "=", "0", "\n", "first_eval", "=", "True", "\n", "\n", "while", "True", ":", "\n", "# check whether there is checkpoint which is not evaluated", "\n", "        ", "cur_epoch_id", ",", "cur_ckpt", "=", "get_no_evaluated_ckpt", "(", "ckpt_dir", ",", "ckpt_record_file", ",", "args", ")", "\n", "if", "cur_epoch_id", "==", "-", "1", "or", "int", "(", "float", "(", "cur_epoch_id", ")", ")", "<", "args", ".", "start_epoch", ":", "\n", "            ", "wait_second", "=", "30", "\n", "if", "cfg", ".", "LOCAL_RANK", "==", "0", ":", "\n", "                ", "print", "(", "'Wait %s seconds for next check (progress: %.1f / %d minutes): %s \\r'", "\n", "%", "(", "wait_second", ",", "total_time", "*", "1.0", "/", "60", ",", "args", ".", "max_waiting_mins", ",", "ckpt_dir", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "time", ".", "sleep", "(", "wait_second", ")", "\n", "total_time", "+=", "30", "\n", "if", "total_time", ">", "args", ".", "max_waiting_mins", "*", "60", "and", "(", "first_eval", "is", "False", ")", ":", "\n", "                ", "break", "\n", "", "continue", "\n", "\n", "", "total_time", "=", "0", "\n", "first_eval", "=", "False", "\n", "\n", "model", ".", "load_params_from_file", "(", "filename", "=", "cur_ckpt", ",", "logger", "=", "logger", ",", "to_cpu", "=", "dist_test", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# start evaluation", "\n", "cur_result_dir", "=", "eval_output_dir", "/", "(", "'epoch_%s'", "%", "cur_epoch_id", ")", "/", "cfg", ".", "DATA_CONFIG", ".", "DATA_SPLIT", "[", "'test'", "]", "\n", "tb_dict", "=", "eval_utils", ".", "eval_one_epoch", "(", "\n", "cfg", ",", "model", ",", "test_loader", ",", "cur_epoch_id", ",", "logger", ",", "dist_test", "=", "dist_test", ",", "\n", "result_dir", "=", "cur_result_dir", ",", "save_to_file", "=", "args", ".", "save_to_file", ",", "pc_dir", "=", "pc_dir", "\n", ")", "\n", "\n", "if", "cfg", ".", "LOCAL_RANK", "==", "0", ":", "\n", "            ", "for", "key", ",", "val", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", ".", "endswith", "(", "'img'", ")", ":", "\n", "                    ", "tb_log", ".", "add_image", "(", "\"eval_\"", "+", "key", ",", "val", ",", "cur_epoch_id", ",", "dataformats", "=", "\"HWC\"", ")", "\n", "", "else", ":", "\n", "                    ", "tb_log", ".", "add_scalar", "(", "key", ",", "val", ",", "cur_epoch_id", ")", "\n", "", "threed_map_softa", "=", "update_3d_map", "(", "key", ",", "val", ",", "threed_map_softa", ")", "\n", "bev_map_softa", "=", "update_bev_map", "(", "key", ",", "val", ",", "bev_map_softa", ")", "\n", "# record this epoch which has been evaluated", "\n", "", "", "with", "open", "(", "ckpt_record_file", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "print", "(", "'%s'", "%", "cur_epoch_id", ",", "file", "=", "f", ")", "\n", "", "logger", ".", "info", "(", "'Epoch %s has been evaluated'", "%", "cur_epoch_id", ")", "\n", "for", "i", ",", "obj", "in", "zip", "(", "[", "0", ",", "1", ",", "2", "]", ",", "[", "'car'", ",", "'ped'", ",", "'cyc'", "]", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"best incumbent 3d mAP: %.2f/%.2f,    %.2f/%.2f,    %.2f/%.2f\"", "%", "(", "threed_map_softa", "[", "i", "]", "[", "0", "]", ",", "threed_map_softa", "[", "i", "]", "[", "1", "]", ",", "threed_map_softa", "[", "i", "]", "[", "2", "]", ",", "threed_map_softa", "[", "i", "]", "[", "3", "]", ",", "threed_map_softa", "[", "i", "]", "[", "4", "]", ",", "threed_map_softa", "[", "i", "]", "[", "5", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"best incumbent bev mAP: %.2f/%.2f,    %.2f/%.2f,    %.2f/%.2f\"", "%", "(", "bev_map_softa", "[", "i", "]", "[", "0", "]", ",", "bev_map_softa", "[", "i", "]", "[", "1", "]", ",", "bev_map_softa", "[", "i", "]", "[", "2", "]", ",", "bev_map_softa", "[", "i", "]", "[", "3", "]", ",", "bev_map_softa", "[", "i", "]", "[", "4", "]", ",", "bev_map_softa", "[", "i", "]", "[", "5", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.update_3d_map": [[141, 179], ["max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max"], "function", ["None"], ["", "", "", "def", "update_3d_map", "(", "key", ",", "val", ",", "threed_map_softa", ")", ":", "\n", "    ", "if", "key", "==", "\"Car_3d/11R_moderate\"", ":", "\n", "        ", "threed_map_softa", "[", "0", "]", "[", "0", "]", "=", "max", "(", "threed_map_softa", "[", "0", "]", "[", "0", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_3d/11R_moderate\"", ":", "\n", "        ", "threed_map_softa", "[", "1", "]", "[", "0", "]", "=", "max", "(", "threed_map_softa", "[", "1", "]", "[", "0", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_3d/11R_moderate\"", ":", "\n", "        ", "threed_map_softa", "[", "2", "]", "[", "0", "]", "=", "max", "(", "threed_map_softa", "[", "2", "]", "[", "0", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_3d/moderate_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "0", "]", "[", "1", "]", "=", "max", "(", "threed_map_softa", "[", "0", "]", "[", "1", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_3d/moderate_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "1", "]", "[", "1", "]", "=", "max", "(", "threed_map_softa", "[", "1", "]", "[", "1", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_3d/moderate_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "2", "]", "[", "1", "]", "=", "max", "(", "threed_map_softa", "[", "2", "]", "[", "1", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_3d/11R_hard\"", ":", "\n", "        ", "threed_map_softa", "[", "0", "]", "[", "2", "]", "=", "max", "(", "threed_map_softa", "[", "0", "]", "[", "2", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_3d/11R_hard\"", ":", "\n", "        ", "threed_map_softa", "[", "1", "]", "[", "2", "]", "=", "max", "(", "threed_map_softa", "[", "1", "]", "[", "2", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_3d/11R_hard\"", ":", "\n", "        ", "threed_map_softa", "[", "2", "]", "[", "2", "]", "=", "max", "(", "threed_map_softa", "[", "2", "]", "[", "2", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_3d/hard_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "0", "]", "[", "3", "]", "=", "max", "(", "threed_map_softa", "[", "0", "]", "[", "3", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_3d/hard_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "1", "]", "[", "3", "]", "=", "max", "(", "threed_map_softa", "[", "1", "]", "[", "3", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_3d/hard_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "2", "]", "[", "3", "]", "=", "max", "(", "threed_map_softa", "[", "2", "]", "[", "3", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_3d/11R_easy\"", ":", "\n", "        ", "threed_map_softa", "[", "0", "]", "[", "4", "]", "=", "max", "(", "threed_map_softa", "[", "0", "]", "[", "4", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_3d/11R_easy\"", ":", "\n", "        ", "threed_map_softa", "[", "1", "]", "[", "4", "]", "=", "max", "(", "threed_map_softa", "[", "1", "]", "[", "4", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_3d/11R_easy\"", ":", "\n", "        ", "threed_map_softa", "[", "2", "]", "[", "4", "]", "=", "max", "(", "threed_map_softa", "[", "2", "]", "[", "4", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_3d/easy_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "0", "]", "[", "5", "]", "=", "max", "(", "threed_map_softa", "[", "0", "]", "[", "5", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_3d/easy_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "1", "]", "[", "5", "]", "=", "max", "(", "threed_map_softa", "[", "1", "]", "[", "5", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_3d/easy_R40\"", ":", "\n", "        ", "threed_map_softa", "[", "2", "]", "[", "5", "]", "=", "max", "(", "threed_map_softa", "[", "2", "]", "[", "5", "]", ",", "val", ")", "\n", "", "return", "threed_map_softa", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.update_bev_map": [[181, 219], ["max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max"], "function", ["None"], ["", "def", "update_bev_map", "(", "key", ",", "val", ",", "bev_map_softa", ")", ":", "\n", "    ", "if", "key", "==", "\"Car_bev/11R_moderate\"", ":", "\n", "        ", "bev_map_softa", "[", "0", "]", "[", "0", "]", "=", "max", "(", "bev_map_softa", "[", "0", "]", "[", "0", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_bev/11R_moderate\"", ":", "\n", "        ", "bev_map_softa", "[", "1", "]", "[", "0", "]", "=", "max", "(", "bev_map_softa", "[", "1", "]", "[", "0", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_bev/11R_moderate\"", ":", "\n", "        ", "bev_map_softa", "[", "2", "]", "[", "0", "]", "=", "max", "(", "bev_map_softa", "[", "2", "]", "[", "0", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_bev/moderate_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "0", "]", "[", "1", "]", "=", "max", "(", "bev_map_softa", "[", "0", "]", "[", "1", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_bev/moderate_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "1", "]", "[", "1", "]", "=", "max", "(", "bev_map_softa", "[", "1", "]", "[", "1", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_bev/moderate_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "2", "]", "[", "1", "]", "=", "max", "(", "bev_map_softa", "[", "2", "]", "[", "1", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_bev/11R_hard\"", ":", "\n", "        ", "bev_map_softa", "[", "0", "]", "[", "2", "]", "=", "max", "(", "bev_map_softa", "[", "0", "]", "[", "2", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_bev/11R_hard\"", ":", "\n", "        ", "bev_map_softa", "[", "1", "]", "[", "2", "]", "=", "max", "(", "bev_map_softa", "[", "1", "]", "[", "2", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_bev/11R_hard\"", ":", "\n", "        ", "bev_map_softa", "[", "2", "]", "[", "2", "]", "=", "max", "(", "bev_map_softa", "[", "2", "]", "[", "2", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_bev/hard_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "0", "]", "[", "3", "]", "=", "max", "(", "bev_map_softa", "[", "0", "]", "[", "3", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_bev/hard_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "1", "]", "[", "3", "]", "=", "max", "(", "bev_map_softa", "[", "1", "]", "[", "3", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_bev/hard_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "2", "]", "[", "3", "]", "=", "max", "(", "bev_map_softa", "[", "2", "]", "[", "3", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_bev/11R_easy\"", ":", "\n", "        ", "bev_map_softa", "[", "0", "]", "[", "4", "]", "=", "max", "(", "bev_map_softa", "[", "0", "]", "[", "4", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_bev/11R_easy\"", ":", "\n", "        ", "bev_map_softa", "[", "1", "]", "[", "4", "]", "=", "max", "(", "bev_map_softa", "[", "1", "]", "[", "4", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_bev/11R_easy\"", ":", "\n", "        ", "bev_map_softa", "[", "2", "]", "[", "4", "]", "=", "max", "(", "bev_map_softa", "[", "2", "]", "[", "4", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Car_bev/easy_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "0", "]", "[", "5", "]", "=", "max", "(", "bev_map_softa", "[", "0", "]", "[", "5", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Pedestrian_bev/easy_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "1", "]", "[", "5", "]", "=", "max", "(", "bev_map_softa", "[", "1", "]", "[", "5", "]", ",", "val", ")", "\n", "", "elif", "key", "==", "\"Cyclist_bev/easy_R40\"", ":", "\n", "        ", "bev_map_softa", "[", "2", "]", "[", "5", "]", "=", "max", "(", "bev_map_softa", "[", "2", "]", "[", "5", "]", ",", "val", ")", "\n", "", "return", "bev_map_softa", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.main": [[220, 288], ["test.parse_config", "pathlib.Path.mkdir", "eval_output_dir.mkdir", "btcdet.utils.common_utils.create_logger", "common_utils.create_logger.info", "common_utils.create_logger.info", "pc_dir.mkdir", "btcdet.datasets.build_dataloader", "btcdet.models.build_network", "len", "pathlib.Path", "common_utils.create_logger.info", "torch.no_grad", "getattr", "re.findall", "datetime.datetime.now().strftime", "os.environ.keys", "len", "test.repeat_eval_ckpt", "test.eval_single_ckpt", "num_list.__len__", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pcrc_curve.parse_config", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.create_logger", "home.repos.pwc.inspect_result.xharlie_btcdet.datasets.__init__.build_dataloader", "home.repos.pwc.inspect_result.xharlie_btcdet.models.__init__.build_network", "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.repeat_eval_ckpt", "home.repos.pwc.inspect_result.xharlie_btcdet.tools.test.eval_single_ckpt", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", ",", "cfg", "=", "parse_config", "(", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_str", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "dist_test", "=", "False", "\n", "total_gpus", "=", "1", "\n", "", "else", ":", "\n", "        ", "total_gpus", ",", "cfg", ".", "LOCAL_RANK", "=", "getattr", "(", "common_utils", ",", "'init_dist_%s'", "%", "args", ".", "launcher", ")", "(", "\n", "args", ".", "tcp_port", ",", "args", ".", "local_rank", ",", "backend", "=", "'nccl'", "\n", ")", "\n", "dist_test", "=", "True", "\n", "\n", "", "if", "args", ".", "batch_size", "is", "None", ":", "\n", "        ", "args", ".", "batch_size", "=", "cfg", ".", "OPTIMIZATION", ".", "BATCH_SIZE_PER_GPU", "\n", "", "else", ":", "\n", "        ", "assert", "args", ".", "batch_size", "%", "total_gpus", "==", "0", ",", "'Batch size should match the number of gpus'", "\n", "args", ".", "batch_size", "=", "args", ".", "batch_size", "//", "total_gpus", "\n", "\n", "", "if", "len", "(", "args", ".", "output_dir", ")", "==", "0", ":", "\n", "       ", "output_dir", "=", "cfg", ".", "ROOT_DIR", "/", "'output'", "/", "cfg", ".", "EXP_GROUP_PATH", "/", "cfg", ".", "TAG", "/", "args", ".", "extra_tag", "\n", "", "else", ":", "\n", "       ", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "", "output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "eval_output_dir", "=", "output_dir", "/", "'eval'", "\n", "\n", "if", "not", "args", ".", "eval_all", ":", "\n", "        ", "num_list", "=", "re", ".", "findall", "(", "r'\\d+'", ",", "args", ".", "ckpt", ")", "if", "args", ".", "ckpt", "is", "not", "None", "else", "[", "]", "\n", "epoch_id", "=", "num_list", "[", "-", "1", "]", "if", "num_list", ".", "__len__", "(", ")", ">", "0", "else", "'no_number'", "\n", "eval_output_dir", "=", "eval_output_dir", "/", "(", "'epoch_%s'", "%", "epoch_id", ")", "/", "cfg", ".", "DATA_CONFIG", ".", "DATA_SPLIT", "[", "'test'", "]", "\n", "", "else", ":", "\n", "        ", "eval_output_dir", "=", "eval_output_dir", "/", "'eval_all_default'", "\n", "\n", "", "if", "args", ".", "eval_tag", "is", "not", "None", ":", "\n", "        ", "eval_output_dir", "=", "eval_output_dir", "/", "args", ".", "eval_tag", "\n", "\n", "", "eval_output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "log_file", "=", "eval_output_dir", "/", "(", "'log_eval_%s.txt'", "%", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ")", ")", "\n", "logger", "=", "common_utils", ".", "create_logger", "(", "log_file", ",", "rank", "=", "cfg", ".", "LOCAL_RANK", ")", "\n", "\n", "# log to file", "\n", "logger", ".", "info", "(", "'**********************Start logging**********************'", ")", "\n", "gpu_list", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ".", "keys", "(", ")", "else", "'ALL'", "\n", "logger", ".", "info", "(", "'CUDA_VISIBLE_DEVICES=%s'", "%", "gpu_list", ")", "\n", "\n", "if", "dist_test", ":", "\n", "        ", "logger", ".", "info", "(", "'total_batch_size: %d'", "%", "(", "total_gpus", "*", "args", ".", "batch_size", ")", ")", "\n", "# for key, val in vars(args).items():", "\n", "#     logger.info('{:16} {}'.format(key, val))", "\n", "# log_config_to_file(cfg, logger=logger)", "\n", "\n", "", "ckpt_dir", "=", "args", ".", "ckpt_dir", "if", "args", ".", "ckpt_dir", "is", "not", "None", "else", "output_dir", "/", "'ckpt'", "\n", "pc_dir", "=", "eval_output_dir", "/", "'cloud'", "\n", "pc_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "test_set", ",", "test_loader", ",", "sampler", "=", "build_dataloader", "(", "\n", "dataset_cfg", "=", "cfg", ".", "DATA_CONFIG", ",", "\n", "class_names", "=", "cfg", ".", "CLASS_NAMES", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "dist", "=", "dist_test", ",", "workers", "=", "args", ".", "workers", ",", "logger", "=", "logger", ",", "training", "=", "False", "\n", ")", "\n", "\n", "model", "=", "build_network", "(", "model_cfg", "=", "cfg", ".", "MODEL", ",", "num_class", "=", "len", "(", "cfg", ".", "CLASS_NAMES", ")", ",", "dataset", "=", "test_set", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "args", ".", "eval_all", ":", "\n", "            ", "repeat_eval_ckpt", "(", "model", ",", "test_loader", ",", "args", ",", "eval_output_dir", ",", "logger", ",", "ckpt_dir", ",", "dist_test", "=", "dist_test", ",", "pc_dir", "=", "pc_dir", ")", "\n", "", "else", ":", "\n", "            ", "eval_single_ckpt", "(", "model", ",", "test_loader", ",", "args", ",", "eval_output_dir", ",", "logger", ",", "epoch_id", ",", "dist_test", "=", "dist_test", ",", "pc_dir", "=", "pc_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.train_one_epoch": [[9, 79], ["range", "len", "iter", "tqdm.tqdm", "lr_scheduler.step", "model.train", "optimizer.zero_grad", "model_func", "loss.backward", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "disp_dict.update", "tqdm.tqdm.close", "next", "float", "tb_log.add_scalar", "model.parameters", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "tbar.set_postfix", "tbar.refresh", "bool", "iter", "next", "print", "loss.item", "dict", "tb_log.add_scalar", "tb_log.add_scalar", "tb_dict.items", "pc_dict.items", "numpy.save", "key.startswith", "key.endswith", "tb_log.add_image", "tb_log.add_scalar", "torch.is_tensor", "val.cpu().numpy", "str", "key.split", "val.cpu"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.xharlie_btcdet.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.backward", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.LRSchedulerStep.step"], ["def", "train_one_epoch", "(", "model", ",", "optimizer", ",", "train_loader", ",", "model_func", ",", "lr_scheduler", ",", "accumulated_iter", ",", "optim_cfg", ",", "\n", "rank", ",", "tbar", ",", "total_it_each_epoch", ",", "dataloader_iter", ",", "tb_log", "=", "None", ",", "leave_pbar", "=", "False", ",", "pc_dir", "=", "None", ",", "cur_epoch", "=", "None", ")", ":", "\n", "    ", "tb_log", "=", "None", "\n", "\n", "if", "total_it_each_epoch", "==", "len", "(", "train_loader", ")", ":", "\n", "        ", "dataloader_iter", "=", "iter", "(", "train_loader", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "pbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "total_it_each_epoch", ",", "leave", "=", "leave_pbar", ",", "desc", "=", "'train'", ",", "dynamic_ncols", "=", "True", ")", "\n", "\n", "", "for", "cur_it", "in", "range", "(", "total_it_each_epoch", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "next", "(", "dataloader_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "dataloader_iter", "=", "iter", "(", "train_loader", ")", "\n", "batch", "=", "next", "(", "dataloader_iter", ")", "\n", "print", "(", "'new iters'", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", "accumulated_iter", ")", "\n", "try", ":", "\n", "            ", "cur_lr", "=", "float", "(", "optimizer", ".", "lr", ")", "\n", "", "except", ":", "\n", "            ", "cur_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "", "if", "tb_log", "is", "not", "None", ":", "\n", "            ", "tb_log", ".", "add_scalar", "(", "'meta_data/learning_rate'", ",", "cur_lr", ",", "accumulated_iter", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ",", "tb_dict", ",", "disp_dict", ",", "pc_dict", "=", "model_func", "(", "model", ",", "batch", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "# print(\"self.conv_res.weight.grad: \", model.occ_occ_dense_head.conv_cls.bias.grad) ## check gradient pass", "\n", "\n", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "optim_cfg", ".", "GRAD_NORM_CLIP", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "accumulated_iter", "+=", "1", "\n", "disp_dict", ".", "update", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'lr'", ":", "cur_lr", "}", ")", "\n", "\n", "# log to console and tensorboard", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "pbar", ".", "update", "(", ")", "\n", "pbar", ".", "set_postfix", "(", "dict", "(", "total_it", "=", "accumulated_iter", ")", ")", "\n", "tbar", ".", "set_postfix", "(", "disp_dict", ")", "\n", "tbar", ".", "refresh", "(", ")", "\n", "\n", "if", "tb_log", "is", "not", "None", ":", "\n", "                ", "tb_log", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ",", "accumulated_iter", ")", "\n", "tb_log", ".", "add_scalar", "(", "'meta_data/learning_rate'", ",", "cur_lr", ",", "accumulated_iter", ")", "\n", "for", "key", ",", "val", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "                    ", "prefix", "=", "'train/'", "\n", "if", "key", ".", "startswith", "(", "\"occ\"", ")", ":", "\n", "                        ", "prefix", "=", "\"occ/\"", "\n", "", "if", "key", ".", "endswith", "(", "'img'", ")", ":", "\n", "                        ", "prefix", "=", "key", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "\"/\"", "\n", "tb_log", ".", "add_image", "(", "prefix", "+", "key", ",", "val", ",", "accumulated_iter", ",", "dataformats", "=", "\"HWC\"", ")", "\n", "", "else", ":", "\n", "                        ", "tb_log", ".", "add_scalar", "(", "prefix", "+", "key", ",", "val", ",", "accumulated_iter", ")", "\n", "", "", "", "if", "bool", "(", "pc_dict", ")", ":", "\n", "                ", "for", "key", ",", "val", "in", "pc_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "torch", ".", "is_tensor", "(", "val", ")", "and", "val", ".", "is_cuda", ":", "\n", "                        ", "pc_dict", "[", "key", "]", "=", "val", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "np", ".", "save", "(", "str", "(", "pc_dir", ")", "+", "'/pc_{}_{}'", ".", "format", "(", "cur_epoch", ",", "accumulated_iter", ")", ",", "pc_dict", ")", "\n", "\n", "\n", "", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "pbar", ".", "close", "(", ")", "\n", "", "return", "accumulated_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.train_one_epoch_multi_opt": [[81, 160], ["isinstance", "range", "len", "iter", "tqdm.tqdm", "model.train", "range", "model_func", "loss.backward", "range", "tqdm.tqdm.close", "next", "len", "optimizer.zero_grad", "cur_lr_lst.append", "len", "torch.nn.utils.clip_grad_norm_", "optimizer_lst[].step", "lr_scheduler_lst[].step", "max", "len", "disp_dict.update", "disp_dict.update", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "tbar.set_postfix", "tbar.refresh", "bool", "iter", "next", "print", "float", "tb_log.add_scalar", "parameter_lst[].parameters", "dict", "tb_log.add_scalar", "tb_dict.items", "numpy.save", "loss.item", "loss.item", "key.startswith", "key.endswith", "tb_log.add_image", "tb_log.add_scalar", "str", "key.split"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.roipoint_pool3d.roipoint_pool3d_utils.RoIPointPool3dFunction.backward", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.LRSchedulerStep.step"], ["", "def", "train_one_epoch_multi_opt", "(", "model", ",", "optimizer_lst", ",", "train_loader", ",", "model_func", ",", "lr_scheduler_lst", ",", "accumulated_iter", ",", "optim_cfg_lst", ",", "rank", ",", "tbar", ",", "total_it_each_epoch", ",", "dataloader_iter", ",", "tb_log", "=", "None", ",", "leave_pbar", "=", "False", ",", "pc_dir", "=", "None", ",", "cur_epoch", "=", "None", ")", ":", "\n", "\n", "    ", "tb_log", "=", "None", "\n", "\n", "if", "total_it_each_epoch", "==", "len", "(", "train_loader", ")", ":", "\n", "        ", "dataloader_iter", "=", "iter", "(", "train_loader", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "pbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "total_it_each_epoch", ",", "leave", "=", "leave_pbar", ",", "desc", "=", "'train'", ",", "dynamic_ncols", "=", "True", ")", "\n", "", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "        ", "parameter_lst", "=", "[", "model", ".", "module", ".", "occ_modules", ",", "model", ".", "module", ".", "det_modules", "]", "\n", "", "else", ":", "\n", "        ", "parameter_lst", "=", "[", "model", ".", "occ_modules", ",", "model", ".", "det_modules", "]", "\n", "\n", "", "for", "cur_it", "in", "range", "(", "total_it_each_epoch", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "next", "(", "dataloader_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "dataloader_iter", "=", "iter", "(", "train_loader", ")", "\n", "batch", "=", "next", "(", "dataloader_iter", ")", "\n", "print", "(", "'new iters'", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "cur_lr_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer_lst", ")", ")", ":", "\n", "            ", "optimizer", "=", "optimizer_lst", "[", "i", "]", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "                ", "cur_lr", "=", "float", "(", "optimizer", ".", "lr", ")", "\n", "", "except", ":", "\n", "                ", "cur_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "", "if", "tb_log", "is", "not", "None", ":", "\n", "                ", "tb_log", ".", "add_scalar", "(", "'meta_data/learning_rate_{}'", ".", "format", "(", "i", ")", ",", "cur_lr", ",", "accumulated_iter", ")", "\n", "", "cur_lr_lst", ".", "append", "(", "cur_lr", ")", "\n", "\n", "", "loss", ",", "tb_dict", ",", "disp_dict", ",", "pc_dict", "=", "model_func", "(", "model", ",", "batch", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer_lst", ")", ")", ":", "\n", "            ", "clip_grad_norm_", "(", "parameter_lst", "[", "i", "]", ".", "parameters", "(", ")", ",", "optim_cfg_lst", "[", "i", "]", ".", "GRAD_NORM_CLIP", ")", "\n", "optimizer_lst", "[", "i", "]", ".", "step", "(", ")", "\n", "lr_scheduler_lst", "[", "i", "]", ".", "step", "(", "accumulated_iter", ")", "\n", "optimizer_lst", "[", "i", "]", ".", "lr", "=", "max", "(", "optimizer_lst", "[", "i", "]", ".", "lr", ",", "optim_cfg_lst", "[", "i", "]", ".", "LR_CLIP", ")", "\n", "\n", "", "accumulated_iter", "+=", "1", "\n", "if", "len", "(", "cur_lr_lst", ")", ">", "1", ":", "\n", "            ", "disp_dict", ".", "update", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'lr_occ'", ":", "cur_lr_lst", "[", "0", "]", ",", "'lr_det'", ":", "cur_lr_lst", "[", "1", "]", "}", ")", "\n", "", "else", ":", "\n", "            ", "disp_dict", ".", "update", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'lr'", ":", "cur_lr_lst", "[", "0", "]", "}", ")", "\n", "\n", "# log to console and tensorboard", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "pbar", ".", "update", "(", ")", "\n", "pbar", ".", "set_postfix", "(", "dict", "(", "total_it", "=", "accumulated_iter", ")", ")", "\n", "tbar", ".", "set_postfix", "(", "disp_dict", ")", "\n", "tbar", ".", "refresh", "(", ")", "\n", "\n", "if", "tb_log", "is", "not", "None", ":", "\n", "                ", "tb_log", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ",", "accumulated_iter", ")", "\n", "# tb_log.add_scalar('meta_data/learning_rate', cur_lr, accumulated_iter)", "\n", "for", "key", ",", "val", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "                    ", "prefix", "=", "'train/'", "\n", "if", "key", ".", "startswith", "(", "\"occ\"", ")", ":", "\n", "                        ", "prefix", "=", "\"occ/\"", "\n", "", "if", "key", ".", "endswith", "(", "'img'", ")", ":", "\n", "                        ", "prefix", "=", "key", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "\"/\"", "\n", "tb_log", ".", "add_image", "(", "prefix", "+", "key", ",", "val", ",", "accumulated_iter", ",", "dataformats", "=", "\"HWC\"", ")", "\n", "", "else", ":", "\n", "                        ", "tb_log", ".", "add_scalar", "(", "prefix", "+", "key", ",", "val", ",", "accumulated_iter", ")", "\n", "", "", "", "if", "bool", "(", "pc_dict", ")", ":", "\n", "                ", "np", ".", "save", "(", "str", "(", "pc_dir", ")", "+", "'/pc_{}_{}'", ".", "format", "(", "cur_epoch", ",", "accumulated_iter", ")", ",", "pc_dict", ")", "\n", "\n", "\n", "", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "pbar", ".", "close", "(", ")", "\n", "", "return", "accumulated_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.train_model": [[162, 210], ["tqdm.trange", "len", "iter", "hasattr", "train_loader.dataset.merge_all_iters_to_one_epoch", "train_utils.train_one_epoch", "len", "max", "train_sampler.set_epoch", "glob.glob", "glob.glob.sort", "train_utils.save_checkpoint", "str", "glob.glob.__len__", "range", "train_utils.checkpoint_state", "os.remove", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.merge_all_iters_to_one_epoch", "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.train_one_epoch", "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.save_checkpoint", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.checkpoint_state"], ["", "def", "train_model", "(", "model", ",", "optimizer", ",", "train_loader", ",", "model_func", ",", "lr_scheduler", ",", "optim_cfg", ",", "\n", "start_epoch", ",", "total_epochs", ",", "start_iter", ",", "rank", ",", "tb_log", ",", "ckpt_save_dir", ",", "train_sampler", "=", "None", ",", "\n", "lr_warmup_scheduler", "=", "None", ",", "ckpt_save_interval", "=", "1", ",", "max_ckpt_save_num", "=", "50", ",", "\n", "merge_all_iters_to_one_epoch", "=", "False", ",", "pc_dir", "=", "None", ")", ":", "\n", "    ", "accumulated_iter", "=", "start_iter", "\n", "with", "tqdm", ".", "trange", "(", "start_epoch", ",", "total_epochs", ",", "desc", "=", "'epochs'", ",", "dynamic_ncols", "=", "True", ",", "leave", "=", "(", "rank", "==", "0", ")", ")", "as", "tbar", ":", "\n", "        ", "total_it_each_epoch", "=", "len", "(", "train_loader", ")", "\n", "if", "merge_all_iters_to_one_epoch", ":", "\n", "            ", "assert", "hasattr", "(", "train_loader", ".", "dataset", ",", "'merge_all_iters_to_one_epoch'", ")", "\n", "train_loader", ".", "dataset", ".", "merge_all_iters_to_one_epoch", "(", "merge", "=", "True", ",", "epochs", "=", "total_epochs", ")", "\n", "total_it_each_epoch", "=", "len", "(", "train_loader", ")", "//", "max", "(", "total_epochs", ",", "1", ")", "\n", "\n", "", "dataloader_iter", "=", "iter", "(", "train_loader", ")", "\n", "for", "cur_epoch", "in", "tbar", ":", "\n", "            ", "if", "train_sampler", "is", "not", "None", ":", "\n", "                ", "train_sampler", ".", "set_epoch", "(", "cur_epoch", ")", "\n", "\n", "# train one epoch", "\n", "", "if", "lr_warmup_scheduler", "is", "not", "None", "and", "cur_epoch", "<", "optim_cfg", ".", "WARMUP_EPOCH", ":", "\n", "                ", "cur_scheduler", "=", "lr_warmup_scheduler", "\n", "", "else", ":", "\n", "                ", "cur_scheduler", "=", "lr_scheduler", "\n", "", "accumulated_iter", "=", "train_one_epoch", "(", "\n", "model", ",", "optimizer", ",", "train_loader", ",", "model_func", ",", "\n", "lr_scheduler", "=", "cur_scheduler", ",", "\n", "accumulated_iter", "=", "accumulated_iter", ",", "optim_cfg", "=", "optim_cfg", ",", "\n", "rank", "=", "rank", ",", "tbar", "=", "tbar", ",", "tb_log", "=", "tb_log", ",", "\n", "leave_pbar", "=", "(", "cur_epoch", "+", "1", "==", "total_epochs", ")", ",", "\n", "total_it_each_epoch", "=", "total_it_each_epoch", ",", "\n", "dataloader_iter", "=", "dataloader_iter", ",", "\n", "pc_dir", "=", "pc_dir", ",", "\n", "cur_epoch", "=", "cur_epoch", ",", "\n", ")", "\n", "\n", "# save trained model", "\n", "trained_epoch", "=", "cur_epoch", "+", "1", "\n", "if", "trained_epoch", "%", "ckpt_save_interval", "==", "0", "and", "rank", "==", "0", ":", "\n", "\n", "                ", "ckpt_list", "=", "glob", ".", "glob", "(", "str", "(", "ckpt_save_dir", "/", "'checkpoint_epoch_*.pth'", ")", ")", "\n", "ckpt_list", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "\n", "if", "ckpt_list", ".", "__len__", "(", ")", ">=", "max_ckpt_save_num", ":", "\n", "                    ", "for", "cur_file_idx", "in", "range", "(", "0", ",", "len", "(", "ckpt_list", ")", "-", "max_ckpt_save_num", "+", "1", ")", ":", "\n", "                        ", "os", ".", "remove", "(", "ckpt_list", "[", "cur_file_idx", "]", ")", "\n", "\n", "", "", "ckpt_name", "=", "ckpt_save_dir", "/", "(", "'checkpoint_epoch_%d'", "%", "trained_epoch", ")", "\n", "save_checkpoint", "(", "\n", "checkpoint_state", "(", "model", ",", "optimizer", ",", "trained_epoch", ",", "accumulated_iter", ")", ",", "filename", "=", "ckpt_name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.train_model_multi_opt": [[212, 262], ["tqdm.trange", "len", "iter", "hasattr", "train_loader.dataset.merge_all_iters_to_one_epoch", "range", "train_utils.train_one_epoch_multi_opt", "len", "max", "train_sampler.set_epoch", "len", "glob.glob", "glob.glob.sort", "train_utils.save_checkpoint", "cur_scheduler_lst.append", "cur_scheduler_lst.append", "str", "glob.glob.__len__", "range", "train_utils.checkpoint_state_mult_opt", "os.remove", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.datasets.dataset.DatasetTemplate.merge_all_iters_to_one_epoch", "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.train_one_epoch_multi_opt", "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.save_checkpoint", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.checkpoint_state_mult_opt"], ["", "", "", "", "def", "train_model_multi_opt", "(", "model", ",", "optimizer_lst", ",", "train_loader", ",", "model_func", ",", "lr_scheduler_lst", ",", "optim_cfg_lst", ",", "\n", "start_epoch", ",", "total_epochs", ",", "start_iter", ",", "rank", ",", "tb_log", ",", "ckpt_save_dir", ",", "train_sampler", "=", "None", ",", "\n", "lr_warmup_scheduler_lst", "=", "None", ",", "ckpt_save_interval", "=", "1", ",", "max_ckpt_save_num", "=", "50", ",", "\n", "merge_all_iters_to_one_epoch", "=", "False", ",", "pc_dir", "=", "None", ")", ":", "\n", "    ", "accumulated_iter", "=", "start_iter", "\n", "with", "tqdm", ".", "trange", "(", "start_epoch", ",", "total_epochs", ",", "desc", "=", "'epochs'", ",", "dynamic_ncols", "=", "True", ",", "leave", "=", "(", "rank", "==", "0", ")", ")", "as", "tbar", ":", "\n", "        ", "total_it_each_epoch", "=", "len", "(", "train_loader", ")", "\n", "if", "merge_all_iters_to_one_epoch", ":", "\n", "            ", "assert", "hasattr", "(", "train_loader", ".", "dataset", ",", "'merge_all_iters_to_one_epoch'", ")", "\n", "train_loader", ".", "dataset", ".", "merge_all_iters_to_one_epoch", "(", "merge", "=", "True", ",", "epochs", "=", "total_epochs", ")", "\n", "total_it_each_epoch", "=", "len", "(", "train_loader", ")", "//", "max", "(", "total_epochs", ",", "1", ")", "\n", "\n", "", "dataloader_iter", "=", "iter", "(", "train_loader", ")", "\n", "for", "cur_epoch", "in", "tbar", ":", "\n", "            ", "if", "train_sampler", "is", "not", "None", ":", "\n", "                ", "train_sampler", ".", "set_epoch", "(", "cur_epoch", ")", "\n", "\n", "# train one epoch", "\n", "", "cur_scheduler_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "optim_cfg_lst", ")", ")", ":", "\n", "                ", "if", "lr_warmup_scheduler_lst", "[", "i", "]", "is", "not", "None", "and", "cur_epoch", "<", "optim_cfg_lst", "[", "i", "]", ".", "WARMUP_EPOCH", ":", "\n", "                    ", "cur_scheduler_lst", ".", "append", "(", "lr_warmup_scheduler_lst", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "cur_scheduler_lst", ".", "append", "(", "lr_scheduler_lst", "[", "i", "]", ")", "\n", "", "", "accumulated_iter", "=", "train_one_epoch_multi_opt", "(", "\n", "model", ",", "optimizer_lst", ",", "train_loader", ",", "model_func", ",", "\n", "lr_scheduler_lst", "=", "cur_scheduler_lst", ",", "\n", "accumulated_iter", "=", "accumulated_iter", ",", "optim_cfg_lst", "=", "optim_cfg_lst", ",", "\n", "rank", "=", "rank", ",", "tbar", "=", "tbar", ",", "tb_log", "=", "tb_log", ",", "\n", "leave_pbar", "=", "(", "cur_epoch", "+", "1", "==", "total_epochs", ")", ",", "\n", "total_it_each_epoch", "=", "total_it_each_epoch", ",", "\n", "dataloader_iter", "=", "dataloader_iter", ",", "\n", "pc_dir", "=", "pc_dir", ",", "\n", "cur_epoch", "=", "cur_epoch", ",", "\n", ")", "\n", "\n", "# save trained model", "\n", "trained_epoch", "=", "cur_epoch", "+", "1", "\n", "if", "trained_epoch", "%", "ckpt_save_interval", "==", "0", "and", "rank", "==", "0", ":", "\n", "\n", "                ", "ckpt_list", "=", "glob", ".", "glob", "(", "str", "(", "ckpt_save_dir", "/", "'checkpoint_epoch_*.pth'", ")", ")", "\n", "ckpt_list", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "\n", "if", "ckpt_list", ".", "__len__", "(", ")", ">=", "max_ckpt_save_num", ":", "\n", "                    ", "for", "cur_file_idx", "in", "range", "(", "0", ",", "len", "(", "ckpt_list", ")", "-", "max_ckpt_save_num", "+", "1", ")", ":", "\n", "                        ", "os", ".", "remove", "(", "ckpt_list", "[", "cur_file_idx", "]", ")", "\n", "\n", "", "", "ckpt_name", "=", "ckpt_save_dir", "/", "(", "'checkpoint_epoch_%d'", "%", "trained_epoch", ")", "\n", "save_checkpoint", "(", "\n", "checkpoint_state_mult_opt", "(", "model", ",", "optimizer_lst", ",", "trained_epoch", ",", "accumulated_iter", ")", ",", "filename", "=", "ckpt_name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.model_state_to_cpu": [[265, 270], ["model_state.items", "type", "val.cpu"], "function", ["None"], ["", "", "", "", "def", "model_state_to_cpu", "(", "model_state", ")", ":", "\n", "    ", "model_state_cpu", "=", "type", "(", "model_state", ")", "(", ")", "# ordered dict", "\n", "for", "key", ",", "val", "in", "model_state", ".", "items", "(", ")", ":", "\n", "        ", "model_state_cpu", "[", "key", "]", "=", "val", ".", "cpu", "(", ")", "\n", "", "return", "model_state_cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.checkpoint_state_mult_opt": [[272, 289], ["isinstance", "optimizer.state_dict", "train_utils.model_state_to_cpu", "model.state_dict", "model.module.state_dict"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.model_state_to_cpu"], ["", "def", "checkpoint_state_mult_opt", "(", "model", "=", "None", ",", "optimizer_lst", "=", "None", ",", "epoch", "=", "None", ",", "it", "=", "None", ")", ":", "\n", "    ", "optim_state_lst", "=", "[", "optimizer", ".", "state_dict", "(", ")", "if", "optimizer", "is", "not", "None", "else", "None", "for", "optimizer", "in", "optimizer_lst", "]", "\n", "if", "model", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "            ", "model_state", "=", "model_state_to_cpu", "(", "model", ".", "module", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "model_state", "=", "None", "\n", "\n", "", "try", ":", "\n", "        ", "import", "btcdet", "\n", "version", "=", "'btcdet+'", "+", "btcdet", ".", "__version__", "\n", "", "except", ":", "\n", "        ", "version", "=", "'none'", "\n", "\n", "", "return", "{", "'epoch'", ":", "epoch", ",", "'it'", ":", "it", ",", "'model_state'", ":", "model_state", ",", "'optimizer_state_lst'", ":", "optim_state_lst", ",", "'version'", ":", "version", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.checkpoint_state": [[290, 307], ["optimizer.state_dict", "isinstance", "train_utils.model_state_to_cpu", "model.state_dict", "model.module.state_dict"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.model_state_to_cpu"], ["", "def", "checkpoint_state", "(", "model", "=", "None", ",", "optimizer", "=", "None", ",", "epoch", "=", "None", ",", "it", "=", "None", ")", ":", "\n", "    ", "optim_state", "=", "optimizer", ".", "state_dict", "(", ")", "if", "optimizer", "is", "not", "None", "else", "None", "\n", "if", "model", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "            ", "model_state", "=", "model_state_to_cpu", "(", "model", ".", "module", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "model_state", "=", "None", "\n", "\n", "", "try", ":", "\n", "        ", "import", "btcdet", "\n", "version", "=", "'btcdet+'", "+", "btcdet", ".", "__version__", "\n", "", "except", ":", "\n", "        ", "version", "=", "'none'", "\n", "\n", "", "return", "{", "'epoch'", ":", "epoch", ",", "'it'", ":", "it", ",", "'model_state'", ":", "model_state", ",", "'optim_state'", ":", "optim_state", ",", "'version'", ":", "version", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.train_utils.train_utils.save_checkpoint": [[309, 318], ["torch.save", "state.pop", "torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "filename", "=", "'checkpoint'", ")", ":", "\n", "    ", "if", "False", "and", "'optimizer_state'", "in", "state", ":", "\n", "        ", "optimizer_state", "=", "state", "[", "'optimizer_state'", "]", "\n", "state", ".", "pop", "(", "'optimizer_state'", ",", "None", ")", "\n", "optimizer_filename", "=", "'{}_optim.pth'", ".", "format", "(", "filename", ")", "\n", "torch", ".", "save", "(", "{", "'optimizer_state'", ":", "optimizer_state", "}", ",", "optimizer_filename", ")", "\n", "\n", "", "filename", "=", "'{}.pth'", ".", "format", "(", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.__init__.build_optimizer": [[11, 45], ["getattr", "torch.Adam", "getattr.parameters", "torch.SGD", "getattr.parameters", "functools.partial", "fastai_optim.OptimWrapper.create", "list", "len", "get_layer_groups", "m.children", "__init__.build_optimizer.children"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.FastAIMixedOptim.create"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.__init__.build_scheduler": [[47, 75], ["max", "learning_schedules_fastai.OneCycle", "list", "torch.CosineAnnealingLR", "torch.LambdaLR", "learning_schedules_fastai.CosineWarmupLR"], "function", ["None"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.__init__.build_schedulers": [[76, 84], ["zip", "__init__.build_scheduler", "lr_scheduler_lst.append", "lr_warmup_scheduler_lst.append"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.__init__.build_scheduler"], []], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.__init__": [[104, 110], ["list", "fastai_optim.OptimWrapper.opt_keys.remove", "fastai_optim.OptimWrapper.read_defaults", "fastai_optim.OptimWrapper.opt.param_groups[].keys"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.read_defaults"], ["def", "__init__", "(", "self", ",", "opt", ",", "wd", ",", "true_wd", ":", "bool", "=", "False", ",", "bn_wd", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "opt", ",", "self", ".", "true_wd", ",", "self", ".", "bn_wd", "=", "opt", ",", "true_wd", ",", "bn_wd", "\n", "self", ".", "opt_keys", "=", "list", "(", "self", ".", "opt", ".", "param_groups", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "self", ".", "opt_keys", ".", "remove", "(", "'params'", ")", "\n", "self", ".", "read_defaults", "(", ")", "\n", "self", ".", "wd", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.create": [[111, 120], ["fastai_optim.split_bn_bias", "opt_func", "cls", "fastai_optim.listify", "fastai_optim.trainable_params"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.trainable_params"], ["", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "opt_func", ",", "lr", ",", "\n", "layer_groups", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"Create an `optim.Optimizer` from `opt_func` with `lr`. Set lr on `layer_groups`.\"", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "opt", "=", "opt_func", "(", "[", "{", "'params'", ":", "trainable_params", "(", "l", ")", ",", "'lr'", ":", "0", "}", "for", "l", "in", "split_groups", "]", ")", "\n", "opt", "=", "cls", "(", "opt", ",", "**", "kwargs", ")", "\n", "opt", ".", "lr", ",", "opt", ".", "opt_func", "=", "listify", "(", "lr", ",", "layer_groups", ")", ",", "opt_func", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.new": [[121, 127], ["getattr", "fastai_optim.split_bn_bias", "getattr.", "fastai_optim.OptimWrapper.create", "fastai_optim.trainable_params"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.trainable_params"], ["", "def", "new", "(", "self", ",", "layer_groups", ")", ":", "\n", "        ", "\"Create a new `OptimWrapper` from `self` with another `layer_groups` but the same hyper-parameters.\"", "\n", "opt_func", "=", "getattr", "(", "self", ",", "'opt_func'", ",", "self", ".", "opt", ".", "__class__", ")", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "opt", "=", "opt_func", "(", "[", "{", "'params'", ":", "trainable_params", "(", "l", ")", ",", "'lr'", ":", "0", "}", "for", "l", "in", "split_groups", "]", ")", "\n", "return", "self", ".", "create", "(", "opt_func", ",", "self", ".", "lr", ",", "layer_groups", ",", "wd", "=", "self", ".", "wd", ",", "true_wd", "=", "self", ".", "true_wd", ",", "bn_wd", "=", "self", ".", "bn_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.__repr__": [[128, 130], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'OptimWrapper over {repr(self.opt)}.\\nTrue weight decay: {self.true_wd}'", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.step": [[132, 150], ["fastai_optim.OptimWrapper.opt.step", "zip", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "p.data.mul_", "p.data.mul_"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify"], ["", "def", "step", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Set weight decay and step optimizer.\"", "\n", "# weight decay outside of optimizer step (AdamW)", "\n", "if", "self", ".", "true_wd", ":", "\n", "            ", "for", "lr", ",", "wd", ",", "pg1", ",", "pg2", "in", "zip", "(", "self", ".", "_lr", ",", "self", ".", "_wd", ",", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", ",", "self", ".", "opt", ".", "param_groups", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "                ", "for", "p", "in", "pg1", "[", "'params'", "]", ":", "\n", "# When some parameters are fixed:  Shaoshuai Shi", "\n", "                    ", "if", "p", ".", "requires_grad", "is", "False", ":", "\n", "                        ", "continue", "\n", "", "p", ".", "data", ".", "mul_", "(", "1", "-", "wd", "*", "lr", ")", "\n", "", "if", "self", ".", "bn_wd", ":", "\n", "                    ", "for", "p", "in", "pg2", "[", "'params'", "]", ":", "\n", "# When some parameters are fixed:  Shaoshuai Shi", "\n", "                        ", "if", "p", ".", "requires_grad", "is", "False", ":", "\n", "                            ", "continue", "\n", "", "p", ".", "data", ".", "mul_", "(", "1", "-", "wd", "*", "lr", ")", "\n", "", "", "", "self", ".", "set_val", "(", "'weight_decay'", ",", "listify", "(", "0", ",", "self", ".", "_wd", ")", ")", "\n", "", "self", ".", "opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.zero_grad": [[151, 154], ["fastai_optim.OptimWrapper.opt.zero_grad"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Clear optimizer gradients.\"", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.__getattr__": [[156, 158], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "k", ":", "str", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "opt", ",", "k", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.clear": [[159, 164], ["fastai_optim.OptimWrapper.state_dict", "fastai_optim.OptimWrapper.load_state_dict"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"Reset the state of the inner optimizer.\"", "\n", "sd", "=", "self", ".", "state_dict", "(", ")", "\n", "sd", "[", "'state'", "]", "=", "{", "}", "\n", "self", ".", "load_state_dict", "(", "sd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.lr": [[170, 173], ["fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify"], ["", "@", "lr", ".", "setter", "\n", "def", "lr", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "self", ".", "_lr", "=", "self", ".", "set_val", "(", "'lr'", ",", "listify", "(", "val", ",", "self", ".", "_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.mom": [[178, 185], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify"], ["", "@", "mom", ".", "setter", "\n", "def", "mom", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "if", "'momentum'", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "'momentum'", ",", "listify", "(", "val", ",", "self", ".", "_mom", ")", ")", "\n", "", "elif", "'betas'", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "'betas'", ",", "(", "listify", "(", "val", ",", "self", ".", "_mom", ")", ",", "self", ".", "_beta", ")", ")", "\n", "", "self", ".", "_mom", "=", "listify", "(", "val", ",", "self", ".", "_mom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.beta": [[190, 199], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify"], ["", "@", "beta", ".", "setter", "\n", "def", "beta", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"Set beta (or alpha as makes sense for given optimizer).\"", "\n", "if", "val", "is", "None", ":", "return", "\n", "if", "'betas'", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "'betas'", ",", "(", "self", ".", "_mom", ",", "listify", "(", "val", ",", "self", ".", "_beta", ")", ")", ")", "\n", "", "elif", "'alpha'", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "'alpha'", ",", "listify", "(", "val", ",", "self", ".", "_beta", ")", ")", "\n", "", "self", ".", "_beta", "=", "listify", "(", "val", ",", "self", ".", "_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.wd": [[204, 209], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify"], ["", "@", "wd", ".", "setter", "\n", "def", "wd", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"Set weight decay.\"", "\n", "if", "not", "self", ".", "true_wd", ":", "self", ".", "set_val", "(", "'weight_decay'", ",", "listify", "(", "val", ",", "self", ".", "_wd", ")", ",", "bn_groups", "=", "self", ".", "bn_wd", ")", "\n", "self", ".", "_wd", "=", "listify", "(", "val", ",", "self", ".", "_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.read_defaults": [[211, 219], ["fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.read_val"], ["", "def", "read_defaults", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Read the values inside the optimizer for the hyper-parameters.\"", "\n", "self", ".", "_beta", "=", "None", "\n", "if", "'lr'", "in", "self", ".", "opt_keys", ":", "self", ".", "_lr", "=", "self", ".", "read_val", "(", "'lr'", ")", "\n", "if", "'momentum'", "in", "self", ".", "opt_keys", ":", "self", ".", "_mom", "=", "self", ".", "read_val", "(", "'momentum'", ")", "\n", "if", "'alpha'", "in", "self", ".", "opt_keys", ":", "self", ".", "_beta", "=", "self", ".", "read_val", "(", "'alpha'", ")", "\n", "if", "'betas'", "in", "self", ".", "opt_keys", ":", "self", ".", "_mom", ",", "self", ".", "_beta", "=", "self", ".", "read_val", "(", "'betas'", ")", "\n", "if", "'weight_decay'", "in", "self", ".", "opt_keys", ":", "self", ".", "_wd", "=", "self", ".", "read_val", "(", "'weight_decay'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.set_val": [[220, 227], ["fastai_optim.is_tuple", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.is_tuple"], ["", "def", "set_val", "(", "self", ",", "key", ":", "str", ",", "val", ",", "bn_groups", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"Set `val` inside the optimizer dictionary at `key`.\"", "\n", "if", "is_tuple", "(", "val", ")", ":", "val", "=", "[", "(", "v1", ",", "v2", ")", "for", "v1", ",", "v2", "in", "zip", "(", "*", "val", ")", "]", "\n", "for", "v", ",", "pg1", ",", "pg2", "in", "zip", "(", "val", ",", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", ",", "self", ".", "opt", ".", "param_groups", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "pg1", "[", "key", "]", "=", "v", "\n", "if", "bn_groups", ":", "pg2", "[", "key", "]", "=", "v", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.read_val": [[228, 233], ["fastai_optim.is_tuple"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.is_tuple"], ["", "def", "read_val", "(", "self", ",", "key", ":", "str", ")", ":", "\n", "        ", "\"Read a hyperparameter `key` in the optimizer dictionary.\"", "\n", "val", "=", "[", "pg", "[", "key", "]", "for", "pg", "in", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", "]", "\n", "if", "is_tuple", "(", "val", "[", "0", "]", ")", ":", "val", "=", "[", "o", "[", "0", "]", "for", "o", "in", "val", "]", ",", "[", "o", "[", "1", "]", "for", "o", "in", "val", "]", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.FastAIMixedOptim.create": [[236, 253], ["fastai_optim.OptimWrapper.create", "fastai_optim.get_master", "opt_func", "range", "zip"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.get_master"], ["    ", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "opt_func", ",", "lr", ",", "\n", "layer_groups", ",", "model", ",", "flat_master", "=", "False", ",", "loss_scale", "=", "512.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"Create an `optim.Optimizer` from `opt_func` with `lr`. Set lr on `layer_groups`.\"", "\n", "opt", "=", "OptimWrapper", ".", "create", "(", "opt_func", ",", "lr", ",", "layer_groups", ",", "**", "kwargs", ")", "\n", "opt", ".", "model_params", ",", "opt", ".", "master_params", "=", "get_master", "(", "layer_groups", ",", "flat_master", ")", "\n", "opt", ".", "flat_master", "=", "flat_master", "\n", "opt", ".", "loss_scale", "=", "loss_scale", "\n", "opt", ".", "model", "=", "model", "\n", "# Changes the optimizer so that the optimization step is done in FP32.", "\n", "# opt = self.learn.opt", "\n", "mom", ",", "wd", ",", "beta", "=", "opt", ".", "mom", ",", "opt", ".", "wd", ",", "opt", ".", "beta", "\n", "lrs", "=", "[", "lr", "for", "lr", "in", "opt", ".", "_lr", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "opt_params", "=", "[", "{", "'params'", ":", "mp", ",", "'lr'", ":", "lr", "}", "for", "mp", ",", "lr", "in", "zip", "(", "opt", ".", "master_params", ",", "lrs", ")", "]", "\n", "opt", ".", "opt", "=", "opt_func", "(", "opt_params", ")", "\n", "opt", ".", "mom", ",", "opt", ".", "wd", ",", "opt", ".", "beta", "=", "mom", ",", "wd", ",", "beta", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.FastAIMixedOptim.step": [[254, 262], ["fastai_optim.model_g2master_g", "fastai_optim.OptimWrapper.step", "fastai_optim.FastAIMixedOptim.model.zero_grad", "fastai_optim.master2model", "param.grad.div_"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.model_g2master_g", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.master2model"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "model_g2master_g", "(", "self", ".", "model_params", ",", "self", ".", "master_params", ",", "self", ".", "flat_master", ")", "\n", "for", "group", "in", "self", ".", "master_params", ":", "\n", "            ", "for", "param", "in", "group", ":", "param", ".", "grad", ".", "div_", "(", "self", ".", "loss_scale", ")", "\n", "", "super", "(", "FastAIMixedOptim", ",", "self", ")", ".", "step", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "# Update the params from master to model.", "\n", "master2model", "(", "self", ".", "model_params", ",", "self", ".", "master_params", ",", "self", ".", "flat_master", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.split_bn_bias": [[13, 25], ["l.children", "isinstance", "torch.nn.Sequential", "torch.nn.Sequential", "l2.append", "l1.append"], "function", ["None"], ["def", "split_bn_bias", "(", "layer_groups", ")", ":", "\n", "    ", "\"Split the layers in `layer_groups` into batchnorm (`bn_types`) and non-batchnorm groups.\"", "\n", "split_groups", "=", "[", "]", "\n", "for", "l", "in", "layer_groups", ":", "\n", "        ", "l1", ",", "l2", "=", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "l", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "c", ",", "bn_types", ")", ":", "\n", "                ", "l2", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "l1", ".", "append", "(", "c", ")", "\n", "", "", "split_groups", "+=", "[", "nn", ".", "Sequential", "(", "*", "l1", ")", ",", "nn", ".", "Sequential", "(", "*", "l2", ")", "]", "\n", "", "return", "split_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.get_master": [[27, 47], ["fastai_optim.split_bn_bias", "lg.parameters", "len", "torch.nn.utils.parameters_to_vector", "torch.nn.Parameter", "master_params.append", "master_params.append", "param.clone().float().detach", "torch.nn.Parameter.new", "param.data.float", "param.clone().float", "torch.nn.Parameter.size", "param.clone"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.new"], ["", "def", "get_master", "(", "layer_groups", ",", "flat_master", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"Return two lists, one for the model parameters in FP16 and one for the master parameters in FP32.\"", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "model_params", "=", "[", "[", "param", "for", "param", "in", "lg", ".", "parameters", "(", ")", "if", "param", ".", "requires_grad", "]", "for", "lg", "in", "split_groups", "]", "\n", "if", "flat_master", ":", "\n", "        ", "master_params", "=", "[", "]", "\n", "for", "lg", "in", "model_params", ":", "\n", "            ", "if", "len", "(", "lg", ")", "!=", "0", ":", "\n", "                ", "mp", "=", "parameters_to_vector", "(", "[", "param", ".", "data", ".", "float", "(", ")", "for", "param", "in", "lg", "]", ")", "\n", "mp", "=", "torch", ".", "nn", ".", "Parameter", "(", "mp", ",", "requires_grad", "=", "True", ")", "\n", "if", "mp", ".", "grad", "is", "None", ":", "mp", ".", "grad", "=", "mp", ".", "new", "(", "*", "mp", ".", "size", "(", ")", ")", "\n", "master_params", ".", "append", "(", "[", "mp", "]", ")", "\n", "", "else", ":", "\n", "                ", "master_params", ".", "append", "(", "[", "]", ")", "\n", "", "", "return", "model_params", ",", "master_params", "\n", "", "else", ":", "\n", "        ", "master_params", "=", "[", "[", "param", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "for", "param", "in", "lg", "]", "for", "lg", "in", "model_params", "]", "\n", "for", "mp", "in", "master_params", ":", "\n", "            ", "for", "param", "in", "mp", ":", "param", ".", "requires_grad", "=", "True", "\n", "", "return", "model_params", ",", "master_params", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.model_g2master_g": [[49, 63], ["zip", "zip", "zip", "len", "master_group[].grad.data.copy_", "torch.nn.utils.parameters_to_vector", "master.grad.data.copy_", "master.data.new", "p.grad.data.float", "master.data.size"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.OptimWrapper.new"], ["", "", "def", "model_g2master_g", "(", "model_params", ",", "master_params", ",", "flat_master", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"Copy the `model_params` gradients to `master_params` for the optimizer step.\"", "\n", "if", "flat_master", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "if", "len", "(", "master_group", ")", "!=", "0", ":", "\n", "                ", "master_group", "[", "0", "]", ".", "grad", ".", "data", ".", "copy_", "(", "parameters_to_vector", "(", "[", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "for", "p", "in", "model_group", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "master_group", ")", ":", "\n", "                ", "if", "model", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "if", "master", ".", "grad", "is", "None", ":", "master", ".", "grad", "=", "master", ".", "data", ".", "new", "(", "*", "master", ".", "data", ".", "size", "(", ")", ")", "\n", "master", ".", "grad", ".", "data", ".", "copy_", "(", "model", ".", "grad", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "master", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.master2model": [[65, 75], ["zip", "zip", "zip", "len", "zip", "model.data.copy_", "torch._utils._unflatten_dense_tensors", "model.data.copy_"], "function", ["None"], ["", "", "", "", "", "def", "master2model", "(", "model_params", ",", "master_params", ",", "flat_master", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"Copy `master_params` to `model_params`.\"", "\n", "if", "flat_master", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "if", "len", "(", "model_group", ")", "!=", "0", ":", "\n", "                ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "_unflatten_dense_tensors", "(", "master_group", "[", "0", "]", ".", "data", ",", "model_group", ")", ")", ":", "\n", "                    ", "model", ".", "data", ".", "copy_", "(", "master", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "master_group", ")", ":", "model", ".", "data", ".", "copy_", "(", "master", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.listify": [[77, 89], ["list", "isinstance", "len", "len", "type", "len", "len", "len", "isinstance"], "function", ["None"], ["", "", "", "def", "listify", "(", "p", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "    ", "\"Make `p` listy and the same length as `q`.\"", "\n", "if", "p", "is", "None", ":", "\n", "        ", "p", "=", "[", "]", "\n", "", "elif", "isinstance", "(", "p", ",", "str", ")", ":", "\n", "        ", "p", "=", "[", "p", "]", "\n", "", "elif", "not", "isinstance", "(", "p", ",", "Iterable", ")", ":", "\n", "        ", "p", "=", "[", "p", "]", "\n", "", "n", "=", "q", "if", "type", "(", "q", ")", "==", "int", "else", "len", "(", "p", ")", "if", "q", "is", "None", "else", "len", "(", "q", ")", "\n", "if", "len", "(", "p", ")", "==", "1", ":", "p", "=", "p", "*", "n", "\n", "assert", "len", "(", "p", ")", "==", "n", ",", "f'List len mismatch ({len(p)} vs {n})'", "\n", "return", "list", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.trainable_params": [[91, 95], ["filter", "m.parameters"], "function", ["None"], ["", "def", "trainable_params", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Return list of trainable params in `m`.\"", "\n", "res", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "m", ".", "parameters", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.fastai_optim.is_tuple": [[97, 98], ["isinstance"], "function", ["None"], ["", "def", "is_tuple", "(", "x", ")", "->", "bool", ":", "return", "isinstance", "(", "x", ",", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.LRSchedulerStep.__init__": [[13, 43], ["enumerate", "enumerate", "isinstance", "isinstance", "len", "eval", "learning_schedules_fastai.LRSchedulerStep.lr_phases.append", "learning_schedules_fastai.LRSchedulerStep.lr_phases.append", "len", "eval", "learning_schedules_fastai.LRSchedulerStep.mom_phases.append", "learning_schedules_fastai.LRSchedulerStep.mom_phases.append", "len", "len", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ":", "OptimWrapper", ",", "total_step", ",", "lr_phases", ",", "\n", "mom_phases", ")", ":", "\n", "# if not isinstance(fai_optimizer, OptimWrapper):", "\n", "#     raise TypeError('{} is not a fastai OptimWrapper'.format(", "\n", "#         type(fai_optimizer).__name__))", "\n", "        ", "self", ".", "optimizer", "=", "fai_optimizer", "\n", "self", ".", "total_step", "=", "total_step", "\n", "self", ".", "lr_phases", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "start", ",", "lambda_func", ")", "in", "enumerate", "(", "lr_phases", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "lr_phases", ")", "!=", "0", ":", "\n", "                ", "assert", "self", ".", "lr_phases", "[", "-", "1", "]", "[", "0", "]", "<", "start", "\n", "", "if", "isinstance", "(", "lambda_func", ",", "str", ")", ":", "\n", "                ", "lambda_func", "=", "eval", "(", "lambda_func", ")", "\n", "", "if", "i", "<", "len", "(", "lr_phases", ")", "-", "1", ":", "\n", "                ", "self", ".", "lr_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "int", "(", "lr_phases", "[", "i", "+", "1", "]", "[", "0", "]", "*", "total_step", ")", ",", "lambda_func", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lr_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "total_step", ",", "lambda_func", ")", ")", "\n", "", "", "assert", "self", ".", "lr_phases", "[", "0", "]", "[", "0", "]", "==", "0", "\n", "self", ".", "mom_phases", "=", "[", "]", "\n", "for", "i", ",", "(", "start", ",", "lambda_func", ")", "in", "enumerate", "(", "mom_phases", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "mom_phases", ")", "!=", "0", ":", "\n", "                ", "assert", "self", ".", "mom_phases", "[", "-", "1", "]", "[", "0", "]", "<", "start", "\n", "", "if", "isinstance", "(", "lambda_func", ",", "str", ")", ":", "\n", "                ", "lambda_func", "=", "eval", "(", "lambda_func", ")", "\n", "", "if", "i", "<", "len", "(", "mom_phases", ")", "-", "1", ":", "\n", "                ", "self", ".", "mom_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "int", "(", "mom_phases", "[", "i", "+", "1", "]", "[", "0", "]", "*", "total_step", ")", ",", "lambda_func", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mom_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "total_step", ",", "lambda_func", ")", ")", "\n", "", "", "assert", "self", ".", "mom_phases", "[", "0", "]", "[", "0", "]", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.LRSchedulerStep.step": [[44, 55], ["func", "func", "func", "func"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "start", ",", "end", ",", "func", "in", "self", ".", "lr_phases", ":", "\n", "            ", "if", "step", ">=", "start", "and", "step", "<=", "end", ":", "# add < end", "\n", "                ", "self", ".", "optimizer", ".", "lr", "=", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "", "elif", "step", ">", "end", ":", "\n", "                ", "self", ".", "optimizer", ".", "lr", "=", "func", "(", "(", "end", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "", "", "for", "start", ",", "end", ",", "func", "in", "self", ".", "mom_phases", ":", "\n", "            ", "if", "step", ">=", "start", "and", "step", "<=", "end", ":", "# add < end", "\n", "                ", "self", ".", "optimizer", ".", "mom", "=", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "", "elif", "step", ">", "end", ":", "\n", "                ", "self", ".", "optimizer", ".", "mom", "=", "func", "(", "(", "end", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.OneCycle.__init__": [[65, 82], ["int", "learning_schedules_fastai.LRSchedulerStep.__init__", "functools.partial", "functools.partial", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ",", "total_step", ",", "lr_max", ",", "moms", ",", "div_factor", ",", "\n", "pct_start", ")", ":", "\n", "        ", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "moms", "=", "moms", "\n", "self", ".", "div_factor", "=", "div_factor", "\n", "self", ".", "pct_start", "=", "pct_start", "\n", "a1", "=", "int", "(", "total_step", "*", "self", ".", "pct_start", ")", "\n", "a2", "=", "total_step", "-", "a1", "\n", "low_lr", "=", "self", ".", "lr_max", "/", "self", ".", "div_factor", "\n", "lr_phases", "=", "(", "(", "0", ",", "partial", "(", "annealing_cos", ",", "low_lr", ",", "self", ".", "lr_max", ")", ")", ",", "\n", "(", "self", ".", "pct_start", ",", "\n", "partial", "(", "annealing_cos", ",", "self", ".", "lr_max", ",", "low_lr", "/", "1e4", ")", ")", ")", "\n", "mom_phases", "=", "(", "(", "0", ",", "partial", "(", "annealing_cos", ",", "*", "self", ".", "moms", ")", ")", ",", "\n", "(", "self", ".", "pct_start", ",", "partial", "(", "annealing_cos", ",", "\n", "*", "self", ".", "moms", "[", ":", ":", "-", "1", "]", ")", ")", ")", "\n", "fai_optimizer", ".", "lr", ",", "fai_optimizer", ".", "mom", "=", "low_lr", ",", "self", ".", "moms", "[", "0", "]", "\n", "super", "(", ")", ".", "__init__", "(", "fai_optimizer", ",", "total_step", ",", "lr_phases", ",", "mom_phases", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.CosineWarmupLR.__init__": [[85, 89], ["torch._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "CosineWarmupLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.CosineWarmupLR.get_lr": [[90, 94], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.FakeOptim.__init__": [[97, 100], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr", "=", "0", "\n", "self", ".", "mom", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.optimization.learning_schedules_fastai.annealing_cos": [[57, 62], ["numpy.cos"], "function", ["None"], ["", "", "", "", "def", "annealing_cos", "(", "start", ",", "end", ",", "pct", ")", ":", "\n", "# print(pct, start, end)", "\n", "    ", "\"Cosine anneal from `start` to `end` as pct goes from 0.0 to 1.0.\"", "\n", "cos_out", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "pct", ")", "+", "1", "\n", "return", "end", "+", "(", "start", "-", "end", ")", "/", "2", "*", "cos_out", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pc.parse_config": [[171, 179], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'arg parser'", ")", "\n", "parser", ".", "add_argument", "(", "'--pc'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'specify the config for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--gt_pnt'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'od_val_+frame_id'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pc.main": [[180, 346], ["visualize_pc.parse_config", "numpy.load().item", "print", "visualize_utils.visualize_pts", "range", "visualize_utils.draw_scenes_multi", "mayavi.view", "mayavi.show", "np.load().item.keys", "utils.coords_utils.creat_grid_coords", "print", "dict[].data.cpu().numpy().astype", "numpy.nonzero", "print", "print", "print", "print", "len", "numpy.load", "dict[].data.cpu().numpy().astype", "numpy.logical_and", "print", "keys.remove", "utils.coords_utils.creat_grid_coords", "numpy.nonzero", "print", "print", "print", "print", "numpy.array", "dict[].data.cpu().numpy", "numpy.sum", "numpy.sum", "dict[].data.cpu().numpy().astype", "numpy.sum", "numpy.sum", "dict[].data.cpu().numpy", "dict[].data.cpu", "dict[].data.cpu().numpy", "dict[].data.cpu", "dict[].data.cpu"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pcrc_curve.parse_config", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.visualize_pts", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.creat_grid_coords", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.coords_utils.creat_grid_coords"], ["", "def", "main", "(", ")", ":", "\n", "    ", "voxel_point_key", "=", "None", "\n", "args", "=", "parse_config", "(", ")", "\n", "# if args.pc is not None:", "\n", "dict", "=", "np", ".", "load", "(", "args", ".", "pc", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "# dict = loads(args.pc).item()", "\n", "print", "(", "dict", ".", "keys", "(", ")", ")", "\n", "keys", "=", "[", "]", "\n", "voxel_point_keys", "=", "[", "]", "\n", "# frame_id 006449", "\n", "\n", "# dict_keys(['gt_points', 'fore_gt_center', 'filter_center', 'boxvoxel_center', 'addpnt_view', 'drop_voxel_center','gt_boxes', 'pred_boxes', 'pred_scores', 'pred_labels', 'proboccpoints', 'ocp_center'])", "\n", "\n", "vu", ".", "visualize_pts", "(", "dict", "[", "'gt_points'", "]", ")", "\n", "# keys = [\"gt_points\",'occ_fore_center', 'occ_mirr_center', 'occ_bm_center']", "\n", "# keys = [\"gt_points\",'btc_miss_points', 'btc_self_points', 'btc_other_points']", "\n", "keys", "=", "[", "\"gt_points\"", "]", "\n", "# keys = [\"gt_points\", 'occ_center']", "\n", "# keys = [\"gt_points\", \"general_cls_loss_center\"] # gt_points", "\n", "# keys = [\"gt_points\", \"fore_gt_center\"] # gt_points", "\n", "# keys = [\"gt_points\", \"bmvoxel_center\"] # gt_points", "\n", "\n", "voxel_point_keys", "=", "[", "\"occ_pos_center\"", "]", "# gt_points", "\n", "# voxel_point_keys = [\"general_cls_loss_center\", \"occ_pos_center\"] # gt_points", "\n", "# voxel_point_keys = [\"addpnt_view\"] # gt_points", "\n", "\n", "# keys = [\"gt_points\", 'btc_other_points']", "\n", "# voxel_point_keys = ['btc_other_voxelpoints']", "\n", "\n", "# keys = [\"gt_points\", 'btc_miss_points']", "\n", "# voxel_point_keys = ['btc_miss_voxelpoints']", "\n", "\n", "# keys = [\"gt_points\", 'btc_miss_points', 'btc_self_points', 'btc_other_points']", "\n", "# voxel_point_keys = ['btc_self_voxelpoints']", "\n", "\n", "# keys = [\"gt_points\", \"rois_global_grid_points\", \"rois_conv_grid_points\"] # gt_points", "\n", "# keys = [\"gt_points\", \"rois_raw_rot_points_0\", \"rois_raw_points_0\", \"rois_global_grid_points\"] # gt_points", "\n", "\n", "if", "\"occ_map\"", "in", "keys", ":", "\n", "        ", "voxel_centers", "=", "coords_utils", ".", "creat_grid_coords", "(", "[", "0", ",", "-", "39.68", ",", "-", "1.5", ",", "69.12", ",", "39.68", ",", "1", "]", ",", "[", "0.16", ",", "0.16", ",", "0.25", "]", ")", "\n", "print", "(", "\"voxel_centers\"", ",", "voxel_centers", ".", "shape", ")", "\n", "occ_map", "=", "dict", "[", "\"occ_map\"", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "if", "\"vicinity_map\"", "in", "keys", ":", "\n", "            ", "vicinity_map", "=", "dict", "[", "\"vicinity_map\"", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "occ_map", "=", "np", ".", "logical_and", "(", "occ_map", ",", "vicinity_map", ">", "0.5", ")", "\n", "print", "(", "np", ".", "sum", "(", "occ_map", ">", "-", "5.5", ")", ",", "np", ".", "sum", "(", "occ_map", ">", "0.5", ")", ")", "\n", "\n", "keys", ".", "remove", "(", "\"vicinity_map\"", ")", "\n", "", "x", ",", "y", ",", "z", "=", "np", ".", "nonzero", "(", "occ_map", ">", "0.5", ")", "\n", "print", "(", "x", ".", "shape", ",", "y", ".", "shape", ",", "z", ".", "shape", ")", "\n", "print", "(", "\"occ_map\"", ",", "occ_map", ".", "shape", ",", "occ_map", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "# dict[\"vis_map\"] = voxel_centers.reshape(-1,3)", "\n", "dict", "[", "\"occ_map\"", "]", "=", "voxel_centers", "[", "x", ",", "y", ",", "z", ",", ":", "]", "\n", "", "elif", "\"vicinity_map\"", "in", "keys", ":", "\n", "        ", "voxel_centers", "=", "coords_utils", ".", "creat_grid_coords", "(", "[", "0", ",", "-", "39.68", ",", "-", "1.4", ",", "69.12", ",", "39.68", ",", "1", "]", ",", "[", "0.16", ",", "0.16", ",", "0.16", "]", ")", "\n", "vicinity_map", "=", "dict", "[", "\"vicinity_map\"", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int", ")", ">", "0.5", "\n", "x", ",", "y", ",", "z", "=", "np", ".", "nonzero", "(", "vicinity_map", ">", "0.5", ")", "\n", "print", "(", "x", ".", "shape", ",", "y", ".", "shape", ",", "z", ".", "shape", ")", "\n", "print", "(", "\"vicinity_map\"", ",", "vicinity_map", ".", "shape", ",", "vicinity_map", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "print", "(", "np", ".", "sum", "(", "vicinity_map", ">", "-", "5.5", ")", ",", "np", ".", "sum", "(", "vicinity_map", ">", "0.5", ")", ")", "\n", "dict", "[", "\"vicinity_map\"", "]", "=", "voxel_centers", "[", "x", ",", "y", ",", "z", ",", ":", "]", "\n", "\n", "", "points_lst", "=", "[", "dict", "[", "key", "]", "for", "key", "in", "keys", "]", "\n", "colors_lst", "=", "[", "clrs", "[", "key", "]", "for", "key", "in", "keys", "]", "\n", "scales_lst", "=", "[", "scales", "[", "key", "]", "for", "key", "in", "keys", "]", "\n", "mode_lst", "=", "[", "modes", "[", "key", "]", "for", "key", "in", "keys", "]", "\n", "\n", "voxelpnts_lst", "=", "[", "dict", "[", "key", "]", "for", "key", "in", "voxel_point_keys", "]", "\n", "voxelpnts_colors_lst", "=", "[", "clrs", "[", "key", "]", "for", "key", "in", "voxel_point_keys", "]", "\n", "voxelpnts_op_lst", "=", "[", "opacities", "[", "key", "]", "for", "key", "in", "voxel_point_keys", "]", "\n", "\n", "aug_boxes", "=", "None", "\n", "gt_boxes", "=", "dict", "[", "\"gt_boxes\"", "]", "if", "\"gt_boxes\"", "in", "dict", "else", "None", "\n", "if", "\"frame_id\"", "in", "dict", ":", "\n", "        ", "print", "(", "\"frame_id\"", ",", "dict", "[", "\"frame_id\"", "]", ")", "\n", "", "if", "\"augment_box_num\"", "in", "dict", "and", "gt_boxes", "is", "not", "None", ":", "\n", "        ", "if", "dict", "[", "'augment_box_num'", "]", "[", "0", "]", "!=", "0", ":", "\n", "            ", "aug_boxes", "=", "gt_boxes", "[", "-", "dict", "[", "'augment_box_num'", "]", "[", "0", "]", ":", ",", "...", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", ":", "-", "dict", "[", "'augment_box_num'", "]", "[", "0", "]", ",", "...", "]", "\n", "print", "(", "\"aug_boxes \"", ",", "aug_boxes", ".", "shape", ")", "\n", "", "print", "(", "\"gt_boxes \"", ",", "gt_boxes", ".", "shape", ")", "\n", "#                 'pred_boxes': final_boxes,", "\n", "#                 'pred_scores': final_scores,", "\n", "#                 'pred_labels': final_labels", "\n", "", "ref_boxes", "=", "dict", "[", "\"pred_boxes\"", "]", "if", "\"pred_boxes\"", "in", "dict", "else", "None", "\n", "ref_scores", "=", "dict", "[", "\"pred_scores\"", "]", "if", "\"pred_scores\"", "in", "dict", "else", "None", "\n", "ref_labels", "=", "dict", "[", "\"pred_labels\"", "]", "if", "\"pred_labels\"", "in", "dict", "else", "None", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "        ", "if", "keys", "[", "i", "]", "==", "\"bm_points\"", ":", "\n", "            ", "points_lst", "[", "i", "]", "+=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "3.0", "]", ")", "\n", "\n", "# ref_boxes = dict[\"afternms_pred_boxes\"] if \"afternms_pred_boxes\" in dict else None", "\n", "# ref_scores = dict[\"afternms_pred_scores\"] if \"afternms_pred_scores\" in dict else None", "\n", "# ref_labels = dict[\"afternms_pred_labels\"] if \"afternms_pred_labels\" in dict else None", "\n", "\n", "# ref_boxes = dict[\"prenms_pred_boxes\"] if \"prenms_pred_boxes\" in dict else None", "\n", "# ref_scores = dict[\"prenms_pred_scores\"] if \"prenms_pred_scores\" in dict else None", "\n", "# ref_labels = dict[\"prenms_pred_labels\"] if \"prenms_pred_labels\" in dict else None", "\n", "#", "\n", "# ref_boxes = dict[\"rois\"] if \"rois\" in dict else None", "\n", "# ref_scores = dict[\"roi_scores\"] if \"roi_scores\" in dict else None", "\n", "# ref_labels = dict[\"roi_labels\"] if \"roi_labels\" in dict else None", "\n", "\n", "# ref_boxes = dict[\"anchors\"].view(-1,7).cpu().numpy() if \"anchors\" in dict else None", "\n", "# ref_scores = dict[\"roi_scores\"] if \"roi_scores\" in dict else None", "\n", "# ref_labels = np.ones_like(ref_boxes[...,0], dtype=np.int)", "\n", "", "", "ref_ious", "=", "dict", "[", "\"iou\"", "]", "if", "\"iou\"", "in", "dict", "else", "None", "\n", "vu", ".", "draw_scenes_multi", "(", "points_lst", ",", "colors_lst", ",", "scales_lst", ",", "mode_lst", ",", "gt_boxes", "=", "None", ",", "aug_boxes", "=", "aug_boxes", ",", "ref_boxes", "=", "ref_boxes", ",", "ref_scores", "=", "ref_scores", ",", "ref_labels", "=", "ref_labels", ",", "ref_ious", "=", "ref_ious", ",", "voxelpnts_lst", "=", "voxelpnts_lst", ",", "voxelpnts_colors_lst", "=", "voxelpnts_colors_lst", ",", "voxelpnts_op_lst", "=", "voxelpnts_op_lst", ",", "axis", "=", "False", ")", "\n", "\n", "mlab", ".", "view", "(", "azimuth", "=", "159", ",", "elevation", "=", "75.0", ",", "distance", "=", "104.0", ",", "roll", "=", "93.5", ")", "\n", "# points_lst[1] = points_lst[1][-27:,:]", "\n", "# points_lst[2] = points_lst[2][-27*3*4*6:,:]", "\n", "# points_lst[3] = points_lst[3][-1:,:]", "\n", "# vu.draw_scenes_multi(points_lst, colors_lst, scales_lst, mode_lst, gt_boxes=gt_boxes, aug_boxes=aug_boxes, ref_boxes=dict[\"rois\"][0,-1:,...], ref_scores=None, ref_labels=None, ref_ious=None)", "\n", "# mlab.show()", "\n", "#############################################################", "\n", "# if args.gt_pnt is not None:", "\n", "#     component = args.gt_pnt.split(\"_\")", "\n", "#     set_len = len(component[0]) + len(component[1]) + 1", "\n", "#     dataset = args.gt_pnt[:set_len]", "\n", "#     frame_id = args.gt_pnt[set_len+1:]", "\n", "#     #", "\n", "#     # points, boxes = get_single_frame_tfrcd(dataset, frame_id)", "\n", "#     # bbox = torch.tensor([box['box_3d'] for box in boxes[\"boxes\"]])", "\n", "#     # bbox_tp = torch.tensor([box['obj_type'] for box in boxes[\"boxes\"]])", "\n", "#     # bbox_num_point = torch.tensor([box['num_pnts_inbox'] for box in boxes[\"boxes\"]])", "\n", "#     # print(len(boxes[\"boxes\"]), boxes[\"top_lidar_points_num\"])", "\n", "#     # print(points.shape)", "\n", "#     # key = \"raw_points\"", "\n", "#     # points_lst = [points]", "\n", "#     # colors_lst = [clrs[key]]", "\n", "#     # scales_lst = [scales[key]]", "\n", "#     # mode_lst = [modes[key]]", "\n", "#     # vu.draw_scenes_multi(points_lst, colors_lst, scales_lst, mode_lst, gt_boxes=None, aug_boxes=None,", "\n", "#     #                      ref_boxes=bbox, ref_scores=bbox_num_point, ref_labels=bbox_tp)", "\n", "#     # mlab.show()", "\n", "#", "\n", "#", "\n", "#", "\n", "#", "\n", "#     lidar_file = os.path.join(\"/home/xharlie/dev/openbtcdet/data/waymo/\",dataset, \"points\", frame_id+\".bin\")", "\n", "#     box_file = os.path.join(\"/home/xharlie/dev/openbtcdet/data/waymo/\",dataset, \"boxes\", frame_id+\".pkl\")", "\n", "#     waymo_infos_file = os.path.join(\"/home/xharlie/dev/openbtcdet/data/waymo/\", \"waymo_infos_{}.pkl\".format(dataset))", "\n", "#     info_file = os.path.join(\"/home/xharlie/dev/openbtcdet/data/waymo/\",dataset, \"frames\", frame_id+\".pkl\")", "\n", "#     points = np.fromfile(str(lidar_file), dtype=np.float32).reshape(-1,5)", "\n", "#     valid_boxes, invalid_boxes, num_valid, real_num_valid = get_boxes_from_waymoinfosfile(waymo_infos_file, frame_id)", "\n", "#     info = np.load(info_file, allow_pickle=True)", "\n", "#     # bbox = torch.tensor([box['box_3d'] for box in boxes[\"boxes\"]])", "\n", "#     # bbox_tp = torch.tensor([box['obj_type'] for box in boxes[\"boxes\"]])", "\n", "#     # bbox_num_point = torch.tensor([box['num_pnts_inbox'] for box in boxes[\"boxes\"]])", "\n", "#     bbox = torch.tensor(valid_boxes[\"box_3d\"])", "\n", "#     bbox_tp = torch.tensor(valid_boxes[\"obj_type\"])", "\n", "#     bbox_num_point = torch.tensor(valid_boxes[\"num_pnts_inbox\"])", "\n", "#     bbox_real_num_point = torch.tensor(valid_boxes[\"real_num_pnts_inbox\"])", "\n", "#", "\n", "#     print(points.shape)", "\n", "#     print(info)", "\n", "#     key = \"raw_points\"", "\n", "#     points_lst = [points]", "\n", "#     colors_lst = [clrs[key]]", "\n", "#     scales_lst = [scales[key]]", "\n", "#     mode_lst = [modes[key]]", "\n", "\n", "# vu.draw_scenes_multi(points_lst, colors_lst, scales_lst, mode_lst, gt_boxes=invalid_boxes[\"box_3d\"], aug_boxes=None, ref_boxes=bbox, ref_scores=bbox_real_num_point, ref_labels=bbox_tp)", "\n", "mlab", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pc.get_boxes_from_waymoinfosfile": [[349, 376], ["open", "pickle.load"], "function", ["None"], ["", "def", "get_boxes_from_waymoinfosfile", "(", "src_file", ",", "frame_id", ")", ":", "\n", "    ", "with", "open", "(", "src_file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "info", "in", "infos", ":", "\n", "        ", "sample_idx", ",", "top_lidar_points_num", ",", "is_od", "=", "info", "[", "'point_cloud'", "]", "[", "'lidar_idx'", "]", ",", "info", "[", "'point_cloud'", "]", "[", "\n", "'top_lidar_points_num'", "]", ",", "info", "[", "'point_cloud'", "]", "[", "'is_od'", "]", "\n", "if", "sample_idx", "!=", "frame_id", ":", "\n", "            ", "continue", "\n", "", "valid_boxes", "=", "{", "\"box_3d\"", ":", "[", "]", ",", "\"obj_type\"", ":", "[", "]", "}", "\n", "invalid_boxes", "=", "{", "\"boxes\"", ":", "[", "]", "}", "\n", "if", "'annos'", "in", "info", ":", "\n", "            ", "annos", "=", "info", "[", "'annos'", "]", "\n", "num_valid", "=", "annos", "[", "'num_valid'", "]", "\n", "real_num_valid", "=", "annos", "[", "'real_num_valid'", "]", "\n", "if", "num_valid", ">", "0", ":", "\n", "                ", "if", "real_num_valid", ">", "0", ":", "\n", "                    ", "valid_boxes", "[", "\"box_3d\"", "]", "=", "annos", "[", "'gt_boxes_lidar'", "]", "[", ":", "real_num_valid", ",", "...", "]", "\n", "valid_boxes", "[", "\"obj_type\"", "]", "=", "annos", "[", "'type'", "]", "[", ":", "real_num_valid", ",", "...", "]", "\n", "valid_boxes", "[", "\"num_pnts_inbox\"", "]", "=", "annos", "[", "'num_pnts_inbox'", "]", "[", ":", "real_num_valid", ",", "...", "]", "\n", "valid_boxes", "[", "\"real_num_pnts_inbox\"", "]", "=", "annos", "[", "'real_num_pnts_inbox'", "]", "[", ":", "real_num_valid", ",", "...", "]", "\n", "\n", "", "if", "num_valid", "-", "real_num_valid", ">", "0", ":", "\n", "                    ", "invalid_boxes", "[", "\"box_3d\"", "]", "=", "annos", "[", "'gt_boxes_lidar'", "]", "[", "real_num_valid", ":", ",", "...", "]", "\n", "invalid_boxes", "[", "\"obj_type\"", "]", "=", "annos", "[", "'type'", "]", "[", "real_num_valid", ":", ",", "...", "]", "\n", "invalid_boxes", "[", "\"num_pnts_inbox\"", "]", "=", "annos", "[", "'num_pnts_inbox'", "]", "[", "real_num_valid", ":", ",", "...", "]", "\n", "invalid_boxes", "[", "\"real_num_pnts_inbox\"", "]", "=", "annos", "[", "'real_num_pnts_inbox'", "]", "[", "real_num_valid", ":", ",", "...", "]", "\n", "", "", "return", "valid_boxes", ",", "invalid_boxes", ",", "num_valid", ",", "real_num_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pc.get_single_frame_tfrcd": [[377, 394], ["os.path.join", "int", "print", "tf.data.TFRecordDataset", "frame_id.split", "len", "open_dataset.Frame", "open_dataset.Frame.ParseFromString", "visualize_pc.trans_single_frame_custom", "print", "bytearray", "data.numpy"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pc.trans_single_frame_custom"], ["", "", "", "def", "get_single_frame_tfrcd", "(", "dataset", ",", "frame_id", ")", ":", "\n", "    ", "time_id", "=", "frame_id", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", "time_id_len", "=", "len", "(", "time_id", ")", "+", "1", "\n", "src_path", "=", "os", ".", "path", ".", "join", "(", "\"/hdd_extra1/datasets/waymo/\"", ",", "dataset", ",", "\"segment-\"", "+", "frame_id", "[", ":", "-", "time_id_len", "]", "+", "\".tfrecord\"", ")", "\n", "time_id", "=", "int", "(", "time_id", ")", "\n", "print", "(", "\"starting new tfrcord {}\"", ".", "format", "(", "src_path", ")", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "src_path", ",", "compression_type", "=", "''", ")", "\n", "indx", "=", "0", "\n", "for", "data", "in", "dataset", ":", "\n", "        ", "if", "indx", "==", "time_id", ":", "\n", "            ", "frame", "=", "open_dataset", ".", "Frame", "(", ")", "\n", "frame", ".", "ParseFromString", "(", "bytearray", "(", "data", ".", "numpy", "(", ")", ")", ")", "\n", "points", ",", "boxes", "=", "trans_single_frame_custom", "(", "frame", ",", "pose_name", "=", "None", ")", "#", "\n", "return", "points", ",", "boxes", "\n", "", "else", ":", "\n", "            ", "indx", "+=", "1", "\n", "print", "(", "\"indx\"", ",", "indx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pc.trans_single_frame_custom": [[397, 423], ["frame_utils.parse_range_image_and_camera_projection", "frame_utils.convert_range_image_to_point_cloud", "numpy.concatenate", "parse_box_labels", "print"], "function", ["None"], ["", "", "", "def", "trans_single_frame_custom", "(", "frame", ",", "pose_name", "=", "None", ")", ":", "\n", "# if pose_name is not None:", "\n", "#     range_images, range_image_poses = parse_range_image_one_return_one_pose(frame, pose_name)", "\n", "# else:", "\n", "#     range_images, range_image_poses = parse_range_image_one_return_all_pose(frame)", "\n", "#", "\n", "# points, pose_names, top_index = convert_range_image_to_point_cloud(", "\n", "#     frame,", "\n", "#     range_images,", "\n", "#     range_image_poses)", "\n", "# points[0], points[top_index] = points[top_index], points[0]", "\n", "# pose_names[0], pose_names[top_index] = pose_names[top_index], pose_names[0]", "\n", "# top_lidar_points_num = points[0].shape[0]", "\n", "# points_all = np.concatenate(points, axis=0)", "\n", "    ", "(", "range_images", ",", "camera_projections", ",", "range_image_top_pose", ")", "=", "frame_utils", ".", "parse_range_image_and_camera_projection", "(", "frame", ")", "\n", "points", ",", "_", "=", "frame_utils", ".", "convert_range_image_to_point_cloud", "(", "\n", "frame", ",", "\n", "range_images", ",", "\n", "camera_projections", ",", "\n", "range_image_top_pose", ",", "0", ")", "\n", "points", "=", "np", ".", "concatenate", "(", "points", ",", "axis", "=", "0", ")", "\n", "top_lidar_points_num", "=", "points", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "box_point_info", "=", "parse_box_labels", "(", "frame", ",", "top_lidar_points_num", ")", "\n", "print", "(", "\"tf top_lidar_points_num\"", ",", "top_lidar_points_num", ")", "\n", "return", "points", ",", "box_point_info", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.transform_np.parse_config": [[16, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'arg parser'", ")", "\n", "parser", ".", "add_argument", "(", "'--dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'specify the config for training'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.transform_np.main": [[25, 37], ["transform_np.parse_config", "glob.glob", "numpy.load().item", "np.load().item.items", "numpy.save", "print", "numpy.load", "isinstance", "val.cpu().numpy.cpu().numpy", "val.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pcrc_curve.parse_config"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_config", "(", ")", "\n", "files", "=", "glob", ".", "glob", "(", "args", ".", "dir", "+", "\"/*npy\"", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "new_dict", "=", "{", "}", "\n", "dict", "=", "np", ".", "load", "(", "file", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "for", "key", ",", "val", "in", "dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "val", "=", "val", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "new_dict", "[", "key", "]", "=", "val", "\n", "print", "(", "val", ")", "\n", "", "np", ".", "save", "(", "file", ",", "new_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pcrc_curve.parse_config": [[36, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'arg parser'", ")", "\n", "parser", ".", "add_argument", "(", "'--dir1'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'specify the config for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dir2'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'specify the config for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--pad'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'specify the config for training'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pcrc_curve.main": [[47, 96], ["visualize_pcrc_curve.parse_config", "os.path.join", "numpy.load", "print", "np.load.items", "os.path.join", "numpy.load", "np.load.keys", "value.items", "content.items", "matplotlib.pyplot.figure", "plt.figure.suptitle", "plt.figure.add_subplot", "plt.figure.subplots_adjust", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.plot", "fig.add_subplot.legend", "matplotlib.pyplot.savefig", "numpy.concatenate", "fig.add_subplot.plot", "numpy.concatenate", "numpy.ones", "numpy.ones", "len", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_pcrc_curve.parse_config"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_config", "(", ")", "\n", "detailfilepath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dir1", ",", "\"pc_rc.pkl\"", ")", "\n", "dict", "=", "np", ".", "load", "(", "detailfilepath", ",", "allow_pickle", "=", "True", ")", "\n", "base_dict", "=", "None", "\n", "if", "args", ".", "dir2", "is", "not", "None", ":", "\n", "        ", "base_filepath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dir2", ",", "\"pc_rc.pkl\"", ")", "\n", "base_dict", "=", "np", ".", "load", "(", "base_filepath", ",", "allow_pickle", "=", "True", ")", "\n", "", "print", "(", "dict", ".", "keys", "(", ")", ")", "\n", "for", "metric", ",", "value", "in", "dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "curcls", ",", "content", "in", "value", ".", "items", "(", ")", ":", "\n", "            ", "for", "diff", ",", "mval", "in", "content", ".", "items", "(", ")", ":", "\n", "                ", "for", "num", "in", "[", "11", ",", "40", "]", ":", "\n", "                    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "# print(\"R11_rc\",mval[\"R11_rc\"])", "\n", "# print(\"R11_pc\", mval[\"R11_pc\"])", "\n", "filename", "=", "\"{}_{}_{}_R{}\"", ".", "format", "(", "curcls", ",", "metric", ",", "diff", ",", "num", ")", "\n", "fig", ".", "suptitle", "(", "filename", ",", "fontsize", "=", "14", ",", "fontweight", "=", "'bold'", ")", "\n", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "fig", ".", "subplots_adjust", "(", "top", "=", "0.90", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "'Recall'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision'", ")", "\n", "i", "=", "(", "mval", "[", "\"R{}_rc\"", ".", "format", "(", "num", ")", "]", "==", "0", ")", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "if", "args", ".", "pad", ">", "0", ":", "\n", "                        ", "rc", "=", "np", ".", "concatenate", "(", "[", "mval", "[", "\"R{}_rc\"", ".", "format", "(", "num", ")", "]", "[", ":", "i", "]", ",", "np", ".", "ones", "(", "len", "(", "mval", "[", "\"R{}_rc\"", ".", "format", "(", "num", ")", "]", ")", "-", "i", ")", "]", ")", "\n", "pc", "=", "mval", "[", "\"R{}_pc\"", ".", "format", "(", "num", ")", "]", "\n", "", "else", ":", "\n", "                        ", "rc", "=", "mval", "[", "\"R{}_rc\"", ".", "format", "(", "num", ")", "]", "[", ":", "i", "]", "\n", "pc", "=", "mval", "[", "\"R{}_pc\"", ".", "format", "(", "num", ")", "]", "[", ":", "i", "]", "\n", "# i = len(mval[\"R{}_rc\".format(num)])", "\n", "", "ax", ".", "plot", "(", "rc", ",", "pc", ",", "marker", "=", "'.'", ",", "label", "=", "'spg+pp R{}'", ".", "format", "(", "num", ")", ")", "\n", "if", "base_dict", "is", "not", "None", ":", "\n", "                        ", "bval", "=", "base_dict", "[", "metric", "]", "[", "curcls", "]", "[", "diff", "]", "\n", "i", "=", "(", "bval", "[", "\"R{}_rc\"", ".", "format", "(", "num", ")", "]", "==", "0", ")", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "if", "args", ".", "pad", ">", "0", ":", "\n", "                            ", "rc", "=", "np", ".", "concatenate", "(", "\n", "[", "bval", "[", "\"R{}_rc\"", ".", "format", "(", "num", ")", "]", "[", ":", "i", "]", ",", "np", ".", "ones", "(", "len", "(", "bval", "[", "\"R{}_rc\"", ".", "format", "(", "num", ")", "]", ")", "-", "i", ")", "]", ")", "\n", "pc", "=", "bval", "[", "\"R{}_pc\"", ".", "format", "(", "num", ")", "]", "\n", "", "else", ":", "\n", "                            ", "rc", "=", "bval", "[", "\"R{}_rc\"", ".", "format", "(", "num", ")", "]", "[", ":", "i", "]", "\n", "pc", "=", "bval", "[", "\"R{}_pc\"", ".", "format", "(", "num", ")", "]", "[", ":", "i", "]", "\n", "\n", "# i = len(mval[\"R{}_rc\".format(num)])", "\n", "", "ax", ".", "plot", "(", "rc", ",", "pc", ",", "marker", "=", "'.'", ",", "label", "=", "'pp R{}'", ".", "format", "(", "num", ")", ")", "\n", "\n", "", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "'{}.png'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch": [[13, 17], ["isinstance", "torch.from_numpy().float", "torch.from_numpy"], "function", ["None"], ["def", "check_numpy_to_torch", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", ",", "True", "\n", "", "return", "x", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z": [[19, 42], ["visualize_utils.check_numpy_to_torch", "visualize_utils.check_numpy_to_torch", "torch.cos", "torch.sin", "angle.new_zeros", "angle.new_ones", "torch.stack().view().float", "torch.matmul", "torch.cat", "torch.cat.numpy", "torch.stack().view", "torch.stack"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch"], ["", "def", "rotate_points_along_z", "(", "points", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: (B, N, 3 + C)\n        angle: (B), angle along z-axis, angle increases x ==> y\n    Returns:\n\n    \"\"\"", "\n", "points", ",", "is_numpy", "=", "check_numpy_to_torch", "(", "points", ")", "\n", "angle", ",", "_", "=", "check_numpy_to_torch", "(", "angle", ")", "\n", "\n", "cosa", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sina", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "zeros", "=", "angle", ".", "new_zeros", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "ones", "=", "angle", ".", "new_ones", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "rot_matrix", "=", "torch", ".", "stack", "(", "(", "\n", "cosa", ",", "sina", ",", "zeros", ",", "\n", "-", "sina", ",", "cosa", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "\n", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", ".", "float", "(", ")", "\n", "points_rot", "=", "torch", ".", "matmul", "(", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ",", "rot_matrix", ")", "\n", "points_rot", "=", "torch", ".", "cat", "(", "(", "points_rot", ",", "points", "[", ":", ",", ":", ",", "3", ":", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "points_rot", ".", "numpy", "(", ")", "if", "is_numpy", "else", "points_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d": [[44, 70], ["visualize_utils.check_numpy_to_torch", "rotate_points_along_z().view", "boxes3d.new_tensor", "boxes3d[].repeat", "rotate_points_along_z().view.numpy", "visualize_utils.rotate_points_along_z", "rotate_points_along_z().view.view"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.check_numpy_to_torch", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.rotate_points_along_z"], ["", "def", "boxes_to_corners_3d", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n        7 -------- 4\n       /|         /|\n      6 -------- 5 .\n      | |        | |\n      . 3 -------- 0\n      |/         |/\n      2 -------- 1\n    Args:\n        boxes3d:  (N, 7) [x, y, z, dx, dy, dz, heading], (x, y, z) is the box center\n\n    Returns:\n    \"\"\"", "\n", "boxes3d", ",", "is_numpy", "=", "check_numpy_to_torch", "(", "boxes3d", ")", "\n", "\n", "template", "=", "boxes3d", ".", "new_tensor", "(", "(", "\n", "[", "1", ",", "1", ",", "-", "1", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ",", "\n", ")", ")", "/", "2", "\n", "\n", "corners3d", "=", "boxes3d", "[", ":", ",", "None", ",", "3", ":", "6", "]", ".", "repeat", "(", "1", ",", "8", ",", "1", ")", "*", "template", "[", "None", ",", ":", ",", ":", "]", "\n", "corners3d", "=", "rotate_points_along_z", "(", "corners3d", ".", "view", "(", "-", "1", ",", "8", ",", "3", ")", ",", "boxes3d", "[", ":", ",", "6", "]", ")", ".", "view", "(", "-", "1", ",", "8", ",", "3", ")", "\n", "corners3d", "+=", "boxes3d", "[", ":", ",", "None", ",", "0", ":", "3", "]", "\n", "\n", "return", "corners3d", ".", "numpy", "(", ")", "if", "is_numpy", "else", "corners3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.visualize_pts": [[72, 93], ["isinstance", "pts.cpu().numpy.cpu().numpy", "mayavi.figure", "mayavi.points3d", "mayavi.points3d", "mayavi.points3d", "mayavi.plot3d", "mayavi.plot3d", "mayavi.plot3d", "pts.cpu().numpy.cpu"], "function", ["None"], ["", "def", "visualize_pts", "(", "pts", ",", "fig", "=", "None", ",", "bgcolor", "=", "(", "0", ",", "0", ",", "0", ")", ",", "fgcolor", "=", "(", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "show_intensity", "=", "False", ",", "size", "=", "(", "1200", ",", "1200", ")", ",", "draw_origin", "=", "False", ",", "scale", "=", "1.0", ",", "mode", "=", "\"sphere\"", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "pts", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pts", "=", "pts", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "fig", "is", "None", ":", "\n", "        ", "fig", "=", "mlab", ".", "figure", "(", "figure", "=", "None", ",", "bgcolor", "=", "bgcolor", ",", "fgcolor", "=", "None", ",", "engine", "=", "None", ",", "size", "=", "size", ")", "\n", "\n", "", "if", "show_intensity", ":", "\n", "        ", "G", "=", "mlab", ".", "points3d", "(", "pts", "[", ":", ",", "0", "]", ",", "pts", "[", ":", ",", "1", "]", ",", "pts", "[", ":", ",", "2", "]", ",", "pts", "[", ":", ",", "3", "]", ",", "mode", "=", "mode", ",", "\n", "colormap", "=", "'gnuplot'", ",", "scale_factor", "=", "scale", ",", "figure", "=", "fig", ")", "\n", "", "else", ":", "\n", "        ", "G", "=", "mlab", ".", "points3d", "(", "pts", "[", ":", ",", "0", "]", ",", "pts", "[", ":", ",", "1", "]", ",", "pts", "[", ":", ",", "2", "]", ",", "mode", "=", "'sphere'", ",", "color", "=", "fgcolor", ",", "\n", "colormap", "=", "'gnuplot'", ",", "scale_factor", "=", "scale", ",", "figure", "=", "fig", ")", "\n", "\n", "", "if", "draw_origin", ":", "\n", "        ", "mlab", ".", "points3d", "(", "0", ",", "0", ",", "0", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ",", "mode", "=", "'cube'", ",", "scale_factor", "=", "0.2", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "3", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "(", "0", ",", "0", ",", "1", ")", ",", "tube_radius", "=", "0.1", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "3", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ",", "tube_radius", "=", "0.1", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "3", "]", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ",", "tube_radius", "=", "0.1", ")", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_sphere_pts": [[95, 125], ["isinstance", "mayavi.points3d", "mayavi.plot3d", "mayavi.plot3d", "mayavi.plot3d", "isinstance", "pts.cpu().numpy.cpu().numpy", "mayavi.figure", "isinstance", "numpy.zeros", "mayavi.points3d", "mayavi.points3d", "numpy.arange", "pts.cpu().numpy.cpu", "pts.cpu().numpy.__len__", "np.zeros.__len__"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__"], ["", "def", "draw_sphere_pts", "(", "pts", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ",", "fig", "=", "None", ",", "bgcolor", "=", "(", "0", ",", "0", ",", "0", ")", ",", "scale_factor", "=", "0.2", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "pts", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pts", "=", "pts", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "fig", "is", "None", ":", "\n", "        ", "fig", "=", "mlab", ".", "figure", "(", "figure", "=", "None", ",", "bgcolor", "=", "bgcolor", ",", "fgcolor", "=", "None", ",", "engine", "=", "None", ",", "size", "=", "(", "600", ",", "600", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "color", ",", "np", ".", "ndarray", ")", "and", "color", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "color", "=", "color", "[", "0", "]", "\n", "color", "=", "(", "color", "[", "0", "]", "/", "255.0", ",", "color", "[", "1", "]", "/", "255.0", ",", "color", "[", "2", "]", "/", "255.0", ")", "\n", "\n", "", "if", "isinstance", "(", "color", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pts_color", "=", "np", ".", "zeros", "(", "(", "pts", ".", "__len__", "(", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "pts_color", "[", ":", ",", "0", ":", "3", "]", "=", "color", "\n", "pts_color", "[", ":", ",", "3", "]", "=", "255", "\n", "G", "=", "mlab", ".", "points3d", "(", "pts", "[", ":", ",", "0", "]", ",", "pts", "[", ":", ",", "1", "]", ",", "pts", "[", ":", ",", "2", "]", ",", "np", ".", "arange", "(", "0", ",", "pts_color", ".", "__len__", "(", ")", ")", ",", "mode", "=", "'sphere'", ",", "\n", "scale_factor", "=", "scale_factor", ",", "figure", "=", "fig", ")", "\n", "G", ".", "glyph", ".", "color_mode", "=", "'color_by_scalar'", "\n", "G", ".", "glyph", ".", "scale_mode", "=", "'scale_by_vector'", "\n", "G", ".", "module_manager", ".", "scalar_lut_manager", ".", "lut", ".", "table", "=", "pts_color", "\n", "", "else", ":", "\n", "        ", "mlab", ".", "points3d", "(", "pts", "[", ":", ",", "0", "]", ",", "pts", "[", ":", ",", "1", "]", ",", "pts", "[", ":", ",", "2", "]", ",", "mode", "=", "'sphere'", ",", "color", "=", "color", ",", "\n", "colormap", "=", "'gnuplot'", ",", "scale_factor", "=", "scale_factor", ",", "figure", "=", "fig", ")", "\n", "\n", "", "mlab", ".", "points3d", "(", "0", ",", "0", ",", "0", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ",", "mode", "=", "'cube'", ",", "scale_factor", "=", "0.2", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "3", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "(", "0", ",", "0", ",", "1", ")", ",", "line_width", "=", "3", ",", "tube_radius", "=", "None", ",", "figure", "=", "fig", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "3", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ",", "line_width", "=", "3", ",", "tube_radius", "=", "None", ",", "figure", "=", "fig", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "3", "]", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ",", "line_width", "=", "3", ",", "tube_radius", "=", "None", ",", "figure", "=", "fig", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_grid": [[127, 133], ["mayavi.plot3d", "mayavi.plot3d", "mayavi.plot3d", "mayavi.plot3d"], "function", ["None"], ["", "def", "draw_grid", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "fig", ",", "tube_radius", "=", "None", ",", "color", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ":", "\n", "    ", "mlab", ".", "plot3d", "(", "[", "x1", ",", "x1", "]", ",", "[", "y1", ",", "y2", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "line_width", "=", "1", ",", "figure", "=", "fig", ")", "\n", "mlab", ".", "plot3d", "(", "[", "x2", ",", "x2", "]", ",", "[", "y1", ",", "y2", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "line_width", "=", "1", ",", "figure", "=", "fig", ")", "\n", "mlab", ".", "plot3d", "(", "[", "x1", ",", "x2", "]", ",", "[", "y1", ",", "y1", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "line_width", "=", "1", ",", "figure", "=", "fig", ")", "\n", "mlab", ".", "plot3d", "(", "[", "x1", ",", "x2", "]", ",", "[", "y2", ",", "y2", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "line_width", "=", "1", ",", "figure", "=", "fig", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_multi_grid_range": [[135, 141], ["range", "range", "visualize_utils.draw_grid"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_grid"], ["", "def", "draw_multi_grid_range", "(", "fig", ",", "grid_size", "=", "20", ",", "bv_range", "=", "(", "-", "60", ",", "-", "60", ",", "60", ",", "60", ")", ")", ":", "\n", "    ", "for", "x", "in", "range", "(", "bv_range", "[", "0", "]", ",", "bv_range", "[", "2", "]", ",", "grid_size", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "bv_range", "[", "1", "]", ",", "bv_range", "[", "3", "]", ",", "grid_size", ")", ":", "\n", "            ", "fig", "=", "draw_grid", "(", "x", ",", "y", ",", "x", "+", "grid_size", ",", "y", "+", "grid_size", ",", "fig", ")", "\n", "\n", "", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes": [[143, 171], ["visualize_utils.visualize_pts", "visualize_utils.draw_multi_grid_range", "mayavi.view", "ref_boxes.cpu().numpy.cpu().numpy", "gt_boxes.cpu().numpy.cpu().numpy", "ref_scores.cpu().numpy.cpu().numpy", "ref_labels.cpu().numpy.cpu().numpy", "visualize_utils.boxes_to_corners_3d", "visualize_utils.draw_corners3d", "visualize_utils.boxes_to_corners_3d", "isinstance", "isinstance", "isinstance", "isinstance", "len", "visualize_utils.draw_corners3d", "range", "ref_boxes.cpu().numpy.cpu", "gt_boxes.cpu().numpy.cpu", "ref_scores.cpu().numpy.cpu", "ref_labels.cpu().numpy.cpu", "ref_labels.cpu().numpy.min", "tuple", "visualize_utils.draw_corners3d", "ref_labels.cpu().numpy.max", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.visualize_pts", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_multi_grid_range", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_corners3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_corners3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_corners3d"], ["", "def", "draw_scenes", "(", "points", ",", "gt_boxes", "=", "None", ",", "ref_boxes", "=", "None", ",", "ref_scores", "=", "None", ",", "ref_labels", "=", "None", ")", ":", "\n", "\n", "    ", "if", "ref_boxes", "is", "not", "None", "and", "not", "isinstance", "(", "ref_boxes", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ref_boxes", "=", "ref_boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "gt_boxes", "is", "not", "None", "and", "not", "isinstance", "(", "gt_boxes", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "gt_boxes", "=", "gt_boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "ref_scores", "is", "not", "None", "and", "not", "isinstance", "(", "ref_scores", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ref_scores", "=", "ref_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "ref_labels", "is", "not", "None", "and", "not", "isinstance", "(", "ref_labels", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ref_labels", "=", "ref_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "fig", "=", "visualize_pts", "(", "points", ")", "\n", "fig", "=", "draw_multi_grid_range", "(", "fig", ",", "bv_range", "=", "(", "0", ",", "-", "40", ",", "80", ",", "40", ")", ")", "\n", "if", "gt_boxes", "is", "not", "None", ":", "\n", "        ", "corners3d", "=", "boxes_to_corners_3d", "(", "gt_boxes", ")", "\n", "fig", "=", "draw_corners3d", "(", "corners3d", ",", "fig", "=", "fig", ",", "color", "=", "(", "0", ",", "0", ",", "1", ")", ",", "max_num", "=", "100", ")", "\n", "\n", "", "if", "ref_boxes", "is", "not", "None", "and", "len", "(", "ref_boxes", ")", ">", "0", ":", "\n", "        ", "ref_corners3d", "=", "boxes_to_corners_3d", "(", "ref_boxes", ")", "\n", "if", "ref_labels", "is", "None", ":", "\n", "            ", "fig", "=", "draw_corners3d", "(", "ref_corners3d", ",", "fig", "=", "fig", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ",", "cls", "=", "ref_scores", ",", "max_num", "=", "100", ")", "\n", "", "else", ":", "\n", "            ", "for", "k", "in", "range", "(", "ref_labels", ".", "min", "(", ")", ",", "ref_labels", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "                ", "cur_color", "=", "tuple", "(", "box_colormap", "[", "k", "%", "len", "(", "box_colormap", ")", "]", ")", "\n", "mask", "=", "(", "ref_labels", "==", "k", ")", "\n", "fig", "=", "draw_corners3d", "(", "ref_corners3d", "[", "mask", "]", ",", "fig", "=", "fig", ",", "color", "=", "cur_color", ",", "cls", "=", "ref_scores", "[", "mask", "]", ",", "max_num", "=", "100", ")", "\n", "", "", "", "mlab", ".", "view", "(", "azimuth", "=", "-", "179", ",", "elevation", "=", "54.0", ",", "distance", "=", "104.0", ",", "roll", "=", "90.0", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_scenes_multi": [[173, 222], ["mayavi.figure", "zip", "zip", "ref_boxes.cpu().numpy.cpu().numpy", "gt_boxes.cpu().numpy.cpu().numpy", "aug_boxes.cpu().numpy.cpu().numpy", "ref_scores.cpu().numpy.cpu().numpy", "ref_ious.cpu().numpy.cpu().numpy", "ref_labels.cpu().numpy.cpu().numpy", "visualize_utils.draw_xyz_axis", "visualize_utils.draw_spherical_voxels", "print", "visualize_utils.visualize_pts", "visualize_utils.boxes_to_corners_3d", "visualize_utils.draw_corners3d", "visualize_utils.boxes_to_corners_3d", "visualize_utils.draw_corners3d", "visualize_utils.boxes_to_corners_3d", "isinstance", "points.cpu().numpy.cpu().numpy", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "len", "visualize_utils.draw_corners3d", "range", "ref_boxes.cpu().numpy.cpu", "gt_boxes.cpu().numpy.cpu", "aug_boxes.cpu().numpy.cpu", "ref_scores.cpu().numpy.cpu", "ref_ious.cpu().numpy.cpu", "ref_labels.cpu().numpy.cpu", "ref_labels.cpu().numpy.min", "tuple", "visualize_utils.draw_corners3d", "points.cpu().numpy.cpu", "ref_labels.cpu().numpy.max", "len"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_xyz_axis", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_spherical_voxels", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.visualize_pts", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_corners3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_corners3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.boxes_to_corners_3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_corners3d", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_corners3d"], ["", "def", "draw_scenes_multi", "(", "points_lst", ",", "colors_lst", ",", "scales_lst", ",", "mode_lst", ",", "gt_boxes", "=", "None", ",", "aug_boxes", "=", "None", ",", "ref_boxes", "=", "None", ",", "ref_scores", "=", "None", ",", "ref_labels", "=", "None", ",", "ref_ious", "=", "None", ",", "bgcolor", "=", "(", "1", ",", "1", ",", "1", ")", ",", "voxelpnts_lst", "=", "[", "]", ",", "voxelpnts_colors_lst", "=", "[", "]", ",", "voxelpnts_op_lst", "=", "[", "]", ",", "axis", "=", "False", ")", ":", "\n", "    ", "for", "points", "in", "points_lst", ":", "\n", "        ", "if", "not", "isinstance", "(", "points", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "points", "=", "points", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", "if", "ref_boxes", "is", "not", "None", "and", "not", "isinstance", "(", "ref_boxes", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ref_boxes", "=", "ref_boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "gt_boxes", "is", "not", "None", "and", "not", "isinstance", "(", "gt_boxes", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "gt_boxes", "=", "gt_boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "aug_boxes", "is", "not", "None", "and", "not", "isinstance", "(", "aug_boxes", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "aug_boxes", "=", "aug_boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "ref_scores", "is", "not", "None", "and", "not", "isinstance", "(", "ref_scores", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ref_scores", "=", "ref_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "ref_ious", "is", "not", "None", "and", "not", "isinstance", "(", "ref_ious", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ref_ious", "=", "ref_ious", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "ref_labels", "is", "not", "None", "and", "not", "isinstance", "(", "ref_labels", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ref_labels", "=", "ref_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# def visualize_pts(pts, fig=None, bgcolor=(0, 0, 0), fgcolor=(1.0, 1.0, 1.0),", "\n", "#                   show_intensity=False, size=(600, 600), draw_origin=True):", "\n", "", "fig", "=", "mlab", ".", "figure", "(", "figure", "=", "None", ",", "bgcolor", "=", "bgcolor", ",", "fgcolor", "=", "None", ",", "engine", "=", "None", ",", "size", "=", "(", "1200", ",", "1200", ")", ")", "\n", "if", "axis", ":", "\n", "        ", "draw_xyz_axis", "(", "fig", ")", "\n", "\n", "", "for", "voxelpnts", ",", "voxelpnts_colors", ",", "opacity", "in", "zip", "(", "voxelpnts_lst", ",", "voxelpnts_colors_lst", ",", "voxelpnts_op_lst", ")", ":", "\n", "        ", "draw_spherical_voxels", "(", "voxelpnts", ",", "voxelpnts_colors", ",", "opacity", ")", "\n", "\n", "", "for", "pts", ",", "clr", ",", "scale", ",", "mode", "in", "zip", "(", "points_lst", ",", "colors_lst", ",", "scales_lst", ",", "mode_lst", ")", ":", "\n", "        ", "print", "(", "pts", ".", "shape", ",", "clr", ",", "scale", ",", "mode", ")", "\n", "fig", "=", "visualize_pts", "(", "pts", ",", "fig", "=", "fig", ",", "fgcolor", "=", "clr", ",", "scale", "=", "scale", ",", "mode", "=", "mode", ")", "\n", "# fig = draw_multi_grid_range(fig, bv_range=(0, -40, 80, 40))", "\n", "", "if", "gt_boxes", "is", "not", "None", ":", "\n", "        ", "corners3d", "=", "boxes_to_corners_3d", "(", "gt_boxes", ")", "\n", "fig", "=", "draw_corners3d", "(", "corners3d", ",", "fig", "=", "fig", ",", "color", "=", "(", "0.2", ",", "0.6", ",", "0.8", ")", ",", "max_num", "=", "100", ")", "\n", "", "if", "aug_boxes", "is", "not", "None", ":", "\n", "        ", "corners3d_aug", "=", "boxes_to_corners_3d", "(", "aug_boxes", ")", "\n", "fig", "=", "draw_corners3d", "(", "corners3d_aug", ",", "fig", "=", "fig", ",", "color", "=", "(", "0", ",", "1", ",", "1", ")", ",", "max_num", "=", "100", ")", "\n", "\n", "", "if", "ref_boxes", "is", "not", "None", "and", "len", "(", "ref_boxes", ")", ">", "0", ":", "\n", "        ", "ref_corners3d", "=", "boxes_to_corners_3d", "(", "ref_boxes", ")", "\n", "if", "ref_labels", "is", "None", ":", "\n", "            ", "fig", "=", "draw_corners3d", "(", "ref_corners3d", ",", "fig", "=", "fig", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ",", "cls", "=", "ref_scores", ",", "max_num", "=", "100", ")", "\n", "", "else", ":", "\n", "            ", "for", "k", "in", "range", "(", "ref_labels", ".", "min", "(", ")", ",", "ref_labels", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "                ", "cur_color", "=", "tuple", "(", "box_colormap", "[", "k", "%", "len", "(", "box_colormap", ")", "]", ")", "\n", "mask", "=", "(", "ref_labels", "==", "k", ")", "\n", "\n", "fig", "=", "draw_corners3d", "(", "ref_corners3d", "[", "mask", "]", ",", "fig", "=", "fig", ",", "color", "=", "cur_color", ",", "cls", "=", "ref_scores", "[", "mask", "]", ",", "ious", "=", "ref_ious", "[", "mask", "]", "if", "ref_ious", "is", "not", "None", "else", "None", ",", "max_num", "=", "100", ")", "\n", "# mlab.view(azimuth=149, elevation=77.0, distance=104.0, roll=90.0)", "\n", "", "", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_xyz_axis": [[224, 241], ["mayavi.plot3d", "mayavi.plot3d", "mayavi.plot3d"], "function", ["None"], ["", "def", "draw_xyz_axis", "(", "fig", ")", ":", "\n", "    ", "ax", "=", "[", "[", "0", ",", "0.5", ",", "1", ",", "1.5", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "\n", "x_ax_x", "=", "ax", "[", "0", "]", "\n", "x_ax_y", "=", "ax", "[", "1", "]", "\n", "x_ax_z", "=", "ax", "[", "1", "]", "\n", "\n", "y_ax_x", "=", "ax", "[", "1", "]", "\n", "y_ax_y", "=", "ax", "[", "0", "]", "\n", "y_ax_z", "=", "ax", "[", "1", "]", "\n", "\n", "z_ax_x", "=", "ax", "[", "1", "]", "\n", "z_ax_y", "=", "ax", "[", "1", "]", "\n", "z_ax_z", "=", "ax", "[", "0", "]", "\n", "\n", "mlab", ".", "plot3d", "(", "x_ax_x", ",", "x_ax_y", ",", "x_ax_z", ",", "tube_radius", "=", "0.1", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "mlab", ".", "plot3d", "(", "y_ax_x", ",", "y_ax_y", ",", "y_ax_z", ",", "tube_radius", "=", "0.1", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ")", "\n", "mlab", ".", "plot3d", "(", "z_ax_x", ",", "z_ax_y", ",", "z_ax_z", ",", "tube_radius", "=", "0.1", ",", "color", "=", "(", "0", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_corners3d": [[243, 292], ["min", "range", "len", "range", "mayavi.plot3d", "mayavi.plot3d", "isinstance", "isinstance", "mayavi.plot3d", "mayavi.plot3d", "mayavi.plot3d", "mayavi.text3d", "mayavi.text3d", "mayavi.text3d", "mayavi.text3d"], "function", ["None"], ["", "def", "draw_corners3d", "(", "corners3d", ",", "fig", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ",", "line_width", "=", "2", ",", "cls", "=", "None", ",", "ious", "=", "None", ",", "tag", "=", "''", ",", "max_num", "=", "500", ",", "tube_radius", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param corners3d: (N, 8, 3)\n    :param fig:\n    :param color:\n    :param line_width:\n    :param cls:\n    :param tag:\n    :param max_num:\n    :return:\n    \"\"\"", "\n", "import", "mayavi", ".", "mlab", "as", "mlab", "\n", "num", "=", "min", "(", "max_num", ",", "len", "(", "corners3d", ")", ")", "\n", "for", "n", "in", "range", "(", "num", ")", ":", "\n", "        ", "b", "=", "corners3d", "[", "n", "]", "# (8, 3)", "\n", "\n", "if", "cls", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "cls", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "mlab", ".", "text3d", "(", "b", "[", "6", ",", "0", "]", ",", "b", "[", "6", ",", "1", "]", ",", "b", "[", "6", ",", "2", "]", ",", "'%.2f'", "%", "cls", "[", "n", "]", ",", "scale", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", "color", "=", "color", ",", "figure", "=", "fig", ")", "\n", "", "else", ":", "\n", "                ", "mlab", ".", "text3d", "(", "b", "[", "6", ",", "0", "]", ",", "b", "[", "6", ",", "1", "]", ",", "b", "[", "6", ",", "2", "]", ",", "'%s'", "%", "cls", "[", "n", "]", ",", "scale", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", "color", "=", "color", ",", "figure", "=", "fig", ")", "\n", "\n", "", "", "if", "ious", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "ious", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "mlab", ".", "text3d", "(", "b", "[", "5", ",", "0", "]", ",", "b", "[", "5", ",", "1", "]", ",", "b", "[", "5", ",", "2", "]", ",", "'iou: %.2f'", "%", "ious", "[", "n", "]", ",", "scale", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", "color", "=", "(", "1", ",", "1", ",", "0.7", ")", ",", "figure", "=", "fig", ")", "\n", "", "else", ":", "\n", "                ", "mlab", ".", "text3d", "(", "b", "[", "5", ",", "0", "]", ",", "b", "[", "5", ",", "1", "]", ",", "b", "[", "5", ",", "2", "]", ",", "'iou: %s'", "%", "ious", "[", "n", "]", ",", "scale", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", "color", "=", "(", "1", ",", "1", ",", "0.7", ")", ",", "figure", "=", "fig", ")", "\n", "\n", "", "", "for", "k", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "            ", "i", ",", "j", "=", "k", ",", "(", "k", "+", "1", ")", "%", "4", "\n", "mlab", ".", "plot3d", "(", "[", "b", "[", "i", ",", "0", "]", ",", "b", "[", "j", ",", "0", "]", "]", ",", "[", "b", "[", "i", ",", "1", "]", ",", "b", "[", "j", ",", "1", "]", "]", ",", "[", "b", "[", "i", ",", "2", "]", ",", "b", "[", "j", ",", "2", "]", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "\n", "line_width", "=", "line_width", ",", "figure", "=", "fig", ")", "\n", "\n", "i", ",", "j", "=", "k", "+", "4", ",", "(", "k", "+", "1", ")", "%", "4", "+", "4", "\n", "mlab", ".", "plot3d", "(", "[", "b", "[", "i", ",", "0", "]", ",", "b", "[", "j", ",", "0", "]", "]", ",", "[", "b", "[", "i", ",", "1", "]", ",", "b", "[", "j", ",", "1", "]", "]", ",", "[", "b", "[", "i", ",", "2", "]", ",", "b", "[", "j", ",", "2", "]", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "\n", "line_width", "=", "line_width", ",", "figure", "=", "fig", ")", "\n", "\n", "i", ",", "j", "=", "k", ",", "k", "+", "4", "\n", "mlab", ".", "plot3d", "(", "[", "b", "[", "i", ",", "0", "]", ",", "b", "[", "j", ",", "0", "]", "]", ",", "[", "b", "[", "i", ",", "1", "]", ",", "b", "[", "j", ",", "1", "]", "]", ",", "[", "b", "[", "i", ",", "2", "]", ",", "b", "[", "j", ",", "2", "]", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "\n", "line_width", "=", "line_width", ",", "figure", "=", "fig", ")", "\n", "\n", "", "i", ",", "j", "=", "0", ",", "5", "\n", "mlab", ".", "plot3d", "(", "[", "b", "[", "i", ",", "0", "]", ",", "b", "[", "j", ",", "0", "]", "]", ",", "[", "b", "[", "i", ",", "1", "]", ",", "b", "[", "j", ",", "1", "]", "]", ",", "[", "b", "[", "i", ",", "2", "]", ",", "b", "[", "j", ",", "2", "]", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "\n", "line_width", "=", "line_width", ",", "figure", "=", "fig", ")", "\n", "i", ",", "j", "=", "1", ",", "4", "\n", "mlab", ".", "plot3d", "(", "[", "b", "[", "i", ",", "0", "]", ",", "b", "[", "j", ",", "0", "]", "]", ",", "[", "b", "[", "i", ",", "1", "]", ",", "b", "[", "j", ",", "1", "]", "]", ",", "[", "b", "[", "i", ",", "2", "]", ",", "b", "[", "j", ",", "2", "]", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "tube_radius", ",", "\n", "line_width", "=", "line_width", ",", "figure", "=", "fig", ")", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.absxyz_2_spherexyz_np": [[295, 306], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.stack", "numpy.stack", "numpy.arctan2", "numpy.arctan2"], "function", ["None"], ["", "def", "absxyz_2_spherexyz_np", "(", "points", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "points", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", "# np.sqrt(x ** 2 + y ** 2 + z ** 2)", "\n", "xydist", "=", "np", ".", "linalg", ".", "norm", "(", "points", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "# np.sqrt((abs(x)) ** 2 + y ** 2)", "\n", "sphere_x", "=", "dist", "\n", "sphere_y", "=", "np", ".", "arctan2", "(", "-", "y", ",", "x", ")", "*", "180.", "/", "np", ".", "pi", "\n", "sphere_z", "=", "np", ".", "arctan2", "(", "z", ",", "xydist", ")", "*", "180.", "/", "np", ".", "pi", "\n", "if", "points", ".", "shape", "[", "1", "]", ">", "3", ":", "\n", "        ", "return", "np", ".", "stack", "(", "[", "sphere_x", ",", "sphere_y", ",", "sphere_z", ",", "points", "[", ":", ",", "3", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "stack", "(", "[", "sphere_x", ",", "sphere_y", ",", "sphere_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.draw_spherical_voxels": [[308, 347], ["numpy.array", "numpy.array", "numpy.array", "visualize_utils.absxyz_2_spherexyz_np", "numpy.floor().astype", "numpy.unique", "numpy.concatenate", "range", "numpy.concatenate", "mayavi.triangular_mesh", "isinstance", "point_xyz.cpu().numpy.cpu().numpy", "numpy.array", "spherical_range[].reshape", "spherical_range[].reshape", "len", "visualize_utils.sphere_voxel", "tries_lst.extend", "xyz_lst.append", "mayavi.points3d", "mayavi.plot3d", "mayavi.plot3d", "mayavi.plot3d", "numpy.floor", "np.array.reshape", "np.array.reshape", "point_xyz.cpu().numpy.cpu", "np.array.reshape", "spherical_range[].reshape"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.absxyz_2_spherexyz_np", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.sphere_voxel"], ["", "", "def", "draw_spherical_voxels", "(", "point_xyz", ",", "color", ",", "opacity", ",", "draw_origin", "=", "True", ")", ":", "\n", "\n", "    ", "if", "not", "isinstance", "(", "point_xyz", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "point_xyz", "=", "point_xyz", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "offset", "=", "np", ".", "array", "(", "[", "-", "1.43", ",", "0.0", ",", "-", "2.184", "]", ")", "\n", "spherical_range", "=", "np", ".", "array", "(", "[", "2.24", ",", "-", "40.6944", ",", "-", "16.5953125", ",", "70.72", ",", "40.6944", ",", "4.0", "]", ")", "\n", "# spherical_voxel_size = np.array([0.32, 0.5184, 0.4203125])", "\n", "# spherical_voxel_size = np.array([0.32 * 1, 0.5184 * 1, 0.4203125 * 1])", "\n", "# spherical_voxel_size = np.array([0.32 * 2, 0.5184 * 2, 0.4203125 * 2])", "\n", "# spherical_voxel_size = np.array([0.32 * 3, 0.5184 * 3, 0.4203125 * 3])", "\n", "# spherical_voxel_size = np.array([0.32 * 4, 0.5184 * 4, 0.4203125 * 4])", "\n", "spherical_voxel_size", "=", "np", ".", "array", "(", "[", "0.32", "*", "5", ",", "0.5184", "*", "5", ",", "0.4203125", "*", "5", "]", ")", "\n", "# point_xyz = point_xyz[point_xyz[:,2] > 0.05]", "\n", "point_xyz", "+=", "offset", "\n", "sphere_xyz", "=", "absxyz_2_spherexyz_np", "(", "point_xyz", ")", "\n", "sphere_coords_floor", "=", "np", ".", "floor", "(", "(", "sphere_xyz", "-", "spherical_range", "[", ":", "3", "]", ".", "reshape", "(", "1", ",", "3", ")", ")", "/", "spherical_voxel_size", ".", "reshape", "(", "1", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "sphere_coords_floor", "=", "np", ".", "unique", "(", "sphere_coords_floor", ",", "axis", "=", "0", ")", "\n", "sphere_coords_ceil", "=", "sphere_coords_floor", "+", "np", ".", "array", "(", "[", "[", "1.0", ",", "1.0", ",", "1.0", "]", "]", ")", "\n", "# print(sphere_coords_floor.dtype, spherical_voxel_size.reshape(1, 3).dtype, spherical_range[:3].reshape(1, 3).dtype,)", "\n", "sphere_floor", "=", "sphere_coords_floor", "*", "spherical_voxel_size", ".", "reshape", "(", "1", ",", "3", ")", "+", "spherical_range", "[", ":", "3", "]", ".", "reshape", "(", "1", ",", "3", ")", "\n", "sphere_ceil", "=", "sphere_coords_ceil", "*", "spherical_voxel_size", ".", "reshape", "(", "1", ",", "3", ")", "+", "spherical_range", "[", ":", "3", "]", ".", "reshape", "(", "1", ",", "3", ")", "\n", "sphere_range", "=", "np", ".", "concatenate", "(", "[", "sphere_floor", ",", "sphere_ceil", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# color = (253 / 255, 185 / 255, 200 / 255)", "\n", "# color = (255 / 255, 140 / 255, 0 / 255)", "\n", "# opacity = 0.01", "\n", "xyz_lst", ",", "tries_lst", ",", "base", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sphere_range", ")", ")", ":", "\n", "        ", "xyz", ",", "tries", ",", "base", "=", "sphere_voxel", "(", "base", ",", "res", "=", "5j", ",", "sphere_range", "=", "sphere_range", "[", "i", "]", ")", "\n", "tries_lst", ".", "extend", "(", "tries", ")", "\n", "xyz_lst", ".", "append", "(", "xyz", ")", "\n", "", "xyz", "=", "np", ".", "concatenate", "(", "xyz_lst", ",", "axis", "=", "0", ")", "\n", "xyz", "-=", "offset", "\n", "mlab", ".", "triangular_mesh", "(", "xyz", "[", "...", ",", "0", "]", ",", "xyz", "[", "...", ",", "1", "]", ",", "xyz", "[", "...", ",", "2", "]", ",", "tries_lst", ",", "color", "=", "color", ",", "opacity", "=", "opacity", ",", "representation", "=", "\"surface\"", ")", "\n", "if", "draw_origin", ":", "\n", "        ", "mlab", ".", "points3d", "(", "-", "offset", "[", "0", "]", ",", "-", "offset", "[", "1", "]", ",", "-", "offset", "[", "2", "]", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ",", "mode", "=", "'sphere'", ",", "scale_factor", "=", "0.2", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "3", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "(", "0", ",", "0", ",", "1", ")", ",", "tube_radius", "=", "0.1", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "3", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ",", "tube_radius", "=", "0.1", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "3", "]", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ",", "tube_radius", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.sphere_voxel": [[349, 362], ["visualize_utils.xfix", "visualize_utils.xfix", "visualize_utils.yfix", "visualize_utils.yfix", "visualize_utils.zfix", "visualize_utils.zfix", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.xfix", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.xfix", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.yfix", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.yfix", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.zfix", "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.zfix"], ["", "", "def", "sphere_voxel", "(", "base", ",", "res", "=", "3j", ",", "sphere_range", "=", "[", "3.84", ",", "-", "40.6944", ",", "-", "16.5953125", ",", "70.72", ",", "40.6944", ",", "4.0", "]", ")", ":", "\n", "    ", "xyz1", ",", "tries1", ",", "base", "=", "xfix", "(", "sphere_range", "[", "0", "]", ",", "[", "sphere_range", "[", "4", "]", ",", "sphere_range", "[", "2", "]", ",", "sphere_range", "[", "1", "]", ",", "sphere_range", "[", "5", "]", "]", ",", "base", ",", "res", "=", "res", ")", "\n", "xyz2", ",", "tries2", ",", "base", "=", "xfix", "(", "sphere_range", "[", "3", "]", ",", "[", "sphere_range", "[", "4", "]", ",", "sphere_range", "[", "2", "]", ",", "sphere_range", "[", "1", "]", ",", "sphere_range", "[", "5", "]", "]", ",", "base", ",", "res", "=", "res", ")", "\n", "\n", "xyz3", ",", "tries3", ",", "base", "=", "yfix", "(", "sphere_range", "[", "1", "]", ",", "[", "sphere_range", "[", "0", "]", ",", "sphere_range", "[", "5", "]", ",", "sphere_range", "[", "3", "]", ",", "sphere_range", "[", "2", "]", "]", ",", "base", ",", "res", "=", "res", ")", "\n", "xyz4", ",", "tries4", ",", "base", "=", "yfix", "(", "sphere_range", "[", "4", "]", ",", "[", "sphere_range", "[", "0", "]", ",", "sphere_range", "[", "2", "]", ",", "sphere_range", "[", "3", "]", ",", "sphere_range", "[", "5", "]", "]", ",", "base", ",", "res", "=", "res", ")", "\n", "\n", "xyz5", ",", "tries5", ",", "base", "=", "zfix", "(", "sphere_range", "[", "2", "]", ",", "[", "sphere_range", "[", "0", "]", ",", "sphere_range", "[", "1", "]", ",", "sphere_range", "[", "3", "]", ",", "sphere_range", "[", "4", "]", "]", ",", "base", ",", "res", "=", "res", ")", "\n", "xyz6", ",", "tries6", ",", "base", "=", "zfix", "(", "sphere_range", "[", "5", "]", ",", "[", "sphere_range", "[", "3", "]", ",", "sphere_range", "[", "1", "]", ",", "sphere_range", "[", "0", "]", ",", "sphere_range", "[", "4", "]", "]", ",", "base", ",", "res", "=", "res", ")", "\n", "\n", "xyz", "=", "np", ".", "concatenate", "(", "[", "xyz1", ",", "xyz2", ",", "xyz3", ",", "xyz4", ",", "xyz5", ",", "xyz6", "]", ",", "axis", "=", "0", ")", "\n", "tries_lst", "=", "tries1", "+", "tries2", "+", "tries3", "+", "tries4", "+", "tries5", "+", "tries6", "\n", "return", "xyz", ",", "tries_lst", ",", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.xfix": [[363, 379], ["range", "len", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "range", "x.reshape", "numpy.stack", "tries.extend", "x.reshape", "y.reshape", "z.reshape"], "function", ["None"], ["", "def", "xfix", "(", "sphere_x", ",", "yz_range", ",", "base", ",", "res", "=", "3j", ")", ":", "\n", "# [3.84, -40.6944, -16.5953125, 70.72, 40.6944, 4.0]", "\n", "    ", "sphere_y", ",", "sphere_z", "=", "np", ".", "mgrid", "[", "yz_range", "[", "0", "]", ":", "yz_range", "[", "2", "]", ":", "res", ",", "yz_range", "[", "1", "]", ":", "yz_range", "[", "3", "]", ":", "res", "]", "\n", "\n", "xydist", "=", "sphere_x", "*", "np", ".", "cos", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "x", "=", "xydist", "*", "np", ".", "cos", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "y", "=", "-", "xydist", "*", "np", ".", "sin", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "z", "=", "sphere_x", "*", "np", ".", "sin", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "tries", "=", "[", "]", "\n", "lw", ",", "lh", "=", "x", ".", "shape", "\n", "for", "i", "in", "range", "(", "lw", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lh", "-", "1", ")", ":", "\n", "            ", "tries", ".", "extend", "(", "[", "(", "base", "+", "i", "*", "lh", "+", "j", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "1", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", ")", ",", "\n", "(", "base", "+", "i", "*", "lh", "+", "j", "+", "1", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", "+", "1", ")", "]", ")", "\n", "", "", "base", "+=", "len", "(", "x", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "np", ".", "stack", "(", "[", "x", ".", "reshape", "(", "-", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ")", ",", "z", ".", "reshape", "(", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "tries", ",", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.yfix": [[380, 396], ["range", "len", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "range", "x.reshape", "numpy.stack", "tries.extend", "x.reshape", "y.reshape", "z.reshape"], "function", ["None"], ["", "def", "yfix", "(", "sphere_y", ",", "xz_range", ",", "base", ",", "res", "=", "3j", ")", ":", "\n", "# [3.84, -40.6944, -16.5953125, 70.72, 40.6944, 4.0]", "\n", "    ", "sphere_x", ",", "sphere_z", "=", "np", ".", "mgrid", "[", "xz_range", "[", "0", "]", ":", "xz_range", "[", "2", "]", ":", "2j", ",", "xz_range", "[", "1", "]", ":", "xz_range", "[", "3", "]", ":", "res", "]", "\n", "\n", "xydist", "=", "sphere_x", "*", "np", ".", "cos", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "x", "=", "xydist", "*", "np", ".", "cos", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "y", "=", "-", "xydist", "*", "np", ".", "sin", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "z", "=", "sphere_x", "*", "np", ".", "sin", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "tries", "=", "[", "]", "\n", "lw", ",", "lh", "=", "x", ".", "shape", "\n", "for", "i", "in", "range", "(", "lw", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lh", "-", "1", ")", ":", "\n", "            ", "tries", ".", "extend", "(", "[", "(", "base", "+", "i", "*", "lh", "+", "j", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "1", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", ")", ",", "\n", "(", "base", "+", "i", "*", "lh", "+", "j", "+", "1", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", "+", "1", ")", "]", ")", "\n", "", "", "base", "+=", "len", "(", "x", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "np", ".", "stack", "(", "[", "x", ".", "reshape", "(", "-", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ")", ",", "z", ".", "reshape", "(", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "tries", ",", "base", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.visual_utils.visualize_utils.zfix": [[397, 413], ["range", "len", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "range", "x.reshape", "numpy.stack", "tries.extend", "x.reshape", "y.reshape", "z.reshape"], "function", ["None"], ["", "def", "zfix", "(", "sphere_z", ",", "xy_range", ",", "base", ",", "res", "=", "3j", ")", ":", "\n", "# [3.84, -40.6944, -16.5953125, 70.72, 40.6944, 4.0]", "\n", "    ", "sphere_x", ",", "sphere_y", "=", "np", ".", "mgrid", "[", "xy_range", "[", "0", "]", ":", "xy_range", "[", "2", "]", ":", "2j", ",", "xy_range", "[", "1", "]", ":", "xy_range", "[", "3", "]", ":", "res", "]", "\n", "\n", "xydist", "=", "sphere_x", "*", "np", ".", "cos", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "x", "=", "xydist", "*", "np", ".", "cos", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "y", "=", "-", "xydist", "*", "np", ".", "sin", "(", "sphere_y", "*", "np", ".", "pi", "/", "180.", ")", "\n", "z", "=", "sphere_x", "*", "np", ".", "sin", "(", "sphere_z", "*", "np", ".", "pi", "/", "180.", ")", "\n", "tries", "=", "[", "]", "\n", "lw", ",", "lh", "=", "x", ".", "shape", "\n", "for", "i", "in", "range", "(", "lw", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lh", "-", "1", ")", ":", "\n", "            ", "tries", ".", "extend", "(", "[", "(", "base", "+", "i", "*", "lh", "+", "j", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "1", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", ")", ",", "\n", "(", "base", "+", "i", "*", "lh", "+", "j", "+", "1", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", ",", "base", "+", "i", "*", "lh", "+", "j", "+", "lh", "+", "1", ")", "]", ")", "\n", "", "", "base", "+=", "len", "(", "x", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "np", ".", "stack", "(", "[", "x", ".", "reshape", "(", "-", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ")", ",", "z", ".", "reshape", "(", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "tries", ",", "base", "", "", ""]], "home.repos.pwc.inspect_result.xharlie_btcdet.eval_utils.eval_utils.statistics_info": [[13, 21], ["ret_dict.get", "ret_dict.get", "ret_dict.get", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "statistics_info", "(", "cfg", ",", "ret_dict", ",", "metric", ",", "disp_dict", ")", ":", "\n", "    ", "for", "cur_thresh", "in", "cfg", ".", "MODEL", ".", "POST_PROCESSING", ".", "RECALL_THRESH_LIST", ":", "\n", "        ", "metric", "[", "'recall_roi_%s'", "%", "str", "(", "cur_thresh", ")", "]", "+=", "ret_dict", ".", "get", "(", "'roi_%s'", "%", "str", "(", "cur_thresh", ")", ",", "0", ")", "\n", "metric", "[", "'recall_rcnn_%s'", "%", "str", "(", "cur_thresh", ")", "]", "+=", "ret_dict", ".", "get", "(", "'rcnn_%s'", "%", "str", "(", "cur_thresh", ")", ",", "0", ")", "\n", "", "metric", "[", "'gt_num'", "]", "+=", "ret_dict", ".", "get", "(", "'gt'", ",", "0", ")", "\n", "min_thresh", "=", "cfg", ".", "MODEL", ".", "POST_PROCESSING", ".", "RECALL_THRESH_LIST", "[", "0", "]", "\n", "disp_dict", "[", "'recall_%s'", "%", "str", "(", "min_thresh", ")", "]", "=", "'(%d, %d) / %d'", "%", "(", "metric", "[", "'recall_roi_%s'", "%", "str", "(", "min_thresh", ")", "]", ",", "metric", "[", "'recall_rcnn_%s'", "%", "str", "(", "min_thresh", ")", "]", ",", "metric", "[", "'gt_num'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.eval_utils.eval_utils.get_match_stats": [[23, 40], ["range", "max"], "function", ["None"], ["", "def", "get_match_stats", "(", "ret_dict", ",", "metric", ")", ":", "\n", "    ", "pos_num", ",", "neg_num", ",", "total", ",", "precision", ",", "recall", ",", "f1", ",", "pos_all_num", "=", "ret_dict", "[", "\"pos_num\"", "]", ",", "ret_dict", "[", "\"neg_num\"", "]", ",", "ret_dict", "[", "\"total\"", "]", ",", "ret_dict", "[", "\"precision\"", "]", ",", "ret_dict", "[", "\"recall\"", "]", ",", "ret_dict", "[", "\"f1\"", "]", ",", "ret_dict", "[", "\"pos_all_num\"", "]", "\n", "total_factor", "=", "total", "/", "1000.0", "\n", "metric", "[", "\"scene_total_factor\"", "]", "+=", "total_factor", "\n", "metric", "[", "\"scene_num\"", "]", "+=", "1", "\n", "metric", "[", "\"precision\"", "]", "+=", "precision", "\n", "metric", "[", "\"recall\"", "]", "+=", "recall", "\n", "metric", "[", "\"f1\"", "]", "+=", "f1", "\n", "metric", "[", "\"precision_factored\"", "]", "+=", "precision", "*", "total_factor", "\n", "metric", "[", "\"recall_factored\"", "]", "+=", "recall", "*", "total_factor", "\n", "metric", "[", "\"f1_factored\"", "]", "+=", "f1", "*", "total_factor", "\n", "metric", "[", "\"total_pos_all_portion\"", "]", "+=", "pos_num", "/", "max", "(", "1.0", ",", "pos_all_num", ")", "\n", "\n", "box_num_sum", ",", "occ_box_num", "=", "ret_dict", "[", "\"box_num_sum\"", "]", ",", "ret_dict", "[", "\"occ_box_num\"", "]", "\n", "metric", "[", "\"total_num_box\"", "]", "+=", "box_num_sum", "\n", "for", "cur_thresh", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "        ", "metric", "[", "'total_occ_num_box_%.1f'", "%", "(", "cur_thresh", "*", "0.1", ")", "]", "+=", "occ_box_num", "[", "cur_thresh", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xharlie_btcdet.eval_utils.eval_utils.eval_one_epoch": [[41, 198], ["result_dir.mkdir", "hasattr", "logger.info", "torch.nn.parallel.DistributedDataParallel.eval", "time.time", "enumerate", "logger.info", "logger.info", "hasattr", "logger.info", "hasattr", "ret_dict.update", "final_output_dir.mkdir", "hasattr", "hasattr", "range", "torch.cuda.device_count", "torch.nn.parallel.DistributedDataParallel", "tqdm.tqdm", "btcdet.models.load_data_to_gpu", "hasattr", "tqdm.tqdm.close", "btcdet.utils.common_utils.get_dist_info", "btcdet.utils.common_utils.merge_results_dist", "btcdet.utils.common_utils.merge_results_dist", "len", "metric[].items", "hasattr", "hasattr", "logger.info", "logger.info", "logger.info", "logger.info", "anno[].__len__", "open", "pickle.dump", "dataset.evaluation", "logger.info", "ret_dict.update", "logger.info", "logger.info", "torch.no_grad", "torch.tensor", "torch.nn.parallel.DistributedDataParallel.", "hasattr", "hasattr", "eval_utils.get_match_stats", "eval_utils.statistics_info", "dataset.generate_prediction_dicts", "tqdm.tqdm.set_postfix", "tqdm.tqdm.update", "bool", "bool", "len", "time.time", "range", "logger.info", "logger.info", "len", "numpy.save", "tb_dict_valid.update", "max", "max", "len", "cfg.MODEL.POST_PROCESSING.get", "max", "str", "str", "str", "str", "str", "range", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.xharlie_btcdet.models.__init__.load_data_to_gpu", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.get_dist_info", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.merge_results_dist", "home.repos.pwc.inspect_result.xharlie_btcdet.utils.common_utils.merge_results_dist", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.__len__", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.evaluation", "home.repos.pwc.inspect_result.xharlie_btcdet.eval_utils.eval_utils.get_match_stats", "home.repos.pwc.inspect_result.xharlie_btcdet.eval_utils.eval_utils.statistics_info", "home.repos.pwc.inspect_result.xharlie_btcdet.kitti.kitti_dataset.KittiDataset.generate_prediction_dicts"], ["", "", "def", "eval_one_epoch", "(", "cfg", ",", "model", ",", "dataloader", ",", "epoch_id", ",", "logger", ",", "dist_test", "=", "False", ",", "save_to_file", "=", "False", ",", "result_dir", "=", "None", ",", "pc_dir", "=", "None", ")", ":", "\n", "    ", "result_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "final_output_dir", "=", "result_dir", "/", "'final_result'", "/", "'data'", "\n", "if", "save_to_file", ":", "\n", "        ", "final_output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "metric", "=", "{", "\n", "'gt_num'", ":", "0", ",", "\n", "'scene_num'", ":", "0", ",", "\n", "'scene_total_factor'", ":", "0", ",", "\n", "'precision'", ":", "0", ",", "\n", "'recall'", ":", "0", ",", "\n", "'f1'", ":", "0", ",", "\n", "'precision_factored'", ":", "0", ",", "\n", "'recall_factored'", ":", "0", ",", "\n", "'f1_factored'", ":", "0", ",", "\n", "'total_num_box'", ":", "0", ",", "\n", "'total_pos_all_portion'", ":", "0", ",", "\n", "}", "\n", "\n", "if", "hasattr", "(", "cfg", ".", "MODEL", ",", "\"OCC\"", ")", "and", "hasattr", "(", "cfg", ".", "MODEL", ".", "OCC", ",", "\"OCC_POST_PROCESSING\"", ")", ":", "\n", "        ", "for", "cur_thresh", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "metric", "[", "'total_occ_num_box_%.1f'", "%", "(", "cur_thresh", "*", "0.1", ")", "]", "=", "0", "\n", "\n", "", "", "if", "hasattr", "(", "cfg", ".", "MODEL", ",", "\"POST_PROCESSING\"", ")", ":", "\n", "        ", "for", "cur_thresh", "in", "cfg", ".", "MODEL", ".", "POST_PROCESSING", ".", "RECALL_THRESH_LIST", ":", "\n", "            ", "metric", "[", "'recall_roi_%s'", "%", "str", "(", "cur_thresh", ")", "]", "=", "0", "\n", "metric", "[", "'recall_rcnn_%s'", "%", "str", "(", "cur_thresh", ")", "]", "=", "0", "\n", "\n", "", "", "dataset", "=", "dataloader", ".", "dataset", "\n", "class_names", "=", "dataset", ".", "class_names", "\n", "det_annos", "=", "[", "]", "\n", "\n", "logger", ".", "info", "(", "'*************** EPOCH %s EVALUATION *****************'", "%", "epoch_id", ")", "\n", "if", "dist_test", ":", "\n", "        ", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "local_rank", "=", "cfg", ".", "LOCAL_RANK", "%", "num_gpus", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "\n", "device_ids", "=", "[", "local_rank", "]", ",", "\n", "broadcast_buffers", "=", "False", "\n", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "cfg", ".", "LOCAL_RANK", "==", "0", ":", "\n", "        ", "progress_bar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "dataloader", ")", ",", "leave", "=", "True", ",", "desc", "=", "'eval'", ",", "dynamic_ncols", "=", "True", ")", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "tb_dict_valid", "=", "{", "}", "\n", "for", "i", ",", "batch_dict", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "load_data_to_gpu", "(", "batch_dict", ")", "\n", "#", "\n", "# flops_model = add_flops_counting_methods(model)", "\n", "# flops_model.__batch_counter__ = 1", "\n", "# flops_model.eval()", "\n", "# flops_model.start_flops_count(ost=sys.stdout, verbose=True,", "\n", "#                               ignore_list=[])", "\n", "# macs, params = flops_model.compute_average_flops_cost()", "\n", "# print('{:<30}  {:<8}'.format('Computational complexity: ', macs))", "\n", "# print('{:<30}  {:<8}'.format('Number of parameters: ', params))", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "global_step", "=", "torch", ".", "tensor", "(", "i", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "pred_dicts", ",", "ret_dict", ",", "tb_dict", ",", "pc_dict", "=", "model", "(", "batch_dict", ")", "\n", "", "disp_dict", "=", "{", "}", "\n", "if", "hasattr", "(", "cfg", ".", "MODEL", ",", "\"OCC\"", ")", "and", "hasattr", "(", "cfg", ".", "MODEL", ".", "OCC", ",", "\"OCC_POST_PROCESSING\"", ")", ":", "\n", "            ", "get_match_stats", "(", "ret_dict", ",", "metric", ")", "\n", "", "if", "hasattr", "(", "cfg", ".", "MODEL", ",", "\"POST_PROCESSING\"", ")", ":", "\n", "            ", "statistics_info", "(", "cfg", ",", "ret_dict", ",", "metric", ",", "disp_dict", ")", "\n", "annos", "=", "dataset", ".", "generate_prediction_dicts", "(", "\n", "batch_dict", ",", "pred_dicts", ",", "class_names", ",", "\n", "output_path", "=", "final_output_dir", "if", "save_to_file", "else", "None", "\n", ")", "\n", "det_annos", "+=", "annos", "\n", "", "if", "cfg", ".", "LOCAL_RANK", "==", "0", ":", "\n", "            ", "progress_bar", ".", "set_postfix", "(", "disp_dict", ")", "\n", "progress_bar", ".", "update", "(", ")", "\n", "\n", "if", "bool", "(", "pc_dict", ")", ":", "\n", "                ", "np", ".", "save", "(", "str", "(", "pc_dir", ")", "+", "'/pc_{}_{}'", ".", "format", "(", "epoch_id", ",", "i", ")", ",", "pc_dict", ")", "\n", "", "if", "bool", "(", "tb_dict", ")", ":", "\n", "                ", "tb_dict_valid", ".", "update", "(", "tb_dict", ")", "\n", "# print(\"torch.get_num_threads\", torch.get_num_threads())", "\n", "\n", "", "", "", "if", "cfg", ".", "LOCAL_RANK", "==", "0", ":", "\n", "        ", "progress_bar", ".", "close", "(", ")", "\n", "\n", "", "if", "dist_test", ":", "\n", "        ", "rank", ",", "world_size", "=", "common_utils", ".", "get_dist_info", "(", ")", "\n", "det_annos", "=", "common_utils", ".", "merge_results_dist", "(", "det_annos", ",", "len", "(", "dataset", ")", ",", "tmpdir", "=", "result_dir", "/", "'tmpdir'", ")", "\n", "metric", "=", "common_utils", ".", "merge_results_dist", "(", "[", "metric", "]", ",", "world_size", ",", "tmpdir", "=", "result_dir", "/", "'tmpdir'", ")", "\n", "\n", "", "logger", ".", "info", "(", "'*************** Performance of EPOCH %s *****************'", "%", "epoch_id", ")", "\n", "sec_per_example", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "len", "(", "dataloader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "'Generate label finished(sec_per_example: %.4f second).'", "%", "sec_per_example", ")", "\n", "\n", "if", "cfg", ".", "LOCAL_RANK", "!=", "0", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "ret_dict", "=", "{", "}", "\n", "if", "dist_test", ":", "\n", "        ", "for", "key", ",", "val", "in", "metric", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "1", ",", "world_size", ")", ":", "\n", "                ", "metric", "[", "0", "]", "[", "key", "]", "+=", "metric", "[", "k", "]", "[", "key", "]", "\n", "", "", "metric", "=", "metric", "[", "0", "]", "\n", "\n", "", "gt_num_cnt", "=", "metric", "[", "'gt_num'", "]", "\n", "if", "hasattr", "(", "cfg", ".", "MODEL", ",", "\"POST_PROCESSING\"", ")", ":", "\n", "        ", "for", "cur_thresh", "in", "cfg", ".", "MODEL", ".", "POST_PROCESSING", ".", "RECALL_THRESH_LIST", ":", "\n", "            ", "cur_roi_recall", "=", "metric", "[", "'recall_roi_%s'", "%", "str", "(", "cur_thresh", ")", "]", "/", "max", "(", "gt_num_cnt", ",", "1", ")", "\n", "cur_rcnn_recall", "=", "metric", "[", "'recall_rcnn_%s'", "%", "str", "(", "cur_thresh", ")", "]", "/", "max", "(", "gt_num_cnt", ",", "1", ")", "\n", "logger", ".", "info", "(", "'recall_roi_%s: %f'", "%", "(", "cur_thresh", ",", "cur_roi_recall", ")", ")", "\n", "logger", ".", "info", "(", "'recall_rcnn_%s: %f'", "%", "(", "cur_thresh", ",", "cur_rcnn_recall", ")", ")", "\n", "ret_dict", "[", "'recall/roi_%s'", "%", "str", "(", "cur_thresh", ")", "]", "=", "cur_roi_recall", "\n", "ret_dict", "[", "'recall/rcnn_%s'", "%", "str", "(", "cur_thresh", ")", "]", "=", "cur_rcnn_recall", "\n", "", "", "if", "hasattr", "(", "cfg", ".", "MODEL", ",", "\"OCC\"", ")", "and", "hasattr", "(", "cfg", ".", "MODEL", ".", "OCC", ",", "\"OCC_POST_PROCESSING\"", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\" *************************** \"", ")", "\n", "logger", ".", "info", "(", "' '", ".", "join", "(", "[", "\n", "f\"precision: {metric['precision'] / metric['scene_num']:.3f}, recall: {metric['recall'] / metric['scene_num']:.3f},\"", ",", "f\"f1: {metric['f1'] / metric['scene_num']:.3f}, precision_factored: {metric['precision_factored'] / metric['scene_total_factor']:.3f}\"", ",", "f\"recall_factored: {metric['recall_factored'] / metric['scene_total_factor']:.3f}, f1_factored: {metric['f1_factored'] / metric['scene_total_factor']:.3f}\"", "\n", "]", ")", ")", "\n", "logger", ".", "info", "(", "' '", ".", "join", "(", "[", "\n", "f\"occ thresh {i * 0.1:.1f}: {metric['total_occ_num_box_%.1f' % (i*0.1)] / metric['total_num_box']:.3f},  \"", "for", "i", "in", "range", "(", "1", ",", "10", ")", "]", ")", ")", "\n", "logger", ".", "info", "(", "' '", ".", "join", "(", "[", "f\" total_pos_all_portion {metric['total_pos_all_portion'] / metric['scene_num']:.3f}\"", "]", ")", ")", "\n", "\n", "", "total_pred_objects", "=", "0", "\n", "for", "anno", "in", "det_annos", ":", "\n", "        ", "total_pred_objects", "+=", "anno", "[", "'name'", "]", ".", "__len__", "(", ")", "\n", "", "logger", ".", "info", "(", "'Average predicted number of objects(%d samples): %.3f'", "\n", "%", "(", "len", "(", "det_annos", ")", ",", "total_pred_objects", "/", "max", "(", "1", ",", "len", "(", "det_annos", ")", ")", ")", ")", "\n", "\n", "with", "open", "(", "result_dir", "/", "'result.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "det_annos", ",", "f", ")", "\n", "\n", "", "if", "hasattr", "(", "cfg", ".", "MODEL", ",", "\"POST_PROCESSING\"", ")", ":", "\n", "        ", "result_str", ",", "result_dict", ",", "pr_rc_details", "=", "dataset", ".", "evaluation", "(", "\n", "det_annos", ",", "class_names", ",", "\n", "eval_metric", "=", "cfg", ".", "MODEL", ".", "POST_PROCESSING", ".", "EVAL_METRIC", ",", "\n", "output_path", "=", "final_output_dir", ",", "\n", "coverage_rates", "=", "cfg", ".", "MODEL", ".", "POST_PROCESSING", ".", "get", "(", "\"CVRG_RATES\"", ",", "None", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "result_str", ")", "\n", "ret_dict", ".", "update", "(", "result_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Result is save to %s'", "%", "result_dir", ")", "\n", "\n", "# logger.info(\"\\n -------- pr rc breakdown -------------- \\n\")", "\n", "# logger.info(pr_rc_details)", "\n", "# logger.info(\"\\n\")", "\n", "#", "\n", "# with open(result_dir / 'pc_rc.pkl', 'wb') as f:", "\n", "#     pickle.dump(pr_rc_details, f)", "\n", "# logger.info('pr rc break down is save to %s' % result_dir)", "\n", "\n", "logger", ".", "info", "(", "'****************Evaluation done.*****************'", ")", "\n", "", "ret_dict", ".", "update", "(", "tb_dict_valid", ")", "\n", "return", "ret_dict", "\n", "\n"]]}