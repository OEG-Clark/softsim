{"home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.model_train.seed_everything": [[34, 44], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "str"], "function", ["None"], ["def", "seed_everything", "(", "seed", "=", "27", ")", ":", "\n", "    ", "'''\n    Set random seed for reproducible experiments\n    Inputs: seed number \n    '''", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.model_train.seg_eval_batch": [[46, 56], ["utils.segmentation_eval_matrix.SegmentationLosses", "utils.segmentation_eval_matrix.SegmentationLosses.", "utils.segmentation_eval_matrix.batch_pix_accuracy", "utils.segmentation_eval_matrix.batch_intersection_union"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.batch_pix_accuracy", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.batch_intersection_union"], ["", "def", "seg_eval_batch", "(", "seg_output", ",", "target", ")", ":", "\n", "    ", "'''\n    Calculate segmentation loss, pixel acc and IoU\n    Inputs: predicted segmentation mask, GT segmentation mask \n    '''", "\n", "seg_criterion", "=", "SegmentationLosses", "(", "se_loss", "=", "False", ",", "aux", "=", "False", ",", "nclass", "=", "8", ",", "se_weight", "=", "0.2", ",", "aux_weight", "=", "0.2", ")", "\n", "loss", "=", "seg_criterion", "(", "seg_output", ",", "target", ")", "\n", "correct", ",", "labeled", "=", "batch_pix_accuracy", "(", "seg_output", ".", "data", ",", "target", ")", "\n", "inter", ",", "union", "=", "batch_intersection_union", "(", "seg_output", ".", "data", ",", "target", ",", "8", ")", "# 8 is num classes", "\n", "return", "correct", ",", "labeled", ",", "inter", ",", "union", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.model_train.get_checkpoint_loc": [[57, 71], ["None"], "function", ["None"], ["", "def", "get_checkpoint_loc", "(", "model_type", ",", "seg_mode", "=", "None", ")", ":", "\n", "    ", "loc", "=", "None", "\n", "if", "model_type", "==", "'amtl-t0'", "or", "model_type", "==", "'amtl-t3'", ":", "\n", "        ", "if", "seg_mode", "is", "None", ":", "\n", "            ", "loc", "=", "'checkpoints/stl_s/stl_s/epoch_train/checkpoint_D153_epoch.pth'", "\n", "", "elif", "seg_mode", "==", "'v1'", ":", "\n", "            ", "loc", "=", "'checkpoints/stl_s_v1/stl_s_v1/epoch_train/checkpoint_D168_epoch.pth'", "\n", "", "elif", "seg_mode", "==", "'v2_gc'", ":", "\n", "            ", "loc", "=", "'checkpoints/stl_s_v2_gc/stl_s_v2_gc/epoch_train/checkpoint_D168_epoch.pth'", "\n", "", "", "elif", "model_type", "==", "'amtl-t1'", ":", "\n", "        ", "loc", "=", "'checkpoints/stl_s/stl_s/epoch_train/checkpoint_D168_epoch.pth'", "\n", "", "elif", "model_type", "==", "'amtl-t2'", ":", "\n", "        ", "loc", "=", "'checkpoints/stl_sg_wfe/stl_sg_wfe/epoch_train/checkpoint_D110_epoch.pth'", "\n", "", "return", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.model_train.build_model": [[72, 90], ["models.scene_graph.AGRNN", "models.segmentation_model.get_gcnet", "models.mtl_model.mtl_model", "models.mtl_model.mtl_model.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.get_gcnet"], ["", "def", "build_model", "(", "args", ")", ":", "\n", "    ", "'''\n    Build MTL model\n    1) Scene Graph Understanding Model\n    2) Segmentation Model : Encoder, Reasoning unit, Decoder\n\n    Inputs: args\n    '''", "\n", "\n", "'''==== Graph model ===='''", "\n", "# graph model", "\n", "scene_graph", "=", "AGRNN", "(", "bias", "=", "True", ",", "bn", "=", "False", ",", "dropout", "=", "0.3", ",", "multi_attn", "=", "False", ",", "layer", "=", "1", ",", "diff_edge", "=", "False", ",", "global_feat", "=", "args", ".", "global_feat", ")", "\n", "\n", "# segmentation model", "\n", "seg_model", "=", "get_gcnet", "(", "backbone", "=", "'resnet18_model'", ",", "pretrained", "=", "True", ")", "\n", "model", "=", "mtl_model", "(", "seg_model", ".", "pretrained", ",", "scene_graph", ",", "seg_model", ".", "gr_interaction", ",", "seg_model", ".", "gr_decoder", ",", "seg_mode", "=", "args", ".", "seg_mode", ")", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.model_train.model_eval": [[92, 165], ["model.eval", "torch.MultiLabelSoftMarginLoss", "tqdm.tqdm", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.softmax", "utils.scene_graph_eval_matrix.calibration_metrics", "IoU.mean", "print", "print", "print", "scene_graph_logits_list.append", "scene_graph_labels_list.append", "nn.MultiLabelSoftMarginLoss.", "numpy.sum", "model_train.seg_eval_batch", "t_loss.item", "len", "spatial_feat.cuda", "word2vec.cuda", "edge_labels.cuda", "seg_img.cuda", "seg_masks.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "edge_labels.float", "numpy.equal", "scene_graph_criterion.item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.spacing", "numpy.spacing", "numpy.argmax", "numpy.argmax", "interaction.cpu().data.numpy", "edge_labels.cpu().data.numpy", "len", "interaction.cpu", "edge_labels.cpu"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.scene_graph_eval_matrix.calibration_metrics", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.seg_eval_batch"], ["", "def", "model_eval", "(", "args", ",", "model", ",", "validation_dataloader", ")", ":", "\n", "    ", "'''\n    Evaluate function for the MTL model (Segmentation and Scene Graph Performance)\n    Inputs: args, model, val-dataloader\n\n    '''", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# graph", "\n", "scene_graph_criterion", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "scene_graph_edge_count", "=", "0", "\n", "scene_graph_total_acc", "=", "0.0", "\n", "scene_graph_total_loss", "=", "0.0", "\n", "scene_graph_logits_list", "=", "[", "]", "\n", "scene_graph_labels_list", "=", "[", "]", "\n", "\n", "test_seg_loss", "=", "0.0", "\n", "total_inter", ",", "total_union", ",", "total_correct", ",", "total_label", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "for", "data", "in", "tqdm", "(", "validation_dataloader", ")", ":", "\n", "        ", "seg_img", "=", "data", "[", "'img'", "]", "\n", "seg_masks", "=", "data", "[", "'mask'", "]", "\n", "img_loc", "=", "data", "[", "'img_loc'", "]", "\n", "node_num", "=", "data", "[", "'node_num'", "]", "\n", "roi_labels", "=", "data", "[", "'roi_labels'", "]", "\n", "det_boxes", "=", "data", "[", "'det_boxes'", "]", "\n", "edge_labels", "=", "data", "[", "'edge_labels'", "]", "\n", "spatial_feat", "=", "data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "data", "[", "'word2vec'", "]", "\n", "\n", "spatial_feat", ",", "word2vec", ",", "edge_labels", "=", "spatial_feat", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "word2vec", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "edge_labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "seg_img", ",", "seg_masks", "=", "seg_img", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "seg_masks", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "interaction", ",", "seg_outputs", ",", "_", "=", "model", "(", "seg_img", ",", "img_loc", ",", "det_boxes", ",", "node_num", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "\n", "\n", "", "scene_graph_logits_list", ".", "append", "(", "interaction", ")", "\n", "scene_graph_labels_list", ".", "append", "(", "edge_labels", ")", "\n", "\n", "# Loss and accuracy", "\n", "scene_graph_loss", "=", "scene_graph_criterion", "(", "interaction", ",", "edge_labels", ".", "float", "(", ")", ")", "\n", "scene_graph_acc", "=", "np", ".", "sum", "(", "np", ".", "equal", "(", "np", ".", "argmax", "(", "interaction", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", ",", "np", ".", "argmax", "(", "edge_labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "correct", ",", "labeled", ",", "inter", ",", "union", ",", "t_loss", "=", "seg_eval_batch", "(", "seg_outputs", ",", "seg_masks", ")", "\n", "\n", "# Accumulate scene graph loss and acc", "\n", "scene_graph_total_loss", "+=", "scene_graph_loss", ".", "item", "(", ")", "*", "edge_labels", ".", "shape", "[", "0", "]", "\n", "scene_graph_total_acc", "+=", "scene_graph_acc", "\n", "scene_graph_edge_count", "+=", "edge_labels", ".", "shape", "[", "0", "]", "\n", "\n", "total_correct", "+=", "correct", "\n", "total_label", "+=", "labeled", "\n", "total_inter", "+=", "inter", "\n", "total_union", "+=", "union", "\n", "test_seg_loss", "+=", "t_loss", ".", "item", "(", ")", "\n", "\n", "# Graph evaluation", "\n", "", "scene_graph_total_acc", "=", "scene_graph_total_acc", "/", "scene_graph_edge_count", "\n", "scene_graph_total_loss", "=", "scene_graph_total_loss", "/", "len", "(", "validation_dataloader", ")", "\n", "scene_graph_logits_all", "=", "torch", ".", "cat", "(", "scene_graph_logits_list", ")", ".", "cuda", "(", ")", "\n", "scene_graph_labels_all", "=", "torch", ".", "cat", "(", "scene_graph_labels_list", ")", ".", "cuda", "(", ")", "\n", "scene_graph_logits_all", "=", "F", ".", "softmax", "(", "scene_graph_logits_all", ",", "dim", "=", "1", ")", "\n", "scene_graph_map_value", ",", "scene_graph_recall", "=", "calibration_metrics", "(", "scene_graph_logits_all", ",", "scene_graph_labels_all", ")", "\n", "\n", "# Segmentation evaluation", "\n", "pixAcc", "=", "1.0", "*", "total_correct", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "total_label", ")", "\n", "IoU", "=", "1.0", "*", "total_inter", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "total_union", ")", "\n", "mIoU", "=", "IoU", ".", "mean", "(", ")", "\n", "\n", "print", "(", "'================= Evaluation ===================='", ")", "\n", "print", "(", "'Graph        :  acc: %0.4f  map: %0.4f recall: %0.4f  loss: %0.4f}'", "%", "(", "scene_graph_total_acc", ",", "scene_graph_map_value", ",", "scene_graph_recall", ",", "scene_graph_total_loss", ")", ")", "\n", "print", "(", "'Segmentation : Pacc: %0.4f mIoU: %0.4f   loss: %0.4f}'", "%", "(", "pixAcc", ",", "mIoU", ",", "test_seg_loss", "/", "len", "(", "validation_dataloader", ")", ")", ")", "\n", "return", "(", "scene_graph_total_acc", ",", "scene_graph_map_value", ",", "mIoU", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.model_train.train_model": [[167, 387], ["model_train.build_model", "torch.nn.parallel.DistributedDataParallel.set_train_test", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "utils.segmentation_eval_matrix.SegmentationLosses().cuda", "torch.MultiLabelSoftMarginLoss().cuda", "models.surgicalDataset.SurgicalSceneConstants", "models.surgicalDataset.SurgicalSceneDataset", "torch.utils.data.DataLoader", "models.surgicalDataset.SurgicalSceneDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.state_dict", "teacher_model.state_dict.update", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "model_train.build_model", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "build_model.state_dict", "teacher_model.state_dict.update", "build_model.load_state_dict", "build_model.cuda", "build_model.eval", "torch.nn.parallel.DistributedDataParallel.model_type1_insert", "model_train.model_eval", "print", "time.time", "torch.nn.parallel.DistributedDataParallel.train", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.optim.Adam", "torch.utils.data.distributed.DistributedSampler.set_epoch", "tqdm.tqdm", "model_train.get_checkpoint_loc", "build_model.set_train_test", "build_model.model_type3_insert", "build_model.cuda", "build_model.set_train_test", "torch.nn.parallel.DistributedDataParallel.model_type2_insert", "utils.segmentation_eval_matrix.SegmentationLosses", "torch.MultiLabelSoftMarginLoss", "print", "model_train.model_eval", "print", "torch.nn.parallel.DistributedDataParallel.module.feature_encoder.eval", "torch.nn.parallel.DistributedDataParallel.module.gcn_unit.eval", "torch.nn.parallel.DistributedDataParallel.module.seg_decoder.eval", "torch.nn.parallel.DistributedDataParallel.parameters", "print", "torch.nn.parallel.DistributedDataParallel", "SegmentationLosses().cuda.", "nn.MultiLabelSoftMarginLoss().cuda.", "optim.Adam.zero_grad", "loss_total.backward", "optim.Adam.step", "seg_criterion.item", "len", "len", "time.time", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model_train.model_eval", "print", "pretrained_dict.items", "pretrained_dict.items", "torch.nn.parallel.DistributedDataParallel.model_type3_insert", "torch.nn.parallel.DistributedDataParallel.module.gcn_unit.eval", "torch.nn.parallel.DistributedDataParallel.module.seg_decoder.eval", "spatial_feat.cuda", "word2vec.cuda", "edge_labels.cuda", "seg_img.cuda", "seg_masks.cuda", "edge_labels.float", "graph_scene_criterion.item", "torch.nn.parallel.DistributedDataParallel.module.state_dict", "os.path.join", "torch.nn.parallel.DistributedDataParallel.module.scene_graph.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "build_model.", "t_fe_feat.detach.detach", "str", "fe_feat.size", "fe_feat.size", "fe_feat.size", "t_fe_feat.detach.size", "t_fe_feat.detach.size", "t_fe_feat.detach.size", "fe_feat.pow().sum", "t_fe_feat.detach.pow().sum", "fe_feat.pow", "t_fe_feat.detach.pow"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.build_model", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.set_train_test", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.build_model", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.model_type1_insert", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.model_eval", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.model_train.get_checkpoint_loc", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.set_train_test", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.model_type3_insert", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.set_train_test", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.model_type2_insert", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.model_eval", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.model_eval", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.model_type3_insert"], ["", "def", "train_model", "(", "gpu", ",", "args", ")", ":", "\n", "    ", "'''\n    Train function for the MTL model\n    Inputs:  number of gpus per node, args\n\n    '''", "\n", "# Store best value and epoch number", "\n", "best_value", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "best_epoch", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "# Decaying learning rate", "\n", "decay_lr", "=", "args", ".", "lr", "\n", "\n", "# This is placed above the dist.init process, because of the feature_extraction model.", "\n", "model", "=", "build_model", "(", "args", ")", "\n", "\n", "# Load pre-trained weights", "\n", "if", "args", ".", "model", "==", "'amtl-t0'", "or", "args", ".", "model", "==", "'amtl-t3'", "or", "args", ".", "model", "==", "'amtl-t0-ft'", "or", "args", ".", "model", "==", "'amtl-t1'", "or", "args", ".", "model", "==", "'amtl-t2'", ":", "\n", "        ", "print", "(", "'Loading pre-trained weights for Sequential Optimisation'", ")", "\n", "pretrained_model", "=", "torch", ".", "load", "(", "get_checkpoint_loc", "(", "args", ".", "model", ",", "args", ".", "seg_mode", ")", ")", "\n", "pretrained_dict", "=", "pretrained_model", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "(", "k", "in", "model_dict", ")", "and", "(", "model_dict", "[", "k", "]", ".", "shape", "==", "pretrained_dict", "[", "k", "]", ".", "shape", ")", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "# Set training flag for submodules based on train model.", "\n", "", "model", ".", "set_train_test", "(", "args", ".", "model", ")", "\n", "\n", "\n", "if", "args", ".", "KD", ":", "\n", "        ", "teacher_model", "=", "build_model", "(", "args", ",", "load_pretrained", "=", "False", ")", "\n", "# Load pre-trained stl_mtl_model", "\n", "print", "(", "'Preparing teacher model'", ")", "\n", "pretrained_model", "=", "torch", ".", "load", "(", "'/media/mobarak/data/lalith/mtl_scene_understanding_and_segmentation/checkpoints/stl_s_v1/stl_s_v1/epoch_train/checkpoint_D168_epoch.pth'", ")", "\n", "pretrained_dict", "=", "pretrained_model", "[", "'state_dict'", "]", "\n", "model_dict", "=", "teacher_model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "(", "k", "in", "model_dict", ")", "and", "(", "model_dict", "[", "k", "]", ".", "shape", "==", "pretrained_dict", "[", "k", "]", ".", "shape", ")", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "teacher_model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "if", "args", ".", "model", "==", "'mtl-t3'", ":", "\n", "            ", "teacher_model", ".", "set_train_test", "(", "'mtl-t3'", ")", "\n", "teacher_model", ".", "model_type3_insert", "(", ")", "\n", "teacher_model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "teacher_model", ".", "set_train_test", "(", "'stl-s'", ")", "\n", "", "teacher_model", ".", "cuda", "(", ")", "\n", "teacher_model", ".", "eval", "(", ")", "\n", "\n", "# Insert nn layers based on type.", "\n", "", "if", "args", ".", "model", "==", "'amtl-t1'", "or", "args", ".", "model", "==", "'mtl-t1'", ":", "\n", "        ", "model", ".", "model_type1_insert", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'amtl-t2'", "or", "args", ".", "model", "==", "'mtl-t2'", ":", "\n", "        ", "model", ".", "model_type2_insert", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'amtl-t3'", "or", "args", ".", "model", "==", "'mtl-t3'", ":", "\n", "        ", "model", ".", "model_type3_insert", "(", ")", "\n", "\n", "# Priority rank given to node 0 -> current pc, if more nodes -> multiple PCs", "\n", "", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "args", ".", "port", "#8892", "\n", "rank", "=", "args", ".", "nr", "*", "args", ".", "gpus", "+", "gpu", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ",", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "rank", ")", "\n", "\n", "# Set cuda", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu", ")", "\n", "\n", "# Wrap the model with ddp", "\n", "model", ".", "cuda", "(", ")", "\n", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "#, find_unused_parameters=True)", "\n", "\n", "# Define loss function (criterion) and optimizer", "\n", "seg_criterion", "=", "SegmentationLosses", "(", "se_loss", "=", "False", ",", "aux", "=", "False", ",", "nclass", "=", "8", ",", "se_weight", "=", "0.2", ",", "aux_weight", "=", "0.2", ")", ".", "cuda", "(", "gpu", ")", "\n", "graph_scene_criterion", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", ".", "cuda", "(", "gpu", ")", "\n", "\n", "# train and test dataloader", "\n", "train_seq", "=", "[", "[", "2", ",", "3", ",", "4", ",", "6", ",", "7", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "15", "]", "]", "\n", "val_seq", "=", "[", "[", "1", ",", "5", ",", "16", "]", "]", "\n", "data_dir", "=", "[", "'datasets/instruments18/seq_'", "]", "\n", "img_dir", "=", "[", "'/left_frames/'", "]", "\n", "mask_dir", "=", "[", "'/annotations/'", "]", "\n", "dset", "=", "[", "0", "]", "\n", "data_const", "=", "SurgicalSceneConstants", "(", ")", "\n", "\n", "seq", "=", "{", "'train_seq'", ":", "train_seq", ",", "'val_seq'", ":", "val_seq", ",", "'data_dir'", ":", "data_dir", ",", "'img_dir'", ":", "img_dir", ",", "'dset'", ":", "dset", ",", "'mask_dir'", ":", "mask_dir", "}", "\n", "\n", "# Val_dataset only set in 1 GPU", "\n", "val_dataset", "=", "SurgicalSceneDataset", "(", "seq_set", "=", "seq", "[", "'val_seq'", "]", ",", "dset", "=", "seq", "[", "'dset'", "]", ",", "data_dir", "=", "seq", "[", "'data_dir'", "]", ",", "img_dir", "=", "seq", "[", "'img_dir'", "]", ",", "mask_dir", "=", "seq", "[", "'mask_dir'", "]", ",", "istrain", "=", "False", ",", "dataconst", "=", "data_const", ",", "feature_extractor", "=", "args", ".", "feature_extractor", ",", "reduce_size", "=", "False", ")", "\n", "val_dataloader", "=", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "# Train_dataset distributed to 2 GPU", "\n", "train_dataset", "=", "SurgicalSceneDataset", "(", "seq_set", "=", "seq", "[", "'train_seq'", "]", ",", "data_dir", "=", "seq", "[", "'data_dir'", "]", ",", "\n", "img_dir", "=", "seq", "[", "'img_dir'", "]", ",", "mask_dir", "=", "seq", "[", "'mask_dir'", "]", ",", "dset", "=", "seq", "[", "'dset'", "]", ",", "istrain", "=", "True", ",", "dataconst", "=", "data_const", ",", "\n", "feature_extractor", "=", "args", ".", "feature_extractor", ",", "reduce_size", "=", "False", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ",", "num_replicas", "=", "args", ".", "world_size", ",", "rank", "=", "rank", ",", "shuffle", "=", "True", ")", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "# Evaluate the model before start of training", "\n", "if", "gpu", "==", "0", ":", "\n", "        ", "if", "args", ".", "KD", ":", "\n", "            ", "print", "(", "\"=================== Teacher Model=========================\"", ")", "\n", "eval_sc_acc", ",", "eval_sc_map", ",", "eval_seg_miou", "=", "model_eval", "(", "args", ",", "teacher_model", ",", "val_dataloader", ")", "\n", "print", "(", "\"=================== Student Model=========================\"", ")", "\n", "", "eval_sc_acc", ",", "eval_sc_map", ",", "eval_seg_miou", "=", "model_eval", "(", "args", ",", "model", ",", "val_dataloader", ")", "\n", "print", "(", "\"PT SC ACC: [value: {:0.4f}] PT SC mAP: [value: {:0.4f}] PT Seg mIoU: [value: {:0.4f}]\"", ".", "format", "(", "eval_sc_acc", ",", "eval_sc_map", ",", "eval_seg_miou", ")", ")", "\n", "\n", "", "for", "epoch_count", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Set model / submodules in train mode", "\n", "model", ".", "train", "(", ")", "\n", "if", "args", ".", "model", "==", "'stl-sg'", "or", "args", ".", "model", "==", "'amtl-t0'", "or", "args", ".", "model", "==", "'amtl-t3'", ":", "\n", "            ", "model", ".", "module", ".", "feature_encoder", ".", "eval", "(", ")", "\n", "model", ".", "module", ".", "gcn_unit", ".", "eval", "(", ")", "\n", "model", ".", "module", ".", "seg_decoder", ".", "eval", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'stl-sg-wfe'", ":", "\n", "            ", "model", ".", "module", ".", "gcn_unit", ".", "eval", "(", ")", "\n", "model", ".", "module", ".", "seg_decoder", ".", "eval", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'stl-s'", ":", "\n", "            ", "model", ".", "module", ".", "scene_graph", ".", "eval", "(", ")", "\n", "\n", "", "train_seg_loss", "=", "0.0", "\n", "train_scene_graph_loss", "=", "0.0", "\n", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "# Optimizer with decaying learning rate", "\n", "decay_lr", "=", "decay_lr", "*", "0.98", "if", "(", "(", "epoch_count", "+", "1", ")", "%", "10", "==", "0", ")", "else", "decay_lr", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "decay_lr", ",", "weight_decay", "=", "0", ")", "\n", "\n", "train_sampler", ".", "set_epoch", "(", "epoch_count", ")", "\n", "\n", "if", "gpu", "==", "0", ":", "print", "(", "'================= Train ===================='", ")", "\n", "\n", "for", "data", "in", "tqdm", "(", "train_dataloader", ")", ":", "\n", "            ", "seg_img", "=", "data", "[", "'img'", "]", "\n", "seg_masks", "=", "data", "[", "'mask'", "]", "\n", "img_loc", "=", "data", "[", "'img_loc'", "]", "\n", "node_num", "=", "data", "[", "'node_num'", "]", "\n", "roi_labels", "=", "data", "[", "'roi_labels'", "]", "\n", "det_boxes", "=", "data", "[", "'det_boxes'", "]", "\n", "edge_labels", "=", "data", "[", "'edge_labels'", "]", "\n", "spatial_feat", "=", "data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "data", "[", "'word2vec'", "]", "\n", "\n", "spatial_feat", ",", "word2vec", ",", "edge_labels", "=", "spatial_feat", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "word2vec", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "edge_labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "seg_img", ",", "seg_masks", "=", "seg_img", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "seg_masks", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Forward propagation", "\n", "interaction", ",", "seg_outputs", ",", "fe_feat", "=", "model", "(", "seg_img", ",", "img_loc", ",", "det_boxes", ",", "node_num", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ")", "\n", "\n", "# Loss calculation", "\n", "seg_loss", "=", "seg_criterion", "(", "seg_outputs", ",", "seg_masks", ")", "\n", "scene_graph_loss", "=", "graph_scene_criterion", "(", "interaction", ",", "edge_labels", ".", "float", "(", ")", ")", "\n", "\n", "# KD-Loss", "\n", "if", "args", ".", "KD", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "_", ",", "_", ",", "t_fe_feat", "=", "teacher_model", "(", "seg_img", ",", "img_loc", ",", "det_boxes", ",", "node_num", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "\n", "t_fe_feat", "=", "t_fe_feat", ".", "detach", "(", ")", "\n", "t_fe_feat", "=", "t_fe_feat", "/", "(", "t_fe_feat", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "+", "1e-6", ")", ".", "sqrt", "(", ")", ".", "view", "(", "t_fe_feat", ".", "size", "(", "0", ")", ",", "1", ",", "t_fe_feat", ".", "size", "(", "2", ")", ",", "t_fe_feat", ".", "size", "(", "3", ")", ")", "\n", "\n", "\n", "", "fe_feat", "=", "fe_feat", "\n", "fe_feat", "=", "fe_feat", "/", "(", "fe_feat", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "+", "1e-6", ")", ".", "sqrt", "(", ")", ".", "view", "(", "fe_feat", ".", "size", "(", "0", ")", ",", "1", ",", "fe_feat", ".", "size", "(", "2", ")", ",", "fe_feat", ".", "size", "(", "3", ")", ")", "\n", "dist_loss", "=", "(", "fe_feat", "-", "t_fe_feat", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "\n", "", "if", "args", ".", "model", "==", "'stl-s'", ":", "\n", "                ", "loss_total", "=", "seg_loss", "\n", "", "elif", "args", ".", "model", "==", "'stl-sg'", "or", "args", ".", "model", "==", "'stl-sg-wfe'", "or", "args", ".", "model", "==", "'amtl-t0'", "or", "args", ".", "model", "==", "'amtl-t3'", ":", "\n", "                ", "loss_total", "=", "scene_graph_loss", "\n", "", "elif", "args", ".", "KD", ":", "\n", "                ", "loss_total", "=", "(", "0.4", "*", "scene_graph_loss", ")", "+", "seg_loss", "+", "dist_loss", "\n", "", "else", ":", "\n", "                ", "loss_total", "=", "(", "0.4", "*", "scene_graph_loss", ")", "+", "(", "0.6", "*", "seg_loss", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_total", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_seg_loss", "+=", "seg_loss", ".", "item", "(", ")", "\n", "train_scene_graph_loss", "+=", "scene_graph_loss", ".", "item", "(", ")", "*", "edge_labels", ".", "shape", "[", "0", "]", "\n", "\n", "# calculate the loss and accuracy of each epoch", "\n", "", "train_seg_loss", "+=", "train_seg_loss", "/", "len", "(", "train_dataloader", ")", "\n", "train_scene_graph_loss", "=", "train_scene_graph_loss", "/", "len", "(", "train_dataloader", ")", "\n", "\n", "if", "gpu", "==", "0", ":", "\n", "            ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Train Epoch: {}/{} lr: {:0.9f}  Graph_loss: {:0.4f} Segmentation_Loss: {:0.4f} Execution time: {:0.4f}\"", ".", "format", "(", "epoch_count", "+", "1", ",", "args", ".", "epoch", ",", "decay_lr", ",", "train_scene_graph_loss", ",", "train_seg_loss", ",", "(", "end_time", "-", "start_time", ")", ")", ")", "\n", "\n", "#if epoch_count % 2 == 0:", "\n", "# save model", "\n", "# if epoch_loss<0.0405 or epoch_count % args.save_every == (args.save_every - 1):", "\n", "checkpoint", "=", "{", "'lr'", ":", "args", ".", "lr", ",", "'b_s'", ":", "args", ".", "batch_size", ",", "'bias'", ":", "args", ".", "bias", ",", "'bn'", ":", "args", ".", "bn", ",", "'dropout'", ":", "args", ".", "drop_prob", ",", "\n", "'layers'", ":", "args", ".", "layers", ",", "'multi_head'", ":", "args", ".", "multi_attn", ",", "\n", "'diff_edge'", ":", "args", ".", "diff_edge", ",", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", "}", "\n", "\n", "save_name", "=", "\"checkpoint_D1\"", "+", "str", "(", "epoch_count", "+", "1", ")", "+", "'_epoch.pth'", "\n", "torch", ".", "save", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "exp_ver", ",", "'epoch_train'", ",", "save_name", ")", ")", "\n", "\n", "eval_sc_acc", ",", "eval_sc_map", ",", "eval_seg_miou", "=", "model_eval", "(", "args", ",", "model", ",", "val_dataloader", ")", "\n", "if", "eval_sc_acc", ">", "best_value", "[", "0", "]", ":", "\n", "                ", "best_value", "[", "0", "]", "=", "eval_sc_acc", "\n", "best_epoch", "[", "0", "]", "=", "epoch_count", "+", "1", "\n", "", "if", "eval_sc_map", ">", "best_value", "[", "1", "]", ":", "\n", "                ", "best_value", "[", "1", "]", "=", "eval_sc_map", "\n", "best_epoch", "[", "1", "]", "=", "epoch_count", "+", "1", "\n", "", "if", "eval_seg_miou", ">", "best_value", "[", "2", "]", ":", "\n", "                ", "best_value", "[", "2", "]", "=", "eval_seg_miou", "\n", "best_epoch", "[", "2", "]", "=", "epoch_count", "+", "1", "\n", "", "print", "(", "\"Best SC Acc: [Epoch: {} value: {:0.4f}] Best SC mAP: [Epoch: {} value: {:0.4f}] Best Seg mIoU: [Epoch: {} value: {:0.4f}]\"", ".", "format", "(", "best_epoch", "[", "0", "]", ",", "best_value", "[", "0", "]", ",", "best_epoch", "[", "1", "]", ",", "best_value", "[", "1", "]", ",", "best_epoch", "[", "2", "]", ",", "best_value", "[", "2", "]", ")", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.label_to_index": [[33, 40], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "map_dict.index"], "function", ["None"], ["def", "label_to_index", "(", "lbl", ")", ":", "\n", "    ", "'''\n    Label to index mapping\n    Input: class label\n    Output: class index\n    '''", "\n", "return", "torch", ".", "tensor", "(", "map_dict", ".", "index", "(", "lbl", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.index_to_label": [[42, 49], ["None"], "function", ["None"], ["", "def", "index_to_label", "(", "index", ")", ":", "\n", "    ", "'''\n    Index to label mapping\n    Input: class index\n    Output: class label\n    '''", "\n", "return", "map_dict", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.seed_everything": [[52, 62], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "str"], "function", ["None"], ["", "def", "seed_everything", "(", "seed", "=", "27", ")", ":", "\n", "    ", "'''\n    Set random seed for reproducible experiments\n    Inputs: seed number \n    '''", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.seg_eval_batch": [[64, 73], ["utils.segmentation_eval_matrix.SegmentationLosses", "utils.segmentation_eval_matrix.SegmentationLosses.", "utils.segmentation_eval_matrix.batch_pix_accuracy", "utils.segmentation_eval_matrix.batch_intersection_union"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.batch_pix_accuracy", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.batch_intersection_union"], ["", "def", "seg_eval_batch", "(", "seg_output", ",", "target", ")", ":", "\n", "    ", "'''\n    Calculate segmentation loss, pixel acc and IoU\n    '''", "\n", "seg_criterion", "=", "SegmentationLosses", "(", "se_loss", "=", "False", ",", "aux", "=", "False", ",", "nclass", "=", "8", ",", "se_weight", "=", "0.2", ",", "aux_weight", "=", "0.2", ")", "\n", "loss", "=", "seg_criterion", "(", "seg_output", ",", "target", ")", "\n", "correct", ",", "labeled", "=", "batch_pix_accuracy", "(", "seg_output", ".", "data", ",", "target", ")", "\n", "inter", ",", "union", "=", "batch_intersection_union", "(", "seg_output", ".", "data", ",", "target", ",", "8", ")", "# 8 is num classes", "\n", "return", "correct", ",", "labeled", ",", "inter", ",", "union", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.build_model": [[75, 93], ["models.scene_graph.AGRNN", "models.segmentation_model.get_gcnet", "models.mtl_model.mtl_model", "models.mtl_model.mtl_model.to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.get_gcnet"], ["", "def", "build_model", "(", "args", ")", ":", "\n", "    ", "'''\n    Build MTL model\n    1) Scene Graph Understanding Model\n    2) Segmentation Model : Encoder, Reasoning unit, Decoder\n\n    Inputs: args\n    '''", "\n", "\n", "'''==== Graph model ===='''", "\n", "# graph model", "\n", "scene_graph", "=", "AGRNN", "(", "bias", "=", "True", ",", "bn", "=", "False", ",", "dropout", "=", "0.3", ",", "multi_attn", "=", "False", ",", "layer", "=", "1", ",", "diff_edge", "=", "False", ",", "global_feat", "=", "args", ".", "global_feat", ")", "\n", "\n", "# segmentation model", "\n", "seg_model", "=", "get_gcnet", "(", "backbone", "=", "'resnet18_model'", ",", "pretrained", "=", "False", ")", "\n", "model", "=", "mtl_model", "(", "seg_model", ".", "pretrained", ",", "scene_graph", ",", "seg_model", ".", "gr_interaction", ",", "seg_model", ".", "gr_decoder", ",", "seg_mode", "=", "args", ".", "seg_mode", ")", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.model_eval": [[96, 186], ["model.eval", "numpy.zeros", "torch.MultiLabelSoftMarginLoss", "tqdm.tqdm", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.softmax", "utils.scene_graph_eval_matrix.calibration_metrics", "IoU.mean", "print", "print", "print", "print", "enumerate", "print", "print", "scene_graph_logits_list.append", "scene_graph_labels_list.append", "nn.MultiLabelSoftMarginLoss.", "numpy.sum", "evaluation.seg_eval_batch", "t_loss.item", "len", "evaluation.index_to_label", "m_vals.append", "class_wise_IoU.append", "numpy.mean", "tabulate.tabulate", "spatial_feat.cuda", "word2vec.cuda", "edge_labels.cuda", "seg_img.cuda", "seg_masks.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "edge_labels.float", "numpy.equal", "scene_graph_criterion.item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.spacing", "numpy.spacing", "numpy.array", "numpy.argmax", "numpy.argmax", "interaction.cpu().data.numpy", "edge_labels.cpu().data.numpy", "len", "interaction.cpu", "edge_labels.cpu"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.scene_graph_eval_matrix.calibration_metrics", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.seg_eval_batch", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.None.evaluation.index_to_label"], ["", "def", "model_eval", "(", "model", ",", "validation_dataloader", ",", "nclass", "=", "8", ")", ":", "\n", "    ", "'''\n    Evaluate MTL\n    '''", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "class_values", "=", "np", ".", "zeros", "(", "nclass", ")", "\n", "\n", "# graph", "\n", "scene_graph_criterion", "=", "nn", ".", "MultiLabelSoftMarginLoss", "(", ")", "\n", "scene_graph_edge_count", "=", "0", "\n", "scene_graph_total_acc", "=", "0.0", "\n", "scene_graph_total_loss", "=", "0.0", "\n", "scene_graph_logits_list", "=", "[", "]", "\n", "scene_graph_labels_list", "=", "[", "]", "\n", "\n", "test_seg_loss", "=", "0.0", "\n", "total_inter", ",", "total_union", ",", "total_correct", ",", "total_label", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "\n", "for", "data", "in", "tqdm", "(", "validation_dataloader", ")", ":", "\n", "        ", "seg_img", "=", "data", "[", "'img'", "]", "\n", "seg_masks", "=", "data", "[", "'mask'", "]", "\n", "img_loc", "=", "data", "[", "'img_loc'", "]", "\n", "node_num", "=", "data", "[", "'node_num'", "]", "\n", "roi_labels", "=", "data", "[", "'roi_labels'", "]", "\n", "det_boxes", "=", "data", "[", "'det_boxes'", "]", "\n", "edge_labels", "=", "data", "[", "'edge_labels'", "]", "\n", "spatial_feat", "=", "data", "[", "'spatial_feat'", "]", "\n", "word2vec", "=", "data", "[", "'word2vec'", "]", "\n", "\n", "spatial_feat", ",", "word2vec", ",", "edge_labels", "=", "spatial_feat", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "word2vec", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "edge_labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "seg_img", ",", "seg_masks", "=", "seg_img", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "seg_masks", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "interaction", ",", "seg_outputs", ",", "_", "=", "model", "(", "seg_img", ",", "img_loc", ",", "det_boxes", ",", "node_num", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "\n", "\n", "", "scene_graph_logits_list", ".", "append", "(", "interaction", ")", "\n", "scene_graph_labels_list", ".", "append", "(", "edge_labels", ")", "\n", "\n", "# loss and accuracy", "\n", "scene_graph_loss", "=", "scene_graph_criterion", "(", "interaction", ",", "edge_labels", ".", "float", "(", ")", ")", "\n", "scene_graph_acc", "=", "np", ".", "sum", "(", "np", ".", "equal", "(", "np", ".", "argmax", "(", "interaction", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", ",", "np", ".", "argmax", "(", "edge_labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "correct", ",", "labeled", ",", "inter", ",", "union", ",", "t_loss", "=", "seg_eval_batch", "(", "seg_outputs", ",", "seg_masks", ")", "\n", "\n", "# accumulate scene graph loss and acc", "\n", "scene_graph_total_loss", "+=", "scene_graph_loss", ".", "item", "(", ")", "*", "edge_labels", ".", "shape", "[", "0", "]", "\n", "scene_graph_total_acc", "+=", "scene_graph_acc", "\n", "scene_graph_edge_count", "+=", "edge_labels", ".", "shape", "[", "0", "]", "\n", "\n", "total_correct", "+=", "correct", "\n", "total_label", "+=", "labeled", "\n", "total_inter", "+=", "inter", "\n", "total_union", "+=", "union", "\n", "test_seg_loss", "+=", "t_loss", ".", "item", "(", ")", "\n", "\n", "# graph evaluation", "\n", "", "scene_graph_total_acc", "=", "scene_graph_total_acc", "/", "scene_graph_edge_count", "\n", "scene_graph_total_loss", "=", "scene_graph_total_loss", "/", "len", "(", "validation_dataloader", ")", "\n", "scene_graph_logits_all", "=", "torch", ".", "cat", "(", "scene_graph_logits_list", ")", ".", "cuda", "(", ")", "\n", "scene_graph_labels_all", "=", "torch", ".", "cat", "(", "scene_graph_labels_list", ")", ".", "cuda", "(", ")", "\n", "scene_graph_logits_all", "=", "F", ".", "softmax", "(", "scene_graph_logits_all", ",", "dim", "=", "1", ")", "\n", "scene_graph_map_value", ",", "scene_graph_recall", "=", "calibration_metrics", "(", "scene_graph_logits_all", ",", "scene_graph_labels_all", ")", "\n", "\n", "# segmentation evaluation", "\n", "pixAcc", "=", "1.0", "*", "total_correct", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "total_label", ")", "\n", "IoU", "=", "1.0", "*", "total_inter", "/", "(", "np", ".", "spacing", "(", "1", ")", "+", "total_union", ")", "\n", "class_values", "+=", "IoU", "\n", "mIoU", "=", "IoU", ".", "mean", "(", ")", "\n", "\n", "print", "(", "'\\n================= Evaluation ===================='", ")", "\n", "print", "(", "'Graph        :  acc: %0.4f  map: %0.4f recall: %0.4f  loss: %0.4f}'", "%", "(", "scene_graph_total_acc", ",", "scene_graph_map_value", ",", "scene_graph_recall", ",", "scene_graph_total_loss", ")", ")", "\n", "print", "(", "'Segmentation : Pacc: %0.4f mIoU: %0.4f   loss: %0.4f}'", "%", "(", "pixAcc", ",", "mIoU", ",", "test_seg_loss", "/", "len", "(", "validation_dataloader", ")", ")", ")", "\n", "\n", "print", "(", "'\\n================= Class-wise IoU ===================='", ")", "\n", "class_wise_IoU", "=", "[", "]", "\n", "m_vals", "=", "[", "]", "\n", "for", "idx", ",", "value", "in", "enumerate", "(", "class_values", ")", ":", "\n", "        ", "class_name", "=", "index_to_label", "(", "idx", ")", "\n", "pair", "=", "[", "class_name", ",", "value", "]", "\n", "m_vals", ".", "append", "(", "value", ")", "\n", "class_wise_IoU", ".", "append", "(", "pair", ")", "\n", "\n", "", "print", "(", "\"Mean Value: \"", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "m_vals", ")", ")", ",", "\"\\n\"", ")", "\n", "\n", "print", "(", "tabulate", "(", "class_wise_IoU", ",", "\n", "headers", "=", "[", "'Class'", ",", "'IoU'", "]", ",", "tablefmt", "=", "'orgtbl'", ")", ")", "\n", "\n", "return", "(", "scene_graph_total_acc", ",", "scene_graph_map_value", ",", "mIoU", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.NumpyAwareJSONEncoder.default": [[90, 115], ["isinstance", "json.JSONEncoder.default", "isinstance", "obj.tolist", "int", "isinstance", "io.NumpyAwareJSONEncoder.default", "int", "isinstance", "range", "int", "isinstance", "float", "isinstance", "float", "isinstance", "float", "isinstance", "int", "isinstance", "int", "isinstance", "int"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.NumpyAwareJSONEncoder.default", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.NumpyAwareJSONEncoder.default"], ["    ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "obj", ".", "ndim", "==", "1", ":", "\n", "                ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "[", "self", ".", "default", "(", "obj", "[", "i", "]", ")", "for", "i", "in", "range", "(", "obj", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int64", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int32", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "int16", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float64", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float32", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "float16", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "uint64", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "uint32", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "np", ".", "uint16", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.JsonSerializableClass.to_json": [[118, 129], ["json.dumps", "json.loads", "io.dump_json_object"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.dump_json_object"], ["    ", "def", "to_json", "(", "self", ",", "json_filename", "=", "None", ")", ":", "\n", "        ", "serialized_dict", "=", "json", ".", "dumps", "(", "\n", "self", ",", "\n", "default", "=", "lambda", "o", ":", "o", ".", "__dict__", ",", "\n", "sort_keys", "=", "True", ",", "\n", "indent", "=", "4", ")", "\n", "serialized_dict", "=", "json", ".", "loads", "(", "serialized_dict", ")", "\n", "if", "json_filename", "is", "not", "None", ":", "\n", "            ", "dump_json_object", "(", "serialized_dict", ",", "json_filename", ")", "\n", "\n", "", "return", "serialized_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.JsonSerializableClass.from_json": [[130, 135], ["type", "io.load_json_object", "load_json_object.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.load_json_object"], ["", "def", "from_json", "(", "self", ",", "json_filename", ")", ":", "\n", "        ", "assert", "(", "type", "(", "json_filename", "is", "dict", ")", ")", ",", "'Use from dict instead'", "\n", "dict_to_restore", "=", "load_json_object", "(", "json_filename", ")", "\n", "for", "attr_name", ",", "attr_value", "in", "dict_to_restore", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "attr_name", ",", "attr_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.JsonSerializableClass.from_dict": [[136, 139], ["dict_to_restore.items", "setattr"], "methods", ["None"], ["", "", "def", "from_dict", "(", "self", ",", "dict_to_restore", ")", ":", "\n", "        ", "for", "attr_name", ",", "attr_value", "in", "dict_to_restore", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "attr_name", ",", "attr_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.WritableToFile.to_file": [[142, 145], ["open", "file.write", "io.WritableToFile.__str__"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write"], ["    ", "def", "to_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "self", ".", "__str__", "(", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.load_pickle_object": [[9, 16], ["io.read", "pickle.loads", "pickle.loads", "gzip.decompress"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.read"], ["def", "load_pickle_object", "(", "file_name", ",", "compress", "=", "True", ")", ":", "\n", "    ", "data", "=", "read", "(", "file_name", ")", "\n", "if", "compress", ":", "\n", "        ", "load_object", "=", "pickle", ".", "loads", "(", "gzip", ".", "decompress", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "        ", "load_object", "=", "pickle", ".", "loads", "(", "data", ")", "\n", "", "return", "load_object", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.dump_pickle_object": [[18, 24], ["pickle.dumps", "io.write", "io.write", "gzip.compress"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write"], ["", "def", "dump_pickle_object", "(", "dump_object", ",", "file_name", ",", "compress", "=", "True", ",", "compress_level", "=", "9", ")", ":", "\n", "    ", "data", "=", "pickle", ".", "dumps", "(", "dump_object", ")", "\n", "if", "compress", ":", "\n", "        ", "write", "(", "file_name", ",", "gzip", ".", "compress", "(", "data", ",", "compresslevel", "=", "compress_level", ")", ")", "\n", "", "else", ":", "\n", "        ", "write", "(", "file_name", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.load_json_object": [[26, 31], ["json.loads", "json.loads", "gzip.decompress().decode", "io.read", "gzip.decompress", "io.read"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.read", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.read"], ["", "", "def", "load_json_object", "(", "file_name", ",", "compress", "=", "False", ")", ":", "\n", "    ", "if", "compress", ":", "\n", "        ", "return", "json", ".", "loads", "(", "gzip", ".", "decompress", "(", "read", "(", "file_name", ")", ")", ".", "decode", "(", "'utf8'", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "json", ".", "loads", "(", "read", "(", "file_name", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.dump_json_object": [[33, 40], ["json.dumps", "io.write", "io.write", "gzip.compress", "json.dumps.encode"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write"], ["", "", "def", "dump_json_object", "(", "dump_object", ",", "file_name", ",", "compress", "=", "False", ",", "indent", "=", "4", ")", ":", "\n", "    ", "data", "=", "json", ".", "dumps", "(", "\n", "dump_object", ",", "cls", "=", "NumpyAwareJSONEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "indent", ")", "\n", "if", "compress", ":", "\n", "        ", "write", "(", "file_name", ",", "gzip", ".", "compress", "(", "data", ".", "encode", "(", "'utf8'", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "write", "(", "file_name", ",", "data", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.dumps_json_object": [[42, 46], ["json.dumps"], "function", ["None"], ["", "", "def", "dumps_json_object", "(", "dump_object", ",", "indent", "=", "4", ")", ":", "\n", "    ", "data", "=", "json", ".", "dumps", "(", "\n", "dump_object", ",", "cls", "=", "NumpyAwareJSONEncoder", ",", "sort_keys", "=", "True", ",", "indent", "=", "indent", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.load_mat_object": [[48, 50], ["scipy.io.loadmat"], "function", ["None"], ["", "def", "load_mat_object", "(", "file_name", ")", ":", "\n", "    ", "return", "scipy", ".", "io", ".", "loadmat", "(", "file_name", "=", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.load_yaml_object": [[52, 54], ["yaml.load", "io.read"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.read"], ["", "def", "load_yaml_object", "(", "file_name", ")", ":", "\n", "    ", "return", "yaml", ".", "load", "(", "read", "(", "file_name", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.read": [[56, 59], ["open", "f.read"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.read"], ["", "def", "read", "(", "file_name", ",", "mode", "=", "'rb'", ")", ":", "\n", "    ", "with", "open", "(", "file_name", ",", "mode", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write": [[61, 64], ["open", "f.write"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write"], ["", "", "def", "write", "(", "file_name", ",", "data", ",", "mode", "=", "'wb'", ")", ":", "\n", "    ", "with", "open", "(", "file_name", ",", "mode", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.serialize_object": [[66, 71], ["json.dumps", "pickle.dumps"], "function", ["None"], ["", "", "def", "serialize_object", "(", "in_obj", ",", "method", "=", "'json'", ")", ":", "\n", "    ", "if", "method", "==", "'json'", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "in_obj", ")", "\n", "", "else", ":", "\n", "        ", "return", "pickle", ".", "dumps", "(", "in_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.deserialize_object": [[73, 78], ["json.loads", "pickle.loads"], "function", ["None"], ["", "", "def", "deserialize_object", "(", "obj_str", ",", "method", "=", "'json'", ")", ":", "\n", "    ", "if", "method", "==", "'json'", ":", "\n", "        ", "return", "json", ".", "loads", "(", "obj_str", ")", "\n", "", "else", ":", "\n", "        ", "return", "pickle", ".", "loads", "(", "obj_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.mkdir_if_not_exists": [[80, 87], ["os.path.exists", "os.makedirs", "os.mkdir"], "function", ["None"], ["", "", "def", "mkdir_if_not_exists", "(", "dir_name", ",", "recursive", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "return", "\n", "", "if", "recursive", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.vis_tool.vis_img": [[13, 68], ["PIL.ImageDraw.Draw", "PIL.ImageFont.truetype", "len", "len", "len", "range", "range", "random.choice", "random.choice", "random.choice", "ImageFont.truetype.getsize", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "range", "numpy.where", "numpy.arange", "numpy.arange", "numpy.arange", "list", "numpy.argmax", "random.choice", "random.choice", "random.choice", "max", "max", "max", "max", "ImageDraw.Draw.line", "ImageDraw.Draw.text", "numpy.arange", "numpy.arange", "numpy.arange", "int", "int", "min", "int", "int", "min", "int", "int", "min", "int", "int", "min"], "function", ["None"], ["def", "vis_img", "(", "img", ",", "node_classes", ",", "bboxs", ",", "det_action", ",", "data_const", ",", "score_thresh", "=", "0.7", ")", ":", "\n", "\n", "    ", "Drawer", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "line_width", "=", "3", "\n", "outline", "=", "'#FF0000'", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "font", "=", "'/usr/share/fonts/truetype/freefont/FreeMono.ttf'", ",", "size", "=", "25", ")", "\n", "\n", "im_w", ",", "im_h", "=", "img", ".", "size", "\n", "node_num", "=", "len", "(", "node_classes", ")", "\n", "edge_num", "=", "len", "(", "det_action", ")", "\n", "tissue_num", "=", "len", "(", "np", ".", "where", "(", "node_classes", "==", "1", ")", "[", "0", "]", ")", "\n", "\n", "for", "node", "in", "range", "(", "node_num", ")", ":", "\n", "\n", "        ", "r_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "g_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "b_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "\n", "text", "=", "data_const", ".", "instrument_classes", "[", "node_classes", "[", "node", "]", "]", "\n", "h", ",", "w", "=", "font", ".", "getsize", "(", "text", ")", "\n", "Drawer", ".", "rectangle", "(", "list", "(", "bboxs", "[", "node", "]", ")", ",", "outline", "=", "outline", ",", "width", "=", "line_width", ")", "\n", "Drawer", ".", "text", "(", "xy", "=", "(", "bboxs", "[", "node", "]", "[", "0", "]", ",", "bboxs", "[", "node", "]", "[", "1", "]", "-", "w", "-", "1", ")", ",", "text", "=", "text", ",", "font", "=", "font", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ")", "\n", "\n", "", "edge_idx", "=", "0", "\n", "\n", "for", "tissue", "in", "range", "(", "tissue_num", ")", ":", "\n", "        ", "for", "instrument", "in", "range", "(", "tissue", "+", "1", ",", "node_num", ")", ":", "\n", "\n", "#action_idx = np.where(det_action[edge_idx] > score_thresh)[0]", "\n", "            ", "action_idx", "=", "np", ".", "argmax", "(", "det_action", "[", "edge_idx", "]", ")", "\n", "#             print('det_action', det_action[edge_idx])", "\n", "#             print('action_idx',action_idx)", "\n", "\n", "text", "=", "data_const", ".", "action_classes", "[", "action_idx", "]", "\n", "r_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "g_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "b_color", "=", "random", ".", "choice", "(", "np", ".", "arange", "(", "256", ")", ")", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bboxs", "[", "tissue", "]", "\n", "x1_", ",", "y1_", ",", "x2_", ",", "y2_", "=", "bboxs", "[", "instrument", "]", "\n", "\n", "c0", "=", "int", "(", "0.5", "*", "x1", ")", "+", "int", "(", "0.5", "*", "x2", ")", "\n", "c0", "=", "max", "(", "0", ",", "min", "(", "c0", ",", "im_w", "-", "1", ")", ")", "\n", "r0", "=", "int", "(", "0.5", "*", "y1", ")", "+", "int", "(", "0.5", "*", "y2", ")", "\n", "r0", "=", "max", "(", "0", ",", "min", "(", "r0", ",", "im_h", "-", "1", ")", ")", "\n", "c1", "=", "int", "(", "0.5", "*", "x1_", ")", "+", "int", "(", "0.5", "*", "x2_", ")", "\n", "c1", "=", "max", "(", "0", ",", "min", "(", "c1", ",", "im_w", "-", "1", ")", ")", "\n", "r1", "=", "int", "(", "0.5", "*", "y1_", ")", "+", "int", "(", "0.5", "*", "y2_", ")", "\n", "r1", "=", "max", "(", "0", ",", "min", "(", "r1", ",", "im_h", "-", "1", ")", ")", "\n", "Drawer", ".", "line", "(", "(", "(", "c0", ",", "r0", ")", ",", "(", "c1", ",", "r1", ")", ")", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ",", "width", "=", "3", ")", "\n", "Drawer", ".", "text", "(", "xy", "=", "(", "c1", ",", "r1", ")", ",", "text", "=", "text", ",", "font", "=", "font", ",", "fill", "=", "(", "r_color", ",", "g_color", ",", "b_color", ")", ")", "\n", "\n", "edge_idx", "+=", "1", "\n", "\n", "", "", "return", "img", "", "", ""]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.utils.download_from_url": [[3, 28], ["print", "requests.Session", "requests.Session.get", "session.get.cookies.items", "print", "requests.get", "k.startswith", "requests.Session.get", "open", "session.get.iter_content", "open", "file.write", "f.write"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.io.write"], ["def", "download_from_url", "(", "url", ",", "path", ")", ":", "\n", "    ", "\"\"\"Download file, with logic (from tensor2tensor) for Google Drive\"\"\"", "\n", "if", "'drive.google.com'", "not", "in", "url", ":", "\n", "        ", "print", "(", "'Downloading %s; may take a few minutes'", "%", "url", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "headers", "=", "{", "'User-Agent'", ":", "'Mozilla/5.0'", "}", ")", "\n", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "r", ".", "content", ")", "\n", "", "return", "\n", "", "print", "(", "'Downloading from Google Drive; may take a few minutes'", ")", "\n", "confirm_token", "=", "None", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "response", "=", "session", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "for", "k", ",", "v", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "\"download_warning\"", ")", ":", "\n", "            ", "confirm_token", "=", "v", "\n", "\n", "", "", "if", "confirm_token", ":", "\n", "        ", "url", "=", "url", "+", "\"&confirm=\"", "+", "confirm_token", "\n", "response", "=", "session", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "\n", "", "chunk_size", "=", "16", "*", "1024", "\n", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", ")", ":", "\n", "            ", "if", "chunk", ":", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.SegmentationLosses.__init__": [[54, 64], ["torch.CrossEntropyLoss.__init__", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["    ", "def", "__init__", "(", "self", ",", "se_loss", "=", "False", ",", "se_weight", "=", "0.2", ",", "nclass", "=", "-", "1", ",", "\n", "aux", "=", "False", ",", "aux_weight", "=", "0.4", ",", "weight", "=", "None", ",", "\n", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "__init__", "(", "weight", ",", "None", ",", "ignore_index", ")", "\n", "self", ".", "se_loss", "=", "se_loss", "\n", "self", ".", "aux", "=", "aux", "\n", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "se_weight", "=", "se_weight", "\n", "self", ".", "aux_weight", "=", "aux_weight", "\n", "self", ".", "bceloss", "=", "nn", ".", "BCELoss", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.SegmentationLosses.forward": [[65, 88], ["super().forward", "tuple", "super().forward", "super().forward", "tuple", "segmentation_eval_matrix.SegmentationLosses._get_batch_label_vector().type_as", "super().forward", "segmentation_eval_matrix.SegmentationLosses.bceloss", "tuple", "segmentation_eval_matrix.SegmentationLosses._get_batch_label_vector().type_as", "super().forward", "super().forward", "segmentation_eval_matrix.SegmentationLosses.bceloss", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "segmentation_eval_matrix.SegmentationLosses._get_batch_label_vector", "segmentation_eval_matrix.SegmentationLosses._get_batch_label_vector"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.forward", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.forward", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.forward", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.forward", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.forward", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.forward", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.SegmentationLosses._get_batch_label_vector", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.SegmentationLosses._get_batch_label_vector"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "if", "not", "self", ".", "se_loss", "and", "not", "self", ".", "aux", ":", "\n", "            ", "return", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "*", "inputs", ")", "\n", "", "elif", "not", "self", ".", "se_loss", ":", "\n", "            ", "pred1", ",", "pred2", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "loss1", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred1", ",", "target", ")", "\n", "loss2", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred2", ",", "target", ")", "\n", "return", "loss1", "+", "self", ".", "aux_weight", "*", "loss2", "\n", "", "elif", "not", "self", ".", "aux", ":", "\n", "            ", "pred", ",", "se_pred", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "se_target", "=", "self", ".", "_get_batch_label_vector", "(", "\n", "target", ",", "nclass", "=", "self", ".", "nclass", ")", ".", "type_as", "(", "pred", ")", "\n", "loss1", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred", ",", "target", ")", "\n", "loss2", "=", "self", ".", "bceloss", "(", "torch", ".", "sigmoid", "(", "se_pred", ")", ",", "se_target", ")", "\n", "return", "loss1", "+", "self", ".", "se_weight", "*", "loss2", "\n", "", "else", ":", "\n", "            ", "pred1", ",", "se_pred", ",", "pred2", ",", "target", "=", "tuple", "(", "inputs", ")", "\n", "se_target", "=", "self", ".", "_get_batch_label_vector", "(", "\n", "target", ",", "nclass", "=", "self", ".", "nclass", ")", ".", "type_as", "(", "pred1", ")", "\n", "loss1", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred1", ",", "target", ")", "\n", "loss2", "=", "super", "(", "SegmentationLosses", ",", "self", ")", ".", "forward", "(", "pred2", ",", "target", ")", "\n", "loss3", "=", "self", ".", "bceloss", "(", "torch", ".", "sigmoid", "(", "se_pred", ")", ",", "se_target", ")", "\n", "return", "loss1", "+", "self", ".", "aux_weight", "*", "loss2", "+", "self", ".", "se_weight", "*", "loss3", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.SegmentationLosses._get_batch_label_vector": [[89, 101], ["target.size", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "target[].cpu().data.float", "target[].cpu"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_batch_label_vector", "(", "target", ",", "nclass", ")", ":", "\n", "# target is a 3D Variable BxHxW, output is 2D BxnClass", "\n", "        ", "batch", "=", "target", ".", "size", "(", "0", ")", "\n", "tvect", "=", "Variable", "(", "torch", ".", "zeros", "(", "batch", ",", "nclass", ")", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "hist", "=", "torch", ".", "histc", "(", "target", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ".", "float", "(", ")", ",", "\n", "bins", "=", "nclass", ",", "min", "=", "0", ",", "\n", "max", "=", "nclass", "-", "1", ")", "\n", "vect", "=", "hist", ">", "0", "\n", "tvect", "[", "i", "]", "=", "vect", "\n", "", "return", "tvect", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.batch_pix_accuracy": [[9, 25], ["torch.max", "torch.max", "numpy.sum", "numpy.sum", "predict.cpu().numpy().astype", "target.cpu().numpy().astype", "predict.cpu().numpy", "target.cpu().numpy", "predict.cpu", "target.cpu"], "function", ["None"], ["def", "batch_pix_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"Batch Pixel Accuracy\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n    \"\"\"", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "target", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "target", ">", "0", ")", ")", "\n", "assert", "pixel_correct", "<=", "pixel_labeled", ",", "\"Correct area should be smaller than Labeled\"", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.batch_intersection_union": [[27, 51], ["torch.max", "torch.max", "numpy.histogram", "numpy.histogram", "numpy.histogram", "predict.cpu().numpy().astype", "target.cpu().numpy().astype", "predict.cpu().numpy", "target.cpu().numpy", "predict.cpu", "target.cpu"], "function", ["None"], ["", "def", "batch_intersection_union", "(", "output", ",", "target", ",", "nclass", ")", ":", "\n", "    ", "\"\"\"Batch Intersection of Union\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n        nclass: number of categories (int)\n    \"\"\"", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "mini", "=", "1", "\n", "maxi", "=", "nclass", "\n", "nbins", "=", "nclass", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "predict", "=", "predict", "*", "(", "target", ">", "0", ")", ".", "astype", "(", "predict", ".", "dtype", ")", "\n", "intersection", "=", "predict", "*", "(", "predict", "==", "target", ")", "\n", "# areas of intersection and union", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "predict", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "assert", "(", "area_inter", "<=", "area_union", ")", ".", "all", "(", ")", ",", "\"Intersection area should be smaller than Union area\"", "\n", "return", "area_inter", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.scene_graph_eval_matrix.compute_mean_avg_prec": [[4, 12], ["sklearn.metrics.average_precision_score", "numpy.nansum", "len"], "function", ["None"], ["def", "compute_mean_avg_prec", "(", "y_true", ",", "y_score", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "avg_prec", "=", "sklearn", ".", "metrics", ".", "average_precision_score", "(", "y_true", ",", "y_score", ",", "average", "=", "None", ")", "\n", "mean_avg_prec", "=", "np", ".", "nansum", "(", "avg_prec", ")", "/", "len", "(", "avg_prec", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "mean_avg_prec", "=", "0", "\n", "\n", "", "return", "mean_avg_prec", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.scene_graph_eval_matrix.calibration_metrics": [[13, 21], ["logits_all.detach().cpu().numpy", "labels_all.detach().cpu().numpy", "scene_graph_eval_matrix.compute_mean_avg_prec", "numpy.argmax", "sklearn.metrics.recall_score", "numpy.argmax", "logits_all.detach().cpu", "labels_all.detach().cpu", "logits_all.detach", "labels_all.detach"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.scene_graph_eval_matrix.compute_mean_avg_prec"], ["", "def", "calibration_metrics", "(", "logits_all", ",", "labels_all", ")", ":", "\n", "\n", "    ", "logits", "=", "logits_all", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels_all", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "map_value", "=", "compute_mean_avg_prec", "(", "labels", ",", "logits", ")", "\n", "labels", "=", "np", ".", "argmax", "(", "labels", ",", "axis", "=", "-", "1", ")", "\n", "recall", "=", "sklearn", ".", "metrics", ".", "recall_score", "(", "labels", ",", "np", ".", "argmax", "(", "logits", ",", "1", ")", ",", "average", "=", "'macro'", ")", "\n", "return", "(", "map_value", ",", "recall", ")", "", "", ""]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.surgicalDataset.SurgicalSceneConstants.__init__": [[29, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "instrument_classes", "=", "(", "'kidney'", ",", "'bipolar_forceps'", ",", "'prograsp_forceps'", ",", "'large_needle_driver'", ",", "\n", "'monopolar_curved_scissors'", ",", "'ultrasound_probe'", ",", "'suction'", ",", "'clip_applier'", ",", "\n", "'stapler'", ",", "'maryland_dissector'", ",", "'spatulated_monopolar_cautery'", ")", "\n", "\n", "self", ".", "action_classes", "=", "(", "'Idle'", ",", "'Grasping'", ",", "'Retraction'", ",", "'Tissue_Manipulation'", ",", "\n", "'Tool_Manipulation'", ",", "'Cutting'", ",", "'Cauterization'", ",", "\n", "'Suction'", ",", "'Looping'", ",", "'Suturing'", ",", "'Clipping'", ",", "'Staple'", ",", "\n", "'Ultrasound_Sensing'", ")", "\n", "\n", "self", ".", "xml_data_dir", "=", "'dataset/instruments18/seq_'", "\n", "self", ".", "word2vec_loc", "=", "'dataset/surgicalscene_word2vec.hdf5'", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.surgicalDataset.SurgicalSceneDataset.__init__": [[48, 76], ["torchvision.Compose", "range", "h5py.File", "len", "torchvision.Resize", "numpy.random.permutation", "surgicalDataset.SurgicalSceneDataset.xml_dir_list.append", "surgicalDataset.SurgicalSceneDataset.dset.append", "glob.glob.glob", "len", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seq_set", ",", "data_dir", ",", "img_dir", ",", "mask_dir", ",", "istrain", ",", "dset", ",", "dataconst", ",", "feature_extractor", ",", "reduce_size", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "data_size", "=", "143", "\n", "self", ".", "dataconst", "=", "dataconst", "\n", "self", ".", "img_dir", "=", "img_dir", "\n", "self", ".", "mask_dir", "=", "mask_dir", "\n", "self", ".", "is_train", "=", "istrain", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "self", ".", "reduce_size", "=", "reduce_size", "\n", "\n", "# Images and masks are resized to (320, 400)", "\n", "self", ".", "resizer", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "320", ",", "400", ")", ")", "]", ")", "\n", "\n", "self", ".", "xml_dir_list", "=", "[", "]", "\n", "self", ".", "dset", "=", "[", "]", "\n", "\n", "for", "domain", "in", "range", "(", "len", "(", "seq_set", ")", ")", ":", "\n", "            ", "domain_dir_list", "=", "[", "]", "\n", "for", "i", "in", "seq_set", "[", "domain", "]", ":", "\n", "                ", "xml_dir_temp", "=", "data_dir", "[", "domain", "]", "+", "str", "(", "i", ")", "+", "'/xml/'", "\n", "domain_dir_list", "=", "domain_dir_list", "+", "glob", "(", "xml_dir_temp", "+", "'/*.xml'", ")", "\n", "", "if", "self", ".", "reduce_size", ":", "\n", "                ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "domain_dir_list", ")", ")", "\n", "domain_dir_list", "=", "[", "domain_dir_list", "[", "j", "]", "for", "j", "in", "indices", "[", "0", ":", "self", ".", "data_size", "]", "]", "\n", "", "for", "file", "in", "domain_dir_list", ":", "\n", "                ", "self", ".", "xml_dir_list", ".", "append", "(", "file", ")", "\n", "self", ".", "dset", ".", "append", "(", "dset", "[", "domain", "]", ")", "\n", "", "", "self", ".", "word2vec", "=", "h5py", ".", "File", "(", "'dataset/surgicalscene_word2vec.hdf5'", ",", "'r'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.surgicalDataset.SurgicalSceneDataset._get_word2vec": [[78, 87], ["numpy.empty", "numpy.vstack"], "methods", ["None"], ["", "def", "_get_word2vec", "(", "self", ",", "node_ids", ",", "sgh", "=", "0", ")", ":", "\n", "        ", "word2vec", "=", "np", ".", "empty", "(", "(", "0", ",", "300", ")", ")", "\n", "for", "node_id", "in", "node_ids", ":", "\n", "            ", "if", "sgh", "==", "1", "and", "node_id", "==", "0", ":", "\n", "                ", "vec", "=", "self", ".", "word2vec", "[", "'tissue'", "]", "\n", "", "else", ":", "\n", "                ", "vec", "=", "self", ".", "word2vec", "[", "self", ".", "dataconst", ".", "instrument_classes", "[", "node_id", "]", "]", "\n", "", "word2vec", "=", "np", ".", "vstack", "(", "(", "word2vec", ",", "vec", ")", ")", "\n", "", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.surgicalDataset.SurgicalSceneDataset.__len__": [[89, 91], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "xml_dir_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.surgicalDataset.SurgicalSceneDataset.__getitem__": [[93, 148], ["os.path.dirname", "PIL.Image.open().convert", "PIL.Image.open", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "h5py.File", "surgicalDataset.SurgicalSceneDataset.resizer", "surgicalDataset.SurgicalSceneDataset.resizer", "surgicalDataset.SurgicalSceneDataset._get_word2vec", "os.path.splitext", "os.path.dirname", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "_img.transpose.transpose.unsqueeze", "_target.transpose.transpose.unsqueeze", "os.path.basename", "PIL.Image.open", "random.random", "numpy.asarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.random", "_img.transpose.transpose.transpose", "_target.transpose.transpose.transpose", "_img.transpose.transpose.transpose", "_target.transpose.transpose.transpose", "numpy.array().transpose", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.surgicalDataset.SurgicalSceneDataset._get_word2vec"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "self", ".", "xml_dir_list", "[", "idx", "]", ")", ")", "[", "0", "]", "\n", "file_root", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "xml_dir_list", "[", "idx", "]", ")", ")", "\n", "if", "len", "(", "self", ".", "img_dir", ")", "==", "1", ":", "\n", "            ", "_img_loc", "=", "os", ".", "path", ".", "join", "(", "file_root", "+", "self", ".", "img_dir", "[", "0", "]", "+", "file_name", "+", "'.png'", ")", "\n", "_mask_loc", "=", "os", ".", "path", ".", "join", "(", "file_root", "+", "self", ".", "mask_dir", "[", "0", "]", "+", "file_name", "+", "'.png'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "_img_loc", "=", "os", ".", "path", ".", "join", "(", "file_root", "+", "self", ".", "img_dir", "[", "self", ".", "dset", "[", "idx", "]", "]", "+", "file_name", "+", "'.png'", ")", "\n", "_mask_loc", "=", "os", ".", "path", ".", "join", "(", "file_root", "+", "self", ".", "mask_dir", "[", "self", ".", "dset", "[", "idx", "]", "]", "+", "file_name", "+", "'.png'", ")", "\n", "\n", "\n", "", "_img", "=", "Image", ".", "open", "(", "_img_loc", ")", ".", "convert", "(", "'RGB'", ")", "\n", "_target", "=", "Image", ".", "open", "(", "_mask_loc", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "isAugment", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "if", "isAugment", ":", "\n", "                ", "isHflip", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "if", "isHflip", ":", "\n", "                    ", "_img", "=", "_img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "_target", "=", "_target", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "else", ":", "\n", "                    ", "_img", "=", "_img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "_target", "=", "_target", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "\n", "", "", "", "_img", "=", "np", ".", "asarray", "(", "_img", ",", "np", ".", "float32", ")", "*", "1.0", "/", "255", "\n", "_img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "_img", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "\n", "_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "_target", ")", ")", ".", "long", "(", ")", "\n", "\n", "frame_data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "file_root", "+", "'/vsgat/'", "+", "self", ".", "feature_extractor", "+", "'/'", "+", "file_name", "+", "'_features.hdf5'", ")", ",", "'r'", ")", "\n", "\n", "data", "=", "{", "}", "\n", "\n", "data", "[", "'img_name'", "]", "=", "frame_data", "[", "'img_name'", "]", "[", "(", ")", "]", "[", ":", "]", "+", "'.jpg'", "\n", "data", "[", "'img_loc'", "]", "=", "_img_loc", "\n", "\n", "# segmentation", "\n", "data", "[", "'img'", "]", "=", "self", ".", "resizer", "(", "_img", ".", "unsqueeze", "(", "0", ")", ")", "\n", "data", "[", "'mask'", "]", "=", "self", ".", "resizer", "(", "_target", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "\n", "data", "[", "'node_num'", "]", "=", "frame_data", "[", "'node_num'", "]", "[", "(", ")", "]", "\n", "data", "[", "'roi_labels'", "]", "=", "frame_data", "[", "'classes'", "]", "[", ":", "]", "\n", "data", "[", "'det_boxes'", "]", "=", "frame_data", "[", "'boxes'", "]", "[", ":", "]", "\n", "\n", "data", "[", "'edge_labels'", "]", "=", "frame_data", "[", "'edge_labels'", "]", "[", ":", "]", "\n", "data", "[", "'edge_num'", "]", "=", "data", "[", "'edge_labels'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "data", "[", "'features'", "]", "=", "frame_data", "[", "'node_features'", "]", "[", ":", "]", "\n", "data", "[", "'spatial_feat'", "]", "=", "frame_data", "[", "'spatial_features'", "]", "[", ":", "]", "\n", "\n", "data", "[", "'word2vec'", "]", "=", "self", ".", "_get_word2vec", "(", "data", "[", "'roi_labels'", "]", ",", "self", ".", "dset", "[", "idx", "]", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.surgicalDataset.collate_fn": [[151, 192], ["torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "batch_data[].append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "'''\n        Default collate_fn(): https://github.com/pytorch/pytorch/blob/1d53d0756668ce641e4f109200d9c65b003d05fa/torch/utils/data/_utils/collate.py#L43\n        Inputs: Data Batch\n    '''", "\n", "batch_data", "=", "{", "}", "\n", "batch_data", "[", "'img_name'", "]", "=", "[", "]", "\n", "batch_data", "[", "'img_loc'", "]", "=", "[", "]", "\n", "batch_data", "[", "'img'", "]", "=", "[", "]", "\n", "batch_data", "[", "'mask'", "]", "=", "[", "]", "\n", "batch_data", "[", "'node_num'", "]", "=", "[", "]", "\n", "batch_data", "[", "'roi_labels'", "]", "=", "[", "]", "\n", "batch_data", "[", "'det_boxes'", "]", "=", "[", "]", "\n", "batch_data", "[", "'edge_labels'", "]", "=", "[", "]", "\n", "batch_data", "[", "'edge_num'", "]", "=", "[", "]", "\n", "batch_data", "[", "'features'", "]", "=", "[", "]", "\n", "batch_data", "[", "'spatial_feat'", "]", "=", "[", "]", "\n", "batch_data", "[", "'word2vec'", "]", "=", "[", "]", "\n", "\n", "for", "data", "in", "batch", ":", "\n", "        ", "batch_data", "[", "'img_name'", "]", ".", "append", "(", "data", "[", "'img_name'", "]", ")", "\n", "batch_data", "[", "'img_loc'", "]", ".", "append", "(", "data", "[", "'img_loc'", "]", ")", "\n", "batch_data", "[", "'img'", "]", ".", "append", "(", "data", "[", "'img'", "]", ")", "\n", "batch_data", "[", "'mask'", "]", ".", "append", "(", "data", "[", "'mask'", "]", ")", "\n", "batch_data", "[", "'node_num'", "]", ".", "append", "(", "data", "[", "'node_num'", "]", ")", "\n", "batch_data", "[", "'roi_labels'", "]", ".", "append", "(", "data", "[", "'roi_labels'", "]", ")", "\n", "batch_data", "[", "'det_boxes'", "]", ".", "append", "(", "data", "[", "'det_boxes'", "]", ")", "\n", "batch_data", "[", "'edge_labels'", "]", ".", "append", "(", "data", "[", "'edge_labels'", "]", ")", "\n", "batch_data", "[", "'edge_num'", "]", ".", "append", "(", "data", "[", "'edge_num'", "]", ")", "\n", "batch_data", "[", "'features'", "]", ".", "append", "(", "data", "[", "'features'", "]", ")", "\n", "batch_data", "[", "'spatial_feat'", "]", ".", "append", "(", "data", "[", "'spatial_feat'", "]", ")", "\n", "batch_data", "[", "'word2vec'", "]", ".", "append", "(", "data", "[", "'word2vec'", "]", ")", "\n", "\n", "", "batch_data", "[", "'img'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'img'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'mask'", "]", "=", "torch", ".", "LongTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'mask'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'edge_labels'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'edge_labels'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'features'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'features'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'spatial_feat'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'spatial_feat'", "]", ",", "axis", "=", "0", ")", ")", "\n", "batch_data", "[", "'word2vec'", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "concatenate", "(", "batch_data", "[", "'word2vec'", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "return", "batch_data", "\n", "", ""]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.__init__": [[22, 31], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "feature_encoder", ",", "scene_graph", ",", "seg_gcn_block", ",", "seg_decoder", ",", "seg_mode", "=", "None", ")", ":", "\n", "        ", "super", "(", "mtl_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_encoder", "=", "feature_encoder", "\n", "self", ".", "gcn_unit", "=", "seg_gcn_block", "\n", "self", ".", "seg_mode", "=", "seg_mode", "\n", "self", ".", "seg_decoder", "=", "seg_decoder", "\n", "self", ".", "scene_graph", "=", "scene_graph", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.model_type1_insert": [[32, 36], ["torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d"], "methods", ["None"], ["", "def", "model_type1_insert", "(", "self", ")", ":", "\n", "        ", "self", ".", "sg_avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "sg_linear", "=", "nn", ".", "Linear", "(", "1040", ",", "128", ")", "\n", "self", ".", "sg_feat_s1d1", "=", "nn", ".", "Conv1d", "(", "1", ",", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.model_type2_insert": [[37, 39], ["torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "model_type2_insert", "(", "self", ")", ":", "\n", "        ", "self", ".", "sg2_linear", "=", "nn", ".", "Linear", "(", "1040", ",", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.model_type3_insert": [[40, 43], ["torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d"], "methods", ["None"], ["", "def", "model_type3_insert", "(", "self", ")", ":", "\n", "# self.sf_avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "        ", "self", ".", "sf_avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "#self.sf_linear = nn.Linear(256, 128)", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.set_train_test": [[45, 83], ["None"], "methods", ["None"], ["", "def", "set_train_test", "(", "self", ",", "model_type", ")", ":", "\n", "        ", "''' train Feature extractor for scene graph '''", "\n", "# if model_type == 'stl-s' or model_type == 'amtl-t0' or model_type == 'amtl-t3' or model_type == 'stl-sg':", "\n", "if", "model_type", "==", "'stl-s'", "or", "model_type", "==", "'stl-sg'", "or", "model_type", "==", "'amtl-t0'", "or", "model_type", "==", "'amtl-t3'", ":", "\n", "            ", "self", ".", "train_FE_SG", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_FE_SG", "=", "True", "\n", "\n", "", "''' train feature extractor for segmentation '''", "\n", "# if model_type == 'stl-sg' or model_type == 'amtl-t0' or model_type == 'amtl-t3': ", "\n", "if", "model_type", "==", "'stl-sg'", "or", "model_type", "==", "'stl-sg-wfe'", "or", "model_type", "==", "'amtl-t0'", "or", "model_type", "==", "'amtl-t3'", ":", "# or model_type == 'amtl-t1': ", "\n", "            ", "self", ".", "Train_FE_SEG", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "Train_FE_SEG", "=", "True", "\n", "\n", "", "''' train scene graph'''", "\n", "# set train flag for scene graph", "\n", "if", "model_type", "==", "'stl-s'", ":", "\n", "            ", "self", ".", "Train_SG", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "Train_SG", "=", "True", "\n", "\n", "", "''' train segmentation GR-unit (Global-Reasoniing unit) '''", "\n", "# if model_type == 'stl-sg' or model_type == 'amtl-t0' or model_type == 'amtl-t3': ", "\n", "if", "model_type", "==", "'stl-sg'", "or", "model_type", "==", "'stl-sg-wfe'", "or", "model_type", "==", "'amtl-t0'", "or", "model_type", "==", "'amtl-t3'", ":", "\n", "            ", "self", ".", "Train_SEG_GR", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "Train_SEG_GR", "=", "True", "\n", "\n", "", "''' train segmentation decoder '''", "\n", "# set train flag for segmentation decoder", "\n", "# if model_type == 'stl-sg' or model_type == 'amtl-t0' or model_type == 'amtl-t3': ", "\n", "if", "model_type", "==", "'stl-sg'", "or", "model_type", "==", "'stl-sg-wfe'", "or", "model_type", "==", "'amtl-t0'", "or", "model_type", "==", "'amtl-t3'", ":", "\n", "            ", "self", ".", "Train_SG_DECODER", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "Train_SG_DECODER", "=", "True", "\n", "\n", "", "self", ".", "model_type", "=", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.mtl_model.mtl_model.forward": [[85, 249], ["img.size", "enumerate", "mtl_model.mtl_model.feature_encoder", "mtl_model.mtl_model.scene_graph", "mtl_model.mtl_model.sg_feat_s1d1", "mtl_model.mtl_model.gcn_unit", "mtl_model.mtl_model.seg_decoder", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "PIL.Image.open().convert", "numpy.array", "img_stack.view.view.cuda", "mtl_model.mtl_model.feature_encoder", "mtl_model.mtl_model.avgpool", "img_stack.view.view.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mtl_model.mtl_model.feature_encoder", "mtl_model.mtl_model.scene_graph", "mtl_model.mtl_model.gcn_unit", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mtl_model.mtl_model.seg_decoder", "PIL.Image.open().convert", "numpy.array", "img_stack.view.view.cuda", "mtl_model.mtl_model.feature_encoder", "mtl_model.mtl_model.avgpool", "img_stack.view.view.view", "numpy.array().astype", "mtl_model.mtl_model.transform", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "img_stack.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mtl_model.mtl_model.sg_linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mtl_model.mtl_model.gcn_unit", "mtl_model.mtl_model.sf_avgpool().view", "enumerate", "mtl_model.mtl_model.scene_graph", "numpy.array().astype", "mtl_model.mtl_model.transform", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "img_stack.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIL.Image.open", "cv2.resize", "torch.autograd.Variable.unsqueeze", "torch.autograd.Variable.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mtl_model.mtl_model.sg_avgpool().permute", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mtl_model.mtl_model.gcn_unit", "gi_feat.size", "mtl_model.mtl_model.scene_graph", "PIL.Image.open", "cv2.resize", "torch.autograd.Variable.unsqueeze", "torch.autograd.Variable.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.array", "mtl_model.mtl_model.sg_linear", "mtl_model.mtl_model.sf_avgpool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mtl_model.mtl_model.scene_graph", "numpy.array", "mtl_model.mtl_model.sg_avgpool", "mtl_model.mtl_model.sg_avgpool().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "sg_feat[].unsqueeze().permute", "mtl_model.mtl_model.sg2_linear().permute", "mtl_model.mtl_model.sg2_linear", "gr_int_feat[].repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mtl_model.mtl_model.sg_avgpool", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "sg_feat[].unsqueeze", "sg_feat[].unsqueeze().permute", "mtl_model.mtl_model.sg2_linear", "mtl_model.mtl_model.sg2_linear().permute", "mtl_model.mtl_model.sg2_linear", "gr_int_feat[].repeat", "sg_feat[].unsqueeze", "mtl_model.mtl_model.sg2_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "img_dir", ",", "det_boxes_all", ",", "node_num", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "False", ")", ":", "\n", "\n", "        ", "gsu_node_feat", "=", "None", "\n", "seg_inputs", "=", "None", "\n", "interaction", "=", "None", "\n", "imsize", "=", "img", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "# ====================================================== Extract node features for Scene graph ==============================================================", "\n", "if", "not", "self", ".", "train_FE_SG", ":", "\n", "            ", "''' skip training the feature extractor for scene graph '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "index", ",", "img_loc", "in", "enumerate", "(", "img_dir", ")", ":", "\n", "                    ", "_img", "=", "Image", ".", "open", "(", "img_loc", ")", ".", "convert", "(", "'RGB'", ")", "\n", "_img", "=", "np", ".", "array", "(", "_img", ")", "\n", "img_stack", "=", "None", "\n", "for", "bndbox", "in", "det_boxes_all", "[", "index", "]", ":", "\n", "                        ", "roi", "=", "np", ".", "array", "(", "bndbox", ")", ".", "astype", "(", "int", ")", "\n", "roi_image", "=", "_img", "[", "roi", "[", "1", "]", ":", "roi", "[", "3", "]", "+", "1", ",", "roi", "[", "0", "]", ":", "roi", "[", "2", "]", "+", "1", ",", ":", "]", "\n", "roi_image", "=", "self", ".", "transform", "(", "cv2", ".", "resize", "(", "roi_image", ",", "(", "224", ",", "224", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ")", "\n", "roi_image", "=", "torch", ".", "autograd", ".", "Variable", "(", "roi_image", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# stack nodes images per image", "\n", "img_stack", "=", "roi_image", "if", "img_stack", "==", "None", "else", "torch", ".", "cat", "(", "(", "img_stack", ",", "roi_image", ")", ")", "\n", "\n", "", "img_stack", "=", "img_stack", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "_", ",", "_", ",", "_", ",", "img_stack", "=", "self", ".", "feature_encoder", "(", "img_stack", ")", "\n", "\n", "img_stack", "=", "self", ".", "avgpool", "(", "img_stack", ")", "\n", "img_stack", "=", "img_stack", ".", "view", "(", "img_stack", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# # prepare graph node features", "\n", "gsu_node_feat", "=", "img_stack", "if", "gsu_node_feat", "==", "None", "else", "torch", ".", "cat", "(", "(", "gsu_node_feat", ",", "img_stack", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "# print('node_info grad enabled')", "\n", "            ", "for", "index", ",", "img_loc", "in", "enumerate", "(", "img_dir", ")", ":", "\n", "                ", "_img", "=", "Image", ".", "open", "(", "img_loc", ")", ".", "convert", "(", "'RGB'", ")", "\n", "_img", "=", "np", ".", "array", "(", "_img", ")", "\n", "img_stack", "=", "None", "\n", "for", "bndbox", "in", "det_boxes_all", "[", "index", "]", ":", "\n", "                    ", "roi", "=", "np", ".", "array", "(", "bndbox", ")", ".", "astype", "(", "int", ")", "\n", "roi_image", "=", "_img", "[", "roi", "[", "1", "]", ":", "roi", "[", "3", "]", "+", "1", ",", "roi", "[", "0", "]", ":", "roi", "[", "2", "]", "+", "1", ",", ":", "]", "\n", "roi_image", "=", "self", ".", "transform", "(", "cv2", ".", "resize", "(", "roi_image", ",", "(", "224", ",", "224", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ")", "\n", "roi_image", "=", "torch", ".", "autograd", ".", "Variable", "(", "roi_image", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# stack nodes images per image", "\n", "img_stack", "=", "roi_image", "if", "img_stack", "==", "None", "else", "torch", ".", "cat", "(", "(", "img_stack", ",", "roi_image", ")", ")", "\n", "\n", "", "img_stack", "=", "img_stack", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "_", ",", "_", ",", "_", ",", "img_stack", "=", "self", ".", "feature_encoder", "(", "img_stack", ")", "\n", "img_stack", "=", "self", ".", "avgpool", "(", "img_stack", ")", "\n", "img_stack", "=", "img_stack", ".", "view", "(", "img_stack", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# prepare graph node features", "\n", "gsu_node_feat", "=", "img_stack", "if", "gsu_node_feat", "==", "None", "else", "torch", ".", "cat", "(", "(", "gsu_node_feat", ",", "img_stack", ")", ")", "\n", "# ================================================================================================================================================================", "\n", "# ===================================================== Segmentation feature extractor ===========================================================================", "\n", "", "", "if", "not", "self", ".", "Train_FE_SEG", ":", "\n", "            ", "''' Skip training feature encoder for segmentation task '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "s1", ",", "s2", ",", "s3", ",", "seg_inputs", "=", "self", ".", "feature_encoder", "(", "img", ")", "\n", "fe_feat", "=", "seg_inputs", "\n", "", "", "else", ":", "\n", "# print('segment encoder enabled')", "\n", "            ", "s1", ",", "s2", ",", "s3", ",", "seg_inputs", "=", "self", ".", "feature_encoder", "(", "img", ")", "\n", "fe_feat", "=", "seg_inputs", "\n", "# ================================================================================================================================================================", "\n", "# ================================================= Scene graph and segmentation GR (Global Reasoning) unit ======================================================", "\n", "", "if", "self", ".", "model_type", "==", "'amtl-t1'", "or", "self", ".", "model_type", "==", "'mtl-t1'", ":", "\n", "            ", "'''\n            In type 1, interaction features are passed to segmentation GR (Global Reasoning) module. \n            inside GR unit, (x = x + h + avg((x)T) * sg_feat[1x128])\n            Here interation is called before GR unit.\n            '''", "\n", "''' ==== scene graph ==== '''", "\n", "# print('inside mtl-1')", "\n", "interaction", ",", "sg_feat", "=", "self", ".", "scene_graph", "(", "node_num", ",", "gsu_node_feat", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "validation", ")", "\n", "\n", "''' ==== GR (Global Reasoning) ==== '''", "\n", "edge_sum", "=", "0", "\n", "batch_sg_feat", "=", "None", "\n", "for", "n", "in", "node_num", ":", "\n", "                ", "active_edges", "=", "n", "-", "1", "if", "n", ">", "1", "else", "n", "\n", "if", "batch_sg_feat", "==", "None", ":", "\n", "                    ", "batch_sg_feat", "=", "self", ".", "sg_linear", "(", "self", ".", "sg_avgpool", "(", "sg_feat", "[", "edge_sum", ":", "edge_sum", "+", "active_edges", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "batch_sg_feat", "=", "torch", ".", "cat", "(", "(", "batch_sg_feat", ",", "self", ".", "sg_linear", "(", "self", ".", "sg_avgpool", "(", "sg_feat", "[", "edge_sum", ":", "edge_sum", "+", "active_edges", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ")", ")", "\n", "", "edge_sum", "+=", "active_edges", "\n", "", "batch_sg_feat", "=", "self", ".", "sg_feat_s1d1", "(", "batch_sg_feat", ")", "\n", "s1", ",", "s2", ",", "s3", ",", "seg_inputs", ",", "_", "=", "self", ".", "gcn_unit", "(", "seg_inputs", ",", "s1", "=", "s1", ",", "s2", "=", "s2", ",", "s3", "=", "s3", ",", "scene_feat", "=", "batch_sg_feat", ",", "seg_mode", "=", "self", ".", "seg_mode", ",", "model_type", "=", "self", ".", "model_type", ")", "\n", "\n", "", "elif", "self", ".", "model_type", "==", "'amtl-t2'", "or", "self", ".", "model_type", "==", "'mtl-t2'", ":", "\n", "            ", "'''\n            In type 2, interaction features are passed to segmentation GR module. Replace\n            inside GR, GCN is replaced with x = x * sg_feat [128 x 128]\n            Here interation is called before GR unit.\n            '''", "\n", "''' ==== scene graph ==== '''", "\n", "interaction", ",", "sg_feat", "=", "self", ".", "scene_graph", "(", "node_num", ",", "gsu_node_feat", ",", "spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "validation", ")", "\n", "\n", "''' ==== GR (Global Reasoning) ==== '''", "\n", "edge_sum", "=", "0", "\n", "batch_sg_feat", "=", "None", "\n", "for", "n", "in", "node_num", ":", "\n", "                ", "active_edges", "=", "n", "-", "1", "if", "n", ">", "1", "else", "n", "\n", "if", "batch_sg_feat", "==", "None", ":", "\n", "                    ", "batch_sg_feat", "=", "torch", ".", "matmul", "(", "self", ".", "sg2_linear", "(", "sg_feat", "[", "edge_sum", ":", "edge_sum", "+", "active_edges", ",", ":", "]", ")", ".", "permute", "(", "1", ",", "0", ")", ",", "self", ".", "sg2_linear", "(", "sg_feat", "[", "edge_sum", ":", "edge_sum", "+", "active_edges", ",", ":", "]", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "batch_sg_feat", "=", "torch", ".", "cat", "(", "(", "batch_sg_feat", ",", "torch", ".", "matmul", "(", "self", ".", "sg2_linear", "(", "sg_feat", "[", "edge_sum", ":", "edge_sum", "+", "active_edges", ",", ":", "]", ")", ".", "permute", "(", "1", ",", "0", ")", ",", "self", ".", "sg2_linear", "(", "sg_feat", "[", "edge_sum", ":", "edge_sum", "+", "active_edges", ",", ":", "]", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "", "edge_sum", "+=", "active_edges", "\n", "", "s1", ",", "s2", ",", "s3", ",", "seg_inputs", ",", "_", "=", "self", ".", "gcn_unit", "(", "seg_inputs", ",", "s1", "=", "s1", ",", "s2", "=", "s2", ",", "s3", "=", "s3", ",", "scene_feat", "=", "batch_sg_feat", ",", "seg_mode", "=", "self", ".", "seg_mode", ",", "model_type", "=", "self", ".", "model_type", ")", "\n", "\n", "", "else", ":", "\n", "            ", "'''\n            If it's not type 1 & 2, then GR is processed before interaction.\n            '''", "\n", "''' ==== GR (Global Reasoning) ==== '''", "\n", "if", "not", "self", ".", "Train_SEG_GR", ":", "\n", "                ", "''' skip GR unit training '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "s1", ",", "s2", ",", "s3", ",", "seg_inputs", ",", "gi_feat", "=", "self", ".", "gcn_unit", "(", "seg_inputs", ",", "s1", "=", "s1", ",", "s2", "=", "s2", ",", "s3", "=", "s3", ",", "seg_mode", "=", "self", ".", "seg_mode", ",", "model_type", "=", "self", ".", "model_type", ")", "\n", "", "", "else", ":", "\n", "# print('segment gcn enabled')", "\n", "                ", "s1", ",", "s2", ",", "s3", ",", "seg_inputs", ",", "gi_feat", "=", "self", ".", "gcn_unit", "(", "seg_inputs", ",", "s1", "=", "s1", ",", "s2", "=", "s2", ",", "s3", "=", "s3", ",", "seg_mode", "=", "self", ".", "seg_mode", ",", "model_type", "=", "self", ".", "model_type", ")", "\n", "\n", "", "''' ==== scene graph ==== '''", "\n", "if", "self", ".", "model_type", "==", "'amtl-t3'", "or", "self", ".", "model_type", "==", "'mtl-t3'", ":", "\n", "                ", "gr_int_feat", "=", "self", ".", "sf_avgpool", "(", "gi_feat", ")", ".", "view", "(", "gi_feat", ".", "size", "(", "0", ")", ",", "128", ")", "\n", "\n", "edge_sum", "=", "0", "\n", "global_spatial_feat", "=", "None", "\n", "\n", "for", "b_i", ",", "n", "in", "enumerate", "(", "node_num", ")", ":", "\n", "                    ", "active_edges", "=", "(", "n", "*", "(", "n", "-", "1", ")", ")", "if", "n", ">", "1", "else", "n", "\n", "if", "global_spatial_feat", "==", "None", ":", "\n", "                        ", "global_spatial_feat", "=", "torch", ".", "cat", "(", "(", "spatial_feat", "[", "edge_sum", ":", "edge_sum", "+", "active_edges", ",", ":", "]", ",", "gr_int_feat", "[", "b_i", ",", ":", "]", ".", "repeat", "(", "active_edges", ",", "1", ")", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "                        ", "global_spatial_feat", "=", "torch", ".", "cat", "(", "(", "global_spatial_feat", ",", "torch", ".", "cat", "(", "(", "spatial_feat", "[", "edge_sum", ":", "edge_sum", "+", "active_edges", ",", ":", "]", ",", "gr_int_feat", "[", "b_i", ",", ":", "]", ".", "repeat", "(", "active_edges", ",", "1", ")", ")", ",", "1", ")", ")", ")", "\n", "", "edge_sum", "+=", "active_edges", "\n", "", "interaction", ",", "_", "=", "self", ".", "scene_graph", "(", "node_num", ",", "gsu_node_feat", ",", "global_spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "validation", ")", "\n", "", "elif", "not", "self", ".", "Train_SG", ":", "\n", "                ", "''' skip scene graph training '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "global_spatial_feat", "=", "spatial_feat", "\n", "interaction", ",", "_", "=", "self", ".", "scene_graph", "(", "node_num", ",", "gsu_node_feat", ",", "global_spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "True", ")", "\n", "", "", "else", ":", "\n", "# print('interaction encoder enabled')", "\n", "                ", "global_spatial_feat", "=", "spatial_feat", "\n", "interaction", ",", "_", "=", "self", ".", "scene_graph", "(", "node_num", ",", "gsu_node_feat", ",", "global_spatial_feat", ",", "word2vec", ",", "roi_labels", ",", "validation", "=", "validation", ")", "\n", "\n", "# ================================================================================================================================================================", "\n", "# ================================================= Scene graph and segmentation GR Unit =========================================================================", "\n", "\n", "", "", "''' ============== Segmentation decoder =============='''", "\n", "if", "not", "self", ".", "Train_SG_DECODER", ":", "\n", "            ", "''' skip segmentation decoder '''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "seg_inputs", "=", "self", ".", "seg_decoder", "(", "seg_inputs", ",", "s1", "=", "s1", ",", "s2", "=", "s2", ",", "s3", "=", "s3", ",", "imsize", "=", "imsize", ",", "seg_mode", "=", "self", ".", "seg_mode", ")", "\n", "\n", "", "", "else", ":", "\n", "# print('segment_decoder_enabled')", "\n", "            ", "seg_inputs", "=", "self", ".", "seg_decoder", "(", "seg_inputs", ",", "s1", "=", "s1", ",", "s2", "=", "s2", ",", "s3", "=", "s3", ",", "imsize", "=", "imsize", ",", "seg_mode", "=", "self", ".", "seg_mode", ")", "\n", "# ================================================================================================================================================================", "\n", "\n", "", "return", "interaction", ",", "seg_inputs", ",", "fe_feat", "", "", "", ""]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.CONFIGURATION.__init__": [[54, 114], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "layer", "=", "1", ",", "bias", "=", "True", ",", "bn", "=", "False", ",", "dropout", "=", "0.2", ",", "multi_attn", "=", "False", ",", "global_feat", "=", "0", ")", ":", "\n", "\n", "# if multi_attn:", "\n", "        ", "if", "True", ":", "\n", "            ", "if", "layer", "==", "1", ":", "\n", "                ", "feature_size", "=", "512", "\n", "additional_sf", "=", "global_feat", "\n", "# readout", "\n", "self", ".", "G_ER_L_S", "=", "[", "feature_size", "+", "300", "+", "16", "+", "additional_sf", "+", "300", "+", "feature_size", ",", "feature_size", ",", "13", "]", "\n", "self", ".", "G_ER_A", "=", "[", "'ReLU'", ",", "'Identity'", "]", "\n", "self", ".", "G_ER_B", "=", "bias", "#true", "\n", "self", ".", "G_ER_BN", "=", "bn", "#false", "\n", "self", ".", "G_ER_D", "=", "dropout", "#0.3", "\n", "# self.G_ER_GRU = feature_size", "\n", "\n", "# # gnn node function", "\n", "self", ".", "G_N_L_S", "=", "[", "feature_size", "+", "feature_size", ",", "feature_size", "]", "\n", "self", ".", "G_N_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B", "=", "bias", "#true", "\n", "self", ".", "G_N_BN", "=", "bn", "#false", "\n", "self", ".", "G_N_D", "=", "dropout", "#0.3", "\n", "# self.G_N_GRU = feature_size", "\n", "\n", "# # gnn node function for language", "\n", "self", ".", "G_N_L_S2", "=", "[", "300", "+", "300", ",", "300", "]", "\n", "self", ".", "G_N_A2", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_N_B2", "=", "bias", "#true", "\n", "self", ".", "G_N_BN2", "=", "bn", "#false", "\n", "self", ".", "G_N_D2", "=", "dropout", "#0.3", "\n", "# self.G_N_GRU2 = feature_size", "\n", "\n", "# gnn edge function1", "\n", "self", ".", "G_E_L_S", "=", "[", "feature_size", "*", "2", "+", "16", "+", "additional_sf", ",", "feature_size", "]", "\n", "self", ".", "G_E_A", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B", "=", "bias", "# true", "\n", "self", ".", "G_E_BN", "=", "bn", "# false", "\n", "self", ".", "G_E_D", "=", "dropout", "# 0.3", "\n", "# self.G_E_c_kernel_size = 3", "\n", "\n", "\n", "# gnn edge function2 for language", "\n", "self", ".", "G_E_L_S2", "=", "[", "300", "*", "2", ",", "feature_size", "]", "\n", "self", ".", "G_E_A2", "=", "[", "'ReLU'", "]", "\n", "self", ".", "G_E_B2", "=", "bias", "#true", "\n", "self", ".", "G_E_BN2", "=", "bn", "#false", "\n", "self", ".", "G_E_D2", "=", "dropout", "#0.3", "\n", "\n", "# gnn attention mechanism", "\n", "self", ".", "G_A_L_S", "=", "[", "feature_size", ",", "1", "]", "\n", "self", ".", "G_A_A", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B", "=", "bias", "#true", "\n", "self", ".", "G_A_BN", "=", "bn", "#false", "\n", "self", ".", "G_A_D", "=", "dropout", "#0.3", "\n", "\n", "# gnn attention mechanism2 for language", "\n", "self", ".", "G_A_L_S2", "=", "[", "feature_size", ",", "1", "]", "\n", "self", ".", "G_A_A2", "=", "[", "'LeakyReLU'", "]", "\n", "self", ".", "G_A_B2", "=", "bias", "#true", "\n", "self", ".", "G_A_BN2", "=", "bn", "#false", "\n", "self", ".", "G_A_D2", "=", "dropout", "#0.3", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.CONFIGURATION.save_config": [[115, 131], ["CONFIG.items"], "methods", ["None"], ["", "", "", "def", "save_config", "(", "self", ")", ":", "\n", "        ", "model_config", "=", "{", "'graph_head'", ":", "{", "}", ",", "'graph_node'", ":", "{", "}", ",", "'graph_edge'", ":", "{", "}", ",", "'graph_attn'", ":", "{", "}", "}", "\n", "CONFIG", "=", "self", ".", "__dict__", "\n", "for", "k", ",", "v", "in", "CONFIG", ".", "items", "(", ")", ":", "\n", "            ", "if", "'G_H'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_head'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_N'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_node'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_E'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_edge'", "]", "[", "k", "]", "=", "v", "\n", "", "elif", "'G_A'", "in", "k", ":", "\n", "                ", "model_config", "[", "'graph_attn'", "]", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "model_config", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "model_config", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.Identity.__init__": [[138, 140], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.Identity.forward": [[141, 143], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.MLP.__init__": [[166, 188], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "scene_graph.get_activation", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "scene_graph.MLP.layers.append", "len", "collections.OrderedDict", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.get_activation"], ["def", "__init__", "(", "self", ",", "layer_sizes", ",", "activation", ",", "bias", "=", "True", ",", "use_bn", "=", "False", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "use_bn", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layer_sizes", ")", "-", "1", ")", ":", "\n", "            ", "layer", "=", "nn", ".", "Linear", "(", "layer_sizes", "[", "i", "]", ",", "layer_sizes", "[", "i", "+", "1", "]", ",", "bias", "=", "bias", ")", "\n", "activate", "=", "get_activation", "(", "activation", "[", "i", "]", ")", "\n", "block", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "f'L{i}'", ",", "layer", ")", ",", "]", ")", ")", "\n", "\n", "# !NOTE:# Actually, it is inappropriate to use batch-normalization here", "\n", "if", "use_bn", ":", "\n", "                ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "layer_sizes", "[", "i", "+", "1", "]", ")", "\n", "block", ".", "add_module", "(", "f'B{i}'", ",", "bn", ")", "\n", "\n", "# batch normalization is put before activation function ", "\n", "", "block", ".", "add_module", "(", "f'A{i}'", ",", "activate", ")", "\n", "\n", "# dropout probablility", "\n", "if", "drop_prob", ":", "\n", "                ", "block", ".", "add_module", "(", "f'D{i}'", ",", "nn", ".", "Dropout", "(", "drop_prob", ")", ")", "\n", "\n", "", "self", ".", "layers", ".", "append", "(", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.MLP.forward": [[189, 198], ["layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "# !NOTE: Sometime the shape of x will be [1,N], and we cannot use batch-normalization in that situation", "\n", "            ", "if", "self", ".", "bn", "and", "x", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "x", "=", "layer", "[", "0", "]", "(", "x", ")", "\n", "x", "=", "layer", "[", ":", "-", "1", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.H_H_EdgeApplyModule.__init__": [[205, 209], ["torch.Module.__init__", "scene_graph.MLP", "scene_graph.MLP"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "CONFIG", ",", "multi_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", "H_H_EdgeApplyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "edge_fc", "=", "MLP", "(", "CONFIG", ".", "G_E_L_S", ",", "CONFIG", ".", "G_E_A", ",", "CONFIG", ".", "G_E_B", ",", "CONFIG", ".", "G_E_BN", ",", "CONFIG", ".", "G_E_D", ")", "\n", "self", ".", "edge_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_E_L_S2", ",", "CONFIG", ".", "G_E_A2", ",", "CONFIG", ".", "G_E_B2", ",", "CONFIG", ".", "G_E_BN2", ",", "CONFIG", ".", "G_E_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.H_H_EdgeApplyModule.forward": [[210, 217], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scene_graph.H_H_EdgeApplyModule.edge_fc", "scene_graph.H_H_EdgeApplyModule.edge_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "edge", ".", "src", "[", "'n_f'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", ",", "edge", ".", "dst", "[", "'n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "edge", ".", "src", "[", "'word2vec'", "]", ",", "edge", ".", "dst", "[", "'word2vec'", "]", "]", ",", "dim", "=", "1", ")", "\n", "e_feat", "=", "self", ".", "edge_fc", "(", "feat", ")", "\n", "e_feat_lang", "=", "self", ".", "edge_fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'e_f'", ":", "e_feat", ",", "'e_f_lang'", ":", "e_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.H_NodeApplyModule.__init__": [[225, 229], ["torch.Module.__init__", "scene_graph.MLP", "scene_graph.MLP"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "H_NodeApplyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "node_fc", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S", ",", "CONFIG", ".", "G_N_A", ",", "CONFIG", ".", "G_N_B", ",", "CONFIG", ".", "G_N_BN", ",", "CONFIG", ".", "G_N_D", ")", "\n", "self", ".", "node_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_N_L_S2", ",", "CONFIG", ".", "G_N_A2", ",", "CONFIG", ".", "G_N_B2", ",", "CONFIG", ".", "G_N_BN2", ",", "CONFIG", ".", "G_N_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.H_NodeApplyModule.forward": [[230, 237], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scene_graph.H_NodeApplyModule.node_fc", "scene_graph.H_NodeApplyModule.node_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'n_f'", "]", ",", "node", ".", "data", "[", "'z_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "feat_lang", "=", "torch", ".", "cat", "(", "[", "node", ".", "data", "[", "'word2vec'", "]", ",", "node", ".", "data", "[", "'z_f_lang'", "]", "]", ",", "dim", "=", "1", ")", "\n", "n_feat", "=", "self", ".", "node_fc", "(", "feat", ")", "\n", "n_feat_lang", "=", "self", ".", "node_fc_lang", "(", "feat_lang", ")", "\n", "\n", "return", "{", "'new_n_f'", ":", "n_feat", ",", "'new_n_f_lang'", ":", "n_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.E_AttentionModule1.__init__": [[244, 248], ["torch.Module.__init__", "scene_graph.MLP", "scene_graph.MLP"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "E_AttentionModule1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attn_fc", "=", "MLP", "(", "CONFIG", ".", "G_A_L_S", ",", "CONFIG", ".", "G_A_A", ",", "CONFIG", ".", "G_A_B", ",", "CONFIG", ".", "G_A_BN", ",", "CONFIG", ".", "G_A_D", ")", "\n", "self", ".", "attn_fc_lang", "=", "MLP", "(", "CONFIG", ".", "G_A_L_S2", ",", "CONFIG", ".", "G_A_A2", ",", "CONFIG", ".", "G_A_B2", ",", "CONFIG", ".", "G_A_BN2", ",", "CONFIG", ".", "G_A_D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.E_AttentionModule1.forward": [[249, 253], ["scene_graph.E_AttentionModule1.attn_fc", "scene_graph.E_AttentionModule1.attn_fc_lang"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "a_feat", "=", "self", ".", "attn_fc", "(", "edge", ".", "data", "[", "'e_f'", "]", ")", "\n", "a_feat_lang", "=", "self", ".", "attn_fc_lang", "(", "edge", ".", "data", "[", "'e_f_lang'", "]", ")", "\n", "return", "{", "'a_feat'", ":", "a_feat", ",", "'a_feat_lang'", ":", "a_feat_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.GNN.__init__": [[260, 266], ["torch.Module.__init__", "scene_graph.H_H_EdgeApplyModule", "scene_graph.E_AttentionModule1", "scene_graph.H_NodeApplyModule"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "CONFIG", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "True", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "diff_edge", "=", "diff_edge", "# false", "\n", "self", ".", "apply_h_h_edge", "=", "H_H_EdgeApplyModule", "(", "CONFIG", ",", "multi_attn", ")", "\n", "self", ".", "apply_edge_attn1", "=", "E_AttentionModule1", "(", "CONFIG", ")", "\n", "self", ".", "apply_h_node", "=", "H_NodeApplyModule", "(", "CONFIG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.GNN._message_func": [[267, 269], ["None"], "methods", ["None"], ["", "def", "_message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'nei_n_f'", ":", "edges", ".", "src", "[", "'n_f'", "]", ",", "'nei_n_w'", ":", "edges", ".", "src", "[", "'word2vec'", "]", ",", "'e_f'", ":", "edges", ".", "data", "[", "'e_f'", "]", ",", "'e_f_lang'", ":", "edges", ".", "data", "[", "'e_f_lang'", "]", ",", "'a_feat'", ":", "edges", ".", "data", "[", "'a_feat'", "]", ",", "'a_feat_lang'", ":", "edges", ".", "data", "[", "'a_feat_lang'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.GNN._reduce_func": [[270, 283], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "_reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "alpha", "=", "F", ".", "softmax", "(", "nodes", ".", "mailbox", "[", "'a_feat'", "]", ",", "dim", "=", "1", ")", "\n", "alpha_lang", "=", "F", ".", "softmax", "(", "nodes", ".", "mailbox", "[", "'a_feat_lang'", "]", ",", "dim", "=", "1", ")", "\n", "\n", "z_raw_f", "=", "nodes", ".", "mailbox", "[", "'nei_n_f'", "]", "+", "nodes", ".", "mailbox", "[", "'e_f'", "]", "\n", "z_f", "=", "torch", ".", "sum", "(", "alpha", "*", "z_raw_f", ",", "dim", "=", "1", ")", "\n", "\n", "z_raw_f_lang", "=", "nodes", ".", "mailbox", "[", "'nei_n_w'", "]", "\n", "z_f_lang", "=", "torch", ".", "sum", "(", "alpha_lang", "*", "z_raw_f_lang", ",", "dim", "=", "1", ")", "\n", "\n", "# we cannot return 'alpha' for the different dimension ", "\n", "if", "self", ".", "training", "or", "validation", ":", "return", "{", "'z_f'", ":", "z_f", ",", "'z_f_lang'", ":", "z_f_lang", "}", "\n", "else", ":", "return", "{", "'z_f'", ":", "z_f", ",", "'z_f_lang'", ":", "z_f_lang", ",", "'alpha'", ":", "alpha", ",", "'alpha_lang'", ":", "alpha_lang", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.GNN.forward": [[284, 302], ["g.apply_edges", "g.apply_edges", "g.update_all", "g.apply_nodes", "g.ndata.pop", "g.ndata.pop", "g.ndata.pop", "g.edata.pop", "g.edata.pop", "g.ndata.pop", "g.edata.pop", "g.edata.pop", "g.edges"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h_node", ",", "o_node", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "pop_feat", "=", "False", ")", ":", "\n", "\n", "        ", "g", ".", "apply_edges", "(", "self", ".", "apply_h_h_edge", ",", "g", ".", "edges", "(", ")", ")", "\n", "g", ".", "apply_edges", "(", "self", ".", "apply_edge_attn1", ")", "\n", "g", ".", "update_all", "(", "self", ".", "_message_func", ",", "self", ".", "_reduce_func", ")", "\n", "g", ".", "apply_nodes", "(", "self", ".", "apply_h_node", ",", "h_node", "+", "o_node", ")", "\n", "\n", "# !NOTE:PAY ATTENTION WHEN ADDING MORE FEATURE", "\n", "g", ".", "ndata", ".", "pop", "(", "'n_f'", ")", "\n", "g", ".", "ndata", ".", "pop", "(", "'word2vec'", ")", "\n", "\n", "g", ".", "ndata", ".", "pop", "(", "'z_f'", ")", "\n", "g", ".", "edata", ".", "pop", "(", "'e_f'", ")", "\n", "g", ".", "edata", ".", "pop", "(", "'a_feat'", ")", "\n", "\n", "g", ".", "ndata", ".", "pop", "(", "'z_f_lang'", ")", "\n", "g", ".", "edata", ".", "pop", "(", "'e_f_lang'", ")", "\n", "g", ".", "edata", ".", "pop", "(", "'a_feat_lang'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.GRNN.__init__": [[314, 318], ["torch.Module.__init__", "scene_graph.GNN"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "CONFIG", ",", "multi_attn", "=", "False", ",", "diff_edge", "=", "True", ")", ":", "\n", "        ", "super", "(", "GRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multi_attn", "=", "multi_attn", "#false", "\n", "self", ".", "gnn", "=", "GNN", "(", "CONFIG", ",", "multi_attn", ",", "diff_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.GRNN.forward": [[319, 334], ["scene_graph.GRNN.gnn", "print"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "valid", "=", "False", ",", "pop_feat", "=", "False", ",", "initial_feat", "=", "False", ")", ":", "\n", "\n", "# !NOTE: if node_num==1, there will be something wrong to forward the attention mechanism", "\n", "        ", "global", "validation", "\n", "validation", "=", "valid", "\n", "\n", "# initialize the graph with some datas", "\n", "batch_graph", ".", "ndata", "[", "'n_f'", "]", "=", "feat", "# node: features ", "\n", "batch_graph", ".", "ndata", "[", "'word2vec'", "]", "=", "word2vec", "# node: words", "\n", "batch_graph", ".", "edata", "[", "'s_f'", "]", "=", "spatial_feat", "# edge: spatial features", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "gnn", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.Predictor.__init__": [[341, 345], ["torch.Module.__init__", "scene_graph.MLP", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "CONFIG", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifier", "=", "MLP", "(", "CONFIG", ".", "G_ER_L_S", ",", "CONFIG", ".", "G_ER_A", ",", "CONFIG", ".", "G_ER_B", ",", "CONFIG", ".", "G_ER_BN", ",", "CONFIG", ".", "G_ER_D", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.Predictor.forward": [[346, 353], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scene_graph.Predictor.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "edge", ")", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "edge", ".", "dst", "[", "'new_n_f'", "]", ",", "edge", ".", "dst", "[", "'new_n_f_lang'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", ",", "edge", ".", "src", "[", "'new_n_f_lang'", "]", ",", "edge", ".", "src", "[", "'new_n_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "scene_feat", "=", "torch", ".", "cat", "(", "[", "edge", ".", "dst", "[", "'new_n_f'", "]", ",", "edge", ".", "src", "[", "'new_n_f'", "]", ",", "edge", ".", "data", "[", "'s_f'", "]", "]", ",", "dim", "=", "1", ")", "\n", "pred", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "# If the criterion is BCELoss, uncomment the following code ->", "\n", "# output = self.sigmoid(output)", "\n", "return", "{", "'pred'", ":", "pred", ",", "'scene_feat'", ":", "scene_feat", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.AGRNN.__init__": [[364, 375], ["torch.Module.__init__", "scene_graph.CONFIGURATION", "scene_graph.GRNN", "scene_graph.Predictor"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "bias", "=", "True", ",", "bn", "=", "True", ",", "dropout", "=", "None", ",", "multi_attn", "=", "False", ",", "layer", "=", "1", ",", "diff_edge", "=", "True", ",", "global_feat", "=", "0", ")", ":", "\n", "        ", "super", "(", "AGRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "multi_attn", "=", "multi_attn", "# false", "\n", "self", ".", "layer", "=", "layer", "# 1 layer", "\n", "self", ".", "diff_edge", "=", "diff_edge", "# false", "\n", "\n", "self", ".", "CONFIG1", "=", "CONFIGURATION", "(", "layer", "=", "1", ",", "bias", "=", "bias", ",", "bn", "=", "bn", ",", "dropout", "=", "dropout", ",", "multi_attn", "=", "multi_attn", ",", "global_feat", "=", "global_feat", ")", "\n", "\n", "self", ".", "grnn1", "=", "GRNN", "(", "self", ".", "CONFIG1", ",", "multi_attn", "=", "multi_attn", ",", "diff_edge", "=", "diff_edge", ")", "\n", "self", ".", "edge_readout", "=", "Predictor", "(", "self", ".", "CONFIG1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.AGRNN._collect_edge": [[376, 435], ["range", "numpy.arange", "numpy.where", "numpy.where", "range", "readout_h_h_e_list.append", "edge_list.append", "readout_edge_list.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_collect_edge", "(", "self", ",", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", ":", "\n", "        ", "'''\n        arguments: node_num, roi_label, node_space, diff_edge\n        '''", "\n", "\n", "# get human nodes && object nodes", "\n", "h_node_list", "=", "np", ".", "where", "(", "roi_label", "==", "0", ")", "[", "0", "]", "\n", "obj_node_list", "=", "np", ".", "where", "(", "roi_label", "!=", "0", ")", "[", "0", "]", "\n", "edge_list", "=", "[", "]", "\n", "\n", "h_h_e_list", "=", "[", "]", "\n", "o_o_e_list", "=", "[", "]", "\n", "h_o_e_list", "=", "[", "]", "\n", "\n", "readout_edge_list", "=", "[", "]", "\n", "readout_h_h_e_list", "=", "[", "]", "\n", "readout_h_o_e_list", "=", "[", "]", "\n", "\n", "# get all edge in the fully-connected graph, edge_list, For node_num = 2, edge_list = [(0, 1), (1, 0)]", "\n", "for", "src", "in", "range", "(", "node_num", ")", ":", "\n", "            ", "for", "dst", "in", "range", "(", "node_num", ")", ":", "\n", "                ", "if", "src", "==", "dst", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "\n", "# readout_edge_list, get corresponding readout edge in the graph", "\n", "", "", "", "src_box_list", "=", "np", ".", "arange", "(", "roi_label", ".", "shape", "[", "0", "]", ")", "\n", "for", "dst", "in", "h_node_list", ":", "\n", "            ", "for", "src", "in", "src_box_list", ":", "\n", "                ", "if", "src", "not", "in", "h_node_list", ":", "\n", "                    ", "readout_edge_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "\n", "# readout h_h_e_list, get corresponding readout h_h edges && h_o edges", "\n", "", "", "", "temp_h_node_list", "=", "h_node_list", "[", ":", "]", "\n", "for", "dst", "in", "h_node_list", ":", "\n", "            ", "if", "dst", "==", "h_node_list", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                ", "continue", "\n", "", "temp_h_node_list", "=", "temp_h_node_list", "[", "1", ":", "]", "\n", "for", "src", "in", "temp_h_node_list", ":", "\n", "                ", "if", "src", "==", "dst", ":", "continue", "\n", "readout_h_h_e_list", ".", "append", "(", "(", "src", ",", "dst", ")", ")", "\n", "\n", "# readout h_o_e_list", "\n", "", "", "readout_h_o_e_list", "=", "[", "x", "for", "x", "in", "readout_edge_list", "if", "x", "not", "in", "readout_h_h_e_list", "]", "\n", "\n", "# add node space to match the batch graph", "\n", "h_node_list", "=", "(", "np", ".", "array", "(", "h_node_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "obj_node_list", "=", "(", "np", ".", "array", "(", "obj_node_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "\n", "h_h_e_list", "=", "(", "np", ".", "array", "(", "h_h_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "#empty no diff_edge", "\n", "o_o_e_list", "=", "(", "np", ".", "array", "(", "o_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "#empty no diff_edge", "\n", "h_o_e_list", "=", "(", "np", ".", "array", "(", "h_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "#empty no diff_edge", "\n", "\n", "readout_h_h_e_list", "=", "(", "np", ".", "array", "(", "readout_h_h_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "readout_h_o_e_list", "=", "(", "np", ".", "array", "(", "readout_h_o_e_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "readout_edge_list", "=", "(", "np", ".", "array", "(", "readout_edge_list", ")", "+", "node_space", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "edge_list", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.AGRNN._build_graph": [[436, 448], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "scene_graph.AGRNN._collect_edge", "tuple", "dgl.DGLGraph.add_edges", "zip"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.AGRNN._collect_edge"], ["", "def", "_build_graph", "(", "self", ",", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", ":", "\n", "        ", "'''\n        Declare graph, add_nodes, collect edges, add_edges\n        '''", "\n", "graph", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "graph", ".", "add_nodes", "(", "node_num", ")", "\n", "\n", "edge_list", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "=", "self", ".", "_collect_edge", "(", "node_num", ",", "roi_label", ",", "node_space", ",", "diff_edge", ")", "\n", "src", ",", "dst", "=", "tuple", "(", "zip", "(", "*", "edge_list", ")", ")", "\n", "graph", ".", "add_edges", "(", "src", ",", "dst", ")", "# make the graph bi-directional", "\n", "\n", "return", "graph", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.AGRNN.forward": [[449, 488], ["numpy.cumsum", "range", "dgl.batch", "scene_graph.AGRNN.grnn1", "dgl.batch.apply_edges", "len", "scene_graph.AGRNN._build_graph", "dgl.batch.append", "tuple", "zip", "tuple", "tuple", "tuple", "zip", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.AGRNN._build_graph"], ["", "def", "forward", "(", "self", ",", "node_num", "=", "None", ",", "feat", "=", "None", ",", "spatial_feat", "=", "None", ",", "word2vec", "=", "None", ",", "roi_label", "=", "None", ",", "validation", "=", "False", ",", "choose_nodes", "=", "None", ",", "remove_nodes", "=", "None", ")", ":", "\n", "\n", "        ", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "batch_readout_edge_list", ",", "batch_readout_h_h_e_list", ",", "batch_readout_h_o_e_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "node_num_cum", "=", "np", ".", "cumsum", "(", "node_num", ")", "# !IMPORTANT", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "node_num", ")", ")", ":", "\n", "# set node space", "\n", "            ", "node_space", "=", "0", "\n", "if", "i", "!=", "0", ":", "\n", "                ", "node_space", "=", "node_num_cum", "[", "i", "-", "1", "]", "\n", "", "graph", ",", "h_node_list", ",", "obj_node_list", ",", "h_h_e_list", ",", "o_o_e_list", ",", "h_o_e_list", ",", "readout_edge_list", ",", "readout_h_h_e_list", ",", "readout_h_o_e_list", "=", "self", ".", "_build_graph", "(", "node_num", "[", "i", "]", ",", "roi_label", "[", "i", "]", ",", "node_space", ",", "diff_edge", "=", "self", ".", "diff_edge", ")", "\n", "\n", "# update batch", "\n", "batch_graph", ".", "append", "(", "graph", ")", "\n", "batch_h_node_list", "+=", "h_node_list", "\n", "batch_obj_node_list", "+=", "obj_node_list", "\n", "\n", "batch_h_h_e_list", "+=", "h_h_e_list", "\n", "batch_o_o_e_list", "+=", "o_o_e_list", "\n", "batch_h_o_e_list", "+=", "h_o_e_list", "\n", "\n", "batch_readout_edge_list", "+=", "readout_edge_list", "\n", "batch_readout_h_h_e_list", "+=", "readout_h_h_e_list", "\n", "batch_readout_h_o_e_list", "+=", "readout_h_o_e_list", "\n", "\n", "", "batch_graph", "=", "dgl", ".", "batch", "(", "batch_graph", ")", "\n", "\n", "# GRNN", "\n", "self", ".", "grnn1", "(", "batch_graph", ",", "batch_h_node_list", ",", "batch_obj_node_list", ",", "batch_h_h_e_list", ",", "batch_o_o_e_list", ",", "batch_h_o_e_list", ",", "feat", ",", "spatial_feat", ",", "word2vec", ",", "validation", ",", "initial_feat", "=", "True", ")", "\n", "batch_graph", ".", "apply_edges", "(", "self", ".", "edge_readout", ",", "tuple", "(", "zip", "(", "*", "(", "batch_readout_h_o_e_list", "+", "batch_readout_h_h_e_list", ")", ")", ")", ")", "\n", "\n", "if", "self", ".", "training", "or", "validation", ":", "\n", "# !NOTE: cannot use \"batch_readout_h_o_e_list+batch_readout_h_h_e_list\" because of the wrong order", "\n", "            ", "return", "batch_graph", ".", "edges", "[", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", "]", ".", "data", "[", "'pred'", "]", ",", "batch_graph", ".", "edges", "[", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", "]", ".", "data", "[", "'scene_feat'", "]", "\n", "", "else", ":", "\n", "            ", "return", "batch_graph", ".", "edges", "[", "tuple", "(", "zip", "(", "*", "batch_readout_edge_list", ")", ")", "]", ".", "data", "[", "'pred'", "]", ",", "batch_graph", ".", "nodes", "[", "batch_h_node_list", "]", ".", "data", "[", "'alpha'", "]", ",", "batch_graph", ".", "nodes", "[", "batch_h_node_list", "]", ".", "data", "[", "'alpha_lang'", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.scene_graph.get_activation": [[144, 155], ["torch.ReLU", "scene_graph.Identity", "torch.Tanh", "torch.Sigmoid", "torch.LeakyReLU"], "function", ["None"], ["", "", "def", "get_activation", "(", "name", ")", ":", "\n", "    ", "'''\n    get_activation function\n    argument: Activation name (eg. ReLU, Identity, Tanh, Sigmoid, LeakyReLU)\n    '''", "\n", "if", "name", "==", "'ReLU'", ":", "return", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "elif", "name", "==", "'Identity'", ":", "return", "Identity", "(", ")", "\n", "elif", "name", "==", "'Tanh'", ":", "return", "nn", ".", "Tanh", "(", ")", "\n", "elif", "name", "==", "'Sigmoid'", ":", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "elif", "name", "==", "'LeakyReLU'", ":", "return", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "else", ":", "assert", "(", "False", ")", ",", "'Not Implemented'", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.Namespace.__init__": [[38, 40], ["segmentation_model.Namespace.__dict__.update"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.BasicBlock.__init__": [[87, 117], ["torch.Module.__init__", "segmentation_model.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "segmentation_model.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.conv3x3", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "\n", "", "self", ".", "planes", "=", "planes", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.BasicBlock.forward": [[118, 135], ["segmentation_model.BasicBlock.conv1", "segmentation_model.BasicBlock.bn1", "segmentation_model.BasicBlock.relu", "segmentation_model.BasicBlock.conv2", "segmentation_model.BasicBlock.bn2", "segmentation_model.BasicBlock.relu", "segmentation_model.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.Bottleneck.__init__": [[148, 174], ["torch.Module.__init__", "segmentation_model.conv1x1", "norm_layer", "segmentation_model.conv3x3", "norm_layer", "segmentation_model.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.conv1x1", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.conv3x3", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "\n", "# self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.Bottleneck.forward": [[175, 197], ["segmentation_model.Bottleneck.conv1", "segmentation_model.Bottleneck.bn1", "segmentation_model.Bottleneck.relu", "segmentation_model.Bottleneck.conv2", "segmentation_model.Bottleneck.bn2", "segmentation_model.Bottleneck.relu", "segmentation_model.Bottleneck.conv3", "segmentation_model.Bottleneck.bn3", "segmentation_model.Bottleneck.relu", "segmentation_model.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "# Downsampling of the input variable (x)", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet.__init__": [[208, 266], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "segmentation_model.ResNet._make_layer", "segmentation_model.ResNet._make_layer", "segmentation_model.ResNet._make_layer", "segmentation_model.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "segmentation_model.ResNet.modules", "len", "ValueError", "isinstance", "segmentation_model.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet._make_layer", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet._make_layer", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet._make_layer", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet._make_layer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# Each element in the tuple indicates whether we should replace the 2x2 stride with a dilated convolution ", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet._make_layer": [[267, 291], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "segmentation_model.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet._forward_impl": [[293, 305], ["segmentation_model.ResNet.conv1", "segmentation_model.ResNet.bn1", "segmentation_model.ResNet.relu", "segmentation_model.ResNet.maxpool", "segmentation_model.ResNet.layer1", "segmentation_model.ResNet.layer2", "segmentation_model.ResNet.layer3", "segmentation_model.ResNet.layer4"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", "->", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "c1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "c2", "=", "self", ".", "layer2", "(", "c1", ")", "\n", "c3", "=", "self", ".", "layer3", "(", "c2", ")", "\n", "c4", "=", "self", ".", "layer4", "(", "c3", ")", "\n", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet.forward": [[307, 309], ["segmentation_model.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.BaseNet.__init__": [[321, 333], ["torch.Module.__init__", "segmentation_model.get_backbone"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.get_backbone"], ["def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "pretrained", ",", "dilated", "=", "True", ",", "norm_layer", "=", "None", ",", "\n", "root", "=", "'~/.encoding/models'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nclass", "=", "nclass", "\n", "\n", "# Copying modules from pretrained models", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "pretrained", "=", "get_backbone", "(", "backbone", ",", "pretrained", "=", "pretrained", ",", "dilated", "=", "dilated", ",", "\n", "norm_layer", "=", "norm_layer", ",", "root", "=", "root", ",", "\n", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "pretrained", ".", "fc", "=", "None", "\n", "self", ".", "_up_kwargs", "=", "up_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.BaseNet.base_forward": [[334, 346], ["segmentation_model.BaseNet.pretrained.conv1", "segmentation_model.BaseNet.pretrained.bn1", "segmentation_model.BaseNet.pretrained.relu", "segmentation_model.BaseNet.pretrained.maxpool", "segmentation_model.BaseNet.pretrained.layer1", "segmentation_model.BaseNet.pretrained.layer2", "segmentation_model.BaseNet.pretrained.layer3", "segmentation_model.BaseNet.pretrained.layer4"], "methods", ["None"], ["", "def", "base_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "pretrained", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pretrained", ".", "maxpool", "(", "x", ")", "\n", "c", "=", "self", ".", "pretrained", ".", "layer1", "(", "x", ")", "\n", "c", "=", "self", ".", "pretrained", ".", "layer2", "(", "c", ")", "\n", "c", "=", "self", ".", "pretrained", ".", "layer3", "(", "c", ")", "\n", "c", "=", "self", ".", "pretrained", ".", "layer4", "(", "c", ")", "\n", "\n", "return", "None", ",", "None", ",", "None", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.BaseNet.evaluate": [[347, 357], ["segmentation_model.BaseNet.forward", "isinstance", "batch_pix_accuracy", "batch_intersection_union"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.forward", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.batch_pix_accuracy", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.utils.segmentation_eval_matrix.batch_intersection_union"], ["", "def", "evaluate", "(", "self", ",", "x", ",", "target", "=", "None", ")", ":", "\n", "        ", "pred", "=", "self", ".", "forward", "(", "x", ")", "\n", "if", "isinstance", "(", "pred", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "pred", "=", "pred", "[", "0", "]", "\n", "", "if", "target", "is", "None", ":", "\n", "            ", "return", "pred", "\n", "", "correct", ",", "labeled", "=", "batch_pix_accuracy", "(", "pred", ".", "data", ",", "target", ".", "data", ")", "\n", "inter", ",", "union", "=", "batch_intersection_union", "(", "\n", "pred", ".", "data", ",", "target", ".", "data", ",", "self", ".", "nclass", ")", "\n", "return", "correct", ",", "labeled", ",", "inter", ",", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.Resnet18_main.__init__": [[399, 412], ["torch.Module.__init__", "segmentation_model.resnet18", "torch.Conv2d", "torch.Conv2d", "segmentation_model.Resnet18_main._normal_initialization"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.resnet18", "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.Resnet18_main._normal_initialization"], ["def", "__init__", "(", "self", ",", "pretrained", ",", "num_classes", "=", "1000", ")", ":", "\n", "\n", "        ", "super", "(", "Resnet18_main", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet18_block", "=", "resnet18", "(", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n", "resnet18_block", ".", "fc", "=", "nn", ".", "Conv2d", "(", "resnet18_block", ".", "inplanes", ",", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "resnet18_block", "=", "resnet18_block", "\n", "self", ".", "_normal_initialization", "(", "self", ".", "resnet18_block", ".", "fc", ")", "\n", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "kernel_size", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.Resnet18_main._normal_initialization": [[414, 418], ["layer.weight.data.normal_", "layer.bias.data.zero_"], "methods", ["None"], ["", "def", "_normal_initialization", "(", "self", ",", "layer", ")", ":", "\n", "\n", "        ", "layer", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "layer", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.Resnet18_main.forward": [[419, 423], ["segmentation_model.Resnet18_main.resnet18_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "self", ".", "resnet18_block", "(", "x", ")", "\n", "\n", "return", "c1", ",", "c2", ",", "c3", ",", "c4", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GCN.__init__": [[434, 442], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.AvgPool1d", "torch.AvgPool1d"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "num_state", ",", "num_node", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "num_node", ",", "num_node", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "num_state", ",", "num_state", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "\n", "stride", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "x_avg_pool", "=", "nn", ".", "AvgPool1d", "(", "128", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GCN.forward": [[443, 456], ["segmentation_model.GCN.conv1().permute", "segmentation_model.GCN.relu", "segmentation_model.GCN.conv2", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "segmentation_model.GCN.conv1", "segmentation_model.GCN.x_avg_pool", "torch.matmul.permute().contiguous", "torch.matmul.permute().contiguous", "x.permute().contiguous", "x.permute().contiguous", "torch.matmul.permute", "torch.matmul.permute", "x.permute", "x.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "scene_feat", "=", "None", ",", "model_type", "=", "None", ")", ":", "\n", "        ", "h", "=", "self", ".", "conv1", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "if", "(", "model_type", "==", "'amtl-t1'", "or", "model_type", "==", "'mtl-t1'", ")", "and", "scene_feat", "is", "not", "None", ":", "# (x+h+(avg(x)*f))", "\n", "            ", "x_p", "=", "torch", ".", "matmul", "(", "self", ".", "x_avg_pool", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ",", "scene_feat", ")", "\n", "h", "=", "h", "+", "x", "+", "x_p", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "h", "+", "x", "\n", "\n", "", "h", "=", "self", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "conv2", "(", "h", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GloRe_Unit.__init__": [[469, 489], ["torch.Module.__init__", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "segmentation_model.GCN", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "num_in", ",", "num_mid", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "kernel", "=", "1", ")", ":", "\n", "        ", "super", "(", "GloRe_Unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_s", "=", "int", "(", "2", "*", "num_mid", ")", "\n", "self", ".", "num_n", "=", "int", "(", "1", "*", "num_mid", ")", "\n", "\n", "kernel_size", "=", "(", "kernel", ",", "kernel", ")", "\n", "padding", "=", "(", "1", ",", "1", ")", "if", "kernel", "==", "3", "else", "(", "0", ",", "0", ")", "\n", "\n", "# Reduce dimension", "\n", "self", ".", "conv_state", "=", "nn", ".", "Conv2d", "(", "num_in", ",", "self", ".", "num_s", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "# generate graph transformation function", "\n", "self", ".", "conv_proj", "=", "nn", ".", "Conv2d", "(", "num_in", ",", "self", ".", "num_n", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "# ----------", "\n", "self", ".", "gcn", "=", "GCN", "(", "num_state", "=", "self", ".", "num_s", ",", "num_node", "=", "self", ".", "num_n", ")", "\n", "# ----------", "\n", "# tail: extend dimension", "\n", "self", ".", "fc_2", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_s", ",", "num_in", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "blocker", "=", "nn", ".", "BatchNorm2d", "(", "num_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GloRe_Unit.forward": [[490, 522], ["x.size", "segmentation_model.GloRe_Unit.conv_state().view", "segmentation_model.GloRe_Unit.conv_proj().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul.view", "segmentation_model.GloRe_Unit.permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "segmentation_model.GloRe_Unit.gcn", "segmentation_model.GloRe_Unit.blocker", "segmentation_model.GloRe_Unit.conv_state", "segmentation_model.GloRe_Unit.conv_proj", "torch.matmul.size", "torch.matmul.size", "segmentation_model.GloRe_Unit.fc_2", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "x.size", "torch.matmul.permute().contiguous", "torch.matmul.permute().contiguous", "torch.matmul.permute", "torch.matmul.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "scene_feat", "=", "None", ",", "model_type", "=", "None", ")", ":", "\n", "        ", "'''\n        Parameter x dimension : (N, C, H, W)\n        '''", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "x_state_reshaped", "=", "self", ".", "conv_state", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "num_s", ",", "-", "1", ")", "\n", "x_proj_reshaped", "=", "self", ".", "conv_proj", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "num_n", ",", "-", "1", ")", "\n", "x_rproj_reshaped", "=", "x_proj_reshaped", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "\n", "# Projection: Coordinate space -> Interaction space", "\n", "x_n_state", "=", "torch", ".", "matmul", "(", "x_state_reshaped", ",", "x_proj_reshaped", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "x_n_state", "=", "x_n_state", "*", "(", "1.", "/", "x_state_reshaped", ".", "size", "(", "2", ")", ")", "\n", "\n", "if", "model_type", "==", "'amtl-t2'", "or", "model_type", "==", "'mtl-t2'", ":", "\n", "            ", "x_n_rel", "=", "torch", ".", "matmul", "(", "x_n_state", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "scene_feat", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_n_rel", "=", "self", ".", "gcn", "(", "x_n_state", ",", "scene_feat", ",", "model_type", ")", "\n", "\n", "", "out2", "=", "None", "\n", "if", "model_type", "==", "'amtl-t3'", "or", "model_type", "==", "'mtl-t3'", ":", "\n", "            ", "out2", "=", "x_n_rel", "\n", "\n", "# Reverse projection: Interaction space -> Coordinate space", "\n", "", "x_state_reshaped", "=", "torch", ".", "matmul", "(", "x_n_rel", ",", "x_rproj_reshaped", ")", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "x_state", "=", "x_state_reshaped", ".", "view", "(", "batch_size", ",", "self", ".", "num_s", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "out", "=", "x", "+", "self", ".", "blocker", "(", "self", ".", "fc_2", "(", "x_state", ")", ")", "\n", "\n", "return", "out", ",", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_Decoder.__init__": [[537, 557], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "GR_Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Scale-specific channel dimensions ", "\n", "inter_channels", "=", "in_channels", "//", "2", "# 256", "\n", "c2", "=", "inter_channels", "//", "2", "# 128", "\n", "c1", "=", "c2", "//", "2", "# 64", "\n", "\n", "# Scale-specific decoder layers with simple Conv-BN-ReLU-Dropout-Conv Block", "\n", "self", ".", "s1_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "c1", ",", "c1", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "c1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "nn", ".", "Conv2d", "(", "c1", ",", "out_channels", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "s2_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "c2", ",", "c2", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "c2", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "nn", ".", "Conv2d", "(", "c2", ",", "out_channels", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "s3_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "inter_channels", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "nn", ".", "Conv2d", "(", "inter_channels", ",", "out_channels", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "s4_decoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "inter_channels", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Dropout2d", "(", "0.1", ")", ",", "nn", ".", "Conv2d", "(", "256", ",", "out_channels", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_Decoder.forward": [[559, 576], ["list", "range", "tuple", "len", "outputs.append", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "segmentation_model.GR_Decoder.s1_layer", "segmentation_model.GR_Decoder.s2_layer", "segmentation_model.GR_Decoder.s3_layer", "tuple", "segmentation_model.GR_Decoder.s4_decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "s1", "=", "None", ",", "s2", "=", "None", ",", "s3", "=", "None", ",", "imsize", "=", "None", ",", "seg_mode", "=", "None", ")", ":", "\n", "        ", "x", "=", "list", "(", "tuple", "(", "[", "self", ".", "s4_decoder", "(", "x", ")", "]", ")", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "\n", "interpolate", "(", "x", "[", "i", "]", ",", "imsize", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "\n", "# V1 and V2_GC are Segmentation modes, MSLRGR and MSGR Respectively", "\n", "", "if", "seg_mode", "==", "'v2_gc'", "or", "seg_mode", "==", "'v1'", ":", "\n", "            ", "s1", "=", "interpolate", "(", "self", ".", "s1_layer", "(", "s1", ")", ",", "imsize", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "s2", "=", "interpolate", "(", "self", ".", "s2_layer", "(", "s2", ")", ",", "imsize", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "s3", "=", "interpolate", "(", "self", ".", "s3_layer", "(", "s3", ")", ",", "imsize", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", "=", "outputs", "[", "0", "]", "\n", "outputs", "=", "s1", "+", "s2", "+", "s3", "+", "outputs", "\n", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outputs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_Segmentation.__init__": [[587, 597], ["segmentation_model.BaseNet.__init__", "segmentation_model.GR_module", "segmentation_model.GR_Decoder"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "nclass", ",", "backbone", ",", "pretrained", ",", "aux", "=", "False", ",", "se_loss", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "gcn_search", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GR_Segmentation", ",", "self", ")", ".", "__init__", "(", "nclass", ",", "backbone", ",", "pretrained", ",", "norm_layer", "=", "norm_layer", ",", "**", "kwargs", ")", "\n", "\n", "in_channels", "=", "512", "\n", "\n", "# GR module", "\n", "self", ".", "gr_interaction", "=", "GR_module", "(", "in_channels", ",", "nclass", ",", "norm_layer", ",", "gcn_search", ")", "\n", "\n", "# GR decoder", "\n", "self", ".", "gr_decoder", "=", "GR_Decoder", "(", "in_channels", ",", "nclass", ",", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_Segmentation.forward": [[600, 612], ["segmentation_model.GR_Segmentation.base_forward", "segmentation_model.GR_Segmentation.gr_interaction", "segmentation_model.GR_Segmentation.gr_decoder", "segmentation_model.GR_Segmentation.size"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.BaseNet.base_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "imsize", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "\n", "# Encoder module", "\n", "s1", ",", "s2", ",", "s3", ",", "s4", "=", "self", ".", "base_forward", "(", "x", ")", "\n", "\n", "# GCN with 1 conv block to bridge to GloRE Unit", "\n", "x", "=", "self", ".", "gr_interaction", "(", "c4", ")", "\n", "\n", "# Decoder module", "\n", "x", "=", "self", ".", "gr_decoder", "(", "x", ",", "imsize", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__": [[627, 642], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "segmentation_model.GloRe_Unit", "segmentation_model.GloRe_Unit", "segmentation_model.GloRe_Unit", "segmentation_model.GloRe_Unit", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ",", "gcn_search", ")", ":", "\n", "        ", "super", "(", "GR_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "inter_channels", "=", "in_channels", "//", "2", "# 256", "\n", "c2", "=", "inter_channels", "//", "2", "# 128", "\n", "c1", "=", "c2", "//", "2", "# 64", "\n", "\n", "# Simple Conv-BN-ReLU Block", "\n", "self", ".", "conv_s4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "norm_layer", "(", "inter_channels", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Scale-specific GR unit (GloRE)", "\n", "self", ".", "gcn1", "=", "GloRe_Unit", "(", "c1", ",", "64", ",", "kernel", "=", "1", ")", "\n", "self", ".", "gcn2", "=", "GloRe_Unit", "(", "c2", ",", "64", ",", "kernel", "=", "1", ")", "\n", "self", ".", "gcn3", "=", "GloRe_Unit", "(", "inter_channels", ",", "64", ",", "kernel", "=", "1", ")", "\n", "self", ".", "gcn4", "=", "GloRe_Unit", "(", "inter_channels", ",", "64", ",", "kernel", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.GR_module.forward": [[643, 664], ["segmentation_model.GR_module.gcn1", "segmentation_model.GR_module.gcn2", "segmentation_model.GR_module.gcn3", "segmentation_model.GR_module.gcn4", "segmentation_model.GR_module.conv_s4", "segmentation_model.GR_module.gcn4", "segmentation_model.GR_module.gcn4", "segmentation_model.GR_module.conv_s4", "segmentation_model.GR_module.conv_s4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "s1", "=", "None", ",", "s2", "=", "None", ",", "s3", "=", "None", ",", "scene_feat", "=", "None", ",", "seg_mode", "=", "None", ",", "model_type", "=", "None", ")", ":", "\n", "\n", "        ", "feat1", "=", "None", "\n", "feat2", "=", "None", "\n", "feat3", "=", "None", "\n", "feat5", "=", "None", "\n", "\n", "if", "seg_mode", "==", "'v2_gc'", ":", "# MODE - MSGR", "\n", "            ", "feat1", ",", "_", "=", "self", ".", "gcn1", "(", "s1", ",", "scene_feat", ")", "\n", "feat2", ",", "_", "=", "self", ".", "gcn2", "(", "s2", ",", "scene_feat", ")", "\n", "feat3", ",", "_", "=", "self", ".", "gcn3", "(", "s3", ",", "scene_feat", ")", "\n", "feat4", ",", "feat5", "=", "self", ".", "gcn4", "(", "self", ".", "conv_s4", "(", "x", ")", ",", "scene_feat", ",", "model_type", ")", "\n", "\n", "", "elif", "seg_mode", "==", "'v1'", ":", "# MODE - MSLRGR", "\n", "            ", "feat1", ",", "feat2", ",", "feat3", "=", "s1", ",", "s2", ",", "s3", "\n", "feat4", ",", "feat5", "=", "self", ".", "gcn4", "(", "self", ".", "conv_s4", "(", "x", ")", ",", "scene_feat", ",", "model_type", ")", "\n", "\n", "", "else", ":", "\n", "            ", "feat4", ",", "feat5", "=", "self", ".", "gcn4", "(", "self", ".", "conv_s4", "(", "x", ")", ",", "scene_feat", ",", "model_type", ")", "\n", "\n", "", "return", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.get_backbone": [[41, 55], ["name.lower.lower", "ValueError", "str", "sorted", "models.keys"], "function", ["None"], ["", "", "def", "get_backbone", "(", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Function to get backbone feature extractor \n    Inputs: name of backbone, **kwargs\n\n    \"\"\"", "\n", "models", "=", "{", "\n", "'resnet18_model'", ":", "resnet18_model", ",", "\n", "}", "\n", "name", "=", "name", ".", "lower", "(", ")", "\n", "if", "name", "not", "in", "models", ":", "\n", "        ", "raise", "ValueError", "(", "'%s\\n\\t%s'", "%", "(", "str", "(", "name", ")", ",", "'\\n\\t'", ".", "join", "(", "sorted", "(", "models", ".", "keys", "(", ")", ")", ")", ")", ")", "\n", "", "net", "=", "models", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.conv3x3": [[57, 65], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"\n    3x3 convolution with padding\n    Inputs: in_planes, out_planes, stride, groups, dilation\n\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.conv1x1": [[67, 74], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"\n    1x1 convolution\n    Inputs: in_planes, out_planes, stride\n\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model._resnet": [[359, 382], ["segmentation_model.ResNet", "print", "torch.load", "torch.load", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "\n", "    ", "\"\"\"\n    ResNet model function to load pre-trained model: Class call\n    init    : \n        arch, block, layers, pretrained, progress, **kwargs\n        \n    forward : x\n    \"\"\"", "\n", "\n", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "\"Loading pre-trained ImageNet weights\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "'models/r18/resnet18-f37072fd.pth'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.resnet18": [[384, 392], ["segmentation_model._resnet"], "function", ["home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model._resnet"], ["", "def", "resnet18", "(", "pretrained", ":", "bool", "=", "True", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "\"\"\"\n    ResNet18 model call function\n    Inputs: pretrained, progress, **kwargs\n\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.resnet18_model": [[665, 668], ["segmentation_model.Resnet18_main"], "function", ["None"], ["", "", "def", "resnet18_model", "(", "pretrained", "=", "True", ",", "root", "=", "'~/.encoding/models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Resnet18_main", "(", "pretrained", ",", "num_classes", "=", "8", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lalithjets_global-reasoned-multi-task-model.models.segmentation_model.get_gcnet": [[670, 673], ["segmentation_model.GR_Segmentation"], "function", ["None"], ["", "def", "get_gcnet", "(", "dataset", "=", "'endovis18'", ",", "backbone", "=", "'resnet18_model'", ",", "num_classes", "=", "8", ",", "pretrained", "=", "False", ",", "root", "=", "'./pretrain_models'", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "GR_Segmentation", "(", "nclass", "=", "num_classes", ",", "backbone", "=", "backbone", ",", "pretrained", "=", "pretrained", ",", "root", "=", "root", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]]}